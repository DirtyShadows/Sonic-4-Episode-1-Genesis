00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	'_inc\s2_constants.asm'
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            ; some constants and variables of this code and other constants of sonic 2 used in this code
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            
00000000                            ; files
00000000                            Nem_LevelIcons					equ	Level_Icons
00000000                            Eni_MenuBg						equ MapEng_MenuBack
00000000                            ArtNem_FontStuff				equ	Nem_MenuFont
00000000                            ArtNem_1P2PWins					equ Nem_1P2PWins
00000000                            MapEng_MenuBack					equ	Menu_Mappings
00000000                            MapEng_Options					equ	Eni_MenuBox
00000000                            MapUnc_Sonic					equ	Map_Sonic
00000000                            Obj38_MapUnc_1DBE4				equ	Map_obj38
00000000                            byte_1DBD6						equ	Ani_obj38
00000000                            ArtUnc_Sonic					equ	Art_Sonic
00000000                            MapRUnc_Sonic					equ	SonicDynPLC
00000000                            Load_Sprites					equ ObjPosLoad
00000000                            ; ===========================================================================
00000000                            ; routines
00000000                            JmpTo_PlayMusic					equ	PlaySound
00000000                            Play_Sfx						equ	PlaySound_Special	
00000000                            PlayMusic						equ	PlaySound
00000000                            JmpTo_PlaySoundStereo			equ	PlaySound_Special
00000000                            WaitForVint						equ	DelayProgram
00000000                            JmpTo2_Dynamic_Normal			equ	Dynamic_Menu
00000000                            Anim_SonicMilesBG				equ	Sonic_Miles_Frame_Select
00000000                            level_select_cheat				equ	Code_Level_Select
00000000                            continues_cheat					equ	Code_Continues
00000000                            CheckCheats						equ	Menu_Code_Test
00000000                            JmpTo_PlaneMapToVRAM			equ	ShowVDPGraphics
00000000                            PlaneMapToVRAM					equ	ShowVDPGraphics
00000000                            Player_ResetAirTimer			equ	ResumeMusic
00000000                            RunObjects						equ	ObjectsLoad
00000000                            Sonic_InputAcceleration_Path	equ	Sonic_Move
00000000                            SingleObjectLoad				equ	SingleObjLoad
00000000                            S1SingleObjectLoad				equ	SingleObjLoad2
00000000                            CalcRoomInFront					equ	Sonic_WalkSpeed
00000000                            AnglePos						equ	Sonic_AnglePos
00000000                            ObjectMove						equ	SpeedToPos
00000000                            ObjectMoveAndFall				equ	ObjectFall
00000000                            KillSonic						equ	KillCharacter
00000000                            CheckGameOver					equ	GameOver
00000000                            Sonic_CheckFloor				equ	Sonic_HitFloor
00000000                            checkleftceilingdist			equ	loc_14FD6
00000000                            CheckCeilingDist				equ	Sonic_DontRunOnWalls
00000000                            checkleftwalldist				equ	Sonic_HitWall
00000000                            CheckRightCeilingDist			equ	sub_14E50
00000000                            CheckRightWallDist				equ	sub_14EB4
00000000                            CalcRoomOverHead				equ	sub_14D48
00000000                            ChkFloorEdge					equ	ObjHitFloor
00000000                            ChkFloorEdge_Part2				equ	ObjHitFloor2
00000000                            Sonic_HitFloor2					equ	loc_13772
00000000                            Sonic_HitCeiling2				equ	loc_13758
00000000                            Sonic_HitRightWall				equ loc_1373E
00000000                            ObjCheckFloorDist				equ ObjHitFloor
00000000                            loc_1B02C						equ	loc_13726
00000000                            Sonic_HitCeilingAndWalls		equ loc_136E2
00000000                            Sonic_HitFloorS2				equ	loc_136B4
00000000                            Sonic_DoLevelCollision			equ	Sonic_Floor
00000000                            ; ===========================================================================
00000000                            ; constants
00000000 =00000091                  Level_Select_Menu_snd			=	$0091
00000000 =00000091                  MusID_Options					=	$0091
00000000 =000000BF                  SndID_ContinueJingle			=	$00BF
00000000 =000000F7                  Emerald_Snd						=	$00F7
00000000 =000000B5                  Ring_Snd						=	$00B5
00000000 =000000E0                  Volume_Down						=	$00E0
00000000 =000000E4                  Stop_Sound						=	$00E4
00000000                            
00000000 =00000014                  PalID_Menu						=	$14
00000000 =00000081                  MusID_2PResult					=	$81
00000000                            
00000000 =0000000C                  GameModeID_Level				=	$0C
00000000 =00000000                  GameModeID_SegaScreen			=	$00
00000000 =00000010                  GameModeID_SpecialStage			=	$10
00000000 =00000020                  GameModeID_2PResults			=	$20
00000000 =00000020                  GameModeID_2PLevelSelect		=	$20
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Controller Buttons
00000000                            ;
00000000                            ; Buttons bit numbers
00000000 =00000000                  button_up:                      EQU     0
00000000 =00000001                  button_down:                    EQU     1
00000000 =00000002                  button_left:                    EQU     2
00000000 =00000003                  button_right:                   EQU     3
00000000 =00000004                  button_B:                       EQU     4
00000000 =00000005                  button_C:                       EQU     5
00000000 =00000006                  button_A:                       EQU     6
00000000 =00000007                  button_start:                   EQU     7
00000000                            ; Buttons masks (1 << x == pow(2, x))
00000000 =00000001                  button_up_mask:                 EQU     1<<button_up    ; $01
00000000 =00000002                  button_down_mask:               EQU     1<<button_down  ; $02
00000000 =00000004                  button_left_mask:               EQU     1<<button_left  ; $04
00000000 =00000008                  button_right_mask:              EQU     1<<button_right ; $08
00000000 =00000010                  button_B_mask:                  EQU     1<<button_B     ; $10
00000000 =00000020                  button_C_mask:                  EQU     1<<button_C     ; $20
00000000 =00000040                  button_A_mask:                  EQU     1<<button_A     ; $40
00000000 =00000080                  button_start_mask:              EQU     1<<button_start ; $80
00000000                            
00000000                            
00000000 =00000000                  VsRSID_Act						equ	0
00000000 =00000001                  VsRSID_Zone						equ	1
00000000 =00000002                  VsRSID_Game						equ	2
00000000 =00000003                  VsRSID_SS						equ	3
00000000 =00000004                  VsRSID_SSZone					equ	4
00000000                            
00000000 =00000090                  ObjID_HUD						equ	$90
00000000 =00000040                  id2								equ	$40
00000000                            
00000000 =00000000                  id equ                      0 ; object ID (if you change this, change insn1op and insn2op in s2.macrosetup.asm, if you still use them)
00000000 =00000001                  render_flags equ		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile equ		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings equ		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos equ			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000A                  x_sub equ			 $A
00000000 =0000000C                  y_pos equ			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =0000000E                  y_sub equ			 $E
00000000 =00000018                  priority equ		$18 ; 0 = front
00000000 =00000023                  width_pixels equ		$23
00000000 =0000001A                  mapping_frame equ		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel equ			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel equ			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius equ		$16 ; collision width / 2
00000000 =00000017                  x_radius equ		$17 ; collision height / 2
00000000 =0000001B                  anim_frame equ		$1B
00000000 =0000001C                  anim equ			$1C
00000000 =0000001D                  next_anim equ		$1D
00000000 =0000001E                  anim_frame_duration equ	$1E
00000000 =00000022                  status equ		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine equ		$24
00000000 =00000025                  routine_secondary equ	$25
00000000 =00000026                  angle equ			$26 ; angle about the zequ0 axis (360 degrees equ 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags equ	$20
00000000 =00000021                  collision_property equ	$21
00000000 =00000014                  respawn_index equ		$14
00000000 =00000028                  subtype equ		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000020                  inertia equ		$20 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000031                  flip_angle equ		$31 ; angle about the xequ0 axis (360 degrees equ 256) (twist/tumble)
00000000 =00000028                  air_left equ		$28
00000000 =00000035                  flip_turned equ		$35 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control equ		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary equ	$2B
00000000 =00000033                  flips_remaining equ	$33 ; number of flip revolutions remaining
00000000 =00000034                  flip_speed equ		$34 ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock equ		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time equ	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time equ	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time equ	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt equ		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt equ			$37 ; angle on ground
00000000 =00000038                  stick_to_convex equ	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag equ		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter equ	$3A ; and $3B
00000000 =0000003C                  jumping equ		$3C
00000000 =0000003D                  interact equ		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer equ			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus equ		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel equ		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel equ		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent equ		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000 =00000020                  NumberOfZones equ $20
00000000                            ; TODO: $2C is often parent instead (see LoadChildObject); consider defining parent2 = $2C and changing some objoff_2Cs to that
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by some/most bosses:
00000000 =0000000A                  boss_subtype		= $A
00000000 =00000014                  boss_invulnerable_time	= $14
00000000 =0000001A                  boss_sine_count		= $1A	; mapping_frame
00000000 =00000026                  boss_routine		= $26	; angle
00000000 =0000002C                  boss_defeated		= $2C
00000000 =00000032                  boss_hitcount2		= $32
00000000 =00000038                  boss_hurt_sonic		= $38	; flag set by collision response routine when sonic has just been hurt (by boss?)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; when childsprites are activated (i.e. bit #6 of render_flags set)
00000000 =0000000B                  mainspr_mapframe	= $B
00000000 =0000000E                  mainspr_width		= $E
00000000 =0000000F                  mainspr_childsprites 	= $F	; amount of child sprites
00000000 =00000014                  mainspr_height		= $14
00000000 =00000010                  sub2_x_pos		= $10	; x_vel
00000000 =00000012                  sub2_y_pos		= $12	; y_vel
00000000 =00000015                  sub2_mapframe		= $15
00000000 =00000016                  sub3_x_pos		= $16	; y_radius
00000000 =00000018                  sub3_y_pos		= $18	; priority
00000000 =0000001B                  sub3_mapframe		= $1B	; anim_frame
00000000 =0000001C                  sub4_x_pos		= $1C	; anim
00000000 =0000001E                  sub4_y_pos		= $1E	; anim_frame_duration
00000000 =00000021                  sub4_mapframe		= $21	; collision_property
00000000 =00000022                  sub5_x_pos		= $22	; status
00000000 =00000024                  sub5_y_pos		= $24	; routine
00000000 =00000027                  sub5_mapframe		= $27
00000000 =00000028                  sub6_x_pos		= $28	; subtype
00000000 =0000002A                  sub6_y_pos		= $2A
00000000 =0000002D                  sub6_mapframe		= $2D
00000000 =0000002E                  sub7_x_pos		= $2E
00000000 =00000030                  sub7_y_pos		= $30
00000000 =00000033                  sub7_mapframe		= $33
00000000 =00000034                  sub8_x_pos		= $34
00000000 =00000036                  sub8_y_pos		= $36
00000000 =00000039                  sub8_mapframe		= $39
00000000 =0000003A                  sub9_x_pos		= $3A
00000000 =0000003C                  sub9_y_pos		= $3C
00000000 =0000003F                  sub9_mapframe		= $3F
00000000 =00000006                  next_subspr		= $6
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A equ		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B equ		3+x_pos
00000000 =0000000E                  objoff_E equ		2+y_pos
00000000 =0000000F                  objoff_F equ		3+y_pos
00000000 =00000014                  objoff_14 equ		$14
00000000 =00000015                  objoff_15 equ		$15
00000000 =0000001F                  objoff_1F equ		$1F
00000000 =00000027                  objoff_27 equ		$27
00000000 =00000028                  objoff_28 equ		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 equ $29
00000000 =0000002A                  objoff_2A equ $2A
00000000 =0000002B                  objoff_2B equ $2B
00000000 =0000002C                  objoff_2C equ $2C
00000000 =0000002D                  objoff_2D equ $2D
00000000 =0000002E                  objoff_2E equ $2E
00000000 =0000002F                  objoff_2F equ $2F
00000000 =00000030                  objoff_30 equ $30
00000000 =00000031                  objoff_31 equ $31
00000000 =00000032                  objoff_32 equ $32
00000000 =00000033                  objoff_33 equ $33
00000000 =00000034                  objoff_34 equ $34
00000000 =00000035                  objoff_35 equ $35
00000000 =00000036                  objoff_36 equ $36
00000000 =00000037                  objoff_37 equ $37
00000000 =00000038                  objoff_38 equ $38
00000000 =00000039                  objoff_39 equ $39
00000000 =0000003A                  objoff_3A equ $3A
00000000 =0000003B                  objoff_3B equ $3B
00000000 =0000003C                  objoff_3C equ $3C
00000000 =0000003D                  objoff_3D equ $3D
00000000 =0000003E                  objoff_3E equ $3E
00000000 =0000003F                  objoff_3F equ $3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  object_size =           $40 ; the size of an object
00000000 =00000040                  next_object =           object_size
00000000                            
00000000 =00A130F1                  SRAM_access_flag =		$A130F1
00000000                            
00000000 =00000000                  __ = $00
00000000 =00000010                  _0 = $10
00000000 =00000011                  _1 = $11
00000000 =00000012                  _2 = $12
00000000 =0000001E                  _A = $1E
00000000 =0000001F                  _B = $1F
00000000 =00000020                  _C = $20
00000000 =00000021                  _D = $21
00000000 =00000022                  _E = $22    
00000000 =00000023                  _F = $23
00000000 =00000024                  _G = $24
00000000 =00000025                  _H = $25
00000000 =00000026                  _I = $26
00000000 =00000027                  _J = $27
00000000 =00000028                  _K = $28
00000000 =00000029                  _L = $29
00000000 =0000002A                  _M = $2A
00000000 =0000002B                  _N = $2B
00000000 =0000002C                  _O = $2C
00000000 =0000002D                  _P = $2D
00000000 =0000002E                  _Q = $2E
00000000 =0000002F                  _R = $2F
00000000 =00000030                  _S = $30
00000000 =00000031                  _T = $31
00000000 =00000032                  _U = $32
00000000 =00000033                  _V = $33
00000000 =00000034                  _W = $34
00000000 =00000035                  _X = $35
00000000 =00000036                  _Y = $36
00000000 =00000037                  _Z = $37
00000000 =0000001A                  _st = $1A
00000000                            
00000000                            ; ===========================================================================
00000000                            ; variables and flags
00000000 =00C00004                  VDP_control_port				equ	$C00004
00000000 =FFFF0000                  Chunk_Table						equ	$FFFF0000
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot			equ	$FFFFC8FC
00000000 =FFFFD000                  MainCharacter					equ	$FFFFD000
00000000 =FFFFD000                  VSResults_HUD					equ	$FFFFD000
00000000 =FFFFC800                  VDP_Command_Buffer				equ	$FFFFC800
00000000 =FFFFF700                  Camera_X_pos					equ	$FFFFF700
00000000 =FFFFF704                  Camera_Y_pos					equ	$FFFFF704
00000000 =FFFFF708                  Camera_BG_X_pos					equ	$FFFFF708 ; word
00000000 =FFFFF70C                  Camera_BG_Y_pos 				equ $FFFFF70C	; word
00000000 =FFFFF710                  Camera_BG2_X_pos 				equ $FFFFF710	; word
00000000 =FFFFF714                  Camera_BG2_Y_pos 				equ $FFFFF714	; word
00000000 =FFFFF718                  Camera_BG3_X_pos 				equ $FFFFF718	; word
00000000 =FFFFF71C                  Camera_BG3_Y_pos 				equ $FFFFF71C	; word
00000000 =FFFFF600                  Game_Mode						equ	$FFFFF600
00000000 =FFFFF60C                  VDP_Reg1_val					equ	$FFFFF60C
00000000 =FFFFF605                  Ctrl_1_Press					equ	$FFFFF605
00000000 =FFFFF614                  Demo_Time_left					equ	$FFFFF614
00000000 =FFFFF61A                  Vscroll_Factor					equ	$FFFFF61A
00000000 =FFFFF62A                  Vint_routine					equ	$FFFFF62A
00000000 =FFFFF680                  Plc_Buffer						equ	$FFFFF680
00000000 =FFFFF711                  Level_started_flag				equ	$FFFFF711
00000000 =FFFFFF94                  Reverse_gravity_flag 			equ	$FFFFFF94
00000000 =FFFFFE0C                  Vint_runcount					equ	$FFFFFE0C
00000000 =FFFFFE10                  Current_ZoneAndAct				equ	$FFFFFE10
00000000 =FFFFFE10                  Current_Zone_2P					equ	$FFFFFE10
00000000 =FFFFFE11                  Current_Act						equ	$FFFFFE11
00000000 =FFFFFE11                  Current_Act_2P					equ	$FFFFFE11
00000000 =FFFFFE12                  Life_count						equ	$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage			equ	$FFFFFE16
00000000 =FFFFFE18                  Continue_count					equ	$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag				equ $FFFFFE19
00000000 =FFFFFE20                  Ring_count						equ	$FFFFFE20
00000000 =FFFFFE22                  Timer							equ	$FFFFFE22
00000000 =FFFFFE22                  Timer_minute_word				equ	$FFFFFE22
00000000 =FFFFFE24                  Timer_second					equ	$FFFFFE24
00000000 =FFFFFE25                  Timer_frame						equ	$FFFFFE25
00000000 =FFFFFE26                  Score							equ	$FFFFFE26
00000000 =FFFFFE30                  Last_star_pole_hit				equ	$FFFFFE30
00000000 =FFFFFE32                  Saved_x_pos						equ	 $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos						equ	 $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count				equ	 $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer						equ	 $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile					equ	 $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer						equ	 $FFFFFE3E
00000000 =FFFFFE57                  Emeralds_flag					equ	$FFFFFE57
00000000 =FFFFFEC2                  Game_Over_2P					equ	$FFFFFEC2
00000000 =FFFFFF80                  LevSel_HoldTimer				equ	$FFFFFF80
00000000                            ;Level_select_zone				equ	$FFFFFF81
00000000 =FFFFFF84                  Sound_test_sound				equ	$FFFFFF84
00000000 =FFFFFF74                  Options_menu_box				equ	$FFFFFF74
00000000 =FFFFFF90                  Results_Screen_2P				equ	$FFFFFF90
00000000 =FFFFFF92                  SS_Total_Won					equ	$FFFFFF92
00000000 =FFFFFF96                  Monitors_Broken					equ	$FFFFFF96
00000000 =FFFFFF98                  Rings_Collected					equ	$FFFFFF98
00000000 =FFFFFFA8                  Results_Data_2P					equ	$FFFFFFA8
00000000 =FFFFFFA8                  EHZ_Results_2P					equ	$FFFFFFA8
00000000 =FFFFFFAE                  MCZ_Results_2P					equ	$FFFFFFAE
00000000 =FFFFFFB4                  CNZ_Results_2P					equ	$FFFFFFB4
00000000 =FFFFFFBA                  SS_Results_2P					equ	$FFFFFFBA
00000000 =FFFFFFD0                  Level_select_flag				equ	$FFFFFFD0
00000000 =FFFFFFD1                  Slow_Motion_Flag				equ	$FFFFFFD1
00000000 =FFFFFFD4                  Correct_cheat_entries			equ	$FFFFFFD4 
00000000 =FFFFFFD6                  Correct_cheat_entries_2 		equ	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFDA                  Debug_Mode_Flag					equ	$FFFFFFDA
00000000 =FFFFFFF8                  Graphics_Flags					equ	$FFFFFFF8
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            	include	'#macros\equates.asm'
00000000                            
00000000                            ; Variaveis para selecionar qual letra dos Title Cards devem ser carregadas para
00000000                            ; a VRAM
00000000 =00000004                  TC_A                    equ  $0004
00000000 =00000404                  TC_B                    equ  $0404
00000000 =00000804                  TC_C                    equ  $0804
00000000 =00000C04                  TC_D                    equ  $0C04
00000000 =00001004                  TC_F                    equ  $1004
00000000 =00001404                  TC_G                    equ  $1404
00000000 =00001804                  TC_H                    equ  $1804
00000000 =00001C02                  TC_I                    equ  $1C02
00000000 =00001E04                  TC_J                    equ  $1E04
00000000 =00002204                  TC_K                    equ  $2204
00000000 =00002604                  TC_L                    equ  $2604
00000000 =00002A06                  TC_M                    equ  $2A06
00000000 =00003004                  TC_P                    equ  $3004
00000000 =00003404                  TC_Q                    equ  $3404
00000000 =00003804                  TC_R                    equ  $3804
00000000 =00003C04                  TC_S                    equ  $3C04
00000000 =00004004                  TC_T                    equ  $4004
00000000 =00004404                  TC_U                    equ  $4404
00000000 =00004804                  TC_V                    equ  $4804
00000000 =00004C06                  TC_W                    equ  $4C06
00000000 =00005204                  TC_X                    equ  $5204
00000000 =00005604                  TC_Y                    equ  $5604  
00000000 =00005A02                  TCpt                    equ  $5A02   ; "." 
00000000 =0000FFFF                  TC_Break                equ  $FFFF
00000000                            
00000000                            
00000000 =00000080                  Start	= $80
00000000 =00000070                  ABC	= $70
00000000 =00000040                  A	= $40
00000000 =00000020                  C	= $20
00000000 =00000010                  B	= $10
00000000 =00000008                  Right	= $08
00000000 =00000004                  Left	= $04
00000000 =00000002                  Down	= $02
00000000 =00000001                  Up	= $01
00000000 =000000CD                  Option_Select_Sfx equ $CD 
00000000                            
00000000                            
00000000 =FFFF8000                  Level_Layout 			equ $FFFF8000
00000000 =FFFF8080                  Level_BG_Layout 		equ $FFFF8080
00000000 =FFFF9000                  Block_Table 			equ $FFFF9000
00000000 =FFFFF796                  Collision_addr  		equ $FFFFF796
00000000 =FFFFFE10                  Zone_Id					equ $FFFFFE10	;	Check wich Zone should be activated now
00000000 =FFFFFE11                  Act_Id					equ $FFFFFE11	;	Check wich Act should be activated now (Act 1, Act 2, Act 3 or Act 4)
00000000 =FFFFFF88                  Game_Mode_Ram			equ $FFFFFF88	;	Game Mode/Difficulty (Original, Harder or Expert)
00000000 =FFFFFFB0                  PlaylistType			equ	$FFFFFFB0	;	Fixed Playlist Type (A, B or C)
00000000 =FFFFFF76                  Player_option			equ $FFFFFF76	;	Who you choose on Options? (0-> Sonic, 1-> Tails, 2-> Knuckles)
00000000 =FFFFFFAB                  Current_Character		equ $FFFFFFAB	;	0 -> Sonic, 1 -> Tails, 2 -> Knuckles
00000000 =FFFFFFF6                  Knuckles_Gliding_Flag	equ $FFFFFFF6	;	Address to store Knuckles Gliding information
00000000 =FFFFFFF7                  Unknown_Flag			equ $FFFFFFF7	;	Unknown Flag used on some climb functions on the Knuckles code
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00FFF000                  Sound_Driver_RAM equ $FFF000
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start		equ $FFFF0000 
00000000 =FFFF0000                  Metablock_Table		equ $FFFF0000 
00000000 =FFFF8000                  Level_Layout			equ $FFFF8000 
00000000 =FFFF9000                  Block_Table			equ $FFFF9000 
00000000 =FFFFAA00                  Decomp_Buffer			equ $FFFFAA00 
00000000 =FFFFAC00                  Sprite_Table_Input 		equ $FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFD000                  Object_RAM			equ $FFFFD000 ; through $FFFFD5FF
00000000 =FFFFD040                  Sidekick			equ $FFFFD040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails			equ $FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD1C0                  Sonic_Dust			equ $FFFFD1C0 
00000000 =FFFFD140                  Tails_Dust			equ $FFFFD140 
00000000                            
00000000 =FFFFD000                  PNT_Buffer			equ $FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision		equ $FFFFD600 
00000000 =FFFFD700                  Horiz_Scroll_Buf_2		equ $FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision		equ $FFFFD900 
00000000 =FFFFDD00                  Sprite_Table_2		equ $FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFCC00                  Horiz_Scroll_Buf		equ $FFFFCC00 
00000000 =FFFFCA00                  Sonic_Stat_Record_Buf		equ $FFFFCA00
00000000 =FFFFCB00                  Sonic_Pos_Record_Buf		equ $FFFFCB00
00000000 =FFFFE600                  Tails_Pos_Record_Buf		equ $FFFFE600
00000000 =FFFFCE00                  Ring_Positions		equ $FFFFCE00
00000000 =FFFFF700                  Camera_RAM			equ $FFFFF700
00000000                            ;Camera_X_pos			equ $FFFFEE00
00000000                            ;Camera_Y_pos			equ $FFFFEE04
00000000 =FFFFE726                  Camera_Max_Y_pos		equ $FFFFE726
00000000 =FFFFF728                  Camera_Min_X_pos		equ $FFFFF728
00000000 =FFFFF72A                  Camera_Max_X_pos		equ $FFFFF72A
00000000 =FFFFF72C                  Camera_Min_Y_pos		equ $FFFFF72C
00000000 =FFFFF72E                  Camera_Max_Y_pos_now		equ $FFFFF72E ; was "Camera_max_scroll_spd"...
00000000 =FFFFF7A8                  Sonic_Pos_Record_Index	equ $FFFFF7A8 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFF736                  Tails_Pos_Record_Index	equ $FFFFF736 ; into Tails_Pos_Record_Buf
00000000 =FFFFF73E                  Camera_Y_pos_bias		equ $FFFFF73E ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P		equ $FFFFEEDA ; for Tails
00000000 =FFFFF742                  Dynamic_Resize_Routine	equ $FFFFF742
00000000 =FFFFEEF8                  Tails_Min_X_pos		equ $FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos		equ $FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos		equ $FFFFEEFE
00000000                            
00000000 =FFFFFA00                  Underwater_palette_2 		equ $FFFFFA00 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFFA80                  Underwater_palette 		equ $FFFFFA80 ; main palette for underwater parts of the screen
00000000 =FFFFFAE0                  Underwater_palette_line4 	equ $FFFFFAE0
00000000                            
00000000 =FFFFF600                  Game_Mode			equ $FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical		equ $FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical		equ $FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical		equ $FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1			equ $FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held			equ $FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press			equ $FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2			equ $FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held			equ $FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press			equ $FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left		equ $FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF624                  Hint_counter_reserve		equ $FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time			equ $FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed			equ $FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused			equ $FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk		equ $FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1			equ $FFFFF646
00000000 =FFFFF648                  Water_Level_2			equ $FFFFF648
00000000 =FFFFF64A                  Water_Level_3			equ $FFFFF64A
00000000 =FFFFF64D                  Water_routine			equ $FFFFF64D
00000000 =FFFFF64E                  Water_move			equ $FFFFF64E
00000000 =FFFFF64C                  Water_on			equ $FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level		equ $FFFFF650
00000000 =FFFFF652                  Water_change_speed		equ $FFFFF652
00000000 =FFFFF65E                  Palette_frame_count		equ $FFFFF65E
00000000 =FFFFF65F                  Super_Sonic_palette		equ $FFFFF65F
00000000 =FFFFF66A                  Ctrl_2_Logical		equ $FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical		equ $FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical		equ $FFFFF66B ; 1 byte
00000000 =FFFFC903                  Sonic_Look_delay_counter 	equ $FFFFC903 ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter 	equ $FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count	equ $FFFFF670
00000000 =FFFFF680                  Plc_Buffer			equ $FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables		equ $FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter		equ $FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter		equ $FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine	equ $FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x		equ $FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y		equ $FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID		equ $FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag		equ $FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine		equ $FFFFF71A
00000000 =FFFFF745                  Dirty_flag			equ $FFFFF745 ; if whole screen needs to redraw
00000000 =FFFFFFA4                  Transforming_Flag equ	$FFFFFFA4
00000000 =FFFFF760                  Sonic_top_speed		equ $FFFFF760
00000000 =FFFFF762                  Sonic_acceleration		equ $FFFFF762
00000000 =FFFFF764                  Sonic_deceleration		equ $FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine		equ $FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0		equ $FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1		equ $FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2		equ $FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3		equ $FFFFF77C
00000000 =FFFFF790                  Demo_button_index		equ $FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter		equ $FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P		equ $FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P		equ $FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr		equ $FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID		equ $FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked		equ $FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter		equ $FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1		equ $FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2		equ $FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score		equ $FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse		equ $FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table			equ $FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette		equ $FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2		equ $FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3		equ $FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4		equ $FFFFFB60
00000000 =FFFFFB80                  Second_palette		equ $FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2		equ $FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3		equ $FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4		equ $FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table		equ $FFFFFC00
00000000 =FFFFFE00                  System_Stack			equ $FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag 		equ $FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames			equ $FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object			equ $FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode		equ $FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct		equ $FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone			equ $FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act			equ $FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count			equ $FFFFFE12 
00000000 =FFFFFE16                  Current_Special_Stage		equ $FFFFFE16
00000000 =FFFFFE18                  Continue_count		equ $FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag		equ $FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag		equ $FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags		equ $FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives		equ $FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings		equ $FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer		equ $FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score		equ $FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count			equ $FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer				equ $FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word		equ $FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute			equ $FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second			equ $FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond		equ $FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score				equ $FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit		equ $FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit	equ $FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos			equ $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos			equ $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count		equ $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer			equ $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile		equ $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer			equ $FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos		equ $FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos		equ $FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level		equ $FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine		equ $FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move		equ $FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags	equ $FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P	equ $FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos	equ $FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine	equ $FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter		equ $FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame		equ $FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter		equ $FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame		equ $FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter		equ $FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame		equ $FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter	equ $FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame		equ $FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum		equ $FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed		equ $FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration		equ $FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration		equ $FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P			equ $FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P		equ $FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P		equ $FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P		equ $FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P		equ $FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P		equ $FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P		equ $FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P			equ $FFFFFED0
00000000 =FFFFFED2                  Timer_2P			equ $FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P		equ $FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P		equ $FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P		equ $FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P		equ $FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P			equ $FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P		equ $FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P	equ $FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P		equ $FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P		equ $FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P		equ $FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P		equ $FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P		equ $FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P		equ $FFFFFEEE
00000000                            
00000000 =FFFFFF74                  Two_player_items		equ $FFFFFF74
00000000 =FFFFFF82                  Level_select_zone		equ $FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound		equ $FFFFFF84
00000000 =FFFFFF86                  Title_screen_option		equ $FFFFFF86
00000000 =FFFFFF8A                  Two_player_mode_copy		equ $FFFFFF8A
00000000 =FFFFFF90                  Level_Music			equ $FFFFFF90
00000000 =FFFFFFB0                  Got_Emerald			equ $FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count			equ $FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array		equ $FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score		equ $FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P	equ $FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost		equ $FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD4                  Correct_cheat_entries		equ $FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2	equ $FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFF88                  Two_player_mode		equ $FFFFFF88 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =00FFF003                  Music_Pause   = Sound_Driver_RAM+$003
00000000 =00FFF00A                  Music_to_play = Sound_Driver_RAM+$00A
00000000 =00FFF00B                  SFX_to_play   = Sound_Driver_RAM+$00B ; normal
00000000 =00FFF00C                  SFX_to_play_2 = Sound_Driver_RAM+$00C ; alternating stereo
00000000 =00FFF00C                  Music_to_play_2	= Sound_Driver_RAM+$00C ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag		equ $FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number			equ $FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags		equ $FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc		equ $FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000
00000000 =00A14000                  Security_Addr =			$A14000
00000000                            	include	'#macros\asm68kfix.asm'
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	endm
00000000                            	include	'#macros\misc.asm'
00000000 =FFFFFFBC                  Water_Flag                    equ       $FFFFFFBC  ; if the level has water
00000000                            ; Extracted from S1hackingStudio by VladikComper
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            	include	'(Mercury) Fixes.asm'
00000000                            ; ELECTIVE MODS
00000000                            ; ================================================================================
00000000                            
00000000 =00000000                  Revision: = 0
00000000                            ; Name: Wall Jump
00000000                            ; Function: Gives Sonic a Wall Jump ability
00000000                            ; Date: 2011-02-02 (Feb), 2011-02-03 (Feb), 2011-02-05 (Feb)
00000000                            ; Depends On: Constants, Macros
00000000 =00000001                  WallJumpActive: = 1
00000000                            
00000000                            ; Name: Move Lamppost VRAM
00000000                            ; Function: Moves the Lamppost tiles in VRAM to allow for things like dust or the Insta-Shield to fit instead.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  MoveLamppostVRAM: = 1
00000000                            
00000000                            ; Name: UseDMAQueue
00000000                            ; Function: Uses a DMA queue to load Sonic's art, freeing RAM and allowing Spin Dash dust or the Insta-Shield to function.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  UseDMAQueue: = 1
00000000                            
00000000                            ; Name: Spin Dash
00000000                            ; Function: Enables the Sonic 2 Spin Dash
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  SpinDashActive: = 1
00000000 =00000001                  	SpinDashDustActive: = SpinDashActive*MoveLamppostVRAM*UseDMAQueue*1	; activates animated dust sprite when Spin Dashing
00000000 =00000001                  	SpinDashSFXActive: = SpinDashActive*1	; activates the correct Spin Dash SFX instead of the roll sound
00000000 =00000001                  	SpinDashCancel: = SpinDashActive*1	; makes Sonic stop Spin Dashing if the A/B/C button is let up for long enough
00000000 =00000001                  	SpinDashNoRevDown: = SpinDashActive*1	; makes the Spin Dash not rev down as long as A/B/C button is held down
00000000 =00000001                  	SpinDashCameraLag: = SpinDashActive*1	; makes the camera lag behind when Sonic launches
00000000                            ; Notes: You should also apply the following fixes to avoid bugs: Walking In Air Fix, Pushing While Walking Fix, High Speed Camera Fix, Caterkiller Fix
00000000                            
00000000                            ; Name: Dash CD
00000000                            ; Function: Enables the Sonic CD Dash (aka Super Peel Out).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  DashCDActive: = 1
00000000                            
00000000                            ; Name: Balance CD
00000000                            ; Function: Uses the Sonic CD balancing sprites (forward and back) instead of Sonic 1's.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  BalanceCDActive: = 1
00000000                            
00000000                            ; Name: Insta-Shield
00000000                            ; Function: Enables the Sonic 3/K Insta-Shield.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000000                  InstaShieldActive: = 0
00000000                            ; Notes: Not yet functional
00000000                            
00000000                            ; Name: Simple Cheat Entry
00000000                            ; Function: Enters Level Select, Debug Mode, Slow Mo, and extended Sound Test cheats automatically upon U,D,L,R,A,Start
00000000                            ; Date: 2011-02-05 (Feb)
00000000 =00000001                  SimpleCheatEntry: = 1
00000000                            
00000000                            ; Name: Monitor Art Optimise
00000000                            ; Function: Shuffles the Monitor Art in order to free 8 free tiles (useful for modding HUD)
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  MonitorArtOptimise: = 1
00000000                            
00000000                            ; Name: HUD Centiseconds
00000000                            ; Function: Adds Sonic CD-style centiseconds to the HUD
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-07 (Feb), 2011-02-09 (Feb)
00000000 =00000001                  HUDCentiseconds: = MonitorArtOptimise*1
00000000                            
00000000                            ; Name: Chunks In ROM
00000000                            ; Function: Loads Chunks (256x256) directly from ROM, freeing a huge amount of RAM ($0000-$A3FF)
00000000                            ; Date: 2011-02-05 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  ChunksInROM: = 1
00000000                            
00000000                            ; Name: Blocks In ROM
00000000                            ; Function: Similar to "Chunks In ROM" only with Blocks (16x16), freeing a huge amount of RAM ($B000-$C7FF)
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  BlocksInROM: = 1
00000000                            
00000000                            ; Name: HUD Has Leading Zeroes
00000000                            ; Function: Gives Rings, Score and Lives leading zeroes (i.e. 001 as opposed to 1)
00000000                            ; Date: 2011-02-09 (Feb)
00000000                            ; Thanks to: Markey Jester
00000000 =00000000                  HUDHasLeadingZeroes: = 0
00000000                            
00000000                            ; Name: TIME/RINGS Flash Fix
00000000                            ; Function: Makes TIME and RINGS words in the HUD flash under the correct circumstances
00000000                            ; Date: 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Thanks To: 
00000000 =00000001                  TimeRingsFlashFix: = 1
00000000 =00000001                  	TimeRingsFlashFixNotRed: = TimeRingsFlashFix*1	; when true, "TIME" and "RINGS" will flash on and off instead of flashing red. Useful when changing palettes.
00000000                            
00000000                            ; Name: Dynamic Special Stage Walls 
00000000                            ; Function: Dynamically loads the wall art in the Special Stages to free VRAM (for things like the HUD)
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb)
00000000 =00000000                  DynamicSpecialStageWalls: = 0
00000000                            
00000000                            ; Name: HUD In Special Stage
00000000                            ; Function: Adds HUD to Special Stage. Also useful for adding a decreasing time limit to Special Stage
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls
00000000 =00000000                  HUDInSpecialStage: = DynamicSpecialStageWalls*1
00000000 =00000000                  	HUDInSpecialStageType: = 0	; 0=normal; 1=score not shown; 2=score & time not shown; 3=rings only
00000000                            	
00000000                            ; Name: Time Limit in Special Stage
00000000                            ; Function: If HUDInSpecialStage is active, the Special Stage has a working 9:59 time limit anyway, but this makes it a decreasing one with custom values
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls, HUD In Special Stage, Time Rings Flash Fix
00000000 =00000000                  TimeLimitInSpecialStage: = HUDInSpecialStage*TimeRingsFlashFix*1
00000000 =00001E00                  	TimeLimitInSpecialStagePinch: = $00001E00	; "pinch" threshold that time must reach in order to trigger "TIME" to flash. Format: $000MSSCC
00000000 =00010000                  	TimeLimitInSpecialStageStart: = $00010000	; time on the clock to start with when Special Stage is entered. Format: $000MSSCC
00000000                            		;IMPORTANT! TimeLimitInSpecialStageStart must always end in 00,
00000000                            
00000000                            ; Name: Title Screen Palette Fix
00000000                            ; Function: Uses the proper GHZ palette on the Title Screen
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  TitleScreenPaletteFix: = 1
00000000                            
00000000                            ; Name: Special Stage Jump Fix
00000000                            ; Function: Gives Sonic variable jump height in the Special Stage to be more fair and consistent with the rest of the game
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  SpecialStageJumpFix: = 1
00000000                            
00000000                            ; Name: Warm Palette Mod
00000000                            ; Function: Gives the game a Chaotix-like shine that helps mask the palette changes and update the look
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000000                  WarmPaletteMod: = 0
00000000                            ; Notes: Not yet functional.
00000000                            
00000000                            ; Name: Shield Art Mod
00000000                            ; Function: Attempts to improve the look of the shield.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ShieldArtMod: = 1	; set to 1 to simply make the mirroring less obvious; set to 2 to make it solid, smooth and more like Chaotix's shield art.
00000000                            	; It's not recommended to set this to 2 unless Warm Palette Mod is on.
00000000                            
00000000                            ; Name: Sonic CD Roll Jump
00000000                            ; Function: Makes the Roll Jump work like Sonic CD (Sonic can still control his horizontal trajectory). Frees up a status bit for Sonic.
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  SonicCDRollJump: = 1
00000000                            
00000000                            ; Name: Rebound Mod
00000000                            ; Function: Makes rebounding from enemies/monitors after rolling off a cliff onto them function the same as if they were jumped on - the rebound is cut short if the jump button is released.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ReboundMod: = 1
00000000                            
00000000                            ; Name: Enable Press Start Button Message
00000000                            ; Function: Makes the "Press Start Button" message appear correctly on the Title Screen
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  EnablePSBMessage: = 1
00000000                            
00000000                            ; Name: Limit LZ Block Rising Speed
00000000                            ; Function: Limits the rising speed of blocks in LZ so that Sonic can jump off them more comfortably.
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  LimitLZBlockRisingSpeed: = 1
00000000                            
00000000                            ; Name: Speed Up Score Tally
00000000                            ; Function: Allows the player to hold a button to speed up the score tally
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  SpeedUpScoreTally: = 1
00000000                            
00000000                            ; Name: Spike SFX Fix
00000000                            ; Function: Makes the proper sound effect play when Sonic is harmed by Spikes/LZ Harpoons.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  SpikeSFXFix: = 1
00000000                            
00000000                            ; Name: Rolling Turn Around Fix
00000000                            ; Function: Prevents Sonic from turning around while rolling (which without this fix could be abused to roll in place forever).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  RollingTurnAroundFix: = 1
00000000                            
00000000                            ; Name: Scroll Delay
00000000                            ; Function: Adds a delay before the screen begins to scroll when looking up and down. This is essential if adding the Spin Dash or Super Peel Out.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by shobiz
00000000 =00000001                  ScrollDelay: = 1
00000000 =00000078                  	ScrollDelayTime: = 120	; number of steps before the screen starts to scroll.
00000000                            	
00000000                            ; Name: Look Shift Fix
00000000                            ; Function: Fixing the looking up/down camera shift so that it stops at zone boundaries, preventing a delay when returning to the neutral position.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  LookShiftFix: = 1
00000000                            
00000000                            ; Name: Spike Fix
00000000                            ; Function: Prevents spikes from harming Sonic while he's flashing.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  SpikeFix: = 1
00000000                            
00000000                            ; Name: Caterkiller Fix
00000000                            ; Function: Makes it safe to roll into the caterkiller from the front at high speeds without fear of being hurt some times and not others.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  CaterkillerFix: = 1
00000000                            
00000000                            ; Name: Custom Demo Delay
00000000                            ; Function: Makes it possible to customise how long the Title Screen waits before going to a demo.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  CustomDemoDelay: = 1
00000000 =00000280                  	CustomDemoDelayTime: = $280	; delay until demo is played; default is $178; use -1 for never (will return to Sega Screen eventually, though).
00000000                            
00000000                            ; Name: Orbinaut Animation Tweak
00000000                            ; Function: Makes Orbinaut "notice" Sonic at a closer range so that it's more likely to happen onscreen, and "get angry" quicker.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  OrbinautAnimationTweak: = 1
00000000 =00000080                  	OrbinautAnimationTweakRange: = $80	; horizontal range in pixels at which Sonic is noticed by the Orbinaut
00000000 =00000008                  	OrbinautAnimationTweakSpeed: = $8	; animation speed of the Orbinaut's "getting angry" animation
00000000                            	
00000000                            ; Name: SLZ Orbinaut Behaviour Mod
00000000                            ; Function: Makes the SLZ Orbinauts beatable by giving them behaviour similar to Sonic 4's.
00000000                            ; Date: 2011-03-06 (Mar)
00000000 =00000001                  SLZOrbinautBehaviourMod: = 1
00000000                            	
00000000                            ; Name: Newtron Behaviour Tweak
00000000                            ; Function: Slightly alters the behaviour of Newtrons.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  NewtronBehaviourTweak: = 3
00000000                            	; set to 1 to make red-blue Newtrons vulnerable after they finish appearing but before they land
00000000                            	; set to 2 to make yellow-green Newtrons reappear once Sonic leaves the vicinity and returns
00000000                            	; set to 3 for both of the above
00000000                            
00000000                            ; Name: Lost Rings Flash
00000000                            ; Function: Makes Lost Rings flash before they disappear.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  LostRingsFlash: = 1
00000000 =00000050                  	LostRingsFlashTime: = 80	; number of steps of life the rings need to have left before they start to flash.
00000000                            	
00000000                            ; Name: FZ Boss Invuln Mod
00000000                            ; Function: Allows you to customise the number of steps the FZ Boss's invulnerability lasts.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  FZBossInvulnMod: = 1
00000000 =00000020                  	FZBossInvulnModTime: = $20	; default is $64.
00000000                            
00000000                            ; Name: Disable Speed Cap
00000000                            ; Function: Disables the speed cap in the air and on the ground.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  DisableSpeedCap: = 3
00000000                            	; set to 1 to remove ground speed cap
00000000                            	; set to 2 to remove air speed cap
00000000                            	; set to 3 for both of the above
00000000                            	
00000000                            ; Name: Giant Ring Art Loads With End Sign
00000000                            ; Function: Makes the Giant Ring art load when End Sign's does, avoiding some issues.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: MZ2 Layout Fix
00000000 =00000001                  GiantRingArtLoadsWithEndSign: = 1
00000000                            
00000000                            ; Name: Special Stage Index Increases Only If Won
00000000                            ; Function: Makes the Special Stage index not increase when you fail the stage, allowing you to practise the stages more easily because next time you enter one it'll be the same one you failed last time.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStageIndexIncreasesOnlyIfWon: = 1
00000000                            
00000000                            ; Name: Special Stages Still Appear With All Emeralds
00000000                            ; Function: Makes the Special Stages still accessible even once all emeralds are collected. Of course more emeralds aren't possible to be collected; they are replaced with Continues, making use of the unused 1-up item in the Special Stages.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStagesStillAppearWithAllEmeralds: = 1
00000000                            	
00000000                            ; Name: Giant Rings In SBZ
00000000                            ; Function: Adds Giant Rings (and therefore extra shots at the Special Stage) to SBZ1 and SBZ2.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Modifies: levels\sbz2.bin, objpos\sbz1.bin, objpos\sbz1 (JP1).bin, objpos\sbz2.bin
00000000 =00000001                  GiantRingsInSBZ: = GiantRingArtLoadsWithEndSign*1
00000000 =000004DA                  	GiantRingsInSBZArtLoc1: = $4DA	; originally $400, this is where the Giant Ring art is loaded into VRAM
00000000 =00000568                  	GiantRingsInSBZArtLoc2: = $568	; originally $518, this is where the SBZ Crumbling Floor art is loaded into VRAM
00000000 =000003A0                  	GiantRingsInSBZArtLoc3: = $3A0	; originally $400, this is where the SBZ Eggman art is loaded into VRAM
00000000 =000004C0                  	GiantRingsInSBZArtLoc4: = $4C0	; originally $4A0, this is where the SBZ Eggman Switch art is loaded into VRAM
00000000                            
00000000                            ; Name: Padding Active
00000000                            ; Function: Pads the ROM with a value until it reaches a certain number of megs
00000000                            ; Date: 2011-02-27 (Feb)
00000000 =00000001                  PaddingActive: = 1
00000000 =000000FF                  	PaddingValue: = $FF
00000000 =00000001                  	PaddingMegs: = 1
00000000                            	
00000000                            ; Name: Quarterloop Fix
00000000                            ; Function: Makes Sonic behave better when running back down quarterloops by using Sonic 2's code.
00000000                            ; Date: 2011-03-15 (Mar)
00000000 =00000001                  QuarterloopFix: = 1
00000000                            
00000000                            ; Name: Magnetic Rings
00000000                            ; Function: Gives Rings ability to be attracted to Sonic while he has a Shield.
00000000                            ; Date: 2011-03-24 (Mar)
00000000 =00000001                  MagneticRings: = 1
00000000                            
00000000                            ; Name:  Rings Bounce At Zone Bottom
00000000                            ; Function: Rings will bounce off of the bottom boundary of the Zone, making SYZ boss more fair.
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  RingsBounceAtZoneBottom: = 1
00000000                            
00000000                            ; PERMANENT MODS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Name: Continue Sonic Art Fix
00000000                            ; Function: Fixes some incorrect pixels in Sonic's Continue screen sprite.
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: artnem\Continue Screen Sonic.bin
00000000                            
00000000                            ; Name: GHZ3 Wall Solidity
00000000                            ; Function: Fixes a wall object in GHZ3 after the Lamppost that was set to be solid. (It was, of course, solid for a reason: to fix a bug with the platform right next to it. However, the platform could be moved to the right by 16 pixels to solve the problem, too, so that's what I did.)
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: objpos\GHZ3 (JP1).bin
00000000                            
00000000                            ; Name: Special Stage Cloud Fix
00000000                            ; Function: Fixed the base special stage palette so that the clouds wouldn't flicker when it first fades in, plus altered the fading palette to not have ugly clashing purples
00000000                            ; Date: 2011-02-06 (Feb)
00000000                            ; Modifies: palette\Cycle - Special Stage 1.bin, palette\Special Stage.bin
00000000                            
00000000                            ; Name: Roller Art Fix
00000000                            ; Function: Fixes garbled Roller tiles in SYZ
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: inc\Pattern Load Cues.bin
00000000                            
00000000                            ; Name: Sonic Shoe Stripe Fix
00000000                            ; Function: Adds stripe to Sonic's shoe for the sprites it's missing in (using Sonic 2's tiles)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artunc\Sonic.bin
00000000                            
00000000                            ; Name: Sonic Roll Frame Fix
00000000                            ; Function: Changes Sonic's frame immediately when he rolls up in order to fix flickering while in S-Tunnels (and potentially elsewhere)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: _incObj\Sonic Roll.asm
00000000                            
00000000                            ; Name: Hedgehog E Fix
00000000                            ; Function: Very minor pixel edit to "THE HEDGEHOG" on Title Screen to fix the inconsistent E's
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artnem\Title Screen Foreground.bin
00000000                            
00000000                            ; Name: GHZ2 Spring Fix
00000000                            ; Function: Fixes a backward Spring in GHZ2
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: objpos\GHZ2.bin
00000000                            
00000000                            ; Name: Top Boundary Fix
00000000                            ; Function: Prevents Sonic from dying when he passes the top boundary while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Hurt Splash Fix
00000000                            ; Function: Fixes the missing splash when Sonic hits the water surface while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Pushing While Walking Fix
00000000                            ; Function: Fixes the bug that makes Sonic use his pushing animation while walking away from walls
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic Animate.asm
00000000                            
00000000                            ; Name: Walking In Air Fix
00000000                            ; Function: Fixes the bug that makes Sonic incorrectly use his walking animation when near solids.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\26 Monitor.asm, sonic.asm
00000000                            
00000000                            ; Name: Screen Scroll While Rolling Fix
00000000                            ; Function: Fixes the bug that prevents the screen from scrolling back to neutral while Sonic is rolling.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic RollSpeed.asm
00000000                            
00000000                            ; Name: Ducking Size Fix
00000000                            ; Function: Makes Sonic's hitbox the correct size in regards to solids when he is ducking
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\sub ReactToItem.asm, sonic.asm
00000000                            
00000000                            ; Name: Exit DLE In Special Stage And Title
00000000                            ; Function: Prevents the DLE from running while on the Title Screen and in the Special Stage, preventing serious problems.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Clear Control Lock When Jump
00000000                            ; Function: Clears control lock when Sonic jumps, preventing it from lingering when he lands again and causing a frustrating lag in input.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic Jump.asm
00000000                            
00000000                            ; Name: Debug Improvements
00000000                            ; Function: Makes a slew of improvements to Debug Mode. Sonic's speed and "atop object" flag are cleared when turning into an item, plus rings/monitors can be placed even after collecting one.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Debug Mode.asm
00000000                            
00000000                            ; Name: SBZ3 Obj Fixes
00000000                            ; Function: Fixes the missing platform from SBZ3 and also prevents Sonic from falling through the floor near beginning of the level.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: objpos\SBZ3.bin
00000000                            
00000000                            ; Name: SBZ3 Button PLC Fix
00000000                            ; Function: Trades the order in which the harpoon and button load their art in order to prevent garbled button art at SBZ3 start.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\Pattern Load Cues.asm
00000000                            
00000000                            ; Name: Demo Playback Fix
00000000                            ; Function: Fixes an issue that makes demo playback interpret the button being held for more than one frame as continual new presses of the button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\MoveSonicInDemo.asm
00000000                            ; Thanks To: FraGag
00000000                            
00000000                            ; Name: Hidden Bonus Points Fix
00000000                            ; Function: Makes the 100pt Hidden Bonuses actually give Sonic 100pts.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\7D Hidden Bonuses.asm
00000000                            ; Thanks To: Sonic Retro How-To by 1337Rooster
00000000                            
00000000                            ; Name: Speed Shoes Work Underwater
00000000                            ; Function: Makes Speed Shoes work correctly when underwater. It's now safe to place them in LZ/SBZ3.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic Display.asm, _incObj\Sonic Water.asm
00000000                            
00000000                            ; Name: Sega Sound Fix
00000000                            ; Function: Fixes the Sega sound at game start so that it won't garble when code is added to the ROM. Also allows the player to skip it with the Start Button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            ; Thanks To: Sonic Retro How-To by Puto
00000000                            
00000000                            ; Name: Remove Speed Shoes At Signpost Fix
00000000                            ; Function: Removes Speed Shoes when Sonic passes the Signpost so the Level Clear jingle won't play sped up.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\3A Got Through Card.asm
00000000                            
00000000                            ; Name: Game/Time Over Timing Fix
00000000                            ; Function: Makes the Game/Time Over message display a consistent amount of time after Sonic dies, rather than waiting for him fall past the top/bottom of the entire zone.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Game Over When Drowning Fix
00000000                            ; Function: Fixes a bug that caused the Title Screen background to stop scrolling after Sonic gets a Game Over from drowning.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            
00000000                            ; Name: High Speed Camera Fix
00000000                            ; Function: Fixes problems with camera not catching up at high speeds, as well preventing Sonic from dying in these situations (notably in the S-tunnels in GHZ1 and GHZ3).
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic LevelBound.asm, _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Shield/Invincibility Positioning Fix
00000000                            ; Function: Correctly positions the Shield/Invincibility sprites when balancing on ledges.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\38 Shield and Invincibility.asm
00000000                            
00000000                            ; Name: Eggman Art Fix
00000000                            ; Function: Fixes Eggman's mappings so that his moustache isn't cut off.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _maps\Eggman.asm
00000000                            
00000000                            ; Name: Lives Over/Underflow Fix
00000000                            ; Function: Prevents life count from over-/underflowing when 1 is added/subtracted.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _incObj\09 Sonic in Special Stage.asm, _incObj\25 & 37 Rings.asm, _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic (part 2).asm, sonic.asm
00000000                            
00000000                            ; Name: SLZ Solidity Fix
00000000                            ; Function: Fixes goofy solidity in SLZ that allows Sonic to fall through the tops of some 256x256 metatiles.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SLZ.bin, map256_u\SLZ.bin
00000000                            
00000000                            ; Name: SLZ Staircase Fix
00000000                            ; Function: Fixes some staircases in SLZ2 to that they aren't 1 pixel higher than the ground, stopping Sonic short.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ2.bin
00000000                            
00000000                            ; Name: SLZ Pylons Fix
00000000                            ; Function: Removes the SLZ pylons from the object layout files and instead loads them manually when the zone starts. This allows them to appear even when respawning at a Lamppost.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ1.bin, objpos\SLZ2.bin, objpos\SLZ3.bin
00000000                            
00000000                            ; Name: FZ Boss Hitcount Fix
00000000                            ; Function: Prevents an underflow glitch when hitting Robotnik an extra time.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: _incObj\85 Boss - Final.asm
00000000                            
00000000                            ; Name: FZ Falling Fix
00000000                            ; Function: Prevents Sonic from falling off after defeating Robotnik by adding an invisible wall.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SBZ.bin, map256\SBZ (JP1).bin, map256_u\SBZ.bin, map256_u\SBZ (JP1).bin, map16\SBZ.bin, map16_u\SBZ.bin, collide\SBZ.bin
00000000                            
00000000                            ; Name: MZ2 Layout Fix
00000000                            ; Function: Moves the End Sign further right so the level won't feel so truncated.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: Exit DLE In Special Stage And Title
00000000                            ; Modifies: levels\mz2.bin, objpos\mz2.bin, misc\Level Size Array.bin
00000000                            
00000000                            ; Name: LZ After End Sign PLC Bugfix
00000000                            ; Function: Fixes bug that sometimes crashes the game if roll and look down after passing End Sign in LZ1 and LZ2
00000000                            ; Date: 2011-03-08 (Mar)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000                            
00000000                            ; Name: Low End Signs Fix
00000000                            ; Function: Some End Signs would be a little too low. This fixes them.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: objpos\SYZ1.bin, objpos\LZ (JP1).bin, objpos\LZ1.bin, objpos\SBZ1 (JP1).bin, objpos\SBZ2.bin
00000000                            
00000000                            ; Name: Monitor Art Mod
00000000                            ; Function: Fixes Robotnik art and adds stripe to Speed Shoes.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: artnem\Monitors.bin, artnem\(Mercury) Monitors (optimised).bin
00000000                            
00000000                            ; Name: GHZ Mountain Fix
00000000                            ; Function: Fixes a tile in the GHZ mountain background that's always bothered me - it makes it looks like there's hold in the biggest peaks.
00000000                            ; Date: 2011-04-19 (Apr)
00000000                            ; Modifies: map256\GHZ.bin, map256_U\GHZ.bin
00000000                            
00000000                            ; VARIABLES
00000000                            ; ================================================================================
00000000                            
00000000                            
00000000 =FFFFFEB0                  v_spindashsfx1:	= $FFFFFEB0
00000000 =FFFFFEB1                  v_spindashsfx2:	= v_spindashsfx1+1
00000000 =FFFFFEB2                  v_spindashsfx3:	= v_spindashsfx1+2
00000000                            	
00000000 =FFFFFEB3                  v_cameralag:	= $FFFFFEB3	; camera lag after launching Spin Dash (1 byte)
00000000                            
00000000 =FFFFFEBE                  v_scrolldelay:	= $FFFFFEBE	; scroll delay timer
00000000                            
00000000 =FFFFFE25                  v_centstep:	= $FFFFFE25	; value used to increment centiseconds
00000000                            
00000000                            ; CONSTANTS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Sonic Status Bits
00000000 =00000000                  staFacing:	equ 0
00000000 =00000001                  staAir:		equ 1
00000000 =00000002                  staSpin:	equ 2
00000000 =00000003                  staOnObj:	equ 3
00000000 =00000004                  staRollJump:	equ 4
00000000 =00000005                  staPush:	equ 5
00000000 =00000006                  staWater:	equ 6
00000000                            
00000000 =00000001                  staDash:	equ 1
00000000                            
00000000 =00000000                  staSpinDash:	equ 0
00000000                            
00000000                            ; Sonic OST Bytes
00000000 =0000002C                  obWallJump:	equ $2C	; Wall Jump flag
00000000                            			; $2D reserved, as well
00000000 =00000030                  obInvuln:	equ $30	; Invulnerable (blinking) timer
00000000                            			; $31 reserved as well
00000000 =00000032                  obInvinc:	equ $32	; Invincibility timer
00000000                            			; $33 reserved as well
00000000 =00000034                  obShoes:	equ $34	; Speed Shoes timer
00000000                            			; $35 reserved as well
00000000                            			
00000000 =00000036                  obFrontAngle:	equ $36
00000000 =00000037                  obRearAngle:	equ $37
00000000                            			
00000000 =00000038                  obOnWheel:	equ $38	; on convex wheel flag
00000000                            
00000000 =00000039                  obStatus2:	equ $39	; status for abilities such as Spin Dash
00000000                            
00000000 =0000003A                  obRevSpeed:	equ $3A	; rev speed for Spin Dash or Dash
00000000                            			; $3B reserved as well
00000000                            
00000000 =0000003A                  obRestartTimer:	equ $3A ; level restart timer
00000000 =0000003C                  obJumping:	equ $3C	; jumping flag
00000000 =0000003D                  obPlatformID:	equ $3D	; ost slot of the object Sonic's on top of
00000000 =0000003E                  obLRLock:	equ $3E	; flag for preventing left and right input
00000000                            
00000000                            ; SFX
00000000                            ; ================================================================================
00000000                            
00000000 =000000D1                  sfx_SpinDash:	equ $D1
00000000                            
00000000                            ; MACROS
00000000                            ; ================================================================================
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Store a VRAM address in d0
00000000                            ; input: 16-bit VRAM address
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAMd0:	macro loc
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; SpriteMap macro usage
00000000                            ; l = left coordinate
00000000                            ; t = top coordinate
00000000                            ; w = width (in tiles)
00000000                            ; h = height (in tiles)
00000000                            ; x = horizontal mirroring 1=yes 0=no
00000000                            ; y = vertical mirroring 1=yes 0=no
00000000                            ; pri = priority 1=always on top
00000000                            ; pal = palette index (0...3)
00000000                            ; ind = starting tile index
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            SpriteMap:	macro	l, t, w, h, x, y, pri, pal, ind
00000000                            		dc.b	t
00000000                            		dc.b	(h-1)|((w-1)<<2)
00000000                            		dc.b	(pri<<7)|(pal<<5)|(y<<4)|(x<<3)|(ind>>8)
00000000                            		dc.b	ind&0xFF
00000000                            		dc.b	l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DynPLC macro usage
00000000                            ; n = number of tiles
00000000                            ; i = starting tile index
00000000                            ; o = offset (optional), i.e. Art_SonicSpinDash-Art_Sonic
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            DynPLC:		macro	n, i, o
00000000                            		if (narg=2)
00000000                            		dc.b	((n-1)<<4)|(i>>8)
00000000                            		dc.b	i&$FF
00000000                            		else
00000000                            		dc.b	((n-1)<<4)|((i+((o)>>5))>>8)
00000000                            		dc.b	(i+((o)>>5))&$FF
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            	include	'Variables.asm'
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	= $FFFFFC00		; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	= $FFFFFC40		; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_pcbuffer      = $FFFFFC44     	; stores PC on error (4 bytes)
00000000 =FFFFFC48                  v_errortype:	= $FFFFFC48		; error type
00000000                            
00000000                            
00000000 =00FF0000                  v_256x256:	=   $FF0000		; 256x256 tile mappings ($A400 bytes)
00000000                            
00000000                            
00000000 =FFFF9C00                  Kos_decomp_buffer =  $FFFF9C00  	; $1000 bytes	; each module in a KosM archive is decompressed here and then DMAed to VRAM
00000000                            
00000000 =FFFFAC00                  v_spritequeue:	= $FFFFAC00		; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:	= $FFFFB000		; 16x16 tile mappings
00000000 =FFFFC800                  v_sgfx_buffer:	= $FFFFC800		; buffered Sonic graphics ($18 cells) ($300 bytes)     +++(only $100 now)
00000000 =FFFFC8FC                  v_vdp_buffer_slot = $FFFFC8FC    	; (2 bytes)
00000000 =FFFFC900                  v_ngfx_buffer:	= $FFFFC900		; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFCB00                  v_tracksonic:	= $FFFFCB00		; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_scrolltable:	= $FFFFCC00		; scrolling table data ($400 bytes)
00000000                            		; $CF80 to $D000 seems to be unsused , it only needs $380 bytes to cover the whole screen
00000000                            
00000000 =FFFFD000                  v_objspace:	= $FFFFD000		; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	= v_objspace		; object variable space for Sonic ($40 bytes)
00000000                            ;v_shieldobj:    = v_objspace+$180
00000000                            ;v_dustobj:      = v_objspace+$1C0
00000000                            ;v_homingattackobj = v_objspace+$300
00000000 =FFFFD800                  v_lvlobjspace:	= $FFFFD800		; level object variable space ($1800 bytes)
00000000                            
00000000 =FFFFF000                  v_lvllayout:	= $FFFFF000		; layout is read from rom now, this contains pointers to the location of level layouts on ROM now 			; level and background layouts ($400 bytes)
00000000 =FFFFFC10                  v_screenposy_last   = $FFFFFC10   	; S3K Object manager
00000000 =FFFFFC14                  v_screenposx_coarse = $FFFFFC14   	;         ''
00000000 =FFFFFC18                  v_screenposy_coarse = $FFFFFC18   	;         ''
00000000 =FFFFC900                  v_objstate:	= $FFFFC900		; object state list ($300 bytes)
00000000                            
00000000 =FFFFCC00                  v_variables        = v_objstate+$300
00000000                            ;v_statspeed        = v_variables+$0     ;  speed stat
00000000                            ;v_stataccel        = v_variables+$1     ;  acceleration stat
00000000                            ;v_statjump         = v_variables+$2     ;  jump stat
00000000                            ;v_brokenmonitors1  = v_variables+$3     ;  which monitors are broken in current act, first byte
00000000                            ;v_brokenmonitors2  = v_variables+$4     ;  which monitors are broken in current act, second byte
00000000                            ;v_brokenmonitors3  = v_variables+$5     ;  which monitors are broken in current act, third byte
00000000                            ;v_actflags         = v_variables+$6     ;  flags in the current act to be saved to sram
00000000                            ;v_levselpage       = v_variables+$7     ;  which page of the pause menu is selected
00000000                            ;v_a_ability        = v_variables+$8     ; ability assigned to button A
00000000                            ;v_b_ability        = v_variables+$9     ; ability assigned to button B
00000000                            ;v_c_ability        = v_variables+$A     ; ability assigned to button C
00000000                            ;v_equippedshoes    = v_variables+$B
00000000                            ;v_equippeditem1    = v_variables+$C
00000000                            ;v_equippeditem2    = v_variables+$D
00000000                            ;v_equippedemerald  = v_variables+$E
00000000                            
00000000                            ;v_activeeffects = v_variables+$F		; number of currently active effects
00000000                            ;ItemEffects     = v_variables+$10      	; current active effects (byte)& empty byte & time left (word), 16 slots ($40 bytes)
00000000                            ; --------------------------------------------------------------------------
00000000                            ; Inventory items and abilities
00000000                            ;v_inventory     = v_variables+$40
00000000                            
00000000                            ;v_inv_items     = v_inventory+$0
00000000                            ;v_inv_shield    = v_inv_items+$0                                      
00000000                            ;v_inv_invinc    = v_inv_items+$1
00000000                            ;v_inv_shoes     = v_inv_items+$2
00000000                            ;v_inv_key       = v_inv_items+$3
00000000                            ;v_inv_test      = v_inv_items+$4
00000000                            ;v_inv_bomb      = v_inv_items+$5
00000000                            ;v_inv_eshield   = v_inv_items+$6     	; electric shields
00000000                            ;v_inv_fshield   = v_inv_items+$7     	; fire shields
00000000                            
00000000                            ;v_shoe_items    = v_inventory+$20
00000000                            ;v_shoe_default  = v_shoe_items+$0
00000000                            ;v_shoe_runners  = v_shoe_items+$1
00000000                            ;v_shoe_spring   = v_shoe_items+$2
00000000                            ;v_shoe_spikeproof = v_shoe_items+$3
00000000                            
00000000                            ;v_item_items    = v_inventory+$40
00000000                            ;v_item_goggles  = v_item_items+$0
00000000                            ;v_item_itemsaver = v_item_items+$1
00000000                            ;v_item_speedbracelet = v_item_items+$2
00000000                            
00000000                            ;v_abil_items    = v_inventory+$60
00000000                            ;v_abil_none     = v_abil_items+$0
00000000                            ;v_abil_spindash = v_abil_items+$1
00000000                            ;v_abil_jumpdash = v_abil_items+$2
00000000                            ;v_abil_homing   = v_abil_items+$3
00000000                            ;v_abil_doublejump1 = v_abil_items+$4
00000000                            ;v_abil_doublejump2 = v_abil_items+$5
00000000                            ;v_abil_lightdash = v_abil_items+$6
00000000                            ;v_abil_down     = v_abil_items+$7
00000000                            ;v_abil_peelout  = v_abil_items+$8
00000000                            ;v_abil_walljump = v_abil_items+$9
00000000                            ;v_abil_insta    = v_abil_items+$A        ; instashield
00000000                            ; --------------------------------------------------------------------------
00000000                            
00000000 =FFFFF460                  Kos_decomp_queue_count =	$FFFFF460  ; word 		; the number of pieces of data on the queue. Sign bit set indicates a decompression is in progress
00000000 =FFFFF462                  Kos_decomp_stored_registers =	$FFFFF462  ; $28 bytes 		; allows decompression to be spread over multiple frames
00000000 =FFFFF48A                  Kos_decomp_stored_SR =		$FFFFF48A  ; word
00000000 =FFFFF48C                  Kos_decomp_bookmark =		$FFFFF48C  ; long 		; the address within the Kosinski queue processor at which processing is to be resumed
00000000 =FFFFF490                  Kos_description_field =		$FFFFF490  ; word 		; used by the Kosinski queue processor the same way the stack is used by the normal Kosinski decompression routine
00000000 =FFFFF492                  Kos_decomp_queue =		$FFFFF492  ; $20 bytes 		; 2 longwords per entry, first is source location and second is decompression location
00000000 =FFFFF492                  Kos_decomp_source =		$FFFFF492  ; long 		; the compressed data location for the first entry in the queue
00000000 =FFFFF496                  Kos_decomp_destination =	$FFFFF496  ; long 		; the decompression location for the first entry in the queue
00000000 =FFFFF4B0                  Kos_modules_left =		$FFFFF4B0  ; byte 		; the number of modules left to decompresses. Sign bit set indicates a module is being decompressed/has been decompressed
00000000 =FFFFF4B2                  Kos_last_module_size =		$FFFFF4B2  ; word 		; the uncompressed size of the last module in words. All other modules are $800 words
00000000 =FFFFF4B4                  Kos_module_queue =		$FFFFF4B4  ; $18 bytes 		; 6 bytes per entry, first longword is source location and next word is VRAM destination
00000000 =FFFFF4B4                  Kos_module_source =		$FFFFF4B4  ; long 		; the compressed data location for the first module in the queue
00000000 =FFFFF4CC                  Kos_module_destination =	$FFFFF4CC  ; word 		; the VRAM destination for the first module in the queue
00000000                            
00000000                            ;v_worldmap_X	= $FFFFF49E		; current level's left boundary position in world map squares (1 byte)
00000000                            ;v_worldmap_Y	= $FFFFF49F		; current level's top boundary position in world map squares  (1 byte)
00000000                            ;v_worldmap		= $FFFFF4A0		; $160 bytes, 1 bit for each square of the 80x35 map that has been visited		
00000000                            
00000000 =FFFFF600                  v_gamemode:		= $FFFFF600		; game mode (00=Sega			; 04=Title			; 08=Demo			; 0C=Level			; 10=SS			; 14=Cont			; 18=End			; 1C=Credit			; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	= $FFFFF602		; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	= $FFFFF603		; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	= $FFFFF604		; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	= $FFFFF605		; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	= $FFFFF60C		; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	= $FFFFF614		; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	= $FFFFF616		; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgposy_dup:	= $FFFFF618		; background position y (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF61A                  v_scrposx_dup:	= $FFFFF61A		; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgposx_dup:	= $FFFFF61C		; background position x (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	= $FFFFF624		; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	= $FFFFF625		; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	= $FFFFF626		; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	= $FFFFF627		; palette fading - number of colours
00000000 =FFFFF62A                  v_vbla_routine:	= $FFFFF62A		; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	= $FFFFF62C		; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	= $FFFFF632		; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	= $FFFFF634		; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	= $FFFFF636		; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:	= $FFFFF63A		; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640		; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	= $FFFFF644		; flag set to change palette during HBlank (0000 = no			; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	= $FFFFF646		; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	= $FFFFF648		; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	= $FFFFF64A		; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:	= $FFFFF64C		; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	= $FFFFF64D		; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	= $FFFFF64E		; water palette state when water is above/below the screen (00 = partly/all dry			; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	= $FFFFF650		; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	= $FFFFF680		; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	= $FFFFF6E0		; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	= $FFFFF6F8		; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	= $FFFFF700		; screen position x (2 bytes)   (Plane A)
00000000 =FFFFF704                  v_screenposy:	= $FFFFF704		; screen position y (2 bytes)   (Plane A)
00000000                            
00000000 =FFFFF708                  v_bgposx:	= $FFFFF708		; background position x (2 bytes)   (Plane B)
00000000 =FFFFF70C                  v_bgposy:	= $FFFFF70C		; background position y (2 bytes)   (Plane B)
00000000                            
00000000 =FFFFF720                  v_limitleft1:	= $FFFFF720		; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	= $FFFFF722		; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	= $FFFFF724		; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	= $FFFFF726		; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	= $FFFFF728		; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	= $FFFFF72A		; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	= $FFFFF72C		; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	= $FFFFF72E		; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	= $FFFFF732		; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	= $FFFFF73A		; screen shift as Sonic moves horizontally
00000000                            
00000000 =FFFFF73E                  v_lookshift:	= $FFFFF73E		; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	= $FFFFF742		; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	= $FFFFF744		; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF754                  v_bgscroll1:	= $FFFFF754		; background scrolling variable 1
00000000 =FFFFF756                  v_bgscroll2:	= $FFFFF756		; background scrolling variable 2
00000000 =FFFFF758                  v_bgscroll3:	= $FFFFF758		; background scrolling variable 3
00000000 =FFFFF75C                  f_bgscrollvert:	= $FFFFF75C		; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	= $FFFFF760		; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	= $FFFFF762		; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	= $FFFFF764		; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	= $FFFFF766		; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	= $FFFFF767		; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	= $FFFFF768		; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	= $FFFFF76C		; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	= $FFFFF76E		; ObjPosLoad - screen variable
00000000 =FFFFF76E                  v_screenposx_last = v_opl_screen
00000000 =FFFFF770                  v_opl_data:	= $FFFFF770		; ObjPosLoad - data buffer ($10 bytes)
00000000 =FFFFF770                  Obj_load_addr_right = v_opl_data
00000000 =FFFFF774                  Obj_load_addr_left  = v_opl_data+4
00000000 =FFFFF778                  Obj_respawn_index_right = v_opl_data+8
00000000 =FFFFF77C                  Obj_respawn_index_left  = v_opl_data+$0C
00000000                            
00000000 =FFFFF780                  v_ssangle:	= $FFFFF780		; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	= $FFFFF782		; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	= $FFFFF790		; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	= $FFFFF792		; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	= $FFFFF794		; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	= $FFFFF796		; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	= $FFFFF79A		; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	= $FFFFF79C		; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	= $FFFFF7A4		; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	= $FFFFF7A7		; status of boss and prison capsule (01 = boss defeated			; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	= $FFFFF7A8		; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	= $FFFFF7A9		; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	= $FFFFF7AA		; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	= $FFFFF7AC		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	= $FFFFF7AD		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	= $FFFFF7AE		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	= $FFFFF7AF		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	= $FFFFF7B0		; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	= $FFFFF7B1		; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	= $FFFFF7B2		; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	= $FFFFF7B3		; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	= $FFFFF7B4		; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	= $FFFFF7B5		; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	= $FFFFF7B6		; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	= $FFFFF7B7		; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	= $FFFFF7B8		; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	= $FFFFF7B9		; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	= $FFFFF7BA		; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	= $FFFFF7BB		; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	= $FFFFF7BE		; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	= $FFFFF7C0		; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:	= $FFFFF7C1		; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	= $FFFFF7C7		; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	= $FFFFF7C8		; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	= $FFFFF7C9		; LZ water tunnels (00 = enabled			; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	= $FFFFF7CA		; flag set to lock controls apart from jumping         if $FF, Obj01_Modes routines are not run. Sonic freezes and other objects can control his moving manually. This is used in SBZ transporters for example. If this flag is $01, the above applies and the TouchResponse isn't run. Sonic doesn't react to rings or harmful objects anymore.
00000000 =FFFFF7CB                  v_obj6B:	= $FFFFF7CB		; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	= $FFFFF7CC		; flag set to lock controls during ending sequence     if clear, v_jpadhold1(what buttons are pressed) is sent to v_jpadhold2(what buttons the sonic object sees), if set you can send your own buttons to v_jpadhold2
00000000 =FFFFF7CD                  f_bigring:	= $FFFFF7CD		; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	= $FFFFF7D0		; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	= $FFFFF7D2		; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	= $FFFFF7D4		; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	= $FFFFF7D6		; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	= $FFFFF7D7		; routine counter for Sonic in the ending sequence
00000000 =FFFFF7E0                  f_switch:	= $FFFFF7E0		; flags set when Sonic stands on a switch ($10 bytes)
00000000                            
00000000 =FFFFF800                  v_sprites:	= $FFFFF800		; sprite table ($200 bytes)
00000000 =FFFFFA00                  v_pal0_wat:	= $FFFFFA00		; duplicate palette data - underwater ($80 bytes)
00000000 =FFFFFA80                  v_pal0_dry:	= $FFFFFA80		; duplicate palette data - main ($80 bytes)
00000000 =FFFFFB00                  v_pal1_wat:	= $FFFFFB00		; palette data - underwater ($80 bytes)
00000000 =FFFFFB80                  v_pal1_dry:	= $FFFFFB80		; palette data - main ($80 bytes)
00000000                            
00000000                            
00000000                            
00000000 =FFFFFC00                  v_actstates	= $FFFFFC00		; 4 bytes of saved data per act ($A0 bytes, will expand when more zones added)
00000000                            
00000000                            
00000000                            ; stack goes from FE00 backwards, seems like leaving $100 bytes for it would be safe????
00000000                            
00000000 =FFFFFE02                  f_restart:	= $FFFFFE02		; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	= $FFFFFE04		; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	= v_framecount+1	; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	= $FFFFFE06		; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	= $FFFFFE08		; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	= $FFFFFE0A		; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	= $FFFFFE0B		; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	= $FFFFFE0C		; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	= v_vbla_count+2 	; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	= v_vbla_word+1		; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		= $FFFFFE10		; current zone number
00000000 =FFFFFE11                  v_act:		= $FFFFFE11		; current act number
00000000 =FFFFFE12                  v_lives:	= $FFFFFE12		; number of lives
00000000 =FFFFFE14                  v_air:		= $FFFFFE14		; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	= v_air+1		; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	= $FFFFFE16		; last special stage number
00000000 =FFFFFE18                  v_continues:	= $FFFFFE18		; number of continues
00000000 =FFFFFE1A                  f_timeover:	= $FFFFFE1A		; time over flag
00000000 =FFFFFE1B                  v_lifecount:	= $FFFFFE1B		; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	= $FFFFFE1C		; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	= $FFFFFE1D		; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	= $FFFFFE1E		; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	= $FFFFFE1F		; score counter update flag
00000000 =FFFFFE20                  v_rings:	= $FFFFFE20		; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	= v_rings+1		; low byte for rings
00000000 =FFFFFE22                  v_time:		= $FFFFFE22		; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	= $FFFFFE23		; time - minutes
00000000 =FFFFFE24                  v_timesec:	= $FFFFFE24		; time - seconds
00000000 =FFFFFE25                  v_timecent:	= $FFFFFE25		; time - centiseconds
00000000 =FFFFFE26                  v_score:	= $FFFFFE26		; score (4 bytes)
00000000 =FFFFFE2A                  v_shield:	= $FFFFFE2A		; shield status (00 = no			; 01 = yes)
00000000 =FFFFFE2B                  v_invinc:	= $FFFFFE2B		; invinciblity status (00 = no			; 01 = yes) bit 7 set when instashield active
00000000 =FFFFFE2C                  v_shoes:	= $FFFFFE2C		; speed shoes status (00 = no			; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	= $FFFFFE30		; number of the last lamppost you hit ($FF means switching between acts)
00000000 =FFFFFE32                  v_lamp_xpos:	= v_lastlamp+2		; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	= v_lastlamp+4		; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	= v_lastlamp+6		; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	= v_lastlamp+8		; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	= v_lastlamp+$C		; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:= v_lastlamp+$E		; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	= v_lastlamp+$10 	; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	= v_lastlamp+$12 	; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	= v_lastlamp+$20 	; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	= v_lastlamp+$22 	; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	= v_lastlamp+$23 	; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	= v_lastlamp+$24 	; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:		= $FFFFFE57		; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:		= $FFFFFE58		; which individual emeralds you have (00 = no			; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	= $FFFFFE5E		; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	= $FFFFFEC0		; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	= $FFFFFEC1		; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	= $FFFFFEC2		; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	= $FFFFFEC3		; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	= $FFFFFEC4		; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	= $FFFFFEC5		; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	= $FFFFFEC6		; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	= $FFFFFEC7		; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:		= $FFFFFEC8		; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEF0                  v_limittopdb:	= $FFFFFEF0		; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	= $FFFFFEF2		; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000                            ; boss animation array from ported sonic 2 bosses
00000000 =FFFFFEF4                  Boss_AnimationArray:= $FFFFFEF4	; up to $10 bytes			; 2 bytes per entry
00000000 =FFFFFF04                  unk_F750:       = $FFFFFF04
00000000 =FFFFFF04                  Boss_X_pos:		= $FFFFFF04   	; Boss_MoveObject reads a long, but all other places in the game use only the high word
00000000 =FFFFFF08                  Boss_Y_pos:		= $FFFFFF08	; same here
00000000 =FFFFFF0C                  Boss_X_vel:		= $FFFFFF0C
00000000 =FFFFFF0E                  Boss_Y_vel:		= $FFFFFF0E
00000000 =FFFFFF3E                  unk_F75C:		= $FFFFFF3E	; used by mtz boss, only seems to use 2 bytes
00000000                            
00000000                            			; ^^^ can use values between here vvv not FF30 on though, vblank uses it
00000000                            
00000000                            
00000000                            ;v_monitorlocations: = $FFFFFF40    	; array of monitor x positions ($30 bytes)
00000000                            
00000000                            ;v_wassfxspindash: = $FFFFFF70   	; +++ is 1 if the last sound played was the spin dash
00000000                            ;v_timersfxspindash: = $FFFFFF71 	; +++ timer for spin dash rev
00000000                            ;v_pitchsfxspindash: = $FFFFFF72 	; +++ spindash sfx pitch increase
00000000 =FFFFFF73                  v_vscrolldelay  = $FFFFFF73 
00000000 =FFFFFF74                  v_hscrolldelay: = $FFFFFF74     	; +++ something to do with the spin dash and horizontal scrolling
00000000 =FFFFFF76                  f_dontstopmusic: = $FFFFFF76    	; +++ let music continue from last act
00000000 =FFFFFF77                  v_popuptimer	= $FFFFFF77			; how long the popup timer can be onscreen
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	= $FFFFFF80			; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	= $FFFFFF82			; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	= $FFFFFF84			; level select - sound selected (2 bytes)
00000000 =FFFFFF86                  v_levelselnofade  = $FFFFFF86   	; +++ pause menu, don't fade when redrawing text
00000000                            ;v_airjumpcount:    = $FFFFFF88    	; +++ times jumped in the air, for double jump
00000000                            ;v_jumpdashcount:   = $FFFFFF89    	; +++ times jump dashed
00000000                            ;f_supersonic       = $FFFFFF8A    	; +++ has sonic turned Super Sonic?
00000000                            ;v_supersonicpal    = $FFFFFF8B    	; +++ has super sonic palette value
00000000                            ;v_supersonicpalframe  = $FFFFFF8C 	; +++ has super sonic palette frame (2 bytes)
00000000                            ;v_supersonicpaltimer  = $FFFFFF8E 	; +++ has super sonic palette timer
00000000                            ;v_supersonicframecount = $FFFFFF8F	; +++ frame counter for ring countdown
00000000 =FFFFFF90                  v_lastmusic        = $FFFFFF90    	; save music to be restored after drowning countdown etc.
00000000                            ;v_homingdistance   = $FFFFFF92    	; distance between closest object and sonic (2 bytes)
00000000                            ;v_homingtarget     = $FFFFFF94    	; object number that is closest to sonic
00000000                            ;v_homingtimer      = $FFFFFF95    	; frames that sonic can home on an object for (light dash only ATM)
00000000                            ;v_justwalljumped   = $FFFFFF96    	; if just wall jumped, don't run double jump code
00000000                            ;v_Deform_Temp_Value = $FFFFFF98		; GHZ uses this to save last frame's ripple data rom location (2 bytes)
00000000                            ;H_int_jump      = $FFFFFF9A     	; 6 bytes 			; contains an instruction to jump to the H-int handler
00000000                            ;H_int_addr      = $FFFFFFA0     	; long
00000000                            ;v_teleportin	= $FFFFFFA4			; set when sonic needs to beam into the new level
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000                            ;v_lamp_xspeed:   = $FFFFFFB2    	; +++ saved x speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_yspeed:   = $FFFFFFB4    	; +++ saved y speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_inertia:  = $FFFFFFB6    	; +++ saved inertia when moving between acts     (2 bytes)
00000000                            ;v_lamp_anim:     = $FFFFFFB8    	; +++ saved animation when moving between acts   (2 byte)
00000000                            ;v_lamp_roll:     = $FFFFFFBA    	; +++ saved rolling when moving between acts     (1 byte)
00000000                            ;v_lamp_dir:      = $FFFFFFBB    	; +++ saved direction when moving between acts   (1 byte)
00000000                            ;v_drumkit        = $FFFFFFBC    	; +++ drumkit used by current song
00000000                            ;v_currentsong:   = $FFFFFFBD    	; +++ the music currently playing
00000000                            ;v_musicpitch:    = $FFFFFFBE    	; +++ adjust music pitch by this amount
00000000                            ;v_palmuscounter  = $FFFFFFBF    	; +++ counts up to 5 then runs UpdateMusic twice
00000000 =FFFFFFC0                  v_scorecopy:	= $FFFFFFC0		; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	= $FFFFFFC0		; points required for an extra life (4 bytes) (JP1 only)
00000000                            ;f_levselcheat:	= $FFFFFFE0		; level select cheat flag
00000000                            ;f_slomocheat:	= $FFFFFFE1		; slow motion & frame advance cheat flag
00000000                            ;Slow_Motion_Flag      equ $FFFFFFE1
00000000                            ;f_debugcheat:	= $FFFFFFE2		; debug mode cheat flag
00000000                            ;Debug_Mode_Flag       equ $FFFFFFE2
00000000                            ;f_creditscheat:	= $FFFFFFE3		; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	= $FFFFFFE4		; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	= $FFFFFFE6		; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFFF0                  f_demo:			= $FFFFFFF0		; demo mode flag (0 = no			; 1 = yes			; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:		= $FFFFFFF2		; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	= $FFFFFFF4		; credits index number (2 bytes)
00000000 =FFFFFFF6                  v_layer:        = $FFFFFFF6     	; The bit in the 16x16 entries in the 128x128 block mappings to check for top solidity. Is either $C (for the default collision layer), or $E (for the alternate collision layer).
00000000 =FFFFFFF7                  v_layerplus     = $FFFFFFF7     	; The bit in the 16x16 entries in the 128x128 block mappings to check for left/right/bottom solidity. Is either $D (for the default collision layer), or $F (for the alternate collision layer).
00000000 =FFFFFFF8                  v_megadrive:	= $FFFFFFF8		; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	= $FFFFFFFA		; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:			= $FFFFFFFC		; 'init' text string (4 bytes)
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Pause Menu Memory Locations (only used when in menu, otherwise the 256x256 tiles go here)
00000000                            ; ===========================================================================
00000000                            
00000000                            ;v_menufg        =   $FFFF0000
00000000                            ;v_menubg        =   $FFFF08C0
00000000                            ;v_sndtsttilemap =   $FFFF1180
00000000                            ;v_sndtsttemp    =   $FFFF1A40
00000000                            
00000000                            ;v_vucounter     = $FFFF1FEE     	; amount on vu meter (10 1 byte slots)
00000000                            
00000000                            
00000000                            ;v_menuslots     = $FFFF1FFA     	; number of slots on equip screen (or debug screen)
00000000                            ;v_menuequipslot = $FFFF1FFB     	; which slot is being selected (1 byte)
00000000                            ;v_menupagestate = $FFFF1FFC     	; 00-select page, 01-select slot, 02-select inv item (1 byte)
00000000                            ;FirstDrawnItem  = $FFFF1FFD     	; when inventory scrolls, which number in inv array is at the top of the list (1 byte)
00000000                            ;NumberOfItems   = $FFFF1FFE     	; total number of items currently held in the inventory (2 bytes)
00000000                            ;CurrentInventoryArray  = $FFFF2000 	; all inventory items to draw (?? bytes)
00000000                            
00000000                            
00000000                            ;v_menu_fgX		= $FFFF3000
00000000                            ;v_menu_bgX		= $FFFF3002
00000000                            ;v_menu_fgY		= $FFFF3004
00000000                            ;v_menu_bgY		= $FFFF3006
00000000                            
00000000                            ;v_mapbuffer =   $FFFF3010			; map screen graphics are buffered here before sending to VRAM
00000000                            
00000000                            ;v_mappointerobj	= $FFFFD400			; $40 bytes, 'you are here' object on map screen
00000000                            
00000000                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
00000000 =FFFFF784                  v_ssangleprev:	= $FFFFF784	; previous Special Stage angle (1 byte)
00000000                            ;	endc	;	;Mercury Dynamic Special Stage Walls
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; The high word of d6 after a SolidObject call is a bitfield
00000000                            ; with the following meaning:
00000000 =00000000                  p1_touch_side_bit   = 0
00000000 =00000000                  p2_touch_side_bit   = p1_touch_side_bit + 1
00000000                            
00000000 =00000001                  p1_touch_side       = 1<<p1_touch_side_bit
00000000 =00000001                  p2_touch_side       = 1<<p2_touch_side_bit
00000000                            
00000000 =00000001                  touch_side_mask     = p1_touch_side|p2_touch_side
00000000                            
00000000 =00000000                  p1_touch_bottom_bit = p1_touch_side_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_bottom_bit = p1_touch_bottom_bit + 1
00000000                            
00000000 =00000001                  p1_touch_bottom     = 1<<p1_touch_bottom_bit
00000000 =00000001                  p2_touch_bottom     = 1<<p2_touch_bottom_bit
00000000                            
00000000 =00000001                  touch_bottom_mask   = p1_touch_bottom|p2_touch_bottom
00000000                            
00000000 =00000000                  p1_touch_top_bit   = p1_touch_bottom_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_top_bit   = p1_touch_top_bit + 1
00000000                            
00000000 =00000001                  p1_touch_top       = 1<<p1_touch_top_bit
00000000 =00000001                  p2_touch_top       = 1<<p2_touch_top_bit
00000000                            
00000000 =00000001                  touch_top_mask     = p1_touch_top|p2_touch_top
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Bits 3-6 of an object's status after a SolidObject call is a
00000000                            ; bitfield with the following meaning:
00000000 =00000003                  p1_standing_bit   = 3
00000000 =00000003                  p2_standing_bit   = p1_standing_bit + 1
00000000                            
00000000 =00000008                  p1_standing       = 1<<p1_standing_bit
00000000 =00000008                  p2_standing       = 1<<p2_standing_bit
00000000                            
00000000 =00000002                  pushing_bit_delta = 2
00000000 =00000003                  p1_pushing_bit    = p1_standing_bit + pushing_bit_delta
00000000 =00000003                  p2_pushing_bit    = p1_pushing_bit + 1
00000000                            
00000000 =00000008                  p1_pushing        = 1<<p1_pushing_bit
00000000 =00000008                  p2_pushing        = 1<<p2_pushing_bit
00000000                            
00000000                            
00000000 =00000008                  standing_mask     = p1_standing|p2_standing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000                            	include	'Constants.asm'
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_ABZ:		equ 7
00000000                            
00000000                            ; Colours
00000000 =00000000                  cBlack:		equ $000		; colour black
00000000 =00000EEE                  cWhite:		equ $EEE		; colour white
00000000 =00000E00                  cBlue:		equ $E00		; colour blue
00000000 =000000E0                  cGreen:		equ $0E0		; colour green
00000000 =0000000E                  cRed:		equ $00E		; colour red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; colour yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; colour aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; colour magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000023                  obWidth:	equ width_pixels	; width/2
00000000 =00000018                  obPriority:	equ priority	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000014                  obRespawnNo:	equ respawn_index	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000                            bgm_GHZ:	equ ((Music81-MusicIndex)/4)+$81
00000000                            bgm_LZ:		equ ((Music82-MusicIndex)/4)+$81
00000000                            bgm_MZ:		equ ((Music83-MusicIndex)/4)+$81
00000000                            bgm_SLZ:	equ ((Music84-MusicIndex)/4)+$81
00000000                            bgm_SYZ:	equ ((Music85-MusicIndex)/4)+$81
00000000                            bgm_SBZ:	equ ((Music86-MusicIndex)/4)+$81
00000000                            bgm_Invincible:	equ ((Music87-MusicIndex)/4)+$81
00000000                            bgm_ExtraLife:	equ ((Music88-MusicIndex)/4)+$81
00000000                            bgm_SS:		equ ((Music89-MusicIndex)/4)+$81
00000000                            bgm_Title:	equ ((Music8A-MusicIndex)/4)+$81
00000000                            bgm_Ending:	equ ((Music8B-MusicIndex)/4)+$81
00000000                            bgm_Boss:	equ ((Music8C-MusicIndex)/4)+$81
00000000                            bgm_FZ:		equ ((Music8D-MusicIndex)/4)+$81
00000000                            bgm_GotThrough:	equ ((Music23-MusicIndex)/4)+$23
00000000                            bgm_GameOver:	equ ((Music8F-MusicIndex)/4)+$81
00000000                            bgm_Continue:	equ ((Music90-MusicIndex)/4)+$81
00000000                            bgm_Credits:	equ ((Music91-MusicIndex)/4)+$81
00000000                            bgm_Drowning:	equ ((Music92-MusicIndex)/4)+$81
00000000                            bgm_Emerald:	equ ((Music93-MusicIndex)/4)+$81
00000000                            
00000000                            ; Sound effects
00000000                            sfx_Jump:	equ ((SoundA0-SoundIndex)/4)+$A0
00000000                            sfx_Lamppost:	equ ((SoundA1-SoundIndex)/4)+$A0
00000000                            sfx_A2:		equ ((SoundA2-SoundIndex)/4)+$A0
00000000                            sfx_Death:	equ ((SoundA3-SoundIndex)/4)+$A0
00000000                            sfx_Skid:	equ ((SoundA4-SoundIndex)/4)+$A0
00000000                            sfx_A5:		equ ((SoundA5-SoundIndex)/4)+$A0
00000000                            sfx_HitSpikes:	equ ((SoundA6-SoundIndex)/4)+$A0
00000000                            sfx_Push:	equ ((SoundA7-SoundIndex)/4)+$A0
00000000                            sfx_SSGoal:	equ ((SoundA8-SoundIndex)/4)+$A0
00000000                            sfx_SSItem:	equ ((SoundA9-SoundIndex)/4)+$A0
00000000                            sfx_Splash:	equ ((SoundAA-SoundIndex)/4)+$A0
00000000                            sfx_AB:		equ ((SoundAB-SoundIndex)/4)+$A0
00000000                            sfx_HitBoss:	equ ((SoundAC-SoundIndex)/4)+$A0
00000000                            sfx_Bubble:	equ ((SoundAD-SoundIndex)/4)+$A0
00000000                            sfx_Fireball:	equ ((SoundAE-SoundIndex)/4)+$A0
00000000                            sfx_Shield:	equ ((SoundAF-SoundIndex)/4)+$A0
00000000                            sfx_Saw:	equ ((SoundB0-SoundIndex)/4)+$A0
00000000                            sfx_Electric:	equ ((SoundB1-SoundIndex)/4)+$A0
00000000                            sfx_Drown:	equ ((SoundB2-SoundIndex)/4)+$A0
00000000                            sfx_Flamethrower:equ ((SoundB3-SoundIndex)/4)+$A0
00000000                            sfx_Bumper:	equ ((SoundB4-SoundIndex)/4)+$A0
00000000                            sfx_Ring:	equ ((SoundB5-SoundIndex)/4)+$A0
00000000                            sfx_SpikesMove:	equ ((SoundB6-SoundIndex)/4)+$A0
00000000                            sfx_Rumbling:	equ ((SoundB7-SoundIndex)/4)+$A0
00000000                            sfx_B8:		equ ((SoundB8-SoundIndex)/4)+$A0
00000000                            sfx_Collapse:	equ ((SoundB9-SoundIndex)/4)+$A0
00000000                            sfx_SSGlass:	equ ((SoundBA-SoundIndex)/4)+$A0
00000000                            sfx_Door:	equ ((SoundBB-SoundIndex)/4)+$A0
00000000                            sfx_Teleport:	equ ((SoundBC-SoundIndex)/4)+$A0
00000000                            sfx_ChainStomp:	equ ((SoundBD-SoundIndex)/4)+$A0
00000000                            sfx_Roll:	equ ((SoundBE-SoundIndex)/4)+$A0
00000000                            sfx_Continue:	equ ((SoundBF-SoundIndex)/4)+$A0
00000000                            sfx_Basaran:	equ ((SoundC0-SoundIndex)/4)+$A0
00000000                            sfx_BreakItem:	equ ((SoundC1-SoundIndex)/4)+$A0
00000000                            sfx_Warning:	equ ((SoundC2-SoundIndex)/4)+$A0
00000000                            sfx_GiantRing:	equ ((SoundC3-SoundIndex)/4)+$A0
00000000                            sfx_Bomb:	equ ((SoundC4-SoundIndex)/4)+$A0
00000000                            sfx_Cash:	equ ((SoundC5-SoundIndex)/4)+$A0
00000000                            sfx_RingLoss:	equ ((SoundC6-SoundIndex)/4)+$A0
00000000                            sfx_ChainRise:	equ ((SoundC7-SoundIndex)/4)+$A0
00000000                            sfx_Burning:	equ ((SoundC8-SoundIndex)/4)+$A0
00000000                            sfx_Bonus:	equ ((SoundC9-SoundIndex)/4)+$A0
00000000                            sfx_EnterSS:	equ ((SoundCA-SoundIndex)/4)+$A0
00000000                            sfx_WallSmash:	equ ((SoundCB-SoundIndex)/4)+$A0
00000000                            sfx_Spring:	equ ((SoundCC-SoundIndex)/4)+$A0
00000000                            sfx_Switch:	equ ((SoundCD-SoundIndex)/4)+$A0
00000000                            sfx_RingLeft:	equ ((SoundCE-SoundIndex)/4)+$A0
00000000                            sfx_Signpost:	equ ((SoundCF-SoundIndex)/4)+$A0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000                            	include	'Macros.asm'
00000000 =FFFFF602                  SonicControl	equ	$FFFFF602
00000000 =FFFFF604                  Joypad		equ	$FFFFF604
00000000                            
00000000 =00000000                  Held		equ	0
00000000 =00000001                  Press		equ	1
00000000                            
00000000 =00000007                  iStart		equ 	7
00000000 =00000006                  iA		equ 	6
00000000 =00000005                  iC		equ 	5
00000000 =00000004                  iB		equ 	4
00000000 =00000003                  iRight		equ 	3
00000000 =00000002                  iLeft		equ 	2
00000000 =00000001                  iDown		equ 	1
00000000 =00000000                  iUp		equ 	0
00000000                            
00000000 =00000080                  MaskStart		equ 	1<<7
00000000 =00000040                  MaskA		equ 	1<<6
00000000 =00000020                  MaskC		equ 	1<<5
00000000 =00000010                  MaskB		equ 	1<<4
00000000 =00000008                  MaskRight		equ 	1<<3
00000000 =00000004                  MaskLeft		equ 	1<<2
00000000 =00000002                  MaskDown		equ 	1<<1
00000000 =00000001                  MaskUp		equ 	1
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check button presses
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            tpress	macro
00000000                            	move.b	(\2+1),d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check if buttons are held
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            theld	macro
00000000                            	move.b	\2,d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		bsr.w	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            @wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,($A11100).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            		
00000000                            stopZ80a:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obRange:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.w	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            obRanges:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.s	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine (leave blank to not terminate)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound).l
00000000                            		else
00000000                            		jmp	(PlaySound).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound_Special).l
00000000                            		else
00000000                            		jmp	(PlaySound_Special).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            		
00000000                            waitYM		macro
00000000                            @wait\@:	move.b	($A04000).l,d2
00000000                            		btst	#7,d2
00000000                            		bne.s	@wait\@
00000000                            		endm
00000000                            		
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm	
00000000                            	
00000000                            	
00000000                            Kos_RunBitStream	macro
00000000                            	dbf	d2,@skip\@
00000000                            	moveq	#7,d2
00000000                            	move.b	d1,d0
00000000                            	swap	d3
00000000                            	bpl.s	@skip\@
00000000                            	move.b  (a0)+,d0                        ; get desc. bitfield
00000000                            	move.b  (a0)+,d1                        ;
00000000                            	move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00000000                            	move.b  (a4,d1.w),d1                    ;
00000000                            @skip\@:
00000000                            	endm
00000000                            	
00000000                            	
00000000                            ; fills a region of 68k RAM with 0 (4 bytes at a time)
00000000                            clearRAM macro addr,length,number
00000000                            ;    if length&3
00000000                            ;	fatal "clearRAM len must be divisible by 4, but was length"
00000000                             ;   endif
00000000                            	lea	(addr).w,a1
00000000                            	moveq	#0,d0
00000000                            	move.w	#number,number>>2-1(length),d1
00000000                            @loop:	move.l	d0,(a1)+
00000000                            	dbf	d1,@loop
00000000                                endm
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; change an objects status in the respawn table
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obMarkGone      macro
00000000                            ;        if S3KObjectManager=1
00000000                            		moveq	#0,d0
00000000                                            move.w	respawn_index(a0),d0	; get address in respawn table
00000000                            	        beq.s	@dontremember		; if it's zero, don't remember object
00000000                            	        movea.w	d0,a2	; load address into a2
00000000                            	        bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again           
00000000                                        @dontremember:
00000000                            
00000000                             ;       else
00000000                            ;		lea	(v_objstate).w,a2
00000000                            ;		moveq	#0,d0
00000000                            ;		move.b	obRespawnNo(a0),d0
00000000                            ;		bclr	#7,2(a2,d0.w)
00000000                             ;       endif
00000000                                            endm
00000000                                            endm
00000000                            ; ===========================================================================
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; ASSEMBLY OPTIONS:
00000000                            
00000000 =00000001                  padToPowerOfTwo = 1
00000000                            ;	| If 1, pads the end of the rom to the next power of two bytes (for real hardware)
00000000                            
00000000 =00000001                  PCMDC equ 1 ; PCM Driver with music compressed?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000                            
00000000 =00000000                  SegaSoundGF64 = 0  ;it´s a bonus :) (default: disabled) [GF64]
00000000                            ;0 - Normal sega sound
00000000                            ;1 - "SEGA!" scream
00000000                            ;2 - "Seeeegaaaaa" for a ytp
00000000                            ;S3Dacs = 1  ;Sonic 3k DAC Samples (Highly Recommended that you turn it on) ; Both S1 and S2 samples are included with the S3K samples in this hack
00000000                            ;0 - Off (Normal S2 Samples)
00000000                            ;1 - On
00000000                            ;2 - Full DAC Table From S3K (Not Supported yet so sorry...)
00000000 =00000001                  TitleScreenPaletteFix = 1
00000000 =00000000                  ChaotixJumpSND = 0
00000000 =00000000                  ChaotixSkidSND = 0
00000000 =00000000                  OldTitleCards = 0
00000000 =00000000                  SonicCDRollJump = 0
00000000 =00000001                  skipChecksumCheck equ 1
00000000                            ;	| If 1, disables the unnecessary (and slow) bootup checksum calculation
00000000 =00000000                  Useoldsounddriver = 0
00000000 =00000001                  zeroOffsetOptimization = 1
00000000                            ;	| If 1, makes a handful of zero-offset instructions smaller
00000000                            ;
00000000 =00000001                  assembleZ80SoundDriver = 1
00000000                            ;	| If 1, the Z80 sound driver is assembled with the rest of the rom
00000000                            ;	| If 0, the Z80 sound driver is incbind (less flexible)
00000000 =00000001                  DebuggingFeatures = 1	; 1 Enables Debugger , 0 Disables Debugger
00000000 =00000001                  HUDCentiseconds = 1
00000000 =00000000                  S2Obj34TitleCards = 0
00000000 =00000001                  UnusedCode equ 1	; compile the unused codes?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000 =00000001                  HUDHasLeadingZeroes = 1
00000000                            ; property of all objects:
00000000 =0000003D                  obPlatformID:	equ $3D
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            ;subtype =		$28
00000000                            
00000000 =FFFFCF80                  MusicStack	equ	$FFFFCF80
00000000 =FFFFCF90                  SoundStack	equ	$FFFFCF90
00000000 =FFFFCFA0                  AdvanceStack	equ	$FFFFCFA0
00000000 =FFFFCFB0                  ControlStack	equ	$FFFFCFB0
00000000 =FFFFF015                  v_palmuscounter  equ $FFFFF015	; counts up to 5 then runs UpdateMusic twice
00000000                            ;Sprite_Table_Input =	Sprite_Table_Input
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000                            ;    if Max_Rings > 759
00000000                            ;    fatal "Maximum number of rings possible is 759"
00000000                            ;    endif
00000000                            
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            ;Ring_Positions =		($FFFFE800)
00000000 =FFFFD200                  Ring_start_addr_ROM =   (Ring_Positions+Rings_Space)
00000000 =FFFFD204                  Ring_end_addr_ROM =        (Ring_Positions+Rings_Space+4)
00000000 =FFFFD208                  Ring_start_addr_ROM_P2 =    (Ring_Positions+Rings_Space+8)
00000000 =FFFFD20C                  Ring_end_addr_ROM_P2 =    (Ring_Positions+Rings_Space+12)
00000000 =FFFFD210                  Ring_free_RAM_start =       (Ring_Positions+Rings_Space+16)
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640	; VDP instruction buffer (2 bytes)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            ;
00000000                            ;writeVRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$4000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;writeCRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$C000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; =======================================================
00000000                            ; Dynamic Event Engine Equates
00000000                            ; =======================================================
00000000                            
00000000                            ; Zone Equates
00000000                            
00000000 =FFFFFE10                  ZONE                            equ     $FFFFFE10
00000000 =00000000                  ZONE_GHZ1                       equ     $0000
00000000 =00000001                  ZONE_GHZ2                       equ     $0001
00000000 =00000002                  ZONE_GHZ3                       equ     $0002
00000000 =00000200                  ZONE_MZ1                        equ     $0200
00000000 =00000201                  ZONE_MZ2                        equ     $0201
00000000 =00000202                  ZONE_MZ3                        equ     $0202
00000000 =00000400                  ZONE_SYZ1                       equ     $0400
00000000 =00000401                  ZONE_SYZ2                       equ     $0401
00000000 =00000402                  ZONE_SYZ3                       equ     $0402
00000000 =00000100                  ZONE_LZ1                        equ     $0100
00000000 =00000101                  ZONE_LZ2                        equ     $0101
00000000 =00000102                  ZONE_LZ3                        equ     $0102
00000000 =00000300                  ZONE_SLZ1                       equ     $0300
00000000 =00000301                  ZONE_SLZ2                       equ     $0301
00000000 =00000302                  ZONE_SLZ3                       equ     $0302
00000000 =00000500                  ZONE_SBZ1                       equ     $0500
00000000 =00000501                  ZONE_SBZ2                       equ     $0501
00000000 =00000103                  ZONE_SBZ3                       equ     $0103
00000000 =00000502                  ZONE_FZ                         equ     $0502
00000000                            
00000000                            ; Other Equates
00000000                            
00000000 =FFFFF700                  CamX                            equ     $FFFFF700
00000000 =FFFFF704                  CamY                            equ     $FFFFF704
00000000 =FFFFD008                  SonX                            equ     $FFFFD008
00000000 =FFFFD00C                  SonY                            equ     $FFFFD00C
00000000                            
00000000 =FFFFFFBE                  palcheck                        equ     $FFFFFFBE
00000000 =FFFFFFEA                  MusicChk                        equ     $FFFFFFEA
00000000                            
00000000 =FFFFFFC6                  SonicKilled                     equ     $FFFFFFC6
00000000                            
00000000 =00000004                  BitMapXpos    equ    4
00000000 =00000002                  BitMapYpos    equ    2
00000000 =00000100                  BitMapWidth    equ    256
00000000 =00000080                  BitMapHeight    equ    128
00000000 =00000010                  BitMapCellHeight    equ    (BitMapHeight/8)
00000000 =00000020                  BitMapCellWidth    equ    (BitMapWidth/8)
00000000 =00002000                  WallPalBits    equ    $2000
00000000 =00000040                  MapRowWidth    equ    64
00000000 =00008000                  bitmapaddr    equ $8000
00000000 =0000C000                  scrollAaddr    equ    $C000
00000000 =0000D800                  spriteaddr    equ    $D800
00000000 =0000DC00                  hscrolladdr    equ    $DC00
00000000 =0000E000                  scrollBaddr    equ    $E000
00000000 =0000F000                  windowaddr    equ    $F000
00000000 =00000000                  DMA_ByteInc    equ    $0
00000000 =00000002                  DMA_Length1    equ    $2
00000000 =00000004                  DMA_Length2    equ    $4
00000000 =00000006                  DMA_SrcAdr1    equ    $6
00000000 =00000008                  DMA_SrcAdr2    equ    $8
00000000 =0000000A                  DMA_SrcAdr3    equ    $A
00000000 =0000000C                  DMA_DMAenbl    equ    $C
00000000 =0000000E                  DMA_DstAdr1    equ    $E
00000000 =00000010                  DMA_DstAdr2    equ    $10
00000000 =00000012                  DMA_DMADisbl    equ    $12
00000000 =00A04000                  SNDADD          EQU     $A04000
00000000 =00A04001                  SNDDAT          EQU     $A04001
00000000 =00A10008                  CNTLA           EQU     $A10008
00000000 =00A1000A                  CNTLB           EQU     $A1000A
00000000 =00A1000C                  CNTLC           EQU     $A1000C
00000000 =00A10009                  CNTLAW          EQU     $A10009
00000000 =00A1000B                  CNTLBW          EQU     $A1000B
00000000 =00A10009                  CNTLCW          EQU     $A10009
00000000 =00A1000D                  PPCNTL          EQU     $A1000D
00000000 =00A10007                  PPDATA          EQU     $A10007
00000000 =00A11100                  BUSREQ          EQU     $A11100
00000000 =00A11200                  BUSRES          EQU     $A11200
00000000 =00A00000                  Z80RAM          EQU     $A00000
00000000 =00C00000                  VDATA           EQU     $C00000
00000000 =00C00004                  VCTRL           EQU     $C00004
00000000 =00000004                  palid_GHZ 		EQU 4
00000000 =00000001                  palid_Title 	EQU 1
00000000                            SetVdpRegister  MACRO
00000000                                    MOVE.W  #$8000|(\1<<8)|\2,VCTRL; check out the SEGA manual
00000000                                    ENDM
00000000                            SetVdpRegisterCode      MACRO
00000000                                    and.w   #$00ff,\2              ; Mask off high part
00000000                                    or.w    #$8000|(\1<<8),\2
00000000                                    move.w  \2,VCTRL
00000000                                    ENDM
00000000                            AutoIncrement   MACRO
00000000                                    SetVdpRegister  15,\1
00000000                                    ENDM
00000000                            VramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            VSramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000010|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CramWrtAddr  MACRO
00000000                                    MOVE.L  #$C0000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CalcVramWrtAddrCode MACRO
00000000                                    move.w  \1,\2          ; Copy for lower 14 bits
00000000                                    and.l   #$3fff,\2      ; mask
00000000                                    lsl.l   #8,\2
00000000                                    lsl.l   #8,\2          ; Shift up
00000000                                    or.l    #$40000000,\2  ; Set bit that tells VDP it's a VRAM WRITE
00000000                                    lsr.l   #8,\1
00000000                                    lsr.l   #6,\1          ; Shift down 14 bits
00000000                                    and.l   #$3,\1
00000000                                    or.l    \1,\2          ; and combine
00000000                            	endm
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            binclude macro    filedir
00000000                            	incbin	\filedir
00000000                            	endm
00000000                            setROMBank    macro    page,range        ; page = 0-63 (16MB) 512KB pages useable
00000000                                                    ; range = $A130F1 = $0-$7FFFF not writable
00000000                            
00000000                                    if range=$80000
00000000                                    move.b  #page,($A130F3).l    ; range = $A130F3 = $80000-$FFFFF
00000000                                    endif
00000000                                    if range=$100000
00000000                                    move.b  #page,($A130F5).l    ; range = $A130F5 = $100000-$17FFFF
00000000                                    endif
00000000                                    if range=$180000
00000000                                    move.b  #page,($A130F7).l    ; range = $A130F7 = $180000-$1FFFFF
00000000                                    endif
00000000                                    if range=$200000
00000000                                    move.b  #page,($A130F9).l    ; range = $A130F9 = $200000-$27FFFF
00000000                                    endif
00000000                                    if range=$280000
00000000                                    move.b  #page,($A130FB).l    ; range = $A130FB = $280000-$2FFFFF
00000000                                    endif
00000000                                    if range=$300000
00000000                                    move.b  #page,($A130FD).l    ; range = $A130FD = $300000-$37FFFF
00000000                                    endif
00000000                                    if range=$380000
00000000                                    move.b  #page,($A130FF).l    ; range = $A130FF = $380000-$3FFFFF
00000000                                    endif
00000000                                    endm
00000000                            ; we don"t want AS padding out dc.b instructions
00000000                            	; we don"t need to generate anything for a listing file
00000000                            	; we don"t need warnings about privileged instructions
00000000                            		
00000000                            		include "sonic1.macrosetup.asm"
00000000                            ; 1-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn1op	 macro oper,x
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		!oper	x
00000000                            	  else
00000000                            		!oper	1+x
00000000                            		!org	*-1
00000000                            		!dc.b	0
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            ; 2-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn2op	 macro oper,x,y
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            			!oper	x,y
00000000                            		  else
00000000                            			!oper	x,1+y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            	  else
00000000                            		if substr("y",0,1)<>"D"
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            start:
00000000                            			!oper	1+x,y
00000000                            end:
00000000                            			!org	start+3
00000000                            			!dc.b	0
00000000                            			!org	end
00000000                            		  else
00000000                            			!oper	1+x,1+y
00000000                            			!org	*-3
00000000                            			!dc.b	0
00000000                            			!org	*+1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            		else
00000000                            			!oper	1+x,y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		endif
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            	; instructions that were used with 0(a#) syntax
00000000                            	; defined to assemble as they originally did
00000000                            _move	macro
00000000                            		insn2op move.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _add	macro
00000000                            		insn2op add.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _addq	macro
00000000                            		insn2op addq.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmp	macro
00000000                            		insn2op cmp.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmpi	macro
00000000                            		insn2op cmpi.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _clr	macro
00000000                            		insn1op clr.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _tst	macro
00000000                            		insn1op tst.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            	endm
00000000                            		
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstrError, ZeroDivideError, CHKExceptionError, TRAPVError
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViolation, TraceError, LineAEmulation, LineFEmulation
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000060 0000 0000 0000 0000 0000+  		dc.l SpuriousException, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM, ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
00000090 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000A0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000B0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3230+  Date:		dc.b '(C)SEGA 2012.SEP' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; International name
00000180 474D 2030 3030 3032 3130+  		dc.b 'GM 00002109-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 5241 F820                  SRAMSupport:	dc.l $5241F820		; change to $5241F820 (NOT $5241E020) to create SRAM
000001B4 0020 0001                  		dc.l $200001		; SRAM start
000001B8 0020 03FF                  		dc.l $2003FF		; SRAM end
000001BC 5241                               dc.b    'RA'    ; external ram
000001BE F8                                 dc.b    $F8    ; don't clear + odd bytes
000001BF 20                                 dc.b    $20    ; sram
000001C0                            ExRAMAddr:
000001C0 0020 0001 0020 3FFF                dc.l    $200001, $203FFF; start, end
000001C8 2020 2020 2020 2020 2020+  ModemSupport	dc.b '            '	; Modem support
000001D4 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
00000208 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000218                            
00000218                            ; ===========================================================================
00000218                            
00000218                            ErrorTrap:
00000218 4E71                       		nop
0000021A 4E71                       		nop
0000021C 60FA                       		bra.s	ErrorTrap
0000021E                            
0000021E                            EntryPoint:
0000021E 4FF8 FE00                  		lea	($FFFFFE00).w,sp
00000222 4AB9 00A1 0008             		tst.l	($A10008).l
00000228 6600                       		bne.s	PortA_Ok
0000022A 4A79 00A1 000C             		tst.w	($A1000C).l
00000230                            		
00000230                            PortA_Ok:
00000230 6600 0000                  		bne.w	PortC_Ok	; in case of a soft reset
00000234 4BFA 0000                  		lea	InitArray(pc),a5
00000238 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000023C 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000240 1029 EF01                  		move.b	$A10001-$A11100(a1),d0
00000244 0200 000F                  		andi.b	#$F,d0
00000248 6700                       		beq.s	SkipSecurity
0000024A 237C 5345 4741 2F00        		move.l	#'SEGA',$A14000-$A11100(a1)
00000252                            
00000252                            SkipSecurity:
00000252 3014                       		move.w	(a4),d0
00000254 7000                       		moveq	#0,d0
00000256 2C40                       		movea.l	d0,a6
00000258 4E66                       		move.l	a6,usp
0000025A 7200                       		moveq   #VDPInitValues_End-VDPInitValues-1,d1 ; run the following loop $18 times
0000025C                            
0000025C                            VDPInitLoop:
0000025C 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000025E 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000260 DA47                       		add.w	d7,d5		; next register
00000262 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000266 289D                       		move.l	(a5)+,(a4)
00000268 3680                       		move.w	d0,(a3)		; clear	the screen
0000026A 3287                       		move.w	d7,(a1)		; stop the Z80
0000026C 3487                       		move.w	d7,(a2)		; reset	the Z80
0000026E                            
0000026E                            WaitForZ80:
0000026E 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000270 66FC                       		bne.s	WaitForZ80	; if not, branch
00000272 7400                       		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
00000274                            
00000274                            Z80InitLoop:
00000274 10DD                       		move.b	(a5)+,(a0)+
00000276 51CA FFFC                  		dbf	d2,Z80InitLoop
0000027A 3480                       		move.w	d0,(a2)
0000027C 3280                       		move.w	d0,(a1)		; start	the Z80
0000027E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000280                            
00000280                            ClrRAMLoop:
00000280 2D00                       		move.l	d0,-(a6)
00000282 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000286 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000288 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000028A 761F                       		moveq	#$1F,d3
0000028C                            
0000028C                            ClrCRAMLoop:
0000028C 2680                       		move.l	d0,(a3)
0000028E 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000292 289D                       		move.l	(a5)+,(a4)
00000294 7813                       		moveq	#$13,d4
00000296                            
00000296                            ClrVDPStuff:
00000296 2680                       		move.l	d0,(a3)
00000298 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000029C 7A00                       		moveq   #PSGInitValues_End-PSGInitValues-1,d5
0000029E                            
0000029E                            PSGInitLoop:
0000029E 175D 0011                  		move.b	(a5)+,$11(a3)
000002A2 51CD FFFA                  		dbf	d5,PSGInitLoop
000002A6 3480                       		move.w	d0,(a2)
000002A8 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
000002AC 46FC 2700                  		disable_ints	; set the sr
000002B0                            
000002B0                            PortC_Ok:
000002B0                            ;		bra.w	GameProgram
000002B0                            
000002B0                            ;Init_SkipPowerOn:
000002B0 6000 0000                  		bra.w	Test_LockOn
000002B4                            		
000002B4                            ;Z80StartupCodeBegin: ; loc_2CA:
000002B4                            ;    if (*)+$26 < $10000
000002B4                            ; 
000002B4                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002B4                            ;	message "Warning: using pre-assembled Z80 startup code."
000002B4                            ;    	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
000002B4                            ;    endif
000002B4                            ; ===========================================================================
000002B4 8000                       InitArray:	dc.w $8000		; VDP register start number
000002B6 3FFF                       		dc.w $3FFF		; size of RAM/4
000002B8 0100                       		dc.w $100		; VDP register diff
000002BA                            
000002BA 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002BE 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002C2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002C6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002CA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002CE                            VDPInitValues:  ; values for VDP registers
000002CE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002CF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002D0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002D1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002D2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002D3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002D4 00                         		dc.b 0
000002D5 00                         		dc.b 0
000002D6 00                         		dc.b 0
000002D7 00                         		dc.b 0
000002D8 FF                         		dc.b $FF
000002D9 00                         		dc.b 0
000002DA 81                         		dc.b $81
000002DB 37                         		dc.b $37
000002DC 00                         		dc.b 0
000002DD 01                         		dc.b 1
000002DE 01                         		dc.b 1
000002DF 00                         		dc.b 0
000002E0 00                         		dc.b 0
000002E1 FF                         		dc.b $FF
000002E2 FF                         		dc.b $FF
000002E3 00                         		dc.b 0
000002E4 00                         		dc.b 0
000002E5 80                         		dc.b $80
000002E6                            VDPInitValues_End:
000002E6 4000 0080                  		dc.l $40000080
000002EA                            	;	dc.b $AF
000002EA                            	;	dc.b 1
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $1F
000002EA                            	;	dc.b $11
000002EA                            	;	dc.b $27
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $21
000002EA                            	;	dc.b $26
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $77
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $B0
000002EA                            	;	dc.b $DD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $FD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $47
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $4F
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b 8
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $C1
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $F3
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $56
000002EA                            	;	dc.b $36
000002EA                            	;	dc.b $E9
000002EA                            	;	dc.b $E9
000002EA                            ;		dc.l $81048F02
000002EA                            ;		dc.l $C0000000
000002EA                            ;		dc.l $40000010
000002EA                            ;		dc.b $9F
000002EA                            ;		dc.b $BF
000002EA                            ;		dc.b $DF
000002EA                            ;		dc.b $FF
000002EA                            
000002EA                            ;		dc.b $AF,  1,$D9,$1F,$11,$27,  0,$21,$26,  0,$F9,$77,$ED,$B0,$DD,$E1; 0	; Z80 instructions
000002EA                            ;		dc.b $FD,$E1,$ED,$47,$ED,$4F,$D1,$E1,$F1,  8,$D9,$C1,$D1,$E1,$F1,$F9; 16
000002EA                            ;		dc.b $F3,$ED,$56,$36,$E9,$E9; 32
000002EA                            
000002EA                            Z80StartupCodeBegin: ; loc_2CA:
000002EA                            ;    if (*)+$26 < $10000
000002EA                            ;    CPU Z80 ; start compiling Z80 code
000002EA                            ;    phase 0 ; pretend we're at address 0
000002EA                            ;	xor     a	; clear a to 0
000002EA                            ;	ld      bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
000002EA                            ;	ld      de,zStartupCodeEndLoc+1	; initial destination address
000002EA                            ;	ld      hl,zStartupCodeEndLoc	; initial source address
000002EA                            ;	ld      sp,hl	; set the address the stack starts at
000002EA                            ;	ld      (hl),a	; set first byte of the stack to 0
000002EA                            ;	ldir    	; loop to fill the stack (entire remaining available Z80 RAM) with 0
000002EA                            ;	pop     ix	; clear ix
000002EA                            ;	pop     iy	; clear iy
000002EA                            ;	ld      i,a	; clear i
000002EA                            ;	ld      r,a	; clear r
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ex      af,af'	; swap af with af'
000002EA                            ;	exx		; swap bc/de/hl with their shadow registers too
000002EA                            ;	pop     bc	; clear bc
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ld      sp,hl	; clear sp
000002EA                            ;	di      	; clear iff1 (for interrupt handler)
000002EA                            ;	im      1	; interrupt handling mode = 1
000002EA                            ;	ld      (hl),0E9H ; replace the first instruction with a jump to itself
000002EA                            ;	jp      (hl)      ; jump to the first instruction (to stay there forever)
000002EA                            ;    zStartupCodeEndLoc:
000002EA                            ;    dephase ; stop pretending
000002EA                            ;    CPU 68000	; switch back to 68000 code
000002EA                            ;    padding off ; unfortunately our flags got reset so we have to set them again...
000002EA                            ;    listing off
000002EA                            ;    supmode on
000002EA                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002EA                            ;	message "Warning: using pre-assembled Z80 startup code."
000002EA AF01 D91F 1127 0021 2600+      	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
00000310                            ;    endif
00000310                            Z80StartupCodeEnd:
00000310                            
00000310 8104                       	dc.w	$8104	; value for VDP display mode
00000312 8F02                       	dc.w	$8F02	; value for VDP increment
00000314 C000 0000                  	dc.l	$C0000000	; value for CRAM write mode
00000318 4000 0010                  	dc.l	$40000010	; unknown (VSRAM?)
0000031C                            
0000031C                            PSGInitValues:
0000031C 9FBF DFFF                          dc.b    $9F,$BF,$DF,$FF ; values for PSG channel volumes
00000320                            PSGInitValues_End:
00000320                            ; ===========================================================================
00000320                            
00000320                            Test_LockOn:
00000320                            ;		tst.w	($C00004).l
00000320                            ;		move.w	#$4EF9,($FFFFFFF0).w	; machine code for jmp
00000320                            ;		move.l	#VDPInitLoop,($FFFFFFF2).w
00000320                            ;		move.w	#$4EF9,($FFFFFFF6).w
00000320                            ;		move.l	#PSGInitLoop,($FFFFFFF8).w
00000320                            
00000320                            GameProgram:
00000320                                   ;move.b  #2,($A130F1).l ; should this be used?
00000320                                    ;move.b  #1,($A130F3).l
00000320                                    ;move.b  #2,($A130F5).l
00000320                                    ;move.b  #3,($A130F7).l
00000320                                    ;move.b  #4,($A130F9).l
00000320                                    ;move.b  #5,($A130FB).l
00000320                                    ;move.b  #6,($A130FD).l
00000320                                    ;move.b  #7,($A130FF).l
00000320 4A79 00C0 0004             		tst.w	($C00004).l
00000326 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000032E 6700                       		beq.s	CheckSumCheck
00000330 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000338 6700 0000                  		beq.w	GameInit				; if yes, branch
0000033C                            
0000033C                            CheckSumCheck:
0000033C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000340 7E00                       		moveq	#0,d7
00000342 3C3C 007F                  		move.w	#$7F,d6
00000346                            
00000346                            loc_348:
00000346 2CC7                       		move.l	d7,(a6)+
00000348 51CE FFFC                  		dbf	d6,loc_348
0000034C 1039 00A1 0001             		move.b	($A10001).l,d0
00000352 0200 00C0                  		andi.b	#$C0,d0
00000356 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000362                            
00000362                            GameInit:
00000362 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000368 7E00                       		moveq	#0,d7
0000036A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000036E                            
0000036E                            GameClrRAM:
0000036E 2CC7                       		move.l	d7,(a6)+
00000370 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000374                            ;		bsr.w	DetectPAL
00000374 6100 0000                  		bsr.w	VDPSetupGame
00000378 6100 0000                  		bsr.w	JmpTo_SoundDriverLoad
0000037C 6100 0000                  		bsr.w	JoypadInit
00000380 4EB9 0000 0000             		jsr	(loadlivesLS).l
00000386 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038C                            
0000038C                            MainGameLoop:
0000038C 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000390 0240 007C                  		andi.w	#$7C,d0
00000394 207B 0000                  		move.l	GameModeArray(pc,d0.w),a0	; same system of the Sonic 3 GameMode
00000398 4E90                       		jsr	(a0)							; jump to apt location in ROM
0000039A 60F0                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ;dword_62A8E:	dc.l $D8D0027		; DATA XREF: ROM:loc_62A54r
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 0000 0000                  		dc.l	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 0000 0000                  		dc.l	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 0000 0000                  		dc.l	JumpToSegaScreen	; Back to SEGA screen. Was continue ($14)
000003B4                            ; ===========================================================================
000003B4 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 0000 0000                  		dc.l	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 0000 0000                  		dc.l	JumpToSegaScreen	; Splash ($20)
000003C0                            ; ===========================================================================
000003C0 0000 0000                  		dc.l	SplashScreen2	; Sonic Team Splash ($24)
000003C4                            ; ===========================================================================
000003C4 0000 0000                  		dc.l	JumpToSegaScreen	; Basic select character screen ($28)
000003C8                            ; ===========================================================================
000003C8 0000 0000                  		dc.l	MenuScreen		; Options Menu ($2C)
000003CC                            ; ===========================================================================
000003CC 0000 0000                  		dc.l	SSRGScreen	; Sonic Retro/SSRG Splash ($30)
000003D0                            ; ===========================================================================
000003D0 0000 0000                  		dc.l	JumpToSegaScreen	; Sonic Retro/SSRG Splash ($34)
000003D4                            ; ===========================================================================
000003D4 0000 0000                  		dc.l	MenuScreen	; LevelSelect S2 ($38)
000003D8                            ; ===========================================================================
000003D8 0000 0000                  		dc.l	DAC_Player	; DAC Player ($3C)
000003DC                            ; ===========================================================================
000003DC 4E75                       		rts	
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            JumpToSegaScreen:
000003DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w
000003E4 4E75                       		rts
000003E6                            
000003E6                            ;JumpToLevelSelect:
000003E6                            ;		jmp	Level_Select_Menu
000003E6                            ;		rts
000003E6                            ;CheckSumError:
000003E6                            ;		bsr.w	VDPSetupGame
000003E6                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E6                            ;		moveq	#$3F,d7
000003E6                            ;
000003E6                            ;CheckSum_Red:
000003E6                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003E6                            ;
000003E6                            ;CheckSum_Loop:
000003E6                            ;		bra.s	CheckSum_Loop
000003E6                            
000003E6                            ; ===========================================================================
000003E6                            ; New error handler code (debugger) courtesy of Flamewing
000003E6                            	include "DebuggerBlob.asm"
000003E6                            ; These get called from the binary blob. Do not edit them, or move them
000003E6                            ; relative to the binary blobs below.
000003E6 4EF9 0000 0000             	jmp	(KosDec).l
000003EC 4EF9 0000 0000             	jmp	(EniDec).l
000003F2                            
000003F2                            ; This is the terminal code and graphics, plus the disassembler and the plane
000003F2                            ; mappings for the debugger.
000003F2                            	incbin "_debugger/Part1.bin"
00001C9A                            
00001C9A =00000000                  WHITE EQU 0<<13
00001C9A =00002000                  BLUE  EQU 1<<13
00001C9A =00004000                  RED   EQU 2<<13
00001C9A =00006000                  GREEN EQU 3<<13
00001C9A                            ; Strings are word arrays: length followed by characters. You can change the
00001C9A                            ; length, but do NOT change the number of characters! The wasted space is the
00001C9A                            ; price to pay for a binary blob...
00001C9A                            ; The high byte of each word used for a character is the palette line to use:
00001C9A                            HackerName:
00001C9A 000B                       	dc.w 11
00001C9C 0059 006F 0075 0072 0020+  	dc.w WHITE|'Y',	 WHITE|'o',	 WHITE|'u',	 WHITE|'r',	 WHITE|' ',	 WHITE|'N'
00001CA8 0061 006D 0065 0020 0020   	dc.w WHITE|'a',	 WHITE|'m',	 WHITE|'e',	 WHITE|' ',	 WHITE|' '
00001CB2                            	even
00001CB2                            EMailmsg:
00001CB2 0021                       	dc.w 33
00001CB4 2079 206F 2075 2072 202E+  	dc.w BLUE|'y',	BLUE|'o',	BLUE|'u',	BLUE|'r',	BLUE|'.',	BLUE|'e'
00001CC0 206D 2061 2069 206C 2040+  	dc.w BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'l',	BLUE|'@',	BLUE|'s'
00001CCC 2065 2072 2076 2065 2072+  	dc.w BLUE|'e',	BLUE|'r',	BLUE|'v',	BLUE|'e',	BLUE|'r',	BLUE|'.'
00001CD8 2064 206F 206D 2061 2069+  	dc.w BLUE|'d',	BLUE|'o',	BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'n'
00001CE4 2020 2020 2020 2020 2020+  	dc.w BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF0 2020 2020 2020             	dc.w BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF6                            	even
00001CF6                            
00001CF6                            ; Do not move or add padding between the code that follows. The debugger is
00001CF6                            ; split into these many parts because asm68k sucks.
00001CF6                            BusErrorMsg:
00001CF6                            	incbin "_debugger/Part2.bin"
000021A0                            
000021A0                            BusError:
000021A0                            	incbin "_debugger/Part3.bin"
000021BA                            
000021BA                            AddressError:
000021BA                            	incbin "_debugger/Part4.bin"
000021D4                            
000021D4                            TraceError:
000021D4                            	incbin "_debugger/Part5.bin"
000021F0                            
000021F0                            SpuriousException:
000021F0                            	incbin "_debugger/Part6.bin"
0000220C                            
0000220C                            ZeroDivideError:
0000220C                            	incbin "_debugger/Part7.bin"
0000222C                            
0000222C                            CHKExceptionError:
0000222C                            	incbin "_debugger/Part8.bin"
0000224C                            
0000224C                            TRAPVError:
0000224C                            	incbin "_debugger/Part9.bin"
0000226C                            
0000226C                            IllegalInstrError:
0000226C                            	incbin "_debugger/PartA.bin"
00002288                            
00002288                            PrivilegeViolation:
00002288                            	incbin "_debugger/PartB.bin"
000022A4                            
000022A4                            LineAEmulation:
000022A4                            	incbin "_debugger/PartC.bin"
000022C0                            
000022C0                            LineFEmulation:
000022C0                            	incbin "_debugger/PartD.bin"
000022DC                            
000022DC                            TrapVector:
000022DC                            	incbin "_debugger/PartE.bin"
00002352                            
00002352                            ; Edit this to something sensible. One suggestion is the SVN revision.
00002352                            RevisionNumber:
00002352 0001                       	dc.w	1
00002354                            	incbin "_debugger/PartF.bin"
000029AC                            
000029AC                            
000029AC                            
000029AC                            ; ===========================================================================
000029AC                            
000029AC                            ;Art_NewText:	incbin	#artunc\menutextnew.bin	; text used in error messages
000029AC                            ;		even
000029AC                            
000029AC                            ; =============== S U B R O U T I N E =======================================
000029AC                            
000029AC                            HudUpdateAlways:
000029AC 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w
000029B2 6F00                       		ble.s	loc_hud_noupdate
000029B4                            ;		cmpi.b	#$2C,(Game_Mode).w
000029B4                            ;		beq.s	loc_B64_2
000029B4                            ;		tst.b	(Update_HUD_timer).w
000029B4                            ;		beq.w	loc_B64_2
000029B4 11FC 0080 FE1C             		move.b	#-$80,(Update_HUD_Lives).w
000029BA                            ;		bcc.w	loc_B64_2
000029BA                            loc_hud_noupdate:
000029BA 4E75                       		rts
000029BC                            
000029BC                            ; =============== S U B R O U T I N E =======================================
000029BC                            
000029BC                            ; End of function DetectPAL
000029BC                            
000029BC                            ; ===========================================================================
000029BC                            
000029BC                            loc_B10:				; XREF: Vectors
000029BC 4E71                       		nop
000029BE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000029C2 4A38 F62A                  		tst.b	($FFFFF62A).w
000029C6 6700 0000                  		beq.w	VBlank_Sub00
000029CA                            ;		bcc.w	go2
000029CA                            		
000029CA 3039 00C0 0004             go2:	move.w	($C00004).l,d0
000029D0 0240 0008                  		andi.w	#8,d0
000029D4 67F4                       		beq.s	go2
000029D6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000029E0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000029E8 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000029EE 6700                       		beq.s	loc_B42
000029F0 303C 0700                  		move.w	#$700,d0
000029F4                            loc_B3E:
000029F4 51C8 FFFE                  		dbf	d0,loc_B3E
000029F8                            loc_B42:
000029F8 1038 F62A                  		move.b	($FFFFF62A).w,d0
000029FC 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00002A02 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00002A08 0240 003E                  		andi.w	#$3E,d0
00002A0C 303B 0000                  		move.w	VBlank_Routines(pc,d0.w),d0
00002A10 4EBB 0000                  		jsr	VBlank_Routines(pc,d0.w)
00002A14                            
00002A14                            loc_B5E:				; XREF: loc_B88
00002A14 4E71                       		nop
00002A16                            loc_B64:                               ; CODE XREF: ROM:00004846j
00002A16                                                                    ; ROM:00004854j
00002A16 4EB8 29AC                  		jsr		HudUpdateAlways
00002A1A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00002A1E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002A22 4E73                       		rte	
00002A24                            ; ===========================================================================
00002A24                            
00002A24                            
00002A24                            
00002A24                            
00002A24                            VBlank_Routines:
00002A24 0000                       		dc.w VBlank_Sub00-VBlank_Routines ; $00
00002A26 0000                       		dc.w VBlank_Sub02-VBlank_Routines ; $02
00002A28 0000                       		dc.w VBlank_Sub04-VBlank_Routines ; $04
00002A2A 0000                       		dc.w VBlank_Sub06-VBlank_Routines ; $06
00002A2C 0000                       		dc.w VBlank_Sub08-VBlank_Routines ; $08
00002A2E 0000                       		dc.w VBlank_Sub0A-VBlank_Routines ; $0A
00002A30 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $0C
00002A32 0000                       		dc.w VBlank_Sub0E-VBlank_Routines ; $0E
00002A34 0000                       		dc.w VBlank_Sub10-VBlank_Routines ; $10
00002A36 0000                       		dc.w VBlank_Sub12-VBlank_Routines ; $12
00002A38 0000                       		dc.w VBlank_Sub14-VBlank_Routines ; $14
00002A3A 0000                       		dc.w VBlank_Sub16-VBlank_Routines ; $16
00002A3C 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $18
00002A3E                            ; ===========================================================================
00002A3E                            
00002A3E                            ;loc_B88:				; XREF: VBlank; VBlank_Routines
00002A3E                            VBlank_Sub00:
00002A3E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w	; is mode pre-Level?
00002A44 6700                       		beq.s	loc_B9A			; if yes, branch
00002A46 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w	; is mode Level?
00002A4C 6600 FFC6                  		bne.w	loc_B5E			; if yes, branch
00002A50                            
00002A50                            loc_B9A:
00002A50 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	; is level LZ ?
00002A56 6600 FFBC                  		bne.w	loc_B5E			; if not, branch
00002A5A 3039 00C0 0004             		move.w	($C00004).l,d0
00002A60 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00002A66 6700                       		beq.s	loc_BBA			; if not, branch
00002A68 303C 0700                  		move.w	#$700,d0
00002A6C 51C8 FFFE                  		dbf	d0,*			; delay processor
00002A70                            
00002A70                            loc_BBA:
00002A70 31FC 0001 F644             		move.w	#1,($FFFFF644).w	; enable HBlank
00002A76                            ;		move.w	#$100,($A11100).l
00002A76                            ;
00002A76                            ;loc_BC8:
00002A76                            ;		btst	#0,($A11100).l
00002A76                            ;		bne.s	loc_BC8
00002A76 4A38 F64E                  		tst.b	($FFFFF64E).w		; is water above the top of the screen?
00002A7A 6600                       		bne.s	loc_BFE			; if yes, branch
00002A7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002A82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002A88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002A8E 3ABC 977F                  		move.w	#$977F,(a5)
00002A92 3ABC C000                  		move.w	#$C000,(a5)
00002A96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002A9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AA0 6000                       		bra.s	loc_C22
00002AA2                            ; ===========================================================================
00002AA2                            
00002AA2                            loc_BFE:				; XREF: loc_BC8
00002AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00002AA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002AAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002AB4 3ABC 977F                  		move.w	#$977F,(a5)
00002AB8 3ABC C000                  		move.w	#$C000,(a5)
00002ABC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002AC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AC6                            
00002AC6                            loc_C22:				; XREF: loc_BC8
00002AC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002ACA                            ;		move.w	#0,($A11100).l
00002ACA 6000 FF48                  		bra.w	loc_B5E
00002ACE                            ; ===========================================================================
00002ACE                            
00002ACE                            ;loc_C32:
00002ACE                            VBlank_Sub02:				; XREF: VBlank_Routines
00002ACE 6100 0000                  		bsr.w	sub_106E
00002AD2                            
00002AD2                            ;loc_F9A:
00002AD2                            VBlank_Sub14:				; XREF: VBlank_Routines
00002AD2 4A78 FC20                  		tst.w	($FFFFFC20).w
00002AD6 6700 0000                  		beq.w	locret_C42
00002ADA 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002ADE                            
00002ADE                            locret_C42:
00002ADE 4E75                       		rts	
00002AE0                            ; ===========================================================================
00002AE0                            
00002AE0                            ;loc_C44:
00002AE0                            VBlank_Sub04:				; XREF: VBlank_Routines
00002AE0 6100 0000                  		bsr.w	sub_106E
00002AE4 4EB9 0000 0000             		jsr	sub_6886
00002AEA 6100 0000                  		bsr.w	sub_1642
00002AEE 4A78 FC20                  		tst.w	($FFFFFC20).w		; is there time	left on	the demo?
00002AF2 6700 0000                  		beq.w	locret_C5C		; if time is over, branch
00002AF6 5378 FC20                  		subq.w	#1,($FFFFFC20).w	; subtract 1 from time left
00002AFA                            
00002AFA                            locret_C5C:
00002AFA 4E75                       		rts	
00002AFC                            ; ===========================================================================
00002AFC                            
00002AFC                            ;loc_C5E:
00002AFC                            VBlank_Sub06:				; XREF: VBlank_Routines
00002AFC 6100 0000                  		bsr.w	sub_106E
00002B00 4E75                       		rts
00002B02                            ; ===========================================================================
00002B02                            
00002B02                            ;loc_C64:
00002B02                            VBlank_Sub10:				; XREF: VBlank_Routines
00002B02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00002B08 6700 0000                  		beq.w	VBlank_Sub0A		; if yes, branch
00002B0C                            
00002B0C                            ;loc_C5E:
00002B0C                            VBlank_Sub08:				; XREF: VBlank_Routines
00002B0C                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002B0C                            ;
00002B0C                            ;loc_C76:
00002B0C                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002B0C                            ;		bne.s	loc_C76		; if not, branch
00002B0C 6100 0000                  		bsr.w	ReadJoypads
00002B10 4A38 F64E                  		tst.b	($FFFFF64E).w
00002B14 6600                       		bne.s	loc_CB0
00002B16 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B1C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B22 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002B28 3ABC 977F                  		move.w	#$977F,(a5)
00002B2C 3ABC C000                  		move.w	#$C000,(a5)
00002B30 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B36 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B3A 6000                       		bra.s	loc_CD4
00002B3C                            ; ===========================================================================
00002B3C                            
00002B3C                            loc_CB0:				; XREF: loc_C76
00002B3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B42 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B48 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002B4E 3ABC 977F                  		move.w	#$977F,(a5)
00002B52 3ABC C000                  		move.w	#$C000,(a5)
00002B56 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B60                            
00002B60                            loc_CD4:				; XREF: loc_C76
00002B60 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002B64 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B6A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002B70 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002B76 3ABC 977F                  		move.w	#$977F,(a5)
00002B7A 3ABC 7C00                  		move.w	#$7C00,(a5)
00002B7E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002B84 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B88 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B8E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002B94 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002B9A 3ABC 977F                  		move.w	#$977F,(a5)
00002B9E 3ABC 7800                  		move.w	#$7800,(a5)
00002BA2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002BA8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002BAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002BB2                            
00002BB2                            loc_D50:
00002BB2                            ;		move.w	#0,($A11100).l
00002BB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002BB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002BBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002BC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002BCA 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00002BD0 6400                       		bcc.s	Demo_Time
00002BD2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00002BD8 588F                       		addq.l	#4,sp
00002BDA 6000 FE3A                  		bra.w	loc_B64
00002BDE                            
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            ; Subroutine to	run a demo for an amount of time
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            
00002BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BDE                            
00002BDE                            
00002BDE                            Demo_Time:				; XREF: loc_D50; HBlank
00002BDE 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002BE4 4EB9 0000 0000             		jsr	AniArt_Load
00002BEA 4EB9 0000 0000             		jsr	HudUpdate
00002BF0 6100 0000                  		bsr.w	sub_165E
00002BF4 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
00002BF8 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00002BFC 5378 FC20                  		subq.w	#1,($FFFFFC20).w ; subtract 1 from time	left
00002C00                            
00002C00                            Demo_TimeEnd:
00002C00 4E75                       		rts	
00002C02                            ; End of function Demo_Time
00002C02                            
00002C02                            ; ===========================================================================
00002C02                            
00002C02                            ;loc_DA6:
00002C02                            VBlank_Sub0A:				; XREF: VBlank_Routines
00002C02                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C02                            ;
00002C02                            ;loc_DAE:
00002C02                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C02                            ;		bne.s	loc_DAE		; if not, branch
00002C02 6100 0000                  		bsr.w	ReadJoypads
00002C06 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C0C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002C12 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002C18 3ABC 977F                  		move.w	#$977F,(a5)
00002C1C 3ABC C000                  		move.w	#$C000,(a5)
00002C20 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002C26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C30 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002C36 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002C3C 3ABC 977F                  		move.w	#$977F,(a5)
00002C40 3ABC 7800                  		move.w	#$7800,(a5)
00002C44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C54 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002C5A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002C60 3ABC 977F                  		move.w	#$977F,(a5)
00002C64 3ABC 7C00                  		move.w	#$7C00,(a5)
00002C68 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C72                            ;		move.w	#0,($A11100).l
00002C72 4EB9 0000 0000             		jsr	PalCycle_SS
00002C78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002C7E 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00002C84 6400                       		bcc.s	@update
00002C86 6000 0000                  		bra.w	locret_E70
00002C8A                            		
00002C8A                            	@update:
00002C8A 4EB9 0000 0000             		jsr	SS_LoadWalls
00002C90                            ;		jsr	HUDUpdate
00002C90                            		
00002C90                            loc_E64:
00002C90 4A78 FC20                  		tst.w	($FFFFFC20).w
00002C94 6700 0000                  		beq.w	locret_E70
00002C98 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002C9C                            
00002C9C                            locret_E70:
00002C9C 4E75                       		rts	
00002C9E                            ; ===========================================================================
00002C9E                            
00002C9E                            ;loc_E72:
00002C9E                            VBlank_Sub0C:				; XREF: VBlank_Routines
00002C9E                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C9E                            ;
00002C9E                            ;loc_E7A:
00002C9E                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C9E                            ;		bne.s	loc_E7A		; if not, branch
00002C9E 6100 0000                  		bsr.w	ReadJoypads
00002CA2 4A38 F64E                  		tst.b	($FFFFF64E).w
00002CA6 6600                       		bne.s	loc_EB4
00002CA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CAE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CB4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002CBA 3ABC 977F                  		move.w	#$977F,(a5)
00002CBE 3ABC C000                  		move.w	#$C000,(a5)
00002CC2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CC8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CCC 6000                       		bra.s	loc_ED8
00002CCE                            ; ===========================================================================
00002CCE                            
00002CCE                            loc_EB4:				; XREF: loc_E7A
00002CCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CD4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CDA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002CE0 3ABC 977F                  		move.w	#$977F,(a5)
00002CE4 3ABC C000                  		move.w	#$C000,(a5)
00002CE8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CF2                            
00002CF2                            loc_ED8:				; XREF: loc_E7A
00002CF2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002CF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002D02 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002D08                            
00002D08                            loc_EEE:
00002D08 3ABC 977F                  		move.w	#$977F,(a5)
00002D0C 3ABC 7C00                  		move.w	#$7C00,(a5)
00002D10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D1A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D20 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002D26 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002D2C 3ABC 977F                  		move.w	#$977F,(a5)
00002D30 3ABC 7800                  		move.w	#$7800,(a5)
00002D34 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D3A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D3E 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002D44                            
00002D44                            loc_F54:
00002D44                            ;		move.w	#0,($A11100).l	; start	the Z80
00002D44 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002D4A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002D50 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002D56 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002D5C 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002D62 4EB9 0000 0000             		jsr	AniArt_Load
00002D68 4EB9 0000 0000             		jsr	HudUpdate
00002D6E 6100 0000                  		bsr.w	sub_1642
00002D72 4E75                       		rts	
00002D74                            ; ===========================================================================
00002D74                            
00002D74                            ;loc_F8A:
00002D74                            VBlank_Sub0E:				; XREF: VBlank_Routines
00002D74 6100 0000                  		bsr.w	sub_106E
00002D78 5238 F628                  		addq.b	#1,($FFFFF628).w
00002D7C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00002D82 4E75                       		rts	
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            ;loc_F9A:
00002D84                            VBlank_Sub12:				; XREF: VBlank_Routines
00002D84 6100 0000                  		bsr.w	sub_106E
00002D88 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002D8C 6000 0000                  		bra.w	sub_1642
00002D90                            ; ===========================================================================
00002D90                            
00002D90                            ;loc_FA6:
00002D90                            VBlank_Sub16:				; XREF: VBlank_Routines
00002D90                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002D90                            ;
00002D90                            ;loc_FAE:
00002D90                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002D90                            ;		bne.s	loc_FAE		; if not, branch
00002D90 6100 0000                  		bsr.w	ReadJoypads
00002D94 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D9A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002DA0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002DA6 3ABC 977F                  		move.w	#$977F,(a5)
00002DAA 3ABC C000                  		move.w	#$C000,(a5)
00002DAE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002DB4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DBE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002DC4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002DCA 3ABC 977F                  		move.w	#$977F,(a5)
00002DCE 3ABC 7800                  		move.w	#$7800,(a5)
00002DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002DE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002DEE 3ABC 977F                  		move.w	#$977F,(a5)
00002DF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E00                            ;		move.w	#0,($A11100).l	; start	the Z80
00002E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002E06                            ;		jsr	sub_1642
00002E06                            loc_1060:
00002E06 4A78 FC20                  		tst.w	($FFFFFC20).w
00002E0A 6700 0000                  		beq.w	locret_106C
00002E0E 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002E12                            
00002E12                            locret_106C:
00002E12 4E75                       		rts	
00002E14                            
00002E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E14                            
00002E14                            
00002E14                            sub_106E:				; XREF: VBlank_Sub02; et al
00002E14                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002E14                            ;
00002E14                            ;loc_1076:
00002E14                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002E14                            ;		bne.s	loc_1076	; if not, branch
00002E14 6100 0000                  		bsr.w	ReadJoypads
00002E18 4A38 F64E                  		tst.b	($FFFFF64E).w
00002E1C 6600                       		bne.s	loc_10B0
00002E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E2A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002E30 3ABC 977F                  		move.w	#$977F,(a5)
00002E34 3ABC C000                  		move.w	#$C000,(a5)
00002E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E42 6000                       		bra.s	loc_10D4
00002E44                            ; ===========================================================================
00002E44                            
00002E44                            loc_10B0:				; XREF: sub_106E
00002E44 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E4A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E50 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002E56 3ABC 977F                  		move.w	#$977F,(a5)
00002E5A 3ABC C000                  		move.w	#$C000,(a5)
00002E5E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E64 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E68                            
00002E68                            loc_10D4:				; XREF: sub_106E
00002E68 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E6E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002E74 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002E7A 3ABC 977F                  		move.w	#$977F,(a5)
00002E7E 3ABC 7800                  		move.w	#$7800,(a5)
00002E82 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002E88 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E92 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002E98 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002E9E 3ABC 977F                  		move.w	#$977F,(a5)
00002EA2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002EA6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002EAC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002EB0                            ;		move.w	#0,($A11100).l	; start	the Z80
00002EB0 4E75                       		rts
00002EB2                            ; End of function sub_106E
00002EB2                            
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            ; Subroutine to	move pallets from the RAM to CRAM
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            
00002EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EB2                            
00002EB2                            
00002EB2                            PalToCRAM:
00002EB2 46FC 2700                  		disable_ints
00002EB6 4A78 F644                  		tst.w	($FFFFF644).w
00002EBA 6700                       		beq.s	locret_119C
00002EBC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00002EC2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00002EC6 43F9 00C0 0000             		lea	($C00000).l,a1
00002ECC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00002ED0 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00002ED8                            		rept 32
00002ED8                            		move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
00002ED8 2298 2298 2298 2298 2298+  		endr
00002F18 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00002F1E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00002F22 4A38 F64F                  		tst.b	($FFFFF64F).w
00002F26 6600                       		bne.s	loc_119E
00002F28                            
00002F28                            locret_119C:
00002F28 4E73                       		rte	
00002F2A                            ; ===========================================================================
00002F2A                            
00002F2A                            loc_119E:				; XREF: PalToCRAM
00002F2A 4238 F64F                  		clr.b	($FFFFF64F).w
00002F2E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00002F32 4EB8 2BDE                  		jsr	Demo_Time
00002F36 4E71                       		nop
00002F38                            loc_4862:                               ; CODE XREF: ROM:00004846j
00002F38 4EB8 29AC                  		jsr		HudUpdateAlways
00002F3C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002F40 4E73                       		rte		
00002F42                            ; End of function PalToCRAM
00002F42                            
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            ; Subroutine to	initialise joypads
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            
00002F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F42                            
00002F42                            
00002F42                            JoypadInit:				; XREF: GameClrRAM
00002F42 33FC 0100 00A1 1100 0839+  		stopZ80 ; stop the Z80
00002F54                            
00002F54                            Joypad_WaitZ80:
00002F54 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00002F5C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00002F5E 7040                       		moveq	#$40,d0
00002F60 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00002F66 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00002F6C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00002F72                            ;		jsr	sndDriverInput
00002F72 33FC 0000 00A1 1100        		startZ80	; start	the Z80
00002F7A 4E75                       		rts	
00002F7C                            ; End of function JoypadInit
00002F7C                            
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; Subroutine to read joypad input, and send it to the RAM
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002F7C                            
00002F7C                            ; sub_111C:
00002F7C                            ReadJoypads:
00002F7C 41F8 F604                  	lea	(Ctrl_1).w,a0	; address where joypad states are written
00002F80 43F9 00A1 0003             	lea	(Z80_Port_1_Data+1).l,a1	; first joypad port
00002F86 0810 0006                  	btst	#button_A,(a0)	; was button A held
00002F8A 6700                       	beq.s	Game_no_reset			; if not, branch
00002F8C 0810 0004                  	btst	#button_B,(a0)	; was button B held 
00002F90 6700                       	beq.s	Game_no_reset			; if not, branch
00002F92 0810 0005                  	btst	#button_C,(a0)	; was button C held 
00002F96 6700                       	beq.s	Game_no_reset			; if not, branch
00002F98 0810 0007                  	btst	#7,(a0) ; was Start button held?
00002F9C 6700                       	beq.s	Game_no_reset	; if not, branch
00002F9E 4EF8 021E                  	jmp		EntryPoint
00002FA2                            
00002FA2                            Game_no_reset:	
00002FA2 6100                       	bsr.s	Joypad_Read		; do the first joypad
00002FA4 5449                       	addq.w	#2,a1			; do the second joypad
00002FA6                            ; End of function ReadJoypads
00002FA6                            
00002FA6                            
00002FA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002FA6                            
00002FA6                            ; sub_112A:
00002FA6                            Joypad_Read:
00002FA6 12BC 0000                  	move.b	#0,(a1)
00002FAA 4E71                       	nop
00002FAC 4E71                       	nop
00002FAE 1011                       	move.b	(a1),d0
00002FB0 E508                       	lsl.b	#2,d0
00002FB2 0200 00C0                  	andi.b	#$C0,d0
00002FB6 12BC 0040                  	move.b	#$40,(a1)
00002FBA 4E71                       	nop
00002FBC 4E71                       	nop
00002FBE 1211                       	move.b	(a1),d1
00002FC0 0201 003F                  	andi.b	#$3F,d1
00002FC4 8001                       	or.b	d1,d0
00002FC6 4600                       	not.b	d0
00002FC8 1210                       	move.b	(a0),d1
00002FCA B101                       	eor.b	d0,d1
00002FCC 10C0                       	move.b	d0,(a0)+
00002FCE C200                       	and.b	d0,d1
00002FD0 10C1                       	move.b	d1,(a0)+
00002FD2 4E75                       	rts
00002FD4                            ; End of function Joypad_Read
00002FD4                            
00002FD4                            
00002FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FD4                            
00002FD4                            
00002FD4                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00002FD4 41F9 00C0 0004             		lea	($C00004).l,a0
00002FDA 43F9 00C0 0000             		lea	($C00000).l,a1
00002FE0 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00002FE6 7E12                       		moveq	#$12,d7
00002FE8                            
00002FE8                            VDP_Loop:
00002FE8 309A                       		move.w	(a2)+,(a0)
00002FEA 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00002FEE 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00002FF4 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00002FF8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00002FFE 7000                       		moveq	#0,d0
00003000 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000300A 3280                       		move.w	d0,(a1)
0000300C 3280                       		move.w	d0,(a1)
0000300E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l
00003018 3E3C 003F                  		move.w	#$3F,d7	
0000301C                            
0000301C                            VDP_ClrCRAM:
0000301C 3280                       		move.w	d0,(a1)
0000301E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00003022                            
00003022 42B8 F616                  		clr.l	($FFFFF616).w
00003026 42B8 F61A                  		clr.l	($FFFFF61A).w
0000302A 2F01                       		move.l	d1,-(sp)
0000302C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003032 3ABC 8F01                  		move.w	#$8F01,(a5)
00003036 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000303C 3ABC 9780                  		move.w	#$9780,(a5)
00003040 2ABC 4000 0080             		move.l	#$40000080,(a5)
00003046 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000304E                            
0000304E                            loc_128E:
0000304E 3215                       		move.w	(a5),d1
00003050 0801 0001                  		btst	#1,d1
00003054 66F8                       		bne.s	loc_128E
00003056                            
00003056 3ABC 8F02                  		move.w	#$8F02,(a5)
0000305A 221F                       		move.l	(sp)+,d1
0000305C 4E75                       		rts	
0000305E                            ; End of function VDPSetupGame
0000305E                            
0000305E                            ; ===========================================================================
0000305E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00003060 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00003062 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00003064 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00003066 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00003068 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000306A 8600                       		dc.w $8600		; unused
0000306C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000306E 8800                       		dc.w $8800		; unused
00003070 8900                       		dc.w $8900		; unused
00003072 8A00                       		dc.w $8A00		; default H.interrupt register
00003074 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00003076 8C81                       		dc.w $8C81		; 40-cell display mode
00003078 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000307A 8E00                       		dc.w $8E00		; unused
0000307C 8F02                       		dc.w $8F02		; set VDP increment size
0000307E 9001                       		dc.w $9001		; 64-cell hscroll size
00003080 9100                       		dc.w $9100		; window horizontal position
00003082 9200                       		dc.w $9200		; window vertical position
00003084                            
00003084                            ; ---------------------------------------------------------------------------
00003084                            ; Subroutine to	clear the screen
00003084                            ; ---------------------------------------------------------------------------
00003084                            
00003084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003084                            
00003084                            
00003084                            ClearScreen:
00003084 4BF9 00C0 0004             		lea	($C00004).l,a5
0000308A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000308E 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00003094 3ABC 9780                  		move.w	#$9780,(a5)
00003098 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000309E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030A6                            
000030A6                            loc_12E6:
000030A6 3215                       		move.w	(a5),d1
000030A8 0801 0001                  		btst	#1,d1
000030AC 66F8                       		bne.s	loc_12E6
000030AE                            
000030AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000030B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030B8 3ABC 8F01                  		move.w	#$8F01,(a5)
000030BC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000030C2 3ABC 9780                  		move.w	#$9780,(a5)
000030C6 2ABC 6000 0083             		move.l	#$60000083,(a5)
000030CC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030D4                            
000030D4                            loc_1314:
000030D4 3215                       		move.w	(a5),d1
000030D6 0801 0001                  		btst	#1,d1
000030DA 66F8                       		bne.s	loc_1314
000030DC                            
000030DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000030E0 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000030E8 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000030F0 43F8 F800                  		lea	(Sprite_Table).w,a1
000030F4 7000                       		moveq	#0,d0
000030F6 323C 00A0                  		move.w	#$A0,d1
000030FA                            
000030FA                            loc_133A:
000030FA 22C0                       		move.l	d0,(a1)+
000030FC 51C9 FFFC                  		dbf	d1,loc_133A
00003100                            
00003100 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003104 7000                       		moveq	#0,d0
00003106 323C 0100                  		move.w	#$100,d1
0000310A                            
0000310A                            loc_134A:
0000310A 22C0                       		move.l	d0,(a1)+
0000310C 51C9 FFFC                  		dbf	d1,loc_134A
00003110 4E75                       		rts	
00003112                            ; End of function ClearScreen
00003112                            
00003112                            JmpTo_SoundDriverLoad: 
00003112 4E71                       	nop
00003114 4EF9 0000 0000             	jmp	(SoundDriverLoad).l
0000311A                            
0000311A                            SoundDriverLoad_Routine:
0000311A                            	include	"s1sounddriver.asm"
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            ; Subroutine to	load the sound driver
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            
0000311A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000311A                            
0000311A                            
0000311A                            SoundDriverLoad:            ; XREF: GameClrRAM; TitleScreen
0000311A                            LoadZ80drv:
0000311A 4E71                       		nop
0000311C 33FC 0100 00A1 1100        		move.w	#$100,(z80_bus_request).l
00003124 33FC 0100 00A1 1200        		resetZ80
0000312C 41F9 0000 01A4             		lea		(RomEndLoc).l,a0
00003132 2010                       		move.l	(a0),d0
00003134 5280                       		addq.l	#1,d0
00003136 2040                       		movea.l	d0,a0
00003138 43F9 00A0 0000             		lea	($A00000).l,a1
0000313E 4EB9 0000 0000             		jsr   (KosDec).l
00003144                            ; 		lea	(DriverResetData).l,a0
00003144                            ;		lea	($A01C8A).l,a1									; z80 ram start of variables (A01C00 in older version)
00003144                            ;		move.w	#DriverResetDataEnd-DriverResetData,d0
00003144                             
00003144                            ;DriverResetDataLoadLoop:
00003144                            ;		move.b	(a0)+,(a1)+
00003144                            ;		dbf	d0,DriverResetDataLoadLoop
00003144 0839 0000 00C0 0005        	btst	#0,($C00005).l	; check video mode
0000314C 56F9 00A0 1C02             		sne		($A01C02).l          					; set PAL mode flag 
00003152                            
00003152 33FC 0000 00A1 1200        		resetZ80a
0000315A 4E71                       		nop
0000315C 4E71                       		nop	
0000315E 4E71                       		nop	
00003160 4E71                       		nop	
00003162 33FC 0100 00A1 1200        		resetZ80
0000316A 33FC 0000 00A1 1100        		startZ80
00003172 4E75                       		rts
00003174                            ; End of function SoundDriverLoad
00003174                             
00003174                            DriverResetData:
00003174 0000 0000 0000 0000 0000+  		dc.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003184                            DriverResetDataEnd:
00003184                            ;End of function SoundDriverLoad
00003184                            ; ---------------------------------------------------------------------------
00003184                            ; Subroutines to control Mega PCM
00003184                            ; ---------------------------------------------------------------------------
00003184                            
00003184                            ;Z80_RAM			equ	$A00000
00003184 =00001FFC                  MegaPCM_InputFlag	equ	$1FFC  
00003184 =00001FFD                  MegaPCM_Mode		equ	$1FFD
00003184 =00001FFE                  MegaPCM_DAC_Number_2	equ	$1FFE
00003184 =00001FFF                  MegaPCM_DAC_Number	equ	$1FFF
00003184                            
00003184                            ; ---------------------------------------------------------------------------
00003184                            PlaySample:
00003184 47F9 00A0 0000             	lea	Z80_RAM,a3
0000318A 33FC 0100 00A1 1100 0839+  	stopz80
0000319C 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031A2 1740 1FFF                  	move.b	d0,MegaPCM_DAC_Number(a3)
000031A6 33FC 0000 00A1 1100        	startZ80
000031AE 4E75                       	rts
000031B0                            
000031B0                            ; ---------------------------------------------------------------------------
000031B0                            PlaySample_2:
000031B0 47F9 00A0 0000             	lea	Z80_RAM,a3
000031B6 33FC 0100 00A1 1100 0839+  	stopZ80
000031C8 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031CE 1740 1FFE                  	move.b	d0,MegaPCM_DAC_Number_2(a3)
000031D2 33FC 0000 00A1 1100        	startZ80
000031DA 4E75                       	rts
000031DC                            
000031DC                            ; ---------------------------------------------------------------------------
000031DC                            Set_MegaPCM_Mode:
000031DC 47F9 00A0 0000             	lea	Z80_RAM,a3
000031E2 33FC 0100 00A1 1100 0839+  	stopZ80
000031F4 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031FA 1740 1FFD                  	move.b	d0,MegaPCM_Mode(a3)
000031FE 33FC 0000 00A1 1100        	startZ80
00003206 4E75                       	rts
00003206 4E75                       	rts
00003208 4E75                       	rts
0000320A                            
0000320A                            
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            ; Subroutine to play a DAC sample
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            
0000320A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000320A                            
0000320A                            
0000320A                            PlayDAC:
0000320A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00003210 4E75                       		rts	
00003212                            ; End of function PlayDAC
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	load the PCM sound driver
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            ;PCMDriverLoad: ; XREF: GameClrRAM; TitleScreen
00003212                            ;		move.w #0,($A11200).l
00003212                            ;		move.w #$100,($A11100).l ; stop the Z80
00003212                            ;		move.w #$100,($A11200).l ; reset the Z80
00003212                            
00003212                            ;		stopZ80
00003212                            ;		lea (Z802),a0		; load sound driver
00003212                            ;		lea ($A00000).l,a1
00003212                            ;		move.w #Z802End-Z802,d1
00003212                            
00003212                            ;LoadDriver:
00003212                            ;		move.b (a0)+,(a1)+
00003212                            ;		dbf d1,LoadDriver
00003212                            ;		move.b #$01,($FFFFFFFF).w	; set PCM Driver flag
00003212                            ;		rts
00003212                            
00003212                            ;Z802:
00003212                            ;	if PCMDC=1
00003212                            ;		incbin sound\driver\pcmdC.bin
00003212                            ;	else
00003212                            ;		incbin sound\driver\pcmd.bin
00003212                            ;	endif
00003212                            ;		even
00003212                            		
00003212                            ;Z802End:
00003212                            ;		rts
00003212                            ; End of function PCMDriverLoad
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	play a sound or	music track
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            PlaySound:
00003212 0C40 00FB                  		cmpi.w	#$FB,d0
00003216 6D00                       		blt.s	PlayNotSpecialFlag
00003218 6200                       		bhi.s	TestForNormalSpeed
0000321A 303C 0008                  		move	#8,d0
0000321E 4EF9 0000 0000             		jmp	SetTempo
00003224                             
00003224                            TestForNormalSpeed:
00003224 0C40 00FC                  		cmpi.w	#$FC,d0
00003228 6600                       		bne.s	PlayNotSpecialFlag
0000322A 4240                       		clr.w	d0
0000322C 4EF9 0000 0000             		jmp	SetTempo
00003232                             
00003232                            PlayNotSpecialFlag:
00003232 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000323A                             
0000323A                            PlaySoundZ80NotStopped:
0000323A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003242 66F6                       		bne.s	PlaySoundZ80NotStopped	; loop until it says it's stopped
00003244 13C0 00A0 1C0A             		move.b	d0,($A01C0A).l
0000324A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003252 4E75                       		rts
00003254                            ; End of function PlaySound
00003254                             
00003254                            ; ---------------------------------------------------------------------------
00003254                            ; Exclusive sound/music subroutine
00003254                            ; ---------------------------------------------------------------------------
00003254                             
00003254                             
00003254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003254                             
00003254                             
00003254                             
00003254                            PlaySound_Ex:
00003254 4A28 0004                  		tst.b	4(A0)
00003258 6A00                       		bpl.s	SkipPlaySound_Special
0000325A                            
0000325A                            ; ---------------------------------------------------------------------------
0000325A                            ; Unused sound/music subroutine
0000325A                            ; ---------------------------------------------------------------------------
0000325A                             
0000325A                            PlaySound_Unk:
0000325A 4E71                       		nop
0000325C                            ; ---------------------------------------------------------------------------
0000325C                            ; Subroutine to	play a special sound/music (FB-FF)
0000325C                            ; ---------------------------------------------------------------------------
0000325C                             
0000325C                            PlaySound_Special:
0000325C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003264                             
00003264                            PlaySound_SpecialZ80NotStopped:
00003264 0839 0000 00A1 1100        		btst	#0,($A11100).l
0000326C 66F6                       		bne.s	PlaySound_SpecialZ80NotStopped
0000326E B039 00A0 1C0B             		cmp.b	($A01C0B).l,d0
00003274 6700                       		beq.s	PlaySound_Special1
00003276 4A39 00A0 1C0B             		tst.b	($A01C0B).l
0000327C 6600                       		bne.s	PlaySound_Special0
0000327E 13C0 00A0 1C0B             		move.b	d0,($A01C0B).l
00003284 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000328C 4E75                       		rts
0000328E                             
0000328E                            PlaySound_Special0:
0000328E 13C0 00A0 1C0C             		move.b	d0,($A01C0C).l
00003294                             
00003294                            PlaySound_Special1:
00003294 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000329C                             
0000329C                            SkipPlaySound_Special:
0000329C 4E75                       		rts
0000329E                            ; End of function PlaySound_Special
0000329E                             
0000329E                            ; ---------------------------------------------------------------------------
0000329E                            ; Subroutine to change the music tempo
0000329E                            ; ---------------------------------------------------------------------------
0000329E                             
0000329E                            SetTempo:
0000329E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000032A6                             
000032A6                            SetTempoZ80NotStopped:
000032A6 0839 0000 00A1 1100        		btst	#0,($A11100).l
000032AE 66F6                       		bne.s	SetTempoZ80NotStopped
000032B0 13C0 00A0 1C08             		move.b	D0,($A01C08).l
000032B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000032BE 4E75                       		rts
000032C0                            
000032C0                            
000032C0                            ; -------------------------------------------------------------------------
000032C0                            ; Pause Game Module new beta pause code below
000032C0                            ; -------------------------------------------------------------------------
000032C0                            
000032C0 =FFFFD040                  obj_Pause = $FFFFD040
000032C0                            
000032C0                            ;PauseGame:				; XREF: Level_MainLoop; et al
000032C0                            ;	tst.b	$FFFFF605		; is Start button pressed?
000032C0                            ;	bpl	NoPause			; if not, branch
000032C0                            ;	cmpi.b	#6,$FFFFD024		; is Sonic dying?
000032C0                            ;	bcc	NoPause			; if yes, branch
000032C0                            ;	tst.b	$FFFFD080		; are Title Cards or Level Results being processed?
000032C0                            ;	bne	NoPause			; if yes, branch
000032C0                            ;	tst.w	$FFFFD130 ; has title card sequence finished?
000032C0                            ;	bne	NoPause	; if not, branch
000032C0                            ;	tst.w	$FFFFD5C0
000032C0                            ;	bne	NoPause
000032C0                            	; Prepare to pause the game
000032C0                            ;	move.w	#1,($FFFFF63A).w	; freeze time
000032C0                            ;	move.b	#1,($FFFFF003).w	; pause music
000032C0                            ;	move.b	$FFFFD1C0,obj_Pause+$1F		; ++ hide spin dust object
000032C0                            ;	sf.b	$FFFFD1C0
000032C0                            
000032C0                            	; Load Pause art
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; synchronize
000032C0                            ;	jsr	DelayProgram		;
000032C0                            ;	jsr	Pause_LoadBGArt
000032C0                            
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	DisplaySprite		; add it to the sprites list
000032C0                            ;	jsr	SaveSpriteList		;
000032C0                            
000032C0                            ;Pause_Loop:
000032C0                            	; Main display & processing stuff
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
000032C0                            ;	jsr	DelayProgram		; render frame
000032C0                            ;	jsr	RunPLC_RAM
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	LoadSpriteList
000032C0                            ;	jsr	BuildSprites
000032C0                            
000032C0                            	; Check if tha game should be unpaused
000032C0                            ;	tst.b	$FFFFF605		; was Start pressed?
000032C0                            ;	bpl.s	Pause_Loop		; if not, branch     
000032C0                            
000032C0                            ;	move.b	obj_Pause+$1F,$FFFFD1C0	; ++ display spin dust object 
000032C0                            	
000032C0                            	; Kill "PAUSE" objecto
000032C0                            ;	lea	obj_Pause,a0
000032C0                            ;	jsr	DeleteObject
000032C0                            
000032C0                            ;	jsr	sub_F2F8
000032C0                            ;	tst.w	($FFFFFE08).w
000032C0                            ;	bne.s	@0
000032C0                            ;	cmpi.b	#6,($FFFFD024).w
000032C0                            ;	bcc.s	@1
000032C0                            ;@0	jsr	DeformBgLayer
000032C0                            ;@1
000032C0                            
000032C0                            ; ============================================================================
000032C0                            
000032C0                            ;Unpause:
000032C0                            ;		moveq	#0,d0
000032C0                            ;		move.b	($FFFFFFBA).w,d0
000032C0                            ;		add.b	d0,d0
000032C0                            ;		move.w	Pause_Index(pc,d0.w),d1
000032C0                            ;		jmp	Pause_Index(pc,d1.w)
000032C0                            ; ===========================================================================
000032C0                            ;Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
000032C0                            ;		dc.w Pause_Unpause_3-Pause_Index
000032C0                            ;		dc.w Pause_GotoTitle-Pause_Index
000032C0                            ;Pause_GotoTitle:
000032C0                            ;		move.b	#4,($FFFFF600).w
000032C0                            ;		nop
000032C0                            ;		jmp		Pause_UnpauseFin
000032C0                            ;Pause_Unpause_3:
000032C0                            ;	move.w	#1,($FFFFFE02).w ; restart level
000032C0                            		
000032C0                            ;Pause_UnpauseFin:
000032C0                            ;	move.b	#$80,($FFFFF003).w
000032C0                            ;	move.w	#0,($FFFFF63A).w
000032C0                            
000032C0                            ;NoPause	rts
000032C0                            
000032C0                            ; ===============================================================
000032C0                            
000032C0                            ;Pause_LoadBGArt:
000032C0                            ;		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
000032C0                            ;		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
000032C0                            ;								; In this case, VRAM = $541*20
000032C0                            ;		move.w	#$40,d3
000032C0                            ;		jsr	(QueueDMATransfer).l
000032C0                            ;		rts
000032C0                            
000032C0                            
000032C0                            ; ---------------------------------------------------------------
000032C0                            ; Subroutine to save sprite list
000032C0                            ; ---------------------------------------------------------------
000032C0                            
000032C0                            SaveSpriteList:
000032C0 41F8 D070                  	lea	obj_Pause+$30,a0
000032C4 43F8 AC00                  	lea	$FFFFAC00,a1
000032C8 30D1                       	move.w	(a1),(a0)+		; save layer 0
000032CA 30E9 0080                  	move.w	$80(a1),(a0)+		; save layer 1
000032CE 30E9 0100                  	move.w	$100(a1),(a0)+		; save layer 2
000032D2 30E9 0180                  	move.w	$180(a1),(a0)+		; save layer 3
000032D6 30E9 0200                  	move.w	$200(a1),(a0)+		; save layer 4
000032DA 30E9 0280                  	move.w	$280(a1),(a0)+		; save layer 5
000032DE 30E9 0300                  	move.w	$300(a1),(a0)+		; save layer 6
000032E2 30E9 0380                  	move.w	$380(a1),(a0)+		; save layer 7
000032E6 4E75                       	rts
000032E8                            
000032E8                            ; ---------------------------------------------------------------
000032E8                            ; Subroutine to load sprite list
000032E8                            ; ---------------------------------------------------------------
000032E8                            
000032E8                            LoadSpriteList:
000032E8 41F8 D070                  	lea	obj_Pause+$30,a0
000032EC 43F8 AC00                  	lea	$FFFFAC00,a1
000032F0 3298                       	move.w	(a0)+,(a1)		; load layer 0
000032F2 3358 0080                  	move.w	(a0)+,$80(a1)		; load layer 1
000032F6 3358 0100                  	move.w	(a0)+,$100(a1)		; load layer 2
000032FA 3358 0180                  	move.w	(a0)+,$180(a1)		; load layer 3
000032FE 3358 0200                  	move.w	(a0)+,$200(a1)		; load layer 4
00003302 3358 0280                  	move.w	(a0)+,$280(a1)		; load layer 5
00003306 3358 0300                  	move.w	(a0)+,$300(a1)		; load layer 6
0000330A 3358 0380                  	move.w	(a0)+,$380(a1)		; load layer 7
0000330E 4E75                       	rts
00003310                            
00003310                            ; ---------------------------------------------------------------------------
00003310                            ; Improved subroutine to	pause the game imported from Sonic 3K (edited)
00003310                            ; ---------------------------------------------------------------------------
00003310                            		
00003310                            ; =============== S U B R O U T I N E =======================================
00003310                            
00003310                            
00003310                            PauseGame:
00003310 4E71                       		nop		
00003312 0C38 0018 F600             		cmpi.b	#$18,(Game_Mode).w
00003318 6D00                       		blt.s	Pause_Main
0000331A 4E75                       		rts
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            
0000331C                            Pause_Main:
0000331C 4A78 D130                  		tst.w	($FFFFD130).w ; has title card sequence finished?
00003320 6600 0000                  		bne.w	Pause_Unpause	; if not, branch
00003324 4A78 D5C0                  		tst.w	($FFFFD5C0).w
00003328 6600 0000                  		bne.w	Pause_Unpause	
0000332C 4A38 FE12                  		tst.b	($FFFFFE12).w
00003330 6700 0000                  		beq.w	Pause_Unpause
00003334 4A78 F63A                  		tst.w	($FFFFF63A).w
00003338 6600                       		bne.s	Pause_Main2
0000333A 1038 F605                  		move.b	($FFFFF605).w,d0
0000333E 0200 0080                  		andi.b	#$80,d0	; is Start pressed?
00003342 6700 0000                  		beq.w	Pause_NoPause	; if not, branch
00003346                            		;jsr		Pause_LoadBGArt
00003346 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w
0000334C 6600                       		bne.s	PauseGame_No
0000334E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w
00003354 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000335A 4E75                       		rts
0000335C                            PauseGame_No:
0000335C                            Pause_Main2:
0000335C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00003362 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00003368 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003370                             
00003370                            PauseGameZ80NotStopped:
00003370 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003378 66F6                       		bne.s	PauseGameZ80NotStopped
0000337A 13FC 0001 00A0 1C10        		move.b	#1,($A01C10).l
00003382 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000338A                             
0000338A                            PauseGameLoop:
0000338A                            		
0000338A 11FC 0010 F62A             			move.b	#$10,($FFFFF62A).w	; synchronize
00003390 4EB9 0000 0000             	jsr	DelayProgram		;
00003396 4EB9 0000 0000             	jsr	Pause_LoadBGArt
0000339C                            
0000339C 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
000033A0 4EB9 0000 0000             	jsr	Obj04		; run its code
000033A6 4EB9 0000 0000             	jsr	DisplaySprite		; add it to the sprites list
000033AC 4EB8 32C0                  	jsr	SaveSpriteList	
000033B0                            Pause_Loop:
000033B0 11FC 0010 F62A             	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
000033B6 4EB9 0000 0000             	jsr	DelayProgram		; render frame
000033BC 4EB9 0000 0000             	jsr	RunPLC_RAM
000033C2 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
000033C6 4EB9 0000 0000             	jsr	Obj04		; run its code
000033CC 4EB8 32E8                  	jsr	LoadSpriteList
000033D0 4EB9 0000 0000             	jsr	BuildSprites
000033D6                            Pause_GotoTitle:		
000033D6 4A38 FFD1                  		tst.b	(slow_motion_flag).w
000033DA 6700 0000                  		beq.w	Pause_NoSlowMo
000033DE 0838 0006 F605             		btst	#6,($FFFFF605).w
000033E4 6700 0000                  		beq.w	Pause_ChkFrameAdvance	; branch if A isn't pressed
000033E8 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000033EE 4E71                       		nop
000033F0 6000                       		bra.s	Pause_ResumeMusic
000033F2                            		
000033F2                            ; ---------------------------------------------------------------------------
000033F2                            
000033F2                            Pause_ChkFrameAdvance:
000033F2 0838 0004 F604             		btst	#4,($FFFFF604).w
000033F8 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if B is held
000033FC 0838 0005 F605             		btst	#5,($FFFFF605).w
00003402 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if C is pressed
00003406                            
00003406                            Pause_NoSlowMo:
00003406                            		;cmpi.b	#$E,($FFFFFE10).w
00003406                            		;bcs.s	Pause_ChkStart	; if the zone is below ALZ
00003406                            		;cmpi.b	#$12,($FFFFFE10).w
00003406                            		;bhi.s	Pause_ChkStart	; if the zone is above EMZ
00003406 4A38 FF70                  		tst.b	($FFFFFF70).w
0000340A 6A00                       		bpl.s	Pause_ChkStart
0000340C 0838 0004 F605             		btst	#4,($FFFFF605).w
00003412 6700                       		beq.s	Pause_ChkStart
00003414                            ;		move.b	#$C0,($FFFFF600).w	; If in time attack mode, go back to 2P menu if B is pressed
00003414 6000                       		bra.s	Pause_ResumeMusic
00003416                            ; ---------------------------------------------------------------------------
00003416                            
00003416                            Pause_ChkStart:
00003416 1038 F605                  		move.b	($FFFFF605).w,d0
0000341A 0200 0080                  		andi.b	#$80,d0
0000341E 6790                       		beq.s	Pause_Loop
00003420                            
00003420                            Pause_ResumeMusic:
00003420 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003428                             
00003428                            Pause_ChkStartZ80NotStopped:
00003428 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003430 66F6                       		bne.s	Pause_ChkStartZ80NotStopped
00003432 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
0000343A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003442                            
00003442                            Pause_Unpause:
00003442 7000                       		moveq	#0,d0
00003444 1038 D05A                  		move.b	($FFFFD040+mapping_frame).w,d0
00003448 D000                       		add.b	d0,d0
0000344A 323B 0000                  		move.w	Pause_Index(pc,d0.w),d1
0000344E 4EFB 1000                  		jmp	Pause_Index(pc,d1.w)
00003452                            ; ===========================================================================
00003452 0000                       Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
00003454 0000                       		dc.w Pause_Unpause_3-Pause_Index
00003456 0000                       		dc.w Pause_Reset-Pause_Index
00003458                            
00003458                            ;		jmp		Pause_UnpauseFin
00003458                            Pause_Reset:
00003458 11FC 0000 F600             		move.b	#0,(Game_Mode).w
0000345E 4EF8 0362                  		jmp		GameInit
00003462                            Pause_Unpause_3:
00003462 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00003468                            ;		jmp		Pause_UnpauseFin
00003468                            		
00003468                            ;Pause_Unpause_4:
00003468                            ;		move.b	#0,($FFFFF600).w
00003468                            ;		nop
00003468                            ;		bra.w	Pause_ResumeMusic
00003468                            Pause_UnpauseFin:
00003468 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w
0000346E 41F9 FFFF D040             		lea	($FFFFD040).l,a0
00003474 4EB9 0000 0000             		jsr	DeleteObject
0000347A                            Pause_NoPause:
0000347A 4E75                       		rts
0000347C                            ; ---------------------------------------------------------------------------
0000347C                            
0000347C                            Pause_FrameAdvance:
0000347C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00003482 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000348A                             
0000348A                            Pause_SlowMoZ80NotStopped:
0000348A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003492 66F6                       		bne.s	Pause_SlowMoZ80NotStopped
00003494 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
0000349C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000034A4 4E75                       		rts	; advance by a single frame
000034A6                            		
000034A6                            ;Pause_GotoTitle2:
000034A6                            ;		move.b	#4,($FFFFF600).w
000034A6                            ;		nop
000034A6                            ;		bra.s	Pause_ResumeMusic
000034A6                            ; End of function Pause_Game
000034A6                            Pause_LoadBGArt:
000034A6 223C 0000 0000             		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
000034AC 343C BF80                  		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
000034B0                            								; In this case, VRAM = $541*20
000034B0 363C 0040                  		move.w	#$40,d3
000034B4 4EB9 0000 0000             		jsr	(QueueDMATransfer).l
000034BA 4E75                       		rts
000034BC                            
000034BC                            ; ---------------------------------------------------------------------------
000034BC                            ; Subroutine to	display	patterns via the VDP
000034BC                            ; ---------------------------------------------------------------------------
000034BC                            
000034BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034BC                            
000034BC                            
000034BC                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000034BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C2 283C 0080 0000             		move.l	#$800000,d4	; $800000
000034C8                            
000034C8                            loc_142C:
000034C8 2D40 0004                  		move.l	d0,VDP_control_port-VDP_data_port(a6)
000034CC 3601                       		move.w	d1,d3
000034CE                            
000034CE                            loc_1432:
000034CE 3C99                       		move.w	(a1)+,(a6)
000034D0 51CB FFFC                  		dbf	d3,loc_1432
000034D4 D084                       		add.l	d4,d0
000034D6 51CA FFF0                  		dbf	d2,loc_142C
000034DA 4E75                       		rts	
000034DC                            ; End of function ShowVDPGraphics
000034DC                            
000034DC                            ; =============== S U B	R O U T	I N E =======================================
000034DC                            
000034DC                            
000034DC                            ShowVDPGraphics2:				  ; ...
000034DC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034E2 283C 0100 0000             		move.l	#$1000000,d4
000034E8                            
000034E8                            loc_301144:					  ; ...
000034E8 2D40 0004                  		move.l	d0,4(a6)
000034EC 3601                       		move.w	d1,d3
000034EE                            
000034EE                            loc_30114A:					  ; ...
000034EE 3C99                       		move.w	(a1)+,(a6)
000034F0 51CB FFFC                  		dbf	d3,loc_30114A
000034F4 D084                       		add.l	d4,d0
000034F6 51CA FFF0                  		dbf	d2,loc_301144
000034FA 4E75                       		rts
000034FC                            ; End of function ShowVDPGraphics2
000034FC                            
000034FC                            ; ---------------------------------------------------------------------------
000034FC                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000034FC                            ; to be issued the next time ProcessDMAQueue is called.
000034FC                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000034FC                            ; by issuing the commands (this subroutine DOES check for overflow)
000034FC                            ; ---------------------------------------------------------------------------
000034FC                            
000034FC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000034FC                            
000034FC                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000034FC                            QueueDMATransfer:
000034FC 2278 C8FC                  	movea.l	(VDP_Command_Buffer_Slot).w,a1
00003500 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00003504 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00003506                            
00003506                            	; piece together some VDP commands and store them for later...
00003506 303C 9300                  	move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
0000350A 1003                       	move.b	d3,d0
0000350C 32C0                       	move.w	d0,(a1)+ ; store command
0000350E                            
0000350E 303C 9400                  	move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00003512 E04B                       	lsr.w	#8,d3
00003514 1003                       	move.b	d3,d0
00003516 32C0                       	move.w	d0,(a1)+ ; store command
00003518                            
00003518 303C 9500                  	move.w	#$9500,d0 ; command to specify source address & $0001FE
0000351C E289                       	lsr.l	#1,d1
0000351E 1001                       	move.b	d1,d0
00003520 32C0                       	move.w	d0,(a1)+ ; store command
00003522                            
00003522 303C 9600                  	move.w	#$9600,d0 ; command to specify source address & $01FE00
00003526 E089                       	lsr.l	#8,d1
00003528 1001                       	move.b	d1,d0
0000352A 32C0                       	move.w	d0,(a1)+ ; store command
0000352C                            
0000352C 303C 9700                  	move.w	#$9700,d0 ; command to specify source address & $FE0000
00003530 E089                       	lsr.l	#8,d1
00003532 1001                       	move.b	d1,d0
00003534 32C0                       	move.w	d0,(a1)+ ; store command
00003536                            
00003536 0282 0000 FFFF             	andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
0000353C E58A                       	lsl.l	#2,d2
0000353E E44A                       	lsr.w	#2,d2
00003540 4842                       	swap	d2
00003542 0082 4000 0080             	ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00003548 22C2                       	move.l	d2,(a1)+ ; store command
0000354A                            
0000354A 21C9 C8FC                  	move.l	a1,(VDP_Command_Buffer_Slot).w ; set the next free slot address
0000354E B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00003552 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00003554 32BC 0000                  	move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00003558                            ; return_14AA:
00003558                            QueueDMATransfer_Done:
00003558 4E75                       	rts
0000355A                            ; End of function QueueDMATransfer
0000355A                            
0000355A                            
0000355A                            ; ---------------------------------------------------------------------------
0000355A                            ; Subroutine for issuing all VDP commands that were queued
0000355A                            ; (by earlier calls to QueueDMATransfer)
0000355A                            ; Resets the queue when it's done
0000355A                            ; ---------------------------------------------------------------------------
0000355A                            
0000355A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000355A                            
0000355A                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000355A                            ProcessDMAQueue:
0000355A 4BF9 00C0 0004             	lea	(VDP_control_port).l,a5
00003560 43F8 C800                  	lea	(VDP_Command_Buffer).w,a1
00003564                            ; loc_14B6:
00003564                            ProcessDMAQueue_Loop:
00003564 3019                       	move.w	(a1)+,d0
00003566 6700                       	beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00003568                            	; issue a set of VDP commands...
00003568 3A80                       	move.w	d0,(a5)		; transfer length
0000356A 3A99                       	move.w	(a1)+,(a5)	; transfer length
0000356C 3A99                       	move.w	(a1)+,(a5)	; source address
0000356E 3A99                       	move.w	(a1)+,(a5)	; source address
00003570 3A99                       	move.w	(a1)+,(a5)	; source address
00003572 3A99                       	move.w	(a1)+,(a5)	; destination
00003574 3A99                       	move.w	(a1)+,(a5)	; destination
00003576 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000357A 66E8                       	bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000357C                            ; loc_14CE:
0000357C                            ProcessDMAQueue_Done:
0000357C 31FC 0000 C800             	move.w	#0,(VDP_Command_Buffer).w
00003582 21FC FFFF C800 C8FC        	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000358A 4E75                       	rts
0000358C                            ; End of function ProcessDMAQueue
0000358C                            
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            ; Subroutine to load uncompressed art
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            
0000358C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358C                            
0000358C                            
0000358C                            LoadUncArt:
0000358C 43F9 00C0 0000             		lea	($C00000), a1		;Mover VDP Control a "a1"
00003592                            
00003592                            LoadArt_Loop:
00003592 229A                       		move.l	(a2)+, (a1)		;$xxxxxxxx	<- linea a procesar
00003594 229A                       		move.l	(a2)+, (a1)
00003596 229A                       		move.l	(a2)+, (a1)
00003598 229A                       		move.l	(a2)+, (a1)
0000359A 229A                       		move.l	(a2)+, (a1)
0000359C 229A                       		move.l	(a2)+, (a1)
0000359E 229A                       		move.l	(a2)+, (a1)
000035A0 229A                       		move.l	(a2)+, (a1)
000035A2 51C8 FFEE                  		dbf	d0, LoadArt_Loop	;Repetir los pasos del d0
000035A6 4E75                       		rts
000035A8                            
000035A8                            ;====================================================================================
000035A8                            
000035A8                            
000035A8                            ; ---------------------------------------------------------------------------
000035A8                            ; Nemesis decompression	algorithm
000035A8                            ; ---------------------------------------------------------------------------
000035A8                            
000035A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000035A8                            
000035A8                            
000035A8                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
000035A8                            
000035A8                            
000035A8                            ; ------------------------------------------------------------------------------
000035A8                            ; Nemesis decompression routine
000035A8                            ; ------------------------------------------------------------------------------
000035A8                            ; Optimized by vladikcomper
000035A8                            ; ------------------------------------------------------------------------------
000035A8                             
000035A8                            NemDec_RAM:
000035A8 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000035AC 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
000035B0 6000                               bra.s   NemDec_Main
000035B2                             
000035B2                            ; ------------------------------------------------------------------------------
000035B2                            NemDec:
000035B2 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000035B6 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
000035BC 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
000035C0                             
000035C0                            NemDec_Main:
000035C0 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
000035C4 3418                               move.w  (a0)+,d2                ; get number of patterns
000035C6 6A00                               bpl.s   @0                      ; are we in Mode 0?
000035C8 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
000035CC E74A                       @0      lsl.w   #3,d2
000035CE 3A42                               movea.w d2,a5
000035D0 7607                               moveq   #7,d3
000035D2 7400                               moveq   #0,d2
000035D4 7800                               moveq   #0,d4
000035D6 6100 0000                          bsr.w   NemDec4
000035DA 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
000035DC E145                               asl.w   #8,d5                   ; shift up by a byte
000035DE 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
000035E0 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
000035E4 6100                               bsr.s   NemDec2
000035E6 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
000035EA 4E75                               rts
000035EC                             
000035EC                            ; ---------------------------------------------------------------------------
000035EC                            ; Part of the Nemesis decompressor, processes the actual compressed data
000035EC                            ; ---------------------------------------------------------------------------
000035EC                             
000035EC                            NemDec2:
000035EC 3E06                               move.w  d6,d7
000035EE 5147                               subq.w  #8,d7                   ; get shift value
000035F0 3205                               move.w  d5,d1
000035F2 EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000035F4 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000035F8 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000035FA 0241 00FF                          andi.w  #$FF,d1
000035FE D241                               add.w   d1,d1
00003600 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
00003604 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
00003608 6400                               bcc.s   @0                      ; if not, branch
0000360A 5046                               addq.w  #8,d6
0000360C E145                               asl.w   #8,d5
0000360E 1A18                               move.b  (a0)+,d5                ; read next byte
00003610 1231 1001                  @0      move.b  1(a1,d1.w),d1
00003614 3001                               move.w  d1,d0
00003616 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
0000361A 0240 00F0                          andi.w  #$F0,d0
0000361E                             
0000361E                            NemDec_GetRepeatCount:
0000361E E848                               lsr.w   #4,d0                   ; get repeat count
00003620                             
00003620                            NemDec_WritePixel:
00003620 E98C                               lsl.l   #4,d4                   ; shift up by a nybble
00003622 8801                               or.b    d1,d4                   ; write pixel
00003624 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
00003628 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
0000362A                            ; ---------------------------------------------------------------------------
0000362A                             
0000362A                            NemDec3:
0000362A 7800                               moveq   #0,d4                   ; reset row
0000362C 7607                               moveq   #7,d3                   ; reset nybble counter
0000362E                             
0000362E                            NemDec_WritePixelLoop:
0000362E 51C8 FFF0                          dbf     d0,NemDec_WritePixel
00003632 60B8                               bra.s   NemDec2
00003634                            ; ---------------------------------------------------------------------------
00003634                             
00003634                            NemDec_InlineData:
00003634 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
00003636 0C46 0009                          cmpi.w  #9,d6
0000363A 6400                               bcc.s   @0
0000363C 5046                               addq.w  #8,d6
0000363E E145                               asl.w   #8,d5
00003640 1A18                               move.b  (a0)+,d5
00003642 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
00003644 3205                               move.w  d5,d1
00003646 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
00003648 3001                               move.w  d1,d0
0000364A 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
0000364E 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
00003652 0C46 0009                          cmpi.w  #9,d6
00003656 64C6                               bcc.s   NemDec_GetRepeatCount
00003658 5046                               addq.w  #8,d6
0000365A E145                               asl.w   #8,d5
0000365C 1A18                               move.b  (a0)+,d5
0000365E 60BE                               bra.s   NemDec_GetRepeatCount
00003660                             
00003660                            ; ---------------------------------------------------------------------------
00003660                            ; Subroutines to output decompressed entry
00003660                            ; Selected depending on current decompression mode
00003660                            ; ---------------------------------------------------------------------------
00003660                             
00003660                            NemDec_WriteRowToVDP:
00003660                            loc_1502:
00003660 2884                               move.l  d4,(a4)                 ; write 8-pixel row
00003662 534D                               subq.w  #1,a5
00003664 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00003666 66C2                               bne.s   NemDec3                 ; if not, branch
00003668 4E75                               rts
0000366A                            ; ---------------------------------------------------------------------------
0000366A                             
0000366A                            NemDec_WriteRowToVDP_XOR:
0000366A B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
0000366C 2882                               move.l  d2,(a4)                 ; and write the result
0000366E 534D                               subq.w  #1,a5
00003670 380D                               move.w  a5,d4
00003672 66B6                               bne.s   NemDec3
00003674 4E75                               rts
00003676                            ; ---------------------------------------------------------------------------
00003676                             
00003676                            NemDec_WriteRowToRAM:
00003676 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
00003678 534D                               subq.w  #1,a5
0000367A 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
0000367C 66AC                               bne.s   NemDec3                 ; if not, branch
0000367E 4E75                               rts
00003680                            ; ---------------------------------------------------------------------------
00003680                             
00003680                            NemDec_WriteRowToRAM_XOR:
00003680 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00003682 28C2                               move.l  d2,(a4)+                ; and write the result
00003684 534D                               subq.w  #1,a5
00003686 380D                               move.w  a5,d4
00003688 66A0                               bne.s   NemDec3
0000368A 4E75                               rts
0000368C                             
0000368C                            ; ---------------------------------------------------------------------------
0000368C                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
0000368C                            ; ---------------------------------------------------------------------------
0000368C                             
0000368C                            NemDec4:
0000368C 1018                               move.b  (a0)+,d0                ; read first byte
0000368E                             
0000368E                            @ChkEnd:
0000368E 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
00003692 6600                               bne.s   @NewPalIndex            ; if not, branch
00003694 4E75                               rts
00003696                            ; ---------------------------------------------------------------------------
00003696                             
00003696                            @NewPalIndex:
00003696 3E00                               move.w  d0,d7
00003698                             
00003698                            @ItemLoop:
00003698 1018                               move.b  (a0)+,d0                ; read next byte
0000369A 6BF2                               bmi.s   @ChkEnd                 ; ~~
0000369C 1200                               move.b  d0,d1
0000369E 0247 000F                          andi.w  #$F,d7                  ; get palette index
000036A2 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
000036A6 8E41                               or.w    d1,d7                   ; combine the two
000036A8 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
000036AC 1200                               move.b  d0,d1
000036AE E149                               lsl.w   #8,d1
000036B0 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
000036B2 7208                               moveq   #8,d1
000036B4 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
000036B6 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
000036B8 1018                               move.b  (a0)+,d0                ; get code
000036BA D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
000036BC 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
000036C0 60D6                               bra.s   @ItemLoop               ; repeat
000036C2                            ; ---------------------------------------------------------------------------
000036C2                             
000036C2                            @ItemShortCode:
000036C2 1018                               move.b  (a0)+,d0                ; get code
000036C4 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
000036C6 D040                               add.w   d0,d0                   ; get index into code table
000036C8 7A01                               moveq   #1,d5
000036CA E36D                               lsl.w   d1,d5
000036CC 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
000036CE 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
000036D2                             
000036D2                            @ItemShortCodeLoop:
000036D2 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
000036D4 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
000036D8 60BE                               bra.s   @ItemLoop
000036DA                            
000036DA                            ; ---------------------------------------------------------------------------
000036DA                            ; Subroutine to load the art for the animals for the current zone
000036DA                            ; ---------------------------------------------------------------------------
000036DA                             
000036DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036DA                             
000036DA                             
000036DA                            LoadAnimalPLC:
000036DA 7000                       		moveq	#0,d0
000036DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000036E0 0C40 0007                  		cmpi.w	#7,d0
000036E4 6400                       		bhs.s	LoadAnimalPLC_New
000036E6 0640 0015                  		addi.w	#$15,d0
000036EA 6000                       		bra.s	LoadPLC
000036EC                            ; ---------------------------------------------------------------------------
000036EC                             
000036EC                            LoadAnimalPLC_New:
000036EC 5F40                       		subi.w	#7,d0
000036EE                            		; multiply d0 by 3
000036EE 3200                       		move.w	d0,d1
000036F0 D040                       		add.w	d0,d0
000036F2 D041                       		add.w	d1,d0
000036F4                            		; add $22 (this is the index of the animal PLC for the first added zone)
000036F4 0640 0022                  		addi.w	#$22,d0
000036F8                            		; bra.s	LoadPLC
000036F8                            ; End of function LoadAnimalPLC
000036F8                            
000036F8                            ; =============== S U B R O U T I N E =======================================
000036F8                            
000036F8                            
000036F8                            Load_PLC_Raw:
000036F8 45F8 F680                  		lea	($FFFFF680).w,a2
000036FC                            
000036FC                            @findFreeSlot:
000036FC 4A92                       		tst.l	(a2)
000036FE 6700                       		beq.s	@getPieceCount
00003700 5C4A                       		addq.w	#6,a2
00003702 60F8                       		bra.s	@findFreeSlot
00003704                            ; ---------------------------------------------------------------------------
00003704                            
00003704                            @getPieceCount:
00003704 3019                       		move.w	(a1)+,d0
00003706 6B00                       		bmi.s	@done
00003708                            
00003708                            @queuePieces:
00003708 24D9                       		move.l	(a1)+,(a2)+
0000370A 34D9                       		move.w	(a1)+,(a2)+
0000370C 51C8 FFFA                  		dbf	d0,@queuePieces
00003710                            
00003710                            @done:
00003710 4E75                       		rts
00003712                            ; End of function Load_PLC_Raw
00003712                            
00003712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003712                            
00003712                            LoadPLC:
00003712 48E7 0060                  		movem.l	a1-a2,-(sp)
00003716 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000371C D040                       		add.w	d0,d0
0000371E 3031 0000                  		move.w	(a1,d0.w),d0
00003722 43F1 0000                  		lea	(a1,d0.w),a1
00003726 45F8 F680                  		lea	($FFFFF680).w,a2
0000372A                            
0000372A                            loc_1598:
0000372A 4A92                       		tst.l	(a2)
0000372C 6700                       		beq.s	loc_15A0
0000372E 5C4A                       		addq.w	#6,a2
00003730 60F8                       		bra.s	loc_1598
00003732                            ; ===========================================================================
00003732                            
00003732                            loc_15A0:				; XREF: LoadPLC
00003732 3019                       		move.w	(a1)+,d0
00003734 6B00                       		bmi.s	loc_15AC
00003736                            
00003736                            loc_15A4:
00003736 24D9                       		move.l	(a1)+,(a2)+
00003738 34D9                       		move.w	(a1)+,(a2)+
0000373A 51C8 FFFA                  		dbf	d0,loc_15A4
0000373E                            
0000373E                            loc_15AC:
0000373E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00003742 4E75                       		rts	
00003744                            ; End of function LoadPLC
00003744                            
00003744                            
00003744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003744                            
00003744                            
00003744                            LoadPLC2:
00003744 48E7 0060                  		movem.l	a1-a2,-(sp)
00003748 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000374E D040                       		add.w	d0,d0
00003750 3031 0000                  		move.w	(a1,d0.w),d0
00003754 43F1 0000                  		lea	(a1,d0.w),a1
00003758 6100                       		bsr.s	ClearPLC
0000375A 45F8 F680                  		lea	($FFFFF680).w,a2
0000375E 3019                       		move.w	(a1)+,d0
00003760 6B00                       		bmi.s	loc_15D8
00003762                            
00003762                            loc_15D0:
00003762 24D9                       		move.l	(a1)+,(a2)+
00003764 34D9                       		move.w	(a1)+,(a2)+
00003766 51C8 FFFA                  		dbf	d0,loc_15D0
0000376A                            
0000376A                            loc_15D8:
0000376A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000376E 4E75                       		rts	
00003770                            ; End of function LoadPLC2
00003770                            
00003770                            ; ---------------------------------------------------------------------------
00003770                            ; Subroutines to load pattern load cues
00003770                            
00003770                            ; input:
00003770                            ;	d0 = pattern load cue number
00003770                            ; ---------------------------------------------------------------------------
00003770                            
00003770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003770                            
00003770                            
00003770 =00003712                  AddPLC	=	LoadPLC
00003770                            ; End of function AddPLC
00003770                            
00003770                            
00003770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003770                            
00003770                            
00003770 =00003744                  NewPLC	=	LoadPLC2
00003770                            ; End of function NewPLC
00003770                            
00003770                            ; ---------------------------------------------------------------------------
00003770                            ; Subroutine to	clear the pattern load cues
00003770                            ; ---------------------------------------------------------------------------
00003770                            
00003770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003770                            
00003770                            
00003770                            ClearPLC:				; XREF: LoadPLC2
00003770 45F8 F680                  		lea	($FFFFF680).w,a2
00003774 701F                       		moveq	#$1F,d0
00003776                            
00003776                            ClearPLC_Loop:
00003776 429A                       		clr.l	(a2)+
00003778 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000377C 4E75                       		rts	
0000377E                            ; End of function ClearPLC
0000377E                            
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            ; Subroutine to	use graphics listed in a pattern load cue
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            
0000377E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000377E                            
0000377E                            
0000377E                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000377E 4AB8 F680                  		tst.l	($FFFFF680).w
00003782 6700                       		beq.s	locret_1640
00003784 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00003788 6600                       		bne.s	locret_1640
0000378A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000378E 47FA FED0                  		lea	loc_1502(pc),a3
00003792 4E71                       		nop
00003794 43F8 AA00                  		lea	($FFFFAA00).w,a1
00003798 3418                       		move.w	(a0)+,d2
0000379A 6A00                       		bpl.s	loc_160E
0000379C D6FC 000A                  		adda.w	#$A,a3
000037A0                            
000037A0                            loc_160E:
000037A0 0242 7FFF                  		andi.w	#$7FFF,d2
000037A4 4EB8 368C                  		jsr	NemDec4
000037A8 1A18                       		move.b	(a0)+,d5
000037AA E145                       		asl.w	#8,d5
000037AC 1A18                       		move.b	(a0)+,d5
000037AE 7C10                       		moveq	#$10,d6
000037B0 7000                       		moveq	#0,d0
000037B2 21C8 F680                  		move.l	a0,($FFFFF680).w
000037B6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000037BA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000037BE 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000037C2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000037C6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000037CA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000037CE 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000037D2                            
000037D2                            locret_1640:
000037D2 4E75                       		rts	
000037D4                            ; End of function RunPLC_RAM
000037D4                            
000037D4                            
000037D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037D4                            
000037D4                            
000037D4                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000037D4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037D8 6700 0000                  		beq.w	locret_16DA
000037DC 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000037E2 7000                       		moveq	#0,d0
000037E4 3038 F684                  		move.w	($FFFFF684).w,d0
000037E8 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000037EE 6000                       		bra.s	loc_1676
000037F0                            ; End of function sub_1642
000037F0                            
000037F0                            
000037F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037F0                            
000037F0                            
000037F0                            sub_165E:				; XREF: Demo_Time
000037F0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037F4 6700                       		beq.s	locret_16DA
000037F6 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000037FC 7000                       		moveq	#0,d0
000037FE 3038 F684                  		move.w	($FFFFF684).w,d0
00003802 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00003808                            
00003808                            loc_1676:				; XREF: sub_1642
00003808 49F9 00C0 0004             		lea	($C00004).l,a4
0000380E E588                       		lsl.l	#2,d0
00003810 E448                       		lsr.w	#2,d0
00003812 0040 4000                  		ori.w	#$4000,d0
00003816 4840                       		swap	d0
00003818 2880                       		move.l	d0,(a4)
0000381A 594C                       		subq.w	#4,a4
0000381C 2078 F680                  		movea.l	($FFFFF680).w,a0
00003820 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00003824 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00003828 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000382C 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00003830 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00003834 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00003838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000383C                            
0000383C                            loc_16AA:				; XREF: sub_165E
0000383C 3A7C 0008                  		movea.w	#8,a5
00003840 4EB8 362A                  		jsr	NemDec3
00003844 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00003848 6700                       		beq.s	loc_16DC
0000384A 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000384E 66EC                       		bne.s	loc_16AA
00003850 21C8 F680                  		move.l	a0,($FFFFF680).w
00003854 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00003858 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000385C 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00003860 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00003864 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00003868 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000386C                            
0000386C                            locret_16DA:				; XREF: sub_1642
0000386C 4E75                       		rts	
0000386E                            ; ===========================================================================
0000386E                            
0000386E                            loc_16DC:                       ; XREF: sub_165E
0000386E 41F8 F680                                  lea     ($FFFFF680).w,a0
00003872 43E8 0006                                  lea     6(a0),a1
00003876 700E                                       moveq   #$E,d0          ; do $F cues
00003878                            
00003878                            loc_16E2:                               ; XREF: sub_165E
00003878 20D9                                       move.l  (a1)+,(a0)+
0000387A 30D9                                       move.w  (a1)+,(a0)+
0000387C 51C8 FFFA                                  dbf     d0,loc_16E2
00003880                                            
00003880 7000                                       moveq   #0,d0
00003882 20C0                                       move.l  d0,(a0)+        ; clear the last cue to avoid overcopying it
00003884 30C0                                       move.w  d0,(a0)+        ;
00003886 4E75                                       rts
00003888                            ; End of function sub_165E
00003888                            
00003888                            ; ---------------------------------------------------------------------------
00003888                            ; Subroutine to	execute	the pattern load cue
00003888                            ; ---------------------------------------------------------------------------
00003888                            
00003888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003888                            
00003888                            
00003888                            RunPLC_ROM:
00003888 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000388E D040                       		add.w	d0,d0
00003890 3031 0000                  		move.w	(a1,d0.w),d0
00003894 43F1 0000                  		lea	(a1,d0.w),a1
00003898 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000389A                            
0000389A                            RunPLC_Loop:
0000389A 2059                       		movea.l	(a1)+,a0	; get art pointer
0000389C 7000                       		moveq	#0,d0
0000389E 3019                       		move.w	(a1)+,d0	; get VRAM address
000038A0 E588                       		lsl.l	#2,d0		; divide address by $20
000038A2 E448                       		lsr.w	#2,d0
000038A4 0040 4000                  		ori.w	#$4000,d0
000038A8 4840                       		swap	d0
000038AA 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000038B0 4EB8 35B2                  		jsr	NemDec		; decompress
000038B4 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000038B8 4E75                       		rts	
000038BA                            ; End of function RunPLC_ROM
000038BA                            
000038BA                            ; ---------------------------------------------------------------------------
000038BA                            ; Enigma decompression algorithm
000038BA                            ; ---------------------------------------------------------------------------
000038BA                            
000038BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038BA                            
000038BA                            
000038BA                            EniDec:
000038BA 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000038BE 3640                       		movea.w	d0,a3
000038C0 1018                       		move.b	(a0)+,d0
000038C2 4880                       		ext.w	d0
000038C4 3A40                       		movea.w	d0,a5
000038C6 1818                       		move.b	(a0)+,d4
000038C8 E70C                       		lsl.b	#3,d4
000038CA 3458                       		movea.w	(a0)+,a2
000038CC D4CB                       		adda.w	a3,a2
000038CE 3858                       		movea.w	(a0)+,a4
000038D0 D8CB                       		adda.w	a3,a4
000038D2 1A18                       		move.b	(a0)+,d5
000038D4 E145                       		asl.w	#8,d5
000038D6 1A18                       		move.b	(a0)+,d5
000038D8 7C10                       		moveq	#$10,d6
000038DA                            
000038DA                            loc_173E:				; XREF: loc_1768
000038DA 7007                       		moveq	#7,d0
000038DC 3E06                       		move.w	d6,d7
000038DE 9E40                       		sub.w	d0,d7
000038E0 3205                       		move.w	d5,d1
000038E2 EE69                       		lsr.w	d7,d1
000038E4 0241 007F                  		andi.w	#$7F,d1
000038E8 3401                       		move.w	d1,d2
000038EA 0C41 0040                  		cmpi.w	#$40,d1
000038EE 6400                       		bcc.s	loc_1758
000038F0 7006                       		moveq	#6,d0
000038F2 E24A                       		lsr.w	#1,d2
000038F4                            
000038F4                            loc_1758:
000038F4 4EB9 0000 0000             		jsr	sub_188C
000038FA 0242 000F                  		andi.w	#$F,d2
000038FE E849                       		lsr.w	#4,d1
00003900 D241                       		add.w	d1,d1
00003902 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00003906                            ; End of function EniDec
00003906                            
00003906                            ; ===========================================================================
00003906                            
00003906                            loc_1768:				; XREF: loc_17B4
00003906 32CA                       		move.w	a2,(a1)+
00003908 524A                       		addq.w	#1,a2
0000390A 51CA FFFA                  		dbf	d2,loc_1768
0000390E 60CA                       		bra.s	loc_173E
00003910                            ; ===========================================================================
00003910                            
00003910                            loc_1772:				; XREF: loc_17B4
00003910 32CC                       		move.w	a4,(a1)+
00003912 51CA FFFC                  		dbf	d2,loc_1772
00003916 60C2                       		bra.s	loc_173E
00003918                            ; ===========================================================================
00003918                            
00003918                            loc_177A:				; XREF: loc_17B4
00003918 4EB9 0000 0000             		jsr	loc_17DC
0000391E                            
0000391E                            loc_177E:
0000391E 32C1                       		move.w	d1,(a1)+
00003920 51CA FFFC                  		dbf	d2,loc_177E
00003924 60B4                       		bra.s	loc_173E
00003926                            ; ===========================================================================
00003926                            
00003926                            loc_1786:				; XREF: loc_17B4
00003926 4EB9 0000 0000             		jsr	loc_17DC
0000392C                            
0000392C                            loc_178A:
0000392C 32C1                       		move.w	d1,(a1)+
0000392E 5241                       		addq.w	#1,d1
00003930 51CA FFFA                  		dbf	d2,loc_178A
00003934 60A4                       		bra.s	loc_173E
00003936                            ; ===========================================================================
00003936                            
00003936                            loc_1794:				; XREF: loc_17B4
00003936 4EB9 0000 0000             		jsr	loc_17DC
0000393C                            
0000393C                            loc_1798:
0000393C 32C1                       		move.w	d1,(a1)+
0000393E 5341                       		subq.w	#1,d1
00003940 51CA FFFA                  		dbf	d2,loc_1798
00003944 6094                       		bra.s	loc_173E
00003946                            ; ===========================================================================
00003946                            
00003946                            loc_17A2:				; XREF: loc_17B4
00003946 0C42 000F                  		cmpi.w	#$F,d2
0000394A 6700                       		beq.s	loc_17C4
0000394C                            
0000394C                            loc_17A8:
0000394C 4EB9 0000 0000             		jsr	loc_17DC
00003952 32C1                       		move.w	d1,(a1)+
00003954 51CA FFF6                  		dbf	d2,loc_17A8
00003958 6080                       		bra.s	loc_173E
0000395A                            ; ===========================================================================
0000395A                            
0000395A                            loc_17B4:				; XREF: EniDec
0000395A 60AA                       		bra.s	loc_1768
0000395C                            ; ===========================================================================
0000395C 60A8                       		bra.s	loc_1768
0000395E                            ; ===========================================================================
0000395E 60B0                       		bra.s	loc_1772
00003960                            ; ===========================================================================
00003960 60AE                       		bra.s	loc_1772
00003962                            ; ===========================================================================
00003962 60B4                       		bra.s	loc_177A
00003964                            ; ===========================================================================
00003964 60C0                       		bra.s	loc_1786
00003966                            ; ===========================================================================
00003966 60CE                       		bra.s	loc_1794
00003968                            ; ===========================================================================
00003968 60DC                       		bra.s	loc_17A2
0000396A                            ; ===========================================================================
0000396A                            
0000396A                            loc_17C4:				; XREF: loc_17A2
0000396A 5348                       		subq.w	#1,a0
0000396C 0C46 0010                  		cmpi.w	#$10,d6
00003970 6600                       		bne.s	loc_17CE
00003972 5348                       		subq.w	#1,a0
00003974                            
00003974                            loc_17CE:
00003974 3008                       		move.w	a0,d0
00003976 E248                       		lsr.w	#1,d0
00003978 6400                       		bcc.s	loc_17D6
0000397A 5248                       		addq.w	#1,a0
0000397C                            
0000397C                            loc_17D6:
0000397C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00003980 4E75                       		rts	
00003982                            ; ===========================================================================
00003982                            
00003982                            loc_17DC:				; XREF: loc_17A2
00003982 360B                       		move.w	a3,d3
00003984 1204                       		move.b	d4,d1
00003986 D201                       		add.b	d1,d1
00003988 6400                       		bcc.s	loc_17EE
0000398A 5346                       		subq.w	#1,d6
0000398C 0D05                       		btst	d6,d5
0000398E 6700                       		beq.s	loc_17EE
00003990 0043 8000                  		ori.w	#-$8000,d3
00003994                            
00003994                            loc_17EE:
00003994 D201                       		add.b	d1,d1
00003996 6400                       		bcc.s	loc_17FC
00003998 5346                       		subq.w	#1,d6
0000399A 0D05                       		btst	d6,d5
0000399C 6700                       		beq.s	loc_17FC
0000399E 0643 4000                  		addi.w	#$4000,d3
000039A2                            
000039A2                            loc_17FC:
000039A2 D201                       		add.b	d1,d1
000039A4 6400                       		bcc.s	loc_180A
000039A6 5346                       		subq.w	#1,d6
000039A8 0D05                       		btst	d6,d5
000039AA 6700                       		beq.s	loc_180A
000039AC 0643 2000                  		addi.w	#$2000,d3
000039B0                            
000039B0                            loc_180A:
000039B0 D201                       		add.b	d1,d1
000039B2 6400                       		bcc.s	loc_1818
000039B4 5346                       		subq.w	#1,d6
000039B6 0D05                       		btst	d6,d5
000039B8 6700                       		beq.s	loc_1818
000039BA 0043 1000                  		ori.w	#$1000,d3
000039BE                            
000039BE                            loc_1818:
000039BE D201                       		add.b	d1,d1
000039C0 6400                       		bcc.s	loc_1826
000039C2 5346                       		subq.w	#1,d6
000039C4 0D05                       		btst	d6,d5
000039C6 6700                       		beq.s	loc_1826
000039C8 0043 0800                  		ori.w	#$800,d3
000039CC                            
000039CC                            loc_1826:
000039CC 3205                       		move.w	d5,d1
000039CE 3E06                       		move.w	d6,d7
000039D0 9E4D                       		sub.w	a5,d7
000039D2 6400                       		bcc.s	loc_1856
000039D4 3C07                       		move.w	d7,d6
000039D6 0646 0010                  		addi.w	#$10,d6
000039DA 4447                       		neg.w	d7
000039DC EF69                       		lsl.w	d7,d1
000039DE 1A10                       		move.b	(a0),d5
000039E0 EF3D                       		rol.b	d7,d5
000039E2 DE47                       		add.w	d7,d7
000039E4 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000039E8 D245                       		add.w	d5,d1
000039EA                            
000039EA                            loc_1844:				; XREF: loc_1868
000039EA 300D                       		move.w	a5,d0
000039EC D040                       		add.w	d0,d0
000039EE C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000039F2 D243                       		add.w	d3,d1
000039F4 1A18                       		move.b	(a0)+,d5
000039F6 E14D                       		lsl.w	#8,d5
000039F8 1A18                       		move.b	(a0)+,d5
000039FA 4E75                       		rts	
000039FC                            ; ===========================================================================
000039FC                            
000039FC                            loc_1856:				; XREF: loc_1826
000039FC 6700                       		beq.s	loc_1868
000039FE EE69                       		lsr.w	d7,d1
00003A00 300D                       		move.w	a5,d0
00003A02 D040                       		add.w	d0,d0
00003A04 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00003A08 D243                       		add.w	d3,d1
00003A0A 300D                       		move.w	a5,d0
00003A0C 6000                       		bra.s	sub_188C
00003A0E                            ; ===========================================================================
00003A0E                            
00003A0E                            loc_1868:				; XREF: loc_1856
00003A0E 7C10                       		moveq	#$10,d6
00003A10                            
00003A10                            loc_186A:
00003A10 60D8                       		bra.s	loc_1844
00003A12                            ; ===========================================================================
00003A12 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00003A28 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00003A32                            
00003A32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A32                            
00003A32                            
00003A32                            sub_188C:				; XREF: EniDec
00003A32 9C40                       		sub.w	d0,d6
00003A34 0C46 0009                  		cmpi.w	#9,d6
00003A38 6400                       		bcc.s	locret_189A
00003A3A 5046                       		addq.w	#8,d6
00003A3C E145                       		asl.w	#8,d5
00003A3E 1A18                       		move.b	(a0)+,d5
00003A40                            
00003A40                            locret_189A:
00003A40 4E75                       		rts	
00003A42                            ; End of function sub_188C
00003A42                            
00003A42                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00003A42                            ; ---------------------------------------------------------------------------
00003A42                            ; KOSINSKI DECOMPRESSION PROCEDURE
00003A42                            ; (sometimes called KOZINSKI decompression)
00003A42                            
00003A42                            ; This is the only procedure in the game that stores variables on the stack.
00003A42                            
00003A42                            ; ARGUMENTS:
00003A42                            ; a0 = source address
00003A42                            ; a1 = destination address
00003A42                            
00003A42                            ; For format explanation see http://info.sonicretro.org/Kosinski_compression
00003A42                            ; New faster version by vladikcomper
00003A42                            ; ---------------------------------------------------------------------------
00003A42                            ; ===========================================================================
00003A42                            ; KozDec_193A:
00003A42                            KosDec:
00003A42 7E07                               moveq   #7,d7
00003A44 7000                               moveq   #0,d0
00003A46 7200                               moveq   #0,d1
00003A48 49FA 0000                          lea     KosDec_ByteMap(pc),a4
00003A4C 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
00003A4E 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
00003A50 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00003A54 1234 1000                          move.b  (a4,d1.w),d1                    ;
00003A58 7407                               moveq   #7,d2                           ; set repeat count to 8
00003A5A 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
00003A5C 4243                               clr.w   d3                              ;
00003A5E 6000                               bra.s   KosDec_FetchNewCode
00003A60                             
00003A60                            KosDec_FetchCodeLoop:
00003A60                                    ; code 1 (Uncompressed byte)
00003A60 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A78 12D8                               move.b  (a0)+,(a1)+
00003A7A                             
00003A7A                            KosDec_FetchNewCode:
00003A7A D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A7C 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
00003A7E                             
00003A7E                                    ; codes 00 and 01
00003A7E 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A96 7800                               moveq   #0,d4                           ; d4 will contain copy count
00003A98 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A9A 6500                               bcs.s   KosDec_Code_01
00003A9C                             
00003A9C                                    ; code 00 (Dictionary ref. short)
00003A9C 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AB4 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003AB6 D944                               addx.w  d4,d4
00003AB8 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AD0 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003AD2 D944                               addx.w  d4,d4
00003AD4 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AEC 7AFF                               moveq   #-1,d5
00003AEE 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00003AF0                             
00003AF0                            KosDec_StreamCopy:
00003AF0 47F1 5000                          lea     (a1,d5),a3
00003AF4 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003AF6                             
00003AF6                            KosDec_copy:
00003AF6 12DB                               move.b  (a3)+,(a1)+
00003AF8 51CC FFFC                          dbf     d4,KosDec_copy
00003AFC 6000 FF7C                          bra.w   KosDec_FetchNewCode
00003B00                            ; ---------------------------------------------------------------------------
00003B00                            KosDec_Code_01:
00003B00                                    ; code 01 (Dictionary ref. long / special)
00003B00 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003B18 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
00003B1A 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
00003B1C 7AFF                               moveq   #-1,d5
00003B1E 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00003B20 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00003B22 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00003B24 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00003B26 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00003B28                             
00003B28                                    ; special mode (extended counter)
00003B28 1818                               move.b  (a0)+,d4                        ; read cnt
00003B2A 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
00003B2C 5304                               subq.b  #1,d4
00003B2E 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00003B32                             
00003B32 47F1 5000                          lea     (a1,d5),a3
00003B36 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003B38 3C04                               move.w  d4,d6
00003B3A 4646                               not.w   d6
00003B3C CC47                               and.w   d7,d6
00003B3E DC46                               add.w   d6,d6
00003B40 E64C                               lsr.w   #3,d4
00003B42 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
00003B46                             
00003B46                            KosDec_largecopy:
00003B46                                    rept 8
00003B46                                    move.b  (a3)+,(a1)+
00003B46 12DB 12DB 12DB 12DB 12DB+          endr
00003B56 51CC FFEE                          dbf     d4,KosDec_largecopy
00003B5A 6000 FF1E                          bra.w   KosDec_FetchNewCode
00003B5E                             
00003B5E                            KosDec_Quit:
00003B5E 4E75                               rts
00003B60                             
00003B60                            ; ---------------------------------------------------------------------------
00003B60                            ; A look-up table to invert bits order in desc. field bytes
00003B60                            ; ---------------------------------------------------------------------------
00003B60                             
00003B60                            KosDec_ByteMap:
00003B60 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00003B70 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00003B80 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00003B90 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00003BA0 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00003BB0 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00003BC0 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00003BD0 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00003BE0 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00003BF0 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00003C00 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00003C10 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00003C20 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00003C30 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00003C40 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00003C50 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00003C60                             
00003C60                            ; ===========================================================================
00003C60 4E71                       		nop
00003C62                            
00003C62                            ; ---------------------------------------------------------------------------
00003C62                            ; Pallet cycling routine loading subroutine
00003C62                            ; ---------------------------------------------------------------------------
00003C62                            
00003C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C62                            
00003C62                            
00003C62                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00003C62 6100 0000                  		bsr.w	PalCycle_SuperSonic
00003C66 7400                       		moveq	#0,d2
00003C68 7000                       		moveq	#0,d0
00003C6A 1038 FE10                  		move.b	($FFFFFE10).w,d0	; get level number
00003C6E D040                       		add.w	d0,d0				; multiply by 2
00003C70 303B 0000                  		move.w	PalCycle(pc,d0.w),d0; load animated pallets offset index into d0
00003C74 4EFB 0000                  		jmp	PalCycle(pc,d0.w)		; jump to PalCycle + offset index
00003C78                            ; End of function PalCycle_Load
00003C78                            
00003C78                            ; ===========================================================================
00003C78                            ; ---------------------------------------------------------------------------
00003C78                            ; Pallet cycling routines
00003C78                            ; ---------------------------------------------------------------------------
00003C78 0000                       PalCycle:	dc.w PalCycle_ABZ-PalCycle
00003C7A 0000                       		dc.w PalCycle_LZ-PalCycle
00003C7C 0000                       		dc.w PalCycle_MZ-PalCycle
00003C7E 0000                       		dc.w PalCycle_SLZ-PalCycle
00003C80 0000                       		dc.w PalCycle_SYZ-PalCycle
00003C82 0000                       		dc.w PalCycle_SBZ-PalCycle
00003C84 0000                       		dc.w PalCycle_END-PalCycle
00003C86 0000                       		dc.w PalCycle_ABZ-PalCycle
00003C88                            
00003C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C88                            
00003C88                            PalCycle_ABZ:				; XREF: PalCycle
00003C88 4E75                       		rts	
00003C8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C8A                            
00003C8A                            
00003C8A                            PalCycle_Title:				; XREF: TitleScreen
00003C8A 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00003C90 6000                       		bra.s	loc_196A
00003C92                            ; ===========================================================================
00003C92                            
00003C92                            PalCycle_GHZ:				; XREF: PalCycle
00003C92 4A38 FFCF                  		tst.b	($FFFFFFCF).w	; was after ending flag set?
00003C96 6600 0000                  		bne.w	PalCycle_END	; if yes, branch
00003C9A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00003CA0                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003CA0                            ;		bra.w	loc_196A		; if not, branch
00003CA0                            ;		lea	(Pall_GHZCyc).l,a0
00003CA0                            
00003CA0                            loc_196A:				; XREF: PalCycle_Title
00003CA0 5378 F634                  		subq.w	#1,($FFFFF634).w
00003CA4 6A00                       		bpl.s	locret_1990
00003CA6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00003CAC 3038 F632                  		move.w	($FFFFF632).w,d0
00003CB0 5278 F632                  		addq.w	#1,($FFFFF632).w
00003CB4 0240 0003                  		andi.w	#3,d0
00003CB8 E748                       		lsl.w	#3,d0
00003CBA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00003CBE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CC2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CC6                            
00003CC6                            locret_1990:
00003CC6 4E75                       		rts	
00003CC8                            ; End of function PalCycle_Title
00003CC8                            
00003CC8                            
00003CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC8                            
00003CC8                            
00003CC8                            PalCycle_LZ:				; XREF: PalCycle
00003CC8 5378 F634                  		subq.w	#1,($FFFFF634).w
00003CCC 6A00                       		bpl.s	loc_19D8
00003CCE 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00003CD4 3038 F632                  		move.w	($FFFFF632).w,d0
00003CD8 5278 F632                  		addq.w	#1,($FFFFF632).w
00003CDC 0240 0003                  		andi.w	#3,d0
00003CE0 E748                       		lsl.w	#3,d0
00003CE2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00003CE8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00003CEE 6600                       		bne.s	loc_19C0
00003CF0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00003CF6                            
00003CF6                            loc_19C0:
00003CF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003CFA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CFE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003D02 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00003D06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003D0E                            
00003D0E                            loc_19D8:
00003D0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00003D12 0240 0007                  		andi.w	#7,d0
00003D16 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00003D1A 6700                       		beq.s	locret_1A3A
00003D1C 7201                       		moveq	#1,d1
00003D1E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003D22 6700                       		beq.s	loc_19F0
00003D24 4441                       		neg.w	d1
00003D26                            
00003D26                            loc_19F0:
00003D26 3038 F550                  		move.w	($FFFFF550).w,d0
00003D2A 0240 0003                  		andi.w	#3,d0
00003D2E D041                       		add.w	d1,d0
00003D30 0C40 0003                  		cmpi.w	#3,d0
00003D34 6500                       		bcs.s	loc_1A0A
00003D36 3200                       		move.w	d0,d1
00003D38 7000                       		moveq	#0,d0
00003D3A 4A41                       		tst.w	d1
00003D3C 6A00                       		bpl.s	loc_1A0A
00003D3E 7002                       		moveq	#2,d0
00003D40                            
00003D40                            loc_1A0A:
00003D40 31C0 F550                  		move.w	d0,($FFFFF550).w
00003D44 D040                       		add.w	d0,d0
00003D46 3200                       		move.w	d0,d1
00003D48 D040                       		add.w	d0,d0
00003D4A D041                       		add.w	d1,d0
00003D4C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00003D52 43F8 FB76                  		lea	($FFFFFB76).w,a1
00003D56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D5E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00003D64 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00003D68 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D6C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D70                            
00003D70                            locret_1A3A:
00003D70 4E75                       		rts	
00003D72                            ; End of function PalCycle_LZ
00003D72                            
00003D72                            ; ===========================================================================
00003D72 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00003D7A                            ; ===========================================================================
00003D7A                            
00003D7A                            PalCycle_MZ:				; XREF: PalCycle
00003D7A 4E75                       		rts	
00003D7C                            
00003D7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D7C                            
00003D7C                            
00003D7C                            PalCycle_SLZ:				; XREF: PalCycle
00003D7C 5378 F634                  		subq.w	#1,($FFFFF634).w
00003D80 6A00                       		bpl.s	locret_1A80
00003D82 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00003D88 3038 F632                  		move.w	($FFFFF632).w,d0
00003D8C 5240                       		addq.w	#1,d0
00003D8E 0C40 0006                  		cmpi.w	#6,d0
00003D92 6500                       		bcs.s	loc_1A60
00003D94 7000                       		moveq	#0,d0
00003D96                            
00003D96                            loc_1A60:
00003D96 31C0 F632                  		move.w	d0,($FFFFF632).w
00003D9A 3200                       		move.w	d0,d1
00003D9C D241                       		add.w	d1,d1
00003D9E D041                       		add.w	d1,d0
00003DA0 D040                       		add.w	d0,d0
00003DA2 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00003DA8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003DAC 32B0 0000                  		move.w	(a0,d0.w),(a1)
00003DB0 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00003DB6                            
00003DB6                            locret_1A80:
00003DB6 4E75                       		rts	
00003DB8                            ; End of function PalCycle_SLZ
00003DB8                            
00003DB8                            
00003DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DB8                            
00003DB8                            
00003DB8                            PalCycle_SYZ:				; XREF: PalCycle
00003DB8                            PalCycle_CNZ:
00003DB8 5378 F634                  	subq.w	#1,($FFFFF634).w
00003DBC 6A00 0000                  	bpl.w	PalCycle_SY3
00003DC0 31FC 0007 F634             	move.w	#7,($FFFFF634).w
00003DC6 41F9 0000 0000             	lea	(word_1F8E).l,a0
00003DCC 3038 F632                  	move.w	($FFFFF632).w,d0
00003DD0 5478 F632                  	addq.w	#2,($FFFFF632).w
00003DD4 0C78 0006 F632             	cmpi.w	#6,($FFFFF632).w
00003DDA 6500                       	bcs.s	PalCycle_SY1
00003DDC 31FC 0000 F632             	move.w	#0,($FFFFF632).w
00003DE2                            PalCycle_SY1:
00003DE2 41F0 0000                  	lea	(a0,d0.w),a0
00003DE6 43F8 FB00                  	lea	(Normal_palette).w,a1
00003DEA 3350 004A                  	move.w	0(a0),$4A(a1)
00003DEE 3368 0006 004C             	move.w	6(a0),$4C(a1)
00003DF4 3368 000C 004E             	move.w	$C(a0),$4E(a1)
00003DFA 3368 0012 0056             	move.w	$12(a0),$56(a1)
00003E00 3368 0018 0058             	move.w	$18(a0),$58(a1)
00003E06 3368 001E 005A             	move.w	$1E(a0),$5A(a1)
00003E0C 41F9 0000 0000             	lea	(word_1FB2).l,a0
00003E12 41F0 0000                  	lea	(a0,d0.w),a0
00003E16 3350 0064                  	move.w	0(a0),$64(a1)
00003E1A 3368 0006 0066             	move.w	6(a0),$66(a1)
00003E20 3368 000C 0068             	move.w	$C(a0),$68(a1)
00003E26 41F9 0000 0000             	lea	(word_1FC4).l,a0
00003E2C 3038 F650                  	move.w	($FFFFF650).w,d0
00003E30 5478 F650                  	addq.w	#2,($FFFFF650).w
00003E34 0C78 0024 F650             	cmpi.w	#$24,($FFFFF650).w
00003E3A 6500                       	bcs.s	PalCycle_SY2
00003E3C 31FC 0000 F650             	move.w	#0,($FFFFF650).w
00003E42                            PalCycle_SY2:
00003E42 43F8 FB72                  	lea	($FFFFFB60+$12).w,a1
00003E46 32F0 0004                  	move.w	4(a0,d0.w),(a1)+
00003E4A 32F0 0002                  	move.w	2(a0,d0.w),(a1)+
00003E4E 32F0 0000                  	move.w	(a0,d0.w),(a1)+
00003E52                            PalCycle_SY3:
00003E52 4A38 F7AA                  	tst.b	(Current_Boss_ID).w
00003E56 6700 0000                  	beq.w	return_1D14
00003E5A 5378 F666                  	subq.w	#1,($FFFFF666).w
00003E5E 6A00 0000                  	bpl.w	return_1D14
00003E62 31FC 0003 F666             	move.w	#3,($FFFFF666).w
00003E68 3038 F652                  	move.w	($FFFFF652).w,d0
00003E6C 5478 F652                  	addq.w	#2,($FFFFF652).w
00003E70 0C78 0006 F652             	cmpi.w	#6,($FFFFF652).w
00003E76 6500                       	bcs.s	PalCycle_SY4
00003E78 31FC 0000 F652             	move.w	#0,($FFFFF652).w
00003E7E                            PalCycle_SY4:
00003E7E 41F9 0000 0000             	lea	(word_1FEC).l,a0
00003E84 41F0 0000                  	lea	(a0,d0.w),a0
00003E88 43F8 FB00                  	lea	(Normal_palette).w,a1
00003E8C 3350 0024                  	move.w	0(a0),$24(a1)
00003E90 3368 0006 0026             	move.w	6(a0),$26(a1)
00003E96 3368 000C 0028             	move.w	$C(a0),$28(a1)
00003E9C 41F9 0000 0000             	lea	(word_1FFE).l,a0
00003EA2 3038 F654                  	move.w	($FFFFF654).w,d0
00003EA6 5478 F654                  	addq.w	#2,($FFFFF654).w
00003EAA 0C78 0014 F654             	cmpi.w	#$14,($FFFFF654).w
00003EB0 6500                       	bcs.s	PalCycle_SY5
00003EB2 31FC 0000 F654             	move.w	#0,($FFFFF654).w
00003EB8                            PalCycle_SY5:
00003EB8 3370 0000 003C             	move.w	(a0,d0.w),$3C(a1)
00003EBE 41F9 0000 0000             	lea	(word_2012).l,a0
00003EC4 3038 F656                  	move.w	($FFFFF656).w,d0
00003EC8 5478 F656                  	addq.w	#2,($FFFFF656).w
00003ECC 0278 000E F656             	andi.w	#$E,($FFFFF656).w
00003ED2 3370 0000 003E             	move.w	(a0,d0.w),$3E(a1)
00003ED8                            
00003ED8                            return_1D14:
00003ED8 4E75                       	rts
00003EDA                            ; End of function PalCycle_SYZ
00003EDA                            
00003EDA                            
00003EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EDA                            
00003EDA                            
00003EDA                            PalCycle_SBZ:				; XREF: PalCycle
00003EDA 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00003EE0 4A38 FE11                  		tst.b	($FFFFFE11).w
00003EE4 6700                       		beq.s	loc_1ADA
00003EE6 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00003EEC                            
00003EEC                            loc_1ADA:
00003EEC 43F8 F550                  		lea	($FFFFF550).w,a1
00003EF0 321A                       		move.w	(a2)+,d1
00003EF2                            
00003EF2                            loc_1AE0:
00003EF2 5311                       		subq.b	#1,(a1)
00003EF4 6B00                       		bmi.s	loc_1AEA
00003EF6 5489                       		addq.l	#2,a1
00003EF8 5C8A                       		addq.l	#6,a2
00003EFA 6000                       		bra.s	loc_1B06
00003EFC                            ; ===========================================================================
00003EFC                            
00003EFC                            loc_1AEA:				; XREF: PalCycle_SBZ
00003EFC 12DA                       		move.b	(a2)+,(a1)+
00003EFE 1011                       		move.b	(a1),d0
00003F00 5200                       		addq.b	#1,d0
00003F02 B01A                       		cmp.b	(a2)+,d0
00003F04 6500                       		bcs.s	loc_1AF6
00003F06 7000                       		moveq	#0,d0
00003F08                            
00003F08                            loc_1AF6:
00003F08 12C0                       		move.b	d0,(a1)+
00003F0A 0240 000F                  		andi.w	#$F,d0
00003F0E D040                       		add.w	d0,d0
00003F10 305A                       		movea.w	(a2)+,a0
00003F12 365A                       		movea.w	(a2)+,a3
00003F14 36B0 0000                  		move.w	(a0,d0.w),(a3)
00003F18                            
00003F18                            loc_1B06:				; XREF: PalCycle_SBZ
00003F18 51C9 FFD8                  		dbf	d1,loc_1AE0
00003F1C 5378 F634                  		subq.w	#1,($FFFFF634).w
00003F20 6A00                       		bpl.s	locret_1B64
00003F22 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00003F28 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00003F2E 4A38 FE11                  		tst.b	($FFFFFE11).w
00003F32 6700                       		beq.s	loc_1B2E
00003F34 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00003F3A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003F40                            
00003F40                            loc_1B2E:
00003F40 72FF                       		moveq	#-1,d1
00003F42 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003F46 6700                       		beq.s	loc_1B38
00003F48 4441                       		neg.w	d1
00003F4A                            
00003F4A                            loc_1B38:
00003F4A 3038 F632                  		move.w	($FFFFF632).w,d0
00003F4E 0240 0003                  		andi.w	#3,d0
00003F52 D041                       		add.w	d1,d0
00003F54 0C40 0003                  		cmpi.w	#3,d0
00003F58 6500                       		bcs.s	loc_1B52
00003F5A 3200                       		move.w	d0,d1
00003F5C 7000                       		moveq	#0,d0
00003F5E 4A41                       		tst.w	d1
00003F60 6A00                       		bpl.s	loc_1B52
00003F62 7002                       		moveq	#2,d0
00003F64                            
00003F64                            loc_1B52:
00003F64 31C0 F632                  		move.w	d0,($FFFFF632).w
00003F68 D040                       		add.w	d0,d0
00003F6A 43F8 FB58                  		lea	($FFFFFB58).w,a1
00003F6E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003F72 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003F76                            
00003F76                            locret_1B64:
00003F76 4E75                       		rts	
00003F78                            ; End of function PalCycle_SBZ
00003F78                            
00003F78                            
00003F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F78                            
00003F78                            
00003F78                            PalCycle_END:				; XREF: PalCycle
00003F78 41F9 0000 0000             		lea	(Pal_ENDCyc).l,a0
00003F7E                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003F7E                            ;		beq.w	loc_196A		; if not, branch
00003F7E                            ;		lea	(Pall_ENDCyc).l,a0
00003F7E 6000 FD20                  		bra.w	loc_196A
00003F82                            ; End of function PalCycle_SBZ
00003F82                            
00003F82                            ; ===========================================================================
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            ; Pallet Cycling data
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00003FA2                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00003FC2                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00003FE2                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00003FF4                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00004006                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
0000406E                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00004092                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
000040B2                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
000040C2                            
000040C2                            Pal_SBZCycList:
000040C2                            		include	"_inc\SBZ pallet script 1.asm"
000040C2                            ; ---------------------------------------------------------------------------
000040C2                            ; Scrap Brain Zone 1 pallet cycling script
000040C2                            ; ---------------------------------------------------------------------------
000040C2 0008                       	dc.w 8			; number of entries - 1
000040C4 0708                       	dc.b 7,	8		; duration in frames, number of	colours
000040C6 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
000040C8 FB50                       	dc.w $FB50		; RAM address
000040CA 0D08                       	dc.b $D, 8
000040CC 0000                       	dc.w Pal_SBZCyc2
000040CE FB52                       	dc.w $FB52
000040D0 0E08                       	dc.b $E, 8
000040D2 0000                       	dc.w Pal_SBZCyc3
000040D4 FB6E                       	dc.w $FB6E
000040D6 0B08                       	dc.b $B, 8
000040D8 0000                       	dc.w Pal_SBZCyc5
000040DA FB70                       	dc.w $FB70
000040DC 0708                       	dc.b 7,	8
000040DE 0000                       	dc.w Pal_SBZCyc6
000040E0 FB72                       	dc.w $FB72
000040E2 1C10                       	dc.b $1C, $10
000040E4 0000                       	dc.w Pal_SBZCyc7
000040E6 FB7E                       	dc.w $FB7E
000040E8 0303                       	dc.b 3,	3
000040EA 0000                       	dc.w Pal_SBZCyc8
000040EC FB78                       	dc.w $FB78
000040EE 0303                       	dc.b 3,	3
000040F0 0000                       	dc.w Pal_SBZCyc8+2
000040F2 FB7A                       	dc.w $FB7A
000040F4 0303                       	dc.b 3,	3
000040F6 0000                       	dc.w Pal_SBZCyc8+4
000040F8 FB7C                       	dc.w $FB7C
000040FA                            	even
000040FA                            	even
000040FA                            
000040FA                            Pal_SBZCycList2:
000040FA                            		include	"_inc\SBZ pallet script 2.asm"
000040FA                            ; ---------------------------------------------------------------------------
000040FA                            ; Scrap Brain Zone 2 pallet cycling script
000040FA                            ; ---------------------------------------------------------------------------
000040FA 0006                       	dc.w 6
000040FC 0708                       	dc.b 7,	8
000040FE 0000                       	dc.w Pal_SBZCyc1
00004100 FB50                       	dc.w $FB50
00004102 0D08                       	dc.b $D, 8
00004104 0000                       	dc.w Pal_SBZCyc2
00004106 FB52                       	dc.w $FB52
00004108 0908                       	dc.b 9,	8
0000410A 0000                       	dc.w Pal_SBZCyc9
0000410C FB70                       	dc.w $FB70
0000410E 0708                       	dc.b 7,	8
00004110 0000                       	dc.w Pal_SBZCyc6
00004112 FB72                       	dc.w $FB72
00004114 0303                       	dc.b 3,	3
00004116 0000                       	dc.w Pal_SBZCyc8
00004118 FB78                       	dc.w $FB78
0000411A 0303                       	dc.b 3,	3
0000411C 0000                       	dc.w Pal_SBZCyc8+2
0000411E FB7A                       	dc.w $FB7A
00004120 0303                       	dc.b 3,	3
00004122 0000                       	dc.w Pal_SBZCyc8+4
00004124 FB7C                       	dc.w $FB7C
00004126                            	even
00004126                            	even
00004126                            
00004126                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00004136                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00004146                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00004156                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00004162                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00004172                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00004182                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000041A2                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000041AC                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000041BC                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000041C8                            Pal_ENDCyc:	incbin	pallet\c_end.bin
000041E8                            word_1F8E: BINCLUDE "art/palettes/CNZ Cycle 1.bin"; Casino Night Cycles 1 & 2
0000420C                            word_1FB2: BINCLUDE "art/palettes/CNZ Cycle 3.bin"; Casino Night Cycle 3
0000421E                            word_1FC4: BINCLUDE "art/palettes/CNZ Cycle 4.bin"; Casino Night Cycle 4
00004246                            word_1FEC: BINCLUDE "art/palettes/unk_1FEC.bin"; Unknown palette
00004258                            word_1FFE: BINCLUDE "art/palettes/unk_1FFE.bin"; Unknown palette
0000426C                            word_2012: BINCLUDE "art/palettes/unk_2012.bin"; Unknown palette
0000427C                            
0000427C                            ; ---------------------------------------------------------------------------
0000427C                            ; Original Pallet Cycling data
0000427C                            ; ---------------------------------------------------------------------------
0000427C                            Pall_GHZCyc:	incbin	pallet_o\c_ghz.bin
0000429C                            Pall_ENDCyc:	incbin	pallet_o\c_end.bin
000042BC                            
000042BC                            
000042BC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000042BC                            
000042BC                            ; sub_213E:
000042BC                            PalCycle_SuperSonic:
000042BC 1038 F65F                  		move.b	($FFFFF65F).w,d0
000042C0 6700                       		beq.s	locret_214E
000042C2 6B00 0000                  		bmi.w	loc_21B0
000042C6 5300                       		subq.b	#1,d0
000042C8 6600                       		bne.s	loc_2150
000042CA 5338 F65E                  		subq.b	#1,($FFFFF65E).w
000042CE 6A00                       		bpl.s	locret_214E
000042D0 11FC 0001 F65E             		move.b	#1,($FFFFF65E).w
000042D6 41F9 0000 0000             		lea	(Pal_2246).l,a0
000042DC 3038 F65C                  		move.w	($FFFFF65C).w,d0
000042E0 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
000042E4 0C78 0024 F65C             		cmpi.w	#$24,($FFFFF65C).w ; '$'
000042EA 6500                       		bcs.s	@loc1
000042EC 11FC 00FF F65F             		move.b	#-1,(Super_Sonic_palette).w
000042F2 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w
000042F8 43F8 FB04                  @loc1:		lea	(Normal_palette+4).w,a1
000042FC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004300 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004304 41F9 0000 0000             		lea	(Pal_22C6).l,a0
0000430A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004310 6700                       		beq.s	loc_21A2
00004312 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
00004318 6600                       		bne.s	locret_214E
0000431A 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004320 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
00004324 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004328 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000432C                            
0000432C                            locret_214E:				; CODE XREF: sub_20D4+Ej sub_20D4+1Cj	...
0000432C 4E75                       		rts
0000432E                            ; ---------------------------------------------------------------------------
0000432E                            
0000432E                            loc_2150:				; CODE XREF: sub_20D4+16j
0000432E 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004332 6AF8                       		bpl.s	locret_214E
00004334 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
0000433A 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004340 3038 F65C                  		move.w	($FFFFF65C).w,d0
00004344 5178 F65C                  		subq.w	#8,($FFFFF65C).w
00004348 6400                       		bcc.s	loc_2178
0000434A 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
00004350 11FC 0000 F65F             		move.b	#0,($FFFFF65F).w
00004356                            
00004356                            loc_2178:				; CODE XREF: sub_20D4+96j
00004356 43F8 FB04                  		lea	(Normal_palette+4).w,a1
0000435A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000435E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00004362 41F9 0000 0000             		lea	(Pal_22C6).l,a0
00004368 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000436E 6700 0000                  		beq.w	loc_21A2
00004372 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
00004378 66B2                       		bne.s	locret_214E
0000437A 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004380                            
00004380                            loc_21A2:				; CODE XREF: sub_20D4+5Ej sub_20D4+BCj
00004380 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
00004384 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004388 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000438C 4E75                       		rts
0000438E                            ; ---------------------------------------------------------------------------
0000438E                            
0000438E                            loc_21B0:				; CODE XREF: sub_20D4+10j
0000438E 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004392 6A98                       		bpl.s	locret_214E
00004394 11FC 0006 F65E             		move.b	#6,($FFFFF65E).w
0000439A 41F9 0000 0000             		lea	(Pal_2246).l,a0
000043A0 3038 F65C                  		move.w	($FFFFF65C).w,d0
000043A4 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
000043A8 0C78 0036 F65C             		cmpi.w	#$36,($FFFFF65C).w ; '6'
000043AE 6500                       		bcs.s	loc_21D8
000043B0 31FC 0024 F65C             		move.w	#$24,($FFFFF65C).w ; '$'
000043B6                            
000043B6                            loc_21D8:				; CODE XREF: sub_20D4+FCj
000043B6 43F8 FB04                  		lea	(Normal_palette+4).w,a1
000043BA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000043BE 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000043C2 41F9 0000 0000             		lea	(Pal_22C6).l,a0
000043C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000043CE 6700 0000                  		beq.w	loc_2204
000043D2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
000043D8 6600 FF52                  		bne.w	locret_214E
000043DC 41F9 0000 0000             		lea	(Pal_2346).l,a0
000043E2                            
000043E2                            loc_2204:				; CODE XREF: sub_20D4+11Cj
000043E2 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
000043E6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000043EA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000043EE 4E75                       		rts
000043F0                            ; ---------------------------------------------------------------------------
000043F0                            
000043F0                            loc_2220:				; DATA XREF: ROM:0005A3C8o
000043F0                            					; ROM:0005A5C4o ...
000043F0 5338 F65E                  		subq.b	#1,($FFFFF65E).w
000043F4 6A00                       		bpl.s	locret_223E
000043F6 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
000043FC 11FC 00FF F65F             		move.b	#$FF,($FFFFF65F).w
00004402 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
00004408 11FC 0000 D02A             		move.b	#0,($FFFFD02A).w
0000440E                            
0000440E                            locret_223E:				; CODE XREF: sub_20D4+142j
0000440E                            					; sub_20D4:loc_2224j ...
0000440E 4E75                       		rts
00004410                            ; ---------------------------------------------------------------------------
00004410                            
00004410                            loc_2240:				; CODE XREF: sub_20D4+14Aj
00004410                            					; DATA XREF: ROM:000732FCo ...
00004410 7000                       		moveq	#0,d0
00004412 31C0 F65C                  		move.w	d0,($FFFFF65C).w
00004416 11C0 F65F                  		move.b	d0,($FFFFF65F).w
0000441A 41F9 0000 0000             		lea	(Pal_22C6).l,a0
00004420 6000 0000                  		bra.w	loc2X
00004424                            ; ---------------------------------------------------------------------------
00004424                            
00004424                            loc_2254:				; CODE XREF: sub_20D4+144j
00004424                            					; DATA XREF: ROM:001E05CCo
00004424 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004428 6A00 FFE4                  		bpl.w	locret_223E
0000442C 11FC 0002 F65E             		move.b	#2,($FFFFF65E).w
00004432 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004438 3038 F65C                  		move.w	($FFFFF65C).w,d0
0000443C 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
00004440 0C78 003C F65C             		cmpi.w	#$3C,($FFFFF65C).w ; '<'
00004446 6500                       		bcs.s	loc2X
00004448 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
0000444E 11FC 000E F65E             		move.b	#$E,($FFFFF65E).w
00004454 43F8 FB04                  loc2X:		lea	(Normal_palette+4).w,a1
00004458 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000445C 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
00004462 4A38 F730                  		tst.b	($FFFFF730).w
00004466 6700 FFA6                  		beq.w	locret_223E
0000446A 43F8 FA84                  		lea	($FFFFFA84).w,a1
0000446E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004472 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
00004478 4E75                       		rts
0000447A                            ; End of function PalCycle_SuperSonic
0000447A                            
0000447A                            ; ===========================================================================
0000447A                            ;----------------------------------------------------------------------------
0000447A                            ;Palette for transformation to Super Sonic
0000447A                            ;----------------------------------------------------------------------------
0000447A                            Pal_2246:	incbin	"art/palettes/Super Sonic transformation S3.bin"
000044FA                            ;----------------------------------------------------------------------------
000044FA                            ;Palette for transformation to Super Sonic while underwater in CPZ
000044FA                            ;----------------------------------------------------------------------------
000044FA                            Pal_22C6:	incbin	pallet/LZSuperSonic.bin
0000457A                            ;----------------------------------------------------------------------------
0000457A                            ;Palette for transformation to Super Sonic while underwater in ARZ
0000457A                            ;----------------------------------------------------------------------------
0000457A                            Pal_2346:	incbin	pallet/SBZ3SuperSonic.bin
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            ; Subroutine to	fade out and fade in
000045FA                            ; ---------------------------------------------------------------------------
000045FA                            
000045FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045FA                            
000045FA                            Pal_FadeTo:
000045FA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004600                             
00004600                            Pal_FadeTo2:
00004600 7000                       		moveq	#0,d0
00004602 41F8 FB00                  		lea	($FFFFFB00).w,a0
00004606 1038 F626                  		move.b	($FFFFF626).w,d0
0000460A D0C0                       		adda.w	d0,a0
0000460C 7200                       		moveq	#0,d1
0000460E 1038 F627                  		move.b	($FFFFF627).w,d0
00004612                             
00004612                            Pal_ToBlack:
00004612 30C1                       		move.w	d1,(a0)+
00004614 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00004618 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
0000461A 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000461C                             
0000461C                            loc_1DCE:
0000461C 4EB8 377E                  		jsr	RunPLC_RAM
00004620 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00004626 4EB9 0000 0000             		jsr	DelayProgram
0000462C 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00004630 67EA                       		beq	loc_1DCE				; MJ: if null, delay a frame
00004632 6100                       		bsr.s	Pal_FadeIn
00004634 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00004636 66E4                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00004638 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000463E 4EF9 0000 0000             		jmp	DelayProgram				; MJ: ''
00004644                             
00004644                            ; End of function Pal_FadeTo
00004644                             
00004644                            ; ---------------------------------------------------------------------------
00004644                            ; Pallet fade-in subroutine
00004644                            ; ---------------------------------------------------------------------------
00004644                             
00004644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004644                             
00004644                             
00004644                            Pal_FadeIn:				; XREF: Pal_FadeTo
00004644 7000                       		moveq	#0,d0
00004646 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000464A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000464E 1038 F626                  		move.b	($FFFFF626).w,d0
00004652 D0C0                       		adda.w	d0,a0
00004654 D2C0                       		adda.w	d0,a1
00004656 1038 F627                  		move.b	($FFFFF627).w,d0
0000465A                             
0000465A                            loc_1DFA:
0000465A 6100                       		bsr.s	Pal_AddColor
0000465C 51C8 FFFC                  		dbf	d0,loc_1DFA
00004660 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004666 6600                       		bne.s	locret_1E24
00004668 7000                       		moveq	#0,d0
0000466A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000466E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00004672 1038 F626                  		move.b	($FFFFF626).w,d0
00004676 D0C0                       		adda.w	d0,a0
00004678 D2C0                       		adda.w	d0,a1
0000467A 1038 F627                  		move.b	($FFFFF627).w,d0
0000467E                             
0000467E                            loc_1E1E:
0000467E 6100                       		bsr.s	Pal_AddColor
00004680 51C8 FFFC                  		dbf	d0,loc_1E1E
00004684                             
00004684                            locret_1E24:
00004684 4E75                       		rts	
00004686                            ; End of function Pal_FadeIn
00004686                             
00004686                             
00004686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004686                             
00004686                             
00004686                            Pal_AddColor:				; XREF: Pal_FadeIn
00004686 1A11                       		move.b	(a1),d5					; MJ: load blue
00004688 3219                       		move.w	(a1)+,d1				; MJ: load green and red
0000468A 1401                       		move.b	d1,d2					; MJ: load red
0000468C E809                       		lsr.b	#$04,d1					; MJ: get only green
0000468E 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00004692 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00004694 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00004696 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
0000469A 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
0000469E                             
0000469E                            FCI_NoBlue:
0000469E B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
000046A0 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
000046A4 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
000046A8                             
000046A8                            FCI_NoGreen:
000046A8 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
000046AA 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
000046AE 5403                       		addq.b	#$02,d3					; MJ: increase red
000046B0                             
000046B0                            FCI_NoRed:
000046B0 30C3                       		move.w	d3,(a0)+				; MJ: save colour
000046B2 4E75                       		rts						; MJ: return
000046B4                             
000046B4                            ; End of function Pal_AddColor
000046B4                             
000046B4                             
000046B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046B4                             
000046B4                             
000046B4                            Pal_FadeFrom:
000046B4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000046BA 7807                       		moveq	#$07,d4					; MJ: set repeat times
000046BC 7C00                       		moveq	#$00,d6					; MJ: clear d6
000046BE                             
000046BE                            loc_1E5C:
000046BE 4EB8 377E                  		jsr	RunPLC_RAM
000046C2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000046C8 4EB9 0000 0000             		jsr	DelayProgram
000046CE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000046D2 67EA                       		beq	loc_1E5C				; MJ: if null, delay a frame
000046D4 6100                       		bsr.s	Pal_FadeOut
000046D6 51CC FFE6                  		dbf	d4,loc_1E5C
000046DA 4E75                       		rts	
000046DC                            ; End of function Pal_FadeFrom
000046DC                             
000046DC                            ; ---------------------------------------------------------------------------
000046DC                            ; Pallet fade-out subroutine
000046DC                            ; ---------------------------------------------------------------------------
000046DC                             
000046DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046DC                             
000046DC                             
000046DC                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000046DC 7000                       		moveq	#0,d0
000046DE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000046E2 1038 F626                  		move.b	($FFFFF626).w,d0
000046E6 D0C0                       		adda.w	d0,a0
000046E8 1038 F627                  		move.b	($FFFFF627).w,d0
000046EC                             
000046EC                            loc_1E82:
000046EC 6100                       		bsr.s	Pal_DecColor
000046EE 51C8 FFFC                  		dbf	d0,loc_1E82
000046F2                             
000046F2 7000                       		moveq	#0,d0
000046F4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000046F8 1038 F626                  		move.b	($FFFFF626).w,d0
000046FC D0C0                       		adda.w	d0,a0
000046FE 1038 F627                  		move.b	($FFFFF627).w,d0
00004702                             
00004702                            loc_1E98:
00004702 6100                       		bsr.s	Pal_DecColor
00004704 51C8 FFFC                  		dbf	d0,loc_1E98
00004708 4E75                       		rts	
0000470A                            ; End of function Pal_FadeOut
0000470A                             
0000470A                             
0000470A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000470A                             
0000470A                             
0000470A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000470A 3A10                       		move.w	(a0),d5					; MJ: load colour
0000470C 3205                       		move.w	d5,d1					; MJ: copy to d1
0000470E 1401                       		move.b	d1,d2					; MJ: load green and red
00004710 1601                       		move.b	d1,d3					; MJ: load red
00004712 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00004716 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000471A 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
0000471E                             
0000471E                            FCO_NoBlue:
0000471E 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00004722 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00004726 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000472A                             
0000472A                            FCO_NoGreen:
0000472A 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
0000472E 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00004732 5505                       		subq.b	#$02,d5					; MJ: decrease red
00004734                             
00004734                            FCO_NoRed:
00004734 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00004736 4E75                       		rts						; MJ: return
00004738                             
00004738                            ; End of function Pal_DecColor
00004738                            
00004738                            ; ---------------------------------------------------------------------------
00004738                            ; Subroutine to	fill the pallet	with white (special stage)
00004738                            ; ---------------------------------------------------------------------------
00004738                            
00004738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004738                            
00004738                            
00004738                            Pal_MakeWhite:				; XREF: SpecialStage
00004738 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000473E 7000                       		moveq	#0,d0
00004740 41F8 FB00                  		lea	($FFFFFB00).w,a0
00004744 1038 F626                  		move.b	($FFFFF626).w,d0
00004748 D0C0                       		adda.w	d0,a0
0000474A 323C 0EEE                  		move.w	#$EEE,d1
0000474E 1038 F627                  		move.b	($FFFFF627).w,d0
00004752                            
00004752                            PalWhite_Loop:
00004752 30C1                       		move.w	d1,(a0)+
00004754 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00004758 4278 FACE                  		clr.w	($FFFFFACE).w
0000475C 383C 0015                  		move.w	#$15,d4
00004760                            
00004760                            loc_1EF4:
00004760 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00004766 4EB9 0000 0000             		jsr	DelayProgram
0000476C 6100                       		bsr.s	Pal_WhiteToBlack
0000476E 4EB8 377E                  		jsr	RunPLC_RAM
00004772 51CC FFEC                  		dbf	d4,loc_1EF4
00004776 4E75                       		rts	
00004778                            ; End of function Pal_MakeWhite
00004778                            
00004778                            
00004778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004778                            
00004778                            
00004778                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00004778 5378 FACE                  		subq.w	#1,($FFFFFACE).w
0000477C 6A00                       		bpl.s	locret_3CEE
0000477E 31FC 0002 FACE             		move.w	#2,($FFFFFACE).w
00004784 7000                       		moveq	#0,d0
00004786                            
00004786 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000478A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000478E 1038 F626                  		move.b	($FFFFF626).w,d0
00004792 D0C0                       		adda.w	d0,a0
00004794 D2C0                       		adda.w	d0,a1
00004796 1038 F627                  		move.b	($FFFFF627).w,d0
0000479A                            
0000479A                            loc_3CC6:
0000479A 6100                       		bsr.s	Pal_DecColor2
0000479C 51C8 FFFC                  		dbf	d0,loc_3CC6
000047A0 4A38 F64C                  		tst.b	($FFFFF64C).w
000047A4 6700                       		beq.s	locret_3CEE
000047A6 7000                       		moveq	#0,d0
000047A8 41F8 FA80                  		lea	($FFFFFA80).w,a0
000047AC 43F8 FA00                  		lea	($FFFFFA00).w,a1
000047B0 1038 F626                  		move.b	($FFFFF626).w,d0
000047B4 D0C0                       		adda.w	d0,a0
000047B6 D2C0                       		adda.w	d0,a1
000047B8 1038 F627                  		move.b	($FFFFF627).w,d0
000047BC                            
000047BC                            loc_3CE8:
000047BC 6100                       		bsr.s	Pal_DecColor2
000047BE 51C8 FFFC                  		dbf	d0,loc_3CE8
000047C2                            
000047C2                            locret_3CEE:
000047C2 4E75                       		rts
000047C4                            ; End of function Pal_WhiteToBlack
000047C4                            
000047C4                            
000047C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C4                            
000047C4                            
000047C4                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000047C4 1419                       		move.b	(a1)+,d2
000047C6 0202 000E                  		andi.b	#$E,d2
000047CA 1610                       		move.b	(a0),d3
000047CC 0203 000E                  		andi.b	#$E,d3
000047D0 B602                       		cmp.b	d2,d3
000047D2 6300                       		bls.s	loc_3D02
000047D4 5503                       		subq.b	#2,d3
000047D6                            
000047D6                            loc_3D02:
000047D6 10C3                       		move.b	d3,(a0)+
000047D8 1219                       		move.b	(a1)+,d1
000047DA 1401                       		move.b	d1,d2
000047DC 0201 00E0                  		andi.b	#$E0,d1
000047E0 1610                       		move.b	(a0),d3
000047E2 1A03                       		move.b	d3,d5
000047E4 0203 00E0                  		andi.b	#$E0,d3
000047E8 B601                       		cmp.b	d1,d3
000047EA 6300                       		bls.s	loc_3D1C
000047EC 0403 0020                  		subi.b	#$20,d3
000047F0                            
000047F0                            loc_3D1C:
000047F0 0202 000E                  		andi.b	#$E,d2
000047F4 0205 000E                  		andi.b	#$E,d5
000047F8 BA02                       		cmp.b	d2,d5
000047FA 6300                       		bls.s	loc_3D2A
000047FC 5505                       		subq.b	#2,d5
000047FE                            
000047FE                            loc_3D2A:
000047FE 8605                       		or.b	d5,d3
00004800 10C3                       		move.b	d3,(a0)+
00004802 4E75                       		rts
00004804                            ; End of function Pal_DecColor2
00004804                            
00004804                            ; ---------------------------------------------------------------------------
00004804                            ; Subroutine to	make a white flash when	you enter a special stage
00004804                            ; ---------------------------------------------------------------------------
00004804                            
00004804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004804                            
00004804                            
00004804                            Pal_MakeFlash:				; XREF: SpecialStage
00004804 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000480A 383C 0015                  		move.w	#$15,d4
0000480E                            
0000480E                            loc_1F86:
0000480E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00004814 4EB9 0000 0000             		jsr	DelayProgram
0000481A 6100                       		bsr.s	Pal_ToWhite
0000481C 4EB8 377E                  		jsr	RunPLC_RAM
00004820 51CC FFEC                  		dbf	d4,loc_1F86
00004824 4E75                       		rts	
00004826                            ; End of function Pal_MakeFlash
00004826                            
00004826                            
00004826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004826                            
00004826                            
00004826                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00004826 7000                       		moveq	#0,d0
00004828 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000482C 1038 F626                  		move.b	($FFFFF626).w,d0
00004830 D0C0                       		adda.w	d0,a0
00004832 1038 F627                  		move.b	($FFFFF627).w,d0
00004836                            
00004836                            loc_1FAC:
00004836 6100                       		bsr.s	Pal_AddColor2
00004838 51C8 FFFC                  		dbf	d0,loc_1FAC
0000483C 7000                       		moveq	#0,d0
0000483E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00004842 1038 F626                  		move.b	($FFFFF626).w,d0
00004846 D0C0                       		adda.w	d0,a0
00004848 1038 F627                  		move.b	($FFFFF627).w,d0
0000484C                            
0000484C                            loc_1FC2:
0000484C 6100                       		bsr.s	Pal_AddColor2
0000484E 51C8 FFFC                  		dbf	d0,loc_1FC2
00004852 4E75                       		rts	
00004854                            ; End of function Pal_ToWhite
00004854                            
00004854                            
00004854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004854                            
00004854                            
00004854                            Pal_AddColor2:				; XREF: Pal_ToWhite
00004854 3410                       		move.w	(a0),d2
00004856 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000485A 6700                       		beq.s	loc_2006
0000485C 3202                       		move.w	d2,d1
0000485E 0241 000E                  		andi.w	#$E,d1
00004862 0C41 000E                  		cmpi.w	#$E,d1
00004866 6700                       		beq.s	loc_1FE2
00004868 5458                       		addq.w	#2,(a0)+	; increase red value
0000486A 4E75                       		rts	
0000486C                            ; ===========================================================================
0000486C                            
0000486C                            loc_1FE2:				; XREF: Pal_AddColor2
0000486C 3202                       		move.w	d2,d1
0000486E 0241 00E0                  		andi.w	#$E0,d1
00004872 0C41 00E0                  		cmpi.w	#$E0,d1
00004876 6700                       		beq.s	loc_1FF4
00004878 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000487C 4E75                       		rts	
0000487E                            ; ===========================================================================
0000487E                            
0000487E                            loc_1FF4:				; XREF: loc_1FE2
0000487E 3202                       		move.w	d2,d1
00004880 0241 0E00                  		andi.w	#$E00,d1
00004884 0C41 0E00                  		cmpi.w	#$E00,d1
00004888 6700                       		beq.s	loc_2006
0000488A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000488E 4E75                       		rts	
00004890                            ; ===========================================================================
00004890                            
00004890                            loc_2006:				; XREF: Pal_AddColor2
00004890 5448                       		addq.w	#2,a0
00004892 4E75                       		rts	
00004894                            ; End of function Pal_AddColor2
00004894                            
00004894                            ; ---------------------------------------------------------------------------
00004894                            ; Pallet cycling routine - Sega	logo
00004894                            ; ---------------------------------------------------------------------------
00004894                            
00004894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004894                            
00004894                            
00004894                            PalCycle_Sega:				; XREF: SegaScreen
00004894 4A38 F635                  		tst.b	($FFFFF635).w
00004898 6600                       		bne.s	loc_206A
0000489A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000489E 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000048A4 7205                       		moveq	#5,d1
000048A6 3038 F632                  		move.w	($FFFFF632).w,d0
000048AA                            
000048AA                            loc_2020:
000048AA 6A00                       		bpl.s	loc_202A
000048AC 5448                       		addq.w	#2,a0
000048AE 5341                       		subq.w	#1,d1
000048B0 5440                       		addq.w	#2,d0
000048B2 60F6                       		bra.s	loc_2020
000048B4                            ; ===========================================================================
000048B4                            
000048B4                            loc_202A:				; XREF: PalCycle_Sega
000048B4 3400                       		move.w	d0,d2
000048B6 0242 001E                  		andi.w	#$1E,d2
000048BA 6600                       		bne.s	loc_2034
000048BC 5440                       		addq.w	#2,d0
000048BE                            
000048BE                            loc_2034:
000048BE 0C40 0060                  		cmpi.w	#$60,d0
000048C2 6400                       		bcc.s	loc_203E
000048C4 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000048C8                            
000048C8                            loc_203E:
000048C8 5440                       		addq.w	#2,d0
000048CA 51C9 FFE8                  		dbf	d1,loc_202A
000048CE 3038 F632                  		move.w	($FFFFF632).w,d0
000048D2 5440                       		addq.w	#2,d0
000048D4 3400                       		move.w	d0,d2
000048D6 0242 001E                  		andi.w	#$1E,d2
000048DA 6600                       		bne.s	loc_2054
000048DC 5440                       		addq.w	#2,d0
000048DE                            
000048DE                            loc_2054:
000048DE 0C40 0064                  		cmpi.w	#$64,d0
000048E2 6D00                       		blt.s	loc_2062
000048E4 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000048EA 70F4                       		moveq	#-$C,d0
000048EC                            
000048EC                            loc_2062:
000048EC 31C0 F632                  		move.w	d0,($FFFFF632).w
000048F0 7001                       		moveq	#1,d0
000048F2 4E75                       		rts	
000048F4                            ; ===========================================================================
000048F4                            
000048F4                            loc_206A:				; XREF: loc_202A
000048F4 5338 F634                  		subq.b	#1,($FFFFF634).w
000048F8 6A00                       		bpl.s	loc_20BC
000048FA 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00004900 3038 F632                  		move.w	($FFFFF632).w,d0
00004904 0640 000C                  		addi.w	#$C,d0
00004908 0C40 0030                  		cmpi.w	#$30,d0
0000490C 6500                       		bcs.s	loc_2088
0000490E 7000                       		moveq	#0,d0
00004910 4E75                       		rts	
00004912                            ; ===========================================================================
00004912                            
00004912                            loc_2088:				; XREF: loc_206A
00004912 31C0 F632                  		move.w	d0,($FFFFF632).w
00004916 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000491C 41F0 0000                  		lea	(a0,d0.w),a0
00004920 43F8 FB04                  		lea	($FFFFFB04).w,a1
00004924 22D8                       		move.l	(a0)+,(a1)+
00004926 22D8                       		move.l	(a0)+,(a1)+
00004928 3298                       		move.w	(a0)+,(a1)
0000492A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000492E 7000                       		moveq	#0,d0
00004930 722C                       		moveq	#$2C,d1
00004932                            
00004932                            loc_20A8:
00004932 3400                       		move.w	d0,d2
00004934 0242 001E                  		andi.w	#$1E,d2
00004938 6600                       		bne.s	loc_20B2
0000493A 5440                       		addq.w	#2,d0
0000493C                            
0000493C                            loc_20B2:
0000493C 3390 0000                  		move.w	(a0),(a1,d0.w)
00004940 5440                       		addq.w	#2,d0
00004942 51C9 FFEE                  		dbf	d1,loc_20A8
00004946                            
00004946                            loc_20BC:
00004946 7001                       		moveq	#1,d0
00004948 4E75                       		rts	
0000494A                            ; End of function PalCycle_Sega
0000494A                            
0000494A                            ; ===========================================================================
0000494A                            
0000494A                            Pal_Sega1:	incbin	pallet\sega1.bin
00004956                            Pal_Sega2:	incbin	pallet\sega2.bin
00004986                            
00004986                            ; ---------------------------------------------------------------------------
00004986                            ; Subroutines to load pallets
00004986                            ; ---------------------------------------------------------------------------
00004986                            
00004986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004986                            
00004986                            
00004986                            PalLoad1:
00004986 6100                         bsr.s	PalLoad_PalPointers
00004988 E748                         lsl.w	#3,d0
0000498A D2C0                         adda.w	d0,a1
0000498C 2459                         movea.l	(a1)+,a2
0000498E 3659                         movea.w	(a1)+,a3
00004990 D6FC 0080                    adda.w	#$80,a3
00004994 3E19                         move.w	(a1)+,d7
00004996                            
00004996                            loc_2110:
00004996 26DA                         move.l	(a2)+,(a3)+
00004998 51CF FFFC                    dbf	d7,loc_2110
0000499C 4E75                         rts	
0000499E                            ; End of function PalLoad1
0000499E                            
0000499E                            
0000499E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000499E                            
0000499E                            
0000499E                            PalLoad2:
0000499E 6100                         bsr.s	PalLoad_PalPointers
000049A0 E748                         lsl.w	#3,d0
000049A2 D2C0                         adda.w	d0,a1
000049A4 2459                         movea.l	(a1)+,a2
000049A6 3659                         movea.w	(a1)+,a3
000049A8 3E19                         move.w	(a1)+,d7
000049AA                            
000049AA                            loc_2128:
000049AA 26DA                         move.l	(a2)+,(a3)+
000049AC 51CF FFFC                    dbf	d7,loc_2128
000049B0 4E75                         rts	
000049B2                            ; End of function PalLoad2
000049B2                            
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            ; Underwater pallet loading subroutine
000049B2                            ; ---------------------------------------------------------------------------
000049B2                            
000049B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049B2                            
000049B2                            
000049B2                            PalLoad3_Water:
000049B2 6100                         bsr.s	PalLoad_PalPointers
000049B4 E748                         lsl.w	#3,d0
000049B6 D2C0                         adda.w	d0,a1
000049B8 2459                         movea.l	(a1)+,a2
000049BA 3659                         movea.w	(a1)+,a3
000049BC 96FC 0080                    suba.w	#$80,a3
000049C0 3E19                         move.w	(a1)+,d7
000049C2                            
000049C2                            loc_2144:
000049C2 26DA                         move.l	(a2)+,(a3)+
000049C4 51CF FFFC                    dbf	d7,loc_2144
000049C8 4E75                         rts	
000049CA                            ; End of function PalLoad3_Water
000049CA                            
000049CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049CA                            
000049CA                            
000049CA                            PalLoad4_Water:
000049CA 6100                       		bsr.s	PalLoad_PalPointers
000049CC E748                       		lsl.w	#3,d0
000049CE D2C0                       		adda.w	d0,a1
000049D0 2459                       		movea.l	(a1)+,a2
000049D2 3659                       		movea.w	(a1)+,a3
000049D4 97FC 0000 0080             		suba.l	#$80,a3
000049DA 3E19                       		move.w	(a1)+,d7
000049DC                            
000049DC                            loc_2160:
000049DC 26DA                       		move.l		(a2)+,(a3)+
000049DE 51CF FFFC                  		dbf		d7,loc_2160
000049E2 4E75                       		rts
000049E4                            ; End of function PalLoad4_Water
000049E4                            
000049E4                            ; ===========================================================================
000049E4                            
000049E4                            PalLoad_PalPointers:
000049E4                            ;		cmpi.b	#1,($FFFFFFFE).w				; is the original mode?
000049E4                            ;		beq.s	PalLoad_PalPointers_Original	; if yes, branch
000049E4 1238 FE11                  		move.b	($FFFFFE11).w,d1		; set Act number to d1
000049E8 43F9 0000 0000             		lea		(PalPointers).l,a1		; load the PalPointers of the act 1
000049EE 0C01 0000                  		cmp.b	#0,d1					; is act 1?
000049F2 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
000049F6 43F9 0000 0000             		lea		(PalPointers2).l,a1		; load the PalPointers of the act 2
000049FC 0C01 0001                  		cmp.b	#1,d1					; is act 2?
00004A00 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004A04 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 3
00004A0A 0C01 0002                  		cmp.b	#2,d1					; is act 3?
00004A0E 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004A12 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 4
00004A18 6000 0000                  		bra.w	PalLoad_PalPointers_rts
00004A1C                            
00004A1C                            ;PalLoad_PalPointers_Original:
00004A1C                            ;		lea	(PalPointers).l,a1			; load the Original PalPointers
00004A1C                            
00004A1C                            PalLoad_PalPointers_rts:
00004A1C 4E75                       		rts
00004A1E                            
00004A1E                            ; ---------------------------------------------------------------------------
00004A1E                            ; Pallet pointers
00004A1E                            ; ---------------------------------------------------------------------------
00004A1E                            PalPointers:
00004A1E                                   include "_inc\Pallet pointers.asm"
00004A1E                            ; ---------------------------------------------------------------------------
00004A1E                            ; Pallet pointers
00004A1E                            ; ---------------------------------------------------------------------------
00004A1E 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004A22 FB00                       	dc.w $FB00		; RAM address
00004A24 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004A26 0000 0000                  	dc.l Pal_Title
00004A2A FB00                       	dc.w $FB00
00004A2C 001F                       	dc.w $1F
00004A2E 0000 0000                  	dc.l Pal_LevelSel
00004A32 FB00                       	dc.w $FB00
00004A34 001F                       	dc.w $1F
00004A36 0000 0000                  	dc.l Pal_Sonic
00004A3A FB00                       	dc.w $FB00
00004A3C 0007                       	dc.w 7
00004A3E 0000 0000                  	dc.l Pal_GHZ
00004A42 FB20                       	dc.w $FB20
00004A44 0017                       	dc.w $17
00004A46 0000 0000                  	dc.l Pal_LZ
00004A4A FB20                       	dc.w $FB20
00004A4C 0017                       	dc.w $17
00004A4E 0000 0000                  	dc.l Pal_MZ
00004A52 FB20                       	dc.w $FB20
00004A54 0017                       	dc.w $17
00004A56 0000 0000                  	dc.l Pal_SLZ
00004A5A FB20                       	dc.w $FB20
00004A5C 0017                       	dc.w $17
00004A5E 0000 0000                  	dc.l Pal_SYZ
00004A62 FB20                       	dc.w $FB20
00004A64 0017                       	dc.w $17
00004A66 0000 0000                  	dc.l Pal_SBZ1
00004A6A FB20                       	dc.w $FB20
00004A6C 0017                       	dc.w $17
00004A6E 0000 0000                  	dc.l Pal_Special
00004A72 FB00                       	dc.w $FB00
00004A74 001F                       	dc.w $1F
00004A76 0000 0000                  	dc.l Pal_LZWater
00004A7A FB00                       	dc.w $FB00
00004A7C 001F                       	dc.w $1F
00004A7E 0000 0000                  	dc.l Pal_SBZ3
00004A82 FB20                       	dc.w $FB20
00004A84 0017                       	dc.w $17
00004A86 0000 0000                  	dc.l Pal_SBZ3Water
00004A8A FB00                       	dc.w $FB00
00004A8C 001F                       	dc.w $1F
00004A8E 0000 0000                  	dc.l Pal_SBZ2
00004A92 FB20                       	dc.w $FB20
00004A94 0017                       	dc.w $17
00004A96 0000 0000                  	dc.l Pal_LZSonWater
00004A9A FB00                       	dc.w $FB00
00004A9C 0007                       	dc.w 7
00004A9E 0000 0000                  	dc.l Pal_SBZ3SonWat
00004AA2 FB00                       	dc.w $FB00
00004AA4 0007                       	dc.w 7
00004AA6 0000 0000                  	dc.l Pal_SpeResult
00004AAA FB00                       	dc.w $FB00
00004AAC 001F                       	dc.w $1F
00004AAE 0000 0000                  	dc.l Pal_SpeContinue
00004AB2 FB00                       	dc.w $FB00
00004AB4 000F                       	dc.w $F
00004AB6 0000 0000                  	dc.l Pal_Ending
00004ABA FB00                       	dc.w $FB00
00004ABC 001F                       	dc.w $1F
00004ABE 0000 0000                  	dc.l Menu_Palette; pallet address
00004AC2 FB00                       	dc.w $FB00	; RAM address
00004AC4 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004AC6 0000 0000                  	dc.l Pal_Ray
00004ACA FB00                       	dc.w $FB00
00004ACC 0007                       	dc.w 7
00004ACE 0000 0000                  	dc.l Pal_SonicHeat
00004AD2 FB00                       	dc.w $FB00
00004AD4 0007                       	dc.w 7
00004AD6 0000 0000                  	dc.l Pal_RayHeat
00004ADA FB00                       	dc.w $FB00
00004ADC 0007                       	dc.w 7
00004ADE 0000 0000                  	dc.l Pal_ABZ		; 14
00004AE2 FB20                       	dc.w $FB20
00004AE4 0017                       	dc.w $17
00004AE4 0017                       	dc.w $17
00004AE6                            PalPointers2:
00004AE6                             include "_inc\Pallet pointers2.asm"
00004AE6 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004AEA FB00                       	dc.w $FB00		; RAM address
00004AEC 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004AEE 0000 0000                  	dc.l Pal_Title
00004AF2 FB00                       	dc.w $FB00
00004AF4 001F                       	dc.w $1F
00004AF6 0000 0000                  	dc.l Pal_LevelSel
00004AFA FB00                       	dc.w $FB00
00004AFC 001F                       	dc.w $1F
00004AFE 0000 0000                  	dc.l Pal_Sonic
00004B02 FB00                       	dc.w $FB00
00004B04 0007                       	dc.w 7
00004B06 0000 0000                  	dc.l Pal2_GHZ3
00004B0A FB20                       	dc.w $FB20
00004B0C 0017                       	dc.w $17
00004B0E 0000 0000                  	dc.l Pal2_LZ3
00004B12 FB20                       	dc.w $FB20
00004B14 0017                       	dc.w $17
00004B16 0000 0000                  	dc.l Pal2_MZ3
00004B1A FB20                       	dc.w $FB20
00004B1C 0017                       	dc.w $17
00004B1E 0000 0000                  	dc.l Pal2_SLZ3
00004B22 FB20                       	dc.w $FB20
00004B24 0017                       	dc.w $17
00004B26 0000 0000                  	dc.l Pal2_SYZ3
00004B2A FB20                       	dc.w $FB20
00004B2C 0017                       	dc.w $17
00004B2E 0000 0000                  	dc.l Pal2_SBZ1
00004B32 FB20                       	dc.w $FB20
00004B34 0017                       	dc.w $17
00004B36 0000 0000                  	dc.l Pal2_Special
00004B3A FB00                       	dc.w $FB00
00004B3C 001F                       	dc.w $1F
00004B3E 0000 0000                  	dc.l Pal2_LZWater3
00004B42 FB00                       	dc.w $FB00
00004B44 001F                       	dc.w $1F
00004B46 0000 0000                  	dc.l Pal2_SBZ3
00004B4A FB20                       	dc.w $FB20
00004B4C 0017                       	dc.w $17
00004B4E 0000 0000                  	dc.l Pal2_SBZ3Water
00004B52 FB00                       	dc.w $FB00
00004B54 001F                       	dc.w $1F
00004B56 0000 0000                  	dc.l Pal2_SBZ2
00004B5A FB20                       	dc.w $FB20
00004B5C 0017                       	dc.w $17
00004B5E 0000 0000                  	dc.l Pal2_LZSonWater
00004B62 FB00                       	dc.w $FB00
00004B64 0007                       	dc.w 7
00004B66 0000 0000                  	dc.l Pal2_SBZ3SonWat
00004B6A FB00                       	dc.w $FB00
00004B6C 0007                       	dc.w 7
00004B6E 0000 0000                  	dc.l Pal2_SpeResult
00004B72 FB00                       	dc.w $FB00
00004B74 001F                       	dc.w $1F
00004B76 0000 0000                  	dc.l Pal2_SpeContinue
00004B7A FB00                       	dc.w $FB00
00004B7C 000F                       	dc.w $F
00004B7E 0000 0000                  	dc.l Pal2_Ending
00004B82 FB00                       	dc.w $FB00
00004B84 001F                       	dc.w $1F
00004B86 0000 0000                  	dc.l Pal_ABZ3		; 14
00004B8A FB20                       	dc.w $FB20
00004B8C 0017                       	dc.w $17
00004B8E 0000 0000                  	dc.l Menu_Palette; pallet address
00004B92 FB00                       	dc.w $FB00	; RAM address
00004B94 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004B96 0000 0000                  	dc.l Pal_Ray
00004B9A FB00                       	dc.w $FB00
00004B9C 0007                       	dc.w 7
00004B9E 0000 0000                  	dc.l Pal_SonicHeat
00004BA2 FB00                       	dc.w $FB00
00004BA4 0007                       	dc.w 7
00004BA6 0000 0000                  	dc.l Pal_RayHeat
00004BAA FB00                       	dc.w $FB00
00004BAC 0007                       	dc.w 7
00004BAC 0007                       	dc.w 7
00004BAE                            PalPointers3:
00004BAE                             include "_inc\Pallet pointers3.asm"
00004BAE                            ; ---------------------------------------------------------------------------
00004BAE                            ; Pallet pointers
00004BAE                            ; ---------------------------------------------------------------------------
00004BAE 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004BB2 FB00                       	dc.w $FB00		; RAM address
00004BB4 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004BB6 0000 0000                  	dc.l Pal_Title
00004BBA FB00                       	dc.w $FB00
00004BBC 001F                       	dc.w $1F
00004BBE 0000 0000                  	dc.l Pal_LevelSel
00004BC2 FB00                       	dc.w $FB00
00004BC4 001F                       	dc.w $1F
00004BC6 0000 0000                  	dc.l Pal_Sonic
00004BCA FB00                       	dc.w $FB00
00004BCC 0007                       	dc.w 7
00004BCE 0000 0000                  	dc.l Pal3_GHZ3
00004BD2 FB20                       	dc.w $FB20
00004BD4 0017                       	dc.w $17
00004BD6 0000 0000                  	dc.l Pal3_LZ3
00004BDA FB20                       	dc.w $FB20
00004BDC 0017                       	dc.w $17
00004BDE 0000 0000                  	dc.l Pal3_MZ3
00004BE2 FB20                       	dc.w $FB20
00004BE4 0017                       	dc.w $17
00004BE6 0000 0000                  	dc.l Pal3_SLZ3
00004BEA FB20                       	dc.w $FB20
00004BEC 0017                       	dc.w $17
00004BEE 0000 0000                  	dc.l Pal3_SYZ3
00004BF2 FB20                       	dc.w $FB20
00004BF4 0017                       	dc.w $17
00004BF6 0000 0000                  	dc.l Pal3_SBZ3
00004BFA FB20                       	dc.w $FB20
00004BFC 0017                       	dc.w $17
00004BFE 0000 0000                  	dc.l Pal3_Special
00004C02 FB00                       	dc.w $FB00
00004C04 001F                       	dc.w $1F
00004C06 0000 0000                  	dc.l Pal3_LZWater3
00004C0A FB00                       	dc.w $FB00
00004C0C 001F                       	dc.w $1F
00004C0E 0000 0000                  	dc.l Pal3_SBZ3
00004C12 FB20                       	dc.w $FB20
00004C14 0017                       	dc.w $17
00004C16 0000 0000                  	dc.l Pal3_SBZ3Water
00004C1A FB00                       	dc.w $FB00
00004C1C 001F                       	dc.w $1F
00004C1E 0000 0000                  	dc.l Pal3_SBZ2
00004C22 FB20                       	dc.w $FB20
00004C24 0017                       	dc.w $17
00004C26 0000 0000                  	dc.l Pal3_LZSonWater
00004C2A FB00                       	dc.w $FB00
00004C2C 0007                       	dc.w 7
00004C2E 0000 0000                  	dc.l Pal3_SBZ3SonWat
00004C32 FB00                       	dc.w $FB00
00004C34 0007                       	dc.w 7
00004C36 0000 0000                  	dc.l Pal3_SpeResult
00004C3A FB00                       	dc.w $FB00
00004C3C 001F                       	dc.w $1F
00004C3E 0000 0000                  	dc.l Pal3_SpeContinue
00004C42 FB00                       	dc.w $FB00
00004C44 000F                       	dc.w $F
00004C46 0000 0000                  	dc.l Pal3_Ending
00004C4A FB00                       	dc.w $FB00
00004C4C 001F                       	dc.w $1F
00004C4E 0000 0000                  	dc.l Pal_ABZ3		; 14
00004C52 FB20                       	dc.w $FB20
00004C54 0017                       	dc.w $17
00004C56 0000 0000                  	dc.l Menu_Palette; pallet address
00004C5A FB00                       	dc.w $FB00	; RAM address
00004C5C 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004C5E 0000 0000                  	dc.l Pal_Ray
00004C62 FB00                       	dc.w $FB00
00004C64 0007                       	dc.w 7
00004C66 0000 0000                  	dc.l Pal_SonicHeat
00004C6A FB00                       	dc.w $FB00
00004C6C 0007                       	dc.w 7
00004C6E 0000 0000                  	dc.l Pal_RayHeat
00004C72 FB00                       	dc.w $FB00
00004C74 0007                       	dc.w 7
00004C74 0007                       	dc.w 7
00004C76                            PalPointers4:
00004C76                             include "_inc\Pallet pointers4.asm"
00004C76                            ; ---------------------------------------------------------------------------
00004C76                            ; Pal4let pointers
00004C76                            ; ---------------------------------------------------------------------------
00004C76 0000 0000                  	dc.l Pal_SegaBG		; Pal4let address
00004C7A FB00                       	dc.w $FB00		; RAM address
00004C7C 001F                       	dc.w $1F		; (Pal4let length / 2) - 1
00004C7E 0000 0000                  	dc.l Pal_Title
00004C82 FB00                       	dc.w $FB00
00004C84 001F                       	dc.w $1F
00004C86 0000 0000                  	dc.l Pal_LevelSel
00004C8A FB00                       	dc.w $FB00
00004C8C 001F                       	dc.w $1F
00004C8E 0000 0000                  	dc.l Pal_Sonic
00004C92 FB00                       	dc.w $FB00
00004C94 0007                       	dc.w 7
00004C96 0000 0000                  	dc.l Pal4_GHZ
00004C9A FB20                       	dc.w $FB20
00004C9C 0017                       	dc.w $17
00004C9E 0000 0000                  	dc.l Pal4_LZ
00004CA2 FB20                       	dc.w $FB20
00004CA4 0017                       	dc.w $17
00004CA6 0000 0000                  	dc.l Pal4_MZ
00004CAA FB20                       	dc.w $FB20
00004CAC 0017                       	dc.w $17
00004CAE 0000 0000                  	dc.l Pal4_SLZ
00004CB2 FB20                       	dc.w $FB20
00004CB4 0017                       	dc.w $17
00004CB6 0000 0000                  	dc.l Pal4_SYZ
00004CBA FB20                       	dc.w $FB20
00004CBC 0017                       	dc.w $17
00004CBE 0000 0000                  	dc.l Pal4_SBZ1
00004CC2 FB20                       	dc.w $FB20
00004CC4 0017                       	dc.w $17
00004CC6 0000 0000                  	dc.l Pal4_Special
00004CCA FB00                       	dc.w $FB00
00004CCC 001F                       	dc.w $1F
00004CCE 0000 0000                  	dc.l Pal4_LZWater
00004CD2 FB00                       	dc.w $FB00
00004CD4 001F                       	dc.w $1F
00004CD6 0000 0000                  	dc.l Pal4_SBZ3
00004CDA FB20                       	dc.w $FB20
00004CDC 0017                       	dc.w $17
00004CDE 0000 0000                  	dc.l Pal4_SBZ3Water
00004CE2 FB00                       	dc.w $FB00
00004CE4 001F                       	dc.w $1F
00004CE6 0000 0000                  	dc.l Pal4_SBZ2
00004CEA FB20                       	dc.w $FB20
00004CEC 0017                       	dc.w $17
00004CEE 0000 0000                  	dc.l Pal4_LZSonWater
00004CF2 FB00                       	dc.w $FB00
00004CF4 0007                       	dc.w 7
00004CF6 0000 0000                  	dc.l Pal4_SBZ3SonWat
00004CFA FB00                       	dc.w $FB00
00004CFC 0007                       	dc.w 7
00004CFE 0000 0000                  	dc.l Pal4_SpeResult
00004D02 FB00                       	dc.w $FB00
00004D04 001F                       	dc.w $1F
00004D06 0000 0000                  	dc.l Pal4_SpeContinue
00004D0A FB00                       	dc.w $FB00
00004D0C 000F                       	dc.w $F
00004D0E 0000 0000                  	dc.l Pal4_Ending
00004D12 FB00                       	dc.w $FB00
00004D14 001F                       	dc.w $1F
00004D16 0000 0000                  	dc.l Pal_Menu; Pal4let address
00004D1A FB00                       	dc.w $FB00	; RAM address
00004D1C 001F                       	dc.w $1F	; (Pal4let length / 2) - 1
00004D1E 0000 0000                  	dc.l Pal_Ray
00004D22 FB00                       	dc.w $FB00
00004D24 0007                       	dc.w 7
00004D26 0000 0000                  	dc.l Pal_SonicHeat
00004D2A FB00                       	dc.w $FB00
00004D2C 0007                       	dc.w 7
00004D2E 0000 0000                  	dc.l Pal_RayHeat
00004D32 FB00                       	dc.w $FB00
00004D34 0007                       	dc.w 7
00004D36 0000 0000                  	dc.l Pal4_ABZ		; 14
00004D3A FB20                       	dc.w $FB20
00004D3C 0017                       	dc.w $17
00004D3C 0017                       	dc.w $17
00004D3E                             
00004D3E                            ; ---------------------------------------------------------------------------
00004D3E                            ; Pallet data
00004D3E                            ; ---------------------------------------------------------------------------
00004D3E                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00004DBE                            Pal_SegaBG2:	incbin	pallet\sega_bg2.bin
00004DDE                            Pal_Title:	incbin	pallet\title.bin
00004E5E                            Pal_LevelSel:	incbin	'pallet\Level Select.bin'
00004EDE                            Pal_Menu:	incbin	pallet\menu.bin
00004F5E                            Pal_MenuIcon:	incbin	pallet\menu_icons.bin
000051BE                            Pal_Sonic: incbin pallet\sonic.bin
000051DE                            Pal_Tails:	incbin	pallet\tails.bin
000051FE                            Pal_Ray:	incbin pallet\sonic.bin
0000521E                            Pal_SonicHeat:	incbin pallet\sonic.bin
0000523E                            Pal_RayHeat:	incbin pallet\sonic.bin
0000525E                            Pal_GHZ:	incbin	pallet\ghz.bin
000052BE                            Pal_GHZ2:	incbin	pallet\ghz2.bin
0000531E                            Pal_GHZ3:	incbin	pallet\ghz3.bin
0000537E                            Pal_GHZ4:	incbin	pallet\ghz3.bin
000053DE                            Pal_GHZExtra:	incbin	pallet\ghzextra.bin
0000543E                            Pal_LZ:  incbin	pallet\lz.bin
0000549E                            Pal_LZ2:  incbin	pallet\lz2.bin
000054FE                            Pal_LZ3:  incbin	pallet\lz3.bin
0000555E                            Pal_LZ4:  incbin	pallet\lz4.bin
000055BE                            Pal_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
0000563E                            Pal_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
000056BE                            Pal_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
0000573E                            Pal_MZ:  incbin	pallet\mz.bin
0000579E                            Pal_MZ2:  incbin	pallet\mz2.bin
000057FE                            Pal_MZ3:  incbin	pallet\mz3.bin
0000585E                            Pal_MZ4:	incbin	pallet\mz4.bin
000058BE                            Pal_SLZ:	incbin	pallet\slz.bin
0000591E                            Pal_SLZ2:	incbin	pallet\slz2.bin
0000597E                            Pal_SLZ3:	incbin	pallet\slz3.bin
000059DE                            Pal_SLZ4:	incbin	pallet\slz4.bin
00005A3E                            Pal_SYZ:	incbin	pallet\syz.bin
00005A9E                            Pal_SYZ2:	incbin	pallet\syz2.bin
00005AFE                            Pal_SYZ3:	incbin	pallet\syz3.bin
00005B5E                            Pal_SYZ4:	incbin	pallet\syz4.bin
00005BBE                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
00005C1E                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00005C7E                            Pal_Special:	incbin	pallet\special.bin; special stage pallets
00005CFE                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00005D5E                            Pal_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00005DBE                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00005E3E                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00005E5E                            Pal_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00005E7E                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00005E9E                            Pal_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00005EBE                            Pal_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00005F3E                            Pal_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00005F7E                            Pal_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00005FFE                            Pal_ABZ:	incbin	pallet\abz.bin
0000605E                            Pal_ABZ2:	incbin	pallet\abz2.bin
000060BE                            Pal_ABZ3:	incbin	pallet\abz3.bin
0000611E                            Pal_ABZ4:	incbin	pallet\abz4.bin
0000617E                            Pal2_GHZ:	incbin	pallet\ghz.bin
000061DE                            Pal2_GHZ2:	incbin	pallet\ghz2.bin
0000623E                            Pal2_GHZ3:	incbin	pallet\ghz3.bin
0000629E                            Pal2_GHZ4:	incbin	pallet\ghz3.bin
000062FE                            Pal2_GHZExtra:	incbin	pallet\ghzextra.bin
0000635E                            Pal2_LZ:  incbin	pallet\lz.bin
000063BE                            Pal2_LZ2:  incbin	pallet\lz2.bin
0000641E                            Pal2_LZ3:  incbin	pallet\lz3.bin
0000647E                            Pal2_LZ4:  incbin	pallet\lz4.bin
000064DE                            Pal2_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
0000655E                            Pal2_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
000065DE                            Pal2_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
0000665E                            Pal2_MZ:  incbin	pallet\mz.bin
000066BE                            Pal2_MZ2:  incbin	pallet\mz2.bin
0000671E                            Pal2_MZ3:  incbin	pallet\mz3.bin
0000677E                            Pal2_MZ4:	incbin	pallet\mz4.bin
000067DE                            Pal2_SLZ:	incbin	pallet\slz.bin
0000683E                            Pal2_SLZ2:	incbin	pallet\slz2.bin
0000689E                            Pal2_SLZ3:	incbin	pallet\slz3.bin
000068FE                            Pal2_SLZ4:	incbin	pallet\slz4.bin
0000695E                            Pal2_SYZ:	incbin	pallet\syz.bin
000069BE                            Pal2_SYZ2:	incbin	pallet\syz2.bin
00006A1E                            Pal2_SYZ3:	incbin	pallet\syz3.bin
00006A7E                            Pal2_SYZ4:	incbin	pallet\syz4.bin
00006ADE                            Pal2_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
00006B3E                            Pal2_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00006B9E                            Pal2_Special:	incbin	pallet\special.bin; special stage pallets
00006C1E                            Pal2_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00006C7E                            Pal2_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00006CDE                            Pal2_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00006D5E                            Pal2_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00006D7E                            Pal2_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00006D9E                            Pal2_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00006DBE                            Pal2_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00006DDE                            Pal2_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00006E5E                            Pal2_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00006E9E                            Pal2_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00006F1E                            Pal2_ABZ:	incbin	pallet\abz.bin
00006F7E                            Pal2_ABZ2:	incbin	pallet\abz2.bin
00006FDE                            Pal2_ABZ3:	incbin	pallet\abz3.bin
0000703E                            Pal2_ABZ4:	incbin	pallet\abz4.bin
0000709E                            Pal3_GHZ:	incbin	pallet\ghz.bin
000070FE                            Pal3_GHZ2:	incbin	pallet\ghz2.bin
0000715E                            Pal3_GHZ3:	incbin	pallet\ghz3.bin
000071BE                            Pal3_GHZ4:	incbin	pallet\ghz3.bin
0000721E                            Pal3_GHZExtra:	incbin	pallet\ghzextra.bin
0000727E                            Pal3_LZ:  incbin	pallet\lz.bin
000072DE                            Pal3_LZ2:  incbin	pallet\lz2.bin
0000733E                            Pal3_LZ3:  incbin	pallet\lz3.bin
0000739E                            Pal3_LZ4:  incbin	pallet\lz4.bin
000073FE                            Pal3_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
0000747E                            Pal3_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
000074FE                            Pal3_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
0000757E                            Pal3_MZ:  incbin	pallet\mz.bin
000075DE                            Pal3_MZ2:  incbin	pallet\mz2.bin
0000763E                            Pal3_MZ3:  incbin	pallet\mz3.bin
0000769E                            Pal3_MZ4:	incbin	pallet\mz4.bin
000076FE                            Pal3_SLZ:	incbin	pallet\slz.bin
0000775E                            Pal3_SLZ2:	incbin	pallet\slz2.bin
000077BE                            Pal3_SLZ3:	incbin	pallet\slz3.bin
0000781E                            Pal3_SLZ4:	incbin	pallet\slz4.bin
0000787E                            Pal3_SYZ:	incbin	pallet\syz.bin
000078DE                            Pal3_SYZ2:	incbin	pallet\syz2.bin
0000793E                            Pal3_SYZ3:	incbin	pallet\syz3.bin
0000799E                            Pal3_SYZ4:	incbin	pallet\syz4.bin
000079FE                            Pal3_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
00007A5E                            Pal3_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00007ABE                            Pal3_Special:	incbin	pallet\special.bin; special stage pallets
00007B3E                            Pal3_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00007B9E                            Pal3_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00007BFE                            Pal3_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00007C7E                            Pal3_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00007C9E                            Pal3_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00007CBE                            Pal3_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00007CDE                            Pal3_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00007CFE                            Pal3_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00007D7E                            Pal3_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00007DBE                            Pal3_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00007E3E                            Pal3_ABZ:	incbin	pallet\abz.bin
00007E9E                            Pal3_ABZ2:	incbin	pallet\abz2.bin
00007EFE                            Pal3_ABZ3:	incbin	pallet\abz3.bin
00007F5E                            Pal3_ABZ4:	incbin	pallet\abz4.bin
00007FBE                            Pal4_GHZ:	incbin	pallet\ghz.bin
0000801E                            Pal4_GHZ2:	incbin	pallet\ghz2.bin
0000807E                            Pal4_GHZ3:	incbin	pallet\ghz3.bin
000080DE                            Pal4_GHZ4:	incbin	pallet\ghz3.bin
0000813E                            Pal4_GHZExtra:	incbin	pallet\ghzextra.bin
0000819E                            Pal4_LZ:  incbin	pallet\lz.bin
000081FE                            Pal4_LZ2:  incbin	pallet\lz2.bin
0000825E                            Pal4_LZ3:  incbin	pallet\lz3.bin
000082BE                            Pal4_LZ4:  incbin	pallet\lz4.bin
0000831E                            Pal4_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
0000839E                            Pal4_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
0000841E                            Pal4_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
0000849E                            Pal4_MZ:  incbin	pallet\mz.bin
000084FE                            Pal4_MZ2:  incbin	pallet\mz2.bin
0000855E                            Pal4_MZ3:  incbin	pallet\mz3.bin
000085BE                            Pal4_MZ4:	incbin	pallet\mz4.bin
0000861E                            Pal4_SLZ:	incbin	pallet\slz.bin
0000867E                            Pal4_SLZ2:	incbin	pallet\slz2.bin
000086DE                            Pal4_SLZ3:	incbin	pallet\slz3.bin
0000873E                            Pal4_SLZ4:	incbin	pallet\slz4.bin
0000879E                            Pal4_SYZ:	incbin	pallet\syz.bin
000087FE                            Pal4_SYZ2:	incbin	pallet\syz2.bin
0000885E                            Pal4_SYZ3:	incbin	pallet\syz3.bin
000088BE                            Pal4_SYZ4:	incbin	pallet\syz4.bin
0000891E                            Pal4_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
0000897E                            Pal4_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
000089DE                            Pal4_Special:	incbin	pallet\special.bin; special stage pallets
00008A5E                            Pal4_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00008ABE                            Pal4_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00008B1E                            Pal4_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00008B9E                            Pal4_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00008BBE                            Pal4_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00008BDE                            Pal4_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00008BFE                            Pal4_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00008C1E                            Pal4_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00008C9E                            Pal4_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00008CDE                            Pal4_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00008D5E                            Pal4_ABZ:	incbin	pallet\abz.bin
00008DBE                            Pal4_ABZ2:	incbin	pallet\abz2.bin
00008E1E                            Pal4_ABZ3:	incbin	pallet\abz3.bin
00008E7E                            Pal4_ABZ4:	incbin	pallet\abz4.bin
00008EDE                            Pal_SSRGBG:		incbin	pallet\ssrgbg.bin
00008EFE                            
00008EFE                            ; ---------------------------------------------------------------------------
00008EFE                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00008EFE                            ; ---------------------------------------------------------------------------
00008EFE                            
00008EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EFE                            
00008EFE                            
00008EFE                            DelayProgram:				; XREF: PauseGame
00008EFE 46FC 2300                  		enable_ints
00008F02                            
00008F02                            loc_29AC:
00008F02 4A38 F62A                  		tst.b	($FFFFF62A).w
00008F06 66FA                       		bne.s	loc_29AC
00008F08 4E75                       		rts	
00008F0A                            ; End of function DelayProgram
00008F0A                            
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            ; Called at the end of each frame to perform vertical synchronization
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            
00008F0A                            ; =============== S U B R O U T I N E =======================================
00008F0A                            
00008F0A =00008EFE                  Wait_VSync	= DelayProgram
00008F0A                            
00008F0A                            ; End of function Wait_VSync
00008F0A                            
00008F0A                            
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            ; Subroutine to	generate a pseudo-random number	in d0
00008F0A                            ; ---------------------------------------------------------------------------
00008F0A                            
00008F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F0A                            
00008F0A                            
00008F0A                            RandomNumber:
00008F0A 2238 F636                  		move.l	($FFFFF636).w,d1
00008F0E                            ;		tst.w	d1
00008F0E 6600                       		bne.s	loc_29C0
00008F10 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00008F16                            
00008F16                            loc_29C0:
00008F16 2001                       		move.l	d1,d0
00008F18 E581                       		asl.l	#2,d1
00008F1A D280                       		add.l	d0,d1
00008F1C E781                       		asl.l	#3,d1
00008F1E D280                       		add.l	d0,d1
00008F20 3001                       		move.w	d1,d0
00008F22 4841                       		swap	d1
00008F24 D041                       		add.w	d1,d0
00008F26 3200                       		move.w	d0,d1
00008F28 4841                       		swap	d1
00008F2A 21C1 F636                  		move.l	d1,($FFFFF636).w
00008F2E 4E75                       		rts	
00008F30                            ; End of function RandomNumber
00008F30                            
00008F30                            CalcSine:				; XREF: SS_BGAnimate; et al
00008F30 0240 00FF                  		andi.w	#$FF,d0
00008F34 D040                       		add.w	d0,d0
00008F36 0640 0080                  		addi.w	#$80,d0
00008F3A 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00008F3E 0440 0080                  		subi.w	#$80,d0
00008F42 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00008F46 4E75                       		rts	
00008F48                            ; End of function CalcSine
00008F48                            
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
000091C8                            
000091C8                            ; ===========================================================================
000091C8 48E7 6000                  		movem.l	d1-d2,-(sp)
000091CC 3200                       		move.w	d0,d1
000091CE 4841                       		swap	d1
000091D0 7000                       		moveq	#0,d0
000091D2 3200                       		move.w	d0,d1
000091D4 7407                       		moveq	#7,d2
000091D6                            
000091D6                            loc_2C80:
000091D6 E599                       		rol.l	#2,d1
000091D8 D040                       		add.w	d0,d0
000091DA 5240                       		addq.w	#1,d0
000091DC 9240                       		sub.w	d0,d1
000091DE 6400                       		bcc.s	loc_2C9A
000091E0 D240                       		add.w	d0,d1
000091E2 5340                       		subq.w	#1,d0
000091E4 51CA FFF0                  		dbf	d2,loc_2C80
000091E8 E248                       		lsr.w	#1,d0
000091EA 4CDF 0006                  		movem.l	(sp)+,d1-d2
000091EE 4E75                       		rts	
000091F0                            ; ===========================================================================
000091F0                            
000091F0                            loc_2C9A:
000091F0 5240                       		addq.w	#1,d0
000091F2 51CA FFE2                  		dbf	d2,loc_2C80
000091F6 E248                       		lsr.w	#1,d0
000091F8 4CDF 0006                  		movem.l	(sp)+,d1-d2
000091FC 4E75                       		rts	
000091FE                            
000091FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091FE                            
000091FE                            
000091FE                            CalcAngle:
000091FE 48E7 1800                  		movem.l	d3-d4,-(sp)
00009202 7600                       		moveq	#0,d3
00009204 7800                       		moveq	#0,d4
00009206 3601                       		move.w	d1,d3
00009208 3802                       		move.w	d2,d4
0000920A 8843                       		or.w	d3,d4
0000920C 6700                       		beq.s	loc_2D04
0000920E 3802                       		move.w	d2,d4
00009210 4A43                       		tst.w	d3
00009212 6A00 0000                  		bpl.w	loc_2CC2
00009216 4443                       		neg.w	d3
00009218                            
00009218                            loc_2CC2:
00009218 4A44                       		tst.w	d4
0000921A 6A00 0000                  		bpl.w	loc_2CCA
0000921E 4444                       		neg.w	d4
00009220                            
00009220                            loc_2CCA:
00009220 B843                       		cmp.w	d3,d4
00009222 6400 0000                  		bcc.w	loc_2CDC
00009226 E18C                       		lsl.l	#8,d4
00009228 88C3                       		divu.w	d3,d4
0000922A 7000                       		moveq	#0,d0
0000922C 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00009230 6000                       		bra.s	loc_2CE6
00009232                            ; ===========================================================================
00009232                            
00009232                            loc_2CDC:				; XREF: CalcAngle
00009232 E18B                       		lsl.l	#8,d3
00009234 86C4                       		divu.w	d4,d3
00009236 7040                       		moveq	#$40,d0
00009238 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
0000923C                            
0000923C                            loc_2CE6:
0000923C 4A41                       		tst.w	d1
0000923E 6A00 0000                  		bpl.w	loc_2CF2
00009242 4440                       		neg.w	d0
00009244 0640 0080                  		addi.w	#$80,d0
00009248                            
00009248                            loc_2CF2:
00009248 4A42                       		tst.w	d2
0000924A 6A00 0000                  		bpl.w	loc_2CFE
0000924E 4440                       		neg.w	d0
00009250 0640 0100                  		addi.w	#$100,d0
00009254                            
00009254                            loc_2CFE:
00009254 4CDF 0018                  		movem.l	(sp)+,d3-d4
00009258 4E75                       		rts	
0000925A                            ; ===========================================================================
0000925A                            
0000925A                            loc_2D04:				; XREF: CalcAngle
0000925A 303C 0040                  		move.w	#$40,d0
0000925E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00009262 4E75                       		rts	
00009264                            ; End of function CalcAngle
00009264                            
00009264                            ; ===========================================================================
00009264                            
00009264                            Angle_Data:	incbin	misc\angles.bin
00009366                            
00009366                            ; ===========================================================================
00009366                            
00009366                            ; ---------------------------------------------------------------------------
00009366                            ; Sega screen
00009366                            ; ---------------------------------------------------------------------------
00009366                            
00009366                            SegaScreen:				; XREF: GameModeArray
00009366 103C 00E0                  		move.b	#$E0,d0
0000936A 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; stop music
0000936E 4EB8 3770                  		jsr	clearplc
00009372 4EB8 46B4                  		jsr	pal_fadefrom
00009376 43F8 F700                  		lea	($FFFFF700).w,a1
0000937A 7000                       		moveq	#0,d0
0000937C 323C 003F                  		move.w	#$3F,d1
00009380                            
00009380                            loc_30332A:					  ; ...
00009380 22C0                       		move.l	d0,(a1)+
00009382 51C9 FFFC                  		dbf	d1,loc_30332A
00009386 43F8 D000                  		lea	($FFFFD000).w,a1
0000938A 7000                       		moveq	#0,d0
0000938C 323C 07FF                  		move.w	#$7FF,d1
00009390                            
00009390                            loc_30333A:					  ; ...
00009390 22C0                       		move.l	d0,(a1)+
00009392 51C9 FFFC                  		dbf	d1,loc_30333A
00009396 4DF9 00C0 0004             		lea	($C00004).l,a6
0000939C 3CBC 8004                  		move.w	#$8004,(a6)
000093A0 3CBC 8230                  		move.w	#$8230,(a6)
000093A4 3CBC 8407                  		move.w	#$8407,(a6)
000093A8 3CBC 8700                  		move.w	#$8700,(a6)
000093AC 3CBC 8B00                  		move.w	#$8B00,(a6)
000093B0 4238 F64E                  		clr.b	($FFFFF64E).w
000093B4 46FC 2700                  		disable_ints
000093B8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000093BC 0200 00BF                  		andi.b	#$BF,d0
000093C0 33C0 00C0 0004             		move.w	d0,($C00004).l
000093C6 4EB8 3084                  		jsr	ClearScreen
000093CA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000093D4 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000093DA 4EB8 35B2                  		jsr	NemDec
000093DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000093E4 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000093EA 303C 0000                  		move.w	#0,d0
000093EE 4EB8 38BA                  		jsr	EniDec
000093F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000093F8 203C 6510 0003             		move.l	#$65100003,d0
000093FE 7217                       		moveq	#$17,d1
00009400 7407                       		moveq	#7,d2
00009402 4EB8 34BC                  		jsr	ShowVDPGraphics
00009406 43F9 00FF 0180             		lea	($FF0180).l,a1
0000940C 203C 4000 0003             		move.l	#$40000003,d0
00009412 7227                       		moveq	#$27,d1
00009414 741B                       		moveq	#$1B,d2
00009416 4EB8 34BC                  		jsr	ShowVDPGraphics
0000941A                            ;		lea	($FFFFD080).w,a1
0000941A                            ;		move.b	#6,(a1)
0000941A                            ;		move.b	#$4E,$28(a1)
0000941A                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000941A                            ;		bpl.s	GameInitCont	; if Japanese, branch
0000941A                            ;		jmp		GameInitCont2
0000941A                            ;GameInitCont:
0000941A                            ;		jmp     SegaLogo
0000941A                            ;GameInitCont2:
0000941A 7000                       		moveq	#0,d0
0000941C 4EB8 499E                  		jsr	PalLoad2	; load Sega logo pallet
00009420 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00009426 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000942C 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00009432 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00009438 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000943C 0000 0040                  		ori.b	#$40,d0
00009440 33C0 00C0 0004             		move.w	d0,($C00004).l
00009446                            
00009446                            Sega_WaitPallet:
00009446 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000944C 6100 FAB0                  		bsr.w	Wait_VSync
00009450 4EB8 4894                  		jsr	PalCycle_Sega
00009454 66F0                       		bne.s	Sega_WaitPallet
00009456                            
00009456 103C 00FF                  		move.b	#$FF,d0
0000945A 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; play "SEGA"	sound
0000945E 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00009464 6100 FA98                  		bsr.w	Wait_VSync
00009468 31FC 00B4 FC20             		move.w	#$B4,($FFFFFC20).w
0000946E                            			; If start was pressed, skip ahead
0000946E                            
0000946E                            Sega_WaitEnd:
0000946E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00009474 6100 FA88                  		bsr.w	Wait_VSync
00009478 4A78 FC20                  		tst.w	($FFFFFC20).w
0000947C 6700                       		beq.s	Sega_GotoTitle
0000947E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00009484 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00009486                            
00009486                            Sega_GotoTitle:
00009486 4EF9 0000 0000             		jmp		SSRGSCreen
0000948C 4E75                       		rts
0000948E                            
0000948E                            ; ===========================================================================
0000948E                            
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            ; Subroutine that does the exact same thing as ShowVDPGraphics2
0000948E                            ; (this one is used at the Sega screen)
0000948E                            ; ---------------------------------------------------------------------------
0000948E                            
0000948E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000948E                            
0000948E                            ; sub_396E:
0000948E                            ShowVDPGraphics3:
0000948E 4DF9 00C0 0000             		lea	($C00000).l,a6
00009494 283C 0100 0000             		move.l	#$1000000,d4
0000949A                            
0000949A                            loc_3034D4:					  ; ...
0000949A 2D40 0004                  		move.l	d0,4(a6)
0000949E 3601                       		move.w	d1,d3
000094A0                            
000094A0                            loc_3034DA:					  ; ...
000094A0 3C99                       		move.w	(a1)+,(a6)
000094A2 51CB FFFC                  		dbf	d3,loc_3034DA
000094A6 D084                       		add.l	d4,d0
000094A8 51CA FFF0                  		dbf	d2,loc_3034D4
000094AC 4E75                       		rts
000094AE                            ; End of function ShowVDPGraphics3
000094AE                            
000094AE                            ; ===========================================================================
000094AE 4E71                       	nop
000094B0                            
000094B0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000094B0                            
000094B0                            ; sub_3990:
000094B0                            JmpTo_RunObjects 
000094B0 4EF9 0000 0000             	jmp	ObjectsLoad.l
000094B6                            ; End of function JmpTo_RunObjects
000094B6                            
000094B6                            ; ===========================================================================
000094B6 0000                       	align 4
000094B8                            	
000094B8                            JmpTo_SoundDriverLoad2:
000094B8 4EF8 3112                  	jmp	JmpTo_SoundDriverLoad
000094BC 4E75                       	rts
000094BE                            
000094BE                            Jmpto_PlaySound_Special:
000094BE 4EF8 325C                  	jmp	PlaySound_Special
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            ; Title	screen
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            
000094C2                            TitleScreen:				; XREF: GameModeArray
000094C2 103C 00E4                  		move.b	#$E4,d0
000094C6 6100 FFF6                  		bsr.w	Jmpto_PlaySound_Special ; stop music
000094CA 4EB8 3770                  		jsr	clearplc
000094CE                            ;		move.b	#0,($FFFFFFCC).w
000094CE 4EB8 46B4                  		jsr	pal_fadefrom
000094D2 46FC 2700                  		disable_ints
000094D6 6100 FFE0                  		bsr.w	JmpTo_SoundDriverLoad2
000094DA 4DF9 00C0 0004             		lea	($C00004).l,a6
000094E0 3CBC 8004                  		move.w	#$8004,(a6)
000094E4 3CBC 8230                  		move.w	#$8230,(a6)
000094E8 3CBC 8407                  		move.w	#$8407,(a6)
000094EC 3CBC 9001                  		move.w	#$9001,(a6)
000094F0 3CBC 9200                  		move.w	#$9200,(a6)
000094F4 3CBC 8B03                  		move.w	#$8B03,(a6)
000094F8 3CBC 8720                  		move.w	#$8720,(a6)
000094FC 4238 F64E                  		clr.b	($FFFFF64E).w
00009500                            ;		clr.b	($FFFFFF0A).w
00009500 3CBC 8C81                  		move.w	#$8C81,(a6)
00009504 4EB8 3084                  		jsr	ClearScreen
00009508 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
0000950C 7000                       		moveq	#0,d0
0000950E 323C 00FF                  		move.w	#$FF,d1
00009512                            
00009512                            loc_303534:					  ; ...
00009512 22C0                       		move.l	d0,(a1)+
00009514 51C9 FFFC                  		dbf	d1,loc_303534
00009518 43F8 D000                  		lea	($FFFFD000).w,a1
0000951C 7000                       		moveq	#0,d0
0000951E 323C 07FF                  		move.w	#$7FF,d1
00009522                            
00009522                            loc_303544:					  ; ...
00009522 22C0                       		move.l	d0,(a1)+
00009524 51C9 FFFC                  		dbf	d1,loc_303544
00009528 43F8 F700                  		lea	($FFFFF700).w,a1
0000952C 7000                       		moveq	#0,d0
0000952E 323C 003F                  		move.w	#$3F,d1
00009532                            
00009532                            loc_303554:					  ; ...
00009532 22C0                       		move.l	d0,(a1)+
00009534 51C9 FFFC                  		dbf	d1,loc_303554
00009538 43F8 EE00                  		lea	($FFFFEE00).w,a1
0000953C 7000                       		moveq	#0,d0
0000953E 323C 003F                  		move.w	#$3F,d1
00009542                            		
00009542                            loc_303564:					  ; ...
00009542 22C0                       		move.l	d0,(a1)+
00009544 51C9 FFFC                  		dbf	d1,loc_303564
00009548 46FC 2700                  		disable_ints
0000954C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00009556 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000955C 4EB8 35B2                  		jsr	NemDec
00009560 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000956A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00009570 4EB8 35B2                  		jsr	NemDec
00009574 43F9 00FF 0000             		lea	($FF0000).l,a1
0000957A 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00009580 303C 0000                  		move.w	#0,d0
00009584 4EB8 38BA                  		jsr	EniDec
00009588 43F9 00FF 0000             		lea	($FF0000).l,a1
0000958E 203C 4000 0003             		move.l	#$40000003,d0
00009594 7227                       		moveq	#$27,d1
00009596 741B                       		moveq	#$1B,d2
00009598 4EB8 34BC                  		jsr	ShowVDPGraphics
0000959C 43F8 FB80                  		lea	($FFFFFB80).w,a1
000095A0 7000                       		moveq	#0,d0
000095A2 323C 001F                  		move.w	#$1F,d1
000095A6                            
000095A6                            Title_ClrPallet:
000095A6 22C0                       		move.l	d0,(a1)+
000095A8 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000095AC                            
000095AC 7003                       		moveq	#3,d0		; load Sonic's pallet
000095AE 4EB8 4986                  		jsr	PalLoad1
000095B2                            ;		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000095B2 4278 FFF4                  		clr.w	($FFFFFFF4).w
000095B6 4EB9 0000 0000             		jsr	Credits_MapLoad
000095BC 4EB9 0000 0000             		jsr	ObjectsLoad
000095C2 4EB9 0000 0000             		jsr	BuildSprites
000095C8 4EB8 45FA                  		jsr	Pal_FadeTo
000095CC 46FC 2700                  		disable_ints
000095D0 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000095DA 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000095E0 4EB8 35B2                  		jsr	NemDec
000095E4 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000095EE 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000095F4 4EB8 35B2                  		jsr	NemDec
000095F8 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00009602 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00009608 4EB8 35B2                  		jsr	NemDec
0000960C 23FC 6240 0002 00C0 0004   		move.l	#$62400002,($C00004).l
00009616 41F9 0000 0000             		lea	(Nem_TitleMenu).l,a0 ; load "Title Menu text" patterns
0000961C 4EB8 35B2                  		jsr	NemDec
00009620 4DF9 00C0 0000             		lea	($C00000).l,a6
00009626 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000962E 4BF9 0000 0000             		lea	(Art_Text).l,a5
00009634 323C 028F                  		move.w	#$28F,d1
00009638                            
00009638                            Title_LoadText:
00009638 3C9D                       		move.w	(a5)+,(a6)
0000963A 51C9 FFFC                  		dbf	d1,Title_LoadText; load uncompressed text patterns
0000963E                            	;Mercury Game Over When Drowning Fix
0000963E 11FC 0000 F744             		move.b	#0,(f_nobgscroll).w
00009644                            	;end Game Over When Drowning Fix
00009644 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w; clear lamppost counter
0000964A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w; disable debug item placement	mode
00009650 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w; disable debug mode
00009656 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000965C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w; set level to	GHZ (00)
00009662 31FC 0000 F634             		move.w	#0,($FFFFF634).w; disable palette cycling
00009668 4EB9 0000 0000             		jsr	LevelSizeLoad
0000966E 4EB9 0000 0000             		jsr	DeformBgLayer
00009674 43F8 B000                  		lea	($FFFFB000).w,a1
00009678                            
00009678 41F9 0000 0000             		lea	(Blk16_Title).l,a0  ; load GHZ 16x16 mappings
0000967E 6100 A3C2                  		bsr.w	KosDec            ; use Kosinski decompressor instead of Enigma decompresor
00009682 41F9 0000 0000             		lea	(Blk256_Title).l,a0 ; load GHZ 256x256 mappings
00009688 43F9 00FF 0000             		lea	($FF0000).l,a1
0000968E 4EB8 3A42                  		jsr	KosDec
00009692                            
00009692 4EB9 0000 0000             		jsr	LevelLayoutLoad
00009698 4EB8 46B4                  		jsr	pal_fadefrom
0000969C 46FC 2700                  		disable_ints
000096A0 4EB8 3084                  		jsr	ClearScreen
000096A4 4BF9 00C0 0004             		lea	($C00004).l,a5
000096AA 4DF9 00C0 0000             		lea	($C00000).l,a6
000096B0 47F8 F708                  		lea	($FFFFF708).w,a3
000096B4 2878 A404                  		movea.l	($FFFFA404).w,a4
000096B8 343C 6000                  		move.w	#$6000,d2
000096BC 4EB9 0000 0000             		jsr	LoadTilesFromStart2
000096C2                            ;		lea     ($FFFF0858), A1    
000096C2                             ;       lea     (CopyrightText), A2                   ; Offset_0x003E3A
000096C2                             ;       moveq   #$0A, D6
000096C2                            Offset_0x003B1A:
000096C2                            	;	move.w  (A2)+, (A1)+
000096C2                            	;	dbra    D6, Offset_0x003B1A
000096C2                            	;	lea     ($FFFF0000), A1
000096C2                            	;	move.l  #$40000003, D0
000096C2                            	;	moveq   #$27, D1
000096C2                            	;	moveq   #$1B, D2
000096C2                            	;	jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000096C2                            	;	lea     ($FFFFFB00).w, A1
000096C2                            	;	moveq   #$00, D0
000096C2                            ;		move.w  #$003F, D1
000096C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000096C8 41F9 0000 0000             		lea	(Eni_Title).l,a0; load	title screen mappings
000096CE 303C 0000                  		move.w	#0,d0
000096D2 4EB8 38BA                  		jsr	EniDec
000096D6 43F9 00FF 0000             		lea	($FF0000).l,a1
000096DC 203C 4206 0003             		move.l	#$42060003,d0
000096E2 7221                       		moveq	#$21,d1
000096E4 7415                       		moveq	#$15,d2
000096E6 4EB8 34BC                  		jsr	ShowVDPGraphics
000096EA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000096F4 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0; load GHZ patterns
000096FA 4EB8 35B2                  		jsr	NemDec
000096FE                            
000096FE 7004                       		moveq	#palid_GHZ,d0	; load GHZ palette
00009700 4EB8 4986                  		jsr	PalLoad1
00009704                            		
00009704 7001                       		moveq	#palid_Title,d0	; load title screen palette
00009706 4EB8 4986                  		jsr	PalLoad1
0000970A 103C 0011                  		move.b	#$11,d0; play title screen music
0000970E 6100 FDAE                  		bsr.w	Jmpto_PlaySound_Special
00009712 11F9 0020 002D FF8C        		move.b	($20002D).l,($FFFFFF8C).w ; load unlocked level select if game is beaten
0000971A 31FC 0000 D00C             		move.w	#$0,($FFFFD00C).w
00009720 31FC 0000 F704             		move.w	#$0,($FFFFF704).w
00009726 11FC 0000 FFDA             		move.b	#0,($FFFFFFDA).w; disable debug mode
0000972C 31FC 0178 FC20             		move.w	#$178,($FFFFFC20).w; run title	screen for $178	frames
00009732 43F8 D080                  		lea	($FFFFD080).w,a1
00009736 7000                       		moveq	#0,d0
00009738 323C 0007                  		move.w	#7,d1
0000973C                            
0000973C                            ;Title_ClrObjRam2:
0000973C                            	;	move.l	d0,(a1)+
0000973C                            	;	dbf	d1,Title_ClrObjRam2
0000973C 43F8 D080                  		lea ($FFFFD080).w,a1
00009740                            
00009740 4EB9 0000 0000             		jsr DeleteObject2 ;clear object RAM more thoroughly
00009746 11FC 000E D040             		move.b #$E,($FFFFD040).w ; load big Sonic object
0000974C 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00009752 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00009758 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000975E 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00009764 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
0000976A 4EB9 0000 0000             		jsr	ObjectsLoad
00009770 4EB9 0000 0000             		jsr	DeformBgLayer
00009776 4EB9 0000 0000             		jsr	BuildSprites
0000977C 7000                       		moveq	#0,d0
0000977E 4EB8 3744                  		jsr	LoadPLC2
00009782                            ;		jsr	LoadLivesCounterArt
00009782 31FC 0000 FFD4             		move.w	#0,(Correct_cheat_entries).w
00009788 31FC 0000 FFD6             		move.w	#0,(Correct_cheat_entries_2).w
0000978E 4E71                       		nop
00009790 4E71                       		nop
00009792 4E71                       		nop
00009794 4E71                       		nop
00009796 4E71                       		nop
00009798 4E71                       		nop
0000979A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000979E 0000 0040                  		ori.b	#$40,d0
000097A2 33C0 00C0 0004             		move.w	d0,($C00004).l
000097A8 4EB8 45FA                  		jsr	Pal_FadeTo
000097AC                            
000097AC                            loc_317C:
000097AC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000097B2 6100 F74A                  		bsr.w	Wait_VSync
000097B6 4EB9 0000 0000             		jsr	ObjectsLoad
000097BC 4EB9 0000 0000             		jsr	DeformBgLayer
000097C2 4EB9 0000 0000             		jsr	BuildSprites
000097C8 4EB8 3C92                  		jsr	PalCycle_GHZ
000097CC 4EB8 377E                  		jsr	RunPLC_RAM
000097D0 3038 D008                  		move.w	($FFFFD008).w,d0
000097D4 5440                       		addq.w	#2,d0
000097D6 0C40 FF00                  		cmpi.w	#$FF00,d0	; has Sonic object passed x-position $FF00?
000097DA 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000097DC                            ;		move.b	#0,($FFFFF600).w ; go to Sega screen
000097DC 4E75                       		rts	
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            Title_ChkRegion:
000097DE                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000097DE                            ;		bpl.s	Title_RegionJ	; if Japanese, branch
000097DE                            ;		lea	(LevelSelectCode_US).l,a0 ; load US code
000097DE                            ;		bra.s	Title_EnterCheat
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            Title_RegionJ:				; XREF: Title_ChkRegion
000097DE                            ;		lea	(LevelSelectCode_J).l,a0 ; load	J code
000097DE                            
000097DE                            Title_EnterCheat:			; XREF: Title_ChkRegion
000097DE                            ;		move.w	($FFFFFFE4).w,d0
000097DE                            ;		adda.w	d0,a0
000097DE                            ;		move.b	($FFFFF605).w,d0 ; get button press
000097DE                            ;		andi.b	#$F,d0		; read only up/down/left/right buttons
000097DE                            ;		cmp.b	(a0),d0		; does button press match the cheat code?
000097DE                            ;		bne.s	loc_3210	; if not, branch
000097DE                            ;		addq.w	#1,($FFFFFFE4).w ; next	button press
000097DE                            ;		tst.b	d0
000097DE                            ;		bne.s	Title_CountC
000097DE                            ;		lea	($FFFFFFE0).w,a0
000097DE                            ;		move.w	($FFFFFFE6).w,d1
000097DE                            ;		lsr.w	#1,d1
000097DE                            ;		andi.w	#3,d1
000097DE                            ;		beq.s	Title_PlayRing
000097DE                            ;		tst.b	($FFFFFFF8).w
000097DE                            ;		bpl.s	Title_PlayRing
000097DE                            ;		moveq	#1,d1
000097DE                            ;		move.b	d1,1(a0,d1.w)
000097DE                            
000097DE                            Title_PlayRing:
000097DE                            ;		move.b	#1,(a0,d1.w)	; activate cheat
000097DE                            ;		move.b	#$B5,d0		; play ring sound when code is entered
000097DE                            ;		jsr	PlaySound_Special
000097DE                            ;		bra.s	Title_CountC
000097DE                            ; ===========================================================================
000097DE                            loc_3210:				; XREF: Title_EnterCheat
000097DE                            ;		tst.b	d0
000097DE                            ;		beq.s	Title_CountC
000097DE                            ;		cmpi.w	#9,($FFFFFFE4).w
000097DE                            ;		beq.s	Title_CountC
000097DE                            ;		move.w	#0,($FFFFFFE4).w
000097DE                            
000097DE                            Title_CountC:
000097DE                            ;		move.b	($FFFFF605).w,d0
000097DE                            ;		andi.b	#$20,d0		; is C button pressed?
000097DE                            ;		beq.s	loc_3230	; if not, branch
000097DE                            ;		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000097DE                            
000097DE                            loc_3230:
000097DE                            ;		tst.w	($FFFFF614).w
000097DE                            ;		beq.w	Demo
000097DE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000097E4 6700 FFC6                  		beq.w	loc_317C	; if not, branch
000097E8                            
000097E8                            Title_ChkLevSel:
000097E8                            ;		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000097E8                            ;		beq.w	PlayLevel	; if not, play level
000097E8                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
000097E8                            ;		beq.w	PlayLevel	; if not, play level
000097E8                            ;		tst.b	($FFFFFFD0).w	; check	if level select	code is	on
000097E8                            ;		beq.w	PlayLevel	; if not, play level
000097E8                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
000097E8                            ;		beq.w	PlayLevel	; if not, play level
000097E8                            
000097E8 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w	; is Title Menu on?
000097EE 6700 FFBC                  		beq.w	loc_317C			; if it not was deleted, branch	
000097F2 7400                       		moveq	#0,d2
000097F4 1438 FF86                  		move.b	(Title_screen_option).w,d2	; load the choice
000097F8 D442                       		add.w	d2,d2				; multiply by 2
000097FA 343B 2000                  		move.w	Obj0F_Menu_Choice(pc,d2.w),d2
000097FE 4EFB 2000                  		jmp	Obj0F_Menu_Choice(pc,d2.w)	; jump to the choice code
00009802                            		
00009802                            ; ===========================================================================
00009802                            Obj0F_Menu_Choice:
00009802 0000                       		dc.w PlayLevel-Obj0F_Menu_Choice	; 0
00009804 0000                       		dc.w Menu_LevelSelect-Obj0F_Menu_Choice	; 2
00009806 0000                       		dc.w Menu_Options-Obj0F_Menu_Choice	; 4
00009808 0000                       		dc.w PlaySpecialStage-Obj0F_Menu_Choice	; 6
0000980A 0000                       		dc.w Menu_OldLevelSelect-Obj0F_Menu_Choice	; 8
0000980C                            ; ===========================================================================
0000980C                            
0000980C                            Menu_Options:
0000980C 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009814 11FC 002C F600             		move.b	#$2C,(Game_Mode).w	; Go to Sonic 2 Options Menu
0000981A 4E75                       		rts
0000981C                            Menu_LevelSelect:
0000981C 11FC 0038 F600             		move.b	#$38,(Game_Mode).w	; Go to Old Sonic 2 Level Select
00009822 4E75                       		rts
00009824                            Menu_OldLevelSelect:
00009824 7002                       		moveq	#2,d0
00009826 4EB8 499E                  		jsr	PalLoad2; load level select pallet
0000982A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000982E 7000                       		moveq	#0,d0
00009830 323C 00DF                  		move.w	#$DF,d1
00009834                            ;		jsr	Pal_FadeTo
00009834                            Title_ClrScroll:
00009834 22C0                       		move.l	d0,(a1)+
00009836 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000983A                            
0000983A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000983E 46FC 2700                  		disable_ints
00009842 4DF9 00C0 0000             		lea	($C00000).l,a6
00009848 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00009852 323C 03FF                  		move.w	#$3FF,d1
00009856                            
00009856                            Title_ClrVram:
00009856 2C80                       		move.l	d0,(a6)
00009858 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000985C 103C 000F                  		move.b  #$0F,d0
00009860 4EB8 3212                  		jsr PlaySound
00009864 4EB9 0000 0000             		jsr	LevSelTextLoad
0000986A                            ;		move.w	#$19,d0
0000986A                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
0000986A                            ;		move.w	#$1A,d0
0000986A                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
0000986A                                            ;jsr     DeformBGLayer
0000986A                            ;		jsr	Pal_FadeFrom
0000986A                            ; ---------------------------------------------------------------------------
0000986A                            ; Level	Select
0000986A                            ; ---------------------------------------------------------------------------
0000986A                            
0000986A                            LevelSelect:
0000986A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009870 6100 F68C                  		bsr.w	DelayProgram
00009874 6100 0000                  		bsr.w	LevSelControls
00009878 4EB8 377E                  		jsr	RunPLC_RAM
0000987C 4AB8 F680                  		tst.l	($FFFFF680).w
00009880 66E8                       		bne.s	LevelSelect
00009882 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009886 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000988A 6600                       		bne.s	LevSelLevCheckStart; if not, go to	Level/SS subroutine
0000988C 0C38 0080 F605             		cmpi.b	#$80,($FFFFF605).w ; is	Start pressed?
00009892 6700                       		beq.s	LevSelStartPress	; if true, branch
00009894                            ;		cmpi.b	#button_B_mask,($FFFFF605).w ; is	B pressed?
00009894                            ;		beq.s	LevSelBCPress	; if not, branch
00009894 0C38 0020 F605             		cmpi.b	#button_C_mask,($FFFFF605).w ; is	C pressed?
0000989A 6700                       		beq.s	LevSelBCPress	; if not, branch
0000989C 60CC                       		bra.s	LevelSelect
0000989E                            ; ===========================================================================
0000989E                            LevSelLevCheckStart:				; XREF: LevelSelect
0000989E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start pressed?
000098A4 67C4                       		beq.s	LevelSelect	; if not, branch
000098A6 6000                       		bra.s	LevSel_Level_SS
000098A8                             
000098A8                            LevSelBCPress:				; XREF: LevelSelect
000098A8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000098AC                            ;		addi.w	#$80,d0
000098AC 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
000098B0 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000098B2 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000098B6 65B2                       		bcs.s	LevelSelect	; if yes, branch
000098B8                             
000098B8                            LevSel_PlaySnd:
000098B8 4EB8 325C                  		jsr	PlaySound_Special
000098BC 60AC                       		bra.s	LevelSelect
000098BE                             
000098BE                            LevSelStartPress:				; XREF: LevelSelect
000098BE 11FC 0000 F600             		move.b	#$00,$FFFFF600
000098C4 4EF8 038C                  		jmp MainGameLoop ;go to sega screen
000098C8                            ; ===========================================================================
000098C8                            
000098C8                            LevSel_Ending:				; XREF: LevelSelect
000098C8 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000098CE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000098D4 4E75                       		rts	
000098D6                            ; ===========================================================================
000098D6                            
000098D6                            LevSel_Credits:				; XREF: LevelSelect
000098D6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000098DC 103C 0091                  		move.b	#$91,d0
000098E0 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
000098E4 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000098EA 4E75                       		rts	
000098EC                            ; ===========================================================================
000098EC                            
000098EC                            LevSel_Level_SS:			; XREF: LevelSelect
000098EC D040                       		add.w	d0,d0
000098EE 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000098F2 6B00 FF76                  		bmi.w	LevelSelect
000098F6 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000098FA 6600 0000                  		bne.w	LevSel_Level	; if not, branch
000098FE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009904 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00009908 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000990E 7000                       		moveq	#0,d0
00009910 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009914 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00009918 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000991C 4E75                       		rts	
0000991E                            ; ---------------------------------------------------------------------------
0000991E                            ; Level	select - level pointers
0000991E                            ; ---------------------------------------------------------------------------
0000991E                            LSelectPointers:
0000991E                            		incbin	misc\ls_point.bin
00009948                            		even
00009948                            
00009948                            ; ===========================================================================
00009948                            
00009948                            LevSel_Level:				; XREF: LevSel_Level_SS
00009948 0240 3FFF                  		andi.w	#$3FFF,d0
0000994C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00009950                            
00009950                            PlayLevel:				; XREF: ROM:00003246j ...
00009950 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00009956                            ;		clr.b	($FFFFFF0A).w
00009956 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000995E 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
00009964 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
00009968 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
00009970 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009978 7000                       		moveq	#0,d0
0000997A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000997E 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
00009982 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009986 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000998A 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009992 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
0000999A 6D00 0000                  		blt.w	PlayLevel_2
0000999E 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
000099A6                            PlayLevel_2:
000099A6 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
000099AE 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
000099B6 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
000099BE 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
000099C6 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
000099CE 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000099D6 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000099DA 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
000099E2 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000099E8 103C 00E1                  		move.b	#$E1,d0
000099EC 6100 FAD0                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
000099F0 4E75                       		rts	
000099F2                            
000099F2                            ; ---------------------------------------------------------------------------
000099F2                            ; Level	select codes
000099F2                            ; ---------------------------------------------------------------------------
000099F2                            LevelSelectCode_J:
000099F2                            		incbin	misc\ls_jcode.bin
000099F8                            		even
000099F8                            
000099F8                            LevelSelectCode_US:
000099F8                            		incbin	misc\ls_ucode.bin
000099FE                            		even
000099FE                            		
000099FE                            ;TitleScreen_ASCII:
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b "      - - - SONIC THE HEDGEHOG 4 - - -",$FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b "                  ",$FF
000099FE                            ;		dc.b "                 ",$FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b $FF
000099FE                            ;		dc.b "                                       ",$FF
000099FE                            ;		dc.b "                                       ",$FF
000099FE                            
000099FE                            ;		dc.b 0
000099FE                            ;		even
000099FE                            		
000099FE                            ; ===========================================================================
000099FE                            
000099FE 11FC 001C F600             PlaySpecialStage1: move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00009A04 103C 009D                  		move.b	#$9D,d0
00009A08 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
00009A0C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00009A12 4E75                       		rts	
00009A14                            
00009A14                            PlaySpecialStage:
00009A14 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
00009A1A 6C00 0000                  		bge.w	SpecialStage_Cleared	; if yes, branch
00009A1E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009A24 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00009A28 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009A30 11F9 0020 0001 FE12        		move.b	($200001).l,($FFFFFE12).w ; set lives
00009A38 7000                       		moveq	#0,d0
00009A3A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009A3E 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
00009A42 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009A46                            ;		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009A46 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
00009A4C 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
00009A50 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
00009A58 11F9 0020 012D FE56        		move.b	($20012D).l,($FFFFFE56).w ; load emeralds
00009A60 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
00009A68 6D00 0000                  		blt.w	PlaySpecialStage2
00009A6C 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
00009A74                            PlaySpecialStage2:
00009A74 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009A7C 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
00009A84 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009A8C 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
00009A94 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009A9C 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009AA4 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009AAC 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00009AB2 4E75                       		rts
00009AB4                            SpecialStage_Cleared:
00009AB4 103C 00D2                  		move.b	#$D2,d0
00009AB8 6100 FA04                  		bsr.w	Jmpto_PlaySound_Special
00009ABC 0C38 0003 FF86             		cmpi.b	#3,(Title_screen_option).w
00009AC2 6600 0000                  		bne.w	SpecialStage_Cleared_3
00009AC6                            SpecialStage_Cleared_2:
00009AC6 4EFA FCE4                  		jmp		loc_317C
00009ACA                            SpecialStage_Cleared_3:
00009ACA 103C 00D2                  		move.b	#$D2,d0
00009ACE 6100 F9EE                  		bsr.w	Jmpto_PlaySound_Special
00009AD2                            	;	jmp	(loc_317C).l	; if not, branch
00009AD2                            
00009AD2                            PlayContinuelives:
00009AD2 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l
00009ADA 13FC 0003 0020 0001        		move.b	#3,($200001).l
00009AE2 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
00009AEC 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; set lives to 3
00009AF4 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l
00009AFC 4E75                       		rts	
00009AFE                            
00009AFE                            ;LoadEmeralds_2:
00009AFE                            ;		clr.b	($FFFFFE57).w
00009AFE                            ;		jmp		LSRoutine
00009AFE                            LoadEmeralds:
00009AFE 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009B06 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
00009B0E 6D00 0000                  		blt.w	LoadEmeralds2		
00009B12 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
00009B1A                            LoadEmeralds2:
00009B1A 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009B22 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
00009B2A 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009B32 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
00009B3A 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009B42                            
00009B42 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009B4A 4E75                       		rts
00009B4C                            ;		tst.b	($FFFFFE57).w
00009B4C                            ;		beq.w	LoadEmeralds_2
00009B4C                            ;		bcc.w	LSRoutine
00009B4C                            ; ===========================================================================
00009B4C                            		
00009B4C                            LoadLives:
00009B4C 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00009B54 6D00 0000                  		blt.w	LoadLives2		; if yes, branch
00009B58 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009B60 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
00009B66 6700 FF6A                  		beq.w	PlayContinuelives		; if yes, branch
00009B6A 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
00009B72 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009B7A 4E75                       		rts
00009B7C                            LoadLives2:
00009B7C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; load the number of lives
00009B82 4E75                       		rts
00009B84                            LoadLivesLS:
00009B84 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00009B8C 6D00 FFEE                  		blt.w	LoadLives2		; if yes, branch
00009B90 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009B98 6100 FFB2                  		bsr.w	LoadLives
00009B9C 6000 FF60                  		bra.w	LoadEmeralds
00009BA0 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009BA8 4E75                       		rts
00009BAA                            		
00009BAA                            
00009BAA                            
00009BAA                            ; ===========================================================================
00009BAA                            Jmpto_PlaySound2:
00009BAA 4EF8 3212                  	jmp	PlaySound
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            ; Demo mode
00009BAE                            ; ---------------------------------------------------------------------------
00009BAE                            
00009BAE                            Demo:					; XREF: TitleScreen
00009BAE 31FC 001E FC20             		move.w	#$1E,($FFFFFC20).w
00009BB4                            
00009BB4                            loc_33B6:				; XREF: loc_33E4
00009BB4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009BBA 6100 F342                  		bsr.w	Wait_VSync
00009BBE 4EB9 0000 0000             		jsr	DeformBgLayer
00009BC4 4EB8 3C62                  		jsr	PalCycle_Load
00009BC8 4EB8 377E                  		jsr	RunPLC_RAM
00009BCC 3038 D008                  		move.w	($FFFFD008).w,d0
00009BD0 5440                       		addq.w	#2,d0
00009BD2 31C0 D008                  		move.w	d0,($FFFFD008).w
00009BD6 0C40 1C00                  		cmpi.w	#$1C00,d0
00009BDA 6500                       		bcs.s	loc_33E4
00009BDC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00009BE2 4E75                       		rts	
00009BE4                            ; ===========================================================================
00009BE4                            
00009BE4                            loc_33E4:				; XREF: Demo
00009BE4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00009BEA 6600 FBFC                  		bne.w	Title_ChkLevSel	; if yes, branch
00009BEE 4A78 FC20                  		tst.w	($FFFFFC20).w
00009BF2 6600 FFC0                  		bne.w	loc_33B6
00009BF6 103C 00E1                  		move.b	#$E1,d0
00009BFA 6100 F8C2                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
00009BFE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00009C02 0240 0007                  		andi.w	#7,d0
00009C06 D040                       		add.w	d0,d0
00009C08 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00009C0C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00009C10 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00009C14 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00009C1A 6500                       		bcs.s	loc_3422	; if yes, branch
00009C1C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00009C22                            
00009C22                            loc_3422:
00009C22 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00009C28 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00009C2E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00009C32 6600                       		bne.s	Demo_Level	; if not, branch
00009C34 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009C3A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00009C3E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00009C42                            
00009C42                            Demo_Level:
00009C42 0C78 001C F600             		cmpi.w	#$1C,($FFFFF600).w	; is level number 0600 (special	stage)?
00009C48 6700                       		beq.s	Demo_Level_Credits	; if not, branch
00009C4A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00009C50                            Demo_Level_Credits:
00009C50 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00009C56 7000                       		moveq	#0,d0
00009C58 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009C5C 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
00009C60 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009C64 4E75                       		rts	
00009C66                            ; ===========================================================================
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            ; Levels used in demos
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            Demo_Levels:	incbin	misc\dm_ord1.bin
00009C6E                            		even
00009C6E                            
00009C6E                            ; ---------------------------------------------------------------------------
00009C6E                            ; Subroutine to	change what you're selecting in the level select
00009C6E                            ; ---------------------------------------------------------------------------
00009C6E                            
00009C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C6E                            
00009C6E                            
00009C6E                            LevSelControls:				; XREF: LevelSelect
00009C6E 1238 F605                  		move.b	($FFFFF605).w,d1
00009C72 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00009C76 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00009C78 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009C7C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00009C7E                            
00009C7E                            LevSel_UpDown:
00009C7E 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009C84 1238 F604                  		move.b	($FFFFF604).w,d1
00009C88 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00009C8C 6700                       		beq.s	LevSel_SndTest	; if not, branch
00009C8E 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009C92 0801 0000                  		btst	#0,d1		; is up	pressed?
00009C96 6700                       		beq.s	LevSel_Down	; if not, branch
00009C98 5340                       		subq.w	#1,d0		; move up 1 selection
00009C9A 6400                       		bcc.s	LevSel_Down
00009C9C 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00009C9E                            
00009C9E                            LevSel_Down:
00009C9E 0801 0001                  		btst	#1,d1		; is down pressed?
00009CA2 6700                       		beq.s	LevSel_Refresh	; if not, branch
00009CA4 5240                       		addq.w	#1,d0		; move down 1 selection
00009CA6 0C40 0015                  		cmpi.w	#$15,d0
00009CAA 6500                       		bcs.s	LevSel_Refresh
00009CAC 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00009CAE                            
00009CAE                            LevSel_Refresh:
00009CAE 31C0 FFA8                  		move.w	d0,($FFFFFFA8).w ; set new selection
00009CB2 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009CB8 4E75                       		rts
00009CBA                            ; ===========================================================================
00009CBA                            
00009CBA                            LevSel_SndTest:				; XREF: LevSelControls
00009CBA 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w ; is	item $14 selected?
00009CC0 6600                       		bne.s	LevSel_NoMove	; if not, branch
00009CC2 1238 F605                  		move.b	($FFFFF605).w,d1
00009CC6 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed and held?
00009CCA 6600                       		bne.s	LevSel_LRAB	; if yes, branch
00009CCC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009CD0 6A00                       		bpl.s	LevSel_NoMove	; if time remains, branch
00009CD2                            
00009CD2                            LevSel_LRAB:
00009CD2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009CD8 1238 F604                  		move.b	($FFFFF604).w,d1
00009CDC 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed?
00009CE0 6700                       		beq.s	LevSel_NoMove	; if not, branch
00009CE2 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009CE6 0801 0006                  		btst	#6,d1		; is A pressed?
00009CEA 6600                       		bne.s	LevSel_A	; if not, branch
00009CEC 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009CF0 6600                       		bne.s	LevSel_B	; if not, branch
00009CF2 0801 0002                  		btst	#2,d1		; is left pressed?
00009CF6 6700                       		beq.s	LevSel_Right	; if not, branch
00009CF8 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00009CFA 6400                       		bcc.s	LevSel_Right
00009CFC 303C 00FF                  		move.w	#$FF,d0		; if sound test	moves below 0, set to $FF
00009D00                            
00009D00                            LevSel_A:
00009D00 0801 0006                  		btst	#button_A,d1		; is A button pressed?
00009D04 6700                       		beq.s	LevSel_B	; if not, branch
00009D06 0640 0010                  		add.w	#16,d0		; add $10 to sound test
00009D0A                            ;		jmp	LevSel_Right
00009D0A                            LevSel_B:
00009D0A 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009D0E 6700                       		beq.s	LevSel_Right	; if not, branch
00009D10 0440 0010                  		sub.w	#16,d0		; subtract $10 from sound test
00009D14                            
00009D14                            LevSel_Right:
00009D14 0801 0003                  		btst	#3,d1		; is right pressed?
00009D18 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00009D1A 5240                       		addq.w	#1,d0		; add 1	to sound test
00009D1C                            
00009D1C                            LevSel_Refresh2:
00009D1C 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00009D20 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009D26                            
00009D26                            LevSel_NoMove:
00009D26 4E75                       		rts	
00009D28                            ; End of function LevSelControls
00009D28                            
00009D28                            ; ---------------------------------------------------------------------------
00009D28                            ; Subroutine to load level select text
00009D28                            ; ---------------------------------------------------------------------------
00009D28                            
00009D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D28                            
00009D28                            
00009D28                            LevSelTextLoad:				; XREF: TitleScreen
00009D28 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009D2E 4DF9 00C0 0000             		lea	($C00000).l,a6
00009D34 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00009D3A 363C E680                  		move.w	#$E680,d3	; VRAM setting
00009D3E 7214                       		moveq	#$14,d1		; number of lines of text
00009D40                            
00009D40                            loc_34FE:				; XREF: LevSelTextLoad+26j
00009D40 2D44 0004                  		move.l	d4,4(a6)
00009D44 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009D4A 0684 0080 0000             		addi.l	#$800000,d4
00009D50 51C9 FFEE                  		dbf	d1,loc_34FE
00009D54 7000                       		moveq	#0,d0
00009D56 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009D5A 3200                       		move.w	d0,d1
00009D5C 283C 6210 0003             		move.l	#$62100003,d4
00009D62 EF48                       		lsl.w	#7,d0
00009D64 4840                       		swap	d0
00009D66 D880                       		add.l	d0,d4
00009D68 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009D6E E749                       		lsl.w	#3,d1
00009D70 3001                       		move.w	d1,d0
00009D72 D241                       		add.w	d1,d1
00009D74 D240                       		add.w	d0,d1
00009D76 D2C1                       		adda.w	d1,a1
00009D78 363C C680                  		move.w	#$C680,d3
00009D7C 2D44 0004                  		move.l	d4,4(a6)
00009D80 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009D86 363C E680                  		move.w	#$E680,d3
00009D8A 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w
00009D90 6600                       		bne.s	loc_3550
00009D92 363C C680                  		move.w	#$C680,d3
00009D96                            
00009D96                            loc_3550:
00009D96 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00009DA0 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009DA4 1400                       		move.b	d0,d2
00009DA6 E808                       		lsr.b	#4,d0
00009DA8 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009DAE 1002                       		move.b	d2,d0
00009DB0 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009DB6 4E75                       		rts	
00009DB8                            ; End of function LevSelTextLoad
00009DB8                            
00009DB8                            
00009DB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DB8                            
00009DB8                            
00009DB8                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00009DB8 0240 000F                  		andi.w	#$F,d0
00009DBC 0C00 000A                  		cmpi.b	#$A,d0
00009DC0 6500                       		bcs.s	loc_3580
00009DC2 5800                       		addi.b	#4,d0
00009DC4                            
00009DC4                            loc_3580:
00009DC4 D043                       		add.w	d3,d0
00009DC6 3C80                       		move.w	d0,(a6)
00009DC8 4E75                       		rts	
00009DCA                            ; End of function LevSel_ChgSnd
00009DCA                            
00009DCA                            
00009DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DCA                            
00009DCA                            
00009DCA                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00009DCA 7417                       		moveq	#$17,d2		; number of characters per line
00009DCC                            
00009DCC                            LevSel_LineLoop:
00009DCC 7000                       		moveq	#0,d0
00009DCE 1019                       		move.b	(a1)+,d0
00009DD0 6A00                       		bpl.s	LevSel_CharOk
00009DD2 3CBC 0000                  		move.w	#0,(a6)
00009DD6 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00009DDA 4E75                       		rts	
00009DDC                            ; ===========================================================================
00009DDC                            
00009DDC                            LevSel_CharOk:				; XREF: LevSel_ChgLine
00009DDC 0C40 0040                  		cmp.w	#$40,d0    ; Check for $40 (End of ASCII number area)
00009DE0 6D00                       		blt.s	@notText    ; If this is not an ASCII text character, branch
00009DE2 5740                       		sub.w	#$3,d0        ; Subtract an extra 3 (Compensate for missing characters in the font)
00009DE4                            @notText:
00009DE4 0440 0030                  		sub.w	#$30,d0        ; Subtract #$33 (Convert to S2 font from ASCII)
00009DE8 D043                       		add.w	d3,d0        ; combine char with VRAM setting
00009DEA 3C80                       		move.w	d0,(a6)        ; send to VRAM
00009DEC 51CA FFDE                  		dbf	d2,LevSel_LineLoop
00009DF0 4E75                               rts	
00009DF2                            ; End of function LevSel_ChgLine
00009DF2                            
00009DF2                            ; ===========================================================================
00009DF2                            ; ---------------------------------------------------------------------------
00009DF2                            ; Level	select menu text
00009DF2                            ; ---------------------------------------------------------------------------
00009DF2                            LevelMenuText:
00009DF2 5350 4C41 5348 2048 494C+  		dc.b	"SPLASH HILL ZONE   ACT 1"
00009E0A 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009E22 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009E3A 4C4F 5354 204C 4142 5952+  		dc.b	"LOST LABYRINTH     ACT 1"
00009E52 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009E6A 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009E82 5359 4C56 414E 4941 2043+  		dc.b	"SYLVANIA CASTLE    ACT 1"
00009E9A 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009EB2 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009ECA 5748 4954 4520 5041 524B+  		dc.b	"WHITE PARK ZONE    ACT 1"
00009EE2 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009EFA 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009F12 4341 5349 4E4F 2053 5452+  		dc.b	"CASINO STREET      ACT 1"
00009F2A 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009F42 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009F5A 4D41 4420 4745 4152 205A+  		dc.b	"MAD GEAR ZONE      ACT 1"
00009F72 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009F8A 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009FA2 4547 4720 5354 4154 494F+  		dc.b	"EGG STATION             "
00009FBA 5350 4543 4941 4C20 5354+  		dc.b	"SPECIAL STAGE           "
00009FD2 534F 554E 4420 5445 5354+  		dc.b	"SOUND TEST              "
00009FEA                            		even
00009FEA                            ; ---------------------------------------------------------------------------------
00009FEA                            ; Nemesis compressed art
00009FEA                            ; 10 blocks
00009FEA                            ; Player 1 2 VS Text
00009FEA                            ; ---------------------------------------------------------------------------------
00009FEA                            ; ArtNem_3DF4:
00009FEA                            Nem_TitleMenu:	incbin	artnem\titlemenu.bin	; Menu text on title screen
0000A284                            		even
0000A284                            
0000A284                            ; word_3E82:
0000A284                            CopyrightText:
0000A284 068B                       	dc.w  $68B	; (C)
0000A286 0000                       	dc.w	 0	;
0000A288 0682                       	dc.w  $682	; 2
0000A28A 0680                       	dc.w  $680	; 0
0000A28C 0681                       	dc.w  $681	; 1
0000A28E 0684                       	dc.w  $684	; 3
0000A290 0000                       	dc.w	 0	;
0000A292 06A0                       	dc.w  $6A0	; S
0000A294 0692                       	dc.w  $692	; E
0000A296 0694                       	dc.w  $694	; G
0000A298 068E                       	dc.w  $68E	; A
0000A29A                            ; ---------------------------------------------------------------------------
0000A29A                            ; Music	playlist
0000A29A                            ; ---------------------------------------------------------------------------
0000A29A                            MusicList1:	incbin	misc\muslist1.bin
0000A2A2                            		even
0000A2A2                            MusicList3:	incbin	misc\muslist3.bin
0000A2AA                            		even
0000A2AA                            MusicList4:	incbin	misc\muslist4.bin
0000A2B2                            		even
0000A2B2                            MusicListAlt:	incbin	misc\muslistalt.bin
0000A2BA                            		even
0000A2BA                            ;SpecialStage_PlayList:	incbin	misc\speciallist.bin
0000A2BA                            ;		even
0000A2BA                            ; ===========================================================================
0000A2BA                            
0000A2BA                            Sound_Select:
0000A2BA 103C 005B                  	move.b	#$5B,d0
0000A2BE 4EB9 0000 3212             	jsr	(PlaySound).l
0000A2C4 4E75                       	rts
0000A2C6                            
0000A2C6                            Sound_Select_Options:
0000A2C6 33FC 0100 00A1 1100 0839+          stopz80
0000A2D8 13FC 005B 00A0 1C0B        	move.b	#$5B,($A01C0B).l
0000A2E0 33FC 0000 00A1 1100        	startz80
0000A2E8 4E75                       	rts
0000A2EA                            ; ---------------------------------------------------------------------------
0000A2EA                            ; Level
0000A2EA                            ; ---------------------------------------------------------------------------
0000A2EA                            
0000A2EA                            Level:		; XREF: GameModeArray
0000A2EA 08F8 0007 F600             		bset	#7,($FFFFF600).w; add $80 to screen mode (for pre level sequence)
0000A2F0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A2F4 6B00                       		bmi.s	loc_37B6
0000A2F6 103C 00E1                  		move.b	#$E1,d0
0000A2FA 6100 F1C2                  		bsr.w	Jmpto_PlaySound_Special; fade out music
0000A2FE                             
0000A2FE                            loc_37B6:
0000A2FE 4EB8 3770                  		jsr	clearplc
0000A302 4EB8 46B4                  		jsr	pal_fadefrom
0000A306 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A30A 6B00                       		bmi.s	Level_ClrRam
0000A30C 46FC 2700                  		disable_ints
0000A310 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000A31A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0; load title card patterns
0000A320 4EB8 35B2                  		jsr	NemDec
0000A324 46FC 2300                  		enable_ints
0000A328 7000                       		moveq	#0,d0
0000A32A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A32E E948                       		lsl.w	#4,d0
0000A330                            ;		clr.b	($FFFFFF0A).w
0000A330 4238 FF88                  		clr.b	($FFFFFF88).w
0000A334 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000A33A 6600                       		bne.s	CheckAct2	 ; if not, branch
0000A33C 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000A342 4EF9 0000 0000             				jmp	 Level_3
0000A348                            CheckAct2:
0000A348 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000A34E 6600                       		bne.s	Level_2	 ; if not, branch
0000A350 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000A356 4EF9 0000 0000             				jmp	 Level_3
0000A35C                            Level_2:
0000A35C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000A362                            Level_3:
0000A362 45F2 0000                  		lea	(a2,d0.w),a2
0000A366 7000                       		moveq	#0,d0
0000A368 1012                       		move.b	(a2),d0
0000A36A 6700                       		beq.s	loc_37FC
0000A36C 4EB8 3712                  		jsr	LoadPLC; load level patterns
0000A370                            
0000A370                            loc_37FC:
0000A370 7001                       		moveq	#1,d0
0000A372 4EB8 3712                  		jsr	LoadPLC		; load standard	patterns
0000A376                            
0000A376                            Level_ClrRam:	
0000A376 4238 FE19                  		clr.b	(Super_Sonic_flag).w; ...
0000A37A 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
0000A37E 7000                       		moveq	#0,d0
0000A380 323C 00FF                  		move.w	#$FF,d1
0000A384                            
0000A384                            loc_303A2E:					  ; ...
0000A384 22C0                       		move.l	d0,(a1)+
0000A386 51C9 FFFC                  		dbf	d1,loc_303A2E
0000A38A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A38E 7000                       		moveq	#0,d0
0000A390 323C 08FF                  		move.w	#$8FF,d1
0000A394                            
0000A394                            loc_303A3E:					  ; ...
0000A394 22C0                       		move.l	d0,(a1)+
0000A396 51C9 FFFC                  		dbf	d1,loc_303A3E
0000A39A 43F8 F628                  		lea	($FFFFF628).w,a1
0000A39E 7000                       		moveq	#0,d0
0000A3A0 323C 0015                  		move.w	#$15,d1
0000A3A4                            
0000A3A4                            Level_ClrVars:
0000A3A4 22C0                       		move.l	d0,(a1)+
0000A3A6 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000A3AA                            
0000A3AA 43F8 F700                  		lea	($FFFFF700).w,a1
0000A3AE 7000                       		moveq	#0,d0
0000A3B0 323C 003F                  		move.w	#$3F,d1
0000A3B4                            
0000A3B4                            Level_ClrVars2:
0000A3B4 22C0                       		move.l	d0,(a1)+
0000A3B6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000A3BA                            
0000A3BA 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000A3BE 7000                       		moveq	#0,d0
0000A3C0 323C 0047                  		move.w	#$47,d1
0000A3C4                            
0000A3C4                            Level_ClrVars3:
0000A3C4 22C0                       		move.l	d0,(a1)+
0000A3C6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000A3CA                            
0000A3CA 46FC 2700                  		disable_ints
0000A3CE 4EB8 3084                  		jsr	ClearScreen
0000A3D2 4DF9 00C0 0004             		lea	($C00004).l,a6
0000A3D8 3CBC 8B03                  		move.w	#$8B03,(a6)
0000A3DC 3CBC 8230                  		move.w	#$8230,(a6)
0000A3E0 3CBC 8407                  		move.w	#$8407,(a6)
0000A3E4 3CBC 857C                  		move.w	#$857C,(a6)
0000A3E8 3CBC 9001                  		move.w	#$9001,(a6)
0000A3EC 3CBC 8004                  		move.w	#$8004,(a6)
0000A3F0 3CBC 8720                  		move.w	#$8720,(a6)
0000A3F4 3CBC 8C81                  		move.w	#$8C81,(a6)
0000A3F8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000A3FE 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000A402 4278 C800                  		clr.w	($FFFFC800).w
0000A406 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000A40E 31FC 0000 FC00             		move.w	#0,($FFFFFC00).w	; clear screen delay counter
0000A414 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A41A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000A41C 3CBC 8014                  		move.w	#$8014,(a6)
0000A420 7000                       		moveq	#0,d0
0000A422 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A426 D040                       		add.w	d0,d0
0000A428 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000A42E 3031 0000                  		move.w	(a1,d0.w),d0
0000A432 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000A436 31C0 F648                  		move.w	d0,($FFFFF648).w
0000A43A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000A43E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000A442 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000A446 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000A44C                            
0000A44C                            Level_LoadPal:
0000A44C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000A452 46FC 2300                  		enable_ints
0000A456 7003                       		moveq	#3,d0
0000A458 4EB8 499E                  		jsr	PalLoad2	; load Sonic's pallet line
0000A45C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ? WATERCHECK
0000A462 6600                       		bne.s	Level_GetBgm	; if not, branch
0000A464 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000A466 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000A46C 6600                       		bne.s	Level_WaterPal	; if not, branch
0000A46E 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
0000A470                            
0000A470                            Level_WaterPal:
0000A470 4EB8 49B2                  		jsr	PalLoad3_Water	; load underwater pallet (see d0)
0000A474 4A38 FE30                  		tst.b	($FFFFFE30).w
0000A478 6700                       		beq.s	Level_GetBgm
0000A47A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000A480                            
0000A480                            Level_GetBgm:
0000A480 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A484 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
0000A488 7000                       		moveq	#0,d0
0000A48A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A48E                             
0000A48E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000A494 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000A496 43F9 0000 A29A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000A49C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A49E                             
0000A49E                            Level_GetBgm2:
0000A49E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000A4A4 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000A4A6 0C38 0001 FF95             		cmpi.b	#$1,(Level_Music+5).w
0000A4AC 6700 0000                  		beq.w	LevelBGM_ActAlt
0000A4B0 43F9 0000 0000             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000A4B6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A4B8                            
0000A4B8                            LevelBGM_ActAlt:		
0000A4B8 43F9 0000 A2B2             		lea	(MusicListAlt).l,a1	; load Music Playlist for Acts 1
0000A4BE 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A4C0                             
0000A4C0                            Level_GetBgm3:
0000A4C0 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000A4C6 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000A4C8 43F9 0000 A2A2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000A4CE 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A4D0                             
0000A4D0                            Level_GetBgm4:
0000A4D0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000A4D6 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A4D8 43F9 0000 A2AA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000A4DE                            
0000A4DE                            Level_BgmNotLZ4:
0000A4DE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000A4E4 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A4E6 7006                       		moveq	#6,d0		; move 6 to d0
0000A4E8                            
0000A4E8                            Level_PlayBgm:
0000A4E8 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000A4EC 31C0 FF90                  		move.w	d0,(Level_Music).w	; store level music
0000A4F0 6100 F6B8                  		bsr.w	Jmpto_PlaySound2	; play music
0000A4F4 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000A4FA                            ; loc_40DA:
0000A4FA                            Level_TtlCard:
0000A4FA                            
0000A4FA 11FC 000C F62A             		move.b	#$C,(Delay_Time).w
0000A500 6100 E9FC                  		bsr.w	DelayProgram
0000A504 4EB9 0000 0000             		jsr	(ObjectsLoad).l
0000A50A 4EB9 0000 0000             		jsr	(BuildSprites).l
0000A510 6100 926C                  		bsr.w	RunPLC_RAM
0000A514 3038 D108                  		move.w	($FFFFD108).w,d0
0000A518 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000A51C 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000A51E 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000A522 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000A524 4EB9 0000 0000             		jsr	(Hud_Base).l
0000A52A                            
0000A52A                            loc_3946:
0000A52A 7003                       		moveq	#3,d0
0000A52C 4EB8 4986                  		jsr	PalLoad1	; load Sonic's pallet line
0000A530 4EB9 0000 0000             		jsr	LevelSizeLoad
0000A536 4EB9 0000 0000             		jsr	DeformBgLayer
0000A53C 4278 F61A                  		clr.w	(Vscroll_Factor).w
0000A540 31FC FF20 F61E             		move.w	#-$E0,($FFFFF61E).w
0000A546                            
0000A546 43F8 CC00                                  lea     ($FFFFCC00).w, A1
0000A54A 7000                                       moveq   #$00, D0
0000A54C 323C 00FF                                  move.w  #$00FF, D1
0000A550                            Offset_0x0040EC:
0000A550 22C0                                       move.l  D0, (A1)+
0000A552 51C9 FFFC                                  dbra    D1, Offset_0x0040EC
0000A556 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000A55C 4EB9 0000 0000             		jsr	LoadZoneTiles
0000A562 4EB9 0000 0000             		jsr	MainLoadBlockLoad ; load block mappings	and pallets
0000A568                            	;	move	#$2700,sr
0000A568 4EB9 0000 0000             		jsr	LoadTilesFromStart
0000A56E                            	;	move	#$2300,sr
0000A56E 4EB9 0000 0000             		jsr	FloorLog_Unk
0000A574 4EB9 0000 0000             		jsr	ColIndexLoad
0000A57A 4EB9 0000 0000             		jsr	LZWaterEffects
0000A580 6100 0000                  		bsr.w	InitPlayers
0000A584 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A588 6B00                       		bmi.s	Level_ChkDebug
0000A58A 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000A590 31FC F400 D388             		move.w	#-$C00,($FFFFD388).w ; load Obj01 Sonic object at $FFFFD000
0000A596                            
0000A596                            Level_ChkDebug:
0000A596 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000A59A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A59C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000A5A2 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A5A4 11FC 0001 FFDA             		move.b	#1,($FFFFFFDA).w ; enable debug	mode
0000A5AA                            
0000A5AA                            Level_ChkWater:
0000A5AA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000A5B0 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000A5B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A5BC 6600                       		bne.s	Level_LoadObj	; if not, branch
0000A5BE 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000A5C4 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000A5CA 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000A5D0 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000A5D6                            
0000A5D6                            Level_LoadObj:
0000A5D6 4EB9 0000 0000             		jsr	ObjPosLoad
0000A5DC                            ;		jsr	RingsManager
0000A5DC 4EB9 0000 0000             		jsr	ObjectsLoad
0000A5E2 4EB9 0000 0000             		jsr	BuildSprites
0000A5E8 7000                       		moveq	#0,d0
0000A5EA 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000A5EE 6600                       		bne.s	loc_39E8	; if yes, branch
0000A5F0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000A5F4 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000A5F8                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
0000A5F8                            ;		move.b	d0,(v_centstep).w
0000A5F8                            ;	endc	;end HUD Centiseconds
0000A5F8 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w ; clear lives counter
0000A5FE                            
0000A5FE                            loc_39E8:
0000A5FE 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000A602 11C0 D02B                  		move.b	d0,(Maincharacter+status_secondary).w ; clear speed shoes
0000A606 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000A60A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000A60E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000A612 4EB9 0000 0000             		jsr	OscillateNumInit
0000A618 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000A61E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000A624 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000A62A 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000A630 7000                       		moveq	#0,d0
0000A632 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A636 E548                       		lsl.w	#2,d0
0000A638 2271 0000                  		movea.l	(a1,d0.w),a1
0000A63C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A640 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000A642 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
0000A648 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000A64C 5340                       		subq.w	#1,d0
0000A64E E548                       		lsl.w	#2,d0
0000A650 2271 0000                  		movea.l	(a1,d0.w),a1
0000A654                            
0000A654                            Level_Demo:
0000A654 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000A65A 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000A65E 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000A664 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A668 6A00                       		bpl.s	Level_ChkWaterPal
0000A66A 31FC 021C FC20             		move.w	#540,($FFFFFC20).w
0000A670 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000A676 6600                       		bne.s	Level_ChkWaterPal
0000A678 31FC 01FE FC20             		move.w	#510,($FFFFFC20).w
0000A67E                            
0000A67E                            Level_ChkWaterPal:
0000A67E 0C38 0001 FE19             		cmpi.b	#1,($FFFFFE19).w ; is level LZ/SBZ3?
0000A684 6700                       		beq.s	Level_ChkWaterPal_Super	; if not, branch
0000A686 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A68C 6600                       		bne.s	Level_Delay	; if not, branch
0000A68E 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000A690 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A696 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A698 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000A69A                            Level_ChkWaterPal_Super:		
0000A69A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A6A0 6600                       		bne.s	Level_Delay	; if not, branch
0000A6A2 701F                       		moveq	#$1F,d0		; pallet $0B (LZ underwater)
0000A6A4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A6AA 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A6AC 701F                       		moveq	#$1F,d0		; pallet $0D (SBZ3 underwater)
0000A6AE                            
0000A6AE                            Level_WaterPal2:
0000A6AE 4EB8 49CA                  		jsr	PalLoad4_Water
0000A6B2                            
0000A6B2                            Level_Delay:
0000A6B2 323C 0003                  		move.w	#3,d1
0000A6B6                            
0000A6B6                            Level_DelayLoop:
0000A6B6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A6BC 6100 E840                  		bsr.w	Wait_VSync
0000A6C0 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000A6C4                            
0000A6C4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000A6CA 4EB8 4600                  		jsr	Pal_FadeTo2
0000A6CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A6D2 6B00                       		bmi.s	Level_ClrCardArt
0000A6D4 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000A6D8 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000A6DC 5838 D124                  		addq.b	#4,($FFFFD124).w
0000A6E0 5838 D164                  		addq.b	#4,($FFFFD164).w
0000A6E4                            		
0000A6E4 6000                       		bra.s	Level_StartGame
0000A6E6                            ; ===========================================================================
0000A6E6                            
0000A6E6                            Level_ClrCardArt:
0000A6E6 7002                       		moveq	#2,d0
0000A6E8 4EB9 0000 3712             		jsr	(LoadPLC).l	; load explosion patterns
0000A6EE 4EB9 0000 36DA             		jsr	(LoadAnimalPLC).l ; load animal patterns
0000A6F4                            ;		move.b	#1,($FFFFFF7B).w
0000A6F4                            Level_StartGame:
0000A6F4 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
0000A6FA                            ;	move.b	#1,($FFFFFE2C).w
0000A6FA 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000A700                            	;	move.b   #1,($FFFFFE1E).w   ; update time counter
0000A700                            
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            ; Main level loop (when	all title card and loading sequences are finished)
0000A700                            ; ---------------------------------------------------------------------------
0000A700                            
0000A700                            Level_MainLoop:
0000A700 4EB8 3310                  		jsr	PauseGame
0000A704 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A70A 6100 E7F2                  		bsr.w	Wait_VSync
0000A70E 5278 FE04                  		addq.w	#1,($FFFFFE04).w	; add 1 to level timer
0000A712 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A718 4EB9 0000 0000             		jsr	LZWaterEffects
0000A71E 4EB9 0000 0000             		jsr	ObjectsLoad
0000A724                            ;		tst.w	($FFFFFFCC).w
0000A724                            ;		bne.w	Level_MainLoop2
0000A724                            ;		movem	a0-a3,-(sp)
0000A724                            ;		jsr	RingsManager
0000A724                            ;		movem	(sp)+,a0-a3
0000A724                            ;Level_MainLoop2:
0000A724 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000A728 6600 FBC0                  		bne.w	Level		; if yes, branch
0000A72C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A730 6600                       		bne.s	loc_3B10
0000A732 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w	; is Sonic dying?
0000A738 6400                       		bcc.s	loc_3B14		; if yes, branch
0000A73A                            
0000A73A                            loc_3B10:
0000A73A 4EB9 0000 0000             		jsr	DeformBgLayer
0000A740                            
0000A740                            loc_3B14:
0000A740 4EB9 0000 0000             		jsr	BuildSprites
0000A746 4EB9 0000 0000             		jsr	ObjPosLoad
0000A74C 4EB8 3C62                  		jsr	PalCycle_Load
0000A750 4EB8 377E                  		jsr	RunPLC_RAM
0000A754 4EB9 0000 0000             		jsr	OscillateNumDo
0000A75A 4EB9 0000 0000             		jsr	ChangeRingFrame
0000A760 4EB9 0000 0000             		jsr	SignpostArtLoad
0000A766 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A76C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000A76E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000A774 6700 FF8A                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000A778 4E75                       		rts			; quit
0000A77A                            ; ===========================================================================
0000A77A                            
0000A77A                            Level_ChkDemo:				; XREF: Level_MainLoop
0000A77A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000A77E 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000A780 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000A784 6700                       		beq.s	Level_EndDemo	; if not, branch
0000A786 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A78C 6700 FF72                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000A790 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A796 4E75                       		rts	
0000A798                            ; ===========================================================================
0000A798                            
0000A798                            Level_EndDemo:				; XREF: Level_ChkDemo
0000A798 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000A79E 6600                       		bne.s	loc_3B88	; if not, branch
0000A7A0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A7A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A7AA 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000A7AC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000A7B2                            
0000A7B2                            loc_3B88:
0000A7B2 31FC 003C FC20             		move.w	#$3C,($FFFFFC20).w
0000A7B8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000A7BE 4278 F794                  		clr.w	($FFFFF794).w
0000A7C2                            
0000A7C2                            loc_3B98:
0000A7C2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A7C8 6100 E734                  		bsr.w	Wait_VSync
0000A7CC 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A7D2 4EB9 0000 0000             		jsr	ObjectsLoad
0000A7D8 4EB9 0000 0000             		jsr	BuildSprites
0000A7DE 4EB9 0000 0000             		jsr	ObjPosLoad
0000A7E4 5378 F794                  		subq.w	#1,($FFFFF794).w
0000A7E8 6A00                       		bpl.s	loc_3BC8
0000A7EA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000A7F0 4EB8 46DC                  		jsr	Pal_FadeOut
0000A7F4                            
0000A7F4                            loc_3BC8:
0000A7F4 4A78 FC20                  		tst.w	($FFFFFC20).w
0000A7F8 66C8                       		bne.s	loc_3B98
0000A7FA 4E75                       		rts	
0000A7FC                            
0000A7FC                            ; ===========================================================================
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC                            ; Custom Subroutine to make dynamic events happen on a per level basis.
0000A7FC                            ; ---------------------------------------------------------------------------
0000A7FC                            DE_PreReturn:                                                               
0000A7FC 4E75                               rts
0000A7FE                            
0000A7FE                            DynamicEvents:                            ; Main controller depending on zone
0000A7FE 0C38 0001 FFC6                     cmpi.b  #1,(sonickilled).w  ; Is sonic dead?
0000A804 6700 FFF6                          beq.w   DE_PreReturn        ; if so, stop all events.
0000A808                            
0000A808 7000                               moveq   #0,d0
0000A80A 1038 FE10                          move.b  ($FFFFFE10).w,d0
0000A80E D040                               add.w   d0,d0
0000A810 303B 0000                          move.w  DynEvents_Index(pc,d0.w),d0
0000A814 4EFB 0000                          jmp     DynEvents_Index(pc,d0.w)
0000A818                            
0000A818                            DynEvents_Index:
0000A818 0000                               dc.w DynEvents_GHZ-DynEvents_Index
0000A81A 0000                               dc.w DynEvents_LZ-DynEvents_Index
0000A81C 0000                               dc.w DynEvents_MZ-DynEvents_Index
0000A81E 0000                               dc.w DynEvents_SLZ-DynEvents_Index
0000A820 0000                               dc.w DynEvents_SYZ-DynEvents_Index
0000A822 0000                               dc.w DynEvents_SBZ-DynEvents_Index
0000A824                            
0000A824                            DE_PalLoad:                             ; Pallet loading routine.
0000A824 34D9                               move.w  (a1)+,(a2)+
0000A826 51C8 FFFC                          dbf     d0,DE_PalLoad
0000A82A 4E75                               rts
0000A82C                            
0000A82C                            DynEvents_GHZ:
0000A82C 7000                                       moveq   #0,d0
0000A82E 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A832 D040                                       add.w   d0,d0
0000A834 303B 0000                                  move.w  EventsGHZ_Index(pc,d0.w),d0
0000A838 4EFB 0000                                  jmp     EventsGHZ_Index(pc,d0.w)
0000A83C                            
0000A83C 0000                       EventsGHZ_Index: dc.w DynamicEvents_GHZ1-EventsGHZ_Index
0000A83E 0000                                       dc.w DynamicEvents_GHZ2-EventsGHZ_Index
0000A840 0000                                       dc.w DynamicEvents_GHZ3-EventsGHZ_Index
0000A842                            
0000A842                            ;====================================================================
0000A842                            
0000A842                            DynEvents_LZ:
0000A842 7000                                       moveq   #0,d0
0000A844 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A848 D040                                       add.w   d0,d0
0000A84A 303B 0000                                  move.w  EventsLZ_Index(pc,d0.w),d0
0000A84E 4EFB 0000                                  jmp     EventsLZ_Index(pc,d0.w)
0000A852                            
0000A852 0000                       EventsLZ_Index: dc.w DynamicEvents_LZ1-EventsLZ_Index
0000A854 0000                                       dc.w DynamicEvents_LZ2-EventsLZ_Index
0000A856 0000                                       dc.w DynamicEvents_LZ3-EventsLZ_Index 
0000A858                            
0000A858                            ;====================================================================
0000A858                            
0000A858                            DynEvents_MZ:
0000A858 7000                                       moveq   #0,d0
0000A85A 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A85E D040                                       add.w   d0,d0
0000A860 303B 0000                                  move.w  EventsMZ_Index(pc,d0.w),d0
0000A864 4EFB 0000                                  jmp     EventsMZ_Index(pc,d0.w)
0000A868                            
0000A868 0000                       EventsMZ_Index: dc.w DynamicEvents_MZ1-EventsMZ_Index
0000A86A 0000                                       dc.w DynamicEvents_MZ2-EventsMZ_Index
0000A86C 0000                                       dc.w DynamicEvents_MZ3-EventsMZ_Index 
0000A86E                            
0000A86E                            ;====================================================================
0000A86E                            
0000A86E                            DynEvents_SLZ:
0000A86E 7000                                       moveq   #0,d0
0000A870 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A874 D040                                       add.w   d0,d0
0000A876 303B 0000                                  move.w  EventsSLZ_Index(pc,d0.w),d0
0000A87A 4EFB 0000                                  jmp     EventsSLZ_Index(pc,d0.w)
0000A87E                            
0000A87E 0000                       EventsSLZ_Index:        dc.w DynamicEvents_SLZ1-EventsSLZ_Index
0000A880 0000                                       dc.w DynamicEvents_SLZ2-EventsSLZ_Index
0000A882 0000                                       dc.w DynamicEvents_SLZ3-EventsSLZ_Index 
0000A884                            
0000A884                            ;====================================================================
0000A884                            
0000A884                            DynEvents_SYZ:
0000A884 7000                                       moveq   #0,d0
0000A886 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A88A D040                                       add.w   d0,d0
0000A88C 303B 0000                                  move.w  EventsSYZ_Index(pc,d0.w),d0
0000A890 4EFB 0000                                  jmp     EventsSYZ_Index(pc,d0.w)
0000A894                            
0000A894 0000                       EventsSYZ_Index:        dc.w DynamicEvents_SYZ1-EventsSYZ_Index
0000A896 0000                                       dc.w DynamicEvents_SYZ2-EventsSYZ_Index
0000A898 0000                                       dc.w DynamicEvents_SYZ3-EventsSYZ_Index 
0000A89A                            
0000A89A                            ;====================================================================
0000A89A                            
0000A89A                            DynEvents_SBZ:
0000A89A 7000                                       moveq   #0,d0
0000A89C 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A8A0 D040                                       add.w   d0,d0
0000A8A2 303B 0000                                  move.w  EventsSBZ_Index(pc,d0.w),d0
0000A8A6 4EFB 0000                                  jmp     EventsSBZ_Index(pc,d0.w)
0000A8AA                            
0000A8AA 0000                       EventsSBZ_Index:        dc.w DynamicEvents_SBZ1-EventsSBZ_Index
0000A8AC 0000                                       dc.w DynamicEvents_SBZ2-EventsSBZ_Index
0000A8AE 0000                                       dc.w DynamicEvents_SBZ3-EventsSBZ_Index 
0000A8B0                            
0000A8B0                            ;====================================================================
0000A8B0                            ; Dynamic Events on a zone basis:
0000A8B0                            ;====================================================================
0000A8B0                            
0000A8B0                            DynamicEvents_GHZ1:
0000A8B0 4E75                               rts
0000A8B2                                            
0000A8B2                            ; --------------------------------------------------------------------
0000A8B2                            
0000A8B2                            DynamicEvents_GHZ2:
0000A8B2 4E75                               rts
0000A8B4                            
0000A8B4                            ; --------------------------------------------------------------------
0000A8B4                            
0000A8B4                            DynamicEvents_GHZ3:
0000A8B4 4E75                               rts
0000A8B6                                            
0000A8B6                            ; ====================================================================
0000A8B6                            
0000A8B6                            DynamicEvents_MZ1:
0000A8B6 4E75                               rts
0000A8B8                            
0000A8B8                            ; --------------------------------------------------------------------
0000A8B8                            
0000A8B8                            DynamicEvents_MZ2:
0000A8B8 4E75                               rts
0000A8BA                            
0000A8BA                            ; --------------------------------------------------------------------
0000A8BA                            
0000A8BA                            DynamicEvents_MZ3:
0000A8BA 4E75                               rts
0000A8BC                                            
0000A8BC                            ; ====================================================================
0000A8BC                            
0000A8BC                            DynamicEvents_SYZ1:
0000A8BC 4E75                               rts
0000A8BE                            
0000A8BE                            ; --------------------------------------------------------------------
0000A8BE                            
0000A8BE                            DynamicEvents_SYZ2:
0000A8BE 4E75                               rts
0000A8C0                            
0000A8C0                            ; --------------------------------------------------------------------
0000A8C0                            
0000A8C0                            DynamicEvents_SYZ3:
0000A8C0 4E75                               rts
0000A8C2                                            
0000A8C2                            ; ====================================================================
0000A8C2                            
0000A8C2                            DynamicEvents_LZ1:
0000A8C2 4E75                               rts
0000A8C4                            
0000A8C4                            ; --------------------------------------------------------------------
0000A8C4                            
0000A8C4                            DynamicEvents_LZ2:
0000A8C4 4E75                               rts
0000A8C6                            
0000A8C6                            ; --------------------------------------------------------------------
0000A8C6                            
0000A8C6                            DynamicEvents_LZ3:
0000A8C6 4E75                               rts
0000A8C8                                            
0000A8C8                            ; ====================================================================
0000A8C8                            
0000A8C8                            DynamicEvents_SLZ1:
0000A8C8 4E75                               rts
0000A8CA                            
0000A8CA                            ; --------------------------------------------------------------------
0000A8CA                            
0000A8CA                            DynamicEvents_SLZ2:
0000A8CA 4E75                               rts
0000A8CC                            
0000A8CC                            ; --------------------------------------------------------------------
0000A8CC                            
0000A8CC                            DynamicEvents_SLZ3:
0000A8CC 4E75                               rts
0000A8CE                                            
0000A8CE                            ; ====================================================================
0000A8CE                            
0000A8CE                            DynamicEvents_SBZ1:
0000A8CE 4E75                               rts
0000A8D0                            
0000A8D0                            ; --------------------------------------------------------------------
0000A8D0                            
0000A8D0                            DynamicEvents_SBZ2:
0000A8D0 4E75                               rts
0000A8D2                            
0000A8D2                            ; --------------------------------------------------------------------
0000A8D2                            
0000A8D2                            DynamicEvents_SBZ3:
0000A8D2 4E75                               rts
0000A8D4                                            
0000A8D4                            ; ====================================================================
0000A8D4                            
0000A8D4                            ; End of subroutine DynamicEvents
0000A8D4                            
0000A8D4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000A8D4                            
0000A8D4                            ; sub_446E:
0000A8D4                            InitPlayers:
0000A8D4 3038 FF74                  	move.w	($FFFFFF74).w,d0
0000A8D8 6600                       	bne.s	InitPlayers_Alone ; branch if this isn't a Sonic and Tails game
0000A8DA 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFD000
0000A8E0 11FC 0005 D1C0             	move.b	#5,($FFFFD1C0).w
0000A8E6                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A8E6                            	;cmpi.b	#0,(Current_Zone).w
0000A8E6                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A8E6                            	;cmpi.b	#6,(Current_Zone).w
0000A8E6                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A8E6                            	;cmpi.b	#$E,(Current_Zone).w
0000A8E6                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A8E6                            ;	cmpi.b	#$10,(Current_Zone).w
0000A8E6                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A8E6                            
0000A8E6                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A8E6                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A8E6                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A8E6                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A8E6                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A8E6                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A8E6                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A8E6                            
0000A8E6                            return_44BC:
0000A8E6 4E75                       	rts
0000A8E8                            ; ===========================================================================
0000A8E8                            ; loc_44BE:
0000A8E8                            InitPlayers_Alone: ; either Sonic or Tails but not both
0000A8E8 5340                       	subq.w	#1,d0
0000A8EA 6600                       	bne.s	InitPlayers_TailsAlone ; branch if this is a Tails alone game
0000A8EC                            
0000A8EC 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFB000
0000A8F2                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A8F2                            	;cmpi.b	#0,(Current_Zone).w
0000A8F2                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A8F2                            	;cmpi.b	#6,(Current_Zone).w
0000A8F2                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A8F2                            	;cmpi.b	#$E,(Current_Zone).w
0000A8F2                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A8F2                            ;	cmpi.b	#$10,(Current_Zone).w
0000A8F2                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A8F2                            
0000A8F2                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A8F2                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A8F2                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A8F2                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A8F2                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A8F2                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A8F2                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A8F2                            ;	rts
0000A8F2                            ; ===========================================================================
0000A8F2                            ; loc_44D0:
0000A8F2                            InitPlayers_TailsAlone:
0000A8F2 3038 FF76                  	move.w	(Player_option).w,d0
0000A8F6 0C00 0003                  	cmpi.b #3,d0
0000A8FA 6700 0000                  	beq.w	InitPlayers_MetalAlone
0000A8FE                            ;	move.b	#2,(MainCharacter).w ; load Obj02 Tails object at $FFFFB000
0000A8FE                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A8FE                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD100
0000A8FE                            ;	addi.w	#4,(MainCharacter+y_pos).w
0000A8FE                            ;	clr.b	(Super_Sonic_flag).w
0000A8FE                            ;	rts
0000A8FE                            
0000A8FE                            InitPlayers_MetalAlone:
0000A8FE                            ;	move.b	#$4E,(MainCharacter).w
0000A8FE                            ;	move.w	(Player_option).w,d0
0000A8FE                            ;	move.w	d0,(Player_Mode).w
0000A8FE                            ;	move.b	#8,($FFFFD100).w
0000A8FE                            ;	move.b	#$01,($FFFFFFE0).w
0000A8FE 4E75                       	rts
0000A900                            ; End of function InitPlayers
0000A900                            
0000A900                            
0000A900                            ; ---------------------------------------------------------------------------
0000A900                            ; Subroutine to	do special water effects in Labyrinth Zone
0000A900                            ; ---------------------------------------------------------------------------
0000A900                            
0000A900                            LZWaterEffects:				; XREF: Level
0000A900 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000A906 6600                       		bne.s	locret_3C28	; if not, branch
0000A908 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A90E 6400                       		bcc.s	LZMoveWater
0000A910 4EB9 0000 0000             		jsr	LZWindTunnels
0000A916 4EB9 0000 0000             		jsr	LZWaterSlides
0000A91C 4EB9 0000 0000             		jsr	LZDynamicWater
0000A922                            
0000A922                            LZMoveWater:
0000A922 4238 F64E                  		clr.b	($FFFFF64E).w
0000A926 7000                       		moveq	#0,d0
0000A928 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000A92C E248                       		lsr.w	#1,d0
0000A92E D078 F648                  		add.w	($FFFFF648).w,d0
0000A932 31C0 F646                  		move.w	d0,($FFFFF646).w
0000A936 3038 F646                  		move.w	($FFFFF646).w,d0
0000A93A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000A93E 6400                       		bcc.s	loc_3C1A
0000A940 4A40                       		tst.w	d0
0000A942 6A00                       		bpl.s	loc_3C1A
0000A944 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000A94A 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000A950                            
0000A950                            loc_3C1A:
0000A950 0C40 00DF                  		cmpi.w	#$DF,d0
0000A954 6500                       		bcs.s	loc_3C24
0000A956 303C 00DF                  		move.w	#$DF,d0
0000A95A                            
0000A95A                            loc_3C24:
0000A95A 11C0 F625                  		move.b	d0,($FFFFF625).w
0000A95E                            
0000A95E                            locret_3C28:
0000A95E 4E75                       		rts	
0000A960                            ; ===========================================================================
0000A960                            ; ---------------------------------------------------------------------------
0000A960                            ; Labyrinth default water heights
0000A960                            ; ---------------------------------------------------------------------------
0000A960                            WaterHeight:	incbin	misc\lz_heigh.bin
0000A968                            		even
0000A968                            ; ===========================================================================
0000A968                            
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            ; Labyrinth dynamic water routines
0000A968                            ; ---------------------------------------------------------------------------
0000A968                            
0000A968                            LZDynamicWater:				; XREF: LZWaterEffects
0000A968 7000                       		moveq	#0,d0
0000A96A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A96E D040                       		add.w	d0,d0
0000A970 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000A974 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000A978 7200                       		moveq	#0,d1
0000A97A 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000A97E 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000A982 9078 F648                  		sub.w	($FFFFF648).w,d0
0000A986 6700                       		beq.s	locret_3C5A
0000A988 6400                       		bcc.s	loc_3C56
0000A98A 4441                       		neg.w	d1
0000A98C                            
0000A98C                            loc_3C56:
0000A98C D378 F648                  		add.w	d1,($FFFFF648).w
0000A990                            
0000A990                            locret_3C5A:
0000A990 4E75                       		rts	
0000A992                            ; ===========================================================================
0000A992 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000A994 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000A996 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000A998 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000A99A                            ; ===========================================================================
0000A99A                            
0000A99A                            DynWater_LZ1:				; XREF: DynWater_Index
0000A99A 3038 F700                  		move.w	($FFFFF700).w,d0
0000A99E 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000A9A2 6600                       		bne.s	loc_3CD0
0000A9A4 323C 00B8                  		move.w	#$B8,d1
0000A9A8 0C40 0600                  		cmpi.w	#$600,d0
0000A9AC 6500                       		bcs.s	loc_3CB4
0000A9AE 323C 0108                  		move.w	#$108,d1
0000A9B2 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000A9B8 6500                       		bcs.s	loc_3CBA
0000A9BA 0C40 0C00                  		cmpi.w	#$C00,d0
0000A9BE 6500                       		bcs.s	loc_3CB4
0000A9C0 323C 0318                  		move.w	#$318,d1
0000A9C4 0C40 1080                  		cmpi.w	#$1080,d0
0000A9C8 6500                       		bcs.s	loc_3CB4
0000A9CA 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000A9D0 323C 05C8                  		move.w	#$5C8,d1
0000A9D4 0C40 1380                  		cmpi.w	#$1380,d0
0000A9D8 6500                       		bcs.s	loc_3CB4
0000A9DA 323C 03A8                  		move.w	#$3A8,d1
0000A9DE B278 F648                  		cmp.w	($FFFFF648).w,d1
0000A9E2 6600                       		bne.s	loc_3CB4
0000A9E4 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000A9EA                            
0000A9EA                            loc_3CB4:
0000A9EA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A9EE 4E75                       		rts	
0000A9F0                            ; ===========================================================================
0000A9F0                            
0000A9F0                            loc_3CBA:				; XREF: DynWater_LZ1
0000A9F0 0C40 0C80                  		cmpi.w	#$C80,d0
0000A9F4 65F4                       		bcs.s	loc_3CB4
0000A9F6 323C 00E8                  		move.w	#$E8,d1
0000A9FA 0C40 1500                  		cmpi.w	#$1500,d0
0000A9FE 65EA                       		bcs.s	loc_3CB4
0000AA00 323C 0108                  		move.w	#$108,d1
0000AA04 60E4                       		bra.s	loc_3CB4
0000AA06                            ; ===========================================================================
0000AA06                            
0000AA06                            loc_3CD0:				; XREF: DynWater_LZ1
0000AA06 5302                       		subq.b	#1,d2
0000AA08 6600                       		bne.s	locret_3CF4
0000AA0A 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000AA10 6400                       		bcc.s	locret_3CF4
0000AA12 323C 03A8                  		move.w	#$3A8,d1
0000AA16 0C40 1300                  		cmpi.w	#$1300,d0
0000AA1A 6500                       		bcs.s	loc_3CF0
0000AA1C 323C 0108                  		move.w	#$108,d1
0000AA20 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000AA26                            
0000AA26                            loc_3CF0:
0000AA26 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AA2A                            
0000AA2A                            locret_3CF4:
0000AA2A 4E75                       		rts	
0000AA2C                            ; ===========================================================================
0000AA2C                            
0000AA2C                            DynWater_LZ2:				; XREF: DynWater_Index
0000AA2C 3038 F700                  		move.w	($FFFFF700).w,d0
0000AA30 323C 0328                  		move.w	#$328,d1
0000AA34 0C40 0500                  		cmpi.w	#$500,d0
0000AA38 6500                       		bcs.s	loc_3D12
0000AA3A 323C 03C8                  		move.w	#$3C8,d1
0000AA3E 0C40 0B00                  		cmpi.w	#$B00,d0
0000AA42 6500                       		bcs.s	loc_3D12
0000AA44 323C 0428                  		move.w	#$428,d1
0000AA48                            
0000AA48                            loc_3D12:
0000AA48 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AA4C 4E75                       		rts	
0000AA4E                            ; ===========================================================================
0000AA4E                            
0000AA4E                            DynWater_LZ3:				; XREF: DynWater_Index
0000AA4E 3038 F700                  		move.w	($FFFFF700).w,d0
0000AA52 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000AA56 6600                       		bne.s	loc_3D5E
0000AA58 323C 0900                  		move.w	#$900,d1
0000AA5C 0C40 0600                  		cmpi.w	#$600,d0
0000AA60 6500                       		bcs.s	loc_3D54
0000AA62 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000AA68 6500                       		bcs.s	loc_3D54
0000AA6A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000AA70 6400                       		bcc.s	loc_3D54
0000AA72 323C 04C8                  		move.w	#$4C8,d1
0000AA76 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000AA7C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000AA82 303C 00B7                  		move.w	#$B7,d0
0000AA86 6100 EA36                  		bsr.w	Jmpto_PlaySound_Special ; play sound $B7 (rumbling)
0000AA8A                            
0000AA8A                            loc_3D54:
0000AA8A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AA8E 31C1 F648                  		move.w	d1,($FFFFF648).w
0000AA92 4E75                       		rts	
0000AA94                            ; ===========================================================================
0000AA94                            
0000AA94                            loc_3D5E:				; XREF: DynWater_LZ3
0000AA94 5302                       		subq.b	#1,d2
0000AA96 6600                       		bne.s	loc_3DA8
0000AA98 323C 04C8                  		move.w	#$4C8,d1
0000AA9C 0C40 0770                  		cmpi.w	#$770,d0
0000AAA0 6500                       		bcs.s	loc_3DA2
0000AAA2 323C 0308                  		move.w	#$308,d1
0000AAA6 0C40 1400                  		cmpi.w	#$1400,d0
0000AAAA 6500                       		bcs.s	loc_3DA2
0000AAAC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000AAB2 6700                       		beq.s	loc_3D8E
0000AAB4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000AABA 6400                       		bcc.s	loc_3D8E
0000AABC 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000AAC2 6400                       		bcc.s	loc_3DA2
0000AAC4                            
0000AAC4                            loc_3D8E:
0000AAC4 323C 0508                  		move.w	#$508,d1
0000AAC8 31C1 F648                  		move.w	d1,($FFFFF648).w
0000AACC 0C40 1770                  		cmpi.w	#$1770,d0
0000AAD0 6500                       		bcs.s	loc_3DA2
0000AAD2 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000AAD8                            
0000AAD8                            loc_3DA2:
0000AAD8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AADC 4E75                       		rts	
0000AADE                            ; ===========================================================================
0000AADE                            
0000AADE                            loc_3DA8:
0000AADE 5302                       		subq.b	#1,d2
0000AAE0 6600                       		bne.s	loc_3DD2
0000AAE2 323C 0508                  		move.w	#$508,d1
0000AAE6 0C40 1860                  		cmpi.w	#$1860,d0
0000AAEA 6500                       		bcs.s	loc_3DCC
0000AAEC 323C 0188                  		move.w	#$188,d1
0000AAF0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000AAF4 6400                       		bcc.s	loc_3DC6
0000AAF6 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000AAFA 6600                       		bne.s	loc_3DCC
0000AAFC                            
0000AAFC                            loc_3DC6:
0000AAFC 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000AB02                            
0000AB02                            loc_3DCC:
0000AB02 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AB06 4E75                       		rts	
0000AB08                            ; ===========================================================================
0000AB08                            
0000AB08                            loc_3DD2:
0000AB08 5302                       		subq.b	#1,d2
0000AB0A 6600                       		bne.s	loc_3E0E
0000AB0C 323C 0188                  		move.w	#$188,d1
0000AB10 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000AB14 6500                       		bcs.s	loc_3E04
0000AB16 323C 0900                  		move.w	#$900,d1
0000AB1A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000AB1E 6500                       		bcs.s	loc_3E04
0000AB20 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000AB26 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000AB2C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000AB32 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000AB38 4E75                       		rts	
0000AB3A                            ; ===========================================================================
0000AB3A                            
0000AB3A                            loc_3E04:
0000AB3A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AB3E 31C1 F648                  		move.w	d1,($FFFFF648).w
0000AB42 4E75                       		rts	
0000AB44                            ; ===========================================================================
0000AB44                            
0000AB44                            loc_3E0E:
0000AB44 0C40 1E00                  		cmpi.w	#$1E00,d0
0000AB48 6500                       		bcs.s	locret_3E1A
0000AB4A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000AB50                            
0000AB50                            locret_3E1A:
0000AB50 4E75                       		rts	
0000AB52                            ; ===========================================================================
0000AB52                            
0000AB52                            DynWater_SBZ3:				; XREF: DynWater_Index
0000AB52 323C 0228                  		move.w	#$228,d1
0000AB56 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000AB5C 6500                       		bcs.s	loc_3E2C
0000AB5E 323C 04C8                  		move.w	#$4C8,d1
0000AB62                            
0000AB62                            loc_3E2C:
0000AB62 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000AB66 4E75                       		rts
0000AB68                            
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            ; Labyrinth Zone "wind tunnels"	subroutine
0000AB68                            ; ---------------------------------------------------------------------------
0000AB68                            
0000AB68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB68                            
0000AB68                            
0000AB68                            LZWindTunnels:				; XREF: LZWaterEffects
0000AB68 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000AB6C 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000AB70 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000AB76 7000                       		moveq	#0,d0
0000AB78 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000AB7C E748                       		lsl.w	#3,d0
0000AB7E D4C0                       		adda.w	d0,a2
0000AB80 7200                       		moveq	#0,d1
0000AB82 4A38 FE11                  		tst.b	($FFFFFE11).w
0000AB86 6600                       		bne.s	loc_3E56
0000AB88 7201                       		moveq	#1,d1
0000AB8A 514A                       		subq.w	#8,a2
0000AB8C                            
0000AB8C                            loc_3E56:
0000AB8C 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB90                            
0000AB90                            LZWind_Loop:
0000AB90 3029 0008                  		move.w	8(a1),d0
0000AB94 B052                       		cmp.w	(a2),d0
0000AB96 6500 0000                  		bcs.w	loc_3EF4
0000AB9A B06A 0004                  		cmp.w	4(a2),d0
0000AB9E 6400 0000                  		bcc.w	loc_3EF4
0000ABA2 3429 000C                  		move.w	$C(a1),d2
0000ABA6 B46A 0002                  		cmp.w	2(a2),d2
0000ABAA 6500                       		bcs.s	loc_3EF4
0000ABAC B46A 0006                  		cmp.w	6(a2),d2
0000ABB0 6400                       		bcc.s	loc_3EF4
0000ABB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000ABB6 0200 003F                  		andi.b	#$3F,d0
0000ABBA 6600                       		bne.s	loc_3E90
0000ABBC 303C 00D0                  		move.w	#$D0,d0
0000ABC0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000ABC6                            
0000ABC6                            loc_3E90:
0000ABC6 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000ABCA 6600 0000                  		bne.w	locret_3F0A
0000ABCE 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0000ABD4 6400                       		bcc.s	loc_3F06
0000ABD6 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000ABDC 0440 0080                  		subi.w	#$80,d0
0000ABE0 B052                       		cmp.w	(a2),d0
0000ABE2 6400                       		bcc.s	LZWind_Move
0000ABE4 7002                       		moveq	#2,d0
0000ABE6 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000ABEC 6600                       		bne.s	loc_3EBA
0000ABEE 4440                       		neg.w	d0
0000ABF0                            
0000ABF0                            loc_3EBA:
0000ABF0 D169 000C                  		add.w	d0,$C(a1)
0000ABF4                            
0000ABF4                            LZWind_Move:
0000ABF4 5869 0008                  		addq.w	#4,8(a1)
0000ABF8 337C 0400 0010             		move.w	#$400,x_vel(a1)	; move Sonic horizontally
0000ABFE 337C 0000 0012             		move.w	#0,y_vel(a1)
0000AC04 137C 000F 001C             		move.b	#$F,anim(a1)	; use floating animation
0000AC0A 08E9 0001 0022             		bset	#1,status(a1)
0000AC10 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000AC16 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000AC18 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000AC1C                            
0000AC1C                            LZWind_MoveDown:
0000AC1C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000AC22 6700                       		beq.s	locret_3EF2	; if not, branch
0000AC24 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000AC28                            
0000AC28                            locret_3EF2:
0000AC28 4E75                       		rts	
0000AC2A                            ; ===========================================================================
0000AC2A                            
0000AC2A                            loc_3EF4:				; XREF: LZWindTunnels
0000AC2A 504A                       		addq.w	#8,a2
0000AC2C 51C9 FF62                  		dbf	d1,LZWind_Loop
0000AC30 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000AC34 6700                       		beq.s	locret_3F0A
0000AC36 137C 0000 001C             		move.b	#0,anim(a1)
0000AC3C                            
0000AC3C                            loc_3F06:
0000AC3C 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000AC40                            
0000AC40                            locret_3F0A:
0000AC40 4E75                       		rts	
0000AC42                            ; End of function LZWindTunnels
0000AC42                            
0000AC42                            ; ===========================================================================
0000AC42 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000AC4A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000AC5C 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000AC6A                            					; XREF: LZWindTunnels
0000AC6A                            		even
0000AC6A                            
0000AC6A                            ; ---------------------------------------------------------------------------
0000AC6A                            ; Labyrinth Zone water slide subroutine
0000AC6A                            ; ---------------------------------------------------------------------------
0000AC6A                            
0000AC6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC6A                            
0000AC6A                            
0000AC6A                            LZWaterSlides:				; XREF: LZWaterEffects
0000AC6A 43F8 D000                  		lea	($FFFFD000).w,a1
0000AC6E 0829 0001 0022             		btst	#1,$22(a1)
0000AC74 6600                       		bne.s	loc_3F6A
0000AC76 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
0000AC7A 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
0000AC7E 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0000AC82 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0000AC84 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0000AC86 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0000AC8A D041                       		add.w	d1,d0					; MJ: add together
0000AC8C 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
0000AC90 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
0000AC94 45FA 0000                  		lea	Slide_002(pc),a2
0000AC98 7214                       		moveq	#$14,d1					; MJ: repeat times
0000AC9A                            
0000AC9A                            loc_3F62:
0000AC9A B01A                       		cmp.b	(a2)+,d0
0000AC9C 57C9 FFFC                  		dbeq	d1,loc_3F62
0000ACA0 6700                       		beq.s	LZSlide_Move
0000ACA2                            
0000ACA2                            loc_3F6A:
0000ACA2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000ACA6 6700                       		beq.s	locret_3F7A
0000ACA8 337C 0005 003E             		move.w	#5,$3E(a1)
0000ACAE 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000ACB2                            
0000ACB2                            locret_3F7A:
0000ACB2 4E75                       		rts	
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            LZSlide_Move:				; XREF: LZWaterSlides
0000ACB4 0C41 0003                  		cmpi.w	#3,d1
0000ACB8 6400                       		bcc.s	loc_3F84
0000ACBA 4E71                       		nop	
0000ACBC                            
0000ACBC                            loc_3F84:
0000ACBC 08A9 0000 0022             		bclr	#0,$22(a1)
0000ACC2 103B 1000                  		move.b	Slide_001(pc,d1.w),d0
0000ACC6 1340 0020                  		move.b	d0,inertia(a1)
0000ACCA 6A00                       		bpl.s	loc_3F9A
0000ACCC 08E9 0000 0022             		bset	#0,$22(a1)
0000ACD2                            
0000ACD2                            loc_3F9A:
0000ACD2 4229 0015                  		clr.b	$15(a1)
0000ACD6 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000ACDC 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000ACE2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000ACE6 0200 001F                  		andi.b	#$1F,d0
0000ACEA 6600                       		bne.s	locret_3FBE
0000ACEC 303C 00D0                  		move.w	#$D0,d0
0000ACF0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play water sound
0000ACF6                            
0000ACF6                            locret_3FBE:
0000ACF6 4E75                       		rts	
0000ACF8                            ; End of function LZWaterSlides
0000ACF8                            
0000ACF8                            ; ===========================================================================
0000ACF8 F5                         Slide_001:	dc.b		    $F5
0000ACF9 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
0000ACFD F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
0000AD01 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
0000AD05 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
0000AD09 0A0A 0A0A                  		dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
0000AD0D 00                         		align 2
0000AD0E 0506 090A                  Slide_002:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
0000AD12 FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
0000AD16 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
0000AD1A 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
0000AD1E 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
0000AD22 17                         		dc.b	$17
0000AD23 00                         		align 2
0000AD24                            
0000AD24                            ; ---------------------------------------------------------------------------
0000AD24                            ; Subroutine to	move Sonic in demo mode
0000AD24                            ; ---------------------------------------------------------------------------
0000AD24                            
0000AD24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD24                            
0000AD24                            
0000AD24                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000AD24 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000AD28 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000AD2A 4E75                       		rts	
0000AD2C                            ; ===========================================================================
0000AD2C                            
0000AD2C                            ; This is an unused subroutine for recording a demo
0000AD2C                            
0000AD2C                            MoveDemo_Record:
0000AD2C 43F9 0008 0000             		lea	($80000).l,a1
0000AD32 3038 F790                  		move.w	($FFFFF790).w,d0
0000AD36 D2C0                       		adda.w	d0,a1
0000AD38 1038 F604                  		move.b	($FFFFF604).w,d0
0000AD3C B011                       		cmp.b	(a1),d0
0000AD3E 6600                       		bne.s	loc_3FFA
0000AD40 5229 0001                  		addq.b	#1,1(a1)
0000AD44 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000AD4A 6700                       		beq.s	loc_3FFA
0000AD4C 4E75                       		rts	
0000AD4E                            ; ===========================================================================
0000AD4E                            
0000AD4E                            loc_3FFA:				; XREF: MoveDemo_Record
0000AD4E 1340 0002                  		move.b	d0,2(a1)
0000AD52 137C 0000 0003             		move.b	#0,3(a1)
0000AD58 5478 F790                  		addq.w	#2,($FFFFF790).w
0000AD5C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000AD62 4E75                       		rts	
0000AD64                            ; ===========================================================================
0000AD64                            
0000AD64                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000AD64 11FC 001C F600             		move.b	#$1C,($FFFFF600).w
0000AD6A 4A38 F604                  		tst.b	($FFFFF604).w
0000AD6E 6A00                       		bpl.s	loc_4022
0000AD70 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000AD74 6B00                       		bmi.s	loc_4022
0000AD76 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000AD7C                            
0000AD7C                            loc_4022:
0000AD7C 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000AD82 7000                       		moveq	#0,d0
0000AD84 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000AD88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000AD8E 6600                       		bne.s	loc_4038
0000AD90 7006                       		moveq	#6,d0
0000AD92                            
0000AD92                            loc_4038:
0000AD92 E548                       		lsl.w	#2,d0
0000AD94 2271 0000                  		movea.l	(a1,d0.w),a1
0000AD98 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000AD9C 6A00                       		bpl.s	loc_4056
0000AD9E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000ADA4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000ADA8 5340                       		subq.w	#1,d0
0000ADAA E548                       		lsl.w	#2,d0
0000ADAC 2271 0000                  		movea.l	(a1,d0.w),a1
0000ADB0                            
0000ADB0                            loc_4056:
0000ADB0 3038 F790                  		move.w	($FFFFF790).w,d0
0000ADB4 D2C0                       		adda.w	d0,a1
0000ADB6 1011                       		move.b	(a1),d0
0000ADB8 41F8 F604                  		lea	($FFFFF604).w,a0
0000ADBC 1200                       		move.b	d0,d1
0000ADBE 1428 FFFE                  		move.b	-2(a0),d2
0000ADC2 B500                       		eor.b	d2,d0
0000ADC4 10C1                       		move.b	d1,(a0)+
0000ADC6 C001                       		and.b	d1,d0
0000ADC8 10C0                       		move.b	d0,(a0)+
0000ADCA 5338 F792                  		subq.b	#1,($FFFFF792).w
0000ADCE 6400                       		bcc.s	locret_407E
0000ADD0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000ADD6 5478 F790                  		addq.w	#2,($FFFFF790).w
0000ADDA                            
0000ADDA                            locret_407E:
0000ADDA 4E75                       		rts	
0000ADDC                            ; End of function MoveSonicInDemo
0000ADDC                            
0000ADDC                            ; ===========================================================================
0000ADDC                            ; ---------------------------------------------------------------------------
0000ADDC                            ; Demo sequence	pointers
0000ADDC                            ; ---------------------------------------------------------------------------
0000ADDC                            Demo_Index:
0000ADDC                            	include "_inc\Demo pointers for intro.asm"
0000ADDC                            ; ---------------------------------------------------------------------------
0000ADDC                            ; Demo sequence	pointers
0000ADDC                            ; ---------------------------------------------------------------------------
0000ADDC 0000 0000                  	dc.l Demo_GHZ
0000ADE0 0000 0000                  	dc.l Demo_GHZ
0000ADE4 0000 0000                  	dc.l Demo_MZ
0000ADE8 0000 0000                  	dc.l Demo_MZ
0000ADEC 0000 0000                  	dc.l Demo_SYZ
0000ADF0 0000 0000                  	dc.l Demo_SYZ
0000ADF4 0000 0000                  	dc.l Demo_SS
0000ADF8 0000 0000                  	dc.l Demo_SS
0000ADF8 0000 0000                  	dc.l Demo_SS
0000ADFC                            
0000ADFC                            Demo_EndIndex:
0000ADFC                            	include "_inc\Demo pointers for ending.asm"
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC                            ; Demo (ending) sequence pointers
0000ADFC                            ; ---------------------------------------------------------------------------
0000ADFC 0000 0000                  	dc.l Demo_EndGHZ1
0000AE00 0000 0000                  	dc.l Demo_EndMZ
0000AE04 0000 0000                  	dc.l Demo_EndSYZ
0000AE08 0000 0000                  	dc.l Demo_EndLZ
0000AE0C 0000 0000                  	dc.l Demo_EndSLZ
0000AE10 0000 0000                  	dc.l Demo_EndSBZ1
0000AE14 0000 0000                  	dc.l Demo_EndSBZ2
0000AE18 0000 0000                  	dc.l Demo_EndGHZ2
0000AE18 0000 0000                  	dc.l Demo_EndGHZ2
0000AE1C                            
0000AE1C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000AE2C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000AE3C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000AE4C                            		even
0000AE4C                            
0000AE4C                            ; ---------------------------------------------------------------------------
0000AE4C                            ; Collision index loading subroutine
0000AE4C                            ; ---------------------------------------------------------------------------
0000AE4C                            
0000AE4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE4C                            
0000AE4C                            
0000AE4C                            ColIndexLoad:				; XREF: Level
0000AE4C 7000                       		moveq	#0,d0
0000AE4E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000AE52 E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
0000AE54 21FB 0000 FFE2             		move.l	ColPointers(pc,d0.w),($FFFFFFE2).w	; MJ: get first collision set
0000AE5A 5840                       		add.w	#$04,d0					; MJ: increase to next location
0000AE5C 21FB 0000 FFE6             		move.l	ColPointers(pc,d0.w),($FFFFFFE6).w	; MJ: get second collision set
0000AE62 4E75                       		rts	
0000AE64                            ; End of function ColIndexLoad
0000AE64                            
0000AE64                            ; ===========================================================================
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            ; Collision index pointers for Act 1
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            ColPointers:
0000AE64                            	include "_inc\Collision index pointers.asm"
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64                            ; Collision index pointers
0000AE64                            ; ---------------------------------------------------------------------------
0000AE64 0000 0000                  	dc.l Col_GHZ_1
0000AE68 0000 0000                  	dc.l Col_GHZ_2
0000AE6C 0000 0000                  	dc.l Col_LZ_1
0000AE70 0000 0000                  	dc.l Col_LZ_2
0000AE74 0000 0000                  	dc.l Col_MZ_1
0000AE78 0000 0000                  	dc.l Col_MZ_2
0000AE7C 0000 0000                  	dc.l Col_SLZ_1
0000AE80 0000 0000                  	dc.l Col_SLZ_2
0000AE84 0000 0000                  	dc.l Col_SYZ_1
0000AE88 0000 0000                  	dc.l Col_SYZ_2
0000AE8C 0000 0000                  	dc.l Col_SBZ_1
0000AE90 0000 0000                  	dc.l Col_SBZ_2
0000AE94 0000 0000                  	dc.l Col_ABZ_1
0000AE98 0000 0000                  	dc.l Col_ABZ_2
0000AE98 0000 0000                  	dc.l Col_ABZ_2
0000AE9C                             
0000AE9C                            ; ---------------------------------------------------------------------------
0000AE9C                            ; Oscillating number subroutine
0000AE9C                            ; ---------------------------------------------------------------------------
0000AE9C                            
0000AE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE9C                            
0000AE9C                            
0000AE9C                            OscillateNumInit:			; XREF: Level
0000AE9C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AEA0 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000AEA6 7220                       		moveq	#$20,d1
0000AEA8                            
0000AEA8                            Osc_Loop:
0000AEA8 32DA                       		move.w	(a2)+,(a1)+
0000AEAA 51C9 FFFC                  		dbf	d1,Osc_Loop
0000AEAE 4E75                       		rts	
0000AEB0                            ; End of function OscillateNumInit
0000AEB0                            
0000AEB0                            ; ===========================================================================
0000AEB0 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000AEB4 0000 0080                  		dc.w 0,	$80
0000AEB8 0000 0080                  		dc.w 0,	$80
0000AEBC 0000 0080                  		dc.w 0,	$80
0000AEC0 0000 0080                  		dc.w 0,	$80
0000AEC4 0000 0080                  		dc.w 0,	$80
0000AEC8 0000 0080                  		dc.w 0,	$80
0000AECC 0000 0080                  		dc.w 0,	$80
0000AED0 0000 0080                  		dc.w 0,	$80
0000AED4 0000 50F0                  		dc.w 0,	$50F0
0000AED8 011E 2080                  		dc.w $11E, $2080
0000AEDC 00B4 3080                  		dc.w $B4, $3080
0000AEE0 010E 5080                  		dc.w $10E, $5080
0000AEE4 01C2 7080                  		dc.w $1C2, $7080
0000AEE8 0276 0080                  		dc.w $276, $80
0000AEEC 0000 0080                  		dc.w 0,	$80
0000AEF0 0000                       		dc.w 0
0000AEF2                            		even
0000AEF2                            
0000AEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEF2                            
0000AEF2                            
0000AEF2                            OscillateNumDo:				; XREF: Level
0000AEF2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AEF8 6400                       		bcc.s	locret_41C4
0000AEFA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AEFE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000AF04 3619                       		move.w	(a1)+,d3
0000AF06 720F                       		moveq	#$F,d1
0000AF08                            
0000AF08                            loc_4184:
0000AF08 341A                       		move.w	(a2)+,d2
0000AF0A 381A                       		move.w	(a2)+,d4
0000AF0C 0303                       		btst	d1,d3
0000AF0E 6600                       		bne.s	loc_41A4
0000AF10 3029 0002                  		move.w	2(a1),d0
0000AF14 D042                       		add.w	d2,d0
0000AF16 3340 0002                  		move.w	d0,2(a1)
0000AF1A D151                       		add.w	d0,0(a1)
0000AF1C B811                       		cmp.b	0(a1),d4
0000AF1E 6200                       		bhi.s	loc_41BA
0000AF20 03C3                       		bset	d1,d3
0000AF22 6000                       		bra.s	loc_41BA
0000AF24                            ; ===========================================================================
0000AF24                            
0000AF24                            loc_41A4:				; XREF: OscillateNumDo
0000AF24 3029 0002                  		move.w	2(a1),d0
0000AF28 9042                       		sub.w	d2,d0
0000AF2A 3340 0002                  		move.w	d0,2(a1)
0000AF2E D151                       		add.w	d0,0(a1)
0000AF30 B811                       		cmp.b	0(a1),d4
0000AF32 6300                       		bls.s	loc_41BA
0000AF34 0383                       		bclr	d1,d3
0000AF36                            
0000AF36                            loc_41BA:
0000AF36 5849                       		addq.w	#4,a1
0000AF38 51C9 FFCE                  		dbf	d1,loc_4184
0000AF3C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000AF40                            
0000AF40                            locret_41C4:
0000AF40 4E75                       		rts	
0000AF42                            ; End of function OscillateNumDo
0000AF42                            
0000AF42                            ; ===========================================================================
0000AF42 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000AF46 0002 0018                  		dc.w 2,	$18
0000AF4A 0002 0020                  		dc.w 2,	$20
0000AF4E 0002 0030                  		dc.w 2,	$30
0000AF52 0004 0020                  		dc.w 4,	$20
0000AF56 0008 0008                  		dc.w 8,	8
0000AF5A 0008 0040                  		dc.w 8,	$40
0000AF5E 0004 0040                  		dc.w 4,	$40
0000AF62 0002 0050                  		dc.w 2,	$50
0000AF66 0002 0050                  		dc.w 2,	$50
0000AF6A 0002 0020                  		dc.w 2,	$20
0000AF6E 0003 0030                  		dc.w 3,	$30
0000AF72 0005 0050                  		dc.w 5,	$50
0000AF76 0007 0070                  		dc.w 7,	$70
0000AF7A 0002 0010                  		dc.w 2,	$10
0000AF7E 0002 0010                  		dc.w 2,	$10
0000AF82                            		even
0000AF82                            
0000AF82                            
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82                            
0000AF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF82                            
0000AF82                            
0000AF82                            ChangeRingFrame:			; XREF: Level
0000AF82 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000AF86 6A00                       		bpl.s	loc_421C
0000AF88 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000AF8E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000AF92 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000AF98                            
0000AF98                            loc_421C:
0000AF98 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000AF9C 6A00                       		bpl.s	loc_4232
0000AF9E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000AFA4 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000AFA8 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000AFAE                            
0000AFAE                            loc_4232:
0000AFAE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000AFB2 6A00                       		bpl.s	loc_4250
0000AFB4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000AFBA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000AFBE 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000AFC4 6500                       		bcs.s	loc_4250
0000AFC6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000AFCC                            
0000AFCC                            loc_4250:
0000AFCC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AFD0 6700                       		beq.s	locret_4272
0000AFD2 7000                       		moveq	#0,d0
0000AFD4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000AFD8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000AFDC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000AFE0 EF58                       		rol.w	#7,d0
0000AFE2 0240 0003                  		andi.w	#3,d0
0000AFE6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000AFEA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000AFEE                            
0000AFEE                            locret_4272:
0000AFEE 4E75                       		rts	
0000AFF0                            ; End of function ChangeRingFrame
0000AFF0                            
0000AFF0                            ; ---------------------------------------------------------------------------
0000AFF0                            ; End-of-act signpost pattern loading subroutine
0000AFF0                            ; ---------------------------------------------------------------------------
0000AFF0                            
0000AFF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AFF0                            
0000AFF0                            
0000AFF0                            SignpostArtLoad:			; XREF: Level
0000AFF0 4A78 FE08                  		tst.w	($FFFFFE08).w		; is debug mode	being used?
0000AFF4 6600 0000                  		bne.w	Signpost_Exit		; if yes, branch
0000AFF8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w	; is act number 02 (act 3)?
0000AFFE 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000B000 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000B008 4EB9 0000 0000             		jsr	Save_Progress
0000B00E 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0000B016 3038 F700                  		move.w	($FFFFF700).w,d0
0000B01A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000B01E 0441 0100                  		subi.w	#$100,d1
0000B022 B041                       		cmp.w	d1,d0				; has Sonic reached the	edge of	the level?
0000B024 6D00                       		blt.s	Signpost_Exit		; if not, branch
0000B026 4A38 FE1E                  		tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0000B02A 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000B02C B278 F728                  		cmp.w	($FFFFF728).w,d1
0000B030 6700                       		beq.s	Signpost_Exit
0000B032 31C1 F728                  		move.w	d1,($FFFFF728).w	; move	left boundary to current screen	position
0000B036 7012                       		moveq	#$12,d0
0000B038 4EF8 3744                  		jmp	LoadPLC2	; load signpost	patterns
0000B03C                            ; ===========================================================================
0000B03C                            
0000B03C                            Signpost_Exit:
0000B03C 4E75                       		rts	
0000B03E                            ; End of function SignpostArtLoad
0000B03E                            
0000B03E                            ; ===========================================================================
0000B03E                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000B0BE                            Demo_MZ:	incbin	demodata\i_mz.bin
0000B1EE                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000B26E                            Demo_SS:	incbin	demodata\i_ss.bin
0000B36E                            ; ===========================================================================
0000B36E                            
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            ; Special Stage
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            
0000B36E                            SpecialStage:				; XREF: GameModeArray
0000B36E 303C 00AF                  		move.w	#$AF,d0
0000B372 6100 E14A                  		bsr.w	Jmpto_PlaySound_Special ; play special stage entry sound
0000B376                            
0000B376 4EB8 4804                  		jsr	Pal_MakeFlash
0000B37A 46FC 2700                  		disable_ints
0000B37E 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B384 3CBC 8B03                  		move.w	#$8B03,(a6)
0000B388 3CBC 8004                  		move.w	#$8004,(a6)
0000B38C 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000B392 3CBC 9011                  		move.w	#$9011,(a6)
0000B396 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B39A 0200 00BF                  		andi.b	#$BF,d0
0000B39E 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B3A4 4EB8 3084                  		jsr	ClearScreen
0000B3A8 46FC 2300                  		enable_ints
0000B3AC 4BF9 00C0 0004             		lea	($C00004).l,a5
0000B3B2 3ABC 8F01                  		move.w	#$8F01,(a5)
0000B3B6 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000B3BC 3ABC 9780                  		move.w	#$9780,(a5)
0000B3C0 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000B3C6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000B3CE                            
0000B3CE                            loc_463C:
0000B3CE 3215                       		move.w	(a5),d1
0000B3D0 0801 0001                  		btst	#1,d1
0000B3D4 66F8                       		bne.s	loc_463C
0000B3D6 3ABC 8F02                  		move.w	#$8F02,(a5)
0000B3DA 4EB9 0000 0000             		jsr	SS_BGLoad
0000B3E0 7014                       		moveq	#$14,d0
0000B3E2 4EB8 3888                  		jsr	RunPLC_ROM	; load special stage patterns
0000B3E6 43F8 D000                  		lea	($FFFFD000).w,a1
0000B3EA 7000                       		moveq	#0,d0
0000B3EC 323C 07FF                  		move.w	#$7FF,d1
0000B3F0                            
0000B3F0                            SS_ClrObjRam:
0000B3F0 22C0                       		move.l	d0,(a1)+
0000B3F2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000B3F6                            
0000B3F6 43F8 F700                  		lea	($FFFFF700).w,a1
0000B3FA 7000                       		moveq	#0,d0
0000B3FC 323C 003F                  		move.w	#$3F,d1
0000B400                            
0000B400                            SS_ClrRam:
0000B400 22C0                       		move.l	d0,(a1)+
0000B402 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000B406                            
0000B406 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000B40A 7000                       		moveq	#0,d0
0000B40C 323C 0027                  		move.w	#$27,d1
0000B410                            
0000B410                            SS_ClrRam2:
0000B410 22C0                       		move.l	d0,(a1)+
0000B412 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000B416                            
0000B416 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000B41A 7000                       		moveq	#0,d0
0000B41C 323C 007F                  		move.w	#$7F,d1
0000B420                            
0000B420                            SS_ClrNemRam:
0000B420 22C0                       		move.l	d0,(a1)+
0000B422 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000B426                            
0000B426 4238 F64E                  		clr.b	($FFFFF64E).w
0000B42A 4278 FE02                  		clr.w	($FFFFFE02).w
0000B42E 700A                       		moveq	#$A,d0
0000B430 4EB8 4986                  		jsr	PalLoad1	; load special stage pallet
0000B434 4EB9 0000 0000             		jsr	SS_Load
0000B43A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000B442 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000B44A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000B450 11FC 00FF F784             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000B456 6100 0000                  		bsr.w	PalCycle_SS
0000B45A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000B45E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000B464 303C 0015                  		move.w	#$15,d0
0000B468 4EB8 3212                  		jsr	PlaySound	; play special stage BG	music
0000B46C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000B472 43F9 0000 ADDC             		lea	(Demo_Index).l,a1
0000B478 7006                       		moveq	#6,d0
0000B47A E548                       		lsl.w	#2,d0
0000B47C 2271 0000                  		movea.l	(a1,d0.w),a1
0000B480 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000B486 5338 F792                  		subq.b	#1,($FFFFF792).w
0000B48A 4278 FE20                  		clr.w	($FFFFFE20).w
0000B48E 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000B492 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000B498 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000B49E 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000B4A2 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B4A4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000B4AA 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B4AC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000B4B2                            
0000B4B2                            SS_NoDebug:
0000B4B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B4B6 0000 0040                  		ori.b	#$40,d0
0000B4BA 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B4C0 4EB8 4738                  		jsr	Pal_MakeWhite
0000B4C4                            
0000B4C4                            ; ---------------------------------------------------------------------------
0000B4C4                            ; Main Special Stage loop
0000B4C4                            ; ---------------------------------------------------------------------------
0000B4C4                            
0000B4C4                            SS_MainLoop:
0000B4C4 4EB8 3310                  		jsr	PauseGame
0000B4C8 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000B4CE 6100 DA2E                  		bsr.w	DelayProgram
0000B4D2 6100 F850                  		bsr.w	MoveSonicInDemo
0000B4D6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B4DC 4EB9 0000 0000             		jsr	ObjectsLoad
0000B4E2 4EB9 0000 0000             		jsr	BuildSprites
0000B4E8 11FC 0021 D380             		move.b	#$21,($FFFFD380).w
0000B4EE 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B4F4 6100 0000                  		bsr.w	SS_BGAnimate
0000B4F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B4FC 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000B4FE 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000B502 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000B506                            
0000B506                            SS_ChkEnd:
0000B506 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000B50C 6700 FFB6                  		beq.w	SS_MainLoop	; if yes, branch
0000B510                            
0000B510                            ;		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B510                            ;		bne.w	SS_ToSegaScreen	; if yes, branch
0000B510 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000B516 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000B51C 6500                       		bcs.s	SS_End		; if not, branch
0000B51E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000B522                            
0000B522                            SS_End:
0000B522 31FC 003C FC20             		move.w	#60,($FFFFFC20).w ; set	delay time to 1	second
0000B528 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000B52E 4278 F794                  		clr.w	($FFFFF794).w
0000B532                            
0000B532                            SS_EndLoop:
0000B532 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000B538 6100 D9C4                  		bsr.w	DelayProgram
0000B53C 6100 F7E6                  		bsr.w	MoveSonicInDemo
0000B540 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B546 4EB9 0000 0000             		jsr	ObjectsLoad
0000B54C 4EB9 0000 0000             		jsr	BuildSprites
0000B552 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B558 6100 0000                  		bsr.w	SS_BGAnimate
0000B55C 5378 F794                  		subq.w	#1,($FFFFF794).w
0000B560 6A00                       		bpl.s	loc_47D4
0000B562 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000B568 4EB8 4826                  		jsr	Pal_ToWhite
0000B56C                            
0000B56C                            loc_47D4:
0000B56C 4A78 FC20                  		tst.w	($FFFFFC20).w
0000B570 66C0                       		bne.s	SS_EndLoop
0000B572                            
0000B572 46FC 2700                  		move	#$2700,sr
0000B576 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B57C 3CBC 8230                  		move.w	#$8230,(a6)
0000B580 3CBC 8407                  		move.w	#$8407,(a6)
0000B584 3CBC 9001                  		move.w	#$9001,(a6)
0000B588 4EB8 3084                  		jsr	ClearScreen
0000B58C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000B596 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000B59C 4EB8 35B2                  		jsr	NemDec
0000B5A0 4EB9 0000 0000             		jsr	Hud_Base
0000B5A6 4278 C800                  		clr.w	($FFFFC800).w
0000B5AA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000B5B2 46FC 2300                  		move	#$2300,sr
0000B5B6 7011                       		moveq	#$11,d0
0000B5B8 4EB8 499E                  		jsr	PalLoad2	; load results screen pallet
0000B5BC 7000                       		moveq	#0,d0
0000B5BE 4EB8 3744                  		jsr	LoadPLC2
0000B5C2                            ;		jsr	LoadLivesCounterArt
0000B5C2 701B                       		moveq	#$1B,d0
0000B5C4 4EB8 3712                  		jsr	LoadPLC		; load results screen patterns
0000B5C8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000B5CE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000B5D4 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000B5D8 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000B5DC 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000B5E0 303C 0029                  		move.w	#$29,d0
0000B5E4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000B5EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000B5EE 7000                       		moveq	#0,d0
0000B5F0 323C 07FF                  		move.w	#$7FF,d1
0000B5F4                            
0000B5F4                            SS_EndClrObjRam:
0000B5F4 22C0                       		move.l	d0,(a1)+
0000B5F6 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000B5FA                            
0000B5FA 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000B600                            
0000B600                            SS_NormalExit:
0000B600 4EB8 3310                  		jsr	PauseGame
0000B604 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000B60A 6100 D8F2                  		bsr.w	DelayProgram
0000B60E 4EB9 0000 0000             		jsr	ObjectsLoad
0000B614 4EB9 0000 0000             		jsr	BuildSprites
0000B61A 4EB8 377E                  		jsr	RunPLC_RAM
0000B61E 4A78 FE02                  		tst.w	($FFFFFE02).w
0000B622 67DC                       		beq.s	SS_NormalExit
0000B624 4AB8 F680                  		tst.l	($FFFFF680).w
0000B628 66D6                       		bne.s	SS_NormalExit
0000B62A 303C 00AF                  		move.w	#$AF,d0
0000B62E 4EB8 325C                  		jsr	PlaySound_Special ; play special stage exit sound
0000B632 4EB8 4804                  		jsr	Pal_MakeFlash
0000B636 4E75                       		rts	
0000B638                            ; ===========================================================================
0000B638                            
0000B638                            SS_ToSegaScreen:
0000B638 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000B63E 4E75                       		rts
0000B640                            
0000B640                            ; ---------------------------------------------------------------------------
0000B640                            ; Special stage	background loading subroutine
0000B640                            ; ---------------------------------------------------------------------------
0000B640                            
0000B640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B640                            
0000B640                            
0000B640                            SS_BGLoad:				; XREF: SpecialStage
0000B640 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B646 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000B64C 303C 4051                  		move.w	#$4051,d0
0000B650 4EB8 38BA                  		jsr	EniDec
0000B654 263C 5000 0001             		move.l	#$50000001,d3
0000B65A 45F9 00FF 0080             		lea	($FF0080).l,a2
0000B660 7E06                       		moveq	#6,d7
0000B662                            
0000B662                            loc_48BE:
0000B662 2003                       		move.l	d3,d0
0000B664 7C03                       		moveq	#3,d6
0000B666 7800                       		moveq	#0,d4
0000B668 0C47 0003                  		cmpi.w	#3,d7
0000B66C 6400                       		bcc.s	loc_48CC
0000B66E 7801                       		moveq	#1,d4
0000B670                            
0000B670                            loc_48CC:
0000B670 7A07                       		moveq	#7,d5
0000B672                            
0000B672                            loc_48CE:
0000B672 224A                       		movea.l	a2,a1
0000B674 0A04 0001                  		eori.b	#1,d4
0000B678 6600                       		bne.s	loc_48E2
0000B67A 0C47 0006                  		cmpi.w	#6,d7
0000B67E 6600                       		bne.s	loc_48F2
0000B680 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B686                            
0000B686                            loc_48E2:
0000B686 48E7 F800                  		movem.l	d0-d4,-(sp)
0000B68A 7207                       		moveq	#7,d1
0000B68C 7407                       		moveq	#7,d2
0000B68E 4EB8 34BC                  		jsr	ShowVDPGraphics
0000B692 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000B696                            
0000B696                            loc_48F2:
0000B696 0680 0010 0000             		addi.l	#$100000,d0
0000B69C 51CD FFD4                  		dbf	d5,loc_48CE
0000B6A0 0680 0380 0000             		addi.l	#$3800000,d0
0000B6A6 0A04 0001                  		eori.b	#1,d4
0000B6AA 51CE FFC4                  		dbf	d6,loc_48CC
0000B6AE 0683 1000 0000             		addi.l	#$10000000,d3
0000B6B4 6A00                       		bpl.s	loc_491C
0000B6B6 4843                       		swap	d3
0000B6B8 0683 0000 C000             		addi.l	#$C000,d3
0000B6BE 4843                       		swap	d3
0000B6C0                            
0000B6C0                            loc_491C:
0000B6C0 D4FC 0080                  		adda.w	#$80,a2
0000B6C4 51CF FF9C                  		dbf	d7,loc_48BE
0000B6C8 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B6CE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000B6D4 303C 4000                  		move.w	#$4000,d0
0000B6D8 4EB8 38BA                  		jsr	EniDec
0000B6DC 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B6E2 203C 4000 0003             		move.l	#$40000003,d0
0000B6E8 723F                       		moveq	#$3F,d1
0000B6EA 741F                       		moveq	#$1F,d2
0000B6EC 4EB8 34BC                  		jsr	ShowVDPGraphics
0000B6F0 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B6F6 203C 5000 0003             		move.l	#$50000003,d0
0000B6FC 723F                       		moveq	#$3F,d1
0000B6FE 743F                       		moveq	#$3F,d2
0000B700 4EB8 34BC                  		jsr	ShowVDPGraphics
0000B704 4E75                       		rts	
0000B706                            ; End of function SS_BGLoad
0000B706                            
0000B706                            ; ---------------------------------------------------------------------------
0000B706                            ; Pallet cycling routine - special stage
0000B706                            ; ---------------------------------------------------------------------------
0000B706                            
0000B706                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B706                            
0000B706                            
0000B706                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000B706 4A78 F63A                  		tst.w	($FFFFF63A).w
0000B70A 6600                       		bne.s	locret_49E6
0000B70C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000B710 6A00                       		bpl.s	locret_49E6
0000B712 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B718 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000B71C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000B720 0240 001F                  		andi.w	#$1F,d0
0000B724 E548                       		lsl.w	#2,d0
0000B726 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000B72C D0C0                       		adda.w	d0,a0
0000B72E 1018                       		move.b	(a0)+,d0
0000B730 6A00                       		bpl.s	loc_4992
0000B732 303C 01FF                  		move.w	#$1FF,d0
0000B736                            
0000B736                            loc_4992:
0000B736 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000B73A 7000                       		moveq	#0,d0
0000B73C 1018                       		move.b	(a0)+,d0
0000B73E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000B742 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000B748 43F1 0000                  		lea	(a1,d0.w),a1
0000B74C 303C 8200                  		move.w	#-$7E00,d0
0000B750 1019                       		move.b	(a1)+,d0
0000B752 3C80                       		move.w	d0,(a6)
0000B754 11D1 F616                  		move.b	(a1),($FFFFF616).w
0000B758 303C 8400                  		move.w	#-$7C00,d0
0000B75C 1018                       		move.b	(a0)+,d0
0000B75E 3C80                       		move.w	d0,(a6)
0000B760 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000B76A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000B772 7000                       		moveq	#0,d0
0000B774 1018                       		move.b	(a0)+,d0
0000B776 6B00                       		bmi.s	loc_49E8
0000B778 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000B77E D2C0                       		adda.w	d0,a1
0000B780 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000B784 24D9                       		move.l	(a1)+,(a2)+
0000B786 24D9                       		move.l	(a1)+,(a2)+
0000B788 24D9                       		move.l	(a1)+,(a2)+
0000B78A                            
0000B78A                            locret_49E6:
0000B78A 4E75                       		rts	
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            loc_49E8:				; XREF: PalCycle_SS
0000B78C 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000B790 0C40 008A                  		cmpi.w	#$8A,d0
0000B794 6500                       		bcs.s	loc_49F4
0000B796 5241                       		addq.w	#1,d1
0000B798                            
0000B798                            loc_49F4:
0000B798 C2FC 002A                  		mulu.w	#$2A,d1
0000B79C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000B7A2 D2C1                       		adda.w	d1,a1
0000B7A4 0240 007F                  		andi.w	#$7F,d0
0000B7A8 0880 0000                  		bclr	#0,d0
0000B7AC 6700                       		beq.s	loc_4A18
0000B7AE 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000B7B2 24D1                       		move.l	(a1),(a2)+
0000B7B4 24E9 0004                  		move.l	4(a1),(a2)+
0000B7B8 24E9 0008                  		move.l	8(a1),(a2)+
0000B7BC                            
0000B7BC                            loc_4A18:
0000B7BC D2FC 000C                  		adda.w	#$C,a1
0000B7C0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000B7C4 0C40 000A                  		cmpi.w	#$A,d0
0000B7C8 6500                       		bcs.s	loc_4A2E
0000B7CA 0440 000A                  		subi.w	#$A,d0
0000B7CE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000B7D2                            
0000B7D2                            loc_4A2E:
0000B7D2 3200                       		move.w	d0,d1
0000B7D4 D040                       		add.w	d0,d0
0000B7D6 D041                       		add.w	d1,d0
0000B7D8 D2C0                       		adda.w	d0,a1
0000B7DA 24D9                       		move.l	(a1)+,(a2)+
0000B7DC 34D9                       		move.w	(a1)+,(a2)+
0000B7DE 4E75                       		rts	
0000B7E0                            ; End of function PalCycle_SS
0000B7E0                            
0000B7E0                            ; ===========================================================================
0000B7E0 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000B7F0                            					; XREF: PalCycle_SS
0000B7F0 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000B800 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000B810 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000B820 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000B830 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000B840 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000B850 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000B860                            		even
0000B860 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000B86E                            					; XREF: PalCycle_SS
0000B86E                            		even
0000B86E                            
0000B86E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000B8B6                            		even
0000B8B6                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000B988                            		even
0000B988                            
0000B988                            ; ---------------------------------------------------------------------------
0000B988                            ; Subroutine to	make the special stage background animated
0000B988                            ; ---------------------------------------------------------------------------
0000B988                            
0000B988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B988                            
0000B988                            
0000B988                            SS_BGAnimate:				; XREF: SpecialStage
0000B988 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000B98C 6600                       		bne.s	loc_4BF6
0000B98E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000B994 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B99A                            
0000B99A                            loc_4BF6:
0000B99A 0C40 0008                  		cmpi.w	#8,d0
0000B99E 6400                       		bcc.s	loc_4C4E
0000B9A0 0C40 0006                  		cmpi.w	#6,d0
0000B9A4 6600                       		bne.s	loc_4C10
0000B9A6 5278 F718                  		addq.w	#1,($FFFFF718).w
0000B9AA 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000B9AE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B9B4                            
0000B9B4                            loc_4C10:
0000B9B4 7000                       		moveq	#0,d0
0000B9B6 3038 F708                  		move.w	($FFFFF708).w,d0
0000B9BA 4440                       		neg.w	d0
0000B9BC 4840                       		swap	d0
0000B9BE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000B9C4 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B9C8 7609                       		moveq	#9,d3
0000B9CA                            
0000B9CA                            loc_4C26:
0000B9CA 302B 0002                  		move.w	2(a3),d0
0000B9CE 4EBA D560                  		jsr	CalcSine
0000B9D2 7400                       		moveq	#0,d2
0000B9D4 1419                       		move.b	(a1)+,d2
0000B9D6 C1C2                       		muls.w	d2,d0
0000B9D8 E080                       		asr.l	#8,d0
0000B9DA 36C0                       		move.w	d0,(a3)+
0000B9DC 1419                       		move.b	(a1)+,d2
0000B9DE 4882                       		ext.w	d2
0000B9E0 D55B                       		add.w	d2,(a3)+
0000B9E2 51CB FFE6                  		dbf	d3,loc_4C26
0000B9E6 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B9EA 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000B9F0 6000                       		bra.s	loc_4C7E
0000B9F2                            ; ===========================================================================
0000B9F2                            
0000B9F2                            loc_4C4E:				; XREF: SS_BGAnimate
0000B9F2 0C40 000C                  		cmpi.w	#$C,d0
0000B9F6 6600                       		bne.s	loc_4C74
0000B9F8 5378 F718                  		subq.w	#1,($FFFFF718).w
0000B9FC 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000BA00 243C 0001 8000             		move.l	#$18000,d2
0000BA06 7206                       		moveq	#6,d1
0000BA08                            
0000BA08                            loc_4C64:
0000BA08 2013                       		move.l	(a3),d0
0000BA0A 9082                       		sub.l	d2,d0
0000BA0C 26C0                       		move.l	d0,(a3)+
0000BA0E 0482 0000 2000             		subi.l	#$2000,d2
0000BA14 51C9 FFF2                  		dbf	d1,loc_4C64
0000BA18                            
0000BA18                            loc_4C74:
0000BA18 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000BA1C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000BA22                            
0000BA22                            loc_4C7E:
0000BA22 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000BA26 3038 F718                  		move.w	($FFFFF718).w,d0
0000BA2A 4440                       		neg.w	d0
0000BA2C 4840                       		swap	d0
0000BA2E 7600                       		moveq	#0,d3
0000BA30 161A                       		move.b	(a2)+,d3
0000BA32 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000BA36 4442                       		neg.w	d2
0000BA38 0242 00FF                  		andi.w	#$FF,d2
0000BA3C E54A                       		lsl.w	#2,d2
0000BA3E                            
0000BA3E                            loc_4C9A:
0000BA3E 301B                       		move.w	(a3)+,d0
0000BA40 544B                       		addq.w	#2,a3
0000BA42 7200                       		moveq	#0,d1
0000BA44 121A                       		move.b	(a2)+,d1
0000BA46 5341                       		subq.w	#1,d1
0000BA48                            
0000BA48                            loc_4CA4:
0000BA48 2380 2000                  		move.l	d0,(a1,d2.w)
0000BA4C 5842                       		addq.w	#4,d2
0000BA4E 0242 03FC                  		andi.w	#$3FC,d2
0000BA52 51C9 FFF4                  		dbf	d1,loc_4CA4
0000BA56 51CB FFE6                  		dbf	d3,loc_4C9A
0000BA5A 4E75                       		rts	
0000BA5C                            ; End of function SS_BGAnimate
0000BA5C                            
0000BA5C                            ; ===========================================================================
0000BA5C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000BA68                            		even
0000BA68 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000BA70                            		even
0000BA70 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000BA84                            		even
0000BA84                            					; XREF: SS_BGAnimate
0000BA84                            ; ===========================================================================
0000BA84                            
0000BA84                            ; ---------------------------------------------------------------------------
0000BA84                            ; Continue screen
0000BA84                            ; ---------------------------------------------------------------------------
0000BA84                            
0000BA84                            ContinueScreen:				; XREF: GameModeArray
0000BA84 4EB8 46B4                  		jsr	pal_fadefrom
0000BA88 46FC 2700                  		disable_ints
0000BA8C 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BA90 0200 00BF                  		andi.b	#$BF,d0
0000BA94 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BA9A 4DF9 00C0 0004             		lea	($C00004).l,a6
0000BAA0 3CBC 8004                  		move.w	#$8004,(a6)
0000BAA4 3CBC 8700                  		move.w	#$8700,(a6)
0000BAA8 4EB8 3084                  		jsr	ClearScreen
0000BAAC 43F8 D000                  		lea	($FFFFD000).w,a1
0000BAB0 7000                       		moveq	#0,d0
0000BAB2 323C 07FF                  		move.w	#$7FF,d1
0000BAB6                            
0000BAB6                            Cont_ClrObjRam:
0000BAB6 22C0                       		move.l	d0,(a1)+
0000BAB8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000BABC                            
0000BABC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000BAC6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000BACC 4EB8 35B2                  		jsr	NemDec
0000BAD0 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000BADA 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000BAE0 4EB8 35B2                  		jsr	NemDec
0000BAE4 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000BAEE 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000BAF4 4EB8 35B2                  		jsr	NemDec
0000BAF8 720A                       		moveq	#10,d1
0000BAFA 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000BB00 7012                       		moveq	#$12,d0
0000BB02 4EB8 4986                  		jsr	PalLoad1	; load continue	screen pallet
0000BB06 103C 0090                  		move.b	#$90,d0
0000BB0A 6100 E09E                  		bsr.w	Jmpto_PlaySound2	; play continue	music
0000BB0E 31FC 0293 FC20             		move.w	#659,($FFFFFC20).w ; set time delay to 11 seconds
0000BB14 42B8 F700                  		clr.l	($FFFFF700).w
0000BB18 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000BB20 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000BB26 11FC 0002 D040             		move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000BB2C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000BB32 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000BB38 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000BB3E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000BB44 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000BB4A 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000BB50 4EB9 0000 0000             		jsr	ObjectsLoad
0000BB56 4EB9 0000 0000             		jsr	BuildSprites
0000BB5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BB60 0000 0040                  		ori.b	#$40,d0
0000BB64 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BB6A 4EB8 45FA                  		jsr	Pal_FadeTo
0000BB6E                            
0000BB6E                            ; ---------------------------------------------------------------------------
0000BB6E                            ; Continue screen main loop
0000BB6E                            ; ---------------------------------------------------------------------------
0000BB6E                            
0000BB6E                            Cont_MainLoop:
0000BB6E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000BB74 6100 D388                  		bsr.w	Wait_VSync
0000BB78 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BB7E 6400                       		bcc.s	loc_4DF2
0000BB80 46FC 2700                  		disable_ints
0000BB84 3238 FC20                  		move.w	($FFFFFC20).w,d1
0000BB88 82FC 003C                  		divu.w	#$3C,d1
0000BB8C 0281 0000 000F             		andi.l	#$F,d1
0000BB92 4EB9 0000 0000             		jsr	ContScrCounter
0000BB98 46FC 2300                  		enable_ints
0000BB9C                            
0000BB9C                            loc_4DF2:
0000BB9C 4EB9 0000 0000             		jsr	ObjectsLoad
0000BBA2 4EB9 0000 0000             		jsr	BuildSprites
0000BBA8 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000BBAE 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000BBB0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BBB6 64B6                       		bcc.s	Cont_MainLoop
0000BBB8 4A78 FC20                  		tst.w	($FFFFFC20).w
0000BBBC 6600 FFB0                  		bne.w	Cont_MainLoop
0000BBC0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000BBC6 4E75                       		rts	
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000BBC8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000BBCE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000BBD4 7000                       		moveq	#0,d0
0000BBD6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000BBDA 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000BBDE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000BBE2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000BBE6 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000BBEA 4E75                       		rts	
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ; Object 80 - Continue screen elements
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            
0000BBEC                            ;Obj80:					; XREF: Obj_Index
0000BBEC                            ;		moveq	#0,d0
0000BBEC                            ;		move.b	routine(a0),d0
0000BBEC                            ;		move.w	Obj80_Index(pc,d0.w),d1
0000BBEC                            ;		jmp	Obj80_Index(pc,d1.w)
0000BBEC                            ; ===========================================================================
0000BBEC                            ;Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000BBEC                            ;		dc.w Obj80_Display-Obj80_Index
0000BBEC                            ;		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000BBEC                            ;		dc.w Obj80_ChkType-Obj80_Index
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj80_Main:				; XREF: Obj80_Index
0000BBEC                            ;		addq.b	#2,routine(a0)
0000BBEC                            ;		move.l	#Map_obj80,4(a0)
0000BBEC                            ;		move.w	#$8500,2(a0)
0000BBEC                            ;		move.b	#0,1(a0)
0000BBEC                            ;		move.b	#$3C,width_pixels(a0)
0000BBEC                            ;		move.w	#$120,8(a0)
0000BBEC                            ;		move.w	#$C0,$A(a0)
0000BBEC                            ;		move.w	#0,($FFFFFE20).w ; clear rings
0000BBEC                            
0000BBEC                            ;Obj80_Display:				; XREF: Obj80_Index
0000BBEC                            ;		jmp	DisplaySprite
0000BBEC                            ; ===========================================================================
0000BBEC                            ;Obj80_MiniSonicPos:
0000BBEC                            ;		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000BBEC                            ;		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000BBEC                            ;		movea.l	a0,a1
0000BBEC                            ;		lea	(Obj80_MiniSonicPos).l,a2
0000BBEC                            ;		moveq	#0,d1
0000BBEC                            ;		move.b	($FFFFFE18).w,d1
0000BBEC                            ;		subq.b	#2,d1
0000BBEC                            ;		bcc.s	loc_4EC4
0000BBEC                            ;		jmp	DeleteObject
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000BBEC                            ;		moveq	#1,d3
0000BBEC                            ;		cmpi.b	#$E,d1
0000BBEC                            ;		bcs.s	loc_4ED0
0000BBEC                            ;		moveq	#0,d3
0000BBEC                            ;		moveq	#$E,d1
0000BBEC                            
0000BBEC                            ;loc_4ED0:
0000BBEC                            ;		move.b	d1,d2
0000BBEC                            ;		andi.b	#1,d2
0000BBEC                            
0000BBEC                            ;Obj80_MiniSonLoop:
0000BBEC                            ;		move.b	#$80,0(a1)	; load mini Sonic object
0000BBEC                            ;		move.w	(a2)+,8(a1)
0000BBEC                            ;		tst.b	d2
0000BBEC                            ;		beq.s	loc_4EEA
0000BBEC                            ;		subi.w	#$A,8(a1)
0000BBEC                            
0000BBEC                            ;loc_4EEA:
0000BBEC                            ;		move.w	#$D0,$A(a1)
0000BBEC                            ;		move.b	#6,mapping_frame(a1)
0000BBEC                            ;		move.b	#6,routine(a1)
0000BBEC                            ;		move.l	#Map_obj80,4(a1)
0000BBEC                            ;		move.w	#$8551,2(a1)
0000BBEC                            ;		move.b	#0,1(a1)
0000BBEC                            ;		lea	object_size(a1),a1
0000BBEC                            ;		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000BBEC                            ;		lea	-$40(a1),a1
0000BBEC                            ;		move.b	d3,subtype(a1)
0000BBEC                            
0000BBEC                            ;Obj80_ChkType:				; XREF: Obj80_Index
0000BBEC                            ;		tst.b	subtype(a0)
0000BBEC                            ;		beq.s	loc_4F40
0000BBEC                            ;		cmpi.b	#6,($FFFFD024).w
0000BBEC                            ;		bcs.s	loc_4F40
0000BBEC                            ;		move.b	($FFFFFE0F).w,d0
0000BBEC                            ;		andi.b	#1,d0
0000BBEC                            ;		bne.s	loc_4F40
0000BBEC                            ;		tst.w	($FFFFD010).w
0000BBEC                            ;		bne.s	Obj80_Delete
0000BBEC                            ;		rts	
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;loc_4F40:				; XREF: Obj80_ChkType
0000BBEC                            ;		move.b	($FFFFFE0F).w,d0
0000BBEC                            ;		andi.b	#$F,d0
0000BBEC                            ;		bne.s	Obj80_Display2
0000BBEC                            ;		bchg	#0,mapping_frame(a0)
0000BBEC                            ;
0000BBEC                            ;Obj80_Display2:
0000BBEC                            ;		jmp	DisplaySprite
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj80_Delete:				; XREF: Obj80_ChkType
0000BBEC                            ;		jmp	DeleteObject
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ; Object 81 - Sonic on the continue screen
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            
0000BBEC                            ;Obj81:					; XREF: Obj_Index
0000BBEC                            ;		moveq	#0,d0
0000BBEC                            ;		move.b	routine(a0),d0
0000BBEC                            ;		move.w	Obj81_Index(pc,d0.w),d1
0000BBEC                            ;		jsr	Obj81_Index(pc,d1.w)
0000BBEC                            ;		jmp	DisplaySprite
0000BBEC                            ; ===========================================================================
0000BBEC                            ;Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000BBEC                            ;		dc.w Obj81_ChkLand-Obj81_Index
0000BBEC                            ;		dc.w Obj81_Animate-Obj81_Index
0000BBEC                            ;		dc.w Obj81_Run-Obj81_Index
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj81_Main:				; XREF: Obj81_Index
0000BBEC                            ;		addq.b	#2,routine(a0)
0000BBEC                            ;		move.w	#$A0,8(a0)
0000BBEC                            ;		move.w	#$C0,$C(a0)
0000BBEC                            ;		move.l	#Map_Sonic,4(a0)
0000BBEC                            ;		move.w	#$780,2(a0)
0000BBEC                            ;		move.b	#4,1(a0)
0000BBEC                            ;		move.w	#$100,priority(a0)
0000BBEC                            ;		move.b	#$1D,anim(a0)	; use "floating" animation
0000BBEC                            ;		move.w	#$400,y_vel(a0)	; make Sonic fall from above
0000BBEC                            
0000BBEC                            ;Obj81_ChkLand:				; XREF: Obj81_Index
0000BBEC                            ;		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000BBEC                            ;		bne.s	Obj81_ShowFall	; if not, branch
0000BBEC                            ;		addq.b	#2,routine(a0)
0000BBEC                            ;		clr.w	y_vel(a0)		; stop Sonic falling
0000BBEC                            ;		move.l	#Map_obj80,4(a0)
0000BBEC                            ;		move.w	#$8500,2(a0)
0000BBEC                            ;		move.b	#0,anim(a0)
0000BBEC                            ;		bra.s	Obj81_Animate
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000BBEC                            ;		jsr	SpeedToPos
0000BBEC                            ;		jsr	Sonic_Animate
0000BBEC                            ;		jmp	LoadSonicDynPLC
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj81_Animate:				; XREF: Obj81_Index
0000BBEC                            ;		tst.b	($FFFFF605).w	; is any button	pressed?
0000BBEC                            ;		bmi.s	Obj81_GetUp	; if yes, branch
0000BBEC                            ;		lea	(Ani_obj81).l,a1
0000BBEC                            ;		jmp	AnimateSprite
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj81_GetUp:				; XREF: Obj81_Animate
0000BBEC                            ;		addq.b	#2,routine(a0)
0000BBEC                            ;		move.l	#Map_Sonic,4(a0)
0000BBEC                            ;		move.w	#$780,2(a0)
0000BBEC                            ;		move.b	#$1E,anim(a0)	; use "getting up" animation
0000BBEC                            ;		clr.w	inertia(a0)
0000BBEC                            ;		subq.w	#8,$C(a0)
0000BBEC                            ;		move.b	#$E0,d0
0000BBEC                            ;		bsr.w	Jmpto_PlaySound_Special ; fade out music
0000BBEC                            
0000BBEC                            ;Obj81_Run:				; XREF: Obj81_Index
0000BBEC                            ;		cmpi.w	#$800,inertia(a0)	; check	Sonic's "run speed" (not moving)
0000BBEC                            ;		bne.s	Obj81_AddSpeed	; if too low, branch
0000BBEC                            ;		move.w	#$1000,x_vel(a0)	; move Sonic to	the right
0000BBEC                            ;		bra.s	Obj81_ShowRun
0000BBEC                            ; ===========================================================================
0000BBEC                            
0000BBEC                            ;Obj81_AddSpeed:				; XREF: Obj81_Run
0000BBEC                            ;		addi.w	#$20,inertia(a0)	; increase "run	speed"
0000BBEC                            
0000BBEC                            ;Obj81_ShowRun:				; XREF: Obj81_Run
0000BBEC                            ;		jsr	SpeedToPos
0000BBEC                            ;		jsr	Sonic_Animate
0000BBEC                            ;		jmp	LoadSonicDynPLC
0000BBEC                            ; ===========================================================================
0000BBEC                            ;Ani_obj81:
0000BBEC                            ;	include "_anim\obj81.asm"
0000BBEC                            
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ; Sprite mappings - Continue screen
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ;Map_obj80:
0000BBEC                            ;	include "_maps\obj80.asm"
0000BBEC                            
0000BBEC                            ; ===========================================================================
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            ; Ending sequence in Green Hill	Zone
0000BBEC                            ; ---------------------------------------------------------------------------
0000BBEC                            
0000BBEC                            EndingSequence:				; XREF: GameModeArray
0000BBEC 103C 00E4                  		move.b	#$E4,d0
0000BBF0 6100 0000                  		bsr.w	Jmpto_PlayMus ; stop music
0000BBF4 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000BBF8 43F8 D000                  		lea	($FFFFD000).w,a1
0000BBFC 7000                       		moveq	#0,d0
0000BBFE 323C 07FF                  		move.w	#$7FF,d1
0000BC02                            
0000BC02                            End_ClrObjRam:
0000BC02 22C0                       		move.l	d0,(a1)+
0000BC04 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000BC08                            
0000BC08 43F8 F628                  		lea	($FFFFF628).w,a1
0000BC0C 7000                       		moveq	#0,d0
0000BC0E 323C 0015                  		move.w	#$15,d1
0000BC12                            
0000BC12                            End_ClrRam:
0000BC12 22C0                       		move.l	d0,(a1)+
0000BC14 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000BC18                            
0000BC18 43F8 F700                  		lea	($FFFFF700).w,a1
0000BC1C 7000                       		moveq	#0,d0
0000BC1E 323C 003F                  		move.w	#$3F,d1
0000BC22                            
0000BC22                            End_ClrRam2:
0000BC22 22C0                       		move.l	d0,(a1)+
0000BC24 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000BC28                            
0000BC28 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000BC2C 7000                       		moveq	#0,d0
0000BC2E 323C 0047                  		move.w	#$47,d1
0000BC32                            
0000BC32                            End_ClrRam3:
0000BC32 22C0                       		move.l	d0,(a1)+
0000BC34 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000BC38                            
0000BC38 46FC 2700                  		move	#$2700,sr
0000BC3C 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BC40 0200 00BF                  		andi.b	#$BF,d0
0000BC44 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BC4A 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000BC4E 4DF9 00C0 0004             		lea	($C00004).l,a6
0000BC54 3CBC 8B03                  		move.w	#$8B03,(a6)
0000BC58 3CBC 8230                  		move.w	#$8230,(a6)
0000BC5C 3CBC 8407                  		move.w	#$8407,(a6)
0000BC60 3CBC 857C                  		move.w	#$857C,(a6)
0000BC64 3CBC 9001                  		move.w	#$9001,(a6)
0000BC68 3CBC 8004                  		move.w	#$8004,(a6)
0000BC6C 3CBC 8720                  		move.w	#$8720,(a6)
0000BC70 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000BC76 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000BC7A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000BC80 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000BC86 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BC8C 6700                       		beq.s	End_LoadData	; if yes, branch
0000BC8E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000BC94                            
0000BC94                            End_LoadData:
0000BC94 701C                       		moveq	#$1C,d0
0000BC96 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load ending sequence patterns
0000BC9A 4EB9 0000 0000             		jsr	Hud_Base
0000BCA0 6100 0000                  		bsr.w	LevelSizeLoad
0000BCA4 6100 0000                  		bsr.w	DeformBgLayer
0000BCA8 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000BCAE 6100 0000                  		bsr.w	MainLoadBlockLoad
0000BCB2 6100 0000                  		bsr.w	LoadTilesFromStart
0000BCB6                            ;		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000BCB6 21FC 0000 0000 FFE2        		move.l	#Col_GHZ_1,($FFFFFFE2).w			; MJ: Set first collision for ending
0000BCBE 21FC 0000 0000 FFE6        		move.l	#Col_GHZ_2,($FFFFFFE6).w			; MJ: Set second collision for ending
0000BCC6 46FC 2300                  		move	#$2300,sr
0000BCCA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000BCD0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000BCD4 6100 0000                  		bsr.w	Jmpto_KosDec
0000BCD8 7003                       		moveq	#3,d0
0000BCDA 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load Sonic's pallet
0000BCDE 303C 008B                  		move.w	#$8B,d0
0000BCE2 6100 0000                  		bsr.w	Jmpto_PlaySFX	; play ending sequence music
0000BCE6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000BCEC 6700                       		beq.s	End_LoadSonic	; if not, branch
0000BCEE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000BCF4                            
0000BCF4                            End_LoadSonic:
0000BCF4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000BCFA 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000BD00 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000BD06 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000BD0C 31FC F800 D020             		move.w	#$F800,(MainCharacter+inertia).w ; set Sonic's speed
0000BD12 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000BD18 4EB9 0000 0000             		jsr	ObjPosLoad
0000BD1E 4EB9 0000 0000             		jsr	ObjectsLoad
0000BD24 4EB9 0000 0000             		jsr	BuildSprites
0000BD2A 7000                       		moveq	#0,d0
0000BD2C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000BD30 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000BD34 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000BD38                            
0000BD38 11C0 D02B                  		move.b	d0,(Maincharacter+status_secondary).w
0000BD3C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000BD40 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000BD44 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000BD48 6100 F152                  		bsr.w	OscillateNumInit
0000BD4C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000BD52 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000BD58 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000BD5E 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000BD64 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BD6A 6100 D192                  		bsr.w	DelayProgram
0000BD6E 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BD72 0000 0040                  		ori.b	#$40,d0
0000BD76 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BD7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BD82 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000BD86                            
0000BD86                            ; ---------------------------------------------------------------------------
0000BD86                            ; Main ending sequence loop
0000BD86                            ; ---------------------------------------------------------------------------
0000BD86                            
0000BD86                            End_MainLoop:
0000BD86 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BD8A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BD90 6100 D16C                  		bsr.w	DelayProgram
0000BD94 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BD98 6100 0000                  		bsr.w	End_MoveSonic
0000BD9C 4EB9 0000 0000             		jsr	ObjectsLoad
0000BDA2 6100 0000                  		bsr.w	DeformBgLayer
0000BDA6 4EB9 0000 0000             		jsr	BuildSprites
0000BDAC 4EB9 0000 0000             		jsr	ObjPosLoad
0000BDB2 6100 0000                  		bsr.w	Jmpto_PalCycle_Load
0000BDB6 6100 F13A                  		bsr.w	OscillateNumDo
0000BDBA 6100 F1C6                  		bsr.w	ChangeRingFrame
0000BDBE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000BDC4 6700                       		beq.s	loc_52DA	; if yes, branch
0000BDC6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000BDCC 103C 0091                  		move.b	#$91,d0
0000BDD0 6100 0000                  		bsr.w	Jmpto_PlayMus ; play credits music
0000BDD4 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000BDDA 4E75                       		rts	
0000BDDC                            ; ===========================================================================
0000BDDC                            
0000BDDC                            loc_52DA:
0000BDDC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000BDE0 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000BDE4                            
0000BDE4 4278 FE02                  		clr.w	($FFFFFE02).w
0000BDE8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BDEE 4278 F794                  		clr.w	($FFFFF794).w
0000BDF2                            
0000BDF2                            End_AllEmlds:				; XREF: loc_5334
0000BDF2 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BDF6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BDFC 6100 D100                  		bsr.w	DelayProgram
0000BE00 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BE04 6100 0000                  		bsr.w	End_MoveSonic
0000BE08 4EB9 0000 0000             		jsr	ObjectsLoad
0000BE0E 6100 0000                  		bsr.w	DeformBgLayer
0000BE12 4EB9 0000 0000             		jsr	BuildSprites
0000BE18 4EB9 0000 0000             		jsr	ObjPosLoad
0000BE1E 6100 F0D2                  		bsr.w	OscillateNumDo
0000BE22 6100 F15E                  		bsr.w	ChangeRingFrame
0000BE26 5378 F794                  		subq.w	#1,($FFFFF794).w
0000BE2A 6A00                       		bpl.s	loc_5334
0000BE2C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000BE32 6100 0000                  		bsr.w	Jmpto_Pal_ToWhite
0000BE36                            
0000BE36                            loc_5334:
0000BE36 4A78 FE02                  		tst.w	($FFFFFE02).w
0000BE3A 6700 FFB6                  		beq.w	End_AllEmlds
0000BE3E 4278 FE02                  		clr.w	($FFFFFE02).w
0000BE42 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000BE48 4BF9 00C0 0004             		lea	($C00004).l,a5
0000BE4E 4DF9 00C0 0000             		lea	($C00000).l,a6
0000BE54 47F8 F700                  		lea	($FFFFF700).w,a3
0000BE58 2878 A400                  		movea.l	($FFFFA400).w,a4
0000BE5C 343C 4000                  		move.w	#$4000,d2
0000BE60 6100 0000                  		bsr.w	LoadTilesFromStart2
0000BE64 7013                       		moveq	#$13,d0
0000BE66 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load ending pallet
0000BE6A 6100 0000                  		bsr.w	Jmpto_Pal_MakeWhite
0000BE6E 6000 FF16                  		bra.w	End_MainLoop
0000BE72                            
0000BE72                            ; ---------------------------------------------------------------------------
0000BE72                            ; Subroutine controlling Sonic on the ending sequence
0000BE72                            ; ---------------------------------------------------------------------------
0000BE72                            
0000BE72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE72                            
0000BE72                            
0000BE72                            End_MoveSonic:				; XREF: End_MainLoop
0000BE72 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000BE76 6600                       		bne.s	End_MoveSonic2
0000BE78 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000BE7E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000BE80 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BE84 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000BE8A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000BE90 4E75                       		rts	
0000BE92                            ; ===========================================================================
0000BE92                            
0000BE92                            End_MoveSonic2:				; XREF: End_MoveSonic
0000BE92 5500                       		subq.b	#2,d0
0000BE94 6600                       		bne.s	End_MoveSonic3
0000BE96 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000BE9C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000BE9E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BEA2 7000                       		moveq	#0,d0
0000BEA4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000BEA8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000BEAC 31C0 D020                  		move.w	d0,(MainCharacter+inertia).w
0000BEB0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000BEB6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000BEBC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000BEC2 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000BEC8 4E75                       		rts	
0000BECA                            ; ===========================================================================
0000BECA                            
0000BECA                            End_MoveSonic3:				; XREF: End_MoveSonic
0000BECA 5500                       		subq.b	#2,d0
0000BECC 6600                       		bne.s	End_MoveSonExit
0000BECE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BED2 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000BED8 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000BEDE 4278 D024                  		clr.w	($FFFFD024).w
0000BEE2                            
0000BEE2                            End_MoveSonExit:
0000BEE2 4E75                       		rts	
0000BEE4                            ; End of function End_MoveSonic
0000BEE4                            
0000BEE4                            ; ===========================================================================
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4                            ; Object 87 - Sonic on ending sequence
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4                            
0000BEE4                            Obj87:					; XREF: Obj_Index
0000BEE4 7000                       		moveq	#0,d0
0000BEE6 1028 0025                  		move.b	$25(a0),d0
0000BEEA 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000BEEE 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000BEF2 4EF9 0000 0000             		jmp	DisplaySprite
0000BEF8                            ; ===========================================================================
0000BEF8 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000BEFC 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000BF00 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000BF04 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000BF08 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000BF0C                            ; ===========================================================================
0000BF0C                            
0000BF0C                            Obj87_Main:				; XREF: Obj87_Index
0000BF0C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BF12 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000BF14 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000BF1A 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000BF20 4E75                       		rts	
0000BF22                            ; ===========================================================================
0000BF22                            
0000BF22                            Obj87_Main2:				; XREF: Obj87_Main
0000BF22 5428 0025                  		addq.b	#2,$25(a0)
0000BF26 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BF2E 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BF34 117C 0004 0001             		move.b	#4,1(a0)
0000BF3A 4228 0022                  		clr.b	$22(a0)
0000BF3E 317C 0100 0018             		move.w	#$100,priority(a0)
0000BF44 117C 0000 001A             		move.b	#0,$1A(a0)
0000BF4A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000BF50                            
0000BF50                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000BF50 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000BF54 6600                       		bne.s	Obj87_Wait
0000BF56 5428 0025                  		addq.b	#2,$25(a0)
0000BF5A 317C 0001 001C             		move.w	#1,$1C(a0)
0000BF60 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000BF66                            
0000BF66                            Obj87_Wait:
0000BF66 4E75                       		rts	
0000BF68                            ; ===========================================================================
0000BF68                            
0000BF68                            Obj87_LookUp:				; XREF: Obj87_Index
0000BF68 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000BF70 6600                       		bne.s	locret_5480
0000BF72 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000BF78 317C 005A 0030             		move.w	#$5A,$30(a0)
0000BF7E 5428 0025                  		addq.b	#2,$25(a0)
0000BF82                            
0000BF82                            locret_5480:
0000BF82 4E75                       		rts	
0000BF84                            ; ===========================================================================
0000BF84                            
0000BF84                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000BF84 5368 0030                  		subq.w	#1,$30(a0)
0000BF88 6600                       		bne.s	Obj87_Wait2
0000BF8A 43F8 D400                  		lea	($FFFFD400).w,a1
0000BF8E 323C 00FF                  		move.w	#$FF,d1
0000BF92                            
0000BF92                            Obj87_ClrLoop:
0000BF92 4299                       		clr.l	(a1)+
0000BF94 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000BF98 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000BF9E 5428 0025                  		addq.b	#2,$25(a0)
0000BFA2 117C 0001 001C             		move.b	#1,$1C(a0)
0000BFA8 317C 003C 0030             		move.w	#$3C,$30(a0)
0000BFAE                            
0000BFAE                            Obj87_Wait2:
0000BFAE 4E75                       		rts	
0000BFB0                            ; ===========================================================================
0000BFB0                            
0000BFB0                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000BFB0 5368 0030                  		subq.w	#1,$30(a0)
0000BFB4 6600                       		bne.s	Obj87_Wait3
0000BFB6 5428 0025                  		addq.b	#2,$25(a0)
0000BFBA 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000BFC0 117C 0002 001C             		move.b	#2,$1C(a0)
0000BFC6 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000BFCC                            
0000BFCC                            Obj87_Wait3:
0000BFCC 4E75                       		rts	
0000BFCE                            ; ===========================================================================
0000BFCE                            
0000BFCE                            Obj87_Animate:				; XREF: Obj87_Index
0000BFCE 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000BFD4 4EF9 0000 0000             		jmp	AnimateSprite
0000BFDA                            ; ===========================================================================
0000BFDA                            
0000BFDA                            Obj87_Leap:				; XREF: Obj87_Index
0000BFDA 5368 0030                  		subq.w	#1,$30(a0)
0000BFDE 6600                       		bne.s	Obj87_Wait4
0000BFE0 5428 0025                  		addq.b	#2,$25(a0)
0000BFE4 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BFEC 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BFF2 117C 0004 0001             		move.b	#4,1(a0)
0000BFF8 4228 0022                  		clr.b	$22(a0)
0000BFFC 317C 0100 0018             		move.w	#$100,priority(a0)
0000C002 117C 0005 001A             		move.b	#5,$1A(a0)
0000C008 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000C00E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000C014 60B8                       		bra.s	Obj87_Animate
0000C016                            ; ===========================================================================
0000C016                            
0000C016                            Obj87_Wait4:				; XREF: Obj87_Leap
0000C016 4E75                       		rts	
0000C018                            ; ===========================================================================
0000C018                            Ani_obj87:
0000C018                            	include '_anim\obj87.asm'
0000C018                            ; ---------------------------------------------------------------------------
0000C018                            ; Animation script - Sonic on the ending sequence
0000C018                            ; ---------------------------------------------------------------------------
0000C018 0000                       		dc.w byte_551C-Ani_obj87
0000C01A 0000                       		dc.w byte_552A-Ani_obj87
0000C01C 0000                       		dc.w byte_5534-Ani_obj87
0000C01E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000C02C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000C036 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000C03E                            		even
0000C03E                            		even
0000C03E                            
0000C03E                            ; ===========================================================================
0000C03E                            ; ---------------------------------------------------------------------------
0000C03E                            ; Object 88 - chaos emeralds on	the ending sequence
0000C03E                            ; ---------------------------------------------------------------------------
0000C03E                            
0000C03E                            Obj88:					; XREF: Obj_Index
0000C03E 7000                       		moveq	#0,d0
0000C040 1028 0024                  		move.b	$24(a0),d0
0000C044 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000C048 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000C04C 4EF9 0000 0000             		jmp	DisplaySprite
0000C052                            ; ===========================================================================
0000C052 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000C054 0000                       		dc.w Obj88_Move-Obj88_Index
0000C056                            ; ===========================================================================
0000C056                            
0000C056                            Obj88_Main:				; XREF: Obj88_Index
0000C056 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000C05C 6700                       		beq.s	Obj88_Main2
0000C05E 588F                       		addq.l	#4,sp
0000C060 4E75                       		rts	
0000C062                            ; ===========================================================================
0000C062                            
0000C062                            Obj88_Main2:				; XREF: Obj88_Main
0000C062 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000C068 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000C06E 2248                       		movea.l	a0,a1
0000C070 7600                       		moveq	#0,d3
0000C072 7401                       		moveq	#1,d2
0000C074 7205                       		moveq	#5,d1
0000C076                            
0000C076                            Obj88_MainLoop:
0000C076 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000C07A 5429 0024                  		addq.b	#2,$24(a1)
0000C07E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000C086 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000C08C 137C 0004 0001             		move.b	#4,1(a1)
0000C092 337C 0080 0018             		move.w	#$80,priority(a1)
0000C098 3368 0008 0038             		move.w	8(a0),$38(a1)
0000C09E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000C0A4 1342 001C                  		move.b	d2,$1C(a1)
0000C0A8 1342 001A                  		move.b	d2,$1A(a1)
0000C0AC 5202                       		addq.b	#1,d2
0000C0AE 1343 0026                  		move.b	d3,$26(a1)
0000C0B2 0603 002A                  		addi.b	#$2A,d3
0000C0B6 43E9 0040                  		lea	$40(a1),a1
0000C0BA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000C0BE                            
0000C0BE                            Obj88_Move:				; XREF: Obj88_Index
0000C0BE 3028 003E                  		move.w	$3E(a0),d0
0000C0C2 D168 0026                  		add.w	d0,$26(a0)
0000C0C6 1028 0026                  		move.b	$26(a0),d0
0000C0CA 4EB9 0000 8F30             		jsr	(CalcSine).l
0000C0D0 7800                       		moveq	#0,d4
0000C0D2 1828 003C                  		move.b	$3C(a0),d4
0000C0D6 C3C4                       		muls.w	d4,d1
0000C0D8 E081                       		asr.l	#8,d1
0000C0DA C1C4                       		muls.w	d4,d0
0000C0DC E080                       		asr.l	#8,d0
0000C0DE D268 0038                  		add.w	$38(a0),d1
0000C0E2 D068 003A                  		add.w	$3A(a0),d0
0000C0E6 3141 0008                  		move.w	d1,8(a0)
0000C0EA 3140 000C                  		move.w	d0,$C(a0)
0000C0EE 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000C0F4 6700                       		beq.s	loc_55FA
0000C0F6 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000C0FC                            
0000C0FC                            loc_55FA:
0000C0FC 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000C102 6700                       		beq.s	loc_5608
0000C104 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000C10A                            
0000C10A                            loc_5608:
0000C10A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000C110 6700                       		beq.s	locret_5614
0000C112 5368 003A                  		subq.w	#1,$3A(a0)
0000C116                            
0000C116                            locret_5614:
0000C116 4E75                       		rts	
0000C118                            ; ===========================================================================
0000C118                            ; ---------------------------------------------------------------------------
0000C118                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000C118                            ; ---------------------------------------------------------------------------
0000C118                            
0000C118                            Obj89:					; XREF: Obj_Index
0000C118 7000                       		moveq	#0,d0
0000C11A 1028 0024                  		move.b	$24(a0),d0
0000C11E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000C122 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000C126                            ; ===========================================================================
0000C126 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000C128 0000                       		dc.w Obj89_Move-Obj89_Index
0000C12A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000C12C                            ; ===========================================================================
0000C12C                            
0000C12C                            Obj89_Main:				; XREF: Obj89_Index
0000C12C 5428 0024                  		addq.b	#2,$24(a0)
0000C130 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000C136 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000C13C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000C144 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000C14A 117C 0000 0001             		move.b	#0,1(a0)
0000C150 117C 0000 0018             		move.b	#0,priority(a0)
0000C156                            
0000C156                            Obj89_Move:				; XREF: Obj89_Index
0000C156 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000C15C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000C15E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000C164 4EF9 0000 0000             		jmp	DisplaySprite
0000C16A                            ; ===========================================================================
0000C16A                            
0000C16A                            Obj89_Delay:				; XREF: Obj89_Move
0000C16A 5428 0024                  		addq.b	#2,$24(a0)
0000C16E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000C174                            
0000C174                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000C174 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000C178 6A00                       		bpl.s	Obj89_Display
0000C17A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000C180                            
0000C180                            Obj89_Display:
0000C180 4EF9 0000 0000             		jmp	DisplaySprite
0000C186                            ; ===========================================================================
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            ; Sprite mappings - Sonic on the ending	sequence
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            Map_obj87:
0000C186                            	include '_maps\obj87.asm'
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            ; Sprite mappings - Sonic on the ending	sequence
0000C186                            ; ---------------------------------------------------------------------------
0000C186 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000C18A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000C18E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000C192 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000C196 02                         byte_5690:	dc.b 2
0000C197 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000C19C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C1A1 03                         byte_569B:	dc.b 3
0000C1A2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000C1A7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000C1AC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C1B1 02                         byte_56AB:	dc.b 2
0000C1B2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000C1B7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000C1BC 02                         byte_56B6:	dc.b 2
0000C1BD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000C1C2 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000C1C7 02                         byte_56C1:	dc.b 2
0000C1C8 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000C1CD FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000C1D2 03                         byte_56CC:	dc.b 3
0000C1D3 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000C1D8 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000C1DD 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000C1E2 07                         byte_56DC:	dc.b 7
0000C1E3 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000C1E8 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000C1ED BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000C1F2 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000C1F7 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000C1FC E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000C201 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000C206 18                         byte_5700:	dc.b $18
0000C207 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000C20C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000C211 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000C216 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000C21B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000C220 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000C225 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000C22A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000C22F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000C234 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000C239 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000C23E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000C243 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000C248 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000C24D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000C252 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000C257 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000C25C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000C261 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000C266 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000C26B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000C270 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000C275 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000C27A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000C280 00                         		even
0000C280 00                         		even
0000C280                            
0000C280                            ; ---------------------------------------------------------------------------
0000C280                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C280                            ; ---------------------------------------------------------------------------
0000C280                            Map_obj88:
0000C280                            	include '_maps\obj88.asm'
0000C280                            ; ---------------------------------------------------------------------------
0000C280                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C280                            ; ---------------------------------------------------------------------------
0000C280 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000C284 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000C288 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000C28C 0000                       		dc.w byte_57AC-Map_obj88
0000C28E 01                         byte_5788:	dc.b 1
0000C28F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C294 01                         byte_578E:	dc.b 1
0000C295 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000C29A 01                         byte_5794:	dc.b 1
0000C29B F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000C2A0 01                         byte_579A:	dc.b 1
0000C2A1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000C2A6 01                         byte_57A0:	dc.b 1
0000C2A7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000C2AC 01                         byte_57A6:	dc.b 1
0000C2AD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000C2B2 01                         byte_57AC:	dc.b 1
0000C2B3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0000C2B8                            		even
0000C2B8                            		even
0000C2B8                            
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            Map_obj89:
0000C2B8                            	include '_maps\obj89.asm'
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8 0000                       		dc.w byte_57B4-Map_obj89
0000C2BA 03                         byte_57B4:	dc.b 3
0000C2BB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000C2C0 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C2C5 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000C2CA                            		even
0000C2CA                            		even
0000C2CA                            
0000C2CA                            ; ===========================================================================
0000C2CA                            ; ---------------------------------------------------------------------------
0000C2CA                            ; Credits ending sequence
0000C2CA                            ; ---------------------------------------------------------------------------
0000C2CA                            
0000C2CA                            Credits:				; XREF: GameModeArray
0000C2CA 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C2CE 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C2D2 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C2D8 3CBC 8004                  		move.w	#$8004,(a6)
0000C2DC 3CBC 8230                  		move.w	#$8230,(a6)
0000C2E0 3CBC 8407                  		move.w	#$8407,(a6)
0000C2E4 3CBC 9001                  		move.w	#$9001,(a6)
0000C2E8 3CBC 9200                  		move.w	#$9200,(a6)
0000C2EC 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C2F0 3CBC 8720                  		move.w	#$8720,(a6)
0000C2F4 4238 F64E                  		clr.b	($FFFFF64E).w
0000C2F8 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C2FC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C300 7000                       		moveq	#0,d0
0000C302 323C 07FF                  		move.w	#$7FF,d1
0000C306                            
0000C306                            Cred_ClrObjRam:
0000C306 22C0                       		move.l	d0,(a1)+
0000C308 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000C30C                            
0000C30C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000C316 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000C31C 6100 0000                  		bsr.w	Jmpto_NemDec
0000C320 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C324 7000                       		moveq	#0,d0
0000C326 323C 001F                  		move.w	#$1F,d1
0000C32A                            
0000C32A                            Cred_ClrPallet:
0000C32A 22C0                       		move.l	d0,(a1)+
0000C32C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000C330                            
0000C330 7003                       		moveq	#3,d0
0000C332 6100 0000                  		bsr.w	Jmpto_Palload1	; load Sonic's pallet
0000C336                            ;		move.b	#$8A,($FFFFD080).w ; load credits object
0000C336 4EB9 0000 0000             		jsr	Credits_MapLoad
0000C33C 4EB9 0000 0000             		jsr	ObjectsLoad
0000C342 4EB9 0000 0000             		jsr	BuildSprites
0000C348 6100 0000                  		bsr.w	EndingDemoLoad
0000C34C 7000                       		moveq	#0,d0
0000C34E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C352 E948                       		lsl.w	#4,d0
0000C354 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000C35A 45F2 0000                  		lea	(a2,d0.w),a2
0000C35E 7000                       		moveq	#0,d0
0000C360 1012                       		move.b	(a2),d0
0000C362 6700                       		beq.s	loc_5862
0000C364 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load level patterns
0000C368                            
0000C368                            loc_5862:
0000C368 7001                       		moveq	#1,d0
0000C36A 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load standard	level patterns
0000C36E 31FC 0078 FC20             		move.w	#120,($FFFFFC20).w ; display a credit for 2 seconds
0000C374 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C378                            
0000C378                            Cred_WaitLoop:
0000C378 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C37E 6100 CB7E                  		bsr.w	DelayProgram
0000C382 6100 0000                  		bsr.w	Jmpto_RunPLC_RAM
0000C386 4A78 FC20                  		tst.w	($FFFFFC20).w	; have 2 seconds elapsed?
0000C38A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000C38C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000C390 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000C392 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000C398 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000C39C 4E75                       		rts	
0000C39E                            
0000C39E                            ; ---------------------------------------------------------------------------
0000C39E                            ; Ending sequence demo loading subroutine
0000C39E                            ; ---------------------------------------------------------------------------
0000C39E                            
0000C39E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C39E                            
0000C39E                            
0000C39E                            EndingDemoLoad:				; XREF: Credits
0000C39E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000C3A2 0240 000F                  		andi.w	#$F,d0
0000C3A6 D040                       		add.w	d0,d0
0000C3A8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000C3AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000C3B0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000C3B4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
0000C3BA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
0000C3BC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000C3C2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000C3C8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000C3CE 7000                       		moveq	#0,d0
0000C3D0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000C3D4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000C3D8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000C3DC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000C3E0 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000C3E6 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000C3E8 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000C3EE 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000C3F2 303C 0008                  		move.w	#8,d0
0000C3F6                            
0000C3F6                            EndDemo_LampLoad:
0000C3F6 24D9                       		move.l	(a1)+,(a2)+
0000C3F8 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000C3FC                            
0000C3FC                            EndDemo_Exit:
0000C3FC 4E75                       		rts	
0000C3FE                            ; End of function EndingDemoLoad
0000C3FE                            
0000C3FE                            ; ===========================================================================
0000C3FE                            ; ---------------------------------------------------------------------------
0000C3FE                            ; Levels used in the end sequence demos
0000C3FE                            ; ---------------------------------------------------------------------------
0000C3FE                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000C40E                            
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E                            EndDemo_LampVar:
0000C40E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000C410 0A00 062C 000D             		dc.w $A00, $62C, $D
0000C416 0000 0000                  		dc.l 0
0000C41A 0000                       		dc.b 0,	0
0000C41C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000C430 0101                       		dc.b 1,	1
0000C432                            ; ===========================================================================
0000C432                            ; ---------------------------------------------------------------------------
0000C432                            ; "TRY AGAIN" and "END"	screens
0000C432                            ; ---------------------------------------------------------------------------
0000C432                            
0000C432                            TryAgainEnd:				; XREF: Credits
0000C432 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C436 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C43A 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C440 3CBC 8004                  		move.w	#$8004,(a6)
0000C444 3CBC 8230                  		move.w	#$8230,(a6)
0000C448 3CBC 8407                  		move.w	#$8407,(a6)
0000C44C 3CBC 9001                  		move.w	#$9001,(a6)
0000C450 3CBC 9200                  		move.w	#$9200,(a6)
0000C454 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C458 3CBC 8720                  		move.w	#$8720,(a6)
0000C45C 4238 F64E                  		clr.b	($FFFFF64E).w
0000C460 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C464 43F8 D000                  		lea	($FFFFD000).w,a1
0000C468 7000                       		moveq	#0,d0
0000C46A 323C 07FF                  		move.w	#$7FF,d1
0000C46E                            
0000C46E                            TryAg_ClrObjRam:
0000C46E 22C0                       		move.l	d0,(a1)+
0000C470 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000C474                            
0000C474 701D                       		moveq	#$1D,d0
0000C476 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000C47A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C47E 7000                       		moveq	#0,d0
0000C480 323C 001F                  		move.w	#$1F,d1
0000C484                            
0000C484                            TryAg_ClrPallet:
0000C484 22C0                       		move.l	d0,(a1)+
0000C486 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000C48A                            
0000C48A 7013                       		moveq	#$13,d0
0000C48C 6100 0000                  		bsr.w	Jmpto_Palload1	; load ending pallet
0000C490 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000C494 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000C49A 4EB9 0000 0000             		jsr	ObjectsLoad
0000C4A0 4EB9 0000 0000             		jsr	BuildSprites
0000C4A6 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w ; show screen for 30 seconds
0000C4AC 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C4B0                            
0000C4B0                            ; ---------------------------------------------------------------------------
0000C4B0                            ; "TRY AGAIN" and "END"	screen main loop
0000C4B0                            ; ---------------------------------------------------------------------------
0000C4B0                            TryAg_MainLoop:
0000C4B0 6100 0000                  		bsr.w	Jmpto_PauseGame
0000C4B4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C4BA 6100 CA42                  		bsr.w	DelayProgram
0000C4BE 4EB9 0000 0000             		jsr	ObjectsLoad
0000C4C4 4EB9 0000 0000             		jsr	BuildSprites
0000C4CA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000C4D0 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000C4D2 4A78 FC20                  		tst.w	($FFFFFC20).w	; has 30 seconds elapsed?
0000C4D6 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000C4D8 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000C4DE 67D0                       		beq.s	TryAg_MainLoop
0000C4E0                            
0000C4E0                            TryAg_Exit:
0000C4E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000C4E6 4E75                       		rts	
0000C4E8                            
0000C4E8                            ; ===========================================================================
0000C4E8                            ; ---------------------------------------------------------------------------
0000C4E8                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000C4E8                            ; ---------------------------------------------------------------------------
0000C4E8                            
0000C4E8                            Obj8B:					; XREF: Obj_Index
0000C4E8 7000                       		moveq	#0,d0
0000C4EA 1028 0024                  		move.b	$24(a0),d0
0000C4EE 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000C4F2 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000C4F6 4EF9 0000 0000             		jmp	DisplaySprite
0000C4FC                            ; ===========================================================================
0000C4FC 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000C4FE 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000C500 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000C502 0000                       		dc.w loc_5A8E-Obj8B_Index
0000C504                            ; ===========================================================================
0000C504                            
0000C504                            Obj8B_Main:				; XREF: Obj8B_Index
0000C504 5428 0024                  		addq.b	#2,$24(a0)
0000C508 317C 0120 0008             		move.w	#$120,8(a0)
0000C50E 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000C514 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000C51C 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000C522 117C 0000 0001             		move.b	#0,1(a0)
0000C528 317C 0100 0018             		move.w	#$100,priority(a0)
0000C52E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000C534 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000C53A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000C53C                            ;		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000C53C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000C542 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000C548 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000C54E                            
0000C54E                            Obj8B_Animate:				; XREF: Obj8B_Index
0000C54E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000C554 4EF9 0000 0000             		jmp	AnimateSprite
0000C55A                            ; ===========================================================================
0000C55A                            
0000C55A                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000C55A 5428 0024                  		addq.b	#2,$24(a0)
0000C55E 7002                       		moveq	#2,d0
0000C560 0828 0000 001C             		btst	#0,$1C(a0)
0000C566 6700                       		beq.s	loc_5A6A
0000C568 4440                       		neg.w	d0
0000C56A                            
0000C56A                            loc_5A6A:
0000C56A 43F8 D800                  		lea	($FFFFD800).w,a1
0000C56E 7205                       		moveq	#5,d1
0000C570                            
0000C570                            loc_5A70:
0000C570 1340 003E                  		move.b	d0,$3E(a1)
0000C574 3400                       		move.w	d0,d2
0000C576 E742                       		asl.w	#3,d2
0000C578 D529 0026                  		add.b	d2,$26(a1)
0000C57C 43E9 0040                  		lea	$40(a1),a1
0000C580 51C9 FFEE                  		dbf	d1,loc_5A70
0000C584 5228 001A                  		addq.b	#1,$1A(a0)
0000C588 317C 0070 0030             		move.w	#112,$30(a0)
0000C58E                            
0000C58E                            loc_5A8E:				; XREF: Obj8B_Index
0000C58E 5368 0030                  		subq.w	#1,$30(a0)
0000C592 6A00                       		bpl.s	locret_5AA0
0000C594 0868 0000 001C             		bchg	#0,$1C(a0)
0000C59A 117C 0002 0024             		move.b	#2,$24(a0)
0000C5A0                            
0000C5A0                            locret_5AA0:
0000C5A0 4E75                       		rts	
0000C5A2                            ; ===========================================================================
0000C5A2                            Ani_obj8B:
0000C5A2                            	include '_anim\obj8B.asm'
0000C5A2                            ; ---------------------------------------------------------------------------
0000C5A2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000C5A2                            ; ---------------------------------------------------------------------------
0000C5A2 0000                       		dc.w byte_5AA8-Ani_obj8B
0000C5A4 0000                       		dc.w byte_5AAC-Ani_obj8B
0000C5A6 0000                       		dc.w byte_5AB0-Ani_obj8B
0000C5A8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000C5AC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
0000C5B0 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000C5C2                            		even
0000C5C2                            		even
0000C5C2                            
0000C5C2                            ; ===========================================================================
0000C5C2                            ; ---------------------------------------------------------------------------
0000C5C2                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000C5C2                            ; ---------------------------------------------------------------------------
0000C5C2                            
0000C5C2                            Obj8C:					; XREF: Obj_Index
0000C5C2 7000                       		moveq	#0,d0
0000C5C4 1028 0024                  		move.b	$24(a0),d0
0000C5C8 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000C5CC 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000C5D0 4EF9 0000 0000             		jmp	DisplaySprite
0000C5D6                            ; ===========================================================================
0000C5D6 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000C5D8 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000C5DA                            ; ===========================================================================
0000C5DA                            
0000C5DA                            Obj8C_Main:				; XREF: Obj8C_Index
0000C5DA 2248                       		movea.l	a0,a1
0000C5DC 7400                       		moveq	#0,d2
0000C5DE 7600                       		moveq	#0,d3
0000C5E0 7205                       		moveq	#5,d1
0000C5E2 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000C5E6                            
0000C5E6                            Obj8C_MakeEms:				; XREF: loc_5B42
0000C5E6 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000C5EA 5429 0024                  		addq.b	#2,$24(a1)
0000C5EE 237C 0000 C280 0004        		move.l	#Map_obj88,4(a1)
0000C5F6 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000C5FC 137C 0000 0001             		move.b	#0,1(a1)
0000C602 337C 0080 0018             		move.w	#$80,priority(a1)
0000C608 337C 0104 0008             		move.w	#$104,8(a1)
0000C60E 337C 0120 0038             		move.w	#$120,$38(a1)
0000C614 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000C61A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000C620 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000C626 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000C62A                            
0000C62A                            Obj8C_ChkEms:
0000C62A 7000                       		moveq	#0,d0
0000C62C 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000C630 5340                       		subq.w	#1,d0
0000C632 6500                       		bcs.s	loc_5B42
0000C634                            
0000C634                            Obj8C_ChkEmLoop:
0000C634 B433 0000                  		cmp.b	(a3,d0.w),d2
0000C638 6600                       		bne.s	loc_5B3E
0000C63A 5202                       		addq.b	#1,d2
0000C63C 60EC                       		bra.s	Obj8C_ChkEms
0000C63E                            ; ===========================================================================
0000C63E                            
0000C63E                            loc_5B3E:
0000C63E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000C642                            
0000C642                            loc_5B42:
0000C642 1342 001A                  		move.b	d2,$1A(a1)
0000C646 5229 001A                  		addq.b	#1,$1A(a1)
0000C64A 5202                       		addq.b	#1,d2
0000C64C 137C 0080 0026             		move.b	#$80,$26(a1)
0000C652 1343 001E                  		move.b	d3,$1E(a1)
0000C656 1343 001F                  		move.b	d3,$1F(a1)
0000C65A 0643 000A                  		addi.w	#$A,d3
0000C65E 43E9 0040                  		lea	$40(a1),a1
0000C662 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000C666                            
0000C666                            Obj8C_Move:				; XREF: Obj8C_Index
0000C666 4A68 003E                  		tst.w	$3E(a0)
0000C66A 6700                       		beq.s	locret_5BBA
0000C66C 4A28 001E                  		tst.b	$1E(a0)
0000C670 6700                       		beq.s	loc_5B78
0000C672 5328 001E                  		subq.b	#1,$1E(a0)
0000C676 6600                       		bne.s	loc_5B80
0000C678                            
0000C678                            loc_5B78:
0000C678 3028 003E                  		move.w	$3E(a0),d0
0000C67C D168 0026                  		add.w	d0,$26(a0)
0000C680                            
0000C680                            loc_5B80:
0000C680 1028 0026                  		move.b	$26(a0),d0
0000C684 6700                       		beq.s	loc_5B8C
0000C686 0C00 0080                  		cmpi.b	#$80,d0
0000C68A 6600                       		bne.s	loc_5B96
0000C68C                            
0000C68C                            loc_5B8C:
0000C68C 4268 003E                  		clr.w	$3E(a0)
0000C690 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000C696                            
0000C696                            loc_5B96:
0000C696 4EB9 0000 8F30             		jsr	(CalcSine).l
0000C69C 7800                       		moveq	#0,d4
0000C69E 1828 003C                  		move.b	$3C(a0),d4
0000C6A2 C3C4                       		muls.w	d4,d1
0000C6A4 E081                       		asr.l	#8,d1
0000C6A6 C1C4                       		muls.w	d4,d0
0000C6A8 E080                       		asr.l	#8,d0
0000C6AA D268 0038                  		add.w	$38(a0),d1
0000C6AE D068 003A                  		add.w	$3A(a0),d0
0000C6B2 3141 0008                  		move.w	d1,8(a0)
0000C6B6 3140 000A                  		move.w	d0,$A(a0)
0000C6BA                            
0000C6BA                            locret_5BBA:
0000C6BA 4E75                       		rts	
0000C6BC                            ; ===========================================================================
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            Map_obj8B:
0000C6BC                            	include '_maps\obj8B.asm'
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000C6C0 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000C6C4 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000C6C8 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000C6CC 08                         byte_5BCC:	dc.b 8
0000C6CD E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000C6D2 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000C6D7 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000C6DC F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000C6E1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C6E6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C6EB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C6F0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C6F5 08                         byte_5BF5:	dc.b 8
0000C6F6 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000C6FB F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000C700 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000C705 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000C70A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C70F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C714 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C719 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C71E 08                         byte_5C1E:	dc.b 8
0000C71F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000C724 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000C729 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000C72E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000C733 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C738 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C73D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C742 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C747 08                         byte_5C47:	dc.b 8
0000C748 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000C74D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000C752 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000C757 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000C75C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C761 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C766 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C76B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C770 0C                         byte_5C70:	dc.b $C
0000C771 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000C776 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000C77B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000C780 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000C785 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000C78A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000C78F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000C794 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000C799 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000C79E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000C7A3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C7A8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C7AD 0A                         byte_5CAD:	dc.b $A
0000C7AE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000C7B3 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000C7B8 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000C7BD D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000C7C2 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000C7C7 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000C7CC 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C7D1 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C7D6 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000C7DB 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000C7E0 0A                         byte_5CE0:	dc.b $A
0000C7E1 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000C7E6 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000C7EB EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000C7F0 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000C7F5 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000C7FA EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000C7FF 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C804 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C809 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000C80E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000C813 0C                         byte_5D13:	dc.b $C
0000C814 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000C819 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000C81E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000C823 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000C828 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000C82D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000C832 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000C837 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000C83C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000C841 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000C846 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C84B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C850                            		even
0000C850                            		even
0000C850                            
0000C850                            ; ---------------------------------------------------------------------------
0000C850                            ; Ending sequence demos
0000C850                            ; ---------------------------------------------------------------------------
0000C850                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000C87E                            		even
0000C87E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000C8BE                            		even
0000C8BE                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000C8EE                            		even
0000C8EE                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000C91E                            		even
0000C91E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000C93E                            		even
0000C93E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000C95E                            		even
0000C95E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000C98E                            		even
0000C98E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000C9BE                            		even
0000C9BE                            
0000C9BE                            Jmpto_KosDec:
0000C9BE 4EF8 3A42                  	jmp	KosDec
0000C9C2                            Jmpto_Palload1:
0000C9C2 4EF8 4986                  	jmp	Palload1
0000C9C6                            Jmpto_PlaySFX:
0000C9C6 4EF8 3212                  	jmp	PlaySound
0000C9CA                            Jmpto_PlayMus:
0000C9CA 4EF8 325C                  	jmp	PlaySound_Special
0000C9CE                            Jmpto_Pal_FadeFrom:
0000C9CE 4EF8 46B4                  	jmp	Pal_FadeFrom
0000C9D2                            Jmpto_Pal_FadeTo:	
0000C9D2 4EF8 45FA                  	jmp	Pal_FadeTo
0000C9D6                            Jmpto_Pal_MakeWhite:
0000C9D6 4EF8 4738                  	jmp	Pal_MakeWhite
0000C9DA                            Jmpto_Pal_ToWhite:
0000C9DA 4EF8 4826                  	jmp	Pal_ToWhite
0000C9DE                            Jmpto_ClearScreen:
0000C9DE 4EF8 3084                  	jmp	ClearScreen
0000C9E2                            Jmpto_RunPLC_ROM:
0000C9E2 4EF8 3888                  	jmp	RunPLC_ROM
0000C9E6                            Jmpto_RunPLC_RAM:
0000C9E6 4EF8 377E                  	jmp	RunPLC_RAM
0000C9EA                            Jmpto_NemDec:
0000C9EA 4EF8 35B2                  	jmp	NemDec
0000C9EE                            Jmpto_LoadPLC:
0000C9EE 4EF8 3712                  	jmp	LoadPLC
0000C9F2                            Jmpto_ClearPLC:
0000C9F2 4EF8 3770                  	jmp	ClearPLC
0000C9F6                            Jmpto_PauseGame:
0000C9F6 4EF8 3310                  	jmp	PauseGame
0000C9FA                            Jmpto_PalCycle_Load:
0000C9FA 4EF8 3C62                  	jmp	PalCycle_Load
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            ; Subroutine to	load level boundaries and start	locations
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            
0000C9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C9FE                            
0000C9FE                            
0000C9FE                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000C9FE 7000                       		moveq	#0,d0
0000CA00 11C0 F740                  		move.b	d0,($FFFFF740).w
0000CA04 11C0 F741                  		move.b	d0,($FFFFF741).w
0000CA08 11C0 F746                  		move.b	d0,($FFFFF746).w
0000CA0C 11C0 F748                  		move.b	d0,($FFFFF748).w
0000CA10 11C0 F742                  		move.b	d0,($FFFFF742).w
0000CA14 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000CA18 ED08                       		lsl.b	#6,d0
0000CA1A E848                       		lsr.w	#4,d0
0000CA1C 3200                       		move.w	d0,d1
0000CA1E D040                       		add.w	d0,d0
0000CA20 D041                       		add.w	d1,d0
0000CA22 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000CA26 3018                       		move.w	(a0)+,d0
0000CA28 31C0 F730                  		move.w	d0,($FFFFF730).w
0000CA2C 2018                       		move.l	(a0)+,d0
0000CA2E 21C0 F728                  		move.l	d0,($FFFFF728).w
0000CA32 21C0 F720                  		move.l	d0,($FFFFF720).w
0000CA36 2018                       		move.l	(a0)+,d0
0000CA38 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000CA3C 21C0 F724                  		move.l	d0,($FFFFF724).w
0000CA40 3038 F728                  		move.w	($FFFFF728).w,d0
0000CA44 0640 0240                  		addi.w	#$240,d0
0000CA48 31C0 F732                  		move.w	d0,($FFFFF732).w
0000CA4C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000CA52 3018                       		move.w	(a0)+,d0
0000CA54 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000CA58 6000 0000                  		bra.w	LevSz_ChkLamp
0000CA5C                            ; ===========================================================================
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            ; Level size array and ending start location array
0000CA5C                            ; ---------------------------------------------------------------------------
0000CA5C                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000CBAC                            		even
0000CBAC                            
0000CBAC                            EndingStLocArray:
0000CBAC                            		incbin	misc\sloc_end.bin
0000CBCC                            		even
0000CBCC                            
0000CBCC                            ; ===========================================================================
0000CBCC                            
0000CBCC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000CBCC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000CBD0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000CBD2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000CBD8 3238 D008                  		move.w	($FFFFD008).w,d1
0000CBDC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000CBE0                            		;---------------------
0000CBE0                            ; Fix the Frame Counter Bug   //   when start by a Lamppost not have this bug,
0000CBE0                                              ; but after correct the main bug, you see zeros in place of the numbers
0000CBE0                                ;  movem.l   d0-a6,-(sp)
0000CBE0                                  ;move.l   #$5E400003,d0
0000CBE0                                  ;moveq   #0,d1
0000CBE0                                 ; move.b   ($FFFFFE23).w,d1 ; load   minutes
0000CBE0                                ;  jsr   Hud_Mins
0000CBE0                               ;   move.l   #$5EC00003,d0
0000CBE0                              ;    moveq   #0,d1
0000CBE0                             ;     move.b   ($FFFFFE24).w,d1 ; load   seconds
0000CBE0                            ;	cmpi.b	#59,d1
0000CBE0                            ;	blo.w 	@cappedsecs
0000CBE0                            ;	move
0000CBE0                            	
0000CBE0                            ;	jsr   Hud_Secs
0000CBE0                            ;      movem.l   (sp)+,d0-a6
0000CBE0                            ;---------------------
0000CBE0 6000                       		bra.s	loc_60D0
0000CBE2                            ; ===========================================================================
0000CBE2                            
0000CBE2                            TitleLoc:	;	x_pos, y_pos
0000CBE2 0050 03B0                                  dc.w	$50, $3B0
0000CBE6                            
0000CBE6                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000CBE6 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000CBEA 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w ; clear Super Sonic Flag
0000CBF0 ED08                       		lsl.b	#6,d0
0000CBF2 E848                       		lsr.w	#4,d0
0000CBF4 43FA FFEC                  		lea	TitleLoc(pc),a1			; Load Title Screen spawn location
0000CBF8 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w	; Are we on the Title Screen?
0000CBFE 6700                       		beq.s	LevSz_SonicPos			; If so, set the start position using the loaded spawn location
0000CC00 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CC04 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000CC08 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000CC0A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000CC0E 5340                       		subq.w	#1,d0
0000CC10 E548                       		lsl.w	#2,d0
0000CC12                            		;lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CC12                            
0000CC12                            LevSz_SonicPos:
0000CC12 7200                       		moveq	#0,d1
0000CC14 3219                       		move.w	(a1)+,d1
0000CC16 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000CC1A 7000                       		moveq	#0,d0
0000CC1C 3011                       		move.w	(a1),d0
0000CC1E 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000CC22                            
0000CC22                            loc_60D0:				; XREF: LevSz_ChkLamp
0000CC22 4278 F7A8                  	clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
0000CC26 45F8 CB00                  	lea	($FFFFCB00).w,a2	; load the tracking array into a2
0000CC2A 743F                       	moveq	#63,d2				; begin a 64-step loop
0000CC2C                            @looppoint:
0000CC2C 34C1                       	move.w	d1,(a2)+			; fill in X
0000CC2E 34C0                       	move.w	d0,(a2)+			; fill in Y
0000CC30 51CA FFFA                  	dbf	d2,@looppoint		; loop
0000CC34 0441 00A0                  	subi.w	#$A0,d1
0000CC38 6400                       	bcc.s	loc_60D8
0000CC3A 7200                       	moveq	#0,d1
0000CC3C                            
0000CC3C                            loc_60D8:
0000CC3C 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000CC40 B242                       		cmp.w	d2,d1
0000CC42 6500                       		bcs.s	loc_60E2
0000CC44 3202                       		move.w	d2,d1
0000CC46                            
0000CC46                            loc_60E2:
0000CC46 31C1 F700                  		move.w	d1,($FFFFF700).w
0000CC4A 0440 0060                  		subi.w	#$60,d0
0000CC4E 6400                       		bcc.s	loc_60EE
0000CC50 7000                       		moveq	#0,d0
0000CC52                            
0000CC52                            loc_60EE:
0000CC52 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000CC56 6D00                       		blt.s	loc_60F8
0000CC58 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000CC5C                            
0000CC5C                            loc_60F8:
0000CC5C 31C0 F704                  		move.w	d0,($FFFFF704).w
0000CC60 6100 0000                  		bsr.w	BgScrollSpeed
0000CC64 6000 0000                  		bra.w	LevSz_Unk
0000CC68                            ; ===========================================================================
0000CC68                            ; ---------------------------------------------------------------------------
0000CC68                            ; Sonic	start location array
0000CC68                            ; ---------------------------------------------------------------------------
0000CC68                            StartLocArray:
0000CC68                            		incbin	misc\sloc_lev.bin
0000CCD8                            		even
0000CCD8                            
0000CCD8                            ; ---------------------------------------------------------------------------
0000CCD8                            ; Which	256x256	tiles contain loops or roll-tunnels
0000CCD8                            ; ---------------------------------------------------------------------------
0000CCD8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000CCD8                            ; loop,	loop, tunnel, tunnel
0000CCD8                            ; ---------------------------------------------------------------------------
0000CCD8                            LoopTileNums:	incbin	misc\loopnums.bin
0000CCF4                            		even
0000CCF4                            
0000CCF4                            ; ===========================================================================
0000CCF4                            
0000CCF4                            LevSz_Unk:				; XREF: LevelSizeLoad
0000CCF4 7000                       		moveq	#0,d0
0000CCF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CCFA E508                       		lsl.b	#2,d0
0000CCFC 21FB 00DA F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000CD02 7000                       		moveq	#0,d0
0000CD04 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD08 E748                       		lsl.w	#3,d0
0000CD0A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000CD0E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000CD12 24D9                       		move.l	(a1)+,(a2)+
0000CD14 24D9                       		move.l	(a1)+,(a2)+
0000CD16 4E75                       		rts	
0000CD18                            ; End of function LevelSizeLoad
0000CD18                            
0000CD18                            ; ===========================================================================
0000CD18 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000CD20 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CD28 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CD30 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CD38 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CD40 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CD48 0070 0100 0100 0100        		dc.l $700100, $1000100
0000CD50                            
0000CD50                            ; ---------------------------------------------------------------------------
0000CD50                            ; Subroutine to	set scroll speed of some backgrounds
0000CD50                            ; ---------------------------------------------------------------------------
0000CD50                            
0000CD50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD50                            
0000CD50                            
0000CD50                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000CD50 4A38 FE30                  		tst.b	($FFFFFE30).w
0000CD54 6600                       		bne.s	loc_6206
0000CD56 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CD5A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000CD5E 31C1 F708                  		move.w	d1,($FFFFF708).w
0000CD62 31C1 F710                  		move.w	d1,($FFFFF710).w
0000CD66 31C1 F718                  		move.w	d1,($FFFFF718).w
0000CD6A                            
0000CD6A                            loc_6206:
0000CD6A 7400                       		moveq	#0,d2
0000CD6C 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000CD70 D442                       		add.w	d2,d2
0000CD72 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000CD76 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000CD7A                            ; End of function BgScrollSpeed
0000CD7A                            
0000CD7A                            ; ===========================================================================
0000CD7A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000CD7E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000CD82 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000CD86 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_ABZ-BgScroll_Index
0000CD8A                            ; ===========================================================================
0000CD8A                             
0000CD8A                            BgScroll_ABZ:				; XREF: BgScroll_Index
0000CD8A 4E75                       		rts	
0000CD8C                            ; ===========================================================================
0000CD8C                            
0000CD8C                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000CD8C 42B8 F708                  		clr.l	($FFFFF708).w
0000CD90 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CD94 42B8 F714                  		clr.l	($FFFFF714).w
0000CD98 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CD9C 45F8 A800                  		lea	($FFFFA800).w,a2
0000CDA0 429A                       		clr.l	(a2)+
0000CDA2 429A                       		clr.l	(a2)+
0000CDA4 429A                       		clr.l	(a2)+
0000CDA6 4E75                       		rts 
0000CDA8                            ; ===========================================================================
0000CDA8                             
0000CDA8                            BgScroll_LZ:				; XREF: BgScroll_Index
0000CDA8 E280                       		asr.l	#1,d0
0000CDAA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CDAE 4E75                       		rts	
0000CDB0                            ; ===========================================================================
0000CDB0                             
0000CDB0                            BgScroll_MZ:				; XREF: BgScroll_Index
0000CDB0 4E75                       		rts	
0000CDB2                            ; ===========================================================================
0000CDB2                             
0000CDB2                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000CDB2 E280                       		asr.l	#1,d0
0000CDB4 0640 00C0                  		addi.w	#$C0,d0
0000CDB8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CDBC 42B8 F708                  		clr.l	($FFFFF708).w
0000CDC0 4E75                       		rts	
0000CDC2                            ; ===========================================================================
0000CDC2                             
0000CDC2                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000CDC2 42B8 F708                  	clr.l	(Camera_BG_X_pos).w
0000CDC6 42B8 F70C                  	clr.l	(Camera_BG_Y_pos).w
0000CDCA 42B8 F72C                  	clr.l	($FFFFF72C).w
0000CDCE 4E75                       	rts
0000CDD0                            ; ===========================================================================
0000CDD0                             
0000CDD0                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000CDD0 0240 07F8                  		andi.w	#$7F8,d0
0000CDD4 E640                       		asr.w	#3,d0
0000CDD6 5240                       		addq.w	#1,d0
0000CDD8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CDDC 4E75                       		rts	
0000CDDE                            ; ===========================================================================
0000CDDE                             
0000CDDE                            BgScroll_End:				; XREF: BgScroll_Index
0000CDDE 3038 F700                  		move.w	($FFFFF700).w,d0
0000CDE2 E240                       		asr.w	#1,d0
0000CDE4 31C0 F708                  		move.w	d0,($FFFFF708).w
0000CDE8 31C0 F710                  		move.w	d0,($FFFFF710).w
0000CDEC E440                       		asr.w	#2,d0
0000CDEE 3200                       		move.w	d0,d1
0000CDF0 D040                       		add.w	d0,d0
0000CDF2 D041                       		add.w	d1,d0
0000CDF4 31C0 F718                  		move.w	d0,($FFFFF718).w
0000CDF8 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CDFC 42B8 F714                  		clr.l	($FFFFF714).w
0000CE00 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CE04 45F8 A800                  		lea	($FFFFA800).w,a2
0000CE08 429A                       		clr.l	(a2)+
0000CE0A 429A                       		clr.l	(a2)+
0000CE0C 429A                       		clr.l	(a2)+
0000CE0E 4E75                       		rts   
0000CE10                            ; ===========================================================================
0000CE10 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000CE16 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000CE1C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000CE22 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000CE28 4E75                       		rts
0000CE2A                            
0000CE2A                            ; ---------------------------------------------------------------------------
0000CE2A                            ; Background layer deformation subroutines
0000CE2A                            ; ---------------------------------------------------------------------------
0000CE2A                            
0000CE2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE2A                            
0000CE2A                            
0000CE2A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000CE2A 4A38 F744                  		tst.b	($FFFFF744).w
0000CE2E 6700                       		beq.s	loc_628E
0000CE30 4E75                       		rts	
0000CE32                            ; ===========================================================================
0000CE32                            
0000CE32                            loc_628E:
0000CE32 4278 F754                  		clr.w	($FFFFF754).w
0000CE36 4278 F756                  		clr.w	($FFFFF756).w
0000CE3A 4278 F758                  		clr.w	($FFFFF758).w
0000CE3E 4278 F75A                  		clr.w	($FFFFF75A).w
0000CE42 6100 0000                  		bsr.w	ScrollHoriz
0000CE46 6100 0000                  		bsr.w	ScrollVertical
0000CE4A 6100 0000                  		bsr.w	DynScrResizeLoad
0000CE4E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000CE54 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000CE5A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000CE60 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000CE66 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000CE6C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000CE72 0C38 0004 F600             		cmpi.b	#4,(Game_Mode).w	;exit if on the Title
0000CE78 6700                       		beq.s	DLE_NoChg
0000CE7A 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w	;exit if in a Special Stage
0000CE80 6700                       		beq.s	DLE_NoChg
0000CE82                            ;		move.l	(Camera_X_pos).w,($FFFFFE2C).w
0000CE82                            ;		move.l	(Camera_Y_pos).w,($FFFFFFC4).w
0000CE82 7000                       		moveq	#0,d0
0000CE84 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE88 D040                       		add.w	d0,d0
0000CE8A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000CE8E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000CE92                            		
0000CE92                            DLE_NoChg:
0000CE92 4E75                       		rts	
0000CE94                            ; End of function DeformBgLayer
0000CE94                            
0000CE94                            ; ===========================================================================
0000CE94                            ; ---------------------------------------------------------------------------
0000CE94                            ; Offset index for background layer deformation	code
0000CE94                            ; ---------------------------------------------------------------------------
0000CE94 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000CE98 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000CE9C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000CEA0 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_ABZ-Deform_Index
0000CEA4                            ; ---------------------------------------------------------------------------
0000CEA4                            ; Green	Hill Zone background layer deformation code
0000CEA4                            ; ---------------------------------------------------------------------------
0000CEA4                            
0000CEA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CEA4                            
0000CEA4                            
0000CEA4                            Deform_GHZ:
0000CEA4 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CEA8 48C4                       		ext.l	d4
0000CEAA EB84                       		asl.l	#5,d4
0000CEAC 2204                       		move.l	d4,d1
0000CEAE E384                       		asl.l	#1,d4
0000CEB0 D881                       		add.l	d1,d4
0000CEB2 7C00                       		moveq	#0,d6
0000CEB4 6100 0000                  		bsr.w	ScrollBlock6
0000CEB8 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CEBC 48C4                       		ext.l	d4
0000CEBE EF84                       		asl.l	#7,d4
0000CEC0 7C00                       		moveq	#0,d6
0000CEC2 6100 0000                  		bsr.w	ScrollBlock5
0000CEC6 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning of buffer address to a1
0000CECA                            
0000CECA 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CECE 4440                       		neg.w	d0			; negate (positive to negative)
0000CED0 4840                       		swap	d0			; send to the left side of d0
0000CED2 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CED6 4440                       		neg.w	d0			; negate (positive to negative)
0000CED8 E040                       		asr.w	#8,d0			; divide by 8 (Slow down the scroll position)
0000CEDA 323C 0078                  		move.w	#121-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CEDE                            GHZ_DeformLoop_1:
0000CEDE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CEE0 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_1	; repeat d1 number of scanlines
0000CEE4                            
0000CEE4 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CEE8 4440                       		neg.w	d0			; negate (positive to negative)
0000CEEA 4840                       		swap	d0			; send to the left side of d0
0000CEEC 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CEF0 4440                       		neg.w	d0			; negate (positive to negative)
0000CEF2 E240                       		asr.w	#1,d0			; divide by 1 (Slow down the scroll position)
0000CEF4 323C 0067                  		move.w	#104-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CEF8                            GHZ_DeformLoop_2:
0000CEF8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CEFA 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_2	; repeat d1 number of scanlines
0000CEFE 4E75                       		rts	
0000CF00                            ; End of function Deform_GHZ
0000CF00                            ;		rts
0000CF00                            ; End of function Deform_GHZ
0000CF00                             
0000CF00                             
0000CF00                            ; ===========================================================================
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000CF00                            ; ---------------------------------------------------------------------------
0000CF00                            
0000CF00                            Deform_LZ:
0000CF00 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000CF02 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
0000CF06 48C4                       		ext.l	d4					; extend to long-word signed
0000CF08 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000CF0A 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000CF0E 48C5                       		ext.l	d5					; extend to long-word signed
0000CF10 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000CF12 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000CF16 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000CF1C 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
0000CF20 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000CF24 4440                       		neg.w	d0					; reverse
0000CF26 4840                       		swap	d0					; send to upper word
0000CF28 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000CF2C 4440                       		neg.w	d0					; reverse
0000CF2E 7600                       		moveq	#$00,d3					; clear d3
0000CF30 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000CF34 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000CF3A 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000CF3E 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
0000CF42 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000CF46 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000CF48 B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000CF4A 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000CF4C 3202                       		move.w	d2,d1					; set at maximum
0000CF4E                            
0000CF4E                            DLZ_NoWater:
0000CF4E 9441                       		sub.w	d1,d2					; subtract from water-line count
0000CF50 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000CF52 5301                       		subq.b	#$01,d1					; decrease above water count
0000CF54 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000CF56                            
0000CF56                            DLZ_Above:
0000CF56 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000CF58 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000CF5C                            
0000CF5C                            DLZ_Water:
0000CF5C 5302                       		subq.b	#$01,d2					; decrease below water count
0000CF5E 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000CF60 3200                       		move.w	d0,d1					; copy BG position back to d1
0000CF62 4840                       		swap	d0					; move FG position back to lower word in d0
0000CF64 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000CF66 D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
0000CF6A D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
0000CF6E D643                       		add.w	d3,d3					; multiply by word size (2)
0000CF70 D844                       		add.w	d4,d4					; ''
0000CF72 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000CF78 D6C4                       		adda.w	d4,a3					; advance to correct starting point
0000CF7A 1813                       		move.b	(a3),d4					; get current position byte
0000CF7C E404                       		asr.b	#$02,d4					; get only the position bits
0000CF7E 4884                       		ext.w	d4					; extend to word
0000CF80 D244                       		add.w	d4,d1					; adjust BG's current position
0000CF82 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000CF86 1812                       		move.b	(a2),d4					; get current position byte
0000CF88 E404                       		asr.b	#$02,d4					; get only the position bits
0000CF8A 4884                       		ext.w	d4					; extend to word
0000CF8C D044                       		add.w	d4,d0					; adjust FG's current position
0000CF8E                            
0000CF8E                            DLZ_Below:
0000CF8E D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000CF90 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000CF92 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000CF94 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000CF96 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000CF9A                            
0000CF9A                            DLZ_Finish:
0000CF9A 4E75                       		rts						; return
0000CF9C                            
0000CF9C                            ; ---------------------------------------------------------------------------
0000CF9C                            ; Scroll data for the FG
0000CF9C                            ; ---------------------------------------------------------------------------
0000CF9C                            
0000CF9C                            DLZ_WaveFG:
0000CF9C                            		rept	$02
0000CF9C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CF9C 0001 0400 0401 0800 0801+  		endr
0000D39C                            
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Scroll data for the BG
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            
0000D39C                            DLZ_WaveBG:	rept	$04
0000D39C                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000D39C                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000D39C                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000D39C                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000D39C                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000D39C                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000D39C                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000D39C                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000D39C FC01 0000 0000 0000 0000+  		endr
0000D79C                            
0000D79C                            ; =========================================================================== 
0000D79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D79C                            
0000D79C                            Deform_ABZ:
0000D79C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000D7A2 6500 0000                  		bcs.w	Deform_SYZ 
0000D7A6 4EF9 0000 0000             		jmp	Deform_SBZ 
0000D7AC                             
0000D7AC                            Deform_MZ:
0000D7AC 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D7B0 48C4                       		ext.l	d4
0000D7B2 ED84                       		asl.l	#6,d4
0000D7B4 2204                       		move.l	d4,d1
0000D7B6 E384                       		asl.l	#1,d4
0000D7B8 D881                       		add.l	d1,d4
0000D7BA 7C02                       		moveq	#2,d6
0000D7BC 6100 0000                  		bsr.w	ScrollBlock4
0000D7C0 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D7C4 48C4                       		ext.l	d4
0000D7C6 ED84                       		asl.l	#6,d4
0000D7C8 7C06                       		moveq	#6,d6
0000D7CA 6100 0000                  		bsr.w	ScrollBlock6
0000D7CE 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D7D2 48C4                       		ext.l	d4
0000D7D4 EF84                       		asl.l	#7,d4
0000D7D6 7C04                       		moveq	#4,d6
0000D7D8 6100 0000                  		bsr.w	ScrollBlock5
0000D7DC 303C 0200                  		move.w	#$200,d0
0000D7E0 3238 F704                  		move.w	($FFFFF704).w,d1
0000D7E4 0441 01C8                  		subi.w	#$1C8,d1
0000D7E8 6500                       		bcs.s	Deform_MZ_1
0000D7EA 3401                       		move.w	d1,d2
0000D7EC D241                       		add.w	d1,d1
0000D7EE D242                       		add.w	d2,d1
0000D7F0 E441                       		asr.w	#2,d1
0000D7F2 D041                       		add.w	d1,d0
0000D7F4                             
0000D7F4                            Deform_MZ_1:				; XREF: Deform_MZ
0000D7F4 31C0 F714                  		move.w	d0,($FFFFF714).w
0000D7F8 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000D7FC 6100 0000                  		bsr.w	ScrollBlock3
0000D800 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D806 1038 F756                  		move.b	($FFFFF756).w,d0
0000D80A 8038 F758                  		or.b	($FFFFF758).w,d0
0000D80E 8138 F75A                  		or.b	d0,($FFFFF75A).w
0000D812 4238 F756                  		clr.b	($FFFFF756).w
0000D816 4238 F758                  		clr.b	($FFFFF758).w
0000D81A 43F8 A800                  		lea	($FFFFA800).w,a1
0000D81E 3438 F700                  		move.w	($FFFFF700).w,d2
0000D822 4442                       		neg.w	d2
0000D824 3002                       		move.w	d2,d0
0000D826 E440                       		asr.w	#2,d0
0000D828 9042                       		sub.w	d2,d0
0000D82A 48C0                       		ext.l	d0
0000D82C E780                       		asl.l	#3,d0
0000D82E 81FC 0005                  		divs.w	#5,d0
0000D832 48C0                       		ext.l	d0
0000D834 E980                       		asl.l	#4,d0
0000D836 E180                       		asl.l	#8,d0
0000D838 7600                       		moveq	#0,d3
0000D83A 3602                       		move.w	d2,d3
0000D83C E243                       		asr.w	#1,d3
0000D83E 323C 0004                  		move.w	#4,d1
0000D842                             
0000D842                            Deform_MZ_2:				; XREF: Deform_MZ
0000D842 32C3                       		move.w	d3,(a1)+
0000D844 4843                       		swap	d3
0000D846 D680                       		add.l	d0,d3
0000D848 4843                       		swap	d3
0000D84A 51C9 FFF6                  		dbf	d1,Deform_MZ_2
0000D84E 3038 F718                  		move.w	($FFFFF718).w,d0
0000D852 4440                       		neg.w	d0
0000D854 323C 0001                  		move.w	#1,d1
0000D858                             
0000D858                            Deform_MZ_3:				; XREF: Deform_MZ
0000D858 32C0                       		move.w	d0,(a1)+
0000D85A 51C9 FFFC                  		dbf	d1,Deform_MZ_3
0000D85E 3038 F710                  		move.w	($FFFFF710).w,d0
0000D862 4440                       		neg.w	d0
0000D864 323C 0008                  		move.w	#8,d1
0000D868                             
0000D868                            Deform_MZ_4:				; XREF: Deform_MZ
0000D868 32C0                       		move.w	d0,(a1)+
0000D86A 51C9 FFFC                  		dbf	d1,Deform_MZ_4
0000D86E 3038 F708                  		move.w	($FFFFF708).w,d0
0000D872 4440                       		neg.w	d0
0000D874 323C 000F                  		move.w	#$F,d1
0000D878                             
0000D878                            Deform_MZ_5:				; XREF: Deform_MZ
0000D878 32C0                       		move.w	d0,(a1)+
0000D87A 51C9 FFFC                  		dbf	d1,Deform_MZ_5
0000D87E 45F8 A800                  		lea	($FFFFA800).w,a2
0000D882 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D886 0440 0200                  		subi.w	#$200,d0
0000D88A 3400                       		move.w	d0,d2
0000D88C 0C40 0100                  		cmpi.w	#$100,d0
0000D890 6500                       		bcs.s	Deform_MZ_6
0000D892 303C 0100                  		move.w	#$100,d0
0000D896                             
0000D896                            Deform_MZ_6:				; XREF: Deform_MZ
0000D896 0240 01F0                  		andi.w	#$1F0,d0
0000D89A E648                       		lsr.w	#3,d0
0000D89C 45F2 0000                  		lea	(a2,d0.w),a2
0000D8A0 6000 0000                  		bra.w	Deform_All
0000D8A4                            ; ===========================================================================
0000D8A4                             
0000D8A4                            Deform_SLZ:
0000D8A4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D8A8 48C5                       		ext.l	d5
0000D8AA EF85                       		asl.l	#7,d5
0000D8AC 6100 0000                  		bsr.w	ScrollBlock2
0000D8B0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D8B6 43F8 A800                  		lea	($FFFFA800).w,a1
0000D8BA 3438 F700                  		move.w	($FFFFF700).w,d2
0000D8BE 4442                       		neg.w	d2
0000D8C0 3002                       		move.w	d2,d0
0000D8C2 E640                       		asr.w	#3,d0
0000D8C4 9042                       		sub.w	d2,d0
0000D8C6 48C0                       		ext.l	d0
0000D8C8 E980                       		asl.l	#4,d0
0000D8CA 81FC 001C                  		divs.w	#$1C,d0
0000D8CE 48C0                       		ext.l	d0
0000D8D0 E980                       		asl.l	#4,d0
0000D8D2 E180                       		asl.l	#8,d0
0000D8D4 7600                       		moveq	#0,d3
0000D8D6 3602                       		move.w	d2,d3
0000D8D8 323C 001B                  		move.w	#$1B,d1
0000D8DC                             
0000D8DC                            Deform_SLZ_1:				; XREF: Deform_MZ
0000D8DC 32C3                       		move.w	d3,(a1)+
0000D8DE 4843                       		swap	d3
0000D8E0 D680                       		add.l	d0,d3
0000D8E2 4843                       		swap	d3
0000D8E4 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
0000D8E8 3002                       		move.w	d2,d0
0000D8EA E640                       		asr.w	#3,d0
0000D8EC 3200                       		move.w	d0,d1
0000D8EE E241                       		asr.w	#1,d1
0000D8F0 D041                       		add.w	d1,d0
0000D8F2 323C 0004                  		move.w	#4,d1
0000D8F6                             
0000D8F6                            Deform_SLZ_2:				; XREF: Deform_MZ
0000D8F6 32C0                       		move.w	d0,(a1)+
0000D8F8 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000D8FC 3002                       		move.w	d2,d0
0000D8FE E440                       		asr.w	#2,d0
0000D900 323C 0004                  		move.w	#4,d1
0000D904                             
0000D904                            Deform_SLZ_3:				; XREF: Deform_MZ
0000D904 32C0                       		move.w	d0,(a1)+
0000D906 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000D90A 3002                       		move.w	d2,d0
0000D90C E240                       		asr.w	#1,d0
0000D90E 323C 001D                  		move.w	#$1D,d1
0000D912                             
0000D912                            Deform_SLZ_4:				; XREF: Deform_MZ
0000D912 32C0                       		move.w	d0,(a1)+
0000D914 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
0000D918 45F8 A800                  		lea	($FFFFA800).w,a2
0000D91C 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D920 3400                       		move.w	d0,d2
0000D922 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000D926 0240 03F0                  		andi.w	#$3F0,d0
0000D92A E648                       		lsr.w	#3,d0
0000D92C 45F2 0000                  		lea	(a2,d0.w),a2
0000D930                             
0000D930                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
0000D930 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000D934 323C 000E                  		move.w	#$E,d1
0000D938 3038 F700                  		move.w	($FFFFF700).w,d0
0000D93C 4440                       		neg.w	d0
0000D93E 4840                       		swap	d0
0000D940 0242 000F                  		andi.w	#$F,d2
0000D944 D442                       		add.w	d2,d2
0000D946 301A                       		move.w	(a2)+,d0
0000D948 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000D94C                            ; End of function Deform_MZ
0000D94C                             
0000D94C                            ; ===========================================================================
0000D94C                             
0000D94C                            Deform_All_1:				; XREF: Deform_All
0000D94C 301A                       		move.w	(a2)+,d0
0000D94E                             
0000D94E                            Deform_All_2:
0000D94E 22C0                       		move.l	d0,(a1)+
0000D950 22C0                       		move.l	d0,(a1)+
0000D952 22C0                       		move.l	d0,(a1)+
0000D954 22C0                       		move.l	d0,(a1)+
0000D956 22C0                       		move.l	d0,(a1)+
0000D958 22C0                       		move.l	d0,(a1)+
0000D95A 22C0                       		move.l	d0,(a1)+
0000D95C 22C0                       		move.l	d0,(a1)+
0000D95E 22C0                       		move.l	d0,(a1)+
0000D960 22C0                       		move.l	d0,(a1)+
0000D962 22C0                       		move.l	d0,(a1)+
0000D964 22C0                       		move.l	d0,(a1)+
0000D966 22C0                       		move.l	d0,(a1)+
0000D968 22C0                       		move.l	d0,(a1)+
0000D96A 22C0                       		move.l	d0,(a1)+
0000D96C 22C0                       		move.l	d0,(a1)+
0000D96E 51C9 FFDC                  		dbf	d1,Deform_All_1
0000D972 4E75                       		rts	
0000D974                             
0000D974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D974                             
0000D974                             
0000D974                            Deform_SYZ:
0000D974 3038 F704                  	move.w	(Camera_Y_pos).w,d0
0000D978 EC48                       	lsr.w	#6,d0
0000D97A 31C0 F70C                  	move.w	d0,(Camera_BG_Y_pos).w
0000D97E 31F8 F70C F61C             	move.w	(Camera_BG_Y_pos).w,(Vscroll_Factor+2).w
0000D984 3438 F700                  	move.w	(Camera_X_pos).w,d2
0000D988 6100 0000                  	bsr.w	sub_D160
0000D98C 47F9 0000 0000             	lea	(byte_D156).l,a3
0000D992 45F8 A800                  	lea	($FFFFA800).w,a2
0000D996 43F8 CC00                  	lea	(Horiz_Scroll_Buf).w,a1
0000D99A 3238 F70C                  	move.w	(Camera_BG_Y_pos).w,d1
0000D99E 7000                       	moveq	#0,d0
0000D9A0                            
0000D9A0                            loc_D0FA:
0000D9A0 101B                       	move.b	(a3)+,d0
0000D9A2 544A                       	addq.w	#2,a2
0000D9A4 9240                       	sub.w	d0,d1
0000D9A6 64F8                       	bcc.s	loc_D0FA
0000D9A8 4441                       	neg.w	d1
0000D9AA 554A                       	subq.w	#2,a2
0000D9AC 343C 00DF                  	move.w	#$DF,d2
0000D9B0 3038 F700                  	move.w	(Camera_X_pos).w,d0
0000D9B4 4440                       	neg.w	d0
0000D9B6 4840                       	swap	d0
0000D9B8 301A                       	move.w	(a2)+,d0
0000D9BA 4440                       	neg.w	d0
0000D9BC                            
0000D9BC                            loc_D116:
0000D9BC 22C0                       	move.l	d0,(a1)+
0000D9BE 5341                       	subq.w	#1,d1
0000D9C0 6600                       	bne.s	loc_D124
0000D9C2                            
0000D9C2                            loc_D11C:
0000D9C2 301A                       	move.w	(a2)+,d0
0000D9C4 4440                       	neg.w	d0
0000D9C6 121B                       	move.b	(a3)+,d1
0000D9C8 6700                       	beq.s	loc_D12A
0000D9CA                            
0000D9CA                            loc_D124:
0000D9CA 51CA FFF0                  	dbf	d2,loc_D116
0000D9CE 4E75                       	rts
0000D9D0                            ; ===========================================================================
0000D9D0                            
0000D9D0                            loc_D12A:
0000D9D0 323C 000F                  	move.w	#$F,d1
0000D9D4 3600                       	move.w	d0,d3
0000D9D6 1038 FE0F                  	move.b	(Vint_runcount+3).w,d0
0000D9DA E648                       	lsr.w	#3,d0
0000D9DC 4440                       	neg.w	d0
0000D9DE 0240 001F                  	andi.w	#$1F,d0
0000D9E2 49FA F5B8                  	lea	DLZ_WaveFG(pc),a4
0000D9E6 49F4 0000                  	lea	(a4,d0.w),a4
0000D9EA                            
0000D9EA                            loc_D12A_2:
0000D9EA 101C                       	move.b	(a4)+,d0
0000D9EC 4880                       	ext.w	d0
0000D9EE D043                       	add.w	d3,d0
0000D9F0 22C0                       	move.l	d0,(a1)+
0000D9F2 51C9 FFF6                  	dbf	d1,loc_D12A_2
0000D9F6                            
0000D9F6 0442 0010                  	subi.w	#$10,d2
0000D9FA 60C6                       	bra.s	loc_D11C
0000D9FC                            ; ===========================================================================
0000D9FC                            byte_D156:
0000D9FC 10                         	dc.b $10
0000D9FD 10                         	dc.b $10	; 1
0000D9FE 10                         	dc.b $10	; 2
0000D9FF 10                         	dc.b $10	; 3
0000DA00 10                         	dc.b $10	; 4
0000DA01 10                         	dc.b $10	; 5
0000DA02 10                         	dc.b $10	; 6
0000DA03 10                         	dc.b $10	; 7
0000DA04 00                         	dc.b   0	; 8
0000DA05 F0                         	dc.b $F0	; 9
0000DA06                            
0000DA06                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000DA06                            
0000DA06                            
0000DA06                            sub_D160:
0000DA06 43F8 A800                  	lea	($FFFFA800).w,a1
0000DA0A 3002                       	move.w	d2,d0
0000DA0C E640                       	asr.w	#3,d0
0000DA0E 9042                       	sub.w	d2,d0
0000DA10 48C0                       	ext.l	d0
0000DA12 EB80                       	asl.l	#5,d0
0000DA14 E180                       	asl.l	#8,d0
0000DA16 7600                       	moveq	#0,d3
0000DA18 3602                       	move.w	d2,d3
0000DA1A 323C 0006                  	move.w	#6,d1
0000DA1E                            
0000DA1E                            loc_D178:
0000DA1E 32C3                       	move.w	d3,(a1)+
0000DA20 4843                       	swap	d3
0000DA22 D680                       	add.l	d0,d3
0000DA24 4843                       	swap	d3
0000DA26 51C9 FFF6                  	dbf	d1,loc_D178
0000DA2A 3002                       	move.w	d2,d0
0000DA2C E640                       	asr.w	#3,d0
0000DA2E 3340 0004                  	move.w	d0,4(a1)
0000DA32 E240                       	asr.w	#1,d0
0000DA34 32C0                       	move.w	d0,(a1)+
0000DA36 32C0                       	move.w	d0,(a1)+
0000DA38 4E75                       	rts
0000DA3A                            ; End of function Deform_SYZ
0000DA3A                             
0000DA3A                             
0000DA3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA3A                             
0000DA3A                             
0000DA3A                            Deform_SBZ:
0000DA3A 4A38 FE11                  		tst.b	($FFFFFE11).w
0000DA3E 6600 0000                  		bne.w	Deform_SBZ_Act2
0000DA42 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000DA46 48C4                       		ext.l	d4
0000DA48 EF84                       		asl.l	#7,d4
0000DA4A 7C02                       		moveq	#2,d6
0000DA4C 6100 0000                  		bsr.w	ScrollBlock4
0000DA50 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000DA54 48C4                       		ext.l	d4
0000DA56 ED84                       		asl.l	#6,d4
0000DA58 7C06                       		moveq	#6,d6
0000DA5A 6100 0000                  		bsr.w	ScrollBlock6
0000DA5E 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000DA62 48C4                       		ext.l	d4
0000DA64 EB84                       		asl.l	#5,d4
0000DA66 2204                       		move.l	d4,d1
0000DA68 E384                       		asl.l	#1,d4
0000DA6A D881                       		add.l	d1,d4
0000DA6C 7C04                       		moveq	#4,d6
0000DA6E 6100 0000                  		bsr.w	ScrollBlock5
0000DA72 7800                       		moveq	#0,d4
0000DA74 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000DA78 48C5                       		ext.l	d5
0000DA7A EB85                       		asl.l	#5,d5
0000DA7C 6100 0000                  		bsr.w	ScrollBlock1_2
0000DA80 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DA84 31C0 F714                  		move.w	d0,($FFFFF714).w
0000DA88 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000DA8C 31C0 F618                  		move.w	d0,($FFFFF618).w
0000DA90 1038 F756                  		move.b	($FFFFF756).w,d0
0000DA94 8038 F75A                  		or.b	($FFFFF75A).w,d0
0000DA98 8138 F758                  		or.b	d0,($FFFFF758).w
0000DA9C 4238 F756                  		clr.b	($FFFFF756).w
0000DAA0 4238 F75A                  		clr.b	($FFFFF75A).w
0000DAA4 43F8 A800                  		lea	($FFFFA800).w,a1
0000DAA8 3438 F700                  		move.w	($FFFFF700).w,d2
0000DAAC 4442                       		neg.w	d2
0000DAAE E442                       		asr.w	#2,d2
0000DAB0 3002                       		move.w	d2,d0
0000DAB2 E240                       		asr.w	#1,d0
0000DAB4 9042                       		sub.w	d2,d0
0000DAB6 48C0                       		ext.l	d0
0000DAB8 E780                       		asl.l	#3,d0
0000DABA 81FC 0004                  		divs.w	#4,d0
0000DABE 48C0                       		ext.l	d0
0000DAC0 E980                       		asl.l	#4,d0
0000DAC2 E180                       		asl.l	#8,d0
0000DAC4 7600                       		moveq	#0,d3
0000DAC6 3602                       		move.w	d2,d3
0000DAC8 323C 0003                  		move.w	#3,d1
0000DACC                             
0000DACC                            Deform_SBZ_1:				; XREF: Deform_SBZ
0000DACC 32C3                       		move.w	d3,(a1)+
0000DACE 4843                       		swap	d3
0000DAD0 D680                       		add.l	d0,d3
0000DAD2 4843                       		swap	d3
0000DAD4 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
0000DAD8 3038 F718                  		move.w	($FFFFF718).w,d0
0000DADC 4440                       		neg.w	d0
0000DADE 323C 0009                  		move.w	#9,d1
0000DAE2                             
0000DAE2                            Deform_SBZ_2:				; XREF: Deform_SBZ
0000DAE2 32C0                       		move.w	d0,(a1)+
0000DAE4 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000DAE8 3038 F710                  		move.w	($FFFFF710).w,d0
0000DAEC 4440                       		neg.w	d0
0000DAEE 323C 0006                  		move.w	#6,d1
0000DAF2                             
0000DAF2                            Deform_SBZ_3:				; XREF: Deform_SBZ
0000DAF2 32C0                       		move.w	d0,(a1)+
0000DAF4 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000DAF8 3038 F708                  		move.w	($FFFFF708).w,d0
0000DAFC 4440                       		neg.w	d0
0000DAFE 323C 000A                  		move.w	#$A,d1
0000DB02                             
0000DB02                            Deform_SBZ_4:				; XREF: Deform_SBZ
0000DB02 32C0                       		move.w	d0,(a1)+
0000DB04 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000DB08 45F8 A800                  		lea	($FFFFA800).w,a2
0000DB0C 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DB10 3400                       		move.w	d0,d2
0000DB12 0240 01F0                  		andi.w	#$1F0,d0
0000DB16 E648                       		lsr.w	#3,d0
0000DB18 45F2 0000                  		lea	(a2,d0.w),a2
0000DB1C 6000 FE12                  		bra.w	Deform_All
0000DB20                            ; ===========================================================================
0000DB20                             
0000DB20                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000DB20 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000DB24 48C4                       		ext.l	d4
0000DB26 ED84                       		asl.l	#6,d4
0000DB28 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000DB2C 48C5                       		ext.l	d5
0000DB2E EB85                       		asl.l	#5,d5
0000DB30 6100 0000                  		bsr.w	ScrollBlock1
0000DB34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000DB3A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000DB3E 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000DB42 3038 F700                  		move.w	($FFFFF700).w,d0
0000DB46 4440                       		neg.w	d0
0000DB48 4840                       		swap	d0
0000DB4A 3038 F708                  		move.w	($FFFFF708).w,d0
0000DB4E 4440                       		neg.w	d0
0000DB50                             
0000DB50                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000DB50 22C0                       		move.l	d0,(a1)+
0000DB52 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000DB56 4E75                       		rts	
0000DB58                            ; End of function Deform_SBZ
0000DB58                            
0000DB58                            ; ---------------------------------------------------------------------------
0000DB58                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000DB58                            ; ---------------------------------------------------------------------------
0000DB58                            
0000DB58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB58                            
0000DB58                            
0000DB58                            ScrollHoriz:				; XREF: DeformBgLayer
0000DB58 3838 F700                  		move.w	($FFFFF700).w,d4
0000DB5C 6100                       		bsr.s	ScrollHoriz2
0000DB5E 3038 F700                  		move.w	($FFFFF700).w,d0
0000DB62 0240 0010                  		andi.w	#$10,d0
0000DB66 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000DB6A B300                       		eor.b	d1,d0
0000DB6C 6600                       		bne.s	locret_65B0
0000DB6E 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000DB74 3038 F700                  		move.w	($FFFFF700).w,d0
0000DB78 9044                       		sub.w	d4,d0
0000DB7A 6A00                       		bpl.s	loc_65AA
0000DB7C 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000DB82 4E75                       		rts	
0000DB84                            ; ===========================================================================
0000DB84                            
0000DB84                            loc_65AA:
0000DB84 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000DB8A                            
0000DB8A                            locret_65B0:
0000DB8A 4E75                       		rts	
0000DB8C                            ; End of function ScrollHoriz
0000DB8C                            
0000DB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB8C                            
0000DB8C                            
0000DB8C                            ScrollHoriz2:				; XREF: ScrollHoriz
0000DB8C 3838 F700                  		move.w	($FFFFF700).w,d4
0000DB90 4A38 F623                  		tst.b	($FFFFF623).w
0000DB94 6600                       		bne.s	loc_B520
0000DB96 3238 FC00                  		move.w	($FFFFFC00).w,d1
0000DB9A 6700                       		beq.s	loc_B50C
0000DB9C 0441 0100                  		sub.w	#$100,d1
0000DBA0 31C1 FC00                  		move.w	d1,($FFFFFC00).w
0000DBA4 7200                       		moveq	#0,d1
0000DBA6 1238 FC00                  		move.b	($FFFFFC00).w,d1
0000DBAA E509                       		lsl.b	#2,d1
0000DBAC 5801                       		addq.b	#4,d1
0000DBAE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000DBB2 9001                       		sub.b	d1,d0
0000DBB4 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000DBB8 3031 0000                  		move.w	(a1,d0.w),d0
0000DBBC 0240 3FFF                  		and.w	#$3FFF,d0
0000DBC0 6000                       		bra.s	loc_B510
0000DBC2                            loc_B50C:
0000DBC2 3038 D008                  		move.w	($FFFFD008).w,d0
0000DBC6                            loc_B510:
0000DBC6 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DBCA 0440 0090                  		sub.w	#$90,d0
0000DBCE 6B00                       		bmi.s	loc_B522
0000DBD0 0440 0010                  		sub.w	#$10,d0
0000DBD4 6A00                       		bpl.s	loc_B536
0000DBD6 4278 F73A                  		clr.w	($FFFFF73A).w
0000DBDA                            loc_B520:
0000DBDA 4E75                       		rts
0000DBDC                            ;--------------------------------------------------------------------------------
0000DBDC                            loc_B522:
0000DBDC 0C40 FFF0                  		cmp.w	#-$10,d0
0000DBE0 6E00                       		bgt.s	loc_B52C
0000DBE2 303C FFF0                  		move.w	#-$10,d0
0000DBE6                            loc_B52C:
0000DBE6 D078 F700                  		add.w	($FFFFF700).w,d0
0000DBEA B078 F728                  		cmp.w	($FFFFF728).w,d0
0000DBEE 6E00                       		bgt.s	loc_B54C
0000DBF0 3038 F728                  		move.w	($FFFFF728).w,d0
0000DBF4 6000                       		bra.s	loc_B54C
0000DBF6                            loc_B536:
0000DBF6 0C40 0010                  		cmp.w	#$10,d0
0000DBFA 6500                       		bcs.s	loc_B540
0000DBFC 303C 0010                  		move.w	#$10,d0
0000DC00                            
0000DC00                            loc_B540:
0000DC00 D078 F700                  		add.w	($FFFFF700).w,d0
0000DC04 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000DC08 6D00                       		blt.s	loc_B54C
0000DC0A 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000DC0E                            loc_B54C:
0000DC0E 3200                       		move.w	d0,d1
0000DC10 9278 F700                  		sub.w	($FFFFF700).w,d1
0000DC14 E141                       		asl.w	#8,d1
0000DC16 31C0 F700                  		move.w	d0,($FFFFF700).w
0000DC1A 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000DC1E 4E75                       		rts
0000DC20                            
0000DC20                            ; ---------------------------------------------------------------------------
0000DC20                            ; Subroutine to	scroll the level vertically as Sonic moves
0000DC20                            ; ---------------------------------------------------------------------------
0000DC20                            
0000DC20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC20                            
0000DC20                            
0000DC20                            ScrollVertical:				; XREF: DeformBgLayer
0000DC20 7200                       	moveq	#0,d1
0000DC22                            ;	move.w	y_pos(a0),d0
0000DC22 7413                       	moveq	#$13,d2		; set default character height
0000DC24 9438 D016                  	sub.b	(Maincharacter+y_radius).w,d2	; get difference to character's actual height
0000DC28 4442                       	neg.w	d2		; we need the inverse
0000DC2A                            
0000DC2A 7000                       	moveq	#0,d0
0000DC2C 1038 D026                  	move.b	(Maincharacter+angle).w,d0
0000DC30 0640 0040                  	add.w	#$40,d0
0000DC34 4EB9 0000 8F30             	jsr	(CalcSine).l
0000DC3A C1C2                       	muls.w	d2,d0
0000DC3C 48C0                       	ext.l	d0
0000DC3E E080                       	asr.l	#8,d0
0000DC40 D078 D00C                  	add.w	(Maincharacter+y_pos).w,d0	; get player's y position
0000DC44 9078 F704                  	sub.w	($FFFFF704).w,d0
0000DC48 4A78 F72C                  	tst.w	(Camera_Min_Y_pos).w		; Does this level y-wrap?
0000DC4C 6A00 0000                  	bpl.w	loc_662A			; If not, branch and skip looping
0000DC50 0C78 0060 F73E             	cmpi.w	#$60,(Camera_Y_pos_bias).w	; Is screen in its default position?
0000DC56 6700                       	beq.s	@locvert				; If so, branch, and loop
0000DC58                            	; It's not at its default position; Sonic must be looking up or down
0000DC58 4A78 C903                  	tst.w	(Sonic_Look_delay_counter).w	; Is Sonic still looking up or down?
0000DC5C 6600                       	bne.s	@locvert				; If so, branch, and keep looping, Sonic ain't moving anywhere!
0000DC5E                            	; So, Sonic was looking up or down, but now he isn't
0000DC5E 31FC 0060 F73E             	move.w	#$60,(Camera_Y_pos_bias).w	; move the screen to its default position quickly
0000DC64                            ;		btst	#2,($FFFFD022).w
0000DC64                            ;		beq.s	loc_662A
0000DC64                            
0000DC64                            @locvert:
0000DC64 0240 07FF                  		andi.w	#$7FF,d0			; Forever loop
0000DC68                            		
0000DC68                            loc_662A:
0000DC68 0838 0001 D022             		btst	#1,($FFFFD022).w
0000DC6E 6700                       		beq.s	loc_664A
0000DC70 0640 0020                  		addi.w	#$20,d0
0000DC74 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DC78 6500                       		bcs.s	loc_6696
0000DC7A 0440 0040                  		subi.w	#$40,d0
0000DC7E 6400                       		bcc.s	loc_6696
0000DC80 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DC84 6600                       		bne.s	loc_66A8
0000DC86 6000                       		bra.s	loc_6656
0000DC88                            ; ===========================================================================
0000DC88                            
0000DC88                            loc_664A:
0000DC88 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DC8C 6600                       		bne.s	loc_665C
0000DC8E 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DC92 6600                       		bne.s	loc_66A8
0000DC94                            
0000DC94                            loc_6656:
0000DC94 4278 F73C                  		clr.w	($FFFFF73C).w
0000DC98 4E75                       		rts	
0000DC9A                            ; ===========================================================================
0000DC9A                            
0000DC9A                            loc_665C:
0000DC9A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000DCA0 6600                       		bne.s	loc_6684
0000DCA2 3238 D020                  		move.w	(Maincharacter+inertia).w,d1
0000DCA6 6A00                       		bpl.s	loc_666C
0000DCA8 4441                       		neg.w	d1
0000DCAA                            
0000DCAA                            loc_666C:
0000DCAA 0C41 0800                  		cmpi.w	#$800,d1
0000DCAE 6400                       		bcc.s	loc_6696
0000DCB0 323C 0600                  		move.w	#$600,d1
0000DCB4 0C40 0006                  		cmpi.w	#6,d0
0000DCB8 6E00                       		bgt.s	loc_66F6
0000DCBA 0C40 FFFA                  		cmpi.w	#-6,d0
0000DCBE 6D00                       		blt.s	loc_66C0
0000DCC0 6000                       		bra.s	loc_66AE
0000DCC2                            ; ===========================================================================
0000DCC2                            
0000DCC2                            loc_6684:
0000DCC2 323C 0200                  		move.w	#$200,d1
0000DCC6 0C40 0002                  		cmpi.w	#2,d0
0000DCCA 6E00                       		bgt.s	loc_66F6
0000DCCC 0C40 FFFE                  		cmpi.w	#-2,d0
0000DCD0 6D00                       		blt.s	loc_66C0
0000DCD2 6000                       		bra.s	loc_66AE
0000DCD4                            ; ===========================================================================
0000DCD4                            
0000DCD4                            loc_6696:
0000DCD4 323C 1000                  		move.w	#$1000,d1
0000DCD8 0C40 0010                  		cmpi.w	#$10,d0
0000DCDC 6E00                       		bgt.s	loc_66F6
0000DCDE 0C40 FFF0                  		cmpi.w	#-$10,d0
0000DCE2 6D00                       		blt.s	loc_66C0
0000DCE4 6000                       		bra.s	loc_66AE
0000DCE6                            ; ===========================================================================
0000DCE6                            
0000DCE6                            loc_66A8:
0000DCE6 7000                       		moveq	#0,d0
0000DCE8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000DCEC                            
0000DCEC                            loc_66AE:
0000DCEC 7200                       		moveq	#0,d1
0000DCEE 3200                       		move.w	d0,d1
0000DCF0 D278 F704                  		add.w	($FFFFF704).w,d1
0000DCF4 4A40                       		tst.w	d0
0000DCF6 6A00 0000                  		bpl.w	loc_6700
0000DCFA 6000 0000                  		bra.w	loc_66CC
0000DCFE                            ; ===========================================================================
0000DCFE                            
0000DCFE                            loc_66C0:
0000DCFE 4441                       		neg.w	d1
0000DD00 48C1                       		ext.l	d1
0000DD02 E181                       		asl.l	#8,d1
0000DD04 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DD08 4841                       		swap	d1
0000DD0A                            
0000DD0A                            loc_66CC:
0000DD0A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000DD0E 6E00                       		bgt.s	loc_6724
0000DD10 0C41 FF00                  		cmpi.w	#-$100,d1
0000DD14 6E00                       		bgt.s	loc_66F0
0000DD16 0241 07FF                  		andi.w	#$7FF,d1
0000DD1A                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DD1A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000DD20                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DD20 6000                       		bra.s	loc_6724
0000DD22                            ; ===========================================================================
0000DD22                            
0000DD22                            loc_66F0:
0000DD22 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000DD26 6000                       		bra.s	loc_6724
0000DD28                            ; ===========================================================================
0000DD28                            
0000DD28                            loc_66F6:
0000DD28 48C1                       		ext.l	d1
0000DD2A E181                       		asl.l	#8,d1
0000DD2C D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DD30 4841                       		swap	d1
0000DD32                            
0000DD32                            loc_6700:
0000DD32 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000DD36 6D00                       		blt.s	loc_6724
0000DD38 0441 0800                  		subi.w	#$800,d1
0000DD3C 6500                       		bcs.s	loc_6720
0000DD3E                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DD3E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000DD44                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DD44 6000                       		bra.s	loc_6724
0000DD46                            ; ===========================================================================
0000DD46                            
0000DD46                            loc_6720:
0000DD46 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000DD4A                            
0000DD4A                            loc_6724:
0000DD4A 3838 F704                  		move.w	($FFFFF704).w,d4
0000DD4E 4841                       		swap	d1
0000DD50 2601                       		move.l	d1,d3
0000DD52 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000DD56 E09B                       		ror.l	#8,d3
0000DD58 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000DD5C 21C1 F704                  		move.l	d1,($FFFFF704).w
0000DD60 3038 F704                  		move.w	($FFFFF704).w,d0
0000DD64 0240 0010                  		andi.w	#$10,d0
0000DD68 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000DD6C B300                       		eor.b	d1,d0
0000DD6E 6600                       		bne.s	locret_6766
0000DD70 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000DD76 3038 F704                  		move.w	($FFFFF704).w,d0
0000DD7A 9044                       		sub.w	d4,d0
0000DD7C 6A00                       		bpl.s	loc_6760
0000DD7E 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000DD84 4E75                       		rts	
0000DD86                            ; ===========================================================================
0000DD86                            
0000DD86                            loc_6760:
0000DD86 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000DD8C                            
0000DD8C                            locret_6766:
0000DD8C 4E75                       		rts	
0000DD8E                            ; End of function ScrollVertical
0000DD8E                            
0000DD8E                            
0000DD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD8E                            
0000DD8E                            
0000DD8E                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000DD8E 2438 F708                  		move.l	($FFFFF708).w,d2
0000DD92 2002                       		move.l	d2,d0
0000DD94 D084                       		add.l	d4,d0
0000DD96 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DD9A 2200                       		move.l	d0,d1
0000DD9C 4841                       		swap	d1
0000DD9E 0241 0010                  		andi.w	#$10,d1
0000DDA2 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DDA6 B701                       		eor.b	d3,d1
0000DDA8 6600                       		bne.s	ScrollBlock1_2
0000DDAA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DDB0 9082                       		sub.l	d2,d0
0000DDB2 6A00                       		bpl.s	ScrollBlock1_1
0000DDB4 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000DDBA 6000                       		bra.s	ScrollBlock1_2
0000DDBC                            ; ===========================================================================
0000DDBC                             
0000DDBC                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000DDBC 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000DDC2                             
0000DDC2                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000DDC2 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DDC6 2003                       		move.l	d3,d0
0000DDC8 D085                       		add.l	d5,d0
0000DDCA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DDCE 2200                       		move.l	d0,d1
0000DDD0 4841                       		swap	d1
0000DDD2 0241 0010                  		andi.w	#$10,d1
0000DDD6 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DDDA B501                       		eor.b	d2,d1
0000DDDC 6600                       		bne.s	ScrollBlock1_End
0000DDDE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DDE4 9083                       		sub.l	d3,d0
0000DDE6 6A00                       		bpl.s	ScrollBlock1_3
0000DDE8 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DDEE 4E75                       		rts	
0000DDF0                            ; ===========================================================================
0000DDF0                             
0000DDF0                            ScrollBlock1_3:				; XREF: ScrollBlock1
0000DDF0 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DDF6                             
0000DDF6                            ScrollBlock1_End:			; XREF: ScrollBlock1
0000DDF6 4E75                       		rts	
0000DDF8                            ; End of function ScrollBlock1
0000DDF8                             
0000DDF8                             
0000DDF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDF8                             
0000DDF8                             
0000DDF8                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
0000DDF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DDFC 2003                       		move.l	d3,d0
0000DDFE D085                       		add.l	d5,d0
0000DE00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DE04 2200                       		move.l	d0,d1
0000DE06 4841                       		swap	d1
0000DE08 0241 0010                  		andi.w	#$10,d1
0000DE0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DE10 B501                       		eor.b	d2,d1
0000DE12 6600                       		bne.s	ScrollBlock2_End
0000DE14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DE1A 9083                       		sub.l	d3,d0
0000DE1C 6A00                       		bpl.s	ScrollBlock2_1
0000DE1E 08F8 0004 F756             		bset	#4,($FFFFF756).w
0000DE24 4E75                       		rts	
0000DE26                            ; ===========================================================================
0000DE26                             
0000DE26                            ScrollBlock2_1:				; XREF: ScrollBlock2
0000DE26 08F8 0005 F756             		bset	#5,($FFFFF756).w
0000DE2C                             
0000DE2C                            ScrollBlock2_End:			; XREF: ScrollBlock2
0000DE2C 4E75                       		rts	
0000DE2E                            ; End of function ScrollBlock2
0000DE2E                             
0000DE2E                             
0000DE2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE2E                             
0000DE2E                             
0000DE2E                            ScrollBlock3:				; XREF: Deform_MZ
0000DE2E 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000DE32 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000DE36 3200                       		move.w	d0,d1
0000DE38 0241 0010                  		andi.w	#$10,d1
0000DE3C 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DE40 B501                       		eor.b	d2,d1
0000DE42 6600                       		bne.s	ScrollBlock3_End
0000DE44 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DE4A 9043                       		sub.w	d3,d0
0000DE4C 6A00                       		bpl.s	ScrollBlock3_1
0000DE4E 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DE54 4E75                       		rts	
0000DE56                            ; ===========================================================================
0000DE56                             
0000DE56                            ScrollBlock3_1:				; XREF: ScrollBlock3
0000DE56 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DE5C                             
0000DE5C                            ScrollBlock3_End:			; XREF: ScrollBlock3
0000DE5C 4E75                       		rts	
0000DE5E                            ; End of function ScrollBlock3
0000DE5E                             
0000DE5E                             
0000DE5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE5E                             
0000DE5E                             
0000DE5E                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
0000DE5E 2438 F708                  		move.l	($FFFFF708).w,d2
0000DE62 2002                       		move.l	d2,d0
0000DE64 D084                       		add.l	d4,d0
0000DE66 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DE6A 2200                       		move.l	d0,d1
0000DE6C 4841                       		swap	d1
0000DE6E 0241 0010                  		andi.w	#$10,d1
0000DE72 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DE76 B701                       		eor.b	d3,d1
0000DE78 6600                       		bne.s	ScrollBlock4_End
0000DE7A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DE80 9082                       		sub.l	d2,d0
0000DE82 6A00                       		bpl.s	ScrollBlock4_1
0000DE84 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DE88 6000                       		bra.s	ScrollBlock4_End
0000DE8A                            ; ===========================================================================
0000DE8A                             
0000DE8A                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000DE8A 5206                       		addq.b	#1,d6
0000DE8C 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DE90                             
0000DE90                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000DE90 4E75                       		rts	
0000DE92                            ; End of function ScrollBlock4
0000DE92                             
0000DE92                             
0000DE92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE92                             
0000DE92                             
0000DE92                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DE92 2438 F710                  		move.l	($FFFFF710).w,d2
0000DE96 2002                       		move.l	d2,d0
0000DE98 D084                       		add.l	d4,d0
0000DE9A 21C0 F710                  		move.l	d0,($FFFFF710).w
0000DE9E 2200                       		move.l	d0,d1
0000DEA0 4841                       		swap	d1
0000DEA2 0241 0010                  		andi.w	#$10,d1
0000DEA6 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000DEAA B701                       		eor.b	d3,d1
0000DEAC 6600                       		bne.s	ScrollBlock5_End
0000DEAE 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000DEB4 9082                       		sub.l	d2,d0
0000DEB6 6A00                       		bpl.s	ScrollBlock5_1
0000DEB8 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DEBC 6000                       		bra.s	ScrollBlock5_End
0000DEBE                            ; ===========================================================================
0000DEBE                             
0000DEBE                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000DEBE 5206                       		addq.b	#1,d6
0000DEC0 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DEC4                             
0000DEC4                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000DEC4 4E75                       		rts	
0000DEC6                            ; End of function ScrollBlock5
0000DEC6                             
0000DEC6                             
0000DEC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC6                             
0000DEC6                             
0000DEC6                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DEC6 2438 F718                  		move.l	($FFFFF718).w,d2
0000DECA 2002                       		move.l	d2,d0
0000DECC D084                       		add.l	d4,d0
0000DECE 21C0 F718                  		move.l	d0,($FFFFF718).w
0000DED2 2200                       		move.l	d0,d1
0000DED4 4841                       		swap	d1
0000DED6 0241 0010                  		andi.w	#$10,d1
0000DEDA 1638 F750                  		move.b	($FFFFF750).w,d3
0000DEDE B701                       		eor.b	d3,d1
0000DEE0 6600                       		bne.s	ScrollBlock6_End
0000DEE2 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
0000DEE8 9082                       		sub.l	d2,d0
0000DEEA 6A00                       		bpl.s	ScrollBlock6_1
0000DEEC 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DEF0 6000                       		bra.s	ScrollBlock6_End
0000DEF2                            ; ===========================================================================
0000DEF2                             
0000DEF2                            ScrollBlock6_1:				; XREF: ScrollBlock6
0000DEF2 5206                       		addq.b	#1,d6
0000DEF4 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DEF8                             
0000DEF8                            ScrollBlock6_End:			; XREF: ScrollBlock6
0000DEF8 4E75                       		rts	
0000DEFA                            ; End of function ScrollBlock6
0000DEFA                            
0000DEFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEFA                            
0000DEFA                            
0000DEFA                            sub_6886:		
0000DEFA 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DF00 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DF06 45F8 F756                  		lea	($FFFFF756).w,a2
0000DF0A 47F8 F708                  		lea	($FFFFF708).w,a3
0000DF0E 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DF12 343C 6000                  		move.w	#$6000,d2
0000DF16 6100 0000                  		bsr.w	sub_6D0A
0000DF1A 45F8 F758                  		lea	($FFFFF758).w,a2
0000DF1E 47F8 F710                  		lea	($FFFFF710).w,a3
0000DF22 6000 0000                  		bra.w	sub_6DA6
0000DF26                            ; End of function sub_6886
0000DF26                             
0000DF26                            ; ---------------------------------------------------------------------------
0000DF26                            ; Subroutine to	display	correct	tiles as you move
0000DF26                            ; ---------------------------------------------------------------------------
0000DF26                             
0000DF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF26                             
0000DF26                             
0000DF26                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000DF26 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DF2C 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DF32 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000DF36 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000DF3A 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DF3E 343C 6000                  		move.w	#$6000,d2
0000DF42 6100 0000                  		bsr.w	sub_6D0A
0000DF46 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000DF4A 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000DF4E 6100 0000                  		bsr.w	sub_6DA6
0000DF52 45F8 FF36                  		lea	($FFFFFF36).w,a2
0000DF56 47F8 FF28                  		lea	($FFFFFF28).w,a3
0000DF5A 6100 0000                  		bsr.w	sub_6EA4
0000DF5E 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000DF62 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000DF66 2878 A400                  		movea.l	($FFFFA400).w,a4
0000DF6A 343C 4000                  		move.w	#$4000,d2
0000DF6E 4A38 F745                  		tst.b	($FFFFF745).w
0000DF72 6700                       		beq.s	Draw_FG
0000DF74 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
0000DF7A 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
0000DF7C 7C0F                       		moveq	#$F,d6				;
0000DF7E                             
0000DF7E                            Draw_All:
0000DF7E 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000DF82 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000DF84 3204                       		move.w	d4,d1
0000DF86 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DF8A 3801                       		move.w	d1,d4
0000DF8C 7AF0                       		moveq	#-$10,d5
0000DF8E 6100 0000                  		bsr.w	DrawTiles_LR
0000DF92 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000DF96 0644 0010                  		addi.w	#$10,d4
0000DF9A 51CE FFE2                  		dbf	d6,Draw_All
0000DF9E 4E75                       		rts	
0000DFA0                             
0000DFA0                            Draw_FG:
0000DFA0 4A12                       		tst.b	(a2)
0000DFA2 6700                       		beq.s	locret_6D08
0000DFA4 0892 0000                  		bclr	#0,(a2)
0000DFA8 6700                       		beq.s	loc_6CBE
0000DFAA 78F0                       		moveq	#-$10,d4
0000DFAC 7AF0                       		moveq	#-$10,d5
0000DFAE 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFB2 78F0                       		moveq	#-$10,d4
0000DFB4 7AF0                       		moveq	#-$10,d5
0000DFB6 6100 0000                  		bsr.w	DrawTiles_LR
0000DFBA                             
0000DFBA                            loc_6CBE:
0000DFBA 0892 0001                  		bclr	#1,(a2)
0000DFBE 6700                       		beq.s	loc_6CD8
0000DFC0 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DFC4 7AF0                       		moveq	#-$10,d5
0000DFC6 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFCA 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DFCE 7AF0                       		moveq	#-$10,d5
0000DFD0 6100 0000                  		bsr.w	DrawTiles_LR
0000DFD4                             
0000DFD4                            loc_6CD8:
0000DFD4 0892 0002                  		bclr	#2,(a2)
0000DFD8 6700                       		beq.s	loc_6CEE
0000DFDA 78F0                       		moveq	#-$10,d4
0000DFDC 7AF0                       		moveq	#-$10,d5
0000DFDE 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFE2 78F0                       		moveq	#-$10,d4
0000DFE4 7AF0                       		moveq	#-$10,d5
0000DFE6 6100 0000                  		bsr.w	DrawTiles_TB
0000DFEA                             
0000DFEA                            loc_6CEE:
0000DFEA 0892 0003                  		bclr	#3,(a2)
0000DFEE 6700                       		beq.s	locret_6D08
0000DFF0 78F0                       		moveq	#-$10,d4
0000DFF2 3A3C 0140                  		move.w	#$140,d5
0000DFF6 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFFA 78F0                       		moveq	#-$10,d4
0000DFFC 3A3C 0140                  		move.w	#$140,d5
0000E000 6100 0000                  		bsr.w	DrawTiles_TB
0000E004                             
0000E004                            locret_6D08:
0000E004 4E75                       		rts	
0000E006                             
0000E006                            ; End of function LoadTilesAsYouMove
0000E006                             
0000E006                             
0000E006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E006                             
0000E006                             
0000E006                            sub_6D0A:
0000E006 4A12                       		tst.b	(a2)
0000E008 6700 0000                  		beq.w	locret_6DA4
0000E00C 0892 0000                  		bclr	#0,(a2)
0000E010 6700                       		beq.s	loc_6D26
0000E012 78F0                       		moveq	#-$10,d4
0000E014 7AF0                       		moveq	#-$10,d5
0000E016 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E01A 78F0                       		moveq	#-$10,d4
0000E01C 7AF0                       		moveq	#-$10,d5
0000E01E 6100 0000                  		bsr.w	DrawTiles_LR
0000E022                             
0000E022                            loc_6D26:
0000E022 0892 0001                  		bclr	#1,(a2)
0000E026 6700                       		beq.s	loc_6D40
0000E028 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E02C 7AF0                       		moveq	#-$10,d5
0000E02E 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E032 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E036 7AF0                       		moveq	#-$10,d5
0000E038 6100 0000                  		bsr.w	DrawTiles_LR
0000E03C                             
0000E03C                            loc_6D40:
0000E03C 0892 0002                  		bclr	#2,(a2)
0000E040 6700                       		beq.s	loc_6D56
0000E042 78F0                       		moveq	#-$10,d4
0000E044 7AF0                       		moveq	#-$10,d5
0000E046 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E04A 78F0                       		moveq	#-$10,d4
0000E04C 7AF0                       		moveq	#-$10,d5
0000E04E 6100 0000                  		bsr.w	DrawTiles_TB
0000E052                             
0000E052                            loc_6D56:
0000E052 0892 0003                  		bclr	#3,(a2)
0000E056 6700                       		beq.s	loc_6D70
0000E058 78F0                       		moveq	#-$10,d4
0000E05A 3A3C 0140                  		move.w	#$140,d5
0000E05E 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E062 78F0                       		moveq	#-$10,d4
0000E064 3A3C 0140                  		move.w	#$140,d5
0000E068 6100 0000                  		bsr.w	DrawTiles_TB
0000E06C                             
0000E06C                            loc_6D70:
0000E06C 0892 0004                  		bclr	#4,(a2)
0000E070 6700                       		beq.s	loc_6D88
0000E072 78F0                       		moveq	#-$10,d4
0000E074 7A00                       		moveq	#0,d5
0000E076 6100 0000                  		bsr.w	loc_7176
0000E07A 78F0                       		moveq	#-$10,d4
0000E07C 7A00                       		moveq	#0,d5
0000E07E 7C1F                       		moveq	#$1F,d6
0000E080 6100 0000                  		bsr.w	DrawTiles_LR3
0000E084                             
0000E084                            loc_6D88:
0000E084 0892 0005                  		bclr	#5,(a2)
0000E088 6700                       		beq.s	locret_6DA4
0000E08A 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E08E 7A00                       		moveq	#0,d5
0000E090 6100 0000                  		bsr.w	loc_7176
0000E094 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E098 7A00                       		moveq	#0,d5
0000E09A 7C1F                       		moveq	#$1F,d6
0000E09C 6100 0000                  		bsr.w	DrawTiles_LR3
0000E0A0                             
0000E0A0                            locret_6DA4:
0000E0A0 4E75                       		rts	
0000E0A2                            ; End of function sub_6D0A
0000E0A2                             
0000E0A2                             
0000E0A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0A2                             
0000E0A2                             
0000E0A2                            sub_6DA6:
0000E0A2 4A12                       		tst.b	(a2)
0000E0A4 6700 0000                  		beq.w	locret_6DF2
0000E0A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000E0AE 6700 0000                  		beq.w	loc_6E16
0000E0B2 0892 0000                  		bclr	#0,(a2)
0000E0B6 6700                       		beq.s	loc_6DD2
0000E0B8 383C 0070                  		move.w	#$70,d4	; 'p'
0000E0BC 7AF0                       		moveq	#-$10,d5
0000E0BE 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E0C2 383C 0070                  		move.w	#$70,d4	; 'p'
0000E0C6 7AF0                       		moveq	#-$10,d5
0000E0C8 7C02                       		moveq	#2,d6
0000E0CA 6100 0000                  		bsr.w	DrawTiles_TB2
0000E0CE                             
0000E0CE                            loc_6DD2:
0000E0CE 0892 0001                  		bclr	#1,(a2)
0000E0D2 6700                       		beq.s	locret_6DF2
0000E0D4 383C 0070                  		move.w	#$70,d4	; 'p'
0000E0D8 3A3C 0140                  		move.w	#$140,d5
0000E0DC 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E0E0 383C 0070                  		move.w	#$70,d4	; 'p'
0000E0E4 3A3C 0140                  		move.w	#$140,d5
0000E0E8 7C02                       		moveq	#2,d6
0000E0EA 6100 0000                  		bsr.w	DrawTiles_TB2
0000E0EE                             
0000E0EE                            locret_6DF2:
0000E0EE 4E75                       		rts	
0000E0F0                            ; ===========================================================================
0000E0F0 00                         unk_6DF4:	dc.b   0 ;	 
0000E0F1 00                         unk_6DF5:	dc.b   0 ;	 
0000E0F2 00                         		dc.b   0 ;  
0000E0F3 00                         		dc.b   0 ;  
0000E0F4 00                         		dc.b   0 ;  
0000E0F5 06                         		dc.b   6 ;  
0000E0F6 06                         		dc.b   6 ;  
0000E0F7 06                         		dc.b   6 ;  
0000E0F8 06                         		dc.b   6 ;  
0000E0F9 06                         		dc.b   6 ;  
0000E0FA 06                         		dc.b   6 ;  
0000E0FB 06                         		dc.b   6 ;  
0000E0FC 06                         		dc.b   6 ;  
0000E0FD 06                         		dc.b   6 ;  
0000E0FE 06                         		dc.b   6 ;  
0000E0FF 04                         		dc.b   4 ;  
0000E100 04                         		dc.b   4 ;  
0000E101 04                         		dc.b   4 ;  
0000E102 04                         		dc.b   4 ;  
0000E103 04                         		dc.b   4 ;  
0000E104 04                         		dc.b   4 ;  
0000E105 04                         		dc.b   4 ;  
0000E106 02                         		dc.b   2 ;  
0000E107 02                         		dc.b   2 ;  
0000E108 02                         		dc.b   2 ;  
0000E109 02                         		dc.b   2 ;  
0000E10A 02                         		dc.b   2 ;  
0000E10B 02                         		dc.b   2 ;  
0000E10C 02                         		dc.b   2 ;  
0000E10D 02                         		dc.b   2 ;  
0000E10E 02                         		dc.b   2 ;  
0000E10F 02                         		dc.b   2 ;  
0000E110 02                         		dc.b   2 ;  
0000E111 00                         		dc.b   0 ;  
0000E112                            ; ===========================================================================
0000E112                             
0000E112                            loc_6E16:
0000E112 41F9 0000 E0F1             		lea	(unk_6DF5).l,a0
0000E118 78F0                       		moveq	#-$10,d4
0000E11A 0892 0000                  		bclr	#0,(a2)
0000E11E 6600                       		bne.s	loc_6E28
0000E120 0892 0001                  		bclr	#1,(a2)
0000E124 6700                       		beq.s	loc_6E72
0000E126 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E12A                             
0000E12A                            loc_6E28:
0000E12A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E12E D044                       		add.w	d4,d0
0000E130 0240 01F0                  		andi.w	#$1F0,d0
0000E134 E848                       		lsr.w	#4,d0
0000E136 1030 0000                  		move.b	(a0,d0.w),d0
0000E13A 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000E140 3673 0000                  		movea.w	(a3,d0.w),a3
0000E144 6700                       		beq.s	loc_6E5E
0000E146 7AF0                       		moveq	#-$10,d5
0000E148 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E14C 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E150 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E154 6100 0000                  		bsr.w	DrawTiles_LR
0000E158 6000                       		bra.s	loc_6E72
0000E15A                            ; ===========================================================================
0000E15A                             
0000E15A                            loc_6E5E:
0000E15A 7A00                       		moveq	#0,d5
0000E15C 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E160 6100 0000                  		bsr.w	loc_7176
0000E164 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E168 7C1F                       		moveq	#$1F,d6
0000E16A 6100 0000                  		bsr.w	DrawTiles_LR3
0000E16E                             
0000E16E                            loc_6E72:
0000E16E 4A12                       		tst.b	(a2)
0000E170 6600                       		bne.s	loc_6E78
0000E172 4E75                       		rts	
0000E174                            ; ===========================================================================
0000E174                             
0000E174                            loc_6E78:
0000E174 78F0                       		moveq	#-$10,d4
0000E176 7AF0                       		moveq	#-$10,d5
0000E178 1012                       		move.b	(a2),d0
0000E17A 0200 00A8                  		andi.b	#-$58,d0
0000E17E 6700                       		beq.s	loc_6E8C
0000E180 E208                       		lsr.b	#1,d0
0000E182 1480                       		move.b	d0,(a2)
0000E184 3A3C 0140                  		move.w	#$140,d5
0000E188                             
0000E188                            loc_6E8C:
0000E188 41F9 0000 E0F0             		lea	(unk_6DF4).l,a0
0000E18E 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E192 0240 01F0                  		andi.w	#$1F0,d0
0000E196 E848                       		lsr.w	#4,d0
0000E198 41F0 0000                  		lea	(a0,d0.w),a0
0000E19C 6000 0000                  		bra.w	loc_6FEC
0000E1A0                            ; End of function sub_6DA6
0000E1A0                             
0000E1A0                             
0000E1A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1A0                             
0000E1A0                             
0000E1A0                            sub_6EA4:
0000E1A0 4A12                       		tst.b	(a2)
0000E1A2 6700 0000                  		beq.w	locret_6EF0
0000E1A6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E1AC 6700 0000                  		beq.w	loc_6F54
0000E1B0 0892 0000                  		bclr	#0,(a2)
0000E1B4 6700                       		beq.s	loc_6ED0_2
0000E1B6 383C 0040                  		move.w	#$40,d4	; '@'
0000E1BA 7AF0                       		moveq	#-$10,d5
0000E1BC 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E1C0 383C 0040                  		move.w	#$40,d4	; '@'
0000E1C4 7AF0                       		moveq	#-$10,d5
0000E1C6 7C02                       		moveq	#2,d6
0000E1C8 6100 0000                  		bsr.w	DrawTiles_TB2
0000E1CC                             
0000E1CC                            loc_6ED0_2:
0000E1CC 0892 0001                  		bclr	#1,(a2)
0000E1D0 6700                       		beq.s	locret_6EF0
0000E1D2 383C 0040                  		move.w	#$40,d4	; '@'
0000E1D6 3A3C 0140                  		move.w	#$140,d5
0000E1DA 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E1DE 383C 0040                  		move.w	#$40,d4	; '@'
0000E1E2 3A3C 0140                  		move.w	#$140,d5
0000E1E6 7C02                       		moveq	#2,d6
0000E1E8 6100 0000                  		bsr.w	DrawTiles_TB2
0000E1EC                             
0000E1EC                            locret_6EF0:
0000E1EC 4E75                       		rts	
0000E1EE                            ; ===========================================================================
0000E1EE 00                         unk_6EF2:	dc.b   0 ;	 
0000E1EF 00                         unk_6EF3:	dc.b   0 ;	 
0000E1F0 00                         		dc.b   0 ;  
0000E1F1 00                         		dc.b   0 ;  
0000E1F2 00                         		dc.b   0 ;  
0000E1F3 00                         		dc.b   0 ;  
0000E1F4 06                         		dc.b   6 ;  
0000E1F5 06                         		dc.b   6 ;  
0000E1F6 04                         		dc.b   4 ;  
0000E1F7 04                         		dc.b   4 ;  
0000E1F8 04                         		dc.b   4 ;  
0000E1F9 04                         		dc.b   4 ;  
0000E1FA 04                         		dc.b   4 ;  
0000E1FB 04                         		dc.b   4 ;  
0000E1FC 04                         		dc.b   4 ;  
0000E1FD 04                         		dc.b   4 ;  
0000E1FE 04                         		dc.b   4 ;  
0000E1FF 02                         		dc.b   2 ;  
0000E200 02                         		dc.b   2 ;  
0000E201 02                         		dc.b   2 ;  
0000E202 02                         		dc.b   2 ;  
0000E203 02                         		dc.b   2 ;  
0000E204 02                         		dc.b   2 ;  
0000E205 02                         		dc.b   2 ;  
0000E206 02                         		dc.b   2 ;  
0000E207 02                         		dc.b   2 ;  
0000E208 02                         		dc.b   2 ;  
0000E209 02                         		dc.b   2 ;  
0000E20A 02                         		dc.b   2 ;  
0000E20B 02                         		dc.b   2 ;  
0000E20C 02                         		dc.b   2 ;  
0000E20D 02                         		dc.b   2 ;  
0000E20E 02                         		dc.b   2 ;  
0000E20F 02                         		dc.b   2 ;  
0000E210 02                         		dc.b   2 ;  
0000E211 02                         		dc.b   2 ;  
0000E212 02                         		dc.b   2 ;  
0000E213 02                         		dc.b   2 ;  
0000E214 02                         		dc.b   2 ;  
0000E215 02                         		dc.b   2 ;  
0000E216 02                         		dc.b   2 ;  
0000E217 02                         		dc.b   2 ;  
0000E218 02                         		dc.b   2 ;  
0000E219 02                         		dc.b   2 ;  
0000E21A 02                         		dc.b   2 ;  
0000E21B 02                         		dc.b   2 ;  
0000E21C 02                         		dc.b   2 ;  
0000E21D 02                         		dc.b   2 ;  
0000E21E 02                         		dc.b   2 ;  
0000E21F 02                         		dc.b   2 ;  
0000E220 02                         		dc.b   2 ;  
0000E221 02                         		dc.b   2 ;  
0000E222 02                         		dc.b   2 ;  
0000E223 02                         		dc.b   2 ;  
0000E224 02                         		dc.b   2 ;  
0000E225 02                         		dc.b   2 ;  
0000E226 02                         		dc.b   2 ;  
0000E227 02                         		dc.b   2 ;  
0000E228 02                         		dc.b   2 ;  
0000E229 02                         		dc.b   2 ;  
0000E22A 02                         		dc.b   2 ;  
0000E22B 02                         		dc.b   2 ;  
0000E22C 02                         		dc.b   2 ;  
0000E22D 02                         		dc.b   2 ;  
0000E22E 02                         		dc.b   2 ;  
0000E22F 02                         		dc.b   2 ;  
0000E230 02                         		dc.b   2 ;  
0000E231 02                         		dc.b   2 ;  
0000E232 02                         		dc.b   2 ;  
0000E233 02                         		dc.b   2 ;  
0000E234 02                         		dc.b   2 ;  
0000E235 02                         		dc.b   2 ;  
0000E236 02                         		dc.b   2 ;  
0000E237 02                         		dc.b   2 ;  
0000E238 02                         		dc.b   2 ;  
0000E239 02                         		dc.b   2 ;  
0000E23A 02                         		dc.b   2 ;  
0000E23B 02                         		dc.b   2 ;  
0000E23C 02                         		dc.b   2 ;  
0000E23D 02                         		dc.b   2 ;  
0000E23E 02                         		dc.b   2 ;  
0000E23F 02                         		dc.b   2 ;  
0000E240 02                         		dc.b   2 ;  
0000E241 02                         		dc.b   2 ;  
0000E242 02                         		dc.b   2 ;  
0000E243 02                         		dc.b   2 ;  
0000E244 02                         		dc.b   2 ;  
0000E245 02                         		dc.b   2 ;  
0000E246 02                         		dc.b   2 ;  
0000E247 02                         		dc.b   2 ;  
0000E248 02                         		dc.b   2 ;  
0000E249 02                         		dc.b   2 ;  
0000E24A 02                         		dc.b   2 ;  
0000E24B 02                         		dc.b   2 ;  
0000E24C 02                         		dc.b   2 ;  
0000E24D 02                         		dc.b   2 ;  
0000E24E 02                         		dc.b   2 ;  
0000E24F 00                         		dc.b   0 ;  
0000E250                            ; ===========================================================================
0000E250                             
0000E250                            loc_6F54:
0000E250 78F0                       		moveq	#-$10,d4
0000E252 0892 0000                  		bclr	#0,(a2)
0000E256 6600                       		bne.s	loc_6F66
0000E258 0892 0001                  		bclr	#1,(a2)
0000E25C 6700                       		beq.s	loc_6FAE
0000E25E 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E262                             
0000E262                            loc_6F66:
0000E262 41F9 0000 E1EF             		lea	(unk_6EF3).l,a0
0000E268 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E26C 0440 0200                  		subi.w	#$200,d0
0000E270 D044                       		add.w	d4,d0
0000E272 0240 07F0                  		andi.w	#$7F0,d0
0000E276 E848                       		lsr.w	#4,d0
0000E278 1030 0000                  		move.b	(a0,d0.w),d0
0000E27C 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E280 6700                       		beq.s	loc_6F9A
0000E282 7AF0                       		moveq	#-$10,d5
0000E284 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E288 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E28C 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E290 6100 0000                  		bsr.w	DrawTiles_LR
0000E294 6000                       		bra.s	loc_6FAE
0000E296                            ; ===========================================================================
0000E296                             
0000E296                            loc_6F9A:
0000E296 7A00                       		moveq	#0,d5
0000E298 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E29C 6100 0000                  		bsr.w	loc_7176
0000E2A0 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E2A4 7C1F                       		moveq	#$1F,d6
0000E2A6 6100 0000                  		bsr.w	DrawTiles_LR3
0000E2AA                             
0000E2AA                            loc_6FAE:
0000E2AA 4A12                       		tst.b	(a2)
0000E2AC 6600                       		bne.s	loc_6FB4
0000E2AE 4E75                       		rts	
0000E2B0                            ; ===========================================================================
0000E2B0                             
0000E2B0                            loc_6FB4:
0000E2B0 78F0                       		moveq	#-$10,d4
0000E2B2 7AF0                       		moveq	#-$10,d5
0000E2B4 1012                       		move.b	(a2),d0
0000E2B6 0200 00A8                  		andi.b	#-$58,d0
0000E2BA 6700                       		beq.s	loc_6FC8
0000E2BC E208                       		lsr.b	#1,d0
0000E2BE 1480                       		move.b	d0,(a2)
0000E2C0 3A3C 0140                  		move.w	#$140,d5
0000E2C4                             
0000E2C4                            loc_6FC8:
0000E2C4 41F9 0000 E1EE             		lea	(unk_6EF2).l,a0
0000E2CA 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E2CE 0440 0200                  		subi.w	#$200,d0
0000E2D2 0240 07F0                  		andi.w	#$7F0,d0
0000E2D6 E848                       		lsr.w	#4,d0
0000E2D8 41F0 0000                  		lea	(a0,d0.w),a0
0000E2DC 6000 0000                  		bra.w	loc_6FEC
0000E2E0                            ; ===========================================================================
0000E2E0 FF                         unk_6FE4:	dc.b $FF ;  
0000E2E1 18                         		dc.b $18 ;  
0000E2E2 FF                         		dc.b $FF ;  
0000E2E3 18                         		dc.b $18 ;  
0000E2E4 FF                         		dc.b $FF ;  
0000E2E5 20                         		dc.b $20 ;  
0000E2E6 FF                         		dc.b $FF ;  
0000E2E7 28                         		dc.b $28 ; (
0000E2E8                            ; ===========================================================================
0000E2E8                             
0000E2E8                            loc_6FEC:
0000E2E8 7C0F                       		moveq	#$F,d6
0000E2EA 2E3C 0080 0000             		move.l	#$800000,d7
0000E2F0                             
0000E2F0                            loc_6FF4:
0000E2F0 7000                       		moveq	#0,d0
0000E2F2 1018                       		move.b	(a0)+,d0
0000E2F4 0112                       		btst	d0,(a2)
0000E2F6 6700                       		beq.s	loc_701C
0000E2F8 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E2FC 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
0000E300 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E304 6100 0000                  		bsr.w	sub_712A
0000E308 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E30C 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E310 6100 0000                  		bsr.w	sub_70AC
0000E314 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
0000E318                             
0000E318                            loc_701C:
0000E318 0644 0010                  		addi.w	#$10,d4
0000E31C 51CE FFD2                  		dbf	d6,loc_6FF4
0000E320 4212                       		clr.b	(a2)
0000E322 4E75                       		rts	
0000E324                            ; End of function sub_6EA4
0000E324                             
0000E324                             
0000E324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E324                             
0000E324                             
0000E324                            DrawTiles_LR:
0000E324 7C15                       		moveq	#$15,d6
0000E326                            ; End of function DrawTiles_LR
0000E326                             
0000E326                             
0000E326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E326                             
0000E326                             
0000E326                            DrawTiles_LR2:
0000E326 2E3C 0080 0000             		move.l	#$800000,d7
0000E32C 2200                       		move.l	d0,d1
0000E32E                             
0000E32E                            loc_7032:
0000E32E 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E332 6100 0000                  		bsr.w	sub_712A
0000E336 2001                       		move.l	d1,d0
0000E338 6100 0000                  		bsr.w	sub_70AC
0000E33C 5801                       		addq.b	#4,d1
0000E33E 0201 007F                  		andi.b	#$7F,d1	; ''
0000E342 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E346 0645 0010                  		addi.w	#$10,d5
0000E34A 51CE FFE2                  		dbf	d6,loc_7032
0000E34E 4E75                       		rts	
0000E350                            ; End of function DrawTiles_LR2
0000E350                             
0000E350                             
0000E350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E350                             
0000E350                             
0000E350                            DrawTiles_LR3:
0000E350 2E3C 0080 0000             		move.l	#$800000,d7
0000E356 2200                       		move.l	d0,d1
0000E358                             
0000E358                            loc_705C:
0000E358 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E35C 6100 0000                  		bsr.w	loc_712C
0000E360 2001                       		move.l	d1,d0
0000E362 6100 0000                  		bsr.w	sub_70AC
0000E366 5801                       		addq.b	#4,d1
0000E368 0201 007F                  		andi.b	#$7F,d1	; ''
0000E36C 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E370 0645 0010                  		addi.w	#$10,d5
0000E374 51CE FFE2                  		dbf	d6,loc_705C
0000E378 4E75                       		rts	
0000E37A                            ; End of function DrawTiles_LR3
0000E37A                             
0000E37A                             
0000E37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E37A                             
0000E37A                             
0000E37A                            DrawTiles_TB:
0000E37A 7C0F                       		moveq	#$F,d6
0000E37C                            ; End of function DrawTiles_TB
0000E37C                             
0000E37C                             
0000E37C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E37C                             
0000E37C                             
0000E37C                            DrawTiles_TB2:
0000E37C 2E3C 0080 0000             		move.l	#$800000,d7
0000E382 2200                       		move.l	d0,d1
0000E384                             
0000E384                            loc_7088:
0000E384 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E388 6100 0000                  		bsr.w	sub_712A
0000E38C 2001                       		move.l	d1,d0
0000E38E 6100 0000                  		bsr.w	sub_70AC
0000E392 0641 0100                  		addi.w	#$100,d1
0000E396 0241 0FFF                  		andi.w	#$FFF,d1
0000E39A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E39E 0644 0010                  		addi.w	#$10,d4
0000E3A2 51CE FFE0                  		dbf	d6,loc_7088
0000E3A6 4E75                       		rts	
0000E3A8                            ; End of function DrawTiles_TB2
0000E3A8                             
0000E3A8                             
0000E3A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3A8                             
0000E3A8                             
0000E3A8                            sub_70AC:
0000E3A8 8042                       		or.w	d2,d0
0000E3AA 4840                       		swap	d0
0000E3AC 0810 0003                  		btst    #3,(a0)    ; MJ: checking bit 3 not 4 (Flip)
0000E3B0 6600                       		bne.s	loc_70E8
0000E3B2 0810 0002                  		btst    #2,(a0)    ; MJ: checking bit 2 not 3 (Mirror)
0000E3B6 6600                       		bne.s	loc_70C8
0000E3B8 2A80                       		move.l	d0,(a5)
0000E3BA 2C99                       		move.l	(a1)+,(a6)
0000E3BC D087                       		add.l	d7,d0
0000E3BE 2A80                       		move.l	d0,(a5)
0000E3C0 2C99                       		move.l	(a1)+,(a6)
0000E3C2 4E75                       		rts	
0000E3C4                            ; ===========================================================================
0000E3C4                             
0000E3C4                            loc_70C8:
0000E3C4 2A80                       		move.l	d0,(a5)
0000E3C6 2819                       		move.l	(a1)+,d4
0000E3C8 0A84 0800 0800             		eori.l	#$8000800,d4
0000E3CE 4844                       		swap	d4
0000E3D0 2C84                       		move.l	d4,(a6)
0000E3D2 D087                       		add.l	d7,d0
0000E3D4 2A80                       		move.l	d0,(a5)
0000E3D6 2819                       		move.l	(a1)+,d4
0000E3D8 0A84 0800 0800             		eori.l	#$8000800,d4
0000E3DE 4844                       		swap	d4
0000E3E0 2C84                       		move.l	d4,(a6)
0000E3E2 4E75                       		rts	
0000E3E4                            ; ===========================================================================
0000E3E4                             
0000E3E4                            loc_70E8:
0000E3E4 0810 0002                  		btst    #2,(a0)
0000E3E8 6600                       		bne.s	loc_710A
0000E3EA 2A80                       		move.l	d0,(a5)
0000E3EC 2A19                       		move.l	(a1)+,d5
0000E3EE 2819                       		move.l	(a1)+,d4
0000E3F0 0A84 1000 1000             		eori.l	#$10001000,d4
0000E3F6 2C84                       		move.l	d4,(a6)
0000E3F8 D087                       		add.l	d7,d0
0000E3FA 2A80                       		move.l	d0,(a5)
0000E3FC 0A85 1000 1000             		eori.l	#$10001000,d5
0000E402 2C85                       		move.l	d5,(a6)
0000E404 4E75                       		rts	
0000E406                            ; ===========================================================================
0000E406                             
0000E406                            loc_710A:
0000E406 2A80                       		move.l	d0,(a5)
0000E408 2A19                       		move.l	(a1)+,d5
0000E40A 2819                       		move.l	(a1)+,d4
0000E40C 0A84 1800 1800             		eori.l	#$18001800,d4
0000E412 4844                       		swap	d4
0000E414 2C84                       		move.l	d4,(a6)
0000E416 D087                       		add.l	d7,d0
0000E418 2A80                       		move.l	d0,(a5)
0000E41A 0A85 1800 1800             		eori.l	#$18001800,d5
0000E420 4845                       		swap	d5
0000E422 2C85                       		move.l	d5,(a6)
0000E424 4E75                       		rts	
0000E426                            ; End of function sub_70AC
0000E426                             
0000E426                             
0000E426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E426                             
0000E426                             
0000E426                            sub_712A:
0000E426 DA53                       		add.w	(a3),d5
0000E428                            		
0000E428                            loc_712C:
0000E428 D86B 0004                  		add.w	4(a3),d4
0000E42C 43F8 B000                  		lea	($FFFFB000).w,a1
0000E430 3604                       		move.w	d4,d3
0000E432 0243 0780                  		andi.w    #$780,d3 ; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
0000E436 E64D                       		lsr.w	#3,d5
0000E438 3005                       		move.w	d5,d0
0000E43A E848                       		lsr.w    #4,d0    ; MJ: divide by 10 (Not 20)
0000E43C 0240 007F                  		andi.w	#$7F,d0	; ''
0000E440 E34B                       		lsl.w    #$01,d3    ; MJ: multiply by 2 (So it skips the BG)
0000E442 D043                       		add.w	d3,d0
0000E444 76FF                       		moveq	#-1,d3
0000E446 1634 0000                  		move.b	(a4,d0.w),d3
0000E44A 0243 00FF                  		andi.w    #$FF,d3    ; MJ: keep within FF
0000E44E EE5B                       		ror.w	#7,d3
0000E450 E45B                               ror.w    #2,d3    ; MJ: ..plus an extra 2 (so it's within 80 bytes, not 200)
0000E452 0244 0070                  		andi.w    #$070,d4 ; MJ: keep Y pos within 80 pixels
0000E456 0245 000E                  		andi.w    #$0E,d5    ; MJ: keep X pos within 10
0000E45A D644                       		add.w	d4,d3
0000E45C D645                       		add.w	d5,d3
0000E45E 2043                       		movea.l	d3,a0
0000E460 3610                       		move.w	(a0),d3
0000E462 0243 03FF                  		andi.w	#$3FF,d3
0000E466 E74B                       		lsl.w	#3,d3
0000E468 D2C3                       		adda.w	d3,a1
0000E46A                             
0000E46A                            locret_7172:
0000E46A 4E75                       		rts	
0000E46C                            		
0000E46C                            ; End of function sub_712A
0000E46C                             
0000E46C                             
0000E46C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E46C                             
0000E46C                             
0000E46C                            Calc_VRAM_Pos:
0000E46C DA53                       		add.w	(a3),d5
0000E46E                             
0000E46E                            loc_7176:
0000E46E D86B 0004                  		add.w	4(a3),d4
0000E472 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E476 0245 01F0                  		andi.w	#$1F0,d5
0000E47A E94C                       		lsl.w	#4,d4
0000E47C E44D                       		lsr.w	#2,d5
0000E47E D845                       		add.w	d5,d4
0000E480 7003                       		moveq	#3,d0
0000E482 4840                       		swap	d0
0000E484 3004                       		move.w	d4,d0
0000E486 4E75                       		rts	
0000E488                            ; End of function Calc_VRAM_Pos
0000E488                             
0000E488                            ; ===========================================================================
0000E488 D86B 0004                  		add.w	4(a3),d4
0000E48C DA53                       		add.w	(a3),d5
0000E48E 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E492 0245 01F0                  		andi.w	#$1F0,d5
0000E496 E94C                       		lsl.w	#4,d4
0000E498 E44D                       		lsr.w	#2,d5
0000E49A D845                       		add.w	d5,d4
0000E49C 7002                       		moveq	#2,d0
0000E49E 4840                       		swap	d0
0000E4A0 3004                       		move.w	d4,d0
0000E4A2 4E75                       		rts	
0000E4A4                             
0000E4A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4A4                             
0000E4A4                             
0000E4A4                            LoadTilesFromStart:
0000E4A4 4BF9 00C0 0004             		lea	($C00004).l,a5
0000E4AA 4DF9 00C0 0000             		lea	($C00000).l,a6
0000E4B0 47F8 F700                  		lea	($FFFFF700).w,a3
0000E4B4 2878 A400                  		movea.l	($FFFFA400).w,a4
0000E4B8 343C 4000                  		move.w	#$4000,d2
0000E4BC 6100                       		bsr.s	LoadTilesFromStart2
0000E4BE 47F8 F708                  		lea	($FFFFF708).w,a3
0000E4C2 2878 A404                  		movea.l	($FFFFA404).w,a4
0000E4C6 343C 6000                  		move.w	#$6000,d2
0000E4CA 4A38 FE10                  		tst.b	($FFFFFE10).w
0000E4CE 6700 0000                  		beq.w	loc_7220
0000E4D2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E4D8 6700 0000                  		beq.w	loc_725A
0000E4DC 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
0000E4E2 6700 0000                  		beq.w	loc_7288
0000E4E6 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
0000E4EC 6700 0000                  		beq.w	loc_7220
0000E4F0                            ; End of function LoadTilesFromStart
0000E4F0                             
0000E4F0                             
0000E4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4F0                             
0000E4F0                             
0000E4F0                            LoadTilesFromStart2:
0000E4F0 78F0                       		moveq	#-$10,d4
0000E4F2 7C0F                       		moveq	#$F,d6
0000E4F4                             
0000E4F4                            loc_71FC:
0000E4F4 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E4F8 7A00                       		moveq	#0,d5
0000E4FA 3204                       		move.w	d4,d1
0000E4FC 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000E500 3801                       		move.w	d1,d4
0000E502 7A00                       		moveq	#0,d5
0000E504 7C1F                       		moveq	#$1F,d6
0000E506 6100 FE1E                  		bsr.w	DrawTiles_LR2
0000E50A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E50E 0644 0010                  		addi.w	#$10,d4
0000E512 51CE FFE0                  		dbf	d6,loc_71FC
0000E516 4E75                       		rts	
0000E518                            ; End of function LoadTilesFromStart2
0000E518                             
0000E518                            ; ===========================================================================
0000E518                             
0000E518                            loc_7220:
0000E518 7800                       		moveq	#0,d4
0000E51A 7C0F                       		moveq	#$F,d6
0000E51C                             
0000E51C                            loc_7224:
0000E51C 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E520 41F9 0000 0000             		lea	(unk_724A).l,a0
0000E526 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E52A D044                       		add.w	d4,d0
0000E52C 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
0000E530 6100 0000                  		bsr.w	sub_72BA
0000E534 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E538 0644 0010                  		addi.w	#$10,d4
0000E53C 51CE FFDE                  		dbf	d6,loc_7224
0000E540 4E75                       		rts	
0000E542                            ; ===========================================================================
0000E542 00                         unk_724A:	dc.b   0 ;	 
0000E543 00                         		dc.b   0 ;  
0000E544 00                         		dc.b   0 ;  
0000E545 00                         		dc.b   0 ;  
0000E546 06                         		dc.b   6 ;  
0000E547 06                         		dc.b   6 ;  
0000E548 06                         		dc.b   6 ;  
0000E549 04                         		dc.b   4 ;  
0000E54A 04                         		dc.b   4 ;  
0000E54B 04                         		dc.b   4 ;  
0000E54C 00                         		dc.b   0 ;  
0000E54D 00                         		dc.b   0 ;  
0000E54E 00                         		dc.b   0 ;  
0000E54F 00                         		dc.b   0 ;  
0000E550 00                         		dc.b   0 ;  
0000E551 00                         		dc.b   0 ;  
0000E552                            ; ===========================================================================
0000E552                             
0000E552                            loc_725A:
0000E552 78F0                       		moveq	#-$10,d4
0000E554 7C0F                       		moveq	#$F,d6
0000E556                             
0000E556                            loc_725E:
0000E556 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E55A 41F9 0000 E1EF             		lea	(unk_6EF3).l,a0
0000E560 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E564 0440 0200                  		subi.w	#$200,d0
0000E568 D044                       		add.w	d4,d0
0000E56A 0240 07F0                  		andi.w	#$7F0,d0
0000E56E 6100 0000                  		bsr.w	sub_72BA
0000E572 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E576 0644 0010                  		addi.w	#$10,d4
0000E57A 51CE FFDA                  		dbf	d6,loc_725E
0000E57E 4E75                       		rts	
0000E580                            ; ===========================================================================
0000E580                             
0000E580                            loc_7288:
0000E580 78F0                       		moveq	#-$10,d4
0000E582 7C0F                       		moveq	#$F,d6
0000E584                             
0000E584                            loc_728C:
0000E584 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E588 41F9 0000 E0F1             		lea	(unk_6DF5).l,a0
0000E58E 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E592 D044                       		add.w	d4,d0
0000E594 0240 01F0                  		andi.w	#$1F0,d0
0000E598 6100 0000                  		bsr.w	sub_72BA
0000E59C 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E5A0 0644 0010                  		addi.w	#$10,d4
0000E5A4 51CE FFDE                  		dbf	d6,loc_728C
0000E5A8 4E75                       		rts	
0000E5AA                            ; ===========================================================================
0000E5AA F7                         unk_72B2:	dc.b $F7 ; ÷
0000E5AB 08                         		dc.b   8 ;  
0000E5AC F7                         		dc.b $F7 ; ÷
0000E5AD 08                         		dc.b   8 ;  
0000E5AE F7                         		dc.b $F7 ; ÷
0000E5AF 10                         		dc.b $10 ;  
0000E5B0 F7                         		dc.b $F7 ; ÷
0000E5B1 18                         		dc.b $18 ;  
0000E5B2                             
0000E5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5B2                             
0000E5B2                             
0000E5B2                            sub_72BA:
0000E5B2 E848                       		lsr.w	#4,d0
0000E5B4 1030 0000                  		move.b	(a0,d0.w),d0
0000E5B8 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
0000E5BC 6700                       		beq.s	loc_72DA
0000E5BE 7AF0                       		moveq	#-$10,d5
0000E5C0 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E5C4 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
0000E5C8 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E5CC 6100 FD56                  		bsr.w	DrawTiles_LR
0000E5D0 6000                       		bra.s	locret_72EE
0000E5D2                            ; ===========================================================================
0000E5D2                             
0000E5D2                            loc_72DA:
0000E5D2 7A00                       		moveq	#0,d5
0000E5D4 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E5D8 6100 FE94                  		bsr.w	loc_7176
0000E5DC 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E5E0 7C1F                       		moveq	#$1F,d6
0000E5E2 6100 FD6C                  		bsr.w	DrawTiles_LR3
0000E5E6                             
0000E5E6                            locret_72EE:
0000E5E6 4E75                       		rts	
0000E5E8                            ; End of function sub_72BA
0000E5E8                            
0000E5E8                            ; ---------------------------------------------------------------------------
0000E5E8                            ; Level Art loading subroutine
0000E5E8                            ; ---------------------------------------------------------------------------
0000E5E8                            
0000E5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5E8                            
0000E5E8                            LoadZoneTiles:
0000E5E8 7000                       		moveq   #0,d0
0000E5EA 1038 FE10                  		move.b  ($FFFFFE10).w,d0
0000E5EE E948                       		lsl.w   #4,d0
0000E5F0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E5F6 6600                       		bne.s	tile_Check_Act_2	 ; if not, branch
0000E5F8 45F9 0000 0000             		lea     (MainLoadBlocks3).l,a2
0000E5FE 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E604                            tile_Check_Act_2:
0000E604 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E60A 6600                       		bne.s	MainLoadTileLoad2	 ; if not, branch
0000E60C 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E612 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E618                            MainLoadTileLoad2:
0000E618 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E61E                            MainLoadTileLoad3:
0000E61E 45F2 0000                  		lea     (a2,d0.w),a2
0000E622 201A                       		move.l  (a2)+,d0
0000E624 0280 00FF FFFF             		andi.l  #$FFFFFF,d0     ; 8x8 tile pointer
0000E62A 2040                       		movea.l d0,a0
0000E62C 43F9 00FF 0000             		lea     ($FF0000).l,a1
0000E632 4EB8 3A42                  		jsr   KosDec
0000E636 3609                       		move.w	a1,d3
0000E638 3E03                       		move.w	d3,d7
0000E63A 0243 0FFF                  		andi.w	#$FFF,d3
0000E63E E24B                       		lsr.w	#1,d3
0000E640 E95F                       		rol.w	#4,d7
0000E642 0247 000F                  		andi.w  #$F,d7
0000E646                            
0000E646 3407                       tileloop:	move.w  d7,d2
0000E648 EF4A                       		lsl.w   #7,d2
0000E64A EB4A                       		lsl.w   #5,d2
0000E64C 223C 00FF FFFF             		move.l  #$FFFFFF,d1
0000E652 3202                       		move.w  d2,d1
0000E654 4EB9 0000 34FC             		jsr     (QueueDMATransfer).l
0000E65A 3F07                       		move.w  d7,-(sp)
0000E65C 11FC 000C F62A             		move.b  #$C,($FFFFF62A).w
0000E662 4EBA A89A                  		jsr   DelayProgram
0000E666 4EB8 377E                  		jsr   RunPLC_Ram
0000E66A 3E1F                       		move.w  (sp)+,d7
0000E66C 363C 0800                  		move.w  #$800,d3
0000E670 51CF FFD4                  		dbf     d7,tileloop
0000E674                            
0000E674 4E75                       		rts
0000E676                            ; End of function LoadZoneTiles
0000E676                            
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            ; Main Load Block loading subroutine
0000E676                            ; ---------------------------------------------------------------------------
0000E676                            
0000E676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E676                            
0000E676                            
0000E676                            MainLoadBlockLoad:; XREF: Level; EndingSequence
0000E676 7000                       		moveq	#0,d0
0000E678 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E67C E948                       		lsl.w	#4,d0
0000E67E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E684 6600                       		bne.s	Check_Act_2	 ; if not, branch
0000E686 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000E68C 4EF9 0000 0000             		jmp	 MainLoadBlockLoad3
0000E692                            Check_Act_2:
0000E692 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E698 6600                       		bne.s	MainLoadBlockLoad2	 ; if not, branch
0000E69A 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E6A0 4EF9 0000 0000             				jmp	 MainLoadBlockLoad3
0000E6A6                            MainLoadBlockLoad2:
0000E6A6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E6AC                            MainLoadBlockLoad3:
0000E6AC 45F2 0000                  		lea	(a2,d0.w),a2
0000E6B0 2F0A                       		move.l	a2,-(sp)
0000E6B2 588A                       		addq.l	#4,a2
0000E6B4 205A                       		movea.l	(a2)+,a0
0000E6B6 43F8 B000                  		lea	($FFFFB000).w,a1; RAM address for 16x16 mappings
0000E6BA 303C 0000                  		move.w	#0,d0
0000E6BE 4EB8 3A42                  		jsr	KosDec
0000E6C2 205A                       		movea.l	(a2)+,a0
0000E6C4                            ;		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
0000E6C4                            ;		beq.s	@no_dec		; if yes, branch
0000E6C4                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0000E6C4                            ;		beq.s	@no_dec		; if yes, branch
0000E6C4 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000E6CA 4EB8 3A42                  		jsr	KosDec
0000E6CE                             
0000E6CE                            ;@no_dec:
0000E6CE 6100 0000                  		bsr.w	LevelLayoutLoad
0000E6D2 301A                       		move.w	(a2)+,d0
0000E6D4 3012                       		move.w	(a2),d0
0000E6D6 0240 00FF                  		andi.w	#$FF,d0
0000E6DA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w; is level SBZ3 (LZ4) ?
0000E6E0 6600                       		bne.s	MLB_ChkSBZPal; if not, branch
0000E6E2 700C                       		moveq	#$C,d0; use SB3 palette
0000E6E4                            
0000E6E4                            MLB_ChkSBZPal:
0000E6E4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000E6EA 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000E6EC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000E6F2 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000E6F4                            
0000E6F4                            MLB_UsePal0E:
0000E6F4 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000E6F6                            
0000E6F6                            MLB_NormalPal:
0000E6F6 4EB8 4986                  		jsr	PalLoad1	; load pallet (based on	d0)
0000E6FA 245F                       		movea.l	(sp)+,a2
0000E6FC 584A                       		addq.w	#4,a2
0000E6FE 7000                       		moveq	#0,d0
0000E700 1012                       		move.b	(a2),d0
0000E702 6700                       		beq.s	locret_6D10
0000E704 6100 0000                  		bsr.w	JmpTo2_LoadPLC		; load pattern load cues
0000E708                            
0000E708                            locret_6D10:
0000E708 4E75                       		rts	
0000E70A                            ; End of function MainLoadBlockLoad
0000E70A                            
0000E70A                            JmpTo2_LoadPLC:
0000E70A 4EF8 3712                  		jmp	LoadPLC
0000E70E                            
0000E70E                            ; ---------------------------------------------------------------------------
0000E70E                            ; Level	layout loading subroutine
0000E70E                            ; ---------------------------------------------------------------------------
0000E70E                            
0000E70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E70E                            
0000E70E                            
0000E70E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000E70E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E712 ED08                       		lsl.b	#6,d0
0000E714 E848                       		lsr.w	#4,d0
0000E716 3400                       		move.w	d0,d2
0000E718 D040                       		add.w	d0,d0
0000E71A D042                       		add.w	d2,d0
0000E71C 43F9 0000 0000             		lea	(Level_Index).l,a1
0000E722 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
0000E726 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
0000E72A D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000E72E 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000E732 4E75                       		rts						; MJ Return
0000E734                            ; End of function LevelLayoutLoad2
0000E734                            
0000E734                            
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            ; Dynamic screen resize	loading	subroutine
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            
0000E734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E734                            
0000E734                            
0000E734                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000E734 7000                       		moveq	#0,d0
0000E736 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E73A D040                       		add.w	d0,d0
0000E73C 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000E740 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000E744 7202                       		moveq	#2,d1
0000E746 3038 F726                  		move.w	($FFFFF726).w,d0
0000E74A 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000E74E 6700                       		beq.s	locret_6DAA
0000E750 6400                       		bcc.s	loc_6DAC
0000E752 4441                       		neg.w	d1
0000E754 3038 F704                  		move.w	($FFFFF704).w,d0
0000E758 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000E75C 6300                       		bls.s	loc_6DA0
0000E75E 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000E762 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000E768                            
0000E768                            loc_6DA0:
0000E768 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E76C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E772                            
0000E772                            locret_6DAA:
0000E772 4E75                       		rts	
0000E774                            ; ===========================================================================
0000E774                            
0000E774                            loc_6DAC:				; XREF: DynScrResizeLoad
0000E774 3038 F704                  		move.w	($FFFFF704).w,d0
0000E778 5040                       		addq.w	#8,d0
0000E77A B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000E77E 6500                       		bcs.s	loc_6DC4
0000E780 0838 0001 D022             		btst	#1,($FFFFD022).w
0000E786 6700                       		beq.s	loc_6DC4
0000E788 D241                       		add.w	d1,d1
0000E78A D241                       		add.w	d1,d1
0000E78C                            
0000E78C                            loc_6DC4:
0000E78C D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E790 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E796 4E75                       		rts	
0000E798                            ; End of function DynScrResizeLoad
0000E798                            
0000E798                            ; ===========================================================================
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            ; Offset index for dynamic screen resizing
0000E798                            ; ---------------------------------------------------------------------------
0000E798 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000E79C 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000E7A0 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000E7A4 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_ABZ-Resize_Index
0000E7A8                            ; ===========================================================================
0000E7A8                            ; ---------------------------------------------------------------------------
0000E7A8                            ; Green	Hill Zone dynamic screen resizing
0000E7A8                            ; ---------------------------------------------------------------------------
0000E7A8                            
0000E7A8                            Resize_GHZ:				; XREF: Resize_Index
0000E7A8 7000                       		moveq	#0,d0
0000E7AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E7AE D040                       		add.w	d0,d0
0000E7B0 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000E7B4 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000E7B8                            ; ===========================================================================
0000E7B8 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000E7BA 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000E7BC 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000E7BE                            ; ===========================================================================
0000E7BE                            
0000E7BE                            Resize_GHZ1:
0000E7BE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000E7C4 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E7CA 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000E7D0 6500                       		bcs.s	locret_6E08	; if not, branch
0000E7D2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000E7D8 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E7DE                            		
0000E7DE                            
0000E7DE                            locret_6E08:
0000E7DE 4E75                       		rts	
0000E7E0                            ; ===========================================================================
0000E7E0                            
0000E7E0                            Resize_GHZ2:
0000E7E0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E7E6 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000E7EC 6500                       		bcs.s	locret_6E3A
0000E7EE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000E7F4 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000E7FA 6500                       		bcs.s	locret_6E3A
0000E7FC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E802 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000E808 6500                       		bcs.s	locret_6E3A
0000E80A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E810                            		
0000E810                            locret_6E3A:
0000E810 4E75                       		rts	
0000E812                            ; ===========================================================================
0000E812                            
0000E812                            Resize_GHZ3:
0000E812 7000                       		moveq	#0,d0
0000E814 1038 F742                  		move.b	($FFFFF742).w,d0
0000E818 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000E81C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000E820                            ; ===========================================================================
0000E820 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000E822 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000E824 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000E826                            ; ===========================================================================
0000E826                            
0000E826                            Resize_GHZ3main:
0000E826 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E82C 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E832 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000E838 6500                       		bcs.s	locret_6E96
0000E83A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000E840 31FC 0310 F72E             		move.w	#$310,($FFFFF72E).w ; set lower	y-boundary
0000E846 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E84C 6500                       		bcs.s	locret_6E96
0000E84E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000E854 6500                       		bcs.s	loc_6E98
0000E856 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E85C 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E862 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000E868 6400                       		bcc.s	loc_6E8E
0000E86A 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000E870 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000E876                            
0000E876                            loc_6E8E:
0000E876 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000E87C 6400                       		bcc.s	loc_6E98
0000E87E                            
0000E87E                            locret_6E96:
0000E87E 4E75                       		rts	
0000E880                            ; ===========================================================================
0000E880                            
0000E880                            loc_6E98:
0000E880 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E886 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E88A 4E75                       		rts	
0000E88C                            ; ===========================================================================
0000E88C                            
0000E88C                            Resize_GHZ3boss:
0000E88C 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E892 6400                       		bcc.s	loc_6EB0
0000E894 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E898                            
0000E898                            loc_6EB0:
0000E898 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000E89E 6500                       		bcs.s	locret_6EE8
0000E8A0 4EB9 0000 0000             		jsr	SingleObjLoad
0000E8A6 6600                       		bne.s	loc_6ED0
0000E8A8 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000E8AC 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000E8B2 337C 0280 000C             		move.w	#$280,$C(a1)
0000E8B8                            
0000E8B8                            loc_6ED0:
0000E8B8 303C 000E                  		move.w	#$0E,d0
0000E8BC 6100 B2EC                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E8C0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E8C6 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E8CA 7011                       		moveq	#$11,d0
0000E8CC 4EF8 3712                  		jmp	LoadPLC		; load boss patterns
0000E8D0                            ; ===========================================================================
0000E8D0                            
0000E8D0                            locret_6EE8:
0000E8D0 4E75                       		rts	
0000E8D2                            ; ===========================================================================
0000E8D2                            
0000E8D2                            Resize_GHZ3end:
0000E8D2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E8D8 4E75                       		rts	
0000E8DA                            ; ===========================================================================
0000E8DA                            ; ---------------------------------------------------------------------------
0000E8DA                            ; Labyrinth Zone dynamic screen	resizing
0000E8DA                            ; ---------------------------------------------------------------------------
0000E8DA                            
0000E8DA                            Resize_LZ:				; XREF: Resize_Index
0000E8DA 7000                       		moveq	#0,d0
0000E8DC 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E8E0 D040                       		add.w	d0,d0
0000E8E2 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000E8E6 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000E8EA                            ; ===========================================================================
0000E8EA 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000E8EC 0000                       		dc.w Resize_LZ12-Resize_LZx
0000E8EE 0000                       		dc.w Resize_LZ3-Resize_LZx
0000E8F0 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000E8F2                            ; ===========================================================================
0000E8F2                            
0000E8F2                            Resize_LZ12:
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Resize_LZ3:
0000E8F4 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
0000E8F8 6700                       		beq.s	loc_6F28				; if not, branch
0000E8FA 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
0000E8FE 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
0000E904 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
0000E906 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
0000E90E 303C 00B7                  		move.w	#$B7,d0
0000E912 6100 ABAA                  		bsr.w	Jmpto_PlaySound_Special ; play rumbling sound
0000E916                            
0000E916                            loc_6F28:
0000E916 4A38 F742                  		tst.b	($FFFFF742).w
0000E91A 6600                       		bne.s	locret_6F64
0000E91C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000E922 6500                       		bcs.s	locret_6F62
0000E924 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000E92A 6400                       		bcc.s	locret_6F62
0000E92C 4EB9 0000 0000             		jsr	SingleObjLoad
0000E932 6600                       		bne.s	loc_6F4A
0000E934 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000E938                            
0000E938                            loc_6F4A:
0000E938 303C 000E                  		move.w	#$0E,d0
0000E93C 6100 B26C                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E940 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E946 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E94A 7011                       		moveq	#$11,d0
0000E94C 4EF8 3712                  		jmp	LoadPLC		; load boss patterns
0000E950                            ; ===========================================================================
0000E950                            
0000E950                            locret_6F62:
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            locret_6F64:
0000E952 4E75                       		rts	
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            Resize_SBZ3:
0000E954 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E95A 6500                       		bcs.s	locret_6F8C
0000E95C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000E962 6400                       		bcc.s	locret_6F8C	; if not, branch
0000E964 4238 FE30                  		clr.b	($FFFFFE30).w
0000E968 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E96E 4EB9 0000 0000             		jsr Save_Progress
0000E974 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000E97A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000E980                            
0000E980                            locret_6F8C:
0000E980 4E75                       		rts	
0000E982                            ; ===========================================================================
0000E982                            ; ---------------------------------------------------------------------------
0000E982                            ; Marble Zone dynamic screen resizing
0000E982                            ; ---------------------------------------------------------------------------
0000E982                            
0000E982                            Resize_MZ:				; XREF: Resize_Index
0000E982 7000                       		moveq	#0,d0
0000E984 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E988 D040                       		add.w	d0,d0
0000E98A 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000E98E 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000E992                            ; ===========================================================================
0000E992 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000E994 0000                       		dc.w Resize_MZ2-Resize_MZx
0000E996 0000                       		dc.w Resize_MZ3-Resize_MZx
0000E998                            ; ===========================================================================
0000E998                            
0000E998                            Resize_MZ1:
0000E998 7000                       		moveq	#0,d0
0000E99A 1038 F742                  		move.b	($FFFFF742).w,d0
0000E99E 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000E9A2 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000E9A6                            ; ===========================================================================
0000E9A6 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000E9A8 0000                       		dc.w loc_6FEA-off_6FB2
0000E9AA 0000                       		dc.w loc_702E-off_6FB2
0000E9AC 0000                       		dc.w loc_7050-off_6FB2
0000E9AE                            ; ===========================================================================
0000E9AE                            
0000E9AE                            loc_6FBA:
0000E9AE 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000E9B4 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000E9BA 6500                       		bcs.s	locret_6FE8
0000E9BC 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000E9C2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E9C8 6500                       		bcs.s	locret_6FE8
0000E9CA 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000E9D0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E9D6 6500                       		bcs.s	locret_6FE8
0000E9D8 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E9DC                            
0000E9DC                            locret_6FE8:
0000E9DC 4E75                       		rts	
0000E9DE                            ; ===========================================================================
0000E9DE                            
0000E9DE                            loc_6FEA:
0000E9DE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E9E4 6400                       		bcc.s	loc_6FF8
0000E9E6 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E9EA 4E75                       		rts	
0000E9EC                            ; ===========================================================================
0000E9EC                            
0000E9EC                            loc_6FF8:
0000E9EC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000E9F2 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000E9F8 6400                       		bcc.s	locret_702C
0000E9FA 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000EA00 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000EA06 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000EA0C 6400                       		bcc.s	locret_702C
0000EA0E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000EA14 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000EA1A 6500                       		bcs.s	locret_702C
0000EA1C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA20                            
0000EA20                            locret_702C:
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            
0000EA22                            loc_702E:
0000EA22 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000EA28 6400                       		bcc.s	loc_703C
0000EA2A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000EA2E 4E75                       		rts	
0000EA30                            ; ===========================================================================
0000EA30                            
0000EA30                            loc_703C:
0000EA30 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000EA36 6500                       		bcs.s	locret_704E
0000EA38 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000EA3E 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA42                            
0000EA42                            locret_704E:
0000EA42 4E75                       		rts	
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            loc_7050:
0000EA44 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000EA4A 6500                       		bcs.s	locret_7072
0000EA4C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000EA52 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000EA58 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000EA5E 6500                       		bcs.s	locret_7072
0000EA60 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000EA66                            
0000EA66                            locret_7072:
0000EA66 4E75                       		rts	
0000EA68                            ; ===========================================================================
0000EA68                            
0000EA68                            Resize_MZ2:
0000EA68 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000EA6E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000EA74 6500                       		bcs.s	locret_7088
0000EA76 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000EA7C                            
0000EA7C                            locret_7088:
0000EA7C 4E75                       		rts	
0000EA7E                            ; ===========================================================================
0000EA7E                            
0000EA7E                            Resize_MZ3:
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1038 F742                  		move.b	($FFFFF742).w,d0
0000EA84 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000EA88 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000EA8C                            ; ===========================================================================
0000EA8C 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000EA8E 0000                       		dc.w Resize_MZ3end-off_7098
0000EA90                            ; ===========================================================================
0000EA90                            
0000EA90                            Resize_MZ3boss:
0000EA90 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000EA96 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000EA9C 6500                       		bcs.s	locret_70E8
0000EA9E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000EAA4 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000EAAA 6500                       		bcs.s	locret_70E8
0000EAAC 4EB9 0000 0000             		jsr	SingleObjLoad
0000EAB2 6600                       		bne.s	loc_70D0
0000EAB4 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000EAB8 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000EABE 337C 022C 000C             		move.w	#$22C,$C(a1)
0000EAC4                            
0000EAC4                            loc_70D0:
0000EAC4 303C 000E                  		move.w	#$0E,d0
0000EAC8 6100 B0E0                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000EACC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EAD2 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EAD6 7011                       		moveq	#$11,d0
0000EAD8 4EF8 3712                  		jmp	LoadPLC		; load boss patterns
0000EADC                            ; ===========================================================================
0000EADC                            
0000EADC                            locret_70E8:
0000EADC 4E75                       		rts	
0000EADE                            ; ===========================================================================
0000EADE                            
0000EADE                            Resize_MZ3end:
0000EADE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EAE4 4E75                       		rts	
0000EAE6                            ; ===========================================================================
0000EAE6                            ; ---------------------------------------------------------------------------
0000EAE6                            ; Star Light Zone dynamic screen resizing
0000EAE6                            ; ---------------------------------------------------------------------------
0000EAE6                            
0000EAE6                            Resize_SLZ:				; XREF: Resize_Index
0000EAE6 7000                       		moveq	#0,d0
0000EAE8 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EAEC D040                       		add.w	d0,d0
0000EAEE 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000EAF2 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000EAF6                            ; ===========================================================================
0000EAF6 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000EAF8 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000EAFA 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000EAFC                            ; ===========================================================================
0000EAFC                            
0000EAFC                            Resize_SLZ12:
0000EAFC 4E75                       		rts	
0000EAFE                            ; ===========================================================================
0000EAFE                            
0000EAFE                            Resize_SLZ3:
0000EAFE 7000                       		moveq	#0,d0
0000EB00 1038 F742                  		move.b	($FFFFF742).w,d0
0000EB04 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000EB08 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000EB0C                            ; ===========================================================================
0000EB0C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000EB0E 0000                       		dc.w Resize_SLZ3boss-off_7118
0000EB10 0000                       		dc.w Resize_SLZ3end-off_7118
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            Resize_SLZ3main:
0000EB12 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000EB18 6500                       		bcs.s	locret_7130
0000EB1A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000EB20 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB24                            
0000EB24                            locret_7130:
0000EB24 4E75                       		rts	
0000EB26                            ; ===========================================================================
0000EB26                            
0000EB26                            Resize_SLZ3boss:
0000EB26 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000EB2C 6500                       		bcs.s	locret_715C
0000EB2E 4EB9 0000 0000             		jsr	SingleObjLoad
0000EB34 6600                       		bne.s	loc_7144
0000EB36 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000EB3A                            
0000EB3A                            loc_7144:
0000EB3A 303C 000E                  		move.w	#$0E,d0
0000EB3E 6100 B06A                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000EB42 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EB48 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB4C 7011                       		moveq	#$11,d0
0000EB4E 4EF8 3712                  		jmp	LoadPLC		; load boss patterns
0000EB52                            ; ===========================================================================
0000EB52                            
0000EB52                            locret_715C:
0000EB52 4E75                       		rts	
0000EB54                            ; ===========================================================================
0000EB54                            
0000EB54                            Resize_SLZ3end:
0000EB54 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EB5A 4E75                       		rts
0000EB5C 4E75                       		rts
0000EB5E                            ; ===========================================================================
0000EB5E                            ; ---------------------------------------------------------------------------
0000EB5E                            ; Spring Yard Zone dynamic screen resizing
0000EB5E                            ; ---------------------------------------------------------------------------
0000EB5E                            
0000EB5E                            Resize_SYZ:				; XREF: Resize_Index
0000EB5E 4EB9 0000 0000             	jsr	(SlotMachine).l
0000EB64 4A38 FE11                  	tst.b	(Current_Act).w
0000EB68 6600                       	bne.s	loc_F278
0000EB6A 4E75                       	rts
0000EB6C                            ; ===========================================================================
0000EB6C                            
0000EB6C                            loc_F278:
0000EB6C 7000                       	moveq	#0,d0
0000EB6E 1038 F742                  	move.b	($FFFFF742).w,d0
0000EB72 303B 0000                  	move.w	off_F286(pc,d0.w),d0
0000EB76 4EFB 0000                  	jmp	off_F286(pc,d0.w)
0000EB7A                            ; ===========================================================================
0000EB7A                            off_F286:
0000EB7A 0000                       	dc.w loc_F28E-off_F286
0000EB7C 0000                       	dc.w loc_F2CE-off_F286	; 1
0000EB7E 0000                       	dc.w loc_F318_2-off_F286	; 2
0000EB80 0000                       	dc.w loc_F350-off_F286	; 3
0000EB82                            ; ===========================================================================
0000EB82                            
0000EB82                            loc_F28E:
0000EB82                            ;	tst.w	(Two_player_mode).w
0000EB82                            ;	bne.s	loc_F2C0
0000EB82 0C78 27C0 F700             	cmpi.w	#$27C0,(Camera_X_pos).w
0000EB88 6500                       	bcs.s	return_F2BE
0000EB8A 31F8 F700 F728             	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
0000EB90                            ;	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
0000EB90 31FC 062E E726             	move.w	#$62E,(Camera_Max_Y_pos).w
0000EB96                            ;	move.w	#$62E,(Tails_Max_Y_pos).w
0000EB96 11FC 00F9 8C54             	move.b	#-7,($FFFF8C54).w
0000EB9C 5438 F742                  	addq.b	#2,($FFFFF742).w
0000EBA0                            
0000EBA0                            return_F2BE:
0000EBA0 4E75                       	rts
0000EBA2                            ; ===========================================================================
0000EBA2                            
0000EBA2                            
0000EBA2                            loc_F2CE:
0000EBA2 0C78 2890 F700             	cmpi.w	#$2890,(Camera_X_pos).w
0000EBA8 6500                       	bcs.s	return_F316
0000EBAA 11FC 00F9 8C50             	move.b	#-7,($FFFF8C50).w
0000EBB0 31FC 2860 F728             	move.w	#$2860,(Camera_Min_X_pos).w
0000EBB6 31FC 28E0 F72A             	move.w	#$28E0,(Camera_Max_X_pos).w
0000EBBC                            ;	move.w	#$2860,(Tails_Min_X_pos).w
0000EBBC                            ;	move.w	#$28E0,(Tails_Max_X_pos).w
0000EBBC 5438 F742                  	addq.b	#2,(Dynamic_Resize_Routine).w
0000EBC0 303C 00F9                  	move.w	#$F9,d0
0000EBC4 4EB8 3212                  	jsr		PlaySound
0000EBC8 4238 F73A                  	clr.b	($FFFFF73A).w
0000EBCC 11FC 0006 F742             	move.b	#6,($FFFFF742).w
0000EBD2 702D                       	moveq	#$2D,d0
0000EBD4 6100 FB34                  	bsr.w	JmpTo2_LoadPLC
0000EBD8 701A                       	moveq	#$1A,d0
0000EBDA 4EB8 499E                  	jsr		PalLoad2
0000EBDE                            
0000EBDE                            return_F316:
0000EBDE 4E75                       	rts
0000EBE0                            ; ===========================================================================
0000EBE0                            
0000EBE0                            loc_F318_2:
0000EBE0 0C78 04E0 F704             	cmpi.w	#$4E0,(Camera_Y_pos).w
0000EBE6 6500                       	bcs.s	loc_F318_3
0000EBE8 31FC 04E0 F72C             	move.w	#$4E0,(Camera_Min_Y_pos).w
0000EBEE 31FC 04E0 EEFC             	move.w	#$4E0,($FFFFEEFC).w
0000EBF4                            loc_F318_3:
0000EBF4 5238 F73A                  	addq.b	#1,($FFFFF73A).w
0000EBF8 0C38 005A F73A             	cmpi.b	#$5A,($FFFFF73A).w
0000EBFE 6500                       	bcs.s	return_F34E
0000EC00 4EB9 0000 0000             	jsr		SingleObjLoad
0000EC06 6600                       	bne.s	loc_F318_4
0000EC08 4E71                       	nop
0000EC0A                            ;	move.b	#$51,(a1) ; load obj51 no boss atm
0000EC0A                            loc_F318_4:
0000EC0A 5438 F742                  	addq.b	#2,($FFFFF742).w
0000EC0E 303C 0093                  	move.w	#$93,d0
0000EC12 4EB8 3212                  	jsr	PlaySound
0000EC16                            
0000EC16                            return_F34E:
0000EC16 4E75                       	rts
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            loc_F350:
0000EC18 0C78 2A00 F700             	cmpi.w	#$2A00,(Camera_X_pos).w
0000EC1E 6500                       	bcs.s	return_F376
0000EC20 31FC 05D0 E726             	move.w	#$5D0,(Camera_Max_Y_pos).w
0000EC26                            ;	move.w	#$5D0,(Tails_Max_Y_pos).w
0000EC26 31F8 F700 F728             	move.w	(Camera_X_pos).w,(Camera_Min_X_pos).w
0000EC2C                            ;	move.w	(Camera_Max_X_pos).w,(Tails_Max_X_pos).w
0000EC2C                            ;	move.w	(Camera_X_pos).w,(Tails_Min_X_pos).w
0000EC2C                            
0000EC2C                            return_F376:
0000EC2C 4E75                       	rts
0000EC2E                            ; ===========================================================================
0000EC2E                            ; ---------------------------------------------------------------------------
0000EC2E                            ; Scrap	Brain Zone dynamic screen resizing
0000EC2E                            ; ---------------------------------------------------------------------------
0000EC2E                            
0000EC2E                            Resize_SBZ:				; XREF: Resize_Index
0000EC2E 7000                       		moveq	#0,d0
0000EC30 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EC34 D040                       		add.w	d0,d0
0000EC36 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000EC3A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000EC3E                            ; ===========================================================================
0000EC3E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000EC40 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000EC42 0000                       		dc.w Resize_FZ-Resize_SBZx
0000EC44                            ; ===========================================================================
0000EC44                            
0000EC44                            Resize_SBZ1:
0000EC44 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000EC4A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000EC50 6500                       		bcs.s	locret_7242
0000EC52 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000EC58 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000EC5E 6500                       		bcs.s	locret_7242
0000EC60 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000EC66                            
0000EC66                            locret_7242:
0000EC66 4E75                       		rts	
0000EC68                            ; ===========================================================================
0000EC68                            
0000EC68                            Resize_SBZ2:
0000EC68 7000                       		moveq	#0,d0
0000EC6A 1038 F742                  		move.b	($FFFFF742).w,d0
0000EC6E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000EC72 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000EC76                            ; ===========================================================================
0000EC76 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000EC78 0000                       		dc.w Resize_SBZ2boss-off_7252
0000EC7A 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000EC7C 0000                       		dc.w Resize_SBZ2end-off_7252
0000EC7E                            ; ===========================================================================
0000EC7E                            
0000EC7E                            Resize_SBZ2main:
0000EC7E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000EC84 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000EC8A 6500                       		bcs.s	locret_727A
0000EC8C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000EC92 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000EC98 6500                       		bcs.s	locret_727A
0000EC9A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EC9E                            
0000EC9E                            locret_727A:
0000EC9E 4E75                       		rts	
0000ECA0                            ; ===========================================================================
0000ECA0                            
0000ECA0                            Resize_SBZ2boss:
0000ECA0 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000ECA6 6500                       		bcs.s	locret_7298
0000ECA8 4EB9 0000 0000             		jsr	SingleObjLoad
0000ECAE 6600                       		bne.s	locret_7298
0000ECB0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000ECB4 5438 F742                  		addq.b	#2,($FFFFF742).w
0000ECB8 701E                       		moveq	#$1E,d0
0000ECBA 4EF8 3712                  		jmp	LoadPLC		; load SBZ2 Eggman patterns
0000ECBE                            ; ===========================================================================
0000ECBE                            
0000ECBE                            locret_7298:
0000ECBE 4E75                       		rts	
0000ECC0                            ; ===========================================================================
0000ECC0                            
0000ECC0                            Resize_SBZ2boss2:
0000ECC0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000ECC6 6500                       		bcs.s	loc_72B6
0000ECC8 4EB9 0000 0000             		jsr	SingleObjLoad
0000ECCE 6600                       		bne.s	loc_72B0
0000ECD0 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000ECD4 5438 F742                  		addq.b	#2,($FFFFF742).w
0000ECD8                            
0000ECD8                            loc_72B0:
0000ECD8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000ECDE                            
0000ECDE                            loc_72B6:
0000ECDE 6000                       		bra.s	loc_72C2
0000ECE0                            ; ===========================================================================
0000ECE0                            
0000ECE0                            Resize_SBZ2end:
0000ECE0 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000ECE6 6500                       		bcs.s	loc_72C2
0000ECE8 4E75                       		rts	
0000ECEA                            ; ===========================================================================
0000ECEA                            
0000ECEA                            loc_72C2:
0000ECEA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000ECF0 4E75                       		rts	
0000ECF2                            ; ===========================================================================
0000ECF2                            
0000ECF2                            Resize_FZ:
0000ECF2 7000                       		moveq	#0,d0
0000ECF4 1038 F742                  		move.b	($FFFFF742).w,d0
0000ECF8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000ECFC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000ED00                            ; ===========================================================================
0000ED00 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000ED04 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000ED08 0000                       		dc.w Resize_FZend2-off_72D8
0000ED0A                            ; ===========================================================================
0000ED0A                            
0000ED0A                            Resize_FZmain:
0000ED0A 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000ED10 6500                       		bcs.s	loc_72F4
0000ED12 5438 F742                  		addq.b	#2,($FFFFF742).w
0000ED16 701F                       		moveq	#$1F,d0
0000ED18 4EB8 3712                  		jsr	LoadPLC		; load FZ boss patterns
0000ED1C                            
0000ED1C                            loc_72F4:
0000ED1C 60CC                       		bra.s	loc_72C2
0000ED1E                            ; ===========================================================================
0000ED1E                            
0000ED1E                            Resize_FZboss:
0000ED1E 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000ED24 6500                       		bcs.s	loc_7312
0000ED26 4EB9 0000 0000             		jsr	SingleObjLoad
0000ED2C 6600                       		bne.s	loc_7312
0000ED2E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000ED32 5438 F742                  		addq.b	#2,($FFFFF742).w
0000ED36 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000ED3C                            
0000ED3C                            loc_7312:
0000ED3C 60AC                       		bra.s	loc_72C2
0000ED3E                            ; ===========================================================================
0000ED3E                            
0000ED3E                            Resize_FZend:
0000ED3E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000ED44 6500                       		bcs.s	loc_7320
0000ED46 5438 F742                  		addq.b	#2,($FFFFF742).w
0000ED4A                            
0000ED4A                            loc_7320:
0000ED4A 609E                       		bra.s	loc_72C2
0000ED4C                            ; ===========================================================================
0000ED4C                            
0000ED4C                            locret_7322:
0000ED4C 4E75                       		rts	
0000ED4E                            ; ===========================================================================
0000ED4E                            
0000ED4E                            Resize_FZend2:
0000ED4E 609A                       		bra.s	loc_72C2
0000ED50                            ; ===========================================================================
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            ; Ending sequence dynamic screen resizing (empty)
0000ED50                            ; ---------------------------------------------------------------------------
0000ED50                            
0000ED50                            Resize_Ending:				; XREF: Resize_Index
0000ED50 4E75                       		rts	
0000ED52                            ; ===========================================================================
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                            ; Alpha Beta Zone sequence dynamic screen resizing (empty)
0000ED52                            ; ---------------------------------------------------------------------------
0000ED52                             
0000ED52                            Resize_ABZ:				; XREF: Resize_Index
0000ED52 7000                       		moveq	#0,d0
0000ED54 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000ED58 D040                       		add.w	d0,d0
0000ED5A 303B 0000                  		move.w	Resize_ABZx(pc,d0.w),d0
0000ED5E 4EFB 0000                  		jmp	Resize_ABZx(pc,d0.w)
0000ED62                            ; ===========================================================================
0000ED62 0000                       Resize_ABZx:	dc.w Resize_ABZ1-Resize_ABZx
0000ED64 0000                       		dc.w Resize_ABZ2-Resize_ABZx
0000ED66 0000                       		dc.w Resize_ABZ3-Resize_ABZx
0000ED68 0000                       		dc.w Resize_ABZ4-Resize_ABZx
0000ED6A                            ; ===========================================================================
0000ED6A                            Resize_ABZ1:
0000ED6A 4E75                       		rts
0000ED6C                            ; ===========================================================================
0000ED6C                            Resize_ABZ2:
0000ED6C 4E75                       		rts
0000ED6E                            ; ===========================================================================
0000ED6E                            Resize_ABZ3:
0000ED6E 4E75                       		rts
0000ED70                            ; ===========================================================================
0000ED70                            Resize_ABZ4:
0000ED70 4E75                       		rts
0000ED72                            ; ===========================================================================
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72                            ; Object 11 - GHZ bridge
0000ED72                            ; ---------------------------------------------------------------------------
0000ED72                            ; OST Variables:
0000ED72 =00000030                  Obj11_child1		equ objoff_30	; pointer to first set of bridge segments
0000ED72 =00000034                  Obj11_child2		equ objoff_34	; pointer to second set of bridge segments, if applicable
0000ED72 =0000003C                  Obj11_baseYpos		equ	objoff_3C	; resting y position of bridge
0000ED72 =0000003E                  Obj11_Sonanim		equ $3E
0000ED72                            
0000ED72                            Obj11:
0000ED72                            Bridge:					; XREF: Obj_Index
0000ED72 0828 0006 0001             		btst	#6,render_flags(a0)	; is this a child sprite object?
0000ED78 6600 0000                  		bne.w	@child			; if yes, branch
0000ED7C 7000                       		moveq	#0,d0
0000ED7E 1028 0024                  		move.b	routine(a0),d0
0000ED82 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
0000ED86 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
0000ED8A                            ; ===========================================================================
0000ED8A                            @child:	; child sprite objects only need to be drawn
0000ED8A 303C 0180                  		move.w	#$180,d0
0000ED8E 6000 0000                  		bra.w	DisplaySprite3
0000ED92                            ; ===========================================================================
0000ED92 0000                       Bri_Index:	dc.w 	Bri_Main-Bri_Index
0000ED94 0000                        			dc.w	Bri_Action-Bri_Index
0000ED96 0000                        			dc.w 	Bri_Platform-Bri_Index
0000ED98 0000                        			dc.w	Bri_Delete-Bri_Index
0000ED9A 0000                        			dc.w	Bri_Delete-Bri_Index
0000ED9C 0000                       		 	dc.w	Bri_Display-Bri_Index
0000ED9E                            ;		 	dc.w	Bri_Collapse-Bri_Index
0000ED9E                            ; ===========================================================================
0000ED9E                            
0000ED9E                            Bri_Main:	; Routine 0
0000ED9E 5428 0024                  	addq.b	#2,routine(a0)
0000EDA2 217C 0000 0000 0004        	move.l	#Map_obj11,4(a0)
0000EDAA 317C 438E 0002             	move.w	#$438E,2(a0)
0000EDB0 117C 0004 0001             	move.b	#4,render_flags(a0)
0000EDB6 317C 0180 0018             	move.w	#$180,priority(a0)
0000EDBC 117C 0080 0023             	move.b	#$80,width_pixels(a0)
0000EDC2 3428 000C                  	move.w	y_pos(a0),d2
0000EDC6 3142 003C                  	move.w	d2,Obj11_baseYpos(a0)
0000EDCA 3628 0008                  	move.w	x_pos(a0),d3
0000EDCE 1810                       	move.b	0(a0),d4	; copy object number ($11) to d4
0000EDD0 45E8 0028                  	lea		subtype(a0),a2
0000EDD4 7200                       	moveq	#0,d1
0000EDD6 1212                       	move.b	(a2),d1		; copy bridge length to d1
0000EDD8                            ;	move.b	#0,(a2)+	; clear bridge length
0000EDD8 3001                       	move.w	d1,d0
0000EDDA E248                       	lsr.w	#1,d0
0000EDDC E948                       	lsl.w	#4,d0
0000EDDE 9640                       	sub.w	d0,d3		; d3 is position of leftmost log
0000EDE0 4841                       	swap	d1	; store subtype in high word for later
0000EDE2 323C 0008                  	move.w	#8,d1
0000EDE6 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EDE8 3029 0028                  	move.w	sub6_x_pos(a1),d0
0000EDEC 5140                       	subq.w	#8,d0
0000EDEE 3340 0008                  	move.w	d0,x_pos(a1)		; center of first subsprite object
0000EDF2 2149 0030                  	move.l	a1,Obj11_child1(a0)	; pointer to first subsprite object
0000EDF6 4841                       	swap	d1	; retrieve subtype
0000EDF8 5141                       	subq.w	#8,d1
0000EDFA 6300                       	bls.s	@finish	; branch, if subtype <= 8 (bridge has no more than 8 logs)
0000EDFC                            	; else, create a second subsprite object for the rest of the bridge
0000EDFC 3801                       	move.w	d1,d4
0000EDFE 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EE00 2149 0034                  	move.l	a1,Obj11_child2(a0)	; pointer to second subsprite object
0000EE04 3004                       	move.w	d4,d0
0000EE06 D040                       	add.w	d0,d0
0000EE08 D044                       	add.w	d4,d0	; d0*3
0000EE0A 3031 0010                  	move.w	sub2_x_pos(a1,d0.w),d0
0000EE0E 5140                       	subq.w	#8,d0
0000EE10 3340 0008                  	move.w	d0,x_pos(a1)		; center of second subsprite object 
0000EE14                            @finish:
0000EE14 6000                       	bra.s	Bri_Action
0000EE16                            
0000EE16                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EE16                            Obj11_MakeBdgSegment:
0000EE16 6100 0000                  	bsr.w	SingleObjLoad2
0000EE1A 6600                       	bne.s	@rts
0000EE1C 1290                       	move.b	(a0),(a1) ; load obj11
0000EE1E 3368 0008 0008             	move.w	x_pos(a0),x_pos(a1)
0000EE24 3368 000C 000C             	move.w	y_pos(a0),y_pos(a1)
0000EE2A 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
0000EE30 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
0000EE36 1368 0001 0001             	move.b	render_flags(a0),render_flags(a1)
0000EE3C 08E9 0006 0001             	bset	#6,render_flags(a1)
0000EE42 137C 0040 000E             	move.b	#$40,mainspr_width(a1)
0000EE48 1341 000F                  	move.b	d1,mainspr_childsprites(a1)
0000EE4C 5301                       	subq.b	#1,d1
0000EE4E 45E9 0010                  	lea		sub2_x_pos(a1),a2 ; starting address for subsprite data
0000EE52                            
0000EE52                            @makelog:
0000EE52 34C3                       	move.w	d3,(a2)+	; sub?_x_pos
0000EE54 34C2                       	move.w	d2,(a2)+	; sub?_y_pos
0000EE56 34FC 0000                  	move.w	#0,(a2)+	; sub?_mapframe
0000EE5A 0643 0010                  	addi.w	#$10,d3		; width of a log, x_pos for next log
0000EE5E 51C9 FFF2                  	dbf	d1,@makelog		; repeat for d1 logs
0000EE62                            @rts:
0000EE62 4E75                       	rts
0000EE64                            ; End of function Obj11_MakeBdgSegment
0000EE64                            
0000EE64                            ; ===========================================================================
0000EE64                            Bri_Action:	; Routine 2
0000EE64 6100                       		bsr.s	Bri_Solid
0000EE66 4A28 003E                  		tst.b	$3E(a0)
0000EE6A 6700                       		beq.s	@display
0000EE6C 5928 003E                  		subq.b	#4,$3E(a0)
0000EE70 6100 0000                  		bsr.w	Bri_Bend
0000EE74                            
0000EE74                            	@display:
0000EE74                            		;bsr.w	DisplaySprite
0000EE74 6000 0000                  		bra.w	Bri_ChkDel
0000EE78                            
0000EE78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EE78                            
0000EE78                            
0000EE78                            Bri_Solid:
0000EE78 7200                       		moveq	#0,d1
0000EE7A 1228 0028                  		move.b	subtype(a0),d1
0000EE7E E749                       		lsl.w	#3,d1
0000EE80 3401                       		move.w	d1,d2
0000EE82 5041                       		addq.w	#8,d1
0000EE84 D442                       		add.w	d2,d2
0000EE86 43F8 D000                  		lea	(v_player).w,a1
0000EE8A 1169 001C 001C             		move.b	anim(a1),anim(a0) 	; remember sonic's animation
0000EE90 3169 0012 0012             		move.w	y_vel(a1),y_vel(a0) 	; remember sonic's y speed		
0000EE96 4A69 0012                  		tst.w	y_vel(a1)
0000EE9A 6B00 0000                  		bmi.w	locret_751E
0000EE9E 3029 0008                  		move.w	x_pos(a1),d0
0000EEA2 9068 0008                  		sub.w	x_pos(a0),d0
0000EEA6 D041                       		add.w	d1,d0
0000EEA8 6B00 0000                  		bmi.w	locret_751E
0000EEAC B042                       		cmp.w	d2,d0
0000EEAE 6400 0000                  		bcc.w	locret_751E
0000EEB2 6000 0000                  		bra.w	Platform2
0000EEB6                            ; End of function Bri_Solid
0000EEB6                            
0000EEB6                            ; ===========================================================================
0000EEB6                            
0000EEB6                            Bri_ChkDel:
0000EED4 4E75                       	rts
0000EED6                            ; ---------------------------------------------------------------------------
0000EED6                            @delete:	; delete first subsprite object
0000EED6 2268 0030                  	movea.l	Obj11_child1(a0),a1 ; a1=object
0000EEDA 6100 0000                  	bsr.w	DeleteObject2
0000EEDE 0C28 0008 0028             	cmpi.b	#8,subtype(a0)
0000EEE4 6300                       	bls.s	@delparent	; if bridge has more than 8 logs, delete second subsprite object
0000EEE6 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EEEA 6100 0000                  	bsr.w	DeleteObject2
0000EEEE                            @delparent:
0000EEEE 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000EEF2 3440                       	    movea.w	d0,a2				; load address into a2
0000EEF4 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000EEF8 6000 0000                  	bra.w	DeleteObject
0000EEFC                            ; ===========================================================================
0000EEFC                            Bri_Delete:	; Routine 6, 8
0000EEFC 6000 0000                  		bra.w	DeleteObject
0000EF00                            Bri_Display:
0000EF00 6000 0000                  		bra.w	DisplaySprite
0000EF04                            ; ===========================================================================
0000EF04                            
0000EF04                            Bri_Platform:	; Routine 4
0000EF04 6100 0000                  		bsr.w	Bri_Bend
0000EF08 6100                       		bsr.s	Bri_WalkOff
0000EF0A                            	;	bsr.w	DisplaySprite
0000EF0A 6000 FFAA                  		bra.w	Bri_ChkDel
0000EF0E                            ; ===========================================================================
0000EF0E                            
0000EF0E                            ; ---------------------------------------------------------------------------
0000EF0E                            ; Subroutine allowing Sonic to walk off a bridge
0000EF0E                            ; ---------------------------------------------------------------------------
0000EF0E                            
0000EF0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF0E                            
0000EF0E                            Obj11_WalkOff:
0000EF0E                            Bri_WalkOff:				; XREF: Bri_Platform
0000EF0E 43F8 D000                  		lea	(v_player).w,a1
0000EF12 7200                       		moveq	#0,d1
0000EF14 1228 0028                  		move.b	subtype(a0),d1
0000EF18 E749                       		lsl.w	#3,d1
0000EF1A 3401                       		move.w	d1,d2
0000EF1C 5041                       		addq.w	#8,d1
0000EF1E 6100 0000                  		bsr.w	ExitPlatform2
0000EF22 6400                       		bcc.s	locret_75BE
0000EF24 E848                       		lsr.w	#4,d0
0000EF26 1140 003F                  		move.b	d0,$3F(a0)
0000EF2A 1028 003E                  		move.b	$3E(a0),d0
0000EF2E 0C00 0040                  		cmpi.b	#$40,d0
0000EF32 6700                       		beq.s	loc_75B6
0000EF34 5828 003E                  		addq.b	#4,$3E(a0)
0000EF38                            
0000EF38                            loc_75B6:
0000EF38 6100 0000                  		bsr.w	Bri_MoveSonic
0000EF3C                            
0000EF3C                            locret_75BE:
0000EF3C 4E75                       		rts	
0000EF3E                            ; End of function Bri_WalkOff
0000EF3E                            
0000EF3E                            
0000EF3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EF3E                            
0000EF3E                            Obj11_MoveSonic:
0000EF3E                            Bri_MoveSonic:				; XREF: Bri_WalkOff
0000EF3E 7000                       		moveq	#0,d0
0000EF40 1028 003F                  		move.b	$3F(a0),d0						; which piece sonic is standing on
0000EF44 2468 0030                  	movea.l	Obj11_child1(a0),a2
0000EF48 0C40 0008                  	cmpi.w	#8,d0								; is piece number under 8
0000EF4C 6500                       	blo.s	@got_object							; if so, we have the right one
0000EF4E 2468 0034                  	movea.l	Obj11_child2(a0),a2 ; a2=object
0000EF52 5140                       	subi.w	#8,d0
0000EF54                            @got_object:
0000EF54 D040                       	add.w	d0,d0
0000EF56 3200                       	move.w	d0,d1
0000EF58 D040                       	add.w	d0,d0
0000EF5A D041                       	add.w	d1,d0
0000EF5C 3032 0012                  	move.w	sub2_y_pos(a2,d0.w),d0
0000EF60 5140                       	subq.w	#8,d0
0000EF62 7200                       	moveq	#0,d1
0000EF64 1229 0016                  	move.b	$16(a1),d1
0000EF68 9041                       	sub.w	d1,d0
0000EF6A 3340 000C                  	move.w	d0,y_pos(a1)							; change Sonic's position on y-axis
0000EF6E                            ;	moveq	#0,d4
0000EF6E 4E75                       	rts
0000EF70                            ; End of function Bri_MoveSonic
0000EF70                            
0000EF70                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EF70                            ; subroutine to make the bridge push down where Sonic or Tails walks over
0000EF70                            Obj11_Bend:
0000EF70                            Bri_Bend:
0000EF70 1028 003E                  	move.b	objoff_3E(a0),d0
0000EF74 6100 9FBA                  	bsr.w	CalcSine
0000EF78 3800                       	move.w	d0,d4
0000EF7A 49F9 0000 0000             	lea	(byte_FB28).l,a4
0000EF80 7000                       	moveq	#0,d0
0000EF82 1028 0028                  	move.b	subtype(a0),d0
0000EF86 E948                       	lsl.w	#4,d0
0000EF88 7600                       	moveq	#0,d3
0000EF8A 1628 003F                  	move.b	objoff_3F(a0),d3
0000EF8E 3403                       	move.w	d3,d2
0000EF90 D640                       	add.w	d0,d3
0000EF92 7A00                       	moveq	#0,d5
0000EF94 4BF9 0000 0000             	lea	(Obj11_DepressionOffsets-$80).l,a5
0000EF9A 1A35 3000                  	move.b	(a5,d3.w),d5
0000EF9E 0243 000F                  	andi.w	#$F,d3
0000EFA2 E94B                       	lsl.w	#4,d3
0000EFA4 47F4 3000                  	lea	(a4,d3.w),a3
0000EFA8 2268 0030                  	movea.l	Obj11_child1(a0),a1
0000EFAC 45E9 0042                  	lea	sub9_y_pos+next_subspr(a1),a2
0000EFB0 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EFB4                            
0000EFB4                            @set_piece_y:
0000EFB4 7000                       	moveq	#0,d0
0000EFB6 101B                       	move.b	(a3)+,d0
0000EFB8 5240                       	addq.w	#1,d0
0000EFBA C0C5                       	mulu.w	d5,d0
0000EFBC C0C4                       	mulu.w	d4,d0
0000EFBE 4840                       	swap	d0
0000EFC0 D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000EFC4 3280                       	move.w	d0,(a1)
0000EFC6 5C49                       	addq.w	#6,a1
0000EFC8 B2CA                       	cmpa.w	a2,a1
0000EFCA 6600                       	bne.s	@next_piece
0000EFCC 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EFD0 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EFD4                            @next_piece:
0000EFD4 51CA FFDE                  	dbf	d2,@set_piece_y
0000EFD8                            
0000EFD8 7000                       	moveq	#0,d0
0000EFDA 1028 0028                  	move.b	subtype(a0),d0
0000EFDE 7600                       	moveq	#0,d3
0000EFE0 1628 003F                  	move.b	objoff_3F(a0),d3
0000EFE4 5203                       	addq.b	#1,d3
0000EFE6 9600                       	sub.b	d0,d3
0000EFE8 4403                       	neg.b	d3
0000EFEA 6B00                       	bmi.s	@rts
0000EFEC 3403                       	move.w	d3,d2
0000EFEE E94B                       	lsl.w	#4,d3
0000EFF0 47F4 3000                  	lea	(a4,d3.w),a3
0000EFF4 D6C2                       	adda.w	d2,a3
0000EFF6 5342                       	subq.w	#1,d2
0000EFF8 6500                       	bcs.s	@rts
0000EFFA                            
0000EFFA                            @set_piece_y2:
0000EFFA 7000                       	moveq	#0,d0
0000EFFC 1023                       	move.b	-(a3),d0
0000EFFE 5240                       	addq.w	#1,d0
0000F000 C0C5                       	mulu.w	d5,d0
0000F002 C0C4                       	mulu.w	d4,d0
0000F004 4840                       	swap	d0
0000F006 D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000F00A 3280                       	move.w	d0,(a1)
0000F00C 5C49                       	addq.w	#6,a1
0000F00E B2CA                       	cmpa.w	a2,a1
0000F010 6600                       	bne.s	@next_piece2
0000F012 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000F016 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000F01A                            @next_piece2:
0000F01A 51CA FFDE                  	dbf	d2,@set_piece_y2
0000F01E                            @rts:
0000F01E 4E75                       	rts
0000F020                            ; ===========================================================================
0000F020                            ; seems to be bridge piece vertical position offset data
0000F020                            Obj11_DepressionOffsets: ; byte_FA98:
0000F020 0204 0608 0806 0402 0000+  	dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000F030 0204 0608 0A08 0604 0200+  	dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0; 32
0000F040 0204 0608 0A0A 0806 0402+  	dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0; 48
0000F050 0204 0608 0A0C 0A08 0604+  	dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0; 64
0000F060 0204 0608 0A0C 0C0A 0806+  	dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0; 80
0000F070 0204 0608 0A0C 0E0C 0A08+  	dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0; 96
0000F080 0204 0608 0A0C 0E0E 0C0A+  	dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0; 112
0000F090 0204 0608 0A0C 0E10 0E0C+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0; 128
0000F0A0 0204 0608 0A0C 0E10 100E+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2; 144
0000F0B0                            
0000F0B0                            ; something else important for bridge depression to work (phase? bridge size adjustment?)
0000F0B0                            byte_FB28:
0000F0B0 FF00 0000 0000 0000 0000+  	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000F0C0 B5FF 0000 0000 0000 0000+  	dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 32
0000F0D0 7EDB FF00 0000 0000 0000+  	dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 48
0000F0E0 61B5 ECFF 0000 0000 0000+  	dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 64
0000F0F0 4A93 CDF3 FF00 0000 0000+  	dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
0000F100 3E7E B0DB F6FF 0000 0000+  	dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 96
0000F110 386D 9DC5 E4F8 FF00 0000+  	dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0; 112
0000F120 3161 8EB5 D4EC FBFF 0000+  	dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0; 128
0000F130 2B56 7EA2 C1DB EEFB FF00+  	dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0; 144
0000F140 254A 7393 B0CD E1F3 FCFF+  	dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0; 160
0000F150 1F44 6788 A7BD D4E7 F4FD+  	dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0; 176
0000F160 1F3E 5C7E 98B0 C9DB EAF6+  	dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0; 192
0000F170 1938 5673 8EA7 BDD1 E1EE+  	dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0; 208
0000F180 1938 506D 839D B0C5 D8E4+  	dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0; 224
0000F190 1931 4A67 7E93 A7BD CDDB+  	dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0; 240
0000F1A0 1931 4A61 788E A2B5 C5D4+  	dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF; 256
0000F1B0                            
0000F1B0                            ; ===========================================================================
0000F1B0                            PlatformObj_Bridge:
0000F1B0 4A69 0012                  		tst.w	y_vel(a1)
0000F1B4 6B00 0000                  		bmi.w	locret_751E
0000F1B8 3029 0008                  		move.w	x_pos(a1),d0
0000F1BC 9068 0008                  		sub.w	x_pos(a0),d0
0000F1C0 D041                       		add.w	d1,d0
0000F1C2 6B00 0000                  		bmi.w	locret_751E
0000F1C6 B042                       		cmp.w	d2,d0
0000F1C8 6400 0000                  		bcc.w	locret_751E
0000F1CC                            		
0000F1CC 6000 0000                  		bra.w	Platform2
0000F1D0                            ; End of function Bri_Solid
0000F1D0                            
0000F1D0                            ; ===========================================================================
0000F1D0                            
0000F1D0                            ; ---------------------------------------------------------------------------
0000F1D0                            ; Platform subroutine
0000F1D0                            ; ---------------------------------------------------------------------------
0000F1D0                            
0000F1D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1D0                            
0000F1D0                            
0000F1D0                            PlatformObject:
0000F1D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1D4 4A69 0012                  		tst.w	y_vel(a1)
0000F1D8 6B00 0000                  		bmi.w	locret_751E
0000F1DC 3029 0008                  		move.w	8(a1),d0
0000F1E0 9068 0008                  		sub.w	8(a0),d0
0000F1E4 D041                       		add.w	d1,d0
0000F1E6 6B00 0000                  		bmi.w	locret_751E
0000F1EA D241                       		add.w	d1,d1
0000F1EC B041                       		cmp.w	d1,d0
0000F1EE 6400 0000                  		bcc.w	locret_751E
0000F1F2                            
0000F1F2                            Platform2:
0000F1F2 3028 000C                  		move.w	$C(a0),d0
0000F1F6 5140                       		subq.w	#8,d0
0000F1F8                            
0000F1F8                            Platform3:
0000F1F8 3429 000C                  		move.w	$C(a1),d2
0000F1FC 1229 0016                  		move.b	$16(a1),d1
0000F200 4881                       		ext.w	d1
0000F202 D242                       		add.w	d2,d1
0000F204 5841                       		addq.w	#4,d1
0000F206 9041                       		sub.w	d1,d0
0000F208 6200 0000                  		bhi.w	locret_751E
0000F20C 0C40 FFF0                  		cmpi.w	#-$10,d0
0000F210 6500 0000                  		bcs.w	locret_751E
0000F214 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F218 6B00 0000                  		bmi.w	locret_751E
0000F21C 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F222 6400 0000                  		bcc.w	locret_751E
0000F226 D440                       		add.w	d0,d2
0000F228 5642                       		addq.w	#3,d2
0000F22A 3342 000C                  		move.w	d2,$C(a1)
0000F22E 5428 0024                  		addq.b	#2,routine(a0)
0000F232                            
0000F232                            loc_74AE:
0000F232 0829 0003 0022             		btst	#3,status(a1)
0000F238 6700                       		beq.s	loc_74DC
0000F23A 7000                       		moveq	#0,d0
0000F23C 1029 003D                  		move.b	$3D(a1),d0
0000F240 ED48                       		lsl.w	#6,d0
0000F242 0680 00FF D000             		addi.l	#$FFD000,d0
0000F248 2440                       		movea.l	d0,a2
0000F24A 08AA 0003 0022             		bclr	#3,status(a2)
0000F250 422A 0025                  		clr.b	routine_secondary(a2)
0000F254 0C2A 0004 0024             		cmpi.b	#4,routine(a2)
0000F25A 6600                       		bne.s	loc_74DC
0000F25C 552A 0024                  		subq.b	#2,routine(a2)
0000F260                            
0000F260                            loc_74DC:
0000F260 3008                       		move.w	a0,d0
0000F262 0440 D000                  		subi.w	#-$3000,d0
0000F266 EC48                       		lsr.w	#6,d0
0000F268 0240 007F                  		andi.w	#$7F,d0
0000F26C 1340 003D                  		move.b	d0,$3D(a1)
0000F270 137C 0000 0026             		move.b	#0,$26(a1)
0000F276 337C 0000 0012             		move.w	#0,y_vel(a1)
0000F27C 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
0000F282 0829 0001 0022             		btst	#1,status(a1)
0000F288 6700                       		beq.s	loc_7512
0000F28A 2F08                       		move.l	a0,-(sp)
0000F28C 2049                       		movea.l	a1,a0
0000F28E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000F294 205F                       		movea.l	(sp)+,a0
0000F296                            
0000F296                            loc_7512:
0000F296 08E9 0003 0022             		bset	#3,status(a1)
0000F29C 08A9 0001 0022             		bclr	#1,status(a1)
0000F2A2 0DE8 0022                  		bset	d6,status(a0)
0000F2A6                            
0000F2A6                            locret_751E:
0000F2A6 4E75                       		rts	
0000F2A8                            ; End of function PlatformObject
0000F2A8                            
0000F2A8                            ; ---------------------------------------------------------------------------
0000F2A8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000F2A8                            ; ---------------------------------------------------------------------------
0000F2A8                            
0000F2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2A8                            
0000F2A8                            
0000F2A8                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000F2A8 43F8 D000                  		lea	($FFFFD000).w,a1
0000F2AC 4A69 0012                  		tst.w	y_vel(a1)
0000F2B0 6B00 FFF4                  		bmi.w	locret_751E
0000F2B4 3029 0008                  		move.w	8(a1),d0
0000F2B8 9068 0008                  		sub.w	8(a0),d0
0000F2BC D041                       		add.w	d1,d0
0000F2BE 6BE6                       		bmi.s	locret_751E
0000F2C0 D241                       		add.w	d1,d1
0000F2C2 B041                       		cmp.w	d1,d0
0000F2C4 64E0                       		bcc.s	locret_751E
0000F2C6 0828 0000 0001             		btst	#0,1(a0)
0000F2CC 6700                       		beq.s	loc_754A
0000F2CE 4640                       		not.w	d0
0000F2D0 D041                       		add.w	d1,d0
0000F2D2                            
0000F2D2                            loc_754A:
0000F2D2 E248                       		lsr.w	#1,d0
0000F2D4 7600                       		moveq	#0,d3
0000F2D6 1632 0000                  		move.b	(a2,d0.w),d3
0000F2DA 3028 000C                  		move.w	$C(a0),d0
0000F2DE 9043                       		sub.w	d3,d0
0000F2E0 6000 FF16                  		bra.w	Platform3
0000F2E4                            ; End of function SlopeObject
0000F2E4                            
0000F2E4                            
0000F2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2E4                            
0000F2E4                            
0000F2E4                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000F2E4 43F8 D000                  		lea	($FFFFD000).w,a1
0000F2E8 4A69 0012                  		tst.w	y_vel(a1)
0000F2EC 6B00 FFB8                  		bmi.w	locret_751E
0000F2F0 3029 0008                  		move.w	8(a1),d0
0000F2F4 9068 0008                  		sub.w	8(a0),d0
0000F2F8 D041                       		add.w	d1,d0
0000F2FA 6B00 FFAA                  		bmi.w	locret_751E
0000F2FE D241                       		add.w	d1,d1
0000F300 B041                       		cmp.w	d1,d0
0000F302 6400 FFA2                  		bcc.w	locret_751E
0000F306 3028 000C                  		move.w	$C(a0),d0
0000F30A 9043                       		sub.w	d3,d0
0000F30C 6000 FEEA                  		bra.w	Platform3
0000F310                            ; End of function Obj15_Solid
0000F310                            
0000F310                            ; ---------------------------------------------------------------------------
0000F310                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000F310                            ; ---------------------------------------------------------------------------
0000F310                            
0000F310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F310                            
0000F310                            
0000F310                            ExitPlatform:
0000F310 3401                       		move.w	d1,d2
0000F312                            
0000F312                            ExitPlatform2:
0000F312 D442                       		add.w	d2,d2
0000F314 43F8 D000                  		lea	($FFFFD000).w,a1
0000F318 0829 0001 0022             		btst	#1,status(a1)
0000F31E 6600                       		bne.s	loc_75E0
0000F320 3029 0008                  		move.w	8(a1),d0
0000F324 9068 0008                  		sub.w	8(a0),d0
0000F328 D041                       		add.w	d1,d0
0000F32A 6B00                       		bmi.s	loc_75E0
0000F32C B042                       		cmp.w	d2,d0
0000F32E 6500                       		bcs.s	locret_75F2
0000F330                            
0000F330                            loc_75E0:
0000F330 08A9 0003 0022             		bclr	#3,status(a1)
0000F336                            ;		bset	#1,status(a1)		
0000F336 117C 0002 0024             		move.b	#2,routine(a0)
0000F33C 0DA8 0022                  		bclr	d6,status(a0)
0000F340                            
0000F340                            locret_75F2:
0000F340 4E75                       		rts	
0000F342                            ; End of function ExitPlatform
0000F342                            
0000F342                            ; ---------------------------------------------------------------------------
0000F342                            ; Sprite mappings - GHZ	bridge
0000F342                            ; ---------------------------------------------------------------------------
0000F342                            Map_obj11:
0000F342                            	include "_maps\obj11.asm"
0000F342                            ; ---------------------------------------------------------------------------
0000F342                            ; Sprite mappings - GHZ	bridge
0000F342                            ; ---------------------------------------------------------------------------
0000F342 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000F346 0000                       		dc.w byte_794B-Map_obj11
0000F348 01                         byte_793A:	dc.b 1
0000F349 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F34E 02                         byte_7940:	dc.b 2
0000F34F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000F354 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000F359 01                         byte_794B:	dc.b 1
0000F35A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000F360 00                         		even
0000F360 00                         		even
0000F360                            
0000F360                            ; ===========================================================================
0000F360                            ; ---------------------------------------------------------------------------
0000F360                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000F360                            ;	    - spiked ball on a chain (SBZ)
0000F360                            ; ---------------------------------------------------------------------------
0000F360                            
0000F360                            Obj15:			; XREF: Obj_Index
0000F360 7000                       		moveq	#0,d0
0000F362 1028 0024                  		move.b	routine(a0),d0
0000F366 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000F36A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000F36E                            ; ===========================================================================
0000F36E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000F372 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000F376 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000F37A 0000                       		dc.w Obj15_Action-Obj15_Index
0000F37C                            
0000F37C =0000003A                  origX:		= $3A		; original x-axis position
0000F37C =00000038                  origY:		= $38		; original y-axis position
0000F37C                            ; ===========================================================================
0000F37C                            
0000F37C                            Obj15_Main:	; Routine 0
0000F37C 5428 0024                  		addq.b	#2,routine(a0)
0000F380 217C 0000 0000 0004        		move.l	#Map_obj15,mappings(a0) ; GHZ and MZ specific code
0000F388 317C 4380 0002             		move.w	#$4380,art_tile(a0)
0000F38E 117C 0004 0001             		move.b	#4,render_flags(a0)
0000F394 317C 0180 0018             		move.w	#$180,priority(a0)
0000F39A 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F3A0 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F3A6 3168 000C 0038              		move.w	y_pos(a0),origY(a0)
0000F3AC 3168 0008 003A              		move.w	x_pos(a0),origX(a0)
0000F3B2 0C38 0003 FE10              		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F3B8 6600                        		bne.s	@notSLZ
0000F3BA 3168 000C 0038                             move.w	y_pos(a0),origY(a0)      ; +++ zone agnostic objects
0000F3C0 3168 0008 003A             		move.w	x_pos(a0),origX(a0)
0000F3C6                             
0000F3C6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
0000F3CC 6600                       		bne.s	@notLZ
0000F3CE 317C 4310 0002             		move.w	#$4310,art_tile(a0)
0000F3D4 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0)
0000F3DC 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F3E2                             
0000F3E2                            	@notLZ:
0000F3E2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F3E8 6600                       		bne.s	@notSLZ
0000F3EA                            
0000F3EA 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0) ; SLZ specific code
0000F3F2 317C 43DC 0002             		move.w	#$43DC,art_tile(a0)
0000F3F8 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F3FE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F404 117C 0099 0020             		move.b	#$99,$20(a0)
0000F40A                            
0000F40A                            	@notSLZ:
0000F40A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000F410 6600                       		bne.s	@length
0000F412                            
0000F412 217C 0000 0000 0004        		move.l	#Map_obj15b,mappings(a0) ; SBZ specific code
0000F41A 317C 0391 0002             		move.w	#$391,art_tile(a0)
0000F420 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F426 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F42C 117C 0086 0020             		move.b	#$86,$20(a0)
0000F432 117C 000C 0024             		move.b	#$C,routine(a0) ; goto Obj15_Action next
0000F438                            
0000F438                            @length:
0000F438 1810                       		move.b	0(a0),d4         ; copy object number do d4 ($15)
0000F43A 7200                       		moveq	#0,d1
0000F43C 45E8 0028                  		lea	subtype(a0),a2 ; subtype byte is equal to chain length
0000F440 1212                       		move.b	(a2),d1		 ; copy subtype to d1
0000F442 3F01                       		move.w	d1,-(sp)         ; put subtype on stack
0000F444 0241 000F                  		andi.w	#$F,d1           ; make sure chain length is 15 or less
0000F448 14FC 0000                  		move.b	#0,(a2)+         ; set subtype to 0 and increment a2 into scratch ram
0000F44C 3601                       		move.w	d1,d3            ; copy chain length
0000F44E E94B                       		lsl.w	#4,d3            ; multiply length by 16(diameter of chain piece in pixels)
0000F450 5003                       		addq.b	#8,d3            ; raise platform position by 8 pixels
0000F452 1143 003C                  		move.b	d3,$3C(a0)       ; copy result into scratch ram
0000F456 5103                       		subq.b	#8,d3            ; reset position
0000F458 4A28 001A                  		tst.b	obFrame(a0)
0000F45C 6700                       		beq.s	@makechain       ; if frame is 0 (the platform), then create chain
0000F45E 5003                       		addq.b	#8,d3            ; add 8
0000F460 5341                       		subq.w	#1,d1            ; sub 1 from chain length to give correct loop amount
0000F462                            
0000F462                            @makechain:
0000F462 6100 0000                  		bsr.w	SingleObjLoad
0000F466 6600                       		bne.s	@fail
0000F468 5228 0028                  		addq.b	#1,subtype(a0) ; subtype is number of pieces created
0000F46C 3A09                       		move.w	a1,d5            ; set d5 to the ram address of the free object
0000F46E 0445 D000                  		subi.w	#$D000,d5
0000F472 EC4D                       		lsr.w	#6,d5            ; divide by $40
0000F474 0245 007F                  		andi.w	#$7F,d5
0000F478 14C5                       		move.b	d5,(a2)+         ; put new chain link's object slot into a list in main object's ram
0000F47A 137C 000A 0024             		move.b	#$A,routine(a1) ; new link to goto Obj15_Display next
0000F480 1284                       		move.b	d4,0(a1)	 ; load link object
0000F482 2368 0004 0004             		move.l	mappings(a0),mappings(a1)
0000F488 3368 0002 0002             		move.w	art_tile(a0),art_tile(a1)
0000F48E 08A9 0006 0002             		bclr	#6,art_tile(a1)
0000F494 137C 0004 0001             		move.b	#4,render_flags(a1)
0000F49A 337C 0200 0018             		move.w	#$200,priority(a1)
0000F4A0 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F4A6 137C 0001 001A             		move.b	#1,obFrame(a1)     ; set frame to link
0000F4AC 1343 003C                  		move.b	d3,$3C(a1)         ; set link's distance from platform
0000F4B0 0403 0010                  		subi.b	#$10,d3            ; get distance of next link
0000F4B4 6400                       		bcc.s	@notanchor         ; if not less than 0, leave graphics as a chain link
0000F4B6 137C 0002 001A             		move.b	#2,obFrame(a1)
0000F4BC 337C 0180 0018             		move.w	#$180,priority(a1)
0000F4C2 08E9 0006 0002             		bset	#6,art_tile(a1)
0000F4C8 0C38 0001 FE10                     cmpi.b	#id_LZ,(v_zone).w      ; +++ zone agnostic objects
0000F4CE 6700                       		beq.s	@notanchor             ;
0000F4D0 08E9 0006 0002             		bset	#6,art_tile(a1)           ;
0000F4D6                            	@notanchor:
0000F4D6 51C9 FF8A                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000F4DA                            
0000F4DA                            	@fail:
0000F4DA 3A08                       		move.w	a0,d5
0000F4DC 0445 D000                  		subi.w	#$D000,d5
0000F4E0 EC4D                       		lsr.w	#6,d5
0000F4E2 0245 007F                  		andi.w	#$7F,d5
0000F4E6 14C5                       		move.b	d5,(a2)+
0000F4E8 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000F4EE 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000F4F4 321F                       		move.w	(sp)+,d1
0000F4F6 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000F4FA 6700                       		beq.s	@not8X	; if not, branch
0000F4FC 217C 0000 0000 0004        		move.l	#Map_obj48,mappings(a0) ; use GHZ ball mappings
0000F504 317C 43AA 0002             		move.w	#$43AA,art_tile(a0)
0000F50A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000F510 317C 0100 0018             		move.w	#$100,priority(a0)
0000F516 117C 0081 0020             		move.b	#$81,$20(a0) ; make object hurt when touched
0000F51C                            
0000F51C                            	@not8X:
0000F51C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000F522 6700                       		beq.s	Obj15_Action	; if yes, branch
0000F524                            
0000F524                            Obj15_SetSolid:	; Routine 2
0000F524 7200                       		moveq	#0,d1
0000F526 1228 0023                  		move.b	width_pixels(a0),d1
0000F52A 7600                       		moveq	#0,d3
0000F52C 1628 0023                  		move.b	width_pixels(a0),d3
0000F530 6100 FDB2                  		bsr.w	Obj15_Solid
0000F534                            
0000F534                            Obj15_Action:	; Routine $C
0000F534 6100 0000                  		bsr.w	Obj15_Move
0000F538 6100 0000                  		bsr.w	DisplaySprite
0000F53C 6000 0000                  		bra.w	Obj15_ChkDel
0000F540                            ; ===========================================================================
0000F540                            
0000F540                            Obj15_Action2:	; Routine 4
0000F540 7200                       		moveq	#0,d1
0000F542 1228 0023                  		move.b	width_pixels(a0),d1
0000F546 6100 FDC8                  		bsr.w	ExitPlatform
0000F54A 3F28 0008                  		move.w	x_pos(a0),-(sp)
0000F54E 6100 0000                  		bsr.w	Obj15_Move
0000F552 341F                       		move.w	(sp)+,d2
0000F554 7600                       		moveq	#0,d3
0000F556 1628 0023                  		move.b	width_pixels(a0),d3
0000F55A 5203                       		addq.b	#1,d3
0000F55C 6100 0000                  		bsr.w	MvSonicOnPtfm
0000F560 6100 0000                  		bsr.w	DisplaySprite
0000F564 6000 0000                  		bra.w	Obj15_ChkDel
0000F568                            
0000F568 4E75                       		rts
0000F56A                            
0000F56A                            
0000F56A                            ; ===========================================================================
0000F56A                            
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            ; Subroutine to	change Sonic's position with a platform
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            
0000F56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F56A                            
0000F56A                            
0000F56A                            MvSonicOnPtfm:
0000F56A 43F8 D000                  		lea	($FFFFD000).w,a1
0000F56E 3028 000C                  		move.w	$C(a0),d0
0000F572 9043                       		sub.w	d3,d0
0000F574 6000                       		bra.s	MvSonic2
0000F576                            ; End of function MvSonicOnPtfm
0000F576                            
0000F576                            
0000F576                            ; ---------------------------------------------------------------------------
0000F576                            ; Subroutine to	change Sonic's position with a platform
0000F576                            ; ---------------------------------------------------------------------------
0000F576                            
0000F576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F576                            
0000F576                            
0000F576                            MvSonicOnPtfm2:
0000F576 43F8 D000                  		lea	($FFFFD000).w,a1
0000F57A 3028 000C                  		move.w	$C(a0),d0
0000F57E 0440 0009                  		subi.w	#9,d0
0000F582                            
0000F582                            MvSonic2:
0000F582 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F586 6B00                       		bmi.s	locret_7B62
0000F588 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F58E 6400                       		bcc.s	locret_7B62
0000F590 4A78 FE08                  		tst.w	($FFFFFE08).w
0000F594 6600                       		bne.s	locret_7B62
0000F596 7200                       		moveq	#0,d1
0000F598 1229 0016                  		move.b	$16(a1),d1
0000F59C 9041                       		sub.w	d1,d0
0000F59E 3340 000C                  		move.w	d0,$C(a1)
0000F5A2 9468 0008                  		sub.w	8(a0),d2
0000F5A6 9569 0008                  		sub.w	d2,8(a1)
0000F5AA 0829 0000 002B             		btst	#0,status_secondary(a1)     ; does Sonic have a shield?
0000F5B0 6700                       		beq.s	locret_7B62       ; if not, branch
0000F5B2 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
0000F5B6 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
0000F5BA                            locret_7B62:
0000F5BA 4E75                       		rts	
0000F5BC                            ; End of function MvSonicOnPtfm2
0000F5BC                            
0000F5BC                            
0000F5BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5BC                            
0000F5BC                            
0000F5BC                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000F5BC 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000F5C0 323C 0080                  		move.w	#$80,d1
0000F5C4 0828 0000 0022             		btst	#0,$22(a0)
0000F5CA 6700                       		beq.s	loc_7B78
0000F5CC 4440                       		neg.w	d0
0000F5CE D041                       		add.w	d1,d0
0000F5D0                            
0000F5D0                            loc_7B78:
0000F5D0 6000                       		bra.s	Obj15_Move2
0000F5D2                            ; End of function Obj15_Move
0000F5D2                            
0000F5D2                            
0000F5D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F5D2                            
0000F5D2                            
0000F5D2                            Obj48_Move:				; XREF: Obj48_Display2
0000F5D2 4A28 003D                  		tst.b	$3D(a0)
0000F5D6 6600                       		bne.s	loc_7B9C
0000F5D8 3028 003E                  		move.w	$3E(a0),d0
0000F5DC 5040                       		addq.w	#8,d0
0000F5DE 3140 003E                  		move.w	d0,$3E(a0)
0000F5E2 D168 0026                  		add.w	d0,$26(a0)
0000F5E6 0C40 0200                  		cmpi.w	#$200,d0
0000F5EA 6600                       		bne.s	loc_7BB6
0000F5EC 117C 0001 003D             		move.b	#1,$3D(a0)
0000F5F2 6000                       		bra.s	loc_7BB6
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            loc_7B9C:
0000F5F4 3028 003E                  		move.w	$3E(a0),d0
0000F5F8 5140                       		subq.w	#8,d0
0000F5FA 3140 003E                  		move.w	d0,$3E(a0)
0000F5FE D168 0026                  		add.w	d0,$26(a0)
0000F602 0C40 FE00                  		cmpi.w	#-$200,d0
0000F606 6600                       		bne.s	loc_7BB6
0000F608 117C 0000 003D             		move.b	#0,$3D(a0)
0000F60E                            
0000F60E                            loc_7BB6:
0000F60E 1028 0026                  		move.b	$26(a0),d0
0000F612                            ; End of function Obj48_Move
0000F612                            
0000F612                            
0000F612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F612                            
0000F612                            
0000F612                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000F612 6100 991C                  		bsr.w	CalcSine
0000F616 3428 0038                  		move.w	$38(a0),d2
0000F61A 3628 003A                  		move.w	$3A(a0),d3
0000F61E 45E8 0028                  		lea	$28(a0),a2
0000F622 7C00                       		moveq	#0,d6
0000F624 1C1A                       		move.b	(a2)+,d6
0000F626                            
0000F626                            loc_7BCE:
0000F626 7800                       		moveq	#0,d4
0000F628 181A                       		move.b	(a2)+,d4
0000F62A ED4C                       		lsl.w	#6,d4
0000F62C 0684 00FF D000             		addi.l	#$FFD000,d4
0000F632 2244                       		movea.l	d4,a1
0000F634 7800                       		moveq	#0,d4
0000F636 1829 003C                  		move.b	$3C(a1),d4
0000F63A 2A04                       		move.l	d4,d5
0000F63C C9C0                       		muls.w	d0,d4
0000F63E E084                       		asr.l	#8,d4
0000F640 CBC1                       		muls.w	d1,d5
0000F642 E085                       		asr.l	#8,d5
0000F644 D842                       		add.w	d2,d4
0000F646 DA43                       		add.w	d3,d5
0000F648 3344 000C                  		move.w	d4,$C(a1)
0000F64C 3345 0008                  		move.w	d5,8(a1)
0000F650 51CE FFD4                  		dbf	d6,loc_7BCE
0000F654 4E75                       		rts	
0000F656                            ; End of function Obj15_Move2
0000F656                            
0000F656                            ; ===========================================================================
0000F656                            
0000F656                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000F656 3028 003A                  		move.w	$3A(a0),d0
0000F65A 0240 FF80                  		andi.w	#$FF80,d0
0000F65E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F662 0441 0080                  		subi.w	#$80,d1
0000F666 0241 FF80                  		andi.w	#$FF80,d1
0000F66A 9041                       		sub.w	d1,d0
0000F66C 0C40 0280                  		cmpi.w	#$280,d0
0000F670 6200 0000                  		bhi.w	Obj15_DelAll
0000F674 4E75                       		rts	
0000F676                            ; ===========================================================================
0000F676                            
0000F676                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000F676 7400                       		moveq	#0,d2
0000F678 45E8 0028                  		lea	$28(a0),a2
0000F67C 141A                       		move.b	(a2)+,d2
0000F67E                            
0000F67E                            Obj15_DelLoop:
0000F67E 7000                       		moveq	#0,d0
0000F680 101A                       		move.b	(a2)+,d0
0000F682 ED48                       		lsl.w	#6,d0
0000F684 0680 00FF D000             		addi.l	#$FFD000,d0
0000F68A 2240                       		movea.l	d0,a1
0000F68C 6100 0000                  		bsr.w	DeleteObject2
0000F690 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000F694 4E75                       		rts	
0000F696                            ; ===========================================================================
0000F696                            
0000F696                            Obj15_Delete:				; XREF: Obj15_Index
0000F696 7000                       		moveq	#0,d0
0000F698 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F69C 3440                       	    movea.w	d0,a2				; load address into a2
0000F69E 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F6A2 6100 0000                  		bsr.w	DeleteObject
0000F6A6 4E75                       		rts	
0000F6A8                            ; ===========================================================================
0000F6A8                            
0000F6A8                            Obj15_Display:				; XREF: Obj15_Index
0000F6A8 6000 0000                  		bra.w	DisplaySprite
0000F6AC                            ; ===========================================================================
0000F6AC                            ; ---------------------------------------------------------------------------
0000F6AC                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F6AC                            ; ---------------------------------------------------------------------------
0000F6AC                            Map_obj15:
0000F6AC                            	include "_maps\obj15ghz.asm"
0000F6AC                            ; ---------------------------------------------------------------------------
0000F6AC                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F6AC                            ; ---------------------------------------------------------------------------
0000F6AC 0000                       		dc.w byte_7C4E-Map_obj15
0000F6AE 0000                       		dc.w byte_7C59-Map_obj15
0000F6B0 0000                       		dc.w byte_7C5F-Map_obj15
0000F6B2 02                         byte_7C4E:	dc.b 2
0000F6B3 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000F6B8 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000F6BD 01                         byte_7C59:	dc.b 1
0000F6BE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F6C3 01                         byte_7C5F:	dc.b 1
0000F6C4 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000F6CA 00                         		even
0000F6CA 00                         		even
0000F6CA                            
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA                            ; Sprite mappings - SLZ	swinging platforms
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA                            Map_obj15a:
0000F6CA                            	include "_maps\obj15slz.asm"
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA                            ; Sprite mappings - SLZ	swinging platforms
0000F6CA                            ; ---------------------------------------------------------------------------
0000F6CA 0000                       		dc.w byte_7C6C-Map_obj15a
0000F6CC 0000                       		dc.w byte_7C95-Map_obj15a
0000F6CE 0000                       		dc.w byte_7C9B-Map_obj15a
0000F6D0 08                         byte_7C6C:	dc.b 8
0000F6D1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000F6D6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000F6DB F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000F6E0 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000F6E5 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000F6EA 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000F6EF 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000F6F4 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000F6F9 01                         byte_7C95:	dc.b 1
0000F6FA F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000F6FF 01                         byte_7C9B:	dc.b 1
0000F700 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000F706 00                         		even
0000F706 00                         		even
0000F706                            
0000F706                            ; ===========================================================================
0000F706                            ; ---------------------------------------------------------------------------
0000F706                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000F706                            ; ---------------------------------------------------------------------------
0000F706                            
0000F706                            Obj17:					; XREF: Obj_Index
0000F706 7000                       		moveq	#0,d0
0000F708 1028 0024                  		move.b	$24(a0),d0
0000F70C 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000F710 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000F714                            ; ===========================================================================
0000F714 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000F716 0000                       		dc.w Obj17_Action-Obj17_Index
0000F718 0000                       		dc.w Obj17_Action-Obj17_Index
0000F71A 0000                       		dc.w Obj17_Delete-Obj17_Index
0000F71C 0000                       		dc.w Obj17_Display-Obj17_Index
0000F71E                            ; ===========================================================================
0000F71E                            
0000F71E                            Obj17_Main:				; XREF: Obj17_Index
0000F71E 5428 0024                  		addq.b	#2,$24(a0)
0000F722 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000F72A 317C 4398 0002             		move.w	#$4398,2(a0)
0000F730 117C 0007 0022             		move.b	#7,$22(a0)
0000F736 117C 0004 0001             		move.b	#4,1(a0)
0000F73C 317C 0180 0018             		move.w	#$180,priority(a0)
0000F742 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F748 3428 000C                  		move.w	$C(a0),d2
0000F74C 3628 0008                  		move.w	8(a0),d3
0000F750 1810                       		move.b	0(a0),d4
0000F752 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F756 7200                       		moveq	#0,d1
0000F758 1212                       		move.b	(a2),d1		; move a2 to d1
0000F75A 14FC 0000                  		move.b	#0,(a2)+
0000F75E 3001                       		move.w	d1,d0
0000F760 E248                       		lsr.w	#1,d0
0000F762 E948                       		lsl.w	#4,d0
0000F764 9640                       		sub.w	d0,d3
0000F766 5501                       		subq.b	#2,d1
0000F768 6500                       		bcs.s	Obj17_Action
0000F76A 7C00                       		moveq	#0,d6
0000F76C                            
0000F76C                            Obj17_MakeHelix:
0000F76C 6100 0000                  		bsr.w	SingleObjLoad
0000F770 6600                       		bne.s	Obj17_Action
0000F772 5228 0028                  		addq.b	#1,$28(a0)
0000F776 3A09                       		move.w	a1,d5
0000F778 0445 D000                  		subi.w	#$D000,d5
0000F77C EC4D                       		lsr.w	#6,d5
0000F77E 0245 007F                  		andi.w	#$7F,d5
0000F782 14C5                       		move.b	d5,(a2)+
0000F784 137C 0008 0024             		move.b	#8,$24(a1)
0000F78A 1284                       		move.b	d4,0(a1)
0000F78C 3342 000C                  		move.w	d2,$C(a1)
0000F790 3343 0008                  		move.w	d3,8(a1)
0000F794 2368 0004 0004             		move.l	4(a0),4(a1)
0000F79A 337C 4398 0002             		move.w	#$4398,2(a1)
0000F7A0 137C 0004 0001             		move.b	#4,1(a1)
0000F7A6 337C 0180 0018             		move.w	#$180,priority(a1)
0000F7AC 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F7B2 1346 003E                  		move.b	d6,$3E(a1)
0000F7B6 5206                       		addq.b	#1,d6
0000F7B8 0206 0007                  		andi.b	#7,d6
0000F7BC 0643 0010                  		addi.w	#$10,d3
0000F7C0 B668 0008                  		cmp.w	8(a0),d3
0000F7C4 6600                       		bne.s	loc_7D78
0000F7C6 1146 003E                  		move.b	d6,$3E(a0)
0000F7CA 5206                       		addq.b	#1,d6
0000F7CC 0206 0007                  		andi.b	#7,d6
0000F7D0 0643 0010                  		addi.w	#$10,d3
0000F7D4 5228 0028                  		addq.b	#1,$28(a0)
0000F7D8                            
0000F7D8                            loc_7D78:
0000F7D8 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000F7DC                            
0000F7DC                            Obj17_Action:				; XREF: Obj17_Index
0000F7DC 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000F7E0 6100 0000                  		bsr.w	DisplaySprite
0000F7E4 6000 0000                  		bra.w	Obj17_ChkDel
0000F7E8                            
0000F7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7E8                            
0000F7E8                            
0000F7E8                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000F7E8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000F7EC 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000F7F2 D028 003E                  		add.b	$3E(a0),d0
0000F7F6 0200 0007                  		andi.b	#7,d0
0000F7FA 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000F7FE 6600                       		bne.s	locret_7DA6
0000F800 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000F806                            
0000F806                            locret_7DA6:
0000F806 4E75                       		rts	
0000F808                            ; End of function Obj17_RotateSpikes
0000F808                            
0000F808                            ; ===========================================================================
0000F808                            
0000F808                            Obj17_ChkDel:				; XREF: Obj17_Action
0000F808 3028 0008                  		move.w	8(a0),d0
0000F80C 0240 FF80                  		andi.w	#$FF80,d0
0000F810 3238 F700                  		move.w	($FFFFF700).w,d1
0000F814 0441 0080                  		subi.w	#$80,d1
0000F818 0241 FF80                  		andi.w	#$FF80,d1
0000F81C 9041                       		sub.w	d1,d0
0000F81E 0C40 0280                  		cmpi.w	#$280,d0
0000F822 6200 0000                  		bhi.w	Obj17_DelAll
0000F826 4E75                       		rts	
0000F828                            ; ===========================================================================
0000F828                            
0000F828                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000F828 7400                       		moveq	#0,d2
0000F82A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F82E 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000F830 5502                       		subq.b	#2,d2
0000F832 6500                       		bcs.s	Obj17_Delete
0000F834                            
0000F834                            Obj17_DelLoop:
0000F834 7000                       		moveq	#0,d0
0000F836 101A                       		move.b	(a2)+,d0
0000F838 ED48                       		lsl.w	#6,d0
0000F83A 0680 00FF D000             		addi.l	#$FFD000,d0
0000F840 2240                       		movea.l	d0,a1
0000F842 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000F846 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000F84A                            
0000F84A                            Obj17_Delete:				; XREF: Obj17_Index
0000F84A 7000                       		moveq	#0,d0
0000F84C 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F850 3440                       	    movea.w	d0,a2				; load address into a2
0000F852 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F856 6100 0000                  		bsr.w	DeleteObject
0000F85A 4E75                       		rts	
0000F85C                            ; ===========================================================================
0000F85C                            
0000F85C                            Obj17_Display:				; XREF: Obj17_Index
0000F85C 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
0000F860 6000 0000                  		bra.w	DisplaySprite
0000F864                            ; ===========================================================================
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            Map_obj17:
0000F864                            	include "_maps\obj17.asm"
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F864                            ; ---------------------------------------------------------------------------
0000F864 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000F868 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000F86C 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000F870 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000F874 01                         byte_7E08:	dc.b 1
0000F875 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000F87A 01                         byte_7E0E:	dc.b 1
0000F87B F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000F880 01                         byte_7E14:	dc.b 1
0000F881 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000F886 01                         byte_7E1A:	dc.b 1
0000F887 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000F88C 01                         byte_7E20:	dc.b 1
0000F88D 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000F892 01                         byte_7E26:	dc.b 1
0000F893 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000F898 01                         byte_7E2C:	dc.b 1
0000F899 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000F89E                            		even
0000F89E                            		even
0000F89E                            
0000F89E                            ; ===========================================================================
0000F89E                            ; ---------------------------------------------------------------------------
0000F89E                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000F89E                            ; ---------------------------------------------------------------------------
0000F89E                            
0000F89E                            Obj18:					; XREF: Obj_Index
0000F89E 7000                       		moveq	#0,d0
0000F8A0 1028 0024                  		move.b	$24(a0),d0
0000F8A4 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000F8A8 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000F8AC                            ; ===========================================================================
0000F8AC 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000F8AE 0000                       		dc.w Obj18_Solid-Obj18_Index
0000F8B0 0000                       		dc.w Obj18_Action2-Obj18_Index
0000F8B2 0000                       		dc.w Obj18_Delete-Obj18_Index
0000F8B4 0000                       		dc.w Obj18_Action-Obj18_Index
0000F8B6                            ; ===========================================================================
0000F8B6                            
0000F8B6                            Obj18_Main:				; XREF: Obj18_Index
0000F8B6 5428 0024                  		addq.b	#2,$24(a0)
0000F8BA 317C 4000 0002             		move.w	#$4000,2(a0)
0000F8C0 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000F8C8 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F8CE 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000F8D4 6600                       		bne.s	Obj18_NotSYZ
0000F8D6 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000F8DE 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F8E4                            
0000F8E4                            Obj18_NotSYZ:
0000F8E4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F8EA 6600                       		bne.s	Obj18_NotSLZ
0000F8EC 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000F8F4 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F8FA 317C 4000 0002             		move.w	#$4000,2(a0)
0000F900 117C 0003 0028             		move.b	#3,$28(a0)
0000F906                            
0000F906                            Obj18_NotSLZ:
0000F906 117C 0004 0001             		move.b	#4,1(a0)
0000F90C 317C 0200 0018             		move.w	#$200,priority(a0)
0000F912 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000F918 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000F91E 3168 0008 0032             		move.w	8(a0),$32(a0)
0000F924 317C 0080 0026             		move.w	#$80,$26(a0)
0000F92A 7200                       		moveq	#0,d1
0000F92C 1028 0028                  		move.b	$28(a0),d0
0000F930 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000F934 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000F936 5201                       		addq.b	#1,d1		; use frame #1
0000F938 117C 0020 0023             		move.b	#$20,width_pixels(a0)	; set width
0000F93E                            
0000F93E                            Obj18_SetFrame:
0000F93E 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000F942                            
0000F942                            Obj18_Solid:				; XREF: Obj18_Index
0000F942 4A28 0038                  		tst.b	$38(a0)
0000F946 6700                       		beq.s	loc_7EE0
0000F948 5928 0038                  		subq.b	#4,$38(a0)
0000F94C                            
0000F94C                            loc_7EE0:
0000F94C 7200                       		moveq	#0,d1
0000F94E 1228 0023                  		move.b	width_pixels(a0),d1
0000F952 6100 F87C                  		bsr.w	PlatformObject
0000F956                            
0000F956                            Obj18_Action:				; XREF: Obj18_Index
0000F956 6100 0000                  		bsr.w	Obj18_Move
0000F95A 6100 0000                  		bsr.w	Obj18_Nudge
0000F95E 6100 0000                  		bsr.w	DisplaySprite
0000F962 6000 0000                  		bra.w	Obj18_ChkDel
0000F966                            ; ===========================================================================
0000F966                            
0000F966                            Obj18_Action2:				; XREF: Obj18_Index
0000F966 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000F96C 6700                       		beq.s	loc_7F06
0000F96E 5828 0038                  		addq.b	#4,$38(a0)
0000F972                            
0000F972                            loc_7F06:
0000F972 7200                       		moveq	#0,d1
0000F974 1228 0023                  		move.b	width_pixels(a0),d1
0000F978 6100 F996                  		bsr.w	ExitPlatform
0000F97C 3F28 0008                  		move.w	8(a0),-(sp)
0000F980 6100 0000                  		bsr.w	Obj18_Move
0000F984 6100 0000                  		bsr.w	Obj18_Nudge
0000F988 341F                       		move.w	(sp)+,d2
0000F98A 6100 FBEA                  		bsr.w	MvSonicOnPtfm2
0000F98E 6100 0000                  		bsr.w	DisplaySprite
0000F992 6000 0000                  		bra.w	Obj18_ChkDel
0000F996                            
0000F996 4E75                       		rts
0000F998                            
0000F998                            ; ---------------------------------------------------------------------------
0000F998                            ; Subroutine to	move platform slightly when you	stand on it
0000F998                            ; ---------------------------------------------------------------------------
0000F998                            
0000F998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F998                            
0000F998                            
0000F998                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000F998 1028 0038                  		move.b	$38(a0),d0
0000F99C 6100 9592                  		bsr.w	CalcSine
0000F9A0 323C 0400                  		move.w	#$400,d1
0000F9A4 C1C1                       		muls.w	d1,d0
0000F9A6 4840                       		swap	d0
0000F9A8 D068 002C                  		add.w	$2C(a0),d0
0000F9AC 3140 000C                  		move.w	d0,$C(a0)
0000F9B0 4E75                       		rts	
0000F9B2                            ; End of function Obj18_Nudge
0000F9B2                            
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            ; Subroutine to	move platforms
0000F9B2                            ; ---------------------------------------------------------------------------
0000F9B2                            
0000F9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9B2                            
0000F9B2                            
0000F9B2                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000F9B2 7000                       		moveq	#0,d0
0000F9B4 1028 0028                  		move.b	$28(a0),d0
0000F9B8 0240 000F                  		andi.w	#$F,d0
0000F9BC D040                       		add.w	d0,d0
0000F9BE 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000F9C2 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000F9C6                            ; End of function Obj18_Move
0000F9C6                            
0000F9C6                            ; ===========================================================================
0000F9C6 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000F9CA 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000F9CE 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000F9D2 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000F9D6 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000F9DA 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000F9DE 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000F9E0                            ; ===========================================================================
0000F9E0                            
0000F9E0                            Obj18_Type00:
0000F9E0 4E75                       		rts			; platform 00 doesn't move
0000F9E2                            ; ===========================================================================
0000F9E2                            
0000F9E2                            Obj18_Type05:
0000F9E2 3028 0032                  		move.w	$32(a0),d0
0000F9E6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F9EA 4401                       		neg.b	d1		; reverse platform-motion
0000F9EC 0601 0040                  		addi.b	#$40,d1
0000F9F0 6000                       		bra.s	Obj18_01_Move
0000F9F2                            ; ===========================================================================
0000F9F2                            
0000F9F2                            Obj18_Type01:
0000F9F2 3028 0032                  		move.w	$32(a0),d0
0000F9F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F9FA 0401 0040                  		subi.b	#$40,d1
0000F9FE                            
0000F9FE                            Obj18_01_Move:
0000F9FE 4881                       		ext.w	d1
0000FA00 D041                       		add.w	d1,d0
0000FA02 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000FA06 6000 0000                  		bra.w	Obj18_ChgMotion
0000FA0A                            ; ===========================================================================
0000FA0A                            
0000FA0A                            Obj18_Type0C:
0000FA0A 3028 0034                  		move.w	$34(a0),d0
0000FA0E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000FA12 4401                       		neg.b	d1		; reverse platform-motion
0000FA14 0601 0030                  		addi.b	#$30,d1
0000FA18 6000                       		bra.s	Obj18_02_Move
0000FA1A                            ; ===========================================================================
0000FA1A                            
0000FA1A                            Obj18_Type0B:
0000FA1A 3028 0034                  		move.w	$34(a0),d0
0000FA1E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000FA22 0401 0030                  		subi.b	#$30,d1
0000FA26 6000                       		bra.s	Obj18_02_Move
0000FA28                            ; ===========================================================================
0000FA28                            
0000FA28                            Obj18_Type06:
0000FA28 3028 0034                  		move.w	$34(a0),d0
0000FA2C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000FA30 4401                       		neg.b	d1		; reverse platform-motion
0000FA32 0601 0040                  		addi.b	#$40,d1
0000FA36 6000                       		bra.s	Obj18_02_Move
0000FA38                            ; ===========================================================================
0000FA38                            
0000FA38                            Obj18_Type02:
0000FA38 3028 0034                  		move.w	$34(a0),d0
0000FA3C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000FA40 0401 0040                  		subi.b	#$40,d1
0000FA44                            
0000FA44                            Obj18_02_Move:
0000FA44 4881                       		ext.w	d1
0000FA46 D041                       		add.w	d1,d0
0000FA48 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000FA4C 6000 0000                  		bra.w	Obj18_ChgMotion
0000FA50                            ; ===========================================================================
0000FA50                            
0000FA50                            Obj18_Type03:
0000FA50 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000FA54 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000FA56 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000FA5C 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000FA5E 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000FA64                            
0000FA64                            Obj18_03_NoMove:
0000FA64 4E75                       		rts	
0000FA66                            ; ===========================================================================
0000FA66                            
0000FA66                            Obj18_03_Wait:
0000FA66 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000FA6A 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000FA6C 317C 0020 003A             		move.w	#32,$3A(a0)
0000FA72 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000FA76 4E75                       		rts	
0000FA78                            ; ===========================================================================
0000FA78                            
0000FA78                            Obj18_Type04:
0000FA78 4A68 003A                  		tst.w	$3A(a0)
0000FA7C 6700                       		beq.s	loc_8048
0000FA7E 5368 003A                  		subq.w	#1,$3A(a0)
0000FA82 6600                       		bne.s	loc_8048
0000FA84 0828 0003 0022             		btst	#3,$22(a0)
0000FA8A 6700                       		beq.s	loc_8042
0000FA8C 08E9 0001 0022             		bset	#1,$22(a1)
0000FA92 08A9 0003 0022             		bclr	#3,$22(a1)
0000FA98 137C 0002 0024             		move.b	#2,$24(a1)
0000FA9E 08A8 0003 0022             		bclr	#3,$22(a0)
0000FAA4 4228 0025                  		clr.b	$25(a0)
0000FAA8 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000FAAE                            
0000FAAE                            loc_8042:
0000FAAE 117C 0008 0024             		move.b	#8,$24(a0)
0000FAB4                            
0000FAB4                            loc_8048:
0000FAB4 2628 002C                  		move.l	$2C(a0),d3
0000FAB8 3028 0012                  		move.w	$12(a0),d0
0000FABC 48C0                       		ext.l	d0
0000FABE E180                       		asl.l	#8,d0
0000FAC0 D680                       		add.l	d0,d3
0000FAC2 2143 002C                  		move.l	d3,$2C(a0)
0000FAC6 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FACC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000FAD0 0640 00E0                  		addi.w	#$E0,d0
0000FAD4 B068 002C                  		cmp.w	$2C(a0),d0
0000FAD8 6400                       		bcc.s	locret_8074
0000FADA 117C 0006 0024             		move.b	#6,$24(a0)
0000FAE0                            
0000FAE0                            locret_8074:
0000FAE0 4E75                       		rts	
0000FAE2                            ; ===========================================================================
0000FAE2                            
0000FAE2                            Obj18_Type07:
0000FAE2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000FAE6 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000FAE8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000FAEC 7000                       		moveq	#0,d0
0000FAEE 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000FAF2 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000FAF4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000FAF8 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000FAFA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000FB00                            
0000FB00                            Obj18_07_NoMove:
0000FB00 4E75                       		rts	
0000FB02                            ; ===========================================================================
0000FB02                            
0000FB02                            Obj18_07_Wait:
0000FB02 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000FB06 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000FB08 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000FB0C 4E75                       		rts	
0000FB0E                            ; ===========================================================================
0000FB0E                            
0000FB0E                            Obj18_Type08:
0000FB0E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000FB12 3028 0034                  		move.w	$34(a0),d0
0000FB16 0440 0200                  		subi.w	#$200,d0
0000FB1A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000FB1E 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000FB20 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000FB24                            
0000FB24                            Obj18_08_NoStop:
0000FB24 4E75                       		rts	
0000FB26                            ; ===========================================================================
0000FB26                            
0000FB26                            Obj18_Type0A:
0000FB26 3028 0034                  		move.w	$34(a0),d0
0000FB2A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000FB2E 0401 0040                  		subi.b	#$40,d1
0000FB32 4881                       		ext.w	d1
0000FB34 E241                       		asr.w	#1,d1
0000FB36 D041                       		add.w	d1,d0
0000FB38 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000FB3C                            
0000FB3C                            Obj18_ChgMotion:
0000FB3C 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000FB42 4E75                       		rts	
0000FB44                            ; ===========================================================================
0000FB44                            
0000FB44                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000FB44 3028 0032                  		move.w	$32(a0),d0
0000FB48 4EF9 0000 0000             		jmp		MarkObjGone4
0000FB4E                            Obj18_Delete:				; XREF: Obj18_Index
0000FB4E 6000 0000                  		bra.w	DeleteObject
0000FB52                            ; ===========================================================================
0000FB52                            ; ---------------------------------------------------------------------------
0000FB52                            ; Sprite mappings - unused
0000FB52                            ; ---------------------------------------------------------------------------
0000FB52                            Map_obj18x:
0000FB52                            	include "_maps\obj18x.asm"
0000FB52                            ; ---------------------------------------------------------------------------
0000FB52                            ; Sprite mappings - unused
0000FB52                            ; ---------------------------------------------------------------------------
0000FB52 0000                       		dc.w byte_80FE-Map_obj18x
0000FB54 0000                       		dc.w byte_8109-Map_obj18x
0000FB56 02                         byte_80FE:	dc.b 2
0000FB57 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000FB5C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000FB61 0A                         byte_8109:	dc.b $A
0000FB62 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000FB67 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000FB6C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000FB71 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000FB76 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000FB7B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000FB80 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000FB85 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000FB8A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000FB8F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000FB94                            		even
0000FB94                            		even
0000FB94                            
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94                            ; Sprite mappings - GHZ	platforms
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94                            Map_obj18:
0000FB94                            	include "_maps\obj18ghz.asm"
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94                            ; Sprite mappings - GHZ	platforms
0000FB94                            ; ---------------------------------------------------------------------------
0000FB94 0000                       		dc.w byte_8140-Map_obj18
0000FB96 0000                       		dc.w byte_8155-Map_obj18
0000FB98 04                         byte_8140:	dc.b 4
0000FB99 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000FB9E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000FBA3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000FBA8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000FBAD 0A                         byte_8155:	dc.b $A
0000FBAE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000FBB3 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000FBB8 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000FBBD 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000FBC2 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000FBC7 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000FBCC 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000FBD1 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000FBD6 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000FBDB 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000FBE0                            		even
0000FBE0                            		even
0000FBE0                            
0000FBE0                            ; ---------------------------------------------------------------------------
0000FBE0                            ; Sprite mappings - SYZ	platforms
0000FBE0                            ; ---------------------------------------------------------------------------
0000FBE0                            Map_obj18a:
0000FBE0                            	include "_maps\obj18syz.asm"
0000FBE0                            ; ---------------------------------------------------------------------------
0000FBE0                            ; Sprite mappings - SYZ	platforms
0000FBE0                            ; ---------------------------------------------------------------------------
0000FBE0 0000                       		dc.w byte_818A-Map_obj18a
0000FBE2 03                         byte_818A:	dc.b 3
0000FBE3 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000FBE8 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000FBED F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000FBF2                            		even
0000FBF2                            		even
0000FBF2                            
0000FBF2                            ; ---------------------------------------------------------------------------
0000FBF2                            ; Sprite mappings - SLZ	platforms
0000FBF2                            ; ---------------------------------------------------------------------------
0000FBF2                            Map_obj18b:
0000FBF2                            	include "_maps\obj18slz.asm"
0000FBF2                            ; ---------------------------------------------------------------------------
0000FBF2                            ; Sprite mappings - SLZ	platforms
0000FBF2                            ; ---------------------------------------------------------------------------
0000FBF2 0000                       		dc.w byte_819C-Map_obj18b
0000FBF4 02                         byte_819C:	dc.b 2
0000FBF5 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000FBFA F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000FC00 00                         		even
0000FC00 00                         		even
0000FC00                            
0000FC00                            ; ===========================================================================
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            ; Object 19 - blank
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            
0000FC00                            Obj19:					; XREF: Obj_Index
0000FC00                            ;===============================================================================
0000FC00                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FC00                            ; [ Begin ]
0000FC00                            ;=============================================================================== 
0000FC00                            loc_1CFAA:
0000FC00 7000                       		moveq	#0,d0
0000FC02 1028 0024                  		move.b	$24(a0),d0
0000FC06 323B 0000                  		move.w	loc_1CFBE(pc,d0),d1
0000FC0A 4EBB 1000                  		jsr	loc_1CFBE(pc,d1)
0000FC0E 4EF9 0000 0000             		jmp	(MarkObjGone3)
0000FC14                            loc_1CFBE:
0000FC14 0000                       		dc.w	loc_1CFC4-loc_1CFBE
0000FC16 0000                       		dc.w	loc_1D072-loc_1CFBE
0000FC18 0000                       		dc.w	loc_1D13C-loc_1CFBE
0000FC1A                            loc_1CFC4:
0000FC1A 5428 0024                  		addq.b	#2,$24(a0)
0000FC1E 217C 0000 0000 0004        		move.l	#Map_Obj19,4(a0) 
0000FC26 317C 07B2 0002             		move.w	#$7B2,2(a0)
0000FC2C                            ;		bsr	loc_1D302
0000FC2C 0028 0004 0001             		or.b	#4,1(a0)
0000FC32 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000FC38 317C 0280 0018             		move.w	#$280,priority(a0)
0000FC3E 1028 0028                  		move.b	$28(a0),d0
0000FC42 0800 0002                  		btst	#2,d0
0000FC46 6700                       		beq.s	loc_1D03E
0000FC48 5428 0024                  		addq.b	#2,$24(a0)
0000FC4C 0240 0007                  		and.w	#7,d0
0000FC50 1140 001A                  		move.b	d0,$1A(a0)
0000FC54 0240 0003                  		and.w	#3,d0
0000FC58 D040                       		add.w	d0,d0
0000FC5A 317B 0000 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FC60 3228 000C                  		move.w	$C(a0),d1
0000FC64 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC68 B269 000C                  		cmp.w	$C(a1),d1
0000FC6C 6400                       		bcc.s	loc_1D032
0000FC6E 117C 0001 0034             		move.b	#1,$34(a0)
0000FC74                            ;loc_1D022:
0000FC74                            ;		lea	($FFFFD040).w,a1
0000FC74                            ;		cmp.w	$C(a1),d1
0000FC74                            ;		bcc.s	loc_1D032
0000FC74                            ;		move.b	#1,$35(a0)
0000FC74                            loc_1D032:
0000FC74 6000 0000                  		bra	loc_1D13C
0000FC78                            loc_1D036:
0000FC78 0020 0040 0080 0100        		dc.w	$20,$40,$80,$100
0000FC80                            loc_1D03E:
0000FC80 0240 0003                  		and.w	#3,d0
0000FC84 1140 001A                  		move.b	d0,$1A(a0)
0000FC88 D040                       		add.w	d0,d0
0000FC8A 317B 00EC 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FC90 3228 0008                  		move.w	8(a0),d1
0000FC94 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC98 B269 0008                  		cmp.w	8(a1),d1
0000FC9C 6400                       		bcc.s	loc_1D072
0000FC9E 117C 0001 0034             		move.b	#1,$34(a0)
0000FCA4                            ;loc_1D062:
0000FCA4                            ;		lea	($FFFFD040).w,a1
0000FCA4                            ;		cmp.w	8(a1),d1
0000FCA4                            ;		bcc.s	loc_1D072
0000FCA4                            ;		move.b	#1,$35(a0)
0000FCA4                            loc_1D072:
0000FCA4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FCA8 6600                       		bne.s	loc_1D0CA
0000FCAA 3228 0008                  		move.w	8(a0),d1
0000FCAE 45E8 0034                  		lea	$34(a0),a2
0000FCB2 43F8 D000                  		lea	($FFFFD000).w,a1
0000FCB6                            ;		bsr.s	loc_1D08A
0000FCB6                            ;		lea	($FFFFD040).w,a1
0000FCB6                            loc_1D08A:
0000FCB6 4A1A                       		tst.b	(a2)+
0000FCB8 6600                       		bne.s	loc_1D0CC
0000FCBA B269 0008                  		cmp.w	8(a1),d1
0000FCBE 6200                       		bhi.s	loc_1D0CA
0000FCC0 157C 0001 FFFF             		move.b	#1,$FFFFFFFF(a2)
0000FCC6 3428 000C                  		move.w	$C(a0),d2
0000FCCA 3602                       		move.w	d2,d3
0000FCCC 3828 0032                  		move.w	$32(a0),d4
0000FCD0 9444                       		sub.w	d4,d2
0000FCD2 D644                       		add.w	d4,d3
0000FCD4 3829 000C                  		move.w	$C(a1),d4
0000FCD8 B842                       		cmp.w	d2,d4
0000FCDA 6500                       		bcs.s	loc_1D0CA
0000FCDC B843                       		cmp.w	d3,d4
0000FCDE 6400                       		bcc.s	loc_1D0CA
0000FCE0 0828 0000 0001             		btst	#0,1(a0)
0000FCE6 6600                       		bne.s	loc_1D0C4
0000FCE8 137C 0001 0039             		move.b	#1,$39(a1)
0000FCEE 6000                       		bra.s	loc_1D10A
0000FCF0                            loc_1D0C4:
0000FCF0 137C 0000 0039             		move.b	#0,$39(a1)
0000FCF6                            loc_1D0CA:
0000FCF6 4E75                       		rts
0000FCF8                            loc_1D0CC:
0000FCF8 B269 0008                  		cmp.w	8(a1),d1
0000FCFC 63F8                       		bls.s	loc_1D0CA
0000FCFE 157C 0000 FFFF             		move.b	#0,$FFFFFFFF(a2)
0000FD04 3428 000C                  		move.w	$C(a0),d2
0000FD08 3602                       		move.w	d2,d3
0000FD0A 3828 0032                  		move.w	$32(a0),d4
0000FD0E 9444                       		sub.w	d4,d2
0000FD10 D644                       		add.w	d4,d3
0000FD12 3829 000C                  		move.w	$C(a1),d4
0000FD16 B842                       		cmp.w	d2,d4
0000FD18 65DC                       		bcs.s	loc_1D0CA
0000FD1A B843                       		cmp.w	d3,d4
0000FD1C 64D8                       		bcc.s	loc_1D0CA
0000FD1E 0828 0000 0001             		btst	#0,1(a0)
0000FD24 6700                       		beq.s	loc_1D102
0000FD26 137C 0001 0039             		move.b	#1,$39(a1)
0000FD2C 6000                       		bra.s	loc_1D10A
0000FD2E                            loc_1D102:
0000FD2E 137C 0000 0039             		move.b	#0,$39(a1)
0000FD34 4E75                       		rts
0000FD36                            loc_1D10A:
0000FD36 0829 0002 0022             		btst	#2,$22(a1)
0000FD3C 6700                       		beq.s	loc_1D114
0000FD3E 4E75                       		rts
0000FD40                            loc_1D114:
0000FD40 08E9 0002 0022             		bset	#2,$22(a1)
0000FD46 137C 000E 0016             		move.b	#$E,$16(a1)
0000FD4C 137C 0007 0017             		move.b	#7,$17(a1)
0000FD52 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD58 5A69 000C                  		addq.w	#5,$C(a1)
0000FD5C 303C 00BE                  		move.w	#$BE,d0
0000FD60 4EB9 0000 0000             		jsr	Play_Sfx	
0000FD66 4E75                       		rts
0000FD68                            loc_1D13C:
0000FD68 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FD6C 6600                       		bne.s	loc_1D196
0000FD6E 3228 000C                  		move.w	$C(a0),d1
0000FD72 45E8 0034                  		lea	$34(a0),a2
0000FD76 43F8 D000                  		lea	($FFFFD000).w,a1
0000FD7A                            ;		bsr.s	loc_1D154
0000FD7A                            ;		lea	($FFFFD040).w,a1
0000FD7A                            loc_1D154:
0000FD7A 4A1A                       		tst.b	(a2)+
0000FD7C 6600                       		bne.s	loc_1D198
0000FD7E B269 000C                  		cmp.w	$C(a1),d1
0000FD82 6200                       		bhi.s	loc_1D196
0000FD84 157C 0001 FFFF             		move.b	#1,-1(a2)
0000FD8A 3428 0008                  		move.w	8(a0),d2
0000FD8E 3602                       		move.w	d2,d3
0000FD90 3828 0032                  		move.w	$32(a0),d4
0000FD94 9444                       		sub.w	d4,d2
0000FD96 D644                       		add.w	d4,d3
0000FD98 3829 0008                  		move.w	8(a1),d4
0000FD9C B842                       		cmp.w	d2,d4
0000FD9E 6500                       		bcs.s	loc_1D196
0000FDA0 B843                       		cmp.w	d3,d4
0000FDA2 6400                       		bcc.s	loc_1D196
0000FDA4 0828 0000 0001             		btst	#0,1(a0)
0000FDAA 6600                       		bne.s	loc_1D190
0000FDAC 137C 0001 0039             		move.b	#1,$39(a1)
0000FDB2 6082                       		bra	loc_1D10A
0000FDB4                            loc_1D190:
0000FDB4 137C 0000 0039             		move.b	#0,$39(a1)
0000FDBA                            loc_1D196:
0000FDBA 4E75                       		rts
0000FDBC                            loc_1D198:
0000FDBC B269 000C                  		cmp.w	$C(a1),d1
0000FDC0 63F8                       		bls.s	loc_1D196
0000FDC2 157C 0000 FFFF             		move.b	#0,-1(a2)
0000FDC8 3428 0008                  		move.w	8(a0),d2
0000FDCC 3602                       		move.w	d2,d3
0000FDCE 3828 0032                  		move.w	$32(a0),d4
0000FDD2 9444                       		sub.w	d4,d2
0000FDD4 D644                       		add.w	d4,d3
0000FDD6 3829 0008                  		move.w	8(a1),d4
0000FDDA B842                       		cmp.w	d2,d4
0000FDDC 65DC                       		bcs.s	loc_1D196
0000FDDE B843                       		cmp.w	d3,d4
0000FDE0 64D8                       		bcc.s	loc_1D196
0000FDE2 0828 0000 0001             		btst	#0,1(a0)
0000FDE8 6700                       		beq.s	loc_1D1D0
0000FDEA 137C 0001 0039             		move.b	#1,$39(a1)
0000FDF0 6000 FF44                  		bra	loc_1D10A
0000FDF4                            loc_1D1D0:
0000FDF4 137C 0000 0039             		move.b	#0,$39(a1)
0000FDFA 4E75                       		rts	
0000FDFC                            ;===============================================================================
0000FDFC                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FDFC                            ; [ End ]
0000FDFC                            ;===============================================================================
0000FDFC                            ; ===========================================================================
0000FDFC                            Map_Obj19:	INCLUDE "mappings/sprite/Obj03.asm"
0000FDFC                            ; --------------------------------------------------------------------------------
0000FDFC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000FDFC                            ; --------------------------------------------------------------------------------
0000FDFC                            
0000FDFC                            SME_EOaao:	
0000FDFC 0000 0000                  		dc.w SME_EOaao_10-SME_EOaao, SME_EOaao_25-SME_EOaao	
0000FE00 0000 0000                  		dc.w SME_EOaao_3A-SME_EOaao, SME_EOaao_4F-SME_EOaao	
0000FE04 0000 0000                  		dc.w SME_EOaao_64-SME_EOaao, SME_EOaao_79-SME_EOaao	
0000FE08 0000 0000                  		dc.w SME_EOaao_8E-SME_EOaao, SME_EOaao_A3-SME_EOaao	
0000FE0C 04                         SME_EOaao_10:	dc.b 4	
0000FE0D E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FE12 F005 0000 F8               		dc.b $F0, 5, 0, 0, $F8	
0000FE17 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FE1C 1005 0000 F8               		dc.b $10, 5, 0, 0, $F8	
0000FE21 04                         SME_EOaao_25:	dc.b 4	
0000FE22 C005 0000 F8               		dc.b $C0, 5, 0, 0, $F8	
0000FE27 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FE2C 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FE31 3005 0000 F8               		dc.b $30, 5, 0, 0, $F8	
0000FE36 04                         SME_EOaao_3A:	dc.b 4	
0000FE37 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FE3C E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FE41 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FE46 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FE4B 04                         SME_EOaao_4F:	dc.b 4	
0000FE4C 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FE51 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FE56 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FE5B 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FE60 04                         SME_EOaao_64:	dc.b 4	
0000FE61 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FE66 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000FE6B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FE70 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000FE75 04                         SME_EOaao_79:	dc.b 4	
0000FE76 F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
0000FE7B F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FE80 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FE85 F805 0000 30               		dc.b $F8, 5, 0, 0, $30	
0000FE8A 04                         SME_EOaao_8E:	dc.b 4	
0000FE8B F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FE90 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FE95 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FE9A F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FE9F 04                         SME_EOaao_A3:	dc.b 4	
0000FEA0 F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FEA5 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FEAA F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FEAF F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FEB4                            		even
0000FEB4                            		even
0000FEB4                            ;		even
0000FEB4                            
0000FEB4                            ; ===========================================================================
0000FEB4                            ; ---------------------------------------------------------------------------
0000FEB4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FEB4                            ; ---------------------------------------------------------------------------
0000FEB4                            Map_obj48:
0000FEB4                            	include "_maps\obj48.asm"
0000FEB4                            ; ---------------------------------------------------------------------------
0000FEB4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FEB4                            ; ---------------------------------------------------------------------------
0000FEB4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000FEB8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000FEBC 06                         byte_81B2:	dc.b 6
0000FEBD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000FEC2 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000FEC7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000FECC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000FED1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000FED6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000FEDB 04                         byte_81D1:	dc.b 4
0000FEDC E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000FEE1 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000FEE6 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000FEEB 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000FEF0 04                         byte_81E6:	dc.b 4
0000FEF1 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000FEF6 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000FEFB 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000FF00 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000FF05 04                         byte_81FB:	dc.b 4
0000FF06 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000FF0B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000FF10 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000FF15 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000FF1A                            		even
0000FF1A                            		even
0000FF1A                            ;	even
0000FF1A                            
0000FF1A                            ; ===========================================================================
0000FF1A                            ; ---------------------------------------------------------------------------
0000FF1A                            ; Object 1A - GHZ collapsing ledge
0000FF1A                            ; ---------------------------------------------------------------------------
0000FF1A                            
0000FF1A                            Obj1A:					; XREF: Obj_Index
0000FF1A 7000                       		moveq	#0,d0
0000FF1C 1028 0024                  		move.b	$24(a0),d0
0000FF20 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000FF24 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000FF28                            ; ===========================================================================
0000FF28 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000FF2C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000FF30 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000FF34                            ; ===========================================================================
0000FF34                            
0000FF34                            Obj1A_Main:				; XREF: Obj1A_Index
0000FF34 5428 0024                  		addq.b	#2,$24(a0)
0000FF38 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000FF40 317C 4000 0002             		move.w	#$4000,2(a0)
0000FF46 0028 0004 0001             		ori.b	#4,1(a0)
0000FF4C 317C 0200 0018             		move.w	#$200,priority(a0)
0000FF52 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000FF58 117C 0064 0023             		move.b	#$64,width_pixels(a0)
0000FF5E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FF64 117C 0038 0016             		move.b	#$38,$16(a0)
0000FF6A 08E8 0004 0001             		bset	#4,1(a0)
0000FF70                            
0000FF70                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000FF70 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000FF74 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000FF76 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000FF7A 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000FF7E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FF82                            
0000FF82                            Obj1A_Slope:
0000FF82 323C 0030                  		move.w	#$30,d1
0000FF86 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FF8C 6100 F31A                  		bsr.w	SlopeObject
0000FF90 4EF9 0000 0000             		jmp	MarkObjGone
0000FF96                            ; ===========================================================================
0000FF96                            
0000FF96                            Obj1A_Touch:				; XREF: Obj1A_Index
0000FF96 4A28 0038                  		tst.b	$38(a0)
0000FF9A 6700 0000                  		beq.w	loc_847A
0000FF9E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000FFA4 5328 0038                  		subq.b	#1,$38(a0)
0000FFA8                            
0000FFA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFA8                            
0000FFA8                            
0000FFA8                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000FFA8 323C 0030                  		move.w	#$30,d1
0000FFAC 6100 F362                  		bsr.w	ExitPlatform
0000FFB0 323C 0030                  		move.w	#$30,d1
0000FFB4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FFBA 3428 0008                  		move.w	8(a0),d2
0000FFBE 6100 0000                  		bsr.w	SlopeObject2
0000FFC2 4EF9 0000 0000             		jmp	MarkObjGone
0000FFC8                            ; End of function Obj1A_WalkOff
0000FFC8                            
0000FFC8                            ; ===========================================================================
0000FFC8                            
0000FFC8                            Obj1A_Display:				; XREF: Obj1A_Index
0000FFC8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FFCC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000FFCE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FFD2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000FFD6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FFDA 6000 0000                  		bra.w	DisplaySprite
0000FFDE                            ; ===========================================================================
0000FFDE                            
0000FFDE                            loc_82D0:				; XREF: Obj1A_Display
0000FFDE 5328 0038                  		subq.b	#1,$38(a0)
0000FFE2 6100 FFC4                  		bsr.w	Obj1A_WalkOff
0000FFE6 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFEA 0829 0003 0022             		btst	#3,$22(a1)
0000FFF0 6700                       		beq.s	loc_82FC
0000FFF2 4A28 0038                  		tst.b	$38(a0)
0000FFF6 6600                       		bne.s	locret_8308
0000FFF8 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFFE 08A9 0005 0022             		bclr	#5,$22(a1)
00010004 137C 0001 001D             		move.b	#1,$1D(a1)
0001000A                            
0001000A                            loc_82FC:
0001000A 117C 0000 003A             		move.b	#0,$3A(a0)
00010010 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00010016                            
00010016                            locret_8308:
00010016 4E75                       		rts	
00010018                            ; ===========================================================================
00010018                            
00010018                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00010018 6100 0000                  		bsr.w	ObjectFall
0001001C 6100 0000                  		bsr.w	DisplaySprite
00010020 4A28 0001                  		tst.b	1(a0)
00010024 6A00                       		bpl.s	Obj1A_Delete
00010026 4E75                       		rts	
00010028                            ; ===========================================================================
00010028                            
00010028                            Obj1A_Delete:				; XREF: Obj1A_Index
00010028 6100 0000                  		bsr.w	DeleteObject
0001002C 4E75                       		rts	
0001002E                            ; ===========================================================================
0001002E                            ; ---------------------------------------------------------------------------
0001002E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0001002E                            ; ---------------------------------------------------------------------------
0001002E                            
0001002E                            Obj53:					; XREF: Obj_Index
0001002E 7000                       		moveq	#0,d0
00010030 1028 0024                  		move.b	$24(a0),d0
00010034 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00010038 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0001003C                            ; ===========================================================================
0001003C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00010040 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00010044 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00010048                            ; ===========================================================================
00010048                            
00010048                            Obj53_Main:				; XREF: Obj53_Index
00010048 5428 0024                  		addq.b	#2,$24(a0)
0001004C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00010054 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001005A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00010060 6600                       		bne.s	Obj53_NotSLZ
00010062 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00010068 5428 001A                  		addq.b	#2,$1A(a0)
0001006C                            
0001006C                            Obj53_NotSLZ:
0001006C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010072 6600                       		bne.s	Obj53_NotSBZ
00010074 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0001007A                            
0001007A                            Obj53_NotSBZ:
0001007A 0028 0004 0001             		ori.b	#4,1(a0)
00010080 317C 0200 0018             		move.w	#$200,priority(a0)
00010086 117C 0007 0038             		move.b	#7,$38(a0)
0001008C 117C 0044 0023             		move.b	#$44,width_pixels(a0)
00010092                            
00010092                            Obj53_ChkTouch:				; XREF: Obj53_Index
00010092 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00010096 6700                       		beq.s	Obj53_Solid	; if not, branch
00010098 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0001009C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000100A0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000100A4                            
000100A4                            Obj53_Solid:
000100A4 323C 0020                  		move.w	#$20,d1
000100A8 6100 F126                  		bsr.w	PlatformObject
000100AC 4A28 0028                  		tst.b	$28(a0)
000100B0 6A00                       		bpl.s	Obj53_MarkAsGone
000100B2 0829 0003 0022             		btst	#3,$22(a1)
000100B8 6700                       		beq.s	Obj53_MarkAsGone
000100BA 08A8 0000 0001             		bclr	#0,1(a0)
000100C0 3029 0008                  		move.w	8(a1),d0
000100C4 9068 0008                  		sub.w	8(a0),d0
000100C8 6400                       		bcc.s	Obj53_MarkAsGone
000100CA 08E8 0000 0001             		bset	#0,1(a0)
000100D0                            
000100D0                            Obj53_MarkAsGone:
000100D0 4EF9 0000 0000             		jmp	MarkObjGone
000100D6                            ; ===========================================================================
000100D6                            
000100D6                            Obj53_Touch:				; XREF: Obj53_Index
000100D6 4A28 0038                  		tst.b	$38(a0)
000100DA 6700 0000                  		beq.w	loc_8458
000100DE 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000100E4 5328 0038                  		subq.b	#1,$38(a0)
000100E8                            
000100E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000100E8                            
000100E8                            
000100E8                            Obj53_WalkOff:				; XREF: Obj53_Index
000100E8 323C 0020                  		move.w	#$20,d1
000100EC 6100 F222                  		bsr.w	ExitPlatform
000100F0 3428 0008                  		move.w	8(a0),d2
000100F4 6100 F480                  		bsr.w	MvSonicOnPtfm2
000100F8 4EF9 0000 0000             		jmp	MarkObjGone
000100FE                            ; End of function Obj53_WalkOff
000100FE                            
000100FE                            ; ===========================================================================
000100FE                            
000100FE                            Obj53_Display:				; XREF: Obj53_Index
000100FE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00010102 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00010104 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00010108 6600 0000                  		bne.w	loc_8402	; if yes, branch
0001010C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00010110 6000 0000                  		bra.w	DisplaySprite
00010114                            ; ===========================================================================
00010114                            
00010114                            loc_8402:
00010114 5328 0038                  		subq.b	#1,$38(a0)
00010118 6100 FFCE                  		bsr.w	Obj53_WalkOff
0001011C 43F8 D000                  		lea	($FFFFD000).w,a1
00010120 0829 0003 0022             		btst	#3,$22(a1)
00010126 6700                       		beq.s	loc_842E
00010128 4A28 0038                  		tst.b	$38(a0)
0001012C 6600                       		bne.s	locret_843A
0001012E 08A9 0003 0022             		bclr	#3,$22(a1)
00010134 08A9 0005 0022             		bclr	#5,$22(a1)
0001013A 137C 0001 001D             		move.b	#1,$1D(a1)
00010140                            
00010140                            loc_842E:
00010140 117C 0000 003A             		move.b	#0,$3A(a0)
00010146 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0001014C                            
0001014C                            locret_843A:
0001014C 4E75                       		rts	
0001014E                            ; ===========================================================================
0001014E                            
0001014E                            Obj53_TimeZero:				; XREF: Obj53_Display
0001014E 6100 0000                  		bsr.w	ObjectFall
00010152 6100 0000                  		bsr.w	DisplaySprite
00010156 4A28 0001                  		tst.b	1(a0)
0001015A 6A00                       		bpl.s	Obj53_Delete
0001015C 4E75                       		rts	
0001015E                            ; ===========================================================================
0001015E                            
0001015E                            Obj53_Delete:				; XREF: Obj53_Index
0001015E 6100 0000                  		bsr.w	DeleteObject
00010162 4E75                       		rts	
00010164                            ; ===========================================================================
00010164                            
00010164                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00010164 117C 0000 003A             		move.b	#0,$3A(a0)
0001016A                            
0001016A                            loc_8458:				; XREF: Obj53_Touch
0001016A 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00010170 0828 0000 0028             		btst	#0,$28(a0)
00010176 6700                       		beq.s	loc_846C
00010178 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0001017E                            
0001017E                            loc_846C:
0001017E 7207                       		moveq	#7,d1
00010180 5228 001A                  		addq.b	#1,$1A(a0)
00010184 6000                       		bra.s	loc_8486
00010186                            ; ===========================================================================
00010186                            
00010186                            Obj1A_Collapse:
00010186 117C 0000 003A             		move.b	#0,$3A(a0)
0001018C                            
0001018C                            loc_847A:
0001018C 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00010192 7218                       		moveq	#$18,d1
00010194 5428 001A                  		addq.b	#2,$1A(a0)
00010198                            
00010198                            loc_8486:
00010198 7000                       		moveq	#0,d0
0001019A 1028 001A                  		move.b	$1A(a0),d0
0001019E D040                       		add.w	d0,d0
000101A0 2668 0004                  		movea.l	4(a0),a3
000101A4 D6F3 0000                  		adda.w	(a3,d0.w),a3
000101A8 524B                       		addq.w	#1,a3
000101AA 08E8 0005 0001             		bset	#5,1(a0)
000101B0 1810                       		move.b	0(a0),d4
000101B2 1A28 0001                  		move.b	1(a0),d5
000101B6 2248                       		movea.l	a0,a1
000101B8                            	;	bra.s	loc_84B2	; We have to remove this otherwise a1's value won't be right,
000101B8                            	; but since it's what creates the first object over the source object, we also have to create it now...
000101B8                            	; First object's creation begins here:
000101B8 137C 0006 0024             		move.b	#6,$24(a1)
000101BE 1284                       		move.b	d4,0(a1)
000101C0 234B 0004                  		move.l	a3,4(a1)
000101C4 1345 0001                  		move.b	d5,1(a1)
000101C8 3368 0008 0008             		move.w	8(a0),8(a1)
000101CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000101D4 3368 0002 0002             		move.w	2(a0),2(a1)
000101DA 3368 0018 0018             		move.w	priority(a0),priority(a1)
000101E0 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000101E6 135C 0038                  		move.b	(a4)+,$38(a1)
000101EA                            	; and ends here, it's a simple copy/paste from loc_84B2.
000101EA                            	; Now since we created one object already, we have to decrease the counter
000101EA 5341                       		subq.w	#1,d1
000101EC                            	; We don't have to check whether it's the last one or not, it can't be unless there's not enough free ram to create more (and that's checked later).
000101EC                            	; Here we begin what's replacing SingleObjLoad, in order to avoid resetting its d0 every time an object is created.
000101EC 43F8 D800                  		lea	($FFFFD800).w,a1
000101F0 303C 005F                  		move.w	#$5F,d0
000101F4                            
000101F4                            loc_84AA:
000101F4                            	;	bsr.w	SingleObjLoad	; We remove this, it's the routine we want to avoid
000101F4                            	; So here goes what was originally happening in SingleObjLoad, excepted now d0 won't be reset every time an object has to be created.
000101F4                            	; We'll just copy/paste the content of loc_DA94 and correct the branches.
000101F4                            	@loop:
000101F4 4A11                       		tst.b	(a1)
000101F6 6700                       		beq.s	@cont		; Let's correct the branches. Here we can also skip the bne that was originally after bsr.w SingleObjLoad because we already know there's a free object slot in memory.
000101F8 43E9 0040                  		lea	$40(a1),a1
000101FC 51C8 FFF6                  		dbf	d0,@loop	; Branch correction again.
00010200 6600                       		bne.s	loc_84F2	; We're moving this line here.
00010202                            	@cont:
00010202                            	; And that's it, copy/paste complete.
00010202 5A4B                       		addq.w	#5,a3
00010204                            
00010204                            loc_84B2:
00010204 137C 0006 0024             		move.b	#6,$24(a1)
0001020A 1284                       		move.b	d4,0(a1)
0001020C 234B 0004                  		move.l	a3,4(a1)
00010210 1345 0001                  		move.b	d5,1(a1)
00010214 3368 0008 0008             		move.w	8(a0),8(a1)
0001021A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010220 3368 0002 0002             		move.w	2(a0),2(a1)
00010226 3368 0018 0018             		move.w	priority(a0),priority(a1)
0001022C 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
00010232 135C 0038                  		move.b	(a4)+,$38(a1)
00010236                            	;	cmpa.l	a0,a1		; Finally, this isn't necessary anymore, its only purpose was to skip DisplaySprite2 on the first object
00010236                            	;	bcc.s	loc_84EE
00010236 6100 0000                  		bsr.w	DisplaySprite2
0001023A                            
0001023A                            loc_84EE:
0001023A 51C9 FFB8                  		dbf	d1,loc_84AA
0001023E                            
0001023E                            loc_84F2:
0001023E 6100 0000                  		bsr.w	DisplaySprite
00010242 303C 006F                  		move.w	#$6F,d0
00010246 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0001024C                            ; ===========================================================================
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0001024C                            ; ---------------------------------------------------------------------------
0001024C 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0001025C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00010266 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0001026E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00010276                            
00010276                            ; ---------------------------------------------------------------------------
00010276                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00010276                            ; ---------------------------------------------------------------------------
00010276                            
00010276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010276                            
00010276                            
00010276                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00010276 43F8 D000                  		lea	($FFFFD000).w,a1
0001027A 0829 0003 0022             		btst	#3,status(a1)
00010280 6700                       		beq.s	locret_856E
00010282 3029 0008                  		move.w	8(a1),d0
00010286 9068 0008                  		sub.w	8(a0),d0
0001028A D041                       		add.w	d1,d0
0001028C E248                       		lsr.w	#1,d0
0001028E 0828 0000 0001             		btst	#0,1(a0)
00010294 6700                       		beq.s	loc_854E
00010296 4640                       		not.w	d0
00010298 D041                       		add.w	d1,d0
0001029A                            
0001029A                            loc_854E:
0001029A 7200                       		moveq	#0,d1
0001029C 1232 0000                  		move.b	(a2,d0.w),d1
000102A0 3028 000C                  		move.w	$C(a0),d0
000102A4 9041                       		sub.w	d1,d0
000102A6 7200                       		moveq	#0,d1
000102A8 1229 0016                  		move.b	$16(a1),d1
000102AC 9041                       		sub.w	d1,d0
000102AE 3340 000C                  		move.w	d0,$C(a1)
000102B2 9468 0008                  		sub.w	8(a0),d2
000102B6 9569 0008                  		sub.w	d2,8(a1)
000102BA                            
000102BA 0829 0000 002B             		btst	#0,status_secondary(a1)    ; does Sonic have a shield?
000102C0 6700                       		beq.s	locret_856E       ; if not, branch
000102C2 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
000102C6 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
000102CA                            locret_856E:
000102CA 4E75                       		rts	
000102CC                            ; End of function SlopeObject2
000102CC                            ; ===========================================================================
000102CC                            ; ---------------------------------------------------------------------------
000102CC                            ; Collision data for GHZ collapsing ledge
000102CC                            ; ---------------------------------------------------------------------------
000102CC                            Obj1A_SlopeData:
000102CC                            		incbin	misc\ghzledge.bin
000102FC                            		even
000102FC                            
000102FC                            ; ---------------------------------------------------------------------------
000102FC                            ; Sprite mappings - GHZ	collapsing ledge
000102FC                            ; ---------------------------------------------------------------------------
000102FC                            Map_obj1A:
000102FC                            	include "_maps\obj1A.asm"
000102FC                            ; ---------------------------------------------------------------------------
000102FC                            ; Sprite mappings - GHZ	collapsing ledge
000102FC                            ; ---------------------------------------------------------------------------
000102FC 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00010300 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00010304 10                         byte_85A8:	dc.b $10
00010305 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0001030A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0001030F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00010314 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00010319 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0001031E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00010323 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00010328 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0001032D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010332 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00010337 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0001033C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010341 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00010346 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0001034B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00010350 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010355 10                         byte_85F9:	dc.b $10
00010356 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0001035B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00010360 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00010365 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0001036A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0001036F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00010374 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00010379 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0001037E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010383 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00010388 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0001038D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010392 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00010397 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0001039C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000103A1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000103A6 19                         byte_864A:	dc.b $19
000103A7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000103AC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000103B1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000103B6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000103BB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000103C0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000103C5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000103CA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000103CF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000103D4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000103D9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000103DE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000103E3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000103E8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000103ED F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000103F2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000103F7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000103FC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00010401 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010406 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0001040B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00010410 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00010415 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0001041A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0001041F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010424 19                         byte_86C8:	dc.b $19
00010425 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0001042A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0001042F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00010434 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00010439 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0001043E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00010443 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00010448 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0001044D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00010452 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00010457 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0001045C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00010461 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00010466 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0001046B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010470 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00010475 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0001047A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0001047F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010484 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00010489 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0001048E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00010493 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00010498 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0001049D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000104A2                            		even
000104A2                            		even
000104A2                            
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            Map_obj53:
000104A2                            	include "_maps\obj53.asm"
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000104A2                            ; ---------------------------------------------------------------------------
000104A2 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000104A6 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000104AA 04                         byte_874E:	dc.b 4
000104AB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000104B0 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000104B5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000104BA 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000104BF 08                         byte_8763:	dc.b 8
000104C0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000104C5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000104CA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000104CF F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000104D4 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000104D9 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000104DE 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000104E3 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000104E8 04                         byte_878C:	dc.b 4
000104E9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000104EE 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000104F3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000104F8 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000104FD 08                         byte_87A1:	dc.b 8
000104FE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00010503 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00010508 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0001050D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00010512 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00010517 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0001051C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00010521 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00010526                            		even
00010526                            		even
00010526                            
00010526                            ; ===========================================================================
00010526                            ; ---------------------------------------------------------------------------
00010526                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00010526                            ; ---------------------------------------------------------------------------
00010526                            
00010526                            Obj1C:					; XREF: Obj_Index
00010526 7000                       		moveq	#0,d0
00010528 1028 0024                  		move.b	$24(a0),d0
0001052C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00010530 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00010534                            ; ===========================================================================
00010534 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00010536 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00010538                            ; ===========================================================================
00010538                            
00010538                            Obj1C_Main:				; XREF: Obj1C_Index
00010538 5428 0024                  		addq.b	#2,$24(a0)
0001053C 7000                       		moveq	#0,d0
0001053E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00010542 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00010546 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0001054A 2159 0004                  		move.l	(a1)+,4(a0)
0001054E 3159 0002                  		move.w	(a1)+,2(a0)
00010552 0028 0004 0001             		ori.b	#4,1(a0)
00010558 1159 001A                  		move.b	(a1)+,$1A(a0)
0001055C 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00010560 1159 0018                  		move.b	(a1)+,priority(a0)
00010564 3028 0018                          move.w  priority(a0),d0
00010568 E248                               lsr.w   #1,d0
0001056A 0240 0380                          andi.w  #$380,d0
0001056E 3140 0018                          move.w  d0,priority(a0)
00010572 1159 0020                  		move.b	(a1)+,$20(a0)
00010576                            
00010576                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00010576 4EF9 0000 0000             		jmp	MarkObjGone
0001057C                            ; ===========================================================================
0001057C                            ; ---------------------------------------------------------------------------
0001057C                            ; Variables for	object $1C are stored in an array
0001057C                            ; ---------------------------------------------------------------------------
0001057C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00010580 44D8                       		dc.w $44D8		; VRAM setting
00010582 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00010586 0000 0000                  		dc.l Map_obj1C
0001058A 44D8                       		dc.w $44D8
0001058C 0008 0200                  		dc.b 0,	8, 2, 0
00010590 0000 0000                  		dc.l Map_obj1C
00010594 44D8                       		dc.w $44D8
00010596 0008 0200                  		dc.b 0,	8, 2, 0
0001059A 0000 F342                  		dc.l Map_obj11
0001059E 438E                       		dc.w $438E
000105A0 0110 0100                  		dc.b 1,	$10, 1,	0
000105A4                            ; ---------------------------------------------------------------------------
000105A4                            ; Sprite mappings - SLZ	lava thrower
000105A4                            ; ---------------------------------------------------------------------------
000105A4                            Map_obj1C:
000105A4                            	include "_maps\obj1C.asm"
000105A4                            ; ---------------------------------------------------------------------------
000105A4                            ; Sprite mappings - SLZ	lava thrower
000105A4                            ; ---------------------------------------------------------------------------
000105A4 0000                       		dc.w byte_8858-Map_obj1C
000105A6 01                         byte_8858:	dc.b 1
000105A7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000105AC                            		even
000105AC                            		even
000105AC                            
000105AC                            ; ===========================================================================
000105AC                            ; ---------------------------------------------------------------------------
000105AC                            ; Object 1D - switch that activates when Sonic touches it
000105AC                            ; (this	is not used anywhere in	the game)
000105AC                            ; ---------------------------------------------------------------------------
000105AC                            
000105AC                            Obj1D:					; XREF: Obj_Index
000105AC 7000                       		moveq	#0,d0
000105AE 1028 0024                  		move.b	$24(a0),d0
000105B2 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000105B6 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000105BA                            ; ===========================================================================
000105BA 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000105BC 0000                       		dc.w Obj1D_Action-Obj1D_Index
000105BE 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000105C0                            ; ===========================================================================
000105C0                            
000105C0                            Obj1D_Main:				; XREF: Obj1D_Index
000105C0 5428 0024                  		addq.b	#2,$24(a0)
000105C4 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000105CC 317C 4000 0002             		move.w	#$4000,2(a0)
000105D2 117C 0004 0001             		move.b	#4,1(a0)
000105D8 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000105DE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000105E4 317C 0280 0018             		move.w	#$280,priority(a0)
000105EA                            
000105EA                            Obj1D_Action:				; XREF: Obj1D_Index
000105EA 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000105F0 323C 0010                  		move.w	#$10,d1
000105F4 6100 0000                  		bsr.w	Obj1D_ChkTouch
000105F8 6700                       		beq.s	Obj1D_ChkDel
000105FA 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000105FE 7001                       		moveq	#1,d0
00010600 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00010604                            
00010604                            Obj1D_ChkDel:
00010604 6100 0000                  		bsr.w	DisplaySprite
00010608 4EF9 0000 0000             		jmp		MarkObjGone3	
0001060E                            Obj1D_Delete:				; XREF: Obj1D_Index
0001060E 6100 0000                  		bsr.w	DeleteObject
00010612 4E75                       		rts	
00010614                            ; ---------------------------------------------------------------------------
00010614                            ; Subroutine to	check if Sonic touches the object
00010614                            ; ---------------------------------------------------------------------------
00010614                            
00010614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010614                            
00010614                            
00010614                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00010614 43F8 D000                  		lea	($FFFFD000).w,a1
00010618 3029 0008                  		move.w	8(a1),d0
0001061C 9068 0008                  		sub.w	8(a0),d0
00010620 D041                       		add.w	d1,d0
00010622 6B00                       		bmi.s	loc_8918
00010624 D241                       		add.w	d1,d1
00010626 B041                       		cmp.w	d1,d0
00010628 6400                       		bcc.s	loc_8918
0001062A 3429 000C                  		move.w	$C(a1),d2
0001062E 1229 0016                  		move.b	$16(a1),d1
00010632 4881                       		ext.w	d1
00010634 D242                       		add.w	d2,d1
00010636 3028 000C                  		move.w	$C(a0),d0
0001063A 0440 0010                  		subi.w	#$10,d0
0001063E 9041                       		sub.w	d1,d0
00010640 6200                       		bhi.s	loc_8918
00010642 0C40 FFF0                  		cmpi.w	#-$10,d0
00010646 6500                       		bcs.s	loc_8918
00010648 70FF                       		moveq	#-1,d0
0001064A 4E75                       		rts	
0001064C                            ; ===========================================================================
0001064C                            
0001064C                            loc_8918:
0001064C 7000                       		moveq	#0,d0
0001064E 4E75                       		rts	
00010650                            ; End of function Obj1D_ChkTouch
00010650                            
00010650                            ; ===========================================================================
00010650                            ; ---------------------------------------------------------------------------
00010650                            ; Sprite mappings - object 1D
00010650                            ; ---------------------------------------------------------------------------
00010650                            Map_obj1D:
00010650                            	include '_maps\obj1D.asm'
00010650                            ; ---------------------------------------------------------------------------
00010650                            ; Sprite mappings - object 1D
00010650                            ; ---------------------------------------------------------------------------
00010650 0000                       		dc.w byte_891E-Map_obj1D
00010652 04                         byte_891E:	dc.b 4
00010653 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00010658 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0001065D E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00010662 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00010668 00                         		even
00010668 00                         		even
00010668                            
00010668                            ; ===========================================================================
00010668                            ; ---------------------------------------------------------------------------
00010668                            ; Object 2A - doors (SBZ)
00010668                            ; ---------------------------------------------------------------------------
00010668                            
00010668                            Obj2A:					; XREF: Obj_Index
00010668 7000                       		moveq	#0,d0
0001066A 1028 0024                  		move.b	$24(a0),d0
0001066E 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00010672 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00010676                            ; ===========================================================================
00010676 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00010678 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0001067A                            ; ===========================================================================
0001067A                            
0001067A                            Obj2A_Main:				; XREF: Obj2A_Index
0001067A 5428 0024                  		addq.b	#2,$24(a0)
0001067E 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00010686 317C 42E8 0002             		move.w	#$42E8,2(a0)
0001068C 0028 0004 0001             		ori.b	#4,1(a0)
00010692 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010698 317C 0200 0018             		move.w	#$200,priority(a0)
0001069E                            
0001069E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0001069E 323C 0040                  		move.w	#$40,d1
000106A2 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000106A6 3038 D008                  		move.w	($FFFFD008).w,d0
000106AA D041                       		add.w	d1,d0
000106AC B068 0008                  		cmp.w	8(a0),d0
000106B0 6500                       		bcs.s	Obj2A_Animate
000106B2 9041                       		sub.w	d1,d0
000106B4 9041                       		sub.w	d1,d0
000106B6 B068 0008                  		cmp.w	8(a0),d0
000106BA 6400                       		bcc.s	Obj2A_Animate
000106BC D041                       		add.w	d1,d0
000106BE B068 0008                  		cmp.w	8(a0),d0
000106C2 6400                       		bcc.s	loc_899A
000106C4 0828 0000 0022             		btst	#0,$22(a0)
000106CA 6600                       		bne.s	Obj2A_Animate
000106CC 6000                       		bra.s	Obj2A_Open
000106CE                            ; ===========================================================================
000106CE                            
000106CE                            loc_899A:				; XREF: Obj2A_OpenShut
000106CE 0828 0000 0022             		btst	#0,$22(a0)
000106D4 6700                       		beq.s	Obj2A_Animate
000106D6                            
000106D6                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000106D6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000106DC                            
000106DC                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000106DC 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000106E2 6100 0000                  		bsr.w	AnimateSprite
000106E6 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000106EA 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000106EC 323C 0011                  		move.w	#$11,d1
000106F0 343C 0020                  		move.w	#$20,d2
000106F4 3602                       		move.w	d2,d3
000106F6 5243                       		addq.w	#1,d3
000106F8 3828 0008                  		move.w	8(a0),d4
000106FC 4EB9 0000 0000             		jsr	SolidObject
00010702                            
00010702                            Obj2A_MarkAsUsed:
00010702 4EF9 0000 0000             		jmp	MarkObjGone
00010708                            ; ===========================================================================
00010708                            Ani_obj2A:
00010708                            	include '_anim\obj2A.asm'
00010708                            ; ---------------------------------------------------------------------------
00010708                            ; Animation script - doors (SBZ)
00010708                            ; ---------------------------------------------------------------------------
00010708 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0001070A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0001070C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00010718 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00010724                            		even
00010724                            		even
00010724                            
00010724                            ; ---------------------------------------------------------------------------
00010724                            ; Sprite mappings - doors (SBZ)
00010724                            ; ---------------------------------------------------------------------------
00010724                            Map_obj2A:
00010724                            	include '_maps\obj2A.asm'
00010724                            ; ---------------------------------------------------------------------------
00010724                            ; Sprite mappings - doors (SBZ)
00010724                            ; ---------------------------------------------------------------------------
00010724 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00010728 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0001072C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00010730 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00010734 0000                       		dc.w byte_8A56-Map_obj2A
00010736 02                         byte_89FE:	dc.b 2
00010737 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0001073C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00010741 02                         byte_8A09:	dc.b 2
00010742 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00010747 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0001074C 02                         byte_8A14:	dc.b 2
0001074D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00010752 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00010757 02                         byte_8A1F:	dc.b 2
00010758 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0001075D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00010762 02                         byte_8A2A:	dc.b 2
00010763 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00010768 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0001076D 02                         byte_8A35:	dc.b 2
0001076E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00010773 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00010778 02                         byte_8A40:	dc.b 2
00010779 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0001077E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00010783 02                         byte_8A4B:	dc.b 2
00010784 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00010789 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0001078E 02                         byte_8A56:	dc.b 2
0001078F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00010794 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0001079A 00                         		even
0001079A 00                         		even
0001079A                            
0001079A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001079A                            
0001079A                            
0001079A                            Obj44_SolidWall:			; XREF: Obj44_Solid
0001079A 4EB9 0000 0000             		jsr	Obj44_SolidWall2
000107A0 6700                       		beq.s	loc_8AA8
000107A2 6B00 0000                  		bmi.w	loc_8AC4
000107A6 4A40                       		tst.w	d0
000107A8 6700 0000                  		beq.w	loc_8A92
000107AC 6B00                       		bmi.s	loc_8A7C
000107AE 4A69 0010                  		tst.w	x_vel(a1)
000107B2 6B00                       		bmi.s	loc_8A92
000107B4 6000                       		bra.s	loc_8A82
000107B6                            ; ===========================================================================
000107B6                            
000107B6                            loc_8A7C:
000107B6 4A69 0010                  		tst.w	x_vel(a1)
000107BA 6A00                       		bpl.s	loc_8A92
000107BC                            
000107BC                            loc_8A82:
000107BC 9169 0008                  		sub.w	d0,8(a1)
000107C0 337C 0000 0020             		move.w	#0,inertia(a1)
000107C6 337C 0000 0010             		move.w	#0,x_vel(a1)
000107CC                            
000107CC                            loc_8A92:
000107CC 0829 0001 0022             		btst	#1,status(a1)
000107D2 6600                       		bne.s	loc_8AB6
000107D4 08E9 0005 0022             		bset	#5,status(a1)
000107DA 08E8 0005 0022             		bset	#5,status(a0)
000107E0 4E75                       		rts	
000107E2                            ; ===========================================================================
000107E2                            
000107E2                            loc_8AA8:
000107E2 0828 0005 0022             		btst	#5,status(a0)
000107E8 6700                       		beq.s	locret_8AC2
000107EA 337C 0001 001C             		move.w	#1,anim(a1)
000107F0                            
000107F0                            loc_8AB6:
000107F0 08A8 0005 0022             		bclr	#5,status(a0)
000107F6 08A9 0005 0022             		bclr	#5,status(a1)
000107FC                            
000107FC                            locret_8AC2:
000107FC 4E75                       		rts	
000107FE                            ; ===========================================================================
000107FE                            
000107FE                            loc_8AC4:
000107FE 4A69 0012                  		tst.w	y_vel(a1)
00010802 6A00                       		bpl.s	locret_8AD8
00010804 4A43                       		tst.w	d3
00010806 6A00                       		bpl.s	locret_8AD8
00010808 9769 000C                  		sub.w	d3,$C(a1)
0001080C 337C 0000 0012             		move.w	#0,y_vel(a1)
00010812                            
00010812                            locret_8AD8:
00010812 4E75                       		rts	
00010814                            ; End of function Obj44_SolidWall
00010814                            
00010814                            
00010814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010814                            
00010814                            
00010814                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00010814 43F8 D000                  		lea	($FFFFD000).w,a1
00010818 3029 0008                  		move.w	8(a1),d0
0001081C 9068 0008                  		sub.w	8(a0),d0
00010820 D041                       		add.w	d1,d0
00010822 6B00                       		bmi.s	loc_8B48
00010824 3601                       		move.w	d1,d3
00010826 D643                       		add.w	d3,d3
00010828 B043                       		cmp.w	d3,d0
0001082A 6200                       		bhi.s	loc_8B48
0001082C 1629 0016                  		move.b	$16(a1),d3
00010830 4883                       		ext.w	d3
00010832 D443                       		add.w	d3,d2
00010834 3629 000C                  		move.w	$C(a1),d3
00010838 9668 000C                  		sub.w	$C(a0),d3
0001083C D642                       		add.w	d2,d3
0001083E 6B00                       		bmi.s	loc_8B48
00010840 3802                       		move.w	d2,d4
00010842 D844                       		add.w	d4,d4
00010844 B644                       		cmp.w	d4,d3
00010846 6400                       		bcc.s	loc_8B48
00010848 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001084C 6B00                       		bmi.s	loc_8B48
0001084E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010854 6400                       		bcc.s	loc_8B48
00010856 4A78 FE08                  		tst.w	($FFFFFE08).w
0001085A 6600                       		bne.s	loc_8B48
0001085C 3A00                       		move.w	d0,d5
0001085E B240                       		cmp.w	d0,d1
00010860 6400                       		bcc.s	loc_8B30
00010862 D241                       		add.w	d1,d1
00010864 9041                       		sub.w	d1,d0
00010866 3A00                       		move.w	d0,d5
00010868 4445                       		neg.w	d5
0001086A                            
0001086A                            loc_8B30:
0001086A 3203                       		move.w	d3,d1
0001086C B443                       		cmp.w	d3,d2
0001086E 6400                       		bcc.s	loc_8B3C
00010870 9644                       		sub.w	d4,d3
00010872 3203                       		move.w	d3,d1
00010874 4441                       		neg.w	d1
00010876                            
00010876                            loc_8B3C:
00010876 BA41                       		cmp.w	d1,d5
00010878 6200                       		bhi.s	loc_8B44
0001087A 7801                       		moveq	#1,d4
0001087C 4E75                       		rts	
0001087E                            ; ===========================================================================
0001087E                            
0001087E                            loc_8B44:
0001087E 78FF                       		moveq	#-1,d4
00010880 4E75                       		rts	
00010882                            ; ===========================================================================
00010882                            
00010882                            loc_8B48:
00010882 7800                       		moveq	#0,d4
00010884 4E75                       		rts	
00010886                            ; End of function Obj44_SolidWall2
00010886                            
00010886                            ; ===========================================================================
00010886                            ; ---------------------------------------------------------------------------
00010886                            ; Object 1E - Ball Hog enemy (SBZ)
00010886                            ; ---------------------------------------------------------------------------
00010886                            
00010886                            Obj1E:					; XREF: Obj_Index
00010886 7000                       		moveq	#0,d0
00010888 1028 0024                  		move.b	routine(a0),d0
0001088C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00010890 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00010894                            ; ===========================================================================
00010894 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00010896 0000                       		dc.w Obj1E_Action-Obj1E_Index
00010898                            ; ===========================================================================
00010898                            
00010898                            Obj1E_Main:				; XREF: Obj1E_Index
00010898 117C 0013 0016             		move.b	#$13,$16(a0)
0001089E 117C 0008 0017             		move.b	#8,$17(a0)
000108A4 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000108AC 317C 2302 0002             		move.w	#$2302,2(a0)
000108B2 117C 0004 0001             		move.b	#4,1(a0)
000108B8 317C 0200 0018             		move.w	#$200,priority(a0)
000108BE 117C 0005 0020             		move.b	#5,collision_flags(a0)
000108C4 117C 000C 0023             		move.b	#$C,width_pixels(a0)
000108CA 4EB9 0000 0000             		jsr	ObjectFall
000108D0 4EB9 0000 0000             		jsr	ObjHitFloor
000108D6 4A41                       		tst.w	d1
000108D8 6A00                       		bpl.s	locret_8BAC
000108DA D368 000C                  		add.w	d1,$C(a0)
000108DE 317C 0000 0012             		move.w	#0,y_vel(a0)
000108E4 5428 0024                  		addq.b	#2,routine(a0)
000108E8                            
000108E8                            locret_8BAC:
000108E8 4E75                       		rts	
000108EA                            ; ===========================================================================
000108EA                            
000108EA                            Obj1E_Action:				; XREF: Obj1E_Index
000108EA 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000108F0 4EB9 0000 0000             		jsr	AnimateSprite
000108F6 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)	; is final frame (01) displayed?
000108FC 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000108FE 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00010902 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00010904 6000                       		bra.s	Obj1E_MarkAsGone
00010906                            ; ===========================================================================
00010906                            
00010906                            Obj1E_SetBall:				; XREF: Obj1E_Action
00010906 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0001090A                            
0001090A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0001090A 4EF9 0000 0000             		jmp	MarkObjGone
00010910                            ; ===========================================================================
00010910                            
00010910                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00010910 117C 0001 0032             		move.b	#1,$32(a0)
00010916 4EB9 0000 0000             		jsr	SingleObjLoad
0001091C 6600                       		bne.s	loc_8C1A
0001091E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00010922 3368 0008 0008             		move.w	8(a0),8(a1)
00010928 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001092E 337C FF00 0010             		move.w	#-$100,x_vel(a1)	; cannonball bounces to	the left
00010934 337C 0000 0012             		move.w	#0,y_vel(a1)
0001093A 70FC                       		moveq	#-4,d0
0001093C 0828 0000 0022             		btst	#0,status(a0)	; is Ball Hog facing right?
00010942 6700                       		beq.s	loc_8C0A	; if not, branch
00010944 4440                       		neg.w	d0
00010946 4469 0010                  		neg.w	x_vel(a1)		; cannonball bounces to	the right
0001094A                            
0001094A                            loc_8C0A:
0001094A D169 0008                  		add.w	d0,8(a1)
0001094E 0669 000C 000C             		addi.w	#$C,$C(a1)
00010954 1368 0028 0028             		move.b	subtype(a0),subtype(a1)	; copy object type from	Ball Hog
0001095A                            
0001095A                            loc_8C1A:
0001095A 60AE                       		bra.s	Obj1E_MarkAsGone
0001095C                            ; ===========================================================================
0001095C                            ; ---------------------------------------------------------------------------
0001095C                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0001095C                            ; ---------------------------------------------------------------------------
0001095C                            
0001095C                            Obj20:					; XREF: Obj_Index
0001095C 7000                       		moveq	#0,d0
0001095E 1028 0024                  		move.b	routine(a0),d0
00010962 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00010966 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0001096A                            ; ===========================================================================
0001096A 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0001096C 0000                       		dc.w Obj20_Bounce-Obj20_Index
0001096E                            ; ===========================================================================
0001096E                            
0001096E                            Obj20_Main:				; XREF: Obj20_Index
0001096E 5428 0024                  		addq.b	#2,routine(a0)
00010972 117C 0007 0016             		move.b	#7,$16(a0)
00010978 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00010980 317C 2302 0002             		move.w	#$2302,2(a0)
00010986 117C 0004 0001             		move.b	#4,1(a0)
0001098C 317C 0180 0018             		move.w	#$180,priority(a0)
00010992 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00010998 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001099E 7000                       		moveq	#0,d0
000109A0 1028 0028                  		move.b	subtype(a0),d0	; move object type to d0
000109A4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000109A8 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000109AC 117C 0004 001A             		move.b	#4,mapping_frame(a0)
000109B2                            
000109B2                            Obj20_Bounce:				; XREF: Obj20_Index
000109B2 4EB9 0000 0000             		jsr	ObjectFall
000109B8 4A68 0012                  		tst.w	y_vel(a0)
000109BC 6B00                       		bmi.s	Obj20_ChkExplode
000109BE 4EB9 0000 0000             		jsr	ObjHitFloor
000109C4 4A41                       		tst.w	d1
000109C6 6A00                       		bpl.s	Obj20_ChkExplode
000109C8 D368 000C                  		add.w	d1,$C(a0)
000109CC 317C FD00 0012             		move.w	#-$300,y_vel(a0)
000109D2 4A03                       		tst.b	d3
000109D4 6700                       		beq.s	Obj20_ChkExplode
000109D6 6B00                       		bmi.s	loc_8CA4
000109D8 4A68 0010                  		tst.w	x_vel(a0)
000109DC 6A00                       		bpl.s	Obj20_ChkExplode
000109DE 4468 0010                  		neg.w	x_vel(a0)
000109E2 6000                       		bra.s	Obj20_ChkExplode
000109E4                            ; ===========================================================================
000109E4                            
000109E4                            loc_8CA4:				; XREF: Obj20_Bounce
000109E4 4A68 0010                  		tst.w	x_vel(a0)
000109E8 6B00                       		bmi.s	Obj20_ChkExplode
000109EA 4468 0010                  		neg.w	x_vel(a0)
000109EE                            
000109EE                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000109EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000109F2 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000109F4 10BC 0024                  		move.b	#$24,0(a0)
000109F8 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000109FC 117C 0000 0024             		move.b	#0,routine(a0)	; reset	routine	counter
00010A02 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00010A06                            ; ===========================================================================
00010A06                            
00010A06                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00010A06 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010A0A 6A00                       		bpl.s	Obj20_Display
00010A0C 117C 0005 001E             		move.b	#5,anim_frame_duration(a0)	; set frame duration to	5 frames
00010A12 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
00010A18                            
00010A18                            Obj20_Display:
00010A18 4EB9 0000 0000             		jsr	DisplaySprite
00010A1E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00010A22 0640 00E0                  		addi.w	#$E0,d0
00010A26 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00010A2A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00010A2E 4E75                       		rts	
00010A30                            ; ===========================================================================
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            ; Object 24 - explosion	from a destroyed monitor
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            
00010A30                            Obj24:					; XREF: Obj_Index
00010A30 7000                       		moveq	#0,d0
00010A32 1028 0024                  		move.b	routine(a0),d0
00010A36 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00010A3A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00010A3E                            ; ===========================================================================
00010A3E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00010A40 0000                       		dc.w Obj24_Animate-Obj24_Index
00010A42                            ; ===========================================================================
00010A42                            
00010A42                            Obj24_Main:				; XREF: Obj24_Index
00010A42 5428 0024                  		addq.b	#2,routine(a0)
00010A46 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00010A4E 317C 041C 0002             		move.w	#$41C,2(a0)
00010A54 117C 0004 0001             		move.b	#4,1(a0)
00010A5A 317C 0080 0018             		move.w	#$80,priority(a0)
00010A60 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010A66 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010A6C 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)
00010A72 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00010A78 303C 00A5                  		move.w	#$A5,d0
00010A7C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play explosion sound
00010A82                            
00010A82                            Obj24_Animate:				; XREF: Obj24_Index
00010A82 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010A86 6A00                       		bpl.s	Obj24_Display
00010A88 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)	; set frame duration to	9 frames
00010A8E 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
00010A92 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is the final frame (04) displayed?
00010A98 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010A9C                            
00010A9C                            Obj24_Display:
00010A9C 6000 0000                  		bra.w	DisplaySprite
00010AA0                            ; ===========================================================================
00010AA0                            ; ---------------------------------------------------------------------------
00010AA0                            ; Object 27 - explosion	from a destroyed enemy
00010AA0                            ; ---------------------------------------------------------------------------
00010AA0                            
00010AA0                            Obj27:					; XREF: Obj_Index
00010AA0 7000                       		moveq	#0,d0
00010AA2 1028 0024                  		move.b	routine(a0),d0
00010AA6 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00010AAA 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00010AAE                            ; ===========================================================================
00010AAE 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00010AB0 0000                       		dc.w Obj27_Main-Obj27_Index
00010AB2 0000                       		dc.w Obj27_Animate-Obj27_Index
00010AB4                            ; ===========================================================================
00010AB4                            
00010AB4                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00010AB4 5428 0024                  		addq.b	#2,routine(a0)
00010AB8 4EB9 0000 0000             		jsr	SingleObjLoad
00010ABE 6600                       		bne.s	Obj27_Main
00010AC0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00010AC4 3368 0008 0008             		move.w	8(a0),8(a1)
00010ACA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010AD0 3368 003E 003E             		move.w	parent(a0),parent(a1)
00010AD6                            
00010AD6                            Obj27_Main:				; XREF: Obj27_Index
00010AD6 5428 0024                  		addq.b	#2,routine(a0)
00010ADA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00010AE2 317C 05A0 0002             		move.w	#$5A0,2(a0)
00010AE8 117C 0004 0001             		move.b	#4,1(a0)
00010AEE 317C 0080 0018             		move.w	#$80,priority(a0)
00010AF4 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010AFA 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010B00 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
00010B06 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00010B0C 303C 003D                  		move.w	#$3D,d0
00010B10 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00010B16                            
00010B16                            Obj27_Animate:				; XREF: Obj27_Index
00010B16 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010B1A 6A00                       		bpl.s	Obj27_Display
00010B1C 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
00010B22 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
00010B26 0C28 0005 001A             		cmpi.b	#5,mapping_frame(a0)	; is the final frame (05) displayed?
00010B2C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010B30                            
00010B30                            Obj27_Display:
00010B30 6000 0000                  		bra.w	DisplaySprite
00010B34                            ; ===========================================================================
00010B34                            ; ---------------------------------------------------------------------------
00010B34                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00010B34                            ; ---------------------------------------------------------------------------
00010B34                            
00010B34                            Obj3F:					; XREF: Obj_Index
00010B34 7000                       		moveq	#0,d0
00010B36 1028 0024                  		move.b	routine(a0),d0
00010B3A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00010B3E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00010B42                            ; ===========================================================================
00010B42 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00010B44 0000                       		dc.w Obj3F_Animate-Obj3F_Index
00010B46                            ; ===========================================================================
00010B46                            
00010B46                            Obj3F_Main:				; XREF: Obj3F_Index
00010B46 5428 0024                  		addq.b	#2,routine(a0)
00010B4A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00010B52 317C 05A0 0002             		move.w	#$5A0,2(a0)
00010B58 117C 0004 0001             		move.b	#4,1(a0)
00010B5E 317C 0080 0018             		move.w	#$80,priority(a0)
00010B64 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010B6A 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010B70 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010B76 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00010B7C 303C 00B4                  		move.w	#$B4,d0
00010B80 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00010B86                            		
00010B86                            Obj3F_Animate:				; XREF: Obj27_Index
00010B86 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010B8A 6AA4                       		bpl.s	Obj27_Display
00010B8C 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010B92 5228 001A                  		addq.b	#1,mapping_frame(a0)
00010B96 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00010B9C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010BA0                            
00010BA0                            Obj3F_Display:
00010BA0 6000 0000                  		bra.w	DisplaySprite
00010BA4                            ; ===========================================================================
00010BA4                            ; ===========================================================================
00010BA4                            Ani_obj1E:
00010BA4                            	include "_anim\obj1E.asm"
00010BA4                            ; ---------------------------------------------------------------------------
00010BA4                            ; Animation script - doors (SBZ)
00010BA4                            ; ---------------------------------------------------------------------------
00010BA4 0000                       		dc.w byte_8E4A-Ani_obj1E
00010BA6 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00010BBE 00                         		even
00010BBE 00                         		even
00010BBE                            
00010BBE                            ; ---------------------------------------------------------------------------
00010BBE                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010BBE                            ; ---------------------------------------------------------------------------
00010BBE                            Map_obj1E:
00010BBE                            	include "_maps\obj1E.asm"
00010BBE                            ; ---------------------------------------------------------------------------
00010BBE                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010BBE                            ; ---------------------------------------------------------------------------
00010BBE 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00010BC2 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00010BC6 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00010BCA 02                         byte_8E6E:	dc.b 2
00010BCB EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010BD0 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00010BD5 02                         byte_8E79:	dc.b 2
00010BD6 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010BDB FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00010BE0 02                         byte_8E84:	dc.b 2
00010BE1 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00010BE6 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00010BEB 02                         byte_8E8F:	dc.b 2
00010BEC E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00010BF1 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00010BF6 01                         byte_8E9A:	dc.b 1
00010BF7 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00010BFC 01                         byte_8EA0:	dc.b 1
00010BFD F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00010C02                            		even
00010C02                            		even
00010C02                            
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            ; Sprite mappings - explosion
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            Map_obj24:
00010C02                            	include "_maps\obj24s3.asm"
00010C02                            ; --------------------------------------------------------------------------------
00010C02                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C02                            ; --------------------------------------------------------------------------------
00010C02                            
00010C02                            SME_nzr3c:	
00010C02 0000 0000                  		dc.w SME_nzr3c_A-SME_nzr3c, SME_nzr3c_10-SME_nzr3c	
00010C06 0000 0000                  		dc.w SME_nzr3c_16-SME_nzr3c, SME_nzr3c_1C-SME_nzr3c	
00010C0A 0000                       		dc.w SME_nzr3c_22-SME_nzr3c	
00010C0C 01                         SME_nzr3c_A:	dc.b 1	
00010C0D F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010C12 01                         SME_nzr3c_10:	dc.b 1	
00010C13 F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010C18 01                         SME_nzr3c_16:	dc.b 1	
00010C19 F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010C1E 01                         SME_nzr3c_1C:	dc.b 1	
00010C1F F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010C24 01                         SME_nzr3c_22:	dc.b 1	
00010C25 F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010C2A                            		even
00010C2A                            		even
00010C2A                            
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A                            ; Sprite mappings - explosion
00010C2A                            ; ---------------------------------------------------------------------------
00010C2A                            Map_obj27:include "_maps\obj27s3.asm"
00010C2A                            ; --------------------------------------------------------------------------------
00010C2A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C2A                            ; --------------------------------------------------------------------------------
00010C2A                            
00010C2A                            SME_stcCy:	
00010C2A 0000 0000                  		dc.w SME_stcCy_A-SME_stcCy, SME_stcCy_10-SME_stcCy	
00010C2E 0000 0000                  		dc.w SME_stcCy_16-SME_stcCy, SME_stcCy_1C-SME_stcCy	
00010C32 0000                       		dc.w SME_stcCy_22-SME_stcCy	
00010C34 01                         SME_stcCy_A:	dc.b 1	
00010C35 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010C3A 01                         SME_stcCy_10:	dc.b 1	
00010C3B F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010C40 01                         SME_stcCy_16:	dc.b 1	
00010C41 F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010C46 01                         SME_stcCy_1C:	dc.b 1	
00010C47 F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010C4C 01                         SME_stcCy_22:	dc.b 1	
00010C4D F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010C52                            		even
00010C52                            		even
00010C52                            ; ---------------------------------------------------------------------------
00010C52                            ; Sprite mappings - explosion from when	a boss is destroyed
00010C52                            ; ---------------------------------------------------------------------------
00010C52                            Map_obj3F:include "_maps\obj3Fs3.asm"
00010C52                            ; --------------------------------------------------------------------------------
00010C52                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010C52                            ; --------------------------------------------------------------------------------
00010C52                            
00010C52                            SME_georC:	
00010C52 0000 0000                  		dc.w SME_georC_C-SME_georC, SME_georC_12-SME_georC	
00010C56 0000 0000                  		dc.w SME_georC_18-SME_georC, SME_georC_1E-SME_georC	
00010C5A 0000 0000                  		dc.w SME_georC_24-SME_georC, SME_georC_2A-SME_georC	
00010C5E 01                         SME_georC_C:	dc.b 1	
00010C5F F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010C64 01                         SME_georC_12:	dc.b 1	
00010C65 F40A 0004 F4               		dc.b $F4, $A, 0, 4, $F4	
00010C6A 01                         SME_georC_18:	dc.b 1	
00010C6B F40A 000D F4               		dc.b $F4, $A, 0, $D, $F4	
00010C70 01                         SME_georC_1E:	dc.b 1	
00010C71 F40A 0016 F4               		dc.b $F4, $A, 0, $16, $F4	
00010C76 01                         SME_georC_24:	dc.b 1	
00010C77 F30A 001F F4               		dc.b $F3, $A, 0, $1F, $F4	
00010C7C 01                         SME_georC_2A:	dc.b 1	
00010C7D F609 0028 F4               		dc.b $F6, 9, 0, $28, $F4	
00010C82                            		even
00010C82                            		even
00010C82                            ; ===========================================================================
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            ; Object 28 - animals
00010C82                            ; ---------------------------------------------------------------------------
00010C82                            
00010C82                            Obj28:					; XREF: Obj_Index
00010C82 7000                       		moveq	#0,d0
00010C84 1028 0024                  		move.b	$24(a0),d0
00010C88 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00010C8C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00010C90                            ; ===========================================================================
00010C90 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00010C94 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010C98 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00010C9C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010CA0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00010CA4 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00010CA8 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00010CAC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010CB0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010CB4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00010CB8 0000                       		dc.w loc_92D6-Obj28_Index
00010CBA                            
00010CBA 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00010CC6                            
00010CC6 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00010CCA 0000 0000                  		dc.l Map_obj28
00010CCE FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00010CD2 0000 0000                  		dc.l Map_obj28a		; mappings address
00010CD6 FE80 FD00                  		dc.w $FE80, $FD00
00010CDA 0000 0000                  		dc.l Map_obj28
00010CDE FEC0 FE80                  		dc.w $FEC0, $FE80
00010CE2 0000 0000                  		dc.l Map_obj28a
00010CE6 FE40 FD00                  		dc.w $FE40, $FD00
00010CEA 0000 0000                  		dc.l Map_obj28b
00010CEE FD00 FC00                  		dc.w $FD00, $FC00
00010CF2 0000 0000                  		dc.l Map_obj28a
00010CF6 FD80 FC80                  		dc.w $FD80, $FC80
00010CFA 0000 0000                  		dc.l Map_obj28b
00010CFE                            
00010CFE FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00010D0E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00010D1E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00010D2A                            
00010D2A 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00010D3E 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00010D52 0000 0000                  		dc.l Map_obj28b
00010D56                            
00010D56 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00010D68 0565 05B3                  		dc.w $565, $5B3
00010D6C                            ; ===========================================================================
00010D6C                            
00010D6C                            Obj28_Ending:				; XREF: Obj28_Index
00010D6C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00010D70 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00010D74 7000                       		moveq	#0,d0
00010D76 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00010D7A D040                       		add.w	d0,d0		; multiply d0 by 2
00010D7C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00010D80 0440 0014                  		subi.w	#$14,d0
00010D84 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00010D8A D040                       		add.w	d0,d0
00010D8C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00010D92 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00010D96 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00010D9C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00010DA2 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00010DA8 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00010DAE 117C 000C 0016             		move.b	#$C,$16(a0)
00010DB4 117C 0004 0001             		move.b	#4,1(a0)
00010DBA 08E8 0000 0001             		bset	#0,1(a0)
00010DC0 317C 0300 0018             		move.w	#$300,priority(a0)
00010DC6 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010DCC 117C 0007 001E             		move.b	#7,$1E(a0)
00010DD2 6000 0000                  		bra.w	DisplaySprite
00010DD6                            ; ===========================================================================
00010DD6                            
00010DD6                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00010DD6 5428 0024                  		addq.b	#2,$24(a0)
00010DDA 4EBA 812E                  		jsr	RandomNumber
00010DDE 0240 0001                  		andi.w	#1,d0
00010DE2 7200                       		moveq	#0,d1
00010DE4 1238 FE10                  		move.b	($FFFFFE10).w,d1
00010DE8 D241                       		add.w	d1,d1
00010DEA D240                       		add.w	d0,d1
00010DEC 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00010DF0 1031 1000                  		move.b	(a1,d1.w),d0
00010DF4 1140 0030                  		move.b	d0,$30(a0)
00010DF8 E748                       		lsl.w	#3,d0
00010DFA 43FA FECA                  		lea	Obj28_Variables(pc),a1
00010DFE D2C0                       		adda.w	d0,a1
00010E00 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00010E04 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00010E08 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00010E0C 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00010E12 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00010E18 6700                       		beq.s	loc_90C0	; if yes, branch
00010E1A 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00010E20                            
00010E20                            loc_90C0:
00010E20 117C 000C 0016             		move.b	#$C,$16(a0)
00010E26 117C 0004 0001             		move.b	#4,1(a0)
00010E2C 08E8 0000 0001             		bset	#0,1(a0)
00010E32 317C 0300 0018             		move.w	#$300,priority(a0)
00010E38 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010E3E 117C 0007 001E             		move.b	#7,$1E(a0)
00010E44 117C 0002 001A             		move.b	#2,$1A(a0)
00010E4A 317C FC00 0012             		move.w	#-$400,$12(a0)
00010E50 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010E54 6600                       		bne.s	loc_911C
00010E56 6100 0000                  		bsr.w	SingleObjLoad
00010E5A 6600                       		bne.s	Obj28_Display
00010E5C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010E60 3368 0008 0008             		move.w	8(a0),8(a1)
00010E66 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010E6C 3028 003E                  		move.w	$3E(a0),d0
00010E70 E248                       		lsr.w	#1,d0
00010E72 1340 001A                  		move.b	d0,$1A(a1)
00010E76                            
00010E76                            Obj28_Display:
00010E76 6000 0000                  		bra.w	DisplaySprite
00010E7A                            ; ===========================================================================
00010E7A                            
00010E7A                            loc_911C:
00010E7A 117C 0012 0024             		move.b	#$12,$24(a0)
00010E80 4268 0010                  		clr.w	$10(a0)
00010E84 6000 0000                  		bra.w	DisplaySprite
00010E88                            ; ===========================================================================
00010E88                            
00010E88                            loc_912A:				; XREF: Obj28_Index
00010E88 4A28 0001                  		tst.b	1(a0)
00010E8C 6A00 0000                  		bpl.w	DeleteObject
00010E90 6100 0000                  		bsr.w	ObjectFall
00010E94 4A68 0012                  		tst.w	$12(a0)
00010E98 6B00                       		bmi.s	loc_9180
00010E9A 4EB9 0000 0000             		jsr	ObjHitFloor
00010EA0 4A41                       		tst.w	d1
00010EA2 6A00                       		bpl.s	loc_9180
00010EA4 D368 000C                  		add.w	d1,$C(a0)
00010EA8 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010EAE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010EB4 117C 0001 001A             		move.b	#1,$1A(a0)
00010EBA 1028 0030                  		move.b	$30(a0),d0
00010EBE D000                       		add.b	d0,d0
00010EC0 5800                       		addq.b	#4,d0
00010EC2 1140 0024                  		move.b	d0,$24(a0)
00010EC6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010ECA 6700                       		beq.s	loc_9180
00010ECC 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00010ED2 6700                       		beq.s	loc_9180
00010ED4 4468 0010                  		neg.w	$10(a0)
00010ED8 0868 0000 0001             		bchg	#0,1(a0)
00010EDE                            
00010EDE                            loc_9180:
00010EDE 6000 0000                  		bra.w	DisplaySprite
00010EE2                            ; ===========================================================================
00010EE2                            
00010EE2                            loc_9184:				; XREF: Obj28_Index
00010EE2 6100 0000                  		bsr.w	ObjectFall
00010EE6 117C 0001 001A             		move.b	#1,$1A(a0)
00010EEC 4A68 0012                  		tst.w	$12(a0)
00010EF0 6B00                       		bmi.s	loc_91AE
00010EF2 117C 0000 001A             		move.b	#0,$1A(a0)
00010EF8 4EB9 0000 0000             		jsr	ObjHitFloor
00010EFE 4A41                       		tst.w	d1
00010F00 6A00                       		bpl.s	loc_91AE
00010F02 D368 000C                  		add.w	d1,$C(a0)
00010F06 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F0C                            
00010F0C                            loc_91AE:
00010F0C 4A28 0028                  		tst.b	$28(a0)
00010F10 6600                       		bne.s	loc_9224
00010F12 4A28 0001                  		tst.b	1(a0)
00010F16 6A00 0000                  		bpl.w	DeleteObject
00010F1A 6000 0000                  		bra.w	DisplaySprite
00010F1E                            ; ===========================================================================
00010F1E                            
00010F1E                            loc_91C0:				; XREF: Obj28_Index
00010F1E 6100 0000                  		bsr.w	SpeedToPos
00010F22 0668 0018 0012             		addi.w	#$18,$12(a0)
00010F28 4A68 0012                  		tst.w	$12(a0)
00010F2C 6B00                       		bmi.s	loc_91FC
00010F2E 4EB9 0000 0000             		jsr	ObjHitFloor
00010F34 4A41                       		tst.w	d1
00010F36 6A00                       		bpl.s	loc_91FC
00010F38 D368 000C                  		add.w	d1,$C(a0)
00010F3C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F42 4A28 0028                  		tst.b	$28(a0)
00010F46 6700                       		beq.s	loc_91FC
00010F48 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00010F4E 6700                       		beq.s	loc_91FC
00010F50 4468 0010                  		neg.w	$10(a0)
00010F54 0868 0000 0001             		bchg	#0,1(a0)
00010F5A                            
00010F5A                            loc_91FC:
00010F5A 5328 001E                  		subq.b	#1,$1E(a0)
00010F5E 6A00                       		bpl.s	loc_9212
00010F60 117C 0001 001E             		move.b	#1,$1E(a0)
00010F66 5228 001A                  		addq.b	#1,$1A(a0)
00010F6A 0228 0001 001A             		andi.b	#1,$1A(a0)
00010F70                            
00010F70                            loc_9212:
00010F70 4A28 0028                  		tst.b	$28(a0)
00010F74 6600                       		bne.s	loc_9224
00010F76 4A28 0001                  		tst.b	1(a0)
00010F7A 6A00 0000                  		bpl.w	DeleteObject
00010F7E 6000 0000                  		bra.w	DisplaySprite
00010F82                            ; ===========================================================================
00010F82                            
00010F82                            loc_9224:				; XREF: Obj28_Index
00010F82 3028 0008                  		move.w	8(a0),d0
00010F86 9078 D008                  		sub.w	($FFFFD008).w,d0
00010F8A 6500                       		bcs.s	loc_923C
00010F8C 0440 0180                  		subi.w	#$180,d0
00010F90 6A00                       		bpl.s	loc_923C
00010F92 4A28 0001                  		tst.b	1(a0)
00010F96 6A00 0000                  		bpl.w	DeleteObject
00010F9A                            
00010F9A                            loc_923C:
00010F9A 6000 0000                  		bra.w	DisplaySprite
00010F9E                            ; ===========================================================================
00010F9E                            
00010F9E                            loc_9240:				; XREF: Obj28_Index
00010F9E 4A28 0001                  		tst.b	1(a0)
00010FA2 6A00 0000                  		bpl.w	DeleteObject
00010FA6 5368 0036                  		subq.w	#1,$36(a0)
00010FAA 6600 0000                  		bne.w	loc_925C
00010FAE 117C 0002 0024             		move.b	#2,$24(a0)
00010FB4 317C 0180 0018             		move.w	#$180,priority(a0)
00010FBA                            
00010FBA                            loc_925C:
00010FBA 6000 0000                  		bra.w	DisplaySprite
00010FBE                            ; ===========================================================================
00010FBE                            
00010FBE                            loc_9260:				; XREF: Obj28_Index
00010FBE 6100 0000                  		bsr.w	sub_9404
00010FC2 6400                       		bcc.s	loc_927C
00010FC4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010FCA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010FD0 117C 000E 0024             		move.b	#$E,$24(a0)
00010FD6 6000 FF46                  		bra.w	loc_91C0
00010FDA                            ; ===========================================================================
00010FDA                            
00010FDA                            loc_927C:
00010FDA 6000 FFA6                  		bra.w	loc_9224
00010FDE                            ; ===========================================================================
00010FDE                            
00010FDE                            loc_9280:				; XREF: Obj28_Index
00010FDE 6100 0000                  		bsr.w	sub_9404
00010FE2 6A00                       		bpl.s	loc_92B6
00010FE4 4268 0010                  		clr.w	$10(a0)
00010FE8 4268 0032                  		clr.w	$32(a0)
00010FEC 6100 0000                  		bsr.w	SpeedToPos
00010FF0 0668 0018 0012             		addi.w	#$18,$12(a0)
00010FF6 6100 0000                  		bsr.w	loc_93C4
00010FFA 6100 0000                  		bsr.w	loc_93EC
00010FFE 5328 001E                  		subq.b	#1,$1E(a0)
00011002 6A00                       		bpl.s	loc_92B6
00011004 117C 0001 001E             		move.b	#1,$1E(a0)
0001100A 5228 001A                  		addq.b	#1,$1A(a0)
0001100E 0228 0001 001A             		andi.b	#1,$1A(a0)
00011014                            
00011014                            loc_92B6:
00011014 6000 FF6C                  		bra.w	loc_9224
00011018                            ; ===========================================================================
00011018                            
00011018                            loc_92BA:				; XREF: Obj28_Index
00011018 6100 0000                  		bsr.w	sub_9404
0001101C 6A00                       		bpl.s	loc_9310
0001101E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00011024 3168 0034 0012             		move.w	$34(a0),$12(a0)
0001102A 117C 0004 0024             		move.b	#4,$24(a0)
00011030 6000 FEB0                  		bra.w	loc_9184
00011034                            ; ===========================================================================
00011034                            
00011034                            loc_92D6:				; XREF: Obj28_Index
00011034 6100 0000                  		bsr.w	ObjectFall
00011038 117C 0001 001A             		move.b	#1,$1A(a0)
0001103E 4A68 0012                  		tst.w	$12(a0)
00011042 6B00                       		bmi.s	loc_9310
00011044 117C 0000 001A             		move.b	#0,$1A(a0)
0001104A 4EB9 0000 0000             		jsr	ObjHitFloor
00011050 4A41                       		tst.w	d1
00011052 6A00                       		bpl.s	loc_9310
00011054 4628 0029                  		not.b	$29(a0)
00011058 6600                       		bne.s	loc_9306
0001105A 4468 0010                  		neg.w	$10(a0)
0001105E 0868 0000 0001             		bchg	#0,1(a0)
00011064                            
00011064                            loc_9306:
00011064 D368 000C                  		add.w	d1,$C(a0)
00011068 3168 0034 0012             		move.w	$34(a0),$12(a0)
0001106E                            
0001106E                            loc_9310:
0001106E 6000 FF12                  		bra.w	loc_9224
00011072                            ; ===========================================================================
00011072                            
00011072                            loc_9314:				; XREF: Obj28_Index
00011072 6100 0000                  		bsr.w	sub_9404
00011076 6A00                       		bpl.s	loc_932E
00011078 4268 0010                  		clr.w	$10(a0)
0001107C 4268 0032                  		clr.w	$32(a0)
00011080 6100 0000                  		bsr.w	ObjectFall
00011084 6100 0000                  		bsr.w	loc_93C4
00011088 6100 0000                  		bsr.w	loc_93EC
0001108C                            
0001108C                            loc_932E:
0001108C 6000 FEF4                  		bra.w	loc_9224
00011090                            ; ===========================================================================
00011090                            
00011090                            loc_9332:				; XREF: Obj28_Index
00011090 6100 0000                  		bsr.w	sub_9404
00011094 6A00                       		bpl.s	loc_936C
00011096 6100 0000                  		bsr.w	ObjectFall
0001109A 117C 0001 001A             		move.b	#1,$1A(a0)
000110A0 4A68 0012                  		tst.w	$12(a0)
000110A4 6B00                       		bmi.s	loc_936C
000110A6 117C 0000 001A             		move.b	#0,$1A(a0)
000110AC 4EB9 0000 0000             		jsr	ObjHitFloor
000110B2 4A41                       		tst.w	d1
000110B4 6A00                       		bpl.s	loc_936C
000110B6 4468 0010                  		neg.w	$10(a0)
000110BA 0868 0000 0001             		bchg	#0,1(a0)
000110C0 D368 000C                  		add.w	d1,$C(a0)
000110C4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000110CA                            
000110CA                            loc_936C:
000110CA 6000 FEB6                  		bra.w	loc_9224
000110CE                            ; ===========================================================================
000110CE                            
000110CE                            loc_9370:				; XREF: Obj28_Index
000110CE 6100 0000                  		bsr.w	sub_9404
000110D2 6A00                       		bpl.s	loc_93C0
000110D4 6100 0000                  		bsr.w	SpeedToPos
000110D8 0668 0018 0012             		addi.w	#$18,$12(a0)
000110DE 4A68 0012                  		tst.w	$12(a0)
000110E2 6B00                       		bmi.s	loc_93AA
000110E4 4EB9 0000 0000             		jsr	ObjHitFloor
000110EA 4A41                       		tst.w	d1
000110EC 6A00                       		bpl.s	loc_93AA
000110EE 4628 0029                  		not.b	$29(a0)
000110F2 6600                       		bne.s	loc_93A0
000110F4 4468 0010                  		neg.w	$10(a0)
000110F8 0868 0000 0001             		bchg	#0,1(a0)
000110FE                            
000110FE                            loc_93A0:
000110FE D368 000C                  		add.w	d1,$C(a0)
00011102 3168 0034 0012             		move.w	$34(a0),$12(a0)
00011108                            
00011108                            loc_93AA:
00011108 5328 001E                  		subq.b	#1,$1E(a0)
0001110C 6A00                       		bpl.s	loc_93C0
0001110E 117C 0001 001E             		move.b	#1,$1E(a0)
00011114 5228 001A                  		addq.b	#1,$1A(a0)
00011118 0228 0001 001A             		andi.b	#1,$1A(a0)
0001111E                            
0001111E                            loc_93C0:
0001111E 6000 FE62                  		bra.w	loc_9224
00011122                            ; ===========================================================================
00011122                            
00011122                            loc_93C4:
00011122 117C 0001 001A             		move.b	#1,$1A(a0)
00011128 4A68 0012                  		tst.w	$12(a0)
0001112C 6B00                       		bmi.s	locret_93EA
0001112E 117C 0000 001A             		move.b	#0,$1A(a0)
00011134 4EB9 0000 0000             		jsr	ObjHitFloor
0001113A 4A41                       		tst.w	d1
0001113C 6A00                       		bpl.s	locret_93EA
0001113E D368 000C                  		add.w	d1,$C(a0)
00011142 3168 0034 0012             		move.w	$34(a0),$12(a0)
00011148                            
00011148                            locret_93EA:
00011148 4E75                       		rts	
0001114A                            ; ===========================================================================
0001114A                            
0001114A                            loc_93EC:
0001114A 08E8 0000 0001             		bset	#0,1(a0)
00011150 3028 0008                  		move.w	8(a0),d0
00011154 9078 D008                  		sub.w	($FFFFD008).w,d0
00011158 6400                       		bcc.s	locret_9402
0001115A 08A8 0000 0001             		bclr	#0,1(a0)
00011160                            
00011160                            locret_9402:
00011160 4E75                       		rts	
00011162                            
00011162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011162                            
00011162                            
00011162                            sub_9404:
00011162 3038 D008                  		move.w	($FFFFD008).w,d0
00011166 9068 0008                  		sub.w	8(a0),d0
0001116A 0440 00B8                  		subi.w	#$B8,d0
0001116E 4E75                       		rts	
00011170                            ; End of function sub_9404
00011170                            
00011170                            ; ===========================================================================
00011170                            ; ---------------------------------------------------------------------------
00011170                            ; Object 29 - points that appear when you destroy something
00011170                            ; ---------------------------------------------------------------------------
00011170                            
00011170                            Obj29:					; XREF: Obj_Index
00011170 223C 0000 0000             		move.l	#Unc_Points,d1			        ; Call for Regular Shield Art
00011176 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
0001117A 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w
00011180 6700 0000                  		beq.w	nextloc
00011184 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
00011188                            								; In this case, VRAM = $541*20
00011188                            nextloc:
00011188 363C 0090                  		move.w	#$90,d3
0001118C 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
00011192 7000                       		moveq	#0,d0
00011194 1028 0024                  		move.b	$24(a0),d0
00011198 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0001119C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000111A0 6000 0000                  		bra.w	DisplaySprite
000111A4                            ; ===========================================================================
000111A4 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000111A6 0000                       		dc.w Obj29_Slower-Obj29_Index
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Obj29_Main:				; XREF: Obj29_Index
000111A8 5428 0024                  		addq.b	#2,$24(a0)
000111AC 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000111B4 317C 255E 0002             		move.w	#$255E,2(a0)
000111BA 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w
000111C0 6700 0000                  		beq.w	nextloc2
000111C4 317C 2541 0002             		move.w	#$2541,2(a0)
000111CA                            nextloc2:
000111CA 117C 0004 0001             		move.b	#4,1(a0)
000111D0 317C 0080 0018             		move.w	#$80,priority(a0)
000111D6 117C 0008 0023             		move.b	#8,width_pixels(a0)
000111DC 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000111E2                            
000111E2                            Obj29_Slower:				; XREF: Obj29_Index
000111E2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000111E6 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000111EA 6100 0000                  		bsr.w	SpeedToPos
000111EE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000111F4 4E75                       		rts	
000111F6                            ; ===========================================================================
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            ; Sprite mappings - animals
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            Map_obj28:
000111F6                            	include '_maps\obj28.asm'
000111F6                            ; ---------------------------------------------------------------------------
000111F6                            ; Sprite mappings - animals
000111F6                            ; ---------------------------------------------------------------------------
000111F6 0000                       		dc.w byte_9472-Map_obj28
000111F8 0000                       		dc.w byte_9478-Map_obj28
000111FA 0000                       		dc.w byte_946C-Map_obj28
000111FC 01                         byte_946C:	dc.b 1
000111FD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011202 01                         byte_9472:	dc.b 1
00011203 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00011208 01                         byte_9478:	dc.b 1
00011209 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0001120E                            		even
0001120E                            		even
0001120E                            
0001120E                            Map_obj28a:
0001120E                            	include '_maps\obj28a.asm'
0001120E                            ; ---------------------------------------------------------------------------
0001120E                            ; Sprite mappings - animals
0001120E                            ; ---------------------------------------------------------------------------
0001120E 0000                       		dc.w byte_948A-Map_obj28a
00011210 0000                       		dc.w byte_9490-Map_obj28a
00011212 0000                       		dc.w byte_9484-Map_obj28a
00011214 01                         byte_9484:	dc.b 1
00011215 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001121A 01                         byte_948A:	dc.b 1
0001121B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00011220 01                         byte_9490:	dc.b 1
00011221 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00011226                            		even
00011226                            		even
00011226                            
00011226                            Map_obj28b:
00011226                            	include '_maps\obj28b.asm'
00011226                            ; ---------------------------------------------------------------------------
00011226                            ; Sprite mappings - animals
00011226                            ; ---------------------------------------------------------------------------
00011226 0000                       		dc.w byte_94A2-Map_obj28b
00011228 0000                       		dc.w byte_94A8-Map_obj28b
0001122A 0000                       		dc.w byte_949C-Map_obj28b
0001122C 01                         byte_949C:	dc.b 1
0001122D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011232 01                         byte_94A2:	dc.b 1
00011233 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00011238 01                         byte_94A8:	dc.b 1
00011239 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0001123E                            		even
0001123E                            		even
0001123E                            
0001123E                            ; ---------------------------------------------------------------------------
0001123E                            ; Sprite mappings - points that	appear when you	destroy	something
0001123E                            ; ---------------------------------------------------------------------------
0001123E                            Map_obj29:
0001123E                            	include '_maps\obj29.asm'
0001123E                            ; ---------------------------------------------------------------------------
0001123E                            ; Sprite mappings - points that	appear when you	destroy	something
0001123E                            ; ---------------------------------------------------------------------------
0001123E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00011242 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00011246 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0001124A 0000                       		dc.w byte_94E5-Map_obj29
0001124C 01                         byte_94BC:	dc.b 1
0001124D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00011252 01                         byte_94C2:	dc.b 1
00011253 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00011258 01                         byte_94C8:	dc.b 1
00011259 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0001125E 01                         byte_94CE:	dc.b 1
0001125F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00011264 01                         byte_94D4:	dc.b 1
00011265 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0001126A 02                         byte_94DA:	dc.b 2
0001126B FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00011270 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00011275 02                         byte_94E5:	dc.b 2
00011276 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0001127B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00011280                            		even
00011280                            		even
00011280                            
00011280                            ; ===========================================================================
00011280                            ; ---------------------------------------------------------------------------
00011280                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00011280                            ; ---------------------------------------------------------------------------
00011280                            
00011280                            Obj1F:					; XREF: Obj_Index
00011280 7000                       		moveq	#0,d0
00011282 1028 0024                  		move.b	routine(a0),d0
00011286 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0001128A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0001128E                            ; ===========================================================================
0001128E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00011290 0000                       		dc.w Obj1F_Action-Obj1F_Index
00011292 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00011294 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00011296 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj1F_Main:				; XREF: Obj1F_Index
00011298 117C 0010 0016             		move.b	#$10,$16(a0)
0001129E 117C 0008 0017             		move.b	#8,$17(a0)
000112A4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000112AC 317C 0400 0002             		move.w	#$400,2(a0)
000112B2 117C 0004 0001             		move.b	#4,1(a0)
000112B8 317C 0180 0018             		move.w	#$180,priority(a0)
000112BE 117C 0006 0020             		move.b	#6,collision_flags(a0)
000112C4 117C 0015 0023             		move.b	#$15,width_pixels(a0)
000112CA 4EB9 0000 0000             		jsr	ObjectFall
000112D0 4EB9 0000 0000             		jsr	ObjHitFloor
000112D6 4A41                       		tst.w	d1
000112D8 6A00                       		bpl.s	locret_955A
000112DA D368 000C                  		add.w	d1,$C(a0)
000112DE 1143 0026                  		move.b	d3,$26(a0)
000112E2 317C 0000 0012             		move.w	#0,y_vel(a0)
000112E8 5428 0024                  		addq.b	#2,routine(a0)
000112EC                            
000112EC                            locret_955A:
000112EC 4E75                       		rts	
000112EE                            ; ===========================================================================
000112EE                            
000112EE                            Obj1F_Action:				; XREF: Obj1F_Index
000112EE 7000                       		moveq	#0,d0
000112F0 1028 0025                  		move.b	routine_secondary(a0),d0
000112F4 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000112F8 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000112FC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00011302 4EB9 0000 0000             		jsr	AnimateSprite
00011308 4EF9 0000 0000             		jmp	MarkObjGone
0001130E                            ; ===========================================================================
0001130E 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00011310 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00011312                            ; ===========================================================================
00011312                            
00011312                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00011312 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011316 6A00                       		bpl.s	locret_95B6
00011318 4A28 0001                  		tst.b	1(a0)
0001131C 6A00                       		bpl.s	Obj1F_Move
0001131E 0868 0001 0032             		bchg	#1,$32(a0)
00011324 6600                       		bne.s	Obj1F_MakeFire
00011326                            
00011326                            Obj1F_Move:
00011326 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001132A 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00011330 317C 0080 0010             		move.w	#$80,x_vel(a0)	; move Crabmeat	to the right
00011336 4EB9 0000 0000             		jsr	Obj1F_SetAni
0001133C 5600                       		addq.b	#3,d0
0001133E 1140 001C                  		move.b	d0,anim(a0)
00011342 0868 0000 0022             		bchg	#0,status(a0)
00011348 6600                       		bne.s	locret_95B6
0001134A 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001134E                            
0001134E                            locret_95B6:
0001134E 4E75                       		rts	
00011350                            ; ===========================================================================
00011350                            
00011350                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00011350 317C 003B 0030             		move.w	#$3B,$30(a0)
00011356 117C 0006 001C             		move.b	#6,anim(a0)	; use firing animation
0001135C 4EB9 0000 0000             		jsr	SingleObjLoad
00011362 6600                       		bne.s	Obj1F_MakeFire2
00011364 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00011368 137C 0006 0024             		move.b	#6,routine(a1)
0001136E 3368 0008 0008             		move.w	8(a0),8(a1)
00011374 0469 0010 0008             		subi.w	#$10,8(a1)
0001137A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011380 337C FF00 0010             		move.w	#-$100,x_vel(a1)
00011386                            
00011386                            Obj1F_MakeFire2:
00011386 4EB9 0000 0000             		jsr	SingleObjLoad
0001138C 6600                       		bne.s	locret_9618
0001138E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00011392 137C 0006 0024             		move.b	#6,routine(a1)
00011398 3368 0008 0008             		move.w	8(a0),8(a1)
0001139E 0669 0010 0008             		addi.w	#$10,8(a1)
000113A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000113AA 337C 0100 0010             		move.w	#$100,x_vel(a1)
000113B0                            
000113B0                            locret_9618:
000113B0 4E75                       		rts	
000113B2                            ; ===========================================================================
000113B2                            
000113B2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000113B2 5368 0030                  		subq.w	#1,$30(a0)
000113B6 6B00                       		bmi.s	loc_966E
000113B8 4EB9 0000 0000             		jsr	SpeedToPos
000113BE 0868 0000 0032             		bchg	#0,$32(a0)
000113C4 6600                       		bne.s	loc_9654
000113C6 3628 0008                  		move.w	8(a0),d3
000113CA 0643 0010                  		addi.w	#$10,d3
000113CE 0828 0000 0022             		btst	#0,status(a0)
000113D4 6700                       		beq.s	loc_9640
000113D6 0443 0020                  		subi.w	#$20,d3
000113DA                            
000113DA                            loc_9640:
000113DA 4EB9 0000 0000             		jsr	ObjHitFloor2
000113E0 0C41 FFF8                  		cmpi.w	#-8,d1
000113E4 6D00                       		blt.s	loc_966E
000113E6 0C41 000C                  		cmpi.w	#$C,d1
000113EA 6C00                       		bge.s	loc_966E
000113EC 4E75                       		rts	
000113EE                            ; ===========================================================================
000113EE                            
000113EE                            loc_9654:				; XREF: Obj1F_WalkOnFloor
000113EE 4EB9 0000 0000             		jsr	ObjHitFloor
000113F4 D368 000C                  		add.w	d1,$C(a0)
000113F8 1143 0026                  		move.b	d3,$26(a0)
000113FC 4EB9 0000 0000             		jsr	Obj1F_SetAni
00011402 5600                       		addq.b	#3,d0
00011404 1140 001C                  		move.b	d0,anim(a0)
00011408 4E75                       		rts	
0001140A                            ; ===========================================================================
0001140A                            
0001140A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0001140A 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001140E 317C 003B 0030             		move.w	#59,$30(a0)
00011414 317C 0000 0010             		move.w	#0,x_vel(a0)
0001141A 4EB9 0000 0000             		jsr	Obj1F_SetAni
00011420 1140 001C                  		move.b	d0,anim(a0)
00011424 4E75                       		rts	
00011426                            ; ---------------------------------------------------------------------------
00011426                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00011426                            ; ---------------------------------------------------------------------------
00011426                            
00011426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011426                            
00011426                            
00011426                            Obj1F_SetAni:				; XREF: loc_966E
00011426 7000                       		moveq	#0,d0
00011428 1628 0026                  		move.b	$26(a0),d3
0001142C 6B00                       		bmi.s	loc_96A4
0001142E 0C03 0006                  		cmpi.b	#6,d3
00011432 6500                       		bcs.s	locret_96A2
00011434 7001                       		moveq	#1,d0
00011436 0828 0000 0022             		btst	#0,status(a0)
0001143C 6600                       		bne.s	locret_96A2
0001143E 7002                       		moveq	#2,d0
00011440                            
00011440                            locret_96A2:
00011440 4E75                       		rts	
00011442                            ; ===========================================================================
00011442                            
00011442                            loc_96A4:				; XREF: Obj1F_SetAni
00011442 0C03 00FA                  		cmpi.b	#-6,d3
00011446 6200                       		bhi.s	locret_96B6
00011448 7002                       		moveq	#2,d0
0001144A 0828 0000 0022             		btst	#0,status(a0)
00011450 6600                       		bne.s	locret_96B6
00011452 7001                       		moveq	#1,d0
00011454                            
00011454                            locret_96B6:
00011454 4E75                       		rts	
00011456                            ; End of function Obj1F_SetAni
00011456                            
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj1F_Delete:				; XREF: Obj1F_Index
00011456 4EB9 0000 0000             		jsr	DeleteObject
0001145C 4E75                       		rts	
0001145E                            ; ===========================================================================
0001145E                            ; ---------------------------------------------------------------------------
0001145E                            ; Sub-object - missile that the	Crabmeat throws
0001145E                            ; ---------------------------------------------------------------------------
0001145E                            
0001145E                            Obj1F_BallMain:				; XREF: Obj1F_Index
0001145E 5428 0024                  		addq.b	#2,routine(a0)
00011462 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0001146A 317C 0400 0002             		move.w	#$400,2(a0)
00011470 117C 0004 0001             		move.b	#4,1(a0)
00011476 317C 0180 0018             		move.w	#$180,priority(a0)
0001147C 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00011482 117C 0008 0023             		move.b	#8,width_pixels(a0)
00011488 317C FC00 0012             		move.w	#-$400,y_vel(a0)
0001148E 117C 0007 001C             		move.b	#7,anim(a0)
00011494                            
00011494                            Obj1F_BallMove:				; XREF: Obj1F_Index
00011494 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0001149A 4EB9 0000 0000             		jsr	AnimateSprite
000114A0 4EB9 0000 0000             		jsr	ObjectFall
000114A6 4EB9 0000 0000             		jsr	DisplaySprite
000114AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000114B0 0640 00E0                  		addi.w	#$E0,d0
000114B4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000114B8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000114BA 4E75                       		rts	
000114BC                            ; ===========================================================================
000114BC                            
000114BC                            Obj1F_Delete2:
000114BC 6000 0000                  		bra.w	DeleteObject
000114C0                            ; ===========================================================================
000114C0                            Ani_obj1F:
000114C0                            	include "_anim\obj1F.asm"
000114C0                            ; ---------------------------------------------------------------------------
000114C0                            ; Animation script - Crabmeat enemy
000114C0                            ; ---------------------------------------------------------------------------
000114C0 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
000114C6 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
000114CC 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
000114D0 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000114D4 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
000114D8 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
000114DC 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000114E2 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000114E8 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
000114EE 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
000114F2 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
000114F6                            		even
000114F6                            		even
000114F6                            
000114F6                            ; ---------------------------------------------------------------------------
000114F6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000114F6                            ; ---------------------------------------------------------------------------
000114F6                            Map_obj1F:
000114F6                            	include "_maps\obj1F.asm"
000114F6                            ; ---------------------------------------------------------------------------
000114F6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000114F6                            ; ---------------------------------------------------------------------------
000114F6 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
000114FA 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
000114FE 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00011502 0000                       		dc.w byte_97D7-Map_obj1F
00011504 04                         byte_975E:	dc.b 4
00011505 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0001150A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0001150F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00011514 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00011519 04                         byte_9773:	dc.b 4
0001151A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0001151F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00011524 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00011529 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0001152E 04                         byte_9788:	dc.b 4
0001152F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00011534 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00011539 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0001153E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00011543 04                         byte_979D:	dc.b 4
00011544 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00011549 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0001154E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00011553 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00011558 06                         byte_97B2:	dc.b 6
00011559 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0001155E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00011563 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00011568 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0001156D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00011572 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00011577 01                         byte_97D1:	dc.b 1
00011578 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0001157D 01                         byte_97D7:	dc.b 1
0001157E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00011584 00                         		even
00011584 00                         		even
00011584                            
00011584                            ; ===========================================================================
00011584                            ; ---------------------------------------------------------------------------
00011584                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00011584                            ; ---------------------------------------------------------------------------
00011584                            
00011584                            Obj22:					; XREF: Obj_Index
00011584 7000                       		moveq	#0,d0
00011586 1028 0024                  		move.b	routine(a0),d0
0001158A 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0001158E 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00011592                            ; ===========================================================================
00011592 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00011594 0000                       		dc.w Obj22_Action-Obj22_Index
00011596 0000                       		dc.w Obj22_Delete-Obj22_Index
00011598                            ; ===========================================================================
00011598                            
00011598                            Obj22_Main:				; XREF: Obj22_Index
00011598 5428 0024                  		addq.b	#2,routine(a0)
0001159C 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000115A4 317C 0444 0002             		move.w	#$444,2(a0)
000115AA 117C 0004 0001             		move.b	#4,1(a0)
000115B0 317C 0180 0018             		move.w	#$180,priority(a0)
000115B6 117C 0008 0020             		move.b	#8,collision_flags(a0)
000115BC 117C 0018 0023             		move.b	#$18,width_pixels(a0)
000115C2                            
000115C2                            Obj22_Action:				; XREF: Obj22_Index
000115C2 7000                       		moveq	#0,d0
000115C4 1028 0025                  		move.b	routine_secondary(a0),d0
000115C8 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
000115CC 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
000115D0 43F9 0000 0000             		lea	(Ani_obj22).l,a1
000115D6 4EB9 0000 0000             		jsr	AnimateSprite
000115DC 6000 0000                  		bra.w	MarkObjGone
000115E0                            ; ===========================================================================
000115E0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000115E2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000115E4                            ; ===========================================================================
000115E4                            
000115E4                            Obj22_Move:				; XREF: Obj22_Index2
000115E4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000115E8 6A00                       		bpl.s	locret_986C	; if time remains, branch
000115EA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
000115F0 6600                       		bne.s	Obj22_Fire	; if yes, branch
000115F2 5428 0025                  		addq.b	#2,routine_secondary(a0)
000115F6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
000115FC 317C 0400 0010             		move.w	#$400,x_vel(a0)	; move Buzz Bomber to the right
00011602 117C 0001 001C             		move.b	#1,anim(a0)	; use "flying" animation
00011608 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
0001160E 6600                       		bne.s	locret_986C	; if not, branch
00011610 4468 0010                  		neg.w	x_vel(a0)		; move Buzz Bomber to the left
00011614                            
00011614                            locret_986C:
00011614 4E75                       		rts	
00011616                            ; ===========================================================================
00011616                            
00011616                            Obj22_Fire:				; XREF: Obj22_Move
00011616 4EB9 0000 0000             		jsr	SingleObjLoad
0001161C 6600                       		bne.s	locret_98D0
0001161E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00011622 3368 0008 0008             		move.w	8(a0),8(a1)
00011628 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001162E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00011634 337C 0200 0012             		move.w	#$200,y_vel(a1)	; move missile downwards
0001163A 337C 0200 0010             		move.w	#$200,x_vel(a1)	; move missile to the right
00011640 303C 0018                  		move.w	#$18,d0
00011644 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
0001164A 6600                       		bne.s	loc_98AA	; if not, branch
0001164C 4440                       		neg.w	d0
0001164E 4469 0010                  		neg.w	x_vel(a1)		; move missile to the left
00011652                            
00011652                            loc_98AA:
00011652 D169 0008                  		add.w	d0,8(a1)
00011656 1368 0022 0022             		move.b	status(a0),status(a1)
0001165C 337C 000E 0032             		move.w	#$E,$32(a1)
00011662 2348 003C                  		move.l	a0,$3C(a1)
00011666 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0001166C 317C 003B 0032             		move.w	#$3B,$32(a0)
00011672 117C 0002 001C             		move.b	#2,anim(a0)	; use "firing" animation
00011678                            
00011678                            locret_98D0:
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0001167A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001167E 6B00                       		bmi.s	Obj22_ChgDir
00011680 4EB9 0000 0000             		jsr	SpeedToPos
00011686 4A28 0034                  		tst.b	$34(a0)
0001168A 6600                       		bne.s	locret_992A
0001168C 3038 D008                  		move.w	($FFFFD008).w,d0
00011690 9068 0008                  		sub.w	8(a0),d0
00011694 6A00                       		bpl.s	Obj22_SetNrSonic
00011696 4440                       		neg.w	d0
00011698                            
00011698                            Obj22_SetNrSonic:
00011698 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0001169C 6400                       		bcc.s	locret_992A	; if not, branch
0001169E 4A28 0001                  		tst.b	1(a0)
000116A2 6A00                       		bpl.s	locret_992A
000116A4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000116AA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000116B0 6000                       		bra.s	Obj22_Stop
000116B2                            ; ===========================================================================
000116B2                            
000116B2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000116B2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000116B8 0868 0000 0022             		bchg	#0,status(a0)	; change direction
000116BE 317C 003B 0032             		move.w	#59,$32(a0)
000116C4                            
000116C4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
000116C4 5528 0025                  		subq.b	#2,routine_secondary(a0)	; run "Obj22_Fire" routine
000116C8 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Buzz Bomber moving
000116CE 117C 0000 001C             		move.b	#0,anim(a0)	; use "hovering" animation
000116D4                            
000116D4                            locret_992A:
000116D4 4E75                       		rts	
000116D6                            ; ===========================================================================
000116D6                            
000116D6                            Obj22_Delete:				; XREF: Obj22_Index
000116D6 4EB9 0000 0000             		jsr	DeleteObject
000116DC 4E75                       		rts	
000116DE                            ; ===========================================================================
000116DE                            ; ---------------------------------------------------------------------------
000116DE                            ; Object 23 - missile that Buzz	Bomber throws
000116DE                            ; ---------------------------------------------------------------------------
000116DE                            
000116DE                            Obj23:					; XREF: Obj_Index
000116DE 7000                       		moveq	#0,d0
000116E0 1028 0024                  		move.b	routine(a0),d0
000116E4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000116E8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000116EC                            ; ===========================================================================
000116EC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000116EE 0000                       		dc.w Obj23_Animate-Obj23_Index
000116F0 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000116F2 0000                       		dc.w Obj23_Delete-Obj23_Index
000116F4 0000                       		dc.w Obj23_FromNewt-Obj23_Index
000116F6                            ; ===========================================================================
000116F6                            
000116F6                            Obj23_Main:				; XREF: Obj23_Index
000116F6 5368 0032                  		subq.w	#1,$32(a0)
000116FA 6A00                       		bpl.s	Obj23_ChkCancel
000116FC 5428 0024                  		addq.b	#2,routine(a0)
00011700 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00011708 317C 2444 0002             		move.w	#$2444,2(a0)
0001170E 117C 0004 0001             		move.b	#4,1(a0)
00011714 317C 0180 0018             		move.w	#$180,priority(a0)
0001171A 117C 0008 0023             		move.b	#8,width_pixels(a0)
00011720 0228 0003 0022             		andi.b	#3,status(a0)
00011726 4A28 0028                  		tst.b	subtype(a0)		; was object created by	a Newtron?
0001172A 6700                       		beq.s	Obj23_Animate	; if not, branch
0001172C 117C 0008 0024             		move.b	#8,routine(a0)	; run "Obj23_FromNewt" routine
00011732 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00011738 117C 0001 001C             		move.b	#1,anim(a0)
0001173E 6000                       		bra.s	Obj23_Animate2
00011740                            ; ===========================================================================
00011740                            
00011740                            Obj23_Animate:				; XREF: Obj23_Index
00011740 6100                       		bsr.s	Obj23_ChkCancel
00011742 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00011748 4EB9 0000 0000             		jsr	AnimateSprite
0001174E 6000 0000                  		bra.w	DisplaySprite
00011752                            ; ---------------------------------------------------------------------------
00011752                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00011752                            ; destroyed, and if it has, then cancel	the missile
00011752                            ; ---------------------------------------------------------------------------
00011752                            
00011752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011752                            
00011752                            
00011752                            Obj23_ChkCancel:			; XREF: Obj23_Main
00011752 2268 003C                  		movea.l	$3C(a0),a1
00011756 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0001175A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0001175C 4E75                       		rts	
0001175E                            ; End of function Obj23_ChkCancel
0001175E                            
0001175E                            ; ===========================================================================
0001175E                            
0001175E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0001175E 0828 0007 0022             		btst	#7,status(a0)
00011764 6600                       		bne.s	Obj23_Explode
00011766 117C 0087 0020             		move.b	#$87,collision_flags(a0)
0001176C 117C 0001 001C             		move.b	#1,anim(a0)
00011772 4EB9 0000 0000             		jsr	SpeedToPos
00011778 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0001177E 4EB9 0000 0000             		jsr	AnimateSprite
00011784 4EB9 0000 0000             		jsr	DisplaySprite
0001178A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001178E 0640 00E0                  		addi.w	#$E0,d0
00011792 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00011796 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00011798 4E75                       		rts	
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0001179A 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0001179E 117C 0000 0024             		move.b	#0,routine(a0)
000117A4 6000 F28A                  		bra.w	Obj24
000117A8                            ; ===========================================================================
000117A8                            
000117A8                            Obj23_Delete:				; XREF: Obj23_Index
000117A8 4EB9 0000 0000             		jsr	DeleteObject
000117AE 4E75                       		rts	
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj23_FromNewt:				; XREF: Obj23_Index
000117B0 4A28 0001                  		tst.b	1(a0)
000117B4 6AF2                       		bpl.s	Obj23_Delete
000117B6 4EB9 0000 0000             		jsr	SpeedToPos
000117BC                            
000117BC                            Obj23_Animate2:				; XREF: Obj23_Main
000117BC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
000117C2 4EB9 0000 0000             		jsr	AnimateSprite
000117C8 4EB9 0000 0000             		jsr	DisplaySprite
000117CE 4E75                       		rts	
000117D0                            ; ===========================================================================
000117D0                            Ani_obj22:
000117D0                            	include "_anim\obj22.asm"
000117D0                            ; ---------------------------------------------------------------------------
000117D0                            ; Animation script - Buzz Bomber enemy
000117D0                            ; ---------------------------------------------------------------------------
000117D0 0000                       		dc.w byte_9A1E-Ani_obj22
000117D2 0000                       		dc.w byte_9A22-Ani_obj22
000117D4 0000                       		dc.w byte_9A26-Ani_obj22
000117D6 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
000117DA 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
000117DE 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000117E2                            		even
000117E2                            		even
000117E2                            
000117E2                            Ani_obj23:
000117E2                            	include "_anim\obj23.asm"
000117E2                            ; ---------------------------------------------------------------------------
000117E2                            ; Animation script - missile that Buzz Bomber throws
000117E2                            ; ---------------------------------------------------------------------------
000117E2 0000                       		dc.w byte_9A2E-Ani_obj23
000117E4 0000                       		dc.w byte_9A32-Ani_obj23
000117E6 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
000117EA 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
000117EE                            		even
000117EE                            		even
000117EE                            
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            ; Sprite mappings - Buzz Bomber	enemy
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            Map_obj22:
000117EE                            	include "_maps\obj22.asm"
000117EE                            ; ---------------------------------------------------------------------------
000117EE                            ; Sprite mappings - Buzz Bomber	enemy
000117EE                            ; ---------------------------------------------------------------------------
000117EE 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
000117F2 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
000117F6 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
000117FA 06                         byte_9A42:	dc.b 6
000117FB F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011800 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011805 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0001180A 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0001180F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00011814 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00011819 06                         byte_9A61:	dc.b 6
0001181A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0001181F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011824 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00011829 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0001182E F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00011833 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00011838 07                         byte_9A80:	dc.b 7
00011839 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0001183E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011843 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011848 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0001184D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00011852 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00011857 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0001185C 07                         byte_9AA4:	dc.b 7
0001185D 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00011862 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011867 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0001186C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00011871 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00011876 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0001187B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00011880 06                         byte_9AC8:	dc.b 6
00011881 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00011886 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0001188B 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00011890 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00011895 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0001189A F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0001189F 04                         byte_9AE7:	dc.b 4
000118A0 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
000118A5 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
000118AA 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
000118AF 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
000118B4 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
000118B9 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
000118BE                            		even
000118BE                            		even
000118BE                            
000118BE                            ; ---------------------------------------------------------------------------
000118BE                            ; Sprite mappings - missile that Buzz Bomber throws
000118BE                            ; ---------------------------------------------------------------------------
000118BE                            Map_obj23:
000118BE                            	include "_maps\obj23.asm"
000118BE                            ; ---------------------------------------------------------------------------
000118BE                            ; Sprite mappings - missile that Buzz Bomber throws
000118BE                            ; ---------------------------------------------------------------------------
000118BE 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
000118C2 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
000118C6 01                         byte_9B0E:	dc.b 1
000118C7 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
000118CC 01                         byte_9B14:	dc.b 1
000118CD F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
000118D2 01                         byte_9B1A:	dc.b 1
000118D3 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
000118D8 01                         byte_9B20:	dc.b 1
000118D9 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
000118DE                            		even
000118DE                            		even
000118DE                            
000118DE                            ; ===========================================================================
000118DE                            ; ---------------------------------------------------------------------------
000118DE                            ; Object 25 - rings
000118DE                            ; ---------------------------------------------------------------------------
000118DE                            
000118DE                            Obj25:					; XREF: Obj_Index
000118DE 7000                       		moveq	#0,d0
000118E0 1028 0024                  		move.b	routine(a0),d0
000118E4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
000118E8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
000118EC                            ; ===========================================================================
000118EC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index                 ; 0
000118EE 0000                       		dc.w Obj25_Animate-Obj25_Index              ; 2
000118F0 0000                       		dc.w Obj25_Collect-Obj25_Index              ; 4
000118F2 0000                       		dc.w Obj25_Sparkle-Obj25_Index              ; 6
000118F4 0000                       		dc.w Obj25_Delete-Obj25_Index               ; 8
000118F6                            ;		dc.w Obj25_Attract-Obj25_Index              ; A
000118F6                            ;		dc.w Obj25_Collect-Obj25_Index              ; C
000118F6                            ;		dc.w Obj25_Sparkle-Obj25_Index              ; E
000118F6                            ;		dc.w Obj25_Delete-Obj25_Index               ; 10
000118F6                            ; ---------------------------------------------------------------------------
000118F6                            ; Distances between rings (format: horizontal, vertical)
000118F6                            ; ---------------------------------------------------------------------------
000118F6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
000118F8 1800                       		dc.b $18, 0		; horizontal normal
000118FA 2000                       		dc.b $20, 0		; horizontal wide
000118FC 0010                       		dc.b 0,	$10		; vertical tight
000118FE 0018                       		dc.b 0,	$18		; vertical normal
00011900 0020                       		dc.b 0,	$20		; vertical wide
00011902 1010                       		dc.b $10, $10		; diagonal
00011904 1818                       		dc.b $18, $18
00011906 2020                       		dc.b $20, $20
00011908 F010                       		dc.b $F0, $10
0001190A E818                       		dc.b $E8, $18
0001190C E020                       		dc.b $E0, $20
0001190E 1008                       		dc.b $10, 8
00011910 1810                       		dc.b $18, $10
00011912 F008                       		dc.b $F0, 8
00011914 E810                       		dc.b $E8, $10
00011916                            ; ===========================================================================
00011916                            
00011916                            Obj25_Main:	; Routine 0
00011916                            ;        if S3KObjectManager=1
00011916 3028 0014                                  move.w	respawn_index(a0),d0
0001191A 6700 0000                  				beq.w	Obj25_MakeRingsD
0001191E 3440                       	        movea.w	d0,a2	; load address into a2
00011920                             ;       else
00011920                            	;	lea	(v_objstate).w,a2
00011920                            	;	moveq	#0,d0
00011920                            	;	move.b	respawn_index(a0),d0
00011920                            	;	lea	2(a2,d0.w),a2
00011920                            	;endif
00011920 1812                       		move.b	(a2),d4
00011922 1228 0028                  		move.b	subtype(a0),d1
00011926 7000                       		moveq	#0,d0
00011928 1001                       		move.b	d1,d0
0001192A 0241 0007                  		andi.w	#7,d1
0001192E 0C41 0007                  		cmpi.w	#7,d1
00011932 6600                       		bne.s	loc_9B80
00011934 7206                       		moveq	#6,d1
00011936                            
00011936                            	loc_9B80:
00011936 4841                       		swap	d1
00011938 323C 0000                  		move.w	#0,d1
0001193C E808                       		lsr.b	#4,d0
0001193E D040                       		add.w	d0,d0
00011940 1A3B 00B4                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00011944 4885                       		ext.w	d5
00011946 1C3B 00AF                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0001194A 4886                       		ext.w	d6
0001194C 2248                       		movea.l	a0,a1
0001194E 3428 0008                  		move.w	x_pos(a0),d2
00011952 3628 000C                  		move.w	y_pos(a0),d3
00011956 E20C                       		lsr.b	#1,d4
00011958 6500 0000                  		bcs.w	loc_9C02
0001195C                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
0001195C 6000                       		bra.s	loc_9BBA
0001195E                            ; ===========================================================================
0001195E                            
0001195E                            Obj25_MakeRingsD: ; this routine makes the rings work, and not spawn million of them
0001195E 5428 0024                  		addq.b	#2,routine(a0) ; add 2 to the routine counter
00011962 3168 0008 0032             		move.w	8(a0),$32(a0) ; move x-position to secondary x-position
00011968 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0) ; load mappings
00011970 317C 27B2 0002             		move.w	#$27B2,2(a0) ; load right art
00011976 117C 0004 0001             		move.b	#4,1(a0) ; setup objects render flags
0001197C 317C 0100 0018             		move.w	#$100,priority(a0) ; setup priority
00011982 117C 0047 0020             		move.b	#$47,$20(a0) ; setup touch response
00011988 117C 0008 0023             		move.b	#8,width_pixels(a0) ; setup how wide this object is
0001198E                            ;		move.b	#0,respawn_index(a0) ; we don't want this to use any object spawn table slots
0001198E 117C 0001 0026             		move.b	#1,$26(a0) ; set as debug mode ring (This object does not use angles
00011994 6000                       		bra.s	Obj25_Animate ; branch away
00011996                            
00011996                            Obj25_MakeRings:
00011996 4841                       		swap	d1
00011998 E20C                       		lsr.b	#1,d4
0001199A 6500                       		bcs.s	loc_9C02
0001199C                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
0001199C 6100 0000                  		bsr.w	SingleObjLoad
000119A0 6600                       		bne.s	loc_9C0E
000119A2                            
000119A2                            loc_9BBA:				; XREF: Obj25_Main
000119A2 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
000119A6 5429 0024                  		addq.b	#2,routine(a1)
000119AA 3342 0008                  		move.w	d2,x_pos(a1)	; set x-axis position based on d2
000119AE 3368 0008 0032             		move.w	x_pos(a0),$32(a1)
000119B4 3343 000C                  		move.w	d3,y_pos(a1)	; set y-axis position based on d3
000119B8 237C 0000 0000 0004        		move.l	#Map_obj25,mappings(a1)
000119C0 337C 27B2 0002             		move.w	#$27B2,art_tile(a1)
000119C6 137C 0004 0001             		move.b	#4,render_flags(a1)
000119CC 337C 0100 0018             		move.w	#$100,priority(a1)
000119D2 137C 0047 0020             		move.b	#$47,$20(a1)
000119D8 137C 0008 0023             		move.b	#8,width_pixels(a1)
000119DE                            ;        if S3KObjectManager=1
000119DE 3368 0014 0014             		move.w	respawn_index(a0),respawn_index(a1)
000119E4                             ;       else
000119E4                            	;	move.b	respawn_index(a0),respawn_index(a1)
000119E4                                 ;   endif
000119E4 1341 0034                  		move.b	d1,$34(a1)
000119E8                            
000119E8                            loc_9C02:
000119E8 5241                       		addq.w	#1,d1
000119EA D445                       		add.w	d5,d2		; add ring spacing value to d2
000119EC D646                       		add.w	d6,d3		; add ring spacing value to d3
000119EE 4841                       		swap	d1
000119F0 51C9 FFA4                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
000119F4                            
000119F4                            loc_9C0E:
000119F4 0812 0000                  		btst	#0,(a2)
000119F8 6600 0000                  		bne.w	DeleteObject
000119FC                            ; --------------------------------------------------------------------------
000119FC                            Obj25_Animate:	; Routine 2
000119FC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,obFrame(a0) ; set frame
00011A02 6100 0000                  		bsr.w	DisplaySprite
00011A22 4E75                       		rts	
00011A24                            ; ===========================================================================
00011A24                            
00011A24                            Obj25_Collect:	; Routine 4
00011A24 5428 0024                  		addq.b	#2,routine(a0)
00011A28 117C 0000 0020             		move.b	#0,obColType(a0)
00011A2E 317C 0080 0018             		move.w	#$80,priority(a0)
00011A34 6100 0000                  		bsr.w	CollectRing
00011A38                            ;        if S3KObjectManager=1
00011A38 7000                       		moveq	#0,d0
00011A3A 3028 0014                                  move.w	respawn_index(a0),d0	; get address in respawn table
00011A3E 3440                       	        movea.w	d0,a2	                ; load address into a2
00011A40 1228 0034                  		move.b	$34(a0),d1
00011A44 03D2                       		bset	d1,(a2)
00011A46                            ;        else
00011A46                            ;		lea	(v_objstate).w,a2
00011A46                            ;		moveq	#0,d0
00011A46                            ;		move.b	respawn_index(a0),d0
00011A46                            ;		move.b	$34(a0),d1
00011A46                            ;		bset	d1,2(a2,d0.w)
00011A46                            ;	endif
00011A46                            
00011A46                            Obj25_Sparkle:	; Routine 6
00011A46 43F9 0000 0000             		lea	(Ani_Obj25).l,a1
00011A4C 6100 0000                  		bsr.w	AnimateSprite
00011A50 6000 0000                  		bra.w	DisplaySprite
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Obj25_Delete:	; Routine 8
00011A54                             ;       if S3KObjectManager=1
00011A54 7000 3028 0014 6700 3440+                  obMarkGone
00011A62                              ;      endif
00011A62 6000 0000                  		bra.w	DeleteObject
00011A66                            ; ===========================================================================
00011A66                            
00011A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011A66                            
00011A66                            
00011A66                            CollectRing:				; XREF: Obj25_Collect
00011A66 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
00011A6C 6400                       	bcc.s	loc_11FD4
00011A6E 5278 FF98                  	addq.w	#1,(Rings_Collected).w
00011A72                            
00011A72                            loc_11FD4:
00011A72 303C 0033                  	move.w  #$33,d0 ; '¦'
00011A76 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
00011A7C 6400 0000                  	bcc.w	loc_115B0
00011A80 5278 FE20                  	addq.w	#1,(Ring_count).w
00011A84                            ;	cmpi.w  #$3E7,($FFFFFE20).w
00011A84                            ;	ble.s   loc_1157E
00011A84                            ;	move.w  #$3E7,($FFFFFE20).w
00011A84                            	
00011A84                            ;loc_1157E:                              ; CODE XREF: ROM:00011576j
00011A84 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
00011A8A 7200                       	moveq   #0,d1
00011A8C 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
00011A90 E549                       	lsl.w   #2,d1
00011A92 B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
00011A96 6E00                       	bgt.s   loc_115B0
00011A98 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
00011A9E                            ;	cmpi.b  #$A,($FFFFFE10).w
00011A9E                            ;	beq.s   loc_115B4
00011A9E 0C38 0063 FE12             	cmpi.b	#$63,(Life_count).w
00011AA4 6C00 0000                  	bge.w	Obj25_ExtraLife
00011AA8 5238 FE12                  	addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00011AAC 5238 FE1C                  	addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00011AB0                            Obj25_ExtraLife:
00011AB0 303C 002A                  	move.w	#$2A,d0		; play extra life music
00011AB4 4EF9 0000 325C             	jmp	(PlaySound_Special).l
00011ABA                            loc_115B0:
00011ABA 4EF9 0000 3212             	jmp	(PlaySound).l
00011AC0                            ; End of function CollectRing
00011AC0                            
00011AC0                            ; ===========================================================================
00011AC0                            ; ---------------------------------------------------------------------------
00011AC0                            ; Object 37 - rings flying out of Sonic	when he's hit
00011AC0                            ; ---------------------------------------------------------------------------
00011AC0                            
00011AC0                            Obj37:					; XREF: Obj_Index
00011AC0 7000                       		moveq	#0,d0
00011AC2 1028 0024                  		move.b	routine(a0),d0
00011AC6 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00011ACA 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00011ACE                            ; ===========================================================================
00011ACE 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00011AD0 0000                       		dc.w Obj37_Bounce-Obj37_Index
00011AD2 0000                       		dc.w Obj37_Collect-Obj37_Index
00011AD4 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00011AD6 0000                       		dc.w Obj37_Delete-Obj37_Index
00011AD8                            ; ===========================================================================
00011AD8                            
00011AD8                            Obj37_CountRings:			; XREF: Obj37_Index
00011AD8 2248                       		movea.l	a0,a1
00011ADA 7A00                       		moveq	#0,d5
00011ADC 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00011AE0 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
00011AE6 7014                               moveq   #20,d0                  ; lose a max of 20 rings
00011AE8 45F8 D000                          lea     ($FFFFD000).w,a2    ; a2=character
00011AEC 082A 0006 0022                     btst    #6,status(a2)           ; is Sonic underwater?
00011AF2 6700                               beq.s   Obj37_CountRings2                       ; if not, branch
00011AF4 47F9 0000 0000                     lea    SpillRingDataU,a3        ; load the UNDERWATER address of the array in a3
00011AFA 7008                               moveq   #8,d0                   ; lose a max of 8 rings underwater
00011AFC                            Obj37_CountRings2:
00011AFC BA40                               cmp.w   d0,d5
00011AFE 6500                               bcs.s   loc_9CDE
00011B00 3A00                               move.w  d0,d5
00011B02                            
00011B02                            loc_9CDE:
00011B02 5345                               subq.w  #1,d5
00011B04 383C 0288                          move.w  #$288,d4
00011B08 49F9 FFFF AA00                     lea ($FFFFAA00).l,a4    ; Load $FFFFAA00 to a4
00011B0E 6000                       		bra.s	Obj37_MakeRings
00011B10                            ; ===========================================================================
00011B10                            
00011B10                            Obj37_Loop:
00011B10 6100 0000                  		bsr.w	SingleObjLoad
00011B14 6600 0000                  		bne.w	Obj37_ResetCounter
00011B18                            
00011B18                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00011B18 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00011B1C 5429 0024                  		addq.b	#2,routine(a1)
00011B20 137C 0008 0016             		move.b	#8,$16(a1)
00011B26 137C 0008 0017             		move.b	#8,$17(a1)
00011B2C 3368 0008 0008             		move.w	8(a0),8(a1)
00011B32 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B38 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00011B40 337C 27B2 0002             		move.w	#$27B2,2(a1)
00011B46 137C 0004 0001             		move.b	#4,1(a1)
00011B4C                            ;		move.w	#$180,priority(a1)
00011B4C 137C 0047 0020             		move.b	#$47,collision_flags(a1)
00011B52 137C 0008 0023             		move.b	#8,width_pixels(a1)
00011B58                            ;		tst.w	d4
00011B58                            ;		bmi.s	loc_9D62
00011B58                            ;		move.w	d4,d0
00011B58                            ;		jsr	CalcSine
00011B58                            ;		move.w	d4,d2
00011B58                            ;		lsr.w	#8,d2
00011B58                            ;		tst.b   ($FFFFF64C).w ; Does the level have water?
00011B58                            ;		beq.s   Obj37_MRCont ; If not, branch and skip underwater checks
00011B58                            ;		move.w  ($FFFFF646).w,d6 ; Move water level to d6
00011B58                            ;		cmp.w   $C(a0),d6 ; Is the ring object underneath the water level?
00011B58                            ;		bgt.s   Obj37_MRCont ; If not, branch and skip underwater commands
00011B58                            ;		asr.w  #$1,d0 ; Half d0.  Makes the ring's x_vel bounce to the left/right slower
00011B58                            ;		asr.w  #$1,d1 ; Half d1.  Makes the ring's y_vel bounce up/down slower
00011B58                            
00011B58                            Obj37_MRCont:
00011B58                            ;        asl.w   d2,d0
00011B58                             ;       asl.w   d2,d1
00011B58                              ;      move.w  d0,d2
00011B58                               ;     move.w  d1,d3
00011B58                                ;    addi.b  #$10,d4
00011B58                                 ;   bcc.s   loc_9D62
00011B58                                  ;  subi.w  #$80,d4
00011B58                                   ; bcc.s   loc_9D62
00011B58                                    ;move.w  #$288,d4
00011B58                            
00011B58                            ;loc_9D62:
00011B58                            ;        move.w  d2,x_vel(a1)
00011B58                            ;        move.w  d3,y_vel(a1)
00011B58                            ;        neg.w   d2
00011B58                            ;        neg.w   d4
00011B58                            ;        move.w  d2,(a4)+        ; Move d2 to a4 then increment a4 by a word
00011B58 335B 0010                  		move.w  (a3)+,x_vel(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
00011B5C 335B 0012                  		move.w  (a3)+,y_vel(a1)         ; move the data contained in the array to the y velocity and increment the address in a3
00011B60 38C3                       		move.w  d3,(a4)+        ; Move d3 to a4 then increment a4 by a word
00011B62 1438 D03B                  		move.b ($FFFFD03B).w,d2 ; get the number of times Sonic has been hit
00011B66 0C02 0001                  		cmpi.b #1,d2 ; is it more than once?
00011B6A 6F00                       		ble.s @Repeat ; if not, branch
00011B6C 4882                       		ext d2 ; change value from byte to word
00011B6E C5FC 0050                  		muls.w #$50,d2 ; multiply by #$50
00011B72 9569 0012                  		sub.w d2,$12(a1) ; change y-velocity of each ring
00011B76                            @Repeat:
00011B76 51CD FF98                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00011B7A                            
00011B7A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00011B7A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00011B80 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00011B86 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00011B8C 70FF                       		moveq	#-1,d0			; Move #-1 to d0
00011B8E 1140 001F                  		move.b	d0,obDelayAni(a0)	; Move d0 to new timer
00011B92 11C0 FEC6                  		move.b	d0,(v_ani3_time).w	; Move d0 to old timer (for animated purposes)
00011B96 303C 00B9                  		move.w	#$B9,d0				; MJ: Sound
00011B9A 4EB9 0000 3212             		jsr	(PlaySound).l ;	play ring loss sound
00011BA0                            
00011BA0                            Obj37_Bounce:				; XREF: Obj37_Index
00011BA0 1178 FEC7 001A             		move.b	($FFFFFEC7).w,mapping_frame(a0)
00011BA6 4EB9 0000 0000             		jsr	SpeedToPos
00011BAC 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00011BB2 4A38 F64C                          tst.b   ($FFFFF64C).w           ; Does the level have water?
00011BB6 6700                               beq.s   @skipbounceslow         ; If not, branch and skip underwater checks
00011BB8 3C38 F646                          move.w  ($FFFFF646).w,d6        ; Move water level to d6
00011BBC BC68 000C                          cmp.w   y_pos(a0),d6            ; Is the ring object underneath the water level?
00011BC0 6E00                               bgt.s   @skipbounceslow         ; If not, branch and skip underwater commands
00011BC2 0468 000E 0012                     subi.w  #$E,y_vel(a0)          ; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
00011BC8                            @skipbounceslow:
00011BC8 6B00                       		bmi.s	Obj37_ChkDel
00011BCA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011BCE D007                       		add.b	d7,d0
00011BD0 0200 0003                  		andi.b	#3,d0
00011BD4 6600                       		bne.s	Obj37_ChkDel
00011BD6 4EB9 0000 0000             		jsr	ObjHitFloor
00011BDC 4A41                       		tst.w	d1
00011BDE 6A00                       		bpl.s	Obj37_ChkDel
00011BE0 D368 000C                  		add.w	d1,$C(a0)
00011BE4 3028 0012                  		move.w	y_vel(a0),d0
00011BE8 E440                       		asr.w	#2,d0
00011BEA 9168 0012                  		sub.w	d0,y_vel(a0)
00011BEE 4468 0012                  		neg.w	y_vel(a0)
00011BF2                            
00011BF2                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00011BF2 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
00011BF6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
00011BFA 0C78 FF00 F72C                     cmpi.w	#-$100,($FFFFF72C).w            ; is vertical wrapping enabled?
00011C00 6700 0000                          beq.w   DisplaySprite                   ; if so, branch
00011C04 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00011C08 0640 00E0                  		addi.w	#$E0,d0
00011C0C B068 000C                  		cmp.w	y_pos(a0),d0	   ; has object moved below level boundary?
00011C10 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
00011C12                            ;Mercury Lost Rings Flash
00011C12 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
00011C18 6700 0000                  		beq.w	@flash1      ; If the bit is 0, the ring will appear.
00011C1C 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
00011C22 6200 0000                  		bhi.w	@flash1       ; If the timer is higher than 80, obviously the rings will STAY visible.
00011C26 4E75                       		rts
00011C28                            @flash1:
00011C28 43F8 AC00                  		lea	(v_spritequeue).w,a1
00011C2C D2FC 0180                  		adda.w	#$180,a1	; jump to position in queue
00011C30 0C51 007E                          cmpi.w  #$7E,(a1)
00011C34 6400                               bcc.s   @flashskip
00011C36 5451                               addq.w  #2,(a1)
00011C38 D2D1                               adda.w  (a1),a1
00011C3A 3288                               move.w  a0,(a1)
00011C3C                            @flashskip:
00011C3C 4E75                               rts
00011C3E                            ;end Lost Rings Flash
00011C3E                            ; ===========================================================================
00011C3E                            
00011C3E                            Obj37_Collect:				; XREF: Obj37_Index
00011C3E 5428 0024                  		addq.b	#2,routine(a0)
00011C42 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011C48 317C 0080 0018             		move.w	#$80,priority(a0)
00011C4E 4EBA FE16                  		jsr	CollectRing
00011C52                            
00011C52                            Obj37_Sparkle:				; XREF: Obj37_Index
00011C52 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00011C58 4EB9 0000 0000             		jsr	AnimateSprite
00011C5E 43F8 AC00                  		lea     (Sprite_Table_Input).w,a1
00011C62 D2FC 0080                  		adda.w  #$80,a1
00011C66 0C51 007E                  		cmpi.w  #$7E,(a1)
00011C6A 6400                       		bcc.s   Obj37_SparkleRTS
00011C6C 5451                       		addq.w  #2,(a1)
00011C6E D2D1                       		adda.w  (a1),a1
00011C70 3288                       		move.w  a0,(a1)
00011C72                            Obj37_SparkleRTS:
00011C72 4E75                       	rts
00011C74                            ; ===========================================================================
00011C74                            
00011C74                            Obj37_Delete:				; XREF: Obj37_Index
00011C74 6000 0000                  		bra.w	DeleteObject
00011C78                            ; ===========================================================================
00011C78                            ; ---------------------------------------------------------------------------
00011C78                            ; Ring Spawn Array
00011C78                            ; ---------------------------------------------------------------------------
00011C78                            
00011C78 00C4 FC14 FF3C FC14 0238+  SpillRingData:  dc.w    $00C4,$FC14, $FF3C,$FC14, $0238,$FCB0, $FDC8,$FCB0 ; 4
00011C88 0350 FDC8 FCB0 FDC8 03EC+                  dc.w    $0350,$FDC8, $FCB0,$FDC8, $03EC,$FF3C, $FC14,$FF3C ; 8
00011C98 03EC 00C4 FC14 00C4 0350+                  dc.w    $03EC,$00C4, $FC14,$00C4, $0350,$0238, $FCB0,$0238 ; 12
00011CA8 0238 0350 FDC8 0350 00C4+                  dc.w    $0238,$0350, $FDC8,$0350, $00C4,$03EC, $FF3C,$03EC ; 16
00011CB8 0062 FE0A FF9E FE0A 011C+                  dc.w    $0062,$FE0A, $FF9E,$FE0A, $011C,$FE58, $FEE4,$FE58 ; 20
00011CC8                                            even
00011CC8                            ; ===========================================================================
00011CC8                            ; ===========================================================================
00011CC8                            ; ---------------------------------------------------------------------------
00011CC8                            ; Ring Spawn Array Underwater
00011CC8                            ; ---------------------------------------------------------------------------
00011CC8                            
00011CC8 0064 FE08 FF9C FE08 011C+  SpillRingDataU: dc.w    $0064,$FE08, $FF9C,$FE08, $011C,$FE58, $FEE4,$FE58 ; 4
00011CD8 01A8 FEE4 FE58 FEE4 01F8+                  dc.w    $01A8,$FEE4, $FE58,$FEE4, $01F8,$FF9C, $FE08,$FF9C ; 8
00011CE8                                            even
00011CE8                            ; ===========================================================================
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8                            ; Object 4B - giant ring for entry to special stage
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8                            
00011CE8                            Obj4B:					; XREF: Obj_Index
00011CE8 7000                       		moveq	#0,d0
00011CEA 1028 0024                  		move.b	routine(a0),d0
00011CEE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00011CF2 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00011CF6                            ; ===========================================================================
00011CF6 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00011CF8 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00011CFA 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00011CFC 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00011CFE                            ; ===========================================================================
00011CFE                            
00011CFE                            Obj4B_Main:				; XREF: Obj4B_Index
00011CFE 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00011D06 317C 2400 0002             		move.w	#$2400,2(a0)
00011D0C 0028 0004 0001             		ori.b	#4,1(a0)
00011D12 117C 0040 0023             		move.b	#$40,width_pixels(a0)
00011D18 4A28 0001                  		tst.b	1(a0)
00011D1C 6A00                       		bpl.s	Obj4B_Animate
00011D1E                            ;		cmpi.w	#0,($FFFFFF70).w	; are you playing as Sonic?
00011D1E                            ;		beq.w	Obj4B_Sonic			; if yes, branch
00011D1E                            		
00011D1E                            ;Obj4B_Sonic:
00011D1E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w	; do you have 6 emeralds?
00011D24 6700 0000                  		beq.w	Obj4B_Delete2		; if yes, branch
00011D28                            ;		cmpi.b	#$01, ($FFFFFF70).w	; are you playing as other characters?
00011D28                            ;		beq.w	Obj4B_Delete2			; if yes, branch
00011D28 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w	; do you have at least 50 rings?
00011D2E 6400                       		bcc.s	Obj4B_Okay			; if yes, branch
00011D30 4E75                       		rts	
00011D32                            ; ===========================================================================
00011D32                            
00011D32                            Obj4B_Okay:				; XREF: Obj4B_Main
00011D32 5428 0024                  		addq.b	#2,routine(a0)
00011D36 317C 0100 0018             		move.w	#$100,priority(a0)
00011D3C 117C 0052 0020             		move.b	#$52,collision_flags(a0)
00011D42 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00011D48                            
00011D48                            Obj4B_Animate:				; XREF: Obj4B_Index
00011D48 1178 FEC3 001A             		move.b	($FFFFFEC3).w,mapping_frame(a0)
00011D4E 4EF9 0000 0000             		jmp		MarkObjGone
00011D54                            ; ===========================================================================
00011D54                            
00011D54                            Obj4B_Collect:				; XREF: Obj4B_Index
00011D54 5528 0024                  		subq.b	#2,routine(a0)
00011D58 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011D5E 6100 0000                  		bsr.w	SingleObjLoad
00011D62 6600 0000                  		bne.w	Obj4B_PlaySnd
00011D66 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00011D6A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00011D6E 3368 0008 0008             		move.w	8(a0),8(a1)
00011D74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D7A 2348 003C                  		move.l	a0,$3C(a1)
00011D7E 3038 D008                  		move.w	($FFFFD008).w,d0
00011D82 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00011D86 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00011D88 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00011D8E                            
00011D8E                            Obj4B_PlaySnd:
00011D8E 303C 00B3                  		move.w	#$B3,d0
00011D92 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00011D98 60AE                       		bra.s	Obj4B_Animate
00011D9A                            ; ===========================================================================
00011D9A                            
00011D9A                            Obj4B_Delete:				; XREF: Obj4B_Index
00011D9A 4EF9 0000 0000             		jmp	GotThroughAct
00011DA0 6000 0000                  		bra.w	DeleteObject
00011DA4 6000 0000                  		bra.w	DeleteObject
00011DA8                            
00011DA8                            Obj4B_Delete2:				; XREF: Obj4B_Index
00011DA8 6000 0000                  		bra.w	DeleteObject
00011DAC                            ; ===========================================================================
00011DAC                            ; ---------------------------------------------------------------------------
00011DAC                            ; Object 7C - flash effect when	you collect the	giant ring
00011DAC                            ; ---------------------------------------------------------------------------
00011DAC                            
00011DAC                            Obj7C:					; XREF: Obj_Index
00011DAC 7000                       		moveq	#0,d0
00011DAE 1028 0024                  		move.b	routine(a0),d0
00011DB2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00011DB6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00011DBA                            ; ===========================================================================
00011DBA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00011DBC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00011DBE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00011DC0                            ; ===========================================================================
00011DC0                            
00011DC0                            Obj7C_Main:				; XREF: Obj7C_Index
00011DC0 5428 0024                  		addq.b	#2,routine(a0)
00011DC4 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00011DCC 317C 2462 0002             		move.w	#$2462,2(a0)
00011DD2 0028 0004 0001             		ori.b	#4,1(a0)
00011DD8 117C 0000 0018             		move.b	#0,priority(a0)
00011DDE 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00011DE4 117C 00FF 001A             		move.b	#$FF,mapping_frame(a0)
00011DEA                            
00011DEA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00011DEA 6100                       		bsr.s	Obj7C_Collect
00011DEC 4EF9 0000 0000             		jmp		MarkObjGone
00011DF2                            
00011DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DF2                            
00011DF2                            
00011DF2                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00011DF2 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00011DF6 6A00                       		bpl.s	locret_9F76
00011DF8 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00011DFE 5228 001A                  		addq.b	#1,mapping_frame(a0)
00011E02 0C28 0008 001A             		cmpi.b	#8,mapping_frame(a0)	; has animation	finished?
00011E08 6400                       		bcc.s	Obj7C_End	; if yes, branch
00011E0A 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is 3rd frame displayed?
00011E10 6600                       		bne.s	locret_9F76	; if not, branch
00011E12 2268 003C                  		movea.l	$3C(a0),a1
00011E16 137C 0006 0024             		move.b	#6,routine(a1)	; delete giant ring object (Obj4B)
00011E1C 11FC 001C D01C             		move.b	#$1C,(MainCharacter+anim).w ; make Sonic	invisible
00011E22 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00011E28 4238 D02B                  		clr.b   (MainCharacter+status_secondary).w
00011E2C                            
00011E2C                            
00011E2C                            locret_9F76:
00011E2C 4E75                       		rts
00011E2E                            ; ===========================================================================
00011E2E                            
00011E2E                            Obj7C_End:				; XREF: Obj7C_Collect
00011E2E 5428 0024                  		addq.b	#2,routine(a0)
00011E32 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00011E38 588F                       		addq.l	#4,sp
00011E3A 4E75                       		rts
00011E3C                            ; End of function Obj7C_Collect
00011E3C                            
00011E3C                            ; ===========================================================================
00011E3C                            
00011E3C                            Obj7C_Delete:				; XREF: Obj7C_Index
00011E3C 6000 0000                  		bra.w	DeleteObject
00011E40                            ; ===========================================================================
00011E40                            Ani_obj25:
00011E40                            	include "_anim\obj25.asm"
00011E40                            ; ---------------------------------------------------------------------------
00011E40                            ; Animation script - ring
00011E40                            ; ---------------------------------------------------------------------------
00011E40 0000                       		dc.w byte_9F8C-Ani_obj25
00011E42 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00011E48                            		even
00011E48                            		even
00011E48                            
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            ; Sprite mappings - rings
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            Map_obj25:
00011E48                            	include "_maps\obj25.asm"
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            ; Sprite mappings - rings
00011E48                            ; ---------------------------------------------------------------------------
00011E48 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00011E4C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00011E50 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00011E54 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00011E58 01                         byte_9FA2:	dc.b 1
00011E59 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011E5E 01                         byte_9FA8:	dc.b 1
00011E5F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00011E64 01                         byte_9FAE:	dc.b 1
00011E65 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00011E6A 01                         byte_9FB4:	dc.b 1
00011E6B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00011E70 01                         byte_9FBA:	dc.b 1
00011E71 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00011E76 01                         byte_9FC0:	dc.b 1
00011E77 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00011E7C 01                         byte_9FC6:	dc.b 1
00011E7D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00011E82 01                         byte_9FCC:	dc.b 1
00011E83 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00011E88                            		even
00011E88                            		even
00011E88                            
00011E88                            ; ---------------------------------------------------------------------------
00011E88                            ; Sprite mappings - giant ring
00011E88                            ; ---------------------------------------------------------------------------
00011E88                            Map_obj4B:
00011E88                            	include "_maps\obj4B.asm"
00011E88                            ; ---------------------------------------------------------------------------
00011E88                            ; Sprite mappings - giant ring
00011E88                            ; ---------------------------------------------------------------------------
00011E88 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00011E8C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00011E90 0A                         byte_9FDA:	dc.b $A
00011E91 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00011E96 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00011E9B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00011EA0 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00011EA5 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00011EAA F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00011EAF 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00011EB4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00011EB9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00011EBE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00011EC3 08                         byte_A00D:	dc.b 8
00011EC4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00011EC9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00011ECE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00011ED3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00011ED8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00011EDD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00011EE2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00011EE7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
00011EEC 04                         byte_A036:	dc.b 4
00011EED E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
00011EF2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
00011EF7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
00011EFC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
00011F01 08                         byte_A04B:	dc.b 8
00011F02 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
00011F07 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
00011F0C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
00011F11 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
00011F16 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
00011F1B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
00011F20 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
00011F25 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
00011F2A                            		even
00011F2A                            		even
00011F2A                            
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A                            ; Sprite mappings - flash effect when you collect the giant ring
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A                            Map_obj7C:
00011F2A                            	include "_maps\obj7C.asm"
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A                            ; Sprite mappings - flash effect when you collect the giant ring
00011F2A                            ; ---------------------------------------------------------------------------
00011F2A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
00011F2E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
00011F32 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
00011F36 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
00011F3A 02                         byte_A084:	dc.b 2
00011F3B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
00011F40 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
00011F45 04                         byte_A08F:	dc.b 4
00011F46 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
00011F4B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
00011F50 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
00011F55 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
00011F5A 04                         byte_A0A4:	dc.b 4
00011F5B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
00011F60 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
00011F65 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
00011F6A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
00011F6F 04                         byte_A0B9:	dc.b 4
00011F70 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
00011F75 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
00011F7A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
00011F7F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
00011F84 04                         byte_A0CE:	dc.b 4
00011F85 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
00011F8A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
00011F8F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
00011F94 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
00011F99 04                         byte_A0E3:	dc.b 4
00011F9A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
00011F9F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
00011FA4 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
00011FA9 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
00011FAE 02                         byte_A0F8:	dc.b 2
00011FAF E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
00011FB4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
00011FB9 04                         byte_A103:	dc.b 4
00011FBA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
00011FBF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
00011FC4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
00011FC9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
00011FCE                            		even
00011FCE                            		even
00011FCE                            
00011FCE                            ; ===========================================================================
00011FCE                            ; ---------------------------------------------------------------------------
00011FCE                            ; Object 26 - monitors
00011FCE                            ; ---------------------------------------------------------------------------
00011FCE                            
00011FCE                            Obj26:						  ; ...
00011FCE 7000                       		moveq	#0,d0
00011FD0 1028 0024                  		move.b	$24(a0),d0
00011FD4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
00011FD8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
00011FDC                            ; ---------------------------------------------------------------------------
00011FDC 0000 0000                  Obj26_Index:	dc.w loc_30F9D4-Obj26_Index,loc_30FA38-Obj26_Index; 0 ;	...
00011FE0 0000 0000                  		dc.w loc_30FAE8-Obj26_Index,loc_30FA86-Obj26_Index; 2
00011FE4 0000                       		dc.w BraTo_MarkObjGone_0-Obj26_Index; 4
00011FE6                            ; ---------------------------------------------------------------------------
00011FE6                            
00011FE6                            loc_30F9D4:					  ; ...
00011FE6 5428 0024                  		addq.b	#2,$24(a0)
00011FEA 117C 000E 0016             		move.b	#$E,$16(a0)
00011FF0 117C 000E 0017             		move.b	#$E,$17(a0)
00011FF6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
00011FFE 317C 0680 0002             		move.w	#$680,2(a0)
00012004 117C 0004 0001             		move.b	#4,1(a0)
0001200A 317C 0180 0018             		move.w	#$180,priority(a0)
00012010 117C 000F 0023             		move.b	#$F,width_pixels(a0)
00012016                            ;		lea	(v_objstate).w,a2
00012016 7000                       		moveq	#0,d0
00012018 3028 0014                          move.w	respawn_index(a0),d0
0001201C 3440                       	    movea.w	d0,a2
0001201E 6700                       		beq.s	loc_30FA2C
00012020                            ;		bclr	#7,(a2)
00012020 0812 0000                  		btst	#0,(a2)
00012024 6700                       		beq.s	loc_30FA2C
00012026 117C 0008 0024             		move.b	#8,$24(a0)
0001202C 117C 000B 001A             		move.b	#$B,$1A(a0)
00012032 6000 0000                  		bra.w	RememberState
00012036                            ; ---------------------------------------------------------------------------
00012036                            
00012036                            loc_30FA2C:					  ; ...
00012036 117C 0046 0020             		move.b	#$46,$20(a0)
0001203C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012042                            
00012042                            loc_30FA38:					  ; ...
00012042 1028 0025                  		move.b	$25(a0),d0
00012046 6700                       		beq.s	SolidObject_Monitor
00012048 5500                       		subq.b	#2,d0
0001204A 6600                       		bne.s	Obj26_Fall
0001204C 7200                       		moveq	#0,d1
0001204E 1228 0023                  		move.b	width_pixels(a0),d1
00012052 0641 000B                  		addi.w	#$B,d1
00012056 4EBA D2B8                  		jsr	ExitPlatform
0001205A 0829 0003 0022             		btst	#3,$22(a1)
00012060 6600 0000                  		bne.w	SolidObject_Monitor
00012064 4228 0025                  		clr.b	$25(a0)
00012068 6000 0000                  		bra.w	loc_30FA86
0001206C                            Obj26_Fall:		
0001206C 6100 0000                  		bsr.w	ObjectFall
00012070 4EB9 0000 0000             		jsr	ObjHitFloor	  ; Also known as ObjHitFloor in Sonic 1
00012076 4A41                       		tst.w	d1
00012078 6A00 0000                  		bpl.w	SolidObject_Monitor
0001207C D368 000C                  		add.w	d1,$C(a0)
00012080 4268 0012                  		clr.w	$12(a0)
00012084 4228 0025                  		clr.b	$25(a0)
00012088                            
00012088                            SolidObject_Monitor:				  ; ...
00012088 323C 001A                  		move.w	#$1A,d1
0001208C 343C 000F                  		move.w	#$F,d2
00012090 3602                       		move.w	d2,d3
00012092 5243                       		addq.w	#1,d3
00012094 3828 0008                  		move.w	8(a0),d4
00012098 43F8 D000                  		lea	($FFFFD000).w,a1
0001209C 7C03                       		moveq	#3,d6
0001209E 48E7 7800                  		movem.l	d1-d4,-(sp)
000120A2 6100 0000                  		bsr.w	SolidObject_Monitor_Sonic
000120A6 4CDF 001E                  		movem.l	(sp)+,d1-d4
000120AA                            ;		lea	($FFFFB040).w,a1
000120AA                            ;		moveq	#4,d6
000120AA                            ;		bsr.w	SolidObject_Monitor_Tails_Useless
000120AA                            
000120AA                            loc_30FA86:					  ; ...
000120AA 43F9 0000 0000             		lea	(Ani_Obj26).l,a1
000120B0 4EB9 0000 0000             		jsr	AnimateSprite
000120B6                            
000120B6                            BraTo_MarkObjGone_0:				  ; ...
000120B6 4EF9 0000 0000             		jmp	RememberState
000120BC                            
000120BC                            ; =============== S U B	R O U T	I N E =======================================
000120BC                            
000120BC                            
000120BC                            SolidObject_Monitor_Sonic:			  ; ...
000120BC 0D28 0022                  		btst	d6,$22(a0)
000120C0 6600 0000                  		bne.w	ExitPlatform3
000120C4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
000120CA 6600 0000                  		bne.w	loc_314E36
000120CE 4E75                       		rts
000120D0                            ; End of function SolidObject_Monitor_Knuckles
000120D0                            
000120D0                            
000120D0                            ; =============== S U B	R O U T	I N E =======================================
000120D0                            
000120D0                            
000120D0                            ;SolidObject_Monitor_Tails_Useless:		  ; ...
000120D0                            ;		btst	d6,$22(a0)
000120D0                            ;		beq.w	loc_314E36
000120D0                            
000120D0                            ExitPlatform3:					  ; ...
000120D0 3401                       		move.w	d1,d2
000120D2 D442                       		add.w	d2,d2
000120D4 0829 0001 0022             		btst	#1,$22(a1)
000120DA 6600                       		bne.s	loc_30FACA
000120DC 3029 0008                  		move.w	8(a1),d0
000120E0 9068 0008                  		sub.w	8(a0),d0
000120E4 D041                       		add.w	d1,d0
000120E6 6B00                       		bmi.s	loc_30FACA
000120E8 B042                       		cmp.w	d2,d0
000120EA 6500                       		bcs.s	loc_30FADE
000120EC                            
000120EC                            loc_30FACA:					  ; ...
000120EC 08A9 0003 0022             		bclr	#3,$22(a1)
000120F2 08E9 0001 0022             		bset	#1,$22(a1)
000120F8 117C 0002 0024             		move.b	#2,$24(a0)
000120FE 0DA8 0022                  		bclr	d6,$22(a0)
00012102 7800                       		moveq	#0,d4
00012104 4E75                       		rts
00012106                            ; ---------------------------------------------------------------------------
00012106                            
00012106                            loc_30FADE:					  ; ...
00012106 3404                       		move.w	d4,d2
00012108 4EBA D460                  		jsr	MvSonicOnPtfm
0001210C 7800                       		moveq	#0,d4
0001210E 4E75                       		rts
00012110                            ; End of function SolidObject_Monitor_Tails_Useless
00012110                            
00012110                            ; ---------------------------------------------------------------------------
00012110                            
00012110                            loc_30FAE8:					  ; ...
00012110 1028 0022                  		move.b	$22(a0),d0
00012114 0200 0078                  		and.b	#%1111000,d0
00012118 6700                       		beq.s	loc_30FB18
0001211A 1200                       		move.b	d0,d1
0001211C 0201 0028                  		and.b	#%101000,d1
00012120 6700                       		beq.s	loc_30FB06
00012122 0238 00D7 D022             		and.b	#%11010111,(MainCharacter+status).w
00012128 0038 0002 D022             		or.b	#2,(MainCharacter+status).w
0001212E                            
0001212E                            loc_30FB06:					  ; ...
0001212E                            ;		and.b	#%1010000,d0
0001212E                            ;		beq.s	loc_30FB18
0001212E                            ;		and.b	#%11010111,($FFFFD062).w
0001212E                            ;		or.b	#2,($FFFFD062).w
0001212E                            
0001212E                            loc_30FB18:					  ; ...
0001212E 4228 0022                  		clr.b	$22(a0)
00012132 5428 0024                  		addq.b	#2,$24(a0)
00012136 117C 0000 0020             		move.b	#0,$20(a0)
0001213C 4EB9 0000 0000             		jsr	SingleObjLoad
00012142 6600                       		bne.s	loc_30FB4A
00012144 12BC 002E                  		move.b	#$2E,0(a1)
00012148 3368 0008 0008             		move.w	8(a0),8(a1)
0001214E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012154 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0001215A                            ;		move.w	$3E(a0),$3E(a1)
0001215A                            
0001215A                            loc_30FB4A:					  ; ...
0001215A 4EB9 0000 0000             		jsr	SingleObjLoad
00012160 6600                       		bne.s	loc_30FB66
00012162 12BC 0027                  		move.b	#$27,0(a1)
00012166 5429 0024                  		addq.b	#2,$24(a1)
0001216A 3368 0008 0008             		move.w	8(a0),8(a1)
00012170 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012176                            
00012176                            loc_30FB66:					  ; ...
00012176                            ;		lea	(v_objstate).w,a2
00012176 7000                       		moveq	#0,d0
00012178 3028 0014                          move.w	respawn_index(a0),d0
0001217C 3440                       	    movea.w	d0,a2
0001217E 08D2 0000                  		bset	#0,(a2)
00012182 117C 0009 001C             		move.b	#9,$1C(a0)
00012188 4EF9 0000 0000             		jmp	DisplaySprite
0001218E                            ;----------------------------------------------------
0001218E                            ; Object 2E - contents of monitors
0001218E                            ;----------------------------------------------------
0001218E                            
0001218E                            Obj2E:					; DATA XREF: ROM:Obj_Indexo
0001218E 7000                       		moveq	#0,d0
00012190 1028 0024                  		move.b	$24(a0),d0
00012194 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
00012198 4EFB 1000                  		jmp	Obj2E_Index(pc,d1.w)
0001219C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001219C 0000                       Obj2E_Index:	dc.w loc_B04E-Obj2E_Index ; DATA XREF: ROM:Obj2E_Indexo
0001219E                            					; ROM:0000B04Ao ...
0001219E 0000                       		dc.w loc_B092-Obj2E_Index
000121A0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
000121A2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000121A2                            
000121A2                            loc_B04E:				; DATA XREF: ROM:Obj2E_Indexo
000121A2 5428 0024                  		addq.b	#2,$24(a0)
000121A6 317C 0680 0002             		move.w	#$680,2(a0)
000121AC 117C 0024 0001             		move.b	#$24,1(a0)
000121B2 317C 0180 0018             		move.w	#$180,priority(a0)
000121B8 117C 0008 0023             		move.b	#8,width_pixels(a0)
000121BE 317C FD00 0012             		move.w	#-$300,$12(a0)
000121C4 7000                       		moveq	#0,d0
000121C6 1028 001C                  		move.b	$1C(a0),d0
000121CA 5400                       		addq.b	#2,d0
000121CC 1140 001A                  		move.b	d0,$1A(a0)
000121D0 227C 0000 0000             		movea.l	#Map_obj26,a1
000121D6 D000                       		add.b	d0,d0
000121D8 D2F1 0000                  		adda.w	(a1,d0.w),a1
000121DC 5249                       		addq.w	#1,a1
000121DE 2149 0004                  		move.l	a1,4(a0)
000121E2                            
000121E2                            loc_B092:				; DATA XREF: ROM:0000B04Ao
000121E2 6100                       		bsr.s	sub_B098
000121E4 6000 0000                  		bra.w	DisplaySprite
000121E8                            
000121E8                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
000121E8                            
000121E8                            
000121E8                            sub_B098:				; CODE XREF: ROM:loc_B092p
000121E8 4A68 0012                  		tst.w	$12(a0)
000121EC 6A00 0000                  		bpl.w	loc_B0AC
000121F0 6100 0000                  		bsr.w	SpeedToPos
000121F4 0668 0018 0012             		addi.w	#$18,$12(a0)
000121FA 4E75                       		rts
000121FC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000121FC                            
000121FC                            loc_B0AC:				; CODE XREF: sub_B098+4j
000121FC 5428 0024                  		addq.b	#2,$24(a0)
00012200 317C 001D 001E             		move.w	#$1D,$1E(a0)
00012206 7000                       		moveq	#0,d0
00012208 1028 001C                  		move.b	$1C(a0),d0
0001220C 0C28 0009 001C             		cmpi.b	#9,$1C(a0)	; this is to avoid address errors
00012212 6F00                       		ble.s	loc_B0AC_2
00012214 103C 0009                  		move.b	#9,d0
00012218                            loc_B0AC_2:
00012218 D040                       		add.w	d0,d0
0001221A 303B 0000                  		move.w	Monitor_Subroutines(pc,d0.w),d0
0001221E 4EFB 0000                  		jmp	Monitor_Subroutines(pc,d0.w)
00012222                            ; End of function sub_B098
00012222                            
00012222                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012222 0000                       Monitor_Subroutines:dc.w Obj2E_ChkEggman-Monitor_Subroutines
00012224                            					; DATA XREF: ROM:Monitor_Subroutineso
00012224                            					; ROM:0000B0C8o ...
00012224 0000                       		dc.w Obj2E_ChkEggman-Monitor_Subroutines
00012226 0000                       		dc.w Obj2E_ChkSonic-Monitor_Subroutines
00012228 0000                       		dc.w Obj2E_ChkShoes-Monitor_Subroutines
0001222A 0000                       		dc.w Obj2E_ChkShield-Monitor_Subroutines
0001222C 0000                       		dc.w Obj2E_ChkInvinc-Monitor_Subroutines
0001222E 0000                       		dc.w Obj2E_ChkRings-Monitor_Subroutines
00012230 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
00012232 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
00012234 0000                       		dc.w Monitor_Null-Monitor_Subroutines
00012236                            
00012236                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012236                            
00012236                            Monitor_Null:				; DATA XREF: ROM:Monitor_Subroutineso
00012236                            					; ROM:0000B0CCo ...
00012236 4E75                       		rts
00012238                            
00012238                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
00012238                            ;	addq.w	#1,(a2)
00012238 4EF9 0000 0000             	jmp	Touch_ChkHurt2
0001223E                            ;	rts ; The Eggman monitor now does something!
0001223E                            ; ===========================================================================
0001223E                            
0001223E                            Obj2E_ChkSonic:
0001223E                            ;		cmpi.b	#2,d0		; does monitor contain Sonic?
0001223E                            ;		bne.s	Obj2E_ChkShoes
0001223E                            
0001223E                            ExtraLife:
0001223E 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
00012244 6C00 0000                  		bge.w	@playbgm2
00012248 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0001224C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00012250                            @playbgm2:
00012250 303C 002A                  		move.w	#$2A,d0
00012254 4EF9 0000 3212             		jmp	(PlaySound).l	; play extra life music
0001225A                            ; ===========================================================================
0001225A                            
0001225A                            Obj2E_ChkShoes:
0001225A                            ;		addq.w	#1,(a2)
0001225A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001225E 6600 0000                  		bne.w	Obj2E_NoMusic
00012262                            
00012262 08F8 0002 D02B             		bset	#2,(Maincharacter+status_secondary).w	; speed up the	BG music
00012268 11FC 0096 D034             		move.b	#$96,(Maincharacter+speedshoes_time).w	; time limit for the power-up
0001226E 48E7 00E0                  	movem.l a0-a2,-(sp)		; Move a0, a1 and a2 onto stack
00012272 41F8 D000                  	lea	(MainCharacter).w,a0	; Load Sonic to a0
00012276 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001227A 4EB9 0000 0000             	jsr	ApplySpeedSettings	; Fetch Speed settings
00012280 4CDF 0700                  	movem.l (sp)+,a0-a2		; Move a0, a1 and a2 from stack
00012284 303C 0008                  		move.w	#8,d0
00012288 4EF9 0000 329E             		jmp	(SetTempo).l	; Speed	up the music
0001228E                            ; ===========================================================================
0001228E                            
0001228E                            Obj2E_ChkShield:
0001228E                            ;		tst.b	($FFFFFE19).w		; is sonic super?
0001228E                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
0001228E                            ;		tst.b	($FFFFD032).w		; is sonic invincible?
0001228E                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
0001228E                            ;		moveq	#$28,d0
0001228E                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001228E                            ;Obj2E_ChkShield_Cont:
0001228E                            ;		addq.w	#1,(a2)
0001228E 08F8 0000 D02B             		bset	#0,(Maincharacter+status_secondary).w ; give	Sonic a	shield
00012294 11FC 0002 D180             		move.b	#$2,($FFFFD180).w ; load shield object	($38)
0001229A 303C 0071                  		move.w	#$71,d0
0001229E 4EF9 0000 3212             		jmp	(PlaySound).l	; play shield sound
000122A4                            ; ===========================================================================
000122A4                            
000122A4                            Obj2E_ChkInvinc:
000122A4                            ;		addq.w	#1,(a2)
000122A4 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
000122A8 6600 0000                  		bne.w	Obj2E_NoMusic		; if yes, branch
000122AC 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
000122B0 6700 0000                  		beq.w	Obj2E_NoMusic		; if yes, branch
000122B4                            
000122B4 08F8 0001 D02B             		bset	#1,(Maincharacter+status_secondary).w ; make	Sonic invincible
000122BA 11FC 0096 D032             		move.b	#$96,(Maincharacter+invincibility_time).w ; time limit for the power-up
000122C0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
000122C6                            ;		move.b	#1,($FFFFD21C).w
000122C6                            ;		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
000122C6                            ;		move.b	#2,($FFFFD25C).w
000122C6                            ;		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000122C6                            ;		move.b	#3,($FFFFD29C).w
000122C6                            ;		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000122C6                            ;		move.b	#4,($FFFFD2DC).w
000122C6 0C38 0002 FF88             		cmpi.b	#2,($FFFFFF88).w
000122CC 6E00 0000                  		bgt.w	Obj2E_NoInvcMusic
000122D0 5238 FF88                  		add.b	#1,($FFFFFF88).w
000122D4 0C38 0001 FF88             		cmpi.b	#1,($FFFFFF88).w
000122DA 6E00 0000                  		bgt.w	Obj2E_NoMusic
000122DE 4A38 F7AA                  		tst.b	($FFFFF7AA).w		; is boss mode on?
000122E2 6600                       		bne.s   Obj2E_NoMusic		; If so, don't play music
000122E4 0C78 000C FE14             		cmpi.w  #$C,($FFFFFE14).w	; Check if Sonic has air left
000122EA 6300                       		bls.s   Obj2E_NoMusic		; If so, don't play music
000122EC 303C 002C                  		move.w	#$2C,d0
000122F0 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play invincibility music
000122F6                            
000122F6                            Obj2E_NoMusic:
000122F6 4E75                       		rts	
000122F8                            		
000122F8                            Obj2E_NoInvcMusic:
000122F8 11FC 0002 FF88             		move.b	#2,($FFFFFF88).w
000122FE 4E75                       		rts
00012300                            ; ===========================================================================
00012300                            
00012300                            Obj2E_ChkRings:
00012300                            ;		cmpi.b	#6,d0		; does monitor contain 10 rings?
00012300                            ;		bne.w	Obj2E_ChkS
00012300                            ;		cmpi.b	#7,d0		; does monitor contain 10 rings?
00012300                            ;		beq.w	Obj2E_ChkS
00012300                            ;	addq.w	#1,(a2)
00012300                            
00012300                            loc_12992:
00012300 0678 000A FF98             	addi.w	#$A,(Rings_Collected).w
00012306 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
0001230C 6500                       	bcs.s	loc_129A0
0001230E 31FC 03E7 FF98             	move.w	#999,(Rings_Collected).w
00012314                            
00012314                            loc_129A0:
00012314 0678 000A FE20             	addi.w	#$A,(Ring_count).w
0001231A 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
00012320 6500                       	bcs.s	loc_129AE
00012322 31FC 03E7 FE20             	move.w	#999,(Ring_count).w
00012328                            
00012328                            loc_129AE:
00012328 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
0001232E                            ;	move.w  #$B5,d0 ; '¦'
0001232E 7200                       	moveq   #0,d1
00012330 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
00012334 E549                       	lsl.w   #2,d1
00012336 B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
0001233A 6E00                       	bgt.s   loc_129CA
0001233C 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
00012342 4EF9 0000 0000             	jmp		loc_129D4
00012348                            ;	cmpi.b	#$63,(Life_count).w
00012348                            ;	bge.w	loc_129D4
00012348                            
00012348                            
00012348                            loc_129CA:
00012348                            
00012348 303C 0034                  	move.w	#$34,d0
0001234C 4EF9 0000 0000             	jmp	(PlayMusic).l
00012352                            ; ---------------------------------------------------------------------------
00012352                            
00012352                            loc_129D4:
00012352 6000 FEEA                  	bra.w	ExtraLife
00012356                            ; ===========================================================================
00012356                            
00012356                            Obj2E_ChkS:
00012356                            ;		cmpi.b	#7,d0		; does monitor contain 'S'
00012356                            ;		bne.w	Obj2E_ChkEnd
00012356                            ;		addq.w	#1,(a2)
00012356                            ;		tst.b	(Update_HUD_timer).w
00012356                            ;		beq.w	S_MonnotSonic ; ?
00012356 0678 0032 FF98             		addi.w	#$32,(Rings_Collected).w
0001235C 0C78 03E7 FF98             		cmpi.w	#999,(Rings_Collected).w
00012362 6500 0000                  		blo.w	@cont
00012366 31FC 03E7 FF98             		move.w	#999,(Rings_Collected).w
0001236C 0678 0032 FE20             @cont:	addi.w	#$32,(Ring_count).w
00012372 0C78 03E7 FE20             		cmpi.w	#999,(Ring_count).w
00012378 6500 0000                  		blo.w	@cont2
0001237C 31FC 03E7 FE20             		move.w	#999,(Ring_count).w
00012382 0038 0001 FE1D             @cont2:	ori.b	#1,(Update_HUD_rings).w
00012388                            ;		jmp		Obj2E_ChkS_Part2
00012388                            
00012388                            ;Obj2E_ChkS_Part2:
00012388 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001238C 6600 0000                  		bne.w	S_MonNoTransAnim		; if yes, branch
00012390 4A38 FE1E                  		tst.b	(Update_HUD_timer).w ; is the timer stopped?
00012394 6700 0000                  		beq.w	S_MonNoTransAnim	; if yes, branch
00012398 0829 0006 0022             		btst	#6,status(a1)	; Check if underwater, return if not
0001239E 6700                       		beq.s	locsup
000123A0 31FC 0500 F760             		move.w	#$500,(Sonic_top_speed).w
000123A6 31FC 0018 F762             		move.w	#$18,(Sonic_acceleration).w
000123AC 31FC 0080 F764             		move.w	#$80,(Sonic_deceleration).w
000123B2                            locsup:
000123B2                            ;		move.b	#1,(Transforming_Flag-1).w
000123B2                            ;		addi.w	#$32,($FFFFFE20).w
000123B2 11FC 0001 F65F             		move.b	#1,($FFFFF65F).w
000123B8 11FC 000F F65E             		move.b	#$F,($FFFFF65E).w
000123BE 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
000123C4 31FC 003C F670             		move.w	#$3C,(Super_Sonic_frame_count).w
000123CA 31FC 0800 F760             		move.w	#$800,($FFFFF760).w
000123D0 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
000123D6 31FC 00C0 F764             		move.w	#$C0,($FFFFF764).w
000123DC 11FC 0022 D01C             		move.b	#$22,(Maincharacter+anim).w
000123E2 4EB9 0000 0000             		jsr	Super_and_Invincibility_Stars_Jmp
000123E8 11FC 008E D200             		move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD040
000123EE                            ;	moveq	#$23,d0
000123EE                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
000123EE 0C78 0002 FFA0             		cmpi.w	#2,($FFFFFFA0).w
000123F4 6600                       		bne.s	loc_864F8
000123F6 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w
000123FC 11FC 0001 F667             		move.b	#1,($FFFFF667).w
00012402 11FC 0029 D01C             		move.b	#$29,(Maincharacter+anim).w
00012408 31FC 0800 FEC0             		move.w	#$800,($FFFFFEC0).w
0001240E 31FC 0018 FEC2             		move.w	#$18,($FFFFFEC2).w
00012414 31FC 00C0 FEC4             		move.w	#$C0,($FFFFFEC4).w
0001241A                            ;		move.l	#Obj_HyperTails_Birds,($FFFFCD7C).w
0001241A                            ;		bra.s	loc_8652C
0001241A                            ; ---------------------------------------------------------------------------
0001241A                            
0001241A                            loc_864F8:
0001241A 6400                       		bcc.s	loc_86524
0001241C 21FC 0000 0000 D004        		move.l	#Map_SuperSonic,(Maincharacter+mappings).w
00012424                            ;		tst.w	(Debug_placement_mode).w
00012424                            ;		beq.s	loc_864F8_2
00012424                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
00012424                            ;loc_864F8_2:
00012424 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
0001242A 31FC 0A00 F760             		move.w	#$A00,($FFFFF760).w
00012430 31FC 0030 F762             		move.w	#$30,($FFFFF762).w
00012436 31FC 0100 F764             		move.w	#$100,($FFFFF764).w
0001243C                            ;		move.l	#Obj_HyperSonic_19348,($FFFFCD7C).w
0001243C 6000 0000                  		bra.w	loc_8652C
00012440                            ; ---------------------------------------------------------------------------
00012440                            
00012440                            loc_86524:
00012440                            ;		move.l	#Obj_HyperSonicKnux_Trail,($FFFFCBC0).w
00012440                            
00012440                            loc_8652C:
00012440                            
00012440 11FC 0001 F7C8             		move.b	#$1,($FFFFF7C8).w
00012446 11FC 0000 D032             		move.b	#0,(Maincharacter+invincibility_time).w
0001244C 08F8 0001 D02B             		bset	#1,(Maincharacter+status_secondary).w	; make Sonic invincible
00012452                            ;		moveq	#$26,d0
00012452                            ;		jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
00012452 303C 0046                  		move.w	#$46,d0
00012456 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001245C                            ;		tst.b	(Current_Boss_ID).w
0001245C                            ;		bne.s	loc_8652C_2		; branch if in a boss fight
0001245C 303C 002D                  		move.w	#$2D,d0
00012460 4EF9 0000 3212             		jmp    (PlaySound).l; load the Super Sonic song and return
00012466                            ;loc_8652C_2:
00012466 4E75                       	rts
00012468                            ; ---------------------------------------------------------------------------
00012468                            ; Called if the character is anyone other than Sonic 
00012468                            ; or if the timer is stopped when the "S" Monitor is broken.
00012468                            ; ----------------------------------------------------------------------------
00012468                            ;S_MonnotSonic:	
00012468                            ;		addi.w	#$32,(Rings_Collected).w
00012468                            ;		cmpi.w	#999,(Rings_Collected).w
00012468                            ;		blo.w	@cont
00012468                            ;		move.w	#999,(Rings_Collected).w
00012468                            ;@cont:	addi.w	#$32,(Ring_count).w
00012468                            ;		cmpi.w	#999,(Ring_count).w
00012468                            ;		blo.w	@cont2
00012468                            ;		move.w	#999,(Ring_count).w
00012468                            ;@cont2:	ori.b	#1,(Update_HUD_rings).w	
00012468                            ;		move.w	#$B5,d0
00012468                            ;		jmp	(PlayMusic).l
00012468                            ; ---------------------------------------------------------------------------
00012468                            
00012468                            S_MonNoTransAnim:
00012468 303C 0034                  		move.w	#$34,d0
0001246C 4EF9 0000 0000             		jmp	(PlayMusic).l
00012472                            
00012472                            Obj2E_ChkEnd:
00012472 4E75                       	rts			;  goggles monitors do nothing
00012474                            ; ===========================================================================
00012474                            
00012474                            Obj2E_Delete:				; XREF: Obj2E_Index
00012474 5368 001E                  		subq.w	#1,anim_frame_duration(a0)
00012478 6B00 0000                  		bmi.w	DeleteObject
0001247C 6000 0000                  		bra.w	DisplaySprite
00012480                            ;		rts	
00012480                            
00012480                            ; ===========================================================================
00012480                            Ani_obj26:
00012480                            	include "_anim\obj26.asm"
00012480                            ; ---------------------------------------------------------------------------
00012480                            ; Animation script - monitors
00012480                            ; ---------------------------------------------------------------------------
00012480 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
00012486 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0001248C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
00012492 0000                       		dc.w byte_A582-Ani_obj26
00012494 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0001249A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
000124A6 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
000124B2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
000124BE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
000124CA 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
000124D6 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
000124E2 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
000124EE 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
000124FA 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
00012502                            		even
00012502                            		even
00012502                            
00012502                            ; ---------------------------------------------------------------------------
00012502                            ; Sprite mappings - monitors
00012502                            ; ---------------------------------------------------------------------------
00012502                            Map_obj26:
00012502                            	include "_maps\obj26.asm"
00012502                            ; --------------------------------------------------------------------------------
00012502                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012502                            ; --------------------------------------------------------------------------------
00012502                            
00012502                            SME_vHL8M:	
00012502 0000 0000                  		dc.w SME_vHL8M_18-SME_vHL8M, SME_vHL8M_1E-SME_vHL8M	
00012506 0000 0000                  		dc.w SME_vHL8M_29-SME_vHL8M, SME_vHL8M_34-SME_vHL8M	
0001250A 0000 0000                  		dc.w SME_vHL8M_3F-SME_vHL8M, SME_vHL8M_4A-SME_vHL8M	
0001250E 0000 0000                  		dc.w SME_vHL8M_55-SME_vHL8M, SME_vHL8M_60-SME_vHL8M	
00012512 0000 0000                  		dc.w SME_vHL8M_6B-SME_vHL8M, SME_vHL8M_76-SME_vHL8M	
00012516 0000 0000                  		dc.w SME_vHL8M_81-SME_vHL8M, SME_vHL8M_8C-SME_vHL8M	
0001251A 01                         SME_vHL8M_18:	dc.b 1	
0001251B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012520 02                         SME_vHL8M_1E:	dc.b 2	
00012521 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
00012526 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0001252B 02                         SME_vHL8M_29:	dc.b 2	
0001252C F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
00012531 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012536 02                         SME_vHL8M_34:	dc.b 2	
00012537 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0001253C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012541 02                         SME_vHL8M_3F:	dc.b 2	
00012542 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
00012547 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0001254C 02                         SME_vHL8M_4A:	dc.b 2	
0001254D F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
00012552 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012557 02                         SME_vHL8M_55:	dc.b 2	
00012558 F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
0001255D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012562 02                         SME_vHL8M_60:	dc.b 2	
00012563 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
00012568 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001256D 02                         SME_vHL8M_6B:	dc.b 2	
0001256E F505 2020 F8               		dc.b $F5, 5, $20,	$20, $F8
00012573 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012578 02                         SME_vHL8M_76:	dc.b 2	
00012579 F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0001257E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012583 02                         SME_vHL8M_81:	dc.b 2	
00012584 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
00012589 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001258E 01                         SME_vHL8M_8C:	dc.b 1	
0001258F FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
00012594                            		even
00012594                            		even
00012594                            
00012594                            ; ===========================================================================
00012594                            ; ---------------------------------------------------------------------------
00012594                            ; Object 0E - Sonic on the title screen
00012594                            ; ---------------------------------------------------------------------------
00012594                            
00012594                            Obj0E:					; XREF: Obj_Index
00012594 7000                       		moveq	#0,d0
00012596 1028 0024                  		move.b	routine(a0),d0
0001259A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0001259E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
000125A2                            ; ===========================================================================
000125A2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
000125A4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
000125A6 0000                       		dc.w Obj0E_Move-Obj0E_Index
000125A8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
000125AA                            ; ===========================================================================
000125AA                            
000125AA                            Obj0E_Main:				; XREF: Obj0E_Index
000125AA 5428 0024                  		addq.b	#2,routine(a0)
000125AE 317C 00F0 0008             		move.w	#$F0,8(a0)
000125B4 317C 00DE 000A             		move.w	#$DE,$A(a0)
000125BA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
000125C2 317C 2300 0002             		move.w	#$2300,2(a0)
000125C8 317C 0080 0018             		move.w	#$80,priority(a0)
000125CE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
000125D4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000125DA 4EB9 0000 0000             		jsr	AnimateSprite
000125E0                            
000125E0                            Obj0E_Delay:				; XREF: Obj0E_Index
000125E0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
000125E4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
000125E6 5428 0024                  		addq.b	#2,routine(a0)	; go to	next routine
000125EA 6000 0000                  		bra.w	DisplaySprite
000125EE                            ; ===========================================================================
000125EE                            
000125EE                            Obj0E_Wait:				; XREF: Obj0E_Delay
000125EE 4E75                       		rts	
000125F0                            ; ===========================================================================
000125F0                            
000125F0                            Obj0E_Move:				; XREF: Obj0E_Index
000125F0 5168 000A                  		subq.w	#8,$A(a0)
000125F4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
000125FA 6600                       		bne.s	Obj0E_Display
000125FC 5428 0024                  		addq.b	#2,routine(a0)
00012600                            
00012600                            Obj0E_Display:
00012600 6000 0000                  		bra.w	DisplaySprite
00012604                            ; ===========================================================================
00012604 4E75                       		rts	
00012606                            ; ===========================================================================
00012606                            
00012606                            Obj0E_Animate:				; XREF: Obj0E_Index
00012606 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0001260C 4EB9 0000 0000             		jsr	AnimateSprite
00012612 6000 0000                  		bra.w	DisplaySprite
00012616                            ; ===========================================================================
00012616 4E75                       		rts	
00012618                            ; ===========================================================================
00012618                            ; ---------------------------------------------------------------------------
00012618                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
00012618                            ; ---------------------------------------------------------------------------
00012618                            
00012618                            Obj0F:					; XREF: Obj_Index
00012618 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0001261E 6700                       		beq.s	Obj0F_InitMenu
00012620 4EF9 0000 0000             		jmp		Obj8F
00012626                            	
00012626                            Obj0F_InitMenu:
00012626 7000                       		moveq	#0,d0
00012628 1028 0024                  		move.b	routine(a0),d0
0001262C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
00012630 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
00012634 6000 0000                  		bra.w	DisplaySprite
00012638                            ; ===========================================================================
00012638 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0001263A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0001263C 0000                       		dc.w locret_A6F8-Obj0F_Index
0001263E 0000                       		dc.w Obj0F_Menu-Obj0F_Index
00012640                            ; ===========================================================================
00012640                            
00012640                            Obj0F_Main:				; XREF: Obj0F_Index
00012640 5428 0024                  		addq.b	#2,routine(a0)
00012644 317C 00D0 0008             		move.w	#$D0,8(a0)
0001264A 317C 0130 000A             		move.w	#$130,$A(a0)
00012650 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
00012658 317C 0200 0002             		move.w	#$200,2(a0)
0001265E 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)	; is object "PRESS START"?
00012664 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
00012666 5428 0024                  		addq.b	#2,routine(a0)
0001266A 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is the object	"TM"?
00012670 6600                       		bne.s	locret_A6F8	; if not, branch
00012672 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
00012678 317C 0170 0008             		move.w	#$170,8(a0)
0001267E 317C 00F8 000A             		move.w	#$F8,$A(a0)
00012684                            
00012684                            locret_A6F8:				; XREF: Obj0F_Index
00012684 4E75                       		rts	
00012686                            ; ===========================================================================
00012686                            
00012686                            Obj0F_PrsStart:				; XREF: Obj0F_Index
00012686 0C38 0001 FFF0             		cmpi.b	#1,($FFFFFFF0).w
0001268C 6700                       		beq.s	Obj0F_PrsStart_Show
0001268E 0838 0007 F605             		btst	#7,($FFFFF605).w	; check if Start is pressed
00012694 6700                       		beq.s	Obj0F_PrsStart_Show	; if not, branch
00012696 5828 0024                  		addq.b	#4,routine(a0)			; go to Menu in next frame
0001269A 103C 0010                  		move.b	#$10,d0		; play menu music
0001269E 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
000126A2 317C 0512 0002             		move.w	#$512,2(a0)
000126A8 217C 0000 0000 0004        		move.l	#Map_obj0F_Menu,4(a0)
000126B0 317C 00F5 0008             		move.w	#$F5,8(a0)
000126B6 317C 0150 000A             		move.w	#$150,$A(a0)
000126BC 4E75                       		rts
000126BE                            
000126BE                            Obj0F_PrsStart_Show:
000126BE 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
000126C4 6000 0000                  		bra.w	AnimateSprite
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            Obj0F_Menu:
000126C8 7400                       		moveq	#0,d2
000126CA 1438 FF86                  		move.b	(Title_screen_option).w,d2
000126CE 1038 F605                  		move.b	($FFFFF605).w,d0
000126D2                            	;	or.b	(Ctrl_2_Press).w,d0 	; this is for the other player but only one player is supported so this has been removed.
000126D2 0800 0000                  		btst	#0,d0
000126D6 6700                       		beq.s	loc_13645
000126D8 5302                       		subq.b	#1,d2
000126DA 6400                       		bcc.s	loc_13645
000126DC 143C 0004                  		move.b	#4,d2
000126E0                            
000126E0                            loc_13645:
000126E0 0800 0001                  		btst	#1,d0
000126E4 6700                       		beq.s	loc_13646
000126E6 5202                       		addq.b	#1,d2
000126E8 0C02 0005                  		cmpi.b	#5,d2
000126EC 6500                       		blo.s	loc_13646
000126EE 7400                       		moveq	#0,d2
000126F0                            
000126F0                            loc_13646:
000126F0 1142 001A                  		move.b	d2,mapping_frame(a0)
000126F4 11C2 FF86                  		move.b	d2,(Title_screen_option).w
000126F8 0200 0003                  		andi.b	#3,d0
000126FC 6700                       		beq.s	loc_13647	; rts
000126FE 303C 005B                  		move.w	#$5B,d0 ; selection blip sound
00012702 6100 0000                  		bsr.w	Jmpto_PlaySound3
00012706                            
00012706                            loc_13647:
00012706 0838 0007 F605             		btst	#7,($FFFFF605).w ; check if Start is pressed
0001270C 6700                       		beq.s	Obj0F_Menu_rts	; if not, branch
0001270E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
00012714 6C00 0000                  		bge.w	loc_13647_3	; if not, branch
00012718                            loc_13647_2:
00012718 4EF9 0000 0000             		jmp	DeleteObject	; if yes, delete the Title Screen Menu
0001271E                            loc_13647_3:
0001271E 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
00012724 6600 FFF2                  		bne.w	loc_13647_2
00012728 103C 00B2                  		move.b	#$B2,d0
0001272C 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
00012730                            
00012730                            Obj0F_Menu_rts:
00012730 4E75                       		rts
00012732                            ; ===========================================================================
00012732                            Ani_obj0E:
00012732                            	include "_anim\obj0E.asm"
00012732                            ; ---------------------------------------------------------------------------
00012732                            ; Animation script - Sonic on the title screen
00012732                            ; ---------------------------------------------------------------------------
00012732 0000                       		dc.w byte_A706-Ani_obj0E
00012734 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
00012740                            		even
00012740                            		even
00012740                            
00012740                            Ani_obj0F:
00012740                            	include "_anim\obj0F.asm"
00012740                            ; ---------------------------------------------------------------------------
00012740                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
00012740                            ; ---------------------------------------------------------------------------
00012740 0000                       		dc.w byte_A714-Ani_obj0F
00012742 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
00012746                            		even
00012746                            		even
00012746                            
00012746                            JmpTo_DeleteObject:
00012746 4EF9 0000 0000             	jmp	DeleteObject
0001274C                            Jmpto_PlaySound_Special2:
0001274C 4EF8 325C                  	jmp	PlaySound_Special
00012750                            	
00012750                            Jmpto_PlaySound3:
00012750 4EF8 3212                  	jmp	PlaySound
00012754                            ; ---------------------------------------------------------------------------
00012754                            ; Subroutine to	animate	a sprite using an animation script
00012754                            ; ---------------------------------------------------------------------------
00012754                            
00012754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012754                            
00012754                            
00012754                            AnimateSprite:
00012754 7000                       		moveq	#0,d0
00012756 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0001275A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001275E 6700                       		beq.s	Anim_Run	; if not, branch
00012760 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00012764 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001276A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00012770                            
00012770                            Anim_Run:
00012770 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00012774 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
00012776 D040                       		add.w	d0,d0
00012778 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001277C 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
00012780 7200                       		moveq	#0,d1
00012782 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00012786 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001278A 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0001278E 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
00012792                             
00012792                            Anim_Next:
00012792 1200                       		move.b	d0,d1
00012794 0200 001F                  		andi.b	#$1F,d0
00012798 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001279C 1028 0022                  		move.b	$22(a0),d0
000127A0 E719                       		rol.b	#3,d1
000127A2 B101                       		eor.b	d0,d1
000127A4 0201 0003                  		andi.b	#3,d1
000127A8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000127AE 8328 0001                  		or.b	d1,1(a0)
000127B2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000127B6                            
000127B6                            Anim_Wait:
000127B6 4E75                       		rts	
000127B8                            ; ===========================================================================
000127B8                            
000127B8                            Anim_End_FF:
000127B8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000127BA 6600                       		bne.s	Anim_End_FE	; if not, branch
000127BC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000127C2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000127C6 60CA                       		bra.s	Anim_Next
000127C8                            ; ===========================================================================
000127C8                            
000127C8                            Anim_End_FE:
000127C8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000127CA 6600                       		bne.s	Anim_End_FD	; if not, branch
000127CC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000127D0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000127D4 9200                       		sub.b	d0,d1
000127D6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000127DA 60B6                       		bra.s	Anim_Next
000127DC                            ; ===========================================================================
000127DC                            
000127DC                            Anim_End_FD:
000127DC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000127DE 6600                       		bne.s	Anim_End_FC	; if not, branch
000127E0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000127E6                            
000127E6                            Anim_End_FC:
000127E6 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
000127E8 6600                       		bne.s	Anim_End_FB	; if not, branch
000127EA 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
000127EE                            
000127EE                            Anim_End_FB:
000127EE 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
000127F0 6600                       		bne.s	Anim_End_FA	; if not, branch
000127F2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000127F8 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
000127FC                            
000127FC                            Anim_End_FA:
000127FC 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
000127FE 6600                       		bne.s	Anim_End	; if not, branch
00012800 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
00012804                            
00012804                            Anim_End:
00012804 4E75                       		rts	
00012806                            ; End of function AnimateSprite
00012806                            
00012806                            ; ===========================================================================
00012806                            ; ---------------------------------------------------------------------------
00012806                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
00012806                            ; ---------------------------------------------------------------------------
00012806                            Map_obj0F:
00012806                            	include "_maps\obj0F.asm"
00012806                            ; ---------------------------------------------------------------------------
00012806                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
00012806                            ; ---------------------------------------------------------------------------
00012806 0000                       		dc.w byte_A7CD-Map_obj0F
00012808 0000                       		dc.w byte_A7CC-Map_obj0F
0001280A 0000                       		dc.w byte_A7EB-Map_obj0F
0001280C 0000                       		dc.w byte_A882-Map_obj0F
0001280E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0001280F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
00012814 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
00012819 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0001281E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
00012823 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
00012828 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0001282D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0001282E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012833 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012838 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001283D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012842 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012847 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001284C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012851 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012856 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001285B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012860 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012865 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001286A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001286F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012874 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012879 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001287E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012883 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012888 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001288D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012892 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012897 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001289C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128A1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128A6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128AB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128B0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128B5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128BA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128BF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000128C4 01                         byte_A882:	dc.b 1			; "TM"
000128C5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000128CA                            		even
000128CA                            		even
000128CA                            Map_obj0F_Menu:
000128CA                            	include "_maps\obj0F_Menu.asm"
000128CA                            ; --------------------------------------------------------------------------------
000128CA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000128CA                            ; --------------------------------------------------------------------------------
000128CA                            
000128CA                            SME_113pL:	
000128CA 0000 0000                  		dc.w SME_113pL_A-SME_113pL, SME_113pL_6F-SME_113pL	
000128CE 0000 0000                  		dc.w SME_113pL_D4-SME_113pL, SME_113pL_134-SME_113pL	
000128D2 0000                       		dc.w SME_113pL_194-SME_113pL	
000128D4 14                         SME_113pL_A:	dc.b $14	
000128D5 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
000128DA E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
000128DF E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
000128E4 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
000128E9 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
000128EE E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
000128F3 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
000128F8 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
000128FD F000 2019 F0               		dc.b $F0, 0, $20, $19, $F0	
00012902 F000 2012 F8               		dc.b $F0, 0, $20, $12, $F8	
00012907 F000 2023 00               		dc.b $F0, 0, $20, $23, 0	
0001290C F000 2012 08               		dc.b $F0, 0, $20, $12, 8	
00012911 F000 2019 10               		dc.b $F0, 0, $20, $19, $10	
00012916 F000 2020 20               		dc.b $F0, 0, $20, $20, $20	
0001291B F000 2012 28               		dc.b $F0, 0, $20, $12, $28	
00012920 F000 2019 30               		dc.b $F0, 0, $20, $19, $30	
00012925 F000 2012 38               		dc.b $F0, 0, $20, $12, $38	
0001292A F000 2010 40               		dc.b $F0, 0, $20, $10, $40	
0001292F F000 2021 48               		dc.b $F0, 0, $20, $21, $48	
00012934 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
00012939 14                         SME_113pL_6F:	dc.b $14	
0001293A E004 2020 F8               		dc.b $E0, 4, $20, $20, $F8	
0001293F E000 200E 08               		dc.b $E0, 0, $20, $E, 8	
00012944 E000 201F 10               		dc.b $E0, 0, $20, $1F, $10	
00012949 E000 2021 18               		dc.b $E0, 0, $20, $21, $18	
0001294E E000 2014 28               		dc.b $E0, 0, $20, $14, $28	
00012953 E000 200E 30               		dc.b $E0, 0, $20, $E, $30	
00012958 E000 201A 38               		dc.b $E0, 0, $20, $1A, $38	
0001295D E000 2012 40               		dc.b $E0, 0, $20, $12, $40	
00012962 F000 0019 F0               		dc.b $F0, 0, 0, $19, $F0	
00012967 F000 0012 F8               		dc.b $F0, 0, 0, $12, $F8	
0001296C F000 0023 00               		dc.b $F0, 0, 0, $23, 0	
00012971 F000 0012 08               		dc.b $F0, 0, 0, $12, 8	
00012976 F000 0019 10               		dc.b $F0, 0, 0, $19, $10	
0001297B F000 0020 20               		dc.b $F0, 0, 0, $20, $20	
00012980 F000 0012 28               		dc.b $F0, 0, 0, $12, $28	
00012985 F000 0019 30               		dc.b $F0, 0, 0, $19, $30	
0001298A F000 0012 38               		dc.b $F0, 0, 0, $12, $38	
0001298F F000 0010 40               		dc.b $F0, 0, 0, $10, $40	
00012994 F000 0021 48               		dc.b $F0, 0, 0, $21, $48	
00012999 F004 0028 D8               		dc.b $F0, 4, 0, $28, $D8	
0001299E 13                         SME_113pL_D4:	dc.b $13	
0001299F F000 2020 EC               		dc.b $F0, 0, $20, $20, $EC	
000129A4 F000 201D F4               		dc.b $F0, 0, $20, $1D, $F4	
000129A9 F000 2012 FC               		dc.b $F0, 0, $20, $12, $FC	
000129AE F000 2010 04               		dc.b $F0, 0, $20, $10, 4	
000129B3 F000 2016 0C               		dc.b $F0, 0, $20, $16, $C	
000129B8 F000 200E 14               		dc.b $F0, 0, $20, $E, $14	
000129BD F000 2019 1C               		dc.b $F0, 0, $20, $19, $1C	
000129C2 F004 2020 2C               		dc.b $F0, 4, $20, $20, $2C	
000129C7 F000 200E 3C               		dc.b $F0, 0, $20, $E, $3C	
000129CC F000 2014 44               		dc.b $F0, 0, $20, $14, $44	
000129D1 F000 2012 4C               		dc.b $F0, 0, $20, $12, $4C	
000129D6 E000 001C 04               		dc.b $E0, 0, 0, $1C, 4	
000129DB E000 001D 0C               		dc.b $E0, 0, 0, $1D, $C	
000129E0 E000 0021 14               		dc.b $E0, 0, 0, $21, $14	
000129E5 E000 0016 1C               		dc.b $E0, 0, 0, $16, $1C	
000129EA E000 001C 24               		dc.b $E0, 0, 0, $1C, $24	
000129EF E000 001B 2C               		dc.b $E0, 0, 0, $1B, $2C	
000129F4 E000 0020 34               		dc.b $E0, 0, 0, $20, $34	
000129F9 E004 0028 EC               		dc.b $E0, 4, 0, $28, $EC	
000129FE 13                         SME_113pL_134:	dc.b $13	
000129FF F000 0020 EC               		dc.b $F0, 0, 0, $20, $EC	
00012A04 F000 001D F4               		dc.b $F0, 0, 0, $1D, $F4	
00012A09 F000 0012 FC               		dc.b $F0, 0, 0, $12, $FC	
00012A0E F000 0010 04               		dc.b $F0, 0, 0, $10, 4	
00012A13 F000 0016 0C               		dc.b $F0, 0, 0, $16, $C	
00012A18 F000 000E 14               		dc.b $F0, 0, 0, $E, $14	
00012A1D F000 0019 1C               		dc.b $F0, 0, 0, $19, $1C	
00012A22 F004 0020 2C               		dc.b $F0, 4, 0, $20, $2C	
00012A27 F000 000E 3C               		dc.b $F0, 0, 0, $E, $3C	
00012A2C F000 0014 44               		dc.b $F0, 0, 0, $14, $44	
00012A31 F000 0012 4C               		dc.b $F0, 0, 0, $12, $4C	
00012A36 E000 201C 04               		dc.b $E0, 0, $20, $1C, 4	
00012A3B E000 201D 0C               		dc.b $E0, 0, $20, $1D, $C	
00012A40 E000 2021 14               		dc.b $E0, 0, $20, $21, $14	
00012A45 E000 2016 1C               		dc.b $E0, 0, $20, $16, $1C	
00012A4A E000 201C 24               		dc.b $E0, 0, $20, $1C, $24	
00012A4F E000 201B 2C               		dc.b $E0, 0, $20, $1B, $2C	
00012A54 E000 2020 34               		dc.b $E0, 0, $20, $20, $34	
00012A59 F004 0028 D4               		dc.b $F0, 4, 0, $28, $D4	
00012A5E 0F                         SME_113pL_194:	dc.b $F	
00012A5F E000 001C 0C               		dc.b $E0, 0, 0, $1C, $C	
00012A64 E000 0019 14               		dc.b $E0, 0, 0, $19, $14	
00012A69 E000 0011 1C               		dc.b $E0, 0, 0, $11, $1C	
00012A6E F000 0019 EC               		dc.b $F0, 0, 0, $19, $EC	
00012A73 F000 0012 F4               		dc.b $F0, 0, 0, $12, $F4	
00012A78 F000 0023 FC               		dc.b $F0, 0, 0, $23, $FC	
00012A7D F000 0012 04               		dc.b $F0, 0, 0, $12, 4	
00012A82 F000 0019 0C               		dc.b $F0, 0, 0, $19, $C	
00012A87 F000 0020 1C               		dc.b $F0, 0, 0, $20, $1C	
00012A8C F000 0012 24               		dc.b $F0, 0, 0, $12, $24	
00012A91 F000 0019 2C               		dc.b $F0, 0, 0, $19, $2C	
00012A96 F000 0012 34               		dc.b $F0, 0, 0, $12, $34	
00012A9B F000 0010 3C               		dc.b $F0, 0, 0, $10, $3C	
00012AA0 F000 0021 44               		dc.b $F0, 0, 0, $21, $44	
00012AA5 E804 0028 D4               		dc.b $E8, 4, 0, $28, $D4	
00012AAA                            		even
00012AAA                            		even
00012AAA                            ; ---------------------------------------------------------------------------
00012AAA                            ; Sprite mappings - Sonic on the title screen
00012AAA                            ; ---------------------------------------------------------------------------
00012AAA                            Map_obj0E:
00012AAA                            	include "_maps\obj0E.asm"
00012AAA                            ; ---------------------------------------------------------------------------
00012AAA                            ; Sprite mappings - Sonic on the title screen
00012AAA                            ; ---------------------------------------------------------------------------
00012AAA 0000                       		dc.w byte_A898-Map_obj0E
00012AAC 0000                       		dc.w byte_A8CB-Map_obj0E
00012AAE 0000                       		dc.w byte_A917-Map_obj0E
00012AB0 0000                       		dc.w byte_A96D-Map_obj0E
00012AB2 0000                       		dc.w byte_A9AF-Map_obj0E
00012AB4 0000                       		dc.w byte_A9E7-Map_obj0E
00012AB6 0000                       		dc.w byte_AA47-Map_obj0E
00012AB8 0000                       		dc.w byte_AAB1-Map_obj0E
00012ABA 0A                         byte_A898:	dc.b $A
00012ABB 0808 0000 08               		dc.b 8,	8, 0, 0, 8
00012AC0 100F 0003 08               		dc.b $10, $F, 0, 3, 8
00012AC5 100F 0013 28               		dc.b $10, $F, 0, $13, $28
00012ACA 300E 0023 08               		dc.b $30, $E, 0, $23, 8
00012ACF 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
00012AD4 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
00012AD9 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
00012ADE 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
00012AE3 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
00012AE8 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
00012AED 0F                         byte_A8CB:	dc.b $F
00012AEE 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
00012AF3 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
00012AF8 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
00012AFD 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
00012B02 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
00012B07 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
00012B0C 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
00012B11 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
00012B16 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
00012B1B 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
00012B20 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
00012B25 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
00012B2A 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
00012B2F 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00012B34 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00012B39 11                         byte_A917:	dc.b $11
00012B3A 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
00012B3F 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
00012B44 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
00012B49 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
00012B4E 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
00012B53 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
00012B58 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
00012B5D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
00012B62 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
00012B67 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
00012B6C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
00012B71 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
00012B76 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
00012B7B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
00012B80 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
00012B85 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00012B8A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00012B8F 0D                         byte_A96D:	dc.b $D
00012B90 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
00012B95 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
00012B9A 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
00012B9F 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
00012BA4 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
00012BA9 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
00012BAE 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
00012BB3 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
00012BB8 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
00012BBD 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
00012BC2 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
00012BC7 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
00012BCC 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
00012BD1 0B                         byte_A9AF:	dc.b $B
00012BD2 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
00012BD7 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
00012BDC 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
00012BE1 280E 0118 18               		dc.b $28, $E, 1, $18, $18
00012BE6 280E 0124 38               		dc.b $28, $E, 1, $24, $38
00012BEB 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
00012BF0 400E 0132 10               		dc.b $40, $E, 1, $32, $10
00012BF5 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
00012BFA 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
00012BFF 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
00012C04 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
00012C09 13                         byte_A9E7:	dc.b $13
00012C0A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012C0F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012C14 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012C19 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012C1E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012C23 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012C28 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012C2D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012C32 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012C37 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012C3C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012C41 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012C46 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012C4B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012C50 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012C55 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012C5A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012C5F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012C64 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012C69 15                         byte_AA47:	dc.b $15
00012C6A 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012C6F 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012C74 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012C79 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012C7E 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012C83 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012C88 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012C8D 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012C92 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012C97 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012C9C 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012CA1 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012CA6 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012CAB 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012CB0 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012CB5 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012CBA 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012CBF 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012CC4 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012CC9 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012CCE 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012CD3 16                         byte_AAB1:	dc.b $16
00012CD4 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
00012CD9 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
00012CDE 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
00012CE3 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
00012CE8 300B 0201 38               		dc.b $30, $B, 2, 1, $38
00012CED 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012CF2 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012CF7 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012CFC 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012D01 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012D06 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012D0B 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012D10 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012D15 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012D1A 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012D1F 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012D24 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012D29 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012D2E 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012D33 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012D38 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012D3D 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012D42                            		even
00012D42                            		even
00012D42                            
00012D42                            ; ===========================================================================
00012D42                            ; ---------------------------------------------------------------------------
00012D42                            ; Object 2B - Chopper enemy (GHZ)
00012D42                            ; ---------------------------------------------------------------------------
00012D42                            
00012D42                            Obj2B:					; XREF: Obj_Index
00012D42 7000                       		moveq	#0,d0
00012D44 1028 0024                  		move.b	routine(a0),d0
00012D48 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
00012D4C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
00012D50 6000 0000                  		bra.w	MarkObjGone
00012D54                            ; ===========================================================================
00012D54 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
00012D56 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
00012D58                            ; ===========================================================================
00012D58                            
00012D58                            Obj2B_Main:				; XREF: Obj2B_Index
00012D58 5428 0024                  		addq.b	#2,routine(a0)
00012D5C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
00012D64 317C 047B 0002             		move.w	#$47B,2(a0)
00012D6A 117C 0004 0001             		move.b	#4,1(a0)
00012D70 317C 0200 0018             		move.w	#$200,priority(a0)
00012D76 117C 0009 0020             		move.b	#9,collision_flags(a0)
00012D7C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012D82 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012D88 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012D8E                            
00012D8E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
00012D8E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
00012D94 4EBA F9BE                  		jsr	AnimateSprite
00012D98 4EB9 0000 0000             		jsr	SpeedToPos
00012D9E 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; reduce speed
00012DA4 3028 0030                  		move.w	$30(a0),d0
00012DA8 B068 000C                  		cmp.w	$C(a0),d0
00012DAC 6400                       		bcc.s	Obj2B_ChgAni
00012DAE 3140 000C                  		move.w	d0,$C(a0)
00012DB2 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012DB8                            
00012DB8                            Obj2B_ChgAni:
00012DB8 117C 0001 001C             		move.b	#1,anim(a0)	; use fast animation
00012DBE 0440 00C0                  		subi.w	#$C0,d0
00012DC2 B068 000C                  		cmp.w	$C(a0),d0
00012DC6 6400                       		bcc.s	locret_ABB6
00012DC8 117C 0000 001C             		move.b	#0,anim(a0)	; use slow animation
00012DCE 4A68 0012                  		tst.w	y_vel(a0)		; is Chopper at	its highest point?
00012DD2 6B00                       		bmi.s	locret_ABB6	; if not, branch
00012DD4 117C 0002 001C             		move.b	#2,anim(a0)	; use stationary animation
00012DDA                            
00012DDA                            locret_ABB6:
00012DDA 4E75                       		rts	
00012DDC                            ; ===========================================================================
00012DDC                            Ani_obj2B:
00012DDC                            	include "_anim\obj2B.asm"
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC                            ; Animation script - Chopper enemy
00012DDC                            ; ---------------------------------------------------------------------------
00012DDC 0000                       		dc.w byte_ABBE-Ani_obj2B
00012DDE 0000                       		dc.w byte_ABC2-Ani_obj2B
00012DE0 0000                       		dc.w byte_ABC6-Ani_obj2B
00012DE2 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
00012DE6 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
00012DEA 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
00012DEE 00                         		even
00012DEE 00                         		even
00012DEE                            
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            ; Sprite mappings - Chopper enemy (GHZ)
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            Map_obj2B:
00012DEE                            	include "_maps\obj2B.asm"
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE                            ; Sprite mappings - Chopper enemy (GHZ)
00012DEE                            ; ---------------------------------------------------------------------------
00012DEE 0000                       		dc.w byte_ABCE-Map_obj2B
00012DF0 0000                       		dc.w byte_ABD4-Map_obj2B
00012DF2 01                         byte_ABCE:	dc.b 1
00012DF3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012DF8 01                         byte_ABD4:	dc.b 1
00012DF9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012DFE                            		even
00012DFE                            		even
00012DFE                            
00012DFE                            ; ===========================================================================
00012DFE                            ; ---------------------------------------------------------------------------
00012DFE                            ; Object 2C - Jaws enemy (LZ)
00012DFE                            ; ---------------------------------------------------------------------------
00012DFE                            
00012DFE                            Obj2C:					; XREF: Obj_Index
00012DFE 7000                       		moveq	#0,d0
00012E00 1028 0024                  		move.b	routine(a0),d0
00012E04 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
00012E08 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
00012E0C                            ; ===========================================================================
00012E0C 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
00012E0E 0000                       		dc.w Obj2C_Turn-Obj2C_Index
00012E10                            ; ===========================================================================
00012E10                            
00012E10                            Obj2C_Main:				; XREF: Obj2C_Index
00012E10 5428 0024                  		addq.b	#2,routine(a0)
00012E14 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
00012E1C 317C 2486 0002             		move.w	#$2486,2(a0)
00012E22 0028 0004 0001             		ori.b	#4,1(a0)
00012E28 117C 000A 0020             		move.b	#$A,collision_flags(a0)
00012E2E 317C 0200 0018             		move.w	#$200,priority(a0)
00012E34 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012E3A 7000                       		moveq	#0,d0
00012E3C 1028 0028                  		move.b	subtype(a0),d0	; load object subtype number
00012E40 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
00012E42 5340                       		subq.w	#1,d0
00012E44 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
00012E48 3140 0032                  		move.w	d0,$32(a0)
00012E4C 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move Jaws to the left
00012E52 0828 0000 0022             		btst	#0,status(a0)	; is Jaws facing left?
00012E58 6700                       		beq.s	Obj2C_Turn	; if yes, branch
00012E5A 4468 0010                  		neg.w	x_vel(a0)		; move Jaws to the right
00012E5E                            
00012E5E                            Obj2C_Turn:				; XREF: Obj2C_Index
00012E5E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
00012E62 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
00012E64 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
00012E6A 4468 0010                  		neg.w	x_vel(a0)		; change speed direction
00012E6E 0868 0000 0022             		bchg	#0,status(a0)	; change Jaws facing direction
00012E74 117C 0001 001D             		move.b	#1,next_anim(a0)	; reset	animation
00012E7A                            
00012E7A                            Obj2C_Animate:
00012E7A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
00012E80 4EBA F8D2                  		jsr	AnimateSprite
00012E84 4EB9 0000 0000             		jsr	SpeedToPos
00012E8A 6000 0000                  		bra.w	MarkObjGone
00012E8E                            ; ===========================================================================
00012E8E                            Ani_obj2C:
00012E8E                            	include "_anim\obj2C.asm"
00012E8E                            ; ---------------------------------------------------------------------------
00012E8E                            ; Animation script - Jaws enemy
00012E8E                            ; ---------------------------------------------------------------------------
00012E8E 0000                       		dc.w byte_AC6A-Ani_obj2C
00012E90 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
00012E96                            		even
00012E96                            		even
00012E96                            
00012E96                            ; ---------------------------------------------------------------------------
00012E96                            ; Sprite mappings - Jaws enemy (LZ)
00012E96                            ; ---------------------------------------------------------------------------
00012E96                            Map_obj2C:
00012E96                            	include "_maps\obj2C.asm"
00012E96                            ; ---------------------------------------------------------------------------
00012E96                            ; Sprite mappings - Jaws enemy (LZ)
00012E96                            ; ---------------------------------------------------------------------------
00012E96 0000                       		dc.w byte_AC78-Map_obj2C
00012E98 0000                       		dc.w byte_AC83-Map_obj2C
00012E9A 0000                       		dc.w byte_AC8E-Map_obj2C
00012E9C 0000                       		dc.w byte_AC99-Map_obj2C
00012E9E 02                         byte_AC78:	dc.b 2
00012E9F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012EA4 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
00012EA9 02                         byte_AC83:	dc.b 2
00012EAA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012EAF F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
00012EB4 02                         byte_AC8E:	dc.b 2
00012EB5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012EBA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
00012EBF 02                         byte_AC99:	dc.b 2
00012EC0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012EC5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
00012ECA                            		even
00012ECA                            		even
00012ECA                            
00012ECA                            ; ===========================================================================
00012ECA                            ; ---------------------------------------------------------------------------
00012ECA                            ; Object 2D - Burrobot enemy (LZ)
00012ECA                            ; ---------------------------------------------------------------------------
00012ECA                            
00012ECA                            Obj2D:					; XREF: Obj_Index
00012ECA 7000                       		moveq	#0,d0
00012ECC 1028 0024                  		move.b	routine(a0),d0
00012ED0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
00012ED4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
00012ED8                            ; ===========================================================================
00012ED8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
00012EDA 0000                       		dc.w Obj2D_Action-Obj2D_Index
00012EDC                            ; ===========================================================================
00012EDC                            
00012EDC                            Obj2D_Main:				; XREF: Obj2D_Index
00012EDC 5428 0024                  		addq.b	#2,routine(a0)
00012EE0 117C 0013 0016             		move.b	#$13,$16(a0)
00012EE6 117C 0008 0017             		move.b	#8,$17(a0)
00012EEC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
00012EF4 317C 04A6 0002             		move.w	#$4A6,2(a0)
00012EFA 0028 0004 0001             		ori.b	#4,1(a0)
00012F00 317C 0200 0018             		move.w	#$200,priority(a0)
00012F06 117C 0005 0020             		move.b	#5,collision_flags(a0)
00012F0C 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00012F12 5C28 0025                  		addq.b	#6,routine_secondary(a0)	; run "Obj2D_ChkSonic" routine
00012F16 117C 0002 001C             		move.b	#2,anim(a0)
00012F1C                            
00012F1C                            Obj2D_Action:				; XREF: Obj2D_Index
00012F1C 7000                       		moveq	#0,d0
00012F1E 1028 0025                  		move.b	routine_secondary(a0),d0
00012F22 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
00012F26 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
00012F2A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
00012F30 4EBA F822                  		jsr	AnimateSprite
00012F34 6000 0000                  		bra.w	MarkObjGone
00012F38                            ; ===========================================================================
00012F38 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
00012F3A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
00012F3C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
00012F3E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
00012F40                            ; ===========================================================================
00012F40                            
00012F40                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
00012F40 5368 0030                  		subq.w	#1,$30(a0)
00012F44 6A00                       		bpl.s	locret_AD42
00012F46 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012F4A 317C 00FF 0030             		move.w	#$FF,$30(a0)
00012F50 317C 0080 0010             		move.w	#$80,x_vel(a0)
00012F56 117C 0001 001C             		move.b	#1,anim(a0)
00012F5C 0868 0000 0022             		bchg	#0,status(a0)	; change direction the Burrobot	is facing
00012F62 6700                       		beq.s	locret_AD42
00012F64 4468 0010                  		neg.w	x_vel(a0)		; change direction the Burrobot	is moving
00012F68                            
00012F68                            locret_AD42:
00012F68 4E75                       		rts	
00012F6A                            ; ===========================================================================
00012F6A                            
00012F6A                            Obj2D_Move:				; XREF: Obj2D_Index2
00012F6A 5368 0030                  		subq.w	#1,$30(a0)
00012F6E 6B00                       		bmi.s	loc_AD84
00012F70 4EB9 0000 0000             		jsr	SpeedToPos
00012F76 0868 0000 0032             		bchg	#0,$32(a0)
00012F7C 6600                       		bne.s	loc_AD78
00012F7E 3628 0008                  		move.w	8(a0),d3
00012F82 0643 000C                  		addi.w	#$C,d3
00012F86 0828 0000 0022             		btst	#0,status(a0)
00012F8C 6600                       		bne.s	loc_AD6A
00012F8E 0443 0018                  		subi.w	#$18,d3
00012F92                            
00012F92                            loc_AD6A:
00012F92 4EB9 0000 0000             		jsr	ObjHitFloor2
00012F98 0C41 000C                  		cmpi.w	#$C,d1
00012F9C 6C00                       		bge.s	loc_AD84
00012F9E 4E75                       		rts	
00012FA0                            ; ===========================================================================
00012FA0                            
00012FA0                            loc_AD78:				; XREF: Obj2D_Move
00012FA0 4EB9 0000 0000             		jsr	ObjHitFloor
00012FA6 D368 000C                  		add.w	d1,$C(a0)
00012FAA 4E75                       		rts	
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            loc_AD84:				; XREF: Obj2D_Move
00012FAC 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
00012FB2 6700                       		beq.s	loc_ADA4
00012FB4 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012FB8 317C 003B 0030             		move.w	#$3B,$30(a0)
00012FBE 317C 0000 0010             		move.w	#0,x_vel(a0)
00012FC4 117C 0000 001C             		move.b	#0,anim(a0)
00012FCA 4E75                       		rts	
00012FCC                            ; ===========================================================================
00012FCC                            
00012FCC                            loc_ADA4:
00012FCC 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012FD0 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00012FD6 117C 0002 001C             		move.b	#2,anim(a0)
00012FDC 4E75                       		rts	
00012FDE                            ; ===========================================================================
00012FDE                            
00012FDE                            Obj2D_Jump:				; XREF: Obj2D_Index2
00012FDE 4EB9 0000 0000             		jsr	SpeedToPos
00012FE4 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00012FEA 6B00                       		bmi.s	locret_ADF0
00012FEC 117C 0003 001C             		move.b	#3,anim(a0)
00012FF2 4EB9 0000 0000             		jsr	ObjHitFloor
00012FF8 4A41                       		tst.w	d1
00012FFA 6A00                       		bpl.s	locret_ADF0
00012FFC D368 000C                  		add.w	d1,$C(a0)
00013000 317C 0000 0012             		move.w	#0,y_vel(a0)
00013006 117C 0001 001C             		move.b	#1,anim(a0)
0001300C 317C 00FF 0030             		move.w	#$FF,$30(a0)
00013012 5528 0025                  		subq.b	#2,routine_secondary(a0)
00013016 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
0001301C                            
0001301C                            locret_ADF0:
0001301C 4E75                       		rts	
0001301E                            ; ===========================================================================
0001301E                            
0001301E                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0001301E 343C 0060                  		move.w	#$60,d2
00013022 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
00013028 6400                       		bcc.s	locret_AE20
0001302A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001302E 9068 000C                  		sub.w	$C(a0),d0
00013032 6400                       		bcc.s	locret_AE20
00013034 0C40 FF80                  		cmpi.w	#-$80,d0
00013038 6500                       		bcs.s	locret_AE20
0001303A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001303E 6600                       		bne.s	locret_AE20
00013040 5528 0025                  		subq.b	#2,routine_secondary(a0)
00013044 3141 0010                  		move.w	d1,x_vel(a0)
00013048 317C FC00 0012             		move.w	#-$400,y_vel(a0)
0001304E                            
0001304E                            locret_AE20:
0001304E 4E75                       		rts	
00013050                            
00013050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013050                            
00013050                            
00013050                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
00013050 323C 0080                  		move.w	#$80,d1
00013054 08E8 0000 0022             		bset	#0,status(a0)
0001305A 3038 D008                  		move.w	($FFFFD008).w,d0
0001305E 9068 0008                  		sub.w	8(a0),d0
00013062 6400                       		bcc.s	loc_AE40
00013064 4440                       		neg.w	d0
00013066 4441                       		neg.w	d1
00013068 08A8 0000 0022             		bclr	#0,status(a0)
0001306E                            
0001306E                            loc_AE40:
0001306E B042                       		cmp.w	d2,d0
00013070 4E75                       		rts	
00013072                            ; End of function Obj2D_ChkSonic2
00013072                            
00013072                            ; ===========================================================================
00013072                            Ani_obj2D:
00013072                            	include "_anim\obj2D.asm"
00013072                            ; ---------------------------------------------------------------------------
00013072                            ; Animation script - Burrobot enemy
00013072                            ; ---------------------------------------------------------------------------
00013072 0000                       		dc.w byte_AE4C-Ani_obj2D
00013074 0000                       		dc.w byte_AE50-Ani_obj2D
00013076 0000                       		dc.w byte_AE54-Ani_obj2D
00013078 0000                       		dc.w byte_AE58-Ani_obj2D
0001307A 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0001307E 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
00013082 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
00013086 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0001308A 00                         		even
0001308A 00                         		even
0001308A                            
0001308A                            ; ---------------------------------------------------------------------------
0001308A                            ; Sprite mappings - Burrobot enemy (LZ)
0001308A                            ; ---------------------------------------------------------------------------
0001308A                            Map_obj2D:
0001308A                            	include "_maps\obj2D.asm"
0001308A                            ; ---------------------------------------------------------------------------
0001308A                            ; Sprite mappings - Burrobot enemy (LZ)
0001308A                            ; ---------------------------------------------------------------------------
0001308A 0000                       		dc.w byte_AE6A-Map_obj2D
0001308C 0000                       		dc.w byte_AE75-Map_obj2D
0001308E 0000                       		dc.w byte_AE80-Map_obj2D
00013090 0000                       		dc.w byte_AE8B-Map_obj2D
00013092 0000                       		dc.w byte_AE96-Map_obj2D
00013094 0000                       		dc.w byte_AEA1-Map_obj2D
00013096 0000                       		dc.w byte_AEAC-Map_obj2D
00013098 02                         byte_AE6A:	dc.b 2
00013099 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0001309E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
000130A3 02                         byte_AE75:	dc.b 2
000130A4 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
000130A9 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000130AE 02                         byte_AE80:	dc.b 2
000130AF E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
000130B4 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
000130B9 02                         byte_AE8B:	dc.b 2
000130BA E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
000130BF 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
000130C4 02                         byte_AE96:	dc.b 2
000130C5 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
000130CA 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
000130CF 02                         byte_AEA1:	dc.b 2
000130D0 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
000130D5 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
000130DA 02                         byte_AEAC:	dc.b 2
000130DB EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
000130E0 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
000130E6 00                         		even
000130E6 00                         		even
000130E6                            
000130E6                            ; ===========================================================================
000130E6                            ; ---------------------------------------------------------------------------
000130E6                            ; Object 2F - large moving platforms (MZ)
000130E6                            ; ---------------------------------------------------------------------------
000130E6                            
000130E6                            Obj2F:					; XREF: Obj_Index
000130E6 7000                       		moveq	#0,d0
000130E8 1028 0024                  		move.b	routine(a0),d0
000130EC 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
000130F0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
000130F4                            ; ===========================================================================
000130F4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
000130F6 0000                       		dc.w Obj2F_Action-Obj2F_Index
000130F8                            
000130F8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
000130FA 0040                       		dc.b 0,	$40			; frame	number,	platform width
000130FC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
000130FE 0140                       		dc.b 1,	$40
00013100 0000                       		dc.w Obj2F_Data2-Obj2F_Data
00013102 0220                       		dc.b 2,	$20
00013104                            ; ===========================================================================
00013104                            
00013104                            Obj2F_Main:				; XREF: Obj2F_Index
00013104 5428 0024                  		addq.b	#2,routine(a0)
00013108 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
00013110 317C C000 0002             		move.w	#$C000,2(a0)
00013116 117C 0004 0001             		move.b	#4,1(a0)
0001311C 317C 0280 0018             		move.w	#$280,priority(a0)
00013122 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00013128 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
0001312E 7000                       		moveq	#0,d0
00013130 1028 0028                  		move.b	subtype(a0),d0
00013134 E448                       		lsr.w	#2,d0
00013136 0240 001C                  		andi.w	#$1C,d0
0001313A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0001313E 3019                       		move.w	(a1)+,d0
00013140 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
00013144 214A 0030                  		move.l	a2,$30(a0)
00013148 1159 001A                  		move.b	(a1)+,mapping_frame(a0)
0001314C 1151 0023                  		move.b	(a1),width_pixels(a0)
00013150 0228 000F 0028             		andi.b	#$F,subtype(a0)
00013156 117C 0040 0016             		move.b	#$40,$16(a0)
0001315C 08E8 0004 0001             		bset	#4,1(a0)
00013162                            
00013162                            Obj2F_Action:				; XREF: Obj2F_Index
00013162 4EB9 0000 0000             		jsr	Obj2F_Types
00013168 4A28 0025                  		tst.b	routine_secondary(a0)
0001316C 6700                       		beq.s	Obj2F_Solid
0001316E 7200                       		moveq	#0,d1
00013170 1228 0023                  		move.b	width_pixels(a0),d1
00013174 0641 000B                  		addi.w	#$B,d1
00013178 4EBA C196                  		jsr	ExitPlatform
0001317C 0829 0003 0022             		btst	#3,status(a1)
00013182 6600 0000                  		bne.w	Obj2F_Slope
00013186 4228 0025                  		clr.b	routine_secondary(a0)
0001318A 6000                       		bra.s	Obj2F_Display
0001318C                            ; ===========================================================================
0001318C                            
0001318C                            Obj2F_Slope:				; XREF: Obj2F_Action
0001318C 7200                       		moveq	#0,d1
0001318E 1228 0023                  		move.b	width_pixels(a0),d1
00013192 0641 000B                  		addi.w	#$B,d1
00013196 2468 0030                  		movea.l	$30(a0),a2
0001319A 3428 0008                  		move.w	8(a0),d2
0001319E 4EBA D0D6                  		jsr	SlopeObject2
000131A2 6000                       		bra.s	Obj2F_Display
000131A4                            ; ===========================================================================
000131A4                            
000131A4                            Obj2F_Solid:				; XREF: Obj2F_Action
000131A4 7200                       		moveq	#0,d1
000131A6 1228 0023                  		move.b	width_pixels(a0),d1
000131AA 0641 000B                  		addi.w	#$B,d1
000131AE 343C 0020                  		move.w	#$20,d2
000131B2 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
000131B8 6600                       		bne.s	loc_AF8E
000131BA 343C 0030                  		move.w	#$30,d2
000131BE                            
000131BE                            loc_AF8E:
000131BE 2468 0030                  		movea.l	$30(a0),a2
000131C2 4EB9 0000 0000             		jsr	SolidObject2F
000131C8                            
000131C8                            Obj2F_Display:				; XREF: Obj2F_Action
000131C8 4EB9 0000 0000             		jsr	DisplaySprite
000131CE 6000 0000                  		bra.w	Obj2F_ChkDel
000131D2                            
000131D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131D2                            
000131D2                            
000131D2                            Obj2F_Types:				; XREF: Obj2F_Action
000131D2 7000                       		moveq	#0,d0
000131D4 1028 0028                  		move.b	subtype(a0),d0
000131D8 0240 0007                  		andi.w	#7,d0
000131DC D040                       		add.w	d0,d0
000131DE 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
000131E2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
000131E6                            ; End of function Obj2F_Types
000131E6                            
000131E6                            ; ===========================================================================
000131E6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
000131E8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
000131EA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
000131EC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
000131EE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
000131F0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
000131F2                            ; ===========================================================================
000131F2                            
000131F2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
000131F2 4E75                       		rts			; type 00 platform doesn't move
000131F4                            ; ===========================================================================
000131F4                            
000131F4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
000131F4 1038 FE60                  		move.b	($FFFFFE60).w,d0
000131F8 323C 0020                  		move.w	#$20,d1
000131FC 6000                       		bra.s	Obj2F_Move
000131FE                            ; ===========================================================================
000131FE                            
000131FE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
000131FE 1038 FE64                  		move.b	($FFFFFE64).w,d0
00013202 323C 0030                  		move.w	#$30,d1
00013206 6000                       		bra.s	Obj2F_Move
00013208                            ; ===========================================================================
00013208                            
00013208                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
00013208 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001320C 323C 0040                  		move.w	#$40,d1
00013210 6000                       		bra.s	Obj2F_Move
00013212                            ; ===========================================================================
00013212                            
00013212                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
00013212 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00013216 323C 0060                  		move.w	#$60,d1
0001321A                            
0001321A                            Obj2F_Move:
0001321A 0828 0003 0028             		btst	#3,subtype(a0)
00013220 6700                       		beq.s	loc_AFF2
00013222 4440                       		neg.w	d0
00013224 D041                       		add.w	d1,d0
00013226                            
00013226                            loc_AFF2:
00013226 3228 002C                  		move.w	$2C(a0),d1
0001322A 9240                       		sub.w	d0,d1
0001322C 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
00013230 4E75                       		rts	
00013232                            ; ===========================================================================
00013232                            
00013232                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
00013232 1028 0034                  		move.b	$34(a0),d0
00013236 4A28 0025                  		tst.b	routine_secondary(a0)
0001323A 6600                       		bne.s	loc_B010
0001323C 5500                       		subq.b	#2,d0
0001323E 6400                       		bcc.s	loc_B01C
00013240 7000                       		moveq	#0,d0
00013242 6000                       		bra.s	loc_B01C
00013244                            ; ===========================================================================
00013244                            
00013244                            loc_B010:
00013244 5800                       		addq.b	#4,d0
00013246 0C00 0040                  		cmpi.b	#$40,d0
0001324A 6500                       		bcs.s	loc_B01C
0001324C 103C 0040                  		move.b	#$40,d0
00013250                            
00013250                            loc_B01C:
00013250 1140 0034                  		move.b	d0,$34(a0)
00013254 4EB9 0000 8F30             		jsr	(CalcSine).l
0001325A E848                       		lsr.w	#4,d0
0001325C 3200                       		move.w	d0,d1
0001325E D068 002C                  		add.w	$2C(a0),d0
00013262 3140 000C                  		move.w	d0,$C(a0)
00013266 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0001326C 6600                       		bne.s	loc_B07A
0001326E 4A28 0035                  		tst.b	$35(a0)
00013272 6600                       		bne.s	loc_B07A
00013274 117C 0001 0035             		move.b	#1,$35(a0)
0001327A 6100 0000                  		bsr.w	SingleObjLoad2
0001327E 6600                       		bne.s	loc_B07A
00013280 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
00013284 3368 0008 0008             		move.w	8(a0),8(a1)
0001328A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
00013290 5069 002C                  		addq.w	#8,$2C(a1)
00013294 5769 002C                  		subq.w	#3,$2C(a1)
00013298 0469 0040 0008             		subi.w	#$40,8(a1)
0001329E 2368 0030 0030             		move.l	$30(a0),$30(a1)
000132A4 2348 0038                  		move.l	a0,$38(a1)
000132A8 2448                       		movea.l	a0,a2
000132AA 6100                       		bsr.s	sub_B09C
000132AC                            
000132AC                            loc_B07A:
000132AC 7400                       		moveq	#0,d2
000132AE 45E8 0036                  		lea	$36(a0),a2
000132B2 141A                       		move.b	(a2)+,d2
000132B4 5302                       		subq.b	#1,d2
000132B6 6500                       		bcs.s	locret_B09A
000132B8                            
000132B8                            loc_B086:
000132B8 7000                       		moveq	#0,d0
000132BA 101A                       		move.b	(a2)+,d0
000132BC ED48                       		lsl.w	#6,d0
000132BE 0640 D000                  		addi.w	#-$3000,d0
000132C2 3240                       		movea.w	d0,a1
000132C4 3341 003C                  		move.w	d1,$3C(a1)
000132C8 51CA FFEE                  		dbf	d2,loc_B086
000132CC                            
000132CC                            locret_B09A:
000132CC 4E75                       		rts	
000132CE                            
000132CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132CE                            
000132CE                            
000132CE                            sub_B09C:
000132CE 45EA 0036                  		lea	$36(a2),a2
000132D2 7000                       		moveq	#0,d0
000132D4 1012                       		move.b	(a2),d0
000132D6 5212                       		addq.b	#1,(a2)
000132D8 45F2 0001                  		lea	1(a2,d0.w),a2
000132DC 3009                       		move.w	a1,d0
000132DE 0440 D000                  		subi.w	#-$3000,d0
000132E2 EC48                       		lsr.w	#6,d0
000132E4 0240 007F                  		andi.w	#$7F,d0
000132E8 1480                       		move.b	d0,(a2)
000132EA 4E75                       		rts	
000132EC                            ; End of function sub_B09C
000132EC                            
000132EC                            ; ===========================================================================
000132EC                            
000132EC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
000132EC 4A28 0035                  		tst.b	$35(a0)
000132F0 6700                       		beq.s	loc_B0C6
000132F2 4A28 0001                  		tst.b	1(a0)
000132F6 6A00                       		bpl.s	Obj2F_DelFlames
000132F8                            
000132F8                            loc_B0C6:
000132F8 3028 002A                  		move.w	objoff_2A(a0),d0
000132FC 4EF9 0000 0000             		jmp		MarkObjGone4
00013302                            ; ===========================================================================
00013302                            
00013302                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
00013302 7400                       		moveq	#0,d2
00013304                            
00013304                            loc_B0E8:
00013304 45E8 0036                  		lea	$36(a0),a2
00013308 1412                       		move.b	(a2),d2
0001330A 421A                       		clr.b	(a2)+
0001330C 5302                       		subq.b	#1,d2
0001330E 6500                       		bcs.s	locret_B116
00013310                            
00013310                            loc_B0F4:
00013310 7000                       		moveq	#0,d0
00013312 1012                       		move.b	(a2),d0
00013314 421A                       		clr.b	(a2)+
00013316 ED48                       		lsl.w	#6,d0
00013318 0640 D000                  		addi.w	#-$3000,d0
0001331C 3240                       		movea.w	d0,a1
0001331E 4EB9 0000 0000             		jsr	DeleteObject2
00013324 51CA FFEA                  		dbf	d2,loc_B0F4
00013328 117C 0000 0035             		move.b	#0,$35(a0)
0001332E 117C 0000 0034             		move.b	#0,$34(a0)
00013334                            
00013334                            locret_B116:
00013334 4E75                       		rts	
00013336                            ; ===========================================================================
00013336                            ; ---------------------------------------------------------------------------
00013336                            ; Collision data for large moving platforms (MZ)
00013336                            ; ---------------------------------------------------------------------------
00013336                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
00013382                            		even
00013382                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
000133AE                            		even
000133AE                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
000133FA                            		even
000133FA                            ; ===========================================================================
000133FA                            ; ---------------------------------------------------------------------------
000133FA                            ; Object 35 - fireball that sits on the	floor (MZ)
000133FA                            ; (appears when	you walk on sinking platforms)
000133FA                            ; ---------------------------------------------------------------------------
000133FA                            
000133FA                            Obj35:					; XREF: Obj_Index
000133FA 7000                       		moveq	#0,d0
000133FC 1028 0024                  		move.b	routine(a0),d0
00013400 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
00013404 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
00013408                            ; ===========================================================================
00013408 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0001340A 0000                       		dc.w loc_B238-Obj35_Index
0001340C 0000                       		dc.w Obj35_Move-Obj35_Index
0001340E                            ; ===========================================================================
0001340E                            
0001340E                            Obj35_Main:				; XREF: Obj35_Index
0001340E 5428 0024                  		addq.b	#2,routine(a0)
00013412 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0001341A 317C 0345 0002             		move.w	#$345,2(a0)
00013420 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
00013426 117C 0004 0001             		move.b	#4,1(a0)
0001342C 317C 0080 0018             		move.w	#$80,priority(a0)
00013432 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
00013438 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001343E 303C 00C2                  		move.w	#$C2,d0
00013442 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
00013448 4A28 0028                  		tst.b	subtype(a0)
0001344C 6700                       		beq.s	loc_B238
0001344E 5428 0024                  		addq.b	#2,routine(a0)
00013452 6000 0000                  		bra.w	Obj35_Move
00013456                            ; ===========================================================================
00013456                            
00013456                            loc_B238:				; XREF: Obj35_Index
00013456 2268 0030                  		movea.l	$30(a0),a1
0001345A 3228 0008                  		move.w	8(a0),d1
0001345E 9268 002A                  		sub.w	objoff_2A(a0),d1
00013462 0641 000C                  		addi.w	#$C,d1
00013466 3001                       		move.w	d1,d0
00013468 E248                       		lsr.w	#1,d0
0001346A 1031 0000                  		move.b	(a1,d0.w),d0
0001346E 4440                       		neg.w	d0
00013470 D068 002C                  		add.w	$2C(a0),d0
00013474 3400                       		move.w	d0,d2
00013476 D068 003C                  		add.w	$3C(a0),d0
0001347A 3140 000C                  		move.w	d0,$C(a0)
0001347E 0C41 0084                  		cmpi.w	#$84,d1
00013482 6400                       		bcc.s	loc_B2B0
00013484 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0001348C 0C41 0080                  		cmpi.w	#$80,d1
00013490 6400                       		bcc.s	loc_B2B0
00013492 2028 0008                  		move.l	8(a0),d0
00013496 0680 0008 0000             		addi.l	#$80000,d0
0001349C 0280 000F FFFF             		andi.l	#$FFFFF,d0
000134A2 6600                       		bne.s	loc_B2B0
000134A4 6100 0000                  		bsr.w	SingleObjLoad2
000134A8 6600                       		bne.s	loc_B2B0
000134AA 12BC 0035                  		move.b	#$35,0(a1)
000134AE 3368 0008 0008             		move.w	8(a0),8(a1)
000134B4 3342 002C                  		move.w	d2,$2C(a1)
000134B8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
000134BE 137C 0001 0028             		move.b	#1,subtype(a1)
000134C4 2468 0038                  		movea.l	$38(a0),a2
000134C8 6100 FE04                  		bsr.w	sub_B09C
000134CC                            
000134CC                            loc_B2B0:
000134CC 6000                       		bra.s	Obj35_Animate
000134CE                            ; ===========================================================================
000134CE                            
000134CE                            Obj35_Move:				; XREF: Obj35_Index
000134CE 3028 002C                  		move.w	$2C(a0),d0
000134D2 D068 003C                  		add.w	$3C(a0),d0
000134D6 3140 000C                  		move.w	d0,$C(a0)
000134DA                            
000134DA                            Obj35_Animate:				; XREF: loc_B238
000134DA 43F9 0000 0000             		lea	(Ani_obj35).l,a1
000134E0 4EBA F272                  		jsr	AnimateSprite
000134E4 6000 0000                  		bra.w	DisplaySprite
000134E8                            ; ===========================================================================
000134E8                            Ani_obj35:
000134E8                            	include "_anim\obj35.asm"
000134E8                            ; ---------------------------------------------------------------------------
000134E8                            ; Animation script - fireball that sits on the	floor (MZ)
000134E8                            ; ---------------------------------------------------------------------------
000134E8 0000                       		dc.w byte_B2CE-Ani_obj35
000134EA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
000134F0                            		even
000134F0                            		even
000134F0                            
000134F0                            ; ---------------------------------------------------------------------------
000134F0                            ; Sprite mappings - large moving platforms (MZ)
000134F0                            ; ---------------------------------------------------------------------------
000134F0                            Map_obj2F:
000134F0                            	include "_maps\obj2F.asm"
000134F0                            ; ---------------------------------------------------------------------------
000134F0                            ; Sprite mappings - large moving platforms (MZ)
000134F0                            ; ---------------------------------------------------------------------------
000134F0 0000                       		dc.w byte_B2DA-Map_obj2F
000134F2 0000                       		dc.w byte_B31C-Map_obj2F
000134F4 0000                       		dc.w byte_B34F-Map_obj2F
000134F6 0D                         byte_B2DA:	dc.b $D
000134F7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
000134FC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
00013501 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
00013506 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0001350B F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
00013510 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
00013515 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0001351A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0001351F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
00013524 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
00013529 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0001352E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
00013533 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
00013538 0A                         byte_B31C:	dc.b $A
00013539 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0001353E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
00013543 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
00013548 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0001354D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
00013552 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
00013557 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0001355C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
00013561 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
00013566 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0001356B 06                         byte_B34F:	dc.b 6
0001356C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
00013571 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
00013576 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0001357B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
00013580 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
00013585 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0001358A                            		even
0001358A                            		even
0001358A                            
0001358A                            ; ---------------------------------------------------------------------------
0001358A                            ; Sprite mappings - lava balls (MZ, SLZ)
0001358A                            ; ---------------------------------------------------------------------------
0001358A                            Map_obj14:
0001358A                            	include "_maps\obj14.asm"
0001358A                            ; ---------------------------------------------------------------------------
0001358A                            ; Sprite mappings - lava balls (MZ, SLZ)
0001358A                            ; ---------------------------------------------------------------------------
0001358A 0000                       		dc.w byte_B37A-Map_obj14
0001358C 0000                       		dc.w byte_B380-Map_obj14
0001358E 0000                       		dc.w byte_B386-Map_obj14
00013590 0000                       		dc.w byte_B38C-Map_obj14
00013592 0000                       		dc.w byte_B392-Map_obj14
00013594 0000                       		dc.w byte_B398-Map_obj14
00013596 01                         byte_B37A:	dc.b 1
00013597 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0001359C 01                         byte_B380:	dc.b 1
0001359D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
000135A2 01                         byte_B386:	dc.b 1
000135A3 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
000135A8 01                         byte_B38C:	dc.b 1
000135A9 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
000135AE 01                         byte_B392:	dc.b 1
000135AF F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
000135B4 01                         byte_B398:	dc.b 1
000135B5 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
000135BA                            		even
000135BA                            		even
000135BA                            
000135BA                            ; ===========================================================================
000135BA                            ; ---------------------------------------------------------------------------
000135BA                            ; Object 30 - large green glassy blocks	(MZ)
000135BA                            ; ---------------------------------------------------------------------------
000135BA                            
000135BA                            Obj30:					; XREF: Obj_Index
000135BA 7000                       		moveq	#0,d0
000135BC 1028 0024                  		move.b	routine(a0),d0
000135C0 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
000135C4 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
000135C8 4EF9 0000 0000             		jmp		MarkObjGone
000135CE                            ; ===========================================================================
000135CE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
000135D0 0000                       		dc.w Obj30_Block012-Obj30_Index
000135D2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
000135D4 0000                       		dc.w Obj30_Block34-Obj30_Index
000135D6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
000135D8                            
000135D8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
000135DB 0400 01                    		dc.b 4,	0, 1
000135DE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
000135E1 0800 01                    		dc.b 8,	0, 1
000135E4                            ; ===========================================================================
000135E4                            
000135E4                            Obj30_Main:				; XREF: Obj30_Index
000135E4 45F9 0001 35D8             		lea	(Obj30_Vars1).l,a2
000135EA 7201                       		moveq	#1,d1
000135EC 117C 0048 0016             		move.b	#$48,$16(a0)
000135F2 0C28 0003 0028             		cmpi.b	#3,subtype(a0)	; is object type 0/1/2 ?
000135F8 6500                       		bcs.s	loc_B40C	; if yes, branch
000135FA 45F9 0001 35DE             		lea	(Obj30_Vars2).l,a2
00013600 7201                       		moveq	#1,d1
00013602 117C 0038 0016             		move.b	#$38,$16(a0)
00013608                            
00013608                            loc_B40C:
00013608 2248                       		movea.l	a0,a1
0001360A 6000                       		bra.s	Obj30_Load	; load main object
0001360C                            ; ===========================================================================
0001360C                            
0001360C                            Obj30_Loop:
0001360C 6100 0000                  		bsr.w	SingleObjLoad2
00013610 6600                       		bne.s	loc_B480
00013612                            
00013612                            Obj30_Load:				; XREF: Obj30_Main
00013612 135A 0024                  		move.b	(a2)+,routine(a1)
00013616 12BC 0030                  		move.b	#$30,0(a1)
0001361A 3368 0008 0008             		move.w	8(a0),8(a1)
00013620 101A                       		move.b	(a2)+,d0
00013622 4880                       		ext.w	d0
00013624 D068 000C                  		add.w	$C(a0),d0
00013628 3340 000C                  		move.w	d0,$C(a1)
0001362C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
00013634 337C C38E 0002             		move.w	#$C38E,2(a1)
0001363A 137C 0004 0001             		move.b	#4,1(a1)
00013640 3369 000C 0030             		move.w	$C(a1),$30(a1)
00013646 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001364C 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013652 337C 0200 0018             		move.w	#$200,priority(a1)
00013658 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
0001365C 2348 003C                  		move.l	a0,$3C(a1)
00013660 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
00013664                            
00013664 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001366A 337C 0180 0018             		move.w	#$180,priority(a1)
00013670 5029 0028                  		addq.b	#8,subtype(a1)
00013674 0229 000F 0028             		andi.b	#$F,subtype(a1)
0001367A                            
0001367A                            loc_B480:
0001367A 317C 0090 0032             		move.w	#$90,$32(a0)
00013680 08E8 0004 0001             		bset	#4,1(a0)
00013686                            
00013686                            Obj30_Block012:				; XREF: Obj30_Index
00013686 4EB9 0000 0000             		jsr	Obj30_Types
0001368C 323C 002B                  		move.w	#$2B,d1
00013690 343C 0048                  		move.w	#$48,d2
00013694 363C 0049                  		move.w	#$49,d3
00013698 3828 0008                  		move.w	8(a0),d4
0001369C 6000 0000                  		bra.w	SolidObject
000136A0                            ; ===========================================================================
000136A0                            
000136A0                            Obj30_Reflect012:			; XREF: Obj30_Index
000136A0 2268 003C                  		movea.l	$3C(a0),a1
000136A4 3169 0032 0032             		move.w	$32(a1),$32(a0)
000136AA 6000 0000                  		bra.w	Obj30_Types
000136AE                            ; ===========================================================================
000136AE                            
000136AE                            Obj30_Block34:				; XREF: Obj30_Index
000136AE 4EB9 0000 0000             		jsr	Obj30_Types
000136B4 323C 002B                  		move.w	#$2B,d1
000136B8 343C 0038                  		move.w	#$38,d2
000136BC 363C 0039                  		move.w	#$39,d3
000136C0 3828 0008                  		move.w	8(a0),d4
000136C4 6000 0000                  		bra.w	SolidObject
000136C8                            ; ===========================================================================
000136C8                            
000136C8                            Obj30_Reflect34:			; XREF: Obj30_Index
000136C8 2268 003C                  		movea.l	$3C(a0),a1
000136CC 3169 0032 0032             		move.w	$32(a1),$32(a0)
000136D2 3169 000C 0030             		move.w	$C(a1),$30(a0)
000136D8 6000 0002                  		bra.w	*+4
000136DC                            
000136DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136DC                            
000136DC                            
000136DC                            Obj30_Types:				; XREF: Obj30_Block012; et al
000136DC 7000                       		moveq	#0,d0
000136DE 1028 0028                  		move.b	subtype(a0),d0
000136E2 0240 0007                  		andi.w	#7,d0
000136E6 D040                       		add.w	d0,d0
000136E8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
000136EC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
000136F0                            ; End of function Obj30_Types
000136F0                            
000136F0                            ; ===========================================================================
000136F0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
000136F2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
000136F4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
000136F6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
000136F8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
000136FA 4E75                       		rts	
000136FC                            ; ===========================================================================
000136FC                            
000136FC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
000136FC 1038 FE70                  		move.b	($FFFFFE70).w,d0
00013700 323C 0040                  		move.w	#$40,d1
00013704 6000                       		bra.s	loc_B514
00013706                            ; ===========================================================================
00013706                            
00013706                            Obj30_Type02:				; XREF: Obj30_TypeIndex
00013706 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001370A 323C 0040                  		move.w	#$40,d1
0001370E 4440                       		neg.w	d0
00013710 D041                       		add.w	d1,d0
00013712                            
00013712                            loc_B514:				; XREF: Obj30_Type01
00013712 0828 0003 0028             		btst	#3,subtype(a0)
00013718 6700                       		beq.s	loc_B526
0001371A 4440                       		neg.w	d0
0001371C D041                       		add.w	d1,d0
0001371E E208                       		lsr.b	#1,d0
00013720 0640 0020                  		addi.w	#$20,d0
00013724                            
00013724                            loc_B526:
00013724 6000 0000                  		bra.w	loc_B64E
00013728                            ; ===========================================================================
00013728                            
00013728                            Obj30_Type03:				; XREF: Obj30_TypeIndex
00013728 0828 0003 0028             		btst	#3,subtype(a0)
0001372E 6700                       		beq.s	loc_B53E
00013730 1038 FE70                  		move.b	($FFFFFE70).w,d0
00013734 0440 0010                  		subi.w	#$10,d0
00013738 6000 0000                  		bra.w	loc_B64E
0001373C                            ; ===========================================================================
0001373C                            
0001373C                            loc_B53E:
0001373C 0828 0003 0022             		btst	#3,status(a0)
00013742 6600                       		bne.s	loc_B54E
00013744 08A8 0000 0034             		bclr	#0,$34(a0)
0001374A 6000                       		bra.s	loc_B582
0001374C                            ; ===========================================================================
0001374C                            
0001374C                            loc_B54E:
0001374C 4A28 0034                  		tst.b	$34(a0)
00013750 6600                       		bne.s	loc_B582
00013752 117C 0001 0034             		move.b	#1,$34(a0)
00013758 08E8 0000 0035             		bset	#0,$35(a0)
0001375E 6700                       		beq.s	loc_B582
00013760 08E8 0007 0034             		bset	#7,$34(a0)
00013766 317C 0010 0036             		move.w	#$10,$36(a0)
0001376C 117C 000A 0038             		move.b	#$A,$38(a0)
00013772 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
00013778 6600                       		bne.s	loc_B582
0001377A 317C 0040 0036             		move.w	#$40,$36(a0)
00013780                            
00013780                            loc_B582:
00013780 4A28 0034                  		tst.b	$34(a0)
00013784 6A00                       		bpl.s	loc_B5AA
00013786 4A28 0038                  		tst.b	$38(a0)
0001378A 6700                       		beq.s	loc_B594
0001378C 5328 0038                  		subq.b	#1,$38(a0)
00013790 6600                       		bne.s	loc_B5AA
00013792                            
00013792                            loc_B594:
00013792 4A68 0032                  		tst.w	$32(a0)
00013796 6700                       		beq.s	loc_B5A4
00013798 5368 0032                  		subq.w	#1,$32(a0)
0001379C 5368 0036                  		subq.w	#1,$36(a0)
000137A0 6600                       		bne.s	loc_B5AA
000137A2                            
000137A2                            loc_B5A4:
000137A2 08A8 0007 0034             		bclr	#7,$34(a0)
000137A8                            
000137A8                            loc_B5AA:
000137A8 3028 0032                  		move.w	$32(a0),d0
000137AC 6000                       		bra.s	loc_B64E
000137AE                            ; ===========================================================================
000137AE                            
000137AE                            Obj30_Type04:				; XREF: Obj30_TypeIndex
000137AE 0828 0003 0028             		btst	#3,subtype(a0)
000137B4 6700                       		beq.s	Obj30_ChkSwitch
000137B6 1038 FE70                  		move.b	($FFFFFE70).w,d0
000137BA 0440 0010                  		subi.w	#$10,d0
000137BE 6000                       		bra.s	loc_B64E
000137C0                            ; ===========================================================================
000137C0                            
000137C0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
000137C0 4A28 0034                  		tst.b	$34(a0)
000137C4 6600                       		bne.s	loc_B640
000137C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000137CA 7000                       		moveq	#0,d0
000137CC 1028 0028                  		move.b	subtype(a0),d0	; load object type number
000137D0 E848                       		lsr.w	#4,d0		; read only the	first nybble
000137D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
000137D6 6700                       		beq.s	loc_B64A	; if not, branch
000137D8 117C 0001 0034             		move.b	#1,$34(a0)
000137DE                            
000137DE                            loc_B640:
000137DE 4A68 0032                  		tst.w	$32(a0)
000137E2 6700                       		beq.s	loc_B64A
000137E4 5568 0032                  		subq.w	#2,$32(a0)
000137E8                            
000137E8                            loc_B64A:
000137E8 3028 0032                  		move.w	$32(a0),d0
000137EC                            
000137EC                            loc_B64E:
000137EC 3228 0030                  		move.w	$30(a0),d1
000137F0 9240                       		sub.w	d0,d1
000137F2 3141 000C                  		move.w	d1,$C(a0)
000137F6 4E75                       		rts	
000137F8                            ; ===========================================================================
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            ; Sprite mappings - large green	glassy blocks (MZ)
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            Map_obj30:
000137F8                            	include "_maps\obj30.asm"
000137F8                            ; ---------------------------------------------------------------------------
000137F8                            ; Sprite mappings - large green	glassy blocks (MZ)
000137F8                            ; ---------------------------------------------------------------------------
000137F8 0000                       		dc.w byte_B600-Map_obj30
000137FA 0000                       		dc.w byte_B63D-Map_obj30
000137FC 0000                       		dc.w byte_B648-Map_obj30
000137FE 0C                         byte_B600:	dc.b $C
000137FF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
00013804 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
00013809 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0001380E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
00013813 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
00013818 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0001381D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
00013822 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
00013827 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0001382C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
00013831 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
00013836 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0001383B 02                         byte_B63D:	dc.b 2
0001383C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
00013841 0006 0014 00               		dc.b 0,	6, 0, $14, 0
00013846 0A                         byte_B648:	dc.b $A
00013847 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0001384C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
00013851 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
00013856 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0001385B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00013860 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00013865 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0001386A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0001386F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
00013874 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0001387A 00                         		even
0001387A 00                         		even
0001387A                            
0001387A                            ; ===========================================================================
0001387A                            ; ---------------------------------------------------------------------------
0001387A                            ; Object 31 - stomping metal blocks on chains (MZ)
0001387A                            ; ---------------------------------------------------------------------------
0001387A                            
0001387A                            Obj31:					; XREF: Obj_Index
0001387A 7000                       		moveq	#0,d0
0001387C 1028 0024                  		move.b	routine(a0),d0
00013880 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
00013884 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
00013888                            ; ===========================================================================
00013888 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0001388A 0000                       		dc.w loc_B798-Obj31_Index
0001388C 0000                       		dc.w loc_B7FE-Obj31_Index
0001388E 0000                       		dc.w Obj31_Display2-Obj31_Index
00013890 0000                       		dc.w loc_B7E2-Obj31_Index
00013892                            
00013892 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
00013894 0100                       		dc.b 1,	0
00013896                            
00013896 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
00013899 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0001389C 08CC 03                    		dc.b 8,	$CC, 3
0001389F 06F0 02                    		dc.b 6,	$F0, 2
000138A2                            
000138A2 7000 A000                  word_B6A4:	dc.w $7000, $A000
000138A6 5000 7800                  		dc.w $5000, $7800
000138AA 3800 5800                  		dc.w $3800, $5800
000138AE B800                       		dc.w $B800
000138B0                            ; ===========================================================================
000138B0                            
000138B0                            Obj31_Main:				; XREF: Obj31_Index
000138B0 7000                       		moveq	#0,d0
000138B2 1028 0028                  		move.b	subtype(a0),d0
000138B6 6A00                       		bpl.s	loc_B6CE
000138B8 0240 007F                  		andi.w	#$7F,d0
000138BC D040                       		add.w	d0,d0
000138BE 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
000138C2 115A 003A                  		move.b	(a2)+,$3A(a0)
000138C6 101A                       		move.b	(a2)+,d0
000138C8 1140 0028                  		move.b	d0,subtype(a0)
000138CC                            
000138CC                            loc_B6CE:
000138CC 0200 000F                  		andi.b	#$F,d0
000138D0 D040                       		add.w	d0,d0
000138D2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
000138D6 4A40                       		tst.w	d0
000138D8 6600                       		bne.s	loc_B6E0
000138DA 3142 0032                  		move.w	d2,$32(a0)
000138DE                            
000138DE                            loc_B6E0:
000138DE 45F9 0001 3896             		lea	(Obj31_Var).l,a2
000138E4 2248                       		movea.l	a0,a1
000138E6 7203                       		moveq	#3,d1
000138E8 6000                       		bra.s	Obj31_MakeStomper
000138EA                            ; ===========================================================================
000138EA                            
000138EA                            Obj31_Loop:
000138EA 6100 0000                  		bsr.w	SingleObjLoad2
000138EE 6600 0000                  		bne.w	Obj31_SetSize
000138F2                            
000138F2                            Obj31_MakeStomper:			; XREF: Obj31_Main
000138F2 135A 0024                  		move.b	(a2)+,routine(a1)
000138F6 12BC 0031                  		move.b	#$31,0(a1)
000138FA 3368 0008 0008             		move.w	8(a0),8(a1)
00013900 101A                       		move.b	(a2)+,d0
00013902 4880                       		ext.w	d0
00013904 D068 000C                  		add.w	$C(a0),d0
00013908 3340 000C                  		move.w	d0,$C(a1)
0001390C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
00013914 337C 0300 0002             		move.w	#$300,2(a1)
0001391A 137C 0004 0001             		move.b	#4,1(a1)
00013920 3369 000C 0030             		move.w	$C(a1),$30(a1)
00013926 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001392C 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00013932 3342 0034                  		move.w	d2,$34(a1)
00013936 337C 0200 0018             		move.w	#$200,priority(a1)
0001393C 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013940 0C29 0001 001A             		cmpi.b	#1,mapping_frame(a1)
00013946 6600                       		bne.s	loc_B76A
00013948 5341                       		subq.w	#1,d1
0001394A 1028 0028                  		move.b	subtype(a0),d0
0001394E 0240 00F0                  		andi.w	#$F0,d0
00013952 0C40 0020                  		cmpi.w	#$20,d0
00013956 679A                       		beq.s	Obj31_MakeStomper
00013958 137C 0038 0023             		move.b	#$38,width_pixels(a1)
0001395E 137C 0090 0020             		move.b	#$90,collision_flags(a1)
00013964 5241                       		addq.w	#1,d1
00013966                            
00013966                            loc_B76A:
00013966 2348 003C                  		move.l	a0,$3C(a1)
0001396A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0001396E                            
0001396E 337C 0180 0018             		move.w	#$180,priority(a1)
00013974                            
00013974                            Obj31_SetSize:
00013974 7000                       		moveq	#0,d0
00013976 1028 0028                  		move.b	subtype(a0),d0
0001397A E648                       		lsr.w	#3,d0
0001397C 0200 000E                  		andi.b	#$E,d0
00013980 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
00013984 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00013988 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001398C 6000                       		bra.s	loc_B798
0001398E                            ; ===========================================================================
0001398E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
00013990 3009                       		dc.b $30, 9
00013992 100A                       		dc.b $10, $A
00013994                            ; ===========================================================================
00013994                            
00013994                            loc_B798:				; XREF: Obj31_Index
00013994 4EB9 0000 0000             		jsr	Obj31_Types
0001399A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
000139A0 7200                       		moveq	#0,d1
000139A2 1228 0023                  		move.b	width_pixels(a0),d1
000139A6 0641 000B                  		addi.w	#$B,d1
000139AA 343C 000C                  		move.w	#$C,d2
000139AE 363C 000D                  		move.w	#$D,d3
000139B2 3828 0008                  		move.w	8(a0),d4
000139B6 4EB9 0000 0000             		jsr	SolidObject
000139BC 0828 0003 0022             		btst	#3,status(a0)
000139C2 6700                       		beq.s	Obj31_Display
000139C4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
000139CA 6400                       		bcc.s	Obj31_Display
000139CC 2448                       		movea.l	a0,a2
000139CE 41F8 D000                  		lea	($FFFFD000).w,a0
000139D2 4EB9 0000 0000             		jsr	KillCharacter
000139D8 204A                       		movea.l	a2,a0
000139DA                            
000139DA                            Obj31_Display:
000139DA 4EB9 0000 0000             		jsr	DisplaySprite
000139E0 6000 0000                  		bra.w	Obj31_ChkDel
000139E4                            ; ===========================================================================
000139E4                            
000139E4                            loc_B7E2:				; XREF: Obj31_Index
000139E4 117C 0080 0016             		move.b	#$80,$16(a0)
000139EA 08E8 0004 0001             		bset	#4,1(a0)
000139F0 2268 003C                  		movea.l	$3C(a0),a1
000139F4 1029 0032                  		move.b	$32(a1),d0
000139F8 EA08                       		lsr.b	#5,d0
000139FA 5600                       		addq.b	#3,d0
000139FC 1140 001A                  		move.b	d0,mapping_frame(a0)
00013A00                            
00013A00                            loc_B7FE:				; XREF: Obj31_Index
00013A00 2268 003C                  		movea.l	$3C(a0),a1
00013A04 7000                       		moveq	#0,d0
00013A06 1029 0032                  		move.b	$32(a1),d0
00013A0A D068 0030                  		add.w	$30(a0),d0
00013A0E 3140 000C                  		move.w	d0,$C(a0)
00013A12                            
00013A12                            Obj31_Display2:				; XREF: Obj31_Index
00013A12 4EB9 0000 0000             		jsr	DisplaySprite
00013A18                            
00013A18                            Obj31_ChkDel:				; XREF: Obj31_Display
00013A18 4EF9 0000 0000             		jmp		MarkObjGone
00013A1E                            ; ===========================================================================
00013A1E                            
00013A1E                            Obj31_Types:				; XREF: loc_B798
00013A1E 1028 0028                  		move.b	subtype(a0),d0
00013A22 0240 000F                  		andi.w	#$F,d0
00013A26 D040                       		add.w	d0,d0
00013A28 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
00013A2C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
00013A30                            ; ===========================================================================
00013A30 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
00013A32 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013A34 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013A36 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
00013A38 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013A3A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
00013A3C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013A3E                            ; ===========================================================================
00013A3E                            
00013A3E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
00013A3E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00013A42 7000                       		moveq	#0,d0
00013A44 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
00013A48 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
00013A4C 6700                       		beq.s	loc_B8A8	; if not, branch
00013A4E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
00013A52 6A00                       		bpl.s	loc_B872
00013A54 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
00013A5A 6700                       		beq.s	loc_B8A0
00013A5C                            
00013A5C                            loc_B872:
00013A5C 4A68 0032                  		tst.w	$32(a0)
00013A60 6700                       		beq.s	loc_B8A0
00013A62 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00013A66 0200 000F                  		andi.b	#$F,d0
00013A6A 6600                       		bne.s	loc_B892
00013A6C 4A28 0001                  		tst.b	1(a0)
00013A70 6A00                       		bpl.s	loc_B892
00013A72 303C 00C7                  		move.w	#$C7,d0
00013A76 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
00013A7C                            
00013A7C                            loc_B892:
00013A7C 0468 0080 0032             		subi.w	#$80,$32(a0)
00013A82 6400                       		bcc.s	Obj31_Restart
00013A84 317C 0000 0032             		move.w	#0,$32(a0)
00013A8A                            
00013A8A                            loc_B8A0:
00013A8A 317C 0000 0012             		move.w	#0,$12(a0)
00013A90 6000                       		bra.s	Obj31_Restart
00013A92                            ; ===========================================================================
00013A92                            
00013A92                            loc_B8A8:				; XREF: Obj31_Type00
00013A92 3228 0034                  		move.w	$34(a0),d1
00013A96 B268 0032                  		cmp.w	$32(a0),d1
00013A9A 6700                       		beq.s	Obj31_Restart
00013A9C 3028 0012                  		move.w	$12(a0),d0
00013AA0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
00013AA6 D168 0032                  		add.w	d0,$32(a0)
00013AAA B268 0032                  		cmp.w	$32(a0),d1
00013AAE 6200                       		bhi.s	Obj31_Restart
00013AB0 3141 0032                  		move.w	d1,$32(a0)
00013AB4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00013ABA 4A28 0001                  		tst.b	1(a0)
00013ABE 6A00                       		bpl.s	Obj31_Restart
00013AC0 303C 00BD                  		move.w	#$BD,d0
00013AC4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
00013ACA                            
00013ACA                            Obj31_Restart:
00013ACA 7000                       		moveq	#0,d0
00013ACC 1028 0032                  		move.b	$32(a0),d0
00013AD0 D068 0030                  		add.w	$30(a0),d0
00013AD4 3140 000C                  		move.w	d0,$C(a0)
00013AD8 4E75                       		rts	
00013ADA                            ; ===========================================================================
00013ADA                            
00013ADA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
00013ADA 4A68 0036                  		tst.w	$36(a0)
00013ADE 6700                       		beq.s	loc_B938
00013AE0 4A68 0038                  		tst.w	$38(a0)
00013AE4 6700                       		beq.s	loc_B902
00013AE6 5368 0038                  		subq.w	#1,$38(a0)
00013AEA 6000                       		bra.s	loc_B97C
00013AEC                            ; ===========================================================================
00013AEC                            
00013AEC                            loc_B902:
00013AEC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00013AF0 0200 000F                  		andi.b	#$F,d0
00013AF4 6600                       		bne.s	loc_B91C
00013AF6 4A28 0001                  		tst.b	1(a0)
00013AFA 6A00                       		bpl.s	loc_B91C
00013AFC 303C 00C7                  		move.w	#$C7,d0
00013B00 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
00013B06                            
00013B06                            loc_B91C:
00013B06 0468 0080 0032             		subi.w	#$80,$32(a0)
00013B0C 6400                       		bcc.s	loc_B97C
00013B0E 317C 0000 0032             		move.w	#0,$32(a0)
00013B14 317C 0000 0012             		move.w	#0,$12(a0)
00013B1A 317C 0000 0036             		move.w	#0,$36(a0)
00013B20 6000                       		bra.s	loc_B97C
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            loc_B938:				; XREF: Obj31_Type01
00013B22 3228 0034                  		move.w	$34(a0),d1
00013B26 B268 0032                  		cmp.w	$32(a0),d1
00013B2A 6700                       		beq.s	loc_B97C
00013B2C 3028 0012                  		move.w	$12(a0),d0
00013B30 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
00013B36 D168 0032                  		add.w	d0,$32(a0)
00013B3A B268 0032                  		cmp.w	$32(a0),d1
00013B3E 6200                       		bhi.s	loc_B97C
00013B40 3141 0032                  		move.w	d1,$32(a0)
00013B44 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00013B4A 317C 0001 0036             		move.w	#1,$36(a0)
00013B50 317C 003C 0038             		move.w	#$3C,$38(a0)
00013B56 4A28 0001                  		tst.b	1(a0)
00013B5A 6A00                       		bpl.s	loc_B97C
00013B5C 303C 00D5                  		move.w	#$D5,d0
00013B60 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
00013B66                            
00013B66                            loc_B97C:
00013B66 6000 FF62                  		bra.w	Obj31_Restart
00013B6A                            ; ===========================================================================
00013B6A                            
00013B6A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
00013B6A 3038 D008                  		move.w	($FFFFD008).w,d0
00013B6E 9068 0008                  		sub.w	8(a0),d0
00013B72 6400                       		bcc.s	loc_B98C
00013B74 4440                       		neg.w	d0
00013B76                            
00013B76                            loc_B98C:
00013B76 0C40 0090                  		cmpi.w	#$90,d0
00013B7A 6400                       		bcc.s	loc_B996
00013B7C 5228 0028                  		addq.b	#1,subtype(a0)
00013B80                            
00013B80                            loc_B996:
00013B80 6000 FF48                  		bra.w	Obj31_Restart
00013B84                            ; ===========================================================================
00013B84                            ; ---------------------------------------------------------------------------
00013B84                            ; Object 45 - spiked metal block from beta version (MZ)
00013B84                            ; ---------------------------------------------------------------------------
00013B84                            
00013B84                            Obj45:					; XREF: Obj_Index
00013B84 7000                       		moveq	#0,d0
00013B86 1028 0024                  		move.b	routine(a0),d0
00013B8A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
00013B8E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
00013B92                            ; ===========================================================================
00013B92 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
00013B94 0000                       		dc.w Obj45_Solid-Obj45_Index
00013B96 0000                       		dc.w loc_BA8E-Obj45_Index
00013B98 0000                       		dc.w Obj45_Display-Obj45_Index
00013B9A 0000                       		dc.w loc_BA7A-Obj45_Index
00013B9C                            
00013B9C 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
00013B9F 04E4 01                    		dc.b	4, $E4,	  1
00013BA2 0834 03                    		dc.b	8, $34,	  3
00013BA5 0628 02                    		dc.b	6, $28,	  2
00013BA8                            
00013BA8 3800                       word_B9BE:	dc.w $3800
00013BAA A000                       		dc.w -$6000
00013BAC 5000                       		dc.w $5000
00013BAE                            ; ===========================================================================
00013BAE                            
00013BAE                            Obj45_Main:				; XREF: Obj45_Index
00013BAE 7000                       		moveq	#0,d0
00013BB0 1028 0028                  		move.b	subtype(a0),d0
00013BB4 D040                       		add.w	d0,d0
00013BB6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
00013BBA 45F9 0001 3B9C             		lea	(Obj45_Var).l,a2
00013BC0 2248                       		movea.l	a0,a1
00013BC2 7203                       		moveq	#3,d1
00013BC4 6000                       		bra.s	Obj45_Load
00013BC6                            ; ===========================================================================
00013BC6                            
00013BC6                            Obj45_Loop:
00013BC6 6100 0000                  		bsr.w	SingleObjLoad2
00013BCA 6600                       		bne.s	loc_BA52
00013BCC                            
00013BCC                            Obj45_Load:				; XREF: Obj45_Main
00013BCC 135A 0024                  		move.b	(a2)+,routine(a1)
00013BD0 12BC 0045                  		move.b	#$45,0(a1)
00013BD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013BDA 101A                       		move.b	(a2)+,d0
00013BDC 4880                       		ext.w	d0
00013BDE D068 0008                  		add.w	8(a0),d0
00013BE2 3340 0008                  		move.w	d0,8(a1)
00013BE6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
00013BEE 337C 0300 0002             		move.w	#$300,2(a1)
00013BF4 137C 0004 0001             		move.b	#4,1(a1)
00013BFA 3369 0008 0030             		move.w	8(a1),$30(a1)
00013C00 3368 0008 003A             		move.w	8(a0),$3A(a1)
00013C06 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00013C0C 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013C12 3342 0034                  		move.w	d2,$34(a1)
00013C16 337C 0200 0018             		move.w	#$200,priority(a1)
00013C1C 0C12 0001                  		cmpi.b	#1,(a2)
00013C20 6600                       		bne.s	loc_BA40
00013C22 137C 0091 0020             		move.b	#$91,collision_flags(a1)
00013C28                            
00013C28                            loc_BA40:
00013C28 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013C2C 2348 003C                  		move.l	a0,$3C(a1)
00013C30 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
00013C34                            
00013C34 337C 0180 0018             		move.w	#$180,priority(a1)
00013C3A                            
00013C3A                            loc_BA52:
00013C3A 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013C40                            
00013C40                            Obj45_Solid:				; XREF: Obj45_Index
00013C40 3F28 0008                  		move.w	8(a0),-(sp)
00013C44 4EB9 0000 0000             		jsr	Obj45_Move
00013C4A 323C 0017                  		move.w	#$17,d1
00013C4E 343C 0020                  		move.w	#$20,d2
00013C52 363C 0020                  		move.w	#$20,d3
00013C56 381F                       		move.w	(sp)+,d4
00013C58 4EB9 0000 0000             		jsr	SolidObject
00013C5E 4EB9 0000 0000             		jsr	DisplaySprite
00013C64 6000 0000                  		bra.w	Obj45_ChkDel
00013C68                            ; ===========================================================================
00013C68                            
00013C68                            loc_BA7A:				; XREF: Obj45_Index
00013C68 2268 003C                  		movea.l	$3C(a0),a1
00013C6C 1029 0032                  		move.b	$32(a1),d0
00013C70 0600 0010                  		addi.b	#$10,d0
00013C74 EA08                       		lsr.b	#5,d0
00013C76 5600                       		addq.b	#3,d0
00013C78 1140 001A                  		move.b	d0,mapping_frame(a0)
00013C7C                            
00013C7C                            loc_BA8E:				; XREF: Obj45_Index
00013C7C 2268 003C                  		movea.l	$3C(a0),a1
00013C80 7000                       		moveq	#0,d0
00013C82 1029 0032                  		move.b	$32(a1),d0
00013C86 4440                       		neg.w	d0
00013C88 D068 0030                  		add.w	$30(a0),d0
00013C8C 3140 0008                  		move.w	d0,8(a0)
00013C90                            
00013C90                            Obj45_Display:				; XREF: Obj45_Index
00013C90 4EB9 0000 0000             		jsr	DisplaySprite
00013C96                            
00013C96                            Obj45_ChkDel:				; XREF: Obj45_Solid
00013C96 3028 003A                  		move.w	$3A(a0),d0
00013C9A 4EF9 0000 0000             		jmp		MarkObjGone4
00013CA0                            
00013CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CA0                            
00013CA0                            
00013CA0                            Obj45_Move:				; XREF: Obj45_Solid
00013CA0 7000                       		moveq	#0,d0
00013CA2 1028 0028                  		move.b	subtype(a0),d0
00013CA6 D040                       		add.w	d0,d0
00013CA8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
00013CAC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
00013CB0                            ; End of function Obj45_Move
00013CB0                            
00013CB0                            ; ===========================================================================
00013CB0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
00013CB2 0000                       		dc.w loc_BADA-off_BAD6
00013CB4                            ; ===========================================================================
00013CB4                            
00013CB4                            loc_BADA:				; XREF: off_BAD6
00013CB4 4A68 0036                  		tst.w	$36(a0)
00013CB8 6700                       		beq.s	loc_BB08
00013CBA 4A68 0038                  		tst.w	$38(a0)
00013CBE 6700                       		beq.s	loc_BAEC
00013CC0 5368 0038                  		subq.w	#1,$38(a0)
00013CC4 6000                       		bra.s	loc_BB3C
00013CC6                            ; ===========================================================================
00013CC6                            
00013CC6                            loc_BAEC:
00013CC6 0468 0080 0032             		subi.w	#$80,$32(a0)
00013CCC 6400                       		bcc.s	loc_BB3C
00013CCE 317C 0000 0032             		move.w	#0,$32(a0)
00013CD4 317C 0000 0010             		move.w	#0,x_vel(a0)
00013CDA 317C 0000 0036             		move.w	#0,$36(a0)
00013CE0 6000                       		bra.s	loc_BB3C
00013CE2                            ; ===========================================================================
00013CE2                            
00013CE2                            loc_BB08:				; XREF: loc_BADA
00013CE2 3228 0034                  		move.w	$34(a0),d1
00013CE6 B268 0032                  		cmp.w	$32(a0),d1
00013CEA 6700                       		beq.s	loc_BB3C
00013CEC 3028 0010                  		move.w	x_vel(a0),d0
00013CF0 0668 0070 0010             		addi.w	#$70,x_vel(a0)
00013CF6 D168 0032                  		add.w	d0,$32(a0)
00013CFA B268 0032                  		cmp.w	$32(a0),d1
00013CFE 6200                       		bhi.s	loc_BB3C
00013D00 3141 0032                  		move.w	d1,$32(a0)
00013D04 317C 0000 0010             		move.w	#0,x_vel(a0)
00013D0A 317C 0001 0036             		move.w	#1,$36(a0)
00013D10 317C 003C 0038             		move.w	#$3C,$38(a0)
00013D16                            
00013D16                            loc_BB3C:
00013D16 7000                       		moveq	#0,d0
00013D18 1028 0032                  		move.b	$32(a0),d0
00013D1C 4440                       		neg.w	d0
00013D1E D068 0030                  		add.w	$30(a0),d0
00013D22 3140 0008                  		move.w	d0,8(a0)
00013D26 4E75                       		rts	
00013D28                            ; ===========================================================================
00013D28                            ; ---------------------------------------------------------------------------
00013D28                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013D28                            ; ---------------------------------------------------------------------------
00013D28                            Map_obj31:
00013D28                            	include "_maps\obj31.asm"
00013D28                            ; ---------------------------------------------------------------------------
00013D28                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013D28                            ; ---------------------------------------------------------------------------
00013D28 0000                       		dc.w byte_BB64-Map_obj31
00013D2A 0000                       		dc.w byte_BB7E-Map_obj31
00013D2C 0000                       		dc.w byte_BB98-Map_obj31
00013D2E 0000                       		dc.w byte_BB9E-Map_obj31
00013D30 0000                       		dc.w byte_BBA9-Map_obj31
00013D32 0000                       		dc.w byte_BBBE-Map_obj31
00013D34 0000                       		dc.w byte_BBDD-Map_obj31
00013D36 0000                       		dc.w byte_BC06-Map_obj31
00013D38 0000                       		dc.w byte_BC06-Map_obj31
00013D3A 0000                       		dc.w byte_BC39-Map_obj31
00013D3C 0000                       		dc.w byte_BC53-Map_obj31
00013D3E 05                         byte_BB64:	dc.b 5
00013D3F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
00013D44 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
00013D49 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013D4E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
00013D53 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
00013D58 05                         byte_BB7E:	dc.b 5
00013D59 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
00013D5E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
00013D63 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
00013D68 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
00013D6D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
00013D72 01                         byte_BB98:	dc.b 1
00013D73 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
00013D78 02                         byte_BB9E:	dc.b 2
00013D79 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013D7E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013D83 04                         byte_BBA9:	dc.b 4
00013D84 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013D89 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013D8E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013D93 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013D98 06                         byte_BBBE:	dc.b 6
00013D99 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013D9E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013DA3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013DA8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013DAD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013DB2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013DB7 08                         byte_BBDD:	dc.b 8
00013DB8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013DBD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013DC2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013DC7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013DCC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013DD1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013DD6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013DDB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013DE0 0A                         byte_BC06:	dc.b $A
00013DE1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
00013DE6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
00013DEB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013DF0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013DF5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013DFA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013DFF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013E04 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013E09 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013E0E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013E13 05                         byte_BC39:	dc.b 5
00013E14 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
00013E19 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
00013E1E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
00013E23 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
00013E28 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013E2D 01                         byte_BC53:	dc.b 1
00013E2E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
00013E34 00                         		even
00013E34 00                         		even
00013E34                            
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            Map_obj45:
00013E34                            	include "_maps\obj45.asm"
00013E34                            ; ---------------------------------------------------------------------------
00013E34                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013E34                            ; ---------------------------------------------------------------------------
00013E34 0000                       		dc.w byte_BC6C-Map_obj45
00013E36 0000                       		dc.w byte_BC7C-Map_obj45
00013E38 0000                       		dc.w byte_BC8C-Map_obj45
00013E3A 0000                       		dc.w byte_BC92-Map_obj45
00013E3C 0000                       		dc.w byte_BC9D-Map_obj45
00013E3E 0000                       		dc.w byte_BCB2-Map_obj45
00013E40 0000                       		dc.w byte_BCD1-Map_obj45
00013E42 0000                       		dc.w byte_BCFA-Map_obj45
00013E44 0000                       		dc.w byte_BCFA-Map_obj45
00013E46 03                         byte_BC6C:	dc.b 3
00013E47 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
00013E4C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
00013E51 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
00013E56 03                         byte_BC7C:	dc.b 3
00013E57 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
00013E5C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
00013E61 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
00013E66 01                         byte_BC8C:	dc.b 1
00013E67 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
00013E6C 02                         byte_BC92:	dc.b 2
00013E6D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013E72 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013E77 04                         byte_BC9D:	dc.b 4
00013E78 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013E7D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013E82 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013E87 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013E8C 06                         byte_BCB2:	dc.b 6
00013E8D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013E92 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013E97 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013E9C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013EA1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013EA6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013EAB 08                         byte_BCD1:	dc.b 8
00013EAC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013EB1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013EB6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013EBB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013EC0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013EC5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013ECA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013ECF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013ED4 08                         byte_BCFA:	dc.b 8
00013ED5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013EDA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013EDF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013EE4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013EE9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013EEE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013EF3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013EF8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013EFD F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
00013F02 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
00013F08 00                         		even
00013F08 00                         		even
00013F08                            
00013F08                            ; ===========================================================================
00013F08                            ; ---------------------------------------------------------------------------
00013F08                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
00013F08                            ; ---------------------------------------------------------------------------
00013F08                            
00013F08                            Obj32:					; XREF: Obj_Index
00013F08 7000                       		moveq	#0,d0
00013F0A 1028 0024                  		move.b	routine(a0),d0
00013F0E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
00013F12 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
00013F16                            ; ===========================================================================
00013F16 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
00013F18 0000                       		dc.w Obj32_Pressed-Obj32_Index
00013F1A                            ; ===========================================================================
00013F1A                            
00013F1A                            Obj32_Main:				; XREF: Obj32_Index
00013F1A 5428 0024                  		addq.b	#2,routine(a0)
00013F1E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
00013F26 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
00013F2C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00013F32 6700                       		beq.s	loc_BD60
00013F34 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
00013F3A                            
00013F3A                            loc_BD60:
00013F3A 117C 0004 0001             		move.b	#4,1(a0)
00013F40 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013F46 317C 0200 0018             		move.w	#$200,priority(a0)
00013F4C 5668 000C                  		addq.w	#3,$C(a0)
00013F50                            
00013F50                            Obj32_Pressed:				; XREF: Obj32_Index
00013F50 4A28 0001                  		tst.b	1(a0)
00013F54 4EB9 0000 0000             		jsr	Obj32_Display
00013F5A 323C 001B                  		move.w	#$1B,d1
00013F5E 343C 0005                  		move.w	#5,d2
00013F62 363C 0005                  		move.w	#5,d3
00013F66 3828 0008                  		move.w	8(a0),d4
00013F6A 4EB9 0000 0000             		jsr	SolidObject
00013F70 08A8 0000 001A             		bclr	#0,mapping_frame(a0)	; use "unpressed" frame
00013F76 1028 0028                  		move.b	subtype(a0),d0
00013F7A 0240 000F                  		andi.w	#$F,d0
00013F7E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
00013F82 47F3 0000                  		lea	(a3,d0.w),a3
00013F86 7600                       		moveq	#0,d3
00013F88 0828 0006 0028             		btst	#6,subtype(a0)
00013F8E 6700                       		beq.s	loc_BDB2
00013F90 7607                       		moveq	#7,d3
00013F92                            
00013F92                            loc_BDB2:
00013F92 4A28 0028                  		tst.b	subtype(a0)
00013F96 6A00                       		bpl.s	loc_BDBE
00013F98 4EB9 0000 0000             		jsr	Obj32_MZBlock
00013F9E 6600                       		bne.s	loc_BDC8
00013FA0                            
00013FA0                            loc_BDBE:
00013FA0 4A28 0025                  		tst.b	routine_secondary(a0)
00013FA4 6600                       		bne.s	loc_BDC8
00013FA6 0793                       		bclr	d3,(a3)
00013FA8 6000                       		bra.s	loc_BDDE
00013FAA                            ; ===========================================================================
00013FAA                            
00013FAA                            loc_BDC8:
00013FAA 4A13                       		tst.b	(a3)
00013FAC 6600                       		bne.s	loc_BDD6
00013FAE 303C 005B                  		move.w	#$5B,d0
00013FB2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play switch sound
00013FB8                            
00013FB8                            loc_BDD6:
00013FB8 07D3                       		bset	d3,(a3)
00013FBA 08E8 0000 001A             		bset	#0,mapping_frame(a0)	; use "pressed"	frame
00013FC0                            
00013FC0                            loc_BDDE:
00013FC0 0828 0005 0028             		btst	#5,subtype(a0)
00013FC6 6700                       		beq.s	Obj32_Display
00013FC8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00013FCC 6A00                       		bpl.s	Obj32_Display
00013FCE 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00013FD4 0868 0001 001A             		bchg	#1,mapping_frame(a0)
00013FDA                            
00013FDA                            Obj32_Display:
00013FDA 4EB9 0000 0000             		jsr	DisplaySprite
00013FE0 4EF9 0000 0000             		jmp		MarkObjGone3
00013FE6                            
00013FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FE6                            
00013FE6                            
00013FE6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
00013FE6 3F03                       		move.w	d3,-(sp)
00013FE8 3428 0008                  		move.w	8(a0),d2
00013FEC 3628 000C                  		move.w	$C(a0),d3
00013FF0 0442 0010                  		subi.w	#$10,d2
00013FF4 5143                       		subq.w	#8,d3
00013FF6 383C 0020                  		move.w	#$20,d4
00013FFA 3A3C 0010                  		move.w	#$10,d5
00013FFE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
00014002 3C3C 005F                  		move.w	#$5F,d6
00014006                            
00014006                            Obj32_MZLoop:
00014006 4A29 0001                  		tst.b	1(a1)
0001400A 6A00                       		bpl.s	loc_BE4E
0001400C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
00014010 6700                       		beq.s	loc_BE5E	; if yes, branch
00014012                            
00014012                            loc_BE4E:
00014012 43E9 0040                  		lea	object_size(a1),a1	; check	next object
00014016 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0001401A                            
0001401A 361F                       		move.w	(sp)+,d3
0001401C 7000                       		moveq	#0,d0
0001401E                            
0001401E                            locret_BE5A:
0001401E 4E75                       		rts	
00014020                            ; ===========================================================================
00014020 1010                       Obj32_MZData:	dc.b $10, $10
00014022                            ; ===========================================================================
00014022                            
00014022                            loc_BE5E:				; XREF: Obj32_MZBlock
00014022 7001                       		moveq	#1,d0
00014024 0240 003F                  		andi.w	#$3F,d0
00014028 D040                       		add.w	d0,d0
0001402A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0001402E 121A                       		move.b	(a2)+,d1
00014030 4881                       		ext.w	d1
00014032 3029 0008                  		move.w	8(a1),d0
00014036 9041                       		sub.w	d1,d0
00014038 9042                       		sub.w	d2,d0
0001403A 6400                       		bcc.s	loc_BE80
0001403C D241                       		add.w	d1,d1
0001403E D041                       		add.w	d1,d0
00014040 6500                       		bcs.s	loc_BE84
00014042 60CE                       		bra.s	loc_BE4E
00014044                            ; ===========================================================================
00014044                            
00014044                            loc_BE80:
00014044 B044                       		cmp.w	d4,d0
00014046 62CA                       		bhi.s	loc_BE4E
00014048                            
00014048                            loc_BE84:
00014048 121A                       		move.b	(a2)+,d1
0001404A 4881                       		ext.w	d1
0001404C 3029 000C                  		move.w	$C(a1),d0
00014050 9041                       		sub.w	d1,d0
00014052 9043                       		sub.w	d3,d0
00014054 6400                       		bcc.s	loc_BE9A
00014056 D241                       		add.w	d1,d1
00014058 D041                       		add.w	d1,d0
0001405A 6500                       		bcs.s	loc_BE9E
0001405C 60B4                       		bra.s	loc_BE4E
0001405E                            ; ===========================================================================
0001405E                            
0001405E                            loc_BE9A:
0001405E B045                       		cmp.w	d5,d0
00014060 62B0                       		bhi.s	loc_BE4E
00014062                            
00014062                            loc_BE9E:
00014062 361F                       		move.w	(sp)+,d3
00014064 7001                       		moveq	#1,d0
00014066 4E75                       		rts	
00014068                            ; End of function Obj32_MZBlock
00014068                            
00014068                            ; ===========================================================================
00014068                            ; ---------------------------------------------------------------------------
00014068                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00014068                            ; ---------------------------------------------------------------------------
00014068                            Map_obj32:
00014068                            	include "_maps\obj32.asm"
00014068                            ; ---------------------------------------------------------------------------
00014068                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00014068                            ; ---------------------------------------------------------------------------
00014068 0000                       		dc.w byte_BEAC-Map_obj32
0001406A 0000                       		dc.w byte_BEB7-Map_obj32
0001406C 0000                       		dc.w byte_BEC2-Map_obj32
0001406E 0000                       		dc.w byte_BEB7-Map_obj32
00014070 02                         byte_BEAC:	dc.b 2
00014071 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
00014076 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0001407B 02                         byte_BEB7:	dc.b 2
0001407C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
00014081 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
00014086 02                         byte_BEC2:	dc.b 2
00014087 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0001408C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
00014091 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00014096                            		even
00014096                            		even
00014096                            
00014096                            ; ===========================================================================
00014096                            ; ---------------------------------------------------------------------------
00014096                            ; Object 33 - pushable blocks (MZ, LZ)
00014096                            ; ---------------------------------------------------------------------------
00014096                            
00014096                            Obj33:					; XREF: Obj_Index
00014096 7000                       		moveq	#0,d0
00014098 1028 0024                  		move.b	routine(a0),d0
0001409C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
000140A0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
000140A4                            ; ===========================================================================
000140A4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
000140A6 0000                       		dc.w loc_BF6E-Obj33_Index
000140A8 0000                       		dc.w loc_C02C-Obj33_Index
000140AA                            
000140AA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
000140AC 4001                       		dc.b $40, 1
000140AE                            ; ===========================================================================
000140AE                            
000140AE                            Obj33_Main:				; XREF: Obj33_Index
000140AE 5428 0024                  		addq.b	#2,routine(a0)
000140B2 117C 000F 0016             		move.b	#$F,$16(a0)
000140B8 117C 000F 0017             		move.b	#$F,$17(a0)
000140BE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
000140C6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
000140CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000140D2 6600                       		bne.s	loc_BF16
000140D4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
000140DA                            
000140DA                            loc_BF16:
000140DA 117C 0004 0001             		move.b	#4,1(a0)
000140E0 317C 0180 0018             		move.w	#$180,priority(a0)
000140E6 3168 0008 0034             		move.w	8(a0),$34(a0)
000140EC 3168 000C 0036             		move.w	$C(a0),$36(a0)
000140F2 7000                       		moveq	#0,d0
000140F4 1028 0028                  		move.b	subtype(a0),d0
000140F8 D040                       		add.w	d0,d0
000140FA 0240 000E                  		andi.w	#$E,d0
000140FE 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
00014102 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00014106 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001410A 4A28 0028                  		tst.b	subtype(a0)
0001410E 6700                       		beq.s	Obj33_ChkGone
00014110 317C C2B8 0002             		move.w	#$C2B8,2(a0)
00014116                            
00014116                            Obj33_ChkGone:
00014116                            ;		lea	(v_objstate).w,a2
00014116 7000                       		moveq	#0,d0
00014118 3028 0014                  		move.w	respawn_index(a0),d0
0001411C                            ;        move.w	respawn_index(a0),d0
0001411C 3440                       	    movea.w	d0,a2
0001411E 6700                       		beq.s	loc_BF6E
00014120 0892 0007                  		bclr	#7,(a2)
00014124 08D2 0000                  		bset	#0,(a2)
00014128 6600 0000                  		bne.w	DeleteObject
0001412C                            
0001412C                            loc_BF6E:				; XREF: Obj33_Index
0001412C 4A28 0032                  		tst.b	$32(a0)
00014130 6600 0000                  		bne.w	loc_C046
00014134 7200                       		moveq	#0,d1
00014136 1228 0023                  		move.b	width_pixels(a0),d1
0001413A 0641 000B                  		addi.w	#$B,d1
0001413E 343C 0010                  		move.w	#$10,d2
00014142 363C 0011                  		move.w	#$11,d3
00014146 3828 0008                  		move.w	8(a0),d4
0001414A 4EB9 0000 0000             		jsr	loc_C186
00014150 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
00014156 6600                       		bne.s	loc_BFC6	; if not, branch
00014158 08A8 0007 0028             		bclr	#7,subtype(a0)
0001415E 3028 0008                  		move.w	8(a0),d0
00014162 0C40 0A20                  		cmpi.w	#$A20,d0
00014166 6500                       		bcs.s	loc_BFC6
00014168 0C40 0AA1                  		cmpi.w	#$AA1,d0
0001416C 6400                       		bcc.s	loc_BFC6
0001416E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
00014172 0440 001C                  		subi.w	#$1C,d0
00014176 3140 000C                  		move.w	d0,$C(a0)
0001417A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
00014180 08E8 0007 0028             		bset	#7,subtype(a0)
00014186                            
00014186                            loc_BFC6:
00014186 3028 0008                  		move.w	8(a0),d0
0001418A 0240 FF80                  		andi.w	#$FF80,d0
0001418E 3238 F700                  		move.w	($FFFFF700).w,d1
00014192 0441 0080                  		subi.w	#$80,d1
00014196 0241 FF80                  		andi.w	#$FF80,d1
0001419A 9041                       		sub.w	d1,d0
0001419C 0C40 0280                  		cmpi.w	#$280,d0
000141A0 6200                       		bhi.s	loc_BFE6
000141A2 6000 0000                  		bra.w	DisplaySprite
000141A6                            ; ===========================================================================
000141A6                            
000141A6                            loc_BFE6:
000141A6 3028 0034                  		move.w	$34(a0),d0
000141AA 0240 FF80                  		andi.w	#$FF80,d0
000141AE 3238 F700                  		move.w	($FFFFF700).w,d1
000141B2 0441 0080                  		subi.w	#$80,d1
000141B6 0241 FF80                  		andi.w	#$FF80,d1
000141BA 9041                       		sub.w	d1,d0
000141BC 0C40 0280                  		cmpi.w	#$280,d0
000141C0 6200                       		bhi.s	loc_C016
000141C2 3168 0034 0008             		move.w	$34(a0),8(a0)
000141C8 3168 0036 000C             		move.w	$36(a0),$C(a0)
000141CE 117C 0004 0024             		move.b	#4,routine(a0)
000141D4 6000                       		bra.s	loc_C02C
000141D6                            ; ===========================================================================
000141D6                            
000141D6                            loc_C016:
000141D6                            ;		lea	(v_objstate).w,a2
000141D6 7000                       		moveq	#0,d0
000141D8 3028 0014                  		move.w	respawn_index(a0),d0
000141DC                            ;        move.w	respawn_index(a0),d0
000141DC 3440                       	    movea.w	d0,a2
000141DE 6700                       		beq.s	loc_C028
000141E0 0892 0000                  		bclr	#0,(a2)
000141E4                            
000141E4                            loc_C028:
000141E4 6000 0000                  		bra.w	DeleteObject
000141E8                            ; ===========================================================================
000141E8                            
000141E8                            loc_C02C:				; XREF: Obj33_Index
000141E8 4EB9 0000 0000             		jsr	ChkObjOnScreen2
000141EE 6700                       		beq.s	locret_C044
000141F0 117C 0002 0024             		move.b	#2,routine(a0)
000141F6 4228 0032                  		clr.b	$32(a0)
000141FA 4268 0010                  		clr.w	x_vel(a0)
000141FE 4268 0012                  		clr.w	y_vel(a0)
00014202                            
00014202                            locret_C044:
00014202 4E75                       		rts	
00014204                            ; ===========================================================================
00014204                            
00014204                            loc_C046:				; XREF: loc_BF6E
00014204 3F28 0008                  		move.w	8(a0),-(sp)
00014208 0C28 0004 0025             		cmpi.b	#4,routine_secondary(a0)
0001420E 6400                       		bcc.s	loc_C056
00014210 4EB9 0000 0000             		jsr	SpeedToPos
00014216                            
00014216                            loc_C056:
00014216 0828 0001 0022             		btst	#1,status(a0)
0001421C 6700                       		beq.s	loc_C0A0
0001421E 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00014224 4EB9 0000 0000             		jsr	ObjHitFloor
0001422A 4A41                       		tst.w	d1
0001422C 6A00 0000                  		bpl.w	loc_C09E
00014230 D368 000C                  		add.w	d1,$C(a0)
00014234 4268 0012                  		clr.w	y_vel(a0)
00014238 08A8 0001 0022             		bclr	#1,status(a0)
0001423E 3011                       		move.w	(a1),d0
00014240 0240 03FF                  		andi.w	#$3FF,d0
00014244 0C40 016A                  		cmpi.w	#$16A,d0
00014248 6500                       		bcs.s	loc_C09E
0001424A 3028 0030                  		move.w	$30(a0),d0
0001424E E640                       		asr.w	#3,d0
00014250 3140 0010                  		move.w	d0,x_vel(a0)
00014254 117C 0001 0032             		move.b	#1,$32(a0)
0001425A 4268 000E                  		clr.w	$E(a0)
0001425E                            
0001425E                            loc_C09E:
0001425E 6000                       		bra.s	loc_C0E6
00014260                            ; ===========================================================================
00014260                            
00014260                            loc_C0A0:
00014260 4A68 0010                  		tst.w	x_vel(a0)
00014264 6700 0000                  		beq.w	loc_C0D6
00014268 6B00                       		bmi.s	loc_C0BC
0001426A 7600                       		moveq	#0,d3
0001426C 1628 0023                  		move.b	width_pixels(a0),d3
00014270 4EB9 0000 0000             		jsr	ObjHitWallRight
00014276 4A41                       		tst.w	d1		; has block touched a wall?
00014278 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0001427A 6000                       		bra.s	loc_C0E6
0001427C                            ; ===========================================================================
0001427C                            
0001427C                            loc_C0BC:
0001427C 7600                       		moveq	#0,d3
0001427E 1628 0023                  		move.b	width_pixels(a0),d3
00014282 4643                       		not.w	d3
00014284 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001428A 4A41                       		tst.w	d1		; has block touched a wall?
0001428C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0001428E 6000                       		bra.s	loc_C0E6
00014290                            ; ===========================================================================
00014290                            
00014290                            Obj33_StopPush:
00014290 4268 0010                  		clr.w	x_vel(a0)		; stop block moving
00014294 6000                       		bra.s	loc_C0E6
00014296                            ; ===========================================================================
00014296                            
00014296                            loc_C0D6:
00014296 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0001429E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
000142A4 6400                       		bcc.s	loc_C104
000142A6                            
000142A6                            loc_C0E6:
000142A6 7200                       		moveq	#0,d1
000142A8 1228 0023                  		move.b	width_pixels(a0),d1
000142AC 0641 000B                  		addi.w	#$B,d1
000142B0 343C 0010                  		move.w	#$10,d2
000142B4 363C 0011                  		move.w	#$11,d3
000142B8 381F                       		move.w	(sp)+,d4
000142BA 4EB9 0000 0000             		jsr	loc_C186
000142C0 6100                       		bsr.s	Obj33_ChkLava
000142C2 6000 FEC2                  		bra.w	loc_BFC6
000142C6                            ; ===========================================================================
000142C6                            
000142C6                            loc_C104:
000142C6 381F                       		move.w	(sp)+,d4
000142C8 43F8 D000                  		lea	($FFFFD000).w,a1
000142CC 08A9 0003 0022             		bclr	#3,status(a1)
000142D2 08A8 0003 0022             		bclr	#3,status(a0)
000142D8 6000 FECC                  		bra.w	loc_BFE6
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            Obj33_ChkLava:
000142DC 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
000142E2 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
000142E4 343C FFE0                  		move.w	#-$20,d2
000142E8 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
000142EE 6700                       		beq.s	Obj33_LoadLava
000142F0 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
000142F6 6700                       		beq.s	Obj33_LoadLava
000142F8 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
000142FE 6700                       		beq.s	Obj33_LoadLava
00014300 4E75                       		rts	
00014302                            ; ===========================================================================
00014302                            
00014302                            Obj33_ChkLava2:
00014302 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
00014308 6600                       		bne.s	Obj33_NoLava	; if not, branch
0001430A 343C 0020                  		move.w	#$20,d2
0001430E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
00014314 6700                       		beq.s	Obj33_LoadLava
00014316 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0001431C 6700                       		beq.s	Obj33_LoadLava
0001431E                            
0001431E                            Obj33_NoLava:
0001431E 4E75                       		rts	
00014320                            ; ===========================================================================
00014320                            
00014320                            Obj33_LoadLava:
00014320 6100 0000                  		bsr.w	SingleObjLoad
00014324 6600                       		bne.s	locret_C184
00014326 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0001432A 3368 0008 0008             		move.w	8(a0),8(a1)
00014330 D569 0008                  		add.w	d2,8(a1)
00014334 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001433A 0669 0010 000C             		addi.w	#$10,$C(a1)
00014340 2348 003C                  		move.l	a0,$3C(a1)
00014344                            
00014344                            locret_C184:
00014344 4E75                       		rts	
00014346                            ; ===========================================================================
00014346                            
00014346                            loc_C186:				; XREF: loc_BF6E
00014346 1028 0025                  		move.b	routine_secondary(a0),d0
0001434A 6700 0000                  		beq.w	loc_C218
0001434E 5500                       		subq.b	#2,d0
00014350 6600                       		bne.s	loc_C1AA
00014352 4EBA AFBC                  		jsr	ExitPlatform
00014356 0829 0003 0022             		btst	#3,status(a1)
0001435C 6600                       		bne.s	loc_C1A4
0001435E 4228 0025                  		clr.b	routine_secondary(a0)
00014362 4E75                       		rts	
00014364                            ; ===========================================================================
00014364                            
00014364                            loc_C1A4:
00014364 3404                       		move.w	d4,d2
00014366 6000 B202                  		bra.w	MvSonicOnPtfm
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            loc_C1AA:
0001436A 5500                       		subq.b	#2,d0
0001436C 6600                       		bne.s	loc_C1F2
0001436E 4EB9 0000 0000             		jsr	SpeedToPos
00014374 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001437A 4EB9 0000 0000             		jsr	ObjHitFloor
00014380 4A41                       		tst.w	d1
00014382 6A00 0000                  		bpl.w	locret_C1F0
00014386 D368 000C                  		add.w	d1,$C(a0)
0001438A 4268 0012                  		clr.w	y_vel(a0)
0001438E 4228 0025                  		clr.b	routine_secondary(a0)
00014392 3011                       		move.w	(a1),d0
00014394 0240 03FF                  		andi.w	#$3FF,d0
00014398 0C40 016A                  		cmpi.w	#$16A,d0
0001439C 6500                       		bcs.s	locret_C1F0
0001439E 3028 0030                  		move.w	$30(a0),d0
000143A2 E640                       		asr.w	#3,d0
000143A4 3140 0010                  		move.w	d0,x_vel(a0)
000143A8 117C 0001 0032             		move.b	#1,$32(a0)
000143AE 4268 000E                  		clr.w	$E(a0)
000143B2                            
000143B2                            locret_C1F0:
000143B2 4E75                       		rts	
000143B4                            ; ===========================================================================
000143B4                            
000143B4                            loc_C1F2:
000143B4 4EB9 0000 0000             		jsr	SpeedToPos
000143BA 3028 0008                  		move.w	8(a0),d0
000143BE 0240 000C                  		andi.w	#$C,d0
000143C2 6600 0000                  		bne.w	locret_C2E4
000143C6 0268 FFF0 0008             		andi.w	#-$10,8(a0)
000143CC 3168 0010 0030             		move.w	x_vel(a0),$30(a0)
000143D2 4268 0010                  		clr.w	x_vel(a0)
000143D6 5528 0025                  		subq.b	#2,routine_secondary(a0)
000143DA 4E75                       		rts	
000143DC                            ; ===========================================================================
000143DC                            
000143DC                            loc_C218:
000143DC 4EB9 0000 0000             		jsr	loc_FAC8
000143E2 4A44                       		tst.w	d4
000143E4 6700 0000                  		beq.w	locret_C2E4
000143E8 6B00 0000                  		bmi.w	locret_C2E4
000143EC 4A28 0032                  		tst.b	$32(a0)
000143F0 6700                       		beq.s	loc_C230
000143F2 6000 0000                  		bra.w	locret_C2E4
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            loc_C230:
000143F6 4A40                       		tst.w	d0
000143F8 6700 0000                  		beq.w	locret_C2E4
000143FC 6B00                       		bmi.s	loc_C268
000143FE 0829 0000 0022             		btst	#0,status(a1)
00014404 6600 0000                  		bne.w	locret_C2E4
00014408 3F00                       		move.w	d0,-(sp)
0001440A 7600                       		moveq	#0,d3
0001440C 1628 0023                  		move.b	width_pixels(a0),d3
00014410 4EB9 0000 0000             		jsr	ObjHitWallRight
00014416 301F                       		move.w	(sp)+,d0
00014418 4A41                       		tst.w	d1
0001441A 6B00 0000                  		bmi.w	locret_C2E4
0001441E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
00014426 7001                       		moveq	#1,d0
00014428 323C 0040                  		move.w	#$40,d1
0001442C 6000                       		bra.s	loc_C294
0001442E                            ; ===========================================================================
0001442E                            
0001442E                            loc_C268:
0001442E 0829 0000 0022             		btst	#0,status(a1)
00014434 6700                       		beq.s	locret_C2E4
00014436 3F00                       		move.w	d0,-(sp)
00014438 7600                       		moveq	#0,d3
0001443A 1628 0023                  		move.b	width_pixels(a0),d3
0001443E 4643                       		not.w	d3
00014440 4EB9 0000 0000             		jsr	ObjHitWallLeft
00014446 301F                       		move.w	(sp)+,d0
00014448 4A41                       		tst.w	d1
0001444A 6B00                       		bmi.s	locret_C2E4
0001444C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00014454 70FF                       		moveq	#-1,d0
00014456 323C FFC0                  		move.w	#-$40,d1
0001445A                            
0001445A                            loc_C294:
0001445A 43F8 D000                  		lea	($FFFFD000).w,a1
0001445E D169 0008                  		add.w	d0,8(a1)
00014462 3341 0020                  		move.w	d1,inertia(a1)
00014466 337C 0000 0010             		move.w	#0,x_vel(a1)
0001446C 3F00                       		move.w	d0,-(sp)
0001446E 303C 00A7                  		move.w	#$A7,d0
00014472 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play pushing sound
00014478 301F                       		move.w	(sp)+,d0
0001447A 4A28 0028                  		tst.b	subtype(a0)
0001447E 6B00                       		bmi.s	locret_C2E4
00014480 3F00                       		move.w	d0,-(sp)
00014482 4EB9 0000 0000             		jsr	ObjHitFloor
00014488 301F                       		move.w	(sp)+,d0
0001448A 0C41 0004                  		cmpi.w	#4,d1
0001448E 6F00                       		ble.s	loc_C2E0
00014490 317C 0400 0010             		move.w	#$400,x_vel(a0)
00014496 4A40                       		tst.w	d0
00014498 6A00                       		bpl.s	loc_C2D8
0001449A 4468 0010                  		neg.w	x_vel(a0)
0001449E                            
0001449E                            loc_C2D8:
0001449E 117C 0006 0025             		move.b	#6,routine_secondary(a0)
000144A4 6000                       		bra.s	locret_C2E4
000144A6                            ; ===========================================================================
000144A6                            
000144A6                            loc_C2E0:
000144A6 D368 000C                  		add.w	d1,$C(a0)
000144AA                            
000144AA                            locret_C2E4:
000144AA 4E75                       		rts	
000144AC                            ; ===========================================================================
000144AC                            ; ---------------------------------------------------------------------------
000144AC                            ; Sprite mappings - pushable blocks (MZ, LZ)
000144AC                            ; ---------------------------------------------------------------------------
000144AC                            Map_obj33:
000144AC                            	include "_maps\obj33.asm"
000144AC                            ; ---------------------------------------------------------------------------
000144AC                            ; Sprite mappings - pushable blocks (MZ, LZ)
000144AC                            ; ---------------------------------------------------------------------------
000144AC 0000                       		dc.w byte_C2EA-Map_obj33
000144AE 0000                       		dc.w byte_C2F0-Map_obj33
000144B0 01                         byte_C2EA:	dc.b 1
000144B1 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
000144B6 04                         byte_C2F0:	dc.b 4
000144B7 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
000144BC F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
000144C1 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
000144C6 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
000144CC 00                         		even
000144CC 00                         		even
000144CC                            
000144CC                            ; ===========================================================================
000144CC                            ; ---------------------------------------------------------------------------
000144CC                            ; Object 34 - zone title cards
000144CC                            ; ---------------------------------------------------------------------------
000144CC                            
000144CC                            Obj34:					; XREF: Obj_Index
000144CC 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
000144D2 6600                       		bne.s	Obj34_NoCutscene
000144D4 4E75                       		rts
000144D6                            Obj34_NoCutscene:
000144D6 7000                       		moveq	#0,d0
000144D8 1028 0024                  		move.b	routine(a0),d0
000144DC 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
000144E0 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
000144E4                            ; ===========================================================================
000144E4 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
000144E6 0000                       		dc.w Obj34_ChkPos-Obj34_Index
000144E8 0000                       		dc.w Obj34_Wait-Obj34_Index
000144EA 0000                       		dc.w Obj34_Wait-Obj34_Index
000144EC                            ; ===========================================================================
000144EC                            
000144EC                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
000144EC 2248                       		movea.l	a0,a1
000144EE 7000                       		moveq	#0,d0
000144F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000144F4 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
000144FA 6600                       		bne.s	Obj34_CheckFZ
000144FC 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
000144FE                            
000144FE                            Obj34_CheckFZ:
000144FE 3400                       		move.w	d0,d2
00014500 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
00014506 6600                       		bne.s	Obj34_CheckNew
00014508 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0001450A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0001450C                             
0001450C                            Obj34_CheckNew:
0001450C 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
00014512 6500                       		blo.s	Obj34_LoadConfig
00014514 5A02                       		addq.b	#$C-7,d2	; use correct mappings
00014516                            
00014516                            Obj34_LoadConfig:
00014516 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0001451C E948                       		lsl.w	#4,d0
0001451E D6C0                       		adda.w	d0,a3
00014520 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
00014526 7203                       		moveq	#3,d1
00014528                            
00014528                            Obj34_Loop:
00014528                            
00014528 12BC 0034                  		move.b	#$34,0(a1)
0001452C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
00014530 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
00014534 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
00014538 335A 000A                  		move.w	(a2)+,$A(a1)
0001453C 135A 0024                  		move.b	(a2)+,routine(a1)
00014540 101A                       		move.b	(a2)+,d0
00014542 6600                       		bne.s	Obj34_ActNumber
00014544 1002                       		move.b	d2,d0
00014546                            
00014546                            Obj34_ActNumber:
00014546 0C00 0007                  		cmpi.b	#7,d0
0001454A 6600                       		bne.s	Obj34_MakeSprite
0001454C D038 FE11                  		add.b	($FFFFFE11).w,d0
00014550 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
00014556 6600                       		bne.s	Obj34_ActNumber_4	; if not, branch
00014558 5300                       		subq.b	#1,d0
0001455A 6000                       		bra.s	Obj34_MakeSprite
0001455C                            
0001455C                            Obj34_ActNumber_4:
0001455C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w	; is act number 4?
00014562 6600                       		bne.s	Obj34_MakeSprite	; if not, branch
00014564 103C 000C                  		move.b	#12,d0				; set to load the number 4
00014568                            
00014568                            Obj34_MakeSprite:
00014568 1340 001A                  		move.b	d0,mapping_frame(a1)	; display frame	number d0
0001456C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
00014574 337C 8580 0002             		move.w	#$8580,2(a1)
0001457A 137C 0078 0023             		move.b	#$78,width_pixels(a1)
00014580 137C 0000 0001             		move.b	#0,1(a1)
00014586 137C 0000 0018             		move.b	#0,priority(a1)
0001458C 337C 003C 001E             		move.w	#60,anim_frame_duration(a1)	; set time delay to 1 second
00014592 43E9 0040                  		lea	object_size(a1),a1		; next object
00014596 51C9 FF90                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0001459A                            
0001459A                            Obj34_ChkPos:				; XREF: Obj34_Index
0001459A 7210                       		moveq	#$10,d1		; set horizontal speed
0001459C 3028 0030                  		move.w	$30(a0),d0
000145A0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
000145A4 6700                       		beq.s	loc_C3C8	; if yes, branch
000145A6 6C00                       		bge.s	Obj34_Move
000145A8 4441                       		neg.w	d1
000145AA                            
000145AA                            Obj34_Move:
000145AA D368 0008                  		add.w	d1,8(a0)	; change item's position
000145AE                            
000145AE                            loc_C3C8:
000145AE 3028 0008                  		move.w	8(a0),d0
000145B2 6B00                       		bmi.s	locret_C3D8
000145B4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000145B8 6400                       		bcc.s	locret_C3D8	; if yes, branch
000145BA 6000 0000                  		bra.w	DisplaySprite
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            locret_C3D8:
000145BE 4E75                       		rts	
000145C0                            ; ===========================================================================
000145C0                            
000145C0                            Obj34_Wait:				; XREF: Obj34_Index
000145C0 4A68 001E                  		tst.w	anim_frame_duration(a0)			; is time remaining zero?
000145C4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
000145C6 5368 001E                  		subq.w	#1,anim_frame_duration(a0)		; subtract 1 from time
000145CA 6000 0000                  		bra.w	DisplaySprite
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
000145CE 4A28 0001                  		tst.b	1(a0)
000145D2 6A00                       		bpl.s	Obj34_ChangeArt
000145D4 7220                       		moveq	#$20,d1
000145D6 3028 0032                  		move.w	$32(a0),d0
000145DA B068 0008                  		cmp.w	8(a0),d0		; has item reached the finish position?
000145DE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
000145E0 6C00                       		bge.s	Obj34_Move2
000145E2 4441                       		neg.w	d1
000145E4                            
000145E4                            Obj34_Move2:
000145E4 D368 0008                  		add.w	d1,8(a0)	; change item's position
000145E8 3028 0008                  		move.w	8(a0),d0
000145EC 6B00                       		bmi.s	locret_C412
000145EE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000145F2 6400                       		bcc.s	locret_C412	; if yes, branch
000145F4 6000 0000                  		bra.w	DisplaySprite
000145F8                            ; ===========================================================================
000145F8                            
000145F8                            locret_C412:
000145F8 4E75                       		rts	
000145FA                            ; ===========================================================================
000145FA                            
000145FA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
000145FA 0C28 0004 0024             		cmpi.b	#4,routine(a0)
00014600 6600                       		bne.s	Obj34_Delete
00014602 7002                       		moveq	#2,d0
00014604 4EB9 0000 3712             		jsr	(LoadPLC).l	; load explosion patterns
0001460A 4EB9 0000 36DA             		jsr	(LoadAnimalPLC).l ; load animal patterns
00014610                            
00014610                            Obj34_Delete:
00014610 6000 0000                  		bra.w	DeleteObject
00014614                            ; ===========================================================================
00014614 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
00014616 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
00014618 00E4                       		dc.w $E4
0001461A 0206                       		dc.b 2,	6
0001461C 00EA                       		dc.w $EA
0001461E 0207                       		dc.b 2,	7
00014620 00E0                       		dc.w $E0
00014622 020A                       		dc.b 2,	$A
00014624                            ; ---------------------------------------------------------------------------
00014624                            ; Title	card configuration data
00014624                            ; Format:
00014624                            ; 4 bytes per item (YYYY XXXX)
00014624                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
00014624                            ; ---------------------------------------------------------------------------
00014624 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
00014634 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
00014644 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
00014654 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
00014664 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
00014674 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
00014684 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
00014694 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
000146A4                            ; ===========================================================================
000146A4                            ;===============================================================================
000146A4                            ; Objeto 0x34 - Tela com o nome das fases conhecido tambem conhecido como: 
000146A4                            ; [ Termino ]        - Splash Screen, Title Cards, etc... 
000146A4                            ;===============================================================================  
000146A4                            ; ---------------------------------------------------------------------------
000146A4                            ; Object 39 - "GAME OVER" and "TIME OVER"
000146A4                            ; ---------------------------------------------------------------------------
000146A4                            
000146A4                            Obj39:					; XREF: Obj_Index
000146A4 7000                       		moveq	#0,d0
000146A6 1028 0024                  		move.b	routine(a0),d0
000146AA 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
000146AE 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
000146B2                            ; ===========================================================================
000146B2 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
000146B4 0000                       		dc.w loc_C50C-Obj39_Index
000146B6 0000                       		dc.w Obj39_Wait-Obj39_Index
000146B8                            ; ===========================================================================
000146B8                            
000146B8                            Obj39_ChkPLC: 				; XREF: Obj39_Index
000146B8 4AB8 F680                          tst.l	($FFFFF680).w	; are the pattern load cues empty?
000146BC 6700                       		beq.s	Obj39_Main	; if yes, branch
000146BE 4E75                       		rts
000146C0                            ; ===========================================================================
000146C0                            Obj39_Main:
000146C0 43F8 D0C0                          lea 	($FFFFD0C0).w,a1
000146C4 12BC 0039                     		move.b	#$39,(a1) ; load OVER object
000146C8 337C 855E 0002             		move.w	#$855E,2(a1)
000146CE 237C 0000 0000 0004        		move.l	#Map_obj39,4(a1)
000146D6 137C 0001 001A             		move.b	#1,$1A(a1) ; set OVER object to correct frame
000146DC 137C 0002 0024             		move.b  #2,routine(a1)
000146E2 337C 00F0 000A             		move.w	#$F0,$A(a1)
000146E8 337C 01F0 0008             		move.w	#$1F0,8(a1)
000146EE 137C 0000 0001             		move.b	#0,1(a1)
000146F4 137C 0000 0018             		move.b	#0,priority(a1)
000146FA 5428 0024                  		addq.b	#2,routine(a0)
000146FE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
00014706 317C 855E 0002             		move.w	#$855E,2(a0)
0001470C 117C 0000 0001               		move.b	#0,1(a0)
00014712 117C 0000 0018             		move.b	#0,priority(a0)
00014718 317C 00F0 000A               		move.w	#$F0,$A(a0)
0001471E 317C 0050 0008               		move.w	#$50,8(a0)	; set x-position
00014724                            
00014724                            loc_C50C:				; XREF: Obj39_Index
00014724 7210                       		moveq	#$10,d1		; set horizontal speed
00014726 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0001472C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0001472E 6500                       		bcs.s	Obj39_Move
00014730 4441                       		neg.w	d1
00014732                            
00014732                            Obj39_Move:
00014732 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014736 6000 0000                  		bra.w	DisplaySprite
0001473A                            ; ===========================================================================
0001473A                            
0001473A                            Obj39_SetWait:				; XREF: Obj39_Main
0001473A 317C 02D0 001E             		move.w	#720,anim_frame_duration(a0)	; set time delay to 12 seconds
00014740 5428 0024                  		addq.b	#2,routine(a0)
00014744 4E75                       		rts	
00014746                            ; ===========================================================================
00014746                            
00014746                            Obj39_Wait:				; XREF: Obj39_Index
00014746 1038 F605                  		move.b	($FFFFF605).w,d0
0001474A 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0001474E 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
00014750 0828 0000 001A             		btst	#0,$1A(a0)
00014756 6600                       		bne.s	Obj39_Display
00014758 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0001475C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0001475E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
00014762 6000 0000                  		bra.w	DisplaySprite
00014766                            ; ===========================================================================
00014766                            
00014766                            Obj39_ChgMode:				; XREF: Obj39_Wait
00014766 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0001476A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0001476C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
00014772 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
00014776 6600                       		bne.s	Obj39_Display	; if yes, branch
00014778 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0001477E 6000                       		bra.s	Obj39_Display
00014780                            ; ===========================================================================
00014780                            
00014780                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
00014780 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014786                            
00014786                            Obj39_Display:				; XREF: Obj39_ChgMode
00014786 6000 0000                  		bra.w	DisplaySprite
0001478A                            ; ===========================================================================
0001478A                            
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0001478A                            ; ---------------------------------------------------------------------------
0001478A                            
0001478A                            Obj3A:					; XREF: Obj_Index
0001478A 7000                       		moveq	#0,d0
0001478C 1028 0024                  		move.b	routine(a0),d0
00014790 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
00014794 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
00014798                            ; ===========================================================================
00014798 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0001479A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0001479C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0001479E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
000147A0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
000147A2 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
000147A4 0000                       		dc.w Obj3A_Wait-Obj3A_Index
000147A6 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
000147A8 0000                       		dc.w loc_C766-Obj3A_Index
000147AA                            ; ===========================================================================
000147AA                            
000147AA                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
000147AA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
000147AE 6700                       		beq.s	Obj3A_Main	; if yes, branch
000147B0 4E75                       		rts	
000147B2                            ; ===========================================================================
000147B2                            
000147B2                            Obj3A_Main:
000147B2                            	;Mercury Remove Speed Shoes At Signpost Fix
000147B2 4238 D034                  		clr.b	(Maincharacter+speedshoes_time).w	; clear Super Shoes	;Mercury Constants
000147B6                            ;		clr.w	($FFFFD032).w		; clear time limit of the invincibility
000147B6                            ;		clr.w	($FFFFFE2C).w	; remove shield
000147B6                            ;		move.b	#$0,($FFFFD180).w ; load shield object	($38)
000147B6                            	;end Remove Speed Shoes At Signpost Fix
000147B6                            ;		move.b	#$23,(MainCharacter+anim).w
000147B6                            ;		clr.w	(MainCharacter+inertia).w
000147B6                            ;		clr.w	(MainCharacter+x_vel).w
000147B6 2248                       		movea.l	a0,a1
000147B8 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
000147BE 7206                       		moveq	#6,d1
000147C0                            
000147C0                            Obj3A_Loop:
000147C0 12BC 003A                  		move.b	#$3A,0(a1)
000147C4 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
000147C8 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
000147CC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
000147D0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
000147D4 135A 0024                  		move.b	(a2)+,routine(a1)
000147D8 101A                       		move.b	(a2)+,d0
000147DA 0C00 0006                  		cmpi.b	#6,d0
000147DE 6600                       		bne.s	loc_C5CA
000147E0 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
000147E4                            
000147E4                            loc_C5CA:
000147E4 1340 001A                  		move.b	d0,mapping_frame(a1)
000147E8                            		
000147E8                            loc_C5CA_2:
000147E8 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
000147F0 337C 8580 0002             		move.w	#$8580,2(a1)
000147F6 137C 0000 0001             		move.b	#0,1(a1)
000147FC 43E9 0040                  		lea	object_size(a1),a1
00014800 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
00014804                            
00014804                            Obj3A_ChkPos:				; XREF: Obj3A_Index
00014804 7210                       		moveq	#$10,d1		; set horizontal speed
00014806 3028 0030                  		move.w	$30(a0),d0
0001480A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0001480E 6700                       		beq.s	loc_C61A	; if yes, branch
00014810 6C00                       		bge.s	Obj3A_Move
00014812 4441                       		neg.w	d1
00014814                            
00014814                            Obj3A_Move:
00014814 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014818                            
00014818                            loc_C5FE:				; XREF: loc_C61A
00014818 3028 0008                  		move.w	8(a0),d0
0001481C 6B00                       		bmi.s	locret_C60E
0001481E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014822 6400                       		bcc.s	locret_C60E	; if yes, branch
00014824 6000 0000                  		bra.w	DisplaySprite
00014828                            ; ===========================================================================
00014828                            
00014828                            locret_C60E:
00014828 4E75                       		rts	
0001482A                            ; ===========================================================================
0001482A                            
0001482A                            loc_C610:				; XREF: loc_C61A
0001482A 117C 000E 0024             		move.b	#$E,routine(a0)
00014830 6000 0000                  		bra.w	Obj3A_ChkPos2
00014834                            ; ===========================================================================
00014834                            
00014834                            loc_C61A:				; XREF: Obj3A_ChkPos
00014834 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0001483A 67EE                       		beq.s	loc_C610
0001483C 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
00014842 66D4                       		bne.s	loc_C5FE
00014844 5428 0024                  		addq.b	#2,routine(a0)
00014848 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
0001484E                            
0001484E                            Obj3A_Wait:				; XREF: Obj3A_Index
0001484E 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00014852 6600                       		bne.s	Obj3A_Display
00014854 5428 0024                  		addq.b	#2,routine(a0)
00014858                            
00014858                            Obj3A_Display:
00014858 6000 0000                  		bra.w	DisplaySprite
0001485C                            ; ===========================================================================
0001485C                            
0001485C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0001485C 4EB9 0000 0000             		jsr	DisplaySprite
00014862 123C 000A                  		move.b	#10,d1	; set score decrement to 10
00014866 1038 F604                  		move.b	($FFFFF604).w,d0
0001486A 0200 0070                  		andi.b	#$70,d0	; is A, B or C pressed?
0001486E 6700 0000                  		beq.w	@dontspeedup	; if not, branch
00014872 123C 0064                  		move.b	#100,d1	; increase score decrement to 100
00014876                            		
00014876                            @dontspeedup:
00014876 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0001487C 7000                       		moveq	#0,d0
0001487E 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
00014882 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
00014884 B278 F7D2                  		cmp.w	(v_timebonus).w,d1	; compare time bonus to score decrement
00014888 6D00                       		blt.s	@skip	; if it's greater or equal, branch
0001488A 3238 F7D2                  		move.w	(v_timebonus).w,d1	; else, set the decrement to the remaining bonus
0001488E                            @skip:
0001488E D041                       		add.w	d1,d0		; add decrement to score
00014890 9378 F7D2                  		sub.w	d1,(v_timebonus).w ; subtract decrement from time bonus
00014894                            
00014894                            Obj3A_RingBonus:
00014894 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
00014898 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0001489A B278 F7D4                  		cmp.w	(v_ringbonus).w,d1	; compare ring bonus to score decrement
0001489E 6D00                       		blt.s	@skip2	; if it's greater or equal, branch
000148A0 3238 F7D4                  		move.w	(v_ringbonus).w,d1	; else, set the decrement to the remaining bonus
000148A4                            @skip2:
000148A4 D041                       		add.w	d1,d0		; add decrement to score
000148A6 9378 F7D4                  		sub.w	d1,(v_ringbonus).w ; subtract decrement from ring bonus
000148AA                            
000148AA                            Obj3A_ChkBonus:
000148AA 4A40                       		tst.w	d0		; is there any bonus?
000148AC 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
000148AE 303C 00B0                  		move.w	#$B0,d0
000148B2 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "ker-ching" sound
000148B8 5428 0024                  		addq.b	#2,routine(a0)
000148BC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
000148C2 6600                       		bne.s	Obj3A_SetDelay
000148C4 5828 0024                  		addq.b	#4,routine(a0)
000148C8                            
000148C8                            Obj3A_SetDelay:
000148C8 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
000148CE                            
000148CE                            locret_C692:
000148CE 4E75                       		rts	
000148D0                            ; ===========================================================================
000148D0                            
000148D0                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
000148D0 4EB9 0000 0000             		jsr	AddPoints
000148D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000148DA 0200 0003                  		andi.b	#3,d0
000148DE 66EE                       		bne.s	locret_C692
000148E0 303C 005B                  		move.w	#$5B,d0
000148E4 4EF9 0000 3212             		jmp	(PlaySound).l ;	play "blip" sound
000148EA                            ; ===========================================================================
000148EA                            
000148EA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
000148EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000148EE 0240 0007                  		andi.w	#7,d0
000148F2 E748                       		lsl.w	#3,d0
000148F4 1238 FE11                  		move.b	($FFFFFE11).w,d1
000148F8 0241 0003                  		andi.w	#3,d1
000148FC D241                       		add.w	d1,d1
000148FE D041                       		add.w	d1,d0
00014900                            ;		cmpi.b	#$01, ($FFFFFF70).w	; is the player Metal Sonic?
00014900                            ;		beq.s	MetalLevelOrder		; if yes load level from Metal Sonic's level order array
00014900 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
00014904 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00014908 4A40                       		tst.w	d0
0001490A 6600                       		bne.s	Obj3A_ChkSS
0001490C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
00014912 4EB9 0000 0000             		jsr Save_Progress	; Save data to SRAM
00014918 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
0001491E 6000                       		bra.s	Obj3A_Display2
00014920 4E75                       		rts
00014922                            
00014922                            ; ===========================================================================
00014922                            
00014922                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
00014922 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00014928 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001492C 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
00014930 6700                       		beq.s	loc_C6EA	; if not, branch
00014932 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
00014938 6000                       		bra.s	Obj3A_Display2
0001493A                            ; ===========================================================================
0001493A                            
0001493A                            loc_C6EA:				; XREF: Obj3A_ChkSS
0001493A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014940                            
00014940                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
00014940 6000 0000                  		bra.w	DisplaySprite
00014944                            ; ===========================================================================
00014944                            ; ---------------------------------------------------------------------------
00014944                            ; Level	order array
00014944                            ; ---------------------------------------------------------------------------
00014944 0001 0002 0400 0000        LevelOrder:	dc.w $0001, $0002, $0400, $0000	; GHZ 1-4
0001494C 0101 0102 0500 0502        		dc.w $0101, $0102, $0500, $0502	;  LZ 1-4 (SBZ 3 is act 4)
00014954 0201 0202 0400 0000        		dc.w $0201, $0202, $0400, $0000	;  MZ 1-4
0001495C 0301 0302 0500 0000        		dc.w $0301, $0302, $0500, $0000	; SLZ 1-4
00014964 0401 0402 0100 0000        		dc.w $0401, $0402, $0100, $0000	; SYZ 1-4
0001496C 0501 0103 0000 0000        		dc.w $0501, $0103, $0000, $0000	; SBZ 1-4 (FZ is act 3)
00014974                            		even
00014974                            ; ---------------------------------------------------------------------------
00014974                            ; Level	order array for Metal
00014974                            ; ---------------------------------------------------------------------------
00014974                            ;LevelOrderMetal:	incbin	misc\lvl_ordmetal.bin
00014974                            ;		even
00014974                            ; ===========================================================================
00014974                            
00014974                            ; ---------------------------------------------------------------------------
00014974                            ; Subroutine to Save to SRAM the information needed to Load Auto Save
00014974                            ; ---------------------------------------------------------------------------
00014974                            		include	"_inc\Save_to_SRAM.asm"
00014974                            ; d4 = 0 - save all
00014974                            ; d4 = 1 - save all with a predetermined level 
00014974                            ; d4 = 2 - only save the Time Attack, if was time attack flag set
00014974                            ; d5 = number of the predetermined level 
00014974                            ; ===========================================================================
00014974                            ; ---------------------------------------------------------------------------
00014974                            ; Subroutine to Save to SRAM the information needed to Load Auto Save and Time Attack
00014974                            ; ---------------------------------------------------------------------------
00014974                            
00014974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014974                            
00014974                            
00014974                            Save_Progress:
00014974 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0001497C 0C39 0063 0020 0001        		cmpi.b	#$63,($200001).l				; number of lives in sram is more than 99?
00014984 6E00 0000                  		bgt.w	Livesfix		; if yes, branch
00014988 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00014990 6D00 0000                  		blt.w	Livesfix2		; if yes, branch
00014994 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0001499A 6700 0000                  		beq.w UnlockLevels
0001499E 13F8 FE12 0020 0001        		move.b ($FFFFFE12).w,($200001).l
000149A6 13F9 0020 0001 0020 011F   		move.b ($200001).l,($20011F).l
000149B0 13F8 FE56 0020 012D        		move.b	($FFFFFE56).w,($20012D).l ; save emeralds
000149B8 13F8 FE57 0020 0121        		move.b	($FFFFFE57).w,($200121).l ; save emeralds
000149C0 13F8 FE58 0020 0123        		move.b	($FFFFFE58).w,($200123).l ; save emeralds
000149C8 13F8 FE59 0020 0125        		move.b	($FFFFFE59).w,($200125).l ; save emeralds
000149D0 13F8 FE5A 0020 0127        		move.b	($FFFFFE5A).w,($200127).l ; save emeralds
000149D8 13F8 FE5B 0020 0129        		move.b	($FFFFFE5B).w,($200129).l ; save emeralds
000149E0 13F8 FE5C 0020 012B        		move.b	($FFFFFE5C).w,($20012B).l ; save emeralds
000149E8 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000149F0 6000                       		bra.s	Save_to_SRAM_rts
000149F2                            Livesfix:
000149F2 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000149FA 13FC 0063 0020 0001        		move.b	#$63,($200001).l ; set lives in sram to 99
00014A02 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
00014A0C 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00014A14 6000 0000                  		bra.w	Save_to_SRAM_rts
00014A18                            Livesfix2:
00014A18 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00014A20 13FC 0003 0020 0001        		move.b	#3,($200001).l ; set lives in sram to 99
00014A28 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
00014A32 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00014A3A 6000                       		bra.s	Save_to_SRAM_rts
00014A3C                            UnlockLevels:
00014A3C 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00014A44 13FC 0001 0020 002D        		move.b 	#$01,($20002D).l			; add 1 to number of act in sram
00014A4C 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00014A54                            ;		bra.s	Save_to_SRAM_rts
00014A54                            
00014A54                            Save_to_SRAM_rts:
00014A54 4E75                       		rts
00014A56                            ; End of function Save_to_SRAM
00014A56                            ; End of function Save_to_SRAM
00014A56                            		include	"_inc\Time_attackSave.asm"
00014A56                            ; ---------------------------------------------------------------------------
00014A56                            ; Subroutine to save time attack records
00014A56                            ; ---------------------------------------------------------------------------
00014A56                            
00014A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A56                            
00014A56                            
00014A56                            Timeattack_save:
00014A56 0C39 0001 FFFF FFFE        		cmpi.b	#1,($FFFFFFFE).l	; is original mode ?
00014A5E 6700 0000                  		beq.w	time_rts			; if yes, branch
00014A62                            
00014A62 2038 FE22                  		move.l	($FFFFFE22).w,d0	; set time to d0
00014A66 3238 FE20                  		move.w	($FFFFFE20).w,d1	; set rings to d1
00014A6A 2839 FFFF FE26             		move.l	($FFFFFE26).l,d4	; set score to d4
00014A70 3A38 FF96                  		move.w	($FFFFFF96).w,d5	; set monitors broken to d5
00014A74 3C38 FF98                  		move.w	($FFFFFF98).w,d6	; set rings collected to d6
00014A78                            
00014A78 4DF9 0020 0040             		lea	($200040).l,a6			; begin of the Time attack SRAM Slot
00014A7E                            
00014A7E 7400                       		moveq	#0,d2					
00014A80 3438 FE10                  		move.w	($FFFFFE10).w,d2	; load level number
00014A84                            									; ((Act*2^6)"+Level*$100")/2^2
00014A84 ED0A                       		lsl.b	#6,d2				; Act*2^6
00014A86 E44A                       		lsr.w	#2,d2				; /2^2
00014A88 4DF6 2000                  		lea	(a6,d2.w),a6			; go to Level Time attack Slot
00014A8C                            
00014A8C 4A38 FF89                  		tst.b	($FFFFFF89).w		; "Play with Super" is turned?
00014A90 6700                       		beq.s	time_tailstest		; if not, branch
00014A92 4DEE 0170                  		lea	$170(a6),a6				; go to Super Time attack Slot
00014A96                            
00014A96                            time_tailstest:
00014A96 4A38 FF8B                  		tst.b	($FFFFFF8B).w		; is Tails?
00014A9A 6700                       		beq.s	time_test			; if not, branch
00014A9C 4DEE 02E0                  		lea	$2E0(a6),a6				; go to Tails Time attack Slot
00014AA0                            
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            time_test:
00014AA0 4A2E 0006                  		tst.b	6(a6)			; did you play the level?
00014AA4 6700                       		beq.s	time_save_all	; if not, save all
00014AA6                            
00014AA6                            ;time_save_time:
00014AA6 B096                       		cmp.l	(a6),d0			; is time, higher than the recorded time?
00014AA8 6C00                       		bge.s	time_save_ring	; if yes, don't save
00014AAA 2C80                       		move.l	d0,(a6)			; save time
00014AAC                            
00014AAC                            time_save_ring:
00014AAC B26E 0004                  		cmp.w	4(a6),d1		; is rings, lower than the recorded rings?
00014AB0 6F00                       		ble.s	time_save_score	; if yes, don't save
00014AB2 3D41 0004                  		move.w	d1,4(a6)		; save rings
00014AB6                            
00014AB6                            time_save_score:
00014AB6 B8AE 0007                  		cmp.l	7(a6),d4			; is score, lower than the recorded score?
00014ABA 6F00                       		ble.s	time_save_monitors	; if yes, don't save
00014ABC 2D44 0007                  		move.l	d4,7(a6)			; save score
00014AC0                            
00014AC0                            time_save_monitors:
00014AC0 BA6E 000B                  		cmp.w	11(a6),d5				; is monitors broken, lower than the recorded monitors broken?
00014AC4 6F00                       		ble.s	time_save_ringcollected	; if yes, don't save
00014AC6 3D45 000B                  		move.w	d5,11(a6)				; save monitors broken
00014ACA                            
00014ACA                            time_save_ringcollected:
00014ACA BC6E 000D                  		cmp.w	13(a6),d6		; is rings collected, lower than the recorded rings collected?
00014ACE 6F00                       		ble.s	time_rts		; if yes, don't save
00014AD0 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
00014AD4 4E75                       		rts
00014AD6                            
00014AD6                            time_save_all:
00014AD6 2C80                       		move.l	d0,(a6)			; save time
00014AD8 3D41 0004                  		move.w	d1,4(a6)		; save rings
00014ADC 1D7C 0001 0006             		move.b	#1,6(a6)		; save if you played the level
00014AE2 2D44 0007                  		move.l	d4,7(a6)		; save score
00014AE6 3D45 000B                  		move.w	d5,11(a6)		; save monitors broken
00014AEA 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
00014AEE                            
00014AEE                            time_rts:
00014AEE 4E75                       		rts
00014AF0                            ; End of function Timeattack_save
00014AF0                            ; End of function Timeattack_save
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
00014AF0 7220                       		moveq	#$20,d1		; set horizontal speed
00014AF2 3028 0032                  		move.w	$32(a0),d0
00014AF6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
00014AFA 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
00014AFC 6C00                       		bge.s	Obj3A_Move2
00014AFE 4441                       		neg.w	d1
00014B00                            
00014B00                            Obj3A_Move2:
00014B00 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014B04 3028 0008                  		move.w	8(a0),d0
00014B08 6B00                       		bmi.s	locret_C748
00014B0A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014B0E 6400                       		bcc.s	locret_C748	; if yes, branch
00014B10 6000 0000                  		bra.w	DisplaySprite
00014B14                            ; ===========================================================================
00014B14                            
00014B14                            locret_C748:
00014B14 4E75                       		rts	
00014B16                            ; ===========================================================================
00014B16                            
00014B16                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
00014B16 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
00014B1C 6600 0000                  		bne.w	DeleteObject
00014B20 5428 0024                  		addq.b	#2,routine(a0)
00014B24 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
00014B28 303C 008D                  		move.w	#$8D,d0
00014B2C 4EF9 0000 3212             		jmp	(PlaySound).l	; play FZ music
00014B32                            ; ===========================================================================
00014B32                            
00014B32                            loc_C766:				; XREF: Obj3A_Index
00014B32 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00014B36 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
00014B3C 6700 0000                  		beq.w	DeleteObject
00014B40 4E75                       		rts	
00014B42                            ; ===========================================================================
00014B42 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
00014B48 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
00014B4A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
00014B50 0201                       		dc.b 2,	1
00014B52 040C 014C 00D6             		dc.w $40C, $14C, $D6
00014B58 0206                       		dc.b 2,	6
00014B5A 0520 0120 00EC             		dc.w $520, $120, $EC
00014B60 0202                       		dc.b 2,	2
00014B62 0540 0120 00FC             		dc.w $540, $120, $FC
00014B68 0203                       		dc.b 2,	3
00014B6A 0560 0120 010C             		dc.w $560, $120, $10C
00014B70 0204                       		dc.b 2,	4
00014B72 020C 014C 00CC             		dc.w $20C, $14C, $CC
00014B78 0205                       		dc.b 2,	5
00014B7A                            ; ===========================================================================
00014B7A                            ; ---------------------------------------------------------------------------
00014B7A                            ; Object 7E - special stage results screen
00014B7A                            ; ---------------------------------------------------------------------------
00014B7A                            
00014B7A                            Obj7E:					; XREF: Obj_Index
00014B7A 7000                       		moveq	#0,d0
00014B7C 1028 0024                  		move.b	routine(a0),d0
00014B80 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
00014B84 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
00014B88                            ; ===========================================================================
00014B88 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
00014B8A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
00014B8C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014B8E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
00014B90 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014B92 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014B94 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014B96 0000                       		dc.w Obj7E_Continue-Obj7E_Index
00014B98 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014B9A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014B9C 0000                       		dc.w loc_C91A-Obj7E_Index
00014B9E                            ; ===========================================================================
00014B9E                            
00014B9E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
00014B9E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014BA2 6700                       		beq.s	Obj7E_Main	; if yes, branch
00014BA4 4E75                       		rts	
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            Obj7E_Main:
00014BA6 2248                       		movea.l	a0,a1
00014BA8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
00014BAE 7203                       		moveq	#3,d1
00014BB0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
00014BB6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
00014BB8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
00014BBA                            
00014BBA                            Obj7E_Loop:
00014BBA 12BC 007E                  		move.b	#$7E,0(a1)
00014BBE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
00014BC2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
00014BC6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
00014BCA 135A 0024                  		move.b	(a2)+,routine(a1)
00014BCE 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00014BD2 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
00014BDA 337C 8580 0002             		move.w	#$8580,2(a1)
00014BE0 137C 0000 0001             		move.b	#0,1(a1)
00014BE6 43E9 0040                  		lea	object_size(a1),a1
00014BEA 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
00014BEE                            
00014BEE 7007                       		moveq	#7,d0
00014BF0 1238 FE57                  		move.b	($FFFFFE57).w,d1
00014BF4 6700                       		beq.s	loc_C842
00014BF6 7000                       		moveq	#0,d0
00014BF8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
00014BFC 6600                       		bne.s	loc_C842	; if not, branch
00014BFE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
00014C00 317C 0018 0008             		move.w	#$18,8(a0)
00014C06 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
00014C0C                            
00014C0C                            loc_C842:
00014C0C 1140 001A                  		move.b	d0,mapping_frame(a0)
00014C10                            
00014C10                            Obj7E_ChkPos:				; XREF: Obj7E_Index
00014C10 7210                       		moveq	#$10,d1		; set horizontal speed
00014C12 3028 0030                  		move.w	$30(a0),d0
00014C16 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
00014C1A 6700                       		beq.s	loc_C86C	; if yes, branch
00014C1C 6C00                       		bge.s	Obj7E_Move
00014C1E 4441                       		neg.w	d1
00014C20                            
00014C20                            Obj7E_Move:
00014C20 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014C24                            
00014C24                            loc_C85A:				; XREF: loc_C86C
00014C24 3028 0008                  		move.w	8(a0),d0
00014C28 6B00                       		bmi.s	locret_C86A
00014C2A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014C2E 6400                       		bcc.s	locret_C86A	; if yes, branch
00014C30 6000 0000                  		bra.w	DisplaySprite
00014C34                            ; ===========================================================================
00014C34                            
00014C34                            locret_C86A:
00014C34 4E75                       		rts	
00014C36                            ; ===========================================================================
00014C36                            
00014C36                            loc_C86C:				; XREF: Obj7E_ChkPos
00014C36 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
00014C3C 66E6                       		bne.s	loc_C85A
00014C3E 5428 0024                  		addq.b	#2,routine(a0)
00014C42 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014C48 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
00014C4E                            
00014C4E                            Obj7E_Wait:				; XREF: Obj7E_Index
00014C4E 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00014C52 6600                       		bne.s	Obj7E_Display
00014C54 5428 0024                  		addq.b	#2,routine(a0)
00014C58                            
00014C58                            Obj7E_Display:
00014C58 6000 0000                  		bra.w	DisplaySprite
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
00014C5C 4EB9 0000 0000             		jsr	DisplaySprite
00014C62 11FC 0001 F7D6             		move.b	#1,(Update_Bonus_score).w ; set ring bonus update flag
00014C68 4A78 F7D4                  		tst.w	(Bonus_Countdown_2).w	; is ring bonus	= zero?
00014C6C 6700                       		beq.s	loc_C8C4	; if yes, branch
00014C6E 0478 000A F7D4             		subi.w	#10,(Bonus_Countdown_2).w ; subtract 10	from ring bonus
00014C74 700A                       		moveq	#10,d0		; add 10 to score
00014C76 4EB9 0000 0000             		jsr	AddPoints
00014C7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014C80 0200 0003                  		andi.b	#3,d0
00014C84 6600                       		bne.s	locret_C8EA
00014C86 303C 005B                  		move.w	#$5B,d0
00014C8A 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play "blip" sound
00014C90                            ; ===========================================================================
00014C90                            
00014C90                            loc_C8C4:				; XREF: Obj7E_RingBonus
00014C90 303C 00B0                  		move.w	#$B0,d0
00014C94 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
00014C9A 5428 0024                  		addq.b	#2,routine(a0)
00014C9E 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014CA4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00014CAA 6500                       		bcs.s	locret_C8EA	; if not, branch
00014CAC 317C 003C 001E             		move.w	#60,anim_frame_duration(a0)	; set time delay to 1 second
00014CB2 5828 0024                  		addq.b	#4,routine(a0)	; goto "Obj7E_Continue"	routine
00014CB6                            
00014CB6                            locret_C8EA:
00014CB6 4E75                       		rts	
00014CB8                            ; ===========================================================================
00014CB8                            
00014CB8                            Obj7E_Exit:				; XREF: Obj7E_Index
00014CB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014CBE 6000 0000                  		bra.w	DisplaySprite
00014CC2                            ; ===========================================================================
00014CC2                            
00014CC2                            Obj7E_Continue:				; XREF: Obj7E_Index
00014CC2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
00014CC8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
00014CCE 303C 00BF                  		move.w	#$BF,d0
00014CD2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play continues music
00014CD8 5428 0024                  		addq.b	#2,routine(a0)
00014CDC 317C 0168 001E             		move.w	#360,anim_frame_duration(a0)	; set time delay to 6 seconds
00014CE2 6000 0000                  		bra.w	DisplaySprite
00014CE6                            ; ===========================================================================
00014CE6                            
00014CE6                            loc_C91A:				; XREF: Obj7E_Index
00014CE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014CEA 0200 000F                  		andi.b	#$F,d0
00014CEE 6600                       		bne.s	Obj7E_Display2
00014CF0 0868 0000 001A             		bchg	#0,mapping_frame(a0)
00014CF6                            
00014CF6                            Obj7E_Display2:
00014CF6 6000 0000                  		bra.w	DisplaySprite
00014CFA                            ; ===========================================================================
00014CFA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
00014D00 0200                       		dc.b 2,	0		; rountine number, frame number
00014D02 0320 0120 0118             		dc.w $320, $120, $118
00014D08 0201                       		dc.b 2,	1
00014D0A 0360 0120 0128             		dc.w $360, $120, $128
00014D10 0202                       		dc.b 2,	2
00014D12 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
00014D18 0203                       		dc.b 2,	3
00014D1A 03A0 0120 0138             		dc.w $3A0, $120, $138
00014D20 0206                       		dc.b 2,	6
00014D22                            ; ===========================================================================
00014D22                            ; ---------------------------------------------------------------------------
00014D22                            ; Object 7F - chaos emeralds from the special stage results screen
00014D22                            ; ---------------------------------------------------------------------------
00014D22                            
00014D22                            Obj7F:					; XREF: Obj_Index
00014D22 7000                       		moveq	#0,d0
00014D24 1028 0024                  		move.b	routine(a0),d0
00014D28 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
00014D2C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
00014D30                            ; ===========================================================================
00014D30 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
00014D32 0000                       		dc.w Obj7F_Flash-Obj7F_Index
00014D34                            
00014D34                            ; ---------------------------------------------------------------------------
00014D34                            ; X-axis positions for chaos emeralds
00014D34                            ; ---------------------------------------------------------------------------
00014D34 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
00014D40                            ; ===========================================================================
00014D40                            
00014D40                            Obj7F_Main:				; XREF: Obj7F_Index
00014D40 2248                       		movea.l	a0,a1
00014D42 45F9 0001 4D34             		lea	(Obj7F_PosData).l,a2
00014D48 7400                       		moveq	#0,d2
00014D4A 7200                       		moveq	#0,d1
00014D4C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
00014D50 5301                       		subq.b	#1,d1		; subtract 1 from d1
00014D52 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
00014D56                            
00014D56                            Obj7F_Loop:
00014D56 12BC 007F                  		move.b	#$7F,0(a1)
00014D5A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
00014D5E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
00014D64 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00014D68 1633 2000                  		move.b	(a3,d2.w),d3
00014D6C 1343 001A                  		move.b	d3,mapping_frame(a1)
00014D70 1343 001C                  		move.b	d3,anim(a1)
00014D74 5202                       		addq.b	#1,d2
00014D76 5429 0024                  		addq.b	#2,routine(a1)
00014D7A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
00014D82 337C 8541 0002             		move.w	#$8541,2(a1)
00014D88 137C 0000 0001             		move.b	#0,1(a1)
00014D8E 43E9 0040                  		lea	object_size(a1),a1	; next object
00014D92 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
00014D96                            
00014D96                            Obj7F_Flash:				; XREF: Obj7F_Index
00014D96 1028 001A                  		move.b	mapping_frame(a0),d0
00014D9A 117C 0006 001A             		move.b	#6,mapping_frame(a0)	; load 6th frame (blank)
00014DA0 0C00 0006                  		cmpi.b	#6,d0
00014DA4 6600                       		bne.s	Obj7F_Display
00014DA6 1168 001C 001A             		move.b	anim(a0),mapping_frame(a0)	; load visible frame
00014DAC                            
00014DAC                            Obj7F_Display:
00014DAC 6000 0000                  		bra.w	DisplaySprite
00014DB0                            ; ===========================================================================
00014DB0                            ; ---------------------------------------------------------------------------
00014DB0                            ; Sprite mappings - zone title cards
00014DB0                            ; ---------------------------------------------------------------------------
00014DB0                            Map_obj34:
00014DB0                            	include "_maps\obj34.asm"
00014DB0                            ; --------------------------------------------------------------------------------
00014DB0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014DB0                            ; --------------------------------------------------------------------------------
00014DB0                            
00014DB0                            SME_zIoYh:	
00014DB0 0000                       		dc.w byte_C9FE-SME_zIoYh
00014DB2 0000                       		dc.w byte_CA2C-SME_zIoYh	
00014DB4 0000                       		dc.w byte_CA5A-SME_zIoYh 
00014DB6 0000                       		dc.w byte_CA7A-SME_zIoYh	
00014DB8 0000                       		dc.w byte_CAA8-SME_zIoYh
00014DBA 0000                       		dc.w byte_CADC-SME_zIoYh	
00014DBC 0000                       		dc.w byte_CB10-SME_zIoYh
00014DBE 0000                       		dc.w byte_CB26-SME_zIoYh	
00014DC0 0000                       		dc.w byte_CB31-SME_zIoYh
00014DC2 0000                       		dc.w byte_CB3C-SME_zIoYh	
00014DC4 0000                       		dc.w byte_CB47-SME_zIoYh
00014DC6 0000                       		dc.w byte_CB8A-SME_zIoYh	
00014DC8 0000                       		dc.w TitleCard_ABZ-SME_zIoYh		
00014DCA 0B                         byte_C9FE:	dc.b $B	
00014DCB F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	
00014DD0 F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
00014DD5 F805 0026 C4               		dc.b $F8, 5, 0, $26, $C4	
00014DDA F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4	
00014DDF F805 003E E4               		dc.b $F8, 5, 0, $3E, $E4	
00014DE4 F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
00014DE9 F800 0056 04               		dc.b $F8, 0, 0, $56, 4	
00014DEE F805 001C 14               		dc.b $F8, 5, 0, $1C, $14	
00014DF3 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
00014DF8 F805 0026 2C               		dc.b $F8, 5, 0, $26, $2C	
00014DFD F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
00014E02 0E                         byte_CA2C:	dc.b $E	
00014E03 F805 0026 80               		dc.b $F8, 5, 0, $26, $80	
00014E08 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	
00014E0D F805 003E A0               		dc.b $F8, 5, 0, $3E, $A0	
00014E12 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	
00014E17 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	
00014E1C F805 0026 D0               		dc.b $F8, 5, 0, $26, $D0	
00014E21 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00014E26 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00014E2B F805 004A 00               		dc.b $F8, 5, 0, $4A, 0	
00014E30 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	
00014E35 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	
00014E3A F805 002E 28               		dc.b $F8, 5, 0, $2E, $28	
00014E3F F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014E44 F805 001C 48               		dc.b $F8, 5, 0, $1C, $48	
00014E49 0F                         byte_CA5A:	dc.b $F	
00014E4A F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	
00014E4F F805 004A 90               		dc.b $F8, 5, 0, $4A, $90	
00014E54 F805 0026 A0               		dc.b $F8, 5, 0, $26, $A0	
00014E59 F805 0046 B0               		dc.b $F8, 5, 0, $46, $B0	
00014E5E F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
00014E63 F805 002E D0               		dc.b $F8, 5, 0, $2E, $D0	
00014E68 F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	
00014E6D F805 0000 E8               		dc.b $F8, 5, 0, 0, $E8	
00014E72 F800 0056 F8               		dc.b $F8, 0, 0, $56, $F8	
00014E77 F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00014E7C F805 0000 18               		dc.b $F8, 5, 0, 0, $18	
00014E81 F805 003E 28               		dc.b $F8, 5, 0, $3E, $28	
00014E86 F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014E8B F805 0026 48               		dc.b $F8, 5, 0, $26, $48	
00014E90 F805 0010 58               		dc.b $F8, 5, 0, $10, $58	
00014E95 0B                         byte_CA7A:	dc.b $B	
00014E96 F805 0046 9D               		dc.b $F8, 5, 0, $46, $9D	
00014E9B F805 0046 A8               		dc.b $F8, 5, 0, $46, $A8	
00014EA0 F801 0020 C6               		dc.b $F8, 1, 0, $20, $C6	
00014EA5 F805 0042 CD               		dc.b $F8, 5, 0, $42, $CD	
00014EAA F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
00014EAF F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	
00014EB4 F805 0036 F8               		dc.b $F8, 5, 0, $36, $F8	
00014EB9 F805 0000 08               		dc.b $F8, 5, 0, 0, 8	
00014EBE F805 003A 18               		dc.b $F8, 5, 0, $3A, $18	
00014EC3 F805 0022 28               		dc.b $F8, 5, 0, $22, $28	
00014EC8 F805 001C B8               		dc.b $F8, 5, 0, $1C, $B8	
00014ECD 0D                         byte_CAA8:	dc.b $D	
00014ECE F805 0008 8C               		dc.b $F8, 5, 0, 8, $8C	
00014ED3 F805 0000 9C               		dc.b $F8, 5, 0, 0, $9C	
00014ED8 F805 003E AC               		dc.b $F8, 5, 0, $3E, $AC	
00014EDD F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	
00014EE2 F805 002E C4               		dc.b $F8, 5, 0, $2E, $C4	
00014EE7 F805 0032 D4               		dc.b $F8, 5, 0, $32, $D4	
00014EEC F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014EF1 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	
00014EF6 F805 0042 04               		dc.b $F8, 5, 0, $42, 4	
00014EFB F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
00014F00 F805 0010 24               		dc.b $F8, 5, 0, $10, $24	
00014F05 F805 0010 34               		dc.b $F8, 5, 0, $10, $34	
00014F0A F805 0042 44               		dc.b $F8, 5, 0, $42, $44	
00014F0F 08                         byte_CADC:	dc.b 8	
00014F10 F805 002A B4               		dc.b $F8, 5, 0, $2A, $B4	
00014F15 F805 0000 C4               		dc.b $F8, 5, 0, 0, $C4	
00014F1A F805 000C D4               		dc.b $F8, 5, 0, $C, $D4	
00014F1F F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014F24 F805 0018 F4               		dc.b $F8, 5, 0, $18, $F4	
00014F29 F805 0010 04               		dc.b $F8, 5, 0, $10, 4	
00014F2E F805 0000 14               		dc.b $F8, 5, 0, 0, $14	
00014F33 F805 003A 24               		dc.b $F8, 5, 0, $3A, $24	
00014F38 04                         byte_CB10:	dc.b 4	
00014F39 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	
00014F3E F805 0032 F0               		dc.b $F8, 5, 0, $32, $F0	
00014F43 F805 002E 00               		dc.b $F8, 5, 0, $2E, 0	
00014F48 F805 0010 10               		dc.b $F8, 5, 0, $10, $10	
00014F4D 02                         byte_CB26:	dc.b 2	
00014F4E 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014F53 F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
00014F58 02                         byte_CB31:	dc.b 2	
00014F59 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014F5E F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
00014F63 02                         byte_CB3C:	dc.b 2	
00014F64 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014F69 F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
00014F6E 0D                         byte_CB47:	dc.b $D	
00014F6F E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
00014F74 E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
00014F79 EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
00014F7E F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
00014F83 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
00014F88 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
00014F8D 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
00014F92 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
00014F97 EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
00014F9C F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
00014FA1 FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
00014FA6 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
00014FAB 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
00014FB0 05                         byte_CB8A:	dc.b 5	
00014FB1 F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
00014FB6 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
00014FBB F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
00014FC0 F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
00014FC5 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
00014FCA 09                         TitleCard_ABZ:	dc.b 9	
00014FCB F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0	
00014FD0 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	
00014FD5 F805 0036 D0               		dc.b $F8, 5, 0, $36, $D0	
00014FDA F805 001C E0               		dc.b $F8, 5, 0, $1C, $E0	
00014FDF F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00014FE4 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00014FE9 F805 0010 20               		dc.b $F8, 5, 0, $10, $20	
00014FEE F805 0042 30               		dc.b $F8, 5, 0, $42, $30	
00014FF3 F805 0000 40               		dc.b $F8, 5, 0, 0, $40	
00014FF8                            		even
00014FF8                            		even
00014FF8                            ; ---------------------------------------------------------------------------
00014FF8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014FF8                            ; ---------------------------------------------------------------------------
00014FF8                            Map_obj39:
00014FF8                            	include "_maps\obj39.asm"
00014FF8                            ; ---------------------------------------------------------------------------
00014FF8                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014FF8                            ; ---------------------------------------------------------------------------
00014FF8 0000                       		dc.w byte_CBAC-Map_obj39
00014FFA 0000                       		dc.w byte_CBB7-Map_obj39
00014FFC 0000                       		dc.w byte_CBC2-Map_obj39
00014FFE 0000                       		dc.w byte_CBCD-Map_obj39
00015000 02                         byte_CBAC:	dc.b 2
00015001 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
00015006 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0001500B 02                         byte_CBB7:	dc.b 2
0001500C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
00015011 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
00015016 02                         byte_CBC2:	dc.b 2
00015017 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0001501C F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
00015021 02                         byte_CBCD:	dc.b 2
00015022 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
00015027 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0001502C                            		even
0001502C                            		even
0001502C                            
0001502C                            ; ---------------------------------------------------------------------------
0001502C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0001502C                            ; ---------------------------------------------------------------------------
0001502C                            ;Map_obj3A_Character:
0001502C                            ;		move.b	($FF).w,d0	; set Character to d0
0001502C                            ;		lsl.w	#2,d0
0001502C                            ;		move.l	Map_obj3A_Characters(pc,d0.w),4(a1)	; load the Character map
0001502C                            ;		tst.b	($FFFFFFF8)			; check if the machine is US or Japanese
0001502C                            ;		bpl.s	Map_obj3A_Japanese	; if is Japanese, branch
0001502C                            ;		rts
0001502C                            
0001502C                            ;Map_obj3A_Japanese:
0001502C                            ;		move.l	Map_obj3A_Characters_Miles(pc,d0.w),4(a1)	; load the Character map
0001502C                            ;		rts
0001502C                            		
0001502C                            ;Map_obj3A_Characters:
0001502C                            ;		dc.l	Map_obj3A		; Sonic
0001502C                            		;dc.l	Map_obj3A_Tails	; Tails
0001502C                            
0001502C                            ;Map_obj3A_Characters_Miles
0001502C                            ;		dc.l	Map_obj3A		; Sonic
0001502C                            		;dc.l	Map_obj3A_Miles	; Miles
0001502C                            ; End of function Map_obj3A_Character
0001502C                            
0001502C                            ; ---------------------------------------------------------------------------
0001502C                            ; Sprite mappings - "SONIC HAS PASSED" title card
0001502C                            ; ---------------------------------------------------------------------------
0001502C 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0001502E 0000                       		dc.w byte_CC13-Map_obj3A
00015030 0000                       		dc.w byte_CC32-Map_obj3A
00015032 0000                       		dc.w byte_CC51-Map_obj3A
00015034 0000                       		dc.w byte_CC75-Map_obj3A
00015036 FF42                       		dc.w byte_CB47-Map_obj3A
00015038 FF21                       		dc.w byte_CB26-Map_obj3A
0001503A FF2C                       		dc.w byte_CB31-Map_obj3A
0001503C FF37                       		dc.w byte_CB3C-Map_obj3A
0001503E 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0001503F F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
00015044 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
00015049 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0001504E F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
00015053 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
00015058 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0001505D F805 0000 20               		dc.b $F8, 5, 0,	0, $20
00015062 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
00015067 06                         byte_CC13:	dc.b 6			; PASSED
00015068 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0001506D F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00015072 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
00015077 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0001507C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00015081 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
00015086 06                         byte_CC32:	dc.b 6			; SCORE
00015087 F80D 214A B0               		dc.b $F8, $D, $21, $4A, $B0
0001508C F801 2162 D0               		dc.b $F8, 1, $21,	$62, $D0
00015091 F809 2164 18               		dc.b $F8, 9, $21,	$64, $18
00015096 F80D 216A 30               		dc.b $F8, $D, $21, $6A, $30
0001509B F704 206E CD               		dc.b $F7, 4, $20,	$6E, $CD
000150A0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
000150A5 07                         byte_CC51:	dc.b 7			; TIME BONUS
000150A6 F80D 2158 B0               		dc.b $F8, $D, $21, $5A-2, $B0
000150AB F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
000150B0 F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
000150B5 F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
000150BA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
000150BF F80D 1FF0 28               		dc.b $F8, $D, $1F, $F0,	$28
000150C4 F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
000150C9 07                         byte_CC75:	dc.b 7			; RING BONUS
000150CA F80D 2150 B0               		dc.b $F8, $D, $21, $52-2, $B0
000150CF F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
000150D4 F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
000150D9 F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
000150DE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
000150E3 F80D 1FF8 28               		dc.b $F8, $D, $1F, $F8,	$28
000150E8 F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
000150EE 00                         		even
000150EE                            ; ---------------------------------------------------------------------------
000150EE                            ; Sprite mappings - special stage results screen
000150EE                            ; ---------------------------------------------------------------------------
000150EE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
000150F0 0000                       		dc.w byte_CCEE-Map_obj7E
000150F2 0000                       		dc.w byte_CD0D-Map_obj7E
000150F4 FE80                       		dc.w byte_CB47-Map_obj7E
000150F6 0000                       		dc.w byte_CD31-Map_obj7E
000150F8 0000                       		dc.w byte_CD46-Map_obj7E
000150FA 0000                       		dc.w byte_CD5B-Map_obj7E
000150FC 0000                       		dc.w byte_CD6B-Map_obj7E
000150FE 0000                       		dc.w byte_CDA8-Map_obj7E
00015100 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
00015101 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
00015106 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0001510B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
00015110 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
00015115 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0001511A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0001511F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
00015124 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00015129 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0001512E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
00015133 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
00015138 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0001513D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
00015142 06                         byte_CCEE:	dc.b 6			; "SCORE"
00015143 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
00015148 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0001514D F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
00015152 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
00015157 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0001515C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
00015161 07                         byte_CD0D:	dc.b 7
00015162 F80D 0150 B0               		dc.b $F8, $D, 1, $52-2, $B0
00015167 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0001516C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
00015171 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
00015176 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0001517B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
00015180 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
00015185 04                         byte_CD31:	dc.b 4
00015186 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001518B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
00015190 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00015195 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0001519A 04                         byte_CD46:	dc.b 4
0001519B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
000151A0 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
000151A5 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
000151AA F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
000151AF 03                         byte_CD5B:	dc.b 3
000151B0 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
000151B5 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
000151BA F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
000151BF 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
000151C0 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
000151C5 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
000151CA F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
000151CF F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
000151D4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
000151D9 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
000151DE F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
000151E3 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
000151E8 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
000151ED F805 0000 34               		dc.b $F8, 5, 0,	0, $34
000151F2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
000151F7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
000151FC 0F                         byte_CDA8:	dc.b $F			; "YOU GOT THEM ALL"
000151FD F805 004A 80               		dc.b $F8, 5, 0, $4A, $80	; Y
00015202 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
00015207 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0001520C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
00015211 F805 0018 C0               		dc.b $F8, 5, 0, $18, $C0	; G
00015216 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; O
0001521B F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; T
00015220 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
00015225 F805 0042 00               		dc.b $F8, 5, 0, $42, $0	; T
0001522A F805 001C 10               		dc.b $F8, 5, 0, $1C, $10	; H
0001522F F805 0010 20               		dc.b $F8, 5, 0, $10, $20	; E
00015234 F805 002A 30               		dc.b $F8, 5, 0, $2A, $30	; M
00015239 F805 0000 50               		dc.b $F8, 5, 0, 0, $50		; A
0001523E F805 0026 60               		dc.b $F8, 5, 0, $26, $60	; L
00015243 F805 0026 70               		dc.b $F8, 5, 0, $26, $70	; L
00015248                            		even
00015248                            ; ---------------------------------------------------------------------------
00015248                            ; Sprite mappings - chaos emeralds from	the special stage results screen
00015248                            ; ---------------------------------------------------------------------------
00015248                            Map_obj7F:
00015248                            	include "_maps\obj7F.asm"
00015248                            ; ---------------------------------------------------------------------------
00015248                            ; Sprite mappings - chaos emeralds from	the special stage results screen
00015248                            ; ---------------------------------------------------------------------------
00015248 0000                       		dc.w byte_CE02-Map_obj7F
0001524A 0000                       		dc.w byte_CE08-Map_obj7F
0001524C 0000                       		dc.w byte_CE0E-Map_obj7F
0001524E 0000                       		dc.w byte_CE14-Map_obj7F
00015250 0000                       		dc.w byte_CE1A-Map_obj7F
00015252 0000                       		dc.w byte_CE20-Map_obj7F
00015254 0000                       		dc.w byte_CE26-Map_obj7F
00015256 01                         byte_CE02:	dc.b 1
00015257 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001525C 01                         byte_CE08:	dc.b 1
0001525D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015262 01                         byte_CE0E:	dc.b 1
00015263 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
00015268 01                         byte_CE14:	dc.b 1
00015269 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0001526E 01                         byte_CE1A:	dc.b 1
0001526F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
00015274 01                         byte_CE20:	dc.b 1
00015275 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0001527A 00                         byte_CE26:	dc.b 0			; Blank frame
0001527C 00                         		even
0001527C 00                         		even
0001527C                            
0001527C                            ; ===========================================================================
0001527C                            
0001527C                            ; ---------------------------------------------------------------------------
0001527C                            ; Subroutine for checking if Sonic/Tails should be hurt and hurting them if so
0001527C                            ; unlike Touch_ChkHurt, the character is at a1 instead of a0
0001527C                            ; ---------------------------------------------------------------------------
0001527C                            
0001527C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001527C                            
0001527C                            Touch_ChkHurtSpikes:
0001527C 0829 0001 002B             	btst	#1,status_secondary(a1)	; is Sonic invincible?
00015282 6600                       	bne.s	return_15AC4	; if yes, branch
00015284 4A29 0030                  	tst.b	$30(a1)	; is Sonic invulnerable?
00015288 6600                       	bne.s	return_15AC4	; if yes, branch
0001528A 0C29 0004 0024             	cmpi.b	#4,routine(a1)
00015290 6400                       	bcc.s	return_15AC4
00015292 2629 000C                  	move.l	y_pos(a1),d3
00015296 3029 0012                  	move.w	y_vel(a1),d0
0001529A 48C0                       	ext.l	d0
0001529C E180                       	asl.l	#8,d0
0001529E 9680                       	sub.l	d0,d3
000152A0 2343 000C                  	move.l	d3,y_pos(a1)
000152A4 2448                       	movea.l	a0,a2
000152A6 2049                       	movea.l	a1,a0
000152A8 4EB9 0000 0000             	jsr	(HurtSonic).l
000152AE 204A                       	movea.l	a2,a0
000152B0 4EF9 0000 0000             	jmp		return_15AC4
000152B6                            
000152B6                            Touch_ChkHurt2:
000152B6 2248                           move.l    a0,a1
000152B8 2F08                       	move.l    a0,-(sp)
000152BA 41F8 D000                  	lea    ($FFFFD000).w,a0
000152BE 4EB9 0000 0000             	jsr    Touch_ChkHurt
000152C4 205F                       	move.l    (sp)+,a0
000152C6                            
000152C6                            return_15AC4:
000152C6 4E75                       	rts
000152C8                            ; End of function Touch_ChkHurt2
000152C8                            
000152C8                            loc_157A4:
000152C8 48E7 8080                  	movem.l	d0/a0,-(sp)
000152CC 6100                       	bsr.s	LoadTitleCard0
000152CE 4CDF 0101                  	movem.l	(sp)+,d0/a0
000152D2 6000                       	bra.s	loc_157EC
000152D4                            
000152D4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000152D4                            
000152D4                            ; sub_157B0:
000152D4                            LoadTitleCard0:
000152D4                            
000152D4 23FC 7000 0002 00C0 0004   	move.l	#$70000002,(VDP_control_port).l
000152DE 41F9 0000 0000             	lea	(ArtNem_TitleCard).l,a0
000152E4 6100 0000                  	bsr.w	JmpTo2_NemDec
000152E8 49F8 A400                  	lea	($FFFFA400).w,a4
000152EC 41F9 0000 0000             	lea	(ArtNem_TitleCard2).l,a0
000152F2 6000 0000                  	bra.w	JmpTo_NemDecToRAM
000152F6                            ; ===========================================================================
000152F6                            ; loc_157D2:
000152F6                            LoadTitleCard:
000152F6 61DC                       	bsr.s	LoadTitleCard0
000152F8 7000                       	moveq	#0,d0
000152FA 1038 FE10                  	move.b	(Current_Zone).w,d0
000152FE 103B 0000                  	move.b	byte_15820(pc,d0.w),d0
00015302 41FA 0000                  	lea	word_15832(pc),a0
00015306 41F0 0000                  	lea	(a0,d0.w),a0
0001530A 203C 7BC0 0002             	move.l	#$7BC00002,d0
00015310                            
00015310                            loc_157EC:
00015310 46FC 2700                  	move	#$2700,sr
00015314 43F8 A400                  	lea	($FFFFA400).w,a1
00015318 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
0001531E 2D40 0004                  	move.l	d0,4(a6)
00015322                            
00015322                            loc_157FE:
00015322 7000                       	moveq	#0,d0
00015324 1018                       	move.b	(a0)+,d0
00015326 6B00                       	bmi.s	loc_1581A
00015328 EB48                       	lsl.w	#5,d0
0001532A 45F1 0000                  	lea	(a1,d0.w),a2
0001532E 7200                       	moveq	#0,d1
00015330 1218                       	move.b	(a0)+,d1
00015332 E749                       	lsl.w	#3,d1
00015334 5341                       	subq.w	#1,d1
00015336                            
00015336                            loc_15812:
00015336 2C9A                       	move.l	(a2)+,(a6)
00015338 51C9 FFFC                  	dbf	d1,loc_15812
0001533C 60E4                       	bra.s	loc_157FE
0001533E                            ; ===========================================================================
0001533E                            
0001533E                            loc_1581A:
0001533E 46FC 2300                  	move	#$2300,sr
00015342 4E75                       	rts
00015344                            ; ===========================================================================
00015344                            ; unknown
00015344                            byte_15820:
00015344 0000 0000 1010 9820 2C00+  	dc.b   0,  0,  0,  0,$10,$10,$98,$20,$2C,  0,$3C,$46,$58,$68,$A8,$7A
00015354 8A00                       	dc.b $8A,  0	; 16
00015356                            ; unknown
00015356                            word_15832:
00015356 2A06 3804 0004 2604 0C04+  	dc.w $2A06,$3804,    4,$2604, $C04,$1804,$1C02,$FFFF
00015366 2A06 4004 3804 3004 2604+  	dc.w $2A06,$4004,$3804,$3004,$2604,$1C02,$3C04,$FFFF; 8
00015376 1804 1C02 2604 4004 3004+  	dc.w $1804,$1C02,$2604,$4004,$3004,$FFFF,$1804,$1C02; 16
00015386 0C04 3004 0004 2604 0804+  	dc.w  $C04,$3004,    4,$2604, $804,$FFFF,$1C02,$2604; 24
00015396 0804 0004 FFFF 2A06 5604+  	dc.w  $804,    4,$FFFF,$2A06,$5604,$3C04,$4004,$1C02; 32
000153A6 0804 0004 4804 FFFF 0804+  	dc.w  $804,    4,$4804,$FFFF, $804,    4,$3C04,$1C02; 40
000153B6 1404 1804 4004 FFFF 0804+  	dc.w $1404,$1804,$4004,$FFFF, $804,$1804,$2A06,$1C02; 48
000153C6 0004 2604 3004 4004 FFFF+  	dc.w	 4,$2604,$3004,$4004,$FFFF,    4,$3404,$4404; 56
000153D6 4004 1C02 0804 3804 FFFF+  	dc.w $4004,$1C02, $804,$3804,$FFFF,$3C04,$2204,$5604; 64
000153E6 0804 1804 0004 FFFF 4C06+  	dc.w  $804,$1804,    4,$FFFF,$4C06,$1C02,$1404,$1004; 72
000153F6 3804 4004 3C04 FFFF 0C04+  	dc.w $3804,$4004,$3C04,$FFFF, $C04,    4,$4004,$1804; 80
00015406 1404 FFFF                  	dc.w $1404,$FFFF	; 88
0001540A                            ; ===========================================================================
0001540A 4E71                       	nop
0001540C                            
0001540C                            JmpTo2_NemDec 
0001540C 4EF9 0000 35B2             	jmp	(NemDec).l
00015412                            ; ===========================================================================
00015412                            
00015412                            JmpTo_NemDecToRAM
00015412 4EF9 0000 35A8             	jmp	(NemDec_RAM).l
00015418                            ; End of function LoadTitleCard0
00015418                            
00015418                            ; ===========================================================================
00015418                            ; ----------------------------------------------------------------------------
00015418                            ; Object 36 - Spikes
00015418                            ; ----------------------------------------------------------------------------
00015418                            ; OST Variables:
00015418 =00000030                  spikes_base_x_pos	= objoff_30	; original x-position
00015418 =00000032                  spikes_base_y_pos	= objoff_32	; original y-position
00015418 =00000034                  spikes_retract_offset	= objoff_34	; actual position relative to base position
00015418 =00000036                  spikes_retract_state	= objoff_36	; 0 = positive offset, 1 = original position
00015418 =00000038                  spikes_retract_timer	= objoff_38	; delay, before spikes move again
00015418                            ; Sprite_15900:
00015418                            Obj36:
00015418 7000                       	moveq	#0,d0
0001541A 1028 0024                  	move.b	routine(a0),d0
0001541E 323B 0000                  	move.w	Obj36_Index(pc,d0.w),d1
00015422 4EFB 1000                  	jmp	Obj36_Index(pc,d1.w)
00015426                            ; ===========================================================================
00015426                            ; off_1590E:
00015426                            Obj36_Index:	
00015426 0000                       		dc.w Obj36_Init-Obj36_Index		; 0
00015428 0000                       		dc.w Obj36_Upright-Obj36_Index	; 2
0001542A 0000                       		dc.w Obj36_Sideways-Obj36_Index	; 4
0001542C 0000                       		dc.w Obj36_Upsidedown-Obj36_Index	; 6
0001542E                            ; ===========================================================================
0001542E                            ; byte_15916:
0001542E                            Obj36_InitData:
0001542E                            	;    width_pixels
0001542E                            	;	 y_radius
0001542E 1010                       	dc.b $10,$10	; 0	- Upright or ceiling spikes
00015430 2010                       	dc.b $20,$10	; 2
00015432 3010                       	dc.b $30,$10	; 4
00015434 4010                       	dc.b $40,$10	; 6
00015436 1010                       	dc.b $10,$10	; 8	- Sideways spikes
00015438 1020                       	dc.b $10,$20	; 10
0001543A 1030                       	dc.b $10,$30	; 12
0001543C 1040                       	dc.b $10,$40	; 14
0001543E                            ; ===========================================================================
0001543E                            ; loc_15926:
0001543E                            Obj36_Init:
0001543E 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Upright
00015442 217C 0000 0000 0004        	move.l	#Map_obj36,mappings(a0)
0001544A 317C 051B 0002             	move.w	#$51B,art_tile(a0)
00015450 0028 0004 0001             	ori.b	#4,render_flags(a0)
00015456 317C 0200 0018             	move.w	#$200,priority(a0)
0001545C 1028 0028                  	move.b	subtype(a0),d0
00015460 0228 000F 0028             	andi.b	#$F,subtype(a0)		; lower 4 bits determine behavior, upper bits need to be removed
00015466 0240 00F0                  	andi.w	#$F0,d0
0001546A 43FA FFC2                  	lea	Obj36_InitData(pc),a1	; upper 4 bits determine size and orientation
0001546E E648                       	lsr.w	#3,d0			; use upper 4 bits * 2 as offset
00015470 D2C0                       	adda.w	d0,a1
00015472 1159 0023                  	move.b	(a1)+,width_pixels(a0)
00015476 1159 0016                  	move.b	(a1)+,y_radius(a0)
0001547A E248                       	lsr.w	#1,d0			; use upper 4 bits to determine mappings frame
0001547C 1140 001A                  	move.b	d0,mapping_frame(a0)
00015480 0C00 0004                  	cmpi.b	#4,d0			; do spikes face sideways?
00015484 6500                       	blo.s	Obj36_Init_2			; if not, branch
00015486 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Sideways
0001548A 317C 0523 0002             	move.w	#$523,art_tile(a0)
00015490                            Obj36_Init_2:
00015490 0828 0001 0022             	btst	#1,status(a0)		; are spikes upsiede-down?
00015496 6700                       	beq.s	Obj36_Init_3			; if not, branch
00015498 117C 0006 0024             	move.b	#6,routine(a0)	; => Obj36_Upsidedown
0001549E                            Obj36_Init_3:
0001549E 3168 0008 0030             	move.w	x_pos(a0),spikes_base_x_pos(a0)
000154A4 3168 000C 0032             	move.w	y_pos(a0),spikes_base_y_pos(a0)
000154AA 4E75                       	rts
000154AC                            ; ===========================================================================
000154AC                            ; loc_15996:
000154AC                            Obj36_Upright:
000154AC 6100 0000                  	bsr.w	MoveSpikes
000154B0 7200                       	moveq	#0,d1
000154B2 1228 0023                  	move.b	width_pixels(a0),d1
000154B6 0641 000B                  	addi.w	#$B,d1
000154BA 7400                       	moveq	#0,d2
000154BC 1428 0016                  	move.b	y_radius(a0),d2
000154C0 3602                       	move.w	d2,d3
000154C2 5243                       	addq.w	#1,d3
000154C4 3828 0008                  	move.w	x_pos(a0),d4
000154C8 6100 0000                  	bsr.w	SolidObject
000154CC 1C28 0022                  	move.b	status(a0),d6
000154D0 0206 0008                  	andi.b	#standing_mask,d6	; are Sonic or Tails standing on the object?
000154D4 6700                       	beq.s	Obj36_UprightEnd	; if not, branch
000154D6 1006                       	move.b	d6,d0
000154D8 0200 0008                  	andi.b	#p1_standing,d0		; is Sonic standing on the object?
000154DC 6700                       	beq.s	Obj36_Upright_2			; if not, branch
000154DE 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000154E2 6100 FD98                  	bsr.w	Touch_ChkHurtSpikes
000154E6                            Obj36_Upright_2:
000154E6                            ;	andi.b	#p2_standing,d6		; is Tails standing on the object?
000154E6                            ;	beq.s	Obj36_UprightEnd	; if not, branch
000154E6                            ;	lea	(Sidekick).w,a1 ; a1=character
000154E6                            ;	bsr.w	Touch_ChkHurtSpikes
000154E6                            
000154E6                            ; loc_159DE:
000154E6                            Obj36_UprightEnd:
000154E6 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
000154EA 6000 0000                  	bra.w	MarkObjGone2
000154EE                            ; ===========================================================================
000154EE                            ; loc_159E6:
000154EE                            Obj36_Sideways:
000154EE 3F28 0008                  	move.w	x_pos(a0),-(sp)
000154F2 6100 0000                  	bsr.w	MoveSpikes
000154F6 7200                       	moveq	#0,d1
000154F8 1228 0023                  	move.b	width_pixels(a0),d1
000154FC 0641 000B                  	addi.w	#$B,d1
00015500 7400                       	moveq	#0,d2
00015502 1428 0016                  	move.b	y_radius(a0),d2
00015506 3602                       	move.w	d2,d3
00015508 5243                       	addq.w	#1,d3
0001550A 381F                       	move.w	(sp)+,d4
0001550C 6100 0000                  	bsr.w	SolidObject
00015510 4846                       	swap	d6
00015512 0246 0001                  	andi.w	#touch_side_mask,d6	; are Sonic or Tails pushing against the side?
00015516 6700                       	beq.s	Obj36_SidewaysEnd	; if not, branch
00015518 1006                       	move.b	d6,d0
0001551A 0200 0001                  	andi.b	#p1_touch_side,d0	; is Sonic pushing against the side?
0001551E 6700                       	beq.s	Obj36_Sideways_2			; if not, branch
00015520 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00015524 6100 FD56                  	bsr.w	Touch_ChkHurtSpikes
00015528 08A8 0003 0022             	bclr	#p1_pushing_bit,status(a0)
0001552E                            Obj36_Sideways_2:
0001552E                            ;	andi.b	#p2_touch_side,d6	; is Tails pushing against the side?
0001552E                            ;	beq.s	Obj36_SidewaysEnd	; if not, branch
0001552E                            ;	lea	(Sidekick).w,a1 ; a1=character
0001552E                            ;	bsr.w	Touch_ChkHurtSpikes
0001552E                            ;	bclr	#p2_pushing_bit,status(a0)
0001552E                            
0001552E                            ; loc_15A3A:
0001552E                            Obj36_SidewaysEnd:
0001552E 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
00015532 6000 0000                  	bra.w	MarkObjGone2
00015536                            ; ===========================================================================
00015536                            ; loc_15A42:
00015536                            Obj36_Upsidedown:
00015536 6100 0000                  	bsr.w	MoveSpikes
0001553A 7200                       	moveq	#0,d1
0001553C 1228 0023                  	move.b	width_pixels(a0),d1
00015540 0641 000B                  	addi.w	#$B,d1
00015544 7400                       	moveq	#0,d2
00015546 1428 0016                  	move.b	y_radius(a0),d2
0001554A 3602                       	move.w	d2,d3
0001554C 5243                       	addq.w	#1,d3
0001554E 3828 0008                  	move.w	x_pos(a0),d4
00015552 6100 0000                  	bsr.w	SolidObject
00015556                            ;	tst.b	$25(a0)
00015556                            ;	bne.s	Obj36_UpsidedownEnd
00015556 4A44                       	tst.w	d4
00015558 6A00                       	bpl.s	Obj36_UpsidedownEnd	; if not, branch
0001555A 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001555E 6100 FD1C                  	bsr.w	Touch_ChkHurtSpikes
00015562                            Obj36_Upsidedown_2:
00015562                            ;	andi.b	#p2_touch_bottom,d6	; is Tails touching the bottom?
00015562                            ;	beq.s	Obj36_UpsidedownEnd	; if not, branch
00015562                            ;	lea	(Sidekick).w,a1 ; a1=character
00015562                            ;	bsr.w	Touch_ChkHurtSpikes
00015562                            
00015562                            ; loc_15A88:
00015562                            Obj36_UpsidedownEnd:
00015562 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
00015566 6000 0000                  	bra.w	MarkObjGone2
0001556A                            
0001556A                            
0001556A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001556A                            ; handles direction, timing and movement of moving spikes
0001556A                            
0001556A                            ; sub_15AC6:
0001556A                            MoveSpikes:
0001556A 7000                       	moveq	#0,d0
0001556C 1028 0028                  	move.b	subtype(a0),d0
00015570 D040                       	add.w	d0,d0
00015572 323B 0000                  	move.w	MoveSpikes_Behaviors(pc,d0.w),d1
00015576 4EFB 1000                  	jmp	MoveSpikes_Behaviors(pc,d1.w)
0001557A                            ; End of function MoveSpikes
0001557A                            
0001557A                            ; ===========================================================================
0001557A                            ; off_15AD6:
0001557A                            MoveSpikes_Behaviors:
0001557A 0000                       		dc.w MoveSpikes_Still-MoveSpikes_Behaviors		; 0
0001557C 0000                       		dc.w MoveSpikes_Vertical-MoveSpikes_Behaviors	; 1
0001557E 0000                       		dc.w MoveSpikes_Horizontal-MoveSpikes_Behaviors	; 2
00015580                            ; ===========================================================================
00015580                            ; return_15ADC:
00015580                            MoveSpikes_Still:
00015580 4E75                       	rts
00015582                            ; ===========================================================================
00015582                            ; loc_15ADE:
00015582                            MoveSpikes_Vertical:
00015582 6100 0000                  	bsr.w	MoveSpikes_Delay
00015586 7000                       	moveq	#0,d0
00015588 1028 0034                  	move.b	spikes_retract_offset(a0),d0
0001558C D068 0032                  	add.w	spikes_base_y_pos(a0),d0	; apply offset to y-position
00015590 3140 000C                  	move.w	d0,y_pos(a0)
00015594 4E75                       	rts
00015596                            ; ===========================================================================
00015596                            ; loc_15AF2:
00015596                            MoveSpikes_Horizontal:
00015596 6100 0000                  	bsr.w	MoveSpikes_Delay
0001559A 7000                       	moveq	#0,d0
0001559C 1028 0034                  	move.b	spikes_retract_offset(a0),d0
000155A0 D068 0030                  	add.w	spikes_base_x_pos(a0),d0	; apply offset to x-position
000155A4 3140 0008                  	move.w	d0,x_pos(a0)
000155A8 4E75                       	rts
000155AA                            
000155AA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000155AA                            
000155AA                            ; sub_15B06:
000155AA                            MoveSpikes_Delay:
000155AA 4A68 0038                  	tst.w	spikes_retract_timer(a0)	; is it time for spikes to move again?
000155AE 6700                       	beq.s	MoveSpikes_ChkDir		; if yes, branch
000155B0 5368 0038                  	subq.w	#1,spikes_retract_timer(a0)	; else, decrement timer
000155B4 6600                       	bne.s	MoveSpikes_Retract_2	; rts			; branch, if timer didn't reach 0
000155B6 4A28 0001                  	tst.b	render_flags(a0)		; are spikes on screen?
000155BA 6A00                       	bpl.s	MoveSpikes_Retract_2	; rts			; if not, branch
000155BC 303C 00B6                  	move.w	#$B6,d0		; play spike movement sound
000155C0 4EB9 0000 3212             	jsr	(PlaySound).l
000155C6 6000                       	bra.s	MoveSpikes_Retract_2	; rts
000155C8                            ; ===========================================================================
000155C8                            ; loc_15B24:
000155C8                            MoveSpikes_ChkDir:
000155C8 4A68 0036                  	tst.w	spikes_retract_state(a0)	; do spikes need to move away from initial position?
000155CC 6700                       	beq.s	MoveSpikes_Retract		; if yes, branch
000155CE 0468 0800 0034             	subi.w	#$800,spikes_retract_offset(a0)	; subtract 8 pixels from offset
000155D4 6400                       	bhs.s	MoveSpikes_Retract_2	; rts			; branch, if offset is not yet 0
000155D6 317C 0000 0034             	move.w	#0,spikes_retract_offset(a0)
000155DC 317C 0000 0036             	move.w	#0,spikes_retract_state(a0)	; switch state
000155E2 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
000155E8 6000                       	bra.s	MoveSpikes_Retract_2	; rts
000155EA                            ; ===========================================================================
000155EA                            ; loc_15B46:
000155EA                            MoveSpikes_Retract:
000155EA 0668 0800 0034             	addi.w	#$800,spikes_retract_offset(a0)		; add 8 pixels to offset
000155F0 0C68 2000 0034             	cmpi.w	#$2000,spikes_retract_offset(a0)	; is offset the width of one spike block (32 pixels)?
000155F6 6500                       	blo.s	MoveSpikes_Retract_2	; rts				; if not, branch
000155F8 317C 2000 0034             	move.w	#$2000,spikes_retract_offset(a0)
000155FE 317C 0001 0036             	move.w	#1,spikes_retract_state(a0)	; switch state
00015604 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
0001560A                            MoveSpikes_Retract_2:
0001560A 4E75                       	rts
0001560C                            ; End of function MoveSpikes_Delay
0001560C                            
0001560C                            ; ===========================================================================
0001560C                            ; -------------------------------------------------------------------------------
0001560C                            ; sprite mappings
0001560C                            ; -------------------------------------------------------------------------------
0001560C                            Map_obj36:
0001560C                            	include "_maps\spikess2.asm"
0001560C                            ; --------------------------------------------------------------------------------
0001560C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001560C                            ; --------------------------------------------------------------------------------
0001560C                            
0001560C                            SME_AVB8T:	
0001560C 0000 0000                  		dc.w SME_AVB8T_10-SME_AVB8T, SME_AVB8T_1B-SME_AVB8T	
00015610 0000 0000                  		dc.w SME_AVB8T_30-SME_AVB8T, SME_AVB8T_4F-SME_AVB8T	
00015614 0000 0000                  		dc.w SME_AVB8T_78-SME_AVB8T, SME_AVB8T_83-SME_AVB8T	
00015618 0000 0000                  		dc.w SME_AVB8T_98-SME_AVB8T, SME_AVB8T_B7-SME_AVB8T	
0001561C 02                         SME_AVB8T_10:	dc.b 2	
0001561D F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015622 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015627 04                         SME_AVB8T_1B:	dc.b 4	
00015628 F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
0001562D F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015632 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015637 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
0001563C 06                         SME_AVB8T_30:	dc.b 6	
0001563D F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
00015642 F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
00015647 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
0001564C F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015651 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
00015656 F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
0001565B 08                         SME_AVB8T_4F:	dc.b 8	
0001565C F007 0000 C0               		dc.b $F0, 7, 0, 0, $C0	
00015661 F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
00015666 F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
0001566B F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015670 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015675 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
0001567A F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
0001567F F007 0000 30               		dc.b $F0, 7, 0, 0, $30	
00015684 02                         SME_AVB8T_78:	dc.b 2	
00015685 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001568A 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
0001568F 04                         SME_AVB8T_83:	dc.b 4	
00015690 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
00015695 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001569A 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
0001569F 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
000156A4 06                         SME_AVB8T_98:	dc.b 6	
000156A5 D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
000156AA E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
000156AF F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
000156B4 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
000156B9 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
000156BE 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
000156C3 08                         SME_AVB8T_B7:	dc.b 8	
000156C4 C00D 0000 F0               		dc.b $C0, $D, 0, 0, $F0	
000156C9 D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
000156CE E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
000156D3 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
000156D8 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
000156DD 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
000156E2 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
000156E7 300D 0000 F0               		dc.b $30, $D, 0, 0, $F0	
000156EC                            		even
000156EC                            		even
000156EC                            	even
000156EC                            
000156EC                            ; ===========================================================================
000156EC                            ; ---------------------------------------------------------------------------
000156EC                            ; Object 3B - purple rock (GHZ)
000156EC                            ; ---------------------------------------------------------------------------
000156EC                            
000156EC                            Obj3B:					; XREF: Obj_Index
000156EC 7000                       		moveq	#0,d0
000156EE 1028 0024                  		move.b	routine(a0),d0
000156F2 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
000156F6 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
000156FA                            ; ===========================================================================
000156FA 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
000156FC 0000                       		dc.w Obj3B_Solid-Obj3B_Index
000156FE                            ; ===========================================================================
000156FE                            
000156FE                            Obj3B_Main:				; XREF: Obj3B_Index
000156FE 5428 0024                  		addq.b	#2,routine(a0)
00015702 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0001570A 317C 63D0 0002             		move.w	#$63D0,2(a0)
00015710 117C 0004 0001             		move.b	#4,1(a0)
00015716 117C 0013 0023             		move.b	#$13,width_pixels(a0)
0001571C 317C 0200 0018             		move.w	#$200,priority(a0)
00015722                            
00015722                            Obj3B_Solid:				; XREF: Obj3B_Index
00015722 323C 001B                  		move.w	#$1B,d1
00015726 343C 0010                  		move.w	#$10,d2
0001572A 363C 0010                  		move.w	#$10,d3
0001572E 3828 0008                  		move.w	8(a0),d4
00015732 4EB9 0000 0000             		jsr	SolidObject
00015738 4EB9 0000 0000             		jsr	DisplaySprite
0001573E 4EF9 0000 0000             		jmp		MarkObjGone3
00015744                            ; ===========================================================================
00015744                            ; ---------------------------------------------------------------------------
00015744                            ; Object 49 - waterfall	sound effect (GHZ)
00015744                            ; ---------------------------------------------------------------------------
00015744                            
00015744                            Obj49:					; XREF: Obj_Index
00015744 7000                       		moveq	#0,d0
00015746 1028 0024                  		move.b	routine(a0),d0
0001574A 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0001574E 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
00015752                            ; ===========================================================================
00015752 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
00015754 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
00015756                            ; ===========================================================================
00015756                            
00015756                            Obj49_Main:				; XREF: Obj49_Index
00015756 5428 0024                  		addq.b	#2,routine(a0)
0001575A 117C 0004 0001             		move.b	#4,1(a0)
00015760                            
00015760                            Obj49_PlaySnd:				; XREF: Obj49_Index
00015760 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00015764 0200 003F                  		andi.b	#$3F,d0
00015768 6600                       		bne.s	Obj49_ChkDel
0001576A 303C 0079                  		move.w	#$79,d0
0001576E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play waterfall sound
00015774                            
00015774                            Obj49_ChkDel:
00015774 4EF9 0000 0000             		jmp MarkObjGone3
0001577A                            ; ===========================================================================
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            ; Sprite mappings - purple rock	(GHZ)
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            Map_obj3B:
0001577A                            	include "_maps\obj3B.asm"
0001577A                            ; ---------------------------------------------------------------------------
0001577A                            ; Sprite mappings - purple rock	(GHZ)
0001577A                            ; ---------------------------------------------------------------------------
0001577A 0000                       		dc.w byte_D110-Map_obj3B
0001577C 02                         byte_D110:	dc.b 2
0001577D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00015782 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
00015788 00                         		even
00015788 00                         		even
00015788                            
00015788                            ; ===========================================================================
00015788                            ; ---------------------------------------------------------------------------
00015788                            ; Object 3C - smashable	wall (GHZ, SLZ)
00015788                            ; ---------------------------------------------------------------------------
00015788                            
00015788                            Obj3C:					; XREF: Obj_Index
00015788 7000                       		moveq	#0,d0
0001578A 1028 0024                  		move.b	routine(a0),d0
0001578E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
00015792 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
00015796 6000 0000                  		bra.w	MarkObjGone
0001579A                            ; ===========================================================================
0001579A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0001579C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0001579E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
000157A0                            ; ===========================================================================
000157A0                            
000157A0                            Obj3C_Main:				; XREF: Obj3C_Index
000157A0 5428 0024                  		addq.b	#2,$24(a0)
000157A4 217C 0000 0000 0004        		move.l	#Map_Obj3C,4(a0)
000157AC 317C 450F 0002             		move.w	#$450F,2(a0)
000157B2 117C 0004 0001             		move.b	#4,1(a0)
000157B8 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000157BE 317C 0200 0018             		move.w	#$200,priority(a0)
000157C4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000157CA 4A39 00FF F7C8             		tst.b	($FFF7C8).l
000157D0 6B00                       		bmi.s	locret_102CC
000157D2 0C39 0006 00FF D024        		cmpi.b	#6,($FFD024).l
000157DA 6400                       		bcc.s	locret_102CC
000157DC 4A79 00FF FE08             		tst.w	($FFFE08).l
000157E2 6600                       		bne.s	locret_102CC
000157E4                            Obj3C_Solid:				; XREF: Obj3C_Index
000157E4 323C 001B                  		move.w	#$1B,d1
000157E8 343C 0020                  		move.w	#$20,d2	; ' '
000157EC 43F9 FFFF D000             		lea	(MainCharacter).l,a1
000157F2 3169 0010 0030             		move.w	$10(a1),$30(a0)
000157F8                            
000157F8                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
000157F8 4A38 FE08                  		tst.b	(Debug_Placement_Mode).w
000157FC 6600                       		bne.s	locret_102CC
000157FE 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00015802 6600                       		bne.s	Obj3C_Solid2
00015804 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
0001580A 6600                       		bne.s	loc_102BE
0001580C 0829 0001 0022             		btst	#1,$22(a1)
00015812 6600                       		bne.s	loc_102BE
00015814 3029 0010                  		move.w	$10(a1),d0
00015818 6A00                       		bpl.s	Obj3C_ChkSpeed
0001581A 4440                       		neg.w	d0
0001581C                            
0001581C                            Obj3C_ChkSpeed:				; CODE XREF: ROM:000102B4j
0001581C 0C40 0480                  		cmp.w	#$480,d0
00015820 6C00                       		bge.s	Obj3C_Solid2
00015822                            
00015822                            loc_102BE:				; CODE XREF: ROM:000102A6j
00015822                            					; ROM:000102AEj
00015822 363C 0020                  		move.w	#$20,d3	; ' '
00015826 3828 0008                  		move.w	8(a0),d4
0001582A 4EB9 0000 0000             		jsr	SolidObject
00015830                            
00015830                            locret_102CC:				; CODE XREF: ROM:00010256j
00015830                            					; ROM:00010260j ...
00015830 4E75                       		rts
00015832                            ; ---------------------------------------------------------------------------
00015832                            
00015832                            Obj3C_Solid2:				; CODE XREF: ROM:0001028Ej
00015832                            					; ROM:00010296j ...
00015832 3029 0008                  		move.w	8(a1),d0
00015836 9068 0008                  		sub.w	8(a0),d0
0001583A D041                       		add.w	d1,d0
0001583C 6B00 FFF2                  		bmi.w	locret_102CC
00015840 3601                       		move.w	d1,d3
00015842 D643                       		add.w	d3,d3
00015844 B043                       		cmp.w	d3,d0
00015846 62E8                       		bhi.s	locret_102CC
00015848 1629 0016                  		move.b	$16(a1),d3
0001584C 4883                       		ext.w	d3
0001584E D443                       		add.w	d3,d2
00015850 3629 000C                  		move.w	$C(a1),d3
00015854 9668 000C                  		sub.w	$C(a0),d3
00015858 5843                       		addq.w	#4,d3
0001585A D642                       		add.w	d2,d3
0001585C 6BD2                       		bmi.s	locret_102CC
0001585E 3802                       		move.w	d2,d4
00015860 D844                       		add.w	d4,d4
00015862 B644                       		cmp.w	d4,d3
00015864 64CA                       		bcc.s	locret_102CC
00015866                            
00015866                            loc_10302:				; DATA XREF: ROM:000B9E60o
00015866 5869 0008                  		addq.w	#4,8(a1)
0001586A 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4
00015870 3028 0008                  		move.w	8(a0),d0
00015874 B069 0008                  		cmp.w	8(a1),d0
00015878 6500                       		bcs.s	Obj3C_Smash
0001587A 5169 0008                  		subq.w	#8,8(a1)
0001587E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4
00015884                            
00015884                            Obj3C_Smash:				; CODE XREF: ROM:00010314j
00015884 3369 0010 0020             		move.w	$10(a1),inertia(a1)
0001588A 08A8 0005 0022             		bclr	#5,$22(a0)
00015890 08A9 0005 0022             		bclr	#5,$22(a1)
00015896 7207                       		moveq	#7,d1
00015898 343C 0070                  		move.w	#$70,d2	; 'p'
0001589C 6100                       		bsr.s	SmashObject
0001589E                            
0001589E                            Obj3C_FragMove:				; DATA XREF: SmashObject+36o
0001589E 4EB9 0000 0000             		jsr	SpeedToPos
000158A4 0668 0070 0012             		addi.w	#$70,$12(a0) ; 'p'
000158AA 4EB9 0000 0000             		jsr	DisplaySprite
000158B0 4A28 0001                  		tst.b	1(a0)
000158B4 6A00 0000                  		bpl.w	DeleteObject
000158B8 4E75                       		rts
000158BA                            		
000158BA                            ; ---------------------------------------------------------------------------
000158BA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
000158BA                            ; ---------------------------------------------------------------------------
000158BA                            
000158BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158BA                            
000158BA                            
000158BA                            SmashObject:				; XREF: Obj3C_Smash
000158BA 7000                       		moveq	#0,d0
000158BC 1028 001A                  		move.b	$1A(a0),d0
000158C0 D040                       		add.w	d0,d0
000158C2 2668 0004                  		movea.l	4(a0),a3
000158C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
000158CA 524B                       		addq.w	#1,a3
000158CC 08E8 0005 0001             		bset	#5,1(a0)
000158D2 1810                       		move.b	0(a0),d4
000158D4 1A28 0001                  		move.b	1(a0),d5
000158D8 2248                       		movea.l	a0,a1
000158DA 6000                       		bra.s	Smash_LoadFrag
000158DC                            ; ===========================================================================
000158DC                            
000158DC                            Smash_Loop:
000158DC 6100 0000                  		bsr.w	SingleObjLoad
000158E0 6600                       		bne.s	Smash_PlaySnd
000158E2 5A4B                       		addq.w	#5,a3
000158E4                            
000158E4                            Smash_LoadFrag:				; XREF: SmashObject
000158E4 137C 0004 0024             		move.b	#4,$24(a1)
000158EA 1284                       		move.b	d4,0(a1)
000158EC 234B 0004                  		move.l	a3,4(a1)
000158F0 1345 0001                  		move.b	d5,1(a1)
000158F4 3368 0008 0008             		move.w	8(a0),8(a1)
000158FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015900 3368 0002 0002             		move.w	2(a0),2(a1)
00015906 3368 0018 0018             		move.w	priority(a0),priority(a1)
0001590C 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
00015912 335C 0010                  		move.w	(a4)+,$10(a1)
00015916 335C 0012                  		move.w	(a4)+,$12(a1)
0001591A B3C8                       		cmpa.l	a0,a1
0001591C 6400                       		bcc.s	loc_D268
0001591E 2F08                       		move.l	a0,-(sp)
00015920 2049                       		movea.l	a1,a0
00015922 6100 0000                  		bsr.w	SpeedToPos
00015926 D568 0012                  		add.w	d2,$12(a0)
0001592A 205F                       		movea.l	(sp)+,a0
0001592C 6100 0000                  		bsr.w	DisplaySprite2
00015930                            
00015930                            loc_D268:
00015930 51C9 FFAA                  		dbf	d1,Smash_Loop
00015934                            
00015934                            Smash_PlaySnd:
00015934 0C10 0051                  		cmpi.b	#$51,(a0)
00015938 6700                       		beq.s	Smash_PlaySnd2
0001593A 303C 0059                  		move.w	#$59,d0
0001593E 4EF9 0000 0000             		jmp		Smash_PlaySnd_Play
00015944                            Smash_PlaySnd2:		
00015944 303C 0072                  		move.w	#$72,d0
00015948                            Smash_PlaySnd_Play:
00015948 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
0001594E                            ; End of function SmashObject
0001594E                            
0001594E                            ; ===========================================================================
0001594E                            ; Smashed block	fragment speeds
0001594E                            ;
0001594E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
00015952 0600 FF00                  		dc.w $600, $FF00
00015956 0600 0100                  		dc.w $600, $100
0001595A 0400 0500                  		dc.w $400, $500
0001595E 0600 FA00                  		dc.w $600, $FA00
00015962 0800 FE00                  		dc.w $800, $FE00
00015966 0800 0200                  		dc.w $800, $200
0001596A 0600 0600                  		dc.w $600, $600
0001596E                            
0001596E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
00015972 F800 FE00                  		dc.w $F800, $FE00
00015976 F800 0200                  		dc.w $F800, $200
0001597A FA00 0600                  		dc.w $FA00, $600
0001597E FC00 FB00                  		dc.w $FC00, $FB00
00015982 FA00 FF00                  		dc.w $FA00, $FF00
00015986 FA00 0100                  		dc.w $FA00, $100
0001598A FC00 0500                  		dc.w $FC00, $500
0001598E                            ; ---------------------------------------------------------------------------
0001598E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0001598E                            ; ---------------------------------------------------------------------------
0001598E                            Map_obj3C:
0001598E                            	include "_maps\obj3C.asm"
0001598E                            ; ---------------------------------------------------------------------------
0001598E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0001598E                            ; ---------------------------------------------------------------------------
0001598E 0000                       		dc.w byte_D2BC-Map_obj3C
00015990 0000                       		dc.w byte_D2E5-Map_obj3C
00015992 0000                       		dc.w byte_D30E-Map_obj3C
00015994 08                         byte_D2BC:	dc.b 8
00015995 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0001599A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0001599F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
000159A4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
000159A9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000159AE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000159B3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000159B8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000159BD 08                         byte_D2E5:	dc.b 8
000159BE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000159C3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000159C8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000159CD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000159D2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000159D7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000159DC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000159E1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000159E6 08                         byte_D30E:	dc.b 8
000159E7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000159EC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000159F1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000159F6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000159FB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
00015A00 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
00015A05 0005 0008 00               		dc.b 0,	5, 0, 8, 0
00015A0A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
00015A10 00                         		even
00015A10 00                         		even
00015A10                            
00015A10                            ; ---------------------------------------------------------------------------
00015A10                            ; Object code loading subroutine
00015A10                            ; ---------------------------------------------------------------------------
00015A10                            
00015A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A10                            
00015A10                            
00015A10                            ; =============== S U B	R O U T	I N E =======================================
00015A10                            
00015A10                            
00015A10                            ObjectsLoad:				; CODE XREF: ROM:00004946p
00015A10                            					; ROM:00004A2Ep ...
00015A10 41F8 D000                  		lea	(Object_RAM).w,a0 ; set address for object RAM
00015A14 7E7F                       		moveq	#$7F,d7
00015A16 7000                       		moveq	#0,d0
00015A18 0C38 0006 D024             		cmpi.b	#6,(MainCharacter+routine).w
00015A1E 6400                       		bcc.s	loc_D362
00015A20                            
00015A20                            loc_D348:
00015A20 1010                       		move.b	(a0),d0		; load object number from RAM
00015A22 6700                       		beq.s	loc_D358
00015A24                            ;		add.w	d0,d0
00015A24                            ;		add.w	d0,d0	; d0 = object ID *
00015A24 E548                       		lsl.w	#2,d0
00015A26 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
00015A2A 4E91                       		jsr	(a1)		; run the object's code
00015A2C 7000                       		moveq	#0,d0
00015A2E                            
00015A2E                            loc_D358:
00015A2E 41E8 0040                  		lea	$40(a0),a0	; next object
00015A32 51CF FFEC                  		dbf	d7,loc_D348
00015A36 4E75                       		rts	
00015A38                            ; ===========================================================================
00015A38                            
00015A38                            loc_D362:
00015A38 0C38 000A D024             		cmpi.b	#$A,(MainCharacter+routine).w      ; Has Sonic drowned?
00015A3E 67E0                       		beq.s	loc_D348                        ; If so, run objects a little longer
00015A40 7E1F                               moveq	#$1F,d7
00015A42 61DC                       		bsr.s	loc_D348
00015A44 7E5F                       		moveq	#$5F,d7
00015A46                            
00015A46                            loc_D368:
00015A46 7000                       		moveq	#0,d0	; Clear d0 quickly
00015A48 1010                       		move.b	(a0),d0	; get the object's ID
00015A4A 6700                       		beq.s	loc_D37C	; if it's obj00, skip it
00015A4C 4A28 0001                  		tst.b	render_flags(a0)	; should we render it?
00015A50 6A00                       		bpl.s	loc_D37C	; if not, skip it
00015A52 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
00015A56 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
00015A5C 6700                       		beq.s	loc_D378            ; if not, branch
00015A5E 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
00015A62                            
00015A62                            loc_D378:
00015A62 6100 0000                  		bsr.w	DisplaySprite3	
00015A66                            loc_D37C:
00015A66 41E8 0040                  		lea	$40(a0),a0
00015A6A 51CF FFDA                  		dbf	d7,loc_D368
00015A6E 4E75                       		rts
00015A70                            ; End of function ObjectsLoad
00015A70                            
00015A70                            
00015A70                            ; =============== S U B	R O U T	I N E =======================================
00015A70                            
00015A70                            
00015A70                            sub_F2F8:				; CODE XREF: sub_1CFC+5Cp
00015A70 41F8 D000                  		lea	($FFFFD000).w,a0
00015A74 7E7F                       		moveq	#$7F,d7	; ''
00015A76 7000                       		moveq	#0,d0
00015A78 4EF9 0000 0000             		jmp	loc_F308
00015A7E                            ; ---------------------------------------------------------------------------
00015A7E                            ;		moveq	#$1F,d7
00015A7E                            ;		bsr.s	loc_D368
00015A7E                            ;		moveq	#$5F,d7	; '_'
00015A7E                            
00015A7E                            loc_F308:				; CODE XREF: sub_F2F8+8j ROM:loc_F31Cj
00015A7E 7000                       		moveq	#0,d0
00015A80 1010                       		move.b	(a0),d0
00015A82 6700                       		beq.s	loc_F318
00015A84 4A28 0001                  		tst.b	1(a0)
00015A88 6A00                       		bpl.s	loc_F318
00015A8A 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
00015A8E 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
00015A94 6700                       		beq.s	loc_F308_2            ; if not, branch
00015A96 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
00015A9A                            loc_F308_2:
00015A9A 6100 0000                  		bsr.w	DisplaySprite2
00015A9E                            
00015A9E                            loc_F318:				; CODE XREF: sub_F2F8+14j sub_F2F8+1Aj
00015A9E 41E8 0040                  		lea	$40(a0),a0
00015AA2 51CF FFDA                  		dbf	d7,loc_F308
00015AA6 4E75                       		rts
00015AA8                            ; ===========================================================================
00015AA8                            ; ---------------------------------------------------------------------------
00015AA8                            ; Object pointers
00015AA8                            ; ---------------------------------------------------------------------------
00015AA8                            Obj_Index:
00015AA8                            	include "_inc\Object pointers.asm"
00015AA8                            ; ---------------------------------------------------------------------------
00015AA8                            ; Object pointers
00015AA8                            ; ---------------------------------------------------------------------------
00015AA8 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, Obj04
00015AB8 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjNull, ObjNull, Obj08
00015AC8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
00015AD8 0000 0000 0001 2594 0001+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
00015AE8 0000 ED72 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
00015AF8 0000 F360 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
00015B08 0000 FC00 0000 FF1A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
00015B18 0001 05AC 0001 0886 0001+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
00015B28 0000 0000 0001 1584 0001+  	dc.l Obj21, Obj22, Obj23, Obj24
00015B38 0001 18DE 0001 1FCE 0001+  	dc.l Obj25, Obj26, Obj27, Obj28
00015B48 0001 1170 0001 0668 0001+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
00015B58 0001 2ECA 0001 218E 0001+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
00015B68 0001 387A 0001 3F08 0001+  	dc.l Obj31, Obj32, Obj33, Obj34
00015B78 0001 33FA 0001 5418 0001+  	dc.l Obj35, Obj36, Obj37, Obj38
00015B88 0001 46A4 0001 478A 0001+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
00015B98 0000 0000 0000 0000 0001+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
00015BA8 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
00015BB8 0001 3B84 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
00015BC8 0001 5744 0000 0000 0001+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
00015BD8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
00015BE8 0000 0000 0000 0000 0001+  	dc.l Obj51, Obj52, Obj53, Obj54
00015BF8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
00015C08 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
00015C18 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
00015C28 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
00015C38 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
00015C48 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
00015C58 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
00015C68 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
00015C78 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
00015C88 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
00015C98 0000 0000 0001 4B7A 0001+  	dc.l Obj7D, Obj7E, Obj7F, ObjNull
00015CA8 0000 0000 0000 0000 0000+  	dc.l ObjNull, Obj82, Obj83, Obj84
00015CB8 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
00015CC8 0000 C118 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
00015CD8 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015CD8 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015CE8                            
00015CE8                            ; ----------------------------------------------------------------------------
00015CE8                            ; Object removed from the game. All it does is deallocate its array.
00015CE8                            ; ----------------------------------------------------------------------------
00015CE8                            
00015CE8                            ObjNull: ;;
00015CE8 6000 0000                  	bra.w	DeleteObject
00015CEC                            ; ---------------------------------------------------------------------------
00015CEC                            ; Subroutine to	make an	object fall downwards, increasingly fast
00015CEC                            ; ---------------------------------------------------------------------------
00015CEC                            
00015CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CEC                            
00015CEC                            ; ObjectMoveAndFall:
00015CEC                            ObjectFall:
00015CEC 3028 0010                          move.w  x_vel(a0),d0
00015CF0 48C0                               ext.l   d0
00015CF2 E188                               lsl.l   #8,d0
00015CF4 D1A8 0008                          add.l   d0,x_pos(a0)
00015CF8 3028 0012                          move.w  y_vel(a0),d0
00015CFC 0668 0038 0012                     addi.w  #$38,y_vel(a0) ; apply gravity
00015D02 48C0                               ext.l   d0
00015D04 E188                               lsl.l   #8,d0
00015D06 D1A8 000C                          add.l   d0,y_pos(a0)
00015D0A 4E75                               rts
00015D0C                            ; End of function ObjectFall
00015D0C                            
00015D0C                            ; ---------------------------------------------------------------------------
00015D0C                            ; Subroutine translating object	speed to update	object position
00015D0C                            ; ---------------------------------------------------------------------------
00015D0C                            
00015D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D0C                            
00015D0C                            ; ObjectMove:
00015D0C                            SpeedToPos:
00015D0C 3028 0010                          move.w  x_vel(a0),d0
00015D10 48C0                               ext.l   d0
00015D12 E188                               lsl.l   #8,d0
00015D14 D1A8 0008                          add.l   d0,x_pos(a0)
00015D18 3028 0012                          move.w  y_vel(a0),d0
00015D1C 48C0                               ext.l   d0
00015D1E E188                               lsl.l   #8,d0
00015D20 D1A8 000C                          add.l   d0,y_pos(a0)
00015D24 4E75                               rts
00015D26                            ; End of function SpeedToPos
00015D26                            
00015D26                            ; ---------------------------------------------------------------------------
00015D26                            ; Subroutine to	delete an object
00015D26                            ; ---------------------------------------------------------------------------
00015D26                            
00015D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D26                            
00015D26                            
00015D26                            DeleteObject:
00015D26 2248                       		movea.l	a0,a1
00015D28                            
00015D28                            DeleteChild:
00015D28                            DeleteObject2:
00015D28 7200                       		moveq	#0,d1
00015D2A 700F                       		moveq	#$F,d0
00015D2C                            
00015D2C                            loc_D646:
00015D2C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
00015D2E 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
00015D32                            ;		move.w	d1,(a1)+
00015D32 4E75                       		rts	
00015D34                            ; End of function DeleteObject
00015D34                            
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            
00015D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D34                            
00015D34                            
00015D34                            Super_and_Invincibility_Stars:
00015D34 2F08                       		move.l	a0,-(sp)
00015D36 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
00015D3A 4EBA FFEA                  		jsr		DeleteObject		; delete stars
00015D3E 11FC 0000 D2DC             		move.b	#0,($FFFFD2DC).w
00015D44 08B8 0002 D02B             		bclr	#2,(Maincharacter+status_secondary).w ; clear speed shoes
00015D4A 205F                       		move.l	(sp)+,a0
00015D4C 4E75                       		rts
00015D4E                            ; End of function Super_and_Invincibility_Stars
00015D4E                            
00015D4E                            ; ---------------------------------------------------------------------------
00015D4E                            ; Subroutine to	load the life counter art depending on Sonic's Status
00015D4E                            ; ---------------------------------------------------------------------------
00015D4E                            
00015D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D4E                            
00015D4E                            
00015D4E                            LoadLivesCounterArt:
00015D4E 223C 0000 0000             		move.l	#Unc_Lives,d1			        ; Call for Regular Life Icon Art
00015D54 4A38 FE19                  		tst.b	($FFFFFE19).w
00015D58 6700 0000                  		beq.w	nextloc3
00015D5C                            ;		cmpi.b	#-1,(Super_Sonic_palette).w ; '$'
00015D5C                            ;		bne.s	nextloc3
00015D5C 223C 0000 0000             		move.l	#Unc_SuperLives,d1			        ; Call for Regular Super Life Icon Art		
00015D62                            nextloc3:
00015D62 343C FA80                  		move.w	#$FA80,d2			        ; Load Art from this location (VRAM location*20)
00015D66                            								; In this case, VRAM = $7D4*20
00015D66                            
00015D66 363C 00C0                  		move.w	#$C0,d3
00015D6A 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
00015D70 4E75                       		rts
00015D72                            ; End of function Super_and_Invincibility_Stars
00015D72                            
00015D72                            ; ---------------------------------------------------------------------------
00015D72                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015D72                            ; ---------------------------------------------------------------------------
00015D72                            
00015D72                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015D72                             
00015D72                            ; sub_164F4:
00015D72                            DisplaySprite:
00015D72 43F8 AC00                          lea     (Sprite_Table_Input).w,a1
00015D76 D2E8 0018                          adda.w  priority(a0),a1
00015D7A 0C51 007E                          cmpi.w  #$7E,(a1)
00015D7E 6400                               bcc.s   return_16510
00015D80 5451                               addq.w  #2,(a1)
00015D82 D2D1                               adda.w  (a1),a1
00015D84 3288                               move.w  a0,(a1)
00015D86                             
00015D86                            return_16510:
00015D86 4E75                               rts
00015D88                            ; End of function DisplaySprite
00015D88                             
00015D88                            ; ---------------------------------------------------------------------------
00015D88                            ; Subroutine to display a sprite/object, when a1 is the object RAM
00015D88                            ; ---------------------------------------------------------------------------
00015D88                             
00015D88                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015D88                             
00015D88                            ; sub_16512:
00015D88                            DisplaySprite2:
00015D88 45F8 AC00                          lea     (Sprite_Table_Input).w,a2
00015D8C D4E9 0018                          adda.w  priority(a1),a2
00015D90 0C52 007E                          cmpi.w  #$7E,(a2)
00015D94 6400                               bcc.s   return_1652E
00015D96 5452                               addq.w  #2,(a2)
00015D98 D4D2                               adda.w  (a2),a2
00015D9A 3489                               move.w  a1,(a2)
00015D9C                             
00015D9C                            return_1652E:
00015D9C 4E75                               rts
00015D9E                            ; End of function DisplaySprite2
00015D9E                            
00015D9E                            ; -----------------------------------------------------------------------------
00015D9E                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015D9E                            ; and d0 is already (priority/2)&$380
00015D9E                            ; -----------------------------------------------------------------------------
00015D9E                            
00015D9E                            ; loc_16530:
00015D9E                            DisplaySprite_Param:
00015D9E                            DisplaySprite3:
00015D9E 43F8 AC00                  	lea	(Sprite_Table_Input).w,a1
00015DA2 D2C0                       	adda.w	d0,a1
00015DA4 0C51 007E                  	cmpi.w	#$7E,(a1)
00015DA8 6400                       	bcc.s	return_16542
00015DAA 5451                       	addq.w	#2,(a1)
00015DAC D2D1                       	adda.w	(a1),a1
00015DAE 3288                       	move.w	a0,(a1)
00015DB0                            
00015DB0                            return_16542:
00015DB0 4E75                       	rts
00015DB2                            
00015DB2                            ; ===========================================================================
00015DB2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
00015DB6 00FF F700                  		dc.l $FFF700		; main screen x-position
00015DBA 00FF F708                  		dc.l $FFF708		; background x-position	1
00015DBE 00FF F718                  		dc.l $FFF718		; background x-position	2
00015DC2                            ; ---------------------------------------------------------------------------
00015DC2                            ; Subroutine to convert mappings (etc) to proper Megadrive sprites
00015DC2                            ; ---------------------------------------------------------------------------
00015DC2                            
00015DC2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015DC2                            
00015DC2                            ; sub_16604:
00015DC2                            BuildSprites:
00015DC2                            ;	tst.w	(Two_player_mode).w
00015DC2                            ;	bne.w	BuildSprites_2P
00015DC2 45F8 F800                  	lea	(Sprite_Table).w,a2
00015DC6 7A00                       	moveq	#0,d5
00015DC8 7800                       	moveq	#0,d4
00015DCA 4A38 FE2C                  	tst.b	($FFFFFE2C).w
00015DCE 6700                       	beq.s	sub_16604_2
00015DD0 6100 0000                  	bsr.w	JmpTo_loc_40804
00015DD4                            sub_16604_2:
00015DD4 49F8 AC00                  	lea	(Sprite_Table_Input).w,a4
00015DD8 7E07                       	moveq	#7,d7
00015DDA                            
00015DDA                            loc_16628:
00015DDA 4A54                       	tst.w	(a4)
00015DDC 6700 0000                  	beq.w	loc_166FA
00015DE0 7C02                       	moveq	#2,d6
00015DE2                            
00015DE2                            loc_16630:
00015DE2 3074 6000                  	movea.w	(a4,d6.w),a0 ; a0=object
00015DE6 4A10                       	tst.b	(a0)
00015DE8 6700 0000                  	beq.w	loc_166F2
00015DEC 0228 007F 0001             	andi.b	#$7F,render_flags(a0)
00015DF2 1028 0001                  	move.b	render_flags(a0),d0
00015DF6 1800                       	move.b	d0,d4
00015DF8 0C10 0002                  	cmpi.b	#2,(a0)
00015DFC 6D00                       	blt.s	loc_16630_2
00015DFE 0800 0006                  	btst	#6,d0
00015E02 6600 0000                  	bne.w	BuildSprites_MultiDraw
00015E06                            loc_16630_2:
00015E06 0240 000C                  	andi.w	#$C,d0
00015E0A 6700                       	beq.s	loc_166A6
00015E0C 227B 00A4                  	movea.l	BldSpr_ScrPos(pc,d0.w),a1
00015E10 7000                       	moveq	#0,d0
00015E12 1028 0023                  	move.b	width_pixels(a0),d0
00015E16 3628 0008                  	move.w	x_pos(a0),d3
00015E1A 9651                       	sub.w	(a1),d3
00015E1C 3203                       	move.w	d3,d1
00015E1E D240                       	add.w	d0,d1
00015E20 6B00 0000                  	bmi.w	loc_166F2
00015E24 3203                       	move.w	d3,d1
00015E26 9240                       	sub.w	d0,d1
00015E28 0C41 0140                  	cmpi.w	#320,d1
00015E2C 6C00 0000                  	bge.w	loc_166F2
00015E30 0643 0080                  	addi.w	#$80,d3
00015E34 0804 0004                  	btst	#4,d4
00015E38 6700                       	beq.s	loc_166B0
00015E3A 7000                       	moveq	#0,d0
00015E3C 1028 0016                  	move.b	y_radius(a0),d0
00015E40 3428 000C                  	move.w	y_pos(a0),d2
00015E44 9469 0004                  	sub.w	4(a1),d2
00015E48 3202                       	move.w	d2,d1
00015E4A D240                       	add.w	d0,d1
00015E4C 6B00                       	bmi.s	loc_166F2
00015E4E 3202                       	move.w	d2,d1
00015E50 9240                       	sub.w	d0,d1
00015E52 0C41 00E0                  	cmpi.w	#$E0,d1
00015E56 6C00                       	bge.s	loc_166F2
00015E58 0642 0080                  	addi.w	#$80,d2
00015E5C 6000                       	bra.s	loc_166CC
00015E5E                            ; ===========================================================================
00015E5E                            
00015E5E                            loc_166A6:
00015E5E 3428 000A                  	move.w	objoff_A(a0),d2
00015E62 3628 0008                  	move.w	x_pos(a0),d3
00015E66 6000                       	bra.s	loc_166CC
00015E68                            ; ===========================================================================
00015E68                            
00015E68                            loc_166B0:
00015E68 3428 000C                  	move.w	y_pos(a0),d2
00015E6C 9469 0004                  	sub.w	4(a1),d2
00015E70 0642 0080                  	addi.w	#$80,d2
00015E74 0242 07FF                  	andi.w	#$7FF,d2
00015E78 0C42 0060                  	cmpi.w	#$60,d2
00015E7C 6500                       	bcs.s	loc_166F2
00015E7E 0C42 0180                  	cmpi.w	#$180,d2
00015E82 6400                       	bcc.s	loc_166F2
00015E84                            
00015E84                            loc_166CC:
00015E84 2268 0004                  	movea.l	mappings(a0),a1
00015E88 7200                       	moveq	#0,d1
00015E8A 0804 0005                  	btst	#5,d4
00015E8E 6600                       	bne.s	loc_166E8
00015E90 1228 001A                  	move.b	mapping_frame(a0),d1
00015E94 D241                       	add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
00015E96 D2F1 1000                  	adda.w	(a1,d1.w),a1
00015E9A 7200                       	moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
00015E9C 1219                       	move.b	(a1)+,d1
00015E9E 5341                       	subq.w	#1,d1
00015EA0 6B00                       	bmi.s	loc_166EC
00015EA2                            
00015EA2                            loc_166E8:
00015EA2 6100 0000                  	bsr.w	sub_16812
00015EA6                            
00015EA6                            loc_166EC:
00015EA6 08E8 0007 0001             	bset	#7,render_flags(a0)
00015EAC                            
00015EAC                            loc_166F2:
00015EAC                            
00015EAC 5446                       	addq.w	#2,d6
00015EAE 5554                       	subq.w	#2,(a4)
00015EB0 6600 FF30                  	bne.w	loc_16630
00015EB4                            
00015EB4                            loc_166FA:
00015EB4 49EC 0080                  	lea	$80(a4),a4
00015EB8 51CF FF20                  	dbf	d7,loc_16628
00015EBC 11C5 F62C                  	move.b	d5,($FFFFF62C).w
00015EC0 0C05 0050                  	cmpi.b	#$50,d5
00015EC4 6700                       	beq.s	loc_16714
00015EC6 24BC 0000 0000             	move.l	#0,(a2)
00015ECC 4E75                       	rts
00015ECE                            ; ===========================================================================
00015ECE                            
00015ECE                            loc_16714:
00015ECE 157C 0000 FFFB             	move.b	#0,-5(a2)
00015ED4 4E75                       	rts
00015ED6                            ; ===========================================================================
00015ED6                            
00015ED6                            BuildSprites_MultiDraw:
00015ED6 2F0C                       	move.l	a4,-(sp)
00015ED8 49F8 F700                  	lea	(Camera_X_pos).w,a4
00015EDC 3668 0002                  	movea.w	art_tile(a0),a3
00015EE0 2A68 0004                  	movea.l	mappings(a0),a5
00015EE4 7000                       	moveq	#0,d0
00015EE6 1028 000E                  	move.b	objoff_E(a0),d0
00015EEA 3628 0008                  	move.w	x_pos(a0),d3
00015EEE 9654                       	sub.w	(a4),d3
00015EF0 3203                       	move.w	d3,d1
00015EF2 D240                       	add.w	d0,d1
00015EF4 6B00 0000                  	bmi.w	loc_16804
00015EF8 3203                       	move.w	d3,d1
00015EFA 9240                       	sub.w	d0,d1
00015EFC 0C41 0140                  	cmpi.w	#320,d1
00015F00 6C00 0000                  	bge.w	loc_16804
00015F04 0643 0080                  	addi.w	#$80,d3
00015F08 0804 0004                  	btst	#4,d4
00015F0C 6700                       	beq.s	loc_1677C
00015F0E 7000                       	moveq	#0,d0
00015F10 1028 0014                  	move.b	objoff_14(a0),d0
00015F14 3428 000C                  	move.w	y_pos(a0),d2
00015F18 946C 0004                  	sub.w	4(a4),d2
00015F1C 3202                       	move.w	d2,d1
00015F1E D240                       	add.w	d0,d1
00015F20 6B00 0000                  	bmi.w	loc_16804
00015F24 3202                       	move.w	d2,d1
00015F26 9240                       	sub.w	d0,d1
00015F28 0C41 00E0                  	cmpi.w	#$E0,d1
00015F2C 6C00 0000                  	bge.w	loc_16804
00015F30 0642 0080                  	addi.w	#$80,d2
00015F34 6000                       	bra.s	loc_16798_2
00015F36                            ; ===========================================================================
00015F36                            
00015F36                            loc_1677C:
00015F36 3428 000C                  	move.w	y_pos(a0),d2
00015F3A 946C 0004                  	sub.w	4(a4),d2
00015F3E 0642 0080                  	addi.w	#$80,d2
00015F42 0242 07FF                  	andi.w	#$7FF,d2
00015F46 0C42 0060                  	cmpi.w	#$60,d2
00015F4A 6500                       	bcs.s	loc_16804
00015F4C 0C42 0180                  	cmpi.w	#$180,d2
00015F50 6400                       	bcc.s	loc_16804
00015F52                            
00015F52                            loc_16798_2:
00015F52 7200                       	moveq	#0,d1
00015F54 1228 000B                  	move.b	objoff_B(a0),d1
00015F58 6700                       	beq.s	loc_167B6
00015F5A D241                       	add.w	d1,d1
00015F5C 224D                       	movea.l	a5,a1
00015F5E D2F1 1000                  	adda.w	(a1,d1.w),a1
00015F62 3219                       	move.w	(a1)+,d1
00015F64 5341                       	subq.w	#1,d1
00015F66 6B00                       	bmi.s	loc_167B6
00015F68 3F04                       	move.w	d4,-(sp)
00015F6A 6100 0000                  	bsr.w	sub_1680A
00015F6E 381F                       	move.w	(sp)+,d4
00015F70                            
00015F70                            loc_167B6:
00015F70                            
00015F70 0028 0080 0001             	ori.b	#$80,render_flags(a0)
00015F76 4DE8 0010                  	lea	$10(a0),a6
00015F7A 7000                       	moveq	#0,d0
00015F7C 1028 000F                  	move.b	objoff_F(a0),d0
00015F80 5340                       	subq.w	#1,d0
00015F82 6500                       	bcs.s	loc_16804
00015F84                            
00015F84                            loc_167CA:
00015F84 4840                       	swap	d0
00015F86 361E                       		move.w	(a6)+,d3
00015F88 9654                       		sub.w	(a4),d3
00015F8A 0643 0080                  		addi.w	#$80,d3	; '?'
00015F8E 341E                       		move.w	(a6)+,d2
00015F90 946C 0004                  		sub.w	4(a4),d2
00015F94 0642 0080                  		addi.w	#$80,d2	; '?'
00015F98 0242 07FF                  		andi.w	#$7FF,d2
00015F9C 524E                       		addq.w	#1,a6
00015F9E 7200                       		moveq	#0,d1
00015FA0 121E                       		move.b	(a6)+,d1
00015FA2 D241                       		add.w	d1,d1
00015FA4 224D                       		movea.l	a5,a1
00015FA6 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015FAA 1219                       		move.b	(a1)+,d1
00015FAC 5301                       		subq.b	#1,d1
00015FAE 6B00                       	bmi.s	loc_167FE
00015FB0 3F04                       	move.w	d4,-(sp)
00015FB2 6100 0000                  	bsr.w	sub_1680A
00015FB6 381F                       	move.w	(sp)+,d4
00015FB8                            
00015FB8                            loc_167FE:
00015FB8 4840                       	swap	d0
00015FBA 51C8 FFC8                  	dbf	d0,loc_167CA
00015FBE                            
00015FBE                            loc_16804:
00015FBE                            
00015FBE 285F                       	movea.l	(sp)+,a4
00015FC0 6000 FEEA                  	bra.w	loc_166F2
00015FC4                            ; End of function BuildSprites
00015FC4                            
00015FC4                            
00015FC4                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015FC4                            
00015FC4                            
00015FC4                            sub_1680A:
00015FC4                            
00015FC4 0C05 0050                  	cmpi.b	#$50,d5
00015FC8 6500                       	bcs.s	loc_1681C
00015FCA 4E75                       	rts
00015FCC                            ; End of function sub_1680A
00015FCC                            
00015FCC                            
00015FCC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015FCC                            
00015FCC                            
00015FCC                            sub_16812:
00015FCC 3668 0002                  	movea.w	art_tile(a0),a3
00015FD0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
00015FD0 0C05 0050                  	cmpi.b	#$50,d5
00015FD4 6400                       	bcc.s	return_16852
00015FD6                            
00015FD6                            loc_1681C:
00015FD6 0804 0000                  	btst	#0,d4
00015FDA 6600                       	bne.s	loc_16854
00015FDC 0804 0001                  	btst	#1,d4
00015FE0 6600 0000                  	bne.w	loc_168B4
00015FE4                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout	
00015FE4                            loc_1682A:
00015FE4 1019                       		move.b	(a1)+,d0
00015FE6 4880                       		ext.w	d0
00015FE8 D042                       		add.w	d2,d0
00015FEA 34C0                       		move.w	d0,(a2)+
00015FEC 14D9                       		move.b	(a1)+,(a2)+
00015FEE 5205                       		addq.b	#1,d5
00015FF0 14C5                       		move.b	d5,(a2)+
00015FF2 1019                       		move.b	(a1)+,d0
00015FF4 E148                       		lsl.w	#8,d0
00015FF6 1019                       		move.b	(a1)+,d0
00015FF8 D04B                       		add.w	a3,d0
00015FFA 34C0                       		move.w	d0,(a2)+
00015FFC 1019                       		move.b	(a1)+,d0
00015FFE 4880                       		ext.w	d0
00016000 D043                       		add.w	d3,d0
00016002 0240 01FF                  		andi.w	#$1FF,d0
00016006 6600                       	bne.s	loc_1684C
00016008 5240                       	addq.w	#1,d0
0001600A                            
0001600A                            loc_1684C:
0001600A 34C0                       	move.w	d0,(a2)+
0001600C 51C9 FFD6                  	dbf	d1,loc_1682A
00016010                            
00016010                            return_16852:
00016010 4E75                       	rts
00016012                            ; ===========================================================================
00016012                            
00016012                            loc_16854:
00016012 0804 0001                  	btst	#1,d4
00016016 6600 0000                  	bne.w	loc_168FC
0001601A                            
0001601A                            loc_1685C:
0001601A 1019                       		move.b	(a1)+,d0
0001601C 4880                       		ext.w	d0
0001601E D042                       		add.w	d2,d0
00016020 34C0                       		move.w	d0,(a2)+
00016022 1819                       		move.b	(a1)+,d4
00016024 14C4                       		move.b	d4,(a2)+
00016026 5205                       		addq.b	#1,d5
00016028 14C5                       		move.b	d5,(a2)+
0001602A 1019                       		move.b	(a1)+,d0
0001602C E148                       		lsl.w	#8,d0
0001602E 1019                       		move.b	(a1)+,d0
00016030 D04B                       		add.w	a3,d0
00016032 0A40 0800                  		eori.w	#$800,d0
00016036 34C0                       		move.w	d0,(a2)+
00016038 1019                       		move.b	(a1)+,d0
0001603A 4880                       		ext.w	d0
0001603C 4440                       		neg.w	d0
0001603E D804                       		add.b	d4,d4
00016040 0244 0018                  		andi.w	#$18,d4
00016044 5044                       		addq.w	#8,d4
00016046 9044                       		sub.w	d4,d0
00016048 D043                       		add.w	d3,d0
0001604A 0240 01FF                  		andi.w	#$1FF,d0
0001604E 6600                       	bne.s	loc_1688C
00016050 5240                       	addq.w	#1,d0
00016052                            
00016052                            loc_1688C:
00016052 34C0                       	move.w	d0,(a2)+
00016054 51C9 FFC4                  	dbf	d1,loc_1685C
00016058 4E75                       	rts
0001605A                            ; ===========================================================================
0001605A                            ; offsets for horizontally mirrored sprite pieces?
0001605A                            byte_16894:
0001605A 0808 0808                  	dc.b   8,  8,  8,  8	; 4
0001605E 1010 1010                  	dc.b $10,$10,$10,$10	; 8
00016062 1818 1818                  	dc.b $18,$18,$18,$18	; 12
00016066 2020 2020                  	dc.b $20,$20,$20,$20	; 16
0001606A                            ; offsets for vertically mirrored sprite pieces?
0001606A                            byte_168A4:
0001606A 0810 1820                  	dc.b   8,$10,$18,$20	; 4
0001606E 0810 1820                  	dc.b   8,$10,$18,$20	; 8
00016072 0810 1820                  	dc.b   8,$10,$18,$20	; 12
00016076 0810 1820                  	dc.b   8,$10,$18,$20	; 16
0001607A                            ; ===========================================================================
0001607A                            
0001607A                            loc_168B4:
0001607A                            
0001607A 1019                       		move.b	(a1)+,d0
0001607C 1811                       		move.b	(a1),d4
0001607E 4880                       		ext.w	d0
00016080 4440                       		neg.w	d0
00016082 E70C                       		lsl.b	#3,d4
00016084 0244 0018                  		andi.w	#$18,d4
00016088 5044                       		addq.w	#8,d4
0001608A 9044                       		sub.w	d4,d0
0001608C D042                       		add.w	d2,d0
0001608E 34C0                       		move.w	d0,(a2)+
00016090 14D9                       		move.b	(a1)+,(a2)+
00016092 5205                       		addq.b	#1,d5
00016094 14C5                       		move.b	d5,(a2)+
00016096 1019                       		move.b	(a1)+,d0
00016098 E148                       		lsl.w	#8,d0
0001609A 1019                       		move.b	(a1)+,d0
0001609C D04B                       		add.w	a3,d0
0001609E 0A40 1000                  		eori.w	#$1000,d0
000160A2 34C0                       		move.w	d0,(a2)+
000160A4 1019                       		move.b	(a1)+,d0
000160A6 4880                       		ext.w	d0
000160A8 D043                       		add.w	d3,d0
000160AA 0240 01FF                  		andi.w	#$1FF,d0
000160AE 6600                       	bne.s	loc_168E4
000160B0 5240                       	addq.w	#1,d0
000160B2                            
000160B2                            loc_168E4:
000160B2 34C0                       	move.w	d0,(a2)+
000160B4 51C9 FFC4                  	dbf	d1,loc_168B4
000160B8 4E75                       	rts
000160BA                            ; ===========================================================================
000160BA                            ; offsets for vertically mirrored sprite pieces?
000160BA                            byte_168EC:
000160BA 0810 1820                  	dc.b   8,$10,$18,$20	; 4
000160BE 0810 1820                  	dc.b   8,$10,$18,$20	; 8
000160C2 0810 1820                  	dc.b   8,$10,$18,$20	; 12
000160C6 0810 1820                  	dc.b   8,$10,$18,$20	; 16
000160CA                            ; ===========================================================================
000160CA                            
000160CA                            loc_168FC:
000160CA                            
000160CA 1019                       		move.b	(a1)+,d0
000160CC 1811                       		move.b	(a1),d4
000160CE 4880                       		ext.w	d0
000160D0 4440                       		neg.w	d0
000160D2 E70C                       		lsl.b	#3,d4
000160D4 0244 0018                  		andi.w	#$18,d4
000160D8 5044                       		addq.w	#8,d4
000160DA 9044                       		sub.w	d4,d0
000160DC D042                       		add.w	d2,d0
000160DE 34C0                       		move.w	d0,(a2)+
000160E0 1819                       		move.b	(a1)+,d4
000160E2 14C4                       		move.b	d4,(a2)+
000160E4 5205                       		addq.b	#1,d5
000160E6 14C5                       		move.b	d5,(a2)+
000160E8 1019                       		move.b	(a1)+,d0
000160EA E148                       		lsl.w	#8,d0
000160EC 1019                       		move.b	(a1)+,d0
000160EE D04B                       		add.w	a3,d0
000160F0 0A40 1800                  		eori.w	#$1800,d0
000160F4 34C0                       		move.w	d0,(a2)+
000160F6 1019                       		move.b	(a1)+,d0
000160F8 4880                       		ext.w	d0
000160FA 4440                       		neg.w	d0
000160FC D804                       		add.b	d4,d4
000160FE 0244 0018                  		andi.w	#$18,d4
00016102 5044                       		addq.w	#8,d4
00016104 9044                       		sub.w	d4,d0
00016106 D043                       		add.w	d3,d0
00016108 0240 01FF                  		andi.w	#$1FF,d0
0001610C 6600                       	bne.s	loc_16936
0001610E 5240                       	addq.w	#1,d0
00016110                            
00016110                            loc_16936:
00016110 34C0                       	move.w	d0,(a2)+
00016112 51C9 FFB6                  	dbf	d1,loc_168FC
00016116 4E75                       	rts
00016118                            ; End of function sub_16812
00016118                            
00016118                            ; ===========================================================================
00016118                            ; offsets for horizontally mirrored sprite pieces?
00016118                            byte_1693E:
00016118 0808 0808                  	dc.b   8,  8,  8,  8	; 4
0001611C 1010 1010                  	dc.b $10,$10,$10,$10	; 8
00016120 1818 1818                  	dc.b $18,$18,$18,$18	; 12
00016124 2020 2020                  	dc.b $20,$20,$20,$20	; 16
00016128                            ; ===========================================================================		
00016128                            
00016128                            ; ---------------------------------------------------------------------------
00016128                            ; Subroutine to	check if an object is on the screen
00016128                            ; ---------------------------------------------------------------------------
00016128                            
00016128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016128                            
00016128                            
00016128                            ChkObjOnScreen:
00016128 3028 0008                  		move.w	8(a0),d0	; get object x-position
0001612C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
00016130 6B00                       		bmi.s	NotOnScreen
00016132 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
00016136 6C00                       		bge.s	NotOnScreen	; if not, branch
00016138                            
00016138 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0001613C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
00016140 6B00                       		bmi.s	NotOnScreen
00016142 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
00016146 6C00                       		bge.s	NotOnScreen	; if not, branch
00016148                            
00016148 7000                       		moveq	#0,d0		; set flag to 0
0001614A 4E75                       		rts	
0001614C                            ; ===========================================================================
0001614C                            
0001614C                            NotOnScreen:				; XREF: ChkObjOnScreen
0001614C 7001                       		moveq	#1,d0		; set flag to 1
0001614E 4E75                       		rts	
00016150                            ; End of function ChkObjOnScreen
00016150                            
00016150                            
00016150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016150                            
00016150                            
00016150                            ChkObjOnScreen2:
00016150 7200                       		moveq	#0,d1
00016152 1228 0023                  		move.b	width_pixels(a0),d1
00016156 3028 0008                  		move.w	8(a0),d0
0001615A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001615E D041                       		add.w	d1,d0
00016160 6B00                       		bmi.s	NotOnScreen2
00016162 D241                       		add.w	d1,d1
00016164 9041                       		sub.w	d1,d0
00016166 0C40 0140                  		cmpi.w	#320,d0
0001616A 6C00                       		bge.s	NotOnScreen2
0001616C                            
0001616C 3228 000C                  		move.w	$C(a0),d1
00016170 9278 F704                  		sub.w	($FFFFF704).w,d1
00016174 6B00                       		bmi.s	NotOnScreen2
00016176 0C41 00E0                  		cmpi.w	#224,d1
0001617A 6C00                       		bge.s	NotOnScreen2
0001617C                            
0001617C 7000                       		moveq	#0,d0
0001617E 4E75                       		rts	
00016180                            ; ===========================================================================
00016180                            
00016180                            NotOnScreen2:				; XREF: ChkObjOnScreen2
00016180 7001                       		moveq	#1,d0
00016182 4E75                       		rts
00016184                            ; End of function ChkObjOnScreen2
00016184                            
00016184                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016184                            
00016184                            
00016184                            JmpTo_loc_40804
00016184 4EF9 0000 0000             	jmp	loc_40804
0001618A                            ; ===========================================================================
0001618A                            
0001618A                            ;JmpTo_loc_4085A
0001618A                            ;	jmp	loc_4085A
0001618A                            ; ===========================================================================
0001618A                            
0001618A                            ;JmpTo_loc_409C6
0001618A                            ;	jmp	loc_409C6
0001618A                            ; ===========================================================================
0001618A                            
0001618A                            ; =============== S U B	R O U T	I N E =======================================
0001618A                            
0001618A                            
0001618A                            RingsManager:					  ; ...
0001618A 7000                       		moveq	#0,d0
0001618C 1038 FFCE                  		move.b	($FFFFFFCE).w,d0
00016190 303B 0000                  		move.w	off_31323A(pc,d0.w),d0
00016194 4EFB 0000                  		jmp	off_31323A(pc,d0.w)
00016198                            ; End of function RingsManager
00016198                            
00016198                            ; ---------------------------------------------------------------------------
00016198 0000 0000                  off_31323A:	dc.w loc_31323E-off_31323A,loc_313282-off_31323A; 0 ; ...
0001619C                            ; ---------------------------------------------------------------------------
0001619C                            
0001619C                            loc_31323E:					  ; ...
0001619C 5438 FFCE                  		addq.b	#2,($FFFFFFCE).w
000161A0 6100 0000                  		bsr.w	sub_313432
000161A4 43F8 CF80                  		lea	($FFFFCF80).w,a1
000161A8 3838 F700                  		move.w	($FFFFF700).w,d4
000161AC 5144                       		subq.w	#8,d4
000161AE 6200                       		bhi.s	loc_31325A
000161B0 7801                       		moveq	#1,d4
000161B2 6000                       		bra.s	loc_31325A
000161B4                            ; ---------------------------------------------------------------------------
000161B4                            
000161B4                            loc_313256:					  ; ...
000161B4 43E9 0006                  		lea	6(a1),a1
000161B8                            
000161B8                            loc_31325A:					  ; ...
000161B8 B869 0002                  		cmp.w	2(a1),d4
000161BC 62F6                       		bhi.s	loc_313256
000161BE 31C9 CF92                  		move.w	a1,($FFFFCF92).w
000161C2 31C9 CF96                  		move.w	a1,($FFFFCF96).w
000161C6 0644 0150                  		add.w	#$150,d4
000161CA 6000                       		bra.s	loc_313272
000161CC                            ; ---------------------------------------------------------------------------
000161CC                            
000161CC                            loc_31326E:					  ; ...
000161CC 43E9 0006                  		lea	6(a1),a1
000161D0                            
000161D0                            loc_313272:					  ; ...
000161D0 B869 0002                  		cmp.w	2(a1),d4
000161D4 62F6                       		bhi.s	loc_31326E
000161D6 31C9 CF94                  		move.w	a1,($FFFFCF94).w
000161DA 31C9 CF98                  		move.w	a1,($FFFFCF98).w
000161DE 11FC 0001 CFCC             		move.b	#1,($FFFFCFCC).w
000161E4 4E75                       		rts
000161E6                            ; ---------------------------------------------------------------------------
000161E6                            
000161E6                            loc_313282:					  ; ...
000161E6 45F8 CFB0                  		lea	($FFFFCFB0).w,a2
000161EA 321A                       		move.w	(a2)+,d1
000161EC 5341                       		subq.w	#1,d1
000161EE 6500                       		bcs.s	loc_3132B8
000161F0                            
000161F0                            loc_31328C:					  ; ...
000161F0 301A                       		move.w	(a2)+,d0
000161F2 67FC                       		beq.s	loc_31328C
000161F4 3240                       		move.w	d0,a1
000161F6 5311                       		subq.b	#1,(a1)
000161F8 6600                       		bne.s	loc_3132B4
000161FA 12BC 0006                  		move.b	#6,(a1)
000161FE 5229 0001                  		addq.b	#1,1(a1)
00016202 0C29 0008 0001             		cmp.b	#8,1(a1)
00016208 6600                       		bne.s	loc_3132B4
0001620A 32BC FFFF                  		move.w	#$FFFF,(a1)
0001620E 357C 0000 FFFE             		move.w	#0,-2(a2)
00016214 5378 CFB0                  		subq.w	#1,($FFFFCFB0).w
00016218                            
00016218                            loc_3132B4:					  ; ...
00016218 51C9 FFD6                  		dbf	d1,loc_31328C
0001621C                            
0001621C                            loc_3132B8:					  ; ...
0001621C 3278 CF92                  		move.w	($FFFFCF92).w,a1
00016220 3838 F700                  		move.w	($FFFFF700).w,d4
00016224 5144                       		subq.w	#8,d4
00016226 6200                       		bhi.s	loc_3132CC
00016228 7801                       		moveq	#1,d4
0001622A 6000                       		bra.s	loc_3132CC
0001622C                            ; ---------------------------------------------------------------------------
0001622C                            
0001622C                            loc_3132C8:					  ; ...
0001622C 43E9 0006                  		lea	6(a1),a1
00016230                            
00016230                            loc_3132CC:					  ; ...
00016230 B869 0002                  		cmp.w	2(a1),d4
00016234 62F6                       		bhi.s	loc_3132C8
00016236 6000                       		bra.s	loc_3132D6
00016238                            ; ---------------------------------------------------------------------------
00016238                            
00016238                            loc_3132D4:					  ; ...
00016238 5D49                       		subq.w	#6,a1
0001623A                            
0001623A                            loc_3132D6:					  ; ...
0001623A B869 FFFC                  		cmp.w	-4(a1),d4
0001623E 63F8                       		bls.s	loc_3132D4
00016240 31C9 CF92                  		move.w	a1,($FFFFCF92).w
00016244 3478 CF94                  		move.w	($FFFFCF94).w,a2
00016248 0644 0150                  		add.w	#$150,d4
0001624C 6000                       		bra.s	loc_3132EE
0001624E                            ; ---------------------------------------------------------------------------
0001624E                            
0001624E                            loc_3132EA:					  ; ...
0001624E 45EA 0006                  		lea	6(a2),a2
00016252                            
00016252                            loc_3132EE:					  ; ...
00016252 B86A 0002                  		cmp.w	2(a2),d4
00016256 62F6                       		bhi.s	loc_3132EA
00016258 6000                       		bra.s	loc_3132F8
0001625A                            ; ---------------------------------------------------------------------------
0001625A                            
0001625A                            loc_3132F6:					  ; ...
0001625A 5D4A                       		subq.w	#6,a2
0001625C                            
0001625C                            loc_3132F8:					  ; ...
0001625C B86A FFFC                  		cmp.w	-4(a2),d4
00016260 63F8                       		bls.s	loc_3132F6
00016262 31CA CF94                  		move.w	a2,($FFFFCF94).w
00016266 31C9 CF96                  		move.w	a1,($FFFFCF96).w
0001626A 31CA CF98                  		move.w	a2,($FFFFCF98).w
0001626E 4E75                       		rts
00016270                            
00016270                            ; =============== S U B	R O U T	I N E =======================================
00016270                            
00016270                            
00016270                            sub_31330C:					  ; ...
00016270 3278 CF92                  		move.w	($FFFFCF92).w,a1
00016274 3478 CF94                  		move.w	($FFFFCF94).w,a2
00016278 B5C9                       		cmp.l	a1,a2
0001627A 6700 0000                  		beq.w	return_3133AA
0001627E 0C68 005A 0030             		cmp.w	#$5A,$30(a0)
00016284 6400 0000                  		bcc.w	return_3133AA
00016288 3428 0008                  		move.w	8(a0),d2
0001628C 3628 000C                  		move.w	$C(a0),d3
00016290 5142                       		sub.w	#8,d2
00016292 7A00                       		moveq	#0,d5
00016294 1A28 0016                  		move.b	$16(a0),d5
00016298 5705                       		subq.b	#3,d5
0001629A 9645                       		sub.w	d5,d3
0001629C 0C28 009C 001A             		cmp.b	#$9C,$1A(a0)
000162A2 6600                       		bne.s	loc_313348
000162A4 0643 000C                  		add.w	#$C,d3
000162A8 7A0A                       		moveq	#$A,d5
000162AA                            
000162AA                            loc_313348:					  ; ...
000162AA 323C 0006                  		move.w	#6,d1
000162AE 3C3C 000C                  		move.w	#$C,d6
000162B2 383C 0010                  		move.w	#$10,d4
000162B6 DA45                       		add.w	d5,d5
000162B8                            
000162B8                            loc_313356:					  ; ...
000162B8 4A51                       		tst.w	(a1)
000162BA 6600 0000                  		bne.w	loc_3133A0
000162BE 3029 0002                  		move.w	2(a1),d0
000162C2 9041                       		sub.w	d1,d0
000162C4 9042                       		sub.w	d2,d0
000162C6 6400                       		bcc.s	loc_31336E
000162C8 D046                       		add.w	d6,d0
000162CA 6500                       		bcs.s	loc_313374
000162CC 6000 0000                  		bra.w	loc_3133A0
000162D0                            ; ---------------------------------------------------------------------------
000162D0                            
000162D0                            loc_31336E:					  ; ...
000162D0 B044                       		cmp.w	d4,d0
000162D2 6200 0000                  		bhi.w	loc_3133A0
000162D6                            
000162D6                            loc_313374:					  ; ...
000162D6 3029 0004                  		move.w	4(a1),d0
000162DA 9041                       		sub.w	d1,d0
000162DC 9043                       		sub.w	d3,d0
000162DE 6400                       		bcc.s	loc_313386
000162E0 D046                       		add.w	d6,d0
000162E2 6500                       		bcs.s	loc_31338C
000162E4 6000 0000                  		bra.w	loc_3133A0
000162E8                            ; ---------------------------------------------------------------------------
000162E8                            
000162E8                            loc_313386:					  ; ...
000162E8 B045                       		cmp.w	d5,d0
000162EA 6200 0000                  		bhi.w	loc_3133A0
000162EE                            
000162EE                            loc_31338C:					  ; ...
000162EE 32BC 0604                  		move.w	#$604,(a1)
000162F2 6100                       		bsr.s	sub_3133AC
000162F4 47F8 CFB2                  		lea	($FFFFCFB2).w,a3
000162F8                            
000162F8                            loc_313396:					  ; ...
000162F8 4A5B                       		tst.w	(a3)+
000162FA 66FC                       		bne.s	loc_313396
000162FC 3709                       		move.w	a1,-(a3)
000162FE 5278 CFB0                  		addq.w	#1,($FFFFCFB0).w
00016302                            
00016302                            loc_3133A0:					  ; ...
00016302 43E9 0006                  		lea	6(a1),a1
00016306 B5C9                       		cmp.l	a1,a2
00016308 6600 FFAE                  		bne.w	loc_313356
0001630C                            
0001630C                            return_3133AA:					  ; ...
0001630C 4E75                       		rts
0001630E                            ; End of function sub_31330C
0001630E                            
0001630E                            
0001630E                            ; =============== S U B	R O U T	I N E =======================================
0001630E                            
0001630E                            
0001630E                            sub_3133AC:					  ; ...
0001630E 5378 CFA0                  		subq.w	#1,($FFFFCFA0).w
00016312 6000 B752                  		bra.w	CollectRing
00016316                            ; End of function sub_3133AC
00016316                            
00016316                            
00016316                            ; =============== S U B	R O U T	I N E =======================================
00016316                            
00016316                            
00016316                            sub_3133B4:					  ; ...
00016316 3078 CF92                  		move.w	($FFFFCF92).w,a0
0001631A 3878 CF94                  		move.w	($FFFFCF94).w,a4
0001631E B9C8                       		cmp.l	a0,a4
00016320 6600                       		bne.s	loc_3133C2
00016322 4E75                       		rts
00016324                            ; ---------------------------------------------------------------------------
00016324                            
00016324                            loc_3133C2:					  ; ...
00016324 47F8 F700                  		lea	($FFFFF700).w,a3
00016328                            
00016328                            loc_3133C6:					  ; ...
00016328 4A50                       		tst.w	(a0)
0001632A 6B00 0000                  		bmi.w	loc_313426
0001632E 3628 0002                  		move.w	2(a0),d3
00016332 9653                       		sub.w	(a3),d3
00016334 0643 0080                  		add.w	#$80,d3
00016338 3428 0004                  		move.w	4(a0),d2
0001633C 946B 0004                  		sub.w	4(a3),d2
00016340 0242 07FF                  		and.w	#$7FF,d2
00016344 5042                       		add.w	#8,d2
00016346 6B00                       		bmi.s	loc_313426
00016348 0C42 00F0                  		cmp.w	#$F0,d2
0001634C 6C00                       		bge.s	loc_313426
0001634E 0642 0078                  		add.w	#$78,d2
00016352 43F9 0000 0000             		lea	(word_3134F8).l,a1
00016358 7200                       		moveq	#0,d1
0001635A 1228 0001                  		move.b	1(a0),d1
0001635E 6600                       		bne.s	loc_313404
00016360 1238 FEC3                  		move.b	($FFFFFEC3).w,d1
00016364                            
00016364                            loc_313404:					  ; ...
00016364 D241                       		add.w	d1,d1
00016366 D2F1 1000                  		add.w	(a1,d1.w),a1
0001636A 1019                       		move.b	(a1)+,d0
0001636C 4880                       		ext.w	d0
0001636E D042                       		add.w	d2,d0
00016370 34C0                       		move.w	d0,(a2)+
00016372 14D9                       		move.b	(a1)+,(a2)+
00016374 5205                       		addq.b	#1,d5
00016376 14C5                       		move.b	d5,(a2)+
00016378 3019                       		move.w	(a1)+,d0
0001637A 0640 27B2                  		add.w	#$27B2,d0
0001637E 34C0                       		move.w	d0,(a2)+
00016380 3019                       		move.w	(a1)+,d0
00016382 D043                       		add.w	d3,d0
00016384 34C0                       		move.w	d0,(a2)+
00016386                            
00016386                            loc_313426:					  ; ...
00016386 41E8 0006                  		lea	6(a0),a0
0001638A B9C8                       		cmp.l	a0,a4
0001638C 6600 FF9A                  		bne.w	loc_3133C6
00016390 4E75                       		rts
00016392                            ; End of function sub_3133B4
00016392                            
00016392                            
00016392                            ; =============== S U B	R O U T	I N E =======================================
00016392                            
00016392                            
00016392                            sub_313432:					  ; ...
00016392 43F8 CF80                  		lea	($FFFFCF80).w,a1
00016396 7000                       		moveq	#0,d0
00016398 323C 017F                  		move.w	#$17F,d1
0001639C                            
0001639C                            loc_31343C:					  ; ...
0001639C 22C0                       		move.l	d0,(a1)+
0001639E 51C9 FFFC                  		dbf	d1,loc_31343C
000163A2 43F8 CFB0                  		lea	($FFFFCFB0).w,a1
000163A6 323C 000F                  		move.w	#$F,d1
000163AA                            
000163AA                            loc_31344A:					  ; ...
000163AA 22C0                       		move.l	d0,(a1)+
000163AC 51C9 FFFC                  		dbf	d1,loc_31344A
000163B0 7A00                       		moveq	#0,d5
000163B2 7000                       		moveq	#0,d0
000163B4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000163B8 ED08                       		lsl.b	#6,d0
000163BA EA48                       		lsr.w	#5,d0
000163BC 43F9 0000 0000             		lea	(Off_Rings).l,a1
000163C2 3031 0000                  		move.w	(a1,d0.w),d0
000163C6 43F1 0000                  		lea	(a1,d0.w),a1
000163CA 45F8 CF86                  		lea	($FFFFCF86).w,a2
000163CE                            
000163CE                            loc_31346E:					  ; ...
000163CE 3419                       		move.w	(a1)+,d2
000163D0 6B00                       		bmi.s	loc_3134B6
000163D2 3619                       		move.w	(a1)+,d3
000163D4 6B00                       		bmi.s	loc_313496
000163D6 3003                       		move.w	d3,d0
000163D8 E958                       		rol.w	#4,d0
000163DA 0240 0007                  		and.w	#7,d0
000163DE 0243 0FFF                  		and.w	#$FFF,d3
000163E2                            
000163E2                            loc_313482:					  ; ...
000163E2 34FC 0000                  		move.w	#0,(a2)+
000163E6 34C2                       		move.w	d2,(a2)+
000163E8 34C3                       		move.w	d3,(a2)+
000163EA 0642 0018                  		add.w	#$18,d2
000163EE 5245                       		addq.w	#1,d5
000163F0 51C8 FFF0                  		dbf	d0,loc_313482
000163F4 60D8                       		bra.s	loc_31346E
000163F6                            ; ---------------------------------------------------------------------------
000163F6                            
000163F6                            loc_313496:					  ; ...
000163F6 3003                       		move.w	d3,d0
000163F8 E958                       		rol.w	#4,d0
000163FA 0240 0007                  		and.w	#7,d0
000163FE 0243 0FFF                  		and.w	#$FFF,d3
00016402                            
00016402                            loc_3134A2:					  ; ...
00016402 34FC 0000                  		move.w	#0,(a2)+
00016406 34C2                       		move.w	d2,(a2)+
00016408 34C3                       		move.w	d3,(a2)+
0001640A 0643 0018                  		add.w	#$18,d3
0001640E 5245                       		addq.w	#1,d5
00016410 51C8 FFF0                  		dbf	d0,loc_3134A2
00016414 60B8                       		bra.s	loc_31346E
00016416                            ; ---------------------------------------------------------------------------
00016416                            
00016416                            loc_3134B6:					  ; ...
00016416 31C5 FF40                  		move.w	d5,($FFFFFF40).w
0001641A 31FC 0000 FF42             		move.w	#0,($FFFFFF42).w
00016420 70FF                       		moveq	#$FFFFFFFF,d0
00016422 24C0                       		move.l	d0,(a2)+
00016424 43F8 CF82                  		lea	($FFFFCF82).w,a1
00016428 363C 00FE                  		move.w	#$FE,d3
0001642C                            
0001642C                            loc_3134CC:					  ; ...
0001642C 3803                       		move.w	d3,d4
0001642E 45E9 0006                  		lea	6(a1),a2
00016432 3011                       		move.w	(a1),d0
00016434                            
00016434                            loc_3134D4:					  ; ...
00016434 4A52                       		tst.w	(a2)
00016436 6700                       		beq.s	loc_3134E6
00016438 B052                       		cmp.w	(a2),d0
0001643A 6300                       		bls.s	loc_3134E6
0001643C 2211                       		move.l	(a1),d1
0001643E 2012                       		move.l	(a2),d0
00016440 2280                       		move.l	d0,(a1)
00016442 2481                       		move.l	d1,(a2)
00016444 4840                       		swap	d0
00016446                            
00016446                            loc_3134E6:					  ; ...
00016446 45EA 0006                  		lea	6(a2),a2
0001644A 51CC FFE8                  		dbf	d4,loc_3134D4
0001644E 43E9 0006                  		lea	6(a1),a1
00016452 51CB FFD8                  		dbf	d3,loc_3134CC
00016456 4E75                       		rts
00016458                            ; End of function sub_313432
00016458                            
00016458                            ; ---------------------------------------------------------------------------
00016458 0010 0016 001C 0022 0028   word_3134F8:	dc.w	$10,   $16,   $1C,   $22,   $28; 0 ; ...
00016462 002E 0034 003A F805 0000   		dc.w	$2E,   $34,   $3A, -$7FB,     0; 5
0001646C FFF8 F805 0004 FFF8 F801   		dc.w	 -8, -$7FB,	4,    -8, -$7FF; 10
00016476 0008 FFFC F805 0804 FFF8   		dc.w	  8,	-4, -$7FB,  $804,    -8; 15
00016480 F805 000A FFF8 F805 180A   		dc.w  -$7FB,	$A,    -8, -$7FB, $180A; 20
0001648A FFF8 F805 080A FFF8 F805   		dc.w	 -8, -$7FB,  $80A,    -8, -$7FB; 25
00016494 100A FFF8                  		dc.w  $100A,	-8		  ; 30
00016498                            		
00016498                            Off_Rings:
00016498 0000                       		dc.w Rings_GHZ1-Off_Rings
0001649A 0000                       		dc.w Rings_GHZ2-Off_Rings
0001649C 0000                       		dc.w Rings_GHZ3-Off_Rings
0001649E 0000                       		dc.w Rings_GHZ1-Off_Rings
000164A0 0000                       		dc.w Rings_LZ1-Off_Rings
000164A2 0000                       		dc.w Rings_LZ2-Off_Rings
000164A4 0000                       		dc.w Rings_LZ3-Off_Rings
000164A6 0000                       		dc.w Rings_SBZ3-Off_Rings
000164A8 0000                       		dc.w Rings_MZ1-Off_Rings
000164AA 0000                       		dc.w Rings_MZ2-Off_Rings
000164AC 0000                       		dc.w Rings_MZ3-Off_Rings
000164AE 0000                       		dc.w Rings_MZ1-Off_Rings
000164B0 0000                       		dc.w Rings_SLZ1-Off_Rings
000164B2 0000                       		dc.w Rings_SLZ2-Off_Rings
000164B4 0000                       		dc.w Rings_SLZ3-Off_Rings
000164B6 0000                       		dc.w Rings_SLZ1-Off_Rings
000164B8 0000                       		dc.w Rings_SYZ1-Off_Rings
000164BA 0000                       		dc.w Rings_SYZ2-Off_Rings
000164BC 0000                       		dc.w Rings_SYZ3-Off_Rings
000164BE 0000                       		dc.w Rings_SYZ1-Off_Rings
000164C0 0000                       		dc.w Rings_SBZ1-Off_Rings
000164C2 0000                       		dc.w Rings_SBZ2-Off_Rings
000164C4 0000                       		dc.w Rings_FZ-Off_Rings
000164C6 0000                       		dc.w Rings_SBZ1-Off_Rings
000164C8 0000                       		dc.w Rings_End-Off_Rings
000164CA 0000                       		dc.w Rings_End-Off_Rings
000164CC 0000                       		dc.w Rings_End-Off_Rings
000164CE 0000                       		dc.w Rings_End-Off_Rings
000164D0 0000                       		dc.w Rings_ABZ2-Off_Rings
000164D2 0000                       		dc.w Rings_ABZ2-Off_Rings
000164D4 0000                       		dc.w Rings_ABZ1-Off_Rings
000164D6 0000 0000 0000             Rings_Null:	dc.b 0, 0, 0, 0, 0,	0
000164DC                            Rings_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Rings.bin"
000164E0                            			even
000164E0                            Rings_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Rings.bin"
000164E4                            			even
000164E4                            Rings_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Rings.bin"
000164E8                            			even
000164E8                            Rings_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Rings.bin"
000164EC                            			even
000164EC                            Rings_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Rings.bin"
000164F0                            			even
000164F0                            Rings_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Rings.bin"
000164F4                            			even
000164F4                            Rings_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Rings.bin"
000164F8                            			even
000164F8                            Rings_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Rings.bin"
000164FC                            			even
000164FC                            Rings_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Rings.bin"
00016500                            			even
00016500                            Rings_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Rings.bin"
00016504                            			even
00016504                            Rings_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Rings.bin"
00016508                            			even
00016508                            Rings_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Rings.bin"
0001650C                            			even
0001650C                            Rings_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Rings.bin"
00016510                            			even
00016510                            Rings_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Rings.bin"
00016514                            			even
00016514                            Rings_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Rings.bin"
00016518                            			even
00016518                            Rings_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Rings.bin"
0001651C                            			even
0001651C                            Rings_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Rings.bin"
00016520                            			even
00016520                            Rings_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Rings.bin"
00016524                            			even
00016524                            Rings_FZ:	incbin	"LevelConverter\Final Zone\Rings.bin"
00016528                            			even
00016528                            Rings_End:	incbin	"LevelConverter\Ending\Rings.bin"
0001652C                            			even
0001652C                            Rings_ABZ1:	incbin	"LevelConverter\abz1\Rings.bin"
00016530                            			even
00016530                            Rings_ABZ2:	incbin	"LevelConverter\abz2\Rings.bin"
00016534                            			even
00016534                            
00016534                            ; ---------------------------------------------------------------------------
00016534                            ; Subroutine to	load a level's objects (Objects manager for Sonic 1)
00016534                            ; This one is ported from Sonic 2 so it uses Object Indexes that are in
00016534                            ; Sonic 2 (S2) format only
00016534                            ; ---------------------------------------------------------------------------
00016534                            
00016534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016534                            
00016534                            
00016534                            ; =============== S U B	R O U T	I N E =======================================
00016534                            
00016534                            
00016534                            ;ObjPosLoad:					  ; ...
00016534                            ; ---------------------------------------------------------------------------
00016534                            ; Objects Manager
00016534                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
00016534                            ; normal s2, in this version every object gets an entry in the respawn table.
00016534                            ; This is necessary to get the additional y-range checks to work.
00016534                            ;
00016534                            ; input variables:
00016534                            ;  -none-
00016534                            ;
00016534                            ; writes:
00016534                            ;  d0, d1, d2
00016534                            ;  d3 = upper boundary to load object
00016534                            ;  d4 = lower boundary to load object
00016534                            ;  d5 = #$FFF, used to filter out object's y position
00016534                            ;  d6 = camera position
00016534                            ;
00016534                            ;  a0 = address in object placement list
00016534                            ;  a3 = address in object respawn table
00016534                            ;  a6 = object loading routine
00016534                            ; ---------------------------------------------------------------------------
00016534                             
00016534                            ; loc_17AA4
00016534                            ObjPosLoad:
00016534 7000                       	moveq	#0,d0
00016536 1038 F76C                  	move.b	(v_opl_routine).w,d0
0001653A 4EFB 0000                  	jmp	ObjectsManager_States(pc,d0.w)
0001653E                             
0001653E                            ; ============== JUMP TABLE	=============================================
0001653E                            ObjectsManager_States:
0001653E 6000 0000                  	bra.w	ObjectsManager_Init		; 0
00016542 6000 0000                  	bra.w	ObjectsManager_Main		; 2
00016546 6000 0000                  	bra.w	ObjectsManager_Main		; 4
0001654A 4E75                       	rts
0001654C                            ; ============== END JUMP TABLE	=============================================
0001654C                             
0001654C                            ObjectsManager_Init:
0001654C 5838 F76C                  	addq.b	#4,(v_opl_routine).w
00016550                             
00016550 41F8 C900                  	lea     (v_objstate).w,a0
00016554 7000                       	moveq   #0,d0
00016556 223C 0000 00C0             	move.l  #$C0,d1 ; set loop counter
0001655C                            OPL_ClrList:
0001655C 20C0                       	move.l  d0,(a0)+
0001655E 51C9 FFFC                  	dbf     d1, OPL_ClrList
00016562                             
00016562 3038 FE10                  	move.w	(v_zone).w,d0
00016566 ED08                       	lsl.b	#6,d0
00016568 E848                       	lsr.w	#4,d0
0001656A 41F9 0000 0000             	lea		(ObjPos_Index).l,a0    ; load the first pointer in the object layout list pointer index,
00016570 2248                       	movea.l	a0,a1
00016572 D0F0 0000                  	adda.w	(a0,d0.w),a0           ; load the pointer to the current object layout
00016576                            
00016576                            ; initialize each object load address with the first object in the layout
00016576 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w
0001657A 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w
0001657E 47F8 C900                  	lea		(v_objstate).w,a3
00016582                            
00016582 3C38 F700                  	move.w	(v_screenposx).w,d6
00016586 0446 0080                  	subi.w	#$80,d6	                ; look one chunk to the left
0001658A 6400                       	bcc.s	loc_notneg	                ; if the result was negative,
0001658C 7C00                       	moveq	#0,d6	                ; cap at zero
0001658E                            loc_notneg:
0001658E 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
00016592                            
00016592 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0	; get first object in layout
00016596                             
00016596                            ; at the beginning of a level this gives respawn table entries to any object that is one chunk
00016596                            ; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
00016596                            loc_D944:
00016596 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
00016598 6300                       	bls.s	loc_D956		; if yes, branch
0001659A 5C48                       	addq.w	#6,a0	        ; next object
0001659C 524B                       	addq.w	#1,a3	        ; respawn index of next object going right
0001659E 60F6                       	bra.s	loc_D944        ; continue with next object
000165A0                            ; ---------------------------------------------------------------------------
000165A0                             
000165A0                            loc_D956:
000165A0 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember rightmost object that has been processed, so far (we still need to look forward)
000165A4 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
000165A8                            
000165A8 47F8 C900                  	lea		(v_objstate).w,a3	        ; reset a3
000165AC 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0	; reset a0
000165B0 0446 0080                  	subi.w	#$80,d6						; look even farther left (any object behind this is out of range)
000165B4 6500                       	bcs.s	loc_D976					; branch, if camera position would be behind level's left boundary
000165B6                             
000165B6                            loc_D964:	; count how many objects are behind the screen that are not in range and need to remember their state
000165B6 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
000165B8 6300                       	bls.s	loc_D976	; if yes, branch
000165BA 5C48                       	addq.w	#6,a0
000165BC 524B                       	addq.w	#1,a3	        ; respawn index of next object going left
000165BE 60F6                       	bra.s	loc_D964        ; continue with next object
000165C0                            ; ---------------------------------------------------------------------------
000165C0                             
000165C0                            loc_D976:
000165C0 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w	; remember current object from the left
000165C4 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
000165C8                             
000165C8 31FC FFFF F76E             	move.w	#-1,(v_screenposx_last).w	; make sure ObjectsManager_GoingForward is run
000165CE                             
000165CE 3038 F704                  	move.w	(v_screenposy).w,d0
000165D2 0240 FF80                  	andi.w	#$FF80,d0
000165D6 31C0 FC10                  	move.w	d0,(v_screenposy_last).w	; make sure the Y check isn't run unnecessarily during initialization
000165DA                            ; ---------------------------------------------------------------------------
000165DA                             
000165DA                            ObjectsManager_Main:
000165DA                            	; get coarse camera position
000165DA 3238 F704                  	move.w	(v_screenposy).w,d1
000165DE 0441 0080                  	subi.w	#$80,d1
000165E2 0241 FF80                  	andi.w	#$FF80,d1
000165E6 31C1 FC18                  	move.w	d1,(v_screenposy_coarse).w
000165EA                             
000165EA 3238 F700                  	move.w	(v_screenposx).w,d1
000165EE 0441 0080                  	subi.w	#$80,d1
000165F2 0241 FF80                  	andi.w	#$FF80,d1
000165F6 31C1 FC14                  	move.w	d1,(v_screenposx_coarse).w
000165FA                             
000165FA 4A78 F724                  	tst.w	(v_limittop1).w					; does this level y-wrap?
000165FE 6A00                       	bpl.s	ObjMan_Main_NoYWrap				; if not, branch
00016600 4DF9 0000 0000             	lea		(ChkLoadObj_YWrap).l,a6			; set object loading routine
00016606 3638 F704                  	move.w	(v_screenposy).w,d3
0001660A 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
0001660E 3803                       	move.w	d3,d4
00016610 0644 0200                  	addi.w	#$200,d4						; set lower boundary
00016614 0443 0080                  	subi.w	#$80,d3							; set upper boundary
00016618 6A00                       	bpl.s	loc_ok								; branch, if upper boundary > 0
0001661A 0243 07FF                  	andi.w	#$7FF,d3						; wrap value
0001661E 6000                       	bra.s	ObjMan_Main_Cont
00016620                            ; ---------------------------------------------------------------------------
00016620                            loc_ok:
00016620 303C 07FF                  	move.w	#$7FF,d0
00016624 5240                       	addq.w	#1,d0
00016626 B840                       	cmp.w	d0,d4
00016628 6300                       	bls.s	positive						; branch, if lower boundary < $7FF
0001662A 0244 07FF                  	andi.w	#$7FF,d4						; wrap value
0001662E 6000                       	bra.s	ObjMan_Main_Cont
00016630                            ; ---------------------------------------------------------------------------
00016630                            
00016630                            ObjMan_Main_NoYWrap:
00016630 3638 F704                  	move.w	(v_screenposy).w,d3
00016634 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
00016638 3803                       	move.w	d3,d4
0001663A 0644 0200                  	addi.w	#$200,d4						; set lower boundary
0001663E 0443 0080                  	subi.w	#$80,d3							; set upper boundary
00016642 6A00                       	bpl.s	positive
00016644 7600                       	moveq	#0,d3							; no negative values allowed
00016646                            positive:
00016646 4DF9 0000 0000             	lea		(ChkLoadObj).l,a6				; set object loading routine
0001664C                             
0001664C                            ObjMan_Main_Cont:
0001664C 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
00016650 3C38 F700                  	move.w	(v_screenposx).w,d6
00016654 0246 FF80                  	andi.w	#$FF80,d6
00016658 BC78 F76E                  	cmp.w	(v_screenposx_last).w,d6		; is the X range the same as last time?
0001665C 6700 0000                  	beq.w	ObjectsManager_SameXRange		; if yes, branch
00016660 6C00                       	bge.s	ObjectsManager_GoingForward		; if new pos is greater than old pos, branch
00016662                             
00016662                            ; if the player is moving back
00016662 31C6 F76E                  	move.w	d6,(v_screenposx_last).w		; remember current position for next time
00016666                            
00016666 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object going left
0001666A 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
0001666E                            
0001666E 0446 0080                  	subi.w	#$80,d6							; look one chunk to the left
00016672 6500                       	bcs.s	ObjMan_GoingBack_Part2			; branch, if camera position would be behind level's left boundary
00016674                            
00016674 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
0001667A 6600                       	bne.s	ObjMan_GoingBack_Part2			; branch, if there are none
0001667C                            
0001667C                            ; load all objects left of the screen that are now in range
0001667C                            loc_D9A6: 
0001667C BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
00016680 6C00                       	bge.s	ObjMan_GoingBack_Part2			; if it is, branch
00016682 5D48                       	subq.w	#6,a0							; get object's address
00016684 534B                       	subq.w	#1,a3							; and respawn table index
00016686 4E96                       	jsr		(a6)							; load object
00016688 6600                       	bne.s	loc_undoloadobject					; branch, if SST is full
0001668A 5D48                       	subq.w	#6,a0
0001668C 60EE                       	bra.s	loc_D9A6						; continue with previous object
0001668E                            ; ---------------------------------------------------------------------------
0001668E                             
0001668E                            loc_undoloadobject:							; undo a few things, if the object couldn't load
0001668E 5C48                       	addq.w	#6,a0							; go back to last object
00016690 524B                       	addq.w	#1,a3							; since we didn't load the object, undo last change
00016692                             
00016692                            ObjMan_GoingBack_Part2:
00016692 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object going left
00016696 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
0001669A 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object going right
0001669E 3678 F778                  	movea.w	(Obj_respawn_index_right).w,a3	; and its respawn table index
000166A2 0646 0300                  	addi.w	#$300,d6						; look two chunks beyond the right edge of the screen
000166A6                            
000166A6                            ; subtract number of objects that have been moved out of range (from the right side) 
000166A6                            loc_D9DE: 
000166A6 BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
000166AA 6E00                       	bgt.s	loc_D9F0						; if it is, branch
000166AC 5D48                       	subq.w	#6,a0							; get object's address
000166AE 534B                       	subq.w	#1,a3							; and respawn table index
000166B0 60F4                       	bra.s	loc_D9DE						; continue with previous object
000166B2                            ; ---------------------------------------------------------------------------
000166B2                            loc_D9F0:
000166B2 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember next object going right
000166B6 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
000166BA 6000                       	bra.s	ObjectsManager_SameXRange
000166BC                            ; ---------------------------------------------------------------------------
000166BC                            ObjectsManager_GoingForward:
000166BC 31C6 F76E                  	move.w	d6,(v_screenposx_last).w
000166C0                             
000166C0 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object from the right
000166C4 3678 F778                  	movea.w (Obj_respawn_index_right).w,a3	; and its respawn table index
000166C8 0646 0280                  	addi.w	#$280,d6						; look two chunks forward
000166CC 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
000166D2 6600                       	bne.s	ObjMan_GoingForward_Part2		; branch, if there are none
000166D4                            
000166D4                            ; load all objects right of the screen that are now in range
000166D4                            loc_DA02: 
000166D4 BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
000166D6 6300                       	bls.s	ObjMan_GoingForward_Part2		; if yes, branch
000166D8 4E96                       	jsr		(a6)							; load object (and get address of next object)
000166DA 524B                       	addq.w	#1,a3							; respawn index of next object to the right
000166DC 67F6                       	beq.s	loc_DA02						; continue loading objects, if the SST isn't full
000166DE                             
000166DE                            ObjMan_GoingForward_Part2:
000166DE 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w		; remember next object from the right
000166E2 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
000166E6 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object from the left
000166EA 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
000166EE 0446 0300                  	subi.w	#$300,d6						; look one chunk behind the left edge of the screen
000166F2 6500                       	bcs.s	ObjMan_GoingForward_End			; branch, if camera position would be behind level's left boundary
000166F4                            
000166F4                            ; subtract number of objects that have been moved out of range (from the left) 
000166F4                            loc_DA24: 
000166F4 BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
000166F6 6300                       	bls.s	ObjMan_GoingForward_End			; if yes, branch
000166F8 5C48                       	addq.w	#6,a0	                		; next object
000166FA 524B                       	addq.w	#1,a3	                		; respawn index of next object to the left
000166FC 60F6                       	bra.s	loc_DA24	        			; continue with next object
000166FE                            ; ---------------------------------------------------------------------------
000166FE                            
000166FE                            ObjMan_GoingForward_End:
000166FE 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object from the left
00016702 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016706                             
00016706                            ObjectsManager_SameXRange:
00016706 3C38 F704                  	move.w	(v_screenposy).w,d6
0001670A 0246 FF80                  	andi.w	#$FF80,d6
0001670E 3606                       	move.w	d6,d3
00016710 BC78 FC10                  	cmp.w	(v_screenposy_last).w,d6		; is the y range the same as last time?
00016714 6700 0000                  	beq.w	ObjectsManager_SameYRange		; if yes, branch
00016718 6C00                       	bge.s	ObjectsManager_GoingDown		; if the player is moving down
0001671A                             
0001671A                            ; if the player is moving up
0001671A 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
0001671E 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap			; if not, branch
00016720 4A46                       	tst.w	d6	
00016722 6600                       	bne.s	ObjMan_GoingUp_YWrap
00016724 0C78 0080 FC10             	cmpi.w	#$80,(v_screenposy_last).w
0001672A 6600                       	bne.s	ObjMan_GoingDown_YWrap
0001672C                             
0001672C                            ObjMan_GoingUp_YWrap:
0001672C 0443 0080                  	subi.w	#$80,d3							; look one chunk up
00016730 6A00                       	bpl.s	ObjectsManager_YCheck			; go to y check, if camera y position >= $80
00016732 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
00016736 6000                       	bra.s	ObjectsManager_YCheck
00016738                             
00016738                            ; ---------------------------------------------------------------------------
00016738                            ObjMan_GoingUp_NoYWrap:
00016738 0443 0080                  	subi.w	#$80,d3							; look one chunk up
0001673C 6B00 0000                  	bmi.w	ObjectsManager_SameYRange		; don't do anything if camera y position is < $80
00016740 6000                       	bra.s	ObjectsManager_YCheck
00016742                            ; ---------------------------------------------------------------------------
00016742                             
00016742                            ObjectsManager_GoingDown:
00016742 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
00016746 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap		; if not, branch
00016748 4A78 FC10                  	tst.w	(v_screenposy_last).w
0001674C 6600                       	bne.s	ObjMan_GoingDown_YWrap
0001674E 0C46 0080                  	cmpi.w	#$80,d6
00016752 66D8                       	bne.s	ObjMan_GoingUp_YWrap
00016754                             
00016754                            ObjMan_GoingDown_YWrap:
00016754 0643 0180                  	addi.w	#$180,d3						; look one chunk down
00016758 0C43 07FF                  	cmpi.w	#$7FF,d3
0001675C 6500                       	bcs.s	ObjectsManager_YCheck			; go to  check, if camera y position < $7FF
0001675E 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
00016762 6000                       	bra.s	ObjectsManager_YCheck
00016764                            ; ---------------------------------------------------------------------------
00016764                             
00016764                            ObjMan_GoingDown_NoYWrap:
00016764 0643 0180                  	addi.w	#$180,d3						; look one chunk down
00016768 0C43 07FF                  	cmpi.w	#$7FF,d3
0001676C 6200                       	bhi.s	ObjectsManager_SameYRange		; don't do anything, if camera is too close to bottom
0001676E                             
0001676E                            ObjectsManager_YCheck:
0001676E 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; get an empty object slot
00016774 6600                       	bne.s	ObjectsManager_SameYRange		; branch, if there are none
00016776 3803                       	move.w	d3,d4
00016778 0644 0080                  	addi.w	#$80,d4
0001677C 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
00016780 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get next object going left
00016784 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
00016788 2E38 F770                  	move.l	(Obj_load_addr_right).w,d7		; get next object going right
0001678C 9E88                       	sub.l	a0,d7							; d7 = number of objects between the left and right boundaries * 6
0001678E 6700                       	beq.s	ObjectsManager_SameYRange		; branch if there are no objects inbetween
00016790 5448                       	addq.w	#2,a0							; align to object's y position
00016792                            
00016792                            ; check, if current object needs to be loaded
00016792                            loc_checknext:	
00016792 4A13                           tst.b	(a3)	        				; is object already loaded?
00016794 6B00                           bmi.s	loc_nextobj						; if yes, branch
00016796 3210                       	move.w	(a0),d1                  		; get object's y position and status info
00016798 C245                       	and.w	d5,d1	                 		; get y-position
0001679A B243                       	cmp.w	d3,d1                    		; compare to upper boundary to load object
0001679C 6500                       	bcs.s	loc_nextobj						; branch, if object is out of range from the top
0001679E B244                       	cmp.w	d4,d1                    		; compare to lower boundary to load object
000167A0 6200                       	bhi.s	loc_nextobj						; branch, if object is out of range from the bottom
000167A2 08D3 0007                  	bset	#7,(a3)	                 		; mark object as loaded
000167A6                            ; load object
000167A6 3368 FFFE 0008             	move.w	-2(a0),x_pos(a1)
000167AC 3210                       	move.w	(a0),d1
000167AE 3401                       	move.w	d1,d2                    		; copy for later
000167B0 C245                       	and.w	d5,d1	                 		; get y-position
000167B2 3341 000C                  	move.w	d1,y_pos(a1)
000167B6 E75A                       	rol.w	#3,d2                    		; adjust bits
000167B8 0202 0003                  	andi.b	#3,d2                    		; get render flags
000167BC 1342 0001                  	move.b	d2,render_flags(a1)
000167C0 1342 0022                  	move.b	d2,status(a1)
000167C4 12A8 0002                  	move.b	2(a0),(a1)                 		; get object id
000167C8 1368 0003 0028             	move.b	3(a0),subtype(a1)
000167CE 334B 0014                  	move.w	a3,respawn_index(a1)
000167D2 4EB9 0000 0000             	jsr		(SingleObjLoad).l	           		; find new object slot
000167D8 6600                       	bne.s	ObjectsManager_SameYRange		; brach, if there are none left
000167DA                            loc_nextobj:
000167DA 5C48                       	addq.w	#6,a0							; address of next object
000167DC 524B                       	addq.w	#1,a3							; and its respawn index
000167DE 5D47                       	subq.w	#6,d7							; subtract from size of remaining objects
000167E0 66B0                       	bne.s	loc_checknext						; branch, if there are more
000167E2                            
000167E2                            ObjectsManager_SameYRange:
000167E2 31C6 FC10                  	move.w	d6,(v_screenposy_last).w
000167E6 4E75                       	rts
000167E8                            ; ===========================================================================
000167E8                            ; ---------------------------------------------------------------------------
000167E8                            ; Subroutines to check if an object needs to be loaded,
000167E8                            ; with and without y-wrapping enabled.
000167E8                            ;
000167E8                            ; input variables:
000167E8                            ;  d3 = upper boundary to load object
000167E8                            ;  d4 = lower boundary to load object
000167E8                            ;  d5 = #$FFF, used to filter out object's y position
000167E8                            ;
000167E8                            ;  a0 = address in object placement list
000167E8                            ;  a1 = object
000167E8                            ;  a3 = address in object respawn table
000167E8                            ;
000167E8                            ; writes:
000167E8                            ;  d1, d2, d7
000167E8                            ; ---------------------------------------------------------------------------
000167E8                            ChkLoadObj_YWrap:
000167E8 4A13                       	tst.b	(a3)	        ; is object already loaded?
000167EA 6A00                       	bpl.s	loc_notloaded2		; if not, branch
000167EC 5C48                       	addq.w	#6,a0           ; next object
000167EE 7200                       	moveq	#0,d1           ; let the objects manager know that it can keep going
000167F0 4E75                       	rts
000167F2                            ; ===========================================================================
000167F2                            
000167F2                            loc_notloaded2:
000167F2 3E18                       		move.w	(a0)+,d7                 ; get object's x position
000167F4 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
000167F6 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
000167F8 6B00                        	    bmi.s	loc_noYcheck	         	 ; if yes, branch
000167FA C245                       		and.w	d5,d1            	     ; get y-position
000167FC B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
000167FE 6400                       	    bcc.s	loc_loadobject2
00016800 B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
00016802 6300                       	    bls.s	loc_loadobject2
00016804 5448                       	    addq.w	#2,a0					 ; address of next object
00016806 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
00016808 4E75                       	    rts
0001680A                            ; ---------------------------------------------------------------------------
0001680A                            loc_noYcheck:
0001680A C245                        		and.w	d5,d1	                 ; get y-position
0001680C                            loc_loadobject2:
0001680C 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
00016810 3347 0008                  		move.w	d7,x_pos(a1)
00016814 3341 000C                  		move.w	d1,y_pos(a1)
00016818 E75A                       		rol.w	#3,d2                    ; adjust bits
0001681A 0202 0003                  		andi.b	#3,d2                    ; get render flags
0001681E 1342 0001                  		move.b	d2,render_flags(a1)
00016822 1342 0022                  		move.b	d2,status(a1)
00016826 1298                       		move.b	(a0)+,(a1)                 ; get object id
00016828 1358 0028                  		move.b	(a0)+,subtype(a1)
0001682C 334B 0014                  	    move.w	a3,respawn_index(a1)
00016830 6000 0000                  		bra.w	SingleObjLoad              ; find empty slot
00016834                            ; ===========================================================================
00016834                            ChkLoadObj:
00016834 4A13                       		tst.b	(a3)	        		; is object already loaded?
00016836 6A00                       		bpl.s	loc_notloaded				; if not, branch
00016838 5C48                       		addq.w	#6,a0           		; next object
0001683A 7200                       		moveq	#0,d1           		; let the objects manager know that it can keep going
0001683C 4E75                       		rts
0001683E                            ; ===========================================================================
0001683E                            
0001683E                            loc_notloaded:
0001683E 3E18                       		move.w	(a0)+,d7                 ; get object's x position
00016840 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
00016842 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
00016844 6B00                        	    bmi.s	loc_noYcheck2	         	 ; if yes, branch
00016846 C245                       		and.w	d5,d1	                 ; get y-position
00016848 B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
0001684A 6500                       	    bcs.s	loc_outofrange				 ; branch, if object is out of range from the top
0001684C B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
0001684E 6300                       	    bls.s	loc_loadobject              ; branch, if object is in range from the bottom
00016850                            loc_outofrange:
00016850 5448                       	    addq.w	#2,a0					 ; address of next object
00016852 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
00016854 4E75                       	    rts
00016856                            ; ---------------------------------------------------------------------------
00016856                            loc_noYcheck2:
00016856 C245                        		and.w	d5,d1                 ; get y-position
00016858                            loc_loadobject:
00016858 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
0001685C 3347 0008                  		move.w	d7,x_pos(a1)
00016860 3341 000C                  		move.w	d1,y_pos(a1)
00016864 E75A                       		rol.w	#3,d2                    ; adjust bits
00016866 0202 0003                  		andi.b	#3,d2                    ; get render flags
0001686A 1342 0001                  		move.b	d2,render_flags(a1)
0001686E 1342 0022                  		move.b	d2,status(a1)
00016872 1298                       		move.b	(a0)+,(a1)                 ; get object id
00016874 1358 0028                  		move.b	(a0)+,subtype(a1)
00016878 334B 0014                  	    move.w	a3,respawn_index(a1)
0001687C                             	; continue straight to SingleObjLoad
0001687C                            ; End of function ChkLoadObj
0001687C                            ; ===========================================================================
0001687C                            
0001687C                            ; End of function sub_313D2E
0001687C                            
0001687C                            
0001687C                            ; ---------------------------------------------------------------------------
0001687C                            ; Single object	loading	subroutine
0001687C                            ; ---------------------------------------------------------------------------
0001687C                            
0001687C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001687C                            
0001687C                            FindFreeObj:
0001687C                            SingleObjLoad:
0001687C 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
00016880 303C 005F                  		move.w	#$5F,d0
00016884                            
00016884                            loc_DA94:
00016884 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
00016886 6700                       		beq.s	locret_DAA0	; if yes, branch
00016888 43E9 0040                  		lea	object_size(a1),a1	; goto next object RAM slot
0001688C 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
00016890                            
00016890                            locret_DAA0:
00016890 4E75                       		rts	
00016892                            ; End of function SingleObjLoad
00016892                            
00016892                            
00016892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016892                            
00016892                            FindNextFreeObj:
00016892                            SingleObjLoad2:
00016892 2248                       	movea.l	a0,a1
00016894 303C F000                  	move.w	#$F000,d0	; $D000
00016898 9048                       	sub.w	a0,d0	; subtract current object location
0001689A EC48                       	lsr.w	#6,d0
0001689C 103B 0000                  	move.b	Find_First_Sprite_Table(pc,d0.w),d0
000168A0 6B00                       	bmi.s	return_18014
000168A2                             
000168A2                            SingleObjLoad2_
000168A2 43E9 0040                  	lea	object_size(a1),a1 ; load obj address ; goto next object RAM slot
000168A6 4A11                       	tst.b	id(a1)	; is object RAM slot empty?
000168A8 57C8 FFF8                  	dbeq	d0,SingleObjLoad2_	; if yes, branch
000168AC                             
000168AC                            return_18014:
000168AC 4E75                       	rts
000168AE                            ; ===========================================================================
000168AE                            Find_First_Sprite_Table:	; map n*64/64 to n*68/64
000168AE FF00 0102 0304 0506 0708+  	dc.b	$FF,  $0,  $1,  $2,  $3,  $4,  $5,  $6,  $7,  $8,  $9,  $A,  $B
000168BB 0C0D 0E0F 0F10 1112 1314+  	dc.b	 $C,  $D,  $E,  $F,  $F, $10, $11, $12, $13, $14, $15, $16, $17
000168C8 1819 1A1B 1C1D 1E1F 1F20+  	dc.b	$18, $19, $1A, $1B, $1C, $1D, $1E, $1F, $1F, $20, $21, $22, $23
000168D5 2425 2627 2829 2A2B 2C2D+  	dc.b	$24, $25, $26, $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $2F
000168E2 3031 3233 3435 3637 3839+  	dc.b	$30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3A, $3B, $3C
000168EF 3D3E 3F3F 4041 4243 4445+  	dc.b	$3D, $3E, $3F, $3F, $40, $41, $42, $43, $44, $45, $46, $47, $48
000168FC 494A 4B4C 4D4E 4F4F 5051+  	dc.b	$49, $4A, $4B, $4C, $4D, $4E, $4F, $4F, $50, $51, $52, $53, $54
00016909 5556 5758 595A 5B5C 5D5E+  	dc.b	$55, $56, $57, $58, $59, $5A, $5B, $5C, $5D, $5E, $5F, $5F, $60
00016916 6162 6364 65               	dc.b	$61, $62, $63, $64, $65
0001691B                            ; ===========================================================================
0001691C 00                         	even
0001691C                            ; ---------------------------------------------------------------------------
0001691C                            ; Object 41 - springs
0001691C                            ; ---------------------------------------------------------------------------
0001691C                            
0001691C                            ;===============================================================================
0001691C                            ; Obj41 - Springs - diagonal (no diagonal spring art atm) / horizontal / vertical 
0001691C                            ; [ Start ]
0001691C                            ;===============================================================================
0001691C                            Obj41:
0001691C 7000                                       moveq   #$00, D0
0001691E 1028 0024                                  move.b  routine(A0), D0
00016922 323B 0000                                  move.w  Obj41_Index(PC, D0), D1
00016926 4EBB 1000                                  jsr     Obj41_Index(PC, D1)
0001692A 4EF9 0000 0000                             jmp     (MarkObjGone)                          ; Offset_0x016358
00016930                            Obj41_Index:
00016930 0000                                       dc.w    Obj41_Init-Obj41_Index
00016932 0000                                       dc.w    Obj41_Up-Obj41_Index
00016934 0000                                       dc.w    Obj41_Horizontal-Obj41_Index
00016936 0000                                       dc.w    Obj41_Down-Obj41_Index
00016938 0000                                       dc.w    Obj41_DiagonallyUp-Obj41_Index
0001693A 0000                                       dc.w    Obj41_DiagonallyDown-Obj41_Index
0001693C                            Obj41_Init:
0001693C 5428 0024                                  addq.b  #$02, routine(A0)
00016940 217C 0000 0000 0004                        move.l  #Map_obj41, $0004(A0)           ; Offset_0x018F8C
00016948 317C 0523 0002                             move.w  #$523, $0002(A0)
0001694E 0028 0004 0001                             ori.b   #$04, $0001(A0)
00016954 117C 0010 0023                             move.b  #$10,width_pixels(a0)
0001695A 317C 0200 0018                             move.w	#$200,priority(a0)
00016960 1028 0028                                  move.b  $0028(A0), D0
00016964 E648                                       lsr.w   #$03, D0
00016966 0240 000E                                  andi.w  #$000E, D0
0001696A 303B 0000                                  move.w  Obj41_Init_Subtypes(PC, D0), D0
0001696E 4EFB 0000                                  jmp     Obj41_Init_Subtypes(PC, D0)
00016972                            Obj41_Init_Subtypes:
00016972 0000                                       dc.w    Obj41_Init_Up-Obj41_Init_Subtypes
00016974 0000                                       dc.w    Obj41_Init_Horizontal-Obj41_Init_Subtypes
00016976 0000                                       dc.w    Obj41_Init_Down-Obj41_Init_Subtypes
00016978 0000                                       dc.w    Obj41_Init_DiagonallyUp-Obj41_Init_Subtypes
0001697A 0000                                       dc.w    Obj41_Init_DiagonallyDown-Obj41_Init_Subtypes
0001697C                            Obj41_Init_Horizontal:
0001697C 117C 0004 0024             				move.b	#4,$24(a0)	; use "Obj41_LR" routine
00016982 117C 0002 001C             				move.b	#2,$1C(a0)
00016988 117C 0003 001A             				move.b	#3,$1A(a0)
0001698E 317C 0533 0002             				move.w	#$533,2(a0)
00016994 117C 0008 0023             				move.b	#8,width_pixels(a0)
0001699A 6000                                       bra.s   Obj41_Init_Up
0001699C                            Obj41_Init_Down:
0001699C 117C 0006 0024                             move.b  #$06, routine(A0)
000169A2 117C 0006 001A                             move.b  #$06, $001A(A0)
000169A8 08E8 0001 0022                             bset    #$01, status(A0)
000169AE 6000                                       bra.s   Obj41_Init_Up
000169B0                            Obj41_Init_DiagonallyUp:
000169B0 117C 0008 0024                             move.b  #$08, routine(A0)
000169B6 117C 0004 001C                             move.b  #$04, $001C(A0)
000169BC 117C 0007 001A                             move.b  #$07, $001A(A0)
000169C2 317C 043C 0002                             move.w  #$043C, $0002(A0)
000169C8 6000                                       bra.s   Obj41_Init_Up
000169CA                            Obj41_Init_DiagonallyDown:
000169CA 117C 000A 0024                             move.b  #$0A, routine(A0)
000169D0 117C 0004 001C                             move.b  #$04, $001C(A0)
000169D6 117C 000A 001A                             move.b  #$0A, $001A(A0)
000169DC 317C 043C 0002                             move.w  #$043C, $0002(A0)
000169E2 08E8 0001 0022                             bset    #$01, status(A0)
000169E8                            Obj41_Init_Up:
000169E8 1028 0028                                  move.b  $0028(A0), D0
000169EC 0240 000F                                  andi.w	#$F,d0
000169F0 317B 0000 0030                             move.w  Obj41_Powers(PC, D0), $0030(A0)
000169F6 0800 0001                                  btst    #$01, D0
000169FA 6700                                       beq.s   Offset_0x0188E4
000169FC 08E8 0005 0002                             bset    #$05, $0002(A0)
00016A02 217C 0000 0000 0004                        move.l  #Springs_Mappings_01, $0004(A0)        ; Offset_0x018FA2
00016A0A                            Offset_0x0188E4:
00016A0A                            ;                bsr     ModifySpriteAttr_2P                    ; Offset_0x016CFA
00016A0A 4E75                                       rts
00016A0C                            ;-------------------------------------------------------------------------------                  
00016A0C F000                       Obj41_Powers:		dc.w -$1000		; power	of red spring
00016A0E F600                       		dc.w -$A00		; power	of yellow spring
00016A10                            ;-------------------------------------------------------------------------------                  
00016A10                            Obj41_Up:
00016A10 323C 001B                                  move.w  #$001B, D1
00016A14 343C 0008                                  move.w  #$0008, D2
00016A18 363C 0010                                  move.w  #$0010, D3
00016A1C 3828 0008                                  move.w  $0008(A0), D4
00016A20                            ;                lea     ($FFFFB000).w, A1
00016A20                             ;               moveq   #$03, D6
00016A20                              ;              movem.l D1-D4, -(A7)
00016A20                               ;             bsr     SolidObjectNew                       ; Offset_0x0196FC
00016A20                                ;            btst    #$03, status(A0)
00016A20                                 ;           beq.s   Offset_0x018916
00016A20                                  ;          bsr.s   Offset_0x018938
00016A20                            ;Offset_0x018916:
00016A20                            ;                movem.l (A7)+, D1-D4
00016A20                             ;               lea     ($FFFFB040).w, A1
00016A20                              ;              moveq   #$04, D6
00016A20 6100 0000                                  bsr     SolidObjectNew                       ; Offset_0x0196FC
00016A24 0828 0003 0022                             btst    #$03, status(A0)		; changed to $03 was $04
00016A2A 6700                                       beq.s   Offset_0x01892E
00016A2C 6100                                       bsr.s   Offset_0x018938
00016A2E                            Offset_0x01892E:
00016A2E 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016A34 6000 BD1E                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016A38                            Offset_0x018938:
00016A38 317C 0100 001C                             move.w  #$0100, $001C(A0)
00016A3E 5069 000C                                  addq.w  #$08, $000C(A1)
00016A42 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016A48 08E9 0001 0022                             bset    #$01, status(A1)
00016A4E 08A9 0003 0022                             bclr    #$03, status(A1)
00016A54 137C 0010 001C                             move.b  #$10, $001C(A1)
00016A5A 137C 0002 0024                             move.b  #$02, routine(A1)
00016A60 1028 0028                                  move.b  $0028(A0), D0
00016A64 6A00                                       bpl.s   Offset_0x01896C
00016A66 337C 0000 0010                             move.w  #$0000, $0010(A1)
00016A6C                            Offset_0x01896C:
00016A6C 0800 0000                                  btst    #$00, D0
00016A70 6700                                       beq.s   Offset_0x0189AC
00016A72 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016A78 137C 0001 0027                             move.b  #$01, $0027(A1)
00016A7E 137C 0000 001C                             move.b  #$00, $001C(A1)
00016A84 137C 0000 002C                             move.b  #$00, $002C(A1)
00016A8A 137C 0004 002D                             move.b  #$04, $002D(A1)
00016A90 0800 0001                                  btst    #$01, D0
00016A94 6600                                       bne.s   Offset_0x01899C
00016A96 137C 0001 002C                             move.b  #$01, $002C(A1)
00016A9C                            Offset_0x01899C:
00016A9C 0829 0000 0022                             btst    #$00, status(A1)
00016AA2 6700                                       beq.s   Offset_0x0189AC
00016AA4 4429 0027                                  neg.b   $0027(A1)
00016AA8 4469 0020                                  neg.w   inertia(a1)
00016AAC                            Offset_0x0189AC:
00016AAC 0200 000C                                  andi.b  #$0C, D0
00016AB0 0C00 0004                                  cmpi.b  #$04, D0
00016AB4 6600                                       bne.s   Offset_0x0189C2
00016AB6 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016ABC 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016AC2                            Offset_0x0189C2:
00016AC2 0C00 0008                                  cmpi.b  #$08, D0
00016AC6 6600                                       bne.s   Offset_0x0189D4
00016AC8 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016ACE 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016AD4                            Offset_0x0189D4:
00016AD4 303C 00B1                  				move.w	#$B1,d0
00016AD8 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016ADE 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016AE4                            Obj41_Horizontal:
00016AE4 323C 0013                                  move.w  #$0013, D1
00016AE8 343C 000E                                  move.w  #$000E, D2
00016AEC 363C 000F                                  move.w  #$000F, D3
00016AF0 3828 0008                                  move.w  $0008(A0), D4
00016AF4                                            ;lea     ($FFFFB000).w, A1
00016AF4                                            ;moveq   #$03, D6
00016AF4                                            ;movem.l D1-D4, -(A7)
00016AF4                                            ;bsr     SolidObject                       ; Offset_0x0196FC
00016AF4                                            ;btst    #$05, status(A0)
00016AF4                                            ;beq.s   Offset_0x018A1E
00016AF4                                            ;move.b  status(A0), D1
00016AF4                                            ;move.w  $0008(A0), D0
00016AF4                                            ;sub.w   $0008(A1), D0
00016AF4                                            ;bcs.s   Offset_0x018A16
00016AF4                                            ;eori.b  #$01, D1
00016AF4                            ;Offset_0x018A16:
00016AF4                            ;                andi.b  #$01, D1
00016AF4                            ;                bne.s   Offset_0x018A1E
00016AF4                            ;                bsr.s   Offset_0x018A5C
00016AF4                            ;Offset_0x018A1E:
00016AF4                            ;                movem.l (A7)+, D1-D4
00016AF4                            ;                lea     ($FFFFB040).w, A1
00016AF4                            ;                moveq   #$04, D6
00016AF4 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016AF8 4846                       				swap	d6
00016AFA 0246 0001                  				andi.w	#1,d6
00016AFE 6700                                       beq.s   Offset_0x018A4E
00016B00 1228 0022                                  move.b  status(A0), D1
00016B04 3028 0008                                  move.w  $0008(A0), D0
00016B08 9069 0008                                  sub.w   $0008(A1), D0
00016B0C 6500                                       bcs.s   Offset_0x018A46
00016B0E 0A01 0001                                  eori.b  #$01, D1
00016B12                            Offset_0x018A46:
00016B12 0201 0001                                  andi.b  #$01, D1
00016B16 6600                                       bne.s   Offset_0x018A4E
00016B18 6100                                       bsr.s   Offset_0x018A5C
00016B1A                            Offset_0x018A4E:
00016B1A 6100 0000                                  bsr     Offset_0x018B34
00016B1E 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016B24 6000 BC2E                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016B28                            Offset_0x018A5C:
00016B28 317C 0300 001C                             move.w  #$0300, $001C(A0)
00016B2E 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016B34 5069 0008                                  addq.w  #$08, $0008(A1)
00016B38 08E9 0000 0022                             bset    #$00, status(A1)
00016B3E 0828 0000 0022                             btst    #$00, status(A0)
00016B44 6600                                       bne.s   Offset_0x018A8A
00016B46 08A9 0000 0022                             bclr    #$00, status(A1)
00016B4C 0469 0010 0008                             subi.w  #$0010, $0008(A1)
00016B52 4469 0010                                  neg.w   $0010(A1)
00016B56                            Offset_0x018A8A:
00016B56 337C 000F 003E                             move.w  #$000F, $003E(A1)
00016B5C 3369 0010 0020                             move.w  $0010(A1), inertia(a1)
00016B62 0829 0002 0022                             btst    #$02, status(A1)
00016B68 6600                                       bne.s   Offset_0x018AA4
00016B6A 137C 0000 001C                             move.b  #$00, $001C(A1)
00016B70                            Offset_0x018AA4:
00016B70 1028 0028                                  move.b  $0028(A0), D0
00016B74 6A00                                       bpl.s   Offset_0x018AB0
00016B76 337C 0000 0012                             move.w  #$0000, $0012(A1)
00016B7C                            Offset_0x018AB0:
00016B7C 0800 0000                                  btst    #$00, D0
00016B80 6700                                       beq.s   Offset_0x018AF0
00016B82 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016B88 137C 0001 0027                             move.b  #$01, $0027(A1)
00016B8E 137C 0000 001C                             move.b  #$00, $001C(A1)
00016B94 137C 0001 002C                             move.b  #$01, $002C(A1)
00016B9A 137C 0008 002D                             move.b  #$08, $002D(A1)
00016BA0 0800 0001                                  btst    #$01, D0
00016BA4 6600                                       bne.s   Offset_0x018AE0
00016BA6 137C 0003 002C                             move.b  #$03, $002C(A1)
00016BAC                            Offset_0x018AE0:
00016BAC 0829 0000 0022                             btst    #$00, status(A1)
00016BB2 6700                                       beq.s   Offset_0x018AF0
00016BB4 4429 0027                                  neg.b   $0027(A1)
00016BB8 4469 0020                                  neg.w   inertia(a1)
00016BBC                            Offset_0x018AF0:
00016BBC 0200 000C                                  andi.b  #$0C, D0
00016BC0 0C00 0004                                  cmpi.b  #$04, D0
00016BC4 6600                                       bne.s   Offset_0x018B06
00016BC6 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016BCC 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016BD2                            Offset_0x018B06:
00016BD2 0C00 0008                                  cmpi.b  #$08, D0
00016BD6 6600                                       bne.s   Offset_0x018B18
00016BD8 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016BDE 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016BE4                            Offset_0x018B18:
00016BE4 08A8 0005 0022                             bclr    #$05, status(A0)
00016BEA 08A8 0006 0022                             bclr    #$06, status(A0)
00016BF0 08A9 0005 0022                             bclr    #$05, status(A1)
00016BF6 303C 00B1                  				move.w	#$B1,d0
00016BFA 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016C00 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016C06                            Offset_0x018B34:
00016C06 0C28 0003 001C                             cmpi.b  #$03, $001C(A0)
00016C0C 6700 0000                                  beq     Offset_0x018BEC
00016C10 3028 0008                                  move.w  $0008(A0), D0
00016C14 3200                                       move.w  D0, D1
00016C16 0641 0028                                  addi.w  #$0028, D1
00016C1A 0828 0000 0022                             btst    #$00, status(A0)
00016C20 6700                                       beq.s   Offset_0x018B56
00016C22 3200                                       move.w  D0, D1
00016C24 0440 0028                                  subi.w  #$0028, D0
00016C28                            Offset_0x018B56:
00016C28 3428 000C                                  move.w  $000C(A0), D2
00016C2C 3602                                       move.w  D2, D3
00016C2E 0442 0018                                  subi.w  #$0018, D2
00016C32 0643 0018                                  addi.w  #$0018, D3
00016C36 43F8 D000                                  lea     ($FFFFD000).w, A1
00016C3A 0829 0001 0022                             btst    #$01, status(A1)
00016C40 6600                                       bne.s   Offset_0x018BAA
00016C42 3829 0020                                  move.w  inertia(a1), D4
00016C46 0828 0000 0022                             btst    #$00, status(A0)
00016C4C 6700                                       beq.s   Offset_0x018B7E
00016C4E 4444                                       neg.w   D4
00016C50                            Offset_0x018B7E:
00016C50 4A44                                       tst.w   D4
00016C52 6B00                                       bmi.s   Offset_0x018BAA
00016C54 3829 0008                                  move.w  $0008(A1), D4
00016C58 B840                                       cmp.w   D0, D4
00016C5A 6500 0000                                  bcs     Offset_0x018BAA
00016C5E B841                                       cmp.w   D1, D4
00016C60 6400 0000                                  bcc     Offset_0x018BAA
00016C64 3829 000C                                  move.w  $000C(A1), D4
00016C68 B842                                       cmp.w   D2, D4
00016C6A 6500 0000                                  bcs     Offset_0x018BAA
00016C6E B843                                       cmp.w   D3, D4
00016C70 6400 0000                                  bcc     Offset_0x018BAA
00016C74 3F00                                       move.w  D0, -(A7)
00016C76 6100 FEB0                                  bsr     Offset_0x018A5C
00016C7A 301F                                       move.w  (A7)+, D0
00016C7C                            Offset_0x018BAA:
00016C7C                            ;                lea     ($FFFFB040).w, A1
00016C7C                             ;               btst    #$01, status(A1)
00016C7C                              ;              bne.s   Offset_0x018BEC
00016C7C                               ;             move.w  inertia(a1), D4
00016C7C                                ;            btst    #$00, status(A0)
00016C7C                                 ;           beq.s   Offset_0x018BC4
00016C7C                                  ;          neg.w   D4
00016C7C                            ;Offset_0x018BC4:
00016C7C                             ;               tst.w   D4
00016C7C                              ;              bmi.s   Offset_0x018BEC
00016C7C                               ;             move.w  $0008(A1), D4
00016C7C                                ;            cmp.w   D0, D4
00016C7C                                 ;           bcs     Offset_0x018BEC
00016C7C                                  ;          cmp.w   D1, D4
00016C7C                                   ;         bcc     Offset_0x018BEC
00016C7C                                    ;        move.w  $000C(A1), D4
00016C7C                                     ;       cmp.w   D2, D4
00016C7C                                      ;      bcs     Offset_0x018BEC
00016C7C                                       ;     cmp.w   D3, D4
00016C7C                                        ;    bcc     Offset_0x018BEC
00016C7C                                        ;    bsr     Offset_0x018A5C
00016C7C                            Offset_0x018BEC:
00016C7C 4E75                                       rts
00016C7E                            Obj41_Down:
00016C7E 323C 001B                                  move.w  #$001B, D1
00016C82 343C 0008                                  move.w  #$0008, D2
00016C86 363C 0010                                  move.w  #$0010, D3
00016C8A 3828 0008                                  move.w  $0008(A0), D4
00016C8E                            ;                lea     ($FFFFB000).w, A1
00016C8E                             ;               moveq   #$03, D6
00016C8E                              ;              movem.l D1-D4, -(A7)
00016C8E 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016C92                               ;             cmpi.w  #$FFFE, D4
00016C92                                ;            bne.s   Offset_0x018C14
00016C92                                 ;           bsr.s   Offset_0x018C34
00016C92                            ;Offset_0x018C14:
00016C92                             ;               movem.l (A7)+, D1-D4
00016C92                              ;              lea     ($FFFFB040).w, A1
00016C92                               ;             moveq   #$03, D6	; changed to $03 was $04
00016C92                               ;             bsr     SolidObject                       ; Offset_0x0196FC
00016C92 4A28 0025                  				tst.b	$25(a0)
00016C96 66E4                       				bne.s	Offset_0x018BEC
00016C98 4A44                       				tst.w	d4
00016C9A 6C00                       				bge.s	Offset_0x018C2A
00016C9C 6100                                       bsr.s   Offset_0x018C34
00016C9E                            Offset_0x018C2A:
00016C9E 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016CA4 6000 BAAE                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016CA8                            Offset_0x018C34:
00016CA8 317C 0100 001C                             move.w  #$0100, $001C(A0)
00016CAE 5169 000C                                  subq.w  #$08, $000C(A1)
00016CB2 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016CB8 4469 0012                                  neg.w   $0012(A1)
00016CBC 1028 0028                                  move.b  $0028(A0), D0
00016CC0 6A00                                       bpl.s   Offset_0x018C54
00016CC2 337C 0000 0010                             move.w  #$0000, $0010(A1)
00016CC8                            Offset_0x018C54:
00016CC8 0800 0000                                  btst    #$00, D0
00016CCC 6700                                       beq.s   Offset_0x018C94
00016CCE 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016CD4 137C 0001 0027                             move.b  #$01, $0027(A1)
00016CDA 137C 0000 001C                             move.b  #$00, $001C(A1)
00016CE0 137C 0000 002C                             move.b  #$00, $002C(A1)
00016CE6 137C 0004 002D                             move.b  #$04, $002D(A1)
00016CEC 0800 0001                                  btst    #$01, D0
00016CF0 6600                                       bne.s   Offset_0x018C84
00016CF2 137C 0001 002C                             move.b  #$01, $002C(A1)
00016CF8                            Offset_0x018C84:
00016CF8 0829 0000 0022                             btst    #$00, status(A1)
00016CFE 6700                                       beq.s   Offset_0x018C94
00016D00 4429 0027                                  neg.b   $0027(A1)
00016D04 4469 0020                                  neg.w   inertia(a1)
00016D08                            Offset_0x018C94:
00016D08 0200 000C                                  andi.b  #$0C, D0
00016D0C 0C00 0004                                  cmpi.b  #$04, D0
00016D10 6600                                       bne.s   Offset_0x018CAA
00016D12 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016D18 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016D1E                            Offset_0x018CAA:
00016D1E 0C00 0008                                  cmpi.b  #$08, D0
00016D22 6600                                       bne.s   Offset_0x018CBC
00016D24 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016D2A 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016D30                            Offset_0x018CBC:
00016D30 08E9 0001 0022                             bset    #$01, status(A1)
00016D36 08A9 0003 0022                             bclr    #$03, status(A1)
00016D3C 137C 0002 0024                             move.b  #$02, routine(A1)
00016D42 303C 00B1                  				move.w	#$B1,d0
00016D46 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016D4C 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016D52                            Obj41_DiagonallyUp:
00016D52 323C 001B                                  move.w  #$001B, D1
00016D56 343C 0010                                  move.w  #$0010, D2
00016D5A 3828 0008                                  move.w  $0008(A0), D4
00016D5E 45FA 0000                                  lea     Offset_0x018F18(PC), A2
00016D62                            ;                lea     ($FFFFB000).w, A1
00016D62                             ;               moveq   #$03, D6
00016D62                              ;              movem.l D1-D4, -(A7)
00016D62                               ;             bsr     SolidObject                       ; Offset_0x019754
00016D62                                ;            btst    #$03, status(A0)
00016D62                                 ;           beq.s   Offset_0x018D00
00016D62                                  ;          bsr.s   Offset_0x018D22
00016D62                            ;Offset_0x018D00:
00016D62                             ;               movem.l (A7)+, D1-D4
00016D62                              ;              lea     ($FFFFB040).w, A1
00016D62                               ;             moveq   #$04, D6
00016D62 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016D66 0828 0003 0022                             btst    #$03, status(A0) ; changed to $03 was $04
00016D6C 6700                                       beq.s   Offset_0x018D18
00016D6E 6100                                       bsr.s   Offset_0x018D22
00016D70                            Offset_0x018D18:
00016D70 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016D76 6000 B9DC                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016D7A                            Offset_0x018D22:
00016D7A 0828 0000 0022                             btst    #$00, status(A0)
00016D80 6600                                       bne.s   Offset_0x018D38
00016D82 3028 0008                                  move.w  $0008(A0), D0
00016D86 5940                                       subq.w  #$04, D0
00016D88 B069 0008                                  cmp.w   $0008(A1), D0
00016D8C 6500                                       bcs.s   Offset_0x018D46
00016D8E 4E75                                       rts
00016D90                            Offset_0x018D38:
00016D90 3028 0008                                  move.w  $0008(A0), D0
00016D94 5840                                       addq.w  #$04, D0
00016D96 B069 0008                                  cmp.w   $0008(A1), D0
00016D9A 6400                                       bcc.s   Offset_0x018D46
00016D9C 4E75                                       rts
00016D9E                            Offset_0x018D46:
00016D9E 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016DA4 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016DAA 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016DB0 5C69 000C                                  addq.w  #$06, $000C(A1)
00016DB4 5C69 0008                                  addq.w  #$06, $0008(A1)
00016DB8 08E9 0000 0022                             bset    #$00, status(A1)
00016DBE 0828 0000 0022                             btst    #$00, status(A0)
00016DC4 6600                                       bne.s   Offset_0x018D7E
00016DC6 08A9 0000 0022                             bclr    #$00, status(A1)
00016DCC 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016DD2 4469 0010                                  neg.w   $0010(A1)
00016DD6                            Offset_0x018D7E:
00016DD6 08E9 0001 0022                             bset    #$01, status(A1)
00016DDC 08A9 0003 0022                             bclr    #$03, status(A1)
00016DE2 137C 0010 001C                             move.b  #$10, $001C(A1)
00016DE8 137C 0002 0024                             move.b  #$02, routine(A1)
00016DEE 1028 0028                                  move.b  $0028(A0), D0
00016DF2 0800 0000                                  btst    #$00, D0
00016DF6 6700                                       beq.s   Offset_0x018DDA
00016DF8 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016DFE 137C 0001 0027                             move.b  #$01, $0027(A1)
00016E04 137C 0000 001C                             move.b  #$00, $001C(A1)
00016E0A 137C 0001 002C                             move.b  #$01, $002C(A1)
00016E10 137C 0008 002D                             move.b  #$08, $002D(A1)
00016E16 0800 0001                                  btst    #$01, D0
00016E1A 6600                                       bne.s   Offset_0x018DCA
00016E1C 137C 0003 002C                             move.b  #$03, $002C(A1)
00016E22                            Offset_0x018DCA:
00016E22 0829 0000 0022                             btst    #$00, status(A1)
00016E28 6700                                       beq.s   Offset_0x018DDA
00016E2A 4429 0027                                  neg.b   $0027(A1)
00016E2E 4469 0020                                  neg.w   inertia(a1)
00016E32                            Offset_0x018DDA:
00016E32 0200 000C                                  andi.b  #$0C, D0
00016E36 0C00 0004                                  cmpi.b  #$04, D0
00016E3A 6600                                       bne.s   Offset_0x018DF0
00016E3C 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016E42 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016E48                            Offset_0x018DF0:
00016E48 0C00 0008                                  cmpi.b  #$08, D0
00016E4C 6600                                       bne.s   Offset_0x018E02
00016E4E 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016E54 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016E5A                            Offset_0x018E02:
00016E5A 303C 00B1                  				move.w	#$B1,d0
00016E5E 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016E64 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016E6A                            Obj41_DiagonallyDown:
00016E6A 323C 001B                                  move.w  #$001B, D1
00016E6E 343C 0010                                  move.w  #$0010, D2
00016E72 3828 0008                                  move.w  $0008(A0), D4
00016E76 45FA 0000                                  lea     Offset_0x018F34(PC), A2
00016E7A                             ;               lea     ($FFFFB000).w, A1
00016E7A                              ;              moveq   #$03, D6
00016E7A                               ;             movem.l D1-D4, -(A7)
00016E7A                            ;                bsr     SolidObject                       ; Offset_0x019754
00016E7A                             ;               cmpi.w  #$FFFE, D4
00016E7A                              ;              bne.s   Offset_0x018E32
00016E7A                               ;             bsr.s   Offset_0x018E54
00016E7A                            ;Offset_0x018E32:
00016E7A                             ;               movem.l (A7)+, D1-D4
00016E7A                              ;              lea     ($FFFFB040).w, A1
00016E7A                               ;             moveq   #$04, D6
00016E7A 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016E7E 4A28 0025                  				tst.b	$25(a0)
00016E82 6600                       				bne.s	Jmpto_Offset_0x018BEC
00016E84 4A44                                       tst.w	 D4
00016E86 6C00                                       bge.s   Offset_0x018E48
00016E88 6100                                       bsr.s   Offset_0x018E54
00016E8A                            Offset_0x018E48:
00016E8A 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016E90 6000 B8C2                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016E94 4E75                                       rts
00016E96                            Jmpto_Offset_0x018BEC:
00016E96 4EFA FDE4                  				jmp	Offset_0x018BEC	
00016E9A                            Offset_0x018E54:
00016E9A 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016EA0 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016EA6 4469 0012                                  neg.w   $0012(A1)
00016EAA 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016EB0 5D69 000C                                  subq.w  #$06, $000C(A1)
00016EB4 5C69 0008                                  addq.w  #$06, $0008(A1)
00016EB8 08E9 0000 0022                             bset    #$00, status(A1)
00016EBE 0828 0000 0022                             btst    #$00, status(A0)
00016EC4 6600                                       bne.s   Offset_0x018E90
00016EC6 08A9 0000 0022                             bclr    #$00, status(A1)
00016ECC 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016ED2 4469 0010                                  neg.w   $0010(A1)
00016ED6                            Offset_0x018E90:
00016ED6 08E9 0001 0022                             bset    #$01, status(A1)
00016EDC 08A9 0003 0022                             bclr    #$03, status(A1)
00016EE2 137C 0002 0024                             move.b  #$02, routine(A1)
00016EE8 1028 0028                                  move.b  $0028(A0), D0
00016EEC 0800 0000                                  btst    #$00, D0
00016EF0 6700                                       beq.s   Offset_0x018EE6
00016EF2 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016EF8 137C 0001 0027                             move.b  #$01, $0027(A1)
00016EFE 137C 0000 001C                             move.b  #$00, $001C(A1)
00016F04 137C 0001 002C                             move.b  #$01, $002C(A1)
00016F0A 137C 0008 002D                             move.b  #$08, $002D(A1)
00016F10 0800 0001                                  btst    #$01, D0
00016F14 6600                                       bne.s   Offset_0x018ED6
00016F16 137C 0003 002C                             move.b  #$03, $002C(A1)
00016F1C                            Offset_0x018ED6:
00016F1C 0829 0000 0022                             btst    #$00, status(A1)
00016F22 6700                                       beq.s   Offset_0x018EE6
00016F24 4429 0027                                  neg.b   $0027(A1)
00016F28 4469 0020                                  neg.w   inertia(a1)
00016F2C                            Offset_0x018EE6:
00016F2C 0200 000C                                  andi.b  #$0C, D0
00016F30 0C00 0004                                  cmpi.b  #$04, D0
00016F34 6600                                       bne.s   Offset_0x018EFC
00016F36 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016F3C 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016F42                            Offset_0x018EFC:
00016F42 0C00 0008                                  cmpi.b  #$08, D0
00016F46 6600                                       bne.s   Offset_0x018F0E
00016F48 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016F4E 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016F54                            Offset_0x018F0E:
00016F54 303C 00B1                  				move.w	#$B1,d0
00016F58 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016F5E 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016F64                            ;-------------------------------------------------------------------------------                   
00016F64                            Offset_0x018F18:
00016F64 1010 1010 1010 1010 1010+                  dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $0E, $0C, $0A, $08
00016F74 0604 0200 FEFC FCFC FCFC+                  dc.b    $06, $04, $02, $00, $FE, $FC, $FC, $FC, $FC, $FC, $FC, $FC
00016F80                            ;-------------------------------------------------------------------------------                
00016F80                            Offset_0x018F34:
00016F80 F4F0 F0F0 F0F0 F0F0 F0F0+                  dc.b    $F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
00016F90 FAFC FE00 0204 0404 0404+                  dc.b    $FA, $FC, $FE, $00, $02, $04, $04, $04, $04, $04, $04, $04
00016F9C                            ;-------------------------------------------------------------------------------
00016F9C                            Springs_Animate_Data: ; Offset_0x018F50:
00016F9C 0000                                       dc.w    Offset_0x018F5C-Springs_Animate_Data
00016F9E 0000                                       dc.w    Offset_0x018F60-Springs_Animate_Data
00016FA0 0000                                       dc.w    Offset_0x018F6C-Springs_Animate_Data
00016FA2 0000                                       dc.w    Offset_0x018F70-Springs_Animate_Data
00016FA4 0000                                       dc.w    Offset_0x018F7C-Springs_Animate_Data
00016FA6 0000                                       dc.w    Offset_0x018F80-Springs_Animate_Data
00016FA8                            Offset_0x018F5C:
00016FA8 0F00 FF00                                  dc.b    $0F, $00, $FF, $00
00016FAC                            Offset_0x018F60:
00016FAC 0001 0000 0202 0202 0202+                  dc.b    $00, $01, $00, $00, $02, $02, $02, $02, $02, $02, $FD, $00
00016FB8                            Offset_0x018F6C:
00016FB8 0F03 FF00                                  dc.b    $0F, $03, $FF, $00
00016FBC                            Offset_0x018F70:
00016FBC 0004 0303 0505 0505 0505+                  dc.b    $00, $04, $03, $03, $05, $05, $05, $05, $05, $05, $FD, $02
00016FC8                            Offset_0x018F7C:
00016FC8 0F07 FF00                                  dc.b    $0F, $07, $FF, $00
00016FCC                            Offset_0x018F80:
00016FCC 0008 0707 0909 0909 0909+                  dc.b    $00, $08, $07, $07, $09, $09, $09, $09, $09, $09, $FD, $04
00016FD8                            ;-------------------------------------------------------------------------------
00016FD8                            Springs_Mappings_01:
00016FD8                            	include "_maps/obj41_s2_2nd.asm"
00016FD8                            ; --------------------------------------------------------------------------------
00016FD8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016FD8                            ; --------------------------------------------------------------------------------
00016FD8                            
00016FD8                            SME_Eabw0:	
00016FD8 0000 0000                  		dc.w SME_Eabw0_16-SME_Eabw0, SME_Eabw0_21-SME_Eabw0	
00016FDC 0000 0000                  		dc.w SME_Eabw0_27-SME_Eabw0, SME_Eabw0_32-SME_Eabw0	
00016FE0 0000 0000                  		dc.w SME_Eabw0_3D-SME_Eabw0, SME_Eabw0_43-SME_Eabw0	
00016FE4 0000 0000                  		dc.w SME_Eabw0_4E-SME_Eabw0, SME_Eabw0_59-SME_Eabw0	
00016FE8 0000 0000                  		dc.w SME_Eabw0_6E-SME_Eabw0, SME_Eabw0_7E-SME_Eabw0	
00016FEC 0000                       		dc.w SME_Eabw0_93-SME_Eabw0	
00016FEE 02                         SME_Eabw0_16:	dc.b 2	
00016FEF F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00016FF4 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0		
00016FF9 01                         SME_Eabw0_21:	dc.b 1
00016FFA 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
00016FFF 03                         SME_Eabw0_27:	dc.b 3
00017000 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00017005 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001700A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
0001700F 01                         SME_Eabw0_32:	dc.b 1
00017010 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
00017015 01                         SME_Eabw0_3D:	dc.b 1	
00017016 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8	
0001701B 04                         SME_Eabw0_43:	dc.b 4
0001701C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00017021 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00017026 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0001702B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
00017030 02                         SME_Eabw0_4E:	dc.b 2	
00017031 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00017036 F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0	
0001703B 04                         SME_Eabw0_59:	dc.b 4	
0001703C F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00017041 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00017046 FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
0001704B 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00017050 03                         SME_Eabw0_6E:	dc.b 3	
00017051 F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00017056 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
0001705B 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00017060 04                         SME_Eabw0_7E:	dc.b 4	
00017061 E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00017066 F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
0001706B F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
00017070 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00017075 04                         SME_Eabw0_93:	dc.b 4	
00017076 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
0001707B F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
00017080 F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00017085 F005 101C F0               		dc.b $F0, 5, $10, $1C, $F0	
0001708A                            		even
0001708A                            		even
0001708A                            	even
0001708A                            ;===============================================================================
0001708A                            ; Obj41 - Springs / vermelhas - diagonal / horizontal / vertical 
0001708A                            ; [ End ]
0001708A                            ;===============================================================================  
0001708A                            Ani_obj41:
0001708A                            	include "_anim\obj41.asm"
0001708A                            ; ---------------------------------------------------------------------------
0001708A                            ; Animation script - springs
0001708A                            ; ---------------------------------------------------------------------------
0001708A 0000                       		dc.w byte_DD02-Ani_obj41
0001708C 0000                       		dc.w byte_DD0E-Ani_obj41
0001708E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0001709A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
000170A6                            		even
000170A6                            		even
000170A6                            
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            ; Sprite mappings - springs
000170A6                            ; ---------------------------------------------------------------------------
000170A6                            Map_obj41:
000170A6                            	include "_maps\obj41_s2_1st.asm"
000170A6                            ; --------------------------------------------------------------------------------
000170A6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000170A6                            ; --------------------------------------------------------------------------------
000170A6                            
000170A6                            SME_oYuJs:	
000170A6 0000 0000                  		dc.w SME_oYuJs_16-SME_oYuJs, SME_oYuJs_21-SME_oYuJs	
000170AA 0000 0000                  		dc.w SME_oYuJs_27-SME_oYuJs, SME_oYuJs_32-SME_oYuJs	
000170AE 0000 0000                  		dc.w SME_oYuJs_3D-SME_oYuJs, SME_oYuJs_43-SME_oYuJs	
000170B2 0000 0000                  		dc.w SME_oYuJs_4E-SME_oYuJs, SME_oYuJs_59-SME_oYuJs	
000170B6 0000 0000                  		dc.w SME_oYuJs_6E-SME_oYuJs, SME_oYuJs_7E-SME_oYuJs	
000170BA 0000                       		dc.w SME_oYuJs_93-SME_oYuJs	
000170BC 02                         SME_oYuJs_16:	dc.b 2
000170BD F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000170C2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0	
000170C7 01                         SME_oYuJs_21:	dc.b 1
000170C8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
000170CD 03                         SME_oYuJs_27:	dc.b 3
000170CE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000170D3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000170D8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
000170DD 01                         SME_oYuJs_32:	dc.b 1
000170DE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
000170E3 01                         SME_oYuJs_3D:	dc.b 1	
000170E4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000170E9 04                         SME_oYuJs_43:	dc.b 4
000170EA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000170EF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000170F4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000170F9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
000170FE 02                         SME_oYuJs_4E:	dc.b 2	
000170FF 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00017104 F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0
00017109 04                         SME_oYuJs_59:	dc.b 4	
0001710A F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
0001710F 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00017114 FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
00017119 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
0001711E 03                         SME_oYuJs_6E:	dc.b 3	
0001711F F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00017124 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
00017129 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
0001712E 04                         SME_oYuJs_7E:	dc.b 4	
0001712F E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00017134 F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
00017139 F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
0001713E 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00017143 04                         SME_oYuJs_93:	dc.b 4	
00017144 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
00017149 F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
0001714E F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00017153 F005 301C F0               		dc.b $F0, 5, $30, $1C, $F0	
00017158                            		even
00017158                            		even
00017158                            
00017158                            ; ===========================================================================
00017158                            ; ---------------------------------------------------------------------------
00017158                            ; Object 42 - Newtron enemy (GHZ)
00017158                            ; ---------------------------------------------------------------------------
00017158                            
00017158                            Obj42:					; XREF: Obj_Index
00017158 7000                       		moveq	#0,d0
0001715A 1028 0024                  		move.b	routine(a0),d0
0001715E 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
00017162 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00017166                            ; ===========================================================================
00017166 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00017168 0000                       		dc.w Obj42_Action-Obj42_Index
0001716A 0000                       		dc.w Obj42_Delete-Obj42_Index
0001716C                            ; ===========================================================================
0001716C                            
0001716C                            Obj42_Main:				; XREF: Obj42_Index
0001716C 5428 0024                  		addq.b	#2,routine(a0)
00017170 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00017178 317C 049B 0002             		move.w	#$49B,2(a0)
0001717E 117C 0004 0001             		move.b	#4,1(a0)
00017184 317C 0200 0018             		move.w	#$200,priority(a0)
0001718A 117C 0014 0023             		move.b	#$14,width_pixels(a0)
00017190 117C 0010 0016             		move.b	#$10,$16(a0)
00017196 117C 0008 0017             		move.b	#8,$17(a0)
0001719C                            
0001719C                            Obj42_Action:				; XREF: Obj42_Index
0001719C 7000                       		moveq	#0,d0
0001719E 1028 0025                  		move.b	routine_secondary(a0),d0
000171A2 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
000171A6 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
000171AA 43F9 0000 0000             		lea	(Ani_obj42).l,a1
000171B0 4EBA B5A2                  		jsr	AnimateSprite
000171B4 6000 0000                  		bra.w	MarkObjGone
000171B8                            ; ===========================================================================
000171B8 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
000171BA 0000                       		dc.w Obj42_Type00-Obj42_Index2
000171BC 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
000171BE 0000                       		dc.w Obj42_Speed-Obj42_Index2
000171C0 0000                       		dc.w Obj42_Type01-Obj42_Index2
000171C2                            ; ===========================================================================
000171C2                            
000171C2                            Obj42_ChkDist:				; XREF: Obj42_Index2
000171C2 08E8 0000 0022             		bset	#0,status(a0)
000171C8 3038 D008                  		move.w	($FFFFD008).w,d0
000171CC 9068 0008                  		sub.w	8(a0),d0
000171D0 6400                       		bcc.s	loc_DDEA
000171D2 4440                       		neg.w	d0
000171D4 08A8 0000 0022             		bclr	#0,status(a0)
000171DA                            
000171DA                            loc_DDEA:
000171DA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
000171DE 6400                       		bcc.s	locret_DE12	; if not, branch
000171E0 5428 0025                  		addq.b	#2,routine_secondary(a0)
000171E4 117C 0001 001C             		move.b	#1,anim(a0)
000171EA 4A28 0028                  		tst.b	subtype(a0)		; check	object type
000171EE 6700                       		beq.s	locret_DE12	; if type is 00, branch
000171F0 317C 249B 0002             		move.w	#$249B,2(a0)
000171F6 117C 0008 0025             		move.b	#8,routine_secondary(a0)	; run type 01 newtron subroutine
000171FC 117C 0004 001C             		move.b	#4,anim(a0)	; use different	animation
00017202                            
00017202                            locret_DE12:
00017202 4E75                       		rts	
00017204                            ; ===========================================================================
00017204                            
00017204                            Obj42_Type00:				; XREF: Obj42_Index2
00017204 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; has "appearing" animation finished?
0001720A 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0001720C 08E8 0000 0022             		bset	#0,status(a0)
00017212 3038 D008                  		move.w	($FFFFD008).w,d0
00017216 9068 0008                  		sub.w	8(a0),d0
0001721A 6400                       		bcc.s	locret_DE32
0001721C 08A8 0000 0022             		bclr	#0,status(a0)
00017222                            
00017222                            locret_DE32:
00017222 4E75                       		rts	
00017224                            ; ===========================================================================
00017224                            
00017224                            Obj42_Fall:				; XREF: Obj42_Type00
00017224 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
0001722A 6600                       		bne.s	loc_DE42
0001722C 117C 000C 0020             		move.b	#$C,collision_flags(a0)
00017232                            
00017232                            loc_DE42:
00017232 4EBA EAB8                  		jsr	ObjectFall
00017236 4EB9 0000 0000             		jsr	ObjHitFloor
0001723C 4A41                       		tst.w	d1		; has newtron hit the floor?
0001723E 6A00                       		bpl.s	locret_DE86	; if not, branch
00017240 D368 000C                  		add.w	d1,$C(a0)
00017244 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop newtron falling
0001724A 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001724E 117C 0002 001C             		move.b	#2,anim(a0)
00017254 0828 0005 0002             		btst	#5,2(a0)
0001725A 6700                       		beq.s	Obj42_Move
0001725C 5228 001C                  		addq.b	#1,anim(a0)
00017260                            
00017260                            Obj42_Move:
00017260 117C 000D 0020             		move.b	#$D,collision_flags(a0)
00017266 317C 0200 0010             		move.w	#$200,x_vel(a0)	; move newtron horizontally
0001726C 0828 0000 0022             		btst	#0,status(a0)
00017272 6600                       		bne.s	locret_DE86
00017274 4468 0010                  		neg.w	x_vel(a0)
00017278                            
00017278                            locret_DE86:
00017278 4E75                       		rts	
0001727A                            ; ===========================================================================
0001727A                            
0001727A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0001727A 4EBA EA90                  		jsr	SpeedToPos
0001727E 4EB9 0000 0000             		jsr	ObjHitFloor
00017284 0C41 FFF8                  		cmpi.w	#-8,d1
00017288 6D00                       		blt.s	loc_DEA2
0001728A 0C41 000C                  		cmpi.w	#$C,d1
0001728E 6C00                       		bge.s	loc_DEA2
00017290 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
00017294 4E75                       		rts	
00017296                            ; ===========================================================================
00017296                            
00017296                            loc_DEA2:
00017296 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001729A 4E75                       		rts	
0001729C                            ; ===========================================================================
0001729C                            
0001729C                            Obj42_Speed:				; XREF: Obj42_Index2
0001729C 4EBA EA6E                  		jsr	SpeedToPos
000172A0 4E75                       		rts	
000172A2                            ; ===========================================================================
000172A2                            
000172A2                            Obj42_Type01:				; XREF: Obj42_Index2
000172A2 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
000172A8 6600                       		bne.s	Obj42_FireMissile
000172AA 117C 000C 0020             		move.b	#$C,collision_flags(a0)
000172B0                            
000172B0                            Obj42_FireMissile:
000172B0 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
000172B6 6600                       		bne.s	locret_DF14
000172B8 4A28 0032                  		tst.b	$32(a0)
000172BC 6600                       		bne.s	locret_DF14
000172BE 117C 0001 0032             		move.b	#1,$32(a0)
000172C4 6100 F5B6                  		bsr.w	SingleObjLoad
000172C8 6600                       		bne.s	locret_DF14
000172CA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
000172CE 3368 0008 0008             		move.w	8(a0),8(a1)
000172D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000172DA 5169 000C                  		subq.w	#8,$C(a1)
000172DE 337C 0200 0010             		move.w	#$200,x_vel(a1)
000172E4 303C 0014                  		move.w	#$14,d0
000172E8 0828 0000 0022             		btst	#0,status(a0)
000172EE 6600                       		bne.s	loc_DF04
000172F0 4440                       		neg.w	d0
000172F2 4469 0010                  		neg.w	x_vel(a1)
000172F6                            
000172F6                            loc_DF04:
000172F6 D169 0008                  		add.w	d0,8(a1)
000172FA 1368 0022 0022             		move.b	status(a0),status(a1)
00017300 137C 0001 0028             		move.b	#1,subtype(a1)
00017306                            
00017306                            locret_DF14:
00017306 4E75                       		rts	
00017308                            ; ===========================================================================
00017308                            
00017308                            Obj42_Delete:				; XREF: Obj42_Index
00017308 7000                       		moveq	#0,d0
0001730A 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0001730E 3440                       	    movea.w	d0,a2				; load address into a2
00017310 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
00017314 6000 EA10                  		bra.w	DeleteObject
00017318                            ; ===========================================================================
00017318                            Ani_obj42:
00017318                            	include "_anim\obj42.asm"
00017318                            ; ---------------------------------------------------------------------------
00017318                            ; Animation script - Newtron enemy
00017318                            ; ---------------------------------------------------------------------------
00017318 0000                       		dc.w byte_DF24-Ani_obj42
0001731A 0000                       		dc.w byte_DF28-Ani_obj42
0001731C 0000                       		dc.w byte_DF30-Ani_obj42
0001731E 0000                       		dc.w byte_DF34-Ani_obj42
00017320 0000                       		dc.w byte_DF38-Ani_obj42
00017322 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
00017326 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0001732E 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
00017332 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
00017336 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
00017340                            		even
00017340                            		even
00017340                            
00017340                            ; ---------------------------------------------------------------------------
00017340                            ; Sprite mappings - Newtron enemy (GHZ)
00017340                            ; ---------------------------------------------------------------------------
00017340                            Map_obj42:
00017340                            	include "_maps\obj42.asm"
00017340                            ; ---------------------------------------------------------------------------
00017340                            ; Sprite mappings - Newtron enemy (GHZ)
00017340                            ; ---------------------------------------------------------------------------
00017340 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
00017344 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
00017348 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0001734C 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
00017350 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
00017354 0000                       		dc.w byte_DFF8-Map_obj42
00017356 03                         byte_DF58:	dc.b 3
00017357 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0001735C F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
00017361 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
00017366 03                         byte_DF68:	dc.b 3
00017367 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0001736C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017371 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00017376 03                         byte_DF78:	dc.b 3
00017377 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0001737C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017381 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00017386 04                         byte_DF88:	dc.b 4
00017387 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0001738C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00017391 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00017396 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001739B 03                         byte_DF9D:	dc.b 3
0001739C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
000173A1 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
000173A6 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
000173AB 02                         byte_DFAD:	dc.b 2
000173AC F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000173B1 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000173B6 03                         byte_DFB8:	dc.b 3
000173B7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000173BC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000173C1 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
000173C6 03                         byte_DFC8:	dc.b 3
000173C7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000173CC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000173D1 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
000173D6 03                         byte_DFD8:	dc.b 3
000173D7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000173DC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000173E1 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
000173E6 03                         byte_DFE8:	dc.b 3
000173E7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
000173EC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
000173F1 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
000173F6 00                         byte_DFF8:	dc.b 0
000173F8 00                         		even
000173F8 00                         		even
000173F8                            
000173F8                            ; ===========================================================================
000173F8                            ; ---------------------------------------------------------------------------
000173F8                            ; Object 43 - Roller enemy (SYZ)
000173F8                            ; ---------------------------------------------------------------------------
000173F8                            
000173F8                            Obj43:					; XREF: Obj_Index
000173F8 7000                       		moveq	#0,d0
000173FA 1028 0024                  		move.b	routine(a0),d0
000173FE 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
00017402 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
00017406                            ; ===========================================================================
00017406 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
00017408 0000                       		dc.w Obj43_Action-Obj43_Index
0001740A                            ; ===========================================================================
0001740A                            
0001740A                            Obj43_Main:				; XREF: Obj43_Index
0001740A 117C 000E 0016             		move.b	#$E,$16(a0)
00017410 117C 0008 0017             		move.b	#8,$17(a0)
00017416 4EBA E8D4                  		jsr	ObjectFall
0001741A 4EB9 0000 0000             		jsr	ObjHitFloor
00017420 4A41                       		tst.w	d1
00017422 6A00                       		bpl.s	locret_E052
00017424 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
00017428 317C 0000 0012             		move.w	#0,y_vel(a0)
0001742E 5428 0024                  		addq.b	#2,routine(a0)
00017432 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0001743A 317C 04B8 0002             		move.w	#$4B8,2(a0)
00017440 117C 0004 0001             		move.b	#4,1(a0)
00017446 317C 0200 0018             		move.w	#$200,priority(a0)
0001744C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017452                            
00017452                            locret_E052:
00017452 4E75                       		rts	
00017454                            ; ===========================================================================
00017454                            
00017454                            Obj43_Action:				; XREF: Obj43_Index
00017454 7000                       		moveq	#0,d0
00017456 1028 0025                  		move.b	routine_secondary(a0),d0
0001745A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0001745E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
00017462 43F9 0000 0000             		lea	(Ani_obj43).l,a1
00017468 4EBA B2EA                  		jsr	AnimateSprite
0001746C 4EF9 0000 0000             		jmp MarkObjGone
00017472                            ; ===========================================================================
00017472 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
00017474 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
00017476 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00017478 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0001747A                            ; ===========================================================================
0001747A                            
0001747A                            Obj43_RollChk:				; XREF: Obj43_Index2
0001747A 3038 D008                  		move.w	($FFFFD008).w,d0
0001747E 0440 0100                  		subi.w	#$100,d0
00017482 6500                       		bcs.s	loc_E0D2
00017484 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
00017488 6500                       		bcs.s	loc_E0D2
0001748A 5828 0025                  		addq.b	#4,routine_secondary(a0)
0001748E 117C 0002 001C             		move.b	#2,anim(a0)
00017494 317C 0700 0010             		move.w	#$700,x_vel(a0)	; move Roller horizontally
0001749A 117C 008E 0020             		move.b	#$8E,collision_flags(a0)	; make Roller invincible
000174A0                            
000174A0                            loc_E0D2:
000174A0 588F                       		addq.l	#4,sp
000174A2 4E75                       		rts	
000174A4                            ; ===========================================================================
000174A4                            
000174A4                            Obj43_RollNoChk:			; XREF: Obj43_Index2
000174A4 0C28 0002 001C             		cmpi.b	#2,anim(a0)
000174AA 6700                       		beq.s	loc_E0F8
000174AC 5368 0030                  		subq.w	#1,$30(a0)
000174B0 6A00                       		bpl.s	locret_E0F6
000174B2 117C 0001 001C             		move.b	#1,anim(a0)
000174B8 317C 0700 0010             		move.w	#$700,x_vel(a0)
000174BE 117C 008E 0020             		move.b	#$8E,collision_flags(a0)
000174C4                            
000174C4                            locret_E0F6:
000174C4 4E75                       		rts	
000174C6                            ; ===========================================================================
000174C6                            
000174C6                            loc_E0F8:
000174C6 5428 0025                  		addq.b	#2,routine_secondary(a0)
000174CA 4E75                       		rts	
000174CC                            ; ===========================================================================
000174CC                            
000174CC                            Obj43_ChkJump:				; XREF: Obj43_Index2
000174CC 4EB9 0000 0000             		jsr	Obj43_Stop
000174D2 4EBA E838                  		jsr	SpeedToPos
000174D6 4EB9 0000 0000             		jsr	ObjHitFloor
000174DC 0C41 FFF8                  		cmpi.w	#-8,d1
000174E0 6D00                       		blt.s	Obj43_Jump
000174E2 0C41 000C                  		cmpi.w	#$C,d1
000174E6 6C00                       		bge.s	Obj43_Jump
000174E8 D368 000C                  		add.w	d1,$C(a0)
000174EC 4E75                       		rts	
000174EE                            ; ===========================================================================
000174EE                            
000174EE                            Obj43_Jump:
000174EE 5428 0025                  		addq.b	#2,routine_secondary(a0)
000174F2 08E8 0000 0032             		bset	#0,$32(a0)
000174F8 6700                       		beq.s	locret_E12E
000174FA 317C FA00 0012             		move.w	#-$600,y_vel(a0)	; move Roller vertically
00017500                            
00017500                            locret_E12E:
00017500 4E75                       		rts	
00017502                            ; ===========================================================================
00017502                            
00017502                            Obj43_MatchFloor:			; XREF: Obj43_Index2
00017502 4EBA E7E8                  		jsr	ObjectFall
00017506 4A68 0012                  		tst.w	y_vel(a0)
0001750A 6B00                       		bmi.s	locret_E150
0001750C 4EB9 0000 0000             		jsr	ObjHitFloor
00017512 4A41                       		tst.w	d1
00017514 6A00                       		bpl.s	locret_E150
00017516 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0001751A 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001751E 317C 0000 0012             		move.w	#0,y_vel(a0)
00017524                            
00017524                            locret_E150:
00017524 4E75                       		rts	
00017526                            
00017526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017526                            
00017526                            
00017526                            Obj43_Stop:				; XREF: Obj43_ChkJump
00017526 4A28 0032                  		tst.b	$32(a0)
0001752A 6B00                       		bmi.s	locret_E188
0001752C 3038 D008                  		move.w	($FFFFD008).w,d0
00017530 0440 0030                  		subi.w	#$30,d0
00017534 9068 0008                  		sub.w	8(a0),d0
00017538 6400                       		bcc.s	locret_E188
0001753A 117C 0000 001C             		move.b	#0,anim(a0)
00017540 117C 000E 0020             		move.b	#$E,collision_flags(a0)
00017546 4268 0010                  		clr.w	x_vel(a0)
0001754A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
00017550 117C 0002 0025             		move.b	#2,routine_secondary(a0)
00017556 08E8 0007 0032             		bset	#7,$32(a0)
0001755C                            
0001755C                            locret_E188:
0001755C 4E75                       		rts	
0001755E                            ; End of function Obj43_Stop
0001755E                            
0001755E                            ; ===========================================================================
0001755E                            Ani_obj43:
0001755E                            	include "_anim\obj43.asm"
0001755E                            ; ---------------------------------------------------------------------------
0001755E                            ; Animation script - Roller enemy
0001755E                            ; ---------------------------------------------------------------------------
0001755E 0000                       		dc.w byte_E190-Ani_obj43
00017560 0000                       		dc.w byte_E196-Ani_obj43
00017562 0000                       		dc.w byte_E19C-Ani_obj43
00017564 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0001756A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
00017570 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
00017576 00                         		even
00017576 00                         		even
00017576                            
00017576                            ; ---------------------------------------------------------------------------
00017576                            ; Sprite mappings - Roller enemy (SYZ)
00017576                            ; ---------------------------------------------------------------------------
00017576                            Map_obj43:
00017576                            	include "_maps\obj43.asm"
00017576                            ; ---------------------------------------------------------------------------
00017576                            ; Sprite mappings - Roller enemy (SYZ)
00017576                            ; ---------------------------------------------------------------------------
00017576 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0001757A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0001757E 0000                       		dc.w byte_E1CE-Map_obj43
00017580 02                         byte_E1AC:	dc.b 2
00017581 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
00017586 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0001758B 02                         byte_E1B7:	dc.b 2
0001758C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00017591 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
00017596 01                         byte_E1C2:	dc.b 1
00017597 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001759C 01                         byte_E1C8:	dc.b 1
0001759D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000175A2 01                         byte_E1CE:	dc.b 1
000175A3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000175A8                            		even
000175A8                            		even
000175A8                            
000175A8                            ; ===========================================================================
000175A8                            ; ---------------------------------------------------------------------------
000175A8                            ; Object 44 - walls (GHZ)
000175A8                            ; ---------------------------------------------------------------------------
000175A8                            
000175A8                            Obj44:					; XREF: Obj_Index
000175A8 7000                       		moveq	#0,d0
000175AA 1028 0024                  		move.b	routine(a0),d0
000175AE 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
000175B2 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
000175B6                            ; ===========================================================================
000175B6 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
000175B8 0000                       		dc.w Obj44_Solid-Obj44_Index
000175BA 0000                       		dc.w Obj44_Display-Obj44_Index
000175BC                            ; ===========================================================================
000175BC                            
000175BC                            Obj44_Main:				; XREF: Obj44_Index
000175BC 5428 0024                  		addq.b	#2,routine(a0)
000175C0 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
000175C8 317C 434C 0002             		move.w	#$434C,2(a0)
000175CE 0028 0004 0001             		ori.b	#4,1(a0)
000175D4 117C 0008 0023             		move.b	#8,width_pixels(a0)
000175DA 317C 0300 0018             		move.w	#$300,priority(a0)
000175E0 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)	; copy object type number to frame number
000175E6 08A8 0004 001A             		bclr	#4,mapping_frame(a0)	; clear	4th bit	(deduct	$10)
000175EC 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
000175EE 5428 0024                  		addq.b	#2,routine(a0)
000175F2 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
000175F4                            ; ===========================================================================
000175F4                            
000175F4                            Obj44_Solid:				; XREF: Obj44_Index
000175F4 323C 0013                  		move.w	#$13,d1
000175F8 343C 0028                  		move.w	#$28,d2
000175FC 4EBA 919C                  		jsr	Obj44_SolidWall
00017600                            
00017600                            Obj44_Display:				; XREF: Obj44_Index
00017600 4EBA E770                  		jsr	DisplaySprite
00017604 4EF9 0000 0000             		jmp MarkObjGone3
0001760A                            ; ===========================================================================
0001760A                            ; ---------------------------------------------------------------------------
0001760A                            ; Sprite mappings - walls (GHZ)
0001760A                            ; ---------------------------------------------------------------------------
0001760A                            Map_obj44:
0001760A                            	include "_maps\obj44.asm"
0001760A                            ; ---------------------------------------------------------------------------
0001760A                            ; Sprite mappings - walls (GHZ)
0001760A                            ; ---------------------------------------------------------------------------
0001760A 0000                       		dc.w byte_E256-Map_obj44
0001760C 0000                       		dc.w byte_E26B-Map_obj44
0001760E 0000                       		dc.w byte_E280-Map_obj44
00017610 04                         byte_E256:	dc.b 4
00017611 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
00017616 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0001761B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00017620 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
00017625 04                         byte_E26B:	dc.b 4
00017626 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0001762B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00017630 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00017635 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001763A 04                         byte_E280:	dc.b 4
0001763B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
00017640 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00017645 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001764A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00017650 00                         		even
00017650 00                         		even
00017650                            
00017650                            ; ===========================================================================
00017650                            ; ---------------------------------------------------------------------------
00017650                            ; Object 13 - lava ball	producer (MZ, SLZ)
00017650                            ; ---------------------------------------------------------------------------
00017650                            
00017650                            Obj13:					; XREF: Obj_Index
00017650 7000                       		moveq	#0,d0
00017652 1028 0024                  		move.b	routine(a0),d0
00017656 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0001765A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0001765E 6000 0000                  		bra.w	Obj14_ChkDel
00017662                            ; ===========================================================================
00017662 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
00017664 0000                       		dc.w Obj13_MakeLava-Obj13_Index
00017666                            ; ---------------------------------------------------------------------------
00017666                            ;
00017666                            ; Lava ball production rates
00017666                            ;
00017666 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0001766C                            ; ===========================================================================
0001766C                            
0001766C                            Obj13_Main:				; XREF: Obj13_Index
0001766C 5428 0024                  		addq.b	#2,routine(a0)
00017670 1028 0028                  		move.b	subtype(a0),d0
00017674 E848                       		lsr.w	#4,d0
00017676 0240 000F                  		andi.w	#$F,d0
0001767A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
00017680 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; set time delay for lava balls
00017686 0228 000F 0028             		andi.b	#$F,subtype(a0)
0001768C                            
0001768C                            Obj13_MakeLava:				; XREF: Obj13_Index
0001768C 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00017690 6600                       		bne.s	locret_E302	; if time still	remains, branch
00017692 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; reset	time delay
00017698 4EBA EA8E                  		jsr	ChkObjOnScreen
0001769C 6600                       		bne.s	locret_E302
0001769E 6100 F1DC                  		bsr.w	SingleObjLoad
000176A2 6600                       		bne.s	locret_E302
000176A4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000176A8 3368 0008 0008             		move.w	8(a0),8(a1)
000176AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000176B4 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
000176BA                            
000176BA                            locret_E302:
000176BA 4E75                       		rts	
000176BC                            ; ===========================================================================
000176BC                            ; ---------------------------------------------------------------------------
000176BC                            ; Object 14 - lava balls (MZ, SLZ)
000176BC                            ; ---------------------------------------------------------------------------
000176BC                            
000176BC                            Obj14:					; XREF: Obj_Index
000176BC 7000                       		moveq	#0,d0
000176BE 1028 0024                  		move.b	$24(a0),d0
000176C2 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
000176C6 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
000176CA 6000 E6A6                  		bra.w	DisplaySprite
000176CE                            ; ===========================================================================
000176CE 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
000176D0 0000                       		dc.w Obj14_Action-Obj14_Index
000176D2 0000                       		dc.w Obj14_Delete-Obj14_Index
000176D4                            
000176D4 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
000176DE 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
000176E6                            ; ===========================================================================
000176E6                            
000176E6                            Obj14_Main:				; XREF: Obj14_Index
000176E6 5428 0024                  		addq.b	#2,$24(a0)
000176EA 117C 0008 0016             		move.b	#8,$16(a0)
000176F0 117C 0008 0017             		move.b	#8,$17(a0)
000176F6 217C 0001 358A 0004        		move.l	#Map_obj14,4(a0)
000176FE 317C 0345 0002             		move.w	#$345,2(a0)
00017704 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0001770A 6600                       		bne.s	loc_E35A
0001770C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
00017712                            
00017712                            loc_E35A:
00017712 117C 0004 0001             		move.b	#4,1(a0)
00017718 317C 0180 0018             		move.w	#$180,priority(a0)
0001771E 117C 008B 0020             		move.b	#$8B,$20(a0)
00017724 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001772A 4A28 0029                  		tst.b	$29(a0)
0001772E 6700                       		beq.s	Obj14_SetSpeed
00017730 0668 0100 0018             		addi.w	#$100,priority(a0)
00017736                            
00017736                            Obj14_SetSpeed:
00017736 7000                       		moveq	#0,d0
00017738 1028 0028                  		move.b	$28(a0),d0
0001773C D040                       		add.w	d0,d0
0001773E 317B 0094 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
00017744 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001774A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
00017750 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
00017752 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017758 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0001775E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
00017764 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0001776A                            
0001776A                            Obj14_PlaySnd:
0001776A 303C 00AE                  		move.w	#$AE,d0
0001776E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00017774                            
00017774                            Obj14_Action:				; XREF: Obj14_Index
00017774 7000                       		moveq	#0,d0
00017776 1028 0028                  		move.b	$28(a0),d0
0001777A D040                       		add.w	d0,d0
0001777C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
00017780 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
00017784 6100 E586                  		bsr.w	SpeedToPos
00017788 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0001778E 6100 AFC4                  		bsr.w	AnimateSprite
00017792                            
00017792                            Obj14_ChkDel:				; XREF: Obj13
00017792 4EF9 0000 0000             		jmp		MarkObjGone3
00017798                            ; ===========================================================================
00017798 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0001779C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
000177A0 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
000177A4 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
000177A8 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
000177AA                            ; ===========================================================================
000177AA                            ; lavaball types 00-03 fly up and fall back down
000177AA                            
000177AA                            Obj14_Type00:				; XREF: Obj14_TypeIndex
000177AA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
000177B0 3028 0030                  		move.w	$30(a0),d0
000177B4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
000177B8 6400                       		bcc.s	loc_E41E	; if not, branch
000177BA 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
000177BE                            
000177BE                            loc_E41E:
000177BE 08A8 0001 0022             		bclr	#1,$22(a0)
000177C4 4A68 0012                  		tst.w	$12(a0)
000177C8 6A00                       		bpl.s	locret_E430
000177CA 08E8 0001 0022             		bset	#1,$22(a0)
000177D0                            
000177D0                            locret_E430:
000177D0 4E75                       		rts	
000177D2                            ; ===========================================================================
000177D2                            ; lavaball type	04 flies up until it hits the ceiling
000177D2                            
000177D2                            Obj14_Type04:				; XREF: Obj14_TypeIndex
000177D2 08E8 0001 0022             		bset	#1,$22(a0)
000177D8 4EB9 0000 0000             		jsr	ObjHitCeiling
000177DE 4A41                       		tst.w	d1
000177E0 6A00                       		bpl.s	locret_E452
000177E2 117C 0008 0028             		move.b	#8,$28(a0)
000177E8 117C 0001 001C             		move.b	#1,$1C(a0)
000177EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
000177F4                            
000177F4                            locret_E452:
000177F4 4E75                       		rts	
000177F6                            ; ===========================================================================
000177F6                            ; lavaball type	05 falls down until it hits the	floor
000177F6                            
000177F6                            Obj14_Type05:				; XREF: Obj14_TypeIndex
000177F6 08A8 0001 0022             		bclr	#1,$22(a0)
000177FC 4EB9 0000 0000             		jsr	ObjHitFloor
00017802 4A41                       		tst.w	d1
00017804 6A00                       		bpl.s	locret_E474
00017806 117C 0008 0028             		move.b	#8,$28(a0)
0001780C 117C 0001 001C             		move.b	#1,$1C(a0)
00017812 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
00017818                            
00017818                            locret_E474:
00017818 4E75                       		rts	
0001781A                            ; ===========================================================================
0001781A                            ; lavaball types 06-07 move sideways
0001781A                            
0001781A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0001781A 08E8 0000 0022             		bset	#0,$22(a0)
00017820 76F8                       		moveq	#-8,d3
00017822 4EB9 0000 0000             		jsr	ObjHitWallLeft
00017828 4A41                       		tst.w	d1
0001782A 6A00                       		bpl.s	locret_E498
0001782C 117C 0008 0028             		move.b	#8,$28(a0)
00017832 117C 0003 001C             		move.b	#3,$1C(a0)
00017838 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0001783E                            
0001783E                            locret_E498:
0001783E 4E75                       		rts	
00017840                            ; ===========================================================================
00017840                            
00017840                            Obj14_Type07:				; XREF: Obj14_TypeIndex
00017840 08A8 0000 0022             		bclr	#0,$22(a0)
00017846 7608                       		moveq	#8,d3
00017848 4EB9 0000 0000             		jsr	ObjHitWallRight
0001784E 4A41                       		tst.w	d1
00017850 6A00                       		bpl.s	locret_E4BC
00017852 117C 0008 0028             		move.b	#8,$28(a0)
00017858 117C 0003 001C             		move.b	#3,$1C(a0)
0001785E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
00017864                            
00017864                            locret_E4BC:
00017864 4E75                       		rts	
00017866                            ; ===========================================================================
00017866                            
00017866                            Obj14_Type08:				; XREF: Obj14_TypeIndex
00017866 4E75                       		rts	
00017868                            ; ===========================================================================
00017868                            
00017868                            Obj14_Delete:				; XREF: Obj14_Index
00017868 6000 E4BC                  		bra.w	DeleteObject
0001786C                            ; ===========================================================================
0001786C                            Ani_obj14:
0001786C                            	include '_anim\obj14.asm'
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            ; Animation script - lava balls
0001786C                            ; ---------------------------------------------------------------------------
0001786C 0000                       		dc.w byte_E4CC-Ani_obj14
0001786E 0000                       		dc.w byte_E4D2-Ani_obj14
00017870 0000                       		dc.w byte_E4D6-Ani_obj14
00017872 0000                       		dc.w byte_E4DC-Ani_obj14
00017874 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0001787A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0001787E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
00017884 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
00017888                            		even
00017888                            		even
00017888                            
00017888                            ; ===========================================================================
00017888                            ; ---------------------------------------------------------------------------
00017888                            ; Object 6D - flame thrower (SBZ)
00017888                            ; ---------------------------------------------------------------------------
00017888                            
00017888                            Obj6D:					; XREF: Obj_Index
00017888 7000                       		moveq	#0,d0
0001788A 1028 0024                  		move.b	routine(a0),d0
0001788E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
00017892 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
00017896                            ; ===========================================================================
00017896 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
00017898 0000                       		dc.w Obj6D_Action-Obj6D_Index
0001789A                            ; ===========================================================================
0001789A                            
0001789A                            Obj6D_Main:				; XREF: Obj6D_Index
0001789A 5428 0024                  		addq.b	#2,routine(a0)
0001789E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
000178A6 317C 83D9 0002             		move.w	#$83D9,2(a0)
000178AC 0028 0004 0001             		ori.b	#4,1(a0)
000178B2 317C 0080 0018             		move.w	#$80,priority(a0)
000178B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000178BE 117C 000C 0023             		move.b	#$C,width_pixels(a0)
000178C4 1028 0028                  		move.b	subtype(a0),d0
000178C8 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000178CC D040                       		add.w	d0,d0		; multiply by 2
000178CE 3140 0030                  		move.w	d0,$30(a0)
000178D2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000178D6 1028 0028                  		move.b	subtype(a0),d0
000178DA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000178DE EB48                       		lsl.w	#5,d0		; multiply by $20
000178E0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000178E4 117C 000A 0036             		move.b	#$A,$36(a0)
000178EA 0828 0001 0022             		btst	#1,status(a0)
000178F0 6700                       		beq.s	Obj6D_Action
000178F2 117C 0002 001C             		move.b	#2,anim(a0)
000178F8 117C 0015 0036             		move.b	#$15,$36(a0)
000178FE                            
000178FE                            Obj6D_Action:				; XREF: Obj6D_Index
000178FE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00017902 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00017904 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0001790A 0868 0000 001C             		bchg	#0,anim(a0)
00017910 6700                       		beq.s	loc_E57A
00017912 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00017918 303C 0049                  		move.w	#$49,d0
0001791C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
00017922                            
00017922                            loc_E57A:
00017922 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
00017928 4EBA AE2A                  		jsr	AnimateSprite
0001792C 117C 0000 0020             		move.b	#0,collision_flags(a0)
00017932 1028 0036                  		move.b	$36(a0),d0
00017936 B028 001A                  		cmp.b	mapping_frame(a0),d0
0001793A 6600                       		bne.s	Obj6D_ChkDel
0001793C 117C 00A3 0020             		move.b	#$A3,collision_flags(a0)
00017942                            
00017942                            Obj6D_ChkDel:
00017942 4EF9 0000 0000             		jmp MarkObjGone
00017948                            ; ===========================================================================
00017948                            Ani_obj6D:
00017948                            	include "_anim\obj6D.asm"
00017948                            ; ---------------------------------------------------------------------------
00017948                            ; Animation script - flamethrower (SBZ)
00017948                            ; ---------------------------------------------------------------------------
00017948 0000                       		dc.w byte_E5C4-Ani_obj6D
0001794A 0000                       		dc.w byte_E5D2-Ani_obj6D
0001794C 0000                       		dc.w byte_E5DC-Ani_obj6D
0001794E 0000                       		dc.w byte_E5EA-Ani_obj6D
00017950 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0001795E 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
00017968 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00017976 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
00017980                            		even
00017980                            		even
00017980                            
00017980                            ; ---------------------------------------------------------------------------
00017980                            ; Sprite mappings - flame thrower (SBZ)
00017980                            ; ---------------------------------------------------------------------------
00017980                            Map_obj6D:
00017980                            	include "_maps\obj6D.asm"
00017980                            ; ---------------------------------------------------------------------------
00017980                            ; Sprite mappings - flame thrower (SBZ)
00017980                            ; ---------------------------------------------------------------------------
00017980 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00017984 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00017988 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0001798C 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
00017990 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00017994 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00017998 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0001799C 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
000179A0 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
000179A4 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
000179A8 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
000179AC 01                         byte_E620:	dc.b 1
000179AD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179B2 02                         byte_E626:	dc.b 2
000179B3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000179B8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179BD 02                         byte_E631:	dc.b 2
000179BE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179C8 03                         byte_E63C:	dc.b 3
000179C9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000179CE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000179D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179D8 03                         byte_E64C:	dc.b 3
000179D9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000179DE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179E3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179E8 04                         byte_E65C:	dc.b 4
000179E9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000179EE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000179F3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000179F8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000179FD 04                         byte_E671:	dc.b 4
000179FE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017A03 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017A08 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017A0D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017A12 05                         byte_E686:	dc.b 5
00017A13 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00017A18 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017A1D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017A22 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017A27 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017A2C 05                         byte_E6A0:	dc.b 5
00017A2D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017A32 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017A37 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017A3C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017A41 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017A46 06                         byte_E6BA:	dc.b 6
00017A47 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00017A4C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00017A51 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017A56 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00017A5B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017A60 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017A65 06                         byte_E6D9:	dc.b 6
00017A66 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00017A6B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017A70 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00017A75 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017A7A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017A7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017A84 01                         byte_E6F8:	dc.b 1
00017A85 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017A8A 02                         byte_E6FE:	dc.b 2
00017A8B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017A90 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017A95 02                         byte_E709:	dc.b 2
00017A96 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017A9B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017AA0 03                         byte_E714:	dc.b 3
00017AA1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017AA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017AAB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017AB0 03                         byte_E724:	dc.b 3
00017AB1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017AB6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017ABB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017AC0 04                         byte_E734:	dc.b 4
00017AC1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017AC6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017ACB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017AD0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017AD5 04                         byte_E749:	dc.b 4
00017AD6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017ADB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017AE0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017AE5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017AEA 05                         byte_E75E:	dc.b 5
00017AEB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00017AF0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017AF5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017AFA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017AFF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017B04 05                         byte_E778:	dc.b 5
00017B05 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017B0A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017B0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017B14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017B19 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017B1E 06                         byte_E792:	dc.b 6
00017B1F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00017B24 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00017B29 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017B2E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00017B33 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017B38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017B3D 06                         byte_E7B1:	dc.b 6
00017B3E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00017B43 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017B48 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00017B4D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017B52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017B57 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017B5C                            		even
00017B5C                            		even
00017B5C                            
00017B5C                            ; ===========================================================================
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            
00017B5C                            Obj46:					; XREF: Obj_Index
00017B5C 7000                       		moveq	#0,d0
00017B5E 1028 0024                  		move.b	$24(a0),d0
00017B62 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
00017B66 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
00017B6A                            ; ===========================================================================
00017B6A 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
00017B6C 0000                       		dc.w Obj46_Action-Obj46_Index
00017B6E                            ; ===========================================================================
00017B6E                            
00017B6E                            Obj46_Main:				; XREF: Obj46_Index
00017B6E 5428 0024                  		addq.b	#2,$24(a0)
00017B72 117C 000F 0016             		move.b	#$F,$16(a0)
00017B78 117C 000F 0017             		move.b	#$F,$17(a0)
00017B7E 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00017B86 317C 4000 0002             		move.w	#$4000,2(a0)
00017B8C 117C 0004 0001             		move.b	#4,1(a0)
00017B92 317C 0180 0018             		move.w	#$180,priority(a0)
00017B98 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017B9E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017BA4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00017BAA                            
00017BAA                            Obj46_Action:				; XREF: Obj46_Index
00017BAA 4A28 0001                  		tst.b	1(a0)
00017BAE 6A00                       		bpl.s	Obj46_ChkDel
00017BB0 7000                       		moveq	#0,d0
00017BB2 1028 0028                  		move.b	$28(a0),d0	; get object type
00017BB6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00017BBA D040                       		add.w	d0,d0
00017BBC 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00017BC0 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00017BC4 323C 001B                  		move.w	#$1B,d1
00017BC8 343C 0010                  		move.w	#$10,d2
00017BCC 363C 0011                  		move.w	#$11,d3
00017BD0 3828 0008                  		move.w	8(a0),d4
00017BD4 6100 0000                  		bsr.w	SolidObject
00017BD8                            
00017BD8                            Obj46_ChkDel:
00017BD8 6100 E198                  		bsr.w	DisplaySprite
00017BDC 4EF9 0000 0000             		jmp MarkObjGone3
00017BE2                            ; ===========================================================================
00017BE2 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00017BE4 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00017BE6 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00017BE8 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00017BEA 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00017BEC                            ; ===========================================================================
00017BEC                            
00017BEC                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00017BEC 4E75                       		rts	
00017BEE                            ; ===========================================================================
00017BEE                            
00017BEE                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00017BEE 3038 D008                  		move.w	($FFFFD008).w,d0
00017BF2 9068 0008                  		sub.w	8(a0),d0
00017BF6 6400                       		bcc.s	loc_E888
00017BF8 4440                       		neg.w	d0
00017BFA                            
00017BFA                            loc_E888:
00017BFA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00017BFE 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00017C00 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00017C06                            
00017C06                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00017C06 7000                       		moveq	#0,d0
00017C08 1038 FE74                  		move.b	($FFFFFE74).w,d0
00017C0C 0828 0003 0028             		btst	#3,$28(a0)
00017C12 6700                       		beq.s	loc_E8A8
00017C14 4440                       		neg.w	d0
00017C16 0640 0010                  		addi.w	#$10,d0
00017C1A                            
00017C1A                            loc_E8A8:
00017C1A 3228 0030                  		move.w	$30(a0),d1
00017C1E 9240                       		sub.w	d0,d1
00017C20 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00017C24 4E75                       		rts	
00017C26                            ; ===========================================================================
00017C26                            
00017C26                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00017C26 6100 E0E4                  		bsr.w	SpeedToPos
00017C2A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00017C30 4EB9 0000 0000             		jsr	ObjHitFloor
00017C36 4A41                       		tst.w	d1		; has the block	hit the	floor?
00017C38 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00017C3C D368 000C                  		add.w	d1,$C(a0)
00017C40 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00017C44 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017C4A 117C 0004 0028             		move.b	#4,$28(a0)
00017C50 3011                       		move.w	(a1),d0
00017C52 0240 03FF                  		andi.w	#$3FF,d0
00017C56 0C40 02E8                  		cmpi.w	#$2E8,d0
00017C5A 6400                       		bcc.s	locret_E8EE
00017C5C 117C 0000 0028             		move.b	#0,$28(a0)
00017C62                            
00017C62                            locret_E8EE:
00017C62 4E75                       		rts	
00017C64                            ; ===========================================================================
00017C64                            
00017C64                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00017C64 7000                       		moveq	#0,d0
00017C66 1038 FE70                  		move.b	($FFFFFE70).w,d0
00017C6A E648                       		lsr.w	#3,d0
00017C6C 3228 0030                  		move.w	$30(a0),d1
00017C70 9240                       		sub.w	d0,d1
00017C72 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
00017C76 4E75                       		rts	
00017C78                            ; ===========================================================================
00017C78                            ; ---------------------------------------------------------------------------
00017C78                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017C78                            ; ---------------------------------------------------------------------------
00017C78                            Map_obj46:
00017C78                            	include '_maps\obj46.asm'
00017C78                            ; ---------------------------------------------------------------------------
00017C78                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017C78                            ; ---------------------------------------------------------------------------
00017C78 0000                       		dc.w byte_E906-Map_obj46
00017C7A 01                         byte_E906:	dc.b 1
00017C7B F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00017C80                            		even
00017C80                            		even
00017C80                            
00017C80                            ; ===========================================================================
00017C80                            ; ---------------------------------------------------------------------------
00017C80                            ; Object 12 - lamp (SYZ)
00017C80                            ; ---------------------------------------------------------------------------
00017C80                            
00017C80                            Obj12:					; XREF: Obj_Index
00017C80 7000                       		moveq	#0,d0
00017C82 1028 0024                  		move.b	$24(a0),d0
00017C86 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00017C8A 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00017C8E                            ; ===========================================================================
00017C8E 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00017C90 0000                       		dc.w Obj12_Animate-Obj12_Index
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            Obj12_Main:				; XREF: Obj12_Index
00017C92 5428 0024                  		addq.b	#2,$24(a0)
00017C96 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00017C9E 317C 0000 0002             		move.w	#0,2(a0)
00017CA4 117C 0004 0001             		move.b	#4,1(a0)
00017CAA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017CB0 317C 0300 0018             		move.w	#$300,priority(a0)
00017CB6                            
00017CB6                            Obj12_Animate:				; XREF: Obj12_Index
00017CB6 5328 001E                  		subq.b	#1,$1E(a0)
00017CBA 6A00                       		bpl.s	Obj12_ChkDel
00017CBC 117C 0007 001E             		move.b	#7,$1E(a0)
00017CC2 5228 001A                  		addq.b	#1,$1A(a0)
00017CC6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00017CCC 6500                       		bcs.s	Obj12_ChkDel
00017CCE 117C 0000 001A             		move.b	#0,$1A(a0)
00017CD4                            
00017CD4                            Obj12_ChkDel:
00017CD4 4EF9 0000 0000             		jmp MarkObjGone
00017CDA                            ; ===========================================================================
00017CDA                            ; ---------------------------------------------------------------------------
00017CDA                            ; Sprite mappings - lamp (SYZ)
00017CDA                            ; ---------------------------------------------------------------------------
00017CDA                            Map_obj12:
00017CDA                            	include '_maps\obj12.asm'
00017CDA                            ; ---------------------------------------------------------------------------
00017CDA                            ; Sprite mappings - lamp (SYZ)
00017CDA                            ; ---------------------------------------------------------------------------
00017CDA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00017CDE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00017CE2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00017CE6 02                         byte_E98E:	dc.b 2
00017CE7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00017CEC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00017CF1 02                         byte_E999:	dc.b 2
00017CF2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00017CF7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00017CFC 02                         byte_E9A4:	dc.b 2
00017CFD F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00017D02 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00017D07 02                         byte_E9AF:	dc.b 2
00017D08 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00017D0D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00017D12 02                         byte_E9BA:	dc.b 2
00017D13 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00017D18 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00017D1D 02                         byte_E9C5:	dc.b 2
00017D1E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00017D23 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00017D28                            		even
00017D28                            		even
00017D28                            
00017D28                            ; ------------------------------------------------------------------------------
00017D28                            ; runs the slot machines in CNZ
00017D28                            ; ------------------------------------------------------------------------------
00017D28                            
00017D28                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00017D28                            
00017D28                            ; loc_2BF24:
00017D28                            SlotMachine:
00017D28 49F8 FF4E                  	lea	($FFFFFF4E).w,a4
00017D2C 7000                       	moveq	#0,d0
00017D2E 1014                       	move.b	0(a4),d0
00017D30 4EFB 0000                  	jmp	SlotMachine_JmpTable(pc,d0.w)
00017D34                            ; ===========================================================================
00017D34                            ; loc_2BF32:
00017D34                            SlotMachine_JmpTable: ;;
00017D34 6000 0000                  	bra.w	SlotMachine_Routine1
00017D38 6000 0000                  	bra.w	SlotMachine_Routine2
00017D3C 6000 0000                  	bra.w	SlotMachine_Routine3
00017D40 6000 0000                  	bra.w	SlotMachine_Routine4
00017D44 6000 0000                  	bra.w	SlotMachine_Routine5
00017D48 6000 0000                  	bra.w	SlotMachine_Routine6
00017D4C 4E75                       	rts
00017D4E                            ; ===========================================================================
00017D4E                            ; loc_2BF4C:
00017D4E                            SlotMachine_Routine1:
00017D4E 224C                       	movea.l	a4,a1
00017D50 7008                       	moveq	#8,d0
00017D52                            
00017D52                            SlotMachine_Routineloop:
00017D52 4259                       	clr.w	(a1)+
00017D54 51C8 FFFC                  	dbf	d0,SlotMachine_Routineloop
00017D58                            
00017D58 1038 FE0F                  	move.b	($FFFFFE0F).w,d0
00017D5C 1940 0006                  	move.b	d0,6(a4)
00017D60 E618                       	ror.b	#3,d0
00017D62 1940 000A                  	move.b	d0,$A(a4)
00017D66 E618                       	ror.b	#3,d0
00017D68 1940 000E                  	move.b	d0,$E(a4)
00017D6C 197C 0008 0007             	move.b	#8,7(a4)
00017D72 197C 0008 000B             	move.b	#8,$B(a4)
00017D78 197C 0008 000F             	move.b	#8,$F(a4)
00017D7E 197C 0008 0008             	move.b	#8,8(a4)
00017D84 197C 0008 000C             	move.b	#8,$C(a4)
00017D8A 197C 0008 0010             	move.b	#8,$10(a4)
00017D90 197C 0001 0001             	move.b	#1,1(a4)
00017D96 5814                       	addq.b	#4,0(a4)
00017D98 4E75                       	rts
00017D9A                            ; ===========================================================================
00017D9A                            ; loc_2BF9A:
00017D9A                            SlotMachine_Routine2:
00017D9A 6100 0000                  	bsr.w	loc_2C20A
00017D9E 4A2C 0001                  	tst.b	1(a4)
00017DA2 6700                       	beq.s	loc_2BFA6
00017DA4 4E75                       	rts
00017DA6                            ; ===========================================================================
00017DA6                            
00017DA6                            loc_2BFA6:
00017DA6 18BC 0018                  	move.b	#$18,0(a4)
00017DAA 426C 0008                  	clr.w	8(a4)
00017DAE 426C 000C                  	clr.w	$C(a4)
00017DB2 426C 0010                  	clr.w	$10(a4)
00017DB6 4E75                       	rts
00017DB8                            ; ===========================================================================
00017DB8                            ; loc_2BFBA:
00017DB8                            SlotMachine_Routine3:
00017DB8 1038 FE0F                  	move.b	($FFFFFE0F).w,d0
00017DBC 0200 0007                  	andi.b	#7,d0
00017DC0 5900                       	subq.b	#4,d0
00017DC2 0600 0030                  	addi.b	#$30,d0
00017DC6 1940 0008                  	move.b	d0,8(a4)
00017DCA 1038 FE0F                  	move.b	($FFFFFE0F).w,d0
00017DCE E918                       	rol.b	#4,d0
00017DD0 0200 0007                  	andi.b	#7,d0
00017DD4 5900                       	subq.b	#4,d0
00017DD6 0600 0030                  	addi.b	#$30,d0
00017DDA 1940 000C                  	move.b	d0,$C(a4)
00017DDE 1038 FE0E                  	move.b	($FFFFFE0E).w,d0
00017DE2 0200 0007                  	andi.b	#7,d0
00017DE6 5900                       	subq.b	#4,d0
00017DE8 0600 0030                  	addi.b	#$30,d0
00017DEC 1940 0010                  	move.b	d0,$10(a4)
00017DF0 197C 0002 0001             	move.b	#2,1(a4)
00017DF6 422C 0003                  	clr.b	3(a4)
00017DFA 422C 0009                  	clr.b	9(a4)
00017DFE 422C 000D                  	clr.b	$D(a4)
00017E02 422C 0011                  	clr.b	$11(a4)
00017E06 5814                       	addq.b	#4,0(a4)
00017E08 1038 FE0F                  	move.b	($FFFFFE0F).w,d0
00017E0C E618                       	ror.b	#3,d0
00017E0E 45F9 0000 0000             	lea	(byte_2C3EC).l,a2
00017E14                            
00017E14                            loc_2C018:
00017E14 9012                       	sub.b	(a2),d0
00017E16 6500                       	bcs.s	loc_2C020
00017E18 564A                       	addq.w	#3,a2
00017E1A 60F8                       	bra.s	loc_2C018
00017E1C                            ; ===========================================================================
00017E1C                            
00017E1C                            loc_2C020:
00017E1C 0C12 00FF                  	cmpi.b	#-1,(a2)
00017E20 6700                       	beq.s	loc_2C034
00017E22 196A 0001 0004             	move.b	1(a2),4(a4)
00017E28 196A 0002 0005             	move.b	2(a2),5(a4)
00017E2E 4E75                       	rts
00017E30                            ; ===========================================================================
00017E30                            
00017E30                            loc_2C034:
00017E30 1200                       	move.b	d0,d1
00017E32 0241 0007                  	andi.w	#7,d1
00017E36 43F9 0000 0000             	lea	(byte_2C401).l,a1
00017E3C 1971 0000 0004             	move.b	(a1,d0.w),4(a4)
00017E42 E618                       	ror.b	#3,d0
00017E44 1200                       	move.b	d0,d1
00017E46 0241 0007                  	andi.w	#7,d1
00017E4A 43F9 0000 0000             	lea	(byte_2C409).l,a1
00017E50 1431 1000                  	move.b	(a1,d1.w),d2
00017E54 E90A                       	lsl.b	#4,d2
00017E56 E618                       	ror.b	#3,d0
00017E58 0240 0007                  	andi.w	#7,d0
00017E5C 43F9 0000 0000             	lea	(byte_2C411).l,a1
00017E62 8431 0000                  	or.b	(a1,d0.w),d2
00017E66 1942 0005                  	move.b	d2,5(a4)
00017E6A 4E75                       	rts
00017E6C                            ; ===========================================================================
00017E6C                            ; loc_2C070:
00017E6C                            SlotMachine_Routine4:
00017E6C 6100 0000                  	bsr.w	loc_2C20A
00017E70 4A2C 0001                  	tst.b	1(a4)
00017E74 6700                       	beq.s	loc_2C07C
00017E76 4E75                       	rts
00017E78                            ; ===========================================================================
00017E78                            
00017E78                            loc_2C07C:
00017E78 062C 0030 0008             	addi.b	#$30,8(a4)
00017E7E 062C 0030 000C             	addi.b	#$30,$C(a4)
00017E84 062C 0030 0010             	addi.b	#$30,$10(a4)
00017E8A 1038 FE0F                  	move.b	($FFFFFE0F).w,d0
00017E8E 0200 000F                  	andi.b	#$F,d0
00017E92 0600 000C                  	addi.b	#$C,d0
00017E96 1940 0001                  	move.b	d0,1(a4)
00017E9A 422C 0002                  	clr.b	2(a4)
00017E9E 5814                       	addq.b	#4,0(a4)
00017EA0 4E75                       	rts
00017EA2                            ; ===========================================================================
00017EA2                            ; loc_2C0A8:
00017EA2                            SlotMachine_Routine5:
00017EA2 6100 0000                  	bsr.w	loc_2C20A
00017EA6 0C2C 000C 0009             	cmpi.b	#$C,9(a4)
00017EAC 6600                       	bne.s	loc_2C0C6
00017EAE 0C2C 000C 000D             	cmpi.b	#$C,$D(a4)
00017EB4 6600                       	bne.s	loc_2C0C6
00017EB6 0C2C 000C 0011             	cmpi.b	#$C,$11(a4)
00017EBC 6700 0000                  	beq.w	SlotMachine_Routine6
00017EC0                            
00017EC0                            loc_2C0C6:
00017EC0 7000                       	moveq	#0,d0
00017EC2 102C 0003                  	move.b	3(a4),d0
00017EC6 43EC 0006                  	lea	6(a4),a1
00017ECA D2C0                       	adda.w	d0,a1
00017ECC 47F9 0000 0000             	lea	(byte_2C401).l,a3
00017ED2 D040                       	add.w	d0,d0
00017ED4 D6C0                       	adda.w	d0,a3
00017ED6 7000                       	moveq	#0,d0
00017ED8 1029 0003                  	move.b	3(a1),d0
00017EDC 4EFB 0000                  	jmp	SlotMachine_Routine5_JmpTable(pc,d0.w)
00017EE0                            ; ===========================================================================
00017EE0                            
00017EE0                            ; loc_2C0E6
00017EE0                            SlotMachine_Routine5_JmpTable: ;;
00017EE0 6000 0000                  	bra.w	SlotMachine_Routine5_1
00017EE4 6000 0000                  	bra.w	SlotMachine_Routine5_2
00017EE8 6000 0000                  	bra.w	SlotMachine_Routine5_3
00017EEC 6000 0000                  	bra.w	SlotMachine_Routine5_4
00017EF0                            ; ===========================================================================
00017EF0                            
00017EF0                            loc_2C0F6:
00017EF0 322C 0004                  	move.w	4(a4),d1
00017EF4 102C 0003                  	move.b	3(a4),d0
00017EF8 6700                       	beq.s	loc_2C102
00017EFA E069                       	lsr.w	d0,d1
00017EFC                            
00017EFC                            loc_2C102:
00017EFC 0241 0007                  	andi.w	#7,d1
00017F00 0C01 0005                  	cmpi.b	#5,d1
00017F04 6E00                       	bgt.s	loc_2C10E
00017F06 4E75                       	rts
00017F08                            ; ===========================================================================
00017F08                            
00017F08                            loc_2C10E:
00017F08 5501                       	subq.b	#2,d1
00017F0A 4E75                       	rts
00017F0C                            ; ===========================================================================
00017F0C                            
00017F0C                            loc_2C112:
00017F0C 343C FFF0                  	move.w	#-$10,d2
00017F10 0241 000F                  	andi.w	#$F,d1
00017F14 102C 0003                  	move.b	3(a4),d0
00017F18 6700                       	beq.s	loc_2C124
00017F1A E169                       	lsl.w	d0,d1
00017F1C E17A                       	rol.w	d0,d2
00017F1E                            
00017F1E                            loc_2C124:
00017F1E C56C 0004                  	and.w	d2,4(a4)
00017F22 836C 0004                  	or.w	d1,4(a4)
00017F26 026C 0777 0004             	andi.w	#$777,4(a4)
00017F2C 4E75                       	rts
00017F2E                            ; ===========================================================================
00017F2E                            ; loc_2C134:
00017F2E                            SlotMachine_Routine5_1:
00017F2E 4A2C 0003                  	tst.b	3(a4)
00017F32 6600                       	bne.s	loc_2C142
00017F34 4A2C 0001                  	tst.b	1(a4)
00017F38 6B00                       	bmi.s	loc_2C14C
00017F3A 4E75                       	rts
00017F3C                            ; ===========================================================================
00017F3C                            
00017F3C                            loc_2C142:
00017F3C 0C29 0008 FFFF             	cmpi.b	#8,-1(a1)
00017F42 6C00                       	bge.s	loc_2C14C
00017F44 4E75                       	rts
00017F46                            ; ===========================================================================
00017F46                            
00017F46                            loc_2C14C:
00017F46 61A8                       	bsr.s	loc_2C0F6
00017F48 3011                       	move.w	(a1),d0
00017F4A 0440 00A0                  	subi.w	#$A0,d0
00017F4E E048                       	lsr.w	#8,d0
00017F50 0240 0007                  	andi.w	#7,d0
00017F54 1033 0000                  	move.b	(a3,d0.w),d0
00017F58 B001                       	cmp.b	d1,d0
00017F5A 6700                       	beq.s	loc_2C164
00017F5C 4E75                       	rts
00017F5E                            ; ===========================================================================
00017F5E                            
00017F5E                            loc_2C164:
00017F5E 5829 0003                  	addq.b	#4,3(a1)
00017F62 137C 0060 0002             	move.b	#$60,2(a1)
00017F68 4E75                       	rts
00017F6A                            ; ===========================================================================
00017F6A                            ; loc_2C170:
00017F6A                            SlotMachine_Routine5_2:
00017F6A 6184                       	bsr.s	loc_2C0F6
00017F6C 3011                       	move.w	(a1),d0
00017F6E 0640 00F0                  	addi.w	#$F0,d0
00017F72 0240 0700                  	andi.w	#$700,d0
00017F76 E048                       	lsr.w	#8,d0
00017F78 1033 0000                  	move.b	(a3,d0.w),d0
00017F7C B200                       	cmp.b	d0,d1
00017F7E 6700                       	beq.s	loc_2C1AE
00017F80 0C29 0020 0002             	cmpi.b	#$20,2(a1)
00017F86 6300                       	bls.s	loc_2C194
00017F88 0429 000C 0002             	subi.b	#$C,2(a1)
00017F8E                            
00017F8E                            loc_2C194:
00017F8E 0C29 0018 0002             	cmpi.b	#$18,2(a1)
00017F94 6E00                       	bgt.s	loc_2C19E
00017F96 4E75                       	rts
00017F98                            ; ===========================================================================
00017F98                            
00017F98                            loc_2C19E:
00017F98 0C29 0080 0001             	cmpi.b	#$80,1(a1)
00017F9E 6300                       	bls.s	loc_2C1A8
00017FA0 4E75                       	rts
00017FA2                            ; ===========================================================================
00017FA2                            
00017FA2                            loc_2C1A8:
00017FA2 5529 0002                  	subq.b	#2,2(a1)
00017FA6 4E75                       	rts
00017FA8                            ; ===========================================================================
00017FA8                            
00017FA8                            loc_2C1AE:
00017FA8 3011                       	move.w	(a1),d0
00017FAA 0640 0080                  	addi.w	#$80,d0
00017FAE 3200                       	move.w	d0,d1
00017FB0 0241 0700                  	andi.w	#$700,d1
00017FB4 0441 0010                  	subi.w	#$10,d1
00017FB8 3281                       	move.w	d1,(a1)
00017FBA E048                       	lsr.w	#8,d0
00017FBC 0240 0007                  	andi.w	#7,d0
00017FC0 1233 0000                  	move.b	(a3,d0.w),d1
00017FC4 6100 FF46                  	bsr.w	loc_2C112
00017FC8 137C 00F8 0002             	move.b	#-8,2(a1)
00017FCE 5829 0003                  	addq.b	#4,3(a1)
00017FD2 4E75                       	rts
00017FD4                            ; ===========================================================================
00017FD4                            ; loc_2C1DA:
00017FD4                            SlotMachine_Routine5_3:
00017FD4 4A29 0001                  	tst.b	1(a1)
00017FD8 6700                       	beq.s	loc_2C1E2
00017FDA 4E75                       	rts
00017FDC                            ; ===========================================================================
00017FDC                            
00017FDC                            loc_2C1E2:
00017FDC 4229 0002                  	clr.b	2(a1)
00017FE0 5829 0003                  	addq.b	#4,3(a1)
00017FE4 4E75                       	rts
00017FE6                            ; ===========================================================================
00017FE6                            ; return_2C1EC:
00017FE6                            SlotMachine_Routine5_4:
00017FE6 4E75                       	rts
00017FE8                            ; ===========================================================================
00017FE8                            ; loc_2C1EE:
00017FE8                            SlotMachine_Routine6:
00017FE8 426C 0008                  	clr.w	8(a4)
00017FEC 426C 000C                  	clr.w	$C(a4)
00017FF0 426C 0010                  	clr.w	$10(a4)
00017FF4 422C 0001                  	clr.b	1(a4)
00017FF8 6100 0000                  	bsr.w	SlotMachine_ChooseReward
00017FFC 18BC 0018                  	move.b	#$18,0(a4)
00018000 4E75                       	rts
00018002                            ; ===========================================================================
00018002                            
00018002                            loc_2C20A:
00018002 7000                       	moveq	#0,d0
00018004 102C 0003                  	move.b	3(a4),d0
00018008 43EC 0006                  	lea	6(a4),a1
0001800C D2C0                       	adda.w	d0,a1
0001800E 47F9 0000 0000             	lea	(byte_2C401).l,a3
00018014 D6C0                       	adda.w	d0,a3
00018016 D6C0                       	adda.w	d0,a3
00018018 4EFB 0000                  	jmp	BranchTo_SlotMachine_Routine6_1(pc,d0.w)
0001801C                            ; ===========================================================================
0001801C                            
0001801C                            BranchTo_SlotMachine_Routine6_1 
0001801C 6000 0000                  	bra.w	SlotMachine_Routine6_1
00018020 6000 0000                  	bra.w	SlotMachine_Routine6_2
00018024                            
00018024 422C 0003                  	clr.b	3(a4)
00018028 532C 0001                  	subq.b	#1,1(a4)
0001802C 343C AE00                  	move.w	#$AE00,d2
00018030 6000                       	bra.s	loc_2C24E
00018032                            ; ===========================================================================
00018032                            ; loc_2C23A:
00018032                            SlotMachine_Routine6_1:
00018032 582C 0003                  	addq.b	#4,3(a4)
00018036 343C AA00                  	move.w	#$AA00,d2
0001803A 6000 0000                  	bra.w	loc_2C24E
0001803E                            ; ===========================================================================
0001803E                            ; loc_2C246:
0001803E                            SlotMachine_Routine6_2:
0001803E 582C 0003                  	addq.b	#4,3(a4)
00018042 343C AC00                  	move.w	#$AC00,d2
00018046                            
00018046                            loc_2C24E:
00018046 3011                       	move.w	(a1),d0
00018048 1229 0002                  	move.b	2(a1),d1
0001804C 4881                       	ext.w	d1
0001804E 9351                       	sub.w	d1,(a1)
00018050 3611                       	move.w	(a1),d3
00018052 0240 07F8                  	andi.w	#$7F8,d0
00018056 0243 07F8                  	andi.w	#$7F8,d3
0001805A B640                       	cmp.w	d0,d3
0001805C 6600                       	bne.s	loc_2C268
0001805E 4E75                       	rts
00018060                            ; ---------------------------------------------------------------------------
00018060                            loc_2C268:
00018060 6100 0000                  	bsr.w	loc_2C2B8
00018064 43F8 A000                  	lea	($FFFFA000).w,a1
00018068 323C 001F                  	move.w	#$1F,d1
0001806C                            
0001806C                            loc_2C268_loop:
0001806C 236A 0080 0080             	move.l	$80(a2),$80(a1)
00018072 236A 0100 0100             	move.l	$100(a2),$100(a1)
00018078 236A 0180 0180             	move.l	$180(a2),$180(a1)
0001807E 22DA                       	move.l	(a2)+,(a1)+
00018080 5003                       	addq.b	#8,d3
00018082 6600                       	bne.s	loc_2C268_2
00018084 0643 0100                  	addi.w	#$100,d3
00018088 0243 0700                  	andi.w	#$700,d3
0001808C 6100 0000                  	bsr.w	loc_2C2B8
00018090 51C9 FFDA                  loc_2C268_2:	dbf	d1,loc_2C268_loop
00018094                            
00018094 223C 00FF A000             	move.l	#$FFA000,d1
0001809A 4A78 FF88                  	tst.w	(Two_player_mode).w
0001809E 6700                       	beq.s	loc_2C2AC
000180A0 0642 4000                  	addi.w	#$4000,d2
000180A4                            
000180A4                            loc_2C2AC:
000180A4 363C 0100                  	move.w	#$100,d3
000180A8 4EB9 0000 34FC             	jsr	(QueueDMATransfer).l
000180AE 4E75                       	rts
000180B0                            ; ===========================================================================
000180B0                            
000180B0                            loc_2C2B8:
000180B0 3003                       	move.w	d3,d0
000180B2 E048                       	lsr.w	#8,d0
000180B4 0240 0007                  	andi.w	#7,d0
000180B8 1033 0000                  	move.b	(a3,d0.w),d0
000180BC 0240 0007                  	andi.w	#7,d0
000180C0 EE58                       	ror.w	#7,d0
000180C2 45F9 0000 0000             	lea	(Art_Slot).l,a2
000180C8 D4C0                       	adda.w	d0,a2
000180CA 3003                       	move.w	d3,d0
000180CC 0240 00F8                  	andi.w	#$F8,d0
000180D0 E248                       	lsr.w	#1,d0
000180D2 D4C0                       	adda.w	d0,a2
000180D4 4E75                       	rts
000180D6                            ; ===========================================================================
000180D6                            
000180D6                            ; loc_2C2DE:
000180D6                            SlotMachine_ChooseReward:
000180D6 142C 0005                  	move.b	5(a4),d2
000180DA 1602                       	move.b	d2,d3
000180DC 0242 00F0                  	andi.w	#$F0,d2
000180E0 E84A                       	lsr.w	#4,d2
000180E2 0243 000F                  	andi.w	#$F,d3
000180E6 7000                       	moveq	#0,d0
000180E8 B42C 0004                  	cmp.b	4(a4),d2
000180EC 6600                       	bne.s	SlotMachine_ChooseReward2
000180EE 5840                       	addq.w	#4,d0
000180F0                            SlotMachine_ChooseReward2:
000180F0 B62C 0004                  	cmp.b	4(a4),d3
000180F4 6600                       	bne.s	SlotMachine_ChooseReward3
000180F6 5040                       	addq.w	#8,d0
000180F8                            SlotMachine_ChooseReward3:
000180F8 4EFB 0000                  	jmp	SlotMachine_ChooseReward_JmpTable(pc,d0.w)
000180FC                            ; ===========================================================================
000180FC                            
000180FC                            ; loc_2C304:
000180FC                            SlotMachine_ChooseReward_JmpTable: ;;
000180FC 6000 0000                  	bra.w	loc_2C374
00018100 6000 0000                  	bra.w	loc_2C34A
00018104 6000 0000                  	bra.w	loc_2C31C
00018108                            
00018108 3002                       	move.w	d2,d0
0001810A 6100 0000                  	bsr.w	loc_2C3CA
0001810E 3940 0004                  	move.w	d0,4(a4)
00018112 4E75                       	rts
00018114                            ; ===========================================================================
00018114                            
00018114                            loc_2C31C:
00018114 0C03 0003                  	cmpi.b	#3,d3
00018118 6600                       	bne.s	loc_2C332
0001811A 3002                       	move.w	d2,d0
0001811C 6100 0000                  	bsr.w	loc_2C3CA
00018120 6100 0000                  	bsr.w	loc_2C3D8
00018124 3940 0004                  	move.w	d0,4(a4)
00018128 4E75                       	rts
0001812A                            ; ===========================================================================
0001812A                            
0001812A                            loc_2C332:
0001812A 0C02 0003                  	cmpi.b	#3,d2
0001812E 6600 0000                  	bne.w	loc_2C374
00018132 3003                       	move.w	d3,d0
00018134 6100 0000                  	bsr.w	loc_2C3CA
00018138 6100 0000                  	bsr.w	loc_2C3DC
0001813C 3940 0004                  	move.w	d0,4(a4)
00018140 4E75                       	rts
00018142                            ; ===========================================================================
00018142                            
00018142                            loc_2C34A:
00018142 0C02 0003                  	cmpi.b	#3,d2
00018146 6600                       	bne.s	loc_2C35E
00018148 3003                       	move.w	d3,d0
0001814A 6100                       	bsr.s	loc_2C3CA
0001814C 6100 0000                  	bsr.w	loc_2C3D8
00018150 3940 0004                  	move.w	d0,4(a4)
00018154 4E75                       	rts
00018156                            ; ===========================================================================
00018156                            
00018156                            loc_2C35E:
00018156 0C03 0003                  	cmpi.b	#3,d3
0001815A 6600 0000                  	bne.w	loc_2C374
0001815E 3002                       	move.w	d2,d0
00018160 6100                       	bsr.s	loc_2C3CA
00018162 6100 0000                  	bsr.w	loc_2C3DC
00018166 3940 0004                  	move.w	d0,4(a4)
0001816A 4E75                       	rts
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            loc_2C374:
0001816C B602                       	cmp.b	d2,d3
0001816E 6600                       	bne.s	loc_2C3A8
00018170 0C2C 0003 0004             	cmpi.b	#3,4(a4)
00018176 6600                       	bne.s	loc_2C38E
00018178 3002                       	move.w	d2,d0
0001817A 6100                       	bsr.s	loc_2C3CA
0001817C 6100 0000                  	bsr.w	loc_2C3DC
00018180 3940 0004                  	move.w	d0,4(a4)
00018184 4E75                       	rts
00018186                            ; ===========================================================================
00018186                            
00018186                            loc_2C38E:
00018186 0C02 0003                  	cmpi.b	#3,d2
0001818A 6600                       	bne.s	loc_2C3A8
0001818C 102C 0004                  	move.b	4(a4),d0
00018190 0240 000F                  	andi.w	#$F,d0
00018194 6100                       	bsr.s	loc_2C3CA
00018196 6100 0000                  	bsr.w	loc_2C3D8
0001819A 3940 0004                  	move.w	d0,4(a4)
0001819E 4E75                       	rts
000181A0                            ; ===========================================================================
000181A0                            
000181A0                            loc_2C3A8:
000181A0 7202                       	moveq	#2,d1
000181A2 7000                       	moveq	#0,d0
000181A4 0C2C 0005 0004             	cmpi.b	#5,4(a4)
000181AA 6600                       	bne.s	loc_2C3A8_2
000181AC D041                       	add.w	d1,d0
000181AE                            loc_2C3A8_2:
000181AE 0C02 0005                  	cmpi.b	#5,d2
000181B2 6600                       	bne.s	loc_2C3A8_3
000181B4 D041                       	add.w	d1,d0
000181B6                            loc_2C3A8_3:
000181B6 0C03 0005                  	cmpi.b	#5,d3
000181BA 6600                       	bne.s	loc_2C3A8_4
000181BC D041                       	add.w	d1,d0
000181BE                            loc_2C3A8_4:
000181BE 3940 0004                  	move.w	d0,4(a4)
000181C2                            
000181C2                            loc_2C3CA:
000181C2 D040                       	add.w	d0,d0
000181C4 45F9 0000 0000             	lea	(byte_2C3E0).l,a2
000181CA 3032 0000                  	move.w	(a2,d0.w),d0
000181CE 4E75                       	rts
000181D0                            ; ===========================================================================
000181D0                            
000181D0                            loc_2C3D8:
000181D0 E540                       	asl.w	#2,d0
000181D2 4E75                       	rts
000181D4                            ; ===========================================================================
000181D4                            
000181D4                            loc_2C3DC:
000181D4 D040                       	add.w	d0,d0
000181D6 4E75                       	rts
000181D8                            
000181D8                            ; ===========================================================================
000181D8                            ; data for the slot machines
000181D8 001E 0019 FFFF 0096 000A+  byte_2C3E0:	dc.b   0,$1E,  0,$19,$FF,$FF,  0,$96,  0, $A,  0,$14
000181E4 0803 3312 0000 1201 1124+  byte_2C3EC:	dc.b 8,3,$33,$12,0,0,$12,1,$11,$24,2,$22,$1E,4,$44,$1E
000181F4 0555 FF0F FF               		dc.b 5,$55,$FF,$F,$FF	; 16
000181F9 0300 0104 0205 0401        byte_2C401:	dc.b   3,  0,  1,  4,  2,  5,  4,  1
00018201 0300 0104 0205 0002        byte_2C409:	dc.b   3,  0,  1,  4,  2,  5,  0,  2
00018209 0300 0104 0205 0401 00     byte_2C411:	dc.b   3,  0,  1,  4,  2,  5,  4,  1,  0
00018212                            ; ===========================================================================
00018212 4E71                       	nop
00018214                            
00018214                            JmpTo10_SingleObjLoad 
00018214 4EFA E666                  	jmp	SingleObjLoad
00018218                            ; ===========================================================================
00018218                            
00018218                            JmpTo29_MarkObjGone 
00018218 4EF9 0000 0000             	jmp	MarkObjGone
0001821E                            ; ===========================================================================
0001821E                            
0001821E                            JmpTo10_AnimateSprite 
0001821E 4EFA A534                  	jmp	AnimateSprite
00018222                            ; ===========================================================================
00018222                            
00018222                            JmpTo6_Adjust2PArtPointer2 
00018222 4E75                       	rts
00018224                            ; ===========================================================================
00018224                            
00018224                            JmpTo54_Adjust2PArtPointer 
00018224 4E75                       	rts
00018226                            ; ===========================================================================
00018226                            
00018226                            JmpTo12_CalcSine 
00018226 4EF9 0000 8F30             	jmp	(CalcSine).l
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            ; ===========================================================================
0001822C                            	
0001822C                            ; ===========================================================================
0001822C                            ; ---------------------------------------------------------------------------
0001822C                            ; Object 47 - pinball bumper (SYZ)
0001822C                            ; ---------------------------------------------------------------------------
0001822C                            
0001822C                            ;===============================================================================
0001822C                            ; Red Ball Bumper With Star
0001822C                            ; [ Begin ]
0001822C                            ;===============================================================================
0001822C                            Obj47:
0001822C 7000                       		moveq	#0,d0
0001822E 1028 0024                  		move.b	$24(a0),d0
00018232 323B 0000                  		move.w	loc_1B5BA(pc,d0),d1
00018236 4EFB 1000                  		jmp	loc_1B5BA(pc,d1)
0001823A                            loc_1B5BA:
0001823A 0000                       		dc.w	loc_1B5BE-loc_1B5BA
0001823C 0000                       		dc.w	loc_1B5EC-loc_1B5BA
0001823E                            loc_1B5BE:
0001823E 5428 0024                  		addq.b	#2,$24(a0)
00018242 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0) 
0001824A 317C 0380 0002             		move.w	#$380,2(a0)
00018250                            ;		bsr	ModifySpriteAttr_2P	
00018250 117C 0004 0001             		move.b	#4,1(a0)
00018256 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001825C 317C 0080 0018             		move.w	#$80,priority(a0)
00018262 117C 00D7 0020             		move.b	#$D7,$20(a0)
00018268                            loc_1B5EC:
00018268 1028 0021                  		move.b	$21(a0),d0
0001826C 6700 0000                  		beq	loc_1B6BA
00018270 43F8 D000                  		lea	($FFFFD000).w,a1
00018274 08A8 0000 0021             		bclr	#0,$21(a0)
0001827A 6700                       		beq.s	loc_1B602
0001827C 6100                       		bsr.s	loc_1B618
0001827E                            loc_1B602:
0001827E                            ;		lea	($FFFFD040).w,a1
0001827E                            ;		bclr	#1,$21(a0)
0001827E                            ;		beq.s	loc_1B610
0001827E                            ;		bsr.s	loc_1B618
0001827E                            loc_1B610:
0001827E 4228 0021                  		clr.b	$21(a0)
00018282 6000 0000                  		bra	loc_1B6BA
00018286                            loc_1B618:
00018286 3228 0008                  		move.w	8(a0),d1
0001828A 3428 000C                  		move.w	$C(a0),d2
0001828E 9269 0008                  		sub.w	8(a1),d1
00018292 9469 000C                  		sub.w	$C(a1),d2
00018296 4EB9 0000 91FE             		jsr	CalcAngle	
0001829C 1238 FE04                  		move.b	($FFFFFE04).w,d1
000182A0 0241 0003                  		and.w	#3,d1
000182A4 D041                       		add.w	d1,d0
000182A6 4EB9 0000 8F30             		jsr	CalcSine	
000182AC C3FC F900                  		muls.w	#$F900,d1
000182B0 E081                       		asr.l	#8,d1
000182B2 3341 0010                  		move.w	d1,$10(a1)
000182B6 C1FC F900                  		muls.w	#$F900,d0
000182BA E080                       		asr.l	#8,d0
000182BC 3340 0012                  		move.w	d0,$12(a1)
000182C0 08E9 0001 0022             		bset	#1,$22(a1)
000182C6 08A9 0004 0022             		bclr	#4,$22(a1)
000182CC 08A9 0005 0022             		bclr	#5,$22(a1)
000182D2 4229 003C                  		clr.b	$3C(a1)
000182D6 117C 0001 001C             		move.b	#1,$1C(a0)
000182DC 303C 00AA                  		move.w	#$AA,d0
000182E0 4EB8 3212                  		jsr	PlaySound	
000182E4                            ;		lea	(v_objstate).w,a2
000182E4 7000                       		moveq	#0,d0
000182E6 3028 0014                  		move.w	respawn_index(a0),d0
000182EA                            ;        move.w	respawn_index(a0),d0
000182EA 6700                       		beq.s	loc_1B690
000182EC 3440                       	    movea.w	d0,a2
000182EE 0C12 008A                  		cmp.b	#$8A,(a2)
000182F2 6400                       		bcc.s	loc_1B6B8
000182F4 5212                       		addq.b	#1,(a2)
000182F6                            loc_1B690:
000182F6 7001                       		moveq	#1,d0
000182F8 3649                       		move.w	a1,a3
000182FA 4EB9 0000 0000             		jsr	AddPoints	
00018300 6100 0000                  		bsr	SingleObjectLoad	
00018304 6600                       		bne.s	loc_1B6B8
00018306 12BC 0029                  		move.b	#$29,0(a1)
0001830A 3368 0008 0008             		move.w	8(a0),8(a1)
00018310 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018316 137C 0004 001A             		move.b	#4,$1A(a1)
0001831C                            loc_1B6B8:
0001831C 4E75                       		rts
0001831E                            loc_1B6BA:
0001831E 43F9 0000 0000             		lea	(Ani_obj47),a1 
00018324 6100 0000                  		bsr	loc_1B716
00018328 6000 0000                  		bra	loc_1B710
0001832C                            ;-------------------------------------------------------------------------------
0001832C                            Ani_obj47:
0001832C 0000 0000                  	dc.w byte_319B82-Ani_Obj47,byte_319B85-Ani_Obj47; 0 ; ...
00018330 0F00 FF                    byte_319B82:	dc.b  $F,  0,$FF		  ; 0 ;	...
00018333 0301 0001 FD00 00          byte_319B85:	dc.b   3,  1,  0,  1,$FD,  0,  0; 0 ; ...
0001833A                            
0001833A                            ; ---------------------------------------------------------------------------
0001833A                            ; Sprite mappings - pinball bumper (SYZ)
0001833A                            ; ---------------------------------------------------------------------------
0001833A                            Map_obj47:
0001833A                            		include	"_maps\RoundBumper.asm"
0001833A                            ; --------------------------------------------------------------------------------
0001833A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001833A                            ; --------------------------------------------------------------------------------
0001833A                            
0001833A                            SME_jt4_6:	
0001833A 0000 0000                  		dc.w SME_jt4_6_4-SME_jt4_6, SME_jt4_6_F-SME_jt4_6	
0001833E 02                         SME_jt4_6_4:	dc.b 2	
0001833F F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00018344 F007 0800 00               		dc.b $F0, 7, 8, 0, 0	
00018349 06                         SME_jt4_6_F:	dc.b 6	
0001834A F202 0008 E8               		dc.b $F2, 2, 0, 8, $E8	
0001834F EA07 000B F0               		dc.b $EA, 7, 0, $B, $F0	
00018354 0A04 0013 F0               		dc.b $A, 4, 0, $13, $F0	
00018359 F202 0808 10               		dc.b $F2, 2, 8, 8, $10	
0001835E EA07 080B 00               		dc.b $EA, 7, 8, $B, 0	
00018363 0A04 0813 00               		dc.b $A, 4, 8, $13, 0	
00018368                            		even
00018368                            		even
00018368                            ;===============================================================================
00018368                            ; Object 0x44 -> Red Ball Bumper With Star
00018368                            ; [ End ]
00018368                            ;===============================================================================
00018368 4E71                       		nop ; Filler
0001836A                            loc_1B710:
0001836A 4EF9 0000 0000             		jmp	MarkObjGone 
00018370                            loc_1B716:
00018370 4EFA A3E2                  		jmp	AnimateSprite 
00018374                            
00018374                            ; ===========================================================================
00018374                            ; ---------------------------------------------------------------------------
00018374                            ; Object 0D - signpost at the end of a level
00018374                            ; ---------------------------------------------------------------------------
00018374                            
00018374                            Obj0D:					; XREF: Obj_Index
00018374 7000                       		moveq	#0,d0
00018376 1028 0024                  		move.b	routine(a0),d0
0001837A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0001837E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00018382 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00018388 4EBA A3CA                  		jsr	AnimateSprite
0001838C 4EBA D9E4                  		jsr	DisplaySprite
00018390 4EF9 0000 0000             		jmp	MarkObjGone3
00018396                            ; ===========================================================================
00018396 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00018398 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0001839A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0001839C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0001839E 0000                       		dc.w locret_ED1A-Obj0D_Index
000183A0                            ; ===========================================================================
000183A0                            
000183A0                            Obj0D_Main:				; XREF: Obj0D_Index
000183A0 5428 0024                  		addq.b	#2,routine(a0)
000183A4 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
000183AC 317C 0680 0002             		move.w	#$680,2(a0)
000183B2 117C 0004 0001             		move.b	#4,1(a0)
000183B8 117C 0018 0023             		move.b	#$18,width_pixels(a0)
000183BE 317C 0200 0018             		move.w	#$200,priority(a0)
000183C4                            
000183C4                            Obj0D_Touch:				; XREF: Obj0D_Index
000183C4 3038 D008                  		move.w	($FFFFD008).w,d0
000183C8 9068 0008                  		sub.w	8(a0),d0
000183CC 6500                       		bcs.s	locret_EBBA
000183CE 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
000183D2 6400                       		bcc.s	locret_EBBA	; if not, branch
000183D4 303C 004D                  		move.w	#$4D,d0
000183D8 4EB9 0000 3212             		jsr	(PlaySound).l	; play signpost	sound
000183DE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000183E2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
000183E8 5428 0024                  		addq.b	#2,routine(a0)
000183EC                            
000183EC                            locret_EBBA:
000183EC 4E75                       		rts	
000183EE                            ; ===========================================================================
000183EE                            
000183EE                            Obj0D_Spin:				; XREF: Obj0D_Index
000183EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
000183F2 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
000183F4 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
000183FA 5228 001C                  		addq.b	#1,anim(a0)	; next spin cycle
000183FE 0C28 0003 001C             		cmpi.b	#3,anim(a0)	; have 3 spin cycles completed?
00018404 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00018406 5428 0024                  		addq.b	#2,routine(a0)
0001840A                            
0001840A                            Obj0D_Sparkle:
0001840A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001840E 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00018410 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00018416 7000                       		moveq	#0,d0
00018418 1028 0034                  		move.b	$34(a0),d0
0001841C 5428 0034                  		addq.b	#2,$34(a0)
00018420 0228 000E 0034             		andi.b	#$E,$34(a0)
00018426 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0001842A 4EBA E450                  		jsr	SingleObjLoad
0001842E 6600                       		bne.s	locret_EC42
00018430 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00018434 137C 0006 0024             		move.b	#6,routine(a1)	; jump to ring sparkle subroutine
0001843A 101A                       		move.b	(a2)+,d0
0001843C 4880                       		ext.w	d0
0001843E D068 0008                  		add.w	8(a0),d0
00018442 3340 0008                  		move.w	d0,8(a1)
00018446 101A                       		move.b	(a2)+,d0
00018448 4880                       		ext.w	d0
0001844A D068 000C                  		add.w	$C(a0),d0
0001844E 3340 000C                  		move.w	d0,$C(a1)
00018452 237C 0001 1E48 0004        		move.l	#Map_obj25,4(a1)
0001845A 337C 27B2 0002             		move.w	#$27B2,2(a1)
00018460 137C 0004 0001             		move.b	#4,1(a1)
00018466 337C 0100 0018             		move.w	#$100,priority(a1)
0001846C 137C 0008 0023             		move.b	#8,width_pixels(a1)
00018472                            
00018472                            locret_EC42:
00018472 4E75                       		rts	
00018474                            ; ===========================================================================
00018474 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00018476 0808                       		dc.b	8,   8
00018478 F000                       		dc.b -$10,   0
0001847A 18F8                       		dc.b  $18,  -8
0001847C 00F8                       		dc.b	0,  -8
0001847E 1000                       		dc.b  $10,   0
00018480 E808                       		dc.b -$18,   8
00018482 1810                       		dc.b  $18, $10
00018484                            ; ===========================================================================
00018484                            
00018484                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00018484 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00018488 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0001848C 0838 0001 D022             		btst	#1,($FFFFD022).w
00018492 6600                       		bne.s	loc_EC70
00018494 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001849A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
000184A0                            
000184A0                            loc_EC70:
000184A0 4A38 D000                  		tst.b	($FFFFD000).w
000184A4 6700                       		beq.s	loc_EC86
000184A6 3038 D008                  		move.w	($FFFFD008).w,d0
000184AA 3238 F72A                  		move.w	($FFFFF72A).w,d1
000184AE 0641 0128                  		addi.w	#$128,d1
000184B2 B041                       		cmp.w	d1,d0
000184B4 6500                       		bcs.s	locret_ECEE
000184B6                            
000184B6                            loc_EC86:
000184B6 5428 0024                  		addq.b	#2,routine(a0)
000184BA                            
000184BA                            ; ---------------------------------------------------------------------------
000184BA                            ; Subroutine to	set up bonuses at the end of an	act
000184BA                            ; ---------------------------------------------------------------------------
000184BA                            
000184BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000184BA                            
000184BA                            
000184BA                            GotThroughAct:				; XREF: Obj3E_EndAct
000184BA 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000184BE 6600                       		bne.s	locret_ECEE
000184C0 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000184C6 4238 D02B                  		clr.b	(MainCharacter+status_secondary).w	; disable shield and invincibility ($FFFFFE2C-$FFFFFE2F)
000184CA 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000184CE                            ;		clr.b	($FFFFFE2E).w
000184CE 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
000184D4 7010                       		moveq	#$10,d0
000184D6 4EB9 0000 3744             		jsr	(NewPLC).l	; load title card patterns
000184DC 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000184E2 7000                       		moveq	#0,d0
000184E4 1038 FE23                  		move.b	(v_timemin).w,d0
000184E8 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000184EC 7200                       		moveq	#0,d1
000184EE 1238 FE24                  		move.b	(v_timesec).w,d1
000184F2 D041                       		add.w	d1,d0		; add up your time
000184F4 80FC 000F                  		divu.w	#15,d0		; divide by 15
000184F8 7214                       		moveq	#$14,d1
000184FA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000184FC 6500                       		bcs.s	loc_ECD0	; if not, branch
000184FE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00018500                            
00018500                            loc_ECD0:
00018500 D040                       		add.w	d0,d0
00018502 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00018508 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
0001850C C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00018510 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00018514 303C 0029                  		move.w	#$29,d0
00018518 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "Sonic got	through" music
0001851E 303C 0000                  		move.w	#$0,d0
00018522 4EB9 0000 329E             		jsr	(SetTempo).l	; run music at normal speed
00018528                            locret_ECEE:
00018528 4E75                       		rts	
0001852A                            ; End of function GotThroughAct
0001852A                            
0001852A                            ; ===========================================================================
0001852A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0001853E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00018554                            ; ===========================================================================
00018554                            
00018554                            locret_ED1A:				; XREF: Obj0D_Index
00018554 4E75                       		rts	
00018556                            ; ===========================================================================
00018556                            Ani_obj0D:
00018556                            	include "_anim\obj0D.asm"
00018556                            ; ---------------------------------------------------------------------------
00018556                            ; Animation script - signpost
00018556                            ; ---------------------------------------------------------------------------
00018556 0000                       		dc.w byte_ED24-Ani_obj0D
00018558 0000                       		dc.w byte_ED28-Ani_obj0D
0001855A 0000                       		dc.w byte_ED2E-Ani_obj0D
0001855C 0000                       		dc.w byte_ED34-Ani_obj0D
0001855E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00018562 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00018568 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0001856E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00018572 00                         		even
00018572 00                         		even
00018572                            
00018572                            ; ---------------------------------------------------------------------------
00018572                            ; Sprite mappings - signpost
00018572                            ; ---------------------------------------------------------------------------
00018572                            Map_obj0D:
00018572                            	include "_maps\obj0D.asm"
00018572                            ; ---------------------------------------------------------------------------
00018572                            ; Sprite mappings - signpost
00018572                            ; ---------------------------------------------------------------------------
00018572 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00018576 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0001857A 0000                       		dc.w byte_ED73-Map_obj0D
0001857C 03                         byte_ED42:	dc.b 3
0001857D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00018582 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00018587 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0001858C 02                         byte_ED52:	dc.b 2
0001858D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00018592 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00018597 02                         byte_ED5D:	dc.b 2
00018598 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0001859D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000185A2 02                         byte_ED68:	dc.b 2
000185A3 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
000185A8 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
000185AD 03                         byte_ED73:	dc.b 3
000185AE F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
000185B3 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
000185B8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
000185BE 00                         		even
000185BE 00                         		even
000185BE                            
000185BE                            ; ===========================================================================
000185BE                            ; ---------------------------------------------------------------------------
000185BE                            ; Object 4C - lava geyser / lavafall producer (MZ)
000185BE                            ; ---------------------------------------------------------------------------
000185BE                            
000185BE                            Obj4C:					; XREF: Obj_Index
000185BE 7000                       		moveq	#0,d0
000185C0 1028 0024                  		move.b	routine(a0),d0
000185C4 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
000185C8 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
000185CC 6000 0000                  		bra.w	Obj4D_ChkDel
000185D0                            ; ===========================================================================
000185D0 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
000185D2 0000                       		dc.w loc_EDCC-Obj4C_Index
000185D4 0000                       		dc.w loc_EE3E-Obj4C_Index
000185D6 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
000185D8 0000                       		dc.w Obj4C_Display-Obj4C_Index
000185DA 0000                       		dc.w Obj4C_Delete-Obj4C_Index
000185DC                            ; ===========================================================================
000185DC                            
000185DC                            Obj4C_Main:				; XREF: Obj4C_Index
000185DC 5428 0024                  		addq.b	#2,routine(a0)
000185E0 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
000185E8 317C E3A8 0002             		move.w	#$E3A8,2(a0)
000185EE 117C 0004 0001             		move.b	#4,1(a0)
000185F4 317C 0080 0018             		move.w	#$80,priority(a0)
000185FA 117C 0038 0023             		move.b	#$38,width_pixels(a0)
00018600 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00018606                            
00018606                            loc_EDCC:				; XREF: Obj4C_Index
00018606 5368 0032                  		subq.w	#1,$32(a0)
0001860A 6A00                       		bpl.s	locret_EDF0
0001860C 3168 0034 0032             		move.w	$34(a0),$32(a0)
00018612 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018616 3228 000C                  		move.w	$C(a0),d1
0001861A B041                       		cmp.w	d1,d0
0001861C 6400                       		bcc.s	locret_EDF0
0001861E 0441 0170                  		subi.w	#$170,d1
00018622 B041                       		cmp.w	d1,d0
00018624 6500                       		bcs.s	locret_EDF0
00018626 5428 0024                  		addq.b	#2,routine(a0)
0001862A                            
0001862A                            locret_EDF0:
0001862A 4E75                       		rts	
0001862C                            ; ===========================================================================
0001862C                            
0001862C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0001862C 5428 0024                  		addq.b	#2,routine(a0)
00018630 4EBA E260                  		jsr	SingleObjLoad2
00018634 6600                       		bne.s	loc_EE18
00018636 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0001863A 3368 0008 0008             		move.w	8(a0),8(a1)
00018640 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018646 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001864C 2348 003C                  		move.l	a0,$3C(a1)
00018650                            
00018650                            loc_EE18:
00018650 117C 0001 001C             		move.b	#1,anim(a0)
00018656 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
0001865A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0001865C 117C 0004 001C             		move.b	#4,anim(a0)
00018662 6000                       		bra.s	Obj4C_Display
00018664                            ; ===========================================================================
00018664                            
00018664                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00018664 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00018668 08E9 0001 0022             		bset	#1,status(a1)
0001866E 337C FA80 0012             		move.w	#-$580,y_vel(a1)
00018674 6000                       		bra.s	Obj4C_Display
00018676                            ; ===========================================================================
00018676                            
00018676                            loc_EE3E:				; XREF: Obj4C_Index
00018676 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
0001867A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0001867C 5428 0024                  		addq.b	#2,routine(a0)
00018680 4E75                       		rts	
00018682                            ; ===========================================================================
00018682                            
00018682                            Obj4C_Display:				; XREF: Obj4C_Index
00018682 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00018688 4EBA A0CA                  		jsr	AnimateSprite
0001868C 4EBA D6E4                  		jsr	DisplaySprite
00018690 4E75                       		rts	
00018692                            ; ===========================================================================
00018692                            
00018692                            Obj4C_Delete:				; XREF: Obj4C_Index
00018692 117C 0000 001C             		move.b	#0,anim(a0)
00018698 117C 0002 0024             		move.b	#2,routine(a0)
0001869E 4A28 0028                  		tst.b	subtype(a0)
000186A2 6700 D682                  		beq.w	DeleteObject
000186A6 4E75                       		rts	
000186A8                            ; ===========================================================================
000186A8                            ; ---------------------------------------------------------------------------
000186A8                            ; Object 4D - lava geyser / lavafall (MZ)
000186A8                            ; ---------------------------------------------------------------------------
000186A8                            
000186A8                            Obj4D:					; XREF: Obj_Index
000186A8 7000                       		moveq	#0,d0
000186AA 1028 0024                  		move.b	routine(a0),d0
000186AE 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
000186B2 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
000186B6 6000 D6BA                  		bra.w	DisplaySprite
000186BA                            ; ===========================================================================
000186BA 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
000186BC 0000                       		dc.w Obj4D_Action-Obj4D_Index
000186BE 0000                       		dc.w loc_EFFC-Obj4D_Index
000186C0 0000                       		dc.w Obj4D_Delete-Obj4D_Index
000186C2                            
000186C2 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
000186C6                            ; ===========================================================================
000186C6                            
000186C6                            Obj4D_Main:				; XREF: Obj4D_Index
000186C6 5428 0024                  		addq.b	#2,routine(a0)
000186CA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000186D0 4A28 0028                  		tst.b	subtype(a0)
000186D4 6700                       		beq.s	loc_EEA4
000186D6 0468 0250 000C             		subi.w	#$250,$C(a0)
000186DC                            
000186DC                            loc_EEA4:
000186DC 7000                       		moveq	#0,d0
000186DE 1028 0028                  		move.b	subtype(a0),d0
000186E2 D040                       		add.w	d0,d0
000186E4 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),y_vel(a0)
000186EA 2248                       		movea.l	a0,a1
000186EC 7201                       		moveq	#1,d1
000186EE 6100                       		bsr.s	Obj4D_MakeLava
000186F0 6000                       		bra.s	loc_EF10
000186F2                            ; ===========================================================================
000186F2                            
000186F2                            Obj4D_Loop:
000186F2 4EBA E19E                  		jsr	SingleObjLoad2
000186F6 6600                       		bne.s	loc_EF0A
000186F8                            
000186F8                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000186F8 12BC 004D                  		move.b	#$4D,0(a1)
000186FC 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00018704 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001870A 137C 0004 0001             		move.b	#4,1(a1)
00018710 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00018716 3368 0008 0008             		move.w	8(a0),8(a1)
0001871C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018722 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00018728 337C 0080 0018             		move.w	#$80,priority(a1)
0001872E 137C 0005 001C             		move.b	#5,anim(a1)
00018734 4A28 0028                  		tst.b	subtype(a0)
00018738 6700                       		beq.s	loc_EF0A
0001873A 137C 0002 001C             		move.b	#2,anim(a1)
00018740                            
00018740                            loc_EF0A:
00018740 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00018744 4E75                       		rts	
00018746                            ; ===========================================================================
00018746                            
00018746                            loc_EF10:				; XREF: Obj4D_Main
00018746 0669 0060 000C             		addi.w	#$60,$C(a1)
0001874C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00018752 0669 0060 0030             		addi.w	#$60,$30(a1)
00018758 137C 0093 0020             		move.b	#$93,collision_flags(a1)
0001875E 137C 0080 0016             		move.b	#$80,$16(a1)
00018764 08E9 0004 0001             		bset	#4,1(a1)
0001876A 5829 0024                  		addq.b	#4,routine(a1)
0001876E 2348 003C                  		move.l	a0,$3C(a1)
00018772 4A28 0028                  		tst.b	subtype(a0)
00018776 6700                       		beq.s	Obj4D_PlaySnd
00018778 7200                       		moveq	#0,d1
0001877A 4EBA FF76                  		jsr	Obj4D_Loop
0001877E 5429 0024                  		addq.b	#2,routine(a1)
00018782 08E9 0004 0002             		bset	#4,2(a1)
00018788 0669 0100 000C             		addi.w	#$100,$C(a1)
0001878E 137C 0000 0018             		move.b	#0,priority(a1)
00018794 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001879A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000187A0 117C 0000 0028             		move.b	#0,subtype(a0)
000187A6                            
000187A6                            Obj4D_PlaySnd:
000187A6 303C 00C2                  		move.w	#$C2,d0
000187AA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
000187B0                            
000187B0                            Obj4D_Action:				; XREF: Obj4D_Index
000187B0 7000                       		moveq	#0,d0
000187B2 1028 0028                  		move.b	subtype(a0),d0
000187B6 D040                       		add.w	d0,d0
000187B8 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000187BC 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000187C0 4EBA D54A                  		jsr	SpeedToPos
000187C4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000187CA 4EBA 9F88                  		jsr	AnimateSprite
000187CE                            
000187CE                            Obj4D_ChkDel:				; XREF: Obj4C
000187CE 4EF9 0000 0000             		jmp	MarkObjGone3
000187D4                            ; ===========================================================================
000187D4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000187D6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000187D8                            ; ===========================================================================
000187D8                            
000187D8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000187D8 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
000187DE 3028 0030                  		move.w	$30(a0),d0
000187E2 B068 000C                  		cmp.w	$C(a0),d0
000187E6 6400                       		bcc.s	locret_EFDA
000187E8 5828 0024                  		addq.b	#4,routine(a0)
000187EC 2268 003C                  		movea.l	$3C(a0),a1
000187F0 137C 0003 001C             		move.b	#3,anim(a1)
000187F6                            
000187F6                            locret_EFDA:
000187F6 4E75                       		rts	
000187F8                            ; ===========================================================================
000187F8                            
000187F8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
000187F8 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
000187FE 3028 0030                  		move.w	$30(a0),d0
00018802 B068 000C                  		cmp.w	$C(a0),d0
00018806 6400                       		bcc.s	locret_EFFA
00018808 5828 0024                  		addq.b	#4,routine(a0)
0001880C 2268 003C                  		movea.l	$3C(a0),a1
00018810 137C 0001 001C             		move.b	#1,anim(a1)
00018816                            
00018816                            locret_EFFA:
00018816 4E75                       		rts	
00018818                            ; ===========================================================================
00018818                            
00018818                            loc_EFFC:				; XREF: Obj4D_Index
00018818 2268 003C                  		movea.l	$3C(a0),a1
0001881C 0C29 0006 0024             		cmpi.b	#6,routine(a1)
00018822 6700 0000                  		beq.w	Obj4D_Delete
00018826 3029 000C                  		move.w	$C(a1),d0
0001882A 0640 0060                  		addi.w	#$60,d0
0001882E 3140 000C                  		move.w	d0,$C(a0)
00018832 9068 0030                  		sub.w	$30(a0),d0
00018836 4440                       		neg.w	d0
00018838 7208                       		moveq	#8,d1
0001883A 0C40 0040                  		cmpi.w	#$40,d0
0001883E 6C00                       		bge.s	loc_F026
00018840 720B                       		moveq	#$B,d1
00018842                            
00018842                            loc_F026:
00018842 0C40 0080                  		cmpi.w	#$80,d0
00018846 6F00                       		ble.s	loc_F02E
00018848 720E                       		moveq	#$E,d1
0001884A                            
0001884A                            loc_F02E:
0001884A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001884E 6A00                       		bpl.s	loc_F04C
00018850 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00018856 5228 001B                  		addq.b	#1,anim_frame(a0)
0001885A 0C28 0002 001B             		cmpi.b	#2,anim_frame(a0)
00018860 6500                       		bcs.s	loc_F04C
00018862 117C 0000 001B             		move.b	#0,anim_frame(a0)
00018868                            
00018868                            loc_F04C:
00018868 1028 001B                  		move.b	anim_frame(a0),d0
0001886C D001                       		add.b	d1,d0
0001886E 1140 001A                  		move.b	d0,mapping_frame(a0)
00018872 6000 FF5A                  		bra.w	Obj4D_ChkDel
00018876                            ; ===========================================================================
00018876                            
00018876                            Obj4D_Delete:				; XREF: Obj4D_Index
00018876 6000 D4AE                  		bra.w	DeleteObject
0001887A                            ; ===========================================================================
0001887A                            ; ---------------------------------------------------------------------------
0001887A                            ; Object 4E - advancing	wall of	lava (MZ)
0001887A                            ; ---------------------------------------------------------------------------
0001887A                            
0001887A                            Obj4E:					; XREF: Obj_Index
0001887A 7000                       		moveq	#0,d0
0001887C 1028 0024                  		move.b	routine(a0),d0
00018880 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00018884 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00018888                            ; ===========================================================================
00018888 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0001888A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0001888C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0001888E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00018890 0000                       		dc.w Obj4E_Delete-Obj4E_Index
00018892                            ; ===========================================================================
00018892                            
00018892                            Obj4E_Main:				; XREF: Obj4E_Index
00018892 5828 0024                  		addq.b	#4,routine(a0)
00018896 2248                       		movea.l	a0,a1
00018898 7201                       		moveq	#1,d1
0001889A 6000                       		bra.s	Obj4E_Main2
0001889C                            ; ===========================================================================
0001889C                            
0001889C                            Obj4E_Loop:
0001889C 4EBA DFF4                  		jsr	SingleObjLoad2
000188A0 6600                       		bne.s	loc_F0C8
000188A2                            
000188A2                            Obj4E_Main2:				; XREF: Obj4E_Main
000188A2 12BC 004E                  		move.b	#$4E,0(a1)	; load object
000188A6 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000188AE 337C 63A8 0002             		move.w	#$63A8,2(a1)
000188B4 137C 0004 0001             		move.b	#4,1(a1)
000188BA 137C 0050 0023             		move.b	#$50,width_pixels(a1)
000188C0 3368 0008 0008             		move.w	8(a0),8(a1)
000188C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188CC 337C 0080 0018             		move.w	#$80,priority(a1)
000188D2 137C 0000 001C             		move.b	#0,anim(a1)
000188D8 137C 0094 0020             		move.b	#$94,collision_flags(a1)
000188DE 2348 003C                  		move.l	a0,$3C(a1)
000188E2                            
000188E2                            loc_F0C8:
000188E2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000188E6                            
000188E6 5C29 0024                  		addq.b	#6,routine(a1)
000188EA 137C 0004 001A             		move.b	#4,mapping_frame(a1)
000188F0                            
000188F0                            Obj4E_Action:				; XREF: Obj4E_Index
000188F0 3038 D008                  		move.w	($FFFFD008).w,d0
000188F4 9068 0008                  		sub.w	8(a0),d0
000188F8 6400                       		bcc.s	Obj4E_ChkSonic
000188FA 4440                       		neg.w	d0
000188FC                            
000188FC                            Obj4E_ChkSonic:
000188FC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00018900 6400                       		bcc.s	Obj4E_Move	; if not, branch
00018902 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018906 9068 000C                  		sub.w	$C(a0),d0
0001890A 6400                       		bcc.s	loc_F0F4
0001890C 4440                       		neg.w	d0
0001890E                            
0001890E                            loc_F0F4:
0001890E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00018912 6400                       		bcc.s	Obj4E_Move	; if not, branch
00018914 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0001891A 6000                       		bra.s	Obj4E_Solid
0001891C                            ; ===========================================================================
0001891C                            
0001891C                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0001891C 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00018920 6700                       		beq.s	Obj4E_Solid	; if not, branch
00018922 317C 0180 0010             		move.w	#$180,x_vel(a0)	; set object speed
00018928 5528 0024                  		subq.b	#2,routine(a0)
0001892C                            
0001892C                            Obj4E_Solid:				; XREF: Obj4E_Index
0001892C 323C 002B                  		move.w	#$2B,d1
00018930 343C 0018                  		move.w	#$18,d2
00018934 3602                       		move.w	d2,d3
00018936 5243                       		addq.w	#1,d3
00018938 3828 0008                  		move.w	8(a0),d4
0001893C 1028 0024                  		move.b	routine(a0),d0
00018940 3F00                       		move.w	d0,-(sp)
00018942 4EB9 0000 0000             		jsr	SolidObject
00018948 301F                       		move.w	(sp)+,d0
0001894A 1140 0024                  		move.b	d0,routine(a0)
0001894E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00018954 6600                       		bne.s	Obj4E_Animate	; if not, branch
00018956 4268 0010                  		clr.w	x_vel(a0)		; stop object moving
0001895A 4228 0036                  		clr.b	$36(a0)
0001895E                            
0001895E                            Obj4E_Animate:
0001895E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00018964 4EBA 9DEE                  		jsr	AnimateSprite
00018968 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001896E 6400                       		bcc.s	Obj4E_ChkDel
00018970 4EBA D39A                  		jsr	SpeedToPos
00018974                            
00018974                            Obj4E_ChkDel:
00018974 4EBA D3FC                  		jsr	DisplaySprite
00018978 4A28 0036                  		tst.b	$36(a0)
0001897C 6600                       		bne.s	locret_F17E
0001897E 3028 0008                  		move.w	8(a0),d0
00018982 0240 FF80                  		andi.w	#$FF80,d0
00018986 3238 F700                  		move.w	($FFFFF700).w,d1
0001898A 0441 0080                  		subi.w	#$80,d1
0001898E 0241 FF80                  		andi.w	#$FF80,d1
00018992 9041                       		sub.w	d1,d0
00018994 0C40 0280                  		cmpi.w	#$280,d0
00018998 6200                       		bhi.s	Obj4E_ChkGone
0001899A                            
0001899A                            locret_F17E:
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0001899C                            ;		lea	(v_objstate).w,a2
0001899C 7000                       		moveq	#0,d0
0001899E 3028 0014                  		move.w	respawn_index(a0),d0
000189A2                            ;;        move.w	respawn_index(a0),d0
000189A2 3440                       	    movea.w	d0,a2
000189A4 0892 0007                  		bclr	#7,(a2)
000189A8 117C 0008 0024             		move.b	#8,routine(a0)
000189AE 4E75                       		rts	
000189B0                            ; ===========================================================================
000189B0                            
000189B0                            Obj4E_Move2:				; XREF: Obj4E_Index
000189B0 2268 003C                  		movea.l	$3C(a0),a1
000189B4 0C29 0008 0024             		cmpi.b	#8,routine(a1)
000189BA 6700                       		beq.s	Obj4E_Delete
000189BC 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000189C2 0468 0080 0008             		subi.w	#$80,8(a0)
000189C8 6000 D3A8                  		bra.w	DisplaySprite
000189CC                            ; ===========================================================================
000189CC                            
000189CC                            Obj4E_Delete:				; XREF: Obj4E_Index
000189CC 6000 D358                  		bra.w	DeleteObject
000189D0                            ; ===========================================================================
000189D0                            ; ---------------------------------------------------------------------------
000189D0                            ; Object 54 - invisible	lava tag (MZ)
000189D0                            ; ---------------------------------------------------------------------------
000189D0                            
000189D0                            Obj54:					; XREF: Obj_Index
000189D0 7000                       		moveq	#0,d0
000189D2 1028 0024                  		move.b	$24(a0),d0
000189D6 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
000189DA 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
000189DE                            ; ===========================================================================
000189DE 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
000189E0 0000                       		dc.w Obj54_ChkDel-Obj54_Index
000189E2                            
000189E2 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
000189E6                            ; ===========================================================================
000189E6                            
000189E6                            Obj54_Main:				; XREF: Obj54_Index
000189E6 5428 0024                  		addq.b	#2,$24(a0)
000189EA 7000                       		moveq	#0,d0
000189EC 1028 0028                  		move.b	$28(a0),d0
000189F0 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
000189F6 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
000189FE 117C 0084 0001             		move.b	#$84,1(a0)
00018A04                            
00018A04                            Obj54_ChkDel:				; XREF: Obj54_Index
00018A04 4EF9 0000 0000             		jmp		MarkObjGone3
00018A0A                            ; ===========================================================================
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            ; Sprite mappings - invisible lava tag (MZ)
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            Map_obj54:
00018A0A                            	include '_maps\obj54.asm'
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A                            ; Sprite mappings - invisible lava tag (MZ)
00018A0A                            ; ---------------------------------------------------------------------------
00018A0A 0000                       		dc.w byte_F212-Map_obj54
00018A0C 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00018A0E 00                         		even
00018A0E 00                         		even
00018A0E                            
00018A0E                            Ani_obj4C:
00018A0E                            	include '_anim\obj4C.asm'
00018A0E                            ; ---------------------------------------------------------------------------
00018A0E                            ; Animation script - geyser of lava (MZ)
00018A0E                            ; ---------------------------------------------------------------------------
00018A0E 0000                       		dc.w byte_F220-Ani_obj4C
00018A10 0000                       		dc.w byte_F22A-Ani_obj4C
00018A12 0000                       		dc.w byte_F22E-Ani_obj4C
00018A14 0000                       		dc.w byte_F232-Ani_obj4C
00018A16 0000                       		dc.w byte_F23A-Ani_obj4C
00018A18 0000                       		dc.w byte_F23E-Ani_obj4C
00018A1A 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00018A24 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00018A28 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00018A2C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00018A34 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00018A38 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00018A3C                            		even
00018A3C                            		even
00018A3C                            
00018A3C                            Ani_obj4E:
00018A3C                            	include '_anim\obj4E.asm'
00018A3C                            ; ---------------------------------------------------------------------------
00018A3C                            ; Animation script - advancing wall of lava (MZ)
00018A3C                            ; ---------------------------------------------------------------------------
00018A3C 0000                       		dc.w byte_F244-Ani_obj4E
00018A3E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00018A44                            		even
00018A44                            		even
00018A44                            
00018A44                            ; ---------------------------------------------------------------------------
00018A44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00018A44                            ; ---------------------------------------------------------------------------
00018A44                            Map_obj4C:
00018A44                            	include '_maps\obj4C.asm'
00018A44                            ; ---------------------------------------------------------------------------
00018A44                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00018A44                            ; ---------------------------------------------------------------------------
00018A44 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
00018A48 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00018A4C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00018A50 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00018A54 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
00018A58 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
00018A5C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00018A60 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00018A64 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
00018A68 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
00018A6C 02                         byte_F272:	dc.b 2
00018A6D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
00018A72 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00018A77 02                         byte_F27D:	dc.b 2
00018A78 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00018A7D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
00018A82 04                         byte_F288:	dc.b 4
00018A83 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00018A88 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00018A8D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00018A92 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00018A97 04                         byte_F29D:	dc.b 4
00018A98 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018A9D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00018AA2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00018AA7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018AAC 06                         byte_F2B2:	dc.b 6
00018AAD EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00018AB2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00018AB7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00018ABC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00018AC1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00018AC6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00018ACB 06                         byte_F2D1:	dc.b 6
00018ACC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018AD1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00018AD6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00018ADB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018AE0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00018AE5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00018AEA 02                         byte_F2F0:	dc.b 2
00018AEB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00018AF0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00018AF5 02                         byte_F2FB:	dc.b 2
00018AF6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00018AFB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00018B00 0A                         byte_F306:	dc.b $A
00018B01 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018B06 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018B0B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00018B10 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018B15 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00018B1A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00018B1F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00018B24 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00018B29 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00018B2E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00018B33 0A                         byte_F339:	dc.b $A
00018B34 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00018B39 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00018B3E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00018B43 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00018B48 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00018B4D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00018B52 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00018B57 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00018B5C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00018B61 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00018B66 0A                         byte_F36C:	dc.b $A
00018B67 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018B6C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018B71 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00018B76 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018B7B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018B80 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00018B85 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00018B8A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018B8F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00018B94 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00018B99 06                         byte_F39F:	dc.b 6
00018B9A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018B9F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018BA4 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00018BA9 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018BAE D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00018BB3 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00018BB8 06                         byte_F3BE:	dc.b 6
00018BB9 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00018BBE 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00018BC3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00018BC8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00018BCD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00018BD2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00018BD7 06                         byte_F3DD:	dc.b 6
00018BD8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018BDD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018BE2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00018BE7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018BEC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018BF1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00018BF6 10                         byte_F3FC:	dc.b $10
00018BF7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018BFC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018C01 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00018C06 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018C0B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00018C10 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00018C15 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00018C1A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00018C1F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00018C24 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00018C29 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00018C2E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00018C33 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00018C38 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00018C3D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00018C42 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00018C47 10                         byte_F44D:	dc.b $10
00018C48 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00018C4D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00018C52 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00018C57 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00018C5C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00018C61 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00018C66 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00018C6B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00018C70 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00018C75 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00018C7A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00018C7F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00018C84 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00018C89 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00018C8E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
00018C93 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00018C98 10                         byte_F49E:	dc.b $10
00018C99 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018C9E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00018CA3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00018CA8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018CAD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018CB2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00018CB7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00018CBC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018CC1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00018CC6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00018CCB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00018CD0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00018CD5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00018CDA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00018CDF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00018CE4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00018CE9 06                         byte_F4EF:	dc.b 6
00018CEA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00018CEF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00018CF4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00018CF9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00018CFE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00018D03 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00018D08 06                         byte_F50E:	dc.b 6
00018D09 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00018D0E E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00018D13 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00018D18 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00018D1D D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00018D22 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00018D27 00                         byte_F52D:	dc.b 0
00018D28                            		even
00018D28                            		even
00018D28                            
00018D28                            ; ---------------------------------------------------------------------------
00018D28                            ; Sprite mappings - advancing wall of lava (MZ)
00018D28                            ; ---------------------------------------------------------------------------
00018D28                            Map_obj4E:
00018D28                            	include '_maps\obj4E.asm'
00018D28                            ; ---------------------------------------------------------------------------
00018D28                            ; Sprite mappings - advancing wall of lava (MZ)
00018D28                            ; ---------------------------------------------------------------------------
00018D28 0000                       		dc.w byte_F538-Map_obj4E
00018D2A 0000                       		dc.w byte_F566-Map_obj4E
00018D2C 0000                       		dc.w byte_F594-Map_obj4E
00018D2E 0000                       		dc.w byte_F5C2-Map_obj4E
00018D30 0000                       		dc.w byte_F5F0-Map_obj4E
00018D32 09                         byte_F538:	dc.b 9
00018D33 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00018D38 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00018D3D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018D42 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018D47 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018D4C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018D51 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018D56 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018D5B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018D60 09                         byte_F566:	dc.b 9
00018D61 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00018D66 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00018D6B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018D70 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018D75 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018D7A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018D7F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018D84 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018D89 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018D8E 09                         byte_F594:	dc.b 9
00018D8F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
00018D94 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00018D99 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018D9E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018DA3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018DA8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018DAD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018DB2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018DB7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018DBC 09                         byte_F5C2:	dc.b 9
00018DBD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00018DC2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00018DC7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018DCC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018DD1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018DD6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018DDB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018DE0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018DE5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018DEA 08                         byte_F5F0:	dc.b 8
00018DEB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00018DF0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018DF5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018DFA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018DFF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018E04 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018E09 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018E0E 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018E14 00                         		even
00018E14 00                         		even
00018E14                            
00018E14                            ; ===========================================================================
00018E14                            ; ---------------------------------------------------------------------------
00018E14                            ; Object 40 - Moto Bug enemy (GHZ)
00018E14                            ; ---------------------------------------------------------------------------
00018E14                            
00018E14                            Obj40:					; XREF: Obj_Index
00018E14 7000                       		moveq	#0,d0
00018E16 1028 0024                  		move.b	routine(a0),d0
00018E1A 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00018E1E 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00018E22                            ; ===========================================================================
00018E22 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00018E24 0000                       		dc.w Obj40_Action-Obj40_Index
00018E26 0000                       		dc.w Obj40_Animate-Obj40_Index
00018E28 0000                       		dc.w Obj40_Delete-Obj40_Index
00018E2A                            ; ===========================================================================
00018E2A                            
00018E2A                            Obj40_Main:				; XREF: Obj40_Index
00018E2A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00018E32 317C 04F0 0002             		move.w	#$4F0,2(a0)
00018E38 117C 0004 0001             		move.b	#4,1(a0)
00018E3E 317C 0200 0018             		move.w	#$200,priority(a0)
00018E44 117C 0014 0023             		move.b	#$14,width_pixels(a0)
00018E4A 4A28 001C                  		tst.b	anim(a0)		; is object a smoke trail?
00018E4E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00018E50 117C 000E 0016             		move.b	#$E,$16(a0)
00018E56 117C 0008 0017             		move.b	#8,$17(a0)
00018E5C 117C 000C 0020             		move.b	#$C,collision_flags(a0)
00018E62 4EBA CE88                  		jsr	ObjectFall
00018E66 4EB9 0000 0000             		jsr	ObjHitFloor
00018E6C 4A41                       		tst.w	d1
00018E6E 6A00                       		bpl.s	locret_F68A
00018E70 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00018E74 317C 0000 0012             		move.w	#0,y_vel(a0)
00018E7A 5428 0024                  		addq.b	#2,routine(a0)
00018E7E 0868 0000 0022             		bchg	#0,status(a0)
00018E84                            
00018E84                            locret_F68A:
00018E84 4E75                       		rts	
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            Obj40_SetSmoke:				; XREF: Obj40_Main
00018E86 5828 0024                  		addq.b	#4,routine(a0)
00018E8A 6000 0000                  		bra.w	Obj40_Animate
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            Obj40_Action:				; XREF: Obj40_Index
00018E8E 7000                       		moveq	#0,d0
00018E90 1028 0025                  		move.b	routine_secondary(a0),d0
00018E94 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00018E98 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00018E9C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00018EA2 4EBA 98B0                  		jsr	AnimateSprite
00018EA6                            
00018EA6                            ; ---------------------------------------------------------------------------
00018EA6                            ; Routines to mark an enemy/monitor/ring	as destroyed
00018EA6                            ; ---------------------------------------------------------------------------
00018EA6                            
00018EA6                            RememberState:
00018EA6                            MarkObjGone:
00018EA6 3028 0008                  		move.w	8(a0),d0
00018EAA 0240 FF80                  		andi.w	#$FF80,d0
00018EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00018EB2 0441 0080                  		subi.w	#$80,d1
00018EB6 0241 FF80                  		andi.w	#$FF80,d1
00018EBA 9041                       		sub.w	d1,d0
00018EBC 0C40 0280                  		cmpi.w	#$280,d0
00018EC0 6200 0000                  		bhi.w	Mark_ChkGone
00018EC4 6000 CEAC                  		bra.w	DisplaySprite
00018EC8                            ; ===========================================================================
00018EC8                            ; ---------------------------------------------------------------------------
00018EC8                            ; Subroutine to remember whether an object is destroyed/collected
00018EC8                            ; ---------------------------------------------------------------------------
00018EC8                            
00018EC8                            Mark_ChkGone:
00018EC8                            ;		lea	(v_objstate).w,a2
00018EC8                            ;		moveq	#0,d0
00018EC8 3028 0014                  		move.w	respawn_index(a0),d0
00018ECC 6700                       		beq.s	Mark_Delete
00018ECE 3440                       		movea.w	d0,a2
00018ED0 0892 0007                  		bclr	#7,(a2)
00018ED4                            
00018ED4                            Mark_Delete:
00018ED4 6000 CE50                  		bra.w	DeleteObject
00018ED8                            
00018ED8                            
00018ED8                            ; ===========================================================================
00018ED8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00018EDA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00018EDC                            
00018EDC                            ; ---------------------------------------------------------------------------
00018EDC                            ; input: d0 = the object's x position
00018EDC                            ; ---------------------------------------------------------------------------
00018EDC                            
00018EDC                            MarkObjGone2:
00018EDC                            
00018EDC 0240 FF80                  		andi.w	#$FF80,d0
00018EE0 3238 F700                  		move.w	($FFFFF700).w,d1
00018EE4 0441 0080                  		subi.w	#$80,d1
00018EE8 0241 FF80                  		andi.w	#$FF80,d1
00018EEC 9041                       		sub.w	d1,d0
00018EEE 0C40 0280                  		cmpi.w	#$280,d0
00018EF2 6200 0000                  		bhi.w	loc_1B5C4
00018EF6 6000 CE7A                  		bra.w	DisplaySprite
00018EFA                            ; ---------------------------------------------------------------------------
00018EFA                            
00018EFA                            loc_1B5C4:
00018EFA                            ;		lea	(v_objstate).w,a2
00018EFA                            ;		moveq	#0,d0
00018EFA 3028 0014                  		move.w	respawn_index(a0),d0
00018EFE 6700                       		beq.s	loc_1B5D0
00018F00 3440                       		movea.w	d0,a2
00018F02 0892 0007                  		bclr	#7,(a2)
00018F06                            
00018F06                            loc_1B5D0:
00018F06 6000 CE1E                  		bra.w	DeleteObject
00018F0A                            
00018F0A                            ; ===========================================================================
00018F0A                            
00018F0A                            Obj40_Move:				; XREF: Obj40_Index2
00018F0A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00018F0E 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00018F10 5428 0025                  		addq.b	#2,routine_secondary(a0)
00018F14 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object to the left
00018F1A 117C 0001 001C             		move.b	#1,anim(a0)
00018F20 0868 0000 0022             		bchg	#0,status(a0)
00018F26 6600                       		bne.s	locret_F70A
00018F28 4468 0010                  		neg.w	x_vel(a0)		; change direction
00018F2C                            
00018F2C                            locret_F70A:
00018F2C 4E75                       		rts	
00018F2E                            ; ===========================================================================
00018F2E                            
00018F2E                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00018F2E 4EBA CDDC                  		jsr	SpeedToPos
00018F32 4EB9 0000 0000             		jsr	ObjHitFloor
00018F38 0C41 FFF8                  		cmpi.w	#-8,d1
00018F3C 6D00                       		blt.s	Obj40_Pause
00018F3E 0C41 000C                  		cmpi.w	#$C,d1
00018F42 6C00                       		bge.s	Obj40_Pause
00018F44 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00018F48 5328 0033                  		subq.b	#1,$33(a0)
00018F4C 6A00                       		bpl.s	locret_F756
00018F4E 117C 000F 0033             		move.b	#$F,$33(a0)
00018F54 4EBA D926                  		jsr	SingleObjLoad
00018F58 6600                       		bne.s	locret_F756
00018F5A 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00018F5E 3368 0008 0008             		move.w	8(a0),8(a1)
00018F64 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F6A 1368 0022 0022             		move.b	status(a0),status(a1)
00018F70 137C 0002 001C             		move.b	#2,anim(a1)
00018F76                            
00018F76                            locret_F756:
00018F76 4E75                       		rts	
00018F78                            ; ===========================================================================
00018F78                            
00018F78                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00018F78 5528 0025                  		subq.b	#2,routine_secondary(a0)
00018F7C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00018F82 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop the object moving
00018F88 117C 0000 001C             		move.b	#0,anim(a0)
00018F8E 4E75                       		rts	
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            Obj40_Animate:				; XREF: Obj40_Index
00018F90 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00018F96 4EBA 97BC                  		jsr	AnimateSprite
00018F9A 6000 CDD6                  		bra.w	DisplaySprite
00018F9E                            ; ===========================================================================
00018F9E                            
00018F9E                            Obj40_Delete:				; XREF: Obj40_Index
00018F9E 6000 CD86                  		bra.w	DeleteObject
00018FA2                            ; ===========================================================================
00018FA2                            Ani_obj40:
00018FA2                            	include "_anim\obj40.asm"
00018FA2                            ; ---------------------------------------------------------------------------
00018FA2                            ; Animation script - Motobug enemy
00018FA2                            ; ---------------------------------------------------------------------------
00018FA2 0000                       		dc.w byte_F788-Ani_obj40
00018FA4 0000                       		dc.w byte_F78C-Ani_obj40
00018FA6 0000                       		dc.w byte_F792-Ani_obj40
00018FA8 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00018FAC 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00018FB2 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00018FC0                            		even
00018FC0                            		even
00018FC0                            
00018FC0                            ; ---------------------------------------------------------------------------
00018FC0                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018FC0                            ; ---------------------------------------------------------------------------
00018FC0                            Map_obj40:
00018FC0                            	include "_maps\obj40.asm"
00018FC0                            ; ---------------------------------------------------------------------------
00018FC0                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018FC0                            ; ---------------------------------------------------------------------------
00018FC0 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00018FC4 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00018FC8 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00018FCC 0000                       		dc.w byte_F804-Map_obj40
00018FCE 04                         byte_F7AE:	dc.b 4
00018FCF F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00018FD4 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00018FD9 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00018FDE 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
00018FE3 04                         byte_F7C3:	dc.b 4
00018FE4 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00018FE9 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00018FEE F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
00018FF3 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00018FF8 05                         byte_F7D8:	dc.b 5
00018FF9 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00018FFE 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00019003 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00019008 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0001900D 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00019012 01                         byte_F7F2:	dc.b 1
00019013 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00019018 01                         byte_F7F8:	dc.b 1
00019019 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0001901E 01                         byte_F7FE:	dc.b 1
0001901F FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00019024 00                         byte_F804:	dc.b 0
00019026 00                         		even
00019026 00                         		even
00019026                            
00019026                            ; ===========================================================================
00019026                            
00019026                            ; ----------------------------------------------------------------------------
00019026                            ; Object 1B - Speed booster from from CPZ
00019026                            ; ----------------------------------------------------------------------------
00019026                            ; Sprite_222AC:
00019026                            Obj4F:
00019026 7000                       	moveq	#0,d0
00019028 1028 0024                  	move.b	routine(a0),d0
0001902C 323B 0000                  	move.w	Obj4F_Index(pc,d0.w),d1
00019030 4EFB 1000                  	jmp	Obj4F_Index(pc,d1.w)
00019034                            ; ===========================================================================
00019034                            ; off_222BA:
00019034                            Obj4F_Index:
00019034 0000                       	dc.w Obj4F_Init-Obj4F_Index; 0
00019036 0000                       	dc.w Obj4F_Main-Obj4F_Index; 2
00019038                            ; ---------------------------------------------------------------------------
00019038                            ; word_222BE:
00019038                            Obj4F_BoosterSpeeds:
00019038 1000                       	dc.w $1000
0001903A 0A00                       	dc.w  $A00
0001903C                            ; ===========================================================================
0001903C                            ; loc_222C2:
0001903C                            Obj4F_Init:
0001903C 5428 0024                  	addq.b	#2,routine(a0) ; Skip to other routine
00019040 217C 0000 0000 0004        	move.l	#Map_SpdBooster,4(a0) ; the mappings
00019048 0C38 0000 FE10                     cmpi.b	#0,($FFFFFE10).w	; is level GHZ ?
0001904E 6700 0000                  	beq.w	SFZ_SpecificArtLoc	; if not, branch
00019052 317C 05F4 0002             	move.w	#($BE80/$20),2(a0) ; the art location
00019058 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
0001905C                            SFZ_SpecificArtLoc:
0001905C 317C 05F4 0002                     move.w	#($BE80/$20),2(a0) ; the art location
00019062 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
00019066                            Obj4F_Init_Cont:	 
00019066 0028 0004 0001             	ori.b	#4,1(a0)
0001906C 117C 0020 0023             	move.b	#$20,width_pixels(a0)
00019072 317C 0080 0018             	move.w	#$80,priority(a0)
00019078 1028 0028                  	move.b	subtype(a0),d0
0001907C 0240 0002                  	andi.w	#2,d0
00019080 317B 00B6 0030             	move.w	Obj4F_BoosterSpeeds(pc,d0.w),$30(a0)
00019086                            
00019086                            ; loc_222F8:
00019086                            Obj4F_Main:
00019086 1038 FE05                  	move.b	($FFFFFE05).w,d0
0001908A 0200 0002                  	andi.b	#2,d0
0001908E 1140 001A                  	move.b	d0,mapping_frame(a0)
00019092 3028 0008                  	move.w	8(a0),d0
00019096 3200                       	move.w	d0,d1
00019098 0440 0010                  	subi.w	#$10,d0
0001909C 0641 0010                  	addi.w	#$10,d1
000190A0 3428 000C                  	move.w	$C(a0),d2
000190A4 3602                       	move.w	d2,d3
000190A6 0442 0010                  	subi.w	#$10,d2
000190AA 0643 0010                  	addi.w	#$10,d3
000190AE                            
000190AE 43F8 D000                  	lea	($FFFFD000).w,a1 ; a1=character
000190B2 0829 0001 0022             	btst	#1,status(a1)
000190B8 6600                       	bne.s	MOG_Jmptolol
000190BA 3829 0008                  	move.w	8(a1),d4
000190BE B840                       	cmp.w	d0,d4
000190C0 6500 0000                  	bcs.w	MOG_Jmptolol
000190C4 B841                       	cmp.w	d1,d4
000190C6 6400 0000                  	bcc.w	MOG_Jmptolol
000190CA 3829 000C                  	move.w	$C(a1),d4
000190CE B842                       	cmp.w	d2,d4
000190D0 6500 0000                  	bcs.w	MOG_Jmptolol
000190D4 B843                       	cmp.w	d3,d4
000190D6 6400 0000                  	bcc.w	MOG_Jmptolol
000190DA 3F00                       	move.w	d0,-(sp)
000190DC 6100 0000                  	bsr.w	Obj4F_GiveBoost
000190E0 301F                       	move.w	(sp)+,d0
000190E2                            MOG_Jmptolol:
000190E2 4EFA FDC2                  	jmp	MarkObjGone
000190E6                            
000190E6                            ; ===========================================================================
000190E6                            ; sub_22388:
000190E6                            Obj4F_GiveBoost:
000190E6 3029 0010                  	move.w	x_vel(a1),d0
000190EA 0828 0000 0022             	btst	#0,status(a0)
000190F0 6700                       	beq.s	loc_blah
000190F2 4440                       	neg.w	d0 ; d0 = absolute value of character's x velocity
000190F4                            loc_blah:
000190F4 0C40 1000                  	cmpi.w	#$1000,d0		; is the character already going super fast?
000190F8 6C00                       	bge.s	Obj4F_GiveBoost_Done	; if yes, branch to not change the speed
000190FA 3368 0030 0010             	move.w	$30(a0),x_vel(a1)	; make the character go super fast
00019100 08A9 0000 0022             	bclr	#0,status(a1)	; turn him right
00019106 0828 0000 0022             	btst	#0,status(a0)	; was that the correct direction?
0001910C 6700                       	beq.s	loc_unknown		; if yes, branch
0001910E 08E9 0000 0022             	bset	#0,status(a1)	; turn him left
00019114 4469 0010                  	neg.w	x_vel(a1)	; make the boosting direction left
00019118                            loc_unknown:
00019118 337C 000F 002E             	move.w	#$F,move_lock(a1)	; don't let him turn around for a few frames
0001911E 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)	; update his inertia value
00019124 08A8 0005 0022             	bclr	#5,status(a0)
0001912A 08A8 0006 0022             	bclr	#6,status(a0)
00019130 08A9 0005 0022             	bclr	#5,status(a1)
00019136 31FC 0000 FC00             	move.w	#0,($FFFFFC00).w	; clear screen delay counter 
0001913C                            	; fix for Sonic when he goes off-screen preventing him from going through
0001913C                            	; objects before they get rendered on the screen
0001913C                            ; loc_223D8:
0001913C                            Obj4F_GiveBoost_Done:
0001913C 303C 00B1                  	move.w	#$B1,d0 ; spring boing sound
00019140 4EF9 0000 3212             	jmp	(PlaySound).l
00019146                            ;===================================================================================
00019146                            ; The Speed Booster Files
00019146                            ;===================================================================================
00019146                            Map_SpdBooster:       include   "_maps\Booster.asm"
00019146                            ; --------------------------------------------------------------------------------
00019146                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00019146                            ; --------------------------------------------------------------------------------
00019146                            
00019146                            SME_KG46E:	
00019146 0000 0000                  		dc.w SME_KG46E_6-SME_KG46E, SME_KG46E_1B-SME_KG46E	
0001914A 0000                       		dc.w SME_KG46E_30-SME_KG46E	
0001914C 04                         SME_KG46E_6:	dc.b 4	
0001914D F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00019152 F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
00019157 F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
0001915C F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00019161 04                         SME_KG46E_1B:	dc.b 4	
00019162 F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00019167 F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
0001916C F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
00019171 F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00019176 00                         SME_KG46E_30:	dc.b 0	
00019178 00                         		even
00019178 00                         		even
00019178                            
00019178                            Artnem_SpdBooster:    incbin	artnem\speedbooster_obj4f.bin	; shield
000191E6                            		even		
000191E6                            
000191E6                            ;===================================================================================
000191E6                            ; The Speed Booster Files
000191E6                            ;===================================================================================
000191E6                            
000191E6                            ; =============== S U B R O U T I N E =======================================
000191E6                            
000191E6                            MarkObjGone3:
000191E6                            Delete_Sprite_If_Not_In_Range:
000191E6                            
000191E6 3028 0008                  		move.w	8(a0),d0
000191EA 0240 FF80                  		andi.w	#$FF80,d0
000191EE 3238 F700                  		move.w	($FFFFF700).w,d1
000191F2 0441 0080                  		subi.w	#$80,d1
000191F6 0241 FF80                  		andi.w	#$FF80,d1
000191FA 9041                       		sub.w	d1,d0
000191FC 0C40 0280                  		cmpi.w	#$280,d0
00019200 6200 0000                  		bhi.w	loc_1B5EA
00019204 4E75                       		rts	
00019206                            		
00019206                            ; ---------------------------------------------------------------------------
00019206                            
00019206                            loc_1B5EA:
00019206                            ;		lea	(v_objstate).w,a2
00019206 7000                       		moveq	#0,d0
00019208 3028 0014                  		move.w	respawn_index(a0),d0
0001920C                            ;        move.w	respawn_index(a0),d0
0001920C 6700                       		beq.s	loc_1B5F6
0001920E 3440                       	    movea.w	d0,a2
00019210                            ;		movea.w	d0,a2
00019210 0892 0007                  		bclr	#7,(a2)
00019214                            
00019214                            loc_1B5F6:
00019214 6000 CB10                  		bra.w	DeleteObject
00019218                            ; End of function Delete_Sprite_If_Not_In_Range
00019218                            
00019218                            ; =============== S U B R O U T I N E =======================================
00019218                            
00019218                            MarkObjGone4:
00019218                            Delete_Sprite_If_Not_In_Range2:
00019218                            
00019218 0240 FF80                  		andi.w	#$FF80,d0
0001921C 3238 F700                  		move.w	($FFFFF700).w,d1
00019220 0441 0080                  		subi.w	#$80,d1
00019224 0241 FF80                  		andi.w	#$FF80,d1
00019228 9041                       		sub.w	d1,d0
0001922A 0C40 0280                  		cmpi.w	#$280,d0
0001922E 6200 0000                  		bhi.w	@loc_1B5EA
00019232 4E75                       		rts	
00019234                            
00019234                            ; ---------------------------------------------------------------------------
00019234                            
00019234                            @loc_1B5EA:
00019234                            ;		lea	(v_objstate).w,a2
00019234 7000                       		moveq	#0,d0
00019236 3028 0014                  		move.w	respawn_index(a0),d0
0001923A                            ;        move.w	respawn_index(a0),d0
0001923A 6700                       		beq.s	@loc_1B5F6
0001923C 3440                       	    movea.w	d0,a2
0001923E                            ;		movea.w	d0,a2
0001923E 0892 0007                  		bclr	#7,(a2)
00019242                            
00019242                            @loc_1B5F6:
00019242 6000 CAE2                  		bra.w	DeleteObject	
00019246                            
00019246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019246                            
00019246                            
00019246                            
00019246                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00019246 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001924A D047                       		add.w	d7,d0
0001924C 0240 0003                  		andi.w	#3,d0
00019250 6600                       		bne.s	loc_F836
00019252 7600                       		moveq	#0,d3
00019254 1628 0023                  		move.b	width_pixels(a0),d3
00019258 4A68 0010                  		tst.w	x_vel(a0)
0001925C 6B00                       		bmi.s	loc_F82C
0001925E 4EB9 0000 0000             		jsr	ObjHitWallRight
00019264 4A41                       		tst.w	d1
00019266 6A00                       		bpl.s	loc_F836
00019268                            
00019268                            loc_F828:
00019268 7001                       		moveq	#1,d0
0001926A 4E75                       		rts	
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            loc_F82C:
0001926C 4643                       		not.w	d3
0001926E 4EB9 0000 0000             		jsr	ObjHitWallLeft
00019274 4A41                       		tst.w	d1
00019276 6BF0                       		bmi.s	loc_F828
00019278                            
00019278                            loc_F836:
00019278 7000                       		moveq	#0,d0
0001927A 4E75                       		rts	
0001927C                            ; End of function Obj50_ChkWall
0001927C                            
0001927C                            ; ===========================================================================
0001927C                            ; ---------------------------------------------------------------------------
0001927C                            ; Object 50 - Yadrin enemy (SYZ)
0001927C                            ; ---------------------------------------------------------------------------
0001927C                            
0001927C                            Obj50:					; XREF: Obj_Index
0001927C 7000                       		moveq	#0,d0
0001927E 1028 0024                  		move.b	routine(a0),d0
00019282 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00019286 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001928A                            ; ===========================================================================
0001928A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001928C 0000                       		dc.w Obj50_Action-Obj50_Index
0001928E                            ; ===========================================================================
0001928E                            
0001928E                            Obj50_Main:				; XREF: Obj50_Index
0001928E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00019296 317C 247B 0002             		move.w	#$247B,2(a0)
0001929C 117C 0004 0001             		move.b	#4,1(a0)
000192A2 317C 0200 0018             		move.w	#$200,priority(a0)
000192A8 117C 0014 0023             		move.b	#$14,width_pixels(a0)
000192AE 117C 0011 0016             		move.b	#$11,$16(a0)
000192B4 117C 0008 0017             		move.b	#8,$17(a0)
000192BA 117C 00CC 0020             		move.b	#$CC,collision_flags(a0)
000192C0 4EBA CA2A                  		jsr	ObjectFall
000192C4 4EB9 0000 0000             		jsr	ObjHitFloor
000192CA 4A41                       		tst.w	d1
000192CC 6A00                       		bpl.s	locret_F89E
000192CE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000192D2 317C 0000 0012             		move.w	#0,y_vel(a0)
000192D8 5428 0024                  		addq.b	#2,routine(a0)
000192DC 0868 0000 0022             		bchg	#0,status(a0)
000192E2                            
000192E2                            locret_F89E:
000192E2 4E75                       		rts	
000192E4                            ; ===========================================================================
000192E4                            
000192E4                            Obj50_Action:				; XREF: Obj50_Index
000192E4 7000                       		moveq	#0,d0
000192E6 1028 0025                  		move.b	routine_secondary(a0),d0
000192EA 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000192EE 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000192F2 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000192F8 4EBA 945A                  		jsr	AnimateSprite
000192FC 6000 FBA8                  		bra.w	MarkObjGone
00019300                            ; ===========================================================================
00019300 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00019302 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00019304                            ; ===========================================================================
00019304                            
00019304                            Obj50_Move:				; XREF: Obj50_Index2
00019304 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00019308 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001930A 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001930E 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object
00019314 117C 0001 001C             		move.b	#1,anim(a0)
0001931A 0868 0000 0022             		bchg	#0,status(a0)
00019320 6600                       		bne.s	locret_F8E2
00019322 4468 0010                  		neg.w	x_vel(a0)		; change direction
00019326                            
00019326                            locret_F8E2:
00019326 4E75                       		rts	
00019328                            ; ===========================================================================
00019328                            
00019328                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00019328 4EBA C9E2                  		jsr	SpeedToPos
0001932C 4EB9 0000 0000             		jsr	ObjHitFloor
00019332 0C41 FFF8                  		cmpi.w	#-8,d1
00019336 6D00                       		blt.s	Obj50_Pause
00019338 0C41 000C                  		cmpi.w	#$C,d1
0001933C 6C00                       		bge.s	Obj50_Pause
0001933E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00019342 4EBA FF02                  		jsr	Obj50_ChkWall
00019346 6600                       		bne.s	Obj50_Pause
00019348 4E75                       		rts	
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001934A 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001934E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00019354 317C 0000 0010             		move.w	#0,x_vel(a0)
0001935A 117C 0000 001C             		move.b	#0,anim(a0)
00019360 4E75                       		rts	
00019362                            ; ===========================================================================
00019362                            Ani_obj50:
00019362                            	include "_anim\obj50.asm"
00019362                            ; ---------------------------------------------------------------------------
00019362                            ; Animation script - Yadrin enemy
00019362                            ; ---------------------------------------------------------------------------
00019362 0000                       		dc.w byte_F920-Ani_obj50
00019364 0000                       		dc.w byte_F924-Ani_obj50
00019366 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001936A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00019374                            		even
00019374                            		even
00019374                            
00019374                            ; ---------------------------------------------------------------------------
00019374                            ; Sprite mappings - Yadrin enemy (SYZ)
00019374                            ; ---------------------------------------------------------------------------
00019374                            Map_obj50:
00019374                            	include "_maps\obj50.asm"
00019374                            ; ---------------------------------------------------------------------------
00019374                            ; Sprite mappings - Yadrin enemy (SYZ)
00019374                            ; ---------------------------------------------------------------------------
00019374 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00019378 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0001937C 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00019380 05                         byte_F93A:	dc.b 5
00019381 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00019386 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001938B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00019390 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00019395 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001939A 05                         byte_F954:	dc.b 5
0001939B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000193A0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000193A5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000193AA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000193AF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000193B4 05                         byte_F96E:	dc.b 5
000193B5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000193BA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000193BF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000193C4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000193C9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000193CE 05                         byte_F988:	dc.b 5
000193CF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000193D4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000193D9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000193DE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000193E3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000193E8 05                         byte_F9A2:	dc.b 5
000193E9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000193EE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000193F3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000193F8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000193FD 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00019402 05                         byte_F9BC:	dc.b 5
00019403 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00019408 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001940D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00019412 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00019417 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001941C                            		even
0001941C                            		even
0001941C                            
0001941C                            ; ---------------------------------------------------------------------------
0001941C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001941C                            ;
0001941C                            ; variables:
0001941C                            ; d1 = width
0001941C                            ; d2 = height /	2 (when	jumping)
0001941C                            ; d3 = height /	2 (when	walking)
0001941C                            ; d4 = x-axis position
0001941C                            ; ---------------------------------------------------------------------------
0001941C                            
0001941C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001941C                            
0001941C                            SolidObjectNew:
0001941C 4A28 0025                  		tst.b routine_secondary(a0)
00019420 6700 0000                  		beq.w	loci_FAC8
00019424 3401                       		move.w	d1,d2
00019426 D442                       		add.w	d2,d2
00019428 43F8 D000                  		lea ($FFFFD000).w,a1
0001942C 0829 0001 0022             		btst #1,status(a1)
00019432 6600                       		bne.s loci_F9FE
00019434 3029 0008                  		move.w 8(a1),d0
00019438 9068 0008                  		sub.w 8(a0),d0
0001943C D041                       		add.w d1,d0
0001943E 6B00                       		bmi.s loci_F9FE
00019440 B042                       		cmp.w d2,d0
00019442 6500                       		bcs.s loci_FA12
00019444                            
00019444                            loci_F9FE:
00019444 08A9 0003 0022             		bclr #3,status(a1)
0001944A 08A8 0003 0022             		bclr #3,status(a0)
00019450 4228 0025                  		clr.b routine_secondary(a0)
00019454 7800                       		moveq #0,d4
00019456 4E75                       		rts
00019458                            ; ===========================================================================
00019458                            
00019458                            loci_FA12:
00019458 3404                       		move.w d4,d2
0001945A 4EB9 0000 F56A             		jsr MvSonicOnPtfm
00019460 7800                       		moveq #0,d4
00019462 4E75                       		rts
00019464                            ; ===========================================================================
00019464                            
00019464                            		loci_FA58:
00019464 3404                       		move.w d4,d2
00019466 4EB9 0000 F56A             		jsr MvSonicOnPtfm
0001946C 7800                       		moveq #0,d4
0001946E 4E75                       		rts
00019470                            ; ===========================================================================
00019470                            
00019470                            loci_FAC8:
00019470 4A28 0001                  		tst.b 1(a0)
00019474 6A00 0000                  		bpl.w loc_FB92
00019478                            
00019478                            loci_FAD0:
00019478 43F8 D000                  		lea ($FFFFD000).w,a1
0001947C 3029 0008                  		move.w 8(a1),d0
00019480 9068 0008                  		sub.w 8(a0),d0
00019484 D041                       		add.w d1,d0
00019486 6B00 0000                  		bmi.w loci_FB92
0001948A 3601                       		move.w d1,d3
0001948C D643                       		add.w d3,d3
0001948E B043                       		cmp.w d3,d0
00019490 6200 0000                  		bhi.w loci_FB92
00019494 1629 0016                  		move.b $16(a1),d3
00019498 4883                       		ext.w d3
0001949A D443                       		add.w d3,d2
0001949C 3629 000C                  		move.w $C(a1),d3
000194A0 9668 000C                  		sub.w $C(a0),d3
000194A4 5843                       		addq.w #4,d3
000194A6 D642                       		add.w d2,d3
000194A8 6B00 0000                  		bmi.w loci_FB92
000194AC 3802                       		move.w d2,d4
000194AE D844                       		add.w d4,d4
000194B0 B644                       		cmp.w d4,d3
000194B2 6400 0000                  		bcc.w loc_FB92
000194B6                            
000194B6                            loci_FB0E:
000194B6 4A38 F7C8                  		tst.b ($FFFFF7C8).w
000194BA 6B00 0000                  		bmi.w loci_FB92
000194BE 0C38 0006 D024             		cmpi.b #6,($FFFFD024).w
000194C4 6400 0000                  		bcc.w loci_FB92
000194C8 4A78 FE08                  		tst.w ($FFFFFE08).w
000194CC 6600 0000                  		bne.w loci_FBAC
000194D0 3A00                       		move.w d0,d5
000194D2 B240                       		cmp.w d0,d1
000194D4 6400                       		bcc.s loci_FB36
000194D6 D241                       		add.w d1,d1
000194D8 9041                       		sub.w d1,d0
000194DA 3A00                       		move.w d0,d5
000194DC 4445                       		neg.w d5
000194DE                            
000194DE                            loci_FB36:
000194DE 3203                       		move.w d3,d1
000194E0 B443                       		cmp.w d3,d2
000194E2 6400                       		bcc.s loci_FB44
000194E4 5943                       		subq.w #4,d3
000194E6 9644                       		sub.w d4,d3
000194E8 3203                       		move.w d3,d1
000194EA 4441                       		neg.w d1
000194EC                            
000194EC                            loci_FB44:
000194EC BA41                               cmp.w d1,d5
000194EE 6200 0000                  		bhi.w loci_FBB0
000194F2 0C41 0004                  		cmpi.w #4,d1
000194F6 6300                       		bls.s loci_FB8C
000194F8 6000                       		bra.s loci_FBAC
000194FA                            ; ===========================================================================
000194FA                            
000194FA                            loci_FB5E:
000194FA 6000                       		bra.s   loci_FBAC
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loci_FB8C:
000194FC 6100                       		bsr.s loci_FBA0
000194FE 7801                       		moveq #1,d4
00019500 4E75                       		rts
00019502                            ; ===========================================================================
00019502                            
00019502                            loci_FB92:
00019502 0828 0005 0022             		btst #5,status(a0)
00019508 6700                       		beq.s loci_FBAC
0001950A 337C 0001 001C             		move.w #1,anim(a1) ; use walking animation
00019510                            
00019510                            loci_FBA0:
00019510 08A8 0005 0022             		bclr #5,status(a0)
00019516 08A9 0005 0022             		bclr #5,status(a1)
0001951C                            
0001951C                            loci_FBAC:
0001951C 7800                       		moveq #0,d4
0001951E 4E75                       		rts
00019520                            ; ===========================================================================
00019520                            
00019520                            loci_FBB0:
00019520 4A43                       		tst.w d3
00019522 6B00                       		bmi.s loci_FBBC
00019524 0C43 0010                  		cmpi.w #$10,d3
00019528 6500                       		bcs.s loci_FBEE
0001952A 60D6                       		bra.s loci_FB92
0001952C                            ; ===========================================================================
0001952C                            
0001952C                            loci_FBBC:
0001952C                            loci_FBD2:
0001952C 78FF                       		moveq #-1,d4
0001952E 4E75                       		rts
00019530                            ; ===========================================================================
00019530                            
00019530                            loci_FBD6:
00019530 0829 0001 0022             		btst #1,status(a1)
00019536 66F4                       		bne.s loci_FBD2
00019538 2F08                       		move.l a0,-(sp)
0001953A 2049                       		movea.l a1,a0
0001953C 4EB9 0000 0000             		jsr KillCharacter
00019542 205F                       		movea.l (sp)+,a0
00019544 78FF                       		moveq #-1,d4
00019546 4E75                       		rts
00019548                            ; ===========================================================================
00019548                            
00019548                            loci_FBEE:
00019548 5943                       		subq.w #4,d3
0001954A 7200                       		moveq #0,d1
0001954C 1228 0023                  		move.b width_pixels(a0),d1
00019550 3401                       		move.w d1,d2
00019552 D442                       		add.w d2,d2
00019554 D269 0008                  		add.w 8(a1),d1
00019558 9268 0008                  		sub.w 8(a0),d1
0001955C 6B00                       		bmi.s loci_FC28
0001955E B242                       		cmp.w d2,d1
00019560 6400                       		bcc.s loci_FC28
00019562 4A69 0012                  		tst.w y_vel(a1)
00019566 6B00                       		bmi.s loci_FC28
00019568 9769 000C                  		sub.w d3,$C(a1)
0001956C 5369 000C                  		subq.w #1,$C(a1)
00019570 4EB9 0000 0000             		jsr sub_FC2C
00019576 117C 0002 0025             		move.b #2,routine_secondary(a0)
0001957C 08E8 0003 0022             		bset #3,status(a0)
00019582 78FF                       		moveq #-1,d4
00019584 4E75                       		rts
00019586                            ; ===========================================================================
00019586                            
00019586                            loci_FC28:
00019586 7800                       		moveq #0,d4
00019588 4E75                       		rts
0001958A                            
0001958A                            ; =============== S U B	R O U T	I N E =======================================
0001958A                            
0001958A                            
0001958A                            SolidObject:					  ; ...
0001958A                            
0001958A                            ; FUNCTION CHUNK AT 00314F36 SIZE 000000BA BYTES
0001958A                            
0001958A 43F8 D000                  		lea	($FFFFD000).w,a1
0001958E 7C03                       		moveq	#3,d6
00019590 0D28 0022                  		btst	d6,status(a0)
00019594 6700 0000                  		beq.w	loc_314E2E
00019598 3401                       		move.w	d1,d2
0001959A D442                       		add.w	d2,d2
0001959C 0829 0001 0022             		btst	#1,status(a1)
000195A2 6600                       		bne.s	loc_314BE0
000195A4 3029 0008                  		move.w	x_pos(a1),d0
000195A8 9068 0008                  		sub.w	x_pos(a0),d0
000195AC D041                       		add.w	d1,d0
000195AE 6B00                       		bmi.s	loc_314BE0
000195B0 B042                       		cmp.w	d2,d0
000195B2 6500                       		bcs.s	loc_314BF4
000195B4                            
000195B4                            loc_314BE0:					  ; ...
000195B4 08A9 0003 0022             		bclr	#3,status(a1)
000195BA 08E9 0001 0022             		bset	#1,status(a1)
000195C0 0DA8 0022                  		bclr	d6,status(a0)
000195C4 7800                       		moveq	#0,d4
000195C6 4E75                       		rts
000195C8                            ; ---------------------------------------------------------------------------
000195C8                            
000195C8                            loc_314BF4:					  ; ...
000195C8 3404                       		move.w	d4,d2
000195CA 4EB9 0000 F56A             		jsr	MvSonicOnPtfm
000195D0 7800                       		moveq	#0,d4
000195D2 4E75                       		rts
000195D4                            ; ---------------------------------------------------------------------------
000195D4                            
000195D4                            loc_314BFE:					  ; ...
000195D4 43F8 D000                  		lea	($FFFFD000).w,a1
000195D8 7C03                       		moveq	#3,d6
000195DA                            
000195DA                            loc_314C04:					  ; ...
000195DA 0D28 0022                  		btst	d6,status(a0)
000195DE 6700 0000                  		beq.w	loc_314E36
000195E2 3401                       		move.w	d1,d2
000195E4 D442                       		add.w	d2,d2
000195E6 0829 0001 0022             		btst	#1,status(a1)
000195EC 6600                       		bne.s	loc_314C28
000195EE 3029 0008                  		move.w	x_pos(a1),d0
000195F2 9068 0008                  		sub.w	x_pos(a0),d0
000195F6 D041                       		add.w	d1,d0
000195F8 6B00                       		bmi.s	loc_314C28
000195FA B042                       		cmp.w	d2,d0
000195FC 6500                       		bcs.s	loc_314C3C
000195FE                            
000195FE                            loc_314C28:					  ; ...
000195FE 08A9 0003 0022             		bclr	#3,status(a1)
00019604 08E9 0001 0022             		bset	#1,status(a1)
0001960A 0DA8 0022                  		bclr	d6,status(a0)
0001960E 7800                       		moveq	#0,d4
00019610 4E75                       		rts
00019612                            ; ---------------------------------------------------------------------------
00019612                            
00019612                            loc_314C3C:					  ; ...
00019612 3404                       		move.w	d4,d2
00019614 4EB9 0000 F56A             		jsr	MvSonicOnPtfm
0001961A 7800                       		moveq	#0,d4
0001961C 4E75                       		rts
0001961E                            ; ---------------------------------------------------------------------------
0001961E                            
0001961E                            SolidObject71:					  ; ...
0001961E 43F8 D000                  		lea	($FFFFD000).w,a1
00019622 7C03                       		moveq	#3,d6
00019624                            
00019624                            loc_314C4C:					  ; ...
00019624 0D28 0022                  		btst	d6,status(a0)
00019628 6700 0000                  		beq.w	loc_314D74
0001962C 3401                       		move.w	d1,d2
0001962E D442                       		add.w	d2,d2
00019630 0829 0001 0022             		btst	#1,status(a1)
00019636 6600                       		bne.s	loc_314C70
00019638 3029 0008                  		move.w	x_pos(a1),d0
0001963C 9068 0008                  		sub.w	x_pos(a0),d0
00019640 D041                       		add.w	d1,d0
00019642 6B00                       		bmi.s	loc_314C70
00019644 B042                       		cmp.w	d2,d0
00019646 6500                       		bcs.s	loc_314C84
00019648                            
00019648                            loc_314C70:					  ; ...
00019648 08A9 0003 0022             		bclr	#3,status(a1)
0001964E 08E9 0001 0022             		bset	#1,status(a1)
00019654 0DA8 0022                  		bclr	d6,status(a0)
00019658 7800                       		moveq	#0,d4
0001965A 4E75                       		rts
0001965C                            ; ---------------------------------------------------------------------------
0001965C                            
0001965C                            loc_314C84:					  ; ...
0001965C 3404                       		move.w	d4,d2
0001965E 4EB9 0000 F56A             		jsr	MvSonicOnPtfm
00019664 7800                       		moveq	#0,d4
00019666 4E75                       		rts
00019668                            ; ---------------------------------------------------------------------------
00019668 43F8 D000                  		lea	($FFFFD000).w,a1
0001966C 7C03                       		moveq	#3,d6
0001966E 0D28 0022                  		btst	d6,status(a0)
00019672 6700 0000                  		beq.w	loc_314DCE
00019676 3401                       		move.w	d1,d2
00019678 D442                       		add.w	d2,d2
0001967A 0829 0001 0022             		btst	#1,status(a1)
00019680 6600                       		bne.s	loc_314CB8
00019682 3029 0008                  		move.w	x_pos(a1),d0
00019686 9068 0008                  		sub.w	x_pos(a0),d0
0001968A D041                       		add.w	d1,d0
0001968C 6B00                       		bmi.s	loc_314CB8
0001968E B042                       		cmp.w	d2,d0
00019690 6500                       		bcs.s	loc_314CCC
00019692                            
00019692                            loc_314CB8:					  ; ...
00019692 08A9 0003 0022             		bclr	#3,status(a1)
00019698 08E9 0001 0022             		bset	#1,status(a1)
0001969E 0DA8 0022                  		bclr	d6,status(a0)
000196A2 7800                       		moveq	#0,d4
000196A4 4E75                       		rts
000196A6                            ; ---------------------------------------------------------------------------
000196A6                            
000196A6                            loc_314CCC:					  ; ...
000196A6 3404                       		move.w	d4,d2
000196A8 4EB9 0000 F56A             		jsr	MvSonicOnPtfm
000196AE 7800                       		moveq	#0,d4
000196B0 4E75                       		rts
000196B2                            ; ---------------------------------------------------------------------------
000196B2                            loc_314CD6:					  ; ...
000196B2 43F8 D000                  		lea	($FFFFD000).w,a1
000196B6 7C03                       		moveq	#3,d6
000196B8 0D28 0022                  		btst	d6,status(a0)
000196BC 6700 0000                  		beq.w	loc_314D32
000196C0 0829 0001 0022             		btst	#1,status(a1)
000196C6 6600                       		bne.s	loc_314CFE
000196C8 3029 0008                  		move.w	x_pos(a1),d0
000196CC 9068 0008                  		sub.w	x_pos(a0),d0
000196D0 D041                       		add.w	d1,d0
000196D2 6B00                       		bmi.s	loc_314CFE
000196D4 D241                       		add.w	d1,d1
000196D6 B041                       		cmp.w	d1,d0
000196D8 6500                       		bcs.s	loc_314D12
000196DA                            
000196DA                            loc_314CFE:					  ; ...
000196DA 08A9 0003 0022             		bclr	#3,status(a1)
000196E0 08E9 0001 0022             		bset	#1,status(a1)
000196E6 0DA8 0022                  		bclr	d6,status(a0)
000196EA 7800                       		moveq	#0,d4
000196EC 4E75                       		rts
000196EE                            ; ---------------------------------------------------------------------------
000196EE                            
000196EE                            loc_314D12:					  ; ...
000196EE 3028 000C                  		move.w	y_pos(a0),d0
000196F2 9042                       		sub.w	d2,d0
000196F4 D043                       		add.w	d3,d0
000196F6 7200                       		moveq	#0,d1
000196F8 1229 0016                  		move.b	y_radius(a1),d1
000196FC 9041                       		sub.w	d1,d0
000196FE 3340 000C                  		move.w	d0,y_pos(a1)
00019702 9868 0008                  		sub.w	x_pos(a0),d4
00019706 9969 0008                  		sub.w	d4,x_pos(a1)
0001970A 7800                       		moveq	#0,d4
0001970C 4E75                       		rts
0001970E                            ; ---------------------------------------------------------------------------
0001970E                            
0001970E                            loc_314D32:					  ; ...
0001970E 3029 0008                  		move.w	x_pos(a1),d0
00019712 9068 0008                  		sub.w	x_pos(a0),d0
00019716 D041                       		add.w	d1,d0
00019718 6B00 0000                  		bmi.w	loc_314F0C
0001971C 3801                       		move.w	d1,d4
0001971E D844                       		add.w	d4,d4
00019720 B044                       		cmp.w	d4,d0
00019722 6200 0000                  		bhi.w	loc_314F0C
00019726 3A28 000C                  		move.w	y_pos(a0),d5
0001972A DA43                       		add.w	d3,d5
0001972C 1629 0016                  		move.b	y_radius(a1),d3
00019730 4883                       		ext.w	d3
00019732 D443                       		add.w	d3,d2
00019734 3629 000C                  		move.w	y_pos(a1),d3
00019738 9645                       		sub.w	d5,d3
0001973A 5843                       		addq.w	#4,d3
0001973C D642                       		add.w	d2,d3
0001973E 6B00 0000                  		bmi.w	loc_314F0C
00019742 3802                       		move.w	d2,d4
00019744 D844                       		add.w	d4,d4
00019746 B644                       		cmp.w	d4,d3
00019748 6400 0000                  		bcc.w	loc_314F0C
0001974C 6000 0000                  		bra.w	loc_314E74
00019750                            ; ---------------------------------------------------------------------------
00019750                            
00019750                            loc_314D74:					  ; ...
00019750 3029 0008                  		move.w	x_pos(a1),d0
00019754 9068 0008                  		sub.w	x_pos(a0),d0
00019758 D041                       		add.w	d1,d0
0001975A 6B00 0000                  		bmi.w	loc_314F0C
0001975E 3601                       		move.w	d1,d3
00019760 D643                       		add.w	d3,d3
00019762 B043                       		cmp.w	d3,d0
00019764 6200 0000                  		bhi.w	loc_314F0C
00019768 3A00                       		move.w	d0,d5
0001976A 0828 0000 0001             		btst	#0,1(a0)
00019770 6700                       		beq.s	loc_314D9A
00019772 4645                       		not.w	d5
00019774 DA43                       		add.w	d3,d5
00019776                            
00019776                            loc_314D9A:					  ; ...
00019776 E24D                       		lsr.w	#1,d5
00019778 1632 5000                  		move.b	(a2,d5.w),d3
0001977C 9612                       		sub.b	(a2),d3
0001977E 4883                       		ext.w	d3
00019780 3A28 000C                  		move.w	y_pos(a0),d5
00019784 9A43                       		sub.w	d3,d5
00019786 1629 0016                  		move.b	y_radius(a1),d3
0001978A 4883                       		ext.w	d3
0001978C D443                       		add.w	d3,d2
0001978E 3629 000C                  		move.w	y_pos(a1),d3
00019792 9645                       		sub.w	d5,d3
00019794 5843                       		addq.w	#4,d3
00019796 D642                       		add.w	d2,d3
00019798 6B00 0000                  		bmi.w	loc_314F0C
0001979C 3802                       		move.w	d2,d4
0001979E D844                       		add.w	d4,d4
000197A0 B644                       		cmp.w	d4,d3
000197A2 6400 0000                  		bcc.w	loc_314F0C
000197A6 6000 0000                  		bra.w	loc_314E74
000197AA                            ; ---------------------------------------------------------------------------
000197AA                            
000197AA                            loc_314DCE:					  ; ...
000197AA 3029 0008                  		move.w	x_pos(a1),d0
000197AE 9068 0008                  		sub.w	x_pos(a0),d0
000197B2 D041                       		add.w	d1,d0
000197B4 6B00 0000                  		bmi.w	loc_314F0C
000197B8 3601                       		move.w	d1,d3
000197BA D643                       		add.w	d3,d3
000197BC B043                       		cmp.w	d3,d0
000197BE 6200 0000                  		bhi.w	loc_314F0C
000197C2 3A00                       		move.w	d0,d5
000197C4 0828 0000 0001             		btst	#0,1(a0)
000197CA 6700                       		beq.s	loc_314DF4
000197CC 4645                       		not.w	d5
000197CE DA43                       		add.w	d3,d5
000197D0                            
000197D0                            loc_314DF4:					  ; ...
000197D0 0245 FFFE                  		and.w	#-2,d5
000197D4 1632 5000                  		move.b	(a2,d5.w),d3
000197D8 1432 5001                  		move.b	1(a2,d5.w),d2
000197DC 4882                       		ext.w	d2
000197DE 4883                       		ext.w	d3
000197E0 3A28 000C                  		move.w	y_pos(a0),d5
000197E4 9A43                       		sub.w	d3,d5
000197E6 3629 000C                  		move.w	y_pos(a1),d3
000197EA 9645                       		sub.w	d5,d3
000197EC 1A29 0016                  		move.b	y_radius(a1),d5
000197F0 4885                       		ext.w	d5
000197F2 D645                       		add.w	d5,d3
000197F4 5843                       		addq.w	#4,d3
000197F6 6B00 0000                  		bmi.w	loc_314F0C
000197FA D445                       		add.w	d5,d2
000197FC 3802                       		move.w	d2,d4
000197FE D845                       		add.w	d5,d4
00019800 B644                       		cmp.w	d4,d3
00019802 6400 0000                  		bcc.w	loc_314F0C
00019806 6000 0000                  		bra.w	loc_314E74
0001980A                            ; ---------------------------------------------------------------------------
0001980A                            SolidObject2F:	; XREF: Obj2F_Solid
0001980A 43F8 D000                  		lea	($FFFFD000).w,a1
0001980E                            loc_FAC8:
0001980E                            loc_314E2E:					  ; ...
0001980E 4A28 0001                  		tst.b	1(a0)
00019812 6A00 0000                  		bpl.w	loc_314F0C
00019816                            
00019816                            loc_314E36:					  ; ...
00019816 3029 0008                  		move.w	x_pos(a1),d0
0001981A 9068 0008                  		sub.w	x_pos(a0),d0
0001981E D041                       		add.w	d1,d0
00019820 6B00 0000                  		bmi.w	loc_314F0C
00019824 3601                       		move.w	d1,d3
00019826 D643                       		add.w	d3,d3
00019828 B043                       		cmp.w	d3,d0
0001982A 6200 0000                  		bhi.w	loc_314F0C
0001982E 1629 0016                  		move.b	y_radius(a1),d3
00019832 4883                       		ext.w	d3
00019834 D443                       		add.w	d3,d2
00019836 3629 000C                  		move.w	y_pos(a1),d3
0001983A 9668 000C                  		sub.w	y_pos(a0),d3
0001983E 5843                       		addq.w	#4,d3
00019840 D642                       		add.w	d2,d3
00019842 6B00 0000                  		bmi.w	loc_314F0C
00019846 0243 07FF                  		and.w	#$7FF,d3
0001984A 3802                       		move.w	d2,d4
0001984C D844                       		add.w	d4,d4
0001984E B644                       		cmp.w	d4,d3
00019850 6400 0000                  		bcc.w	loc_314F0C
00019854                            
00019854                            loc_314E74:					  ; ...
00019854 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00019858 6B00 0000                  		bmi.w	loc_314F0C
0001985C 0C29 0006 0024             		cmp.b	#6,routine(a1)
00019862 6400 0000                  		bcc.w	loc_FBA0
00019866 4A78 FE08                  		tst.w	($FFFFFE08).w
0001986A 6600 0000                  		bne.w	loc_FBA0
0001986E 3A00                       		move.w	d0,d5
00019870 B240                       		cmp.w	d0,d1
00019872 6400                       		bcc.s	loc_314E9C
00019874 D241                       		add.w	d1,d1
00019876 9041                       		sub.w	d1,d0
00019878 3A00                       		move.w	d0,d5
0001987A 4445                       		neg.w	d5
0001987C                            
0001987C                            loc_314E9C:					  ; ...
0001987C 3203                       		move.w	d3,d1
0001987E B443                       		cmp.w	d3,d2
00019880 6400                       		bcc.s	loc_314EAA
00019882 5943                       		subq.w	#4,d3
00019884 9644                       		sub.w	d4,d3
00019886 3203                       		move.w	d3,d1
00019888 4441                       		neg.w	d1
0001988A                            
0001988A                            loc_314EAA:					  ; ...
0001988A BA41                       		cmp.w	d1,d5
0001988C 6200 0000                  		bhi.w	loc_FBB0
00019890 0C41 0004                  		cmp.w	#4,d1
00019894 6300 0000                  		bls.w	loc_FBB0
00019898                            
00019898                            loc_314EB8:					  ; ...
00019898 4A40                       		tst.w	d0
0001989A 6700                       		beq.s	loc_314ED8
0001989C 6B00                       		bmi.s	loc_314EC6
0001989E 4A69 0010                  		tst.w	x_vel(a1)
000198A2 6B00                       		bmi.s	loc_314ED8
000198A4 6000                       		bra.s	loc_314ECC
000198A6                            ; ---------------------------------------------------------------------------
000198A6                            
000198A6                            loc_314EC6:					  ; ...
000198A6 4A69 0010                  		tst.w	x_vel(a1)
000198AA 6A00                       		bpl.s	loc_314ED8
000198AC                            
000198AC                            loc_314ECC:					  ; ...
000198AC 337C 0000 0020             		move.w	#0,inertia(a1)
000198B2 337C 0000 0010             		move.w	#0,x_vel(a1)
000198B8                            
000198B8                            loc_314ED8:					  ; ...
000198B8 9169 0008                  		sub.w	d0,x_pos(a1)
000198BC 0829 0001 0022             		btst	#1,status(a1)
000198C2 6600                       		bne.s	loc_314EFE
000198C4 2806                       		move.l	d6,d4
000198C6 5404                       		addq.b	#2,d4
000198C8 09E8 0022                  		bset	d4,status(a0)
000198CC 08E9 0005 0022             		bset	#5,status(a1)
000198D2 3806                       		move.w	d6,d4
000198D4 0604 000D                  		add.b	#$D,d4
000198D8 09C6                       		bset	d4,d6
000198DA 7801                       		moveq	#1,d4
000198DC 4E75                       		rts
000198DE                            ; ---------------------------------------------------------------------------
000198DE                            
000198DE                            loc_314EFE:					  ; ...
000198DE 6100                       		bsr.s	loc_FBA0
000198E0 3806                       		move.w	d6,d4
000198E2 0604 000D                  		add.b	#$D,d4
000198E6 09C6                       		bset	d4,d6
000198E8 7801                       		moveq	#1,d4
000198EA 4E75                       		rts
000198EC                            ; ---------------------------------------------------------------------------
000198EC                            loc_FB92:
000198EC                            loc_314F0C:					  ; ...
000198EC 2806                       		move.l	d6,d4
000198EE 5404                       		addq.b	#2,d4
000198F0 0928 0022                  		btst	d4,status(a0)
000198F4 6700                       		beq.s	loc_FBA0
000198F6 0C29 0002 001C             		cmp.b	#2,anim(a1)	; check if in jumping/rolling animation
000198FC 6700                       		beq.s	loc_FBA0
000198FE 0C29 0017 001C             		cmpi.b	#$17,anim(a1)	; check if in drowning animation
00019904 6700                       		beq.s	loc_FBA0
00019906 0C29 0018 001C             		cmpi.b	#$18,anim(a1)	; check if in dying animation
0001990C 6700                       		beq.s	loc_FBA0
0001990E 0C29 001A 001C             		cmp.b	#$1A,anim(a1)	; check if in hurt animation
00019914 6700                       		beq.s	loc_FBA0
00019916 0C29 001F 001C             		cmpi.b	#$1F,anim(a1)	; check if in spindash animation
0001991C 6700                       		beq.s	loc_FBA0
0001991E 0C29 0022 001C             		cmpi.b	#$22,anim(a1)	; check if in transformation animation
00019924 6700                       		beq.s	loc_FBA0
00019926 337C 0001 001C             		move.w	#1,anim(a1)	; use walking animation
0001992C                            ; End of function SolidObject
0001992C                             
0001992C                            loc_FBA0:
0001992C 2806                       		move.l	d6,d4
0001992E 5404                       		addq.b	#2,d4
00019930 09A8 0022                  		bclr	d4,status(a0)
00019934 08A9 0005 0022             		bclr	#5,status(a1)
0001993A                            
0001993A                            loc_FBAC:
0001993A 7800                       		moveq	#0,d4
0001993C 4E75                       		rts	
0001993E                            ; ===========================================================================
0001993E                            
0001993E                            loc_FBB0:
0001993E 4A43                       		tst.w	d3
00019940 6B00                       		bmi.s	loc_FBBC
00019942 0C43 0010                  		cmpi.w	#$10,d3
00019946 6500                       		bcs.s	loc_FBEE
00019948 60A2                       		bra.s	loc_FB92
0001994A                            ; ===========================================================================
0001994A                            
0001994A                            loc_FBBC:
0001994A 4A69 0012                  		tst.w	y_vel(a1)
0001994E 6700                       		beq.s	loc_FBD6
00019950 6A00                       		bpl.s	loc_FBD2
00019952 4A43                       		tst.w	d3
00019954 6A00                       		bpl.s	loc_FBD2
00019956 9769 000C                  		sub.w	d3,$C(a1)
0001995A 337C 0000 0012             		move.w	#0,y_vel(a1)	; stop Sonic moving
00019960                            
00019960                            loc_FBD2:
00019960 78FF                       		moveq	#-1,d4
00019962 4E75                       		rts	
00019964                            ; ===========================================================================
00019964                            
00019964                            loc_FBD6:
00019964 0829 0001 0022             		btst	#1,status(a1)
0001996A 66F4                       		bne.s	loc_FBD2
0001996C 2F08                       		move.l	a0,-(sp)
0001996E 2049                       		movea.l	a1,a0
00019970 4EB9 0000 0000             		jsr	KillCharacter
00019976 205F                       		movea.l	(sp)+,a0
00019978 78FF                       		moveq	#-1,d4
0001997A 4E75                       		rts	
0001997C                            ; ===========================================================================
0001997C                            
0001997C                            loc_FBEE:
0001997C 5943                       		subq.w	#4,d3
0001997E 7200                       		moveq	#0,d1
00019980 1228 0023                  		move.b	width_pixels(a0),d1
00019984 3401                       		move.w	d1,d2
00019986 D442                       		add.w	d2,d2
00019988 D269 0008                  		add.w	8(a1),d1
0001998C 9268 0008                  		sub.w	8(a0),d1
00019990 6B00                       		bmi.s	loc_FC28
00019992 B242                       		cmp.w	d2,d1
00019994 6400                       		bcc.s	loc_FC28
00019996 4A69 0012                  		tst.w	y_vel(a1)
0001999A 6B00                       		bmi.s	loc_FC28
0001999C 9769 000C                  		sub.w	d3,$C(a1)
000199A0 5369 000C                  		subq.w	#1,$C(a1)
000199A4 6100                       		bsr.s	sub_FC2C
000199A6 117C 0002 0025             		move.b	#2,routine_secondary(a0)
000199AC 08E8 0003 0022             		bset	#3,status(a0)
000199B2 78FF                       		moveq	#-1,d4
000199B4 4E75                       		rts	
000199B6                            ; ===========================================================================
000199B6                            
000199B6                            loc_FC28:
000199B6 7800                       		moveq	#0,d4
000199B8 4E75                       		rts	
000199BA                            ; End of function SolidObject
000199BA                            
000199BA                            
000199BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000199BA                            
000199BA                            
000199BA                            sub_FC2C:				; XREF: SolidObject
000199BA 0829 0003 0022             		btst	#3,status(a1)
000199C0 6700                       		beq.s	loc_FC4E
000199C2 7000                       		moveq	#0,d0
000199C4 1029 003D                  		move.b	$3D(a1),d0
000199C8 ED48                       		lsl.w	#6,d0
000199CA 0680 00FF D000             		addi.l	#$FFD000,d0
000199D0 2440                       		move.l	d0,a2
000199D2 0DAB 0022                  		bclr	d6,status(a3)
000199D6                            
000199D6                            loc_FC4E:
000199D6 3008                       		move.w	a0,d0
000199D8 0440 D000                  		subi.w	#-$3000,d0
000199DC EC48                       		lsr.w	#6,d0
000199DE 0240 007F                  		andi.w	#$7F,d0
000199E2 1340 003D                  		move.b	d0,$3D(a1)
000199E6 137C 0000 0026             		move.b	#0,$26(a1)
000199EC 337C 0000 0012             		move.w	#0,y_vel(a1)
000199F2 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
000199F8 0829 0001 0022             		btst	#1,status(a1)
000199FE 6700                       		beq.s	loc_FC84
00019A00 2F08                       		move.l	a0,-(sp)
00019A02 2049                       		movea.l	a1,a0
00019A04 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00019A0A 205F                       		movea.l	(sp)+,a0
00019A0C                            
00019A0C                            loc_FC84:
00019A0C 08E9 0003 0022             		bset	#3,status(a1)
00019A12 08E8 0003 0022             		bset	#3,status(a0)
00019A18 4E75                       		rts	
00019A1A                            ; End of function sub_FC2C
00019A1A                            
00019A1A                            ; ===========================================================================
00019A1A                            ; ---------------------------------------------------------------------------
00019A1A                            ; Object 51 - smashable	green block (MZ)
00019A1A                            ; ---------------------------------------------------------------------------
00019A1A                            
00019A1A                            Obj51:					; XREF: Obj_Index
00019A1A 7000                       		moveq	#0,d0
00019A1C 1028 0024                  		move.b	routine(a0),d0
00019A20 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00019A24 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00019A28 6000 F47C                  		bra.w	MarkObjGone
00019A2C                            ; ===========================================================================
00019A2C 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00019A2E 0000                       		dc.w Obj51_Solid-Obj51_Index
00019A30 0000                       		dc.w Obj51_Display-Obj51_Index
00019A32                            ; ===========================================================================
00019A32                            
00019A32                            Obj51_Main:				; XREF: Obj51_Index
00019A32 5428 0024                  		addq.b	#2,routine(a0)
00019A36 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00019A3E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00019A44 117C 0004 0001             		move.b	#4,1(a0)
00019A4A 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00019A50 317C 0200 0018             		move.w	#$200,priority(a0)
00019A56 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
00019A5C                            
00019A5C                            Obj51_Solid:				; XREF: Obj51_Index
00019A5C 3178 F7D0 0034             		move.w	(Chain_Bonus_counter).w,$34(a0)
00019A62 1178 D01C 0032             		move.b	(MainCharacter+anim).w,$32(a0) ;	load Sonic's animation number
00019A68 323C 001B                  		move.w	#$1B,d1
00019A6C 343C 0010                  		move.w	#$10,d2
00019A70 363C 0011                  		move.w	#$11,d3
00019A74 3828 0008                  		move.w	8(a0),d4
00019A78 4EBA FB10                  		jsr	SolidObject
00019A7C 0828 0003 0022             		btst	#3,status(a0)
00019A82 6600                       		bne.s	Obj51_Smash
00019A84                            
00019A84                            locret_FCFC:
00019A84 4E75                       		rts	
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            Obj51_Smash:				; XREF: Obj51_Solid
00019A86 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00019A8C 66F6                       		bne.s	locret_FCFC	; if not, branch
00019A8E 31E8 0034 F7D0             		move.w	$34(a0),(Chain_Bonus_counter).w
00019A94 08E9 0002 0022             		bset	#2,status(a1)
00019A9A 137C 000E 0016             		move.b	#$E,$16(a1)
00019AA0 137C 0007 0017             		move.b	#7,$17(a1)
00019AA6 137C 0002 001C             		move.b	#2,anim(a1)
00019AAC 337C FD00 0012             		move.w	#-$300,y_vel(a1)	; bounce Sonic upwards
00019AB2 08E9 0001 0022             		bset	#1,status(a1)
00019AB8 08A9 0003 0022             		bclr	#3,status(a1)
00019ABE 137C 0002 0024             		move.b	#2,routine(a1)
00019AC4 08A8 0003 0022             		bclr	#3,status(a0)
00019ACA 4228 0025                  		clr.b	routine_secondary(a0)
00019ACE 117C 0001 001A             		move.b	#1,mapping_frame(a0)
00019AD4 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00019ADA 7203                       		moveq	#3,d1		; set number of	fragments to 4
00019ADC 343C 0038                  		move.w	#$38,d2
00019AE0 4EBA BDD8                  		jsr	SmashObject
00019AE4 4EBA CD96                  		jsr	SingleObjLoad
00019AE8 6600                       		bne.s	Obj51_Display
00019AEA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00019AEE 3368 0008 0008             		move.w	8(a0),8(a1)
00019AF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AFA 3438 F7D0                  		move.w	(Chain_Bonus_counter).w,d2
00019AFE 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w
00019B02 0C42 0006                  		cmpi.w	#6,d2
00019B06 6500                       		bcs.s	Obj51_Bonus
00019B08 7406                       		moveq	#6,d2
00019B0A                            
00019B0A                            Obj51_Bonus:
00019B0A 7000                       		moveq	#0,d0
00019B0C 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00019B10 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 blocks been smashed?
00019B16 6500                       		bcs.s	loc_FD98	; if not, branch
00019B18 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00019B1C 740A                       		moveq	#10,d2
00019B1E                            
00019B1E                            loc_FD98:
00019B1E 4EB9 0000 0000             		jsr	AddPoints
00019B24 E24A                       		lsr.w	#1,d2
00019B26 1342 001A                  		move.b	d2,mapping_frame(a1)
00019B2A                            
00019B2A                            Obj51_Display:				; XREF: Obj51_Index
00019B2A 4EBA C1E0                  		jsr	SpeedToPos
00019B2E 0668 0038 0012             		addi.w	#$38,y_vel(a0)
00019B34 4EBA C23C                  		jsr	DisplaySprite
00019B38 4A28 0001                  		tst.b	1(a0)
00019B3C 6A00 C1E8                  		bpl.w	DeleteObject
00019B40 4E75                       		rts	
00019B42                            ; ===========================================================================
00019B42 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00019B46 FF00 FF00                  		dc.w $FF00, $FF00
00019B4A 0200 FE00                  		dc.w $200, $FE00
00019B4E 0100 FF00                  		dc.w $100, $FF00
00019B52                            
00019B52 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00019B5A                            ; ---------------------------------------------------------------------------
00019B5A                            ; Sprite mappings - smashable green block (MZ)
00019B5A                            ; ---------------------------------------------------------------------------
00019B5A                            Map_obj51:
00019B5A                            	include "_maps\obj51.asm"
00019B5A                            ; ---------------------------------------------------------------------------
00019B5A                            ; Sprite mappings - smashable green block (MZ)
00019B5A                            ; ---------------------------------------------------------------------------
00019B5A 0000                       		dc.w byte_FDD8-Map_obj51
00019B5C 0000                       		dc.w byte_FDE3-Map_obj51
00019B5E 02                         byte_FDD8:	dc.b 2
00019B5F F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00019B64 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00019B69 04                         byte_FDE3:	dc.b 4
00019B6A F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00019B6F 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00019B74 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00019B79 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00019B7E                            		even
00019B7E                            		even
00019B7E                            
00019B7E                            ; ===========================================================================
00019B7E                            ; ---------------------------------------------------------------------------
00019B7E                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00019B7E                            ; ---------------------------------------------------------------------------
00019B7E                            
00019B7E                            Obj52:					; XREF: Obj_Index
00019B7E 7000                       		moveq	#0,d0
00019B80 1028 0024                  		move.b	routine(a0),d0
00019B84 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00019B88 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00019B8C                            ; ===========================================================================
00019B8C 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00019B8E 0000                       		dc.w Obj52_Platform-Obj52_Index
00019B90 0000                       		dc.w Obj52_StandOn-Obj52_Index
00019B92                            
00019B92 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00019B94 2001                       		dc.b $20, 1
00019B96 2002                       		dc.b $20, 2
00019B98 4003                       		dc.b $40, 3
00019B9A 3004                       		dc.b $30, 4
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj52_Main:				; XREF: Obj52_Index
00019B9C 5428 0024                  		addq.b	#2,routine(a0)
00019BA0 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00019BA8 317C 42B8 0002             		move.w	#$42B8,2(a0)
00019BAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019BB4 6600                       		bne.s	loc_FE44
00019BB6 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00019BBE 317C 43BC 0002             		move.w	#$43BC,2(a0)
00019BC4 117C 0007 0016             		move.b	#7,$16(a0)
00019BCA                            
00019BCA                            loc_FE44:
00019BCA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00019BD0 6600                       		bne.s	loc_FE60
00019BD2 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00019BD8 0C28 0028 0028             		cmpi.b	#$28,subtype(a0)	; is object 5228 ?
00019BDE 6700                       		beq.s	loc_FE60	; if yes, branch
00019BE0 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00019BE6                            
00019BE6                            loc_FE60:
00019BE6 117C 0004 0001             		move.b	#4,1(a0)
00019BEC 7000                       		moveq	#0,d0
00019BEE 1028 0028                  		move.b	subtype(a0),d0
00019BF2 E648                       		lsr.w	#3,d0
00019BF4 0240 001E                  		andi.w	#$1E,d0
00019BF8 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00019BFC 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00019C00 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
00019C04 317C 0200 0018             		move.w	#$200,priority(a0)
00019C0A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C10 3168 000C 0032             		move.w	$C(a0),$32(a0)
00019C16 0228 000F 0028             		andi.b	#$F,subtype(a0)
00019C1C                            
00019C1C                            Obj52_Platform:				; XREF: Obj52_Index
00019C1C 4EB9 0000 0000             		jsr	Obj52_Move
00019C22 7200                       		moveq	#0,d1
00019C24 1228 0023                  		move.b	width_pixels(a0),d1
00019C28 4EB9 0000 F1D0             		jsr	(PlatformObject).l
00019C2E 6000                       		bra.s	Obj52_ChkDel
00019C30                            ; ===========================================================================
00019C30                            
00019C30                            Obj52_StandOn:				; XREF: Obj52_Index
00019C30 7200                       		moveq	#0,d1
00019C32 1228 0023                  		move.b	width_pixels(a0),d1
00019C36 4EB9 0000 F310             		jsr	(ExitPlatform).l
00019C3C 3F28 0008                  		move.w	8(a0),-(sp)
00019C40 4EB9 0000 0000             		jsr	Obj52_Move
00019C46 341F                       		move.w	(sp)+,d2
00019C48 4EB9 0000 F576             		jsr	(MvSonicOnPtfm2).l
00019C4E                            
00019C4E                            Obj52_ChkDel:				; XREF: Obj52_Platform
00019C4E 3028 0030                  		move.w	$30(a0),d0
00019C52 4EFA F288                  		jmp		MarkObjGone2
00019C56                            ; ===========================================================================
00019C56                            
00019C56                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00019C56 7000                       		moveq	#0,d0
00019C58 1028 0028                  		move.b	subtype(a0),d0
00019C5C 0240 000F                  		andi.w	#$F,d0
00019C60 D040                       		add.w	d0,d0
00019C62 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00019C66 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00019C6A                            ; ===========================================================================
00019C6A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00019C6E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00019C72 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00019C76 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00019C7A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00019C7E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00019C80                            ; ===========================================================================
00019C80                            
00019C80                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00019C80 4E75                       		rts	
00019C82                            ; ===========================================================================
00019C82                            
00019C82                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00019C82 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00019C86 323C 0060                  		move.w	#$60,d1
00019C8A 0828 0000 0022             		btst	#0,status(a0)
00019C90 6700                       		beq.s	loc_FF26
00019C92 4440                       		neg.w	d0
00019C94 D041                       		add.w	d1,d0
00019C96                            
00019C96                            loc_FF26:
00019C96 3228 0030                  		move.w	$30(a0),d1
00019C9A 9240                       		sub.w	d0,d1
00019C9C 3141 0008                  		move.w	d1,8(a0)
00019CA0 4E75                       		rts	
00019CA2                            ; ===========================================================================
00019CA2                            
00019CA2                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00019CA2 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; is Sonic standing on the platform?
00019CA8 6600                       		bne.s	Obj52_02_Wait
00019CAA 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
00019CAE                            
00019CAE                            Obj52_02_Wait:
00019CAE 4E75                       		rts	
00019CB0                            ; ===========================================================================
00019CB0                            
00019CB0                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00019CB0 7600                       		moveq	#0,d3
00019CB2 1628 0023                  		move.b	width_pixels(a0),d3
00019CB6 4EB9 0000 0000             		jsr	ObjHitWallRight
00019CBC 4A41                       		tst.w	d1		; has the platform hit a wall?
00019CBE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00019CC0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00019CC4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019CCA 4E75                       		rts	
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            Obj52_03_End:
00019CCC 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving	type)
00019CD0 4E75                       		rts	
00019CD2                            ; ===========================================================================
00019CD2                            
00019CD2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00019CD2 7600                       		moveq	#0,d3
00019CD4 1628 0023                  		move.b	width_pixels(a0),d3
00019CD8 4EB9 0000 0000             		jsr	ObjHitWallRight
00019CDE 4A41                       		tst.w	d1		; has the platform hit a wall?
00019CE0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00019CE2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00019CE6 3168 0008 0030             		move.w	8(a0),$30(a0)
00019CEC 4E75                       		rts	
00019CEE                            ; ===========================================================================
00019CEE                            
00019CEE                            Obj52_05_End:
00019CEE 5228 0028                  		addq.b	#1,subtype(a0)	; change to type 06 (falling)
00019CF2 4E75                       		rts	
00019CF4                            ; ===========================================================================
00019CF4                            
00019CF4                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00019CF4 4EBA C016                  		jsr	SpeedToPos
00019CF8 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make the platform fall
00019CFE 4EB9 0000 0000             		jsr	ObjHitFloor
00019D04 4A41                       		tst.w	d1		; has platform hit the floor?
00019D06 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00019D0A D368 000C                  		add.w	d1,$C(a0)
00019D0E 4268 0012                  		clr.w	y_vel(a0)		; stop platform	falling
00019D12 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving)
00019D16                            
00019D16                            locret_FFA0:
00019D16 4E75                       		rts	
00019D18                            ; ===========================================================================
00019D18                            
00019D18                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00019D18 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00019D1C 6700                       		beq.s	Obj52_07_ChkDel
00019D1E 5728 0028                  		subq.b	#3,subtype(a0)	; if yes, change object	type to	04
00019D22                            
00019D22                            Obj52_07_ChkDel:
00019D22 588F                       		addq.l	#4,sp
00019D24 3028 0030                  		move.w	$30(a0),d0
00019D28 4EFA F4BC                  		jmp		MarkObjGone3
00019D2C                            ; ===========================================================================
00019D2C                            
00019D2C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00019D2C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00019D30 323C 0080                  		move.w	#$80,d1
00019D34 0828 0000 0022             		btst	#0,status(a0)
00019D3A 6700                       		beq.s	loc_FFE2
00019D3C 4440                       		neg.w	d0
00019D3E D041                       		add.w	d1,d0
00019D40                            
00019D40                            loc_FFE2:
00019D40 3228 0032                  		move.w	$32(a0),d1
00019D44 9240                       		sub.w	d0,d1
00019D46 3141 000C                  		move.w	d1,$C(a0)
00019D4A 4E75                       		rts	
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00019D4C 7600                       		moveq	#0,d3
00019D4E 1628 0023                  		move.b	width_pixels(a0),d3
00019D52 D643                       		add.w	d3,d3
00019D54 7208                       		moveq	#8,d1
00019D56 0828 0000 0022             		btst	#0,status(a0)
00019D5C 6700                       		beq.s	loc_10004
00019D5E 4441                       		neg.w	d1
00019D60 4443                       		neg.w	d3
00019D62                            
00019D62                            loc_10004:
00019D62 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00019D66 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00019D68 3028 0008                  		move.w	8(a0),d0
00019D6C 9068 0030                  		sub.w	$30(a0),d0
00019D70 B043                       		cmp.w	d3,d0
00019D72 6700                       		beq.s	Obj52_0A_Wait
00019D74 D368 0008                  		add.w	d1,8(a0)	; move platform
00019D78 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00019D7E 4E75                       		rts	
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            Obj52_0A_Wait:
00019D80 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00019D84 6600                       		bne.s	locret_1002E	; if time remains, branch
00019D86 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00019D8C                            
00019D8C                            locret_1002E:
00019D8C 4E75                       		rts	
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            Obj52_0A_Back:
00019D8E 3028 0008                  		move.w	8(a0),d0
00019D92 9068 0030                  		sub.w	$30(a0),d0
00019D96 6700                       		beq.s	Obj52_0A_Reset
00019D98 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00019D9C 4E75                       		rts	
00019D9E                            ; ===========================================================================
00019D9E                            
00019D9E                            Obj52_0A_Reset:
00019D9E 4268 0036                  		clr.w	$36(a0)
00019DA2 5328 0028                  		subq.b	#1,subtype(a0)
00019DA6 4E75                       		rts	
00019DA8                            ; ===========================================================================
00019DA8                            ; ---------------------------------------------------------------------------
00019DA8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00019DA8                            ; ---------------------------------------------------------------------------
00019DA8                            Map_obj52:
00019DA8                            	include "_maps\obj52mz.asm"
00019DA8                            ; ---------------------------------------------------------------------------
00019DA8                            ; Sprite mappings - moving blocks (MZ, SBZ)
00019DA8                            ; ---------------------------------------------------------------------------
00019DA8 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00019DAC 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00019DB0 0000                       		dc.w byte_1008F-Map_obj52
00019DB2 01                         byte_10054:	dc.b 1
00019DB3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00019DB8 02                         byte_1005A:	dc.b 2
00019DB9 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00019DBE F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00019DC3 04                         byte_10065:	dc.b 4
00019DC4 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00019DC9 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00019DCE F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00019DD3 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00019DD8 04                         byte_1007A:	dc.b 4
00019DD9 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00019DDE F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00019DE3 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00019DE8 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00019DED 03                         byte_1008F:	dc.b 3
00019DEE F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00019DF3 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00019DF8 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00019DFE 00                         		even
00019DFE 00                         		even
00019DFE                            
00019DFE                            ; ---------------------------------------------------------------------------
00019DFE                            ; Sprite mappings - moving block (LZ)
00019DFE                            ; ---------------------------------------------------------------------------
00019DFE                            Map_obj52a:
00019DFE                            	include "_maps\obj52lz.asm"
00019DFE                            ; ---------------------------------------------------------------------------
00019DFE                            ; Sprite mappings - moving block (LZ)
00019DFE                            ; ---------------------------------------------------------------------------
00019DFE 0000                       		dc.w byte_100A2-Map_obj52a
00019E00 01                         byte_100A2:	dc.b 1
00019E01 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00019E06                            		even
00019E06                            		even
00019E06                            
00019E06                            ; ===========================================================================
00019E06                            ; ---------------------------------------------------------------------------
00019E06                            ; Object 55 - Basaran enemy (MZ)
00019E06                            ; ---------------------------------------------------------------------------
00019E06                            
00019E06                            Obj55:					; XREF: Obj_Index
00019E06 7000                       		moveq	#0,d0
00019E08 1028 0024                  		move.b	routine(a0),d0
00019E0C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00019E10 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00019E14                            ; ===========================================================================
00019E14 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00019E16 0000                       		dc.w Obj55_Action-Obj55_Index
00019E18                            ; ===========================================================================
00019E18                            
00019E18                            Obj55_Main:				; XREF: Obj55_Index
00019E18 5428 0024                  		addq.b	#2,routine(a0)
00019E1C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00019E24 317C 84B8 0002             		move.w	#$84B8,2(a0)
00019E2A 117C 0004 0001             		move.b	#4,1(a0)
00019E30 117C 000C 0016             		move.b	#$C,$16(a0)
00019E36 317C 0100 0018             		move.w	#$100,priority(a0)
00019E3C 117C 000B 0020             		move.b	#$B,collision_flags(a0)
00019E42 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00019E48                            
00019E48                            Obj55_Action:				; XREF: Obj55_Index
00019E48 7000                       		moveq	#0,d0
00019E4A 1028 0025                  		move.b	routine_secondary(a0),d0
00019E4E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00019E52 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00019E56 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00019E5C 4EBA 88F6                  		jsr	AnimateSprite
00019E60 6000 F044                  		bra.w	MarkObjGone
00019E64                            ; ===========================================================================
00019E64 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00019E66 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00019E68 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00019E6A 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00019E6C 343C 0080                  		move.w	#$80,d2
00019E70 4EB9 0000 0000             		jsr	Obj55_ChkSonic
00019E76 6400                       		bcc.s	Obj55_NoDrop
00019E78 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019E7C 3140 0036                  		move.w	d0,$36(a0)
00019E80 9068 000C                  		sub.w	$C(a0),d0
00019E84 6500                       		bcs.s	Obj55_NoDrop
00019E86 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00019E8A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00019E8C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00019E90 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00019E92 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019E96 D007                       		add.b	d7,d0
00019E98 0200 0007                  		andi.b	#7,d0
00019E9C 6600                       		bne.s	Obj55_NoDrop
00019E9E 117C 0001 001C             		move.b	#1,anim(a0)
00019EA4 5428 0025                  		addq.b	#2,routine_secondary(a0)
00019EA8                            
00019EA8                            Obj55_NoDrop:
00019EA8 4E75                       		rts	
00019EAA                            ; ===========================================================================
00019EAA                            
00019EAA                            Obj55_DropFly:				; XREF: Obj55_Index2
00019EAA 4EBA BE60                  		jsr	SpeedToPos
00019EAE 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make basaran fall
00019EB4 343C 0080                  		move.w	#$80,d2
00019EB8 4EB9 0000 0000             		jsr	Obj55_ChkSonic
00019EBE 3028 0036                  		move.w	$36(a0),d0
00019EC2 9068 000C                  		sub.w	$C(a0),d0
00019EC6 6500                       		bcs.s	Obj55_ChkDel
00019EC8 0C40 0010                  		cmpi.w	#$10,d0
00019ECC 6400                       		bcc.s	locret_10180
00019ECE 3141 0010                  		move.w	d1,x_vel(a0)	; make basaran fly horizontally
00019ED2 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop basaran falling
00019ED8 117C 0002 001C             		move.b	#2,anim(a0)
00019EDE 5428 0025                  		addq.b	#2,routine_secondary(a0)
00019EE2                            
00019EE2                            locret_10180:
00019EE2 4E75                       		rts	
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00019EE4 4A28 0001                  		tst.b	1(a0)
00019EE8 6A00 BE3C                  		bpl.w	DeleteObject
00019EEC 4E75                       		rts	
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00019EEE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019EF2 0200 000F                  		andi.b	#$F,d0
00019EF6 6600                       		bne.s	loc_101A0
00019EF8 303C 00C0                  		move.w	#$C0,d0
00019EFC 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flapping sound
00019F02                            
00019F02                            loc_101A0:
00019F02 4EBA BE08                  		jsr	SpeedToPos
00019F06 3038 D008                  		move.w	($FFFFD008).w,d0
00019F0A 9068 0008                  		sub.w	8(a0),d0
00019F0E 6400                       		bcc.s	loc_101B0
00019F10 4440                       		neg.w	d0
00019F12                            
00019F12                            loc_101B0:
00019F12 0C40 0080                  		cmpi.w	#$80,d0
00019F16 6500                       		bcs.s	locret_101C6
00019F18 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019F1C D007                       		add.b	d7,d0
00019F1E 0200 0007                  		andi.b	#7,d0
00019F22 6600                       		bne.s	locret_101C6
00019F24 5428 0025                  		addq.b	#2,routine_secondary(a0)
00019F28                            
00019F28                            locret_101C6:
00019F28 4E75                       		rts	
00019F2A                            ; ===========================================================================
00019F2A                            
00019F2A                            Obj55_FlyUp:				; XREF: Obj55_Index2
00019F2A 4EBA BDE0                  		jsr	SpeedToPos
00019F2E 0468 0018 0012             		subi.w	#$18,y_vel(a0)	; make basaran fly upwards
00019F34 4EB9 0000 0000             		jsr	ObjHitCeiling
00019F3A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00019F3C 6A00                       		bpl.s	locret_101F4	; if not, branch
00019F3E 9368 000C                  		sub.w	d1,$C(a0)
00019F42 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00019F48 4268 0010                  		clr.w	x_vel(a0)		; stop basaran moving
00019F4C 4268 0012                  		clr.w	y_vel(a0)
00019F50 4228 001C                  		clr.b	anim(a0)
00019F54 4228 0025                  		clr.b	routine_secondary(a0)
00019F58                            
00019F58                            locret_101F4:
00019F58 4E75                       		rts	
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00019F5A 323C 0100                  		move.w	#$100,d1
00019F5E 08E8 0000 0022             		bset	#0,status(a0)
00019F64 3038 D008                  		move.w	($FFFFD008).w,d0
00019F68 9068 0008                  		sub.w	8(a0),d0
00019F6C 6400                       		bcc.s	loc_10214
00019F6E 4440                       		neg.w	d0
00019F70 4441                       		neg.w	d1
00019F72 08A8 0000 0022             		bclr	#0,status(a0)
00019F78                            
00019F78                            loc_10214:
00019F78 B042                       		cmp.w	d2,d0
00019F7A 4E75                       		rts	
00019F7C                            ; ===========================================================================
00019F7C 4EBA BD8E                  		jsr	SpeedToPos
00019F80 4EBA BDF0                  		jsr	DisplaySprite
00019F84 4A28 0001                  		tst.b	1(a0)
00019F88 6A00 BD9C                  		bpl.w	DeleteObject
00019F8C 4E75                       		rts	
00019F8E                            ; ===========================================================================
00019F8E                            Ani_obj55:
00019F8E                            	include "_anim\obj55.asm"
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E                            ; Animation script - Basaran enemy
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E 0000                       		dc.w byte_10230-Ani_obj55
00019F90 0000                       		dc.w byte_10234-Ani_obj55
00019F92 0000                       		dc.w byte_10238-Ani_obj55
00019F94 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00019F98 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00019F9C 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00019FA2                            		even
00019FA2                            		even
00019FA2                            
00019FA2                            ; ---------------------------------------------------------------------------
00019FA2                            ; Sprite mappings - Basaran enemy (MZ)
00019FA2                            ; ---------------------------------------------------------------------------
00019FA2                            Map_obj55:
00019FA2                            	include "_maps\obj55.asm"
00019FA2                            ; ---------------------------------------------------------------------------
00019FA2                            ; Sprite mappings - Basaran enemy (MZ)
00019FA2                            ; ---------------------------------------------------------------------------
00019FA2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00019FA6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00019FAA 01                         byte_10246:	dc.b 1
00019FAB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00019FB0 03                         byte_1024C:	dc.b 3
00019FB1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00019FB6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00019FBB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00019FC0 04                         byte_1025C:	dc.b 4
00019FC1 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00019FC6 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00019FCB 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00019FD0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00019FD5 04                         byte_10271:	dc.b 4
00019FD6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00019FDB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00019FE0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00019FE5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00019FEA                            		even
00019FEA                            		even
00019FEA                            
00019FEA                            ; ===========================================================================
00019FEA                            ; ---------------------------------------------------------------------------
00019FEA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00019FEA                            ; ---------------------------------------------------------------------------
00019FEA                            
00019FEA                            Obj56:					; XREF: Obj_Index
00019FEA 7000                       		moveq	#0,d0
00019FEC 1028 0024                  		move.b	routine(a0),d0
00019FF0 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00019FF4 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00019FF8                            ; ===========================================================================
00019FF8 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00019FFA 0000                       		dc.w Obj56_Action-Obj56_Index
00019FFC                            
00019FFC 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00019FFE 2020                       		dc.b  $20, $20
0001A000 1020                       		dc.b  $10, $20
0001A002 201A                       		dc.b  $20, $1A
0001A004 1027                       		dc.b  $10, $27
0001A006 1010                       		dc.b  $10, $10
0001A008 0820                       		dc.b	8, $20
0001A00A 4010                       		dc.b  $40, $10
0001A00C                            ; ===========================================================================
0001A00C                            
0001A00C                            Obj56_Main:				; XREF: Obj56_Index
0001A00C 5428 0024                  		addq.b	#2,routine(a0)
0001A010 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001A018 317C 4000 0002             		move.w	#$4000,2(a0)
0001A01E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001A024 6600                       		bne.s	loc_102C8
0001A026 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001A02C                            
0001A02C                            loc_102C8:
0001A02C 117C 0004 0001             		move.b	#4,1(a0)
0001A032 317C 0180 0018             		move.w	#$180,priority(a0)
0001A038 7000                       		moveq	#0,d0
0001A03A 1028 0028                  		move.b	subtype(a0),d0
0001A03E E648                       		lsr.w	#3,d0
0001A040 0240 000E                  		andi.w	#$E,d0
0001A044 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001A048 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001A04C 1152 0016                  		move.b	(a2),$16(a0)
0001A050 E248                       		lsr.w	#1,d0
0001A052 1140 001A                  		move.b	d0,mapping_frame(a0)
0001A056 3168 0008 0034             		move.w	8(a0),$34(a0)
0001A05C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A062 7000                       		moveq	#0,d0
0001A064 1012                       		move.b	(a2),d0
0001A066 D040                       		add.w	d0,d0
0001A068 3140 003A                  		move.w	d0,$3A(a0)
0001A06C 7000                       		moveq	#0,d0
0001A06E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001A074 6700                       		beq.s	loc_10332
0001A076 1028 0028                  		move.b	subtype(a0),d0	; SYZ/SLZ specific code
0001A07A 0240 000F                  		andi.w	#$F,d0
0001A07E 5140                       		subq.w	#8,d0
0001A080 6500                       		bcs.s	loc_10332
0001A082 E548                       		lsl.w	#2,d0
0001A084 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001A088 45F2 0000                  		lea	(a2,d0.w),a2
0001A08C 4A52                       		tst.w	(a2)
0001A08E 6A00                       		bpl.s	loc_10332
0001A090 0868 0000 0022             		bchg	#0,status(a0)
0001A096                            
0001A096                            loc_10332:
0001A096 1028 0028                  		move.b	subtype(a0),d0
0001A09A 6A00                       		bpl.s	Obj56_Action
0001A09C 0200 000F                  		andi.b	#$F,d0
0001A0A0 1140 003C                  		move.b	d0,$3C(a0)
0001A0A4 117C 0005 0028             		move.b	#5,subtype(a0)
0001A0AA 0C28 0007 001A             		cmpi.b	#7,mapping_frame(a0)
0001A0B0 6600                       		bne.s	Obj56_ChkGone
0001A0B2 117C 000C 0028             		move.b	#$C,subtype(a0)
0001A0B8 317C 0080 003A             		move.w	#$80,$3A(a0)
0001A0BE                            
0001A0BE                            Obj56_ChkGone:
0001A0BE                            ;		lea	(v_objstate).w,a2
0001A0BE 7000                       		moveq	#0,d0
0001A0C0 3028 0014                  		move.w	respawn_index(a0),d0
0001A0C4                            ;        move.w	respawn_index(a0),d0
0001A0C4 6700                       		beq.s	Obj56_Action
0001A0C6 3440                       	    movea.w	d0,a2
0001A0C8 0892 0007                  		bclr	#7,(a2)
0001A0CC 0812 0000                  		btst	#0,(a2)
0001A0D0 6700                       		beq.s	Obj56_Action
0001A0D2 5228 0028                  		addq.b	#1,subtype(a0)
0001A0D6 4268 003A                  		clr.w	$3A(a0)
0001A0DA                            
0001A0DA                            Obj56_Action:				; XREF: Obj56_Index
0001A0DA 3F28 0008                  		move.w	8(a0),-(sp)
0001A0DE 7000                       		moveq	#0,d0
0001A0E0 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A0E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001A0E8 D040                       		add.w	d0,d0
0001A0EA 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001A0EE 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001A0F2 381F                       		move.w	(sp)+,d4
0001A0F4 4A28 0001                  		tst.b	1(a0)
0001A0F8 6A00                       		bpl.s	Obj56_ChkDel
0001A0FA 7200                       		moveq	#0,d1
0001A0FC 1228 0023                  		move.b	width_pixels(a0),d1
0001A100 0641 000B                  		addi.w	#$B,d1
0001A104 7400                       		moveq	#0,d2
0001A106 1428 0016                  		move.b	$16(a0),d2
0001A10A 3602                       		move.w	d2,d3
0001A10C 5243                       		addq.w	#1,d3
0001A10E 4EBA F47A                  		jsr	SolidObject
0001A112                            
0001A112                            Obj56_ChkDel:
0001A112 3028 0034                  		move.w	$34(a0),d0
0001A116 4EFA EDC4                  		jmp		MarkObjGone2
0001A11A                            ; ===========================================================================
0001A11A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001A11E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001A122 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001A126 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001A12A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001A12E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001A132 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001A136                            ; ===========================================================================
0001A136                            
0001A136                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001A136 4E75                       		rts	
0001A138                            ; ===========================================================================
0001A138                            
0001A138                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001A138 323C 0040                  		move.w	#$40,d1
0001A13C 7000                       		moveq	#0,d0
0001A13E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001A142 6000                       		bra.s	Obj56_Move_LR
0001A144                            ; ===========================================================================
0001A144                            
0001A144                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001A144 323C 0080                  		move.w	#$80,d1
0001A148 7000                       		moveq	#0,d0
0001A14A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001A14E                            
0001A14E                            Obj56_Move_LR:
0001A14E 0828 0000 0022             		btst	#0,status(a0)
0001A154 6700                       		beq.s	loc_10416
0001A156 4440                       		neg.w	d0
0001A158 D041                       		add.w	d1,d0
0001A15A                            
0001A15A                            loc_10416:
0001A15A 3228 0034                  		move.w	$34(a0),d1
0001A15E 9240                       		sub.w	d0,d1
0001A160 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001A164 4E75                       		rts	
0001A166                            ; ===========================================================================
0001A166                            
0001A166                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001A166 323C 0040                  		move.w	#$40,d1
0001A16A 7000                       		moveq	#0,d0
0001A16C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001A170 6000                       		bra.s	Obj56_Move_UD
0001A172                            ; ===========================================================================
0001A172                            
0001A172                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001A172 323C 0080                  		move.w	#$80,d1
0001A176 7000                       		moveq	#0,d0
0001A178 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001A17C                            
0001A17C                            Obj56_Move_UD:
0001A17C 0828 0000 0022             		btst	#0,status(a0)
0001A182 6700                       		beq.s	loc_10444
0001A184 4440                       		neg.w	d0
0001A186 D041                       		add.w	d1,d0
0001A188                            
0001A188                            loc_10444:
0001A188 3228 0030                  		move.w	$30(a0),d1
0001A18C 9240                       		sub.w	d0,d1
0001A18E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001A192 4E75                       		rts	
0001A194                            ; ===========================================================================
0001A194                            
0001A194                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001A194 4A28 0038                  		tst.b	$38(a0)
0001A198 6600                       		bne.s	loc_104A4
0001A19A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001A1A0 6600                       		bne.s	loc_1047A	; if not, branch
0001A1A2 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001A1A8 6600                       		bne.s	loc_1047A
0001A1AA 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001A1AE 3038 D008                  		move.w	($FFFFD008).w,d0
0001A1B2 B068 0008                  		cmp.w	8(a0),d0
0001A1B6 6400                       		bcc.s	loc_1047A
0001A1B8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0001A1BE                            
0001A1BE                            loc_1047A:
0001A1BE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001A1C2 7000                       		moveq	#0,d0
0001A1C4 1028 003C                  		move.b	$3C(a0),d0
0001A1C8 0832 0000 0000             		btst	#0,(a2,d0.w)
0001A1CE 6700                       		beq.s	loc_104AE
0001A1D0 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001A1D6 6600                       		bne.s	loc_1049E	; if not, branch
0001A1D8 0C00 0003                  		cmpi.b	#3,d0
0001A1DC 6600                       		bne.s	loc_1049E
0001A1DE 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001A1E2                            
0001A1E2                            loc_1049E:
0001A1E2 117C 0001 0038             		move.b	#1,$38(a0)
0001A1E8                            
0001A1E8                            loc_104A4:
0001A1E8 4A68 003A                  		tst.w	$3A(a0)
0001A1EC 6700                       		beq.s	loc_104C8
0001A1EE 5568 003A                  		subq.w	#2,$3A(a0)
0001A1F2                            
0001A1F2                            loc_104AE:
0001A1F2 3028 003A                  		move.w	$3A(a0),d0
0001A1F6 0828 0000 0022             		btst	#0,status(a0)
0001A1FC 6700                       		beq.s	loc_104BC
0001A1FE 4440                       		neg.w	d0
0001A200                            
0001A200                            loc_104BC:
0001A200 3228 0030                  		move.w	$30(a0),d1
0001A204 D240                       		add.w	d0,d1
0001A206 3141 000C                  		move.w	d1,$C(a0)
0001A20A 4E75                       		rts	
0001A20C                            ; ===========================================================================
0001A20C                            
0001A20C                            loc_104C8:
0001A20C 5228 0028                  		addq.b	#1,subtype(a0)
0001A210 4228 0038                  		clr.b	$38(a0)
0001A214                            ;		lea	(v_objstate).w,a2
0001A214 7000                       		moveq	#0,d0
0001A216 3028 0014                  		move.w	respawn_index(a0),d0
0001A21A                            ;        move.w	respawn_index(a0),d0
0001A21A 3440                       	    movea.w	d0,a2
0001A21C 67D4                       		beq.s	loc_104AE
0001A21E 08D2 0000                  		bset	#0,(a2)
0001A222 60CE                       		bra.s	loc_104AE
0001A224                            ; ===========================================================================
0001A224                            
0001A224                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001A224 4A28 0038                  		tst.b	$38(a0)
0001A228 6600                       		bne.s	loc_10500
0001A22A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001A22E 7000                       		moveq	#0,d0
0001A230 1028 003C                  		move.b	$3C(a0),d0
0001A234 4A32 0000                  		tst.b	(a2,d0.w)
0001A238 6A00                       		bpl.s	loc_10512
0001A23A 117C 0001 0038             		move.b	#1,$38(a0)
0001A240                            
0001A240                            loc_10500:
0001A240 7000                       		moveq	#0,d0
0001A242 1028 0016                  		move.b	$16(a0),d0
0001A246 D040                       		add.w	d0,d0
0001A248 B068 003A                  		cmp.w	$3A(a0),d0
0001A24C 6700                       		beq.s	loc_1052C
0001A24E 5468 003A                  		addq.w	#2,$3A(a0)
0001A252                            
0001A252                            loc_10512:
0001A252 3028 003A                  		move.w	$3A(a0),d0
0001A256 0828 0000 0022             		btst	#0,status(a0)
0001A25C 6700                       		beq.s	loc_10520
0001A25E 4440                       		neg.w	d0
0001A260                            
0001A260                            loc_10520:
0001A260 3228 0030                  		move.w	$30(a0),d1
0001A264 D240                       		add.w	d0,d1
0001A266 3141 000C                  		move.w	d1,$C(a0)
0001A26A 4E75                       		rts	
0001A26C                            ; ===========================================================================
0001A26C                            
0001A26C                            loc_1052C:
0001A26C 5328 0028                  		subq.b	#1,subtype(a0)
0001A270 4228 0038                  		clr.b	$38(a0)
0001A274                            ;		lea	(v_objstate).w,a2
0001A274 7000                       		moveq	#0,d0
0001A276 3028 0014                  		move.w	respawn_index(a0),d0
0001A27A                            ;        move.w	respawn_index(a0),d0
0001A27A 3440                       	    movea.w	d0,a2		
0001A27C 67D4                       		beq.s	loc_10512
0001A27E 0892 0000                  		bclr	#0,(a2)
0001A282 60CE                       		bra.s	loc_10512
0001A284                            ; ===========================================================================
0001A284                            
0001A284                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0001A284 4A28 0038                  		tst.b	$38(a0)
0001A288 6600                       		bne.s	loc_1055E
0001A28A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001A28E 6700                       		beq.s	locret_10578
0001A290 117C 0001 0038             		move.b	#1,$38(a0)
0001A296 4268 003A                  		clr.w	$3A(a0)
0001A29A                            
0001A29A                            loc_1055E:
0001A29A 5268 0008                  		addq.w	#1,8(a0)
0001A29E 3168 0008 0034             		move.w	8(a0),$34(a0)
0001A2A4 5268 003A                  		addq.w	#1,$3A(a0)
0001A2A8 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001A2AE 6600                       		bne.s	locret_10578
0001A2B0 4228 0028                  		clr.b	subtype(a0)
0001A2B4                            
0001A2B4                            locret_10578:
0001A2B4 4E75                       		rts	
0001A2B6                            ; ===========================================================================
0001A2B6                            
0001A2B6                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001A2B6 4A28 0038                  		tst.b	$38(a0)
0001A2BA 6600                       		bne.s	loc_10598
0001A2BC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001A2C0 7000                       		moveq	#0,d0
0001A2C2 1028 003C                  		move.b	$3C(a0),d0
0001A2C6 0832 0000 0000             		btst	#0,(a2,d0.w)
0001A2CC 6700                       		beq.s	loc_105A2
0001A2CE 117C 0001 0038             		move.b	#1,$38(a0)
0001A2D4                            
0001A2D4                            loc_10598:
0001A2D4 4A68 003A                  		tst.w	$3A(a0)
0001A2D8 6700                       		beq.s	loc_105C0
0001A2DA 5568 003A                  		subq.w	#2,$3A(a0)
0001A2DE                            
0001A2DE                            loc_105A2:
0001A2DE 3028 003A                  		move.w	$3A(a0),d0
0001A2E2 0828 0000 0022             		btst	#0,status(a0)
0001A2E8 6700                       		beq.s	loc_105B4
0001A2EA 4440                       		neg.w	d0
0001A2EC 0640 0080                  		addi.w	#$80,d0
0001A2F0                            
0001A2F0                            loc_105B4:
0001A2F0 3228 0034                  		move.w	$34(a0),d1
0001A2F4 D240                       		add.w	d0,d1
0001A2F6 3141 0008                  		move.w	d1,8(a0)
0001A2FA 4E75                       		rts	
0001A2FC                            ; ===========================================================================
0001A2FC                            
0001A2FC                            loc_105C0:
0001A2FC 5228 0028                  		addq.b	#1,subtype(a0)
0001A300 4228 0038                  		clr.b	$38(a0)
0001A304                            ;		lea	(v_objstate).w,a2
0001A304 7000                       		moveq	#0,d0
0001A306 3028 0014                  		move.w	respawn_index(a0),d0
0001A30A                            ;        move.w	respawn_index(a0),d0
0001A30A 3440                       	    movea.w	d0,a2
0001A30C 67D0                       		beq.s	loc_105A2
0001A30E 08D2 0000                  		bset	#0,(a2)
0001A312 60CA                       		bra.s	loc_105A2
0001A314                            ; ===========================================================================
0001A314                            
0001A314                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001A314 4A28 0038                  		tst.b	$38(a0)
0001A318 6600                       		bne.s	loc_105F8
0001A31A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001A31E 7000                       		moveq	#0,d0
0001A320 1028 003C                  		move.b	$3C(a0),d0
0001A324 4A32 0000                  		tst.b	(a2,d0.w)
0001A328 6A00                       		bpl.s	loc_10606
0001A32A 117C 0001 0038             		move.b	#1,$38(a0)
0001A330                            
0001A330                            loc_105F8:
0001A330 303C 0080                  		move.w	#$80,d0
0001A334 B068 003A                  		cmp.w	$3A(a0),d0
0001A338 6700                       		beq.s	loc_10624
0001A33A 5468 003A                  		addq.w	#2,$3A(a0)
0001A33E                            
0001A33E                            loc_10606:
0001A33E 3028 003A                  		move.w	$3A(a0),d0
0001A342 0828 0000 0022             		btst	#0,status(a0)
0001A348 6700                       		beq.s	loc_10618
0001A34A 4440                       		neg.w	d0
0001A34C 0640 0080                  		addi.w	#$80,d0
0001A350                            
0001A350                            loc_10618:
0001A350 3228 0034                  		move.w	$34(a0),d1
0001A354 D240                       		add.w	d0,d1
0001A356 3141 0008                  		move.w	d1,8(a0)
0001A35A 4E75                       		rts	
0001A35C                            ; ===========================================================================
0001A35C                            
0001A35C                            loc_10624:
0001A35C 5328 0028                  		subq.b	#1,subtype(a0)
0001A360 4228 0038                  		clr.b	$38(a0)
0001A364                            ;		lea	(v_objstate).w,a2
0001A364 7000                       		moveq	#0,d0
0001A366 3028 0014                  		move.w	respawn_index(a0),d0
0001A36A                            ;        move.w	respawn_index(a0),d0
0001A36A 3440                       	    movea.w	d0,a2		
0001A36C 67D0                       		beq.s	loc_10606
0001A36E 0892 0000                  		bclr	#0,(a2)
0001A372 60CA                       		bra.s	loc_10606
0001A374                            ; ===========================================================================
0001A374                            
0001A374                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001A374 323C 0010                  		move.w	#$10,d1
0001A378 7000                       		moveq	#0,d0
0001A37A 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001A37E E248                       		lsr.w	#1,d0
0001A380 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001A384 6000                       		bra.s	Obj56_Move_Sqr
0001A386                            ; ===========================================================================
0001A386                            
0001A386                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001A386 323C 0030                  		move.w	#$30,d1
0001A38A 7000                       		moveq	#0,d0
0001A38C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001A390 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001A394 6000                       		bra.s	Obj56_Move_Sqr
0001A396                            ; ===========================================================================
0001A396                            
0001A396                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001A396 323C 0050                  		move.w	#$50,d1
0001A39A 7000                       		moveq	#0,d0
0001A39C 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001A3A0 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001A3A4 6000                       		bra.s	Obj56_Move_Sqr
0001A3A6                            ; ===========================================================================
0001A3A6                            
0001A3A6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001A3A6 323C 0070                  		move.w	#$70,d1
0001A3AA 7000                       		moveq	#0,d0
0001A3AC 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001A3B0 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001A3B4                            
0001A3B4                            Obj56_Move_Sqr:
0001A3B4 4A43                       		tst.w	d3
0001A3B6 6600                       		bne.s	loc_1068E
0001A3B8 5228 0022                  		addq.b	#1,status(a0)
0001A3BC 0228 0003 0022             		andi.b	#3,status(a0)
0001A3C2                            
0001A3C2                            loc_1068E:
0001A3C2 1428 0022                  		move.b	status(a0),d2
0001A3C6 0202 0003                  		andi.b	#3,d2
0001A3CA 6600                       		bne.s	loc_106AE
0001A3CC 9041                       		sub.w	d1,d0
0001A3CE D068 0034                  		add.w	$34(a0),d0
0001A3D2 3140 0008                  		move.w	d0,8(a0)
0001A3D6 4441                       		neg.w	d1
0001A3D8 D268 0030                  		add.w	$30(a0),d1
0001A3DC 3141 000C                  		move.w	d1,$C(a0)
0001A3E0 4E75                       		rts	
0001A3E2                            ; ===========================================================================
0001A3E2                            
0001A3E2                            loc_106AE:
0001A3E2 5302                       		subq.b	#1,d2
0001A3E4 6600                       		bne.s	loc_106CC
0001A3E6 5341                       		subq.w	#1,d1
0001A3E8 9041                       		sub.w	d1,d0
0001A3EA 4440                       		neg.w	d0
0001A3EC D068 0030                  		add.w	$30(a0),d0
0001A3F0 3140 000C                  		move.w	d0,$C(a0)
0001A3F4 5241                       		addq.w	#1,d1
0001A3F6 D268 0034                  		add.w	$34(a0),d1
0001A3FA 3141 0008                  		move.w	d1,8(a0)
0001A3FE 4E75                       		rts	
0001A400                            ; ===========================================================================
0001A400                            
0001A400                            loc_106CC:
0001A400 5302                       		subq.b	#1,d2
0001A402 6600                       		bne.s	loc_106EA
0001A404 5341                       		subq.w	#1,d1
0001A406 9041                       		sub.w	d1,d0
0001A408 4440                       		neg.w	d0
0001A40A D068 0034                  		add.w	$34(a0),d0
0001A40E 3140 0008                  		move.w	d0,8(a0)
0001A412 5241                       		addq.w	#1,d1
0001A414 D268 0030                  		add.w	$30(a0),d1
0001A418 3141 000C                  		move.w	d1,$C(a0)
0001A41C 4E75                       		rts	
0001A41E                            ; ===========================================================================
0001A41E                            
0001A41E                            loc_106EA:
0001A41E 9041                       		sub.w	d1,d0
0001A420 D068 0030                  		add.w	$30(a0),d0
0001A424 3140 000C                  		move.w	d0,$C(a0)
0001A428 4441                       		neg.w	d1
0001A42A D268 0034                  		add.w	$34(a0),d1
0001A42E 3141 0008                  		move.w	d1,8(a0)
0001A432 4E75                       		rts	
0001A434                            ; ===========================================================================
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            Map_obj56:
0001A434                            	include "_maps\obj56.asm"
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001A434                            ; ---------------------------------------------------------------------------
0001A434 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001A438 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001A43C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001A440 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001A444 01                         byte_10710:	dc.b 1
0001A445 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001A44A 04                         byte_10716:	dc.b 4
0001A44B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001A450 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001A455 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001A45A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001A45F 02                         byte_1072B:	dc.b 2
0001A460 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001A465 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001A46A 04                         byte_10736:	dc.b 4
0001A46B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001A470 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001A475 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001A47A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001A47F 03                         byte_1074B:	dc.b 3
0001A480 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001A485 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001A48A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001A48F 01                         byte_1075B:	dc.b 1
0001A490 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001A495 02                         byte_10761:	dc.b 2
0001A496 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001A49B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001A4A0 04                         byte_1076C:	dc.b 4
0001A4A1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001A4A6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001A4AB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001A4B0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001A4B6 00                         		even
0001A4B6 00                         		even
0001A4B6                            
0001A4B6                            ; ===========================================================================
0001A4B6                            ; ---------------------------------------------------------------------------
0001A4B6                            ; Object 57 - spiked balls (SYZ, LZ)
0001A4B6                            ; ---------------------------------------------------------------------------
0001A4B6                            
0001A4B6                            Obj57:					; XREF: Obj_Index
0001A4B6 7000                       		moveq	#0,d0
0001A4B8 1028 0024                  		move.b	$24(a0),d0
0001A4BC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001A4C0 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001A4C4                            ; ===========================================================================
0001A4C4 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001A4C6 0000                       		dc.w Obj57_Move-Obj57_Index
0001A4C8 0000                       		dc.w Obj57_Display-Obj57_Index
0001A4CA                            ; ===========================================================================
0001A4CA                            
0001A4CA                            Obj57_Main:				; XREF: Obj57_Index
0001A4CA 5428 0024                  		addq.b	#2,$24(a0)
0001A4CE 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001A4D6 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001A4DC 117C 0004 0001             		move.b	#4,1(a0)
0001A4E2 317C 0200 0018             		move.w	#$200,priority(a0)
0001A4E8 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001A4EE 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A4F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A4FA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001A500 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001A506 6600                       		bne.s	loc_107E8
0001A508 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001A50E 317C 0310 0002             		move.w	#$310,2(a0)
0001A514 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001A51C                            
0001A51C                            loc_107E8:
0001A51C 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A520 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A524 4881                       		ext.w	d1
0001A526 E741                       		asl.w	#3,d1		; multiply by 8
0001A528 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001A52C 1028 0022                  		move.b	$22(a0),d0
0001A530 E418                       		ror.b	#2,d0
0001A532 0200 00C0                  		andi.b	#-$40,d0
0001A536 1140 0026                  		move.b	d0,$26(a0)
0001A53A 45E8 0029                  		lea	$29(a0),a2
0001A53E 1228 0028                  		move.b	$28(a0),d1	; get object type
0001A542 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001A546 14FC 0000                  		move.b	#0,(a2)+
0001A54A 3601                       		move.w	d1,d3
0001A54C E94B                       		lsl.w	#4,d3
0001A54E 1143 003C                  		move.b	d3,$3C(a0)
0001A552 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001A554 6500                       		bcs.s	loc_10894
0001A556 0828 0003 0028             		btst	#3,$28(a0)
0001A55C 6700                       		beq.s	Obj57_MakeChain
0001A55E 5341                       		subq.w	#1,d1
0001A560 6500                       		bcs.s	loc_10894
0001A562                            
0001A562                            Obj57_MakeChain:
0001A562 6100 C318                  		bsr.w	SingleObjLoad
0001A566 6600                       		bne.s	loc_10894
0001A568 5228 0029                  		addq.b	#1,$29(a0)
0001A56C 3A09                       		move.w	a1,d5
0001A56E 0445 D000                  		subi.w	#-$3000,d5
0001A572 EC4D                       		lsr.w	#6,d5
0001A574 0245 007F                  		andi.w	#$7F,d5
0001A578 14C5                       		move.b	d5,(a2)+
0001A57A 137C 0004 0024             		move.b	#4,$24(a1)
0001A580 1290                       		move.b	0(a0),0(a1)
0001A582 2368 0004 0004             		move.l	4(a0),4(a1)
0001A588 3368 0002 0002             		move.w	2(a0),2(a1)
0001A58E 1368 0001 0001             		move.b	1(a0),1(a1)
0001A594 3368 0018 0018             		move.w	priority(a0),priority(a1)
0001A59A 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
0001A5A0 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001A5A6 0403 0010                  		subi.b	#$10,d3
0001A5AA 1343 003C                  		move.b	d3,$3C(a1)
0001A5AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001A5B4 6600                       		bne.s	loc_10890
0001A5B6 4A03                       		tst.b	d3
0001A5B8 6600                       		bne.s	loc_10890
0001A5BA 137C 0002 001A             		move.b	#2,$1A(a1)
0001A5C0                            
0001A5C0                            loc_10890:
0001A5C0 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001A5C4                            
0001A5C4                            loc_10894:
0001A5C4 3A08                       		move.w	a0,d5
0001A5C6 0445 D000                  		subi.w	#-$3000,d5
0001A5CA EC4D                       		lsr.w	#6,d5
0001A5CC 0245 007F                  		andi.w	#$7F,d5
0001A5D0 14C5                       		move.b	d5,(a2)+
0001A5D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001A5D8 6600                       		bne.s	Obj57_Move
0001A5DA 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001A5E0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001A5E6                            
0001A5E6                            Obj57_Move:				; XREF: Obj57_Index
0001A5E6 6100 0000                  		bsr.w	Obj57_MoveSub
0001A5EA 6000 0000                  		bra.w	Obj57_ChkDel
0001A5EE                            ; ===========================================================================
0001A5EE                            
0001A5EE                            Obj57_MoveSub:				; XREF: Obj57_Move
0001A5EE 3028 003E                  		move.w	$3E(a0),d0
0001A5F2 D168 0026                  		add.w	d0,$26(a0)
0001A5F6 1028 0026                  		move.b	$26(a0),d0
0001A5FA 4EB9 0000 8F30             		jsr	(CalcSine).l
0001A600 3428 0038                  		move.w	$38(a0),d2
0001A604 3628 003A                  		move.w	$3A(a0),d3
0001A608 45E8 0029                  		lea	$29(a0),a2
0001A60C 7C00                       		moveq	#0,d6
0001A60E 1C1A                       		move.b	(a2)+,d6
0001A610                            
0001A610                            Obj57_MoveLoop:
0001A610 7800                       		moveq	#0,d4
0001A612 181A                       		move.b	(a2)+,d4
0001A614 ED4C                       		lsl.w	#6,d4
0001A616 0684 00FF D000             		addi.l	#$FFD000,d4
0001A61C 2244                       		movea.l	d4,a1
0001A61E 7800                       		moveq	#0,d4
0001A620 1829 003C                  		move.b	$3C(a1),d4
0001A624 2A04                       		move.l	d4,d5
0001A626 C9C0                       		muls.w	d0,d4
0001A628 E084                       		asr.l	#8,d4
0001A62A CBC1                       		muls.w	d1,d5
0001A62C E085                       		asr.l	#8,d5
0001A62E D842                       		add.w	d2,d4
0001A630 DA43                       		add.w	d3,d5
0001A632 3344 000C                  		move.w	d4,$C(a1)
0001A636 3345 0008                  		move.w	d5,8(a1)
0001A63A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001A63E 4E75                       		rts	
0001A640                            ; ===========================================================================
0001A640                            
0001A640                            Obj57_ChkDel:				; XREF: Obj57_Move
0001A640 3028 003A                  		move.w	$3A(a0),d0
0001A644 0240 FF80                  		andi.w	#$FF80,d0
0001A648 3238 F700                  		move.w	($FFFFF700).w,d1
0001A64C 0441 0080                  		subi.w	#$80,d1
0001A650 0241 FF80                  		andi.w	#$FF80,d1
0001A654 9041                       		sub.w	d1,d0
0001A656 0C40 0280                  		cmpi.w	#$280,d0
0001A65A 6200 0000                  		bhi.w	Obj57_Delete
0001A65E 6000 B712                  		bra.w	DisplaySprite
0001A662                            ; ===========================================================================
0001A662                            
0001A662                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001A662 7400                       		moveq	#0,d2
0001A664 45E8 0029                  		lea	$29(a0),a2
0001A668 141A                       		move.b	(a2)+,d2
0001A66A                            
0001A66A                            Obj57_DelLoop:
0001A66A 7000                       		moveq	#0,d0
0001A66C 101A                       		move.b	(a2)+,d0
0001A66E ED48                       		lsl.w	#6,d0
0001A670 0680 00FF D000             		addi.l	#$FFD000,d0
0001A676 2240                       		movea.l	d0,a1
0001A678 6100 B6AE                  		bsr.w	DeleteObject2
0001A67C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001A680                            
0001A680 4E75                       		rts	
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            Obj57_Display:				; XREF: Obj57_Index
0001A682 6000 B6EE                  		bra.w	DisplaySprite
0001A686                            ; ===========================================================================
0001A686                            ; ---------------------------------------------------------------------------
0001A686                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A686                            ; ---------------------------------------------------------------------------
0001A686                            Map_obj57:
0001A686                            	include "_maps\obj57syz.asm"
0001A686                            ; ---------------------------------------------------------------------------
0001A686                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A686                            ; ---------------------------------------------------------------------------
0001A686 0000                       		dc.w byte_10958-Map_obj57
0001A688 01                         byte_10958:	dc.b 1
0001A689 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A68E                            		even
0001A68E                            		even
0001A68E                            
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E                            Map_obj57a:
0001A68E                            	include "_maps\obj57lz.asm"
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E 0000                       		dc.w byte_10964-Map_obj57a
0001A690 0000                       		dc.w byte_1096A-Map_obj57a
0001A692 0000                       		dc.w byte_10970-Map_obj57a
0001A694 01                         byte_10964:	dc.b 1
0001A695 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A69A 01                         byte_1096A:	dc.b 1
0001A69B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001A6A0 01                         byte_10970:	dc.b 1
0001A6A1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001A6A6                            		even
0001A6A6                            		even
0001A6A6                            
0001A6A6                            ; ===========================================================================
0001A6A6                            ; ---------------------------------------------------------------------------
0001A6A6                            ; Object 58 - giant spiked balls (SYZ)
0001A6A6                            ; ---------------------------------------------------------------------------
0001A6A6                            
0001A6A6                            Obj58:					; XREF: Obj_Index
0001A6A6 7000                       		moveq	#0,d0
0001A6A8 1028 0024                  		move.b	routine(a0),d0
0001A6AC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001A6B0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001A6B4                            ; ===========================================================================
0001A6B4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001A6B6 0000                       		dc.w Obj58_Move-Obj58_Index
0001A6B8                            ; ===========================================================================
0001A6B8                            
0001A6B8                            Obj58_Main:				; XREF: Obj58_Index
0001A6B8 5428 0024                  		addq.b	#2,routine(a0)
0001A6BC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001A6C4 317C 0396 0002             		move.w	#$396,2(a0)
0001A6CA 117C 0004 0001             		move.b	#4,1(a0)
0001A6D0 317C 0200 0018             		move.w	#$200,priority(a0)
0001A6D6 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001A6DC 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A6E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A6E8 117C 0086 0020             		move.b	#$86,collision_flags(a0)
0001A6EE 1228 0028                  		move.b	subtype(a0),d1	; get object type
0001A6F2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A6F6 4881                       		ext.w	d1
0001A6F8 E741                       		asl.w	#3,d1		; multiply by 8
0001A6FA 3141 003E                  		move.w	d1,parent(a0)	; set object speed
0001A6FE 1028 0022                  		move.b	status(a0),d0
0001A702 E418                       		ror.b	#2,d0
0001A704 0200 00C0                  		andi.b	#$C0,d0
0001A708 1140 0026                  		move.b	d0,$26(a0)
0001A70C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001A712                            
0001A712                            Obj58_Move:				; XREF: Obj58_Index
0001A712 7000                       		moveq	#0,d0
0001A714 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A718 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001A71C D040                       		add.w	d0,d0
0001A71E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001A722 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001A726 3028 003A                  		move.w	$3A(a0),d0
0001A72A 4EFA E7B0                  		jmp MarkObjGone2
0001A72E                            ; ===========================================================================
0001A72E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001A730 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001A732 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001A734 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001A736 4E75                       		rts	
0001A738                            ; ===========================================================================
0001A738                            
0001A738                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001A738 323C 0060                  		move.w	#$60,d1
0001A73C 7000                       		moveq	#0,d0
0001A73E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A742 0828 0000 0022             		btst	#0,status(a0)
0001A748 6700                       		beq.s	loc_10A38
0001A74A 4440                       		neg.w	d0
0001A74C D041                       		add.w	d1,d0
0001A74E                            
0001A74E                            loc_10A38:
0001A74E 3228 003A                  		move.w	$3A(a0),d1
0001A752 9240                       		sub.w	d0,d1
0001A754 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001A758 4E75                       		rts	
0001A75A                            ; ===========================================================================
0001A75A                            
0001A75A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001A75A 323C 0060                  		move.w	#$60,d1
0001A75E 7000                       		moveq	#0,d0
0001A760 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A764 0828 0000 0022             		btst	#0,status(a0)
0001A76A 6700                       		beq.s	loc_10A5C
0001A76C 4440                       		neg.w	d0
0001A76E 0640 0080                  		addi.w	#$80,d0
0001A772                            
0001A772                            loc_10A5C:
0001A772 3228 0038                  		move.w	$38(a0),d1
0001A776 9240                       		sub.w	d0,d1
0001A778 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001A77C 4E75                       		rts	
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001A77E 3028 003E                  		move.w	parent(a0),d0
0001A782 D168 0026                  		add.w	d0,$26(a0)
0001A786 1028 0026                  		move.b	$26(a0),d0
0001A78A 4EB9 0000 8F30             		jsr	(CalcSine).l
0001A790 3428 0038                  		move.w	$38(a0),d2
0001A794 3628 003A                  		move.w	$3A(a0),d3
0001A798 7800                       		moveq	#0,d4
0001A79A 1828 003C                  		move.b	$3C(a0),d4
0001A79E 2A04                       		move.l	d4,d5
0001A7A0 C9C0                       		muls.w	d0,d4
0001A7A2 E084                       		asr.l	#8,d4
0001A7A4 CBC1                       		muls.w	d1,d5
0001A7A6 E085                       		asr.l	#8,d5
0001A7A8 D842                       		add.w	d2,d4
0001A7AA DA43                       		add.w	d3,d5
0001A7AC 3144 000C                  		move.w	d4,$C(a0)
0001A7B0 3145 0008                  		move.w	d5,8(a0)
0001A7B4 4E75                       		rts	
0001A7B6                            ; ===========================================================================
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6                            ; Sprite mappings - SBZ	spiked ball on a chain
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6                            Map_obj15b:
0001A7B6                            	include "_maps\obj15sbz.asm"
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001A7B6                            ; ---------------------------------------------------------------------------
0001A7B6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001A7BA 0000                       		dc.w byte_10AC6-Map_obj15b
0001A7BC 05                         byte_10AA6:	dc.b 5
0001A7BD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001A7C2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001A7C7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001A7CC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001A7D1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001A7D6 01                         byte_10AC0:	dc.b 1
0001A7D7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001A7DC 02                         byte_10AC6:	dc.b 2
0001A7DD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001A7E2 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001A7E8 00                         		even
0001A7E8 00                         		even
0001A7E8                            
0001A7E8                            ; ===========================================================================
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001A7E8                            ; ---------------------------------------------------------------------------
0001A7E8                            
0001A7E8                            Obj59:					; XREF: Obj_Index
0001A7E8 7000                       		moveq	#0,d0
0001A7EA 1028 0024                  		move.b	routine(a0),d0
0001A7EE 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001A7F2 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001A7F6 3028 0032                  		move.w	$32(a0),d0
0001A7FA 4EFA E6E0                  		jmp		MarkObjGone2
0001A7FE                            ; ===========================================================================
0001A7FE 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001A800 0000                       		dc.w Obj59_Platform-Obj59_Index
0001A802 0000                       		dc.w Obj59_Action-Obj59_Index
0001A804 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001A806                            
0001A806 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001A808                            
0001A808 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001A80A 2001                       		dc.b $20, 1
0001A80C 3401                       		dc.b $34, 1
0001A80E 1003                       		dc.b $10, 3
0001A810 2003                       		dc.b $20, 3
0001A812 3403                       		dc.b $34, 3
0001A814 1401                       		dc.b $14, 1
0001A816 2401                       		dc.b $24, 1
0001A818 2C01                       		dc.b $2C, 1
0001A81A 1403                       		dc.b $14, 3
0001A81C 2403                       		dc.b $24, 3
0001A81E 2C03                       		dc.b $2C, 3
0001A820 2005                       		dc.b $20, 5
0001A822 2007                       		dc.b $20, 7
0001A824 3009                       		dc.b $30, 9
0001A826                            ; ===========================================================================
0001A826                            
0001A826                            Obj59_Main:				; XREF: Obj59_Index
0001A826 5428 0024                  		addq.b	#2,routine(a0)
0001A82A 7000                       		moveq	#0,d0
0001A82C 1028 0028                  		move.b	subtype(a0),d0
0001A830 6A00                       		bpl.s	Obj59_Main2
0001A832 5828 0024                  		addq.b	#4,routine(a0)
0001A836 0240 007F                  		andi.w	#$7F,d0
0001A83A C0FC 0006                  		mulu.w	#6,d0
0001A83E 3140 003C                  		move.w	d0,$3C(a0)
0001A842 3140 003E                  		move.w	d0,parent(a0)
0001A846 588F                       		addq.l	#4,sp
0001A848 4E75                       		rts	
0001A84A                            ; ===========================================================================
0001A84A                            
0001A84A                            Obj59_Main2:
0001A84A E648                       		lsr.w	#3,d0
0001A84C 0240 001E                  		andi.w	#$1E,d0
0001A850 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001A854 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001A858 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001A85C 7000                       		moveq	#0,d0
0001A85E 1028 0028                  		move.b	subtype(a0),d0
0001A862 D040                       		add.w	d0,d0
0001A864 0240 001E                  		andi.w	#$1E,d0
0001A868 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001A86C 101A                       		move.b	(a2)+,d0
0001A86E E548                       		lsl.w	#2,d0
0001A870 3140 003C                  		move.w	d0,$3C(a0)
0001A874 115A 0028                  		move.b	(a2)+,subtype(a0)
0001A878 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001A880 317C 4000 0002             		move.w	#$4000,2(a0)
0001A886 117C 0004 0001             		move.b	#4,1(a0)
0001A88C 317C 0200 0018             		move.w	#$200,priority(a0)
0001A892 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A898 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A89E                            
0001A89E                            Obj59_Platform:				; XREF: Obj59_Index
0001A89E 7200                       		moveq	#0,d1
0001A8A0 1228 0023                  		move.b	width_pixels(a0),d1
0001A8A4 4EB9 0000 F1D0             		jsr	(PlatformObject).l
0001A8AA 6000 0000                  		bra.w	Obj59_Types
0001A8AE                            ; ===========================================================================
0001A8AE                            
0001A8AE                            Obj59_Action:				; XREF: Obj59_Index
0001A8AE 7200                       		moveq	#0,d1
0001A8B0 1228 0023                  		move.b	width_pixels(a0),d1
0001A8B4 4EB9 0000 F310             		jsr	(ExitPlatform).l
0001A8BA 3F28 0008                  		move.w	8(a0),-(sp)
0001A8BE 4EB9 0000 0000             		jsr	Obj59_Types
0001A8C4 341F                       		move.w	(sp)+,d2
0001A8C6 4A10                       		tst.b	0(a0)
0001A8C8 6700                       		beq.s	locret_10BD4
0001A8CA 4EF9 0000 F576             		jmp	(MvSonicOnPtfm2).l
0001A8D0                            ; ===========================================================================
0001A8D0                            
0001A8D0                            locret_10BD4:
0001A8D0 4E75                       		rts	
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            Obj59_Types:
0001A8D2 7000                       		moveq	#0,d0
0001A8D4 1028 0028                  		move.b	subtype(a0),d0
0001A8D8 0240 000F                  		andi.w	#$F,d0
0001A8DC D040                       		add.w	d0,d0
0001A8DE 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001A8E2 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001A8E6                            ; ===========================================================================
0001A8E6 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A8EA 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A8EE 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A8F2 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A8F6 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001A8FA                            ; ===========================================================================
0001A8FA                            
0001A8FA                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001A8FA 4E75                       		rts	
0001A8FC                            ; ===========================================================================
0001A8FC                            
0001A8FC                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001A8FC 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; check	if Sonic is standing on	the object
0001A902 6600                       		bne.s	locret_10C0C
0001A904 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001A908                            
0001A908                            locret_10C0C:
0001A908 4E75                       		rts	
0001A90A                            ; ===========================================================================
0001A90A                            
0001A90A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001A90A 4EB9 0000 0000             		jsr	Obj59_Move
0001A910 3028 0034                  		move.w	$34(a0),d0
0001A914 4440                       		neg.w	d0
0001A916 D068 0030                  		add.w	$30(a0),d0
0001A91A 3140 000C                  		move.w	d0,$C(a0)
0001A91E 4E75                       		rts	
0001A920                            ; ===========================================================================
0001A920                            
0001A920                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001A920 4EB9 0000 0000             		jsr	Obj59_Move
0001A926 3028 0034                  		move.w	$34(a0),d0
0001A92A D068 0030                  		add.w	$30(a0),d0
0001A92E 3140 000C                  		move.w	d0,$C(a0)
0001A932 4E75                       		rts	
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001A934 4EB9 0000 0000             		jsr	Obj59_Move
0001A93A 3028 0034                  		move.w	$34(a0),d0
0001A93E E240                       		asr.w	#1,d0
0001A940 4440                       		neg.w	d0
0001A942 D068 0030                  		add.w	$30(a0),d0
0001A946 3140 000C                  		move.w	d0,$C(a0)
0001A94A 3028 0034                  		move.w	$34(a0),d0
0001A94E D068 0032                  		add.w	$32(a0),d0
0001A952 3140 0008                  		move.w	d0,8(a0)
0001A956 4E75                       		rts	
0001A958                            ; ===========================================================================
0001A958                            
0001A958                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001A958 4EB9 0000 0000             		jsr	Obj59_Move
0001A95E 3028 0034                  		move.w	$34(a0),d0
0001A962 E240                       		asr.w	#1,d0
0001A964 D068 0030                  		add.w	$30(a0),d0
0001A968 3140 000C                  		move.w	d0,$C(a0)
0001A96C 3028 0034                  		move.w	$34(a0),d0
0001A970 4440                       		neg.w	d0
0001A972 D068 0032                  		add.w	$32(a0),d0
0001A976 3140 0008                  		move.w	d0,8(a0)
0001A97A 4E75                       		rts	
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001A97C 4EB9 0000 0000             		jsr	Obj59_Move
0001A982 3028 0034                  		move.w	$34(a0),d0
0001A986 4440                       		neg.w	d0
0001A988 D068 0030                  		add.w	$30(a0),d0
0001A98C 3140 000C                  		move.w	d0,$C(a0)
0001A990 4A28 0028                  		tst.b	subtype(a0)
0001A994 6700 0000                  		beq.w	loc_10C94
0001A998 4E75                       		rts	
0001A99A                            ; ===========================================================================
0001A99A                            
0001A99A                            loc_10C94:
0001A99A 0828 0003 0022             		btst	#3,status(a0)
0001A9A0 6700                       		beq.s	Obj59_Delete
0001A9A2 08E9 0001 0022             		bset	#1,status(a1)
0001A9A8 08A9 0003 0022             		bclr	#3,status(a1)
0001A9AE 137C 0002 0024             		move.b	#2,routine(a1)
0001A9B4                            
0001A9B4                            
0001A9B4                            Obj59_Delete:
0001A9B4 6000 B370                  		bra.w	DeleteObject
0001A9B8                            
0001A9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9B8                            
0001A9B8                            
0001A9B8                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001A9B8 3028 0038                  		move.w	$38(a0),d0
0001A9BC 4A28 003A                  		tst.b	$3A(a0)
0001A9C0 6600                       		bne.s	loc_10CC8
0001A9C2 0C40 0800                  		cmpi.w	#$800,d0
0001A9C6 6400                       		bcc.s	loc_10CD0
0001A9C8 0640 0010                  		addi.w	#$10,d0
0001A9CC 6000                       		bra.s	loc_10CD0
0001A9CE                            ; ===========================================================================
0001A9CE                            
0001A9CE                            loc_10CC8:
0001A9CE 4A40                       		tst.w	d0
0001A9D0 6700                       		beq.s	loc_10CD0
0001A9D2 0440 0010                  		subi.w	#$10,d0
0001A9D6                            
0001A9D6                            loc_10CD0:
0001A9D6 3140 0038                  		move.w	d0,$38(a0)
0001A9DA 48C0                       		ext.l	d0
0001A9DC E180                       		asl.l	#8,d0
0001A9DE D0A8 0034                  		add.l	$34(a0),d0
0001A9E2 2140 0034                  		move.l	d0,$34(a0)
0001A9E6 4840                       		swap	d0
0001A9E8 3428 003C                  		move.w	$3C(a0),d2
0001A9EC B042                       		cmp.w	d2,d0
0001A9EE 6300                       		bls.s	loc_10CF0
0001A9F0 117C 0001 003A             		move.b	#1,$3A(a0)
0001A9F6                            
0001A9F6                            loc_10CF0:
0001A9F6 D442                       		add.w	d2,d2
0001A9F8 B042                       		cmp.w	d2,d0
0001A9FA 6600                       		bne.s	locret_10CFA
0001A9FC 4228 0028                  		clr.b	subtype(a0)
0001AA00                            
0001AA00                            locret_10CFA:
0001AA00 4E75                       		rts	
0001AA02                            ; End of function Obj59_Move
0001AA02                            
0001AA02                            ; ===========================================================================
0001AA02                            
0001AA02                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001AA02 5368 003C                  		subq.w	#1,$3C(a0)
0001AA06 6600                       		bne.s	Obj59_ChkDel
0001AA08 3168 003E 003C             		move.w	parent(a0),$3C(a0)
0001AA0E 4EBA BE6C                  		jsr	SingleObjLoad
0001AA12 6600                       		bne.s	Obj59_ChkDel
0001AA14 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001AA18 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA1E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA24 137C 000E 0028             		move.b	#$E,subtype(a1)
0001AA2A                            
0001AA2A                            Obj59_ChkDel:
0001AA2A 588F                       		addq.l	#4,sp
0001AA2C 4EFA E7B8                  		jmp		MarkObjGone3
0001AA30                            ; ===========================================================================
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            Map_obj59:
0001AA30                            	include "_maps\obj59.asm"
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30 0000                       		dc.w byte_10D4A-Map_obj59
0001AA32 03                         byte_10D4A:	dc.b 3
0001AA33 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001AA38 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001AA3D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001AA42                            		even
0001AA42                            		even
0001AA42                            
0001AA42                            ; ===========================================================================
0001AA42                            ; ---------------------------------------------------------------------------
0001AA42                            ; Object 5A - platforms	moving in circles (SLZ)
0001AA42                            ; ---------------------------------------------------------------------------
0001AA42                            
0001AA42                            Obj5A:					; XREF: Obj_Index
0001AA42 7000                       		moveq	#0,d0
0001AA44 1028 0024                  		move.b	routine(a0),d0
0001AA48 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001AA4C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001AA50 3028 0032                  		move.w	$32(a0),d0
0001AA54 4EFA E486                  		jmp		MarkObjGone2
0001AA58                            ; ===========================================================================
0001AA58 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001AA5A 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001AA5C 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001AA5E                            ; ===========================================================================
0001AA5E                            
0001AA5E                            Obj5A_Main:				; XREF: Obj5A_Index
0001AA5E 5428 0024                  		addq.b	#2,routine(a0)
0001AA62 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001AA6A 317C 4000 0002             		move.w	#$4000,2(a0)
0001AA70 117C 0004 0001             		move.b	#4,1(a0)
0001AA76 317C 0200 0018             		move.w	#$200,priority(a0)
0001AA7C 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001AA82 3168 0008 0032             		move.w	8(a0),$32(a0)
0001AA88 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AA8E                            
0001AA8E                            Obj5A_Platform:				; XREF: Obj5A_Index
0001AA8E 7200                       		moveq	#0,d1
0001AA90 1228 0023                  		move.b	width_pixels(a0),d1
0001AA94 4EB9 0000 F1D0             		jsr	(PlatformObject).l
0001AA9A 6000 0000                  		bra.w	Obj5A_Types
0001AA9E                            ; ===========================================================================
0001AA9E                            
0001AA9E                            Obj5A_Action:				; XREF: Obj5A_Index
0001AA9E 7200                       		moveq	#0,d1
0001AAA0 1228 0023                  		move.b	width_pixels(a0),d1
0001AAA4 4EB9 0000 F310             		jsr	(ExitPlatform).l
0001AAAA 3F28 0008                  		move.w	8(a0),-(sp)
0001AAAE 4EB9 0000 0000             		jsr	Obj5A_Types
0001AAB4 341F                       		move.w	(sp)+,d2
0001AAB6 4EF9 0000 F576             		jmp	(MvSonicOnPtfm2).l
0001AABC                            ; ===========================================================================
0001AABC                            
0001AABC                            Obj5A_Types:
0001AABC 7000                       		moveq	#0,d0
0001AABE 1028 0028                  		move.b	subtype(a0),d0
0001AAC2 0240 000C                  		andi.w	#$C,d0
0001AAC6 E248                       		lsr.w	#1,d0
0001AAC8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001AACC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001AAD0                            ; ===========================================================================
0001AAD0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001AAD2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001AAD4                            ; ===========================================================================
0001AAD4                            
0001AAD4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001AAD4 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001AAD8 0401 0050                  		subi.b	#$50,d1
0001AADC 4881                       		ext.w	d1
0001AADE 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001AAE2 0402 0050                  		subi.b	#$50,d2
0001AAE6 4882                       		ext.w	d2
0001AAE8 0828 0000 0028             		btst	#0,subtype(a0)
0001AAEE 6700                       		beq.s	loc_10E24
0001AAF0 4441                       		neg.w	d1
0001AAF2 4442                       		neg.w	d2
0001AAF4                            
0001AAF4                            loc_10E24:
0001AAF4 0828 0001 0028             		btst	#1,subtype(a0)
0001AAFA 6700                       		beq.s	loc_10E30
0001AAFC 4441                       		neg.w	d1
0001AAFE C342                       		exg	d1,d2
0001AB00                            
0001AB00                            loc_10E30:
0001AB00 D268 0032                  		add.w	$32(a0),d1
0001AB04 3141 0008                  		move.w	d1,8(a0)
0001AB08 D468 0030                  		add.w	$30(a0),d2
0001AB0C 3142 000C                  		move.w	d2,$C(a0)
0001AB10 4E75                       		rts	
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001AB12 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001AB16 0401 0050                  		subi.b	#$50,d1
0001AB1A 4881                       		ext.w	d1
0001AB1C 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001AB20 0402 0050                  		subi.b	#$50,d2
0001AB24 4882                       		ext.w	d2
0001AB26 0828 0000 0028             		btst	#0,subtype(a0)
0001AB2C 6700                       		beq.s	loc_10E62
0001AB2E 4441                       		neg.w	d1
0001AB30 4442                       		neg.w	d2
0001AB32                            
0001AB32                            loc_10E62:
0001AB32 0828 0001 0028             		btst	#1,subtype(a0)
0001AB38 6700                       		beq.s	loc_10E6E
0001AB3A 4441                       		neg.w	d1
0001AB3C C342                       		exg	d1,d2
0001AB3E                            
0001AB3E                            loc_10E6E:
0001AB3E 4441                       		neg.w	d1
0001AB40 D268 0032                  		add.w	$32(a0),d1
0001AB44 3141 0008                  		move.w	d1,8(a0)
0001AB48 D468 0030                  		add.w	$30(a0),d2
0001AB4C 3142 000C                  		move.w	d2,$C(a0)
0001AB50 4E75                       		rts	
0001AB52                            ; ===========================================================================
0001AB52                            ; ---------------------------------------------------------------------------
0001AB52                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001AB52                            ; ---------------------------------------------------------------------------
0001AB52                            Map_obj5A:
0001AB52                            	include "_maps\obj5A.asm"
0001AB52                            ; ---------------------------------------------------------------------------
0001AB52                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001AB52                            ; ---------------------------------------------------------------------------
0001AB52 0000                       		dc.w byte_10E84-Map_obj5A
0001AB54 02                         byte_10E84:	dc.b 2
0001AB55 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001AB5A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001AB60 00                         		even
0001AB60 00                         		even
0001AB60                            
0001AB60                            ; ===========================================================================
0001AB60                            ; ---------------------------------------------------------------------------
0001AB60                            ; Object 5B - blocks that form a staircase (SLZ)
0001AB60                            ; ---------------------------------------------------------------------------
0001AB60                            
0001AB60                            Obj5B:					; XREF: Obj_Index
0001AB60 7000                       		moveq	#0,d0
0001AB62 1028 0024                  		move.b	routine(a0),d0
0001AB66 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001AB6A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001AB6E 3028 0030                  		move.w	$30(a0),d0
0001AB72 4EFA E368                  		jmp		MarkObjGone2
0001AB76                            ; ===========================================================================
0001AB76 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001AB78 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001AB7A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001AB7C                            ; ===========================================================================
0001AB7C                            
0001AB7C                            Obj5B_Main:				; XREF: Obj5B_Index
0001AB7C 5428 0024                  		addq.b	#2,routine(a0)
0001AB80 7638                       		moveq	#$38,d3
0001AB82 7801                       		moveq	#1,d4
0001AB84 0828 0000 0022             		btst	#0,status(a0)
0001AB8A 6700                       		beq.s	loc_10EDA
0001AB8C 763B                       		moveq	#$3B,d3
0001AB8E 78FF                       		moveq	#-1,d4
0001AB90                            
0001AB90                            loc_10EDA:
0001AB90 3428 0008                  		move.w	8(a0),d2
0001AB94 2248                       		movea.l	a0,a1
0001AB96 7203                       		moveq	#3,d1
0001AB98 6000                       		bra.s	Obj5B_MakeBlocks
0001AB9A                            ; ===========================================================================
0001AB9A                            
0001AB9A                            Obj5B_Loop:
0001AB9A 4EBA BCF6                  		jsr	SingleObjLoad2
0001AB9E 6600 0000                  		bne.w	Obj5B_Move
0001ABA2 137C 0004 0024             		move.b	#4,routine(a1)
0001ABA8                            
0001ABA8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001ABA8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001ABAC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001ABB4 337C 4000 0002             		move.w	#$4000,2(a1)
0001ABBA 137C 0004 0001             		move.b	#4,1(a1)
0001ABC0 337C 0180 0018             		move.w	#$180,priority(a1)
0001ABC6 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001ABCC 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001ABD2 3342 0008                  		move.w	d2,8(a1)
0001ABD6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ABDC 3368 0008 0030             		move.w	8(a0),$30(a1)
0001ABE2 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001ABE8 0642 0020                  		addi.w	#$20,d2
0001ABEC 1343 0037                  		move.b	d3,$37(a1)
0001ABF0 2348 003C                  		move.l	a0,$3C(a1)
0001ABF4 D604                       		add.b	d4,d3
0001ABF6 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001ABFA                            
0001ABFA                            Obj5B_Move:				; XREF: Obj5B_Index
0001ABFA 7000                       		moveq	#0,d0
0001ABFC 1028 0028                  		move.b	subtype(a0),d0
0001AC00 0240 0007                  		andi.w	#7,d0
0001AC04 D040                       		add.w	d0,d0
0001AC06 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001AC0A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001AC0E                            
0001AC0E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001AC0E 2468 003C                  		movea.l	$3C(a0),a2
0001AC12 7000                       		moveq	#0,d0
0001AC14 1028 0037                  		move.b	$37(a0),d0
0001AC18 1032 0000                  		move.b	(a2,d0.w),d0
0001AC1C D068 0032                  		add.w	$32(a0),d0
0001AC20 3140 000C                  		move.w	d0,$C(a0)
0001AC24 7200                       		moveq	#0,d1
0001AC26 1228 0023                  		move.b	width_pixels(a0),d1
0001AC2A 0641 000B                  		addi.w	#$B,d1
0001AC2E 343C 0010                  		move.w	#$10,d2
0001AC32 363C 0011                  		move.w	#$11,d3
0001AC36 3828 0008                  		move.w	8(a0),d4
0001AC3A 4EBA E94E                  		jsr	SolidObject
0001AC3E 4A04                       		tst.b	d4
0001AC40 6A00                       		bpl.s	loc_10F92
0001AC42 1544 0036                  		move.b	d4,$36(a2)
0001AC46                            
0001AC46                            loc_10F92:
0001AC46 0828 0003 0022             		btst	#3,status(a0)
0001AC4C 6700                       		beq.s	locret_10FA0
0001AC4E 157C 0001 0036             		move.b	#1,$36(a2)
0001AC54                            
0001AC54                            locret_10FA0:
0001AC54 4E75                       		rts	
0001AC56                            ; ===========================================================================
0001AC56 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001AC58 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001AC5A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001AC5C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001AC5E                            ; ===========================================================================
0001AC5E                            
0001AC5E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001AC5E 4A68 0034                  		tst.w	$34(a0)
0001AC62 6600                       		bne.s	loc_10FC0
0001AC64 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001AC6A 6600                       		bne.s	locret_10FBE
0001AC6C 317C 001E 0034             		move.w	#$1E,$34(a0)
0001AC72                            
0001AC72                            locret_10FBE:
0001AC72 4E75                       		rts	
0001AC74                            ; ===========================================================================
0001AC74                            
0001AC74                            loc_10FC0:
0001AC74 5368 0034                  		subq.w	#1,$34(a0)
0001AC78 66F8                       		bne.s	locret_10FBE
0001AC7A 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001AC7E 4E75                       		rts	
0001AC80                            ; ===========================================================================
0001AC80                            
0001AC80                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001AC80 4A68 0034                  		tst.w	$34(a0)
0001AC84 6600                       		bne.s	loc_10FE0
0001AC86 4A28 0036                  		tst.b	$36(a0)
0001AC8A 6A00                       		bpl.s	locret_10FDE
0001AC8C 317C 003C 0034             		move.w	#$3C,$34(a0)
0001AC92                            
0001AC92                            locret_10FDE:
0001AC92 4E75                       		rts	
0001AC94                            ; ===========================================================================
0001AC94                            
0001AC94                            loc_10FE0:
0001AC94 5368 0034                  		subq.w	#1,$34(a0)
0001AC98 6600                       		bne.s	loc_10FEC
0001AC9A 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001AC9E 4E75                       		rts	
0001ACA0                            ; ===========================================================================
0001ACA0                            
0001ACA0                            loc_10FEC:
0001ACA0 43E8 0038                  		lea	$38(a0),a1
0001ACA4 3028 0034                  		move.w	$34(a0),d0
0001ACA8 E408                       		lsr.b	#2,d0
0001ACAA 0200 0001                  		andi.b	#1,d0
0001ACAE 12C0                       		move.b	d0,(a1)+
0001ACB0 0A00 0001                  		eori.b	#1,d0
0001ACB4 12C0                       		move.b	d0,(a1)+
0001ACB6 0A00 0001                  		eori.b	#1,d0
0001ACBA 12C0                       		move.b	d0,(a1)+
0001ACBC 0A00 0001                  		eori.b	#1,d0
0001ACC0 12C0                       		move.b	d0,(a1)+
0001ACC2 4E75                       		rts	
0001ACC4                            ; ===========================================================================
0001ACC4                            
0001ACC4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001ACC4 43E8 0038                  		lea	$38(a0),a1
0001ACC8 0C11 0080                  		cmpi.b	#$80,(a1)
0001ACCC 6700                       		beq.s	locret_11038
0001ACCE 5211                       		addq.b	#1,(a1)
0001ACD0 7200                       		moveq	#0,d1
0001ACD2 1219                       		move.b	(a1)+,d1
0001ACD4 4841                       		swap	d1
0001ACD6 E289                       		lsr.l	#1,d1
0001ACD8 2401                       		move.l	d1,d2
0001ACDA E289                       		lsr.l	#1,d1
0001ACDC 2601                       		move.l	d1,d3
0001ACDE D682                       		add.l	d2,d3
0001ACE0 4841                       		swap	d1
0001ACE2 4842                       		swap	d2
0001ACE4 4843                       		swap	d3
0001ACE6 12C3                       		move.b	d3,(a1)+
0001ACE8 12C2                       		move.b	d2,(a1)+
0001ACEA 12C1                       		move.b	d1,(a1)+
0001ACEC                            
0001ACEC                            locret_11038:
0001ACEC 4E75                       		rts	
0001ACEE 4E75                       		rts	
0001ACF0                            ; ===========================================================================
0001ACF0                            ; ---------------------------------------------------------------------------
0001ACF0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001ACF0                            ; ---------------------------------------------------------------------------
0001ACF0                            Map_obj5B:
0001ACF0                            	include "_maps\obj5B.asm"
0001ACF0                            ; ---------------------------------------------------------------------------
0001ACF0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001ACF0                            ; ---------------------------------------------------------------------------
0001ACF0 0000                       		dc.w byte_1103E-Map_obj5B
0001ACF2 01                         byte_1103E:	dc.b 1
0001ACF3 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001ACF8                            		even
0001ACF8                            		even
0001ACF8                            
0001ACF8                            ; ===========================================================================
0001ACF8                            ; ---------------------------------------------------------------------------
0001ACF8                            ; Object 5C - metal girders in foreground (SLZ)
0001ACF8                            ; ---------------------------------------------------------------------------
0001ACF8                            
0001ACF8                            Obj5C:					; XREF: Obj_Index
0001ACF8 7000                       		moveq	#0,d0
0001ACFA 1028 0024                  		move.b	routine(a0),d0
0001ACFE 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001AD02 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001AD06                            ; ===========================================================================
0001AD06 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001AD08 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001AD0A                            ; ===========================================================================
0001AD0A                            
0001AD0A                            Obj5C_Main:				; XREF: Obj5C_Index
0001AD0A 5428 0024                  		addq.b	#2,routine(a0)
0001AD0E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001AD16 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001AD1C 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001AD22                            
0001AD22                            Obj5C_Display:				; XREF: Obj5C_Index
0001AD22 2238 F700                  		move.l	($FFFFF700).w,d1
0001AD26 D281                       		add.l	d1,d1
0001AD28 4841                       		swap	d1
0001AD2A 4441                       		neg.w	d1
0001AD2C 3141 0008                  		move.w	d1,8(a0)
0001AD30 2238 F704                  		move.l	($FFFFF704).w,d1
0001AD34 D281                       		add.l	d1,d1
0001AD36 4841                       		swap	d1
0001AD38 0241 003F                  		andi.w	#$3F,d1
0001AD3C 4441                       		neg.w	d1
0001AD3E 0641 0100                  		addi.w	#$100,d1
0001AD42 3141 000A                  		move.w	d1,$A(a0)
0001AD46 6000 B02A                  		bra.w	DisplaySprite
0001AD4A                            ; ===========================================================================
0001AD4A                            ; ---------------------------------------------------------------------------
0001AD4A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001AD4A                            ; ---------------------------------------------------------------------------
0001AD4A                            Map_obj5C:
0001AD4A                            	include "_maps\obj5C.asm"
0001AD4A                            ; ---------------------------------------------------------------------------
0001AD4A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001AD4A                            ; ---------------------------------------------------------------------------
0001AD4A 0000                       		dc.w byte_11098-Map_obj5C
0001AD4C 09                         byte_11098:	dc.b 9
0001AD4D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001AD52 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001AD57 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001AD5C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001AD61 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001AD66 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001AD6B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001AD70 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001AD75 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001AD7A                            		even
0001AD7A                            		even
0001AD7A                            
0001AD7A                            ; ===========================================================================
0001AD7A                            ; ---------------------------------------------------------------------------
0001AD7A                            ; Object 1B - water surface (LZ)
0001AD7A                            ; ---------------------------------------------------------------------------
0001AD7A                            
0001AD7A                            Obj1B:					; XREF: Obj_Index
0001AD7A 7000                       		moveq	#0,d0
0001AD7C 1028 0024                  		move.b	routine(a0),d0
0001AD80 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001AD84 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001AD88                            ; ===========================================================================
0001AD88 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001AD8A 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001AD8C                            ; ===========================================================================
0001AD8C                            
0001AD8C                            Obj1B_Main:				; XREF: Obj1B_Index
0001AD8C 5428 0024                  		addq.b	#2,routine(a0)
0001AD90 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001AD98 317C C300 0002             		move.w	#$C300,2(a0)
0001AD9E 117C 0004 0001             		move.b	#4,1(a0)
0001ADA4 117C 0080 0023             		move.b	#$80,width_pixels(a0)
0001ADAA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001ADB0                            
0001ADB0                            Obj1B_Action:				; XREF: Obj1B_Index
0001ADB0 3238 F700                  		move.w	($FFFFF700).w,d1
0001ADB4 0241 FFE0                  		andi.w	#$FFE0,d1
0001ADB8 D268 0030                  		add.w	$30(a0),d1
0001ADBC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001ADC2 6700                       		beq.s	loc_11114
0001ADC4 0641 0020                  		addi.w	#$20,d1
0001ADC8                            
0001ADC8                            loc_11114:
0001ADC8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001ADCC 3238 F646                  		move.w	($FFFFF646).w,d1
0001ADD0 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001ADD4 4A28 0032                  		tst.b	$32(a0)
0001ADD8 6600                       		bne.s	Obj1B_Animate
0001ADDA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001ADE0 6700                       		beq.s	loc_1114A	; if not, branch
0001ADE2 5628 001A                  		addq.b	#3,mapping_frame(a0)	; use different	frames
0001ADE6 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001ADEC 6000                       		bra.s	Obj1B_Display
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE                            Obj1B_Animate:				; XREF: loc_11114
0001ADEE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001ADF2 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001ADF4 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001ADFA 5728 001A                  		subq.b	#3,mapping_frame(a0)	; use normal frames
0001ADFE                            
0001ADFE                            loc_1114A:				; XREF: loc_11114
0001ADFE 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001AE02 6A00                       		bpl.s	Obj1B_Display
0001AE04 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
0001AE0A 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001AE0E 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
0001AE14 6500                       		bcs.s	Obj1B_Display
0001AE16 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001AE1C                            
0001AE1C                            Obj1B_Display:
0001AE1C 6000 AF54                  		bra.w	DisplaySprite
0001AE20                            ; ===========================================================================
0001AE20                            ; ---------------------------------------------------------------------------
0001AE20                            ; Sprite mappings - water surface (LZ)
0001AE20                            ; ---------------------------------------------------------------------------
0001AE20                            Map_obj1B:
0001AE20                            	include "_maps\obj1B.asm"
0001AE20                            ; ---------------------------------------------------------------------------
0001AE20                            ; Sprite mappings - water surface (LZ)
0001AE20                            ; ---------------------------------------------------------------------------
0001AE20 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001AE24 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001AE28 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001AE2C 03                         byte_11178:	dc.b 3
0001AE2D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001AE32 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001AE37 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001AE3C 03                         byte_11188:	dc.b 3
0001AE3D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001AE42 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001AE47 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001AE4C 03                         byte_11198:	dc.b 3
0001AE4D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001AE52 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001AE57 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001AE5C 06                         byte_111A8:	dc.b 6
0001AE5D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001AE62 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001AE67 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001AE6C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001AE71 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001AE76 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001AE7B 06                         byte_111C7:	dc.b 6
0001AE7C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001AE81 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001AE86 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001AE8B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001AE90 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001AE95 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001AE9A 06                         byte_111E6:	dc.b 6
0001AE9B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001AEA0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001AEA5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001AEAA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001AEAF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001AEB4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001AEBA 00                         		even
0001AEBA 00                         		even
0001AEBA                            
0001AEBA                            ; ===========================================================================
0001AEBA                            ; ---------------------------------------------------------------------------
0001AEBA                            ; Object 0B - pole that	breaks (LZ)
0001AEBA                            ; ---------------------------------------------------------------------------
0001AEBA                            
0001AEBA                            Obj0B:					; XREF: Obj_Index
0001AEBA 7000                       		moveq	#0,d0
0001AEBC 1028 0024                  		move.b	routine(a0),d0
0001AEC0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001AEC4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001AEC8                            ; ===========================================================================
0001AEC8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001AECA 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001AECC 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            Obj0B_Main:				; XREF: Obj0B_Index
0001AECE 5428 0024                  		addq.b	#2,routine(a0)
0001AED2 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001AEDA 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001AEE0 117C 0004 0001             		move.b	#4,1(a0)
0001AEE6 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001AEEC 317C 0200 0018             		move.w	#$200,priority(a0)
0001AEF2 117C 00E1 0020             		move.b	#$E1,collision_flags(a0)
0001AEF8 7000                       		moveq	#0,d0
0001AEFA 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001AEFE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001AF02 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001AF06                            
0001AF06                            Obj0B_Action:				; XREF: Obj0B_Index
0001AF06 4A28 0032                  		tst.b	$32(a0)
0001AF0A 6700                       		beq.s	Obj0B_Grab
0001AF0C 4A68 0030                  		tst.w	$30(a0)
0001AF10 6700                       		beq.s	Obj0B_MoveUp
0001AF12 5368 0030                  		subq.w	#1,$30(a0)
0001AF16 6600                       		bne.s	Obj0B_MoveUp
0001AF18 117C 0001 001A             		move.b	#1,mapping_frame(a0)	; break	the pole
0001AF1E 6000                       		bra.s	Obj0B_Release
0001AF20                            ; ===========================================================================
0001AF20                            
0001AF20                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001AF20 43F8 D000                  		lea	($FFFFD000).w,a1
0001AF24 3028 000C                  		move.w	$C(a0),d0
0001AF28 0440 0018                  		subi.w	#$18,d0
0001AF2C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001AF32 6700                       		beq.s	Obj0B_MoveDown
0001AF34 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001AF38 B069 000C                  		cmp.w	$C(a1),d0
0001AF3C 6500                       		bcs.s	Obj0B_MoveDown
0001AF3E 3340 000C                  		move.w	d0,$C(a1)
0001AF42                            
0001AF42                            Obj0B_MoveDown:
0001AF42 0640 0024                  		addi.w	#$24,d0
0001AF46 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001AF4C 6700                       		beq.s	Obj0B_LetGo
0001AF4E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001AF52 B069 000C                  		cmp.w	$C(a1),d0
0001AF56 6400                       		bcc.s	Obj0B_LetGo
0001AF58 3340 000C                  		move.w	d0,$C(a1)
0001AF5C                            
0001AF5C                            Obj0B_LetGo:
0001AF5C 1038 F603                  		move.b	($FFFFF603).w,d0
0001AF60 0240 0070                  		andi.w	#$70,d0
0001AF64 6700                       		beq.s	Obj0B_Display
0001AF66                            
0001AF66                            Obj0B_Release:				; XREF: Obj0B_Action
0001AF66 4228 0020                  		clr.b	collision_flags(a0)
0001AF6A 5428 0024                  		addq.b	#2,routine(a0)
0001AF6E 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001AF72 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001AF76 4228 0032                  		clr.b	$32(a0)
0001AF7A 6000                       		bra.s	Obj0B_Display
0001AF7C                            ; ===========================================================================
0001AF7C                            
0001AF7C                            Obj0B_Grab:				; XREF: Obj0B_Action
0001AF7C 4A28 0021                  		tst.b	collision_property(a0)		; has Sonic touched the	pole?
0001AF80 6700                       		beq.s	Obj0B_Display	; if not, branch
0001AF82 43F8 D000                  		lea	($FFFFD000).w,a1
0001AF86 3028 0008                  		move.w	8(a0),d0
0001AF8A 0640 0014                  		addi.w	#$14,d0
0001AF8E B069 0008                  		cmp.w	8(a1),d0
0001AF92 6400                       		bcc.s	Obj0B_Display
0001AF94 4228 0021                  		clr.b	collision_property(a0)
0001AF98 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0001AF9E 6400                       		bcc.s	Obj0B_Display
0001AFA0 4269 0010                  		clr.w	x_vel(a1)		; stop Sonic moving
0001AFA4 4269 0012                  		clr.w	y_vel(a1)		; stop Sonic moving
0001AFA8 3028 0008                  		move.w	8(a0),d0
0001AFAC 0640 0014                  		addi.w	#$14,d0
0001AFB0 3340 0008                  		move.w	d0,8(a1)
0001AFB4 08A9 0000 0022             		bclr	#0,status(a1)
0001AFBA 137C 0011 001C             		move.b	#$11,anim(a1)	; set Sonic's animation to "hanging" ($11)
0001AFC0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001AFC6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001AFCC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001AFD2                            
0001AFD2                            Obj0B_Display:				; XREF: Obj0B_Index
0001AFD2 6000 DED2                  		bra.w	MarkObjGone
0001AFD6                            ; ===========================================================================
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6                            ; Sprite mappings - pole that breaks (LZ)
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6                            Map_obj0B:
0001AFD6                            	include "_maps\obj0B.asm"
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6                            ; Sprite mappings - pole that breaks (LZ)
0001AFD6                            ; ---------------------------------------------------------------------------
0001AFD6 0000                       		dc.w byte_11326-Map_obj0B
0001AFD8 0000                       		dc.w byte_11331-Map_obj0B
0001AFDA 02                         byte_11326:	dc.b 2			; normal pole
0001AFDB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001AFE0 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001AFE5 04                         byte_11331:	dc.b 4			; broken pole
0001AFE6 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001AFEB F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001AFF0 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001AFF5 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001AFFA                            		even
0001AFFA                            		even
0001AFFA                            
0001AFFA                            ; ===========================================================================
0001AFFA                            ; ---------------------------------------------------------------------------
0001AFFA                            ; Object 0C - flapping door (LZ)
0001AFFA                            ; ---------------------------------------------------------------------------
0001AFFA                            
0001AFFA                            Obj0C:					; XREF: Obj_Index
0001AFFA 7000                       		moveq	#0,d0
0001AFFC 1028 0024                  		move.b	routine(a0),d0
0001B000 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001B004 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001B008                            ; ===========================================================================
0001B008 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001B00A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001B00C                            ; ===========================================================================
0001B00C                            
0001B00C                            Obj0C_Main:				; XREF: Obj0C_Index
0001B00C 5428 0024                  		addq.b	#2,routine(a0)
0001B010 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001B018 317C 4328 0002             		move.w	#$4328,2(a0)
0001B01E 0028 0004 0001             		ori.b	#4,1(a0)
0001B024 117C 0028 0023             		move.b	#$28,width_pixels(a0)
0001B02A 7000                       		moveq	#0,d0
0001B02C 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001B030 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001B034 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001B038                            
0001B038                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001B038 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B03C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001B03E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001B044 0868 0000 001C             		bchg	#0,anim(a0)	; open/close door
0001B04A 4A28 0001                  		tst.b	1(a0)
0001B04E 6A00                       		bpl.s	Obj0C_Solid
0001B050 303C 00BB                  		move.w	#$BB,d0
0001B054 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
0001B05A                            
0001B05A                            Obj0C_Solid:
0001B05A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001B060 4EB9 0001 2754             		jsr	AnimateSprite
0001B066 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001B06A 4A28 001A                  		tst.b	mapping_frame(a0)		; is the door open?
0001B06E 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001B070 3038 D008                  		move.w	($FFFFD008).w,d0
0001B074 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001B078 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001B07A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001B080 323C 0013                  		move.w	#$13,d1
0001B084 343C 0020                  		move.w	#$20,d2
0001B088 3602                       		move.w	d2,d3
0001B08A 5243                       		addq.w	#1,d3
0001B08C 3828 0008                  		move.w	8(a0),d4
0001B090 4EBA E4F8                  		jsr	SolidObject	; make the door	solid
0001B094                            
0001B094                            Obj0C_Display:
0001B094 6000 DE10                  		bra.w	MarkObjGone
0001B098                            ; ===========================================================================
0001B098                            Ani_obj0C:
0001B098                            	include "_anim\obj0C.asm"
0001B098                            ; ---------------------------------------------------------------------------
0001B098                            ; Animation script - flapping door (LZ)
0001B098                            ; ---------------------------------------------------------------------------
0001B098 0000                       		dc.w byte_113E6-Ani_obj0C
0001B09A 0000                       		dc.w byte_113EC-Ani_obj0C
0001B09C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001B0A2 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001B0A8                            		even
0001B0A8                            		even
0001B0A8                            
0001B0A8                            ; ---------------------------------------------------------------------------
0001B0A8                            ; Sprite mappings - flapping door (LZ)
0001B0A8                            ; ---------------------------------------------------------------------------
0001B0A8                            Map_obj0C:
0001B0A8                            	include "_maps\obj0C.asm"
0001B0A8                            ; ---------------------------------------------------------------------------
0001B0A8                            ; Sprite mappings - flapping door (LZ)
0001B0A8                            ; ---------------------------------------------------------------------------
0001B0A8 0000                       		dc.w byte_113F8-Map_obj0C
0001B0AA 0000                       		dc.w byte_11403-Map_obj0C
0001B0AC 0000                       		dc.w byte_1140E-Map_obj0C
0001B0AE 02                         byte_113F8:	dc.b 2
0001B0AF E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001B0B4 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001B0B9 02                         byte_11403:	dc.b 2
0001B0BA DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001B0BF 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001B0C4 02                         byte_1140E:	dc.b 2
0001B0C5 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001B0CA 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001B0D0 00                         		even
0001B0D0 00                         		even
0001B0D0                            
0001B0D0                            ; ===========================================================================
0001B0D0                            ; ---------------------------------------------------------------------------
0001B0D0                            ; Object 71 - invisible	solid barriers
0001B0D0                            ; ---------------------------------------------------------------------------
0001B0D0                            
0001B0D0                            Obj71:				; XREF: Obj_Index
0001B0D0 7000                       		moveq	#0,d0
0001B0D2 1028 0024                  		move.b	routine(a0),d0
0001B0D6 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001B0DA 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001B0DE                            ; ===========================================================================
0001B0DE 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001B0E0 0000                       		dc.w Obj71_Solid-Obj71_Index
0001B0E2                            
0001B0E2 =00000016                  invis_height:	= $16		; height in pixels
0001B0E2                            ; ===========================================================================
0001B0E2                            
0001B0E2                            Obj71_Main:	; Routine 0
0001B0E2 5428 0024                  		addq.b	#2,routine(a0)
0001B0E6 217C 0000 0000 0004        		move.l	#Map_obj71,mappings(a0)
0001B0EE 317C 8680 0002             		move.w	#$8680,art_tile(a0)
0001B0F4 0028 0004 0001             		ori.b	#4,render_flags(a0)
0001B0FA 1028 0028                  		move.b	subtype(a0),d0 ; get object type
0001B0FE 1200                       		move.b	d0,d1
0001B100 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001B104 0640 0010                  		addi.w	#$10,d0
0001B108 E248                       		lsr.w	#1,d0
0001B10A 1140 0023                  		move.b	d0,width_pixels(a0)	; set object width
0001B10E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001B112 5241                       		addq.w	#1,d1
0001B114 E749                       		lsl.w	#3,d1
0001B116 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001B11A                            
0001B11A                            Obj71_Solid:	; Routine 2
0001B11A 6100 B00C                  		bsr.w	ChkObjOnScreen
0001B11E 6600                       		bne.s	@chkdel
0001B120 7200                       		moveq	#0,d1
0001B122 1228 0023                  		move.b	width_pixels(a0),d1
0001B126 0641 000B                  		addi.w	#$B,d1
0001B12A 7400                       		moveq	#0,d2
0001B12C 1428 0016                  		move.b	invis_height(a0),d2
0001B130 3602                       		move.w	d2,d3
0001B132 5243                       		addq.w	#1,d3
0001B134 3828 0008                  		move.w	x_pos(a0),d4
0001B138 6100 E4E4                  		bsr.w	SolidObject71
0001B13C                            
0001B13C                            @chkdel:
0001B158 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001B15C 6700                       		beq.s	@nodisplay	; if not, branch
0001B15E 4EFA AC12                  		jmp	DisplaySprite	; if yes, display the object
0001B162                            
0001B162                            	@nodisplay:
0001B162 4E75                       		rts	
0001B164                            
0001B164                            	@delete:
0001B164                            ;        if S3KObjectManager=1
0001B164 7000 3028 0014 6700 3440+  		obMarkGone
0001B172                             ;       endif
0001B172 4EFA ABB2                  		jmp	DeleteObject
0001B176                            
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            ; Sprite mappings - invisible solid blocks
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            Map_obj71:
0001B176                            	include "_maps\obj71.asm"
0001B176                            ; ---------------------------------------------------------------------------
0001B176                            ; Sprite mappings - invisible solid blocks
0001B176                            ; ---------------------------------------------------------------------------
0001B176 0000                       		dc.w byte_114BC-Map_obj71
0001B178 0000                       		dc.w byte_114D1-Map_obj71
0001B17A 0000                       		dc.w byte_114E6-Map_obj71
0001B17C 04                         byte_114BC:	dc.b 4
0001B17D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001B182 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001B187 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001B18C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001B191 04                         byte_114D1:	dc.b 4
0001B192 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001B197 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001B19C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001B1A1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001B1A6 04                         byte_114E6:	dc.b 4
0001B1A7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001B1AC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001B1B1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001B1B6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001B1BC 00                         		even
0001B1BC 00                         		even
0001B1BC                            
0001B1BC                            ; ===========================================================================
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC                            ; Object 5D - fans (SLZ)
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC                            
0001B1BC                            Obj5D:					; XREF: Obj_Index
0001B1BC 7000                       		moveq	#0,d0
0001B1BE 1028 0024                  		move.b	routine(a0),d0
0001B1C2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001B1C6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001B1CA                            ; ===========================================================================
0001B1CA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001B1CC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            Obj5D_Main:				; XREF: Obj5D_Index
0001B1CE 5428 0024                  		addq.b	#2,routine(a0)
0001B1D2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001B1DA 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001B1E0 0028 0004 0001             		ori.b	#4,1(a0)
0001B1E6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001B1EC 317C 0200 0018             		move.w	#$200,priority(a0)
0001B1F2                            
0001B1F2                            Obj5D_Delay:				; XREF: Obj5D_Index
0001B1F2 0828 0001 0028             		btst	#1,subtype(a0)	; is object type 02/03?
0001B1F8 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001B1FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B1FE 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001B200 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001B206 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001B20C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001B20E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001B214                            
0001B214                            Obj5D_Blow:
0001B214 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001B218 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001B21C 43F8 D000                  		lea	($FFFFD000).w,a1
0001B220 3029 0008                  		move.w	8(a1),d0
0001B224 9068 0008                  		sub.w	8(a0),d0
0001B228 0828 0000 0022             		btst	#0,status(a0)
0001B22E 6600                       		bne.s	Obj5D_ChkSonic
0001B230 4440                       		neg.w	d0
0001B232                            
0001B232                            Obj5D_ChkSonic:
0001B232 0640 0050                  		addi.w	#$50,d0
0001B236 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001B23A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001B23C 3229 000C                  		move.w	$C(a1),d1
0001B240 0641 0060                  		addi.w	#$60,d1
0001B244 9268 000C                  		sub.w	$C(a0),d1
0001B248 6500                       		bcs.s	Obj5D_Animate
0001B24A 0C41 0070                  		cmpi.w	#$70,d1
0001B24E 6400                       		bcc.s	Obj5D_Animate
0001B250 0440 0050                  		subi.w	#$50,d0
0001B254 6400                       		bcc.s	loc_1159A
0001B256 4640                       		not.w	d0
0001B258 D040                       		add.w	d0,d0
0001B25A                            
0001B25A                            loc_1159A:
0001B25A 0640 0060                  		addi.w	#$60,d0
0001B25E 0828 0000 0022             		btst	#0,status(a0)
0001B264 6600                       		bne.s	loc_115A8
0001B266 4440                       		neg.w	d0
0001B268                            
0001B268                            loc_115A8:
0001B268 4400                       		neg.b	d0
0001B26A E840                       		asr.w	#4,d0
0001B26C 0828 0000 0028             		btst	#0,subtype(a0)
0001B272 6700                       		beq.s	Obj5D_MoveSonic
0001B274 4440                       		neg.w	d0
0001B276                            
0001B276                            Obj5D_MoveSonic:
0001B276 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001B27A                            
0001B27A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001B27A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001B27E 6A00                       		bpl.s	Obj5D_ChkDel
0001B280 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001B286 5228 001B                  		addq.b	#1,anim_frame(a0)
0001B28A 0C28 0003 001B             		cmpi.b	#3,anim_frame(a0)
0001B290 6500                       		bcs.s	loc_115D8
0001B292 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001B298                            
0001B298                            loc_115D8:
0001B298 7000                       		moveq	#0,d0
0001B29A 0828 0000 0028             		btst	#0,subtype(a0)
0001B2A0 6700                       		beq.s	loc_115E4
0001B2A2 7002                       		moveq	#2,d0
0001B2A4                            
0001B2A4                            loc_115E4:
0001B2A4 D028 001B                  		add.b	anim_frame(a0),d0
0001B2A8 1140 001A                  		move.b	d0,mapping_frame(a0)
0001B2AC                            
0001B2AC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001B2AC 4EBA AAC4                  		jsr	DisplaySprite
0001B2B0 4EFA DF34                  		jmp		MarkObjGone3
0001B2B4                            ; ===========================================================================
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            ; Sprite mappings - fans (SLZ)
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            Map_obj5D:
0001B2B4                            	include "_maps\obj5D.asm"
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            ; Sprite mappings - fans (SLZ)
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001B2B8 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001B2BC 0000                       		dc.w byte_1161A-Map_obj5D
0001B2BE 02                         byte_1161A:	dc.b 2
0001B2BF F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001B2C4 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001B2C9 02                         byte_11625:	dc.b 2
0001B2CA F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001B2CF 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001B2D4 02                         byte_11630:	dc.b 2
0001B2D5 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001B2DA 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001B2E0 00                         		even
0001B2E0 00                         		even
0001B2E0                            
0001B2E0                            ; ===========================================================================
0001B2E0                            ; ---------------------------------------------------------------------------
0001B2E0                            ; Object 5E - seesaws (SLZ)
0001B2E0                            ; ---------------------------------------------------------------------------
0001B2E0                            
0001B2E0                            Obj5E:					; XREF: Obj_Index
0001B2E0 7000                       		moveq	#0,d0
0001B2E2 1028 0024                  		move.b	routine(a0),d0
0001B2E6 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001B2EA 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001B2EE 3028 0030                  		move.w	$30(a0),d0
0001B2F2 4EFA DBE8                  		jmp		MarkObjGone2
0001B2F6                            ; ===========================================================================
0001B2F6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001B2F8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001B2FA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001B2FC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001B2FE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001B300 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001B302                            ; ===========================================================================
0001B302                            
0001B302                            Obj5E_Main:				; XREF: Obj5E_Index
0001B302 5428 0024                  		addq.b	#2,routine(a0)
0001B306 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001B30E 317C 0374 0002             		move.w	#$374,2(a0)
0001B314 0028 0004 0001             		ori.b	#4,1(a0)
0001B31A 317C 0200 0018             		move.w	#$200,priority(a0)
0001B320 117C 0030 0023             		move.b	#$30,width_pixels(a0)
0001B326 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B32C 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 ?
0001B330 6600                       		bne.s	loc_116D2	; if not, branch
0001B332 4EBA B55E                  		jsr	SingleObjLoad2
0001B336 6600                       		bne.s	loc_116D2
0001B338 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001B33C 5C29 0024                  		addq.b	#6,routine(a1)
0001B340 3368 0008 0008             		move.w	8(a0),8(a1)
0001B346 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B34C 1368 0022 0022             		move.b	status(a0),status(a1)
0001B352 2348 003C                  		move.l	a0,$3C(a1)
0001B356                            
0001B356                            loc_116D2:
0001B356 0828 0000 0022             		btst	#0,status(a0)
0001B35C 6700                       		beq.s	loc_116E0
0001B35E 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001B364                            
0001B364                            loc_116E0:
0001B364 1168 001A 003A             		move.b	mapping_frame(a0),$3A(a0)
0001B36A                            
0001B36A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001B36A 1228 003A                  		move.b	$3A(a0),d1
0001B36E 4EB9 0000 0000             		jsr	loc_11766
0001B374 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001B37A 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001B380 6700                       		beq.s	loc_11702
0001B382 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001B388                            
0001B388                            loc_11702:
0001B388 43F8 D000                  		lea	($FFFFD000).w,a1
0001B38C 3169 0012 0038             		move.w	y_vel(a1),$38(a0)
0001B392 323C 0030                  		move.w	#$30,d1
0001B396 4EB9 0000 F2A8             		jsr	(SlopeObject).l
0001B39C 4E75                       		rts	
0001B39E                            ; ===========================================================================
0001B39E                            
0001B39E                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001B39E 4EB9 0000 0000             		jsr	loc_1174A
0001B3A4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001B3AA 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001B3B0 6700                       		beq.s	loc_11730
0001B3B2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001B3B8                            
0001B3B8                            loc_11730:
0001B3B8 323C 0030                  		move.w	#$30,d1
0001B3BC 4EB9 0000 F310             		jsr	(ExitPlatform).l
0001B3C2 323C 0030                  		move.w	#$30,d1
0001B3C6 3428 0008                  		move.w	8(a0),d2
0001B3CA 4EB9 0001 0276             		jsr	SlopeObject2
0001B3D0 4E75                       		rts	
0001B3D2                            ; ===========================================================================
0001B3D2                            
0001B3D2                            loc_1174A:				; XREF: Obj5E_Slope2
0001B3D2 7202                       		moveq	#2,d1
0001B3D4 43F8 D000                  		lea	($FFFFD000).w,a1
0001B3D8 3028 0008                  		move.w	8(a0),d0
0001B3DC 9069 0008                  		sub.w	8(a1),d0
0001B3E0 6400                       		bcc.s	loc_1175E
0001B3E2 4440                       		neg.w	d0
0001B3E4 7200                       		moveq	#0,d1
0001B3E6                            
0001B3E6                            loc_1175E:
0001B3E6 0C40 0008                  		cmpi.w	#8,d0
0001B3EA 6400                       		bcc.s	loc_11766
0001B3EC 7201                       		moveq	#1,d1
0001B3EE                            
0001B3EE                            loc_11766:
0001B3EE 1028 001A                  		move.b	mapping_frame(a0),d0
0001B3F2 B001                       		cmp.b	d1,d0
0001B3F4 6700                       		beq.s	locret_11790
0001B3F6 6400                       		bcc.s	loc_11772
0001B3F8 5400                       		addq.b	#2,d0
0001B3FA                            
0001B3FA                            loc_11772:
0001B3FA 5300                       		subq.b	#1,d0
0001B3FC 1140 001A                  		move.b	d0,mapping_frame(a0)
0001B400 1141 003A                  		move.b	d1,$3A(a0)
0001B404 08A8 0000 0001             		bclr	#0,1(a0)
0001B40A 0828 0001 001A             		btst	#1,mapping_frame(a0)
0001B410 6700                       		beq.s	locret_11790
0001B412 08E8 0000 0001             		bset	#0,1(a0)
0001B418                            
0001B418                            locret_11790:
0001B418 4E75                       		rts	
0001B41A                            ; ===========================================================================
0001B41A                            
0001B41A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001B41A 5428 0024                  		addq.b	#2,routine(a0)
0001B41E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001B426 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001B42C 0028 0004 0001             		ori.b	#4,1(a0)
0001B432 317C 0200 0018             		move.w	#$200,priority(a0)
0001B438 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
0001B43E 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B444 3168 0008 0030             		move.w	8(a0),$30(a0)
0001B44A 0668 0028 0008             		addi.w	#$28,8(a0)
0001B450 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001B456 117C 0001 001A             		move.b	#1,mapping_frame(a0)
0001B45C 0828 0000 0022             		btst	#0,status(a0)
0001B462 6700                       		beq.s	Obj5E_MoveSpike
0001B464 0468 0050 0008             		subi.w	#$50,8(a0)
0001B46A 117C 0002 003A             		move.b	#2,$3A(a0)
0001B470                            
0001B470                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001B470 2268 003C                  		movea.l	$3C(a0),a1
0001B474 7000                       		moveq	#0,d0
0001B476 1028 003A                  		move.b	$3A(a0),d0
0001B47A 9029 003A                  		sub.b	$3A(a1),d0
0001B47E 6700                       		beq.s	loc_1183E
0001B480 6400                       		bcc.s	loc_117FC
0001B482 4400                       		neg.b	d0
0001B484                            
0001B484                            loc_117FC:
0001B484 323C F7E8                  		move.w	#-$818,d1
0001B488 343C FEEC                  		move.w	#-$114,d2
0001B48C 0C00 0001                  		cmpi.b	#1,d0
0001B490 6700                       		beq.s	loc_11822
0001B492 323C F510                  		move.w	#-$AF0,d1
0001B496 343C FF34                  		move.w	#-$CC,d2
0001B49A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001B4A0 6D00                       		blt.s	loc_11822
0001B4A2 323C F200                  		move.w	#-$E00,d1
0001B4A6 343C FF60                  		move.w	#-$A0,d2
0001B4AA                            
0001B4AA                            loc_11822:
0001B4AA 3141 0012                  		move.w	d1,y_vel(a0)
0001B4AE 3142 0010                  		move.w	d2,x_vel(a0)
0001B4B2 3028 0008                  		move.w	8(a0),d0
0001B4B6 9068 0030                  		sub.w	$30(a0),d0
0001B4BA 6400                       		bcc.s	loc_11838
0001B4BC 4468 0010                  		neg.w	x_vel(a0)
0001B4C0                            
0001B4C0                            loc_11838:
0001B4C0 5428 0024                  		addq.b	#2,routine(a0)
0001B4C4 6000                       		bra.s	Obj5E_SpikeFall
0001B4C6                            ; ===========================================================================
0001B4C6                            
0001B4C6                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001B4C6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001B4CC 7000                       		moveq	#0,d0
0001B4CE 1029 001A                  		move.b	mapping_frame(a1),d0
0001B4D2 343C 0028                  		move.w	#$28,d2
0001B4D6 3228 0008                  		move.w	8(a0),d1
0001B4DA 9268 0030                  		sub.w	$30(a0),d1
0001B4DE 6400                       		bcc.s	loc_1185C
0001B4E0 4442                       		neg.w	d2
0001B4E2 5440                       		addq.w	#2,d0
0001B4E4                            
0001B4E4                            loc_1185C:
0001B4E4 D040                       		add.w	d0,d0
0001B4E6 3228 0034                  		move.w	$34(a0),d1
0001B4EA D272 0000                  		add.w	(a2,d0.w),d1
0001B4EE 3141 000C                  		move.w	d1,$C(a0)
0001B4F2 D468 0030                  		add.w	$30(a0),d2
0001B4F6 3142 0008                  		move.w	d2,8(a0)
0001B4FA 4268 000E                  		clr.w	$E(a0)
0001B4FE 4268 000A                  		clr.w	$A(a0)
0001B502 4E75                       		rts	
0001B504                            ; ===========================================================================
0001B504                            
0001B504                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001B504 4A68 0012                  		tst.w	y_vel(a0)
0001B508 6A00                       		bpl.s	loc_1189A
0001B50A 4EBA A7E0                  		jsr	ObjectFall
0001B50E 3028 0034                  		move.w	$34(a0),d0
0001B512 0440 002F                  		subi.w	#$2F,d0
0001B516 B068 000C                  		cmp.w	$C(a0),d0
0001B51A 6E00                       		bgt.s	locret_11898
0001B51C 4EBA A7CE                  		jsr	ObjectFall
0001B520                            
0001B520                            locret_11898:
0001B520 4E75                       		rts	
0001B522                            ; ===========================================================================
0001B522                            
0001B522                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001B522 4EBA A7C8                  		jsr	ObjectFall
0001B526 2268 003C                  		movea.l	$3C(a0),a1
0001B52A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001B530 7000                       		moveq	#0,d0
0001B532 1029 001A                  		move.b	mapping_frame(a1),d0
0001B536 3228 0008                  		move.w	8(a0),d1
0001B53A 9268 0030                  		sub.w	$30(a0),d1
0001B53E 6400                       		bcc.s	loc_118BA
0001B540 5440                       		addq.w	#2,d0
0001B542                            
0001B542                            loc_118BA:
0001B542 D040                       		add.w	d0,d0
0001B544 3228 0034                  		move.w	$34(a0),d1
0001B548 D272 0000                  		add.w	(a2,d0.w),d1
0001B54C B268 000C                  		cmp.w	$C(a0),d1
0001B550 6E00                       		bgt.s	locret_11938
0001B552 2268 003C                  		movea.l	$3C(a0),a1
0001B556 7202                       		moveq	#2,d1
0001B558 4A68 0010                  		tst.w	x_vel(a0)
0001B55C 6B00                       		bmi.s	Obj5E_Spring
0001B55E 7200                       		moveq	#0,d1
0001B560                            
0001B560                            Obj5E_Spring:
0001B560 1341 003A                  		move.b	d1,$3A(a1)
0001B564 1141 003A                  		move.b	d1,$3A(a0)
0001B568 B229 001A                  		cmp.b	mapping_frame(a1),d1
0001B56C 6700                       		beq.s	loc_1192C
0001B56E 08A9 0003 0022             		bclr	#3,status(a1)
0001B574 6700                       		beq.s	loc_1192C
0001B576 4229 0025                  		clr.b	routine_secondary(a1)
0001B57A 137C 0002 0024             		move.b	#2,routine(a1)
0001B580 45F8 D000                  		lea	($FFFFD000).w,a2
0001B584 3568 0012 0012             		move.w	y_vel(a0),y_vel(a2)
0001B58A 446A 0012                  		neg.w	y_vel(a2)
0001B58E 08EA 0001 0022             		bset	#1,status(a2)
0001B594 08AA 0003 0022             		bclr	#3,status(a2)
0001B59A 422A 003C                  		clr.b	$3C(a2)
0001B59E 157C 0010 001C             		move.b	#$10,anim(a2)	; change Sonic's animation to "spring" ($10)
0001B5A4 157C 0002 0024             		move.b	#2,routine(a2)
0001B5AA 303C 00CC                  		move.w	#$CC,d0
0001B5AE 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play spring sound
0001B5B4                            
0001B5B4                            loc_1192C:
0001B5B4 4268 0010                  		clr.w	x_vel(a0)
0001B5B8 4268 0012                  		clr.w	y_vel(a0)
0001B5BC 5528 0024                  		subq.b	#2,routine(a0)
0001B5C0                            
0001B5C0                            locret_11938:
0001B5C0 4E75                       		rts	
0001B5C2                            ; ===========================================================================
0001B5C2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001B5CC                            
0001B5CC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001B5FC                            		even
0001B5FC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001B62C                            		even
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Sprite mappings - seesaws (SLZ)
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            Map_obj5E:
0001B62C                            	include "_maps\obj5E.asm"
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Sprite mappings - seesaws (SLZ)
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001B630 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001B634 07                         byte_119AC:	dc.b 7
0001B635 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001B63A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001B63F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001B644 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001B649 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001B64E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001B653 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001B658 04                         byte_119D0:	dc.b 4
0001B659 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001B65E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001B663 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001B668 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001B66E 00                         		even
0001B66E 00                         		even
0001B66E                            
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            Map_obj5Ea:
0001B66E                            	include "_maps\obj5Eballs.asm"
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E 0000                       		dc.w byte_119EA-Map_obj5Ea
0001B670 0000                       		dc.w byte_119F0-Map_obj5Ea
0001B672 01                         byte_119EA:	dc.b 1
0001B673 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B678 01                         byte_119F0:	dc.b 1
0001B679 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B67E                            		even
0001B67E                            		even
0001B67E                            
0001B67E                            ; ===========================================================================
0001B67E                            ; ---------------------------------------------------------------------------
0001B67E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001B67E                            ; ---------------------------------------------------------------------------
0001B67E                            
0001B67E                            Obj5F:					; XREF: Obj_Index
0001B67E 7000                       		moveq	#0,d0
0001B680 1028 0024                  		move.b	routine(a0),d0
0001B684 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001B688 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001B68C                            ; ===========================================================================
0001B68C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001B68E 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001B690 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001B692 0000                       		dc.w Obj5F_End-Obj5F_Index
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            Obj5F_Main:				; XREF: Obj5F_Index
0001B694 5428 0024                  		addq.b	#2,routine(a0)
0001B698 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001B6A0 317C 0400 0002             		move.w	#$400,2(a0)
0001B6A6 0028 0004 0001             		ori.b	#4,1(a0)
0001B6AC 317C 0180 0018             		move.w	#$180,priority(a0)
0001B6B2 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B6B8 1028 0028                  		move.b	subtype(a0),d0
0001B6BC 6700                       		beq.s	loc_11A3C
0001B6BE 1140 0024                  		move.b	d0,routine(a0)
0001B6C2 4E75                       		rts	
0001B6C4                            ; ===========================================================================
0001B6C4                            
0001B6C4                            loc_11A3C:
0001B6C4 117C 009A 0020             		move.b	#$9A,collision_flags(a0)
0001B6CA 0868 0000 0022             		bchg	#0,status(a0)
0001B6D0                            
0001B6D0                            Obj5F_Action:				; XREF: Obj5F_Index
0001B6D0 7000                       		moveq	#0,d0
0001B6D2 1028 0025                  		move.b	routine_secondary(a0),d0
0001B6D6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001B6DA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001B6DE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B6E4 4EB9 0001 2754             		jsr	AnimateSprite
0001B6EA 6000 D7BA                  		bra.w	MarkObjGone
0001B6EE                            ; ===========================================================================
0001B6EE 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001B6F0 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001B6F2 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001B6F4                            ; ===========================================================================
0001B6F4                            
0001B6F4                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001B6F4 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B6FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B6FE 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001B700 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001B704 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001B70A 317C 0010 0010             		move.w	#$10,x_vel(a0)
0001B710 117C 0001 001C             		move.b	#1,anim(a0)
0001B716 0868 0000 0022             		bchg	#0,status(a0)
0001B71C 6700                       		beq.s	locret_11A96
0001B71E 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001B722                            
0001B722                            locret_11A96:
0001B722 4E75                       		rts	
0001B724                            ; ===========================================================================
0001B724                            
0001B724                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001B724 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B72A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B72E 6B00                       		bmi.s	loc_11AA8
0001B730 4EBA A5DA                  		jsr	SpeedToPos
0001B734 4E75                       		rts	
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            loc_11AA8:
0001B736 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001B73A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001B740 4268 0010                  		clr.w	x_vel(a0)		; stop walking
0001B744 117C 0000 001C             		move.b	#0,anim(a0)	; stop animation
0001B74A 4E75                       		rts	
0001B74C                            ; ===========================================================================
0001B74C                            
0001B74C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001B74C 5368 0030                  		subq.w	#1,$30(a0)
0001B750 6A00                       		bpl.s	locret_11AD0
0001B752 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001B756 117C 0000 0024             		move.b	#0,routine(a0)
0001B75C                            
0001B75C                            locret_11AD0:
0001B75C 4E75                       		rts	
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001B75E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B762 9068 0008                  		sub.w	8(a0),d0
0001B766 6400                       		bcc.s	loc_11ADE
0001B768 4440                       		neg.w	d0
0001B76A                            
0001B76A                            loc_11ADE:
0001B76A 0C40 0060                  		cmpi.w	#$60,d0
0001B76E 6400                       		bcc.s	locret_11B5E
0001B770 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001B774 9068 000C                  		sub.w	$C(a0),d0
0001B778 6400                       		bcc.s	Obj5F_MakeFuse
0001B77A 4440                       		neg.w	d0
0001B77C                            
0001B77C                            Obj5F_MakeFuse:
0001B77C 0C40 0060                  		cmpi.w	#$60,d0
0001B780 6400                       		bcc.s	locret_11B5E
0001B782 4A78 FE08                  		tst.w	($FFFFFE08).w
0001B786 6600                       		bne.s	locret_11B5E
0001B788 117C 0004 0025             		move.b	#4,routine_secondary(a0)
0001B78E 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001B794 4268 0010                  		clr.w	x_vel(a0)
0001B798 117C 0002 001C             		move.b	#2,anim(a0)
0001B79E 4EBA B0F2                  		jsr	SingleObjLoad2
0001B7A2 6600                       		bne.s	locret_11B5E
0001B7A4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001B7A8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7B4 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001B7BA 1368 0022 0022             		move.b	status(a0),status(a1)
0001B7C0 137C 0004 0028             		move.b	#4,subtype(a1)
0001B7C6 137C 0003 001C             		move.b	#3,anim(a1)
0001B7CC 337C 0010 0012             		move.w	#$10,y_vel(a1)
0001B7D2 0828 0001 0022             		btst	#1,status(a0)
0001B7D8 6700                       		beq.s	loc_11B54
0001B7DA 4469 0012                  		neg.w	y_vel(a1)
0001B7DE                            
0001B7DE                            loc_11B54:
0001B7DE 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001B7E4 2348 003C                  		move.l	a0,$3C(a1)
0001B7E8                            
0001B7E8                            locret_11B5E:
0001B7E8 4E75                       		rts	
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            Obj5F_Display:				; XREF: Obj5F_Index
0001B7EA 6100                       		bsr.s	loc_11B70
0001B7EC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B7F2 4EB9 0001 2754             		jsr	AnimateSprite
0001B7F8 6000 D6AC                  		bra.w	MarkObjGone
0001B7FC                            ; ===========================================================================
0001B7FC                            
0001B7FC                            loc_11B70:
0001B7FC 5368 0030                  		subq.w	#1,$30(a0)
0001B800 6B00                       		bmi.s	loc_11B7C
0001B802 4EBA A508                  		jsr	SpeedToPos
0001B806 4E75                       		rts	
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            loc_11B7C:
0001B808 4268 0030                  		clr.w	$30(a0)
0001B80C 4228 0024                  		clr.b	routine(a0)
0001B810 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B816 7203                       		moveq	#3,d1
0001B818 2248                       		movea.l	a0,a1
0001B81A 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001B820 6000                       		bra.s	Obj5F_MakeShrap
0001B822                            ; ===========================================================================
0001B822                            
0001B822                            Obj5F_Loop:
0001B822 4EBA B06E                  		jsr	SingleObjLoad2
0001B826 6600                       		bne.s	loc_11BCE
0001B828                            
0001B828                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001B828 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001B82C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B832 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B838 137C 0006 0028             		move.b	#6,subtype(a1)
0001B83E 137C 0004 001C             		move.b	#4,anim(a1)
0001B844 335A 0010                  		move.w	(a2)+,x_vel(a1)
0001B848 335A 0012                  		move.w	(a2)+,y_vel(a1)
0001B84C 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001B852 08E9 0007 0001             		bset	#7,1(a1)
0001B858                            
0001B858                            loc_11BCE:
0001B858 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001B85C                            
0001B85C 117C 0006 0024             		move.b	#6,routine(a0)
0001B862                            
0001B862                            Obj5F_End:				; XREF: Obj5F_Index
0001B862 4EBA A4A8                  		jsr	SpeedToPos
0001B866 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001B86C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B872 4EB9 0001 2754             		jsr	AnimateSprite
0001B878 4A28 0001                  		tst.b	1(a0)
0001B87C 6A00 A4A8                  		bpl.w	DeleteObject
0001B880 6000 A4F0                  		bra.w	DisplaySprite
0001B884                            ; ===========================================================================
0001B884 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001B894                            
0001B894                            Ani_obj5F:
0001B894                            	include "_anim\obj5F.asm"
0001B894                            ; ---------------------------------------------------------------------------
0001B894                            ; Animation script - Bomb enemy
0001B894                            ; ---------------------------------------------------------------------------
0001B894 0000                       		dc.w byte_11C12-Ani_obj5F
0001B896 0000                       		dc.w byte_11C16-Ani_obj5F
0001B898 0000                       		dc.w byte_11C1C-Ani_obj5F
0001B89A 0000                       		dc.w byte_11C20-Ani_obj5F
0001B89C 0000                       		dc.w byte_11C24-Ani_obj5F
0001B89E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001B8A2 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001B8A8 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001B8AC 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001B8B0 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001B8B4                            		even
0001B8B4                            		even
0001B8B4                            
0001B8B4                            ; ---------------------------------------------------------------------------
0001B8B4                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B8B4                            ; ---------------------------------------------------------------------------
0001B8B4                            Map_obj5F:
0001B8B4                            	include "_maps\obj5F.asm"
0001B8B4                            ; ---------------------------------------------------------------------------
0001B8B4                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B8B4                            ; ---------------------------------------------------------------------------
0001B8B4 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001B8B8 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001B8BC 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001B8C0 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001B8C4 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001B8C8 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001B8CC 03                         byte_11C40:	dc.b 3
0001B8CD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B8D2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B8D7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B8DC 03                         byte_11C50:	dc.b 3
0001B8DD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B8E2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B8E7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B8EC 03                         byte_11C60:	dc.b 3
0001B8ED F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B8F2 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001B8F7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B8FC 03                         byte_11C70:	dc.b 3
0001B8FD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B902 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001B907 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B90C 03                         byte_11C80:	dc.b 3
0001B90D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B912 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001B917 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B91C 03                         byte_11C90:	dc.b 3
0001B91D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B922 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001B927 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B92C 02                         byte_11CA0:	dc.b 2
0001B92D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B932 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B937 02                         byte_11CAB:	dc.b 2
0001B938 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B93D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B942 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001B943 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001B948 01                         byte_11CBC:	dc.b 1			; fuse
0001B949 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001B94E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001B94F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B954 01                         byte_11CC8:	dc.b 1			; fireball
0001B955 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B95A                            		even
0001B95A                            		even
0001B95A                            
0001B95A                            ; ===========================================================================
0001B95A                            ; ---------------------------------------------------------------------------
0001B95A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001B95A                            ; ---------------------------------------------------------------------------
0001B95A                            
0001B95A                            Obj60:					; XREF: Obj_Index
0001B95A 7000                       		moveq	#0,d0
0001B95C 1028 0024                  		move.b	routine(a0),d0
0001B960 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001B964 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001B968                            ; ===========================================================================
0001B968 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001B96A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001B96C 0000                       		dc.w Obj60_Display-Obj60_Index
0001B96E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001B970 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001B972                            ; ===========================================================================
0001B972                            
0001B972                            Obj60_Main:				; XREF: Obj60_Index
0001B972 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001B97A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001B980 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001B986 6700                       		beq.s	loc_11D02
0001B988 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001B98E                            
0001B98E                            loc_11D02:
0001B98E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001B994 6600                       		bne.s	loc_11D10
0001B996 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001B99C                            
0001B99C                            loc_11D10:
0001B99C 0028 0004 0001             		ori.b	#4,1(a0)
0001B9A2 317C 0200 0018             		move.w	#$200,priority(a0)
0001B9A8 117C 000B 0020             		move.b	#$B,collision_flags(a0)
0001B9AE 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B9B4 7400                       		moveq	#0,d2
0001B9B6 45E8 0037                  		lea	$37(a0),a2
0001B9BA 264A                       		movea.l	a2,a3
0001B9BC 524A                       		addq.w	#1,a2
0001B9BE 7203                       		moveq	#3,d1
0001B9C0                            
0001B9C0                            Obj60_MakeOrbs:
0001B9C0 4EBA AED0                  		jsr	SingleObjLoad2
0001B9C4 6600                       		bne.s	loc_11D90
0001B9C6 5213                       		addq.b	#1,(a3)
0001B9C8 3A09                       		move.w	a1,d5
0001B9CA 0445 D000                  		subi.w	#-$3000,d5
0001B9CE EC4D                       		lsr.w	#6,d5
0001B9D0 0245 007F                  		andi.w	#$7F,d5
0001B9D4 14C5                       		move.b	d5,(a2)+
0001B9D6 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001B9D8 137C 0006 0024             		move.b	#6,routine(a1)
0001B9DE 2368 0004 0004             		move.l	4(a0),4(a1)
0001B9E4 3368 0002 0002             		move.w	2(a0),2(a1)
0001B9EA 0029 0004 0001             		ori.b	#4,1(a1)
0001B9F0 337C 0200 0018             		move.w	#$200,priority(a1)
0001B9F6 137C 0008 0023             		move.b	#8,width_pixels(a1)
0001B9FC 137C 0003 001A             		move.b	#3,mapping_frame(a1)
0001BA02 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001BA08 1342 0026                  		move.b	d2,$26(a1)
0001BA0C 0602 0040                  		addi.b	#$40,d2
0001BA10 2348 003C                  		move.l	a0,$3C(a1)
0001BA14 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001BA18                            
0001BA18                            loc_11D90:
0001BA18 7001                       		moveq	#1,d0
0001BA1A 0828 0000 0022             		btst	#0,status(a0)
0001BA20 6700                       		beq.s	Obj60_Move
0001BA22 4440                       		neg.w	d0
0001BA24                            
0001BA24                            Obj60_Move:
0001BA24 1140 0036                  		move.b	d0,$36(a0)
0001BA28 1168 0028 0024             		move.b	subtype(a0),routine(a0)	; if type is 02, skip the firing rountine
0001BA2E 5428 0024                  		addq.b	#2,routine(a0)
0001BA32 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move orbinaut	to the left
0001BA38 0828 0000 0022             		btst	#0,status(a0)	; is orbinaut reversed?
0001BA3E 6700                       		beq.s	locret_11DBC	; if not, branch
0001BA40 4468 0010                  		neg.w	x_vel(a0)		; move orbinaut	to the right
0001BA44                            
0001BA44                            locret_11DBC:
0001BA44 4E75                       		rts	
0001BA46                            ; ===========================================================================
0001BA46                            
0001BA46                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001BA46 3038 D008                  		move.w	($FFFFD008).w,d0
0001BA4A 9068 0008                  		sub.w	8(a0),d0
0001BA4E 6400                       		bcc.s	loc_11DCA
0001BA50 4440                       		neg.w	d0
0001BA52                            
0001BA52                            loc_11DCA:
0001BA52 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001BA56 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001BA58 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001BA5C 9068 000C                  		sub.w	$C(a0),d0
0001BA60 6400                       		bcc.s	loc_11DDC
0001BA62 4440                       		neg.w	d0
0001BA64                            
0001BA64                            loc_11DDC:
0001BA64 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001BA68 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001BA6A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001BA6E 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001BA70 117C 0001 001C             		move.b	#1,anim(a0)	; use "angry" animation
0001BA76                            
0001BA76                            Obj60_Animate:
0001BA76 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001BA7C 4EB9 0001 2754             		jsr	AnimateSprite
0001BA82 6000 0000                  		bra.w	Obj60_ChkDel
0001BA86                            ; ===========================================================================
0001BA86                            
0001BA86                            Obj60_Display:				; XREF: Obj60_Index
0001BA86 4EBA A284                  		jsr	SpeedToPos
0001BA8A                            
0001BA8A                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001BA8A 3028 0008                  		move.w	8(a0),d0
0001BA8E 0240 FF80                  		andi.w	#$FF80,d0
0001BA92 3238 F700                  		move.w	($FFFFF700).w,d1
0001BA96 0441 0080                  		subi.w	#$80,d1
0001BA9A 0241 FF80                  		andi.w	#$FF80,d1
0001BA9E 9041                       		sub.w	d1,d0
0001BAA0 0C40 0280                  		cmpi.w	#$280,d0
0001BAA4 6200 0000                  		bhi.w	Obj60_ChkGone
0001BAA8 6000 A2C8                  		bra.w	DisplaySprite
0001BAAC                            ; ===========================================================================
0001BAAC                            
0001BAAC                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001BAAC                            ;		lea	(v_objstate).w,a2
0001BAAC 7000                       		moveq	#0,d0
0001BAAE 3028 0014                  		move.w	respawn_index(a0),d0
0001BAB2                            ;        move.w	respawn_index(a0),d0
0001BAB2 6700                       		beq.s	loc_11E34
0001BAB4 3440                       	    movea.w	d0,a2		
0001BAB6 0892 0007                  		bclr	#7,(a2)
0001BABA                            
0001BABA                            loc_11E34:
0001BABA 45E8 0037                  		lea	$37(a0),a2
0001BABE 7400                       		moveq	#0,d2
0001BAC0 141A                       		move.b	(a2)+,d2
0001BAC2 5342                       		subq.w	#1,d2
0001BAC4 6500                       		bcs.s	Obj60_Delete
0001BAC6                            
0001BAC6                            loc_11E40:
0001BAC6 7000                       		moveq	#0,d0
0001BAC8 101A                       		move.b	(a2)+,d0
0001BACA ED48                       		lsl.w	#6,d0
0001BACC 0680 00FF D000             		addi.l	#$FFD000,d0
0001BAD2 2240                       		movea.l	d0,a1
0001BAD4 4EBA A252                  		jsr	DeleteObject2
0001BAD8 51CA FFEC                  		dbf	d2,loc_11E40
0001BADC                            
0001BADC                            Obj60_Delete:
0001BADC 6000 A248                  		bra.w	DeleteObject
0001BAE0                            ; ===========================================================================
0001BAE0                            
0001BAE0                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001BAE0 2268 003C                  		movea.l	$3C(a0),a1
0001BAE4 0C11 0060                  		cmpi.b	#$60,0(a1)
0001BAE8 6600 A23C                  		bne.w	DeleteObject
0001BAEC 0C29 0002 001A             		cmpi.b	#2,mapping_frame(a1)
0001BAF2 6600                       		bne.s	Obj60_Circle
0001BAF4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001BAFA 6600                       		bne.s	Obj60_Circle
0001BAFC 5428 0024                  		addq.b	#2,routine(a0)
0001BB00 5329 0037                  		subq.b	#1,$37(a1)
0001BB04 6600                       		bne.s	Obj60_FireOrb
0001BB06 5429 0024                  		addq.b	#2,routine(a1)
0001BB0A                            
0001BB0A                            Obj60_FireOrb:
0001BB0A 317C FE00 0010             		move.w	#-$200,x_vel(a0)	; move orb to the left (quickly)
0001BB10 0829 0000 0022             		btst	#0,status(a1)
0001BB16 6700                       		beq.s	Obj60_Display2
0001BB18 4468 0010                  		neg.w	x_vel(a0)
0001BB1C                            
0001BB1C                            Obj60_Display2:
0001BB1C 6000 A254                  		bra.w	DisplaySprite
0001BB20                            ; ===========================================================================
0001BB20                            
0001BB20                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001BB20 1028 0026                  		move.b	$26(a0),d0
0001BB24 4EB9 0000 8F30             		jsr	(CalcSine).l
0001BB2A E841                       		asr.w	#4,d1
0001BB2C D269 0008                  		add.w	8(a1),d1
0001BB30 3141 0008                  		move.w	d1,8(a0)
0001BB34 E840                       		asr.w	#4,d0
0001BB36 D069 000C                  		add.w	$C(a1),d0
0001BB3A 3140 000C                  		move.w	d0,$C(a0)
0001BB3E 1029 0036                  		move.b	$36(a1),d0
0001BB42 D128 0026                  		add.b	d0,$26(a0)
0001BB46 6000 A22A                  		bra.w	DisplaySprite
0001BB4A                            ; ===========================================================================
0001BB4A                            
0001BB4A                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001BB4A 4EBA A1C0                  		jsr	SpeedToPos
0001BB4E 4A28 0001                  		tst.b	1(a0)
0001BB52 6A00 A1D2                  		bpl.w	DeleteObject
0001BB56 6000 A21A                  		bra.w	DisplaySprite
0001BB5A                            ; ===========================================================================
0001BB5A                            Ani_obj60:
0001BB5A                            	include "_anim\obj60.asm"
0001BB5A                            ; ---------------------------------------------------------------------------
0001BB5A                            ; Animation script - Orbinaut enemy
0001BB5A                            ; ---------------------------------------------------------------------------
0001BB5A 0000                       		dc.w byte_11EDA-Ani_obj60
0001BB5C 0000                       		dc.w byte_11EDE-Ani_obj60
0001BB5E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001BB62 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001BB68                            		even
0001BB68                            		even
0001BB68                            
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            Map_obj60:
0001BB68                            	include "_maps\obj60.asm"
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001BB68                            ; ---------------------------------------------------------------------------
0001BB68 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001BB6C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001BB70 01                         byte_11EEC:	dc.b 1
0001BB71 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BB76 01                         byte_11EF2:	dc.b 1
0001BB77 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001BB7C 01                         byte_11EF8:	dc.b 1
0001BB7D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BB82 01                         byte_11EFE:	dc.b 1
0001BB83 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001BB88                            		even
0001BB88                            		even
0001BB88                            
0001BB88                            ; ===========================================================================
0001BB88                            ; ---------------------------------------------------------------------------
0001BB88                            ; Object 16 - harpoon (LZ)
0001BB88                            ; ---------------------------------------------------------------------------
0001BB88                            
0001BB88                            Obj16:					; XREF: Obj_Index
0001BB88 7000                       		moveq	#0,d0
0001BB8A 1028 0024                  		move.b	routine(a0),d0
0001BB8E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001BB92 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001BB96                            ; ===========================================================================
0001BB96 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001BB98 0000                       		dc.w Obj16_Move-Obj16_Index
0001BB9A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001BB9C                            ; ===========================================================================
0001BB9C                            
0001BB9C                            Obj16_Main:				; XREF: Obj16_Index
0001BB9C 5428 0024                  		addq.b	#2,routine(a0)
0001BBA0 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001BBA8 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001BBAE 0028 0004 0001             		ori.b	#4,1(a0)
0001BBB4 317C 0200 0018             		move.w	#$200,priority(a0)
0001BBBA 1168 0028 001C             		move.b	subtype(a0),anim(a0)
0001BBC0 117C 0014 0023             		move.b	#$14,width_pixels(a0)
0001BBC6 317C 003C 0030             		move.w	#60,$30(a0)
0001BBCC                            
0001BBCC                            Obj16_Move:				; XREF: Obj16_Index
0001BBCC 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001BBD2 4EB9 0001 2754             		jsr	AnimateSprite
0001BBD8 7000                       		moveq	#0,d0
0001BBDA 1028 001A                  		move.b	mapping_frame(a0),d0	; move frame number to d0
0001BBDE 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),collision_flags(a0) ; load collision response (based on	d0)
0001BBE4 6000 D2C0                  		bra.w	MarkObjGone
0001BBE8                            ; ===========================================================================
0001BBE8 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            Obj16_Wait:				; XREF: Obj16_Index
0001BBEE 5368 0030                  		subq.w	#1,$30(a0)
0001BBF2 6A00                       		bpl.s	Obj16_ChkDel
0001BBF4 317C 003C 0030             		move.w	#60,$30(a0)
0001BBFA 5528 0024                  		subq.b	#2,routine(a0)	; run "Obj16_Move" subroutine
0001BBFE 0868 0000 001C             		bchg	#0,anim(a0)	; reverse animation
0001BC04                            
0001BC04                            Obj16_ChkDel:
0001BC04 6000 D2A0                  		bra.w	MarkObjGone
0001BC08                            ; ===========================================================================
0001BC08                            Ani_obj16:
0001BC08                            	include "_anim\obj16.asm"
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08                            ; Animation script - harpoon (LZ)
0001BC08                            ; ---------------------------------------------------------------------------
0001BC08 0000                       		dc.w byte_11F8A-Ani_obj16
0001BC0A 0000                       		dc.w byte_11F8E-Ani_obj16
0001BC0C 0000                       		dc.w byte_11F92-Ani_obj16
0001BC0E 0000                       		dc.w byte_11F96-Ani_obj16
0001BC10 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001BC14 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001BC18 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001BC1C 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001BC20                            		even
0001BC20                            		even
0001BC20                            
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20                            ; Sprite mappings - harpoon (LZ)
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20                            Map_obj16:
0001BC20                            	include "_maps\obj16.asm"
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20                            ; Sprite mappings - harpoon (LZ)
0001BC20                            ; ---------------------------------------------------------------------------
0001BC20 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001BC24 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001BC28 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001BC2C 01                         byte_11FA6:	dc.b 1
0001BC2D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001BC32 01                         byte_11FAC:	dc.b 1
0001BC33 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001BC38 02                         byte_11FB2:	dc.b 2
0001BC39 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001BC3E FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001BC43 01                         byte_11FBD:	dc.b 1
0001BC44 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001BC49 01                         byte_11FC3:	dc.b 1
0001BC4A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001BC4F 02                         byte_11FC9:	dc.b 2
0001BC50 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001BC55 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001BC5A                            		even
0001BC5A                            		even
0001BC5A                            
0001BC5A                            ; ===========================================================================
0001BC5A                            ; ---------------------------------------------------------------------------
0001BC5A                            ; Object 61 - blocks (LZ)
0001BC5A                            ; ---------------------------------------------------------------------------
0001BC5A                            
0001BC5A                            Obj61:					; XREF: Obj_Index
0001BC5A 7000                       		moveq	#0,d0
0001BC5C 1028 0024                  		move.b	routine(a0),d0
0001BC60 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001BC64 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001BC68                            ; ===========================================================================
0001BC68 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001BC6A 0000                       		dc.w Obj61_Action-Obj61_Index
0001BC6C                            
0001BC6C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001BC6E 200C                       		dc.b $20, $C
0001BC70 1010                       		dc.b $10, $10
0001BC72 1010                       		dc.b $10, $10
0001BC74                            ; ===========================================================================
0001BC74                            
0001BC74                            Obj61_Main:				; XREF: Obj61_Index
0001BC74 5428 0024                  		addq.b	#2,routine(a0)
0001BC78 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001BC80 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001BC86 117C 0004 0001             		move.b	#4,1(a0)
0001BC8C 317C 0180 0018             		move.w	#$180,priority(a0)
0001BC92 7000                       		moveq	#0,d0
0001BC94 1028 0028                  		move.b	subtype(a0),d0
0001BC98 E648                       		lsr.w	#3,d0
0001BC9A 0240 000E                  		andi.w	#$E,d0
0001BC9E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001BCA2 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001BCA6 1152 0016                  		move.b	(a2),$16(a0)
0001BCAA E248                       		lsr.w	#1,d0
0001BCAC 1140 001A                  		move.b	d0,mapping_frame(a0)
0001BCB0 3168 0008 0034             		move.w	8(a0),$34(a0)
0001BCB6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BCBC 1028 0028                  		move.b	subtype(a0),d0
0001BCC0 0200 000F                  		andi.b	#$F,d0
0001BCC4 6700                       		beq.s	Obj61_Action
0001BCC6 0C00 0007                  		cmpi.b	#7,d0
0001BCCA 6700                       		beq.s	Obj61_Action
0001BCCC 117C 0001 0038             		move.b	#1,$38(a0)
0001BCD2                            
0001BCD2                            Obj61_Action:				; XREF: Obj61_Index
0001BCD2 3F28 0008                  		move.w	8(a0),-(sp)
0001BCD6 7000                       		moveq	#0,d0
0001BCD8 1028 0028                  		move.b	subtype(a0),d0
0001BCDC 0240 000F                  		andi.w	#$F,d0
0001BCE0 D040                       		add.w	d0,d0
0001BCE2 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001BCE6 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001BCEA 381F                       		move.w	(sp)+,d4
0001BCEC 4A28 0001                  		tst.b	1(a0)
0001BCF0 6A00                       		bpl.s	Obj61_ChkDel
0001BCF2 7200                       		moveq	#0,d1
0001BCF4 1228 0023                  		move.b	width_pixels(a0),d1
0001BCF8 0641 000B                  		addi.w	#$B,d1
0001BCFC 7400                       		moveq	#0,d2
0001BCFE 1428 0016                  		move.b	$16(a0),d2
0001BD02 3602                       		move.w	d2,d3
0001BD04 5243                       		addq.w	#1,d3
0001BD06 4EBA D882                  		jsr	SolidObject
0001BD0A 1144 003F                  		move.b	d4,$3F(a0)
0001BD0E 4EB9 0000 0000             		jsr	loc_12180
0001BD14                            
0001BD14                            Obj61_ChkDel:
0001BD14 3028 0034                  		move.w	$34(a0),d0
0001BD18 4EFA D1C2                  		jmp		MarkObjGone2
0001BD1C                            ; ===========================================================================
0001BD1C 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001BD20 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001BD24 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001BD28 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001BD2C                            ; ===========================================================================
0001BD2C                            
0001BD2C                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001BD2C 4E75                       		rts	
0001BD2E                            ; ===========================================================================
0001BD2E                            
0001BD2E                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001BD2E 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001BD32 6600                       		bne.s	loc_120D6	; if yes, branch
0001BD34 0828 0003 0022             		btst	#3,status(a0)
0001BD3A 6700                       		beq.s	locret_120D4
0001BD3C 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
0001BD42                            
0001BD42                            locret_120D4:
0001BD42 4E75                       		rts	
0001BD44                            ; ===========================================================================
0001BD44                            
0001BD44                            loc_120D6:
0001BD44 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001BD48 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001BD4A 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001BD4E 4228 0038                  		clr.b	$38(a0)
0001BD52 4E75                       		rts	
0001BD54                            ; ===========================================================================
0001BD54                            
0001BD54                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001BD54 4EBA 9FB6                  		jsr	SpeedToPos
0001BD58 5068 0012                  		addq.w	#8,y_vel(a0)	; make object fall
0001BD5C 4EB9 0000 0000             		jsr	ObjHitFloor
0001BD62 4A41                       		tst.w	d1
0001BD64 6A00 0000                  		bpl.w	locret_12106
0001BD68 5241                       		addq.w	#1,d1
0001BD6A D368 000C                  		add.w	d1,$C(a0)
0001BD6E 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the floor
0001BD72 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001BD76                            
0001BD76                            locret_12106:
0001BD76 4E75                       		rts	
0001BD78                            ; ===========================================================================
0001BD78                            
0001BD78                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001BD78 4EBA 9F92                  		jsr	SpeedToPos
0001BD7C 5168 0012                  		subq.w	#8,y_vel(a0)	; make object rise
0001BD80 4EB9 0000 0000             		jsr	ObjHitCeiling
0001BD86 4A41                       		tst.w	d1
0001BD88 6A00 0000                  		bpl.w	locret_12126
0001BD8C 9368 000C                  		sub.w	d1,$C(a0)
0001BD90 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the ceiling
0001BD94 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001BD98                            
0001BD98                            locret_12126:
0001BD98 4E75                       		rts	
0001BD9A                            ; ===========================================================================
0001BD9A                            
0001BD9A                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001BD9A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001BDA0 6600                       		bne.s	locret_12138	; if not, branch
0001BDA2 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001BDA6 4228 0038                  		clr.b	$38(a0)
0001BDAA                            
0001BDAA                            locret_12138:
0001BDAA 4E75                       		rts	
0001BDAC                            ; ===========================================================================
0001BDAC                            
0001BDAC                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001BDAC 3038 F646                  		move.w	($FFFFF646).w,d0
0001BDB0 9068 000C                  		sub.w	$C(a0),d0
0001BDB4 6700                       		beq.s	locret_1217E
0001BDB6 6400                       		bcc.s	loc_12162
0001BDB8 0C40 FFFE                  		cmpi.w	#-2,d0
0001BDBC 6C00                       		bge.s	loc_1214E
0001BDBE 70FE                       		moveq	#-2,d0
0001BDC0                            
0001BDC0                            loc_1214E:
0001BDC0 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001BDC4 4EB9 0000 0000             		jsr	ObjHitCeiling
0001BDCA 4A41                       		tst.w	d1
0001BDCC 6A00 0000                  		bpl.w	locret_12160
0001BDD0 9368 000C                  		sub.w	d1,$C(a0)
0001BDD4                            
0001BDD4                            locret_12160:
0001BDD4 4E75                       		rts	
0001BDD6                            ; ===========================================================================
0001BDD6                            
0001BDD6                            loc_12162:				; XREF: Obj61_Type07
0001BDD6 0C40 0002                  		cmpi.w	#2,d0
0001BDDA 6F00                       		ble.s	loc_1216A
0001BDDC 7002                       		moveq	#2,d0
0001BDDE                            
0001BDDE                            loc_1216A:
0001BDDE D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001BDE2 4EB9 0000 0000             		jsr	ObjHitFloor
0001BDE8 4A41                       		tst.w	d1
0001BDEA 6A00 0000                  		bpl.w	locret_1217E
0001BDEE 5241                       		addq.w	#1,d1
0001BDF0 D368 000C                  		add.w	d1,$C(a0)
0001BDF4                            
0001BDF4                            locret_1217E:
0001BDF4 4E75                       		rts	
0001BDF6                            ; ===========================================================================
0001BDF6                            
0001BDF6                            loc_12180:				; XREF: Obj61_Action
0001BDF6 4A28 0038                  		tst.b	$38(a0)
0001BDFA 6700                       		beq.s	locret_121C0
0001BDFC 0828 0003 0022             		btst	#3,status(a0)
0001BE02 6600                       		bne.s	loc_1219A
0001BE04 4A28 003E                  		tst.b	parent(a0)
0001BE08 6700                       		beq.s	locret_121C0
0001BE0A 5928 003E                  		subq.b	#4,parent(a0)
0001BE0E 6000                       		bra.s	loc_121A6
0001BE10                            ; ===========================================================================
0001BE10                            
0001BE10                            loc_1219A:
0001BE10 0C28 0040 003E             		cmpi.b	#$40,parent(a0)
0001BE16 6700                       		beq.s	locret_121C0
0001BE18 5828 003E                  		addq.b	#4,parent(a0)
0001BE1C                            
0001BE1C                            loc_121A6:
0001BE1C 1028 003E                  		move.b	parent(a0),d0
0001BE20 4EB9 0000 8F30             		jsr	(CalcSine).l
0001BE26 323C 0400                  		move.w	#$400,d1
0001BE2A C1C1                       		muls.w	d1,d0
0001BE2C 4840                       		swap	d0
0001BE2E D068 0030                  		add.w	$30(a0),d0
0001BE32 3140 000C                  		move.w	d0,$C(a0)
0001BE36                            
0001BE36                            locret_121C0:
0001BE36 4E75                       		rts	
0001BE38                            ; ===========================================================================
0001BE38                            ; ---------------------------------------------------------------------------
0001BE38                            ; Sprite mappings - blocks (LZ)
0001BE38                            ; ---------------------------------------------------------------------------
0001BE38                            Map_obj61:
0001BE38                            	include "_maps\obj61.asm"
0001BE38                            ; ---------------------------------------------------------------------------
0001BE38                            ; Sprite mappings - blocks (LZ)
0001BE38                            ; ---------------------------------------------------------------------------
0001BE38 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001BE3C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001BE40 01                         byte_121CA:	dc.b 1
0001BE41 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BE46 02                         byte_121D0:	dc.b 2
0001BE47 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001BE4C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001BE51 01                         byte_121DB:	dc.b 1
0001BE52 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001BE57 01                         byte_121E1:	dc.b 1
0001BE58 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001BE5E 00                         		even
0001BE5E 00                         		even
0001BE5E                            
0001BE5E                            ; ===========================================================================
0001BE5E                            ; ---------------------------------------------------------------------------
0001BE5E                            ; Object 62 - gargoyle head (LZ)
0001BE5E                            ; ---------------------------------------------------------------------------
0001BE5E                            
0001BE5E                            Obj62:					; XREF: Obj_Index
0001BE5E 7000                       		moveq	#0,d0
0001BE60 1028 0024                  		move.b	routine(a0),d0
0001BE64 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001BE68 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001BE6C 6000 D038                  		bra.w	MarkObjGone
0001BE70                            ; ===========================================================================
0001BE70 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001BE72 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001BE74 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001BE76 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001BE78                            
0001BE78 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001BE80                            ; ===========================================================================
0001BE80                            
0001BE80                            Obj62_Main:				; XREF: Obj62_Index
0001BE80 5428 0024                  		addq.b	#2,routine(a0)
0001BE84 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001BE8C 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001BE92 0028 0004 0001             		ori.b	#4,1(a0)
0001BE98 317C 0180 0018             		move.w	#$180,priority(a0)
0001BE9E 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001BEA4 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001BEA8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001BEAC 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001BEB2 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001BEB8 0228 000F 0028             		andi.b	#$F,subtype(a0)
0001BEBE                            
0001BEBE                            Obj62_MakeFire:				; XREF: Obj62_Index
0001BEBE 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001BEC2 6600                       		bne.s	Obj62_NoFire
0001BEC4 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001BECA 4EBA A25C                  		jsr	ChkObjOnScreen
0001BECE 6600                       		bne.s	Obj62_NoFire
0001BED0 4EBA A9AA                  		jsr	SingleObjLoad
0001BED4 6600                       		bne.s	Obj62_NoFire
0001BED6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001BEDA 5829 0024                  		addq.b	#4,routine(a1)
0001BEDE 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BEEA 1368 0001 0001             		move.b	1(a0),1(a1)
0001BEF0 1368 0022 0022             		move.b	status(a0),status(a1)
0001BEF6                            
0001BEF6                            Obj62_NoFire:
0001BEF6 4E75                       		rts	
0001BEF8                            ; ===========================================================================
0001BEF8                            
0001BEF8                            Obj62_FireBall:				; XREF: Obj62_Index
0001BEF8 5428 0024                  		addq.b	#2,routine(a0)
0001BEFC 117C 0008 0016             		move.b	#8,$16(a0)
0001BF02 117C 0008 0017             		move.b	#8,$17(a0)
0001BF08 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001BF10 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001BF16 0028 0004 0001             		ori.b	#4,1(a0)
0001BF1C 317C 0200 0018             		move.w	#$200,priority(a0)
0001BF22 117C 0098 0020             		move.b	#$98,collision_flags(a0)
0001BF28 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001BF2E 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001BF34 5068 000C                  		addq.w	#8,$C(a0)
0001BF38 317C 0200 0010             		move.w	#$200,x_vel(a0)
0001BF3E 0828 0000 0022             		btst	#0,status(a0)
0001BF44 6600                       		bne.s	Obj62_Sound
0001BF46 4468 0010                  		neg.w	x_vel(a0)
0001BF4A                            
0001BF4A                            Obj62_Sound:
0001BF4A 303C 00AE                  		move.w	#$AE,d0
0001BF4E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001BF54                            
0001BF54                            Obj62_AniFire:				; XREF: Obj62_Index
0001BF54 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001BF58 0200 0007                  		andi.b	#7,d0
0001BF5C 6600                       		bne.s	Obj62_StopFire
0001BF5E 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; switch between frame 01 and 02
0001BF64                            
0001BF64                            Obj62_StopFire:
0001BF64 4EBA 9DA6                  		jsr	SpeedToPos
0001BF68 0828 0000 0022             		btst	#0,status(a0)
0001BF6E 6600                       		bne.s	Obj62_StopFire2
0001BF70 76F8                       		moveq	#-8,d3
0001BF72 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001BF78 4A41                       		tst.w	d1
0001BF7A 6B00 9DAA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001BF7E 4E75                       		rts	
0001BF80                            ; ===========================================================================
0001BF80                            
0001BF80                            Obj62_StopFire2:
0001BF80 7608                       		moveq	#8,d3
0001BF82 4EB9 0000 0000             		jsr	ObjHitWallRight
0001BF88 4A41                       		tst.w	d1
0001BF8A 6B00 9D9A                  		bmi.w	DeleteObject
0001BF8E 4E75                       		rts	
0001BF90                            ; ===========================================================================
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            ; Sprite mappings - gargoyle head (LZ)
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            Map_obj62:
0001BF90                            	include "_maps\obj62.asm"
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            ; Sprite mappings - gargoyle head (LZ)
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001BF94 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001BF98 03                         byte_12320:	dc.b 3
0001BF99 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001BF9E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001BFA3 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001BFA8 01                         byte_12330:	dc.b 1
0001BFA9 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001BFAE 01                         byte_12336:	dc.b 1
0001BFAF FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001BFB4                            		even
0001BFB4                            		even
0001BFB4                            
0001BFB4                            ; ===========================================================================
0001BFB4                            ; ---------------------------------------------------------------------------
0001BFB4                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001BFB4                            ; ---------------------------------------------------------------------------
0001BFB4                            
0001BFB4                            Obj63:					; XREF: Obj_Index
0001BFB4 7000                       		moveq	#0,d0
0001BFB6 1028 0024                  		move.b	routine(a0),d0
0001BFBA 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001BFBE 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001BFC2 3028 0030                  		move.w	$30(a0),d0
0001BFC6 0240 FF80                  		andi.w	#$FF80,d0
0001BFCA 3238 F700                  		move.w	($FFFFF700).w,d1
0001BFCE 0441 0080                  		subi.w	#$80,d1
0001BFD2 0241 FF80                  		andi.w	#$FF80,d1
0001BFD6 9041                       		sub.w	d1,d0
0001BFD8 0C40 0280                  		cmpi.w	#$280,d0
0001BFDC 6200                       		bhi.s	loc_1236A
0001BFDE                            
0001BFDE                            Obj63_Display:				; XREF: loc_1236A
0001BFDE 6000 9D92                  		bra.w	DisplaySprite
0001BFE2                            ; ===========================================================================
0001BFE2                            
0001BFE2                            loc_1236A:				; XREF: Obj63
0001BFE2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001BFE8 6600                       		bne.s	loc_12378
0001BFEA 0C40 FF80                  		cmpi.w	#-$80,d0
0001BFEE 64EE                       		bcc.s	Obj63_Display
0001BFF0                            
0001BFF0                            loc_12378:
0001BFF0 1028 002F                  		move.b	$2F(a0),d0
0001BFF4 6A00 9D30                  		bpl.w	DeleteObject
0001BFF8 0240 007F                  		andi.w	#$7F,d0
0001BFFC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001C000 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001C006 6000 9D1E                  		bra.w	DeleteObject
0001C00A                            ; ===========================================================================
0001C00A 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001C00C 0000                       		dc.w loc_124B2-Obj63_Index
0001C00E 0000                       		dc.w loc_124C2-Obj63_Index
0001C010 0000                       		dc.w loc_124DE-Obj63_Index
0001C012                            ; ===========================================================================
0001C012                            
0001C012                            Obj63_Main:				; XREF: Obj63_Index
0001C012 1028 0028                  		move.b	subtype(a0),d0
0001C016 6B00 0000                  		bmi.w	loc_12460
0001C01A 5428 0024                  		addq.b	#2,routine(a0)
0001C01E 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001C026 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001C02C 0028 0004 0001             		ori.b	#4,1(a0)
0001C032 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001C038 317C 0200 0018             		move.w	#$200,priority(a0)
0001C03E 0C28 007F 0028             		cmpi.b	#$7F,subtype(a0)
0001C044 6600                       		bne.s	loc_123E2
0001C046 5828 0024                  		addq.b	#4,routine(a0)
0001C04A 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001C050 317C 0080 0018             		move.w	#$80,priority(a0)
0001C056 6000 0000                  		bra.w	loc_124DE
0001C05A                            ; ===========================================================================
0001C05A                            
0001C05A                            loc_123E2:
0001C05A 117C 0004 001A             		move.b	#4,mapping_frame(a0)
0001C060 7000                       		moveq	#0,d0
0001C062 1028 0028                  		move.b	subtype(a0),d0
0001C066 3200                       		move.w	d0,d1
0001C068 E648                       		lsr.w	#3,d0
0001C06A 0240 001E                  		andi.w	#$1E,d0
0001C06E 45FA 0000                  		lea	Obj63_Data(pc),a2
0001C072 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001C076 315A 0038                  		move.w	(a2)+,$38(a0)
0001C07A 315A 0030                  		move.w	(a2)+,$30(a0)
0001C07E 214A 003C                  		move.l	a2,$3C(a0)
0001C082 0241 000F                  		andi.w	#$F,d1
0001C086 E549                       		lsl.w	#2,d1
0001C088 1141 0038                  		move.b	d1,$38(a0)
0001C08C 117C 0004 003A             		move.b	#4,$3A(a0)
0001C092 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001C096 6700                       		beq.s	loc_1244C
0001C098 117C 0001 003B             		move.b	#1,$3B(a0)
0001C09E 4428 003A                  		neg.b	$3A(a0)
0001C0A2 7200                       		moveq	#0,d1
0001C0A4 1228 0038                  		move.b	$38(a0),d1
0001C0A8 D228 003A                  		add.b	$3A(a0),d1
0001C0AC B228 0039                  		cmp.b	$39(a0),d1
0001C0B0 6500                       		bcs.s	loc_12448
0001C0B2 1001                       		move.b	d1,d0
0001C0B4 7200                       		moveq	#0,d1
0001C0B6 4A00                       		tst.b	d0
0001C0B8 6A00                       		bpl.s	loc_12448
0001C0BA 1228 0039                  		move.b	$39(a0),d1
0001C0BE 5901                       		subq.b	#4,d1
0001C0C0                            
0001C0C0                            loc_12448:
0001C0C0 1141 0038                  		move.b	d1,$38(a0)
0001C0C4                            
0001C0C4                            loc_1244C:
0001C0C4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001C0CA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001C0D0 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001C0D6 6000 0000                  		bra.w	loc_124B2
0001C0DA                            ; ===========================================================================
0001C0DA                            
0001C0DA                            loc_12460:				; XREF: Obj63_Main
0001C0DA 1140 002F                  		move.b	d0,$2F(a0)
0001C0DE 0240 007F                  		andi.w	#$7F,d0
0001C0E2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001C0E6 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001C0EC 6600 9C38                  		bne.w	DeleteObject
0001C0F0 D040                       		add.w	d0,d0
0001C0F2 0240 001E                  		andi.w	#$1E,d0
0001C0F6 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001C0FC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001C100 321A                       		move.w	(a2)+,d1
0001C102 2248                       		movea.l	a0,a1
0001C104 6000                       		bra.s	Obj63_MakePtfms
0001C106                            ; ===========================================================================
0001C106                            
0001C106                            Obj63_Loop:
0001C106 4EBA A774                  		jsr	SingleObjLoad
0001C10A 6600                       		bne.s	loc_124AA
0001C10C                            
0001C10C                            Obj63_MakePtfms:			; XREF: loc_12460
0001C10C 12BC 0063                  		move.b	#$63,0(a1)
0001C110 335A 0008                  		move.w	(a2)+,8(a1)
0001C114 335A 000C                  		move.w	(a2)+,$C(a1)
0001C118 301A                       		move.w	(a2)+,d0
0001C11A 1340 0028                  		move.b	d0,subtype(a1)
0001C11E                            
0001C11E                            loc_124AA:
0001C11E 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001C122                            
0001C122 588F                       		addq.l	#4,sp
0001C124 4E75                       		rts	
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            loc_124B2:				; XREF: Obj63_Index
0001C126 7200                       		moveq	#0,d1
0001C128 1228 0023                  		move.b	width_pixels(a0),d1
0001C12C 4EB9 0000 F1D0             		jsr	(PlatformObject).l
0001C132 6000 0000                  		bra.w	sub_12502
0001C136                            ; ===========================================================================
0001C136                            
0001C136                            loc_124C2:				; XREF: Obj63_Index
0001C136 7200                       		moveq	#0,d1
0001C138 1228 0023                  		move.b	width_pixels(a0),d1
0001C13C 4EB9 0000 F310             		jsr	(ExitPlatform).l
0001C142 3F28 0008                  		move.w	8(a0),-(sp)
0001C146 4EB9 0000 0000             		jsr	sub_12502
0001C14C 341F                       		move.w	(sp)+,d2
0001C14E 4EF9 0000 F576             		jmp	(MvSonicOnPtfm2).l
0001C154                            ; ===========================================================================
0001C154                            
0001C154                            loc_124DE:				; XREF: Obj63_Index
0001C154 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001C158 0240 0003                  		andi.w	#3,d0
0001C15C 6600                       		bne.s	loc_124FC
0001C15E 7201                       		moveq	#1,d1
0001C160 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001C164 6700                       		beq.s	loc_124F2
0001C166 4401                       		neg.b	d1
0001C168                            
0001C168                            loc_124F2:
0001C168 D328 001A                  		add.b	d1,mapping_frame(a0)
0001C16C 0228 0003 001A             		andi.b	#3,mapping_frame(a0)
0001C172                            
0001C172                            loc_124FC:
0001C172 588F                       		addq.l	#4,sp
0001C174 6000 CD30                  		bra.w	MarkObjGone
0001C178                            
0001C178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C178                            
0001C178                            
0001C178                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001C178 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001C17C 6700                       		beq.s	loc_12520
0001C17E 4A28 003B                  		tst.b	$3B(a0)
0001C182 6600                       		bne.s	loc_12520
0001C184 117C 0001 003B             		move.b	#1,$3B(a0)
0001C18A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001C190 4428 003A                  		neg.b	$3A(a0)
0001C194 6000                       		bra.s	loc_12534
0001C196                            ; ===========================================================================
0001C196                            
0001C196                            loc_12520:
0001C196 3028 0008                  		move.w	8(a0),d0
0001C19A B068 0034                  		cmp.w	$34(a0),d0
0001C19E 6600                       		bne.s	loc_1256A
0001C1A0 3028 000C                  		move.w	$C(a0),d0
0001C1A4 B068 0036                  		cmp.w	$36(a0),d0
0001C1A8 6600                       		bne.s	loc_1256A
0001C1AA                            
0001C1AA                            loc_12534:
0001C1AA 7200                       		moveq	#0,d1
0001C1AC 1228 0038                  		move.b	$38(a0),d1
0001C1B0 D228 003A                  		add.b	$3A(a0),d1
0001C1B4 B228 0039                  		cmp.b	$39(a0),d1
0001C1B8 6500                       		bcs.s	loc_12552
0001C1BA 1001                       		move.b	d1,d0
0001C1BC 7200                       		moveq	#0,d1
0001C1BE 4A00                       		tst.b	d0
0001C1C0 6A00                       		bpl.s	loc_12552
0001C1C2 1228 0039                  		move.b	$39(a0),d1
0001C1C6 5901                       		subq.b	#4,d1
0001C1C8                            
0001C1C8                            loc_12552:
0001C1C8 1141 0038                  		move.b	d1,$38(a0)
0001C1CC 2268 003C                  		movea.l	$3C(a0),a1
0001C1D0 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001C1D6 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001C1DC 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001C1E2                            
0001C1E2                            loc_1256A:
0001C1E2 4EBA 9B28                  		jsr	SpeedToPos
0001C1E6 4E75                       		rts	
0001C1E8                            ; End of function sub_12502
0001C1E8                            
0001C1E8                            
0001C1E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1E8                            
0001C1E8                            
0001C1E8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001C1E8 7000                       		moveq	#0,d0
0001C1EA 343C FF00                  		move.w	#-$100,d2
0001C1EE 3028 0008                  		move.w	8(a0),d0
0001C1F2 9068 0034                  		sub.w	$34(a0),d0
0001C1F6 6400                       		bcc.s	loc_12584
0001C1F8 4440                       		neg.w	d0
0001C1FA 4442                       		neg.w	d2
0001C1FC                            
0001C1FC                            loc_12584:
0001C1FC 7200                       		moveq	#0,d1
0001C1FE 363C FF00                  		move.w	#-$100,d3
0001C202 3228 000C                  		move.w	$C(a0),d1
0001C206 9268 0036                  		sub.w	$36(a0),d1
0001C20A 6400                       		bcc.s	loc_12598
0001C20C 4441                       		neg.w	d1
0001C20E 4443                       		neg.w	d3
0001C210                            
0001C210                            loc_12598:
0001C210 B240                       		cmp.w	d0,d1
0001C212 6500                       		bcs.s	loc_125C2
0001C214 3028 0008                  		move.w	8(a0),d0
0001C218 9068 0034                  		sub.w	$34(a0),d0
0001C21C 6700                       		beq.s	loc_125AE
0001C21E 48C0                       		ext.l	d0
0001C220 E180                       		asl.l	#8,d0
0001C222 81C1                       		divs.w	d1,d0
0001C224 4440                       		neg.w	d0
0001C226                            
0001C226                            loc_125AE:
0001C226 3140 0010                  		move.w	d0,x_vel(a0)
0001C22A 3143 0012                  		move.w	d3,y_vel(a0)
0001C22E 4840                       		swap	d0
0001C230 3140 000A                  		move.w	d0,$A(a0)
0001C234 4268 000E                  		clr.w	$E(a0)
0001C238 4E75                       		rts	
0001C23A                            ; ===========================================================================
0001C23A                            
0001C23A                            loc_125C2:				; XREF: Obj63_ChangeDir
0001C23A 3228 000C                  		move.w	$C(a0),d1
0001C23E 9268 0036                  		sub.w	$36(a0),d1
0001C242 6700                       		beq.s	loc_125D4
0001C244 48C1                       		ext.l	d1
0001C246 E181                       		asl.l	#8,d1
0001C248 83C0                       		divs.w	d0,d1
0001C24A 4441                       		neg.w	d1
0001C24C                            
0001C24C                            loc_125D4:
0001C24C 3141 0012                  		move.w	d1,y_vel(a0)
0001C250 3142 0010                  		move.w	d2,x_vel(a0)
0001C254 4841                       		swap	d1
0001C256 3141 000E                  		move.w	d1,$E(a0)
0001C25A 4268 000A                  		clr.w	$A(a0)
0001C25E 4E75                       		rts	
0001C260                            ; End of function Obj63_ChangeDir
0001C260                            
0001C260                            ; ===========================================================================
0001C260 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001C262 0000                       		dc.w word_12610-Obj63_Data
0001C264 0000                       		dc.w word_12628-Obj63_Data
0001C266 0000                       		dc.w word_1263C-Obj63_Data
0001C268 0000                       		dc.w word_12650-Obj63_Data
0001C26A 0000                       		dc.w word_12668-Obj63_Data
0001C26C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001C27C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001C288 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001C298 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001C2A0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001C2B4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001C2C8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001C2E0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001C2F4                            
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            Map_obj63:
0001C2F4                            	include "_maps\obj63.asm"
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001C2F4                            ; ---------------------------------------------------------------------------
0001C2F4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001C2F8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001C2FC 0000                       		dc.w byte_1269E-Map_obj63
0001C2FE 01                         byte_12686:	dc.b 1
0001C2FF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001C304 01                         byte_1268C:	dc.b 1
0001C305 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001C30A 01                         byte_12692:	dc.b 1
0001C30B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001C310 01                         byte_12698:	dc.b 1
0001C311 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001C316 01                         byte_1269E:	dc.b 1
0001C317 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001C31C                            		even
0001C31C                            		even
0001C31C                            
0001C31C                            ; ===========================================================================
0001C31C                            ; ---------------------------------------------------------------------------
0001C31C                            ; Object 64 - bubbles (LZ)
0001C31C                            ; ---------------------------------------------------------------------------
0001C31C                            
0001C31C                            Obj64:					; XREF: Obj_Index
0001C31C 7000                       		moveq	#0,d0
0001C31E 1028 0024                  		move.b	routine(a0),d0
0001C322 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001C326 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001C32A                            ; ===========================================================================
0001C32A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001C32C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001C32E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001C330 0000                       		dc.w Obj64_Display2-Obj64_Index
0001C332 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001C334 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001C336                            ; ===========================================================================
0001C336                            
0001C336                            Obj64_Main:				; XREF: Obj64_Index
0001C336 5428 0024                  		addq.b	#2,routine(a0)
0001C33A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001C342 317C 8348 0002             		move.w	#$8348,2(a0)
0001C348 117C 0084 0001             		move.b	#$84,1(a0)
0001C34E 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001C354 317C 0080 0018             		move.w	#$80,priority(a0)
0001C35A 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001C35E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001C360 5028 0024                  		addq.b	#8,routine(a0)
0001C364 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001C368 1140 0032                  		move.b	d0,$32(a0)
0001C36C 1140 0033                  		move.b	d0,$33(a0)
0001C370 117C 0006 001C             		move.b	#6,anim(a0)
0001C376 6000 0000                  		bra.w	Obj64_BblMaker
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            Obj64_Bubble:				; XREF: Obj64_Main
0001C37A 1140 001C                  		move.b	d0,anim(a0)
0001C37E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001C384 317C FF78 0012             		move.w	#-$88,y_vel(a0)	; float	bubble upwards
0001C38A 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C390 1140 0026                  		move.b	d0,$26(a0)
0001C394                            
0001C394                            Obj64_Animate:				; XREF: Obj64_Index
0001C394 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001C39A 4EB9 0001 2754             		jsr	AnimateSprite
0001C3A0 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
0001C3A6 6600                       		bne.s	Obj64_ChkWater
0001C3A8 117C 0001 002E             		move.b	#1,move_lock(a0)
0001C3AE                            
0001C3AE                            Obj64_ChkWater:				; XREF: Obj64_Index
0001C3AE 3038 F646                  		move.w	($FFFFF646).w,d0
0001C3B2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001C3B6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001C3B8                            
0001C3B8                            Obj64_Burst:				; XREF: Obj64_Wobble
0001C3B8 117C 0006 0024             		move.b	#6,routine(a0)
0001C3BE 5628 001C                  		addq.b	#3,anim(a0)	; run "bursting" animation
0001C3C2 6000 0000                  		bra.w	Obj64_Display2
0001C3C6                            ; ===========================================================================
0001C3C6                            
0001C3C6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001C3C6 1028 0026                  		move.b	$26(a0),d0
0001C3CA 5228 0026                  		addq.b	#1,$26(a0)
0001C3CE 0240 007F                  		andi.w	#$7F,d0
0001C3D2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001C3D8 1031 0000                  		move.b	(a1,d0.w),d0
0001C3DC 4880                       		ext.w	d0
0001C3DE D068 0030                  		add.w	$30(a0),d0
0001C3E2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001C3E6 4A28 002E                  		tst.b	move_lock(a0)
0001C3EA 6700                       		beq.s	Obj64_Display
0001C3EC 4EB9 0000 0000             		jsr	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001C3F2 6700                       		beq.s	Obj64_Display	; if not, branch
0001C3F4                            
0001C3F4 4EB9 0000 0000             		jsr	ResumeMusic	; cancel countdown music
0001C3FA 303C 00AD                  		move.w	#$AD,d0
0001C3FE 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001C404 43F8 D000                  		lea	($FFFFD000).w,a1
0001C408 4269 0010                  		clr.w	x_vel(a1)
0001C40C 4269 0012                  		clr.w	y_vel(a1)
0001C410 4269 0020                  		clr.w	inertia(a1)
0001C414 137C 0015 001C             		move.b	#$15,anim(a1)
0001C41A 337C 0023 003E             		move.w	#$23,parent(a1)
0001C420 137C 0000 003C             		move.b	#0,$3C(a1)
0001C426 08A9 0005 0022             		bclr	#5,status(a1)
0001C42C 08A9 0004 0022             		bclr	#4,status(a1)
0001C432 0829 0002 0022             		btst	#2,status(a1)
0001C438 6700 FF7E                  		beq.w	Obj64_Burst
0001C43C 08A9 0002 0022             		bclr	#2,status(a1)
0001C442 137C 0013 0016             		move.b	#$13,$16(a1)
0001C448 137C 0009 0017             		move.b	#9,$17(a1)
0001C44E 5B69 000C                  		subq.w	#5,$C(a1)
0001C452 6000 FF64                  		bra.w	Obj64_Burst
0001C456                            ; ===========================================================================
0001C456                            
0001C456                            Obj64_Display:				; XREF: Obj64_Wobble
0001C456 4EBA 98B4                  		jsr	SpeedToPos
0001C45A 4A28 0001                  		tst.b	1(a0)
0001C45E 6A00                       		bpl.s	Obj64_Delete
0001C460 4EFA 9910                  		jmp	DisplaySprite
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            Obj64_Delete:
0001C464 4EFA 98C0                  		jmp	DeleteObject
0001C468                            ; ===========================================================================
0001C468                            
0001C468                            Obj64_Display2:				; XREF: Obj64_Index
0001C468 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001C46E 4EB9 0001 2754             		jsr	AnimateSprite
0001C474 4A28 0001                  		tst.b	1(a0)
0001C478 6A00                       		bpl.s	Obj64_Delete2
0001C47A 4EFA 98F6                  		jmp	DisplaySprite
0001C47E                            ; ===========================================================================
0001C47E                            
0001C47E                            Obj64_Delete2:
0001C47E 4EFA 98A6                  		jmp	DeleteObject
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            Obj64_Delete3:				; XREF: Obj64_Index
0001C482 6000 98A2                  		bra.w	DeleteObject
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            Obj64_BblMaker:				; XREF: Obj64_Index
0001C486 4A68 0036                  		tst.w	$36(a0)
0001C48A 6600                       		bne.s	loc_12874
0001C48C 3038 F646                  		move.w	($FFFFF646).w,d0
0001C490 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001C494 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001C498 4A28 0001                  		tst.b	1(a0)
0001C49C 6A00 0000                  		bpl.w	Obj64_ChkDel
0001C4A0 5368 0038                  		subq.w	#1,$38(a0)
0001C4A4 6A00 0000                  		bpl.w	loc_12914
0001C4A8 317C 0001 0036             		move.w	#1,$36(a0)
0001C4AE                            
0001C4AE                            loc_1283A:
0001C4AE 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C4B4 3200                       		move.w	d0,d1
0001C4B6 0240 0007                  		andi.w	#7,d0
0001C4BA 0C40 0006                  		cmpi.w	#6,d0
0001C4BE 64EE                       		bcc.s	loc_1283A
0001C4C0                            
0001C4C0 1140 0034                  		move.b	d0,$34(a0)
0001C4C4 0241 000C                  		andi.w	#$C,d1
0001C4C8 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001C4CE D2C1                       		adda.w	d1,a1
0001C4D0 2149 003C                  		move.l	a1,$3C(a0)
0001C4D4 5328 0032                  		subq.b	#1,$32(a0)
0001C4D8 6A00                       		bpl.s	loc_12872
0001C4DA 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001C4E0 08E8 0007 0036             		bset	#7,$36(a0)
0001C4E6                            
0001C4E6                            loc_12872:
0001C4E6 6000                       		bra.s	loc_1287C
0001C4E8                            ; ===========================================================================
0001C4E8                            
0001C4E8                            loc_12874:				; XREF: Obj64_BblMaker
0001C4E8 5368 0038                  		subq.w	#1,$38(a0)
0001C4EC 6A00 0000                  		bpl.w	loc_12914
0001C4F0                            
0001C4F0                            loc_1287C:
0001C4F0 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C4F6 0240 001F                  		andi.w	#$1F,d0
0001C4FA 3140 0038                  		move.w	d0,$38(a0)
0001C4FE 4EBA A37C                  		jsr	SingleObjLoad
0001C502 6600                       		bne.s	loc_128F8
0001C504 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001C508 3368 0008 0008             		move.w	8(a0),8(a1)
0001C50E 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C514 0240 000F                  		andi.w	#$F,d0
0001C518 5140                       		subq.w	#8,d0
0001C51A D169 0008                  		add.w	d0,8(a1)
0001C51E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C524 7000                       		moveq	#0,d0
0001C526 1028 0034                  		move.b	$34(a0),d0
0001C52A 2468 003C                  		movea.l	$3C(a0),a2
0001C52E 1372 0000 0028             		move.b	(a2,d0.w),subtype(a1)
0001C534 0828 0007 0036             		btst	#7,$36(a0)
0001C53A 6700                       		beq.s	loc_128F8
0001C53C 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C542 0240 0003                  		andi.w	#3,d0
0001C546 6600                       		bne.s	loc_128E4
0001C548 08E8 0006 0036             		bset	#6,$36(a0)
0001C54E 6600                       		bne.s	loc_128F8
0001C550 137C 0002 0028             		move.b	#2,subtype(a1)
0001C556                            
0001C556                            loc_128E4:
0001C556 4A28 0034                  		tst.b	$34(a0)
0001C55A 6600                       		bne.s	loc_128F8
0001C55C 08E8 0006 0036             		bset	#6,$36(a0)
0001C562 6600                       		bne.s	loc_128F8
0001C564 137C 0002 0028             		move.b	#2,subtype(a1)
0001C56A                            
0001C56A                            loc_128F8:
0001C56A 5328 0034                  		subq.b	#1,$34(a0)
0001C56E 6A00                       		bpl.s	loc_12914
0001C570 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001C576 0240 007F                  		andi.w	#$7F,d0
0001C57A 0640 0080                  		addi.w	#$80,d0
0001C57E D168 0038                  		add.w	d0,$38(a0)
0001C582 4268 0036                  		clr.w	$36(a0)
0001C586                            
0001C586                            loc_12914:
0001C586 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001C58C 4EB9 0001 2754             		jsr	AnimateSprite
0001C592                            
0001C592                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001C592 3028 0008                  		move.w	8(a0),d0
0001C596 0240 FF80                  		andi.w	#$FF80,d0
0001C59A 3238 F700                  		move.w	($FFFFF700).w,d1
0001C59E 0441 0080                  		subi.w	#$80,d1
0001C5A2 0241 FF80                  		andi.w	#$FF80,d1
0001C5A6 9041                       		sub.w	d1,d0
0001C5A8 0C40 0280                  		cmpi.w	#$280,d0
0001C5AC 6200 9778                  		bhi.w	DeleteObject
0001C5B0 3038 F646                  		move.w	($FFFFF646).w,d0
0001C5B4 B068 000C                  		cmp.w	$C(a0),d0
0001C5B8 6500 97B8                  		bcs.w	DisplaySprite
0001C5BC 4E75                       		rts	
0001C5BE                            ; ===========================================================================
0001C5BE                            ; bubble production sequence
0001C5BE                            
0001C5BE                            ; 0 = small bubble, 1 =	large bubble
0001C5BE                            
0001C5BE 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001C5D0                            
0001C5D0                            ; ===========================================================================
0001C5D0                            
0001C5D0                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001C5D0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001C5D4 6B00                       		bmi.s	loc_12998
0001C5D6 43F8 D000                  		lea	($FFFFD000).w,a1
0001C5DA 3029 0008                  		move.w	8(a1),d0
0001C5DE 3228 0008                  		move.w	8(a0),d1
0001C5E2 0441 0010                  		subi.w	#$10,d1
0001C5E6 B240                       		cmp.w	d0,d1
0001C5E8 6400                       		bcc.s	loc_12998
0001C5EA 0641 0020                  		addi.w	#$20,d1
0001C5EE B240                       		cmp.w	d0,d1
0001C5F0 6500                       		bcs.s	loc_12998
0001C5F2 3029 000C                  		move.w	$C(a1),d0
0001C5F6 3228 000C                  		move.w	$C(a0),d1
0001C5FA B240                       		cmp.w	d0,d1
0001C5FC 6400                       		bcc.s	loc_12998
0001C5FE 0641 0010                  		addi.w	#$10,d1
0001C602 B240                       		cmp.w	d0,d1
0001C604 6500                       		bcs.s	loc_12998
0001C606 7001                       		moveq	#1,d0
0001C608 4E75                       		rts	
0001C60A                            ; ===========================================================================
0001C60A                            
0001C60A                            loc_12998:
0001C60A 7000                       		moveq	#0,d0
0001C60C 4E75                       		rts	
0001C60E                            ; ===========================================================================
0001C60E                            Ani_obj64:
0001C60E                            	include "_anim\obj64.asm"
0001C60E                            ; ---------------------------------------------------------------------------
0001C60E                            ; Animation script - bubbles (LZ)
0001C60E                            ; ---------------------------------------------------------------------------
0001C60E 0000                       		dc.w byte_129AA-Ani_obj64
0001C610 0000                       		dc.w byte_129B0-Ani_obj64
0001C612 0000                       		dc.w byte_129B6-Ani_obj64
0001C614 0000                       		dc.w byte_129BE-Ani_obj64
0001C616 0000                       		dc.w byte_129BE-Ani_obj64
0001C618 0000                       		dc.w byte_129C0-Ani_obj64
0001C61A 0000                       		dc.w byte_129C6-Ani_obj64
0001C61C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001C622 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001C628 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001C630 04FC                       byte_129BE:	dc.b 4,	$FC
0001C632 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001C638 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001C63E 00                         		even
0001C63E 00                         		even
0001C63E                            
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E                            ; Sprite mappings - bubbles (LZ)
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E                            Map_obj64:
0001C63E                            	include "_maps\obj64.asm"
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E                            ; Sprite mappings - bubbles (LZ)
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001C642 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001C646 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001C64A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001C64E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001C652 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001C656 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001C65A 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001C65E 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001C662 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001C666 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001C66A 0000                       		dc.w byte_12A9C-Map_obj64
0001C66C 01                         byte_129FA:	dc.b 1
0001C66D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001C672 01                         byte_12A00:	dc.b 1
0001C673 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001C678 01                         byte_12A06:	dc.b 1
0001C679 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001C67E 01                         byte_12A0C:	dc.b 1
0001C67F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001C684 01                         byte_12A12:	dc.b 1
0001C685 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001C68A 01                         byte_12A18:	dc.b 1
0001C68B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001C690 01                         byte_12A1E:	dc.b 1
0001C691 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001C696 04                         byte_12A24:	dc.b 4
0001C697 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001C69C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001C6A1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001C6A6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001C6AB 04                         byte_12A39:	dc.b 4
0001C6AC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001C6B1 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001C6B6 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001C6BB 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001C6C0 01                         byte_12A4E:	dc.b 1
0001C6C1 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001C6C6 01                         byte_12A54:	dc.b 1
0001C6C7 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001C6CC 01                         byte_12A5A:	dc.b 1
0001C6CD F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001C6D2 01                         byte_12A60:	dc.b 1
0001C6D3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001C6D8 01                         byte_12A66:	dc.b 1
0001C6D9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001C6DE 01                         byte_12A6C:	dc.b 1
0001C6DF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001C6E4 01                         byte_12A72:	dc.b 1
0001C6E5 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001C6EA 01                         byte_12A78:	dc.b 1
0001C6EB F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001C6F0 01                         byte_12A7E:	dc.b 1
0001C6F1 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001C6F6 01                         byte_12A84:	dc.b 1
0001C6F7 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001C6FC 01                         byte_12A8A:	dc.b 1
0001C6FD F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001C702 01                         byte_12A90:	dc.b 1
0001C703 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001C708 01                         byte_12A96:	dc.b 1
0001C709 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001C70E 00                         byte_12A9C:	dc.b 0
0001C710 00                         		even
0001C710 00                         		even
0001C710                            
0001C710                            ; ===========================================================================
0001C710                            ; ---------------------------------------------------------------------------
0001C710                            ; Object 65 - waterfalls (LZ)
0001C710                            ; ---------------------------------------------------------------------------
0001C710                            
0001C710                            Obj65:					; XREF: Obj_Index
0001C710 7000                       		moveq	#0,d0
0001C712 1028 0024                  		move.b	routine(a0),d0
0001C716 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001C71A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001C71E                            ; ===========================================================================
0001C71E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001C720 0000                       		dc.w Obj65_Animate-Obj65_Index
0001C722 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001C724 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001C726 0000                       		dc.w loc_12B36-Obj65_Index
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            Obj65_Main:				; XREF: Obj65_Index
0001C728 5828 0024                  		addq.b	#4,routine(a0)
0001C72C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001C734 317C 4259 0002             		move.w	#$4259,2(a0)
0001C73A 0028 0004 0001             		ori.b	#4,1(a0)
0001C740 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001C746 317C 0080 0018             		move.w	#$80,priority(a0)
0001C74C 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001C750 6A00                       		bpl.s	loc_12AE6
0001C752 08E8 0007 0002             		bset	#7,2(a0)
0001C758                            
0001C758                            loc_12AE6:
0001C758 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001C75C 1140 001A                  		move.b	d0,mapping_frame(a0)	; set frame number
0001C760 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001C764 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001C766 4228 0018                  		clr.b	priority(a0)
0001C76A 5528 0024                  		subq.b	#2,routine(a0)
0001C76E 0828 0006 0028             		btst	#6,subtype(a0)	; is object type $4x ?
0001C774 6700                       		beq.s	loc_12B0A	; if not, branch
0001C776 117C 0006 0024             		move.b	#6,routine(a0)
0001C77C                            
0001C77C                            loc_12B0A:
0001C77C 0828 0005 0028             		btst	#5,subtype(a0)	; is object type $Ax ?
0001C782 6700                       		beq.s	Obj65_Animate	; if not, branch
0001C784 117C 0008 0024             		move.b	#8,routine(a0)
0001C78A                            
0001C78A                            Obj65_Animate:				; XREF: Obj65_Index
0001C78A 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001C790 4EB9 0001 2754             		jsr	AnimateSprite
0001C796                            
0001C796                            Obj65_ChkDel:				; XREF: Obj65_Index
0001C796 6000 C70E                  		bra.w	MarkObjGone
0001C79A                            ; ===========================================================================
0001C79A                            
0001C79A                            Obj65_FixHeight:			; XREF: Obj65_Index
0001C79A 3038 F646                  		move.w	($FFFFF646).w,d0
0001C79E 0440 0010                  		subi.w	#$10,d0
0001C7A2 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001C7A6 60E2                       		bra.s	Obj65_Animate
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            loc_12B36:				; XREF: Obj65_Index
0001C7A8 08A8 0007 0002             		bclr	#7,2(a0)
0001C7AE 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001C7B4 6600                       		bne.s	Obj65_Animate2
0001C7B6 08E8 0007 0002             		bset	#7,2(a0)
0001C7BC                            
0001C7BC                            Obj65_Animate2:
0001C7BC 60CC                       		bra.s	Obj65_Animate
0001C7BE                            ; ===========================================================================
0001C7BE                            Ani_obj65:
0001C7BE                            	include "_anim\obj65.asm"
0001C7BE                            ; ---------------------------------------------------------------------------
0001C7BE                            ; Animation script - waterfall (LZ)
0001C7BE                            ; ---------------------------------------------------------------------------
0001C7BE 0000                       		dc.w byte_12B4E-Ani_obj65
0001C7C0 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001C7C6 00                         		even
0001C7C6 00                         		even
0001C7C6                            
0001C7C6                            ; ---------------------------------------------------------------------------
0001C7C6                            ; Sprite mappings - waterfalls (LZ)
0001C7C6                            ; ---------------------------------------------------------------------------
0001C7C6                            Map_obj65:
0001C7C6                            	include "_maps\obj65.asm"
0001C7C6                            ; ---------------------------------------------------------------------------
0001C7C6                            ; Sprite mappings - waterfalls (LZ)
0001C7C6                            ; ---------------------------------------------------------------------------
0001C7C6 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001C7CA 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001C7CE 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001C7D2 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001C7D6 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001C7DA 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001C7DE 01                         byte_12B6C:	dc.b 1
0001C7DF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001C7E4 02                         byte_12B72:	dc.b 2
0001C7E5 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001C7EA 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001C7EF 02                         byte_12B7D:	dc.b 2
0001C7F0 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C7F5 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C7FA 01                         byte_12B88:	dc.b 1
0001C7FB F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001C800 02                         byte_12B8E:	dc.b 2
0001C801 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C806 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C80B 01                         byte_12B99:	dc.b 1
0001C80C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001C811 01                         byte_12B9F:	dc.b 1
0001C812 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001C817 01                         byte_12BA5:	dc.b 1
0001C818 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001C81D 02                         byte_12BAB:	dc.b 2
0001C81E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001C823 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001C828 02                         byte_12BB6:	dc.b 2
0001C829 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001C82E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001C833 02                         byte_12BC1:	dc.b 2
0001C834 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001C839 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001C83E 02                         byte_12BCC:	dc.b 2
0001C83F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001C844 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001C84A 00                         		even
0001C84A 00                         		even
0001C84A                            
0001C84A                            Spindash_dust:
0001C84A                            Sprite_1DD20:				; DATA XREF: ROM:0001600Co
0001C84A 7000                       		moveq	#0,d0
0001C84C 1028 0024                  		move.b	routine(a0),d0
0001C850 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001C854 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001C858                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C858 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBAo h+6DBCo ...
0001C85A 0000                       		dc loc_1DD90-off_1DD2E; 1
0001C85C 0000                       		dc loc_1DE46-off_1DD2E; 2
0001C85E 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001C860                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C860                            
0001C860                            loc_1DD36:				; DATA XREF: h+6DBAo
0001C860 5428 0024                  		addq.b	#2,routine(a0)
0001C864 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001C86C 0028 0004 0001             		or.b	#4,1(a0)
0001C872 317C 0080 0018             		move.w	#$80,priority(a0)
0001C878 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001C87E 317C 07A0 0002             		move	#$7A0,2(a0)
0001C884 317C D000 003E             		move	#-$3000,parent(a0)
0001C88A 317C F400 003C             		move	#$F400,$3C(a0)
0001C890                            ;		cmp	#-$2E40,a0
0001C890                            ;		beq.s	loc_1DD8C
0001C890                            ;		move.b	#1,$34(a0)
0001C890                            ;		cmp	#2,($FFFFFF70).w
0001C890                            ;		beq.s	loc_1DD8C
0001C890                            ;		move	#$48C,2(a0)
0001C890                            ;		move	#-$4FC0,parent(a0)
0001C890                            ;		move	#-$6E80,$3C(a0)
0001C890                            
0001C890                            ;loc_1DD8C:				; CODE XREF: h+6DF6j h+6E04j
0001C890                            ;		jsr	sub_16D6E
0001C890                            
0001C890                            loc_1DD90:				; DATA XREF: h+6DBAo
0001C890 3468 003E                  		movea.w	parent(a0),a2
0001C894 7000                       		moveq	#0,d0
0001C896 1028 001C                  		move.b	anim(a0),d0
0001C89A D040                       		add	d0,d0
0001C89C 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001C8A0 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001C8A4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C8A4 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30o h+6E32o ...
0001C8A6 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001C8A8 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001C8AA 0000                       		dc loc_1DE20-off_1DDA4; 3
0001C8AC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C8AC                            
0001C8AC                            loc_1DDAC:				; DATA XREF: h+6E30o
0001C8AC 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001C8B2 4A28 001D                  		tst.b	next_anim(a0)
0001C8B6 6600                       		bne.s	loc_1DE28
0001C8B8 316A 0008 0008             		move	8(a2),8(a0)
0001C8BE 117C 0000 0022             		move.b	#0,status(a0)
0001C8C4 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C8CA 6000                       		bra.s	loc_1DE28
0001C8CC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C8CC                            
0001C8CC                            loc_1DDCC:				; DATA XREF: h+6E30o
0001C8CC                            ;		cmp.b	#$C,subtype(a2)
0001C8CC                            ;		bcs.s	loc_1DE3E
0001C8CC 0C2A 0004 0024             		cmp.b	#4,routine(a2)
0001C8D2 6400                       		bcc.s	loc_1DE3E
0001C8D4 4A2A 0039                  		tst.b	$39(a2)
0001C8D8 6700                       		beq.s	loc_1DE3E
0001C8DA 316A 0008 0008             		move	8(a2),8(a0)
0001C8E0 316A 000C 000C             		move	$C(a2),$C(a0)
0001C8E6 116A 0022 0022             		move.b	status(a2),status(a0)
0001C8EC 0228 0001 0022             		and.b	#1,status(a0)
0001C8F2                            ;		tst.b	$34(a0)
0001C8F2                            ;		beq.s	loc_1DE06
0001C8F2                            ;		sub	#4,$C(a0)
0001C8F2                            
0001C8F2                            ;loc_1DE06:				; CODE XREF: h+6E8Aj
0001C8F2 4A28 001D                  		tst.b	next_anim(a0)
0001C8F6 6600                       		bne.s	loc_1DE28
0001C8F8 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C8FE 4A6A 0002                  		tst	2(a2)
0001C902 6A00                       		bpl.s	loc_1DE28
0001C904 0068 8000 0002             		or	#-$8000,2(a0)
0001C90A                            
0001C90A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C90A                            
0001C90A                            loc_1DE20:				; DATA XREF: h+6E30o
0001C90A                            loc_1DE28:				; CODE XREF: h+6E42j h+6E56j ...
0001C90A 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001C910 4EB9 0001 2754             		jsr	AnimateSprite
0001C916 4EB9 0000 0000             		jsr	loc_1DEE4
0001C91C 4EFA 9454                  		jmp	DisplaySprite
0001C920                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C920                            
0001C920                            loc_1DE3E:				; CODE XREF: h+6E5Ej h+6E66j ...
0001C920 117C 0000 001C             		move.b	#0,anim(a0)
0001C926 4E75                       		rts	
0001C928                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C928                            
0001C928                            loc_1DE46:				; DATA XREF: h+6DBAo
0001C928 6000 93FC                  		bra.w	DeleteObject
0001C92C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C92C                            
0001C92C                            
0001C92C                            
0001C92C                            loc_1DE4A:
0001C92C 3468 003E                  	movea.w	parent(a0),a2
0001C930 7210                       	moveq	#$10,d1
0001C932 0C2A 000D 001C             	cmp.b	#$D,anim(a2)
0001C938 6700                       	beq.s	loc_1DE64
0001C93A 7206                       	moveq	#$6,d1
0001C93C 0C2A 0003 0021             	cmp.b	#$3,collision_property(a2)
0001C942 6700                       	beq.s	loc_1DE64
0001C944 117C 0002 0024             	move.b	#2,routine(a0)
0001C94A 117C 0000 0032             	move.b	#0,$32(a0)
0001C950 4E75                       	rts
0001C952                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C952                            
0001C952                            loc_1DE64:				; CODE XREF: h+6EE0j
0001C952 5328 0032                  		subq.b	#1,$32(a0)
0001C956 6A00                       		bpl.s	loc_1DEE0
0001C958 117C 0003 0032             		move.b	#3,$32(a0)
0001C95E 4EBA 9F1C                  		jsr	SingleObjLoad
0001C962 6600                       		bne.s	loc_1DEE0
0001C964 1290                       		move.b	0(a0),0(a1)
0001C966 336A 0008 0008             		move	8(a2),8(a1)
0001C96C 336A 000C 000C             		move	$C(a2),$C(a1)
0001C972                            ;		tst.b	$34(a0)
0001C972                            ;		beq.s	loc_1DE9A
0001C972                            ;		sub	#4,d1
0001C972                            
0001C972                            ;loc_1DE9A:				; CODE XREF: h+6F1Ej
0001C972 D369 000C                  		add	d1,$C(a1)
0001C976 137C 0000 0022             		move.b	#0,status(a1)
0001C97C 137C 0003 001C             		move.b	#3,anim(a1)
0001C982 5429 0024                  		addq.b	#2,routine(a1)
0001C986 2368 0004 0004             		move.l	4(a0),4(a1)
0001C98C 1368 0001 0001             		move.b	1(a0),1(a1)
0001C992 337C 0080 0018             		move.w	#$80,priority(a1)
0001C998 137C 0004 0023             		move.b	#4,width_pixels(a1)
0001C99E 3368 0002 0002             		move	2(a0),2(a1)
0001C9A4 3368 003E 003E             		move	parent(a0),parent(a1)
0001C9AA 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001C9B0 4A6A 0002                  		tst	2(a2)
0001C9B4 6A00                       		bpl.s	loc_1DEE0
0001C9B6 0069 8000 0002             		or	#-$8000,2(a1)
0001C9BC                            
0001C9BC                            loc_1DEE0:				; CODE XREF: h+6EF4j h+6F00j ...
0001C9BC 6100                       		bsr.s	loc_1DEE4
0001C9BE 4E75                       		rts	
0001C9C0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C9C0                            
0001C9C0                            loc_1DEE4:				; CODE XREF: h+6EC0p h+6F6Cp
0001C9C0 7000                       		moveq	#0,d0
0001C9C2 1028 001A                  		move.b	mapping_frame(a0),d0
0001C9C6 B028 0030                  		cmp.b	$30(a0),d0
0001C9CA 6700 0000                  		beq.w	locret_1DF36
0001C9CE                            ;		tst.w	($FFFFD130).w ; has title card sequence finished?
0001C9CE                            ;		bne.w	locret_1DF36	; if not, branch		
0001C9CE 1140 0030                  		move.b	d0,$30(a0)
0001C9D2 45F9 0000 0000             		lea	(off_1E074).l,a2
0001C9D8 D040                       		add	d0,d0
0001C9DA D4F2 0000                  		add	(a2,d0.w),a2
0001C9DE 3A1A                       		move	(a2)+,d5
0001C9E0 5345                       		subq	#1,d5
0001C9E2 6B00 0000                  		bmi.w	locret_1DF36
0001C9E6 3828 003C                  		move $3C(a0),d4
0001C9EA                            
0001C9EA                            loc_1DF0A:				; CODE XREF: h+6FBEj
0001C9EA 7200                       		moveq	#0,d1
0001C9EC 321A                       		move	(a2)+,d1
0001C9EE 3601                       		move	d1,d3
0001C9F0 E04B                       		lsr.w	#8,d3
0001C9F2 0243 00F0                  		and	#$F0,d3	; 'ð'
0001C9F6 0643 0010                  		add	#$10,d3
0001C9FA 0241 0FFF                  		and	#$FFF,d1
0001C9FE EB89                       		lsl.l	#5,d1
0001CA00 0681 0000 0000             		add.l	#Art_Dust,d1
0001CA06 3404                       		move	d4,d2
0001CA08 D843                       		add	d3,d4
0001CA0A D843                       		add	d3,d4
0001CA0C 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
0001CA12 51CD FFD6                  		dbf	d5,loc_1DF0A
0001CA16                            
0001CA16                            locret_1DF36:				; CODE XREF: h+6F7Aj h+6F90j
0001CA16 4E75                       		rts	
0001CA18                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001CA18 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4o h+6FC4o ...
0001CA1A 0000                       		dc byte_1DF43-off_1DF38; 1
0001CA1C 0000                       		dc byte_1DF4F-off_1DF38; 2
0001CA1E 0000                       		dc byte_1DF58-off_1DF38; 3
0001CA20 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4o
0001CA23 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4o
0001CA2F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4o
0001CA38 0311 1213 13FC             byte_1DF58:	dc.b   3,$11,$12,$13,$13,$FC; 0	; DATA XREF: h+6FC4o
0001CA3E                            ; -------------------------------------------------------------------------------
0001CA3E                            ; Unknown Sprite Mappings
0001CA3E                            ; -------------------------------------------------------------------------------
0001CA3E                            MapUnc_1DF5E:
0001CA3E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001CA40 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001CA42 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001CA44 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001CA46 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001CA48 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001CA4A 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001CA4C 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001CA4E 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001CA50 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001CA52 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001CA54 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001CA56 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001CA58 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001CA5A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001CA5C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001CA5E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001CA60 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001CA62 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001CA64 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001CA66 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001CA68 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001CA6A 00                         word_1DF8A:	dc.b 0
0001CA6B 01                         word_1DF8C:	dc.b 1
0001CA6C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001CA71 01                         word_1DF96:	dc.b 1
0001CA72 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001CA77 01                         word_1DFA0:	dc.b 1
0001CA78 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001CA7D 01                         word_1DFAA:	dc.b 1
0001CA7E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001CA83 01                         word_1DFB4:	dc.b 1
0001CA84 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001CA89 01                         word_1DFBE:	dc.b 1
0001CA8A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001CA8F 01                         word_1DFC8:	dc.b 1
0001CA90 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001CA95 01                         word_1DFD2:	dc.b 1
0001CA96 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001CA9B 01                         word_1DFDC:	dc.b 1
0001CA9C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001CAA1 01                         word_1DFE6:	dc.b 1
0001CAA2 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001CAA7 01                         word_1DFF0:	dc.b 1
0001CAA8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001CAAD 01                         word_1DFFA:	dc.b 1
0001CAAE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001CAB3 02                         word_1E004:	dc.b 2
0001CAB4 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001CAB9 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001CABE 02                         word_1E016:	dc.b 2
0001CABF F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001CAC4 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001CAC9 02                         word_1E028:	dc.b 2
0001CACA F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001CACF 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001CAD4 02                         word_1E03A:	dc.b 2
0001CAD5 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001CADA 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001CADF 01                         word_1E04C:	dc.b 1
0001CAE0 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001CAE5 01                         word_1E056:	dc.b 1
0001CAE6 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001CAEB 01                         word_1E060:	dc.b 1
0001CAEC F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001CAF1 01                         word_1E06A:	dc.b 1
0001CAF2 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001CAF7 00                         	dc.b 0
0001CAF8 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001CAFA 0000                       	dc word_1E0A2-off_1E074; 1
0001CAFC 0000                       	dc word_1E0A6-off_1E074; 2
0001CAFE 0000                       	dc word_1E0AA-off_1E074; 3
0001CB00 0000                       	dc word_1E0AE-off_1E074; 4
0001CB02 0000                       	dc word_1E0B2-off_1E074; 5
0001CB04 0000                       	dc word_1E0B6-off_1E074; 6
0001CB06 0000                       	dc word_1E0BA-off_1E074; 7
0001CB08 0000                       	dc word_1E0BE-off_1E074; 8
0001CB0A 0000                       	dc word_1E0C2-off_1E074; 9
0001CB0C 0000                       	dc word_1E0C6-off_1E074; 10
0001CB0E 0000                       	dc word_1E0CA-off_1E074; 11
0001CB10 0000                       	dc word_1E0CE-off_1E074; 12
0001CB12 0000                       	dc word_1E0D2-off_1E074; 13
0001CB14 0000                       	dc word_1E0D8-off_1E074; 14
0001CB16 0000                       	dc word_1E0DE-off_1E074; 15
0001CB18 0000                       	dc word_1E0E4-off_1E074; 16
0001CB1A 0000                       	dc word_1E0EA-off_1E074; 17
0001CB1C 0000                       	dc word_1E0EA-off_1E074; 18
0001CB1E 0000                       	dc word_1E0EA-off_1E074; 19
0001CB20 0000                       	dc word_1E0EA-off_1E074; 20
0001CB22 0000                       	dc word_1E0EC-off_1E074; 21
0001CB24 0000                       word_1E0A0:	dc 0
0001CB26 0001                       word_1E0A2:	dc 1
0001CB28 7000                       	dc $7000
0001CB2A 0001                       word_1E0A6:	dc 1
0001CB2C F008                       	dc $F008
0001CB2E 0001                       word_1E0AA:	dc 1
0001CB30 F018                       	dc $F018
0001CB32 0001                       word_1E0AE:	dc 1
0001CB34 F028                       	dc $F028
0001CB36 0001                       word_1E0B2:	dc 1
0001CB38 F038                       	dc $F038
0001CB3A 0001                       word_1E0B6:	dc 1
0001CB3C F048                       	dc $F048
0001CB3E 0001                       word_1E0BA:	dc 1
0001CB40 7058                       	dc $7058
0001CB42 0001                       word_1E0BE:	dc 1
0001CB44 7060                       	dc $7060
0001CB46 0001                       word_1E0C2:	dc 1
0001CB48 7068                       	dc $7068
0001CB4A 0001                       word_1E0C6:	dc 1
0001CB4C 7070                       	dc $7070
0001CB4E 0001                       word_1E0CA:	dc 1
0001CB50 7078                       	dc $7078
0001CB52 0001                       word_1E0CE:	dc 1
0001CB54 7080                       	dc $7080
0001CB56 0002                       word_1E0D2:	dc 2
0001CB58 1088                       	dc $1088
0001CB5A 708A                       	dc $708A
0001CB5C 0002                       word_1E0D8:	dc 2
0001CB5E 3092                       	dc $3092
0001CB60 7096                       	dc $7096
0001CB62 0002                       word_1E0DE:	dc 2
0001CB64 509E                       	dc $509E
0001CB66 70A4                       	dc $70A4
0001CB68 0002                       word_1E0E4:	dc 2
0001CB6A 50AC                       	dc $50AC
0001CB6C 70B2                       	dc $70B2
0001CB6E 0000                       word_1E0EA:	dc 0
0001CB70 0001                       word_1E0EC:	dc 1
0001CB72 F0BA                       	dc $F0BA
0001CB74                            	even
0001CB74                            
0001CB74                            ; ===========================================================================
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            ; Object 01 - Sonic
0001CB74                            ; ---------------------------------------------------------------------------
0001CB74                            
0001CB74                            Obj01:					; XREF: Obj_Index
0001CB74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001CB78 6700                       		beq.s	Obj01_Normal	; if not, branch
0001CB7A                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0001CB7A                            ;		beq.s	Obj01_Normal	; if not, branch
0001CB7A 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
0001CB80 6700                       		beq.s	loc_10AD8
0001CB82 0838 0004 F605             		btst	#4,($FFFFF605).w
0001CB88 6700                       		beq.s	loc_10ABC
0001CB8A 31FC 0000 FE08             		move.w	#0,(Debug_placement_mode).w
0001CB90                            loc_10ABC:
0001CB90 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001CB94 4A38 FE19                  		tst.b	($FFFFFE19).w
0001CB98 6700 0000                  		beq.w	AniNormalTest
0001CB9C 0C28 00D6 001A             		cmpi.b	#$D6,mapping_frame(a0)
0001CBA2 6500                       		blo.s	loc_10ACE
0001CBA4 4EF9 0000 0000             		jmp		AniSuperTest
0001CBAA                            AniNormalTest:
0001CBAA 0C28 00DA 001A             		cmpi.b	#$DA,mapping_frame(a0)
0001CBB0 6500                       		blo.s	loc_10ACE
0001CBB2                            AniSuperTest:
0001CBB2 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001CBB8                            loc_10ACE:
0001CBB8 6100 0000                  		bsr.w	LoadSonicDynPLC
0001CBBC 4EF9 0001 5D72             		jmp	(DisplaySprite).l
0001CBC2                            ; ---------------------------------------------------------------------------
0001CBC2                            
0001CBC2                            loc_10AD8:
0001CBC2 4EF9 0000 0000             		jmp	(DebugMode).l
0001CBC8                            ; ===========================================================================
0001CBC8                            
0001CBC8                            Obj01_Normal:
0001CBC8 7000                       		moveq	#0,d0
0001CBCA 1028 0024                  		move.b	routine(a0),d0
0001CBCE 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001CBD2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001CBD6                            ; ===========================================================================
0001CBD6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001CBD8 0000                       		dc.w Obj01_Control-Obj01_Index
0001CBDA 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001CBDC 0000                       		dc.w Obj01_Death-Obj01_Index
0001CBDE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001CBE0 0000                       		dc.w Sonic_Drowned-Obj01_Index
0001CBE2                            ; ===========================================================================
0001CBE2                            
0001CBE2                            Obj01_Main:				; XREF: Obj01_Index
0001CBE2 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
0001CBE8 5428 0024                  		addq.b	#2,routine(a0)
0001CBEC 117C 0013 0016             		move.b	#$13,y_radius(a0) ; this sets Sonic's collision height (2*pixels)
0001CBF2 117C 0009 0017             		move.b	#9,x_radius(a0)
0001CBF8 217C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a0)
0001CC00 317C 0780 0002             		move.w	#$780,art_tile(a0)
0001CC06 317C 0100 0018             		move.w	#$100,priority(a0)
0001CC0C 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001CC12 117C 0004 0001             		move.b	#4,render_flags(a0)
0001CC18 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001CC1C 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001CC20                            
0001CC20                            Obj01_Control:				; XREF: Obj01_Index
0001CC20 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001CC24 6700                       		beq.s	loc_contctrl	; if not, branch
0001CC26 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001CC2C 6700                       		beq.s	loc_contctrl	; if not, branch
0001CC2E 31FC 0001 FE08                     move.w  #1,(Debug_placement_mode).w     ; change Sonic into a ring/item
0001CC34 4238 F7CC                          clr.b   (Control_Locked).w              ; unlock control
0001CC38 0838 0005 F604             		btst	#5,($FFFFF604).w	; was button C held before pressing B?
0001CC3E 6700                       		beq.s	locret_10BEE			; if not, branch
0001CC40 31FC 0002 FE08             		move.w	#2,(Debug_placement_mode).w	; enter animation cycle mode
0001CC46                            
0001CC46                            locret_10BEE:
0001CC46 4E75                       		rts
0001CC48                            ; ===========================================================================
0001CC48                            
0001CC48 0828 0003 0022             loc_contctrl:	btst    #3,status(a0)			; is Sonic standing on an object?
0001CC4E 6700                       	beq.s	loc_12C58				; if no, branch
0001CC50 08A8 0007 0022             	bclr	#7,status(a0)			 ; Clear Jump Dash Flag
0001CC56                            
0001CC56                            loc_12C58:
0001CC56 4A38 F7CC                      tst.b   (Control_Locked).w      ; are controls locked?
0001CC5A 6600                           bne.s   loc_12C64     ; if yes, branch
0001CC5C 31F8 F604 F602                 move.w  (Ctrl_1).w,(Ctrl_1_Logical).w
0001CC62 6000 0000                      bra.w   loc_12C64
0001CC66                            
0001CC66                            loc_12C64:
0001CC66 0838 0000 F7C8             	btst	#0,($FFFFF7C8).w ; are controls	locked?
0001CC6C 6600                       	bne.s	loc_12C7E	; if yes, branch
0001CC6E 7000                       	moveq	#0,d0
0001CC70 1028 0022                  	move.b	status(a0),d0
0001CC74 0240 0006                  	andi.w	#6,d0
0001CC78 323B 0000                  	move.w	Obj01_Modes(pc,d0.w),d1
0001CC7C 4EBB 1000                  	jsr	Obj01_Modes(pc,d1.w)
0001CC80                            
0001CC80                            loc_12C7E:
0001CC80 0C78 FF00 F72C             	cmpi.w	#-$100,($FFFFF72C).w	; is vertical wrapping enabled?
0001CC86 6600                       	bne.s	@contctrl5				; if not, branch
0001CC88 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0) 		; perform wrapping of Sonic's y position
0001CC8E                            @contctrl5:
0001CC8E 6100                       	bsr.s	Sonic_Display
0001CC90 6100 0000                  	bsr.w	Sonic_Super
0001CC94 6100 0000                  	bsr.w	Sonic_RecordPos
0001CC98 6100 0000                  	bsr.w	Sonic_Water
0001CC9C 1178 F768 0036             	move.b	($FFFFF768).w,$36(a0)
0001CCA2 1178 F76A 0037             	move.b	($FFFFF76A).w,$37(a0)
0001CCA8 4A38 F7C7                  	tst.b	($FFFFF7C7).w
0001CCAC 6700                       	beq.s	@contctrl6
0001CCAE 4A28 001C                  	tst.b	anim(a0)
0001CCB2 6600                       	bne.s	@contctrl6
0001CCB4 1168 001D 001C             	move.b	next_anim(a0),anim(a0)
0001CCBA                            @contctrl6:
0001CCBA 6100 0000                  	bsr.w	Sonic_Animate
0001CCBE 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001CCC2 6B00                       	bmi.s	loc_12CB6
0001CCC4 4EB9 0000 0000             	jsr	TouchResponse
0001CCCA                            
0001CCCA                            loc_12CB6:
0001CCCA 6100 0000                  	bsr.w	Sonic_Loops
0001CCCE 6100 0000                  	bsr.w	LoadSonicDynPLC
0001CCD2 4E75                       	rts	
0001CCD4                            ; ===========================================================================
0001CCD4 0000                       Obj01_Modes:	dc.w Obj01_MdNormal_Checks-Obj01_Modes
0001CCD6 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001CCD8 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001CCDA 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001CCDC                            ; ---------------------------------------------------------------------------
0001CCDC                            ; Music	to play	after invincibility wears off
0001CCDC                            ; ---------------------------------------------------------------------------
0001CCDC                            MusicList2:	incbin	misc\muslist2.bin
0001CCE4                            		even
0001CCE4                            ; ===========================================================================
0001CCE4                            
0001CCE4                            Sonic_Display:				; XREF: loc_12C7E
0001CCE4 1028 0030                  		move.b	invulnerable_time(a0),d0
0001CCE8 6700                       		beq.s	Obj01_Display_AfterImage
0001CCEA 5328 0030                  		subq.b	#1,invulnerable_time(a0)
0001CCEE E648                       		lsr.w	#3,d0
0001CCF0 6400                       		bcc.s	Obj01_ChkInvin
0001CCF2                            
0001CCF2                            Obj01_Display_AfterImage:
0001CCF2 3028 0020                  		move.w	inertia(a0),d0			; get inertia
0001CCF6 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001CCFC 6700 0000                  		beq.w	Obj01_AfterImage_ChkStart			; if not, branch
0001CD00 3028 0010                  		move.w	x_vel(a0),d0
0001CD04                            
0001CD04                            Obj01_AfterImage_ChkStart:
0001CD04 4A40                       		tst.w	d0					; is inertia greater than 0?
0001CD06 6C00                       		bge.s	Obj01_AfterImage_Start	; if yes, don't negate it
0001CD08 4440                       		neg		d0					; if not, negate it
0001CD0A                            
0001CD0A                            Obj01_AfterImage_Start:
0001CD0A 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
0001CD0E 6600                       		bne.s	Obj01_AfterImage_Start_2	; if yes, display after image
0001CD10 0C40 0600                  		cmpi.w	#$600,d0		; is the sonic inertia greater than 600?
0001CD14 6D00                       		blt.s	Obj01_Display	; if not, don't show the After Image
0001CD16                            Obj01_AfterImage_Start_2:
0001CD16 4EBA 9B64                  		jsr	SingleObjLoad	; search a free space in object RAM
0001CD1A 6600                       		bne.s	Obj01_Display	; if not have, don't load the After Image
0001CD1C 12BC 008D                  		move.b  #$8D,0(a1)		; load after-image object
0001CD20 2368 0004 0004             		move.l	4(a0),4(a1)		; copy Sonic mappings to after-image mappings
0001CD26                            ;		move.w	8(a0),8(a1)		; copy Sonic x-pos to after-image x-pos
0001CD26                            ;		move.w	$C(a0),$C(a1)	; copy Sonic y-pos to after-image y-pos
0001CD26                            
0001CD26                            Obj01_Display:
0001CD26 4EBA 904A                  		jsr	DisplaySprite
0001CD2A                            
0001CD2A                            Obj01_ChkInvin:
0001CD2A 0828 0001 002B             		btst	#1,status_secondary(a0)	; does Sonic have invincibility?
0001CD30 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch
0001CD34 4A28 0032                  		tst.b	invincibility_time(a0)		; check	time remaining for invinciblity
0001CD38 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001CD3A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001CD3E 0200 0007                  		andi.b	#7,d0
0001CD42 6600                       		bne.s	Obj01_ChkShoes
0001CD44 5328 0032                  		subq.b	#1,invincibility_time(a0)
0001CD48 6600                       		bne.s	Obj01_ChkShoes
0001CD4A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001CD4E 6600                       		bne.s	Obj01_RmvInvin
0001CD50 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001CD56 6500                       		bcs.s	Obj01_RmvInvin
0001CD58 4238 FF88                  		clr.b	($FFFFFF88).w
0001CD5C                            ;		tst.b	($FFFFFE2C).w		; is sonic super?
0001CD5C                            ;		beq.w	Obj01_ChkInvin_2		; if yes, branch
0001CD5C                            ;		moveq	#$28,d0
0001CD5C                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001CD5C                            ;Obj01_ChkInvin_2:
0001CD5C 3038 FF90                  		move.w	(Level_Music).w,d0
0001CD60 4EB9 0000 0000             		jsr	(PlayMusic).l
0001CD66                            
0001CD66                            Obj01_RmvInvin:
0001CD66 08A8 0001 002B             		bclr	#1,status_secondary(a0) ; cancel invincibility
0001CD6C                            
0001CD6C                            Obj01_ChkShoes:
0001CD6C 0828 0002 002B             		btst	#2,status_secondary(a0)		; does Sonic have speed	shoes?
0001CD72 6700                       		beq.s	Obj01_ExitChk		; if not, branch
0001CD74 4A28 0034                  		tst.b	speedshoes_time(a0)				; check	time remaining
0001CD78 6700                       		beq.s	Obj01_ExitChk
0001CD7A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001CD7E 0200 0007                  		andi.b	#7,d0
0001CD82 6600                       		bne.s	Obj01_ExitChk
0001CD84 5328 0034                  		subq.b	#1,speedshoes_time(a0)
0001CD88 6600                       		bne.s	Obj01_ExitChk
0001CD8A 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001CD8E 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001CD92                            		
0001CD92                            Obj01_ChkShoesCont:		
0001CD92 08A8 0002 002B             		bclr	#2,status_secondary(a0)	; cancel speed	shoes
0001CD98 303C 0000                  		move.w	#$0,d0
0001CD9C 4EF9 0000 329E             		jmp	(SetTempo).l	; run music at normal speed
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            Obj01_ExitChk:
0001CDA2 4E75                       		rts	
0001CDA4                            
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            
0001CDA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDA4                            
0001CDA4                            
0001CDA4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001CDA4 3038 F7A8                  	move.w	(Sonic_Pos_Record_Index).w,d0
0001CDA8 43F8 CB00                  	lea	(Sonic_Pos_Record_Buf).w,a1
0001CDAC 43F1 0000                  	lea	(a1,d0.w),a1
0001CDB0 32E8 0008                  	move.w	x_pos(a0),(a1)+
0001CDB4 32E8 000C                  	move.w	y_pos(a0),(a1)+
0001CDB8 5838 F7A9                  	addq.b	#4,(Sonic_Pos_Record_Index+1).w
0001CDBC                            
0001CDBC 43F8 CA00                  	lea	(Sonic_Stat_Record_Buf).w,a1
0001CDC0 43F1 0000                  	lea	(a1,d0.w),a1
0001CDC4 32F8 F602                  	move.w	(Ctrl_1_Logical).w,(a1)+
0001CDC8 32E8 0022                  	move.w	status(a0),(a1)+
0001CDCC                            
0001CDCC 4E75                       	rts	
0001CDCE                            ; End of function Sonic_RecordPos
0001CDCE                            
0001CDCE                            ; ---------------------------------------------------------------------------
0001CDCE                            ; Subroutine for Sonic when he's underwater
0001CDCE                            ; ---------------------------------------------------------------------------
0001CDCE                            
0001CDCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDCE                            
0001CDCE                            
0001CDCE                            Sonic_Water:				; XREF: loc_12C7E
0001CDCE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001CDD4 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001CDD6                            
0001CDD6                            locret_12D80:
0001CDD6 4E75                       		rts	
0001CDD8                            ; ===========================================================================
0001CDD8                            
0001CDD8                            Obj01_InWater:
0001CDD8 3038 F646                  		move.w	($FFFFF646).w,d0
0001CDDC B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001CDE0 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001CDE2 08E8 0006 0022             		bset	#6,$22(a0)
0001CDE8 66EC                       		bne.s	locret_12D80
0001CDEA 6100 0000                  		bsr.w	ResumeMusic
0001CDEE 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001CDF4 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001CDFA 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001CDFE 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001CE02 E0E8 0010                  		asr	$10(a0)
0001CE06 E0E8 0012                  		asr	$12(a0)
0001CE0A E0E8 0012                  		asr	$12(a0)
0001CE0E 67C6                       		beq.s	locret_12D80
0001CE10 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001CE16 303C 0039                  		move.w	#$39,d0
0001CE1A 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001CE20                            ; ===========================================================================
0001CE20                            
0001CE20                            Obj01_OutWater:
0001CE20 08A8 0006 0022             		bclr	#6,$22(a0)
0001CE26 67AE                       		beq.s	locret_12D80
0001CE28 6100 0000                  		bsr.w	ResumeMusic
0001CE2C 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001CE30 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001CE34 E1E8 0012                  		asl	$12(a0)
0001CE38 6700 FF9C                  		beq.w	locret_12D80
0001CE3C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001CE42 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001CE48 6E00                       		bgt.s	loc_12E0E
0001CE4A 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001CE50                            
0001CE50                            loc_12E0E:
0001CE50 303C 0039                  		move.w	#$39,d0
0001CE54 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001CE5A                            ; End of function Sonic_Water
0001CE5A                            
0001CE5A                            ; ===========================================================================
0001CE5A                            ; ---------------------------------------------------------------------------
0001CE5A                            ; Start of subroutine Obj01_MdNormal (Ported from Sonic 2)
0001CE5A                            ; Called if Sonic is neither airborne nor rolling this frame
0001CE5A                            ; ---------------------------------------------------------------------------
0001CE5A                            ; loc_1A26E:
0001CE5A                            Obj01_MdNormal_Checks:
0001CE5A 1038 F603                      move.b  (Ctrl_1_Press_Logical).w,d0
0001CE5E 0200 0070                  	andi.b  #button_B_mask|button_C_mask|button_A_mask,d0
0001CE62 6600                       	bne.s   Obj01_MdNormal
0001CE64 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001CE6A 6700                       	beq.s   return_1A2DE
0001CE6C 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001CE72 6700                       	beq.s   return_1A2DE
0001CE74 0C28 0005 001C             	cmpi.b  #5,anim(a0)
0001CE7A 6600                       	bne.s   Obj01_MdNormal
0001CE7C 0C28 001E 001B             	cmpi.b  #$1E,anim_frame(a0)
0001CE82 6500                       	blo.s   Obj01_MdNormal
0001CE84 1038 F602                  	move.b  (Ctrl_1_Held_Logical).w,d0
0001CE88 0200 007F                  	andi.b  #button_up_mask|button_down_mask|button_left_mask|button_right_mask|button_B_mask|button_C_mask|button_A_mask,d0
0001CE8C 6700                       	beq.s	return_1A2DE
0001CE8E 117C 000B 001C             	move.b	#$B,anim(a0)
0001CE94 0C28 00AC 001B             	cmpi.b	#$AC,anim_frame(a0)
0001CE9A 6500                       	blo.s   return_1A2DE
0001CE9C 117C 000B 001C             	move.b	#$B,anim(a0)
0001CEA2 6000                       	bra.s	return_1A2DE
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            ; Modes	for controlling	Sonic
0001CEA4                            ; ---------------------------------------------------------------------------
0001CEA4                            
0001CEA4                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001CEA4 4EB9 0000 0000             		jsr	Sonic_SpinDash
0001CEAA 4EB9 0000 0000             		jsr	Sonic_Jump
0001CEB0 4EB9 0000 0000             		jsr	Sonic_SlopeResist
0001CEB6 4EB9 0000 0000             		jsr	Sonic_Move
0001CEBC 4EB9 0000 0000             		jsr	Sonic_Roll
0001CEC2 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001CEC8 4EBA 8E42                  		jsr	SpeedToPos
0001CECC 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001CED2 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001CED8                            
0001CED8                            return_1A2DE:
0001CED8 4E75                               rts
0001CEDA                            ; End of subroutine Obj01_MdNormal
0001CEDA                            ; ===========================================================================
0001CEDA                            ;Obj01_MdAir:
0001CEDA                            Obj01_MdJump:				; XREF: Obj01_Modes
0001CEDA 4228 0039                  		clr.b	$39(a0)
0001CEDE 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001CEE4 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001CEEA 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001CEF0 4EBA 8DFA                  		jsr	ObjectFall
0001CEF4 0828 0006 0022             		btst	#6,status(a0)
0001CEFA 6700                       		beq.s	loc_12E5C
0001CEFC 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001CF02                            
0001CF02                            loc_12E5C:
0001CF02 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001CF08 4EB9 0000 0000             		jsr	Sonic_Floor
0001CF0E 4E75                       		rts	
0001CF10                            ; ===========================================================================
0001CF10                            
0001CF10                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001CF10 4EB9 0000 0000             		jsr	Sonic_Jump
0001CF16 4EB9 0000 0000             		jsr	Sonic_RollRepel
0001CF1C 4EB9 0000 0000             		jsr	Sonic_RollSpeed
0001CF22 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001CF28 4EBA 8DE2                  		jsr	SpeedToPos
0001CF2C 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001CF32 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001CF38 4E75                       		rts	
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001CF3A 4228 0039                  		clr.b	$39(a0)
0001CF3E 0C28 0002 001C             		cmpi.b	#2,anim(a0)    		; is Sonic rolling?
0001CF44 6600 0000                  		bne.w	Obj01_MdJump3		; if not skip the 2 lines below
0001CF48 4EB9 0000 0000             		jsr	Sonic_JumpDash	; JumpDash Code: Thanks to Selbi
0001CF4E 4EB9 0000 0000             		jsr	Sonic_Homingattack
0001CF54                            Obj01_MdJump3:		
0001CF54 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001CF5A 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001CF60 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001CF66 4EBA 8D84                  		jsr	ObjectFall
0001CF6A 0828 0006 0022             		btst	#6,status(a0)
0001CF70 6700                       		beq.s	loc_12EA6
0001CF72 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001CF78 3028 0010                  		move.w	x_vel(a0),d0		; move Sonic's X-velocity to d0
0001CF7C 4A40                       		tst.w	d0			; is his speed positive? (is he running to the right?)
0001CF7E 6A00                       		bpl.s	Obj01_MdJump2_Abs	; if yes, branch
0001CF80 4440                       		neg.w	d0			; otherwise negate it
0001CF82                            		
0001CF82                            Obj01_MdJump2_Abs:
0001CF82 0C40 0250                  		cmpi.w	#$250,d0		; if Sonic speed less than $250?
0001CF86 6D00                       		blt.s	loc_12EA6		; if yes, branch
0001CF88 3028 000C                  		move.w	$C(a0),d0		; move sonic's Y-position to d0
0001CF8C 9078 F646                  		sub.w	($FFFFF646).w,d0	; sub the water height from it
0001CF90 0C40 000F                  		cmpi.w	#$F,d0			; is Sonic slightly in the water?
0001CF94 6E00                       		bgt.s	loc_12EA6		; if not, branch
0001CF96 0468 0090 0012             		subi.w	#$90,y_vel(a0)		; jump out of water
0001CF9C                            
0001CF9C                            loc_12EA6:
0001CF9C 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001CFA2 4EB9 0000 0000             		jsr	Sonic_Floor
0001CFA8 4E75                       		rts	
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA                            ; Subroutine to	make Sonic walk/run
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA                            
0001CFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFAA                            
0001CFAA                            
0001CFAA                            Sonic_Move:				; XREF: Obj01_MdNormal
0001CFAA 3C38 F760                  		move.w	($FFFFF760).w,d6
0001CFAE 3A38 F762                  		move.w	($FFFFF762).w,d5
0001CFB2 3838 F764                  		move.w	($FFFFF764).w,d4
0001CFB6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001CFBA 6600 0000                  		bne.w	loc_12FEE
0001CFBE 4A68 003E                  		tst.w	parent(a0)
0001CFC2 6600 0000                  		bne.w	Obj01_ResetScr
0001CFC6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CFCC 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001CFCE 4EB9 0000 0000             		jsr	Sonic_MoveLeft
0001CFD4                            
0001CFD4                            Obj01_NotLeft:
0001CFD4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CFDA 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001CFDC 4EB9 0000 0000             		jsr	Sonic_MoveRight
0001CFE2                            
0001CFE2                            Obj01_NotRight:
0001CFE2 1028 0026                  	move.b	angle(a0),d0
0001CFE6 0600 0020                  	addi.b	#$20,d0
0001CFEA 0200 00C0                  	andi.b	#$C0,d0		; is Sonic on a slope?
0001CFEE 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001CFF2 4A68 0020                  	tst.w	inertia(a0)	; is Sonic moving?
0001CFF6 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001CFFA 08A8 0005 0022             	bclr	#5,status(a0)
0001D000 117C 0005 001C             	move.b	#5,anim(a0)	; use "standing" animation
0001D006 0828 0003 0022             	btst	#3,status(a0)
0001D00C 6700 0000                  	beq.w	Sonic_Balance
0001D010 7000                       	moveq	#0,d0
0001D012 1028 003D                  	move.b	interact(a0),d0
0001D016 ED48                       	lsl.w	#6,d0
0001D018 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001D01C 43F1 0000                  	lea	(a1,d0.w),a1 ; a1=object
0001D020 4A29 0022                  	tst.b	status(a1)
0001D024 6B00 0000                  	bmi.w	Sonic_Lookup
0001D028 7200                       	moveq	#0,d1
0001D02A 1229 0023                  	move.b	width_pixels(a1),d1
0001D02E 3401                       	move.w	d1,d2
0001D030 D442                       	add.w	d2,d2
0001D032 5542                       	subq.w	#2,d2
0001D034 D268 0008                  	add.w	x_pos(a0),d1
0001D038 9269 0008                  	sub.w	x_pos(a1),d1
0001D03C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001D040 6600 0000                  	bne.w	SuperSonic_Balance
0001D044 0C41 0002                  	cmpi.w	#2,d1
0001D048 6D00                       	blt.s	Sonic_BalanceOnObjLeft
0001D04A B242                       	cmp.w	d2,d1
0001D04C 6C00                       	bge.s	Sonic_BalanceOnObjRight
0001D04E 6000 0000                  	bra.w	Sonic_Lookup
0001D052                            ; ---------------------------------------------------------------------------
0001D052                            ; loc_1A3FE:
0001D052                            SuperSonic_Balance:
0001D052 0C41 0002                  		cmpi.w	#2,d1
0001D056 6D00 0000                  		blt.w	SuperSonic_BalanceOnObjLeft
0001D05A B242                       		cmp.w	d2,d1
0001D05C 6C00 0000                  		bge.w	SuperSonic_BalanceOnObjRight
0001D060 6000 0000                  		bra.w	Sonic_Lookup
0001D064                            ; ---------------------------------------------------------------------------
0001D064                            ; balancing checks for when you're on the right edge of an object
0001D064                            ; loc_1A410:
0001D064                            Sonic_BalanceOnObjRight:
0001D064 0828 0000 0022             		btst	#0,status(a0)
0001D06A 6600                       		bne.s	@loc1
0001D06C 117C 0006 001C             		move.b	#6,anim(a0)
0001D072 5C42                       		addq.w	#6,d2
0001D074 B242                       		cmp.w	d2,d1
0001D076 6D00 0000                  		blt.w	Obj01_ResetScr
0001D07A 117C 000C 001C             		move.b	#$C,anim(a0)
0001D080 6000 0000                  		bra.w	Obj01_ResetScr
0001D084                                ; on right edge of object but facing left:
0001D084 08A8 0000 0022             @loc1:	bclr	#0,status(a0)
0001D08A 117C 0006 001C             		move.b	#6,anim(a0)
0001D090 5C42                       		addq.w	#6,d2
0001D092 B242                       		cmp.w	d2,d1
0001D094 6D00 0000                  		blt.w	Obj01_ResetScr
0001D098 117C 000C 001C             		move.b	#$C,anim(a0)
0001D09E 6000 0000                  		bra.w	Obj01_ResetScr
0001D0A2                            ; ---------------------------------------------------------------------------
0001D0A2                            ; balancing checks for when you're on the left edge of an object
0001D0A2                            ; loc_1A44E:
0001D0A2                            Sonic_BalanceOnObjLeft:
0001D0A2 0828 0000 0022             		btst	#0,status(a0)
0001D0A8 6700                       		beq.s	@loc2
0001D0AA 117C 0006 001C             		move.b	#6,anim(a0)
0001D0B0 0C41 FFFC                  		cmpi.w	#-4,d1
0001D0B4 6C00 0000                  		bge.w	Obj01_ResetScr
0001D0B8 117C 000C 001C             		move.b	#$C,anim(a0)
0001D0BE 6000 0000                  		bra.w	Obj01_ResetScr
0001D0C2                                ; on left edge of object but facing right:
0001D0C2 08E8 0000 0022             @loc2:	bset	#0,status(a0)
0001D0C8 117C 0006 001C             		move.b	#6,anim(a0)
0001D0CE 0C41 FFFC                  		cmpi.w	#-4,d1
0001D0D2 6C00 0000                  		bge.w	Obj01_ResetScr
0001D0D6 117C 000C 001C             		move.b	#$C,anim(a0)
0001D0DC 6000 0000                  		bra.w	Obj01_ResetScr
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            ; balancing checks for when you're on the edge of part of the level
0001D0E0                            ; loc_1A48C:
0001D0E0                            Sonic_Balance:
0001D0E0 3628 0008                  		move.w	x_pos(a0),d3
0001D0E4 4EB9 0000 0000             		jsr	ObjHitFloor
0001D0EA 0C41 000C                  		cmpi.w	#$C,d1
0001D0EE 6D00 0000                  		blt.w	Sonic_Lookup
0001D0F2 4A38 FE19                  		tst.b	(Super_Sonic_Flag).w
0001D0F6 6600 0000                  		bne.w	SuperSonic_Balance2
0001D0FA 0C28 0003 0036             		cmpi.b	#3,next_tilt(a0)
0001D100 6600                       		bne.s	Sonic_BalanceLeft
0001D102 0828 0000 0022             		btst	#0,status(a0)
0001D108 6600                       		bne.s	@loc3
0001D10A 117C 0006 001C             		move.b	#6,anim(a0)
0001D110 3628 0008                  		move.w	x_pos(a0),d3
0001D114 5D43                       		subq.w	#6,d3
0001D116 4EB9 0000 0000             		jsr	ObjHitFloor2
0001D11C 0C41 000C                  		cmpi.w	#$C,d1
0001D120 6D00 0000                  		blt.w	Obj01_ResetScr
0001D124 117C 000C 001C             		move.b	#$C,anim(a0)
0001D12A 6000 0000                  		bra.w	Obj01_ResetScr
0001D12E                                ; on right edge but facing left:
0001D12E 08A8 0000 0022             @loc3:	bclr	#0,status(a0)
0001D134 117C 0006 001C             		move.b	#6,anim(a0)
0001D13A 3628 0008                  		move.w	x_pos(a0),d3
0001D13E 5D43                       		subq.w	#6,d3
0001D140 4EB9 0000 0000             		jsr	ObjHitFloor2
0001D146 0C41 000C                  		cmpi.w	#$C,d1
0001D14A 6D00 0000                  		blt.w	Obj01_ResetScr
0001D14E 117C 000C 001C             		move.b	#$C,anim(a0)
0001D154 6000 0000                  		bra.w	Obj01_ResetScr
0001D158                            ; ---------------------------------------------------------------------------
0001D158                            
0001D158                            Sonic_BalanceLeft:
0001D158 0C28 0003 0037             		cmpi.b	#3,tilt(a0)
0001D15E 6600                       		bne.s	Sonic_Lookup
0001D160 0828 0000 0022             		btst	#0,status(a0)
0001D166 6700                       		beq.s	@loc4
0001D168 117C 0006 001C             		move.b	#6,anim(a0)
0001D16E 3628 0008                  		move.w	x_pos(a0),d3
0001D172 5C43                       		addq.w	#6,d3
0001D174 4EB9 0000 0000             		jsr	ObjHitFloor2
0001D17A 0C41 000C                  		cmpi.w	#$C,d1
0001D17E 6D00 0000                  		blt.w	Obj01_ResetScr
0001D182 117C 000C 001C             		move.b	#$C,anim(a0)
0001D188 6000 0000                  		bra.w	Obj01_ResetScr
0001D18C                                ; on left edge but facing right:
0001D18C 08E8 0000 0022             @loc4:	bset	#0,status(a0)
0001D192 117C 0006 001C             		move.b	#6,anim(a0)
0001D198 3628 0008                  		move.w	x_pos(a0),d3
0001D19C 5C43                       		addq.w	#6,d3
0001D19E 4EB9 0000 0000             		jsr	ObjHitFloor2
0001D1A4 0C41 000C                  		cmpi.w	#$C,d1
0001D1A8 6D00 0000                  		blt.w	Obj01_ResetScr
0001D1AC 117C 000C 001C             		move.b	#$C,anim(a0)
0001D1B2 6000 0000                  		bra.w	Obj01_ResetScr
0001D1B6                            ; ---------------------------------------------------------------------------
0001D1B6                            ; loc_1A55E:
0001D1B6                            SuperSonic_Balance2:
0001D1B6 0C28 0003 0036             		cmpi.b  #3,next_tilt(a0)
0001D1BC 6600                       		bne.s   loc_1A56E
0001D1BE                            
0001D1BE                            ; loc_1A566:
0001D1BE                            SuperSonic_BalanceOnObjRight:
0001D1BE 08A8 0000 0022             		bclr    #0,status(a0)
0001D1C4 6000                       		bra.s   loc_1A57C
0001D1C6                            ; ---------------------------------------------------------------------------
0001D1C6                            loc_1A56E:
0001D1C6 0C28 0003 0037             		cmpi.b  #3,tilt(a0)
0001D1CC 6600                       		bne.s   Sonic_Lookup
0001D1CE                            
0001D1CE                            ; loc_1A576:
0001D1CE                            SuperSonic_BalanceOnObjLeft:
0001D1CE 08E8 0000 0022             		bset    #0,status(a0)
0001D1D4                            
0001D1D4                            loc_1A57C:
0001D1D4 117C 0006 001C             		move.b  #6,anim(a0)
0001D1DA 6000                       		bra.s   Obj01_ResetScr
0001D1DC                            ; ---------------------------------------------------------------------------
0001D1DC                            
0001D1DC                            Sonic_LookUp:
0001D1DC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001D1E2 6700                       		beq.s	Sonic_Duck	; if not, branch
0001D1E4 117C 0007 001C             		move.b	#7,anim(a0)	; use "looking up" animation
0001D1EA 5238 C903                  		addq.b	#1,($FFFFC903).w
0001D1EE 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001D1F4 6500 0000                  		bcs.w	Obj01_ResetScr_Part2
0001D1F8 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001D1FE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001D204 6700 0000                  		beq.w	loc_12FC2
0001D208 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001D20C 6000 0000                  		bra.w	loc_12FC2
0001D210                            ; ===========================================================================
0001D210                             
0001D210                            Sonic_Duck:
0001D210 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001D216 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001D218 117C 0008 001C             		move.b	#8,anim(a0)	; use "ducking"	animation
0001D21E 5238 C903                  		addq.b	#1,($FFFFC903).w
0001D222 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001D228 6500                       		bcs.s	Obj01_ResetScr_Part2
0001D22A 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001D230 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001D236 6700                       		beq.s	loc_12FC2
0001D238 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001D23C 6000                       		bra.s	loc_12FC2		
0001D23E                            ; ===========================================================================
0001D23E                            ; moves the screen back to its normal position after looking up or down
0001D23E                             
0001D23E                            Obj01_ResetScr:
0001D23E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
0001D244                             
0001D244                            Obj01_ResetScr_Part2:
0001D244 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001D24A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001D24C 6400                       		bcc.s	loc_12FBE
0001D24E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001D252                             
0001D252                            loc_12FBE:
0001D252 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001D256                            
0001D256                            ; ---------------------------------------------------------------------------
0001D256                            ; updates Sonic's speed on the ground
0001D256                            ; ---------------------------------------------------------------------------
0001D256                            		
0001D256                            loc_12FC2:
0001D256 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001D25A 6700 0000                  		beq.w	@cont
0001D25E 3A3C 000C                  		move.w	#$C,d5
0001D262                            @cont:
0001D262 1038 F602                  		move.b	($FFFFF602).w,d0
0001D266 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001D26A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001D26C 3028 0020                  		move.w	inertia(a0),d0
0001D270 6700                       		beq.s	loc_12FEE
0001D272 6B00                       		bmi.s	loc_12FE2
0001D274 9045                       		sub.w	d5,d0
0001D276 6400                       		bcc.s	loc_12FDC
0001D278 303C 0000                  		move.w	#0,d0
0001D27C                            
0001D27C                            loc_12FDC:
0001D27C 3140 0020                  		move.w	d0,inertia(a0)
0001D280 6000                       		bra.s	loc_12FEE
0001D282                            ; ===========================================================================
0001D282                            
0001D282                            loc_12FE2:
0001D282 D045                       		add.w	d5,d0
0001D284 6400                       		bcc.s	loc_12FEA
0001D286 303C 0000                  		move.w	#0,d0
0001D28A                            
0001D28A                            loc_12FEA:
0001D28A 3140 0020                  		move.w	d0,inertia(a0)
0001D28E                            
0001D28E                            loc_12FEE:
0001D28E 1028 0026                  		move.b	$26(a0),d0
0001D292 4EB9 0000 8F30             		jsr	(CalcSine).l
0001D298 C3E8 0020                  		muls.w	inertia(a0),d1
0001D29C E081                       		asr.l	#8,d1
0001D29E 3141 0010                  		move.w	d1,x_vel(a0)
0001D2A2 C1E8 0020                  		muls.w	inertia(a0),d0
0001D2A6 E080                       		asr.l	#8,d0
0001D2A8 3140 0012                  		move.w	d0,y_vel(a0)
0001D2AC                            
0001D2AC                            loc_1300C:
0001D2AC 1028 0026                  		move.b	$26(a0),d0
0001D2B0 0600 0040                  		addi.b	#$40,d0
0001D2B4 6B00                       		bmi.s	locret_1307C
0001D2B6 123C 0040                  		move.b	#$40,d1
0001D2BA 4A68 0020                  		tst.w	inertia(a0)
0001D2BE 6700                       		beq.s	locret_1307C
0001D2C0 6B00                       		bmi.s	loc_13024
0001D2C2 4441                       		neg.w	d1
0001D2C4                            
0001D2C4                            loc_13024:
0001D2C4 1028 0026                          move.b    $26(a0),d0
0001D2C8 D001                               add.b    d1,d0
0001D2CA 3F00                               move.w    d0,-(sp)
0001D2CC 4EB9 0000 0000                     jsr    Sonic_WalkSpeed
0001D2D2 301F                               move.w    (sp)+,d0
0001D2D4 4A41                               tst.w    d1
0001D2D6 6A00                               bpl.s    locret_1307C
0001D2D8 E141                               asl.w    #8,d1
0001D2DA 0600 0020                          addi.b    #$20,d0
0001D2DE 0200 00C0                          andi.b    #$C0,d0
0001D2E2 6700                               beq.s    loc_13078
0001D2E4 0C00 0040                          cmpi.b    #$40,d0
0001D2E8 6700                               beq.s    loc_13066
0001D2EA 0C00 0080                          cmpi.b    #$80,d0
0001D2EE 6700                               beq.s    loc_13060
0001D2F0 0C68 0600 0010                     cmpi.w    #$600,x_vel(a0)
0001D2F6                                  ;  bge.s    Sonic_WallRecoil
0001D2F6 D368 0010                          add.w    d1,x_vel(a0)
0001D2FA 08E8 0005 0022                     bset    #5,status(a0)
0001D300 317C 0000 0020                     move.w    #0,inertia(a0)
0001D306 4E75                               rts
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            loc_13060:
0001D308 9368 0012                          sub.w    d1,y_vel(a0)
0001D30C 4E75                               rts    
0001D30E                            ; ===========================================================================
0001D30E                            
0001D30E                            loc_13066:
0001D30E 9368 0010                          sub.w    d1,x_vel(a0)
0001D312 08E8 0005 0022                     bset    #5,status(a0)
0001D318 317C 0000 0020                     move.w    #0,inertia(a0)
0001D31E 4E75                               rts    
0001D320                            ; ===========================================================================
0001D320                            
0001D320                            loc_13078:
0001D320 D368 0012                          add.w    d1,y_vel(a0)
0001D324                            
0001D324                            locret_1307C:
0001D324 4E75                               rts    
0001D326                            ; -------------------
0001D326                            
0001D326                            Sonic_WallRecoil:        ; CODE XREF: Sonic_Move+180j
0001D326 4E75                               rts
0001D328                            
0001D328                            Sonic_WallRecoil_Right:        ; CODE XREF: Sonic_Move+1D2j
0001D328 4E75                               rts
0001D32A                            ; End of function Sonic_Move
0001D32A                            
0001D32A                            
0001D32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D32A                            
0001D32A                            
0001D32A                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
0001D32A 3028 0020                  		move.w	inertia(a0),d0
0001D32E 6700                       		beq.s	loc_13086
0001D330 6A00                       		bpl.s	loc_130B2
0001D332                             
0001D332                            loc_13086:
0001D332 08E8 0000 0022             		bset	#0,status(a0)
0001D338 6600                       		bne.s	loc_1309A
0001D33A 08A8 0005 0022             		bclr	#5,status(a0)
0001D340 117C 0001 001D             		move.b	#1,next_anim(a0)
0001D346                             
0001D346                            loc_1309A:
0001D346 9045                       		sub.w	d5,d0
0001D348 3206                       		move.w	d6,d1
0001D34A 4441                       		neg.w	d1
0001D34C B041                       		cmp.w	d1,d0
0001D34E 6E00                       		bgt.s	loc_130A6
0001D350 D045                       		add.w	d5,d0
0001D352 B041                       		cmp.w	d1,d0
0001D354 6F00                       		ble.s	loc_130A6
0001D356 3001                       		move.w	d1,d0
0001D358                             
0001D358                            loc_130A6:
0001D358 3140 0020                  		move.w	d0,inertia(a0)
0001D35C 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001D362 4E75                       		rts
0001D364                            ; ===========================================================================
0001D364                            
0001D364                            loc_130B2:				; XREF: Sonic_MoveLeft
0001D364 9044                       		sub.w	d4,d0
0001D366 6400                       		bcc.s	loc_130BA
0001D368 303C FF80                  		move.w	#-$80,d0
0001D36C                            
0001D36C                            loc_130BA:
0001D36C 3140 0020                  		move.w	d0,inertia(a0)
0001D370 1028 0026                  		move.b	$26(a0),d0
0001D374 0600 0020                  		addi.b	#$20,d0
0001D378 0200 00C0                  		andi.b	#$C0,d0
0001D37C 6600                       		bne.s	locret_130E8
0001D37E 0C40 0400                  		cmpi.w	#$400,d0
0001D382 6D00                       		blt.s	locret_130E8
0001D384 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001D38A 08A8 0000 0022             		bclr	#0,status(a0)
0001D390 303C 0036                  		move.w	#$36,d0
0001D394 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001D39A                            ;		tst.b	($FFFFFE1E).w
0001D39A                            ;		beq.w	locret_130E8
0001D39A                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001D39A                            ;		bne.s	locret_130E8	; if yes, branch
0001D39A                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001D39A                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001D39A                            locret_130E8:
0001D39A 4E75                       		rts	
0001D39C                            ; End of function Sonic_MoveLeft
0001D39C                            
0001D39C                            
0001D39C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D39C                            
0001D39C                            
0001D39C                            Sonic_MoveRight:	   ; XREF: Sonic_Move
0001D39C 3028 0020                  		move.w	inertia(a0),d0
0001D3A0 6B00                       		bmi.s	loc_13118
0001D3A2 08A8 0000 0022             		bclr	#0,status(a0)
0001D3A8 6700                       		beq.s	loc_13104
0001D3AA 08A8 0005 0022             		bclr	#5,status(a0)
0001D3B0 117C 0001 001D             		move.b	#1,next_anim(a0)
0001D3B6                             
0001D3B6                            loc_13104:
0001D3B6 D045                       		add.w	d5,d0
0001D3B8 B046                       		cmp.w	d6,d0
0001D3BA 6D00                       		blt.s	loc_1310C
0001D3BC 9045                       		sub.w	d5,d0
0001D3BE B046                       		cmp.w	d6,d0
0001D3C0 6C00                       		bge.s	loc_1310C
0001D3C2 3006                       		move.w	d6,d0
0001D3C4                             
0001D3C4                            loc_1310C:
0001D3C4 3140 0020                  		move.w	d0,inertia(a0)
0001D3C8 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001D3CE 4E75                       		rts
0001D3D0                            ; ===========================================================================
0001D3D0                            
0001D3D0                            loc_13118:				; XREF: Sonic_MoveRight
0001D3D0 D044                       		add.w	d4,d0
0001D3D2 6400                       		bcc.s	loc_13120
0001D3D4 303C 0080                  		move.w	#$80,d0
0001D3D8                            
0001D3D8                            loc_13120:
0001D3D8 3140 0020                  		move.w	d0,inertia(a0)
0001D3DC 1028 0026                  		move.b	$26(a0),d0
0001D3E0 0600 0020                  		addi.b	#$20,d0
0001D3E4 0200 00C0                  		andi.b	#$C0,d0
0001D3E8 6600                       		bne.s	locret_1314E
0001D3EA 0C40 FC00                  		cmpi.w	#-$400,d0
0001D3EE 6E00                       		bgt.s	locret_1314E
0001D3F0 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001D3F6 08E8 0000 0022             		bset	#0,status(a0)
0001D3FC 303C 0036                  		move.w	#$36,d0
0001D400 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001D406                            ;		tst.b	($FFFFFE1E).w
0001D406                            ;		beq.w	locret_1314E
0001D406                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001D406                            ;		bne.s	locret_1314E	; if yes, branch
0001D406                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001D406                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001D406                            locret_1314E:
0001D406 4E75                       		rts	
0001D408                            ; End of function Sonic_MoveRight
0001D408                            
0001D408                            ; ---------------------------------------------------------------------------
0001D408                            ; Subroutine to	change Sonic's speed as he rolls
0001D408                            ; ---------------------------------------------------------------------------
0001D408                            
0001D408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D408                            
0001D408                            
0001D408                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001D408 3C38 F760                  		move.w	($FFFFF760).w,d6
0001D40C E346                       		asl.w	#1,d6
0001D40E 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001D410 3838 F764                  		move.w	($FFFFF764).w,d4
0001D414 E444                       		asr.w	#2,d4
0001D416 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001D41A 6600 0000                  		bne.w	loc_131CC
0001D41E 4A68 003E                  		tst.w	parent(a0)
0001D422 6600                       		bne.s	loc_13188
0001D424 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D42A 6700                       		beq.s	loc_1317C	; if not, branch
0001D42C 4EB9 0000 0000             		jsr	Sonic_RollLeft
0001D432                            
0001D432                            loc_1317C:
0001D432 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D438 6700                       		beq.s	loc_13188	; if not, branch
0001D43A 4EB9 0000 0000             		jsr	Sonic_RollRight
0001D440                            
0001D440                            loc_13188:
0001D440 3028 0020                  		move.w	inertia(a0),d0
0001D444 6700                       		beq.s	loc_131AA
0001D446 6B00                       		bmi.s	loc_1319E
0001D448 9045                       		sub.w	d5,d0
0001D44A 6400                       		bcc.s	loc_13198
0001D44C 303C 0000                  		move.w	#0,d0
0001D450                            
0001D450                            loc_13198:
0001D450 3140 0020                  		move.w	d0,inertia(a0)
0001D454 6000                       		bra.s	loc_131AA
0001D456                            ; ===========================================================================
0001D456                            
0001D456                            loc_1319E:				; XREF: Sonic_RollSpeed
0001D456 D045                       		add.w	d5,d0
0001D458 6400                       		bcc.s	loc_131A6
0001D45A 303C 0000                  		move.w	#0,d0
0001D45E                            
0001D45E                            loc_131A6:
0001D45E 3140 0020                  		move.w	d0,inertia(a0)
0001D462                            
0001D462                            loc_131AA:
0001D462 4A68 0020                  		tst.w	inertia(a0)		; is Sonic moving?
0001D466 6600                       		bne.s	loc_131CC	; if yes, branch
0001D468 08A8 0002 0022             		bclr	#2,$22(a0)
0001D46E 117C 0013 0016             		move.b	#$13,$16(a0)
0001D474 117C 0009 0017             		move.b	#9,$17(a0)
0001D47A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001D480 5B68 000C                  		subq.w	#5,$C(a0)
0001D484                            
0001D484                            loc_131CC:
0001D484 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
0001D48A 6700                       		beq.s	@cont2
0001D48C 6400                       		bcc.s	@cont1
0001D48E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001D492                             
0001D492                            @cont1:
0001D492 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001D496                             
0001D496                            @cont2:
0001D496 1028 0026                  		move.b	$26(a0),d0
0001D49A 4EB9 0000 8F30             		jsr	(CalcSine).l
0001D4A0 C1E8 0020                  		muls.w	inertia(a0),d0
0001D4A4 E080                       		asr.l	#8,d0
0001D4A6 3140 0012                  		move.w	d0,y_vel(a0)
0001D4AA C3E8 0020                  		muls.w	inertia(a0),d1
0001D4AE E081                       		asr.l	#8,d1
0001D4B0 0C41 1000                  		cmpi.w	#$1000,d1
0001D4B4 6F00                       		ble.s	loc_131F0
0001D4B6 323C 1000                  		move.w	#$1000,d1
0001D4BA                            
0001D4BA                            loc_131F0:
0001D4BA 0C41 F000                  		cmpi.w	#-$1000,d1
0001D4BE 6C00                       		bge.s	loc_131FA
0001D4C0 323C F000                  		move.w	#-$1000,d1
0001D4C4                            
0001D4C4                            loc_131FA:
0001D4C4 3141 0010                  		move.w	d1,x_vel(a0)
0001D4C8 6000 FDE2                  		bra.w	loc_1300C
0001D4CC                            ; End of function Sonic_RollSpeed
0001D4CC                            
0001D4CC                            
0001D4CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4CC                            
0001D4CC                            
0001D4CC                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001D4CC 3028 0020                  		move.w	inertia(a0),d0
0001D4D0 6700                       		beq.s	loc_1320A
0001D4D2 6A00                       		bpl.s	loc_13218
0001D4D4                            
0001D4D4                            loc_1320A:
0001D4D4 08E8 0000 0022             		bset	#0,status(a0)
0001D4DA 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001D4E0 4E75                       		rts	
0001D4E2                            ; ===========================================================================
0001D4E2                            
0001D4E2                            loc_13218:
0001D4E2 9044                       		sub.w	d4,d0
0001D4E4 6400                       		bcc.s	loc_13220
0001D4E6 303C FF80                  		move.w	#-$80,d0
0001D4EA                            
0001D4EA                            loc_13220:
0001D4EA 3140 0020                  		move.w	d0,inertia(a0)
0001D4EE 4E75                       		rts	
0001D4F0                            ; End of function Sonic_RollLeft
0001D4F0                            
0001D4F0                            
0001D4F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4F0                            
0001D4F0                            
0001D4F0                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001D4F0 3028 0020                  		move.w	inertia(a0),d0
0001D4F4 6B00                       		bmi.s	loc_1323A
0001D4F6 08A8 0000 0022             		bclr	#0,status(a0)
0001D4FC 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001D502 4E75                       		rts	
0001D504                            ; ===========================================================================
0001D504                            
0001D504                            loc_1323A:
0001D504 D044                       		add.w	d4,d0
0001D506 6400                       		bcc.s	loc_13242
0001D508 303C 0080                  		move.w	#$80,d0
0001D50C                            
0001D50C                            loc_13242:
0001D50C 3140 0020                  		move.w	d0,inertia(a0)
0001D510 4E75                       		rts	
0001D512                            ; End of function Sonic_RollRight
0001D512                            
0001D512                            ; ---------------------------------------------------------------------------
0001D512                            ; Subroutine to	change Sonic's direction while jumping
0001D512                            ; ---------------------------------------------------------------------------
0001D512                            
0001D512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D512                            
0001D512                            
0001D512                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
0001D512 3C38 F760                  		move.w	($FFFFF760).w,d6
0001D516 3A38 F762                  		move.w	($FFFFF762).w,d5
0001D51A E345                       		asl.w	#1,d5
0001D51C 0828 0004 0022             		btst	#4,status(a0)	
0001D522 6600                       		bne.s	Obj01_ResetScr2
0001D524 3028 0010                  		move.w	x_vel(a0),d0	
0001D528 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
0001D52E 6700                       		beq.s	loc_13278; if not, branch	
0001D530 08E8 0000 0022             		bset	#0,status(a0)	
0001D536 9045                       		sub.w	d5,d0	
0001D538 3206                       		move.w	d6,d1	
0001D53A 4441                       		neg.w	d1	
0001D53C B041                       		cmp.w	d1,d0	
0001D53E 6E00                       		bgt.s	loc_13278	
0001D540 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001D542 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001D544 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001D546 3001                       		move.w	d1,d0
0001D548                             
0001D548                            loc_13278:
0001D548 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
0001D54E 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001D550 08A8 0000 0022             		bclr	#0,status(a0)	
0001D556 D045                       		add.w	d5,d0	
0001D558 B046                       		cmp.w	d6,d0	
0001D55A 6D00                       		blt.s	Obj01_JumpMove
0001D55C 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
0001D55E B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001D560 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001D562 3006                       		move.w	d6,d0
0001D564                            
0001D564                            Obj01_JumpMove:
0001D564 3140 0010                  		move.w	d0,x_vel(a0)	; change Sonic's horizontal speed
0001D568                            
0001D568                            Obj01_ResetScr2:
0001D568 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001D56E 6700                       		beq.s	loc_132A4	; if yes, branch
0001D570 6400                       		bcc.s	loc_132A0
0001D572 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001D576                            
0001D576                            loc_132A0:
0001D576 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001D57A                            
0001D57A                            loc_132A4:
0001D57A 0C68 FC00 0012             		cmpi.w	#-$400,y_vel(a0)	; is Sonic moving faster than -$400 upwards?
0001D580 6500                       		bcs.s	locret_132D2	; if yes, branch
0001D582 3028 0010                  		move.w	x_vel(a0),d0
0001D586 3200                       		move.w	d0,d1
0001D588 EA41                       		asr.w	#5,d1
0001D58A 6700                       		beq.s	locret_132D2
0001D58C 6B00                       		bmi.s	loc_132C6
0001D58E 9041                       		sub.w	d1,d0
0001D590 6400                       		bcc.s	loc_132C0
0001D592 303C 0000                  		move.w	#0,d0
0001D596                            
0001D596                            loc_132C0:
0001D596 3140 0010                  		move.w	d0,x_vel(a0)
0001D59A 4E75                       		rts	
0001D59C                            ; ===========================================================================
0001D59C                            
0001D59C                            loc_132C6:
0001D59C 9041                       		sub.w	d1,d0
0001D59E 6500                       		bcs.s	loc_132CE
0001D5A0 303C 0000                  		move.w	#0,d0
0001D5A4                            
0001D5A4                            loc_132CE:
0001D5A4 3140 0010                  		move.w	d0,x_vel(a0)
0001D5A8                            
0001D5A8                            locret_132D2:
0001D5A8 4E75                       		rts	
0001D5AA                            ; End of function Sonic_ChgJumpDir
0001D5AA                            
0001D5AA                            ; ===========================================================================
0001D5AA                            ; ---------------------------------------------------------------------------
0001D5AA                            ; Unused subroutine to squash Sonic
0001D5AA                            ; ---------------------------------------------------------------------------
0001D5AA 1028 0026                  		move.b	$26(a0),d0
0001D5AE 0600 0020                  		addi.b	#$20,d0
0001D5B2 0200 00C0                  		andi.b	#$C0,d0
0001D5B6 6600                       		bne.s	locret_13302
0001D5B8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D5BC 4A41                       		tst.w	d1
0001D5BE 6A00                       		bpl.s	locret_13302
0001D5C0 317C 0000 0020             		move.w	#0,inertia(a0)	; stop Sonic moving
0001D5C6 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D5CC 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D5D2 117C 000B 001C             		move.b	#$B,anim(a0)	; use "warping"	animation
0001D5D8                            
0001D5D8                            locret_13302:
0001D5D8 4E75                       		rts
0001D5DA                            ; ---------------------------------------------------------------------------
0001D5DA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001D5DA                            ; ---------------------------------------------------------------------------
0001D5DA                            
0001D5DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5DA                            
0001D5DA                            
0001D5DA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001D5DA 2228 0008                  		move.l	8(a0),d1
0001D5DE 3028 0010                  		move.w	x_vel(a0),d0
0001D5E2 48C0                       		ext.l	d0
0001D5E4 E180                       		asl.l	#8,d0
0001D5E6 D280                       		add.l	d0,d1
0001D5E8 4841                       		swap	d1
0001D5EA 3038 F728                  		move.w	($FFFFF728).w,d0
0001D5EE 0640 0010                  		addi.w	#$10,d0
0001D5F2 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001D5F4 6200 0000                  		bhi.w	Boundary_Sides	; if yes, branch
0001D5F8 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001D5FC 0640 0128                  		addi.w	#$128,d0
0001D600 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001D604 6600                       		bne.s	loc_13332
0001D606 0640 0040                  		addi.w	#$40,d0
0001D60A                            
0001D60A                            loc_13332:
0001D60A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001D60C 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001D60E                            
0001D60E                            loc_13336:
0001D60E 3038 F726                  		move.w	($FFFFF726).w,d0
0001D612 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0001D616 6E00                       		bgt.s	@loc_64BE2
0001D618 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001D61C                            
0001D61C                            @loc_64BE2:	
0001D61C 0640 00E0                  		addi.w	#$E0,d0
0001D620 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001D624 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001D626 4E75                       		rts	
0001D628                            		
0001D628                            ; ===========================================================================
0001D628                            
0001D628                            Boundary_Bottom:
0001D628 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
0001D62E 6600 0000                  		bne.w	KillCharacter_JMP		; if not, kill Sonic
0001D632 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w	; is player at the sequence where Eggman presses the switch
0001D638 6500 0000                  		bcs.w	KillCharacter_JMP	; if not, kill Sonic
0001D63C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
0001D642 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level	to SBZ3	(LZ4)
0001D648                            ;		rts
0001D648                            Boundary_Bottom_locret:
0001D648 4E75                       		rts
0001D64A                            
0001D64A                            KillCharacter_JMP:
0001D64A 4EF9 0000 0000             		jmp	KillCharacter		
0001D650                            ; ===========================================================================
0001D650                            
0001D650                            Boundary_Sides:
0001D650 3140 0008                  		move.w	d0,8(a0)
0001D654 317C 0000 000A             		move.w	#0,$A(a0)
0001D65A 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Sonic moving
0001D660 317C 0000 0020             		move.w	#0,inertia(a0)
0001D666 6000 FFA6                  		bra.w	loc_13336
0001D66A                            ; End of function Sonic_LevelBound
0001D66A                            
0001D66A                            ; ---------------------------------------------------------------------------
0001D66A                            ; Subroutine allowing Sonic to roll when he's moving
0001D66A                            ; ---------------------------------------------------------------------------
0001D66A                            
0001D66A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D66A                            
0001D66A                            
0001D66A                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001D66A 4A38 F7CA                  	tst.b	($FFFFF7CA).w
0001D66E 6600                       	bne.s	Obj01_NoRoll
0001D670 1038 F602                  	move.b	(Ctrl_1_Held_Logical).w,d0
0001D674 0200 000C                  	andi.b	#$C,d0		; is left/right being pressed?
0001D678 6600                       	bne.s	Obj01_NoRoll	; if yes, branch
0001D67A 0838 0001 F602             	btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
0001D680 6700                       	beq.s	loc_11780
0001D682 3028 0020                  	move.w	inertia(a0),d0
0001D686 6A00                       	bpl.s	loc_13392
0001D688 4440                       	neg.w	d0
0001D68A                            loc_13392:
0001D68A 0C40 0100                  	cmpi.w	#$100,d0
0001D68E 6400                       	bcc.s	Obj01_ChkRoll
0001D690 0828 0003 0022             	btst	#3,status(a0)
0001D696 6600                       	bne.s	Obj01_NoRoll
0001D698 117C 0008 001C             	move.b	#8,anim(a0)
0001D69E                            
0001D69E                            Obj01_NoRoll:
0001D69E 4E75                       		rts	
0001D6A0                            		
0001D6A0                            loc_11780:
0001D6A0 0C28 0008 001C             	cmpi.b	#8,anim(a0)
0001D6A6 66F6                       	bne.s	Obj01_NoRoll
0001D6A8 117C 0000 001C             	move.b	#0,anim(a0)
0001D6AE 4E75                       	rts
0001D6B0                            ; ===========================================================================
0001D6B0                            
0001D6B0                            Obj01_ChkRoll:
0001D6B0 0828 0002 0022             		btst	#2,status(a0)	; is Sonic already rolling?
0001D6B6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001D6B8 4E75                       		rts	
0001D6BA                            ; ===========================================================================
0001D6BA                            
0001D6BA                            Obj01_DoRoll:
0001D6BA 08E8 0002 0022             		bset	#2,status(a0)
0001D6C0 117C 000E 0016             		move.b	#$E,$16(a0)
0001D6C6 117C 0007 0017             		move.b	#7,$17(a0)
0001D6CC 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001D6D2 5A68 000C                  		addq.w	#5,$C(a0)
0001D6D6 303C 003C                  		move.w	#$3C,d0
0001D6DA 4EB9 0000 3212             		jsr	(PlaySound).l ;	play rolling sound
0001D6E0 4A68 0020                  		tst.w	inertia(a0)
0001D6E4 6600                       		bne.s	locret_133E8
0001D6E6 317C 0200 0020             		move.w	#$200,inertia(a0)
0001D6EC                            
0001D6EC                            locret_133E8:
0001D6EC 4E75                       		rts	
0001D6EE                            ; End of function Sonic_Roll
0001D6EE                            
0001D6EE                            ; ---------------------------------------------------------------------------
0001D6EE                            ; Subroutine to perform a JumpDash
0001D6EE                            ; ---------------------------------------------------------------------------
0001D6EE                            
0001D6EE                            Sonic_JumpDash:
0001D6EE 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
0001D6F2 6600 0000                  		bne.w	JD_End
0001D6F6 1038 F603                  		move.b	($FFFFF603).w,d0		; is ABC pressed? (part 1)
0001D6FA 0200 0070                  		andi.b	#$70,d0			; is ABC pressed? (part 2)
0001D6FE 6700 0000                  		beq.w	JD_End			; if not, branch
0001D702 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001D708 6600 0000                  		bne.w	JD_End			; if yes, branch
0001D70C 08E8 0007 0022             		bset	#7,$22(a0)		; if not, set jumpdash flag
0001D712 303C 00B6                  		move.w	#$B6,d0			; set jumpdash sound
0001D716 4EB9 0000 3212             		jsr	(PlaySound).l		; play jumpdash sound
0001D71C 08A8 0004 0022             		bclr	#4,status(a0)		; clear double jump flag
0001D722                            
0001D722                            ;JD_SetSpeed1:
0001D722                            JD_SetSpeed1:
0001D722 7200                       		moveq	#0,d1				; Quickly clear d1
0001D724 0828 0002 002B             		btst	#2,status_secondary(a0)		; Does Sonic have speedshoes?
0001D72A 6700                       		beq.s	setJDspeed1				; If not, branch
0001D72C 5201                       		addq.b	#1,d1				; Quickly add 1 to d1
0001D72E                            setJDspeed1:
0001D72E 0828 0006 0022             		btst	#6,status(a0)			; Is Sonic underwater?
0001D734 6700                       		beq.s	setJDspeed2				; If not, branch
0001D736 5401                       		addq.b	#2,d1				; Quickly add 2 to d1
0001D738                            setJDspeed2:
0001D738 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; Is Sonic Super?
0001D73C 6700                       		beq.s	setJDspeed3				; If not, branch
0001D73E 5801                       		addq.b	#4,d1				; Quickly add 4 to d1
0001D740                            setJDspeed3:
0001D740 D201                       		add.b	d1,d1
0001D742 303B 1000                  		move.w	JDSpeedsettings(pc,d1.w),d0	; Load correct speed into d0
0001D746 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing left?
0001D74C 6700                       		beq.s	JD_Main			; if yes, branch
0001D74E 4440                       		neg.w	d0			; if not, negate d0 (for jumping to the right)
0001D750                            
0001D750                            JD_Main:
0001D750 3140 0010                  		move.w	d0,x_vel(a0)		; move sonic forward (X-velocity)
0001D754 4268 0012                  		clr.w	y_vel(a0)			; clear Y-velocity to move sonic directly down
0001D758                            JD_End:
0001D758 4E75                       		rts				; return or finish jumpdash
0001D75A                            ; End of function Sonic_JumpDash
0001D75A                            
0001D75A                            JDSpeedsettings:	
0001D75A 0A00                       	dc.w	$A00		; $00	; Normal
0001D75C 0B00                       	dc.w	$B00		; $08	; Normal with Speedshoes
0001D75E 0600                       	dc.w	$600		; $16	; Normal Underwater
0001D760 0800                       	dc.w	$800		; $24	; Normal Underwater with Speedshoes
0001D762 0E00                       	dc.w	$E00		; $32	; Super
0001D764 0F00                       	dc.w	$F00		; $40	; Super with Speedshoes
0001D766 0A00                       	dc.w	$A00		; $48	; Super Underwater
0001D768 0B00                       	dc.w	$B00		; $56	; Super Underwater with Speedshoes
0001D76A                            
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A                            ; Subroutine Sonic_Homingattack
0001D76A                            ; ---------------------------------------------------------------------------
0001D76A                            
0001D76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D76A                            
0001D76A                            Sonic_Homingattack:
0001D76A 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; is Sonic chasing some object?
0001D76E 6600 0000                  		bne.w   HA_Move            ; if yes, chase him
0001D772                            ;		jsr	Obj01_AfterImage_Start	; if yes, don't negate it
0001D772 1238 F603                  		move.b	($FFFFF603).w,d1	; read controller
0001D776 0201 0070                  		andi.b	#$70,d1				; is A, B or C pressed?
0001D77A 6700 0000                  		beq.w	Sonic_HA_rts		; if not, branch
0001D77E                            
0001D77E 43F8 D800                  		lea		($FFFFD800).w,a1	; start at the first level object RAM
0001D782                            
0001D782                            ; ---------------------------------------------------------------------------
0001D782                            
0001D782                            HA_enemylist:
0001D782 4A11                       		tst.b	(a1)			; is a Null object
0001D784 6700                       		beq.s	HA_nextobject	; if yes, branch
0001D786 0C29 0005 0020             		cmpi.b	#5,collision_flags(a1)		; is not an enemy object? (spring, explosion, platform, collected ring, flame thrower (SBZ), among others)
0001D78C 6500 0000                  		bcs.w	HA_nextobject	; if yes, branch
0001D790                            		; cmpi.b	#5,collision_flags(a1)		; is Burrobot enemy (LZ)
0001D790                            		; beq.w	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#6,collision_flags(a1)		; is Crabmeat enemy (GHZ, SYZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#8,collision_flags(a1)		; is Buzz Bomber enemy (GHZ, MZ, SYZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#9,collision_flags(a1)		; is Chopper enemy (GHZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#$A,collision_flags(a1)	; is Jaws enemy (LZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#$B,collision_flags(a1)	; is Caterkiller enemy (MZ, SBZ) / Orbinaut enemy (LZ, SLZ, SBZ) / Basaran enemy (MZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#$C,collision_flags(a1)	; is Roller enemy (SYZ) / Newtron enemy (GHZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch	
0001D790                            		; cmpi.b	#$D,collision_flags(a1)	; is Newtron enemy (GHZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#$E,collision_flags(a1)	; is Roller enemy (SYZ)
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790                            		; cmpi.b	#$F,collision_flags(a1)	; is Eggman
0001D790                            		; beq.s	HA_calcdistance	; if yes, branch
0001D790 0C29 000F 0020             		cmpi.b	#$F,collision_flags(a1)		; is some enemy of the list above?
0001D796 6300                       		bls.s	HA_calcdistance ; if yes, branch
0001D798 0C29 0046 0020             		cmpi.b	#$46,collision_flags(a1)	; is the monitor?
0001D79E 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D7A0                            		; cmpi.b	#$47,collision_flags(a1)		; is the ring?
0001D7A0                            		; beq.s	HA_calcdistance 		; if yes, branch
0001D7A0 0C29 0052 0020             		cmpi.b	#$52,collision_flags(a1)	; is giant ring for entry to special stage?
0001D7A6 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D7A8 0C29 00CC 0020             		cmpi.b	#$CC,collision_flags(a1)	; is Yadrin enemy (SYZ)
0001D7AE 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D7B0                            
0001D7B0                            HA_nextobject:
0001D7B0 D2FC 0040                  		adda.w  #$40,a1			; jump to next object RAM entry
0001D7B4 B2FC F000                  		cmpa.w  #$F000,a1		; already tested all object RAM entry?
0001D7B8 6DC8                       		blt.s   HA_enemylist	; if not, return to enemy list
0001D7BA                            ;		bsr.w	Sonic_JumpDash		; if not, perform a simple jump dash :P
0001D7BA                            HA_nextobject_rts:
0001D7BA 4E75                       		rts
0001D7BC                            
0001D7BC                            ; ---------------------------------------------------------------------------
0001D7BC                            
0001D7BC                            HA_calcdistance:	; distance calculator
0001D7BC 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D7C0 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D7C4 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D7C8 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D7CC                            ; ---------------------------------------------------------------------------
0001D7CC                            
0001D7CC                            ; test if the Sonic is facing the object
0001D7CC 0828 0000 0022             		btst    #0,status(a0)	; is sonic facing left?
0001D7D2 6700                       		beq.s   HA_faceleft	; if yes, branch
0001D7D4 0C41 0008                  		cmpi.w  #8,d1		; is distance of Sonic, less than 8 pixels of the object?
0001D7D8 6D00                       		blt.s   HA_calcdistance2	; if yes, branch
0001D7DA 60D4                       		bra.s   HA_nextobject
0001D7DC                            
0001D7DC                            HA_faceleft:
0001D7DC 0C41 FFF8                  		cmpi.w  #-8,d1		; is distance of Sonic, greater than -8 pixels of the object?
0001D7E0 6E00                       		bgt.s   HA_calcdistance2	; if yes, branch
0001D7E2 60CC                       		bra.s   HA_nextobject
0001D7E4                            ; end of test
0001D7E4                            
0001D7E4                            ; ---------------------------------------------------------------------------
0001D7E4                            
0001D7E4                            HA_calcdistance2:		; continuation of distance calculator
0001D7E4                            ;		tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D7E4                            ;		beq.w	HA_calcdistance3		; if yes, branch (Keeps you from transforming multiple times while in the air)		
0001D7E4                            ;		move.b	#0,($FFFFFF7F).w
0001D7E4                            ;		bra.w	HA_Move
0001D7E4                            ;HA_calcdistance3:
0001D7E4 C3C1                       		muls.w  d1,d1	; horizontal distance squared
0001D7E6 C5C2                       		muls.w  d2,d2	; vertical distance squared
0001D7E8 D282                       		add.l   d2,d1	; add vertical distance to horizontal distance
0001D7EA 0C81 0000 4000             		cmp.l   #16384,d1		; is distance of Sonic, greater than or equal 128 pixels of the object? (128^2=16384 // $80^2=$4000)
0001D7F0 6CBE                       		bge.s   HA_nextobject	; if yes, don't execute the homing attack
0001D7F2 08A8 0004 0022             		bclr   #4,status(a0)         ; clear "uncontrolled jump" flag
0001D7F8 117C 0002 001C             		move.b	#2,anim(a0)
0001D7FE 303C 00B6                  		move.w   #$B6,d0            ; set homing attack sound
0001D802 4EB9 0000 3212             		jsr   (PlaySound).l         ; play homing attack sound
0001D808 11FC 001E FF7F             		move.b   #30,($FFFFFF7F).w   ; number of frames Sonic can chasing the object
0001D80E 21C9 FF02                  		move.l   a1,($FFFFFF02).w   ; save the object address that Sonic is chasing
0001D812 303C 00B6                  		move.w	#$B6,d0				; set homing attack sound
0001D816 4EB9 0000 3212             		jsr	(PlaySound).l			; play homing attack sound
0001D81C 08A8 0004 0022             		bclr	#4,status(a0)			; clear "uncontrolled jump" flag
0001D822 11FC 001E FF7F             		move.b	#30,($FFFFFF7F).w	; number of frames Sonic can chasing the object
0001D828 21C9 FF02                  		move.l	a1,($FFFFFF02).w	; save the object address that Sonic is chasing
0001D82C                            ; ---------------------------------------------------------------------------
0001D82C                            
0001D82C                            HA_Move:
0001D82C 2278 FF02                  		movea.l	($FFFFFF02).w,a1	; load the object address that Sonic is chasing
0001D830 5338 FF7F                  		subi.b	#1,($FFFFFF7F).w	; sub 1 of frames counter
0001D834 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; the time to the Sonic chasing some object is over?
0001D838 6700 0000                  		beq.w	Sonic_HA_rts		; if yes, don't make the Homing Attack
0001D83C                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D83C 3229 0008                  		move.w  8(a1),d1   ; move the object x-position to d1
0001D840 3429 000C                  		move.w  $C(a1),d2   ; move the object y-position to d2
0001D844 9268 0008                  		sub.w   8(a0),d1   ; sub sonic x-position of object x-position
0001D848 9468 000C                  		sub.w   $C(a0),d2   ; sub sonic y-position of object y-position
0001D84C 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; the time to the Sonic chasing some object is over?
0001D850 6700 0000                  		beq.w   Sonic_HA_rts      ; if yes, don't make the Homing Attack
0001D854                            ; ---------------------------------------------------------------------------
0001D854                            
0001D854                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D854 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D858 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D85C 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D860 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D864                            
0001D864 4EB9 0000 91FE             		jsr		(CalcAngle).l	; calculates the angle
0001D86A 4EB9 0000 8F30             		jsr		(CalcSine).l	; calculates the sine and the cosine
0001D870 C3FC 000C                  		muls.w  #$C,d1			; multiply cosine by $C
0001D874 3141 0010                  		move.w  d1,x_vel(a0)		; move d1 to X-velocity
0001D878 C1FC 000C                  		muls.w  #$C,d0			; multiply sine by $C
0001D87C 3140 0012                  		move.w  d0,y_vel(a0)		; move d0 to Y-velocity
0001D880                            
0001D880                            Sonic_HA_rts:
0001D880 4E75                       		rts						; return
0001D882                            ; Command of Homingattack end here
0001D882                            
0001D882                            ; ---------------------------------------------------------------------------
0001D882                            ; Subroutine allowing Sonic to jump
0001D882                            ; ---------------------------------------------------------------------------
0001D882                            
0001D882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D882                            
0001D882                            
0001D882                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001D882 1038 F603                  		move.b	($FFFFF603).w,d0
0001D886 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D88A 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001D88E 7000                       		moveq	#0,d0
0001D890 1028 0026                  		move.b	$26(a0),d0
0001D894 0600 0080                  		addi.b	#$80,d0
0001D898 6100 0000                  		bsr.w	sub_14D48
0001D89C 0C41 0006                  		cmpi.w	#6,d1			; does Sonic have enough room to jump?
0001D8A0 6D00 0000                  		blt.w	locret_1348E		; if not, branch
0001D8A4 343C 0680                  		move.w	#$680,d2
0001D8A8 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001D8AC 6700                       		beq.s	@nochgjmpheight
0001D8AE 343C 0800                  		move.w	#$800,d2	; set higher jump speed if super
0001D8B2                            @nochgjmpheight:
0001D8B2 0828 0006 0022             		btst	#6,status(a0)	; Test if underwater
0001D8B8 6700                       		beq.s	@chgjmpheightnotuw
0001D8BA 343C 0380                  		move.w	#$380,d2	; set lower jump speed if under
0001D8BE                            @chgjmpheightnotuw:
0001D8BE 7000                       		moveq	#0,d0
0001D8C0 1028 0026                  		move.b	$26(a0),d0
0001D8C4 0400 0040                  		subi.b	#$40,d0
0001D8C8 4EB9 0000 8F30             		jsr	(CalcSine).l
0001D8CE C3C2                       		muls.w	d2,d1
0001D8D0 E081                       		asr.l	#8,d1
0001D8D2 D368 0010                  		add.w	d1,x_vel(a0)	; make Sonic jump
0001D8D6 C1C2                       		muls.w	d2,d0
0001D8D8 E080                       		asr.l	#8,d0
0001D8DA D168 0012                  		add.w	d0,y_vel(a0)	; make Sonic jump
0001D8DE 08E8 0001 0022             		bset	#1,status(a0)
0001D8E4 08A8 0005 0022             		bclr	#5,status(a0)
0001D8EA 588F                       		addq.l	#4,sp
0001D8EC 117C 0001 003C             		move.b	#1,$3C(a0)
0001D8F2 4228 0038                  		clr.b	$38(a0)
0001D8F6 303C 0062                  		move.w	#$62,d0
0001D8FA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D900                            		;move.b	#$13,y_radius(a0)	; set to standing height	;<-- the offending lines
0001D900                            		;move.b	#9,x_radius(a0)		; and width			;<--
0001D900 0828 0002 0022             		btst	#2,status(a0)
0001D906 6600                       		bne.s	loc_13490
0001D908 117C 000E 0016             		move.b	#$E,$16(a0)
0001D90E 117C 0007 0017             		move.b	#7,$17(a0)
0001D914 117C 0002 001C             		move.b	#2,anim(a0)	; use "jumping"	animation
0001D91A 08E8 0002 0022             		bset	#2,status(a0)
0001D920 5A68 000C                  		addq.w	#5,$C(a0)
0001D924                            
0001D924                            locret_1348E:
0001D924 4E75                       		rts	
0001D926                            ; ===========================================================================
0001D926                            
0001D926                            loc_13490:
0001D926 08E8 0004 0022             		bset	#4,status(a0)
0001D92C 4E75                       		rts	
0001D92E                            ; End of function Sonic_Jump
0001D92E                            
0001D92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D92E                            
0001D92E                            
0001D92E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001D92E 4A28 003C                  		tst.b	$3C(a0)
0001D932 6700                       		beq.s	loc_134C4
0001D934 323C FC00                  		move.w	#-$400,d1
0001D938 0828 0006 0022             		btst	#6,status(a0)
0001D93E 6700                       		beq.s	loc_134AE
0001D940 323C FE00                  		move.w	#-$200,d1
0001D944                            
0001D944                            loc_134AE:
0001D944 B268 0012                  		cmp.w	y_vel(a0),d1
0001D948 6F00                       		ble.s	locret_134C2
0001D94A 1038 F602                  		move.b	($FFFFF602).w,d0
0001D94E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D952 6600                       		bne.s	locret_134C2	; if yes, branch
0001D954 3141 0012                  		move.w	d1,y_vel(a0)
0001D958                            
0001D958                            locret_134C2:
0001D958 4A38 F7CC                  		tst.b   (Control_Locked).w      ; Are Controls locked?
0001D95C 6600                       		bne.s   locret_134D2            ; If so, branch, and do not bother with Super code
0001D95E                            		;tst.b	y_vel(a0)				; is Sonic exactly at the height of his jump?		
0001D95E 1038 F603                  		move.b  (Ctrl_1_Press_Logical).w,d0
0001D962 0200 0020                  		andi.b  #$20,d0 ; is A button pressed?
0001D966 6600                       		bne.s   Sonic_CheckGoSuper      ; if yes, test for turning into Super Sonic
0001D968 4E75                       		rts	
0001D96A                            ; ===========================================================================
0001D96A                            
0001D96A                            loc_134C4:
0001D96A 0C68 F040 0012             		cmpi.w	#-$FC0,y_vel(a0)
0001D970 6C00                       		bge.s	locret_134D2
0001D972 317C F040 0012             		move.w	#-$FC0,y_vel(a0)
0001D978                            
0001D978                            locret_134D2:
0001D978 4E75                       		rts	
0001D97A                            ; End of function Sonic_JumpHeight
0001D97A                            
0001D97A                            ; ===========================================================================
0001D97A                            
0001D97A                            
0001D97A                            PalLoad_Loop: ;Quick load
0001D97A 34D9                       		move.w	(a1)+,(a2)+              ;Copy pallete data to RAM
0001D97C 51C8 FFFC                  		dbf	d0,PalLoad_Loop               ;Loop d0 (length)
0001D980 4E75                       		rts
0001D982                            
0001D982                            nsup:
0001D982 4E75                            rts
0001D984                            
0001D984                            ; ===========================================================================
0001D984                            
0001D984                            ; ---------------------------------------------------------------------------
0001D984                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001D984                            ; if he has enough rings and all of the emeralds
0001D984                            ; ---------------------------------------------------------------------------
0001D984                            
0001D984                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D984                            
0001D984                            ; loc_1AB38: test_set_SS:
0001D984                            Sonic_CheckGoSuper:
0001D984                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D984                            ;	bne.w	return_1ABA4		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001D984 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001D988 6700 0000                  	beq.w	return_1ABA4		; if yes, branch
0001D98C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001D990 6600 0000                  	bne.w	return_1ABA4	; if yes, branch
0001D994 0C38 0006 FE57             	cmpi.b	#6,($FFFFFE57).w	; does Sonic have exactly 7 emeralds?
0001D99A 6600 0000                  	bne.w	return_1ABA4		; if not, branch
0001D99E 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
0001D9A4 6500 0000                  	bcs.w	return_1ABA4		; if not, branch
0001D9A8 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
0001D9AE 6700                       	beq.s	@loc
0001D9B0 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
0001D9B6 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
0001D9BC 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001D9C2                            @loc:
0001D9C2                            ;	move.b	#1,(Transforming_Flag-1).w
0001D9C2                            ;	lea	(MainCharacter).w,a1
0001D9C2 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001D9C8 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
0001D9CE 4238 FF88                  	clr.b	($FFFFFF88).w
0001D9D2 217C 0000 0000 0004        	move.l	#Map_SuperSonic,mappings(a0)
0001D9DA 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001D9E0                            ;	moveq	#$44,d0
0001D9E0                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D9E0 11FC 0001 F7C8             	move.b	#$1,($FFFFF7C8).w
0001D9E6 4EB9 0000 0000             	jsr	Super_and_Invincibility_Stars_Jmp
0001D9EC 117C 0022 001C             	move.b	#$22,anim(a0)			; use transformation animation
0001D9F2 08A8 0002 002B             	bclr	#2,status_secondary(a0)	; clear Super Shoes	;Mercury Constants
0001D9F8 31FC 00E3 F00A             	move.w	#$E3,($FFFFF00A).w
0001D9FE 4228 0034                  	clr.b	speedshoes_time(a0)	; clear time limit of the invincibility
0001DA02 117C 0000 0032             	move.b	#0,invincibility_time(a0)
0001DA08 08E8 0001 002B             	bset	#1,status_secondary(a0)	; make Sonic invincible
0001DA0E 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001DA12 6100 0000                  	bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001DA16 11FC 008E D200             	move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD200
0001DA1C                            ;	moveq	#$26,d0
0001DA1C                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001DA1C                            ;	moveq	#$23,d0
0001DA1C                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001DA1C 4238 FF7F                  	clr.b	($FFFFFF7F).w 
0001DA20 303C 0046                  	move.w	#$46,d0
0001DA24 4EB9 0000 325C             	jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001DA2A                            ;	tst.b	(Current_Boss_ID).w
0001DA2A                            ;	bne.s	return_1ABA4		; branch if in a boss fight
0001DA2A 303C 002D                  	move.w	#$2D,d0
0001DA2E 4EF9 0000 3212                 jmp    (PlaySound).l; load the Super Sonic song and return
0001DA34 4E75                       	rts
0001DA36                            	
0001DA36                            ; ---------------------------------------------------------------------------
0001DA36                            return_1ABA4:
0001DA36 4E75                       	rts
0001DA38                            ; End of subroutine Sonic_CheckGoSuper
0001DA38                            
0001DA38                            Super_and_Invincibility_Stars_Jmp:
0001DA38 4EFA 82FA                  	jmp	Super_and_Invincibility_Stars
0001DA3C 4E75                       	rts
0001DA3E                            ; ---------------------------------------------------------------------------
0001DA3E                            ; Subroutine doing the extra logic for Super Sonic
0001DA3E                            ; ---------------------------------------------------------------------------
0001DA3E                            
0001DA3E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001DA3E                            
0001DA3E                            ; loc_1ABA6:
0001DA3E                            Sonic_Super:
0001DA3E                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001DA3E                            ;	bne.w	return_1AC3C		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001DA3E 4A38 FE19                      tst.b    ($FFFFFE19).w; Ignore all this code if not Super Sonic
0001DA42 6700 0000                      beq.w    return_1AC3C 
0001DA46 4A38 FE1E                      tst.b    ($FFFFFE1E).w
0001DA4A 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001DA4C 217C 0000 0000 0004        	move.l	#Map_SuperSonic,4(a0)	; Load the Super Sonic map.
0001DA54 45F9 0000 0000             	lea		(SuperSonicDynPLC).l,a2	; Load the Super Sonic DPLC.
0001DA5A 4A38 FE1E                  	tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0001DA5E 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001DA60                            ;	tst.b	($FFFFFF70).w		; check if the time counter is stopped
0001DA60                            ;	bne.s	Sonic_RevertToNormal; if yes, revert to normal
0001DA60 5378 F670                      subq.w    #1,($FFFFF670).w
0001DA64 6A00 0000                      bpl.w    return_1AC3C
0001DA68 31FC 003C F670                 move.w    #60,($FFFFF670).w; Reset frame counter to 60
0001DA6E 4A78 FE20                      tst.w    ($FFFFFE20).w
0001DA72 6700                           beq.s    Sonic_RevertToNormal
0001DA74 0038 0001 FE1D                 ori.b    #1,($FFFFFE1D).w
0001DA7A 0C78 0001 FE20                 cmpi.w    #1,($FFFFFE20).w
0001DA80 6700                           beq.s    loc4
0001DA82 0C78 000A FE20                 cmpi.w    #10,($FFFFFE20).w
0001DA88 6700                           beq.s    loc4
0001DA8A 0C78 0064 FE20                 cmpi.w    #100,($FFFFFE20).w
0001DA90 6600                           bne.s    loc5
0001DA92                            loc4:
0001DA92 0038 0080 FE1D                 ori.b    #$80,($FFFFFE1D).w
0001DA98                            loc5:
0001DA98 5378 FE20                      subq.w    #1,($FFFFFE20).w
0001DA9C 6600 0000                      bne.w    return_1AC3C
0001DAA0                            ; loc_1ABF2:
0001DAA0                            Sonic_RevertToNormal:
0001DAA0                            ;	move.b	#1,(Transforming_Flag-1).w
0001DAA0 4238 FF88                  	clr.b	($FFFFFF88).w
0001DAA4 21FC 0000 0000 D004        	move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load the sonic map.
0001DAAC                            ;	moveq	#$27,d0
0001DAAC                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001DAAC                            ;	tst.b	($FFFFFE2C).w		; is sonic super?
0001DAAC                            ;	bne.w	Sonic_RevertToNormal_2		; if yes, branch
0001DAAC                            ;	moveq	#$24,d0
0001DAAC                            ;	jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001DAAC                            ;	jmp	Sonic_RevertToNormal_3
0001DAAC                            ;Sonic_RevertToNormal_2:
0001DAAC                            ;	moveq	#$28,d0
0001DAAC                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001DAAC                            ;Sonic_RevertToNormal_3:
0001DAAC                            ;	tst.b	(Current_Boss_ID).w
0001DAAC                            ;	bne.w	Sonic_RevertToNormal_4		; branch if in a boss fight
0001DAAC 4A38 F7AA                  	tst.b	(Current_Boss_ID).w
0001DAB0 6700                       	beq.s	Sonic_RevertToNormalNonBoss		; branch if not in a boss fight
0001DAB2 4EB9 0000 0000             	jsr		super_GetBgm
0001DAB8 4EF9 0000 0000             	jmp		Sonic_RevertToNormal_4
0001DABE                            Sonic_RevertToNormalNonBoss:	
0001DABE 4EB9 0000 0000             	jsr		super_GetBgmRevert
0001DAC4                            Sonic_RevertToNormal_4:
0001DAC4 11FC 0002 F65F                 move.b    #2,($FFFFF65F).w; Remove rotating palette
0001DACA 31FC 0028 F65C                 move.w    #$28,($FFFFF65C).w; Unknown
0001DAD0 11FC 0000 FE19                 move.b    #0,($FFFFFE19).w
0001DAD6 117C 0001 001D                 move.b    #1,next_anim(a0); Change animation back to normal ?
0001DADC 08A8 0001 002B                 bclr	#1,status_secondary(a0); Remove invincibility
0001DAE2 45F8 F760                  	lea	(Sonic_top_speed).w,a2		; Load Sonic_top_speed into a2
0001DAE6 6000 0000                  	bra.w	ApplySpeedSettings		; Fetch Speed settings and return
0001DAEA                            super_GetBgmRevert:
0001DAEA                            
0001DAEA                            super_GetBgm:
0001DAEA                            ;		Boss Only
0001DAEA                            ;		move.b	(a1,d0.w),d1
0001DAEA                            ;		btst	d0,d1
0001DAEA                            ;		beq.w	return_1AC3C
0001DAEA                            ;		move.w  (Level_Music).w,d0
0001DAEA 7000                       		moveq	#0,d0
0001DAEC 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001DAF0 6600                       		bne.s	setmusiclevel
0001DAF2 3038 FF90                  		move.w  (Level_Music).w,d0
0001DAF6 4EF9 0000 0000             		jmp	loc_140A6_2
0001DAFC                            setmusiclevel:
0001DAFC 7000                       		moveq	#0,d0
0001DAFE 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001DB02 6700                       		beq.s	setmusic1				; If not, branch
0001DB04 5200                       		addq.b	#1,d0				; Quickly add 1 to d0
0001DB06                            setmusic1:
0001DB06 0C29 0004 0021             		cmpi.b	#$4,collision_property(a1)
0001DB0C 6F00 0000                  		ble.w	setmusic2				; If not, branch
0001DB10 5400                       		addq.b	#2,d0				; Quickly add 2 to d0
0001DB12                            setmusic2:
0001DB12 D000                       		add.b	d0,d0				; Multiply itself
0001DB14 323B 0000                  		move	BossMusicSettings(pc,d0.w),d1	; Load correct speed settings into a1
0001DB18 3001                       		move.w	d1,d0
0001DB1A 4E75                       		rts					; Finish subroutine
0001DB1C                            	
0001DB1C                            BossMusicSettings:
0001DB1C 000E                       	dc.w	$0E
0001DB1E 000D                       	dc.w	$0D
0001DB20                            ;	dc.w	Level_Music
0001DB20                            	even
0001DB20                            
0001DB20                            
0001DB20                            
0001DB20                            loc_140A6_2:
0001DB20 4EF9 0000 0000             	jmp	(PlayMusic).l
0001DB26                            	
0001DB26                            return_1AC3C:
0001DB26 4E75                           rts
0001DB28                            ; End of subroutine Sonic_Super
0001DB28                            
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                            ; Subroutine to make Sonic perform a spindash
0001DB28                            ; ---------------------------------------------------------------------------
0001DB28                             
0001DB28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB28                             
0001DB28                             
0001DB28                            Sonic_Spindash:
0001DB28 4A28 0039                  		tst.b	$39(a0)			; already spindashing?
0001DB2C 6600 0000                  		bne.w	loc2_1AC8E		; if set, branch
0001DB30 0C28 0008 001C             		cmpi.b	#8,anim(a0)		; is anim duck
0001DB36 6600 0000                  		bne.w	locret2_1AC8C		; if not, return
0001DB3A 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001DB3E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001DB42 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
0001DB46 117C 001F 001C             		move.b	#$1F,anim(a0)		; set spindash anim (9 in s2)
0001DB4C 303C 00AB                  		move.w	#$AB,d0			; spin sound ($E0 in s2)
0001DB50 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play spin sound
0001DB56 588F                       		addq.l	#4,sp			; increment stack ptr
0001DB58 117C 0001 0039             		move.b	#1,$39(a0)		; set spindash flag
0001DB5E 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
0001DB64 0C28 000C 0028             		cmpi.b	#$C,subtype(a0)		; ??? oxygen remaining?
0001DB6A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; ??? $D11C only seems
0001DB70                            						; to be used in spindash 
0001DB70                            loc2_1AC84:
0001DB70 4EBA FA68                  		jsr	Sonic_LevelBound
0001DB74 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001DB7A                             
0001DB7A                            locret2_1AC8C:
0001DB7A 4E75                       		rts	
0001DB7C                            ; ---------------------------------------------------------------------------
0001DB7C                             
0001DB7C                            loc2_1AC8E:
0001DB7C 117C 001F 001C             		move.b	#$1F,anim(a0)
0001DB82 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
0001DB86 0800 0001                  		btst	#1,d0			; check down button
0001DB8A 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001DB8E 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001DB94 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
0001DB9A 117C 0002 001C             		move.b	#2,anim(a0)		; set animation to roll
0001DBA0 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001DBA4 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
0001DBAA 7000                       		moveq	#0,d0
0001DBAC 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001DBB0 D040                       		add.w	d0,d0			; double it
0001DBB2 317B 0000 0020             		move.w	spdsh_norm(pc,d0.w),inertia(a0) ; get normal speed
0001DBB8 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001DBBC 6700                       		beq.s	loc2_1ACD0		; if no, branch
0001DBBE 317B 0000 0020             		move.w	spdsh_super(pc,d0.w),inertia(a0) ; get super speed
0001DBC4                             
0001DBC4                            loc2_1ACD0:					; TODO: figure this out
0001DBC4 3028 0020                  		move.w	inertia(a0),d0		; get inertia
0001DBC8 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001DBCC D040                       		add.w	d0,d0			; double it
0001DBCE 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
0001DBD2 4440                       		neg.w	d0			; negate it
0001DBD4 0640 2000                  		addi.w	#$2000,d0		; add $2000
0001DBD8 31C0 FC00                  		move.w	d0,($FFFFFC00).w	; move to $EED0
0001DBDC 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing right?
0001DBE2 6700                       		beq.s	loc2_1ACF4		; if not, branch
0001DBE4 4468 0020                  		neg.w	inertia(a0)			; negate inertia
0001DBE8                             
0001DBE8                            loc2_1ACF4:
0001DBE8 08E8 0002 0022             		bset	#2,status(a0)		; set unused (in s1) flag
0001DBEE 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation
0001DBF4 303C 00B6                  		move.w	#$B6,d0			; spin release sound
0001DBF8 4EB9 0000 3212             		jsr	(PlaySound).l	; play it!
0001DBFE 11FC 0008 FF5B             		move.b	#8,($FFFFFF5B).w 	; set afterimage counter to 8
0001DC04 6000 0000                  		bra.w	loc2_1AD78
0001DC08                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001DC08                            
0001DC08                            spdsh_norm:
0001DC08 0800                       		dc.w  $800		; 0
0001DC0A 0880                       		dc.w  $880		; 1
0001DC0C 0900                       		dc.w  $900		; 2
0001DC0E 0980                       		dc.w  $980		; 3
0001DC10 0A00                       		dc.w  $A00		; 4
0001DC12 0A80                       		dc.w  $A80		; 5
0001DC14 0B00                       		dc.w  $B00		; 6
0001DC16 0B80                       		dc.w  $B80		; 7
0001DC18 0C00                       		dc.w  $C00		; 8
0001DC1A                             
0001DC1A                            spdsh_super:
0001DC1A 0B00                       		dc.w  $B00		; 0
0001DC1C 0B80                       		dc.w  $B80		; 1
0001DC1E 0C00                       		dc.w  $C00		; 2
0001DC20 0C80                       		dc.w  $C80		; 3
0001DC22 0D00                       		dc.w  $D00		; 4
0001DC24 0D80                       		dc.w  $D80		; 5
0001DC26 0E00                       		dc.w  $E00		; 6
0001DC28 0E80                       		dc.w  $E80		; 7
0001DC2A 0F00                       		dc.w  $F00		; 8
0001DC2C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001DC2C                             
0001DC2C                            loc2_1AD30:				; If still charging the dash...
0001DC2C 4A68 003A                  		tst.w	$3A(a0)		; check charge count
0001DC30 6700                       		beq.s	loc2_1AD48	; if zero, branch
0001DC32 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
0001DC36 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
0001DC38 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
0001DC3C 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
0001DC3E 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
0001DC44                             
0001DC44                            loc2_1AD48:
0001DC44 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001DC48 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
0001DC4C 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
0001DC50 317C 1F00 001C             		move.w	#$1F00,anim(a0)		; reset spdsh animation
0001DC56 303C 00AB                  		move.w	#$AB,d0			; was $E0 in sonic 2
0001DC5A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001DC60 4EB9 0000 3212             		jsr	(PlaySound).l	; play charge sound
0001DC66 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001DC6C 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001DC72 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001DC74 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
0001DC7A                             
0001DC7A                            loc2_1AD78:
0001DC7A 588F                       		addq.l	#4,sp			; increase stack ptr
0001DC7C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001DC82 6700                       		beq.s	loc2_1AD8C
0001DC84 6400                       		bcc.s	loc2_1AD88
0001DC86 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001DC8A                             
0001DC8A                            loc2_1AD88:
0001DC8A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001DC8E                             
0001DC8E                            loc2_1AD8C:
0001DC8E 4EBA F94A                  		jsr	Sonic_LevelBound
0001DC92 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001DC98                            ;		move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001DC98 4E75                       		rts
0001DC9A                            ; End of function Sonic_SpinDash
0001DC9A                            
0001DC9A                            
0001DC9A                            ; ---------------------------------------------------------------------------
0001DC9A                            ; Subroutine to	slow Sonic walking up a	slope
0001DC9A                            ; ---------------------------------------------------------------------------
0001DC9A                            
0001DC9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC9A                            
0001DC9A                            
0001DC9A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001DC9A 1028 0026                  	move.b	angle(a0),d0
0001DC9E 0600 0060                  	addi.b	#$60,d0
0001DCA2 0C00 00C0                  	cmpi.b	#$C0,d0
0001DCA6 6400                       	bcc.s	locret_13508
0001DCA8 1028 0026                  	move.b	angle(a0),d0
0001DCAC 4EB9 0000 8F30             	jsr	(CalcSine).l
0001DCB2 C1FC 0020                  	muls.w	#$20,d0
0001DCB6 E080                       	asr.l	#8,d0
0001DCB8 4A68 0020                  	tst.w	inertia(a0)
0001DCBC 6700                       	beq.s	locret_13508
0001DCBE 6B00                       	bmi.s	loc_13504
0001DCC0 4A40                       	tst.w	d0
0001DCC2 6700                       	beq.s	locret_13502
0001DCC4 D168 0020                  	add.w	d0,inertia(a0)	; change Sonic's $14
0001DCC8                            
0001DCC8                            locret_13502:
0001DCC8 4E75                       		rts	
0001DCCA                            ; ===========================================================================
0001DCCA                            
0001DCCA                            loc_13504:
0001DCCA D168 0020                  		add.w	d0,inertia(a0)
0001DCCE                            
0001DCCE                            locret_13508:
0001DCCE 4E75                       		rts	
0001DCD0                            ; End of function Sonic_SlopeResist
0001DCD0                            
0001DCD0                            ; ---------------------------------------------------------------------------
0001DCD0                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001DCD0                            ; ---------------------------------------------------------------------------
0001DCD0                            
0001DCD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCD0                            
0001DCD0                            
0001DCD0                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001DCD0 1028 0026                  		move.b	$26(a0),d0
0001DCD4 0600 0060                  		addi.b	#$60,d0
0001DCD8 0C00 00C0                  		cmpi.b	#-$40,d0
0001DCDC 6400                       		bcc.s	locret_13544
0001DCDE 1028 0026                  		move.b	$26(a0),d0
0001DCE2 4EB9 0000 8F30             		jsr	(CalcSine).l
0001DCE8 C1FC 0050                  		muls.w	#$50,d0
0001DCEC E080                       		asr.l	#8,d0
0001DCEE 4A68 0020                  		tst.w	inertia(a0)
0001DCF2 6B00                       		bmi.s	loc_1353A
0001DCF4 4A40                       		tst.w	d0
0001DCF6 6A00                       		bpl.s	loc_13534
0001DCF8 E480                       		asr.l	#2,d0
0001DCFA                            
0001DCFA                            loc_13534:
0001DCFA D168 0020                  		add.w	d0,inertia(a0)
0001DCFE 4E75                       		rts	
0001DD00                            ; ===========================================================================
0001DD00                            
0001DD00                            loc_1353A:
0001DD00 4A40                       		tst.w	d0
0001DD02 6B00                       		bmi.s	loc_13540
0001DD04 E480                       		asr.l	#2,d0
0001DD06                            
0001DD06                            loc_13540:
0001DD06 D168 0020                  		add.w	d0,inertia(a0)
0001DD0A                            
0001DD0A                            locret_13544:
0001DD0A 4E75                       		rts	
0001DD0C                            ; End of function Sonic_RollRepel
0001DD0C                            
0001DD0C                            ; ---------------------------------------------------------------------------
0001DD0C                            ; Subroutine to	push Sonic down	a slope
0001DD0C                            ; ---------------------------------------------------------------------------
0001DD0C                            
0001DD0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD0C                            
0001DD0C                            
0001DD0C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001DD0C 4E71                       		nop	
0001DD0E 4A28 0038                  		tst.b	$38(a0)
0001DD12 6600                       		bne.s	locret_13580
0001DD14 4A68 003E                  		tst.w	parent(a0)
0001DD18 6600                       		bne.s	loc_13582
0001DD1A 1028 0026                  		move.b	$26(a0),d0
0001DD1E 0600 0020                  		addi.b	#$20,d0
0001DD22 0200 00C0                  		andi.b	#$C0,d0
0001DD26 6700                       		beq.s	locret_13580
0001DD28 3028 0020                  		move.w	inertia(a0),d0
0001DD2C 6A00                       		bpl.s	loc_1356A
0001DD2E 4440                       		neg.w	d0
0001DD30                            
0001DD30                            loc_1356A:
0001DD30 0C40 0280                  		cmpi.w	#$280,d0
0001DD34 6400                       		bcc.s	locret_13580
0001DD36 4268 0020                  		clr.w	inertia(a0)
0001DD3A 08E8 0001 0022             		bset	#1,status(a0)
0001DD40 317C 001E 003E             		move.w	#$1E,parent(a0)
0001DD46                            
0001DD46                            locret_13580:
0001DD46 4E75                       		rts	
0001DD48                            ; ===========================================================================
0001DD48                            
0001DD48                            loc_13582:
0001DD48 5368 003E                  		subq.w	#1,parent(a0)
0001DD4C 4E75                       		rts	
0001DD4E                            ; End of function Sonic_SlopeRepel
0001DD4E                            
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            
0001DD4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD4E                            
0001DD4E                            
0001DD4E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001DD4E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001DD52 6700                       		beq.s	Sonic_JumpFlip	; if already 0,	branch
0001DD54 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001DD56                            
0001DD56 5400                       		addq.b	#2,d0		; increase angle
0001DD58 6400                       		bcc.s	loc_13596
0001DD5A 7000                       		moveq	#0,d0
0001DD5C                            
0001DD5C                            loc_13596:
0001DD5C 6000                       		bra.s	loc_1359E
0001DD5E                            ; ===========================================================================
0001DD5E                            
0001DD5E                            loc_13598:
0001DD5E 5500                       		subq.b	#2,d0		; decrease angle
0001DD60 6400                       		bcc.s	loc_1359E
0001DD62 7000                       		moveq	#0,d0
0001DD64                            
0001DD64                            loc_1359E:
0001DD64 1140 0026                  		move.b	d0,$26(a0)
0001DD68                            
0001DD68                            ;locret_135A2:
0001DD68                            ;		rts	
0001DD68                            ; End of function Sonic_JumpAngle
0001DD68                            
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Updates Sonic's secondary angle if he's tumbling
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            
0001DD68                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001DD68                            
0001DD68                            ; loc_1AE64:
0001DD68                            Sonic_JumpFlip:
0001DD68 1028 0031                  	move.b	flip_angle(a0),d0
0001DD6C 6700                       	beq.s	return_1AEA8
0001DD6E 4A68 0020                  	tst.w	inertia(a0)
0001DD72 6B00                       	bmi.s	Sonic_JumpLeftFlip
0001DD74                            ; loc_1AE70:
0001DD74                            Sonic_JumpRightFlip:
0001DD74 1228 0034                  	move.b	flip_speed(a0),d1
0001DD78 D001                       	add.b	d1,d0
0001DD7A 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001DD7C 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001DD80 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001DD82 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001DD88 7000                       	moveq	#0,d0
0001DD8A                            
0001DD8A                            BranchTo_Sonic_JumpFlipSet
0001DD8A 6000                       	bra.s	Sonic_JumpFlipSet
0001DD8C                            ; ===========================================================================
0001DD8C                            ; loc_1AE88:
0001DD8C                            Sonic_JumpLeftFlip:
0001DD8C 4A28 0035                  	tst.b	flip_turned(a0)
0001DD90 66E2                       	bne.s	Sonic_JumpRightFlip
0001DD92 1228 0034                  	move.b	flip_speed(a0),d1
0001DD96 9001                       	sub.b	d1,d0
0001DD98 6400                       	bcc.s	Sonic_JumpFlipSet
0001DD9A 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001DD9E 6400                       	bcc.s	Sonic_JumpFlipSet
0001DDA0 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001DDA6 7000                       	moveq	#0,d0
0001DDA8                            ; loc_1AEA4:
0001DDA8                            Sonic_JumpFlipSet:
0001DDA8 1140 0031                  	move.b	d0,flip_angle(a0)
0001DDAC                            
0001DDAC                            return_1AEA8:
0001DDAC 4E75                       	rts
0001DDAE                            ; End of function Sonic_JumpFlip
0001DDAE                            
0001DDAE                            ; ---------------------------------------------------------------------------
0001DDAE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001DDAE                            ; ---------------------------------------------------------------------------
0001DDAE                            
0001DDAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDAE                            
0001DDAE                            
0001DDAE                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001DDAE 3228 0010                  		move.w	x_vel(a0),d1
0001DDB2 3428 0012                  		move.w	y_vel(a0),d2
0001DDB6 4EB9 0000 91FE             		jsr	(CalcAngle).l
0001DDBC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001DDC0 0400 0020                  		subi.b	#$20,d0
0001DDC4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001DDC8 0200 00C0                  		andi.b	#$C0,d0
0001DDCC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001DDD0 0C00 0040                  		cmpi.b	#$40,d0
0001DDD4 6700 0000                  		beq.w	loc_13680
0001DDD8 0C00 0080                  		cmpi.b	#$80,d0
0001DDDC 6700 0000                  		beq.w	loc_136E2
0001DDE0 0C00 00C0                  		cmpi.b	#-$40,d0
0001DDE4 6700 0000                  		beq.w	loc_1373E
0001DDE8 6100 0000                  		bsr.w	Sonic_HitWall
0001DDEC 4A41                       		tst.w	d1
0001DDEE 6A00                       		bpl.s	loc_135F0
0001DDF0 9368 0008                  		sub.w	d1,8(a0)
0001DDF4 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DDFA                            
0001DDFA                            loc_135F0:
0001DDFA 6100 0000                  		bsr.w	sub_14EB4
0001DDFE 4A41                       		tst.w	d1
0001DE00 6A00                       		bpl.s	loc_13602
0001DE02 D368 0008                  		add.w	d1,8(a0)
0001DE06 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DE0C                            
0001DE0C                            loc_13602:
0001DE0C 6100 0000                  		bsr.w	Sonic_HitFloor
0001DE10 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001DE14 4A41                       		tst.w	d1
0001DE16 6A00                       		bpl.s	locret_1367E
0001DE18 1428 0012                  		move.b	y_vel(a0),d2
0001DE1C 5002                       		addq.b	#8,d2
0001DE1E 4402                       		neg.b	d2
0001DE20 B202                       		cmp.b	d2,d1
0001DE22 6C00                       		bge.s	loc_1361E
0001DE24 B002                       		cmp.b	d2,d0
0001DE26 6D00                       		blt.s	locret_1367E
0001DE28                            
0001DE28                            loc_1361E:
0001DE28 D368 000C                  		add.w	d1,$C(a0)
0001DE2C 1143 0026                  		move.b	d3,$26(a0)
0001DE30 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001DE34 117C 0000 001C             		move.b	#0,anim(a0)
0001DE3A 1003                       		move.b	d3,d0
0001DE3C 0600 0020                  		addi.b	#$20,d0
0001DE40 0200 0040                  		andi.b	#$40,d0
0001DE44 6600                       		bne.s	loc_1365C
0001DE46 1003                       		move.b	d3,d0
0001DE48 0600 0010                  		addi.b	#$10,d0
0001DE4C 0200 0020                  		andi.b	#$20,d0
0001DE50 6700                       		beq.s	loc_1364E
0001DE52 E0E8 0012                  		asr	y_vel(a0)
0001DE56 6000                       		bra.s	loc_13670
0001DE58                            ; ===========================================================================
0001DE58                            
0001DE58                            loc_1364E:
0001DE58 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DE5E 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001DE64 4E75                       		rts	
0001DE66                            ; ===========================================================================
0001DE66                            
0001DE66                            loc_1365C:
0001DE66 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DE6C 0C68 0FC0 0012             		cmpi.w	#$FC0,y_vel(a0)
0001DE72 6F00                       		ble.s	loc_13670
0001DE74 317C 0FC0 0012             		move.w	#$FC0,y_vel(a0)
0001DE7A                            
0001DE7A                            loc_13670:
0001DE7A 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001DE80 4A03                       		tst.b	d3
0001DE82 6A00                       		bpl.s	locret_1367E
0001DE84 4468 0020                  		neg.w	inertia(a0)
0001DE88                            
0001DE88                            locret_1367E:
0001DE88 4E75                       		rts	
0001DE8A                            ; ===========================================================================
0001DE8A                            
0001DE8A                            loc_13680:
0001DE8A 6100 0000                  		bsr.w	Sonic_HitWall
0001DE8E 4A41                       		tst.w	d1
0001DE90 6A00                       		bpl.s	loc_1369A
0001DE92 9368 0008                  		sub.w	d1,8(a0)
0001DE96 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DE9C 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001DEA2 4E75                       		rts	
0001DEA4                            ; ===========================================================================
0001DEA4                            
0001DEA4                            loc_1369A:
0001DEA4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001DEA8 4A41                       		tst.w	d1
0001DEAA 6A00                       		bpl.s	loc_136B4
0001DEAC 9368 000C                  		sub.w	d1,$C(a0)
0001DEB0 4A68 0012                  		tst.w	y_vel(a0)
0001DEB4 6A00                       		bpl.s	locret_136B2
0001DEB6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DEBC                            
0001DEBC                            locret_136B2:
0001DEBC 4E75                       		rts	
0001DEBE                            ; ===========================================================================
0001DEBE                            
0001DEBE                            loc_136B4:
0001DEBE 4A68 0012                  		tst.w	y_vel(a0)
0001DEC2 6B00                       		bmi.s	locret_136E0
0001DEC4 6100 0000                  		bsr.w	Sonic_HitFloor
0001DEC8 4A41                       		tst.w	d1
0001DECA 6A00                       		bpl.s	locret_136E0
0001DECC D368 000C                  		add.w	d1,$C(a0)
0001DED0 1143 0026                  		move.b	d3,$26(a0)
0001DED4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001DED8 117C 0000 001C             		move.b	#0,anim(a0)
0001DEDE 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DEE4 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001DEEA                            
0001DEEA                            locret_136E0:
0001DEEA 4E75                       		rts	
0001DEEC                            ; ===========================================================================
0001DEEC                            
0001DEEC                            loc_136E2:
0001DEEC 6100 0000                  		bsr.w	Sonic_HitWall
0001DEF0 4A41                       		tst.w	d1
0001DEF2 6A00                       		bpl.s	loc_136F4
0001DEF4 9368 0008                  		sub.w	d1,8(a0)
0001DEF8 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DEFE                            
0001DEFE                            loc_136F4:
0001DEFE 6100 0000                  		bsr.w	sub_14EB4
0001DF02 4A41                       		tst.w	d1
0001DF04 6A00                       		bpl.s	loc_13706
0001DF06 D368 0008                  		add.w	d1,8(a0)
0001DF0A 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DF10                            
0001DF10                            loc_13706:
0001DF10 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001DF14 4A41                       		tst.w	d1
0001DF16 6A00                       		bpl.s	locret_1373C
0001DF18 9368 000C                  		sub.w	d1,$C(a0)
0001DF1C 1003                       		move.b	d3,d0
0001DF1E 0600 0020                  		addi.b	#$20,d0
0001DF22 0200 0040                  		andi.b	#$40,d0
0001DF26 6600                       		bne.s	loc_13726
0001DF28 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DF2E 4E75                       		rts	
0001DF30                            ; ===========================================================================
0001DF30                            
0001DF30                            loc_13726:
0001DF30 1143 0026                  		move.b	d3,$26(a0)
0001DF34 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001DF38 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001DF3E 4A03                       		tst.b	d3
0001DF40 6A00                       		bpl.s	locret_1373C
0001DF42 4468 0020                  		neg.w	inertia(a0)
0001DF46                            
0001DF46                            locret_1373C:
0001DF46 4E75                       		rts	
0001DF48                            ; ===========================================================================
0001DF48                            
0001DF48                            loc_1373E:
0001DF48 6100 0000                  		bsr.w	sub_14EB4
0001DF4C 4A41                       		tst.w	d1
0001DF4E 6A00                       		bpl.s	loc_13758
0001DF50 D368 0008                  		add.w	d1,8(a0)
0001DF54 317C 0000 0010             		move.w	#0,x_vel(a0)
0001DF5A 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001DF60 4E75                       		rts	
0001DF62                            ; ===========================================================================
0001DF62                            
0001DF62                            loc_13758:
0001DF62 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001DF66 4A41                       		tst.w	d1
0001DF68 6A00                       		bpl.s	loc_13772
0001DF6A 9368 000C                  		sub.w	d1,$C(a0)
0001DF6E 4A68 0012                  		tst.w	y_vel(a0)
0001DF72 6A00                       		bpl.s	locret_13770
0001DF74 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DF7A                            
0001DF7A                            locret_13770:
0001DF7A 4E75                       		rts	
0001DF7C                            ; ===========================================================================
0001DF7C                            
0001DF7C                            loc_13772:
0001DF7C 4A68 0012                  		tst.w	y_vel(a0)
0001DF80 6B00                       		bmi.s	locret_1379E
0001DF82 6100 0000                  		bsr.w	Sonic_HitFloor
0001DF86 4A41                       		tst.w	d1
0001DF88 6A00                       		bpl.s	locret_1379E
0001DF8A D368 000C                  		add.w	d1,$C(a0)
0001DF8E 1143 0026                  		move.b	d3,$26(a0)
0001DF92 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001DF96 117C 0000 001C             		move.b	#0,anim(a0)
0001DF9C 317C 0000 0012             		move.w	#0,y_vel(a0)
0001DFA2 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001DFA8                            
0001DFA8                            locret_1379E:
0001DFA8 4E75                       		rts	
0001DFAA                            ; End of function Sonic_Floor
0001DFAA                            
0001DFAA                            ; ---------------------------------------------------------------------------
0001DFAA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001DFAA                            ; ---------------------------------------------------------------------------
0001DFAA                            
0001DFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DFAA                            
0001DFAA                            
0001DFAA                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001DFAA                            ;		bclr    #7,status(a0)
0001DFAA                            ;		clr.b	(Transforming_Flag-1).w
0001DFAA 08A8 0007 0022             		bclr	#7,$22(a0)	; clear jumpdash flag
0001DFB0 0828 0004 0022             		btst	#4,status(a0)
0001DFB6 6700                       		beq.s	loc_137AE
0001DFB8 4A28 0039                  		tst.b	spindash_flag(a0)
0001DFBC 6600                       		bne.s	loc_137AE
0001DFBE 117C 0000 001C             		move.b	#0,anim(a0)
0001DFC4                            
0001DFC4                            loc_137AE:
0001DFC4                            ;		clr.b	(Transforming_Flag).w
0001DFC4 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
0001DFC8 08A8 0005 0022             		bclr	#5,status(a0)
0001DFCE 08A8 0001 0022             		bclr	#1,status(a0)
0001DFD4 08A8 0004 0022             		bclr	#4,status(a0)
0001DFDA 0828 0002 0022             		btst	#2,status(a0)
0001DFE0 6700                       		beq.s	loc_137E4
0001DFE2 08A8 0002 0022             		bclr	#2,status(a0)
0001DFE8 117C 0013 0016             		move.b	#$13,$16(a0)
0001DFEE 117C 0009 0017             		move.b	#9,$17(a0)
0001DFF4 117C 0000 001C             		move.b	#0,anim(a0)	; use running/walking animation
0001DFFA 5B68 000C                  		subq.w	#5,$C(a0)
0001DFFE                            
0001DFFE                            loc_137E4:
0001DFFE 117C 0000 003C             		move.b	#0,$3C(a0)
0001E004 31FC 0000 F7D0             		move.w	#0,(Chain_Bonus_counter).w
0001E00A 4E75                       		rts	
0001E00C                            ; End of function Sonic_ResetOnFloor
0001E00C                            
0001E00C                            ; ===========================================================================
0001E00C                            ; ---------------------------------------------------------------------------
0001E00C                            ; Sonic when he gets hurt
0001E00C                            ; ---------------------------------------------------------------------------
0001E00C                            ; loc_1B120: Obj_01_Sub_4:
0001E00C                            Obj01_Hurt:
0001E00C 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001E010 6700                       	beq.s	Obj01_Hurt_Normal
0001E012 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001E018 6700                       	beq.s	Obj01_Hurt_Normal
0001E01A 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001E020 4238 F7CC                  	clr.b	(Control_Locked).w
0001E024 4E75                       	rts
0001E026                            ; ---------------------------------------------------------------------------
0001E026                            ; loc_1B13A:
0001E026                            Obj01_Hurt_Normal:
0001E026 4A28 0025                  	tst.b	routine_secondary(a0)
0001E02A 6B00 0000                  	bmi.w	Sonic_HurtInstantRecover
0001E02E 4EB9 0001 5D0C             	jsr	SpeedToPos
0001E034 0668 0030 0012             	addi.w	#$30,y_vel(a0)
0001E03A 0828 0006 0022             	btst	#6,status(a0)
0001E040 6700                       	beq.s	hurt1
0001E042 0468 0020 0012             	subi.w	#$20,y_vel(a0)
0001E048                            hurt1:
0001E048 0C78 FF00 F72C             	cmpi.w	#-$100,(Camera_Min_Y_pos).w
0001E04E 6600                       	bne.s	hurt2
0001E050 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0)
0001E056                            hurt2:
0001E056 6100 0000                  	bsr.w	Sonic_HurtStop
0001E05A 6100 F57E                  	bsr.w	Sonic_LevelBound
0001E05E 6100 ED44                  	bsr.w	Sonic_RecordPos
0001E062 6100 ED6A                  	bsr.w	Sonic_Water
0001E066 6100 0000                  	bsr.w	Sonic_Animate
0001E06A 6100 0000                  	bsr.w	LoadSonicDynPLC
0001E06E 4EF9 0001 5D72             	jmp	DisplaySprite
0001E074                            ; ===========================================================================
0001E074                            ; ---------------------------------------------------------------------------
0001E074                            ; Subroutine to	stop Sonic falling after he's been hurt
0001E074                            ; ---------------------------------------------------------------------------
0001E074                            
0001E074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E074                            
0001E074                            
0001E074                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001E074 3038 F72E                  	move.w	(Camera_Max_Y_pos_now).w,d0
0001E078 0640 00E0                  	addi.w	#$E0,d0
0001E07C B068 000C                  	cmp.w	y_pos(a0),d0
0001E080 6D00 F5C8                  	blt.w	KillCharacter_Jmp
0001E084 6100 FD28                  	bsr.w	Sonic_Floor
0001E088 0828 0001 0022             	btst	#1,status(a0)
0001E08E 6600                       	bne.s	return_1B1C8
0001E090 7000                       	moveq	#0,d0
0001E092 3140 0012                  	move.w	d0,y_vel(a0)
0001E096 3140 0010                  	move.w	d0,x_vel(a0)
0001E09A 3140 0010                  	move.w	d0,x_vel(a0)
0001E09E 3140 0020                  	move.w	d0,inertia(a0)
0001E0A2 117C 0000 001C             	move.b	#0,anim(a0)
0001E0A8 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001E0AC 117C 0078 0030             	move.b	#$78,invulnerable_time(a0)
0001E0B2 117C 0000 0039             	move.b	#0,spindash_flag(a0)
0001E0B8                            
0001E0B8                            return_1B1C8:
0001E0B8 4E75                       	rts
0001E0BA                            ; ===========================================================================
0001E0BA                            ; makes Sonic recover control after being hurt before landing
0001E0BA                            ; loc_1B1CA:
0001E0BA                            Sonic_HurtInstantRecover:
0001E0BA 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001E0BE 117C 0000 0025             	move.b	#0,routine_secondary(a0)
0001E0C4 4EBA ECDE                  	jsr	Sonic_RecordPos
0001E0C8 4EB9 0000 0000             	jsr	Sonic_Animate
0001E0CE 4EB9 0000 0000             	jsr	LoadSonicDynPLC
0001E0D4 4EF9 0001 5D72             	jmp	DisplaySprite
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA                            ; Sonic	when he	dies
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA                            
0001E0DA                            Obj01_Death:				; XREF: Obj01_Index
0001E0DA 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001E0DE 6700                       	beq.s	@cont
0001E0E0 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001E0E6 6700                       	beq.s	@cont
0001E0E8 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001E0EE 4238 F7CC                  	clr.b	(Control_Locked).w
0001E0F2 4E75                       	rts
0001E0F4                            @cont:
0001E0F4 4228 0034                  	clr.b	speedshoes_time(a0)
0001E0F8 6100 0000                  	bsr.w	CheckGameOver
0001E0FC 4EB9 0000 0000             	jsr	ObjectMoveAndFall
0001E102 6100 ECA0                  	bsr.w	Sonic_RecordPos
0001E106 6100 0000                  	bsr.w	Sonic_Animate
0001E10A 6100 0000                  	bsr.w	LoadSonicDynPLC
0001E10E 4EF9 0001 5D72             	jmp	DisplaySprite
0001E114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E114                            
0001E114                            
0001E114                            GameOver:				; XREF: Obj01_Death
0001E114 3038 F704                  		move.w	($FFFFF704).w,d0
0001E118 0640 0100                  		addi.w	#$100,d0
0001E11C B068 000C                  		cmp.w	$C(a0),d0
0001E120 6C00 0000                  		bge.w	locret_13900
0001E124 317C FFC8 0012             		move.w	#-$38,y_vel(a0)
0001E12A 5428 0024                  		addq.b	#2,routine(a0)
0001E12E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001E132 0C38 0001 FE12             		cmpi.b	#1,($FFFFFE12).w	; are lives at min?
0001E138 6D00                       		blt.s	@skipsub
0001E13A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001E13E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001E142 6600                       		bne.s	loc_138D4
0001E144 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0001E14C 4239 0020 0001             		clr.b	($200001).l ; set lives in sram to 0
0001E152 4239 0020 011F             		clr.b	($20011F).l ; set lives in sram to 0
0001E158 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0001E160                            
0001E160                            @skipsub:
0001E160 317C 0000 003A             		move.w	#0,$3A(a0)
0001E166 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001E16C                            ;		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001E16C                            ;		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001E16C 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001E170                            
0001E170                            loc_138C2:
0001E170 303C 0027                  		move.w	#$27,d0
0001E174 4EB9 0000 3212             		jsr	(PlaySound).l	; play game over music
0001E17A 7003                       		moveq	#3,d0
0001E17C 4EF9 0000 3712             		jmp	(LoadPLC).l	; load game over patterns
0001E182                            ; ===========================================================================
0001E182                            
0001E182                            loc_138D4:
0001E182 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001E188 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001E18C 6700                       		beq.s	locret_13900	; if not, branch
0001E18E 317C 0000 003A             		move.w	#0,$3A(a0)
0001E194 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001E19A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001E1A0 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001E1A6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001E1AC 60C2                       		bra.s	loc_138C2
0001E1AE                            ; ===========================================================================
0001E1AE                            
0001E1AE                            locret_13900:
0001E1AE 4E75                       		rts	
0001E1B0                            ; End of function GameOver
0001E1B0                            
0001E1B0                            ; ===========================================================================
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0                            ; Sonic	when the level is restarted
0001E1B0                            ; ---------------------------------------------------------------------------
0001E1B0                            
0001E1B0                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001E1B0 4A68 003A                  		tst.w	spindash_counter(a0)
0001E1B4 6700                       		beq.s	locret_13914
0001E1B6 5368 003A                  		subq.w	#1,spindash_counter(a0)	; subtract 1 from time delay
0001E1BA 6600                       		bne.s	locret_13914
0001E1BC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001E1C2 4EB9 0001 4974             		jsr Save_Progress
0001E1C8                            
0001E1C8                            locret_13914:
0001E1C8 4E75                       		rts	
0001E1CA                            
0001E1CA                            ; ---------------------------------------------------------------------------
0001E1CA                            ; Sonic when he's drowning
0001E1CA                            ; ---------------------------------------------------------------------------
0001E1CA                             
0001E1CA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001E1CA                             
0001E1CA                             
0001E1CA                            Sonic_Drowned:
0001E1CA 4EB9 0001 5D0C                     jsr   SpeedToPos              ; Make Sonic able to move
0001E1D0 0668 0010 0012                     addi.w  #$10,y_vel(a0)          ; Apply gravity
0001E1D6 4EBA EBCC                          jsr   Sonic_RecordPos    ; Record position
0001E1DA 4EB9 0000 0000                     jsr   Sonic_Animate           ; Animate Sonic
0001E1E0 4EB9 0000 0000                     jsr   LoadSonicDynPLC           ; Load Sonic's DPLCs
0001E1E6 4EF9 0001 5D72                     jmp   DisplaySprite           ; And finally, display Sonic
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            
0001E1EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1EC                            
0001E1EC                            
0001E1EC                            Sonic_Loops:				; XREF: Obj01_Control
0001E1EC                            	;	cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?	; MJ: Commented out, we don't want SLZ having any rolling chunks =P
0001E1EC                            	;	beq.s	loc_13926	; if yes, branch
0001E1EC 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001E1F0 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001E1F4                            
0001E1F4                            loc_13926:
0001E1F4 3028 000C                  		move.w	$0C(a0),d0				; MJ: Load Y position
0001E1F8 3228 0008                  		move.w	$08(a0),d1				; MJ: Load X position
0001E1FC 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0001E200 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0001E202 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0001E204 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0001E208 D041                       		add.w	d1,d0					; MJ: add together
0001E20A 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: Load address of layout
0001E20E 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct 128x128 chunk ID based on the position of Sonic
0001E212                            
0001E212 0C01 0075                  		cmp.b	#$75,d1					; MJ: is the chunk 75 (Top top left S Bend)
0001E216 6700 F498                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E21A 0C01 0076                  		cmp.b	#$76,d1					; MJ: is the chunk 76 (Top top right S Bend)
0001E21E 6700 F490                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E222 0C01 0077                  		cmp.b	#$77,d1					; MJ: is the chunk 77 (Top bottom left S Bend)
0001E226 6700 F488                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E22A 0C01 0078                  		cmp.b	#$78,d1					; MJ: is the chunk 78 (Top bottom right S Bend)
0001E22E 6700 F480                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E232 0C01 0079                  		cmp.b	#$79,d1					; MJ: is the chunk 79 (Bottom top left S Bend)
0001E236 6700 F478                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E23A 0C01 007A                  		cmp.b	#$7A,d1					; MJ: is the chunk 7A (Bottom top right S Bend)
0001E23E 6700 F470                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E242 0C01 007B                  		cmp.b	#$7B,d1					; MJ: is the chunk 7B (Bottom bottom left S Bend)
0001E246 6700 F468                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E24A 0C01 007C                  		cmp.b	#$7C,d1					; MJ: is the chunk 7C (Bottom bottom right S Bend)
0001E24E 6700 F460                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001E252                            
0001E252                            	;	cmp.b	($FFFFF7AE).w,d1			; MJ: this shite is commented out as it's used for loops (Which will be delt with by pathswappers)
0001E252                            	;	beq.w	Obj01_ChkRoll
0001E252                            	;	cmp.b	($FFFFF7AF).w,d1
0001E252                            	;	beq.w	Obj01_ChkRoll
0001E252                            	;	cmp.b	($FFFFF7AC).w,d1
0001E252                            	;	beq.s	loc_13976
0001E252                            	;	cmp.b	($FFFFF7AD).w,d1
0001E252                            	;	beq.s	loc_13966
0001E252 08A8 0006 0001             		bclr	#6,1(a0)
0001E258 4E75                       		rts	
0001E25A                            ; ===========================================================================
0001E25A                            
0001E25A                            loc_13966:
0001E25A 0828 0001 0022             		btst	#1,$22(a0)
0001E260 6700                       		beq.s	loc_13976
0001E262 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001E268 4E75                       		rts	
0001E26A                            ; ===========================================================================
0001E26A                            
0001E26A                            loc_13976:
0001E26A 3428 0008                  		move.w	8(a0),d2
0001E26E 0C02 002C                  		cmpi.b	#$2C,d2
0001E272 6400                       		bcc.s	loc_13988
0001E274 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001E27A 4E75                       		rts	
0001E27C                            ; ===========================================================================
0001E27C                            
0001E27C                            loc_13988:
0001E27C 0C02 00E0                  		cmpi.b	#-$20,d2
0001E280 6500                       		bcs.s	loc_13996
0001E282 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001E288 4E75                       		rts	
0001E28A                            ; ===========================================================================
0001E28A                            
0001E28A                            loc_13996:
0001E28A 0828 0006 0001             		btst	#6,1(a0)
0001E290 6600                       		bne.s	loc_139B2
0001E292 1228 0026                  		move.b	$26(a0),d1
0001E296 6700                       		beq.s	locret_139C2
0001E298 0C01 0080                  		cmpi.b	#-$80,d1
0001E29C 6200                       		bhi.s	locret_139C2
0001E29E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001E2A4 4E75                       		rts	
0001E2A6                            ; ===========================================================================
0001E2A6                            
0001E2A6                            loc_139B2:
0001E2A6 1228 0026                  		move.b	$26(a0),d1
0001E2AA 0C01 0080                  		cmpi.b	#-$80,d1
0001E2AE 6300                       		bls.s	locret_139C2
0001E2B0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001E2B6                            
0001E2B6                            locret_139C2:
0001E2B6 4E75                       		rts	
0001E2B8                            ; End of function Sonic_Loops
0001E2B8                            
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8                            ; Subroutine to	animate	Sonic's sprites
0001E2B8                            ; ---------------------------------------------------------------------------
0001E2B8                            
0001E2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2B8                            
0001E2B8                            
0001E2B8                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001E2B8                            
0001E2B8 43F9 0000 0000             		lea	(SonicAniData).l,a1
0001E2BE 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001E2C2 6700                       		beq.s	loc_12612
0001E2C4 43F9 0000 0000             		lea	(SuperSonicAniData).l,a1
0001E2CA                            
0001E2CA                            loc_12612:
0001E2CA 7000                       		moveq	#0,d0
0001E2CC 1028 001C                  		move.b	anim(a0),d0
0001E2D0 B028 001D                  		cmp.b	next_anim(a0),d0
0001E2D4 6700                       		beq.s	SAnim_Do
0001E2D6 1140 001D                  		move.b	d0,next_anim(a0)
0001E2DA 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001E2E0 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001E2E6 08A8 0005 0022             		bclr	#5,status(a0)
0001E2EC                            
0001E2EC                            SAnim_Do:
0001E2EC D040                       		add.w	d0,d0
0001E2EE D2F1 0000                  		adda.w	(a1,d0.w),a1
0001E2F2 1011                       		move.b	(a1),d0
0001E2F4 6B00                       		bmi.s	SAnim_WalkRun
0001E2F6 1228 0022                  		move.b	status(a0),d1
0001E2FA 0201 0001                  		andi.b	#1,d1
0001E2FE 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001E304 8328 0001                  		or.b	d1,render_flags(a0)
0001E308 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001E30C 6A00                       		bpl.s	SAnim_Delay
0001E30E 1140 001E                  		move.b	d0,anim_frame_duration(a0)
0001E312                            
0001E312                            SAnim_Do2:
0001E312                            					; Sonic_Animate+4A2j
0001E312 7200                       		moveq	#0,d1
0001E314 1228 001B                  		move.b	anim_frame(a0),d1	; load current frame number
0001E318 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001E31C 0C00 00FC                  		cmpi.b	#-4,d0				; MJ: is it a flag from FD to FF?
0001E320 6400                       		bcc.s	SAnim_End_FF				; MJ: if so, branch to flag routines
0001E322                            
0001E322                            SAnim_Next:
0001E322                            					; Sonic_Animate+96j
0001E322 1140 001A                  		move.b	d0,mapping_frame(a0)	; load sprite number
0001E326 5228 001B                  		addq.b	#1,anim_frame(a0)	; next frame number
0001E32A                            
0001E32A                            SAnim_Delay:
0001E32A                            					; Sonic_Animate+440j ...
0001E32A 4E75                       		rts
0001E32C                            ; ---------------------------------------------------------------------------
0001E32C                            
0001E32C                            SAnim_End_FF:
0001E32C 5200                       		addq.b	#1,d0
0001E32E 6600                       		bne.s	SAnim_End_FE
0001E330 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001E336 1029 0001                  		move.b	1(a1),d0
0001E33A 60E6                       		bra.s	SAnim_Next
0001E33C                            ; ---------------------------------------------------------------------------
0001E33C                            
0001E33C                            SAnim_End_FE:
0001E33C 5200                       		addq.b	#1,d0
0001E33E 6600                       		bne.s	SAnim_End_FD
0001E340 1031 1002                  		move.b	2(a1,d1.w),d0
0001E344 9128 001B                  		sub.b	d0,anim_frame(a0)
0001E348 9200                       		sub.b	d0,d1
0001E34A 1031 1001                  		move.b	1(a1,d1.w),d0
0001E34E 60D2                       		bra.s	SAnim_Next
0001E350                            ; ---------------------------------------------------------------------------
0001E350                            
0001E350                            SAnim_End_FD:
0001E350 5200                       		addq.b	#1,d0
0001E352 6600                       		bne.s	SAnim_End
0001E354 1171 1002 001C             		move.b	2(a1,d1.w),anim(a0)
0001E35A                            
0001E35A                            SAnim_End:
0001E35A 4E75                       		rts
0001E35C                            ; ---------------------------------------------------------------------------
0001E35C                            
0001E35C                            SAnim_WalkRun:
0001E35C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001E35E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001E362                            ;		moveq	#0,d0
0001E362                            ;		tst.b	$2D(a0)
0001E362                            ;		bmi.w	SAnim_Tumble
0001E362                            ;		move.b	flip_angle(a0),d0
0001E362                            ;		bne.w	SAnim_Tumble
0001E362 7200                       		moveq	#0,d1
0001E364 1028 0026                  		move.b	angle(a0),d0	; get Sonic's angle
0001E368 6B00                       		bmi.s	loc_126C8
0001E36A 6700                       		beq.s	loc_126C8
0001E36C 5300                       		subq.b	#1,d0
0001E36E                            
0001E36E                            loc_126C8:
0001E36E                            					; Sonic_Animate+C4j
0001E36E 1428 0022                  		move.b	status(a0),d2
0001E372 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001E376 6600                       		bne.s	loc_126D4	; if yes, branch
0001E378 4600                       		not.b	d0		; reverse angle
0001E37A                            
0001E37A                            loc_126D4:
0001E37A 0600 0010                  		addi.b	#$10,d0	; add $10 to angle
0001E37E 6A00                       		bpl.s	loc_126DC	; if angle is $0-$7F, branch
0001E380 7203                       		moveq	#3,d1
0001E382                            
0001E382                            loc_126DC:
0001E382 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001E388 B302                       		eor.b	d1,d2
0001E38A 8528 0001                  		or.b	d2,render_flags(a0)
0001E38E 0828 0005 0022             		btst	#5,status(a0)
0001E394 6600 0000                  		bne.w	SAnim_Push
0001E398 E808                       		lsr.b	#4,d0
0001E39A 0200 0006                  		andi.b	#6,d0
0001E39E 3428 0020                  		move.w	inertia(a0),d2
0001E3A2 6A00                       		bpl.s	loc_12700
0001E3A4 4442                       		neg.w	d2
0001E3A6                            
0001E3A6                            loc_12700:
0001E3A6 4A28 002B                  		tst.b	status_secondary(a0)
0001E3AA 6A00 0000                  		bpl.w	loc_1270A
0001E3AE D442                       		add.w	d2,d2
0001E3B0                            
0001E3B0                            loc_1270A:
0001E3B0 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001E3B4 6600                       		bne.s	SAnim_Super
0001E3B6 43F9 0000 0000             		lea	(SonAni_Run).l,a1	; use running animation
0001E3BC 0C42 0600                  		cmpi.w	#$600,d2		; is Sonic at running speed?
0001E3C0 6400                       		bcc.s	loc_12724			; if so, use running animation
0001E3C2 43F9 0000 0000             		lea	(SonAni_Walk).l,a1	; if not, use walking animation
0001E3C8 D000                       		add.b	d0,d0
0001E3CA                            
0001E3CA                            loc_12724:
0001E3CA D000                       		add.b	d0,d0
0001E3CC 1600                       		move.b	d0,d3
0001E3CE 7200                       		moveq	#0,d1
0001E3D0 1228 001B                  		move.b	anim_frame(a0),d1
0001E3D4 1031 1001                  		move.b	1(a1,d1.w),d0
0001E3D8 0C00 00FF                  		cmpi.b	#-1,d0
0001E3DC 6600                       		bne.s	loc_12742
0001E3DE 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001E3E4 1029 0001                  		move.b	1(a1),d0
0001E3E8                            
0001E3E8                            loc_12742:
0001E3E8 1140 001A                  		move.b	d0,mapping_frame(a0)
0001E3EC D728 001A                  		add.b	d3,mapping_frame(a0)
0001E3F0 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001E3F4 6A00                       		bpl.s	locret_12764
0001E3F6 4442                       		neg.w	d2
0001E3F8 0642 0800                  		addi.w	#$800,d2
0001E3FC 6A00                       		bpl.s	loc_1275A
0001E3FE 7400                       		moveq	#0,d2
0001E400                            
0001E400                            loc_1275A:
0001E400 E04A                       		lsr.w	#8,d2
0001E402 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001E406 5228 001B                  		addq.b	#1,anim_frame(a0)		; modify frame number
0001E40A                            
0001E40A                            locret_12764:
0001E40A 4E75                       		rts
0001E40C                            ; ---------------------------------------------------------------------------
0001E40C                            
0001E40C                            SAnim_Super:
0001E40C 43F9 0000 0000             		lea	(SupSonAni_Run).l,a1	; use fast animation
0001E412 0C42 0800                  		cmpi.w	#$800,d2		; is Sonic moving fast?
0001E416 6400                       		bcc.s	SAnim_SuperRun		; if yes, branch
0001E418 43F9 0000 0000             		lea	(SupSonAni_Walk).l,a1	; use slower animation
0001E41E D000                       		add.b	d0,d0
0001E420 D000                       		add.b	d0,d0
0001E422 6000                       		bra.s	SAnim_SuperWalk
0001E424                            ; ---------------------------------------------------------------------------
0001E424                            
0001E424                            SAnim_SuperRun:
0001E424 D000                       		add.b	d0,d0
0001E426                            
0001E426                            SAnim_SuperWalk:
0001E426 1600                       		move.b	d0,d3
0001E428 7200                       		moveq	#0,d1
0001E42A 1228 001B                  		move.b	anim_frame(a0),d1
0001E42E 1031 1001                  		move.b	1(a1,d1.w),d0
0001E432 0C00 00FF                  		cmpi.b	#-1,d0
0001E436 6600                       		bne.s	loc_1279C
0001E438 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001E43E 1029 0001                  		move.b	1(a1),d0
0001E442                            
0001E442                            loc_1279C:
0001E442 1140 001A                  		move.b	d0,mapping_frame(a0)
0001E446 D728 001A                  		add.b	d3,mapping_frame(a0)
0001E44A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001E44E 6A00                       		bpl.s	locret_127BE
0001E450 4442                       		neg.w	d2
0001E452 0642 0800                  		addi.w	#$800,d2
0001E456 6A00                       		bpl.s	loc_127B4
0001E458 7400                       		moveq	#0,d2
0001E45A                            
0001E45A                            loc_127B4:
0001E45A E04A                       		lsr.w	#8,d2
0001E45C 1142 001E                  		move.b	d2,anim_frame_duration(a0)
0001E460 5228 001B                  		addq.b	#1,anim_frame(a0)
0001E464                            
0001E464                            locret_127BE:
0001E464 4E75                       		rts
0001E466                            ; ---------------------------------------------------------------------------
0001E466                            ; loc_1B520:
0001E466                            
0001E466                            SAnim_Tumble:
0001E466 1028 0031                  	move.b	flip_angle(a0),d0
0001E46A 7200                       	moveq	#0,d1
0001E46C 1428 0022                  	move.b	status(a0),d2
0001E470 0202 0001                  	andi.b	#1,d2
0001E474 6600                       	bne.s	SAnim_Tumble_Left
0001E476                            
0001E476 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001E47C 0600 000B                  	addi.b	#$B,d0
0001E480 80FC 0016                  	divu.w	#$16,d0
0001E484 0600 0031                  	addi.b	#$31,d0
0001E488 1140 001A                  	move.b	d0,mapping_frame(a0)
0001E48C 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001E492 4E75                       	rts
0001E494                            ; ===========================================================================
0001E494                            ; loc_1B54E:
0001E494                            SAnim_Tumble_Left:
0001E494 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001E49A 4A28 0035                  	tst.b	flip_turned(a0)
0001E49E 6700                       	beq.s	loc_1B566
0001E4A0 0028 0001 0001             	ori.b	#1,render_flags(a0)
0001E4A6 0600 000B                  	addi.b	#$B,d0
0001E4AA 6000                       	bra.s	loc_1B572
0001E4AC                            ; ===========================================================================
0001E4AC                            
0001E4AC                            loc_1B566:
0001E4AC 0028 0003 0001             	ori.b	#3,render_flags(a0)
0001E4B2 4400                       	neg.b	d0
0001E4B4 0600 008F                  	addi.b	#$8F,d0
0001E4B8                            
0001E4B8                            loc_1B572:
0001E4B8 80FC 0016                  	divu.w	#$16,d0
0001E4BC 0600 0031                  	addi.b	#$31,d0
0001E4C0 1140 001A                  	move.b	d0,mapping_frame(a0)
0001E4C4 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001E4CA 4E75                       	rts
0001E4CC                            ; ===========================================================================
0001E4CC                            ; loc_1B586:
0001E4CC                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001E4CC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001E4D0 6A00 FE58                  		bpl.w	SAnim_Delay			; if time remains, branch
0001E4D4 5200                       		addq.b	#1,d0		; is the start flag = $FE ?
0001E4D6 6600                       		bne.s	SAnim_Push	; if not, branch
0001E4D8 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001E4DC 6A00                       		bpl.s	loc_13ADE
0001E4DE 4442                       		neg.w	d2
0001E4E0                            
0001E4E0                            loc_13ADE:
0001E4E0 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001E4E6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001E4EA 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001E4EC 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001E4F2                            
0001E4F2                            loc_13AF0:
0001E4F2 4442                       		neg.w	d2
0001E4F4 0642 0400                  		addi.w	#$400,d2
0001E4F8 6A00                       		bpl.s	loc_13AFA
0001E4FA 7400                       		moveq	#0,d2
0001E4FC                            
0001E4FC                            loc_13AFA:
0001E4FC E04A                       		lsr.w	#8,d2
0001E4FE 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001E502 1228 0022                  		move.b	status(a0),d1
0001E506 0201 0001                  		andi.b	#1,d1
0001E50A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001E510 8328 0001                  		or.b	d1,1(a0)
0001E514 6000 FDFC                  		bra.w	SAnim_Do2
0001E518                            ; ===========================================================================
0001E518                            
0001E518                            SAnim_Push:				; XREF: SAnim_RollJump
0001E518 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001E51C 6A00 FE0C                  		bpl.w	SAnim_Delay			; if time remains, branch
0001E520 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001E524 6B00                       		bmi.s	loc_13B1E
0001E526 4442                       		neg.w	d2
0001E528                            
0001E528                            loc_13B1E:
0001E528 0642 0800                  		addi.w	#$800,d2
0001E52C 6A00                       		bpl.s	loc_13B26
0001E52E 7400                       		moveq	#0,d2
0001E530                            
0001E530                            loc_13B26:
0001E530 EC4A                       		lsr.w	#6,d2
0001E532 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001E536 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001E53C 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001E540 6700                       		beq.s	@setcorrectani
0001E542 43F9 0000 0000             		lea	(SupSonAni_Push).l,a1
0001E548 6400 0000                  		bcc.w	@setcorrectani
0001E54C                            @setcorrectani:
0001E54C 1228 0022                  		move.b	status(a0),d1
0001E550 0201 0001                  		andi.b	#1,d1
0001E554 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001E55A 8328 0001                  		or.b	d1,1(a0)
0001E55E 6000 FDB2                  		bra.w	SAnim_Do2
0001E562                            ; ===========================================================================
0001E562                            ; End of function Sonic_Animate
0001E562                            
0001E562                            SonicAniData:
0001E562                            	include "_anim\Sonic.asm"
0001E562                            ; ---------------------------------------------------------------------------
0001E562                            ; Animation script - Sonic
0001E562                            ; ---------------------------------------------------------------------------
0001E562 0000                       		dc.w SonAni_Walk-SonicAniData	;0
0001E564 0000                       		dc.w SonAni_Run-SonicAniData	;1
0001E566 0000                       		dc.w SonAni_Roll-SonicAniData	;2
0001E568 0000                       		dc.w SonAni_Roll2-SonicAniData	;3
0001E56A 0000                       		dc.w SonAni_Push-SonicAniData	;4
0001E56C 0000                       		dc.w SonAni_Wait-SonicAniData	;5
0001E56E 0000                       		dc.w SonAni_Balance-SonicAniData	;6
0001E570 0000                       		dc.w SonAni_LookUp-SonicAniData	;7
0001E572 0000                       		dc.w SonAni_Duck-SonicAniData	;8
0001E574 0000                       		dc.w SonAni_Warp1-SonicAniData	;9
0001E576 0000                       		dc.w SonAni_Warp2-SonicAniData	;A
0001E578 0000                       		dc.w SonAni_Warp3-SonicAniData	;B
0001E57A 0000                       		dc.w SonAni_Warp4-SonicAniData	;C
0001E57C 0000                       		dc.w SonAni_Stop-SonicAniData	;D
0001E57E 0000                       		dc.w SonAni_Float1-SonicAniData	;E
0001E580 0000                       		dc.w SonAni_Float2-SonicAniData	;F
0001E582 0000                       		dc.w SonAni_Spring-SonicAniData	;10
0001E584 0000                       		dc.w SonAni_LZHang-SonicAniData	;11
0001E586 0000                       		dc.w SonAni_Leap1-SonicAniData	;12
0001E588 0000                       		dc.w SonAni_Leap2-SonicAniData	;13
0001E58A 0000                       		dc.w SonAni_Surf-SonicAniData	;14
0001E58C 0000                       		dc.w SonAni_Bubble-SonicAniData	;15
0001E58E 0000                       		dc.w SonAni_Death1-SonicAniData	;16
0001E590 0000                       		dc.w SonAni_Drown-SonicAniData	;17
0001E592 0000                       		dc.w SonAni_Death2-SonicAniData	;18
0001E594 0000                       		dc.w SonAni_Shrink-SonicAniData	;19
0001E596 0000                       		dc.w SonAni_Hurt-SonicAniData	;1A
0001E598 0000                       		dc.w SonAni_LZSlide-SonicAniData	;1B
0001E59A 0000                       		dc.w SonAni_Blank-SonicAniData	;1C
0001E59C 0000                       		dc.w SonAni_Float3-SonicAniData	;1D
0001E59E 0000                       		dc.w SonAni_Float4-SonicAniData	;1E
0001E5A0 0000                       		dc.w SonAni_Warp1-SonicAniData	;1F
0001E5A2 0000                       		dc.w SonAni_Spring2-SonicAniData	;20
0001E5A4 0000                       		dc.w SonAni_Spring3-SonicAniData	;21
0001E5A6 0000                       		dc.w SupSonAni_Transform-SonicAniData	;22
0001E5A8 0000                       		dc.w SonAni_EndPose-SonicAniData	;23
0001E5AA FF07 0801 0203 0405 06FF   SonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001E5B4 FF21 2223 24FF FFFF FFFF   SonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001E5BE FE96 9796 9896 9996 9AFF   SonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E5C8 FE96 9796 9896 9996 9AFF   SonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E5D2 FDB6 B7B8 B9FF FFFF FFFF   SonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001E5DC 05BA BABA BABA BABA BABA+  SonAni_Wait:	dc.b	5, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA
0001E5FC                            					; DATA XREF: ROM:00012AA6o
0001E5FC BABA BABA BABA BABA BABA+  		dc.b  $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BB, $BC, $BC, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD
0001E61C BEBE BDBD BEBE BDBD BEBE+  		dc.b  $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $AD, $AD, $AD, $AD,	$AD, $AD, $AE, $AE, $AE, $AE
0001E63C AEAE AFD9 D9D9 D9D9 D9AF+  		dc.b  $AE, $AE,	$AF, $D9, $D9, $D9, $D9, $D9, $D9, $AF,	$AF, $FE, $35
0001E649 07A4 A5A6 FF               SonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001E64E 05C3 C4FE 01               SonAni_LookUp:	dc.b	5, $C3,	$C4, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001E653 059B 9CFE 01               SonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001E658 0086 8786 8886 8986 8A86+  SonAni_Warp1:	dc.b	0, $86,	$87, $86, $88, $86, $89, $86, $8A, $86,	$8B, $FF
0001E664 09BA C5C6 C6C6 C6C6 C6C7+  SonAni_Warp2:	dc.b	9, $BA,	$C5, $C6, $C6, $C6, $C6, $C6, $C6, $C7,	$C7, $C7, $C7, $C7, $C7, $C7, $C7, $C7,	$C7, $C7, $C7, $FD,   0
0001E67B 01BB FD00                  SonAni_Warp3:	dc.b   1,  $BB,$FD,  0
0001E67F 05A1 A2A3 FF               SonAni_Warp4:	dc.b   5, $A1,	$A2, $A3, $FF
0001E684 039D 9E9F A0FD 00          SonAni_Stop:	dc.b	3, $9D,	$9E, $9F, $A0, $FD,   0	; DATA XREF: ROM:00012AA6o
0001E68B 07C8 FF                    SonAni_Float1:	dc.b	7, $C8,	$FF	; DATA XREF: ROM:00012AA6o
0001E68E 07C8 C9CA CBCC CDCE CFFF   SonAni_Float2:	dc.b	7, $C8,	$C9, $CA, $CB, $CC, $CD, $CE, $CF, $FF
0001E698 2F8E FD00                  SonAni_Spring:	dc.b  $2F, $8E,	$FD,   0 ; DATA	XREF: ROM:00012AA6o
0001E69C                            ;SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001E69C 01AA ABFF                  SonAni_LZHang:	dc.b	1, $AA,	$AB, $FF ; DATA	XREF: ROM:00012AA6o
0001E6A0 0F43 4343 FE01             SonAni_Leap1:	dc.b   $F, $43,	$43, $43, $FE,	 1 ; DATA XREF:	ROM:00012AA6o
0001E6A6 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001E6AC 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001E6B0 0BAC AC03 04FD 00          SonAni_Bubble:		dc.b   $B, $AC,	$AC,   3,   4, $FD,   0	; DATA XREF: ROM:00012AA6o
0001E6B7 20A8 FF                    SonAni_Death1:	dc.b  $20, $A8,	$FF	; DATA XREF: ROM:00012AA6o
0001E6BA 20A9 FF                    SonAni_Drown:	dc.b  $20, $A9,	$FF	; DATA XREF: ROM:00012AA6o
0001E6BD 20A7 FF                    SonAni_Death2:	dc.b  $20, $A7,	$FF	; DATA XREF: ROM:00012AA6o
0001E6C0                            
0001E6C0 09D7 D8FF                  SonAni_Shrink:	 dc.b	9, $D7,	$D8, $FF ; DATA	XREF: ROM:00012AA6o
0001E6C4 408D FF                    SonAni_Hurt:	dc.b  $40, $8D,	$FF	; DATA XREF: ROM:00012AA6o
0001E6C7 098C 8DFF                  SonAni_LZSlide:	dc.b	9, $8C,	$8D, $FF ; DATA	XREF: ROM:00012AA6o
0001E6CB                            					; ROM:00012C70t
0001E6CB 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001E6CF 13D0 D1FF                  SonAni_Float3:	dc.b  $13, $D0,	$D1, $FF ; DATA	XREF: ROM:00012AA6o
0001E6D3                            					; ROM:00012C74t
0001E6D3 03CF C8C9 CACB FE04        SonAni_Float4:	dc.b	3, $CF,	$C8, $C9, $CA, $CB, $FE,   4 ; DATA XREF: ROM:00012AA6o
0001E6DB 0058 5958 5A58 5B58 5C58+  SonAni_Spin_Dash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
0001E6E7 015E 60FD 2100             SonAni_Spring2:	dc.b 1, $5E, $60, $FD, $21,  0
0001E6ED 015E 60FD 2000             SonAni_Spring3:	dc.b 1, $5E, $60, $FD, $20,  0
0001E6F3 07B0 B2B2 B2B2 B2B2 B1B2+  SonAni_EndPose:	dc.b 7, $B0,	$B2, $B2, $B2, $B2, $B2, $B2, $B1, $B2,	$B3, $B2, $FE,	 4
0001E701 00                         		align 2
0001E701 00                         		align 2
0001E702                            SuperSonicAniData:     
0001E702                                include "_anim\Super Sonic.asm"
0001E702                            ; ---------------------------------------------------------------------------
0001E702                            ; Animation script - Super Sonic
0001E702                            ; ---------------------------------------------------------------------------
0001E702 0000                       		dc.w SupSonAni_Walk-SuperSonicAniData
0001E704 0000                       		dc.w SupSonAni_Run-SuperSonicAniData
0001E706 FEBC                       		dc.w SonAni_Roll-SuperSonicAniData
0001E708 FEC6                       		dc.w SonAni_Roll2-SuperSonicAniData
0001E70A 0000                       		dc.w SupSonAni_Push-SuperSonicAniData
0001E70C 0000                       		dc.w SupSonAni_Wait-SuperSonicAniData
0001E70E 0000                       		dc.w SupSonAni_Balance-SuperSonicAniData
0001E710 FF4C                       		dc.w SonAni_LookUp-SuperSonicAniData
0001E712 0000                       		dc.w SupSonAni_Duck-SuperSonicAniData
0001E714 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData
0001E716 FF62                       		dc.w SonAni_Warp2-SuperSonicAniData
0001E718 FF79                       		dc.w SonAni_Warp3-SuperSonicAniData
0001E71A FF7D                       		dc.w SonAni_Warp4-SuperSonicAniData
0001E71C FF82                       		dc.w SonAni_Stop-SuperSonicAniData
0001E71E FF89                       		dc.w SonAni_Float1-SuperSonicAniData
0001E720 FF8C                       		dc.w SonAni_Float2-SuperSonicAniData
0001E722 FF96                       		dc.w SonAni_Spring-SuperSonicAniData
0001E724 FF9A                       		dc.w SonAni_LZHang-SuperSonicAniData
0001E726 FF9E                       		dc.w SonAni_Leap1-SuperSonicAniData
0001E728 FFA4                       		dc.w SonAni_Leap2-SuperSonicAniData
0001E72A FFAA                       		dc.w SonAni_Surf-SuperSonicAniData
0001E72C FFAE                       		dc.w SonAni_Bubble-SuperSonicAniData
0001E72E FFB5                       		dc.w SonAni_Death1-SuperSonicAniData
0001E730 FFB8                       		dc.w SonAni_Drown-SuperSonicAniData
0001E732 FFBB                       		dc.w SonAni_Death2-SuperSonicAniData
0001E734 FFBE                       		dc.w SonAni_Shrink-SuperSonicAniData
0001E736 FFC2                       		dc.w SonAni_Hurt-SuperSonicAniData
0001E738 FFC5                       		dc.w SonAni_LZSlide-SuperSonicAniData
0001E73A FFC9                       		dc.w SonAni_Blank-SuperSonicAniData
0001E73C FFCD                       		dc.w SonAni_Float3-SuperSonicAniData
0001E73E FFD1                       		dc.w SonAni_Float4-SuperSonicAniData
0001E740 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData	;1F
0001E742 FFE5                       		dc.w SonAni_Spring2-SuperSonicAniData	;20
0001E744 FFEB                       		dc.w SonAni_Spring3-SuperSonicAniData	;21
0001E746 0000                       		dc.w SupSonAni_Transform-SuperSonicAniData
0001E748 FFF1                       		dc.w SonAni_EndPose-SuperSonicAniData	;23
0001E74A FF07 0801 0203 0405 06FF   SupSonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001E754 FF21 2223 24FF FFFF FFFF   SupSonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001E75E FE96 9796 9896 9996 9AFF   SupSonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E768 FE96 9796 9896 9996 9AFF   SupSonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E772 FDB6 B7B8 B9FF FFFF FFFF   SupSonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001E77C 07C5 C6FF                  SupSonAni_Wait:	dc.b	7, $C5, $C6, $FF
0001E780 07A4 A5A6 FF               SupSonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001E785 059B 9CFE 01               SupSonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001E78A 02D2 D2D3 D3D4 D5D5 D5D5+  SupSonAni_Transform:	dc.b	2, $D2,	$D2, $D3, $D3, $D4, $D5, $D5, $D5, $D5,	$D5, $D5, $D5, $D5, $FD,   0
0001E79A                            					; DATA XREF: ROM:00012AA6o
0001E79A                            							align 2
0001E79A                            							align 2
0001E79A                                            even
0001E79A                            ; ---------------------------------------------------------------------------
0001E79A                            ; This table converts art using	palette	indexes	set for	S&K to palette indexes set for S2.
0001E79A                            ; Format: The rightmost	nybble of entry	X in any row = the new index that replaces color X.
0001E79A                            ; Similarly, the leftmost nybble of entry X in any column = the	new index that replaces	color X.
0001E79A                            ;
0001E79A                            ; Specific replacements:
0001E79A                            ;
0001E79A                            ; $0 ->	$0
0001E79A                            ; $1 ->	$6
0001E79A                            ; $2 ->	$5
0001E79A                            ; $3 ->	$3
0001E79A                            ; $4 ->	$2
0001E79A                            ; $5 ->	$4
0001E79A                            ; $6 ->	$C
0001E79A                            ; $7 ->	$D
0001E79A                            ; $8 ->	$E
0001E79A                            ; $9 ->	$F
0001E79A                            ; $A ->	$A
0001E79A                            ; $B ->	$B
0001E79A                            ; $C ->	$7
0001E79A                            ; $D ->	$8
0001E79A                            ; $E ->	$9
0001E79A                            ; $F ->	$1
0001E79A                            ; ---------------------------------------------------------------------------
0001E79A 0006 0503 0204 0C0D 0E0F+  ArtConvTable:	dc.b $00,$06,$05,$03,$02,$04,$0C,$0D,$0E,$0F,$0A,$0B,$07,$08,$09,$01; 0	; ...
0001E7AA 6066 6563 6264 6C6D 6E6F+  		dc.b $60,$66,$65,$63,$62,$64,$6C,$6D,$6E,$6F,$6A,$6B,$67,$68,$69,$61; 16
0001E7BA 5056 5553 5254 5C5D 5E5F+  		dc.b $50,$56,$55,$53,$52,$54,$5C,$5D,$5E,$5F,$5A,$5B,$57,$58,$59,$51; 32
0001E7CA 3036 3533 3234 3C3D 3E3F+  		dc.b $30,$36,$35,$33,$32,$34,$3C,$3D,$3E,$3F,$3A,$3B,$37,$38,$39,$31; 48
0001E7DA 2026 2523 2224 2C2D 2E2F+  		dc.b $20,$26,$25,$23,$22,$24,$2C,$2D,$2E,$2F,$2A,$2B,$27,$28,$29,$21; 64
0001E7EA 4046 4543 4244 4C4D 4E4F+  		dc.b $40,$46,$45,$43,$42,$44,$4C,$4D,$4E,$4F,$4A,$4B,$47,$48,$49,$41; 80
0001E7FA C0C6 C5C3 C2C4 CCCD CECF+  		dc.b $C0,$C6,$C5,$C3,$C2,$C4,$CC,$CD,$CE,$CF,$CA,$CB,$C7,$C8,$C9,$C1; 96
0001E80A D0D6 D5D3 D2D4 DCDD DEDF+  		dc.b $D0,$D6,$D5,$D3,$D2,$D4,$DC,$DD,$DE,$DF,$DA,$DB,$D7,$D8,$D9,$D1; 112
0001E81A E0E6 E5E3 E2E4 ECED EEEF+  		dc.b $E0,$E6,$E5,$E3,$E2,$E4,$EC,$ED,$EE,$EF,$EA,$EB,$E7,$E8,$E9,$E1; 128
0001E82A F0F6 F5F3 F2F4 FCFD FEFF+  		dc.b $F0,$F6,$F5,$F3,$F2,$F4,$FC,$FD,$FE,$FF,$FA,$FB,$F7,$F8,$F9,$F1; 144
0001E83A A0A6 A5A3 A2A4 ACAD AEAF+  		dc.b $A0,$A6,$A5,$A3,$A2,$A4,$AC,$AD,$AE,$AF,$AA,$AB,$A7,$A8,$A9,$A1; 160
0001E84A B0B6 B5B3 B2B4 BCBD BEBF+  		dc.b $B0,$B6,$B5,$B3,$B2,$B4,$BC,$BD,$BE,$BF,$BA,$BB,$B7,$B8,$B9,$B1; 176
0001E85A 7076 7573 7274 7C7D 7E7F+  		dc.b $70,$76,$75,$73,$72,$74,$7C,$7D,$7E,$7F,$7A,$7B,$77,$78,$79,$71; 192
0001E86A 8086 8583 8284 8C8D 8E8F+  		dc.b $80,$86,$85,$83,$82,$84,$8C,$8D,$8E,$8F,$8A,$8B,$87,$88,$89,$81; 208
0001E87A 9096 9593 9294 9C9D 9E9F+  		dc.b $90,$96,$95,$93,$92,$94,$9C,$9D,$9E,$9F,$9A,$9B,$97,$98,$99,$91; 224
0001E88A 1016 1513 1214 1C1D 1E1F+  		dc.b $10,$16,$15,$13,$12,$14,$1C,$1D,$1E,$1F,$1A,$1B,$17,$18,$19,$11; 240
0001E89A                            ; ---------------------------------------------------------------------------
0001E89A                            ; Sonic	pattern	loading	subroutine
0001E89A                            ; ---------------------------------------------------------------------------
0001E89A                            
0001E89A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E89A                            
0001E89A                            
0001E89A                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001E89A 7000                       		moveq	#0,d0
0001E89C 1028 001A                  		move.b	mapping_frame(a0),d0	; load frame number
0001E8A0 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001E8A4 6700 0000                  		beq.w	locret_13C96
0001E8A8 11C0 F766                  		move.b	d0,($FFFFF766).w
0001E8AC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001E8B2 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001E8B6 6700                       		beq.s	LoadSonicDynPLCCont	; if not, branch
0001E8B8 45F9 0000 0000             		lea	(SuperSonicDynPLC).l,a2
0001E8BE                            
0001E8BE                            LoadSonicDynPLCCont:
0001E8BE D040                       		add.w	d0,d0
0001E8C0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E8C4 7A00                       		moveq	#0,d5
0001E8C6 1A1A                       		move.b	(a2)+,d5
0001E8C8 5345                       		subq.w	#1,d5
0001E8CA 6B00                       		bmi.s	locret_13C96
0001E8CC 383C F000                  		move.w	#$F000,d4
0001E8D0 2C3C 0000 0000             		move.l	#Art_Sonic,d6		; load Sonic's art
0001E8D6                            
0001E8D6                            SPLC_ReadEntry:
0001E8D6 7200                       		moveq	#0,d1
0001E8D8 121A                       		move.b	(a2)+,d1
0001E8DA E149                       		lsl.w	#8,d1
0001E8DC 121A                       		move.b	(a2)+,d1
0001E8DE 3601                       		move.w	d1,d3
0001E8E0 E04B                       		lsr.w	#8,d3
0001E8E2 0243 00F0                  		andi.w	#$F0,d3
0001E8E6 0643 0010                  		addi.w	#$10,d3
0001E8EA 0241 0FFF                  		andi.w	#$FFF,d1
0001E8EE EB89                       		lsl.l	#5,d1
0001E8F0 D286                       		add.l	d6,d1
0001E8F2 3404                       		move.w	d4,d2
0001E8F4 D843                       		add.w	d3,d4
0001E8F6 D843                       		add.w	d3,d4
0001E8F8 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
0001E8FE 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001E902                            
0001E902                            locret_13C96:
0001E902 4E75                       		rts	
0001E904                            ; End of function LoadSonicDynPLC`
0001E904                            
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            ; Subroutine to collect the right speed setting for a character
0001E904                            ; a0 must be character
0001E904                            ; a1 will be the result and have the correct speed settings
0001E904                            ; a2 is characters' speed
0001E904                            ; ---------------------------------------------------------------------------
0001E904                            
0001E904                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001E904                            
0001E904                            ApplySpeedSettings:
0001E904 7000                       	moveq	#0,d0				; Quickly clear d0
0001E906 4A28 0034                  	tst.b	speedshoes_time(a0)		; Does character have speedshoes?
0001E90A 6700                       	beq.s	setspeed1				; If not, branch
0001E90C 5200                       	addq.b	#1,d0				; Quickly add 1 to d0
0001E90E                            setspeed1:
0001E90E 0828 0006 0022             	btst	#6,status(a0)			; Is the character underwater?
0001E914 6700                       	beq.s	setspeed2				; If not, branch
0001E916 5400                       	addq.b	#2,d0				; Quickly add 2 to d0
0001E918                            setspeed2:
0001E918 4A38 FE19                  	tst.b	(Super_Sonic_flag).w		; Is the character Super?
0001E91C 6700                       	beq.s	setspeed3				; If not, branch
0001E91E 5800                       	addq.b	#4,d0				; Quickly add 4 to d0
0001E920                            setspeed3:
0001E920 D000                       	add.b	d0,d0				; Multiply itself
0001E922 D000                       	add.b	d0,d0				; And again
0001E924 D000                       	add.b	d0,d0				; And again
0001E926 43FB 0000                  	lea	Speedsettings(pc,d0.w),a1	; Load correct speed settings into a1
0001E92A 5489                       	addq.l	#2,a1				; Increment a1 by 2 quickly
0001E92C 24D9                       	move.l	(a1)+,(a2)+			; Set character's new top speed and acceleration
0001E92E 3491                       	move.w	(a1),(a2)			; Set character's deceleration
0001E930 4E75                       	rts					; Finish subroutine
0001E932                            ; ===========================================================================
0001E932                            ; ===========================================================================
0001E932                            ; ----------------------------------------------------------------------------
0001E932                            ; Speed Settings Array
0001E932                            
0001E932                            ; This array defines what speeds the character should be set to
0001E932                            ; ----------------------------------------------------------------------------
0001E932                            ;		blank	top_speed	acceleration	deceleration	; #	; Comment
0001E932                            Speedsettings:
0001E932 0000 0600 000C 0080        	dc.w	$0,	$600,		$C,		$80		; $00	; Normal
0001E93A 0000 0C00 0018 0080        	dc.w	$0,	$C00,		$18,		$80		; $08	; Normal Speedshoes
0001E942 0000 0300 0006 0040        	dc.w	$0,	$300,		$6,		$40		; $16	; Normal Underwater
0001E94A 0000 0600 000C 0040        	dc.w	$0,	$600,		$C,		$40		; $24	; Normal Underwater Speedshoes
0001E952 0000 0A00 0030 0100        	dc.w	$0,	$A00,		$30,		$100		; $32	; Super
0001E95A 0000 0C00 0030 0100        	dc.w	$0,	$C00,		$30,		$100		; $40	; Super Speedshoes
0001E962 0000 0500 0018 0080        	dc.w	$0,	$500,		$18,		$80		; $48	; Super Underwater
0001E96A 0000 0A00 0030 0080        	dc.w	$0,	$A00,		$30,		$80		; $56	; Super Underwater Speedshoes
0001E972                            ; ===========================================================================
0001E972                            ; ===========================================================================
0001E972                            ; ---------------------------------------------------------------------------
0001E972                            ; Object 8D - After Image
0001E972                            ; ---------------------------------------------------------------------------
0001E972                            
0001E972                            Obj8D:               ; XREF: Obj_Index
0001E972 0C38 0006 D024                   cmpi.b   #6,(MainCharacter+routine).w   ; is "death" animation?
0001E978 6600                             bne.s   Obj8DNormal      ; if not, skip the next line
0001E97A 4EF9 0001 5D26             	  jmp	DeleteObject
0001E980                            Obj8DNormal:
0001E980 0C38 0018 D01C                   cmpi.b   #$18,(MainCharacter+anim).w   ; is "death" animation?
0001E986 6700 0000                        beq.w   Obj8D_Delete      ; if yes, delete the After Image
0001E98A 4A38 FE08                        tst.b   ($FFFFFE08).w   ; is debug mode active?
0001E98E 6600 0000                        bne.w   Obj8D_Delete      ; if yes, delete the After Image
0001E992 7000                             moveq   #0,d0
0001E994 1028 0024                        move.b   routine(a0),d0
0001E998 323B 0000                        move.w   Obj8D_Index(pc,d0.w),d1
0001E99C 4EFB 1000                        jmp   Obj8D_Index(pc,d1.w)
0001E9A0                            
0001E9A0                            ; ===========================================================================
0001E9A0                            Obj8D_Index:
0001E9A0 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E9A2 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E9A4 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E9A6 0000                             dc.w Obj8D_Sprite_priority_start-Obj8D_Index
0001E9A8 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E9AA 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E9AC 0000                             dc.w Obj8D_Sprite_priority_next-Obj8D_Index
0001E9AE 0000                             dc.w Obj8D_Delete-Obj8D_Index
0001E9B0                            ; ===========================================================================
0001E9B0                            Obj8D_NoShow:
0001E9B0 5428 0024                        addq.b   #2,routine(a0)         ; go to next item of index, at the next frame
0001E9B4 4E75                             rts
0001E9B6                            ; ===========================================================================
0001E9B6                            Obj8D_Sprite_priority_start:
0001E9B6 317C 0100 0018                   move.w   #$100,priority(a0)         ; set sprite priority to 2
0001E9BC 6000                             bra.s   Obj8D_Show
0001E9BE                            ; ===========================================================================
0001E9BE                            Obj8D_Sprite_priority_next:
0001E9BE 0668 0080 0018                   addi.w   #$80,priority(a0)         ; set a lower sprite priority
0001E9C4                            ; ===========================================================================
0001E9C4                            Obj8D_Show:
0001E9C4 5428 0024                        addq.b   #2,routine(a0)            ; go to next item of index
0001E9C8 7210                       		moveq	#$10,d1
0001E9CA 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001E9D0 6700                       		beq.s	loc_1A4E4
0001E9D2 721C                       		moveq	#$1C,d1
0001E9D4                            
0001E9D4                            loc_1A4E4:
0001E9D4 3038 F7A8                  			move.w	(Sonic_Pos_Record_Index).w,d0
0001E9D8 43F8 CB00                  			lea	(Sonic_Pos_Record_Buf).w,a1
0001E9DC 9001                       			sub.b	d1,d0
0001E9DE 43F1 0000                  			lea	(a1,d0.w),a1
0001E9E2 3159 0008                  			move.w	(a1)+,x_pos(a0)
0001E9E6 3159 000C                  			move.w	(a1)+,y_pos(a0)
0001E9EA                            Obj8D_Show_exception:
0001E9EA 3178 D002 0002                   move.w   ($FFFFD002).w,2(a0)      ; copy Sonic map to after-image map
0001E9F0 1178 D001 0001                    move.b   ($FFFFD001).w,1(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001E9F6 2178 D01A 001A                    move.l   ($FFFFD01A).w,mapping_frame(a0)   ; copy the Sonic animation frame
0001E9FC 4EF9 0001 5D72                   jmp   DisplaySprite
0001EA02                            ; ===========================================================================
0001EA02                            Obj8D_Delete:
0001EA02 4EF9 0001 5D26                   jmp   DeleteObject
0001EA08                            
0001EA08                            ; ===========================================================================
0001EA08                            
0001EA08                            ; ===========================================================================
0001EA08                            ; ---------------------------------------------------------------------------
0001EA08                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001EA08                            ; ---------------------------------------------------------------------------
0001EA08                            
0001EA08                            Obj0A:					; XREF: Obj_Index
0001EA08 7000                       		moveq	#0,d0
0001EA0A 1028 0024                  		move.b	routine(a0),d0
0001EA0E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001EA12 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001EA16                            ; ===========================================================================
0001EA16 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001EA1A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001EA1E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001EA22 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001EA26 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001EA28                            ; ===========================================================================
0001EA28                            
0001EA28                            Obj0A_Main:				; XREF: Obj0A_Index
0001EA28 5428 0024                  		addq.b	#2,routine(a0)
0001EA2C 217C 0001 C63E 0004        		move.l	#Map_obj64,4(a0)
0001EA34 317C 8348 0002             		move.w	#$8348,2(a0)
0001EA3A 117C 0084 0001             		move.b	#$84,1(a0)
0001EA40 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001EA46 317C 0080 0018             		move.w	#$80,priority(a0)
0001EA4C 1028 0028                  		move.b	subtype(a0),d0
0001EA50 6A00                       		bpl.s	loc_13D00
0001EA52 5028 0024                  		addq.b	#8,routine(a0)
0001EA56 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001EA5E 317C 0440 0002             		move.w	#$440,2(a0)
0001EA64 0240 007F                  		andi.w	#$7F,d0
0001EA68 1140 0033                  		move.b	d0,$33(a0)
0001EA6C 6000 0000                  		bra.w	Obj0A_Countdown
0001EA70                            ; ===========================================================================
0001EA70                            
0001EA70                            loc_13D00:
0001EA70 1140 001C                  		move.b	d0,anim(a0)
0001EA74 3168 0008 0030             		move.w	8(a0),$30(a0)
0001EA7A 317C FF78 0012             		move.w	#-$88,y_vel(a0)
0001EA80                            
0001EA80                            Obj0A_Animate:				; XREF: Obj0A_Index
0001EA80 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001EA86 4EB9 0001 2754             		jsr	AnimateSprite
0001EA8C                            
0001EA8C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001EA8C 3038 F646                  		move.w	($FFFFF646).w,d0
0001EA90 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001EA94 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001EA96 117C 0006 0024             		move.b	#6,routine(a0)
0001EA9C 5E28 001C                  		addq.b	#7,anim(a0)
0001EAA0 0C28 000D 001C             		cmpi.b	#$D,anim(a0)
0001EAA6 6700                       		beq.s	Obj0A_Display
0001EAA8 6500                       		bcs.s	Obj0A_Display	;\Fix the bubble bug
0001EAAA 117C 000D 001C             		move.b	#$D,anim(a0)     ;/
0001EAB0 6000                       		bra.s	Obj0A_Display
0001EAB2                            ; ===========================================================================
0001EAB2                            
0001EAB2                            Obj0A_Wobble:
0001EAB2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001EAB6 6700                       		beq.s	loc_13D44
0001EAB8 5868 0030                  		addq.w	#4,$30(a0)
0001EABC                            
0001EABC                            loc_13D44:
0001EABC 1028 0026                  		move.b	$26(a0),d0
0001EAC0 5228 0026                  		addq.b	#1,$26(a0)
0001EAC4 0240 007F                  		andi.w	#$7F,d0
0001EAC8 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001EACE 1031 0000                  		move.b	(a1,d0.w),d0
0001EAD2 4880                       		ext.w	d0
0001EAD4 D068 0030                  		add.w	$30(a0),d0
0001EAD8 3140 0008                  		move.w	d0,8(a0)
0001EADC 6100                       		bsr.s	Obj0A_ShowNumber
0001EADE 4EB9 0001 5D0C             		jsr	SpeedToPos
0001EAE4 4A28 0001                  		tst.b	1(a0)
0001EAE8 6A00                       		bpl.s	Obj0A_Delete
0001EAEA 4EF9 0001 5D72             		jmp	DisplaySprite
0001EAF0                            ; ===========================================================================
0001EAF0                            
0001EAF0                            Obj0A_Delete:
0001EAF0 4EF9 0001 5D26             		jmp	DeleteObject
0001EAF6                            ; ===========================================================================
0001EAF6                            
0001EAF6                            Obj0A_Display:				; XREF: Obj0A_Index
0001EAF6 6100                       		bsr.s	Obj0A_ShowNumber
0001EAF8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001EAFE 4EB9 0001 2754             		jsr	AnimateSprite
0001EB04 4EF9 0001 5D72             		jmp	DisplaySprite
0001EB0A                            ; ===========================================================================
0001EB0A                            
0001EB0A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001EB0A 4EF9 0001 5D26             		jmp	DeleteObject
0001EB10                            ; ===========================================================================
0001EB10                            
0001EB10                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001EB10 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001EB16 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001EB18 5368 0038                  		subq.w	#1,$38(a0)
0001EB1C 6600                       		bne.s	Obj0A_Display2
0001EB1E 117C 000E 0024             		move.b	#$E,routine(a0)
0001EB24 5E28 001C                  		addq.b	#7,anim(a0)
0001EB28 60CC                       		bra.s	Obj0A_Display
0001EB2A                            ; ===========================================================================
0001EB2A                            
0001EB2A                            Obj0A_Display2:
0001EB2A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001EB30 4EB9 0001 2754             		jsr	AnimateSprite
0001EB36 4A28 0001                  		tst.b	1(a0)
0001EB3A 6A00                       		bpl.s	Obj0A_Delete3
0001EB3C 4EF9 0001 5D72             		jmp	DisplaySprite
0001EB42                            ; ===========================================================================
0001EB42                            
0001EB42                            Obj0A_Delete3:
0001EB42 4EF9 0001 5D26             		jmp	DeleteObject
0001EB48                            ; ===========================================================================
0001EB48                            
0001EB48                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001EB48 4A68 0038                  		tst.w	$38(a0)
0001EB4C 6700                       		beq.s	locret_13E1A
0001EB4E 5368 0038                  		subq.w	#1,$38(a0)
0001EB52 6600                       		bne.s	locret_13E1A
0001EB54 0C28 0007 001C             		cmpi.b	#7,anim(a0)
0001EB5A 6400                       		bcc.s	locret_13E1A
0001EB5C 317C 000F 0038             		move.w	#$F,$38(a0)
0001EB62 4268 0012                  		clr.w	y_vel(a0)
0001EB66 117C 0080 0001             		move.b	#$80,1(a0)
0001EB6C 3028 0008                  		move.w	8(a0),d0
0001EB70 9078 F700                  		sub.w	($FFFFF700).w,d0
0001EB74 0640 0080                  		addi.w	#$80,d0
0001EB78 3140 0008                  		move.w	d0,8(a0)
0001EB7C 3028 000C                  		move.w	$C(a0),d0
0001EB80 9078 F704                  		sub.w	($FFFFF704).w,d0
0001EB84 0640 0080                  		addi.w	#$80,d0
0001EB88 3140 000A                  		move.w	d0,$A(a0)
0001EB8C 117C 000C 0024             		move.b	#$C,routine(a0)
0001EB92                            
0001EB92                            locret_13E1A:
0001EB92 4E75                       		rts	
0001EB94                            ; ===========================================================================
0001EB94                            Obj0A_WobbleData:
0001EB94 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001EBA5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001EBB6 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001EBC7 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001EBD7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001EBE4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001EBF1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001EBFE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001EC0B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001EC14 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001EC25 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001EC36 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001EC47 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001EC57 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001EC64 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001EC71 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001EC7E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001EC8B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001EC94                            ; ===========================================================================
0001EC94                            
0001EC94                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001EC94 4A68 002C                  		tst.w	$2C(a0)
0001EC98 6600 0000                  		bne.w	loc_13F86
0001EC9C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001ECA2 6400 0000                  		bcc.w	locret_1408C
0001ECA6 0838 0006 D022             		btst	#6,($FFFFD022).w
0001ECAC 6700 0000                  		beq.w	locret_1408C
0001ECB0 5368 0038                  		subq.w	#1,$38(a0)
0001ECB4 6A00 0000                  		bpl.w	loc_13FAC
0001ECB8 317C 003B 0038             		move.w	#59,$38(a0)
0001ECBE 317C 0001 0036             		move.w	#1,$36(a0)
0001ECC4 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001ECCA 0240 0001                  		andi.w	#1,d0
0001ECCE 1140 0034                  		move.b	d0,$34(a0)
0001ECD2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001ECD6 0C40 0019                  		cmpi.w	#$19,d0
0001ECDA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001ECDC 0C40 0014                  		cmpi.w	#$14,d0
0001ECE0 6700                       		beq.s	Obj0A_WarnSound
0001ECE2 0C40 000F                  		cmpi.w	#$F,d0
0001ECE6 6700                       		beq.s	Obj0A_WarnSound
0001ECE8 0C40 000C                  		cmpi.w	#$C,d0
0001ECEC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001ECEE 6600                       		bne.s	loc_13F02
0001ECF0 303C 0031                  		move.w	#$31,d0
0001ECF4 4EB9 0000 3212             		jsr	(PlaySound).l	; play countdown music
0001ECFA                            		
0001ECFA                            loc_13F02:
0001ECFA 5328 0032                  		subq.b	#1,$32(a0)
0001ECFE 6A00                       		bpl.s	Obj0A_ReduceAir
0001ED00 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001ED06 08E8 0007 0036             		bset	#7,$36(a0)
0001ED0C 6000                       		bra.s	Obj0A_ReduceAir
0001ED0E                            
0001ED0E                            ; ===========================================================================
0001ED0E                            
0001ED0E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001ED0E 303C 00A9                  		move.w	#$A9,d0
0001ED12 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001ED18                            
0001ED18                            Obj0A_ReduceAir:
0001ED18 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001ED1C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001ED20 4EB9 0000 0000             		jsr	ResumeMusic
0001ED26 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001ED2C 303C 003B                  		move.w	#$3B,d0
0001ED30 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play drowning sound
0001ED36 117C 000A 0034             		move.b	#$A,$34(a0)
0001ED3C 317C 0001 0036             		move.w	#1,$36(a0)
0001ED42 317C 0078 002C             		move.w	#$78,$2C(a0)
0001ED48 2F08                       		move.l	a0,-(sp)
0001ED4A 41F8 D000                  		lea	($FFFFD000).w,a0
0001ED4E 4EBA F25A                  		jsr	Sonic_ResetOnFloor
0001ED52 117C 0017 001C             		move.b	#$17,anim(a0)	; use Sonic's drowning animation
0001ED58 08E8 0001 0022             		bset	#1,status(a0)
0001ED5E 08E8 0007 0002             		bset	#7,2(a0)
0001ED64 317C 0000 0012             		move.w	#0,y_vel(a0)
0001ED6A 317C 0000 0010             		move.w	#0,x_vel(a0)
0001ED70 317C 0000 0020             		move.w	#0,inertia(a0)
0001ED76 117C 000A 0024             		move.b  #$A,routine(a0)       ; Force the character to drown
0001ED7C 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001ED82 11FC 0000 FE1E             		move.b  #0,(f_timecount).w      ; Stop the timer immediately
0001ED88 205F                       		movea.l	(sp)+,a0
0001ED8A 4E75                       		rts	
0001ED8C                            ; ===========================================================================
0001ED8C                            
0001ED8C                            loc_13F86:
0001ED8C 5368 002C                                  subq.w  #1,$2C(a0)
0001ED90 6600                                       bne.s   loc_13FAC                       ; Make it jump straight to this location
0001ED92 11FC 0006 D024                             move.b  #6,(v_player+routine).w
0001ED98 4E75                                       rts
0001ED9A                            ; ===========================================================================
0001ED9A                            
0001ED9A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001ED9A 6000                       		bra.s	Obj0A_MakeItem
0001ED9C                            ; ===========================================================================
0001ED9C                            
0001ED9C                            loc_13FAC:
0001ED9C 4A68 0036                  		tst.w	$36(a0)
0001EDA0 6700 0000                  		beq.w	locret_1408C
0001EDA4 5368 003A                  		subq.w	#1,$3A(a0)
0001EDA8 6A00 0000                  		bpl.w	locret_1408C
0001EDAC                            
0001EDAC                            Obj0A_MakeItem:
0001EDAC 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001EDB2 0240 000F                  		andi.w	#$F,d0
0001EDB6 3140 003A                  		move.w	d0,$3A(a0)
0001EDBA 4EB9 0001 687C             		jsr	SingleObjLoad
0001EDC0 6600 0000                  		bne.w	locret_1408C
0001EDC4 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001EDC8 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001EDCE 7006                       		moveq	#6,d0
0001EDD0 0838 0000 D022             		btst	#0,($FFFFD022).w
0001EDD6 6700                       		beq.s	loc_13FF2
0001EDD8 4440                       		neg.w	d0
0001EDDA 137C 0040 0026             		move.b	#$40,$26(a1)
0001EDE0                            
0001EDE0                            loc_13FF2:
0001EDE0 D169 0008                  		add.w	d0,8(a1)
0001EDE4 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001EDEA 137C 0006 0028             		move.b	#6,subtype(a1)
0001EDF0 4A68 002C                  		tst.w	$2C(a0)
0001EDF4 6700 0000                  		beq.w	loc_1403E
0001EDF8 0268 0007 003A             		andi.w	#7,$3A(a0)
0001EDFE 0668 0000 003A             		addi.w	#0,$3A(a0)
0001EE04 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001EE08 0440 000C                  		subi.w	#$C,d0
0001EE0C 3340 000C                  		move.w	d0,$C(a1)
0001EE10 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001EE16 1340 0026                  		move.b	d0,$26(a1)
0001EE1A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001EE1E 0200 0003                  		andi.b	#3,d0
0001EE22 6600                       		bne.s	loc_14082
0001EE24 137C 000E 0028             		move.b	#$E,subtype(a1)
0001EE2A 6000                       		bra.s	loc_14082
0001EE2C                            ; ===========================================================================
0001EE2C                            
0001EE2C                            loc_1403E:
0001EE2C 0828 0007 0036             		btst	#7,$36(a0)
0001EE32 6700                       		beq.s	loc_14082
0001EE34 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001EE38 E24A                       		lsr.w	#1,d2
0001EE3A 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0001EE40 0240 0003                  		andi.w	#3,d0
0001EE44 6600                       		bne.s	loc_1406A
0001EE46 08E8 0006 0036             		bset	#6,$36(a0)
0001EE4C 6600                       		bne.s	loc_14082
0001EE4E 1342 0028                  		move.b	d2,subtype(a1)
0001EE52 337C 001C 0038             		move.w	#$1C,$38(a1)
0001EE58                            
0001EE58                            loc_1406A:
0001EE58 4A28 0034                  		tst.b	$34(a0)
0001EE5C 6600                       		bne.s	loc_14082
0001EE5E 08E8 0006 0036             		bset	#6,$36(a0)
0001EE64 6600                       		bne.s	loc_14082
0001EE66 1342 0028                  		move.b	d2,subtype(a1)
0001EE6A 337C 001C 0038             		move.w	#$1C,$38(a1)
0001EE70                            
0001EE70                            loc_14082:
0001EE70 5328 0034                  		subq.b	#1,$34(a0)
0001EE74 6A00                       		bpl.s	locret_1408C
0001EE76 4268 0036                  		clr.w	$36(a0)
0001EE7A                            
0001EE7A                            locret_1408C:
0001EE7A 4E75                       		rts	
0001EE7C                            
0001EE7C                            ;		include	"_incObj\Sonic LoadGfx.asm"
0001EE7C                            ;		include	"_incObj\Sonic RecordPosition.asm"
0001EE7C                            		
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C                            
0001EE7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE7C                            
0001EE7C                            
0001EE7C                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir; Debug_Main;
0001EE7C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001EE82                            
0001EE82                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001EE82                            
0001EE82 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001EE86                            ;		bcc.w	ResumeMusic_Part2
0001EE86                            
0001EE86 B2FC D000                  		cmpa.w	#MainCharacter,a1
0001EE8A 6600                       		bne.s	loc_140AC	; branch if it isn't player 1
0001EE8C                            
0001EE8C                            Air_GetBgm:
0001EE8C 3038 FF90                  		move.w  (Level_Music).w,d0      ; prepare to play current level's music
0001EE90 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w	; is Sonic invincible?
0001EE96 6700                       		beq.s	loc_186A0		; if not branch
0001EE98 303C 002C                  		move.w	#$2C,d0
0001EE9C                            
0001EE9C                            loc_186A0:
0001EE9C 4A38 FE19                  		tst.b	($FFFFFE19).w	; is Sonic super?
0001EEA0 6700 0000                  		beq.w	Air_PlayMusic	; if not branch
0001EEA4 303C 002D                  		move.w	#$2D,d0
0001EEA8                            
0001EEA8                            Air_PlayMusic:
0001EEA8 4A38 F7AA                  		tst.b	(Current_Boss_ID).w ; Is this a boss fight?
0001EEAC 6700                       		beq.s	loc_140A6		; if not branch
0001EEAE 303C 000E                  		move.w	#$0E,d0	; prepare to play boss music
0001EEB2                            
0001EEB2                            loc_140A6:
0001EEB2 4EB9 0000 3212             		jsr	(PlaySound).l
0001EEB8                            
0001EEB8                            loc_140AC:
0001EEB8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001EEBE 4238 D372                  		clr.b	($FFFFD372).w
0001EEC2                            ;locret_Super:
0001EEC2 4E75                       		rts	
0001EEC4                            ; End of function ResumeMusic
0001EEC4                            BossModeMusic:
0001EEC4                            JsrNormalMode:
0001EEC4 0C28 0004 0021             	cmp.b	#$4,collision_property(a0)
0001EECA 6600 0000                  	bne.w JsrNormalMode2
0001EECE 4EF9 0000 0000             	jmp	PinchMode
0001EED4                            
0001EED4                            JsrNormalMode2:
0001EED4 4EF9 0000 0000             	jmp	NormalMode
0001EEDA 4E75                       	rts
0001EEDC                            
0001EEDC                            NormalMode:
0001EEDC 303C 006E                  	move.w	#$6E,d0
0001EEE0 4EB9 0000 3212             	jsr	(PlaySound).l
0001EEE6 4E75                       	rts
0001EEE8                            
0001EEE8                            PinchMode:
0001EEE8 303C 006E                  	move.w	#$6E,d0
0001EEEC 4EB9 0000 325C             	jsr	(PlaySound_Special).l
0001EEF2 303C 000D                  	move.w	#$0D,d0
0001EEF6 4EB9 0000 3212             	jsr	(PlaySound).l
0001EEFC 4E75                       	rts
0001EEFE                            	
0001EEFE                            BossMusic:
0001EEFE 0C78 0502 FE10             	cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0001EF04 6700                       	beq.s	BossMusic2	; if not, branch	
0001EF06                            ;	addi.b	#1,($FFFFFF0A).w
0001EF06 4EFA FFBC                  	jmp	JsrNormalMode
0001EF0A                            	
0001EF0A                            BossMusic2:
0001EF0A 303C 00AC                  	move.w	#$AC,d0
0001EF0E 4EB9 0000 3212             	jsr	(PlaySound).l
0001EF14 4E75                       	rts
0001EF16                            
0001EF16                            ; ===========================================================================
0001EF16                            Ani_obj0A:
0001EF16                            	include "_anim\obj0A.asm"
0001EF16                            ; ---------------------------------------------------------------------------
0001EF16                            ; Animation script - countdown numbers and bubbles (LZ)
0001EF16                            ; ---------------------------------------------------------------------------
0001EF16 0000                       		dc.w byte_140D6-Ani_obj0A
0001EF18 0000                       		dc.w byte_140E0-Ani_obj0A
0001EF1A 0000                       		dc.w byte_140EA-Ani_obj0A
0001EF1C 0000                       		dc.w byte_140F4-Ani_obj0A
0001EF1E 0000                       		dc.w byte_140FE-Ani_obj0A
0001EF20 0000                       		dc.w byte_14108-Ani_obj0A
0001EF22 0000                       		dc.w byte_14112-Ani_obj0A
0001EF24 0000                       		dc.w byte_14118-Ani_obj0A
0001EF26 0000                       		dc.w byte_14120-Ani_obj0A
0001EF28 0000                       		dc.w byte_14128-Ani_obj0A
0001EF2A 0000                       		dc.w byte_14130-Ani_obj0A
0001EF2C 0000                       		dc.w byte_14138-Ani_obj0A
0001EF2E 0000                       		dc.w byte_14140-Ani_obj0A
0001EF30 0000                       		dc.w byte_14148-Ani_obj0A
0001EF32 0000                       		dc.w byte_1414A-Ani_obj0A
0001EF34 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001EF3E 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001EF48 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001EF52 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001EF5C 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001EF66 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001EF70 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001EF76 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001EF7E 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001EF86 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001EF8E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001EF96 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001EF9E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001EFA6 0EFC                       byte_14148:	dc.b $E, $FC
0001EFA8 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001EFAE                            		even
0001EFAE                            		even
0001EFAE                            
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            ; Sprite mappings - drowning countdown numbers (LZ)
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            Map_obj0A:
0001EFAE                            	include "_maps\obj0A.asm"
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            ; Sprite mappings - drowning countdown numbers (LZ)
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE 0000                       		dc.w byte_14152-Map_obj0A
0001EFB0 01                         byte_14152:	dc.b 1
0001EFB1 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001EFB6                            		even
0001EFB6                            		even
0001EFB6                            
0001EFB6                            ; ===========================================================================
0001EFB6                            
0001EFB6                            ; ---------------------------------------------------------------------------
0001EFB6                            ; Object 02 - Shield (A slightly modified port from Sonic 2F)
0001EFB6                            ; ---------------------------------------------------------------------------
0001EFB6                            Obj02:
0001EFB6 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w	; Is Sonic Invincible?
0001EFBC 6600 0000                  		bne.w	loc_19500		; if yes, branch
0001EFC0 223C 0000 0000             		move.l	#Unc_Shield,d1			        ; Call for Regular Shield Art
0001EFC6 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
0001EFCA                            								; In this case, VRAM = $541*20
0001EFCA 363C 0200                  		move.w	#$200,d3
0001EFCE 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
0001EFD4                            ;===============================================================================
0001EFD4                            ; Object 0x38 - Shield
0001EFD4                            ; [ Begin ]
0001EFD4                            ;===============================================================================	
0001EFD4                            loc_19500:
0001EFD4                            ; ----------------------------------------------------------------------------
0001EFD4                            ; Object 38 - Shield
0001EFD4                            ; ----------------------------------------------------------------------------
0001EFD4                            ; Sprite_1D8F2:
0001EFD4                            ;Obj38:
0001EFD4 7000                       	moveq	#0,d0
0001EFD6 1028 0024                  	move.b	routine(a0),d0
0001EFDA 323B 0000                  	move.w	Obj38_Index(pc,d0.w),d1
0001EFDE 4EFB 1000                  	jmp	Obj38_Index(pc,d1.w)
0001EFE2                            ; ===========================================================================
0001EFE2                            ; off_1D900:
0001EFE2                            Obj38_Index:
0001EFE2 0000                       	dc.w Obj38_Main-Obj38_Index
0001EFE4 0000                       	dc.w Obj38_Shield-Obj38_Index; 1
0001EFE6                            ; ===========================================================================
0001EFE6                            ; loc_1D904:
0001EFE6                            Obj38_Main:
0001EFE6 5428 0024                  	addq.b	#2,routine(a0)
0001EFEA 217C 0000 0000 0004        	move.l	#Map_obj38_Sheild,mappings(a0)
0001EFF2 117C 0004 0001             	move.b	#4,render_flags(a0)
0001EFF8 317C 0080 0018             	move.w	#$80,priority(a0)
0001EFFE 117C 0018 0023             	move.b	#$18,width_pixels(a0)
0001F004 317C 0541 0002             	move.w	#$541,art_tile(a0)
0001F00A                            	;bsr.w	Adjust2PArtPointer
0001F00A                            ; loc_1D92C:
0001F00A                            Obj38_Shield:
0001F00A 3038 D008                  	move.w	(MainCharacter+x_pos).w,d0
0001F00E 3238 D00C                  	move.w	(MainCharacter+y_pos).w,d1
0001F012                            ;	movea.w	parent(a0),a2 ; a2=character
0001F012 0838 0001 D02B             	btst	#1,(Maincharacter+status_secondary).w	; does Sonic have invincibility?
0001F018 6600                       	bne.s	return_1D976	; if yes, branch
0001F01A 0838 0000 D02B             	btst	#0,(Maincharacter+status_secondary).w	; does Sonic have shield?
0001F020 6700                       	beq.s	JmpTo7_DeleteObject	; if the flag is not set, branch
0001F022 3140 0008                  	move.w	d0,x_pos(a0)	; Copy the X-position from Sonic
0001F026 3141 000C                  	move.w	d1,y_pos(a0)	; Copy the Y-position from Sonic
0001F02A 1178 D022 0022             	move.b	(MainCharacter+status).w,status(a0)	; Copy Sonic's Status
0001F030 0268 7FFF 0002             	andi.w	#$7FFF,art_tile(a0)
0001F036 4A78 D002                  	tst.w	(MainCharacter+art_tile).w
0001F03A 6A00                       	bpl.s	Obj38_Display
0001F03C 0068 8000 0002             	ori.w	#$8000,art_tile(a0)
0001F042                            ; loc_1D964:
0001F042                            Obj38_Display:
0001F042 43F9 0000 0000             	lea	(Ani_Obj38_Shield).l,a1
0001F048 4EB9 0001 2754             	jsr	AnimateSprite
0001F04E 4EF9 0001 5D72             	jmp	DisplaySprite
0001F054                            ; ===========================================================================
0001F054                            
0001F054                            return_1D976:
0001F054 4E75                       	rts
0001F056                            ; ===========================================================================
0001F056                            
0001F056                            JmpTo7_DeleteObject:
0001F056 4EF9 0001 5D26             	jmp	DeleteObject
0001F05C                            ; ===========================================================================
0001F05C                            ;===============================================================================
0001F05C                            ; Object 0x38 - Shield
0001F05C                            ; [ End ]
0001F05C                            ;===============================================================================
0001F05C                            
0001F05C                            
0001F05C                            ; ---------------------------------------------------------------------------
0001F05C                            ; Object 38 - invincibility stars
0001F05C                            ; ---------------------------------------------------------------------------
0001F05C                            
0001F05C                            Obj38:					; XREF: Obj_Index
0001F05C 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001F060 6700 0000                  		beq.w	Invincibility_Main		; if yes, branch
0001F064 223C 0000 0000             		move.l	#Unc_Stars,d1
0001F06A 343C ABC0                  		move.w	#$ABC0,d2
0001F06E 363C 0200                  		move.w	#$200,d3
0001F072 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
0001F078                            Invincibility_Main:
0001F078 7000                       		moveq	#0,d0
0001F07A 1028 0024                  		move.b	$24(a0),d0
0001F07E                            Invincibility_Init:
0001F07E 323B 0000                  		move.w	off_18152(pc,d0.w),d1
0001F082 4EFB 1000                  		jmp	off_18152(pc,d1.w)
0001F086                            ; ---------------------------------------------------------------------------
0001F086 0000                       off_18152:	dc.w loc_1816A-off_18152 ; DATA	XREF: ROM:0001814Ar
0001F088                            					; ROM:off_18152o ...
0001F088 0000                       		dc.w loc_181C4-off_18152
0001F08A 0000                       		dc.w loc_1823E-off_18152
0001F08C 0000 0000                  		dc.l unk_18335
0001F090 000B                       		dc.w $B
0001F092 0000 0000                  		dc.l unk_1834A
0001F096 160D                       		dc.w $160D
0001F098 0000 0000                  		dc.l unk_18363
0001F09C 2C0D                       		dc.w $2C0D
0001F09E                            ; ---------------------------------------------------------------------------
0001F09E                            
0001F09E                            loc_1816A:				; DATA XREF: ROM:off_18152o
0001F09E 7400                       		moveq	#0,d2
0001F0A0 45FA FFE4                  		lea	off_18152,a2
0001F0A4 43D0                       		lea	(a0),a1
0001F0A6 7203                       		moveq	#3,d1
0001F0A8                            
0001F0A8                            loc_18174:				; CODE XREF: ROM:000181B4j
0001F0A8 1290                       		move.b	(a0),(a1)
0001F0AA 137C 0004 0024             		move.b	#4,$24(a1)
0001F0B0 237C 0000 0000 0004        		move.l	#Map_obj38,4(a1)
0001F0B8 337C 055E 0002             		move.w	#$55E,2(a1)
0001F0BE 137C 0004 0001             		move.b	#4,1(a1)
0001F0C4 08E9 0006 0001             		bset	#6,1(a1)
0001F0CA 137C 0010 000E             		move.b	#$10,$E(a1)
0001F0D0 137C 0002 000F             		move.b	#2,$F(a1)
0001F0D6 1342 0036                  		move.b	d2,$36(a1)
0001F0DA 5242                       		addq.w	#1,d2
0001F0DC 235A 0030                  		move.l	(a2)+,$30(a1)
0001F0E0 335A 0034                  		move.w	(a2)+,$34(a1)
0001F0E4 43E9 0040                  		lea	$40(a1),a1
0001F0E8 51C9 FFBE                  		dbf	d1,loc_18174
0001F0EC 117C 0002 0024             		move.b	#2,$24(a0)
0001F0F2 117C 0004 0034             		move.b	#4,$34(a0)
0001F0F8                            
0001F0F8                            loc_181C4:				; DATA XREF: ROM:00018154o
0001F0F8 43F8 D000                  		lea	($FFFFD000).w,a1
0001F0FC                            ;		tst.b	($FFFFFE19).w
0001F0FC                            ;		bne.w	loc_181FA
0001F0FC 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w
0001F102 6700 0000                  		beq.w	loc_181FA
0001F106 3029 0008                  		move.w	8(a1),d0
0001F10A 3140 0008                  		move.w	d0,8(a0)
0001F10E 3229 000C                  		move.w	$C(a1),d1
0001F112 3141 000C                  		move.w	d1,$C(a0)
0001F116 45E8 0010                  		lea	$10(a0),a2
0001F11A 47F9 0000 0000             		lea	unk_18328,a3
0001F120 7A00                       		moveq	#0,d5
0001F122                            
0001F122                            loc_181EA:				; CODE XREF: ROM:000181F8j
0001F122 3428 0038                  		move.w	$38(a0),d2
0001F126 1A33 2000                  		move.b	(a3,d2.w),d5
0001F12A 6A00                       		bpl.s	loc_18200
0001F12C 4268 0038                  		clr.w	$38(a0)
0001F130 60F0                       		bra.s	loc_181EA
0001F132                            ; ---------------------------------------------------------------------------
0001F132                            
0001F132                            loc_181FA:				; CODE XREF: ROM:000181CCj
0001F132                            					; ROM:00018246j
0001F132 4EF9 0001 5D26             		jmp	DeleteObject
0001F138                            ; ---------------------------------------------------------------------------
0001F138                            
0001F138                            loc_18200:				; CODE XREF: ROM:000181F2j
0001F138 5268 0038                  		addq.w	#1,$38(a0)
0001F13C 4DF9 0000 0000             		lea	unk_182E8,a6
0001F142 1C28 0034                  		move.b	$34(a0),d6
0001F146 4EB9 0000 0000             		jsr	sub_182D2
0001F14C 34C2                       		move.w	d2,(a2)+
0001F14E 34C3                       		move.w	d3,(a2)+
0001F150 34C5                       		move.w	d5,(a2)+
0001F152 0646 0020                  		addi.w	#$20,d6	; ' '
0001F156 4EB9 0000 0000             		jsr	sub_182D2
0001F15C 34C2                       		move.w	d2,(a2)+
0001F15E 34C3                       		move.w	d3,(a2)+
0001F160 34C5                       		move.w	d5,(a2)+
0001F162 7012                       		moveq	#$12,d0
0001F164 0829 0000 0022             		btst	#0,$22(a1)
0001F16A 6700                       		beq.s	loc_18230
0001F16C 4440                       		neg.w	d0
0001F16E                            
0001F16E                            loc_18230:				; CODE XREF: ROM:0001822Cj
0001F16E D128 0034                  		add.b	d0,$34(a0)
0001F172 303C 0080                  		move.w	#$80,d0	; '?'
0001F176 4EF9 0001 5D9E             		jmp	DisplaySprite3
0001F17C                            ; ---------------------------------------------------------------------------
0001F17C                            
0001F17C                            loc_1823E:				; DATA XREF: ROM:00018156o
0001F17C 43F8 D000                  		lea	($FFFFD000).w,a1
0001F180 4A38 FE19                  		tst.b	($FFFFFE19).w
0001F184 66AC                       		bne.s	loc_181FA
0001F186 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w
0001F18C 67A4                       		beq.s	loc_181FA
0001F18E 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
0001F192 4DF8 CB00                  		lea	($FFFFCB00).w,a6
0001F196 1228 0036                  		move.b	$36(a0),d1
0001F19A E509                       		lsl.b	#2,d1
0001F19C 3401                       		move.w	d1,d2
0001F19E D241                       		add.w	d1,d1
0001F1A0 D242                       		add.w	d2,d1
0001F1A2 3015                       		move.w	(a5),d0
0001F1A4 9001                       		sub.b	d1,d0
0001F1A6 45F6 0000                  		lea	(a6,d0.w),a2
0001F1AA 301A                       		move.w	(a2)+,d0
0001F1AC 321A                       		move.w	(a2)+,d1
0001F1AE 3140 0008                  		move.w	d0,8(a0)
0001F1B2 3141 000C                  		move.w	d1,$C(a0)
0001F1B6 45E8 0010                  		lea	$10(a0),a2
0001F1BA 2668 0030                  		movea.l	$30(a0),a3
0001F1BE                            
0001F1BE                            loc_18278:				; CODE XREF: ROM:00018286j
0001F1BE 3428 0038                  		move.w	$38(a0),d2
0001F1C2 1A33 2000                  		move.b	(a3,d2.w),d5
0001F1C6 6A00                       		bpl.s	loc_18288
0001F1C8 4268 0038                  		clr.w	$38(a0)
0001F1CC 60F0                       		bra.s	loc_18278
0001F1CE                            ; ---------------------------------------------------------------------------
0001F1CE                            
0001F1CE                            loc_18288:				; CODE XREF: ROM:00018280j
0001F1CE 4845                       		swap	d5
0001F1D0 D428 0035                  		add.b	$35(a0),d2
0001F1D4 1A33 2000                  		move.b	(a3,d2.w),d5
0001F1D8 5268 0038                  		addq.w	#1,$38(a0)
0001F1DC 4DF9 0000 0000             		lea	unk_182E8,a6
0001F1E2 1C28 0034                  		move.b	$34(a0),d6
0001F1E6 4EB9 0000 0000             		jsr	sub_182D2
0001F1EC 34C2                       		move.w	d2,(a2)+
0001F1EE 34C3                       		move.w	d3,(a2)+
0001F1F0 34C5                       		move.w	d5,(a2)+
0001F1F2 0646 0020                  		addi.w	#$20,d6	; ' '
0001F1F6 4845                       		swap	d5
0001F1F8 4EB9 0000 0000             		jsr	sub_182D2
0001F1FE 34C2                       		move.w	d2,(a2)+
0001F200 34C3                       		move.w	d3,(a2)+
0001F202 34C5                       		move.w	d5,(a2)+
0001F204 7002                       		moveq	#2,d0
0001F206 0829 0000 0022             		btst	#0,$22(a1)
0001F20C 6700                       		beq.s	loc_182C4
0001F20E 4440                       		neg.w	d0
0001F210                            
0001F210                            loc_182C4:				; CODE XREF: ROM:000182C0j
0001F210 D128 0034                  		add.b	d0,$34(a0)
0001F214 303C 0080                  		move.w	#$80,d0	; '?'
0001F218 4EF9 0001 5D9E             		jmp	DisplaySprite3
0001F21E                            
0001F21E                            ; =============== S U B	R O U T	I N E =======================================
0001F21E                            
0001F21E                            
0001F21E                            sub_182D2:				; CODE XREF: ROM:0001820Cp
0001F21E                            					; ROM:0001821Ap ...
0001F21E 0246 003E                  		andi.w	#$3E,d6	; '>'
0001F222 1436 6000                  		move.b	(a6,d6.w),d2
0001F226 1636 6001                  		move.b	1(a6,d6.w),d3
0001F22A 4882                       		ext.w	d2
0001F22C 4883                       		ext.w	d3
0001F22E D440                       		add.w	d0,d2
0001F230 D641                       		add.w	d1,d3
0001F232 4E75                       		rts
0001F234                            ; End of function sub_182D2
0001F234                            
0001F234                            ; ---------------------------------------------------------------------------
0001F234 0F                         unk_182E8:	dc.b  $F		; DATA XREF: ROM:00018204o
0001F235                            					; ROM:00018296o
0001F235 00                         		dc.b   0
0001F236 0F                         		dc.b  $F
0001F237 03                         		dc.b   3
0001F238 0E                         		dc.b  $E
0001F239 06                         		dc.b   6
0001F23A 0D                         		dc.b  $D
0001F23B 08                         		dc.b   8
0001F23C 0B                         		dc.b  $B
0001F23D 0B                         		dc.b  $B
0001F23E 08                         		dc.b   8
0001F23F 0D                         		dc.b  $D
0001F240 06                         		dc.b   6
0001F241 0E                         		dc.b  $E
0001F242 03                         		dc.b   3
0001F243 0F                         		dc.b  $F
0001F244 00                         		dc.b   0
0001F245 10                         		dc.b $10
0001F246 FC                         		dc.b $FC ; u
0001F247 0F                         		dc.b  $F
0001F248 F9                         		dc.b $F9 ; u
0001F249 0E                         		dc.b  $E
0001F24A F7                         		dc.b $F7 ; ?
0001F24B 0D                         		dc.b  $D
0001F24C F4                         		dc.b $F4 ; o
0001F24D 0B                         		dc.b  $B
0001F24E F2                         		dc.b $F2 ; o
0001F24F 08                         		dc.b   8
0001F250 F1                         		dc.b $F1 ; n
0001F251 06                         		dc.b   6
0001F252 F0                         		dc.b $F0 ; ?
0001F253 03                         		dc.b   3
0001F254 F0                         		dc.b $F0 ; ?
0001F255 00                         		dc.b   0
0001F256 F0                         		dc.b $F0 ; ?
0001F257 FC                         		dc.b $FC ; u
0001F258 F1                         		dc.b $F1 ; n
0001F259 F9                         		dc.b $F9 ; u
0001F25A F2                         		dc.b $F2 ; o
0001F25B F7                         		dc.b $F7 ; ?
0001F25C F4                         		dc.b $F4 ; o
0001F25D F4                         		dc.b $F4 ; o
0001F25E F7                         		dc.b $F7 ; ?
0001F25F F2                         		dc.b $F2 ; o
0001F260 F9                         		dc.b $F9 ; u
0001F261 F1                         		dc.b $F1 ; n
0001F262 FC                         		dc.b $FC ; u
0001F263 F0                         		dc.b $F0 ; ?
0001F264 FF                         		dc.b $FF
0001F265 F0                         		dc.b $F0 ; ?
0001F266 03                         		dc.b   3
0001F267 F0                         		dc.b $F0 ; ?
0001F268 06                         		dc.b   6
0001F269 F1                         		dc.b $F1 ; n
0001F26A 08                         		dc.b   8
0001F26B F2                         		dc.b $F2 ; o
0001F26C 0B                         		dc.b  $B
0001F26D F4                         		dc.b $F4 ; o
0001F26E 0D                         		dc.b  $D
0001F26F F7                         		dc.b $F7 ; ?
0001F270 0E                         		dc.b  $E
0001F271 F9                         		dc.b $F9 ; u
0001F272 0F                         		dc.b  $F
0001F273 FC                         		dc.b $FC ; u
0001F274 08                         unk_18328:	dc.b   8		; DATA XREF: ROM:000181E4o
0001F275 05                         		dc.b   5
0001F276 07                         		dc.b   7
0001F277 06                         		dc.b   6
0001F278 06                         		dc.b   6
0001F279 07                         		dc.b   7
0001F27A 05                         		dc.b   5
0001F27B 08                         		dc.b   8
0001F27C 06                         		dc.b   6
0001F27D 07                         		dc.b   7
0001F27E 07                         		dc.b   7
0001F27F 06                         		dc.b   6
0001F280 FF                         		dc.b $FF
0001F281 08                         unk_18335:	dc.b   8		; DATA XREF: ROM:00018158o
0001F282 07                         		dc.b   7
0001F283 06                         		dc.b   6
0001F284 05                         		dc.b   5
0001F285 04                         		dc.b   4
0001F286 03                         		dc.b   3
0001F287 04                         		dc.b   4
0001F288 05                         		dc.b   5
0001F289 06                         		dc.b   6
0001F28A 07                         		dc.b   7
0001F28B FF                         		dc.b $FF
0001F28C 03                         		dc.b   3
0001F28D 04                         		dc.b   4
0001F28E 05                         		dc.b   5
0001F28F 06                         		dc.b   6
0001F290 07                         		dc.b   7
0001F291 08                         		dc.b   8
0001F292 07                         		dc.b   7
0001F293 06                         		dc.b   6
0001F294 05                         		dc.b   5
0001F295 04                         		dc.b   4
0001F296 08                         unk_1834A:	dc.b   8		; DATA XREF: ROM:0001815Eo
0001F297 07                         		dc.b   7
0001F298 06                         		dc.b   6
0001F299 05                         		dc.b   5
0001F29A 04                         		dc.b   4
0001F29B 03                         		dc.b   3
0001F29C 02                         		dc.b   2
0001F29D 03                         		dc.b   3
0001F29E 04                         		dc.b   4
0001F29F 05                         		dc.b   5
0001F2A0 06                         		dc.b   6
0001F2A1 07                         		dc.b   7
0001F2A2 FF                         		dc.b $FF
0001F2A3 02                         		dc.b   2
0001F2A4 03                         		dc.b   3
0001F2A5 04                         		dc.b   4
0001F2A6 05                         		dc.b   5
0001F2A7 06                         		dc.b   6
0001F2A8 07                         		dc.b   7
0001F2A9 08                         		dc.b   8
0001F2AA 07                         		dc.b   7
0001F2AB 06                         		dc.b   6
0001F2AC 05                         		dc.b   5
0001F2AD 04                         		dc.b   4
0001F2AE 03                         		dc.b   3
0001F2AF 07                         unk_18363:	dc.b   7		; DATA XREF: ROM:00018164o
0001F2B0 06                         		dc.b   6
0001F2B1 05                         		dc.b   5
0001F2B2 04                         		dc.b   4
0001F2B3 03                         		dc.b   3
0001F2B4 02                         		dc.b   2
0001F2B5 01                         		dc.b   1
0001F2B6 02                         		dc.b   2
0001F2B7 03                         		dc.b   3
0001F2B8 04                         		dc.b   4
0001F2B9 05                         		dc.b   5
0001F2BA 06                         		dc.b   6
0001F2BB FF                         		dc.b $FF
0001F2BC 01                         		dc.b   1
0001F2BD 02                         		dc.b   2
0001F2BE 03                         		dc.b   3
0001F2BF 04                         		dc.b   4
0001F2C0 05                         		dc.b   5
0001F2C1 06                         		dc.b   6
0001F2C2 07                         		dc.b   7
0001F2C3 06                         		dc.b   6
0001F2C4 05                         		dc.b   5
0001F2C5 04                         		dc.b   4
0001F2C6 03                         		dc.b   3
0001F2C7 02                         		dc.b   2
0001F2C8 00                         		dc.b   0
0001F2C9 02                         		dc.b   2
0001F2CA 00                         		dc.b   0
0001F2CB 05                         		dc.b   5
0001F2CC 00                         		dc.b   0
0001F2CD 05                         		dc.b   5
0001F2CE 01                         		dc.b   1
0001F2CF 05                         		dc.b   5
0001F2D0 02                         		dc.b   2
0001F2D1 05                         		dc.b   5
0001F2D2 03                         		dc.b   3
0001F2D3 05                         		dc.b   5
0001F2D4 04                         		dc.b   4
0001F2D5 FF                         		dc.b $FF
0001F2D6                            ; ---------------------------------------------------------------------------
0001F2D6                            ; Object 4A - special stage entry from beta
0001F2D6                            ; ---------------------------------------------------------------------------
0001F2D6                            
0001F2D6                            Obj4A:					; XREF: Obj_Index
0001F2D6 7000                       		moveq	#0,d0
0001F2D8 1028 0024                  		move.b	routine(a0),d0
0001F2DC 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001F2E0 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001F2E4                            ; ===========================================================================
0001F2E4 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001F2E6 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001F2E8 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001F2EA                            ; ===========================================================================
0001F2EA                            
0001F2EA                            Obj4A_Main:				; XREF: Obj4A_Index
0001F2EA 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001F2EE 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001F2F0 4E75                       		rts	
0001F2F2                            ; ===========================================================================
0001F2F2                            
0001F2F2                            Obj4A_Main2:
0001F2F2 5428 0024                  		addq.b	#2,routine(a0)
0001F2F6 217C 0000 0000 0004        		move.l	#Map_Rocket,4(a0)
0001F2FE 117C 0004 0001             		move.b	#4,1(a0)
0001F304 317C 0080 0018             		move.w	#$80,priority(a0)
0001F30A 117C 0038 0023             		move.b	#$38,width_pixels(a0)
0001F310 317C 0541 0002             		move.w	#$541,2(a0)
0001F316 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001F31C                            
0001F31C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001F31C                            ;		move.w	($FFFFD008).w,8(a0)
0001F31C                            ;		move.w	($FFFFD00C).w,$C(a0)
0001F31C                            ;		move.b	($FFFFD022).w,status(a0)
0001F31C                            ;		lea	(Ani_obj4A).l,a1
0001F31C                            ;		jsr	AnimateSprite
0001F31C 117C 0001 001A             		move.b	#1,mapping_frame(a0)
0001F322                            ;		bne.s	Obj4A_Display
0001F322                            ;		tst.b	($FFFFD000).w
0001F322                            ;		beq.s	Obj4A_Display
0001F322                            ;		move.b	#0,($FFFFD000).w ; remove Sonic
0001F322 303C 006A                  		move.w	#$6A,d0
0001F326 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001F32C                            
0001F32C                            Obj4A_Display:
0001F32C 4EF9 0001 5D72             		jmp	DisplaySprite
0001F332                            ; ===========================================================================
0001F332                            
0001F332                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001F332                            ;		subq.w	#1,$30(a0)	; subtract 1 from time
0001F332                            ;		bne.s	Obj4A_Wait	; if time remains, branch
0001F332                            ;		move.b	#1,($FFFFD000).w ; load	Sonic object
0001F332 4EF9 0001 5D26             		jmp	DeleteObject
0001F338                            ; ===========================================================================
0001F338                            
0001F338                            Obj4A_Wait:
0001F338 4E75                       		rts	
0001F33A                            ; ===========================================================================
0001F33A                            ; ---------------------------------------------------------------------------
0001F33A                            ; Object 02 - Blank
0001F33A                            ; ---------------------------------------------------------------------------
0001F33A                            Obj04:
0001F33A 0828 0006 0001             	btst	#6,render_flags(a0)	; is this a child sprite object?
0001F340 6600 0000                  	bne.w	dispchild			; if yes, branch
0001F344 4A78 D130                  	tst.w	($FFFFD130).w ; has title card sequence finished?
0001F348 6600 0000                  	bne.w	return_13684	; if not, branch
0001F34C 4A78 D5C0                  	tst.w	($FFFFD5C0).w
0001F350 6600 0000                  	bne.w	return_13684
0001F354 223C 0000 0000             	move.l	#Unc_PauseMenu,d1			        ; Call for Regular Shield Art
0001F35A 343C BC80                  	move.w	#$BC80,d2			        ; Load Art from this location (VRAM location*20)
0001F35E                            								; In this case, VRAM = $541*20
0001F35E 363C 0100                  	move.w	#$100,d3
0001F362 4EB9 0000 34FC             	jsr	(QueueDMATransfer).l
0001F368                            Obj04_Obj:
0001F368 7000                       	moveq	#0,d0
0001F36A 1028 0024                  	move.b	routine(a0),d0
0001F36E 323B 0000                  	move.w	Obj8F_States(pc,d0.w),d1
0001F372 4EBB 1000                  	jsr	Obj8F_States(pc,d1.w)
0001F376 4EF9 0001 5D72             	jmp	DisplaySprite
0001F37C                            dispchild:	
0001F37C 303C 0180                  	move.w	#$180,d0
0001F380 4EF9 0001 5D9E             	jmp	DisplaySprite3
0001F386                            ; ===========================================================================
0001F386                            ; off_13612:
0001F386                            Obj8F_States:
0001F386 0000                       	dc.w Obj8F_Init-Obj8F_States	; 0
0001F388 0000                       	dc.w Obj8F_Main-Obj8F_States	; 2
0001F38A                            ; ===========================================================================
0001F38A                            ; loc_13616:
0001F38A                            Obj8F_Init:
0001F38A 10BC 0004                  	move.b 	#4,(a0)	
0001F38E 5428 0024                  	addq.b	#2,routine(a0) ; => Obj0F_Main
0001F392 317C 0100 0008             	move.w	#$100,8(a0)
0001F398 317C 0150 000A             	move.w	#$150,$A(a0)
0001F39E 217C 0000 0000 0004        	move.l	#Map_PauseMenu,mappings(a0)
0001F3A6 317C 05E4 0002             	move.w	#$5E4,art_tile(a0)
0001F3AC 4EB8 32E8                  	jsr	LoadSpriteList
0001F3B0                            ;	move.b	#0,priority(a0)
0001F3B0 117C 0080 0001             	move.b	#$80,1(a0)
0001F3B6 117C 0000 0018             	move.b	#0,priority(a0)
0001F3BC 0238 0001 FFBA             	andi.b	#1,($FFFFFFBA).w
0001F3C2 1178 FFBA 001A             	move.b	($FFFFFFBA).w,mapping_frame(a0)
0001F3C8                            
0001F3C8                            Obj8F_Animate:
0001F3C8 43F9 0001 2740             	lea	(Ani_obj0F).l,a1
0001F3CE 4EB9 0001 2754             	jsr	AnimateSprite
0001F3D4                            ;	jmp	DisplaySprite
0001F3D4                            ; loc_13644:
0001F3D4                            Obj8F_Main:
0001F3D4 7400                       	moveq	#0,d2
0001F3D6 1438 FFBA                  	move.b	($FFFFFFBA).w,d2
0001F3DA 1038 F605                  	move.b	(Ctrl_1_Press).w,d0
0001F3DE                            ;	or.b	(Ctrl_2_Press).w,d0
0001F3DE 0800 0000                  	btst	#0,d0
0001F3E2 6700                       	beq.s	Branch1
0001F3E4 5302                       	subq.b	#1,d2
0001F3E6 6400                       	bcc.s	Branch1
0001F3E8 143C 0002                  	move.b	#2,d2
0001F3EC                            Branch1:
0001F3EC 0800 0001                  	btst	#1,d0
0001F3F0 6700                       	beq.s	Branch2
0001F3F2 5202                       	addq.b	#1,d2
0001F3F4 0C02 0003                  	cmpi.b	#3,d2
0001F3F8 6500                       	bcs.s	Branch2
0001F3FA 7400                       	moveq	#0,d2
0001F3FC                            Branch2:
0001F3FC 1142 001A                  	move.b	d2,mapping_frame(a0)
0001F400 11C2 FFBA                  	move.b	d2,($FFFFFFBA).w
0001F404                            ;	andi.b	#3,d0
0001F404                            ;	beq.s	return_13684
0001F404                            ;	moveq	#$4D+$80,d0 ; selection blip sound
0001F404                            ;	jsr	Jmpto_PlaySound_Special
0001F404                            
0001F404                            return_13684:
0001F404 4E75                       	rts
0001F406                            
0001F406                            
0001F406                            	
0001F406                            Map_PauseMenu:
0001F406                            	include	"_maps\PauseMenuModMap.asm"
0001F406                            ; --------------------------------------------------------------------------------
0001F406                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F406                            ; --------------------------------------------------------------------------------
0001F406                            
0001F406                            SME_pVhg0:	
0001F406 0000 0000                  		dc.w SME_pVhg0_6-SME_pVhg0, SME_pVhg0_15B-SME_pVhg0	
0001F40A 0000                       		dc.w SME_pVhg0_2B0-SME_pVhg0	
0001F40C 44                         SME_pVhg0_6:	dc.b $44	
0001F40D 9000 A001 08               		dc.b $90, 0, $A0, 1, 8	
0001F412 9000 A005 10               		dc.b $90, 0, $A0, 5, $10	
0001F417 9000 A004 18               		dc.b $90, 0, $A0, 4, $18	
0001F41C 9000 A008 20               		dc.b $90, 0, $A0, 8, $20	
0001F421 9000 A009 38               		dc.b $90, 0, $A0, 9, $38	
0001F426 9000 A002 40               		dc.b $90, 0, $A0, 2, $40	
0001F42B 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001F430 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001F435 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001F43A 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001F43F 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001F444 A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001F449 A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001F44E A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001F453 A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001F458 9000 800B F8               		dc.b $90, 0, $80, $B, $F8	
0001F45D 9004 A003 28               		dc.b $90, 4, $A0, 3, $28	
0001F462 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001F467 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001F46C 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001F471 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001F476 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001F47B A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001F480 A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001F485 A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001F48A A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001F48F A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001F494 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001F499 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001F49E A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001F4A3 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001F4A8 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001F4AD A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001F4B2 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001F4B7 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001F4BC 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001F4C1 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001F4C6 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001F4CB 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001F4D0 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001F4D5 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001F4DA 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001F4DF 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001F4E4 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001F4E9 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001F4EE 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001F4F3 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001F4F8 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001F4FD 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001F502 A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001F507 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001F50C 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F511 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F516 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F51B 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F520 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F525 A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F52A 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F52F 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F534 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F539 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F53E A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F543 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F548 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F54D A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F552 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F557 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F55C A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F561 44                         SME_pVhg0_15B:	dc.b $44	
0001F562 9800 800B F8               		dc.b $98, 0, $80, $B, $F8	
0001F567 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001F56C 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001F571 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001F576 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001F57B 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001F580 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001F585 9800 A006 08               		dc.b $98, 0, $A0, 6, 8	
0001F58A 9800 A002 10               		dc.b $98, 0, $A0, 2, $10	
0001F58F 9800 A000 28               		dc.b $98, 0, $A0, 0, $28	
0001F594 9800 A006 30               		dc.b $98, 0, $A0, 6, $30	
0001F599 9800 A008 38               		dc.b $98, 0, $A0, 8, $38	
0001F59E A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001F5A3 A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001F5A8 A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001F5AD A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001F5B2 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001F5B7 9804 A007 18               		dc.b $98, 4, $A0, 7, $18	
0001F5BC 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001F5C1 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001F5C6 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001F5CB A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001F5D0 A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001F5D5 A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001F5DA A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001F5DF A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001F5E4 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001F5E9 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001F5EE A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001F5F3 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001F5F8 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001F5FD A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001F602 A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001F607 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001F60C 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001F611 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001F616 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001F61B 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001F620 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001F625 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001F62A 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001F62F 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001F634 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001F639 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001F63E A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001F643 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001F648 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001F64D A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001F652 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001F657 A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001F65C 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001F661 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F666 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F66B A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F670 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F675 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F67A A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F67F 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F684 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F689 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F68E 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F693 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F698 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F69D 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F6A2 A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F6A7 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F6AC 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F6B1 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F6B6 44                         SME_pVhg0_2B0:	dc.b $44	
0001F6B7 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001F6BC 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001F6C1 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001F6C6 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001F6CB 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001F6D0 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001F6D5 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001F6DA 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001F6DF 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001F6E4 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001F6E9 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001F6EE 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001F6F3 A000 800B F8               		dc.b $A0, 0, $80, $B, $F8	
0001F6F8 A000 A00A 08               		dc.b $A0, 0, $A0, $A, 8	
0001F6FD A000 A009 10               		dc.b $A0, 0, $A0, 9, $10	
0001F702 A000 A003 18               		dc.b $A0, 0, $A0, 3, $18	
0001F707 A000 A008 20               		dc.b $A0, 0, $A0, 8, $20	
0001F70C 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001F711 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001F716 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001F71B 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001F720 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001F725 A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001F72A A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001F72F A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001F734 A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001F739 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001F73E A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001F743 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001F748 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001F74D A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001F752 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001F757 A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001F75C 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001F761 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001F766 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001F76B 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001F770 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001F775 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001F77A 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001F77F 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001F784 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001F789 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001F78E 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001F793 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001F798 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001F79D 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001F7A2 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001F7A7 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001F7AC A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001F7B1 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001F7B6 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F7BB 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F7C0 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F7C5 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F7CA 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F7CF A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F7D4 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F7D9 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F7DE 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F7E3 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F7E8 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F7ED 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F7F2 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F7F7 A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F7FC 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F801 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F806 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F80C 00                         		even
0001F80C 00                         		even
0001F80C                            
0001F80C                            ;	rts
0001F80C                            ; END OF FUNCTION CHUNK	FOR sub_33343A
0001F80C                            		
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C                            ; Object 08 - water splash (LZ)
0001F80C                            ; ---------------------------------------------------------------------------
0001F80C                            
0001F80C                            Obj08:					; XREF: Obj_Index
0001F80C 7000                       		moveq	#0,d0
0001F80E 1028 0024                  		move.b	routine(a0),d0
0001F812 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001F816 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001F81A                            ; ===========================================================================
0001F81A 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001F81C 0000                       		dc.w Obj08_Display-Obj08_Index
0001F81E 0000                       		dc.w Obj08_Delete-Obj08_Index
0001F820                            ; ===========================================================================
0001F820                            
0001F820                            Obj08_Main:				; XREF: Obj08_Index
0001F820 5428 0024                  		addq.b	#2,routine(a0)
0001F824 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001F82C 0028 0004 0001             		ori.b	#4,1(a0)
0001F832 317C 0080 0018             		move.w	#$80,priority(a0)
0001F838 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001F83E 317C 4259 0002             		move.w	#$4259,2(a0)
0001F844 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001F84A                            
0001F84A                            Obj08_Display:				; XREF: Obj08_Index
0001F84A 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001F850 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001F856 4EB9 0001 2754             		jsr	AnimateSprite
0001F85C 4EF9 0001 5D72             		jmp	DisplaySprite
0001F862                            ; ===========================================================================
0001F862                            
0001F862                            Obj08_Delete:				; XREF: Obj08_Index
0001F862 4EF9 0001 5D26             		jmp	DeleteObject	; delete when animation	is complete
0001F868                            ; ===========================================================================
0001F868                            Ani_obj38:
0001F868                            	include "_anim\obj38.asm"
0001F868                            ; ---------------------------------------------------------------------------
0001F868                            ; Animation script - shield and invincibility stars
0001F868                            ; ---------------------------------------------------------------------------
0001F868 0000                       		dc.w byte_14356-Ani_obj38
0001F86A 0000                       		dc.w byte_1435E-Ani_obj38
0001F86C 0000                       		dc.w byte_14364-Ani_obj38
0001F86E 0000                       		dc.w byte_1437E-Ani_obj38
0001F870 0000                       		dc.w byte_14398-Ani_obj38
0001F872 0001 0302 0103 02FF        byte_14356:	dc.b 0,	1, 3, 2, 1, 3, 2, $FF
0001F87A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001F880 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001F891 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001F89A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001F8AB 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001F8B4 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001F8C5 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001F8CE                            		even
0001F8CE                            		even
0001F8CE 0000                       Ani_Obj38_Shield:dc.w byte_125C2-Ani_Obj38_Shield ; DATA XREF: ROM:00012448o
0001F8D0                            					; ROM:Ani_Obj38_Shieldo ...
0001F8D0 0000                       		dc.w byte_125CE-Ani_Obj38_Shield
0001F8D2 0000                       		dc.w byte_125D4-Ani_Obj38_Shield
0001F8D4 0000                       		dc.w byte_125EE-Ani_Obj38_Shield
0001F8D6 0000                       		dc.w byte_12608-Ani_Obj38_Shield
0001F8D8 0005 0005 0105 0205 0305+  byte_125C2:	dc.b   0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF; 0
0001F8E4                            					; DATA XREF: ROM:Ani_Obj38_Shieldo
0001F8E4 0504 0506 07FF             byte_125CE:	dc.b   5,  4,  5,  6,  7,$FF; 0	; DATA XREF: ROM:000125BAo
0001F8EA 0004 0400 0404 0005 0500+  byte_125D4:	dc.b   0,  4,  4,  0,  4,  4,  0,  5,  5,  0,  5,  5,  0,  6,  6,  0; 0
0001F8FA                            					; DATA XREF: ROM:000125BCo
0001F8FA 0606 0007 0700 0707 00FF   		dc.b   6,  6,  0,  7,  7,  0,  7,  7,  0,$FF; 16
0001F904 0004 0400 0400 0005 0500+  byte_125EE:	dc.b   0,  4,  4,  0,  4,  0,  0,  5,  5,  0,  5,  0,  0,  6,  6,  0; 0
0001F914                            					; DATA XREF: ROM:000125BEo
0001F914 0600 0007 0700 0700 00FF   		dc.b   6,  0,  0,  7,  7,  0,  7,  0,  0,$FF; 16
0001F91E 0004 0000 0400 0005 0000+  byte_12608:	dc.b   0,  4,  0,  0,  4,  0,  0,  5,  0,  0,  5,  0,  0,  6,  0,  0; 0
0001F92E                            					; DATA XREF: ROM:000125C0o
0001F92E 0600 0007 0000 0700 00FF   		dc.b   6,  0,  0,  7,  0,  0,  7,  0,  0,$FF; 16
0001F938                            
0001F938                            ; ---------------------------------------------------------------------------
0001F938                            ; Sprite mappings - shield and invincibility stars
0001F938                            ; ---------------------------------------------------------------------------
0001F938                            Map_obj38:
0001F938                            	include "_maps\obj38_star.asm"
0001F938                            ; --------------------------------------------------------------------------------
0001F938                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F938                            ; --------------------------------------------------------------------------------
0001F938                            
0001F938                            SME_HtuJ7:	
0001F938 0000 0000                  		dc.w SME_HtuJ7_12-SME_HtuJ7, SME_HtuJ7_13-SME_HtuJ7	
0001F93C 0000 0000                  		dc.w SME_HtuJ7_19-SME_HtuJ7, SME_HtuJ7_1F-SME_HtuJ7	
0001F940 0000 0000                  		dc.w SME_HtuJ7_25-SME_HtuJ7, SME_HtuJ7_2B-SME_HtuJ7	
0001F944 0000 0000                  		dc.w SME_HtuJ7_31-SME_HtuJ7, SME_HtuJ7_37-SME_HtuJ7	
0001F948 0000                       		dc.w SME_HtuJ7_3D-SME_HtuJ7	
0001F94A 00                         SME_HtuJ7_12:	dc.b 0	
0001F94B 01                         SME_HtuJ7_13:	dc.b 1	
0001F94C F801 0000 FC               		dc.b $F8, 1, 0, 0, $FC	
0001F951 01                         SME_HtuJ7_19:	dc.b 1	
0001F952 F801 0002 FC               		dc.b $F8, 1, 0, 2, $FC	
0001F957 01                         SME_HtuJ7_1F:	dc.b 1	
0001F958 F801 0004 FC               		dc.b $F8, 1, 0, 4, $FC	
0001F95D 01                         SME_HtuJ7_25:	dc.b 1	
0001F95E F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0001F963 01                         SME_HtuJ7_2B:	dc.b 1	
0001F964 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0001F969 01                         SME_HtuJ7_31:	dc.b 1	
0001F96A F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0001F96F 01                         SME_HtuJ7_37:	dc.b 1	
0001F970 F805 000E F8               		dc.b $F8, 5, 0, $E, $F8	
0001F975 01                         SME_HtuJ7_3D:	dc.b 1	
0001F976 F00F 0012 F0               		dc.b $F0, $F, 0, $12, $F0	
0001F97C 00                         		even
0001F97C 00                         		even
0001F97C                            	
0001F97C                            Map_obj38_Sheild:
0001F97C                            	include	"_maps\obj38_Sheild.asm"
0001F97C                            ; --------------------------------------------------------------------------------
0001F97C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F97C                            ; --------------------------------------------------------------------------------
0001F97C                            
0001F97C                            SME_nhdJe:	
0001F97C 0000 0000                  		dc.w SME_nhdJe_C-SME_nhdJe, SME_nhdJe_21-SME_nhdJe	
0001F980 0000 0000                  		dc.w SME_nhdJe_36-SME_nhdJe, SME_nhdJe_4B-SME_nhdJe	
0001F984 0000 0000                  		dc.w SME_nhdJe_60-SME_nhdJe, SME_nhdJe_75-SME_nhdJe	
0001F988 04                         SME_nhdJe_C:	dc.b 4	
0001F989 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001F98E F005 0800 00               		dc.b $F0, 5, 8, 0, 0	
0001F993 0005 1000 F0               		dc.b 0, 5, $10, 0, $F0	
0001F998 0005 1800 00               		dc.b 0, 5, $18, 0, 0	
0001F99D 04                         SME_nhdJe_21:	dc.b 4	
0001F99E F005 0004 F0               		dc.b $F0, 5, 0, 4, $F0	
0001F9A3 F005 0804 00               		dc.b $F0, 5, 8, 4, 0	
0001F9A8 0005 1004 F0               		dc.b 0, 5, $10, 4, $F0	
0001F9AD 0005 1804 00               		dc.b 0, 5, $18, 4, 0	
0001F9B2 04                         SME_nhdJe_36:	dc.b 4	
0001F9B3 F005 0008 F0               		dc.b $F0, 5, 0, 8, $F0	
0001F9B8 F005 0808 00               		dc.b $F0, 5, 8, 8, 0	
0001F9BD 0005 1008 F0               		dc.b 0, 5, $10, 8, $F0	
0001F9C2 0005 1808 00               		dc.b 0, 5, $18, 8, 0	
0001F9C7 04                         SME_nhdJe_4B:	dc.b 4	
0001F9C8 F005 000C F0               		dc.b $F0, 5, 0, $C, $F0	
0001F9CD F005 080C 00               		dc.b $F0, 5, 8, $C, 0	
0001F9D2 0005 100C F0               		dc.b 0, 5, $10, $C, $F0	
0001F9D7 0005 180C 00               		dc.b 0, 5, $18, $C, 0	
0001F9DC 04                         SME_nhdJe_60:	dc.b 4	
0001F9DD F005 0010 F0               		dc.b $F0, 5, 0, $10, $F0	
0001F9E2 F005 0810 00               		dc.b $F0, 5, 8, $10, 0	
0001F9E7 0005 1010 F0               		dc.b 0, 5, $10, $10, $F0	
0001F9EC 0005 1810 00               		dc.b 0, 5, $18, $10, 0	
0001F9F1 04                         SME_nhdJe_75:	dc.b 4	
0001F9F2 E80A 0014 E8               		dc.b $E8, $A, 0, $14, $E8	
0001F9F7 000A 1014 E8               		dc.b 0, $A, $10, $14, $E8	
0001F9FC E80A 0814 00               		dc.b $E8, $A, 8, $14, 0	
0001FA01 000A 1814 00               		dc.b 0, $A, $18, $14, 0	
0001FA06                            		even
0001FA06                            		even
0001FA06                            
0001FA06                            
0001FA06                            Ani_obj4A:
0001FA06                            	include "_anim\obj4A.asm"
0001FA06                            ; ---------------------------------------------------------------------------
0001FA06                            ; Animation script - special stage entry effect from beta
0001FA06                            ; ---------------------------------------------------------------------------
0001FA06 0000                       		dc.w byte_14458-Ani_obj4A
0001FA08 2001 FF                    byte_14458:	dc.b  $20, 1,	$FF
0001FA0C 00                         		even
0001FA0C 00                         		even
0001FA0C                            
0001FA0C                            ; ---------------------------------------------------------------------------
0001FA0C                            ; Sprite mappings - special stage entry	from beta
0001FA0C                            ; ---------------------------------------------------------------------------
0001FA0C                            Map_obj4A:
0001FA0C                            	include "_maps\obj4A.asm"
0001FA0C                            ; ---------------------------------------------------------------------------
0001FA0C                            ; Sprite mappings - special stage entry	from beta
0001FA0C                            ; ---------------------------------------------------------------------------
0001FA0C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001FA10 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001FA14 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001FA18 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001FA1C 03                         byte_1447C:	dc.b 3
0001FA1D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001FA22 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001FA27 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001FA2C 03                         byte_1448C:	dc.b 3
0001FA2D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001FA32 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001FA37 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001FA3C 05                         byte_1449C:	dc.b 5
0001FA3D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001FA42 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001FA47 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001FA4C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001FA51 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001FA56 09                         byte_144B6:	dc.b 9
0001FA57 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001FA5C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001FA61 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001FA66 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001FA6B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001FA70 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001FA75 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001FA7A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001FA7F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001FA84 12                         byte_144E4:	dc.b $12
0001FA85 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001FA8A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001FA8F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001FA94 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001FA99 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001FA9E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001FAA3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001FAA8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001FAAD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001FAB2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001FAB7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001FABC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001FAC1 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001FAC6 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001FACB 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001FAD0 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001FAD5 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001FADA F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001FADF 11                         byte_1453F:	dc.b $11
0001FAE0 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001FAE5 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001FAEA 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001FAEF 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001FAF4 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001FAF9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001FAFE 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001FB03 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001FB08 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001FB0D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001FB12 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001FB17 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001FB1C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001FB21 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001FB26 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001FB2B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001FB30 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001FB35 09                         byte_14595:	dc.b 9
0001FB36 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001FB3B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001FB40 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001FB45 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001FB4A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001FB4F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001FB54 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001FB59 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001FB5E 04                         		dc.b 4
0001FB5F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001FB64                            		even
0001FB64                            		even
0001FB64                            	
0001FB64                            Map_Rocket:
0001FB64                            	include "_maps\S4 Rocket.asm"
0001FB64                            ; --------------------------------------------------------------------------------
0001FB64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FB64                            ; --------------------------------------------------------------------------------
0001FB64                            
0001FB64                            SME_UACxw:	
0001FB64 0000                       		dc.w SME_UACxw_2-SME_UACxw	
0001FB66 29                         SME_UACxw_2:	dc.b $29	
0001FB67 300C 0000 D0               		dc.b $30, $C, 0, 0, $D0	
0001FB6C 300C 0004 F0               		dc.b $30, $C, 0, 4, $F0	
0001FB71 3008 0008 10               		dc.b $30, 8, 0, 8, $10	
0001FB76 280C 000B C8               		dc.b $28, $C, 0, $B, $C8	
0001FB7B 280C 000F E8               		dc.b $28, $C, 0, $F, $E8	
0001FB80 280C 0013 08               		dc.b $28, $C, 0, $13, 8	
0001FB85 2804 0017 28               		dc.b $28, 4, 0, $17, $28	
0001FB8A 200C 0019 C8               		dc.b $20, $C, 0, $19, $C8	
0001FB8F 200C 001D E8               		dc.b $20, $C, 0, $1D, $E8	
0001FB94 200C 0021 08               		dc.b $20, $C, 0, $21, 8	
0001FB99 2004 0025 28               		dc.b $20, 4, 0, $25, $28	
0001FB9E 180C 0027 C8               		dc.b $18, $C, 0, $27, $C8	
0001FBA3 180C 002B E8               		dc.b $18, $C, 0, $2B, $E8	
0001FBA8 180C 002F 08               		dc.b $18, $C, 0, $2F, 8	
0001FBAD 1800 0033 28               		dc.b $18, 0, 0, $33, $28	
0001FBB2 100C 0034 D0               		dc.b $10, $C, 0, $34, $D0	
0001FBB7 100C 0038 F0               		dc.b $10, $C, 0, $38, $F0	
0001FBBC 1008 003C 10               		dc.b $10, 8, 0, $3C, $10	
0001FBC1 080C 003F D0               		dc.b 8, $C, 0, $3F, $D0	
0001FBC6 080C 0043 F0               		dc.b 8, $C, 0, $43, $F0	
0001FBCB 0808 0047 10               		dc.b 8, 8, 0, $47, $10	
0001FBD0 000C 004A E0               		dc.b 0, $C, 0, $4A, $E0	
0001FBD5 000C 004E 00               		dc.b 0, $C, 0, $4E, 0	
0001FBDA F80C 0052 D8               		dc.b $F8, $C, 0, $52, $D8	
0001FBDF F80C 0056 F8               		dc.b $F8, $C, 0, $56, $F8	
0001FBE4 F00C 005A E0               		dc.b $F0, $C, 0, $5A, $E0	
0001FBE9 F008 005E 00               		dc.b $F0, 8, 0, $5E, 0	
0001FBEE E80C 0061 E0               		dc.b $E8, $C, 0, $61, $E0	
0001FBF3 E808 0065 00               		dc.b $E8, 8, 0, $65, 0	
0001FBF8 E00C 0068 E0               		dc.b $E0, $C, 0, $68, $E0	
0001FBFD E008 006C 00               		dc.b $E0, 8, 0, $6C, 0	
0001FC02 D80C 006F E0               		dc.b $D8, $C, 0, $6F, $E0	
0001FC07 D808 0073 00               		dc.b $D8, 8, 0, $73, 0	
0001FC0C D00C 0076 E0               		dc.b $D0, $C, 0, $76, $E0	
0001FC11 D008 007A 00               		dc.b $D0, 8, 0, $7A, 0	
0001FC16 C80C 007D E0               		dc.b $C8, $C, 0, $7D, $E0	
0001FC1B C808 0081 00               		dc.b $C8, 8, 0, $81, 0	
0001FC20 C00C 0084 E8               		dc.b $C0, $C, 0, $84, $E8	
0001FC25 C004 0088 08               		dc.b $C0, 4, 0, $88, 8	
0001FC2A B80C 008A F0               		dc.b $B8, $C, 0, $8A, $F0	
0001FC2F B004 008E F8               		dc.b $B0, 4, 0, $8E, $F8	
0001FC34                            		even
0001FC34                            		even
0001FC34                            	even
0001FC34                            
0001FC34                            Ani_obj08:
0001FC34                            	include "_anim\obj08.asm"
0001FC34                            ; ---------------------------------------------------------------------------
0001FC34                            ; Animation script - water splash (LZ)
0001FC34                            ; ---------------------------------------------------------------------------
0001FC34 0000                       		dc.w byte_145C6-Ani_obj08
0001FC36 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001FC3C                            		even
0001FC3C                            		even
0001FC3C                            
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            ; Sprite mappings - water splash (LZ)
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            Map_obj08:
0001FC3C                            	include "_maps\obj08.asm"
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C                            ; Sprite mappings - water splash (LZ)
0001FC3C                            ; ---------------------------------------------------------------------------
0001FC3C 0000                       		dc.w byte_145D2-Map_obj08
0001FC3E 0000                       		dc.w byte_145DD-Map_obj08
0001FC40 0000                       		dc.w byte_145E8-Map_obj08
0001FC42 02                         byte_145D2:	dc.b 2
0001FC43 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001FC48 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001FC4D 02                         byte_145DD:	dc.b 2
0001FC4E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001FC53 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001FC58 01                         byte_145E8:	dc.b 1
0001FC59 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001FC5E                            		even
0001FC5E                            		even
0001FC5E                            ; ---------------------------------------------------------------------------
0001FC5E                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001FC5E                            ; ---------------------------------------------------------------------------
0001FC5E                            
0001FC5E                            Obj03:
0001FC5E 7000                       		moveq	#0,d0
0001FC60 1028 0024                  		move.b	$24(a0),d0
0001FC64 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001FC68 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001FC6C 4EFA 9578                  		jmp	MarkObjGone3
0001FC70                            ; ===========================================================================
0001FC70                            ; ---------------------------------------------------------------------------
0001FC70 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001FC72 0000                       		dc.w Obj03_MainX-Obj03_Index
0001FC74 0000                       		dc.w Obj03_MainY-Obj03_Index
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            ; ===========================================================================
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            ; Initiation
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            
0001FC76                            Obj03_Init:
0001FC76 5428 0024                  		addq.b	#2,$24(a0)
0001FC7A 217C 0000 FDFC 0004        		move.l	#Map_Obj19,$04(a0)
0001FC82 317C 27B2 0002             		move.w	#$27B2,$02(a0)
0001FC88 0028 0004 0001             		ori.b	#4,$01(a0)
0001FC8E 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001FC94 317C 0280 0018             		move.w	#$280,priority(a0)
0001FC9A 1028 0028                  		move.b	$28(a0),d0
0001FC9E 0800 0002                  		btst	#2,d0
0001FCA2 6700                       		beq.s	Obj03_Init_CheckX
0001FCA4                            
0001FCA4                            ;Obj03_Init_CheckY:
0001FCA4 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001FCA8 0240 0007                  		andi.w	#7,d0
0001FCAC 1140 001A                  		move.b	d0,$1A(a0)
0001FCB0 0240 0003                  		andi.w	#3,d0
0001FCB4 D040                       		add.w	d0,d0
0001FCB6 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001FCBC 3228 000C                  		move.w	$0C(a0),d1
0001FCC0 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001FCC4 B269 000C                  		cmp.w	$0C(a1),d1
0001FCC8 6400                       		bcc.s	Obj03_Init_Next
0001FCCA 117C 0001 0034             		move.b	#1,$34(a0)
0001FCD0                            Obj03_Init_Next:
0001FCD0                            	;	lea	(Sidekick).w,a1 ; a1=character
0001FCD0                            	;	cmp.w	$0C(a1),d1
0001FCD0                            	;	bcc.s	+
0001FCD0                            	;	move.b	#1,$35(a0)
0001FCD0                            ;+
0001FCD0 6000 0000                  		bra.w	Obj03_MainY
0001FCD4                            ; ===========================================================================
0001FCD4                            word_1FD68:
0001FCD4 0020                       	dc.w  $020
0001FCD6 0040                       	dc.w  $040	; 1
0001FCD8 0080                       	dc.w  $080	; 2
0001FCDA 0100                       	dc.w  $100	; 3
0001FCDC                            ; ===========================================================================
0001FCDC                            ; loc_1FD70:
0001FCDC                            Obj03_Init_CheckX:
0001FCDC 0240 0003                  		andi.w	#3,d0
0001FCE0 1140 001A                  		move.b	d0,$1A(a0)
0001FCE4 D040                       		add.w	d0,d0
0001FCE6 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001FCEC 3228 0008                  		move.w	$08(a0),d1
0001FCF0 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001FCF4 B269 0008                  		cmp.w	$08(a1),d1
0001FCF8 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001FCFA 117C 0001 0034             		move.b	#1,$34(a0)
0001FD00                            Obj03_Init_CheckX_Next:
0001FD00                            	;	lea	(Sidekick).w,a1 ; a1=character
0001FD00                            	;	cmp.w	$08(a1),d1
0001FD00                            	;	bcc.s	+
0001FD00                            	;	move.b	#1,$35(a0)
0001FD00                            ;+
0001FD00                            
0001FD00                            Obj03_MainX:
0001FD00 4A78 FE08                  		tst.w	($FFFFFE08).w
0001FD04 6600 0000                  		bne.w	return_1FEAC
0001FD08 3228 0008                  		move.w	$08(a0),d1
0001FD0C 45E8 0034                  		lea	$34(a0),a2
0001FD10 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001FD14                            ;		bsr.s	+
0001FD14                            ;		lea	(Sidekick).w,a1 ; a1=character
0001FD14                            
0001FD14                            ;+
0001FD14 4A1A                       		tst.b	(a2)+
0001FD16 6600                       		bne.s	Obj03_MainX_Alt
0001FD18 B269 0008                  		cmp.w	$08(a1),d1
0001FD1C 6200 0000                  		bhi.w	return_1FEAC
0001FD20 157C 0001 FFFF             		move.b	#1,-1(a2)
0001FD26 3428 000C                  		move.w	$0C(a0),d2
0001FD2A 3602                       		move.w	d2,d3
0001FD2C 3828 0032                  		move.w	$32(a0),d4
0001FD30 9444                       		sub.w	d4,d2
0001FD32 D644                       		add.w	d4,d3
0001FD34 3829 000C                  		move.w	$0C(a1),d4
0001FD38 B842                       		cmp.w	d2,d4
0001FD3A 6D00 0000                  		blt.w	return_1FEAC
0001FD3E B843                       		cmp.w	d3,d4
0001FD40 6C00 0000                  		bge.w	return_1FEAC
0001FD44 1028 0028                  		move.b	$28(a0),d0
0001FD48 6A00                       		bpl.s	Obj03_ICX_B1
0001FD4A 0829 0001 002B             		btst	#1,$2B(a1)
0001FD50 6600 0000                  		bne.w	return_1FEAC
0001FD54                            
0001FD54                            Obj03_ICX_B1:
0001FD54 0828 0000 0001             		btst	#0,$01(a0)
0001FD5A 6600                       		bne.s	Obj03_ICX_B2
0001FD5C 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001FD62                            	;	move.b	#$C,$3E(a1)
0001FD62                            	;	move.b	#$D,$3F(a1)
0001FD62 0800 0003                  		btst	#3,d0
0001FD66 6700                       		beq.s	Obj03_ICX_B2
0001FD68 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001FD6E                            	;	move.b	#$E,$3E(a1)
0001FD6E                            	;	move.b	#$F,$3F(a1)
0001FD6E                            
0001FD6E                            Obj03_ICX_B2:
0001FD6E 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001FD74 0800 0005                  		btst	#5,d0
0001FD78 6700                       		beq.s	return_1FEAC
0001FD7A 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001FD80 6000                       		bra.s	return_1FEAC
0001FD82                            ; ===========================================================================
0001FD82                            
0001FD82                            Obj03_MainX_Alt:
0001FD82 B269 0008                  		cmp.w	$08(a1),d1
0001FD86 6300 0000                  		bls.w	return_1FEAC
0001FD8A 157C 0000 FFFF             		move.b	#0,-1(a2)
0001FD90 3428 000C                  		move.w	$0C(a0),d2
0001FD94 3602                       		move.w	d2,d3
0001FD96 3828 0032                  		move.w	$32(a0),d4
0001FD9A 9444                       		sub.w	d4,d2
0001FD9C D644                       		add.w	d4,d3
0001FD9E 3829 000C                  		move.w	$0C(a1),d4
0001FDA2 B842                       		cmp.w	d2,d4
0001FDA4 6D00 0000                  		blt.w	return_1FEAC
0001FDA8 B843                       		cmp.w	d3,d4
0001FDAA 6C00 0000                  		bge.w	return_1FEAC
0001FDAE 1028 0028                  		move.b	$28(a0),d0
0001FDB2 6A00                       		bpl.s	Obj03_MXA_B1
0001FDB4 0829 0001 002B             		btst	#1,$2B(a1)
0001FDBA 6600 0000                  		bne.w	return_1FEAC
0001FDBE                            
0001FDBE                            Obj03_MXA_B1:
0001FDBE 0828 0000 0001             		btst	#0,$01(a0)
0001FDC4 6600                       		bne.s	Obj03_MXA_B2
0001FDC6 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001FDCC                            	;	move.b	#$C,$3E(a1)
0001FDCC                            	;	move.b	#$D,$3F(a1)
0001FDCC 0800 0004                  		btst	#4,d0
0001FDD0 6700                       		beq.s	Obj03_MXA_B2
0001FDD2 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001FDD8                            	;	move.b	#$E,$3E(a1)
0001FDD8                            	;	move.b	#$F,$3F(a1)
0001FDD8                            
0001FDD8                            Obj03_MXA_B2:
0001FDD8 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001FDDE 0800 0006                  		btst	#6,d0
0001FDE2 6700                       		beq.s	return_1FEAC
0001FDE4 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001FDEA                            
0001FDEA                            return_1FEAC:
0001FDEA 4E75                       		rts
0001FDEC                            
0001FDEC                            ; ===========================================================================
0001FDEC                            
0001FDEC                            Obj03_MainY:
0001FDEC 4A78 FE08                  		tst.w	($FFFFFE08).w
0001FDF0 6600 0000                  		bne.w	return_1FFB6
0001FDF4 3228 000C                  		move.w	$0C(a0),d1
0001FDF8 45E8 0034                  		lea	$34(a0),a2
0001FDFC 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001FE00                            ;		bsr.s	+
0001FE00                            ;		lea	(Sidekick).w,a1 ; a1=character
0001FE00                            
0001FE00                            ;+
0001FE00 4A1A                       		tst.b	(a2)+
0001FE02 6600                       		bne.s	Obj03_MainY_Alt
0001FE04 B269 000C                  		cmp.w	$0C(a1),d1
0001FE08 6200 0000                  		bhi.w	return_1FFB6
0001FE0C 157C 0001 FFFF             		move.b	#1,-1(a2)
0001FE12 3428 0008                  		move.w	$08(a0),d2
0001FE16 3602                       		move.w	d2,d3
0001FE18 3828 0032                  		move.w	$32(a0),d4
0001FE1C 9444                       		sub.w	d4,d2
0001FE1E D644                       		add.w	d4,d3
0001FE20 3829 0008                  		move.w	$08(a1),d4
0001FE24 B842                       		cmp.w	d2,d4
0001FE26 6D00 0000                  		blt.w	return_1FFB6
0001FE2A B843                       		cmp.w	d3,d4
0001FE2C 6C00 0000                  		bge.w	return_1FFB6
0001FE30 1028 0028                  		move.b	$28(a0),d0
0001FE34 6A00                       		bpl.s	Obj03_MY_B1
0001FE36 0829 0001 002B             		btst	#1,$2B(a1)
0001FE3C 6600 0000                  		bne.w	return_1FFB6
0001FE40                            
0001FE40                            Obj03_MY_B1:
0001FE40 0828 0000 0001             		btst	#0,$01(a0)
0001FE46 6600                       		bne.s	Obj03_MY_B2
0001FE48 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001FE4E                            	;	move.b	#$C,$3E(a1)
0001FE4E                            	;	move.b	#$D,$3F(a1)
0001FE4E 0800 0003                  		btst	#3,d0
0001FE52 6700                       		beq.s	Obj03_MY_B2
0001FE54 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001FE5A                            	;	move.b	#$E,$3E(a1)
0001FE5A                            	;	move.b	#$F,$3F(a1)
0001FE5A                            
0001FE5A                            Obj03_MY_B2:
0001FE5A 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001FE60 0800 0005                  		btst	#5,d0
0001FE64 6700                       		beq.s	return_1FFB6
0001FE66 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001FE6C 6000                       		bra.s	return_1FFB6
0001FE6E                            
0001FE6E                            ; ===========================================================================
0001FE6E                            
0001FE6E                            Obj03_MainY_Alt:
0001FE6E B269 000C                  		cmp.w	$0C(a1),d1
0001FE72 6300 0000                  		bls.w	return_1FFB6
0001FE76 157C 0000 FFFF             		move.b	#0,-1(a2)
0001FE7C 3428 0008                  		move.w	$08(a0),d2
0001FE80 3602                       		move.w	d2,d3
0001FE82 3828 0032                  		move.w	$32(a0),d4
0001FE86 9444                       		sub.w	d4,d2
0001FE88 D644                       		add.w	d4,d3
0001FE8A 3829 0008                  		move.w	$08(a1),d4
0001FE8E B842                       		cmp.w	d2,d4
0001FE90 6D00 0000                  		blt.w	return_1FFB6
0001FE94 B843                       		cmp.w	d3,d4
0001FE96 6C00 0000                  		bge.w	return_1FFB6
0001FE9A 1028 0028                  		move.b	$28(a0),d0
0001FE9E 6A00                       		bpl.s	Obj03_MYA_B1
0001FEA0 0829 0001 002B             		btst	#1,$2B(a1)
0001FEA6 6600 0000                  		bne.w	return_1FFB6
0001FEAA                            
0001FEAA                            Obj03_MYA_B1
0001FEAA 0828 0000 0001             		btst	#0,$01(a0)
0001FEB0 6600                       		bne.s	Obj03_MYA_B2
0001FEB2 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001FEB8                            	;	move.b	#$C,$3E(a1)
0001FEB8                            	;	move.b	#$D,$3F(a1)
0001FEB8 0800 0004                  		btst	#4,d0
0001FEBC 6700                       		beq.s	Obj03_MYA_B2
0001FEBE 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001FEC4                            	;	move.b	#$E,$3E(a1)
0001FEC4                            	;	move.b	#$F,$3F(a1)
0001FEC4                            
0001FEC4                            Obj03_MYA_B2:
0001FEC4 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001FECA 0800 0006                  		btst	#6,d0
0001FECE 6700                       		beq.s	return_1FFB6
0001FED0 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001FED6                            
0001FED6                            return_1FFB6:
0001FED6 4E75                       		rts
0001FED8                            
0001FED8                            ; ===========================================================================
0001FED8                            ; ----------------------------------------------
0001FED8                            ; Object 8E - Super Sonic stars
0001FED8                            ; ----------------------------------------------
0001FED8                            
0001FED8                            Obj8E:						  ; ...
0001FED8 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
0001FEDE 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
0001FEE2                            								; In this case, VRAM = $541*20
0001FEE2 363C 0100                  		move.w	#$100,d3
0001FEE6 4EB9 0000 34FC             		jsr	(QueueDMATransfer).l
0001FEEC 7000                       		moveq	#0,d0
0001FEEE 1028 0024                  		move.b	routine(a0),d0
0001FEF2 323B 0000                  		move.w	Obj8E_States(pc,d0.w),d1
0001FEF6 4EFB 1000                  		jmp	Obj8E_States(pc,d1.w)
0001FEFA                            ; ---------------------------------------------------------------------------
0001FEFA 0000 0000                  Obj8E_States:	dc.w Obj8E_Init-Obj8E_States,Obj8E_Main-Obj8E_States; 0	; ...
0001FEFE                            ; ---------------------------------------------------------------------------
0001FEFE                            
0001FEFE                            Obj8E_Init:					  ; ...
0001FEFE 5428 0024                  		addq.b	#2,routine(a0)
0001FF02 217C 0000 0000 0004        		move.l	#Obj8E_MapUnc_1E1BE,4(a0)
0001FF0A 117C 0004 0001             		move.b	#4,1(a0)
0001FF10 317C 0080 0018             		move.w	#$80,priority(a0)
0001FF16 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001FF1C 317C 055E 0002             		move.w	#$55E,art_tile(a0)
0001FF22                            ;	bsr.w	Adjust2PArtPointer
0001FF22 0838 0007 D002             	btst	#7,(MainCharacter+art_tile).w
0001FF28 6700                       	beq.s	Obj8E_Main
0001FF2A 08E8 0007 0002             	bset	#7,art_tile(a0)
0001FF30                            ; loc_1E138:
0001FF30                            Obj8E_Main:
0001FF30 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001FF34 6700                       	beq.s	JmpTo8_DeleteObject
0001FF36 4A28 0030                  	tst.b	objoff_30(a0)
0001FF3A 6700                       	beq.s	loc_1E188
0001FF3C 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
0001FF40 6A00                       	bpl.s	loc_1E170
0001FF42 117C 0001 001E             	move.b	#1,anim_frame_duration(a0)
0001FF48 5228 001A                  	addq.b	#1,mapping_frame(a0)
0001FF4C 0C28 0006 001A             	cmpi.b	#6,mapping_frame(a0)
0001FF52 6500                       	bcs.s	loc_1E170
0001FF54 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001FF5A 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001FF60 117C 0001 0031             	move.b	#1,objoff_31(a0)
0001FF66 4E75                       	rts
0001FF68                            ; ===========================================================================
0001FF68                            
0001FF68                            loc_1E170:
0001FF68 4A28 0031                  	tst.b	objoff_31(a0)
0001FF6C 6600                       	bne.s	JmpTo6_DisplaySprite
0001FF6E                            
0001FF6E                            loc_1E176:
0001FF6E 3178 D008 0008             	move.w	(MainCharacter+x_pos).w,x_pos(a0)
0001FF74 3178 D00C 000C             	move.w	(MainCharacter+y_pos).w,y_pos(a0)
0001FF7A                            
0001FF7A                            JmpTo6_DisplaySprite: 
0001FF7A 4EF9 0001 5D72             	jmp	DisplaySprite
0001FF80                            ; ===========================================================================
0001FF80                            
0001FF80                            loc_1E188:
0001FF80 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001FF84 6600                       	bne.s	loc_1E1AA
0001FF86 3038 D020                  	move.w	(MainCharacter+inertia).w,d0
0001FF8A 6A00                       	bpl.s	loc_1E196
0001FF8C 4440                       	neg.w	d0
0001FF8E                            
0001FF8E                            loc_1E196:
0001FF8E 0C40 0800                  	cmpi.w	#$800,d0
0001FF92 6500                       	bcs.s	loc_1E1AA
0001FF94 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001FF9A 117C 0001 0030             	move.b	#1,objoff_30(a0)
0001FFA0 60CC                       	bra.s	loc_1E176
0001FFA2                            ; ===========================================================================
0001FFA2                            
0001FFA2                            loc_1E1AA:
0001FFA2 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001FFA8 117C 0000 0031             	move.b	#0,objoff_31(a0)
0001FFAE 4E75                       	rts
0001FFB0                            ; ===========================================================================
0001FFB0                            
0001FFB0                            JmpTo8_DeleteObject:
0001FFB0 4EF9 0001 5D26             	jmp	DeleteObject
0001FFB6                            ; ===========================================================================
0001FFB6                            
0001FFB6                            ; -------------------------------------------------------------------------------
0001FFB6                            ; sprite mappings
0001FFB6                            ; -------------------------------------------------------------------------------
0001FFB6                            ;Obj8F_MapUnc_1E1BE:
0001FFB6                            Obj8E_MapUnc_1E1BE:	include "_maps/obj8F.asm"
0001FFB6                            ; --------------------------------------------------------------------------------
0001FFB6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001FFB6                            ; --------------------------------------------------------------------------------
0001FFB6                            
0001FFB6                            SME_n_qOM:	
0001FFB6 0000 0000                  		dc.w SME_n_qOM_C-SME_n_qOM, SME_n_qOM_21-SME_n_qOM	
0001FFBA 0000 0000                  		dc.w SME_n_qOM_36-SME_n_qOM, SME_n_qOM_4B-SME_n_qOM	
0001FFBE 0000 0000                  		dc.w SME_n_qOM_60-SME_n_qOM, SME_n_qOM_75-SME_n_qOM	
0001FFC2 04                         SME_n_qOM_C:	dc.b 4	
0001FFC3 F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0001FFC8 F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
0001FFCD 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
0001FFD2 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0001FFD7 04                         SME_n_qOM_21:	dc.b 4	
0001FFD8 F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
0001FFDD F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0001FFE2 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
0001FFE7 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
0001FFEC 04                         SME_n_qOM_36:	dc.b 4	
0001FFED E80A 0007 E8               		dc.b $E8, $A, 0, 7, $E8	
0001FFF2 E80A 0807 00               		dc.b $E8, $A, 8, 7, 0	
0001FFF7 000A 1007 E8               		dc.b 0, $A, $10, 7, $E8	
0001FFFC 000A 1807 00               		dc.b 0, $A, $18, 7, 0	
00020001 04                         SME_n_qOM_4B:	dc.b 4	
00020002 F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
00020007 F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0002000C 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
00020011 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
00020016 04                         SME_n_qOM_60:	dc.b 4	
00020017 F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0002001C F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
00020021 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
00020026 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0002002B 00                         SME_n_qOM_75:	dc.b 0	
0002002C                            		even
0002002C                            		even
0002002C                            ; ===========================================================================
0002002C 4E71                       	nop
0002002E                            
0002002E                            ; ---------------------------------------------------------------------------
0002002E                            ; Object 8F - Pause Menu
0002002E                            ; ---------------------------------------------------------------------------
0002002E                             
0002002E                            Obj8F:
0002002E                            ; ----------------------------------------------------------------------------
0002002E                            ; Object 06 - Rotating cylinder in MTZ, twisting spiral pathway in EHZ
0002002E                            ; ----------------------------------------------------------------------------
0002002E                            ; Sprite_214C4:
0002002E                            ;Obj06:
0002002E 7000                       	moveq	#0,d0
00020030 1028 0024                  	move.b	routine(a0),d0
00020034 323B 0000                  	move.w	Obj06_Index(pc,d0.w),d1
00020038 4EBB 1000                  	jsr	Obj06_Index(pc,d1.w)
0002003C 4EF9 0000 0000             	jmp	Obj06_ChkDel
00020042 4E75                       	rts
00020044                            ; ---------------------------------------------------------------------------
00020044                            ; seems to be an optimization to delete the object the instant it goes offscreen
00020044                            ; only in 1-player mode, because it would screw up the other player
00020044                            ; loc_214DA:
00020044                            Obj06_ChkDel:
00020044 3028 0008                  	move.w	x_pos(a0),d0
00020048 0240 FF80                  	andi.w	#$FF80,d0
0002004C 9078 F7DA                  	sub.w	(Camera_X_pos_coarse).w,d0
00020050 0C40 0280                  	cmpi.w	#$280,d0
00020054 6200                       	bhi.s	JmpTo19_DeleteObject
00020056 4E75                       	rts
00020058                            ; ---------------------------------------------------------------------------
00020058                            JmpTo19_DeleteObject
00020058 4EF9 0001 5D26             	jmp	DeleteObject
0002005E                            
0002005E                            ; ===========================================================================
0002005E                            ; off_214F4:
0002005E                            Obj06_Index:
0002005E 0000                       	dc.w Obj06_Init-Obj06_Index		; 0
00020060 0000                       	dc.w Obj06_Spiral-Obj06_Index		; 2
00020062 0000                       	dc.w Obj06_Cylinder-Obj06_Index	; 4
00020064                            
00020064                            ; ===========================================================================
00020064                            ; loc_214FA:
00020064                            Obj06_Init:
00020064 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Spiral
00020068 117C 00D0 0023             	move.b	#$D0,width_pixels(a0)
0002006E 4A28 0028                  	tst.b	subtype(a0)
00020072 6A00                       	bpl.s	Obj06_Spiral
00020074 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Cylinder
00020078 6000 0000                  	bra.w	Obj06_Cylinder
0002007C                            
0002007C                            ; ===========================================================================
0002007C                            ; spiral pathway from EHZ
0002007C                            ; loc_21512:
0002007C                            Obj06_Spiral:
0002007C 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00020080 7C03                       	moveq	#3,d6
00020082                            ;	bsr.s	+
00020082                            ;	lea	(Sidekick).w,a1 ; a1=character
00020082                            ;	addq.b	#1,d6
00020082                            ;+
00020082 0D28 0022                  	btst	d6,status(a0)
00020086 6600 0000                  	bne.w	loc_215C0
0002008A 0829 0001 0022             	btst	#1,status(a1)
00020090 6600 0000                  	bne.w	return_215BE
00020094 0829 0003 0022             	btst	#3,status(a1)
0002009A 6600                       	bne.s	loc_21580
0002009C 3029 0008                  	move.w	x_pos(a1),d0
000200A0 9068 0008                  	sub.w	x_pos(a0),d0
000200A4 4A69 0010                  	tst.w	x_vel(a1)
000200A8 6B00                       	bmi.s	loc_21556
000200AA 0C40 FF40                  	cmpi.w	#-$C0,d0
000200AE 6E00                       	bgt.s	return_215BE
000200B0 0C40 FF30                  	cmpi.w	#-$D0,d0
000200B4 6D00                       	blt.s	return_215BE
000200B6 6000                       	bra.s	loc_21562
000200B8                            ; ---------------------------------------------------------------------------
000200B8                            
000200B8                            loc_21556:
000200B8 0C40 00C0                  	cmpi.w	#$C0,d0
000200BC 6D00                       	blt.s	return_215BE
000200BE 0C40 00D0                  	cmpi.w	#$D0,d0
000200C2 6E00                       	bgt.s	return_215BE
000200C4                            
000200C4                            loc_21562:
000200C4 3229 000C                  	move.w	y_pos(a1),d1
000200C8 9268 000C                  	sub.w	y_pos(a0),d1
000200CC 0441 0010                  	subi.w	#$10,d1
000200D0 0C41 0030                  	cmpi.w	#$30,d1
000200D4 6400                       	bcc.s	return_215BE
000200D6 4A38 F7C8                  	tst.b	($FFFFF7C8).w
000200DA 6600                       	bne.s	return_215BE
000200DC 4EB9 0000 F232             	jsr	loc_74AE
000200E2 4E75                       	rts
000200E4                            ; ---------------------------------------------------------------------------
000200E4                            
000200E4                            loc_21580:
000200E4 3029 0008                  	move.w	x_pos(a1),d0
000200E8 9068 0008                  	sub.w	x_pos(a0),d0
000200EC 4A69 0010                  	tst.w	x_vel(a1)
000200F0 6B00                       	bmi.s	loc_2159C
000200F2 0C40 FF50                  	cmpi.w	#-$B0,d0
000200F6 6E00                       	bgt.s	return_215BE
000200F8 0C40 FF40                  	cmpi.w	#-$C0,d0
000200FC 6D00                       	blt.s	return_215BE
000200FE 6000                       	bra.s	loc_215A8
00020100                            ; ---------------------------------------------------------------------------
00020100                            
00020100                            loc_2159C:
00020100 0C40 00B0                  	cmpi.w	#$B0,d0
00020104 6D00                       	blt.s	return_215BE
00020106 0C40 00C0                  	cmpi.w	#$C0,d0
0002010A 6E00                       	bgt.s	return_215BE
0002010C                            
0002010C                            loc_215A8:
0002010C 3229 000C                  	move.w	y_pos(a1),d1
00020110 9268 000C                  	sub.w	y_pos(a0),d1
00020114 0441 0010                  	subi.w	#$10,d1
00020118 0C41 0030                  	cmpi.w	#$30,d1
0002011C 6400                       	bcc.s	return_215BE
0002011E 4EB9 0000 F232             	jsr	loc_74AE
00020124                            
00020124                            return_215BE:
00020124 4E75                       	rts
00020126                            ; ---------------------------------------------------------------------------
00020126                            
00020126                            loc_215C0:
00020126 3029 0020                  	move.w	inertia(a1),d0
0002012A 6A00                       	bpl.s	loc_215C0_2
0002012C 4440                       	neg.w	d0
0002012E                            loc_215C0_2:
0002012E 0C40 0600                  	cmpi.w	#$600,d0
00020132 6500                       	bcs.s	Obj06_Spiral_CharacterFallsOff
00020134 0829 0001 0022             	btst	#1,status(a1)
0002013A 6600                       	bne.s	Obj06_Spiral_CharacterFallsOff
0002013C 3029 0008                  	move.w	x_pos(a1),d0
00020140 9068 0008                  	sub.w	x_pos(a0),d0
00020144 0640 00D0                  	addi.w	#$D0,d0
00020148 6B00                       	bmi.s	Obj06_Spiral_CharacterFallsOff
0002014A 0C40 01A0                  	cmpi.w	#$1A0,d0
0002014E 6500                       	bcs.s	Obj06_Spiral_MoveCharacter
00020150                            
00020150                            ; loc_215EA:
00020150                            Obj06_Spiral_CharacterFallsOff:
00020150 08A9 0003 0022             	bclr	#3,status(a1)
00020156 0DA8 0022                  	bclr	d6,status(a0)
0002015A 137C 0000 0033             	move.b	#0,flips_remaining(a1)
00020160 137C 0004 0034             	move.b	#4,flip_speed(a1)
00020166 4E75                       	rts
00020168                            
00020168                            ; ---------------------------------------------------------------------------
00020168                            ; loc_21602:
00020168                            Obj06_Spiral_MoveCharacter:
00020168 0829 0003 0022             	btst	#3,status(a1)
0002016E 67B4                       	beq.s	return_215BE
00020170 123B 0000                  	move.b	Obj06_CosineTable(pc,d0.w),d1
00020174 4881                       	ext.w	d1
00020176 3428 000C                  	move.w	y_pos(a0),d2
0002017A D441                       	add.w	d1,d2
0002017C 7200                       	moveq	#0,d1
0002017E 1229 0016                  	move.b	y_radius(a1),d1
00020182 0441 0013                  	subi.w	#$13,d1
00020186 9441                       	sub.w	d1,d2
00020188 3342 000C                  	move.w	d2,y_pos(a1)
0002018C E648                       	lsr.w	#3,d0
0002018E 0240 003F                  	andi.w	#$3F,d0
00020192 137B 0000 0031             	move.b	Obj06_FlipAngleTable(pc,d0.w),flip_angle(a1)
00020198 4E75                       	rts
0002019A                            
0002019A                            ; ===========================================================================
0002019A                            ; byte_21634:
0002019A                            Obj06_FlipAngleTable:
0002019A 0000 0101                  	dc.b	 0,    0,    1,	   1; 4
0002019E 1616 1616                  	dc.b   $16,  $16,  $16,	 $16; 8
000201A2 2C2C 2C2C                  	dc.b   $2C,  $2C,  $2C,	 $2C; 12
000201A6 4242 4242                  	dc.b   $42,  $42,  $42,	 $42; 16
000201AA 5858 5858                  	dc.b   $58,  $58,  $58,	 $58; 20
000201AE 6E6E 6E6E                  	dc.b   $6E,  $6E,  $6E,	 $6E; 24
000201B2 8484 8484                  	dc.b   $84,  $84,  $84,	 $84; 28
000201B6 9A9A 9A9A                  	dc.b   $9A,  $9A,  $9A,	 $9A; 32
000201BA B0B0 B0B0                  	dc.b   $B0,  $B0,  $B0,	 $B0; 36
000201BE C6C6 C6C6                  	dc.b   $C6,  $C6,  $C6,	 $C6; 40
000201C2 DCDC DCDC                  	dc.b   $DC,  $DC,  $DC,	 $DC; 44
000201C6 F2F2 F2F2                  	dc.b   $F2,  $F2,  $F2,	 $F2; 48
000201CA 0101 0000                  	dc.b	 1,    1,    0,	   0; 52
000201CE                            ; byte_21668:
000201CE                            Obj06_CosineTable:
000201CE 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32;  16
000201DE 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31;  32
000201EE 1F1F 1F1F 1F1F 1F1F 1F1F+  	dc.b  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30;  48
000201FE 1E1E 1E1E 1E1E 1D1D 1D1D+  	dc.b  30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 28, 28, 28, 28, 27;  64
0002020E 1B1B 1B1A 1A1A 1919 1918+  	dc.b  27, 27, 27, 26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 22, 22;  80
0002021E 1515 1414 1312 1211 1010+  	dc.b  21, 21, 20, 20, 19, 18, 18, 17, 16, 16, 15, 14, 14, 13, 12, 12;  96
0002022E 0B0A 0A09 0808 0706 0605+  	dc.b  11, 10, 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1; 112
0002023E 00FF FEFE FDFC FCFB FAF9+  	dc.b   0, -1, -2, -2, -3, -4, -4, -5, -6, -7, -7, -8, -9, -9,-10,-10; 128
0002024E F5F5 F4F4 F3F2 F2F1 F1F0+  	dc.b -11,-11,-12,-12,-13,-14,-14,-15,-15,-16,-16,-17,-17,-18,-18,-19; 144
0002025E EDED ECEB EBEA EAE9 E9E8+  	dc.b -19,-19,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-26,-26,-27; 160
0002026E E5E4 E4E4 E3E3 E2E2 E2E1+  	dc.b -27,-28,-28,-28,-29,-29,-30,-30,-30,-31,-31,-31,-32,-32,-32,-33; 176
0002027E DFDF DFDE DEDE DDDD DDDD+  	dc.b -33,-33,-33,-34,-34,-34,-35,-35,-35,-35,-35,-35,-35,-35,-36,-36; 192
0002028E DCDC DCDC DCDC DCDB DBDB+  	dc.b -36,-36,-36,-36,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-37,-37; 208
0002029E DBDB DBDB DBDB DBDB DBDB+  	dc.b -37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37; 224
000202AE DBDB DBDB DCDC DCDC DCDC+  	dc.b -37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-36,-35,-35,-35,-35,-35; 240
000202BE DDDD DDDE DEDE DFDF DFDF+  	dc.b -35,-35,-35,-34,-34,-34,-33,-33,-33,-33,-32,-32,-32,-31,-31,-31; 256
000202CE E2E2 E2E3 E3E4 E4E4 E5E5+  	dc.b -30,-30,-30,-29,-29,-28,-28,-28,-27,-27,-26,-26,-25,-25,-24,-24; 272
000202DE E9E9 EAEA EBEB ECED EDEE+  	dc.b -23,-23,-22,-22,-21,-21,-20,-19,-19,-18,-18,-17,-16,-16,-15,-14; 288
000202EE F2F3 F4F5 F5F6 F7F8 F9F9+  	dc.b -14,-13,-12,-11,-11,-10, -9, -8, -7, -7, -6, -5, -4, -3, -2, -1; 304
000202FE 0001 0203 0405 0607 0808+  	dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 10, 11, 12, 13; 320
0002030E 0D0E 0E0F 0F10 1011 1112+  	dc.b  13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21; 336
0002031E 1516 1617 1718 1818 1919+  	dc.b  21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26; 352
0002032E 1B1B 1B1B 1C1C 1C1C 1C1C+  	dc.b  27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29; 368
0002033E 1D1E 1E1E 1E1E 1E1E 1F1F+  	dc.b  29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31; 384
0002034E 1F1F 2020 2020 2020 2020+  	dc.b  31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 400
0002035E 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 416
0002036E                            
0002036E                            ; ===========================================================================
0002036E                            ; rotating meshed cage from MTZ
0002036E                            ; loc_21808:
0002036E                            Obj06_Cylinder:
0002036E 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00020372 45F8 F7B2                  	lea	($FFFFF7B2).w,a2
00020376 7C03                       	moveq	#3,d6
00020378                            ;	bsr.s	+
00020378                            ;	lea	(Sidekick).w,a1 ; a1=character
00020378                            ;	lea	($FFFFF7B3).w,a2
00020378                            ;	addq.b	#1,d6
00020378                            ;+
00020378 0D28 0022                  	btst	d6,status(a0)
0002037C 6600 0000                  	bne.w	loc_2188C
00020380 3029 0008                  	move.w	x_pos(a1),d0
00020384 9068 0008                  	sub.w	x_pos(a0),d0
00020388 0C40 FF40                  	cmpi.w	#-$C0,d0
0002038C 6D00                       	blt.s	return_2188A
0002038E 0C40 00C0                  	cmpi.w	#$C0,d0
00020392 6C00                       	bge.s	return_2188A
00020394 3028 000C                  	move.w	y_pos(a0),d0
00020398 0640 003C                  	addi.w	#$3C,d0
0002039C 3429 000C                  	move.w	y_pos(a1),d2
000203A0 1229 0016                  	move.b	y_radius(a1),d1
000203A4 4881                       	ext.w	d1
000203A6 D242                       	add.w	d2,d1
000203A8 5841                       	addq.w	#4,d1
000203AA 9041                       	sub.w	d1,d0
000203AC 6200                       	bhi.s	return_2188A
000203AE 0C40 FFF0                  	cmpi.w	#-$10,d0
000203B2 6500                       	bcs.s	return_2188A
000203B4 0C29 0006 0024             	cmpi.b	#6,routine(a1)
000203BA 6400                       	bcc.s	return_2188A
000203BC D440                       	add.w	d0,d2
000203BE 5642                       	addq.w	#3,d2
000203C0 3342 000C                  	move.w	d2,y_pos(a1)
000203C4 137C 0001 0035             	move.b	#1,flip_turned(a1) ; face the other way
000203CA 4EB9 0000 F232             	jsr	loc_74AE
000203D0 337C 0001 001C             	move.w	#1,anim(a1)
000203D6 14BC 0000                  	move.b	#0,(a2)
000203DA 4A69 0020                  	tst.w	inertia(a1)
000203DE 6600                       	bne.s	return_2188A
000203E0 337C 0001 0020             	move.w	#1,inertia(a1)
000203E6                            
000203E6                            return_2188A:
000203E6 4E75                       	rts
000203E8                            ; ===========================================================================
000203E8                            
000203E8                            loc_2188C:
000203E8 0829 0001 0022             	btst	#1,status(a1)
000203EE 6600                       	bne.s	loc_218C6
000203F0 3029 0008                  	move.w	x_pos(a1),d0
000203F4 9068 0008                  	sub.w	x_pos(a0),d0
000203F8 0640 00C0                  	addi.w	#$C0,d0
000203FC 6B00                       	bmi.s	loc_218A8
000203FE 0C40 0180                  	cmpi.w	#$180,d0
00020402 6500                       	bcs.s	loc_218E0
00020404                            
00020404                            loc_218A8:
00020404 08A9 0003 0022             	bclr	#3,status(a1)
0002040A 0DA8 0022                  	bclr	d6,status(a0)
0002040E 137C 0000 0033             	move.b	#0,flips_remaining(a1)
00020414 137C 0004 0034             	move.b	#4,flip_speed(a1)
0002041A 08E9 0001 0022             	bset	#1,status(a1)
00020420 4E75                       	rts
00020422                            ; ---------------------------------------------------------------------------
00020422                            loc_218C6:
00020422 1012                       	move.b	(a2),d0
00020424 0600 0020                  	addi.b	#$20,d0
00020428 0C00 0040                  	cmpi.b	#$40,d0
0002042C 6400                       	bcc.s	loc_218C6_2
0002042E E0E9 0012                  	asr	y_vel(a1)
00020432 60D0                       	bra.s	loc_218A8
00020434                            ; ---------------------------------------------------------------------------
00020434                            loc_218C6_2:
00020434 337C 0000 0012             	move.w	#0,y_vel(a1)
0002043A 60C8                       	bra.s	loc_218A8
0002043C                            ; ===========================================================================
0002043C                            
0002043C                            loc_218E0:
0002043C 0829 0003 0022             	btst	#3,status(a1)
00020442 67A2                       	beq.s	return_2188A
00020444 1012                       	move.b	(a2),d0
00020446 6100 0000                  	bsr.w	JmpTo6_CalcSine
0002044A C3FC 2800                  	muls.w	#$2800,d1
0002044E 4841                       	swap	d1
00020450 3428 000C                  	move.w	y_pos(a0),d2
00020454 D441                       	add.w	d1,d2
00020456 7200                       	moveq	#0,d1
00020458 1229 0016                  	move.b	y_radius(a1),d1
0002045C 0441 0013                  	subi.w	#$13,d1
00020460 9441                       	sub.w	d1,d2
00020462 3342 000C                  	move.w	d2,y_pos(a1)
00020466 1012                       	move.b	(a2),d0
00020468 1340 0031                  	move.b	d0,flip_angle(a1)
0002046C 5812                       	addq.b	#4,(a2)
0002046E 4A69 0020                  	tst.w	inertia(a1)
00020472 6600                       	bne.s	return_2191E
00020474 337C 0001 0020             	move.w	#1,inertia(a1)
0002047A                            
0002047A                            return_2191E:
0002047A 4E75                       	rts
0002047C                            ; ===========================================================================
0002047C                            
0002047C                            JmpTo6_CalcSine
0002047C 4EF9 0000 8F30             	jmp	(CalcSine).l
00020482                            ; ===========================================================================
00020482                            ;	rts
00020482                            ; ---------------------------------------------------------------------------
00020482                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00020482                            ; ---------------------------------------------------------------------------
00020482                            
00020482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020482                            
00020482                            
00020482                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00020482 21F8 FFE2 F796             		move.l	($FFFFFFE2).w,($FFFFF796).w		; MJ: load first collision data location
00020488 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
0002048C 6700                       		beq.s	SAP_First				; MJ: if not, branch
0002048E 21F8 FFE6 F796             		move.l	($FFFFFFE6).w,($FFFFF796).w		; MJ: load second collision data location
00020494                            
00020494                            SAP_First:
00020494 0828 0003 0022             		btst	#3,$22(a0)
0002049A 6700                       		beq.s	loc_14602
0002049C 7000                       		moveq	#0,d0
0002049E 11C0 F768                  		move.b	d0,($FFFFF768).w
000204A2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000204A6 4E75                       		rts	
000204A8                            ; ===========================================================================
000204A8                            
000204A8                            loc_14602:
000204A8 7003                       		moveq	#3,d0
000204AA 11C0 F768                  		move.b	d0,($FFFFF768).w
000204AE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000204B2 1028 0026                  		move.b	$26(a0),d0
000204B6 0600 0020                  		addi.b	#$20,d0
000204BA 6A00                       		bpl.s	loc_14624
000204BC 1028 0026                  		move.b	$26(a0),d0
000204C0 6A00                       		bpl.s	loc_1461E
000204C2 5300                       		subq.b	#1,d0
000204C4                            
000204C4                            loc_1461E:
000204C4 0600 0020                  		addi.b	#$20,d0
000204C8 6000                       		bra.s	loc_14630
000204CA                            ; ===========================================================================
000204CA                            
000204CA                            loc_14624:
000204CA 1028 0026                  		move.b	$26(a0),d0
000204CE 6A00                       		bpl.s	loc_1462C
000204D0 5200                       		addq.b	#1,d0
000204D2                            
000204D2                            loc_1462C:
000204D2 0600 001F                  		addi.b	#$1F,d0
000204D6                            
000204D6                            loc_14630:
000204D6 0200 00C0                  		andi.b	#$C0,d0
000204DA 0C00 0040                  		cmpi.b	#$40,d0
000204DE 6700 0000                  		beq.w	Sonic_WalkVertL
000204E2 0C00 0080                  		cmpi.b	#$80,d0
000204E6 6700 0000                  		beq.w	Sonic_WalkCeiling
000204EA 0C00 00C0                  		cmpi.b	#$C0,d0
000204EE 6700 0000                  		beq.w	Sonic_WalkVertR
000204F2 3428 000C                  		move.w	$C(a0),d2
000204F6 3628 0008                  		move.w	8(a0),d3
000204FA 48A7 3000                  		movem.w d2-d3,-(sp)
000204FE 7000                       		moveq	#0,d0
00020500 1028 0016                  		move.b	$16(a0),d0
00020504 4880                       		ext.w	d0
00020506 D440                       		add.w	d0,d2
00020508 1028 0017                  		move.b	$17(a0),d0
0002050C 4880                       		ext.w	d0
0002050E D640                       		add.w	d0,d3
00020510 49F8 F768                  		lea	($FFFFF768).w,a4
00020514 367C 0010                  		movea.w	#$10,a3
00020518 3C3C 0000                  		move.w	#0,d6					; MJ: set angle?
0002051C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002051E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00020522 4C9F 000C                  		movem.w (sp)+,d2-d3
00020526 3F01                       		move.w	d1,-(sp)
00020528 7000                       		moveq	#0,d0
0002052A 1028 0016                  		move.b	$16(a0),d0
0002052E 4880                       		ext.w	d0
00020530 D440                       		add.w	d0,d2
00020532 1028 0017                  		move.b	$17(a0),d0
00020536 4880                       		ext.w	d0
00020538 4440                       		neg.w	d0
0002053A D640                       		add.w	d0,d3
0002053C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020540 367C 0010                  		movea.w	#$10,a3
00020544 3C3C 0000                  		move.w	#0,d6
00020548 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002054A 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0002054E 301F                       		move.w	(sp)+,d0
00020550 6100 0000                  		bsr.w	Sonic_Angle
00020554 4A41                       		tst.w	d1
00020556 6700                       		beq.s	locret_146BE
00020558 6A00                       		bpl.s	loc_146C0
0002055A 0C41 FFF2                  		cmpi.w	#-$E,d1
0002055E 6D00                       		blt.s	locret_146E6
00020560 D368 000C                  		add.w	d1,$C(a0)
00020564                            
00020564                            locret_146BE:
00020564 4E75                       		rts	
00020566                            ; ===========================================================================
00020566                            
00020566                            loc_146C0:
00020566 1028 0010                  		move.b	x_vel(a0),d0
0002056A 6A00                       		bpl.s	@next1
0002056C 4400                       		neg.b	d0
0002056E                            @next1:
0002056E 5800                       		addq.b	#4,d0
00020570 0C00 000E                  		cmpi.b	#$E,d0
00020574 6500                       		bcs.s	@next2
00020576 103C 000E                  		move.b	#$E,d0
0002057A                            @next2:
0002057A B200                       		cmp.b	d0,d1
0002057C 6E00                       		bgt.s	loc_146CC
0002057E                            
0002057E                            loc_146C6:
0002057E D368 000C                  		add.w	d1,$C(a0)
00020582 4E75                       		rts	
00020584                            ; ===========================================================================
00020584                            
00020584                            loc_146CC:
00020584 4A28 0038                  		tst.b	$38(a0)
00020588 66F4                       		bne.s	loc_146C6
0002058A 08E8 0001 0022             		bset	#1,status(a0)
00020590 08A8 0005 0022             		bclr	#5,status(a0)
00020596 117C 0001 001D             		move.b	#1,next_anim(a0)
0002059C 4E75                       		rts	
0002059E                            ; ===========================================================================
0002059E                            
0002059E                            locret_146E6:
0002059E 4E75                       		rts	
000205A0                            ; End of function Sonic_AnglePos
000205A0                            
000205A0                            ; ===========================================================================
000205A0 2428 0008                  		move.l	8(a0),d2
000205A4 3028 0010                  		move.w	x_vel(a0),d0
000205A8 48C0                       		ext.l	d0
000205AA E180                       		asl.l	#8,d0
000205AC 9480                       		sub.l	d0,d2
000205AE 2142 0008                  		move.l	d2,8(a0)
000205B2 303C 0038                  		move.w	#$38,d0
000205B6 48C0                       		ext.l	d0
000205B8 E180                       		asl.l	#8,d0
000205BA 9680                       		sub.l	d0,d3
000205BC 2143 000C                  		move.l	d3,$C(a0)
000205C0 4E75                       		rts	
000205C2                            ; ===========================================================================
000205C2                            
000205C2                            locret_1470A:
000205C2 4E75                       		rts	
000205C4                            ; ===========================================================================
000205C4 2628 000C                  		move.l	$C(a0),d3
000205C8 3028 0012                  		move.w	y_vel(a0),d0
000205CC 0440 0038                  		subi.w	#$38,d0
000205D0 3140 0012                  		move.w	d0,y_vel(a0)
000205D4 48C0                       		ext.l	d0
000205D6 E180                       		asl.l	#8,d0
000205D8 9680                       		sub.l	d0,d3
000205DA 2143 000C                  		move.l	d3,$C(a0)
000205DE 4E75                       		rts	
000205E0 4E75                       		rts	
000205E2                            ; ===========================================================================
000205E2 2428 0008                  		move.l	8(a0),d2
000205E6 2628 000C                  		move.l	$C(a0),d3
000205EA 3028 0010                  		move.w	x_vel(a0),d0
000205EE 48C0                       		ext.l	d0
000205F0 E180                       		asl.l	#8,d0
000205F2 9480                       		sub.l	d0,d2
000205F4 3028 0012                  		move.w	y_vel(a0),d0
000205F8 48C0                       		ext.l	d0
000205FA E180                       		asl.l	#8,d0
000205FC 9680                       		sub.l	d0,d3
000205FE 2142 0008                  		move.l	d2,8(a0)
00020602 2143 000C                  		move.l	d3,$C(a0)
00020606 4E75                       		rts	
00020608                            
00020608                            ; ---------------------------------------------------------------------------
00020608                            ; Subroutine to	change Sonic"s angle as he walks along the floor
00020608                            ; ---------------------------------------------------------------------------
00020608                            
00020608                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020608                            
00020608                            
00020608                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00020608 1438 F76A                  		move.b	($FFFFF76A).w,d2
0002060C B240                       		cmp.w	d0,d1
0002060E 6F00                       		ble.s	loc_1475E
00020610 1438 F768                  		move.b	($FFFFF768).w,d2
00020614 3200                       		move.w	d0,d1
00020616                            
00020616                            loc_1475E:
00020616 0802 0000                  		btst	#0,d2
0002061A 6600                       		bne.s	loc_1476A
0002061C 1142 0026                  		move.b	d2,$26(a0)
00020620 4E75                       		rts	
00020622                            ; ===========================================================================
00020622                            
00020622                            loc_1476A:
00020622 1428 0026                  		move.b	$26(a0),d2
00020626 0602 0020                  		addi.b	#$20,d2
0002062A 0202 00C0                  		andi.b	#$C0,d2
0002062E 1142 0026                  		move.b	d2,$26(a0)
00020632 4E75                       		rts	
00020634                            ; End of function Sonic_Angle
00020634                            
00020634                            ; ---------------------------------------------------------------------------
00020634                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00020634                            ; ---------------------------------------------------------------------------
00020634                            
00020634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020634                            
00020634                            
00020634                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00020634 3428 000C                  		move.w	$C(a0),d2
00020638 3628 0008                  		move.w	8(a0),d3
0002063C 48A7 3000                  		movem.w d2-d3,-(sp)
00020640 7000                       		moveq	#0,d0
00020642 1028 0017                  		move.b	$17(a0),d0
00020646 4880                       		ext.w	d0
00020648 4440                       		neg.w	d0
0002064A D440                       		add.w	d0,d2
0002064C 1028 0016                  		move.b	$16(a0),d0
00020650 4880                       		ext.w	d0
00020652 D640                       		add.w	d0,d3
00020654 49F8 F768                  		lea	($FFFFF768).w,a4
00020658 367C 0010                  		movea.w	#$10,a3
0002065C 3C3C 0000                  		move.w	#0,d6
00020660 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020662 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00020666 4C9F 000C                  		movem.w (sp)+,d2-d3		
0002066A 3F01                       		move.w	d1,-(sp)
0002066C 7000                       		moveq	#0,d0
0002066E 1028 0017                  		move.b	$17(a0),d0
00020672 4880                       		ext.w	d0
00020674 D440                       		add.w	d0,d2
00020676 1028 0016                  		move.b	$16(a0),d0
0002067A 4880                       		ext.w	d0
0002067C D640                       		add.w	d0,d3
0002067E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020682 367C 0010                  		movea.w	#$10,a3
00020686 3C3C 0000                  		move.w	#0,d6
0002068A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002068C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00020690 301F                       		move.w	(sp)+,d0
00020692 6100 FF74                  		bsr.w	Sonic_Angle
00020696 4A41                       		tst.w	d1
00020698 6700                       		beq.s	locret_147F0
0002069A 6A00                       		bpl.s	loc_147F2
0002069C 0C41 FFF2                  		cmpi.w	#-$E,d1
000206A0 6D00 FF20                  		blt.w	locret_1470A
000206A4 D368 0008                  		add.w	d1,8(a0)
000206A8                            
000206A8                            locret_147F0:
000206A8 4E75                       		rts	
000206AA                            ; ===========================================================================
000206AA                            
000206AA                            loc_147F2:
000206AA 0C41 000E                  		cmpi.w	#$E,d1
000206AE 6E00                       		bgt.s	loc_147FE
000206B0                            
000206B0                            loc_147F8:
000206B0 D368 0008                  		add.w	d1,8(a0)
000206B4 4E75                       		rts	
000206B6                            ; ===========================================================================
000206B6                            
000206B6                            loc_147FE:
000206B6 4A28 0038                  		tst.b	$38(a0)
000206BA 66F4                       		bne.s	loc_147F8
000206BC 08E8 0001 0022             		bset	#1,$22(a0)
000206C2 08A8 0005 0022             		bclr	#5,$22(a0)
000206C8 117C 0001 001D             		move.b	#1,$1D(a0)
000206CE 4E75                       		rts	
000206D0                            ; End of function Sonic_WalkVertR
000206D0                            
000206D0                            ; ---------------------------------------------------------------------------
000206D0                            ; Subroutine allowing Sonic to walk upside-down
000206D0                            ; ---------------------------------------------------------------------------
000206D0                            
000206D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000206D0                            
000206D0                            
000206D0                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000206D0 3428 000C                  		move.w	$C(a0),d2
000206D4 3628 0008                  		move.w	8(a0),d3
000206D8 48A7 3000                  		movem.w d2-d3,-(sp)
000206DC 7000                       		moveq	#0,d0
000206DE 1028 0016                  		move.b	$16(a0),d0
000206E2 4880                       		ext.w	d0
000206E4 9440                       		sub.w	d0,d2
000206E6 0A42 000F                  		eori.w	#$F,d2
000206EA 1028 0017                  		move.b	$17(a0),d0
000206EE 4880                       		ext.w	d0
000206F0 D640                       		add.w	d0,d3
000206F2 49F8 F768                  		lea	($FFFFF768).w,a4
000206F6 367C FFF0                  		movea.w	#-$10,a3
000206FA 3C3C 0800                  		move.w	#$0800,d6
000206FE 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020700 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00020704 4C9F 000C                  		movem.w (sp)+,d2-d3
00020708 3F01                       		move.w	d1,-(sp)
0002070A 7000                       		moveq	#0,d0
0002070C 1028 0016                  		move.b	$16(a0),d0
00020710 4880                       		ext.w	d0
00020712 9440                       		sub.w	d0,d2
00020714 0A42 000F                  		eori.w	#$F,d2
00020718 1028 0017                  		move.b	$17(a0),d0
0002071C 4880                       		ext.w	d0
0002071E 9640                       		sub.w	d0,d3
00020720 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020724 367C FFF0                  		movea.w	#-$10,a3
00020728 3C3C 0800                  		move.w	#$0800,d6
0002072C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002072E 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
00020732 301F                       		move.w	(sp)+,d0
00020734 6100 FED2                  		bsr.w	Sonic_Angle
00020738 4A41                       		tst.w	d1
0002073A 6700                       		beq.s	locret_14892
0002073C 6A00                       		bpl.s	loc_14894
0002073E 0C41 FFF2                  		cmpi.w	#-$E,d1
00020742 6D00 FE5A                  		blt.w	locret_146E6
00020746 9368 000C                  		sub.w	d1,$C(a0)
0002074A                            
0002074A                            locret_14892:
0002074A 4E75                       		rts	
0002074C                            ; ===========================================================================
0002074C                            
0002074C                            loc_14894:
0002074C 0C41 000E                  		cmpi.w	#$E,d1
00020750 6E00                       		bgt.s	loc_148A0
00020752                            
00020752                            loc_1489A:
00020752 9368 000C                  		sub.w	d1,$C(a0)
00020756 4E75                       		rts	
00020758                            ; ===========================================================================
00020758                            
00020758                            loc_148A0:
00020758 4A28 0038                  		tst.b	$38(a0)
0002075C 66F4                       		bne.s	loc_1489A
0002075E 08E8 0001 0022             		bset	#1,$22(a0)
00020764 08A8 0005 0022             		bclr	#5,$22(a0)
0002076A 117C 0001 001D             		move.b	#1,$1D(a0)
00020770 4E75                       		rts	
00020772                            ; End of function Sonic_WalkCeiling
00020772                            
00020772                            ; ---------------------------------------------------------------------------
00020772                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00020772                            ; ---------------------------------------------------------------------------
00020772                            
00020772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020772                            
00020772                            
00020772                            Sonic_WalkVertL:
00020772 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
00020776 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
0002077A 48A7 3000                  		movem.w d2-d3,-(sp)
0002077E 7000                       		moveq	#0,d0					; MJ: clear d0
00020780 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
00020784 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00020786 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
00020788 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
0002078C 4880                       		ext.w	d0					; MJ: set left byte pos or neg
0002078E 9640                       		sub.w	d0,d3					; MJ: subtract from X position
00020790 0A43 000F                  		eori.w	#$F,d3
00020794 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
00020798 367C FFF0                  		movea.w	#-$10,a3
0002079C 3C3C 0400                  		move.w	#$400,d6
000207A0 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000207A2 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000207A6 4C9F 000C                  		movem.w (sp)+,d2-d3
000207AA 3F01                       		move.w	d1,-(sp)
000207AC 7000                       		moveq	#0,d0
000207AE 1028 0017                  		move.b	$17(a0),d0
000207B2 4880                       		ext.w	d0
000207B4 D440                       		add.w	d0,d2
000207B6 1028 0016                  		move.b	$16(a0),d0
000207BA 4880                       		ext.w	d0
000207BC 9640                       		sub.w	d0,d3
000207BE 0A43 000F                  		eori.w	#$F,d3
000207C2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000207C6 367C FFF0                  		movea.w	#-$10,a3
000207CA 3C3C 0400                  		move.w	#$400,d6
000207CE 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000207D0 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000207D4 301F                       		move.w	(sp)+,d0
000207D6 6100 FE30                  		bsr.w	Sonic_Angle
000207DA 4A41                       		tst.w	d1
000207DC 6700                       		beq.s	locret_14934
000207DE 6A00                       		bpl.s	loc_14936
000207E0 0C41 FFF2                  		cmpi.w	#-$E,d1
000207E4 6D00 FDDC                  		blt.w	locret_1470A
000207E8 9368 0008                  		sub.w	d1,8(a0)
000207EC                            
000207EC                            locret_14934:
000207EC 4E75                       		rts	
000207EE                            ; ===========================================================================
000207EE                            
000207EE                            loc_14936:
000207EE 0C41 000E                  		cmpi.w	#$E,d1
000207F2 6E00                       		bgt.s	loc_14942
000207F4                            
000207F4                            loc_1493C:
000207F4 9368 0008                  		sub.w	d1,8(a0)
000207F8 4E75                       		rts	
000207FA                            ; ===========================================================================
000207FA                            
000207FA                            loc_14942:
000207FA 4A28 0038                  		tst.b	$38(a0)
000207FE 66F4                       		bne.s	loc_1493C
00020800 08E8 0001 0022             		bset	#1,$22(a0)
00020806 08A8 0005 0022             		bclr	#5,$22(a0)
0002080C 117C 0001 001D             		move.b	#1,$1D(a0)
00020812 4E75                       		rts	
00020814                            ; End of function Sonic_WalkVertL
00020814                            
00020814                            ; ---------------------------------------------------------------------------
00020814                            ; Subroutine to	find which tile	the object is standing on
00020814                            ; ---------------------------------------------------------------------------
00020814                            
00020814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020814                            
00020814                            
00020814                            Floor_ChkTile:				; XREF: FindFloor; et al
00020814 3002                       		move.w	d2,d0					; MJ: load Y position
00020816 0240 0780                  		andi.w	#$780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
0002081A D040                       		add.w	d0,d0					; MJ: multiply by 2
0002081C 3203                       		move.w	d3,d1					; MJ: load X position
0002081E EE49                       		lsr.w	#7,d1					; MJ: shift to right side
00020820 0241 007F                  		andi.w	#$7F,d1					; MJ: get within 7F
00020824 D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00020826 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00020828 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
0002082C 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
00020830 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
00020834 EE59                       		ror.w	#7,d1					; MJ: ror round to the far left
00020836 E459                       		ror.w	#2,d1					; MJ: ..plus an extra 2 (so it's 80, not 200)
00020838 3002                       		move.w	d2,d0					; MJ: load Y position
0002083A 0240 0070                  		andi.w	#$070,d0				; MJ: keep Y within 80 pixels
0002083E D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00020840 3003                       		move.w	d3,d0					; MJ: load X position
00020842 E648                       		lsr.w	#3,d0					; MJ: divide by 8
00020844 0240 000E                  		andi.w	#$0E,d0					; MJ: keep X within 10 pixels
00020848 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
0002084A                            
0002084A                            loc_14996:
0002084A 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
0002084C 0C28 0006 0024             		cmpi.b  #$06,$24(A0)
00020852 6600                       		bne.s   Player_Not_Death
00020854 0C10 0001                  		cmpi.b  #$01,(A0)          ; Is Sonic
00020858 6600                       		bne.s   Player_Not_Death
0002085A 227C FFFF 0000             		move.l  #$FFFF0000, A1
00020860                            Player_Not_Death:
00020860 4E75                       		rts						; MJ: return
00020862                            ; ===========================================================================
00020862                            
00020862                            loc_1499A:
00020862 0241 007F                  		andi.w	#$7F,d1
00020866 0828 0006 0001             		btst	#6,1(a0)
0002086C 6700                       		beq.s	loc_149B2
0002086E 5241                       		addq.w	#1,d1
00020870 0C41 0029                  		cmpi.w	#$29,d1
00020874 6600                       		bne.s	loc_149B2
00020876 323C 0051                  		move.w	#$51,d1
0002087A                            
0002087A                            loc_149B2:
0002087A EE59                       		ror.w	#7,d1
0002087C E459                       		ror.w	#2,d1
0002087E 3002                       		move.w	d2,d0
00020880 D040                       		add.w	d0,d0
00020882 0240 0070                  		andi.w	#$070,d0
00020886 D240                       		add.w	d0,d1
00020888 3003                       		move.w	d3,d0
0002088A E648                       		lsr.w	#3,d0
0002088C 0240 000E                  		andi.w	#$0E,d0
00020890 D240                       		add.w	d0,d1
00020892 2241                       		movea.l	d1,a1
00020894 4E75                       		rts
00020896                            ; End of function Floor_ChkTile
00020896                            
00020896                            
00020896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020896                            
00020896                            
00020896                            ColisionChkLayer:
00020896 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
0002089A 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
0002089C 3800                       		move.w	d0,d4					; MJ: load block ID to d4
0002089E 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
000208A2 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
000208A6 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
000208A8 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
000208AA                            
000208AA                            CCL_NoChange:
000208AA 4E75                       		rts						; MJ: return
000208AC                            
000208AC                            
000208AC                            FindFloor:
000208AC 6100 FF66                  		bsr.w	Floor_ChkTile
000208B0 3011                       		move.w	(a1),d0
000208B2 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
000208B4 3800                       		move.w	d0,d4
000208B6 0240 03FF                  		andi.w	#$3FF,d0
000208BA 6700                       		beq.s	loc_149DE
000208BC 0B04                       		btst	d5,d4
000208BE 6600                       		bne.s	loc_149EC
000208C0                            
000208C0                            loc_149DE:
000208C0 D44B                       		add.w	a3,d2
000208C2 6100 0000                  		bsr.w	FindFloor2
000208C6 944B                       		sub.w	a3,d2
000208C8 0641 0010                  		addi.w	#$10,d1
000208CC 4E75                       		rts	
000208CE                            ; ===========================================================================
000208CE                            
000208CE                            loc_149EC:
000208CE 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
000208D2 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
000208D6 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
000208DA 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
000208DC 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
000208E2 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
000208E6 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
000208E8 3203                       		move.w	d3,d1					; MJ: load X position
000208EA 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
000208EE 6700                       		beq.s	loc_14A12				; MJ: if not, branch
000208F0 4641                       		not.w	d1					; MJ: reverse bits of the X position
000208F2 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
000208F4                            
000208F4                            loc_14A12:
000208F4 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
000208F8 6700                       		beq.s	loc_14A22				; MJ: if not, branch
000208FA 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
000208FE 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
00020900 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
00020904                            
00020904                            loc_14A22:
00020904 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
00020908 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
0002090A 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
00020910 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
00020914 4880                       		ext.w	d0					; MJ: clear left byte
00020916 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
00020918 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
0002091C 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
0002091E 4440                       		neg.w	d0					; MJ: reverse solid value
00020920                            
00020920                            loc_14A3E:
00020920 4A40                       		tst.w	d0					; MJ: is the solid data null?
00020922 679C                       		beq.s	loc_149DE				; MJ: if so, branch
00020924 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00020926 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
0002092A 6700                       		beq.s	loc_14A66				; MJ: if so, branch
0002092C 3202                       		move.w	d2,d1					; MJ: load Y position
0002092E 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
00020932 D041                       		add.w	d1,d0					; MJ: add to solid value
00020934 323C 000F                  		move.w	#$F,d1					; MJ: set F
00020938 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
0002093A 4E75                       		rts			; d1 = position?	; MJ: return
0002093C                            ; ===========================================================================
0002093C                            
0002093C                            loc_14A5A:
0002093C 3202                       		move.w	d2,d1
0002093E 0241 000F                  		andi.w	#$F,d1
00020942 D041                       		add.w	d1,d0
00020944 6A00 FF7A                  		bpl.w	loc_149DE
00020948                            
00020948                            loc_14A66:
00020948 944B                       		sub.w	a3,d2
0002094A 6100 0000                  		bsr.w	FindFloor2
0002094E D44B                       		add.w	a3,d2
00020950 0441 0010                  		subi.w	#$10,d1
00020954 4E75                       		rts	
00020956                            ; End of function FindFloor
00020956                            
00020956                            
00020956                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020956                            
00020956                            
00020956                            FindFloor2:				; XREF: FindFloor
00020956 6100 FEBC                  		bsr.w	Floor_ChkTile
0002095A 3011                       		move.w	(a1),d0
0002095C 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00020960 3800                       		move.w	d0,d4
00020962 0240 03FF                  		andi.w	#$3FF,d0
00020966 6700                       		beq.s	loc_14A86
00020968 0B04                       		btst	d5,d4
0002096A 6600                       		bne.s	loc_14A94
0002096C                            
0002096C                            loc_14A86:
0002096C 323C 000F                  		move.w	#$F,d1
00020970 3002                       		move.w	d2,d0
00020972 0240 000F                  		andi.w	#$F,d0
00020976 9240                       		sub.w	d0,d1
00020978 4E75                       		rts	
0002097A                            ; ===========================================================================
0002097A                            
0002097A                            loc_14A94:
0002097A 2478 F796                  		movea.l	($FFFFF796).w,a2
0002097E 1032 0000                  		move.b	(a2,d0.w),d0
00020982 0240 00FF                  		andi.w	#$FF,d0
00020986 67E4                       		beq.s	loc_14A86
00020988 45F9 0000 0000             		lea	(AngleMap).l,a2
0002098E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00020992 E948                       		lsl.w	#4,d0
00020994 3203                       		move.w	d3,d1
00020996 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
0002099A 6700                       		beq.s	loc_14ABA
0002099C 4641                       		not.w	d1
0002099E 4414                       		neg.b	(a4)
000209A0                            
000209A0                            loc_14ABA:
000209A0 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000209A4 6700                       		beq.s	loc_14ACA
000209A6 0614 0040                  		addi.b	#$40,(a4)
000209AA 4414                       		neg.b	(a4)
000209AC 0414 0040                  		subi.b	#$40,(a4)
000209B0                            
000209B0                            loc_14ACA:
000209B0 0241 000F                  		andi.w	#$F,d1
000209B4 D240                       		add.w	d0,d1
000209B6 45F9 0000 0000             		lea	(CollArray1).l,a2
000209BC 1032 1000                  		move.b	(a2,d1.w),d0
000209C0 4880                       		ext.w	d0
000209C2 BD44                       		eor.w	d6,d4
000209C4 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000209C8 6700                       		beq.s	loc_14AE6
000209CA 4440                       		neg.w	d0
000209CC                            
000209CC                            loc_14AE6:
000209CC 4A40                       		tst.w	d0
000209CE 679C                       		beq.s	loc_14A86
000209D0 6B00                       		bmi.s	loc_14AFC
000209D2 3202                       		move.w	d2,d1
000209D4 0241 000F                  		andi.w	#$F,d1
000209D8 D041                       		add.w	d1,d0
000209DA 323C 000F                  		move.w	#$F,d1
000209DE 9240                       		sub.w	d0,d1
000209E0 4E75                       		rts	
000209E2                            ; ===========================================================================
000209E2                            
000209E2                            loc_14AFC:
000209E2 3202                       		move.w	d2,d1
000209E4 0241 000F                  		andi.w	#$F,d1
000209E8 D041                       		add.w	d1,d0
000209EA 6A00 FF80                  		bpl.w	loc_14A86
000209EE 4641                       		not.w	d1
000209F0 4E75                       		rts	
000209F2                            ; End of function FindFloor2
000209F2                            
000209F2                            
000209F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209F2                            
000209F2                            
000209F2                            FindWall:
000209F2 6100 FE20                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
000209F6 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
000209F8 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
000209FC 3800                       		move.w	d0,d4					; MJ: copy to d4
000209FE 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
00020A02 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
00020A04 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
00020A06 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
00020A08                            
00020A08                            loc_14B1E:
00020A08 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
00020A0A 6100 0000                  		bsr.w	FindWall2
00020A0E 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
00020A10 0641 0010                  		addi.w	#$10,d1
00020A14 4E75                       		rts	
00020A16                            ; ===========================================================================
00020A16                            
00020A16                            loc_14B2C:
00020A16 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
00020A1A 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
00020A1E 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
00020A22 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
00020A24 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00020A2A 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00020A2E E948                       		lsl.w	#4,d0					; MJ: multiply by 10
00020A30 3202                       		move.w	d2,d1					; MJ: load Y position
00020A32 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00020A36 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00020A38 4641                       		not.w	d1
00020A3A 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00020A3E 4414                       		neg.b	(a4)					; MJ: negate to opposite
00020A40 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
00020A44                            
00020A44                            loc_14B5A:
00020A44 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00020A48 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00020A4A 4414                       		neg.b	(a4)					; MJ: negate to opposite
00020A4C                            
00020A4C                            loc_14B62:
00020A4C 0241 000F                  		andi.w	#$F,d1
00020A50 D240                       		add.w	d0,d1
00020A52 45F9 0000 0000             		lea	(CollArray2).l,a2
00020A58 1032 1000                  		move.b	(a2,d1.w),d0
00020A5C 4880                       		ext.w	d0
00020A5E BD44                       		eor.w	d6,d4
00020A60 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020A64 6700                       		beq.s	loc_14B7E
00020A66 4440                       		neg.w	d0
00020A68                            
00020A68                            loc_14B7E:
00020A68 4A40                       		tst.w	d0
00020A6A 679C                       		beq.s	loc_14B1E
00020A6C 6B00                       		bmi.s	loc_14B9A
00020A6E 0C00 0010                  		cmpi.b	#$10,d0
00020A72 6700                       		beq.s	loc_14BA6
00020A74 3203                       		move.w	d3,d1
00020A76 0241 000F                  		andi.w	#$F,d1
00020A7A D041                       		add.w	d1,d0
00020A7C 323C 000F                  		move.w	#$F,d1
00020A80 9240                       		sub.w	d0,d1
00020A82 4E75                       		rts	
00020A84                            ; ===========================================================================
00020A84                            
00020A84                            loc_14B9A:
00020A84 3203                       		move.w	d3,d1
00020A86 0241 000F                  		andi.w	#$F,d1
00020A8A D041                       		add.w	d1,d0
00020A8C 6A00 FF7A                  		bpl.w	loc_14B1E
00020A90                            
00020A90                            loc_14BA6:
00020A90 964B                       		sub.w	a3,d3
00020A92 6100 0000                  		bsr.w	FindWall2
00020A96 D64B                       		add.w	a3,d3
00020A98 0441 0010                  		subi.w	#$10,d1
00020A9C 4E75                       		rts	
00020A9E                            ; End of function FindWall
00020A9E                            
00020A9E                            
00020A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A9E                            
00020A9E                            
00020A9E                            FindWall2:				; XREF: FindWall
00020A9E 6100 FD74                  		bsr.w	Floor_ChkTile
00020AA2 3011                       		move.w	(a1),d0
00020AA4 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00020AA8 3800                       		move.w	d0,d4
00020AAA 0240 03FF                  		andi.w	#$3FF,d0
00020AAE 6700                       		beq.s	loc_14BC6
00020AB0 0B04                       		btst	d5,d4
00020AB2 6600                       		bne.s	loc_14BD4
00020AB4                            
00020AB4                            loc_14BC6:
00020AB4 323C 000F                  		move.w	#$F,d1
00020AB8 3003                       		move.w	d3,d0
00020ABA 0240 000F                  		andi.w	#$F,d0
00020ABE 9240                       		sub.w	d0,d1
00020AC0 4E75                       		rts	
00020AC2                            ; ===========================================================================
00020AC2                            
00020AC2                            loc_14BD4:
00020AC2 2478 F796                  		movea.l	($FFFFF796).w,a2
00020AC6 1032 0000                  		move.b	(a2,d0.w),d0
00020ACA 0240 00FF                  		andi.w	#$FF,d0
00020ACE 67E4                       		beq.s	loc_14BC6
00020AD0 45F9 0000 0000             		lea	(AngleMap).l,a2
00020AD6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00020ADA E948                       		lsl.w	#4,d0
00020ADC 3202                       		move.w	d2,d1
00020ADE 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
00020AE2 6700                       		beq.s	loc_14C02
00020AE4 4641                       		not.w	d1
00020AE6 0614 0040                  		addi.b	#$40,(a4)
00020AEA 4414                       		neg.b	(a4)
00020AEC 0414 0040                  		subi.b	#$40,(a4)
00020AF0                            
00020AF0                            loc_14C02:
00020AF0 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020AF4 6700                       		beq.s	loc_14C0A
00020AF6 4414                       		neg.b	(a4)
00020AF8                            
00020AF8                            loc_14C0A:
00020AF8 0241 000F                  		andi.w	#$F,d1
00020AFC D240                       		add.w	d0,d1
00020AFE 45F9 0000 0000             		lea	(CollArray2).l,a2
00020B04 1032 1000                  		move.b	(a2,d1.w),d0
00020B08 4880                       		ext.w	d0
00020B0A BD44                       		eor.w	d6,d4
00020B0C 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020B10 6700                       		beq.s	loc_14C26
00020B12 4440                       		neg.w	d0
00020B14                            
00020B14                            loc_14C26:
00020B14 4A40                       		tst.w	d0
00020B16 679C                       		beq.s	loc_14BC6
00020B18 6B00                       		bmi.s	loc_14C3C
00020B1A 3203                       		move.w	d3,d1
00020B1C 0241 000F                  		andi.w	#$F,d1
00020B20 D041                       		add.w	d1,d0
00020B22 323C 000F                  		move.w	#$F,d1
00020B26 9240                       		sub.w	d0,d1
00020B28 4E75                       		rts	
00020B2A                            ; ===========================================================================
00020B2A                            
00020B2A                            loc_14C3C:
00020B2A 3203                       		move.w	d3,d1
00020B2C 0241 000F                  		andi.w	#$F,d1
00020B30 D041                       		add.w	d1,d0
00020B32 6A00 FF80                  		bpl.w	loc_14BC6
00020B36 4641                       		not.w	d1
00020B38 4E75                       		rts	
00020B3A                            ; End of function FindWall2
00020B3A                            
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A                            ; Unused floor/wall subroutine - logs something	to do with collision
00020B3A                            ; ---------------------------------------------------------------------------
00020B3A                            
00020B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B3A                            
00020B3A                            
00020B3A                            FloorLog_Unk:				; XREF: Level
00020B3A 4E75                       		rts	
00020B3C                            
00020B3C 43F9 0000 0000             		lea	(CollArray1).l,a1
00020B42 45F9 0000 0000             		lea	(CollArray1).l,a2
00020B48 363C 00FF                  		move.w	#$FF,d3
00020B4C                            
00020B4C                            loc_14C5E:
00020B4C 7A10                       		moveq	#$10,d5
00020B4E 343C 000F                  		move.w	#$F,d2
00020B52                            
00020B52                            loc_14C64:
00020B52 7800                       		moveq	#0,d4
00020B54 323C 000F                  		move.w	#$F,d1
00020B58                            
00020B58                            loc_14C6A:
00020B58 3019                       		move.w	(a1)+,d0
00020B5A EAA8                       		lsr.l	d5,d0
00020B5C D944                       		addx.w	d4,d4
00020B5E 51C9 FFF8                  		dbf	d1,loc_14C6A
00020B62                            
00020B62 34C4                       		move.w	d4,(a2)+
00020B64 92FC 0020                  		suba.w	#$20,a1
00020B68 5345                       		subq.w	#1,d5
00020B6A 51CA FFE6                  		dbf	d2,loc_14C64
00020B6E                            
00020B6E D2FC 0020                  		adda.w	#$20,a1
00020B72 51CB FFD8                  		dbf	d3,loc_14C5E
00020B76                            
00020B76 43F9 0000 0000             		lea	(CollArray1).l,a1
00020B7C 45F9 0000 0000             		lea	(CollArray2).l,a2
00020B82 6100                       		bsr.s	FloorLog_Unk2
00020B84 43F9 0000 0000             		lea	(CollArray1).l,a1
00020B8A 45F9 0000 0000             		lea	(CollArray1).l,a2
00020B90                            
00020B90                            ; End of function FloorLog_Unk
00020B90                            
00020B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020B90                            
00020B90                            
00020B90                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00020B90 363C 0FFF                  		move.w	#$FFF,d3
00020B94                            
00020B94                            loc_14CA6:
00020B94 7400                       		moveq	#0,d2
00020B96 323C 000F                  		move.w	#$F,d1
00020B9A 3019                       		move.w	(a1)+,d0
00020B9C 6700                       		beq.s	loc_14CD4
00020B9E 6B00                       		bmi.s	loc_14CBE
00020BA0                            
00020BA0                            loc_14CB2:
00020BA0 E248                       		lsr.w	#1,d0
00020BA2 6400                       		bcc.s	loc_14CB8
00020BA4 5202                       		addq.b	#1,d2
00020BA6                            
00020BA6                            loc_14CB8:
00020BA6 51C9 FFF8                  		dbf	d1,loc_14CB2
00020BAA                            
00020BAA 6000                       		bra.s	loc_14CD6
00020BAC                            ; ===========================================================================
00020BAC                            
00020BAC                            loc_14CBE:
00020BAC 0C40 FFFF                  		cmpi.w	#-1,d0
00020BB0 6700                       		beq.s	loc_14CD0
00020BB2                            
00020BB2                            loc_14CC4:
00020BB2 E348                       		lsl.w	#1,d0
00020BB4 6400                       		bcc.s	loc_14CCA
00020BB6 5302                       		subq.b	#1,d2
00020BB8                            
00020BB8                            loc_14CCA:
00020BB8 51C9 FFF8                  		dbf	d1,loc_14CC4
00020BBC                            
00020BBC 6000                       		bra.s	loc_14CD6
00020BBE                            ; ===========================================================================
00020BBE                            
00020BBE                            loc_14CD0:
00020BBE 303C 0010                  		move.w	#$10,d0
00020BC2                            
00020BC2                            loc_14CD4:
00020BC2 3400                       		move.w	d0,d2
00020BC4                            
00020BC4                            loc_14CD6:
00020BC4 14C2                       		move.b	d2,(a2)+
00020BC6 51CB FFCC                  		dbf	d3,loc_14CA6
00020BCA                            
00020BCA 4E75                       		rts	
00020BCC                            
00020BCC                            ; End of function FloorLog_Unk2
00020BCC                            
00020BCC                            
00020BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020BCC                            
00020BCC                            
00020BCC                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00020BCC 2628 0008                  		move.l	8(a0),d3
00020BD0 2428 000C                  		move.l	$C(a0),d2
00020BD4 3228 0010                  		move.w	x_vel(a0),d1
00020BD8 48C1                       		ext.l	d1
00020BDA E181                       		asl.l	#8,d1
00020BDC D681                       		add.l	d1,d3
00020BDE 3228 0012                  		move.w	y_vel(a0),d1
00020BE2 48C1                       		ext.l	d1
00020BE4 E181                       		asl.l	#8,d1
00020BE6 D481                       		add.l	d1,d2
00020BE8 4842                       		swap	d2
00020BEA 4843                       		swap	d3
00020BEC 11C0 F768                  		move.b	d0,($FFFFF768).w
00020BF0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00020BF4 1200                       		move.b	d0,d1
00020BF6 0600 0020                  		addi.b	#$20,d0
00020BFA 6A00                       		bpl.s	loc_14D1A
00020BFC 1001                       		move.b	d1,d0
00020BFE 6A00                       		bpl.s	loc_14D14
00020C00 5300                       		subq.b	#1,d0
00020C02                            
00020C02                            loc_14D14:
00020C02 0600 0020                  		addi.b	#$20,d0
00020C06 6000                       		bra.s	loc_14D24
00020C08                            ; ===========================================================================
00020C08                            
00020C08                            loc_14D1A:
00020C08 1001                       		move.b	d1,d0
00020C0A 6A00                       		bpl.s	loc_14D20
00020C0C 5200                       		addq.b	#1,d0
00020C0E                            
00020C0E                            loc_14D20:
00020C0E 0600 001F                  		addi.b	#$1F,d0
00020C12                            
00020C12                            loc_14D24:
00020C12 0200 00C0                  		andi.b	#$C0,d0
00020C16 6700 0000                  		beq.w	loc_14DF0
00020C1A 0C00 0080                  		cmpi.b	#$80,d0
00020C1E 6700 0000                  		beq.w	loc_14F7C
00020C22 0201 0038                  		andi.b	#$38,d1
00020C26 6600                       		bne.s	loc_14D3C
00020C28 5042                       		addq.w	#8,d2
00020C2A                            
00020C2A                            loc_14D3C:
00020C2A 0C00 0040                  		cmpi.b	#$40,d0
00020C2E 6700 0000                  		beq.w	loc_1504A
00020C32 6000 0000                  		bra.w	loc_14EBC
00020C36                            
00020C36                            ; End of function Sonic_WalkSpeed
00020C36                            
00020C36                            
00020C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020C36                            
00020C36                            
00020C36                            sub_14D48:				; XREF: Sonic_Jump
00020C36 11C0 F768                  		move.b	d0,($FFFFF768).w
00020C3A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00020C3E 0600 0020                  		addi.b	#$20,d0
00020C42 0200 00C0                  		andi.b	#$C0,d0
00020C46 0C00 0040                  		cmpi.b	#$40,d0
00020C4A 6700 0000                  		beq.w	loc_14FD6
00020C4E 0C00 0080                  		cmpi.b	#$80,d0
00020C52 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00020C56 0C00 00C0                  		cmpi.b	#$C0,d0
00020C5A 6700 0000                  		beq.w	sub_14E50
00020C5E                            
00020C5E                            ; End of function sub_14D48
00020C5E                            
00020C5E                            ; ---------------------------------------------------------------------------
00020C5E                            ; Subroutine to	make Sonic land	on the floor after jumping
00020C5E                            ; ---------------------------------------------------------------------------
00020C5E                            
00020C5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020C5E                            
00020C5E                            
00020C5E                            Sonic_HitFloor:				; XREF: Sonic_Floor
00020C5E 3428 000C                  		move.w	$C(a0),d2
00020C62 3628 0008                  		move.w	8(a0),d3
00020C66 48A7 3000                  		movem.w d2-d3,-(sp)		
00020C6A 7000                       		moveq	#0,d0
00020C6C 1028 0016                  		move.b	$16(a0),d0
00020C70 4880                       		ext.w	d0
00020C72 D440                       		add.w	d0,d2
00020C74 1028 0017                  		move.b	$17(a0),d0
00020C78 4880                       		ext.w	d0
00020C7A D640                       		add.w	d0,d3
00020C7C 49F8 F768                  		lea	($FFFFF768).w,a4
00020C80 367C 0010                  		movea.w	#$10,a3
00020C84 3C3C 0000                  		move.w	#0,d6
00020C88 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020C8A 6100 FC20                  		bsr.w	FindFloor				; MJ: check solidity
00020C8E 4C9F 000C                  		movem.w (sp)+,d2-d3		
00020C92 3F01                       		move.w	d1,-(sp)
00020C94 7000                       		moveq	#0,d0
00020C96 1028 0016                  		move.b	$16(a0),d0
00020C9A 4880                       		ext.w	d0
00020C9C D440                       		add.w	d0,d2
00020C9E 1028 0017                  		move.b	$17(a0),d0
00020CA2 4880                       		ext.w	d0
00020CA4 9640                       		sub.w	d0,d3
00020CA6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020CAA 367C 0010                  		movea.w	#$10,a3
00020CAE 3C3C 0000                  		move.w	#0,d6
00020CB2 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020CB4 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00020CB8 301F                       		move.w	(sp)+,d0
00020CBA 143C 0000                  		move.b	#0,d2
00020CBE                            
00020CBE                            loc_14DD0:
00020CBE 1638 F76A                  		move.b	($FFFFF76A).w,d3
00020CC2 B240                       		cmp.w	d0,d1
00020CC4 6F00                       		ble.s	loc_14DDE
00020CC6 1638 F768                  		move.b	($FFFFF768).w,d3
00020CCA C141                       		exg	d0,d1
00020CCC                            
00020CCC                            loc_14DDE:
00020CCC 0803 0000                  		btst	#0,d3
00020CD0 6700                       		beq.s	locret_14DE6
00020CD2 1602                       		move.b	d2,d3
00020CD4                            
00020CD4                            locret_14DE6:
00020CD4 4E75                       		rts	
00020CD6                            
00020CD6                            ; End of function Sonic_HitFloor
00020CD6                            
00020CD6                            ; ===========================================================================
00020CD6 3428 000C                  		move.w	$C(a0),d2
00020CDA 3628 0008                  		move.w	8(a0),d3
00020CDE                            
00020CDE                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00020CDE 0642 000A                  		addi.w	#$A,d2
00020CE2 49F8 F768                  		lea	($FFFFF768).w,a4
00020CE6 367C 0010                  		movea.w	#$10,a3
00020CEA 3C3C 0000                  		move.w	#0,d6
00020CEE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020CF0 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
00020CF4 143C 0000                  		move.b	#0,d2
00020CF8                            
00020CF8                            loc_14E0A:				; XREF: sub_14EB4
00020CF8 1638 F768                  		move.b	($FFFFF768).w,d3
00020CFC 0803 0000                  		btst	#0,d3
00020D00 6700                       		beq.s	locret_14E16
00020D02 1602                       		move.b	d2,d3
00020D04                            
00020D04                            locret_14E16:
00020D04 4E75                       		rts	
00020D06                            
00020D06                            ; ---------------------------------------------------------------------------
00020D06                            ; Subroutine allowing objects to interact with the floor
00020D06                            ; ---------------------------------------------------------------------------
00020D06                            
00020D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020D06                            
00020D06                            
00020D06                            ObjHitFloor:
00020D06 3628 0008                  		move.w	8(a0),d3
00020D0A                            
00020D0A                            ; End of function ObjHitFloor
00020D0A                            
00020D0A                            
00020D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020D0A                            
00020D0A                            
00020D0A                            ObjHitFloor2:
00020D0A 3428 000C                  		move.w	$C(a0),d2
00020D0E 7000                       		moveq	#0,d0
00020D10 1028 0016                  		move.b	$16(a0),d0
00020D14 4880                       		ext.w	d0
00020D16 D440                       		add.w	d0,d2
00020D18 49F8 F768                  		lea	($FFFFF768).w,a4
00020D1C 18BC 0000                  		move.b	#0,(a4)
00020D20 367C 0010                  		movea.w	#$10,a3
00020D24 3C3C 0000                  		move.w	#0,d6
00020D28 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020D2A 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00020D2E 1638 F768                  		move.b	($FFFFF768).w,d3
00020D32 0803 0000                  		btst	#0,d3
00020D36 6700                       		beq.s	locret_14E4E
00020D38 163C 0000                  		move.b	#0,d3
00020D3C                            
00020D3C                            locret_14E4E:
00020D3C 4E75                       		rts	
00020D3E                            ; End of function ObjHitFloor2
00020D3E                            
00020D3E                            
00020D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020D3E                            
00020D3E                            
00020D3E                            sub_14E50:				; XREF: sub_14D48
00020D3E 3428 000C                  		move.w	$C(a0),d2
00020D42 3628 0008                  		move.w	8(a0),d3
00020D46 48A7 3000                  		movem.w d2-d3,-(sp)
00020D4A 7000                       		moveq	#0,d0
00020D4C 1028 0017                  		move.b	$17(a0),d0
00020D50 4880                       		ext.w	d0
00020D52 9440                       		sub.w	d0,d2
00020D54 1028 0016                  		move.b	$16(a0),d0
00020D58 4880                       		ext.w	d0
00020D5A D640                       		add.w	d0,d3
00020D5C 49F8 F768                  		lea	($FFFFF768).w,a4
00020D60 367C 0010                  		movea.w	#$10,a3
00020D64 3C3C 0000                  		move.w	#0,d6
00020D68 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020D6A 6100 FC86                  		bsr.w	FindWall				; MJ: check solidity
00020D6E 4C9F 000C                  		movem.w (sp)+,d2-d3
00020D72 3F01                       		move.w	d1,-(sp)
00020D74 7000                       		moveq	#0,d0
00020D76 1028 0017                  		move.b	$17(a0),d0
00020D7A 4880                       		ext.w	d0
00020D7C D440                       		add.w	d0,d2
00020D7E 1028 0016                  		move.b	$16(a0),d0
00020D82 4880                       		ext.w	d0
00020D84 D640                       		add.w	d0,d3
00020D86 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020D8A 367C 0010                  		movea.w	#$10,a3
00020D8E 3C3C 0000                  		move.w	#0,d6
00020D92 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020D94 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00020D98 301F                       		move.w	(sp)+,d0
00020D9A 143C 00C0                  		move.b	#-$40,d2
00020D9E 6000 FF1E                  		bra.w	loc_14DD0
00020DA2                            
00020DA2                            ; End of function sub_14E50
00020DA2                            
00020DA2                            
00020DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020DA2                            
00020DA2                            
00020DA2                            sub_14EB4:				; XREF: Sonic_Floor
00020DA2 3428 000C                  		move.w	$C(a0),d2
00020DA6 3628 0008                  		move.w	8(a0),d3
00020DAA                            
00020DAA                            loc_14EBC:
00020DAA 0643 000A                  		addi.w	#$A,d3
00020DAE 49F8 F768                  		lea	($FFFFF768).w,a4
00020DB2 367C 0010                  		movea.w	#$10,a3
00020DB6 3C3C 0000                  		move.w	#0,d6
00020DBA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020DBC 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
00020DC0 143C 00C0                  		move.b	#-$40,d2
00020DC4 6000 FF32                  		bra.w	loc_14E0A
00020DC8                            
00020DC8                            ; End of function sub_14EB4
00020DC8                            
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8                            ; Subroutine to	detect when an object hits a wall to its right
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8                            
00020DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020DC8                            
00020DC8                            
00020DC8                            ObjHitWallRight:
00020DC8 D668 0008                  		add.w	8(a0),d3
00020DCC 3428 000C                  		move.w	$C(a0),d2
00020DD0 49F8 F768                  		lea	($FFFFF768).w,a4
00020DD4 18BC 0000                  		move.b	#0,(a4)
00020DD8 367C 0010                  		movea.w	#$10,a3
00020DDC 3C3C 0000                  		move.w	#0,d6
00020DE0 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020DE2 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
00020DE6 1638 F768                  		move.b	($FFFFF768).w,d3
00020DEA 0803 0000                  		btst	#0,d3
00020DEE 6700                       		beq.s	locret_14F06
00020DF0 163C 00C0                  		move.b	#-$40,d3
00020DF4                            
00020DF4                            locret_14F06:
00020DF4 4E75                       		rts	
00020DF6                            
00020DF6                            ; End of function ObjHitWallRight
00020DF6                            
00020DF6                            
00020DF6                            ; ---------------------------------------------------------------------------
00020DF6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00020DF6                            ; touches them
00020DF6                            ; ---------------------------------------------------------------------------
00020DF6                            
00020DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020DF6                            
00020DF6                            
00020DF6                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00020DF6 3428 000C                  		move.w	$C(a0),d2
00020DFA 3628 0008                  		move.w	8(a0),d3
00020DFE 48A7 3000                  		movem.w d2-d3,-(sp)
00020E02 7000                       		moveq	#0,d0
00020E04 1028 0016                  		move.b	$16(a0),d0
00020E08 4880                       		ext.w	d0
00020E0A 9440                       		sub.w	d0,d2
00020E0C 0A42 000F                  		eori.w	#$F,d2
00020E10 1028 0017                  		move.b	$17(a0),d0
00020E14 4880                       		ext.w	d0
00020E16 D640                       		add.w	d0,d3
00020E18 49F8 F768                  		lea	($FFFFF768).w,a4
00020E1C 367C FFF0                  		movea.w	#-$10,a3
00020E20 3C3C 0800                  		move.w	#$0800,d6
00020E24 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020E26 6100 FA84                  		bsr.w	FindFloor				; MJ: check solidity
00020E2A 4C9F 000C                  		movem.w (sp)+,d2-d3		
00020E2E 3F01                       		move.w	d1,-(sp)
00020E30 7000                       		moveq	#0,d0
00020E32 1028 0016                  		move.b	$16(a0),d0
00020E36 4880                       		ext.w	d0
00020E38 9440                       		sub.w	d0,d2
00020E3A 0A42 000F                  		eori.w	#$F,d2
00020E3E 1028 0017                  		move.b	$17(a0),d0
00020E42 4880                       		ext.w	d0
00020E44 9640                       		sub.w	d0,d3
00020E46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020E4A 367C FFF0                  		movea.w	#-$10,a3
00020E4E 3C3C 0800                  		move.w	#$0800,d6
00020E52 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020E54 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00020E58 301F                       		move.w	(sp)+,d0
00020E5A 143C 0080                  		move.b	#-$80,d2
00020E5E 6000 FE5E                  		bra.w	loc_14DD0
00020E62                            ; End of function Sonic_DontRunOnWalls
00020E62                            
00020E62                            ; ===========================================================================
00020E62 3428 000C                  		move.w	$C(a0),d2
00020E66 3628 0008                  		move.w	8(a0),d3
00020E6A                            
00020E6A                            loc_14F7C:
00020E6A 0442 000A                  		subi.w	#$A,d2
00020E6E 0A42 000F                  		eori.w	#$F,d2
00020E72 49F8 F768                  		lea	($FFFFF768).w,a4
00020E76 367C FFF0                  		movea.w	#-$10,a3
00020E7A 3C3C 0800                  		move.w	#$0800,d6
00020E7E 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020E80 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
00020E84 143C 0080                  		move.b	#-$80,d2
00020E88 6000 FE6E                  		bra.w	loc_14E0A
00020E8C                            
00020E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020E8C                            
00020E8C                            
00020E8C                            ObjHitCeiling:
00020E8C 3428 000C                  		move.w	$C(a0),d2
00020E90 3628 0008                  		move.w	8(a0),d3
00020E94 7000                       		moveq	#0,d0
00020E96 1028 0016                  		move.b	$16(a0),d0
00020E9A 4880                       		ext.w	d0
00020E9C 9440                       		sub.w	d0,d2
00020E9E 0A42 000F                  		eori.w	#$F,d2
00020EA2 49F8 F768                  		lea	($FFFFF768).w,a4
00020EA6 367C FFF0                  		movea.w	#-$10,a3
00020EAA 3C3C 0800                  		move.w	#$0800,d6
00020EAE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020EB0 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
00020EB4 1638 F768                  		move.b	($FFFFF768).w,d3
00020EB8 0803 0000                  		btst	#0,d3
00020EBC 6700                       		beq.s	locret_14FD4
00020EBE 163C 0080                  		move.b	#-$80,d3
00020EC2                            
00020EC2                            locret_14FD4:
00020EC2 4E75                       		rts	
00020EC4                            ; End of function ObjHitCeiling
00020EC4                            
00020EC4                            ; ===========================================================================
00020EC4                            
00020EC4                            loc_14FD6:				; XREF: sub_14D48
00020EC4 3428 000C                  		move.w	$C(a0),d2
00020EC8 3628 0008                  		move.w	8(a0),d3
00020ECC 48A7 3000                  		movem.w d2-d3,-(sp)
00020ED0 7000                       		moveq	#0,d0
00020ED2 1028 0017                  		move.b	$17(a0),d0
00020ED6 4880                       		ext.w	d0
00020ED8 9440                       		sub.w	d0,d2
00020EDA 1028 0016                  		move.b	$16(a0),d0
00020EDE 4880                       		ext.w	d0
00020EE0 9640                       		sub.w	d0,d3
00020EE2 0A43 000F                  		eori.w	#$F,d3
00020EE6 49F8 F768                  		lea	($FFFFF768).w,a4
00020EEA 367C FFF0                  		movea.w	#-$10,a3
00020EEE 3C3C 0400                  		move.w	#$400,d6
00020EF2 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020EF4 6100 FAFC                  		bsr.w	FindWall				; MJ: check solidity
00020EF8 4C9F 000C                  		movem.w (sp)+,d2-d3	
00020EFC 3F01                       		move.w	d1,-(sp)
00020EFE 7000                       		moveq	#0,d0
00020F00 1028 0017                  		move.b	$17(a0),d0
00020F04 4880                       		ext.w	d0
00020F06 D440                       		add.w	d0,d2
00020F08 1028 0016                  		move.b	$16(a0),d0
00020F0C 4880                       		ext.w	d0
00020F0E 9640                       		sub.w	d0,d3
00020F10 0A43 000F                  		eori.w	#$F,d3
00020F14 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020F18 367C FFF0                  		movea.w	#-$10,a3
00020F1C 3C3C 0400                  		move.w	#$400,d6
00020F20 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020F22 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00020F26 301F                       		move.w	(sp)+,d0
00020F28 143C 0040                  		move.b	#$40,d2
00020F2C 6000 FD90                  		bra.w	loc_14DD0
00020F30                            
00020F30                            ; ---------------------------------------------------------------------------
00020F30                            ; Subroutine to	stop Sonic when	he jumps at a wall
00020F30                            ; ---------------------------------------------------------------------------
00020F30                            
00020F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020F30                            
00020F30                            
00020F30                            Sonic_HitWall:				; XREF: Sonic_Floor
00020F30 3428 000C                  		move.w	$C(a0),d2
00020F34 3628 0008                  		move.w	8(a0),d3
00020F38                            
00020F38                            loc_1504A:
00020F38 0443 000A                  		subi.w	#$A,d3
00020F3C 0A43 000F                  		eori.w	#$F,d3
00020F40 49F8 F768                  		lea	($FFFFF768).w,a4
00020F44 367C FFF0                  		movea.w	#-$10,a3
00020F48 3C3C 0400                  		move.w	#$400,d6
00020F4C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020F4E 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
00020F52 143C 0040                  		move.b	#$40,d2
00020F56 6000 FDA0                  		bra.w	loc_14E0A
00020F5A                            ; End of function Sonic_HitWall
00020F5A                            
00020F5A                            ; ---------------------------------------------------------------------------
00020F5A                            ; Subroutine to	detect when an object hits a wall to its left
00020F5A                            ; ---------------------------------------------------------------------------
00020F5A                            
00020F5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020F5A                            
00020F5A                            
00020F5A                            ObjHitWallLeft:
00020F5A D668 0008                  		add.w	8(a0),d3
00020F5E 3428 000C                  		move.w	$C(a0),d2
00020F62 49F8 F768                  		lea	($FFFFF768).w,a4
00020F66 18BC 0000                  		move.b	#0,(a4)
00020F6A 367C FFF0                  		movea.w	#-$10,a3
00020F6E 3C3C 0400                  		move.w	#$400,d6
00020F72 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020F74 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00020F78 1638 F768                  		move.b	($FFFFF768).w,d3
00020F7C 0803 0000                  		btst	#0,d3
00020F80 6700                       		beq.s	locret_15098
00020F82 163C 0040                  		move.b	#$40,d3
00020F86                            
00020F86                            locret_15098:
00020F86 4E75                       		rts	
00020F88                            ; End of function ObjHitWallLeft
00020F88                            
00020F88                            ; ===========================================================================
00020F88                            ; ---------------------------------------------------------------------------
00020F88                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00020F88                            ; ---------------------------------------------------------------------------
00020F88                            
00020F88                            Obj66:					; XREF: Obj_Index
00020F88 7000                       		moveq	#0,d0
00020F8A 1028 0024                  		move.b	routine(a0),d0
00020F8E 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00020F92 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00020F96                            ; ===========================================================================
00020F96 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00020F98 0000                       		dc.w Obj66_Action-Obj66_Index
00020F9A 0000                       		dc.w Obj66_Display-Obj66_Index
00020F9C 0000                       		dc.w Obj66_Release-Obj66_Index
00020F9E                            ; ===========================================================================
00020F9E                            
00020F9E                            Obj66_Main:				; XREF: Obj66_Index
00020F9E 5428 0024                  		addq.b	#2,routine(a0)
00020FA2 323C 0001                  		move.w	#1,d1
00020FA6 2248                       		movea.l	a0,a1
00020FA8 6000                       		bra.s	Obj66_MakeItem
00020FAA                            ; ===========================================================================
00020FAA                            
00020FAA                            Obj66_Loop:
00020FAA 4EB9 0001 687C             		jsr	SingleObjLoad
00020FB0 6600                       		bne.s	loc_150FE
00020FB2 12BC 0066                  		move.b	#$66,0(a1)
00020FB6 5829 0024                  		addq.b	#4,routine(a1)
00020FBA 3368 0008 0008             		move.w	8(a0),8(a1)
00020FC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00020FC6 337C 0180 0018             		move.w	#$180,priority(a1)
00020FCC 137C 0010 001A             		move.b	#$10,mapping_frame(a1)
00020FD2                            
00020FD2                            Obj66_MakeItem:				; XREF: Obj66_Main
00020FD2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00020FDA 337C 4348 0002             		move.w	#$4348,2(a1)
00020FE0 0029 0004 0001             		ori.b	#4,1(a1)
00020FE6 137C 0038 0023             		move.b	#$38,width_pixels(a1)
00020FEC                            
00020FEC                            loc_150FE:
00020FEC 51C9 FFBC                  		dbf	d1,Obj66_Loop
00020FF0                            
00020FF0 117C 0030 0023             		move.b	#$30,width_pixels(a0)
00020FF6 317C 0200 0018             		move.w	#$200,priority(a0)
00020FFC 317C 003C 0030             		move.w	#$3C,$30(a0)
00021002 117C 0001 0034             		move.b	#1,$34(a0)
00021008 1168 0028 0038             		move.b	subtype(a0),$38(a0)
0002100E                            
0002100E                            Obj66_Action:				; XREF: Obj66_Index
0002100E 4EB9 0000 0000             		jsr	Obj66_ChkSwitch
00021014 4A28 0001                  		tst.b	1(a0)
00021018 6A00 0000                  		bpl.w	Obj66_Display
0002101C 323C 0030                  		move.w	#$30,d1
00021020 3401                       		move.w	d1,d2
00021022 3602                       		move.w	d2,d3
00021024 5243                       		addq.w	#1,d3
00021026 3828 0008                  		move.w	8(a0),d4
0002102A 4EBA 855E                  		jsr	SolidObject
0002102E 0828 0005 0022             		btst	#5,status(a0)
00021034 6700 0000                  		beq.w	Obj66_Display
00021038 43F8 D000                  		lea	($FFFFD000).w,a1
0002103C 720E                       		moveq	#$E,d1
0002103E 3029 0008                  		move.w	8(a1),d0
00021042 B068 0008                  		cmp.w	8(a0),d0
00021046 6500                       		bcs.s	Obj66_GrabSonic
00021048 7207                       		moveq	#7,d1
0002104A                            
0002104A                            Obj66_GrabSonic:
0002104A B228 001A                  		cmp.b	mapping_frame(a0),d1
0002104E 6600                       		bne.s	Obj66_Display
00021050 1141 0032                  		move.b	d1,$32(a0)
00021054 5828 0024                  		addq.b	#4,routine(a0)
00021058 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0002105E 137C 0002 001C             		move.b	#2,anim(a1)	; make Sonic use "rolling" animation
00021064 337C 0800 0020             		move.w	#$800,collision_flags(a1)
0002106A 337C 0000 0010             		move.w	#0,x_vel(a1)
00021070 337C 0000 0012             		move.w	#0,y_vel(a1)
00021076 08A8 0005 0022             		bclr	#5,status(a0)
0002107C 08A9 0005 0022             		bclr	#5,status(a1)
00021082 08E9 0001 0022             		bset	#1,status(a1)
00021088 3429 0008                  		move.w	8(a1),d2
0002108C 3629 000C                  		move.w	$C(a1),d3
00021090 4EB9 0000 0000             		jsr	Obj66_ChgPos
00021096 D569 0008                  		add.w	d2,8(a1)
0002109A D769 000C                  		add.w	d3,$C(a1)
0002109E E0E9 0008                  		asr	8(a1)
000210A2 E0E9 000C                  		asr	$C(a1)
000210A6                            
000210A6                            Obj66_Display:				; XREF: Obj66_Index
000210A6 4EF9 0001 8EA6             		jmp	MarkObjGone
000210AC                            ; ===========================================================================
000210AC                            
000210AC                            Obj66_Release:				; XREF: Obj66_Index
000210AC 1028 001A                  		move.b	mapping_frame(a0),d0
000210B0 0C00 0004                  		cmpi.b	#4,d0
000210B4 6700                       		beq.s	loc_151C8
000210B6 0C00 0007                  		cmpi.b	#7,d0
000210BA 6600                       		bne.s	loc_151F8
000210BC                            
000210BC                            loc_151C8:
000210BC B028 0032                  		cmp.b	$32(a0),d0
000210C0 6700                       		beq.s	loc_151F8
000210C2 43F8 D000                  		lea	($FFFFD000).w,a1
000210C6 337C 0000 0010             		move.w	#0,x_vel(a1)
000210CC 337C 0800 0012             		move.w	#$800,y_vel(a1)
000210D2 0C00 0004                  		cmpi.b	#4,d0
000210D6 6700                       		beq.s	loc_151F0
000210D8 337C 0800 0010             		move.w	#$800,x_vel(a1)
000210DE 337C 0800 0012             		move.w	#$800,y_vel(a1)
000210E4                            
000210E4                            loc_151F0:
000210E4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000210E8 5928 0024                  		subq.b	#4,routine(a0)
000210EC                            
000210EC                            loc_151F8:
000210EC 6100                       		bsr.s	Obj66_ChkSwitch
000210EE 6100                       		bsr.s	Obj66_ChgPos
000210F0 4EF9 0001 8EA6             		jmp	MarkObjGone
000210F6                            
000210F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000210F6                            
000210F6                            
000210F6                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000210F6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000210FA 7000                       		moveq	#0,d0
000210FC 1028 0038                  		move.b	$38(a0),d0
00021100 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00021106 6700                       		beq.s	loc_15224	; if not, branch
00021108 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0002110C 6600                       		bne.s	Obj66_Animate	; if yes, branch
0002110E 4428 0034                  		neg.b	$34(a0)
00021112 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00021118 6000                       		bra.s	Obj66_Animate
0002111A                            ; ===========================================================================
0002111A                            
0002111A                            loc_15224:
0002111A 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0002111E                            
0002111E                            Obj66_Animate:
0002111E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00021122 6A00                       		bpl.s	locret_15246
00021124 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
0002112A 1228 0034                  		move.b	$34(a0),d1
0002112E 1028 001A                  		move.b	mapping_frame(a0),d0
00021132 D001                       		add.b	d1,d0
00021134 0200 000F                  		andi.b	#$F,d0
00021138 1140 001A                  		move.b	d0,mapping_frame(a0)
0002113C                            
0002113C                            locret_15246:
0002113C 4E75                       		rts	
0002113E                            ; End of function Obj66_ChkSwitch
0002113E                            
0002113E                            
0002113E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002113E                            
0002113E                            
0002113E                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0002113E 43F8 D000                  		lea	($FFFFD000).w,a1
00021142 7000                       		moveq	#0,d0
00021144 1028 001A                  		move.b	mapping_frame(a0),d0
00021148 D040                       		add.w	d0,d0
0002114A 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0002114E 101A                       		move.b	(a2)+,d0
00021150 4880                       		ext.w	d0
00021152 D068 0008                  		add.w	8(a0),d0
00021156 3340 0008                  		move.w	d0,8(a1)
0002115A 101A                       		move.b	(a2)+,d0
0002115C 4880                       		ext.w	d0
0002115E D068 000C                  		add.w	$C(a0),d0
00021162 3340 000C                  		move.w	d0,$C(a1)
00021166 4E75                       		rts	
00021168                            ; End of function Obj66_ChgPos
00021168                            
00021168                            ; ===========================================================================
00021168 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0002116C E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00021170 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00021174 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00021178 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0002117C 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00021180 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00021184 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00021188                            ; ---------------------------------------------------------------------------
00021188                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00021188                            ; ---------------------------------------------------------------------------
00021188                            Map_obj66:
00021188                            	include "_maps\obj66.asm"
00021188                            ; ---------------------------------------------------------------------------
00021188                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00021188                            ; ---------------------------------------------------------------------------
00021188 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0002118C 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00021190 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00021194 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00021198 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0002119C 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000211A0 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000211A4 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000211A8 0000                       		dc.w byte_154A4-Map_obj66
000211AA 06                         byte_152B4:	dc.b 6
000211AB E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000211B0 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000211B5 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000211BA E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000211BF 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000211C4 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000211C9 06                         byte_152D3:	dc.b 6
000211CA F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000211CF 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000211D4 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000211D9 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000211DE 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000211E3 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000211E8 06                         byte_152F2:	dc.b 6
000211E9 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000211EE 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000211F3 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000211F8 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000211FD 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00021202 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00021207 06                         byte_15311:	dc.b 6
00021208 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0002120D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00021212 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00021217 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0002121C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00021221 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00021226 06                         byte_15330:	dc.b 6
00021227 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0002122C 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00021231 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00021236 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0002123B 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00021240 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00021245 06                         byte_1534F:	dc.b 6
00021246 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0002124B 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00021250 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00021255 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0002125A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0002125F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00021264 06                         byte_1536E:	dc.b 6
00021265 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0002126A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0002126F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00021274 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00021279 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0002127E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00021283 06                         byte_1538D:	dc.b 6
00021284 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00021289 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0002128E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00021293 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00021298 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0002129D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000212A2 06                         byte_153AC:	dc.b 6
000212A3 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000212A8 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000212AD E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000212B2 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000212B7 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000212BC 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000212C1 06                         byte_153CB:	dc.b 6
000212C2 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000212C7 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000212CC DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000212D1 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000212D6 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000212DB F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000212E0 06                         byte_153EA:	dc.b 6
000212E1 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000212E6 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000212EB D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000212F0 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000212F5 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000212FA E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000212FF 06                         byte_15409:	dc.b 6
00021300 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00021305 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0002130A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0002130F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00021314 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00021319 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0002131E 06                         byte_15428:	dc.b 6
0002131F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00021324 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00021329 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0002132E C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00021333 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00021338 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0002133D 06                         byte_15447:	dc.b 6
0002133E D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00021343 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00021348 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0002134D CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00021352 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00021357 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0002135C 06                         byte_15466:	dc.b 6
0002135D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00021362 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00021367 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0002136C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00021371 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00021376 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0002137B 06                         byte_15485:	dc.b 6
0002137C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00021381 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00021386 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0002138B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00021390 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00021395 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0002139A 0C                         byte_154A4:	dc.b $C
0002139B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000213A0 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000213A5 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000213AA C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000213AF D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000213B4 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000213B9 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000213BE 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000213C3 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000213C8 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000213CD 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000213D2 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000213D8 00                         		even
000213D8 00                         		even
000213D8                            
000213D8                            ; ===========================================================================
000213D8                            ; ---------------------------------------------------------------------------
000213D8                            ; Object 67 - disc that	you run	around (SBZ)
000213D8                            ; ---------------------------------------------------------------------------
000213D8                            
000213D8                            Obj67:					; XREF: Obj_Index
000213D8 7000                       		moveq	#0,d0
000213DA 1028 0024                  		move.b	routine(a0),d0
000213DE 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
000213E2 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
000213E6                            ; ===========================================================================
000213E6 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
000213E8 0000                       		dc.w Obj67_Action-Obj67_Index
000213EA                            ; ===========================================================================
000213EA                            
000213EA                            Obj67_Main:				; XREF: Obj67_Index
000213EA 5428 0024                  		addq.b	#2,routine(a0)
000213EE 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000213F6 317C C344 0002             		move.w	#$C344,2(a0)
000213FC 117C 0004 0001             		move.b	#4,1(a0)
00021402 317C 0200 0018             		move.w	#$200,priority(a0)
00021408 117C 0008 0023             		move.b	#8,width_pixels(a0)
0002140E 3168 0008 0032             		move.w	8(a0),$32(a0)
00021414 3168 000C 0030             		move.w	$C(a0),$30(a0)
0002141A 117C 0018 0034             		move.b	#$18,$34(a0)
00021420 117C 0048 0038             		move.b	#$48,$38(a0)
00021426 1228 0028                  		move.b	subtype(a0),d1	; get object type
0002142A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0002142E 6700                       		beq.s	loc_15546
00021430 117C 0010 0034             		move.b	#$10,$34(a0)
00021436 117C 0038 0038             		move.b	#$38,$38(a0)
0002143C                            
0002143C                            loc_15546:
0002143C 1228 0028                  		move.b	subtype(a0),d1	; get object type
00021440 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00021444 4881                       		ext.w	d1
00021446 E741                       		asl.w	#3,d1
00021448 3141 0036                  		move.w	d1,$36(a0)
0002144C 1028 0022                  		move.b	status(a0),d0
00021450 E418                       		ror.b	#2,d0
00021452 0200 00C0                  		andi.b	#-$40,d0
00021456 1140 0026                  		move.b	d0,$26(a0)
0002145A                            
0002145A                            Obj67_Action:				; XREF: Obj67_Index
0002145A 4EB9 0000 0000             		jsr	Obj67_MoveSonic
00021460 4EB9 0000 0000             		jsr	Obj67_MoveSpot
00021466 6000 0000                  		bra.w	Obj67_ChkDel
0002146A                            ; ===========================================================================
0002146A                            
0002146A                            Obj67_MoveSonic:			; XREF: Obj67_Action
0002146A 7400                       		moveq	#0,d2
0002146C 1428 0038                  		move.b	$38(a0),d2
00021470 3602                       		move.w	d2,d3
00021472 D643                       		add.w	d3,d3
00021474 43F8 D000                  		lea	($FFFFD000).w,a1
00021478 3029 0008                  		move.w	8(a1),d0
0002147C 9068 0032                  		sub.w	$32(a0),d0
00021480 D042                       		add.w	d2,d0
00021482 B043                       		cmp.w	d3,d0
00021484 6400                       		bcc.s	loc_155A8
00021486 3229 000C                  		move.w	$C(a1),d1
0002148A 9268 0030                  		sub.w	$30(a0),d1
0002148E D242                       		add.w	d2,d1
00021490 B243                       		cmp.w	d3,d1
00021492 6400                       		bcc.s	loc_155A8
00021494 0829 0001 0022             		btst	#1,status(a1)
0002149A 6700                       		beq.s	loc_155B8
0002149C 4228 003A                  		clr.b	$3A(a0)
000214A0 4E75                       		rts	
000214A2                            ; ===========================================================================
000214A2                            
000214A2                            loc_155A8:
000214A2 4A28 003A                  		tst.b	$3A(a0)
000214A6 6700                       		beq.s	locret_155B6
000214A8 4229 0038                  		clr.b	$38(a1)
000214AC 4228 003A                  		clr.b	$3A(a0)
000214B0                            
000214B0                            locret_155B6:
000214B0 4E75                       		rts	
000214B2                            ; ===========================================================================
000214B2                            
000214B2                            loc_155B8:
000214B2 4A28 003A                  		tst.b	$3A(a0)
000214B6 6600                       		bne.s	loc_155E2
000214B8 117C 0001 003A             		move.b	#1,$3A(a0)
000214BE 0829 0002 0022             		btst	#2,status(a1)
000214C4 6600                       		bne.s	loc_155D0
000214C6 4229 001C                  		clr.b	anim(a1)
000214CA                            
000214CA                            loc_155D0:
000214CA 08A9 0005 0022             		bclr	#5,status(a1)
000214D0 137C 0001 001D             		move.b	#1,next_anim(a1)
000214D6 137C 0001 0038             		move.b	#1,$38(a1)
000214DC                            
000214DC                            loc_155E2:
000214DC 3029 0020                  		move.w	inertia(a1),d0
000214E0 4A68 0036                  		tst.w	$36(a0)
000214E4 6A00                       		bpl.s	loc_15608
000214E6 0C40 FC00                  		cmpi.w	#-$400,d0
000214EA 6F00                       		ble.s	loc_155FA
000214EC 337C FC00 0020             		move.w	#-$400,inertia(a1)
000214F2 4E75                       		rts	
000214F4                            ; ===========================================================================
000214F4                            
000214F4                            loc_155FA:
000214F4 0C40 F100                  		cmpi.w	#-$F00,d0
000214F8 6C00                       		bge.s	locret_15606
000214FA 337C F100 0020             		move.w	#-$F00,inertia(a1)
00021500                            
00021500                            locret_15606:
00021500 4E75                       		rts	
00021502                            ; ===========================================================================
00021502                            
00021502                            loc_15608:
00021502 0C40 0400                  		cmpi.w	#$400,d0
00021506 6C00                       		bge.s	loc_15616
00021508 337C 0400 0020             		move.w	#$400,inertia(a1)
0002150E 4E75                       		rts	
00021510                            ; ===========================================================================
00021510                            
00021510                            loc_15616:
00021510 0C40 0F00                  		cmpi.w	#$F00,d0
00021514 6F00                       		ble.s	locret_15622
00021516 337C 0F00 0020             		move.w	#$F00,inertia(a1)
0002151C                            
0002151C                            locret_15622:
0002151C 4E75                       		rts	
0002151E                            ; ===========================================================================
0002151E                            
0002151E                            Obj67_MoveSpot:				; XREF: Obj67_Action
0002151E 3028 0036                  		move.w	$36(a0),d0
00021522 D168 0026                  		add.w	d0,$26(a0)
00021526 1028 0026                  		move.b	$26(a0),d0
0002152A 4EB9 0000 8F30             		jsr	(CalcSine).l
00021530 3428 0030                  		move.w	$30(a0),d2
00021534 3628 0032                  		move.w	$32(a0),d3
00021538 7800                       		moveq	#0,d4
0002153A 1828 0034                  		move.b	$34(a0),d4
0002153E E14C                       		lsl.w	#8,d4
00021540 2A04                       		move.l	d4,d5
00021542 C9C0                       		muls.w	d0,d4
00021544 4844                       		swap	d4
00021546 CBC1                       		muls.w	d1,d5
00021548 4845                       		swap	d5
0002154A D842                       		add.w	d2,d4
0002154C DA43                       		add.w	d3,d5
0002154E 3144 000C                  		move.w	d4,$C(a0)
00021552 3145 0008                  		move.w	d5,8(a0)
00021556 4E75                       		rts	
00021558                            ; ===========================================================================
00021558                            
00021558                            Obj67_ChkDel:				; XREF: Obj67_Action
00021558 3028 0032                  		move.w	$32(a0),d0
0002155C 0240 FF80                  		andi.w	#-$80,d0
00021560 3238 F700                  		move.w	($FFFFF700).w,d1
00021564 0441 0080                  		subi.w	#$80,d1
00021568 0241 FF80                  		andi.w	#-$80,d1
0002156C 9041                       		sub.w	d1,d0
0002156E 0C40 0280                  		cmpi.w	#$280,d0
00021572 6200                       		bhi.s	Obj67_Delete
00021574 4EF9 0001 5D72             		jmp	DisplaySprite
0002157A                            ; ===========================================================================
0002157A                            
0002157A                            Obj67_Delete:
0002157A 4EF9 0001 5D26             		jmp	DeleteObject
00021580                            ; ===========================================================================
00021580                            ; ---------------------------------------------------------------------------
00021580                            ; Sprite mappings - disc that you run around (SBZ)
00021580                            ; (It's just a small blob that moves around in a circle. The disc itself is
00021580                            ; part of the level tiles.)
00021580                            ; ---------------------------------------------------------------------------
00021580                            Map_obj67:
00021580                            	include "_maps\obj67.asm"
00021580                            ; ---------------------------------------------------------------------------
00021580                            ; Sprite mappings - disc that you run around (SBZ)
00021580                            ; (It's just a small blob that moves around in a circle. The disc itself is
00021580                            ; part of the level tiles.)
00021580                            ; ---------------------------------------------------------------------------
00021580 0000                       		dc.w byte_15688-Map_obj67
00021582 01                         byte_15688:	dc.b 1
00021583 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00021588                            		even
00021588                            		even
00021588                            
00021588                            ; ===========================================================================
00021588                            ; ---------------------------------------------------------------------------
00021588                            ; Object 68 - conveyor belts (SBZ)
00021588                            ; ---------------------------------------------------------------------------
00021588                            
00021588                            Obj68:					; XREF: Obj_Index
00021588 7000                       		moveq	#0,d0
0002158A 1028 0024                  		move.b	routine(a0),d0
0002158E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00021592 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00021596                            ; ===========================================================================
00021596 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00021598 0000                       		dc.w Obj68_Action-Obj68_Index
0002159A                            ; ===========================================================================
0002159A                            
0002159A                            Obj68_Main:				; XREF: Obj68_Index
0002159A 5428 0024                  		addq.b	#2,routine(a0)
0002159E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000215A4 1228 0028                  		move.b	subtype(a0),d1	; get object type
000215A8 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000215AC 6700                       		beq.s	loc_156BA	; if zero, branch
000215AE 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000215B4                            
000215B4                            loc_156BA:
000215B4 1228 0028                  		move.b	subtype(a0),d1	; get object type
000215B8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000215BC 4881                       		ext.w	d1
000215BE E841                       		asr.w	#4,d1
000215C0 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000215C4                            
000215C4                            Obj68_Action:				; XREF: Obj68_Index
000215C4 6100                       		bsr.s	Obj68_MoveSonic
000215C6 4EF9 0001 91E6             		jmp		MarkObjGone3
000215CC                            ; ===========================================================================
000215CC                            
000215CC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000215CC 7400                       		moveq	#0,d2
000215CE 1428 0038                  		move.b	$38(a0),d2
000215D2 3602                       		move.w	d2,d3
000215D4 D643                       		add.w	d3,d3
000215D6 43F8 D000                  		lea	($FFFFD000).w,a1
000215DA 3029 0008                  		move.w	8(a1),d0
000215DE 9068 0008                  		sub.w	8(a0),d0
000215E2 D042                       		add.w	d2,d0
000215E4 B043                       		cmp.w	d3,d0
000215E6 6400                       		bcc.s	locret_1572E
000215E8 3229 000C                  		move.w	$C(a1),d1
000215EC 9268 000C                  		sub.w	$C(a0),d1
000215F0 0641 0030                  		addi.w	#$30,d1
000215F4 0C41 0030                  		cmpi.w	#$30,d1
000215F8 6400                       		bcc.s	locret_1572E
000215FA 0829 0001 0022             		btst	#1,status(a1)
00021600 6600                       		bne.s	locret_1572E
00021602 3028 0036                  		move.w	$36(a0),d0
00021606 D169 0008                  		add.w	d0,8(a1)
0002160A                            
0002160A                            locret_1572E:
0002160A 4E75                       		rts	
0002160C                            
0002160C                            ; ===========================================================================
0002160C                            ; ---------------------------------------------------------------------------
0002160C                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0002160C                            ; ---------------------------------------------------------------------------
0002160C                            
0002160C                            Obj69:					; XREF: Obj_Index
0002160C 7000                       		moveq	#0,d0
0002160E 1028 0024                  		move.b	routine(a0),d0
00021612 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00021616 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0002161A                            ; ===========================================================================
0002161A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0002161C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0002161E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00021620                            ; ===========================================================================
00021620                            
00021620                            Obj69_Main:				; XREF: Obj69_Index
00021620 5428 0024                  		addq.b	#2,routine(a0)
00021624 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0002162C 317C 4492 0002             		move.w	#$4492,2(a0)
00021632 0028 0004 0001             		ori.b	#4,1(a0)
00021638 117C 0080 0023             		move.b	#$80,width_pixels(a0)
0002163E 7000                       		moveq	#0,d0
00021640 1028 0028                  		move.b	subtype(a0),d0
00021644 0240 000F                  		andi.w	#$F,d0
00021648 C0FC 003C                  		mulu.w	#$3C,d0
0002164C 3140 0032                  		move.w	d0,$32(a0)
00021650 4A28 0028                  		tst.b	subtype(a0)
00021654 6A00                       		bpl.s	Obj69_Trapdoor
00021656 5428 0024                  		addq.b	#2,routine(a0)
0002165A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00021662 317C 04DF 0002             		move.w	#$4DF,2(a0)
00021668 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0002166E 117C 0002 001C             		move.b	#2,anim(a0)
00021674 7000                       		moveq	#0,d0
00021676 1028 0028                  		move.b	subtype(a0),d0	; get object type
0002167A 3200                       		move.w	d0,d1
0002167C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00021680 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00021684 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00021688 3140 0032                  		move.w	d0,$32(a0)
0002168C 0241 0070                  		andi.w	#$70,d1
00021690 0641 0010                  		addi.w	#$10,d1
00021694 E549                       		lsl.w	#2,d1
00021696 5341                       		subq.w	#1,d1
00021698 3141 0036                  		move.w	d1,$36(a0)
0002169C 6000                       		bra.s	Obj69_Spinner
0002169E                            ; ===========================================================================
0002169E                            
0002169E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0002169E 5368 0030                  		subq.w	#1,$30(a0)
000216A2 6A00                       		bpl.s	Obj69_Animate
000216A4 3168 0032 0030             		move.w	$32(a0),$30(a0)
000216AA 0868 0000 001C             		bchg	#0,anim(a0)
000216B0 4A28 0001                  		tst.b	1(a0)
000216B4 6A00                       		bpl.s	Obj69_Animate
000216B6 303C 00BB                  		move.w	#$BB,d0
000216BA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
000216C0                            
000216C0                            Obj69_Animate:
000216C0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000216C6 4EB9 0001 2754             		jsr	AnimateSprite
000216CC 4A28 001A                  		tst.b	mapping_frame(a0)		; is frame number 0 displayed?
000216D0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000216D2 323C 004B                  		move.w	#$4B,d1
000216D6 343C 000C                  		move.w	#$C,d2
000216DA 3602                       		move.w	d2,d3
000216DC 5243                       		addq.w	#1,d3
000216DE 3828 0008                  		move.w	8(a0),d4
000216E2 4EB9 0001 958A             		jsr	SolidObject
000216E8 4EF9 0001 8EA6             		jmp	MarkObjGone
000216EE                            ; ===========================================================================
000216EE                            
000216EE                            Obj69_NotSolid:
000216EE 0828 0003 0022             		btst	#3,status(a0)
000216F4 6700                       		beq.s	Obj69_Display
000216F6 43F8 D000                  		lea	($FFFFD000).w,a1
000216FA 08A9 0003 0022             		bclr	#3,status(a1)
00021700 08A8 0003 0022             		bclr	#3,status(a0)
00021706 4228 0025                  		clr.b	routine_secondary(a0)
0002170A                            
0002170A                            Obj69_Display:
0002170A 4EF9 0001 8EA6             		jmp	MarkObjGone
00021710                            ; ===========================================================================
00021710                            
00021710                            Obj69_Spinner:				; XREF: Obj69_Index
00021710 3038 FE04                  		move.w	($FFFFFE04).w,d0
00021714 C068 0036                  		and.w	$36(a0),d0
00021718 6600                       		bne.s	Obj69_Delay
0002171A 117C 0001 0034             		move.b	#1,$34(a0)
00021720                            
00021720                            Obj69_Delay:
00021720 4A28 0034                  		tst.b	$34(a0)
00021724 6700                       		beq.s	Obj69_Animate2
00021726 5368 0030                  		subq.w	#1,$30(a0)
0002172A 6A00                       		bpl.s	Obj69_Animate2
0002172C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00021732 4228 0034                  		clr.b	$34(a0)
00021736 0868 0000 001C             		bchg	#0,anim(a0)
0002173C                            
0002173C                            Obj69_Animate2:
0002173C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00021742 4EB9 0001 2754             		jsr	AnimateSprite
00021748 4A28 001A                  		tst.b	mapping_frame(a0)		; check	if frame number	0 is displayed
0002174C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0002174E 323C 001B                  		move.w	#$1B,d1
00021752 343C 0007                  		move.w	#7,d2
00021756 3602                       		move.w	d2,d3
00021758 5243                       		addq.w	#1,d3
0002175A 3828 0008                  		move.w	8(a0),d4
0002175E 4EB9 0001 958A             		jsr	SolidObject
00021764 4EF9 0001 8EA6             		jmp	MarkObjGone
0002176A                            ; ===========================================================================
0002176A                            
0002176A                            Obj69_NotSolid2:
0002176A 0828 0003 0022             		btst	#3,status(a0)
00021770 6700                       		beq.s	Obj69_Display2
00021772 43F8 D000                  		lea	($FFFFD000).w,a1
00021776 08A9 0003 0022             		bclr	#3,status(a1)
0002177C 08A8 0003 0022             		bclr	#3,status(a0)
00021782 4228 0025                  		clr.b	routine_secondary(a0)
00021786                            
00021786                            Obj69_Display2:
00021786 4EF9 0001 8EA6             		jmp	MarkObjGone
0002178C                            ; ===========================================================================
0002178C                            Ani_obj69:
0002178C                            	include "_anim\obj69.asm"
0002178C                            ; ---------------------------------------------------------------------------
0002178C                            ; Animation script - trapdoor (SBZ)
0002178C                            ; ---------------------------------------------------------------------------
0002178C 0000                       		dc.w byte_158AC-Ani_obj69
0002178E 0000                       		dc.w byte_158B2-Ani_obj69
00021790 0000                       		dc.w byte_158B8-Ani_obj69
00021792 0000                       		dc.w byte_158CC-Ani_obj69
00021794 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0002179A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000217A0 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000217AD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000217B4 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000217C1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000217C8                            		even
000217C8                            		even
000217C8                            
000217C8                            ; ---------------------------------------------------------------------------
000217C8                            ; Sprite mappings - trapdoor (SBZ)
000217C8                            ; ---------------------------------------------------------------------------
000217C8                            Map_obj69:
000217C8                            	include "_maps\obj69.asm"
000217C8                            ; ---------------------------------------------------------------------------
000217C8                            ; Sprite mappings - trapdoor (SBZ)
000217C8                            ; ---------------------------------------------------------------------------
000217C8 0000                       		dc.w byte_158E6-Map_obj69
000217CA 0000                       		dc.w byte_158FB-Map_obj69
000217CC 0000                       		dc.w byte_15924-Map_obj69
000217CE 04                         byte_158E6:	dc.b 4
000217CF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000217D4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000217D9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000217DE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000217E3 08                         byte_158FB:	dc.b 8
000217E4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000217E9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000217EE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000217F3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000217F8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000217FD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00021802 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00021807 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0002180C 04                         byte_15924:	dc.b 4
0002180D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00021812 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00021817 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0002181C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00021822 00                         		even
00021822 00                         		even
00021822                            
00021822                            ; ---------------------------------------------------------------------------
00021822                            ; Sprite mappings - spinning platforms (SBZ)
00021822                            ; ---------------------------------------------------------------------------
00021822                            Map_obj69a:
00021822                            	include "_maps\obj69a.asm"
00021822                            ; ---------------------------------------------------------------------------
00021822                            ; Sprite mappings - spinning platforms (SBZ)
00021822                            ; ---------------------------------------------------------------------------
00021822 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00021826 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0002182A 0000                       		dc.w byte_15970-Map_obj69a
0002182C 02                         byte_15944:	dc.b 2
0002182D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00021832 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00021837 02                         byte_1594F:	dc.b 2
00021838 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0002183D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00021842 02                         byte_1595A:	dc.b 2
00021843 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00021848 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0002184D 02                         byte_15965:	dc.b 2
0002184E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00021853 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00021858 02                         byte_15970:	dc.b 2
00021859 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0002185E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00021864 00                         		even
00021864 00                         		even
00021864                            
00021864                            ; ===========================================================================
00021864                            ; ---------------------------------------------------------------------------
00021864                            ; Object 6A - ground saws and pizza cutters (SBZ)
00021864                            ; ---------------------------------------------------------------------------
00021864                            
00021864                            Obj6A:					; XREF: Obj_Index
00021864 7000                       		moveq	#0,d0
00021866 1028 0024                  		move.b	routine(a0),d0
0002186A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0002186E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00021872                            ; ===========================================================================
00021872 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00021874 0000                       		dc.w Obj6A_Action-Obj6A_Index
00021876                            ; ===========================================================================
00021876                            
00021876                            Obj6A_Main:				; XREF: Obj6A_Index
00021876 5428 0024                  		addq.b	#2,routine(a0)
0002187A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00021882 317C 43B5 0002             		move.w	#$43B5,2(a0)
00021888 117C 0004 0001             		move.b	#4,1(a0)
0002188E 317C 0200 0018             		move.w	#$200,priority(a0)
00021894 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0002189A 3168 0008 003A             		move.w	8(a0),$3A(a0)
000218A0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000218A6 0C28 0003 0028             		cmpi.b	#3,subtype(a0)
000218AC 6400                       		bcc.s	Obj6A_Action
000218AE 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
000218B4                            
000218B4                            Obj6A_Action:				; XREF: Obj6A_Index
000218B4 7000                       		moveq	#0,d0
000218B6 1028 0028                  		move.b	subtype(a0),d0
000218BA 0240 0007                  		andi.w	#7,d0
000218BE D040                       		add.w	d0,d0
000218C0 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000218C4 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000218C8 3028 003A                  		move.w	$3A(a0),d0
000218CC 4EF9 0001 8EDC             		jmp		MarkObjGone2
000218D2                            ; ===========================================================================
000218D2 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000218D6 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000218DA 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000218DC                            ; ===========================================================================
000218DC                            
000218DC                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000218DC 4E75                       		rts	
000218DE                            ; ===========================================================================
000218DE                            
000218DE                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000218DE 323C 0060                  		move.w	#$60,d1
000218E2 7000                       		moveq	#0,d0
000218E4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000218E8 0828 0000 0022             		btst	#0,status(a0)
000218EE 6700                       		beq.s	Obj6A_Animate01
000218F0 4440                       		neg.w	d0
000218F2 D041                       		add.w	d1,d0
000218F4                            
000218F4                            Obj6A_Animate01:
000218F4 3228 003A                  		move.w	$3A(a0),d1
000218F8 9240                       		sub.w	d0,d1
000218FA 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000218FE 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00021902 6A00                       		bpl.s	loc_15A46
00021904 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)	; time between frame changes
0002190A 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
00021910                            
00021910                            loc_15A46:
00021910 4A28 0001                  		tst.b	1(a0)
00021914 6A00                       		bpl.s	locret_15A60
00021916 3038 FE04                  		move.w	($FFFFFE04).w,d0
0002191A 0240 000F                  		andi.w	#$F,d0
0002191E 6600                       		bne.s	locret_15A60
00021920 303C 00B0                  		move.w	#$B0,d0
00021924 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
0002192A                            
0002192A                            locret_15A60:
0002192A 4E75                       		rts	
0002192C                            ; ===========================================================================
0002192C                            
0002192C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0002192C 323C 0030                  		move.w	#$30,d1
00021930 7000                       		moveq	#0,d0
00021932 1038 FE64                  		move.b	($FFFFFE64).w,d0
00021936 0828 0000 0022             		btst	#0,status(a0)
0002193C 6700                       		beq.s	Obj6A_Animate02
0002193E 4440                       		neg.w	d0
00021940 0640 0080                  		addi.w	#$80,d0
00021944                            
00021944                            Obj6A_Animate02:
00021944 3228 0038                  		move.w	$38(a0),d1
00021948 9240                       		sub.w	d0,d1
0002194A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0002194E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00021952 6A00                       		bpl.s	loc_15A96
00021954 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
0002195A 0868 0000 001A             		bchg	#0,mapping_frame(a0)
00021960                            
00021960                            loc_15A96:
00021960 4A28 0001                  		tst.b	1(a0)
00021964 6A00                       		bpl.s	locret_15AB0
00021966 1038 FE64                  		move.b	($FFFFFE64).w,d0
0002196A 0C00 0018                  		cmpi.b	#$18,d0
0002196E 6600                       		bne.s	locret_15AB0
00021970 303C 00B0                  		move.w	#$B0,d0
00021974 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
0002197A                            
0002197A                            locret_15AB0:
0002197A 4E75                       		rts	
0002197C                            ; ===========================================================================
0002197C                            
0002197C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0002197C 4A28 003D                  		tst.b	$3D(a0)
00021980 6600                       		bne.s	Obj6A_Animate03
00021982 3038 D008                  		move.w	($FFFFD008).w,d0
00021986 0440 00C0                  		subi.w	#$C0,d0
0002198A 6500                       		bcs.s	loc_15B02
0002198C 9068 0008                  		sub.w	8(a0),d0
00021990 6500                       		bcs.s	loc_15B02
00021992 3038 D00C                  		move.w	($FFFFD00C).w,d0
00021996 0440 0080                  		subi.w	#$80,d0
0002199A B068 000C                  		cmp.w	$C(a0),d0
0002199E 6400                       		bcc.s	locret_15B04
000219A0 0640 0100                  		addi.w	#$100,d0
000219A4 B068 000C                  		cmp.w	$C(a0),d0
000219A8 6500                       		bcs.s	locret_15B04
000219AA 117C 0001 003D             		move.b	#1,$3D(a0)
000219B0 317C 0600 0010             		move.w	#$600,x_vel(a0)	; move object to the right
000219B6 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
000219BC 117C 0002 001A             		move.b	#2,mapping_frame(a0)
000219C2 303C 00B0                  		move.w	#$B0,d0
000219C6 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
000219CC                            
000219CC                            loc_15B02:
000219CC 588F                       		addq.l	#4,sp
000219CE                            
000219CE                            locret_15B04:
000219CE 4E75                       		rts	
000219D0                            ; ===========================================================================
000219D0                            
000219D0                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000219D0 4EB9 0001 5D0C             		jsr	SpeedToPos
000219D6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000219DC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000219E0 6A00                       		bpl.s	locret_15B24
000219E2 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
000219E8 0868 0000 001A             		bchg	#0,mapping_frame(a0)
000219EE                            
000219EE                            locret_15B24:
000219EE 4E75                       		rts	
000219F0                            ; ===========================================================================
000219F0                            
000219F0                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000219F0 4A28 003D                  		tst.b	$3D(a0)
000219F4 6600                       		bne.s	Obj6A_Animate04
000219F6 3038 D008                  		move.w	($FFFFD008).w,d0
000219FA 0640 00E0                  		addi.w	#$E0,d0
000219FE 9068 0008                  		sub.w	8(a0),d0
00021A02 6400                       		bcc.s	loc_15B74
00021A04 3038 D00C                  		move.w	($FFFFD00C).w,d0
00021A08 0440 0080                  		subi.w	#$80,d0
00021A0C B068 000C                  		cmp.w	$C(a0),d0
00021A10 6400                       		bcc.s	locret_15B76
00021A12 0640 0100                  		addi.w	#$100,d0
00021A16 B068 000C                  		cmp.w	$C(a0),d0
00021A1A 6500                       		bcs.s	locret_15B76
00021A1C 117C 0001 003D             		move.b	#1,$3D(a0)
00021A22 317C FA00 0010             		move.w	#-$600,x_vel(a0)	; move object to the left
00021A28 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
00021A2E 117C 0002 001A             		move.b	#2,mapping_frame(a0)
00021A34 303C 00B0                  		move.w	#$B0,d0
00021A38 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021A3E                            
00021A3E                            loc_15B74:
00021A3E 588F                       		addq.l	#4,sp
00021A40                            
00021A40                            locret_15B76:
00021A40 4E75                       		rts	
00021A42                            ; ===========================================================================
00021A42                            
00021A42                            Obj6A_Animate04:
00021A42 4EB9 0001 5D0C             		jsr	SpeedToPos
00021A48 3168 0008 003A             		move.w	8(a0),$3A(a0)
00021A4E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00021A52 6A00                       		bpl.s	locret_15B96
00021A54 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
00021A5A 0868 0000 001A             		bchg	#0,mapping_frame(a0)
00021A60                            
00021A60                            locret_15B96:
00021A60 4E75                       		rts	
00021A62                            ; ===========================================================================
00021A62                            ; ---------------------------------------------------------------------------
00021A62                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00021A62                            ; ---------------------------------------------------------------------------
00021A62                            Map_obj6A:
00021A62                            	include "_maps\obj6A.asm"
00021A62                            ; ---------------------------------------------------------------------------
00021A62                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00021A62                            ; ---------------------------------------------------------------------------
00021A62 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00021A66 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00021A6A 07                         byte_15BA0:	dc.b 7
00021A6B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00021A70 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00021A75 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00021A7A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00021A7F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00021A84 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00021A89 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00021A8E 07                         byte_15BC4:	dc.b 7
00021A8F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00021A94 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00021A99 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00021A9E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00021AA3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00021AA8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00021AAD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00021AB2 04                         byte_15BE8:	dc.b 4
00021AB3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00021AB8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00021ABD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00021AC2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00021AC7 04                         byte_15BFD:	dc.b 4
00021AC8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00021ACD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00021AD2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00021AD7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00021ADC                            		even
00021ADC                            		even
00021ADC                            
00021ADC                            ; ===========================================================================
00021ADC                            ; ---------------------------------------------------------------------------
00021ADC                            ; Object 6B - stomper (SBZ)
00021ADC                            ; ---------------------------------------------------------------------------
00021ADC                            
00021ADC                            Obj6B:					; XREF: Obj_Index
00021ADC 7000                       		moveq	#0,d0
00021ADE 1028 0024                  		move.b	routine(a0),d0
00021AE2 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00021AE6 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00021AEA                            ; ===========================================================================
00021AEA 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00021AEC 0000                       		dc.w Obj6B_Action-Obj6B_Index
00021AEE                            
00021AEE 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00021AF2 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00021AF6 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00021AFA 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00021AFE 8040 0005                  		dc.b  $80, $40,	  0,   5
00021B02                            ; ===========================================================================
00021B02                            
00021B02                            Obj6B_Main:				; XREF: Obj6B_Index
00021B02 5428 0024                  		addq.b	#2,routine(a0)
00021B06 7000                       		moveq	#0,d0
00021B08 1028 0028                  		move.b	subtype(a0),d0
00021B0C E448                       		lsr.w	#2,d0
00021B0E 0240 001C                  		andi.w	#$1C,d0
00021B12 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00021B16 115B 0023                  		move.b	(a3)+,width_pixels(a0)
00021B1A 115B 0016                  		move.b	(a3)+,$16(a0)
00021B1E E448                       		lsr.w	#2,d0
00021B20 1140 001A                  		move.b	d0,mapping_frame(a0)
00021B24 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00021B2C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00021B32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00021B38 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00021B3A 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00021B40 6700                       		beq.s	Obj6B_SBZ3
00021B42                            
00021B42                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00021B42                            ;		lea	(v_objstate).w,a2
00021B42 7000                       		moveq	#0,d0
00021B44 3028 0014                  		move.w	respawn_index(a0),d0
00021B48                            ;        move.w	respawn_index(a0),d0
00021B48 3440                       	    movea.w	d0,a2
00021B4A 6700                       		beq.s	Obj6B_Delete
00021B4C 0892 0007                  		bclr	#7,(a2)
00021B50                            
00021B50                            Obj6B_Delete:
00021B50 4EF9 0001 5D26             		jmp	DeleteObject
00021B56                            ; ===========================================================================
00021B56                            
00021B56                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00021B56 317C 41F0 0002             		move.w	#$41F0,2(a0)
00021B5C 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00021B62 6600                       		bne.s	Obj6B_SBZ12
00021B64                            ;		lea	(v_objstate).w,a2
00021B64 7000                       		moveq	#0,d0
00021B66 3028 0014                  		move.w	respawn_index(a0),d0
00021B6A                            ;        move.w	respawn_index(a0),d0
00021B6A 3440                       	    movea.w	d0,a2
00021B6C 6700                       		beq.s	Obj6B_SBZ12
00021B6E 0812 0000                  		btst	#0,(a2)
00021B72 6700                       		beq.s	Obj6B_SBZ12
00021B74 4238 F7CB                  		clr.b	($FFFFF7CB).w
00021B78 60C8                       		bra.s	Obj6B_ChkGone
00021B7A                            ; ===========================================================================
00021B7A                            
00021B7A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00021B7A 0028 0004 0001             		ori.b	#4,1(a0)
00021B80 317C 0200 0018             		move.w	#$200,priority(a0)
00021B86 3168 0008 0034             		move.w	8(a0),$34(a0)
00021B8C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00021B92 7000                       		moveq	#0,d0
00021B94 101B                       		move.b	(a3)+,d0
00021B96 3140 003C                  		move.w	d0,$3C(a0)
00021B9A 7000                       		moveq	#0,d0
00021B9C 1028 0028                  		move.b	subtype(a0),d0
00021BA0 6A00                       		bpl.s	Obj6B_Action
00021BA2 0200 000F                  		andi.b	#$F,d0
00021BA6 1140 003E                  		move.b	d0,parent(a0)
00021BAA 1153 0028                  		move.b	(a3),subtype(a0)
00021BAE 0C13 0005                  		cmpi.b	#5,(a3)
00021BB2 6600                       		bne.s	Obj6B_ChkGone2
00021BB4 08E8 0004 0001             		bset	#4,1(a0)
00021BBA                            
00021BBA                            Obj6B_ChkGone2:
00021BBA                            ;		lea	(v_objstate).w,a2
00021BBA 7000                       		moveq	#0,d0
00021BBC 3028 0014                  		move.w	respawn_index(a0),d0
00021BC0                            ;        move.w	respawn_index(a0),d0
00021BC0 3440                       	    movea.w	d0,a2
00021BC2 6700                       		beq.s	Obj6B_Action
00021BC4 0892 0007                  		bclr	#7,(a2)
00021BC8                            
00021BC8                            Obj6B_Action:				; XREF: Obj6B_Index
00021BC8 3F28 0008                  		move.w	8(a0),-(sp)
00021BCC 7000                       		moveq	#0,d0
00021BCE 1028 0028                  		move.b	subtype(a0),d0
00021BD2 0240 000F                  		andi.w	#$F,d0
00021BD6 D040                       		add.w	d0,d0
00021BD8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00021BDC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00021BE0 381F                       		move.w	(sp)+,d4
00021BE2 4A28 0001                  		tst.b	1(a0)
00021BE6 6A00                       		bpl.s	Obj6B_ChkDel
00021BE8 7200                       		moveq	#0,d1
00021BEA 1228 0023                  		move.b	width_pixels(a0),d1
00021BEE 0641 000B                  		addi.w	#$B,d1
00021BF2 7400                       		moveq	#0,d2
00021BF4 1428 0016                  		move.b	$16(a0),d2
00021BF8 3602                       		move.w	d2,d3
00021BFA 5243                       		addq.w	#1,d3
00021BFC 4EB9 0001 958A             		jsr	SolidObject
00021C02                            
00021C02                            Obj6B_ChkDel:
00021C02 3028 0034                  		move.w	$34(a0),d0
00021C06 0240 FF80                  		andi.w	#$FF80,d0
00021C0A 3238 F700                  		move.w	($FFFFF700).w,d1
00021C0E 0441 0080                  		subi.w	#$80,d1
00021C12 0241 FF80                  		andi.w	#$FF80,d1
00021C16 9041                       		sub.w	d1,d0
00021C18 0C40 0280                  		cmpi.w	#$280,d0
00021C1C 6200                       		bhi.s	loc_15D64
00021C1E 4EF9 0001 5D72             		jmp	DisplaySprite
00021C24                            ; ===========================================================================
00021C24                            
00021C24                            loc_15D64:
00021C24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00021C2A 6600                       		bne.s	Obj6B_Delete2
00021C2C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00021C30                            ;		lea	(v_objstate).w,a2
00021C30 7000                       		moveq	#0,d0
00021C32 3028 0014                  		move.w	respawn_index(a0),d0
00021C36                            ;        move.w	respawn_index(a0),d0
00021C36 3440                       	    movea.w	d0,a2
00021C38 6700                       		beq.s	Obj6B_Delete2
00021C3A 0892 0007                  		bclr	#7,(a2)
00021C3E                            
00021C3E                            Obj6B_Delete2:
00021C3E 4EF9 0001 5D26             		jmp	DeleteObject
00021C44                            ; ===========================================================================
00021C44 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00021C48 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00021C4C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00021C50                            ; ===========================================================================
00021C50                            
00021C50                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00021C50 4E75                       		rts	
00021C52                            ; ===========================================================================
00021C52                            
00021C52                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00021C52 4A28 0038                  		tst.b	$38(a0)
00021C56 6600                       		bne.s	loc_15DB4
00021C58 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00021C5C 7000                       		moveq	#0,d0
00021C5E 1028 003E                  		move.b	parent(a0),d0
00021C62 0832 0000 0000             		btst	#0,(a2,d0.w)
00021C68 6700                       		beq.s	loc_15DC2
00021C6A 117C 0001 0038             		move.b	#1,$38(a0)
00021C70                            
00021C70                            loc_15DB4:
00021C70 3028 003C                  		move.w	$3C(a0),d0
00021C74 B068 003A                  		cmp.w	$3A(a0),d0
00021C78 6700                       		beq.s	loc_15DE0
00021C7A 5468 003A                  		addq.w	#2,$3A(a0)
00021C7E                            
00021C7E                            loc_15DC2:
00021C7E 3028 003A                  		move.w	$3A(a0),d0
00021C82 0828 0000 0022             		btst	#0,status(a0)
00021C88 6700                       		beq.s	loc_15DD4
00021C8A 4440                       		neg.w	d0
00021C8C 0640 0080                  		addi.w	#$80,d0
00021C90                            
00021C90                            loc_15DD4:
00021C90 3228 0034                  		move.w	$34(a0),d1
00021C94 9240                       		sub.w	d0,d1
00021C96 3141 0008                  		move.w	d1,8(a0)
00021C9A 4E75                       		rts	
00021C9C                            ; ===========================================================================
00021C9C                            
00021C9C                            loc_15DE0:
00021C9C 5228 0028                  		addq.b	#1,subtype(a0)
00021CA0 317C 00B4 0036             		move.w	#$B4,$36(a0)
00021CA6 4228 0038                  		clr.b	$38(a0)
00021CAA                            ;		lea	(v_objstate).w,a2
00021CAA 7000                       		moveq	#0,d0
00021CAC 3028 0014                  		move.w	respawn_index(a0),d0
00021CB0                            ;        move.w	respawn_index(a0),d0
00021CB0 3440                       	    movea.w	d0,a2
00021CB2 67CA                       		beq.s	loc_15DC2
00021CB4 08D2 0000                  		bset	#0,(a2)
00021CB8 60C4                       		bra.s	loc_15DC2
00021CBA                            ; ===========================================================================
00021CBA                            
00021CBA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00021CBA 4A28 0038                  		tst.b	$38(a0)
00021CBE 6600                       		bne.s	loc_15E14
00021CC0 5368 0036                  		subq.w	#1,$36(a0)
00021CC4 6600                       		bne.s	loc_15E1E
00021CC6 117C 0001 0038             		move.b	#1,$38(a0)
00021CCC                            
00021CCC                            loc_15E14:
00021CCC 4A68 003A                  		tst.w	$3A(a0)
00021CD0 6700                       		beq.s	loc_15E3C
00021CD2 5568 003A                  		subq.w	#2,$3A(a0)
00021CD6                            
00021CD6                            loc_15E1E:
00021CD6 3028 003A                  		move.w	$3A(a0),d0
00021CDA 0828 0000 0022             		btst	#0,status(a0)
00021CE0 6700                       		beq.s	loc_15E30
00021CE2 4440                       		neg.w	d0
00021CE4 0640 0080                  		addi.w	#$80,d0
00021CE8                            
00021CE8                            loc_15E30:
00021CE8 3228 0034                  		move.w	$34(a0),d1
00021CEC 9240                       		sub.w	d0,d1
00021CEE 3141 0008                  		move.w	d1,8(a0)
00021CF2 4E75                       		rts	
00021CF4                            ; ===========================================================================
00021CF4                            
00021CF4                            loc_15E3C:
00021CF4 5328 0028                  		subq.b	#1,subtype(a0)
00021CF8 4228 0038                  		clr.b	$38(a0)
00021CFC                            ;		lea	(v_objstate).w,a2
00021CFC 7000                       		moveq	#0,d0
00021CFE 3028 0014                  		move.w	respawn_index(a0),d0
00021D02                            ;        move.w	respawn_index(a0),d0
00021D02 3440                       	    movea.w	d0,a2		
00021D04 67D0                       		beq.s	loc_15E1E
00021D06 0892 0000                  		bclr	#0,(a2)
00021D0A 60CA                       		bra.s	loc_15E1E
00021D0C                            ; ===========================================================================
00021D0C                            
00021D0C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00021D0C 4A28 0038                  		tst.b	$38(a0)
00021D10 6600                       		bne.s	loc_15E7C
00021D12 4A68 003A                  		tst.w	$3A(a0)
00021D16 6700                       		beq.s	loc_15E6A
00021D18 5368 003A                  		subq.w	#1,$3A(a0)
00021D1C 6000                       		bra.s	loc_15E8E
00021D1E                            ; ===========================================================================
00021D1E                            
00021D1E                            loc_15E6A:
00021D1E 5368 0036                  		subq.w	#1,$36(a0)
00021D22 6A00                       		bpl.s	loc_15E8E
00021D24 317C 003C 0036             		move.w	#$3C,$36(a0)
00021D2A 117C 0001 0038             		move.b	#1,$38(a0)
00021D30                            
00021D30                            loc_15E7C:
00021D30 5068 003A                  		addq.w	#8,$3A(a0)
00021D34 3028 003A                  		move.w	$3A(a0),d0
00021D38 B068 003C                  		cmp.w	$3C(a0),d0
00021D3C 6600                       		bne.s	loc_15E8E
00021D3E 4228 0038                  		clr.b	$38(a0)
00021D42                            
00021D42                            loc_15E8E:
00021D42 3028 003A                  		move.w	$3A(a0),d0
00021D46 0828 0000 0022             		btst	#0,status(a0)
00021D4C 6700                       		beq.s	loc_15EA0
00021D4E 4440                       		neg.w	d0
00021D50 0640 0038                  		addi.w	#$38,d0
00021D54                            
00021D54                            loc_15EA0:
00021D54 3228 0030                  		move.w	$30(a0),d1
00021D58 D240                       		add.w	d0,d1
00021D5A 3141 000C                  		move.w	d1,$C(a0)
00021D5E 4E75                       		rts	
00021D60                            ; ===========================================================================
00021D60                            
00021D60                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00021D60 4A28 0038                  		tst.b	$38(a0)
00021D64 6600                       		bne.s	loc_15ED0
00021D66 4A68 003A                  		tst.w	$3A(a0)
00021D6A 6700                       		beq.s	loc_15EBE
00021D6C 5168 003A                  		subq.w	#8,$3A(a0)
00021D70 6000                       		bra.s	loc_15EF0
00021D72                            ; ===========================================================================
00021D72                            
00021D72                            loc_15EBE:
00021D72 5368 0036                  		subq.w	#1,$36(a0)
00021D76 6A00                       		bpl.s	loc_15EF0
00021D78 317C 003C 0036             		move.w	#$3C,$36(a0)
00021D7E 117C 0001 0038             		move.b	#1,$38(a0)
00021D84                            
00021D84                            loc_15ED0:
00021D84 3028 003A                  		move.w	$3A(a0),d0
00021D88 B068 003C                  		cmp.w	$3C(a0),d0
00021D8C 6700                       		beq.s	loc_15EE0
00021D8E 5068 003A                  		addq.w	#8,$3A(a0)
00021D92 6000                       		bra.s	loc_15EF0
00021D94                            ; ===========================================================================
00021D94                            
00021D94                            loc_15EE0:
00021D94 5368 0036                  		subq.w	#1,$36(a0)
00021D98 6A00                       		bpl.s	loc_15EF0
00021D9A 317C 003C 0036             		move.w	#$3C,$36(a0)
00021DA0 4228 0038                  		clr.b	$38(a0)
00021DA4                            
00021DA4                            loc_15EF0:
00021DA4 3028 003A                  		move.w	$3A(a0),d0
00021DA8 0828 0000 0022             		btst	#0,status(a0)
00021DAE 6700                       		beq.s	loc_15F02
00021DB0 4440                       		neg.w	d0
00021DB2 0640 0038                  		addi.w	#$38,d0
00021DB6                            
00021DB6                            loc_15F02:
00021DB6 3228 0030                  		move.w	$30(a0),d1
00021DBA D240                       		add.w	d0,d1
00021DBC 3141 000C                  		move.w	d1,$C(a0)
00021DC0 4E75                       		rts	
00021DC2                            ; ===========================================================================
00021DC2                            
00021DC2                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00021DC2 4A28 0038                  		tst.b	$38(a0)
00021DC6 6600                       		bne.s	loc_15F3E
00021DC8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00021DCC 7000                       		moveq	#0,d0
00021DCE 1028 003E                  		move.b	parent(a0),d0
00021DD2 0832 0000 0000             		btst	#0,(a2,d0.w)
00021DD8 6700                       		beq.s	locret_15F5C
00021DDA 117C 0001 0038             		move.b	#1,$38(a0)
00021DE0                            ;		lea	(v_objstate).w,a2
00021DE0 7000                       		moveq	#0,d0
00021DE2 3028 0014                  		move.w	respawn_index(a0),d0
00021DE6                            ;        move.w	respawn_index(a0),d0
00021DE6 3440                       	    movea.w	d0,a2		
00021DE8 6700                       		beq.s	loc_15F3E
00021DEA 08D2 0000                  		bset	#0,(a2)
00021DEE                            
00021DEE                            loc_15F3E:
00021DEE 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00021DF6 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00021DFE 3168 0008 0034             		move.w	8(a0),$34(a0)
00021E04 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00021E0A 6700                       		beq.s	loc_15F5E
00021E0C                            
00021E0C                            locret_15F5C:
00021E0C 4E75                       		rts	
00021E0E                            ; ===========================================================================
00021E0E                            
00021E0E                            loc_15F5E:
00021E0E 4228 0028                  		clr.b	subtype(a0)
00021E12 4228 0038                  		clr.b	$38(a0)
00021E16 4E75                       		rts	
00021E18                            ; ===========================================================================
00021E18                            ; ---------------------------------------------------------------------------
00021E18                            ; Sprite mappings - stomper and	platforms (SBZ)
00021E18                            ; ---------------------------------------------------------------------------
00021E18                            Map_obj6B:
00021E18                            	include "_maps\obj6B.asm"
00021E18                            ; ---------------------------------------------------------------------------
00021E18                            ; Sprite mappings - stomper and	platforms (SBZ)
00021E18                            ; ---------------------------------------------------------------------------
00021E18 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00021E1C 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00021E20 0000                       		dc.w byte_15FB0-Map_obj6B
00021E22 04                         byte_15F72:	dc.b 4
00021E23 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00021E28 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00021E2D F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00021E32 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00021E37 08                         byte_15F87:	dc.b 8
00021E38 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00021E3D E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00021E42 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00021E47 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00021E4C 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00021E51 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00021E56 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00021E5B 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00021E60 0E                         byte_15FB0:	dc.b $E
00021E61 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00021E66 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00021E6B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00021E70 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00021E75 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00021E7A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00021E7F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00021E84 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00021E89 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00021E8E E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00021E93 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00021E98 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00021E9D 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00021EA2 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00021EA8 00                         		even
00021EA8 00                         		even
00021EA8                            
00021EA8                            ; ===========================================================================
00021EA8                            ; ---------------------------------------------------------------------------
00021EA8                            ; Object 6C - vanishing	platforms (SBZ)
00021EA8                            ; ---------------------------------------------------------------------------
00021EA8                            
00021EA8                            Obj6C:					; XREF: Obj_Index
00021EA8 7000                       		moveq	#0,d0
00021EAA 1028 0024                  		move.b	routine(a0),d0
00021EAE 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00021EB2 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00021EB6                            ; ===========================================================================
00021EB6 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00021EB8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021EBA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021EBC 0000                       		dc.w loc_16068-Obj6C_Index
00021EBE                            ; ===========================================================================
00021EBE                            
00021EBE                            Obj6C_Main:				; XREF: Obj6C_Index
00021EBE 5C28 0024                  		addq.b	#6,routine(a0)
00021EC2 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00021ECA 317C 44C3 0002             		move.w	#$44C3,2(a0)
00021ED0 0028 0004 0001             		ori.b	#4,1(a0)
00021ED6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00021EDC 317C 0200 0018             		move.w	#$200,priority(a0)
00021EE2 7000                       		moveq	#0,d0
00021EE4 1028 0028                  		move.b	subtype(a0),d0	; get object type
00021EE8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00021EEC 5240                       		addq.w	#1,d0		; add 1
00021EEE EF48                       		lsl.w	#7,d0		; multiply by $80
00021EF0 3200                       		move.w	d0,d1
00021EF2 5340                       		subq.w	#1,d0
00021EF4 3140 0030                  		move.w	d0,$30(a0)
00021EF8 3140 0032                  		move.w	d0,$32(a0)
00021EFC 7000                       		moveq	#0,d0
00021EFE 1028 0028                  		move.b	subtype(a0),d0	; get object type
00021F02 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00021F06 0641 0080                  		addi.w	#$80,d1
00021F0A C0C1                       		mulu.w	d1,d0
00021F0C E088                       		lsr.l	#8,d0
00021F0E 3140 0036                  		move.w	d0,$36(a0)
00021F12 5341                       		subq.w	#1,d1
00021F14 3141 0038                  		move.w	d1,$38(a0)
00021F18                            
00021F18                            loc_16068:				; XREF: Obj6C_Index
00021F18 3038 FE04                  		move.w	($FFFFFE04).w,d0
00021F1C 9068 0036                  		sub.w	$36(a0),d0
00021F20 C068 0038                  		and.w	$38(a0),d0
00021F24 6600                       		bne.s	Obj6C_Animate
00021F26 5928 0024                  		subq.b	#4,routine(a0)
00021F2A 6000                       		bra.s	Obj6C_Vanish
00021F2C                            ; ===========================================================================
00021F2C                            
00021F2C                            Obj6C_Animate:
00021F2C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00021F32 4EB9 0001 2754             		jsr	AnimateSprite
00021F38 4EF9 0001 8EA6             		jmp	MarkObjGone
00021F3E                            ; ===========================================================================
00021F3E                            
00021F3E                            Obj6C_Vanish:				; XREF: Obj6C_Index
00021F3E 5368 0030                  		subq.w	#1,$30(a0)
00021F42 6A00                       		bpl.s	loc_160AA
00021F44 317C 007F 0030             		move.w	#127,$30(a0)
00021F4A 4A28 001C                  		tst.b	anim(a0)
00021F4E 6700                       		beq.s	loc_160A4
00021F50 3168 0032 0030             		move.w	$32(a0),$30(a0)
00021F56                            
00021F56                            loc_160A4:
00021F56 0868 0000 001C             		bchg	#0,anim(a0)
00021F5C                            
00021F5C                            loc_160AA:
00021F5C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00021F62 4EB9 0001 2754             		jsr	AnimateSprite
00021F68 0828 0001 001A             		btst	#1,mapping_frame(a0)	; has platform vanished?
00021F6E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00021F70 0C28 0002 0024             		cmpi.b	#2,routine(a0)
00021F76 6600                       		bne.s	loc_160D6
00021F78 7200                       		moveq	#0,d1
00021F7A 1228 0023                  		move.b	width_pixels(a0),d1
00021F7E 4EB9 0000 F1D0             		jsr	(PlatformObject).l
00021F84 4EF9 0001 8EA6             		jmp	MarkObjGone
00021F8A                            ; ===========================================================================
00021F8A                            
00021F8A                            loc_160D6:
00021F8A 7200                       		moveq	#0,d1
00021F8C 1228 0023                  		move.b	width_pixels(a0),d1
00021F90 4EB9 0000 F310             		jsr	(ExitPlatform).l
00021F96 3428 0008                  		move.w	8(a0),d2
00021F9A 4EB9 0000 F576             		jsr	(MvSonicOnPtfm2).l
00021FA0 4EF9 0001 8EA6             		jmp	MarkObjGone
00021FA6                            ; ===========================================================================
00021FA6                            
00021FA6                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00021FA6 0828 0003 0022             		btst	#3,status(a0)
00021FAC 6700                       		beq.s	Obj6C_Display
00021FAE 43F8 D000                  		lea	($FFFFD000).w,a1
00021FB2 08A9 0003 0022             		bclr	#3,status(a1)
00021FB8 08A8 0003 0022             		bclr	#3,status(a0)
00021FBE 117C 0002 0024             		move.b	#2,routine(a0)
00021FC4 4228 0025                  		clr.b	routine_secondary(a0)
00021FC8                            
00021FC8                            Obj6C_Display:
00021FC8 4EF9 0001 8EA6             		jmp	MarkObjGone
00021FCE                            ; ===========================================================================
00021FCE                            Ani_obj6C:
00021FCE                            	include "_anim\obj6C.asm"
00021FCE                            ; ---------------------------------------------------------------------------
00021FCE                            ; Animation script - vanishing platforms (SBZ)
00021FCE                            ; ---------------------------------------------------------------------------
00021FCE 0000                       		dc.w byte_1611A-Ani_obj6C
00021FD0 0000                       		dc.w byte_16122-Ani_obj6C
00021FD2 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00021FDA 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00021FE2                            		even
00021FE2                            		even
00021FE2                            
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2                            ; Sprite mappings - vanishing platforms	(SBZ)
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2                            Map_obj6C:
00021FE2                            	include "_maps\obj6C.asm"
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2                            ; Sprite mappings - vanishing platforms	(SBZ)
00021FE2                            ; ---------------------------------------------------------------------------
00021FE2 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00021FE6 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00021FEA 01                         byte_16132:	dc.b 1
00021FEB F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00021FF0 01                         byte_16138:	dc.b 1
00021FF1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00021FF6 01                         byte_1613E:	dc.b 1
00021FF7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00021FFC 00                         byte_16144:	dc.b 0
00021FFE 00                         		even
00021FFE 00                         		even
00021FFE                            
00021FFE                            ; ===========================================================================
00021FFE                            ; ---------------------------------------------------------------------------
00021FFE                            ; Object 6E - electrocution orbs (SBZ)
00021FFE                            ; ---------------------------------------------------------------------------
00021FFE                            
00021FFE                            Obj6E:					; XREF: Obj_Index
00021FFE 7000                       		moveq	#0,d0
00022000 1028 0024                  		move.b	routine(a0),d0
00022004 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00022008 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0002200C                            ; ===========================================================================
0002200C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0002200E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00022010                            ; ===========================================================================
00022010                            
00022010                            Obj6E_Main:				; XREF: Obj6E_Index
00022010 5428 0024                  		addq.b	#2,routine(a0)
00022014 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0002201C 317C 047E 0002             		move.w	#$47E,2(a0)
00022022 0028 0004 0001             		ori.b	#4,1(a0)
00022028 117C 0028 0023             		move.b	#$28,width_pixels(a0)
0002202E 7000                       		moveq	#0,d0
00022030 1028 0028                  		move.b	subtype(a0),d0	; read object type
00022034 E948                       		lsl.w	#4,d0		; multiply by $10
00022036 5340                       		subq.w	#1,d0
00022038 3140 0034                  		move.w	d0,$34(a0)
0002203C                            
0002203C                            Obj6E_Shock:				; XREF: Obj6E_Index
0002203C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00022040 C068 0034                  		and.w	$34(a0),d0
00022044 6600                       		bne.s	Obj6E_Animate
00022046 117C 0001 001C             		move.b	#1,anim(a0)	; run "shocking" animation
0002204C 4A28 0001                  		tst.b	1(a0)
00022050 6A00                       		bpl.s	Obj6E_Animate
00022052 303C 00B1                  		move.w	#$B1,d0
00022056 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play electricity sound
0002205C                            
0002205C                            Obj6E_Animate:
0002205C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00022062 4EB9 0001 2754             		jsr	AnimateSprite
00022068 117C 0000 0020             		move.b	#0,collision_flags(a0)
0002206E 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is frame number 4 displayed?
00022074 6600                       		bne.s	Obj6E_Display	; if not, branch
00022076 117C 00A4 0020             		move.b	#$A4,collision_flags(a0)	; if yes, make object hurt Sonic
0002207C                            
0002207C                            Obj6E_Display:
0002207C 4EF9 0001 8EA6             		jmp	MarkObjGone
00022082                            ; ===========================================================================
00022082                            Ani_obj6E:
00022082                            	include "_anim\obj6E.asm"
00022082                            ; ---------------------------------------------------------------------------
00022082                            ; Animation script - electrocution orbs (SBZ)
00022082                            ; ---------------------------------------------------------------------------
00022082 0000                       		dc.w byte_161CC-Ani_obj6E
00022084 0000                       		dc.w byte_161D0-Ani_obj6E
00022086 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0002208A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0002209A                            		even
0002209A                            		even
0002209A                            
0002209A                            ; ---------------------------------------------------------------------------
0002209A                            ; Sprite mappings - electrocution orbs (SBZ)
0002209A                            ; ---------------------------------------------------------------------------
0002209A                            Map_obj6E:
0002209A                            	include "_maps\obj6E.asm"
0002209A                            ; ---------------------------------------------------------------------------
0002209A                            ; Sprite mappings - electrocution orbs (SBZ)
0002209A                            ; ---------------------------------------------------------------------------
0002209A 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0002209E 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000220A2 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000220A6 02                         byte_161EC:	dc.b 2
000220A7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000220AC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000220B1 03                         byte_161F7:	dc.b 3
000220B2 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000220B7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000220BC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000220C1 05                         byte_16207:	dc.b 5
000220C2 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000220C7 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000220CC 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000220D1 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000220D6 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000220DB 04                         byte_16221:	dc.b 4
000220DC F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000220E1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000220E6 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000220EB F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000220F0 06                         byte_16236:	dc.b 6
000220F1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000220F6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000220FB F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00022100 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00022105 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0002210A F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0002210F 04                         byte_16255:	dc.b 4
00022110 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00022115 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0002211A F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
0002211F F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00022124                            		even
00022124                            		even
00022124                            
00022124                            ; ===========================================================================
00022124                            ; ---------------------------------------------------------------------------
00022124                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00022124                            ; ---------------------------------------------------------------------------
00022124                            
00022124                            Obj6F:					; XREF: Obj_Index
00022124 7000                       		moveq	#0,d0
00022126 1028 0024                  		move.b	routine(a0),d0
0002212A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0002212E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00022132 3028 0030                  		move.w	$30(a0),d0
00022136 0240 FF80                  		andi.w	#$FF80,d0
0002213A 3238 F700                  		move.w	($FFFFF700).w,d1
0002213E 0441 0080                  		subi.w	#$80,d1
00022142 0241 FF80                  		andi.w	#$FF80,d1
00022146 9041                       		sub.w	d1,d0
00022148 0C40 0280                  		cmpi.w	#$280,d0
0002214C 6200                       		bhi.s	loc_1629A
0002214E                            
0002214E                            Obj6F_Display:
0002214E 4EF9 0001 5D72             		jmp	DisplaySprite
00022154                            ; ===========================================================================
00022154                            
00022154                            loc_1629A:
00022154 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0002215A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0002215C 0C40 FF80                  		cmpi.w	#-$80,d0
00022160 64EC                       		bcc.s	Obj6F_Display
00022162                            
00022162                            Obj6F_Act1or2:
00022162 1028 002F                  		move.b	$2F(a0),d0
00022166 6A00                       		bpl.s	Obj6F_Delete
00022168 0240 007F                  		andi.w	#$7F,d0
0002216C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00022170 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00022176                            
00022176                            Obj6F_Delete:
00022176 7000                       		moveq	#0,d0
00022178 3028 0014                  		move.w	respawn_index(a0),d0
0002217C 3440                       		movea.w	d0,a2
0002217E 0892 0007                  		bclr	#7,(a2)
00022182 4EF9 0001 5D26             		jmp	DeleteObject
00022188                            ; ===========================================================================
00022188 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0002218A 0000                       		dc.w loc_163D8-Obj6F_Index
0002218C                            ; ===========================================================================
0002218C                            
0002218C                            Obj6F_Main:				; XREF: Obj6F_Index
0002218C 1028 0028                  		move.b	subtype(a0),d0
00022190 6B00 0000                  		bmi.w	loc_16380
00022194 5428 0024                  		addq.b	#2,routine(a0)
00022198 217C 0002 1822 0004        		move.l	#Map_obj69a,4(a0)
000221A0 317C 04DF 0002             		move.w	#$4DF,2(a0)
000221A6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000221AC 0028 0004 0001             		ori.b	#4,1(a0)
000221B2 317C 0200 0018             		move.w	#$200,priority(a0)
000221B8 7000                       		moveq	#0,d0
000221BA 1028 0028                  		move.b	subtype(a0),d0
000221BE 3200                       		move.w	d0,d1
000221C0 E648                       		lsr.w	#3,d0
000221C2 0240 001E                  		andi.w	#$1E,d0
000221C6 45FA 0000                  		lea	off_164A6(pc),a2
000221CA D4F2 0000                  		adda.w	(a2,d0.w),a2
000221CE 315A 0038                  		move.w	(a2)+,$38(a0)
000221D2 315A 0030                  		move.w	(a2)+,$30(a0)
000221D6 214A 003C                  		move.l	a2,$3C(a0)
000221DA 0241 000F                  		andi.w	#$F,d1
000221DE E549                       		lsl.w	#2,d1
000221E0 1141 0038                  		move.b	d1,$38(a0)
000221E4 117C 0004 003A             		move.b	#4,$3A(a0)
000221EA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000221EE 6700                       		beq.s	loc_16356
000221F0 117C 0001 003B             		move.b	#1,$3B(a0)
000221F6 4428 003A                  		neg.b	$3A(a0)
000221FA 7200                       		moveq	#0,d1
000221FC 1228 0038                  		move.b	$38(a0),d1
00022200 D228 003A                  		add.b	$3A(a0),d1
00022204 B228 0039                  		cmp.b	$39(a0),d1
00022208 6500                       		bcs.s	loc_16352
0002220A 1001                       		move.b	d1,d0
0002220C 7200                       		moveq	#0,d1
0002220E 4A00                       		tst.b	d0
00022210 6A00                       		bpl.s	loc_16352
00022212 1228 0039                  		move.b	$39(a0),d1
00022216 5901                       		subq.b	#4,d1
00022218                            
00022218                            loc_16352:
00022218 1141 0038                  		move.b	d1,$38(a0)
0002221C                            
0002221C                            loc_16356:
0002221C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00022222 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00022228 4A41                       		tst.w	d1
0002222A 6600                       		bne.s	loc_1636C
0002222C 117C 0001 001C             		move.b	#1,anim(a0)
00022232                            
00022232                            loc_1636C:
00022232 0C41 0008                  		cmpi.w	#8,d1
00022236 6600                       		bne.s	loc_16378
00022238 117C 0000 001C             		move.b	#0,anim(a0)
0002223E                            
0002223E                            loc_16378:
0002223E 4EBA 9FA8                  		jsr	Obj63_ChangeDir
00022242 6000 0000                  		bra.w	loc_163D8
00022246                            ; ===========================================================================
00022246                            
00022246                            loc_16380:				; XREF: Obj6F_Main
00022246 1140 002F                  		move.b	d0,$2F(a0)
0002224A 0240 007F                  		andi.w	#$7F,d0
0002224E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00022252 08F2 0000 0000             		bset	#0,(a2,d0.w)
00022258 6700                       		beq.s	loc_1639A
0002225A 4EF9 0001 5D26             		jmp	DeleteObject
00022260                            ; ===========================================================================
00022260                            
00022260                            loc_1639A:
00022260 D040                       		add.w	d0,d0
00022262 0240 001E                  		andi.w	#$1E,d0
00022266                            ;		addi.w	#$80,d0
00022266 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
0002226C D4F2 0000                  		adda.w	(a2,d0.w),a2
00022270 321A                       		move.w	(a2)+,d1
00022272 2248                       		movea.l	a0,a1
00022274 6000                       		bra.s	Obj6F_LoadPform
00022276                            ; ===========================================================================
00022276                            
00022276                            Obj6F_Loop:
00022276 4EB9 0001 687C             		jsr	SingleObjLoad
0002227C 6600                       		bne.s	loc_163D0
0002227E                            
0002227E                            Obj6F_LoadPform:			; XREF: loc_1639A
0002227E 12BC 006F                  		move.b	#$6F,0(a1)
00022282 335A 0008                  		move.w	(a2)+,8(a1)
00022286 335A 000C                  		move.w	(a2)+,$C(a1)
0002228A 301A                       		move.w	(a2)+,d0
0002228C 1340 0028                  		move.b	d0,subtype(a1)
00022290                            
00022290                            loc_163D0:
00022290 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00022294                            
00022294 588F                       		addq.l	#4,sp
00022296 4E75                       		rts	
00022298                            ; ===========================================================================
00022298                            
00022298                            loc_163D8:				; XREF: Obj6F_Index
00022298 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0002229E 4EB9 0001 2754             		jsr	AnimateSprite
000222A4 4A28 001A                  		tst.b	mapping_frame(a0)
000222A8 6600                       		bne.s	loc_16404
000222AA 3F28 0008                  		move.w	8(a0),-(sp)
000222AE 4EB9 0000 0000             		jsr	loc_16424
000222B4 323C 001B                  		move.w	#$1B,d1
000222B8 343C 0007                  		move.w	#7,d2
000222BC 3602                       		move.w	d2,d3
000222BE 5243                       		addq.w	#1,d3
000222C0 381F                       		move.w	(sp)+,d4
000222C2 4EF9 0001 958A             		jmp	SolidObject
000222C8                            ; ===========================================================================
000222C8                            
000222C8                            loc_16404:
000222C8 0828 0003 0022             		btst	#3,status(a0)
000222CE 6700                       		beq.s	loc_16420
000222D0 43F8 D000                  		lea	($FFFFD000).w,a1
000222D4 08A9 0003 0022             		bclr	#3,status(a1)
000222DA 08A8 0003 0022             		bclr	#3,status(a0)
000222E0 4228 0025                  		clr.b	routine_secondary(a0)
000222E4                            
000222E4                            loc_16420:
000222E4 6000 0002                  		bra.w	*+4
000222E8                            
000222E8                            loc_16424:
000222E8 3028 0008                  		move.w	8(a0),d0
000222EC B068 0034                  		cmp.w	$34(a0),d0
000222F0 6600                       		bne.s	loc_16484
000222F2 3028 000C                  		move.w	$C(a0),d0
000222F6 B068 0036                  		cmp.w	$36(a0),d0
000222FA 6600                       		bne.s	loc_16484
000222FC 7200                       		moveq	#0,d1
000222FE 1228 0038                  		move.b	$38(a0),d1
00022302 D228 003A                  		add.b	$3A(a0),d1
00022306 B228 0039                  		cmp.b	$39(a0),d1
0002230A 6500                       		bcs.s	loc_16456
0002230C 1001                       		move.b	d1,d0
0002230E 7200                       		moveq	#0,d1
00022310 4A00                       		tst.b	d0
00022312 6A00                       		bpl.s	loc_16456
00022314 1228 0039                  		move.b	$39(a0),d1
00022318 5901                       		subq.b	#4,d1
0002231A                            
0002231A                            loc_16456:
0002231A 1141 0038                  		move.b	d1,$38(a0)
0002231E 2268 003C                  		movea.l	$3C(a0),a1
00022322 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00022328 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0002232E 4A41                       		tst.w	d1
00022330 6600                       		bne.s	loc_16474
00022332 117C 0001 001C             		move.b	#1,anim(a0)
00022338                            
00022338                            loc_16474:
00022338 0C41 0008                  		cmpi.w	#8,d1
0002233C 6600                       		bne.s	loc_16480
0002233E 117C 0000 001C             		move.b	#0,anim(a0)
00022344                            
00022344                            loc_16480:
00022344 4EBA 9EA2                  		jsr	Obj63_ChangeDir
00022348                            
00022348                            loc_16484:
00022348 4EF9 0001 5D0C             		jmp	SpeedToPos
0002234E                            ; ===========================================================================
0002234E                            Ani_obj6F:
0002234E                            	include "_anim\obj6F.asm"
0002234E                            ; ---------------------------------------------------------------------------
0002234E                            ; Animation script - platform on conveyor belt (SBZ)
0002234E                            ; ---------------------------------------------------------------------------
0002234E 0000                       		dc.w byte_1648E-Ani_obj6F
00022350 0000                       		dc.w byte_164A2-Ani_obj6F
00022352 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0002235F 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00022366 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0002236A 00                         		even
0002236A 00                         		even
0002236A                            
0002236A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00022370 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00022376 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0002238A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0002239E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000223B2 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000223C6 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000223DA 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000223EE                            ; ===========================================================================
000223EE                            ; ---------------------------------------------------------------------------
000223EE                            ; Object 70 - large girder block (SBZ)
000223EE                            ; ---------------------------------------------------------------------------
000223EE                            
000223EE                            Obj70:					; XREF: Obj_Index
000223EE 7000                       		moveq	#0,d0
000223F0 1028 0024                  		move.b	routine(a0),d0
000223F4 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000223F8 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000223FC                            ; ===========================================================================
000223FC 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000223FE 0000                       		dc.w Obj70_Action-Obj70_Index
00022400                            ; ===========================================================================
00022400                            
00022400                            Obj70_Main:				; XREF: Obj70_Index
00022400 5428 0024                  		addq.b	#2,routine(a0)
00022404 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0002240C 317C 42F0 0002             		move.w	#$42F0,2(a0)
00022412 0028 0004 0001             		ori.b	#4,1(a0)
00022418 317C 0200 0018             		move.w	#$200,priority(a0)
0002241E 117C 0060 0023             		move.b	#$60,width_pixels(a0)
00022424 117C 0018 0016             		move.b	#$18,$16(a0)
0002242A 3168 0008 0032             		move.w	8(a0),$32(a0)
00022430 3168 000C 0030             		move.w	$C(a0),$30(a0)
00022436 4EB9 0000 0000             		jsr	Obj70_Move2
0002243C                            
0002243C                            Obj70_Action:				; XREF: Obj70_Index
0002243C 3F28 0008                  		move.w	8(a0),-(sp)
00022440 4A68 003A                  		tst.w	$3A(a0)
00022444 6700                       		beq.s	Obj70_Move
00022446 5368 003A                  		subq.w	#1,$3A(a0)
0002244A 6600                       		bne.s	Obj70_Solid
0002244C                            
0002244C                            Obj70_Move:
0002244C 4EB9 0001 5D0C             		jsr	SpeedToPos
00022452 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00022456 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00022458 4EB9 0000 0000             		jsr	Obj70_Move2	; if time is zero, branch
0002245E                            
0002245E                            Obj70_Solid:
0002245E 381F                       		move.w	(sp)+,d4
00022460 4A28 0001                  		tst.b	1(a0)
00022464 6A00                       		bpl.s	Obj70_ChkDel
00022466 7200                       		moveq	#0,d1
00022468 1228 0023                  		move.b	width_pixels(a0),d1
0002246C 0641 000B                  		addi.w	#$B,d1
00022470 7400                       		moveq	#0,d2
00022472 1428 0016                  		move.b	$16(a0),d2
00022476 3602                       		move.w	d2,d3
00022478 5243                       		addq.w	#1,d3
0002247A 4EB9 0001 958A             		jsr	SolidObject
00022480                            
00022480                            Obj70_ChkDel:
00022480 3028 0032                  		move.w	$32(a0),d0
00022484 4EF9 0001 8EDC             		jmp		MarkObjGone2
0002248A                            ; ===========================================================================
0002248A                            
0002248A                            Obj70_Move2:				; XREF: Obj70_Main
0002248A 1028 0038                  		move.b	$38(a0),d0
0002248E 0240 0018                  		andi.w	#$18,d0
00022492 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00022498 43F1 0000                  		lea	(a1,d0.w),a1
0002249C 3159 0010                  		move.w	(a1)+,x_vel(a0)
000224A0 3159 0012                  		move.w	(a1)+,y_vel(a0)
000224A4 3159 0034                  		move.w	(a1)+,$34(a0)
000224A8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000224AC 317C 0007 003A             		move.w	#7,$3A(a0)
000224B2 4E75                       		rts	
000224B4                            ; ===========================================================================
000224B4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000224BC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000224C4 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000224CC 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000224D4                            ; ---------------------------------------------------------------------------
000224D4                            ; Sprite mappings - large girder block (SBZ)
000224D4                            ; ---------------------------------------------------------------------------
000224D4                            Map_obj70:
000224D4                            	include "_maps\obj70.asm"
000224D4                            ; ---------------------------------------------------------------------------
000224D4                            ; Sprite mappings - large girder block (SBZ)
000224D4                            ; ---------------------------------------------------------------------------
000224D4 0000                       		dc.w byte_1662A-Map_obj70
000224D6 0C                         byte_1662A:	dc.b $C
000224D7 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000224DC 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000224E1 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000224E6 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000224EB E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000224F0 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000224F5 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000224FA 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000224FF E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00022504 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00022509 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0002250E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00022514 00                         		even
00022514 00                         		even
00022514                            
00022514                            ; ===========================================================================
00022514                            ; ---------------------------------------------------------------------------
00022514                            ; Object 72 - teleporter (SBZ)
00022514                            ; ---------------------------------------------------------------------------
00022514                            
00022514                            Obj72:					; XREF: Obj_Index
00022514 7000                       		moveq	#0,d0
00022516 1028 0024                  		move.b	$24(a0),d0
0002251A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0002251E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00022522 4EF9 0001 91E6             		jmp	MarkObjGone3
00022528                            ; ===========================================================================
00022528 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0002252A 0000                       		dc.w loc_166C8-Obj72_Index
0002252C 0000                       		dc.w loc_1675E-Obj72_Index
0002252E 0000                       		dc.w loc_16798-Obj72_Index
00022530                            ; ===========================================================================
00022530                            
00022530                            Obj72_Main:				; XREF: Obj72_Index
00022530 5428 0024                  		addq.b	#2,$24(a0)
00022534 1028 0028                  		move.b	$28(a0),d0
00022538 D040                       		add.w	d0,d0
0002253A 0240 001E                  		andi.w	#$1E,d0
0002253E 45FA 0000                  		lea	Obj72_Data(pc),a2
00022542 D4F2 0000                  		adda.w	(a2,d0.w),a2
00022546 315A 003A                  		move.w	(a2)+,$3A(a0)
0002254A 214A 003C                  		move.l	a2,$3C(a0)
0002254E 315A 0036                  		move.w	(a2)+,$36(a0)
00022552 315A 0038                  		move.w	(a2)+,$38(a0)
00022556                            
00022556                            loc_166C8:				; XREF: Obj72_Index
00022556 43F8 D000                  		lea	($FFFFD000).w,a1
0002255A 3029 0008                  		move.w	8(a1),d0
0002255E 9068 0008                  		sub.w	8(a0),d0
00022562 0828 0000 0022             		btst	#0,$22(a0)
00022568 6700                       		beq.s	loc_166E0
0002256A 0640 000F                  		addi.w	#$F,d0
0002256E                            
0002256E                            loc_166E0:
0002256E 0C40 0010                  		cmpi.w	#$10,d0
00022572 6400                       		bcc.s	locret_1675C
00022574 3229 000C                  		move.w	$C(a1),d1
00022578 9268 000C                  		sub.w	$C(a0),d1
0002257C 0641 0020                  		addi.w	#$20,d1
00022580 0C41 0040                  		cmpi.w	#$40,d1
00022584 6400                       		bcc.s	locret_1675C
00022586 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0002258A 6600                       		bne.s	locret_1675C
0002258C 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00022592 6600                       		bne.s	loc_1670E
00022594 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0002259A 6500                       		bcs.s	locret_1675C
0002259C                            
0002259C                            loc_1670E:
0002259C 5428 0024                  		addq.b	#2,$24(a0)
000225A0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000225A6 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000225AC 337C 0800 0020             		move.w	#$800,inertia(a1)
000225B2 337C 0000 0010             		move.w	#0,$10(a1)
000225B8 337C 0000 0012             		move.w	#0,$12(a1)
000225BE 08A8 0005 0022             		bclr	#5,$22(a0)
000225C4 08A9 0005 0022             		bclr	#5,$22(a1)
000225CA 08E9 0001 0022             		bset	#1,$22(a1)
000225D0 3368 0008 0008             		move.w	8(a0),8(a1)
000225D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000225DC 4228 0032                  		clr.b	$32(a0)
000225E0 303C 003C                  		move.w	#$3C,d0
000225E4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000225EA                            
000225EA                            locret_1675C:
000225EA 4E75                       		rts	
000225EC                            ; ===========================================================================
000225EC                            
000225EC                            loc_1675E:				; XREF: Obj72_Index
000225EC 43F8 D000                  		lea	($FFFFD000).w,a1
000225F0 1028 0032                  		move.b	$32(a0),d0
000225F4 5428 0032                  		addq.b	#2,$32(a0)
000225F8 4EB9 0000 8F30             		jsr	(CalcSine).l
000225FE EA40                       		asr.w	#5,d0
00022600 3428 000C                  		move.w	$C(a0),d2
00022604 9440                       		sub.w	d0,d2
00022606 3342 000C                  		move.w	d2,$C(a1)
0002260A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00022610 6600                       		bne.s	locret_16796
00022612 6100 0000                  		bsr.w	sub_1681C
00022616 5428 0024                  		addq.b	#2,$24(a0)
0002261A 303C 00B6                  		move.w	#$B6,d0
0002261E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play teleport sound
00022624                            
00022624                            locret_16796:
00022624 4E75                       		rts	
00022626                            ; ===========================================================================
00022626                            
00022626                            loc_16798:				; XREF: Obj72_Index
00022626 588F                       		addq.l	#4,sp
00022628 43F8 D000                  		lea	($FFFFD000).w,a1
0002262C 5328 002E                  		subq.b	#1,$2E(a0)
00022630 6A00                       		bpl.s	loc_167DA
00022632 3368 0036 0008             		move.w	$36(a0),8(a1)
00022638 3368 0038 000C             		move.w	$38(a0),$C(a1)
0002263E 7200                       		moveq	#0,d1
00022640 1228 003A                  		move.b	$3A(a0),d1
00022644 5801                       		addq.b	#4,d1
00022646 B228 003B                  		cmp.b	$3B(a0),d1
0002264A 6500                       		bcs.s	loc_167C2
0002264C 7200                       		moveq	#0,d1
0002264E 6000                       		bra.s	loc_16800
00022650                            ; ===========================================================================
00022650                            
00022650                            loc_167C2:
00022650 1141 003A                  		move.b	d1,$3A(a0)
00022654 2468 003C                  		movea.l	$3C(a0),a2
00022658 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0002265E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00022664 6000 0000                  		bra.w	sub_1681C
00022668                            ; ===========================================================================
00022668                            
00022668                            loc_167DA:
00022668 2429 0008                  		move.l	8(a1),d2
0002266C 2629 000C                  		move.l	$C(a1),d3
00022670 3029 0010                  		move.w	$10(a1),d0
00022674 48C0                       		ext.l	d0
00022676 E180                       		asl.l	#8,d0
00022678 D480                       		add.l	d0,d2
0002267A 3029 0012                  		move.w	$12(a1),d0
0002267E 48C0                       		ext.l	d0
00022680 E180                       		asl.l	#8,d0
00022682 D680                       		add.l	d0,d3
00022684 2342 0008                  		move.l	d2,8(a1)
00022688 2343 000C                  		move.l	d3,$C(a1)
0002268C 4E75                       		rts	
0002268E                            ; ===========================================================================
0002268E                            
0002268E                            loc_16800:
0002268E 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00022694 4228 0024                  		clr.b	$24(a0)
00022698 4238 F7C8                  		clr.b	($FFFFF7C8).w
0002269C 337C 0000 0010             		move.w	#0,$10(a1)
000226A2 337C 0200 0012             		move.w	#$200,$12(a1)
000226A8 4E75                       		rts	
000226AA                            
000226AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000226AA                            
000226AA                            
000226AA                            sub_1681C:
000226AA 7000                       		moveq	#0,d0
000226AC 343C 1000                  		move.w	#$1000,d2
000226B0 3028 0036                  		move.w	$36(a0),d0
000226B4 9069 0008                  		sub.w	8(a1),d0
000226B8 6C00                       		bge.s	loc_16830
000226BA 4440                       		neg.w	d0
000226BC 4442                       		neg.w	d2
000226BE                            
000226BE                            loc_16830:
000226BE 7200                       		moveq	#0,d1
000226C0 363C 1000                  		move.w	#$1000,d3
000226C4 3228 0038                  		move.w	$38(a0),d1
000226C8 9269 000C                  		sub.w	$C(a1),d1
000226CC 6C00                       		bge.s	loc_16844
000226CE 4441                       		neg.w	d1
000226D0 4443                       		neg.w	d3
000226D2                            
000226D2                            loc_16844:
000226D2 B240                       		cmp.w	d0,d1
000226D4 6500                       		bcs.s	loc_1687A
000226D6 7200                       		moveq	#0,d1
000226D8 3228 0038                  		move.w	$38(a0),d1
000226DC 9269 000C                  		sub.w	$C(a1),d1
000226E0 4841                       		swap	d1
000226E2 83C3                       		divs.w	d3,d1
000226E4 7000                       		moveq	#0,d0
000226E6 3028 0036                  		move.w	$36(a0),d0
000226EA 9069 0008                  		sub.w	8(a1),d0
000226EE 6700                       		beq.s	loc_16866
000226F0 4840                       		swap	d0
000226F2 81C1                       		divs.w	d1,d0
000226F4                            
000226F4                            loc_16866:
000226F4 3340 0010                  		move.w	d0,$10(a1)
000226F8 3343 0012                  		move.w	d3,$12(a1)
000226FC 4A41                       		tst.w	d1
000226FE 6A00                       		bpl.s	loc_16874
00022700 4441                       		neg.w	d1
00022702                            
00022702                            loc_16874:
00022702 3141 002E                  		move.w	d1,$2E(a0)
00022706 4E75                       		rts	
00022708                            ; ===========================================================================
00022708                            
00022708                            loc_1687A:
00022708 7000                       		moveq	#0,d0
0002270A 3028 0036                  		move.w	$36(a0),d0
0002270E 9069 0008                  		sub.w	8(a1),d0
00022712 4840                       		swap	d0
00022714 81C2                       		divs.w	d2,d0
00022716 7200                       		moveq	#0,d1
00022718 3228 0038                  		move.w	$38(a0),d1
0002271C 9269 000C                  		sub.w	$C(a1),d1
00022720 6700                       		beq.s	loc_16898
00022722 4841                       		swap	d1
00022724 83C0                       		divs.w	d0,d1
00022726                            
00022726                            loc_16898:
00022726 3341 0012                  		move.w	d1,$12(a1)
0002272A 3342 0010                  		move.w	d2,$10(a1)
0002272E 4A40                       		tst.w	d0
00022730 6A00                       		bpl.s	loc_168A6
00022732 4440                       		neg.w	d0
00022734                            
00022734                            loc_168A6:
00022734 3140 002E                  		move.w	d0,$2E(a0)
00022738 4E75                       		rts	
0002273A                            ; End of function sub_1681C
0002273A                            
0002273A                            ; ===========================================================================
0002273A 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00022740 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00022746 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0002274A 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00022750 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00022756 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0002275C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00022762 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00022768 0884 0298 0894             		dc.w $884, $298, $894
0002276E 0270 0894 0190             		dc.w $270, $894, $190
00022774 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0002277A 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00022780 1184 0498 1158             		dc.w $1184, $498, $1158
00022786 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0002278C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00022792 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00022798 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0002279E 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000227A4 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000227AA FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000227B0 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000227B6 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000227BC 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000227C2                            ; ===========================================================================
000227C2                            ; ---------------------------------------------------------------------------
000227C2                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000227C2                            ; ---------------------------------------------------------------------------
000227C2                            
000227C2                            Obj78:					; XREF: Obj_Index
000227C2 7000                       		moveq	#0,d0
000227C4 1028 0024                  		move.b	routine(a0),d0
000227C8 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000227CC 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000227D0                            ; ===========================================================================
000227D0 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000227D2 0000                       		dc.w Obj78_Action-Obj78_Index
000227D4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000227D6 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000227D8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000227DA 0000                       		dc.w Obj78_Delete-Obj78_Index
000227DC 0000                       		dc.w loc_16CC0-Obj78_Index
000227DE                            ; ===========================================================================
000227DE                            
000227DE                            locret_16950:
000227DE 4E75                       		rts	
000227E0                            ; ===========================================================================
000227E0                            
000227E0                            Obj78_Main:				; XREF: Obj78_Index
000227E0 117C 0007 0016             		move.b	#7,$16(a0)
000227E6 117C 0008 0017             		move.b	#8,$17(a0)
000227EC 4EB9 0001 5CEC             		jsr	ObjectFall
000227F2 4EBA E512                  		jsr	ObjHitFloor
000227F6 4A41                       		tst.w	d1
000227F8 6AE4                       		bpl.s	locret_16950
000227FA D368 000C                  		add.w	d1,$C(a0)
000227FE 4268 0012                  		clr.w	y_vel(a0)
00022802 5428 0024                  		addq.b	#2,routine(a0)
00022806 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0002280E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00022814 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0002281A 6700                       		beq.s	loc_16996
0002281C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00022822                            
00022822                            loc_16996:
00022822 0228 0003 0001             		andi.b	#3,1(a0)
00022828 0028 0004 0001             		ori.b	#4,1(a0)
0002282E 1168 0001 0022             		move.b	1(a0),$22(a0)
00022834 337C 0280 0018             		move.w	#$280,priority(a1)
0002283A 137C 0008 0023             		move.b	#8,width_pixels(a1)
00022840 117C 000B 0020             		move.b	#$B,collision_flags(a0)
00022846 3428 0008                  		move.w	8(a0),d2
0002284A 7A0C                       		moveq	#$C,d5
0002284C 0828 0000 0022             		btst	#0,$22(a0)
00022852 6700                       		beq.s	loc_169CA
00022854 4445                       		neg.w	d5
00022856                            
00022856                            loc_169CA:
00022856 1C3C 0004                  		move.b	#4,d6
0002285A 7600                       		moveq	#0,d3
0002285C 7804                       		moveq	#4,d4
0002285E 2448                       		movea.l	a0,a2
00022860 7202                       		moveq	#2,d1
00022862                            
00022862                            Obj78_LoadBody:
00022862 4EB9 0001 6892             		jsr	SingleObjLoad2
00022868 6600                       		bne.s	Obj78_QuitLoad
0002286A 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0002286E 1346 0024                  		move.b	d6,routine(a1)
00022872 5406                       		addq.b	#2,d6
00022874 2368 0004 0004             		move.l	4(a0),4(a1)
0002287A 3368 0002 0002             		move.w	2(a0),2(a1)
00022880 337C 0280 0018             		move.w	#$280,priority(a1)
00022886 137C 0008 0023             		move.b	#8,width_pixels(a1)
0002288C 137C 00CB 0020             		move.b	#$CB,collision_flags(a1)
00022892 D445                       		add.w	d5,d2
00022894 3342 0008                  		move.w	d2,8(a1)
00022898 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002289E 1368 0022 0022             		move.b	$22(a0),$22(a1)
000228A4 1368 0022 0001             		move.b	$22(a0),1(a1)
000228AA 137C 0008 001A             		move.b	#8,$1A(a1)
000228B0 234A 003C                  		move.l	a2,$3C(a1)
000228B4 1344 003C                  		move.b	d4,$3C(a1)
000228B8 5804                       		addq.b	#4,d4
000228BA 2449                       		movea.l	a1,a2
000228BC                            
000228BC                            Obj78_QuitLoad:
000228BC 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000228C0                            
000228C0 117C 0007 002A             		move.b	#7,objoff_2A(a0)
000228C6 4228 003C                  		clr.b	$3C(a0)
000228CA                            
000228CA                            Obj78_Action:				; XREF: Obj78_Index
000228CA 4A28 0022                  		tst.b	$22(a0)
000228CE 6B00 0000                  		bmi.w	loc_16C96
000228D2 7000                       		moveq	#0,d0
000228D4 1028 0025                  		move.b	$25(a0),d0
000228D8 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000228DC 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000228E0 1228 002B                  		move.b	$2B(a0),d1
000228E4 6A00                       		bpl.s	Obj78_Display
000228E6 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000228EC 1028 0026                  		move.b	$26(a0),d0
000228F0 0240 007F                  		andi.w	#$7F,d0
000228F4 5828 0026                  		addq.b	#4,$26(a0)
000228F8 1031 0000                  		move.b	(a1,d0.w),d0
000228FC 6A00                       		bpl.s	Obj78_AniHead
000228FE 08A8 0007 002B             		bclr	#7,$2B(a0)
00022904 6000                       		bra.s	Obj78_Display
00022906                            ; ===========================================================================
00022906                            
00022906                            Obj78_AniHead:
00022906 0201 0010                  		andi.b	#$10,d1
0002290A D001                       		add.b	d1,d0
0002290C 1140 001A                  		move.b	d0,$1A(a0)
00022910                            
00022910                            Obj78_Display:
00022910 3028 0008                  		move.w	8(a0),d0
00022914 0240 FF80                  		andi.w	#$FF80,d0
00022918 3238 F700                  		move.w	($FFFFF700).w,d1
0002291C 0441 0080                  		subi.w	#$80,d1
00022920 0241 FF80                  		andi.w	#$FF80,d1
00022924 9041                       		sub.w	d1,d0
00022926 0C40 0280                  		cmpi.w	#$280,d0
0002292A 6200 0000                  		bhi.w	Obj78_ChkGone
0002292E 4EF9 0001 5D72             		jmp	DisplaySprite
00022934                            ; ===========================================================================
00022934                            
00022934                            Obj78_ChkGone:
00022934                            ;		lea	(v_objstate).w,a2
00022934 7000                       		moveq	#0,d0
00022936 3028 0014                  		move.w	respawn_index(a0),d0
0002293A                            ;        move.w	respawn_index(a0),d0
0002293A 3440                       	    movea.w	d0,a2		
0002293C 6700                       		beq.s	loc_16ABC
0002293E 0892 0007                  		bclr	#7,(a2)
00022942                            
00022942                            loc_16ABC:
00022942 117C 000A 0024             		move.b	#$A,routine(a0)	; run "Obj78_Delete" routine
00022948 4E75                       		rts	
0002294A                            ; ===========================================================================
0002294A                            
0002294A                            Obj78_Delete:				; XREF: Obj78_Index
0002294A 4EF9 0001 5D26             		jmp	DeleteObject
00022950                            ; ===========================================================================
00022950 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00022952 0000                       		dc.w loc_16B02-Obj78_Index2
00022954                            ; ===========================================================================
00022954                            
00022954                            Obj78_Move:				; XREF: Obj78_Index2
00022954 5328 002A                  		subq.b	#1,objoff_2A(a0)
00022958 6B00                       		bmi.s	Obj78_Move2
0002295A 4E75                       		rts	
0002295C                            ; ===========================================================================
0002295C                            
0002295C                            Obj78_Move2:
0002295C 5428 0025                  		addq.b	#2,$25(a0)
00022960 117C 0010 002A             		move.b	#$10,objoff_2A(a0)
00022966 317C FF40 0010             		move.w	#-$C0,x_vel(a0)
0002296C 317C 0040 001C             		move.w	#$40,$1C(a0)
00022972 0868 0004 002B             		bchg	#4,$2B(a0)
00022978 6600                       		bne.s	loc_16AFC
0002297A 4268 0010                  		clr.w	x_vel(a0)
0002297E 4468 001C                  		neg.w	$1C(a0)
00022982                            
00022982                            loc_16AFC:
00022982 08E8 0007 002B             		bset	#7,$2B(a0)
00022988                            
00022988                            loc_16B02:				; XREF: Obj78_Index2
00022988 5328 002A                  		subq.b	#1,objoff_2A(a0)
0002298C 6B00                       		bmi.s	loc_16B5E
0002298E 2F28 0008                  		move.l	8(a0),-(sp)
00022992 2428 0008                  		move.l	8(a0),d2
00022996 3028 0010                  		move.w	x_vel(a0),d0
0002299A 0828 0000 0022             		btst	#0,$22(a0)
000229A0 6700                       		beq.s	loc_16B1E
000229A2 4440                       		neg.w	d0
000229A4                            
000229A4                            loc_16B1E:
000229A4 48C0                       		ext.l	d0
000229A6 E180                       		asl.l	#8,d0
000229A8 D480                       		add.l	d0,d2
000229AA 2142 0008                  		move.l	d2,8(a0)
000229AE 4EBA E356                  		jsr	ObjHitFloor
000229B2 241F                       		move.l	(sp)+,d2
000229B4 0C41 FFF8                  		cmpi.w	#-8,d1
000229B8 6D00                       		blt.s	loc_16B70
000229BA 0C41 000C                  		cmpi.w	#$C,d1
000229BE 6C00                       		bge.s	loc_16B70
000229C0 D368 000C                  		add.w	d1,$C(a0)
000229C4 4842                       		swap	d2
000229C6 B468 0008                  		cmp.w	8(a0),d2
000229CA 6700                       		beq.s	locret_16B5C
000229CC 7000                       		moveq	#0,d0
000229CE 1028 003C                  		move.b	$3C(a0),d0
000229D2 5228 003C                  		addq.b	#1,$3C(a0)
000229D6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000229DC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000229E0                            
000229E0                            locret_16B5C:
000229E0 4E75                       		rts	
000229E2                            ; ===========================================================================
000229E2                            
000229E2                            loc_16B5E:
000229E2 5528 0025                  		subq.b	#2,$25(a0)
000229E6 117C 0007 002A             		move.b	#7,objoff_2A(a0)
000229EC 317C 0000 0010             		move.w	#0,x_vel(a0)
000229F2 4E75                       		rts	
000229F4                            ; ===========================================================================
000229F4                            
000229F4                            loc_16B70:
000229F4 2142 0008                  		move.l	d2,8(a0)
000229F8 0868 0000 0022             		bchg	#0,$22(a0)
000229FE 1168 0022 0001             		move.b	$22(a0),1(a0)
00022A04 7000                       		moveq	#0,d0
00022A06 1028 003C                  		move.b	$3C(a0),d0
00022A0A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00022A10 5228 003C                  		addq.b	#1,$3C(a0)
00022A14 0228 000F 003C             		andi.b	#$F,$3C(a0)
00022A1A 4E75                       		rts	
00022A1C                            ; ===========================================================================
00022A1C                            
00022A1C                            Obj78_BodySeg2:				; XREF: Obj78_Index
00022A1C 2268 003C                  		movea.l	$3C(a0),a1
00022A20 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00022A26 6A00                       		bpl.s	Obj78_BodySeg1
00022A28 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00022A2E 1028 0026                  		move.b	$26(a0),d0
00022A32 0240 007F                  		andi.w	#$7F,d0
00022A36 5828 0026                  		addq.b	#4,$26(a0)
00022A3A 4A31 0004                  		tst.b	4(a1,d0.w)
00022A3E 6A00                       		bpl.s	Obj78_AniBody
00022A40 5828 0026                  		addq.b	#4,$26(a0)
00022A44                            
00022A44                            Obj78_AniBody:
00022A44 1031 0000                  		move.b	(a1,d0.w),d0
00022A48 5000                       		addq.b	#8,d0
00022A4A 1140 001A                  		move.b	d0,$1A(a0)
00022A4E                            
00022A4E                            Obj78_BodySeg1:				; XREF: Obj78_Index
00022A4E 2268 003C                  		movea.l	$3C(a0),a1
00022A52 4A28 0022                  		tst.b	$22(a0)
00022A56 6B00 0000                  		bmi.w	loc_16C90
00022A5A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00022A60 1169 0025 0025             		move.b	$25(a1),$25(a0)
00022A66 6700 0000                  		beq.w	loc_16C64
00022A6A 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
00022A70 3029 0010                  		move.w	x_vel(a1),d0
00022A74 D069 001C                  		add.w	$1C(a1),d0
00022A78 3140 0010                  		move.w	d0,x_vel(a0)
00022A7C 2428 0008                  		move.l	8(a0),d2
00022A80 2602                       		move.l	d2,d3
00022A82 3028 0010                  		move.w	x_vel(a0),d0
00022A86 0828 0000 0022             		btst	#0,$22(a0)
00022A8C 6700                       		beq.s	loc_16C0C
00022A8E 4440                       		neg.w	d0
00022A90                            
00022A90                            loc_16C0C:
00022A90 48C0                       		ext.l	d0
00022A92 E180                       		asl.l	#8,d0
00022A94 D480                       		add.l	d0,d2
00022A96 2142 0008                  		move.l	d2,8(a0)
00022A9A 4843                       		swap	d3
00022A9C B668 0008                  		cmp.w	8(a0),d3
00022AA0 6700                       		beq.s	loc_16C64
00022AA2 7000                       		moveq	#0,d0
00022AA4 1028 003C                  		move.b	$3C(a0),d0
00022AA8 1231 002C                  		move.b	$2C(a1,d0.w),d1
00022AAC 0C01 0080                  		cmpi.b	#-$80,d1
00022AB0 6600                       		bne.s	loc_16C50
00022AB2 4843                       		swap	d3
00022AB4 2143 0008                  		move.l	d3,8(a0)
00022AB8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00022ABC 0868 0000 0022             		bchg	#0,$22(a0)
00022AC2 1168 0022 0001             		move.b	$22(a0),1(a0)
00022AC8 5228 003C                  		addq.b	#1,$3C(a0)
00022ACC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00022AD2 6000                       		bra.s	loc_16C64
00022AD4                            ; ===========================================================================
00022AD4                            
00022AD4                            loc_16C50:
00022AD4 4881                       		ext.w	d1
00022AD6 D368 000C                  		add.w	d1,$C(a0)
00022ADA 5228 003C                  		addq.b	#1,$3C(a0)
00022ADE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00022AE4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00022AE8                            
00022AE8                            loc_16C64:
00022AE8 0C29 000C 0024             		cmpi.b	#$C,routine(a1)
00022AEE 6700                       		beq.s	loc_16C90
00022AF0 0C11 0027                  		cmpi.b	#$27,0(a1)
00022AF4 6700                       		beq.s	loc_16C7C
00022AF6 0C29 000A 0024             		cmpi.b	#$A,routine(a1)
00022AFC 6600                       		bne.s	loc_16C82
00022AFE                            
00022AFE                            loc_16C7C:
00022AFE 117C 000A 0024             		move.b	#$A,routine(a0)
00022B04                            
00022B04                            loc_16C82:
00022B04 4EF9 0001 5D72             		jmp	DisplaySprite
00022B0A                            
00022B0A                            ; ===========================================================================
00022B0A FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00022B12                            ; ===========================================================================
00022B12                            
00022B12                            loc_16C90:
00022B12 08E9 0007 0022             		bset	#7,$22(a1)
00022B18                            
00022B18                            loc_16C96:
00022B18 7000                       		moveq	#0,d0
00022B1A 1028 0024                  		move.b	routine(a0),d0
00022B1E 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00022B22 0828 0000 0022             		btst	#0,$22(a0)
00022B28 6700                       		beq.s	loc_16CAA
00022B2A 4440                       		neg.w	d0
00022B2C                            
00022B2C                            loc_16CAA:
00022B2C 3140 0010                  		move.w	d0,x_vel(a0)
00022B30 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00022B36 117C 000C 0024             		move.b	#$C,routine(a0)
00022B3C 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00022B42                            
00022B42                            loc_16CC0:				; XREF: Obj78_Index
00022B42 4EB9 0001 5CEC             		jsr	ObjectFall
00022B48 4A68 0012                  		tst.w	y_vel(a0)
00022B4C 6B00                       		bmi.s	loc_16CE0
00022B4E 4EBA E1B6                  		jsr	ObjHitFloor
00022B52 4A41                       		tst.w	d1
00022B54 6A00                       		bpl.s	loc_16CE0
00022B56 D368 000C                  		add.w	d1,$C(a0)
00022B5A 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00022B60                            
00022B60                            loc_16CE0:
00022B60 4A28 0001                  		tst.b	1(a0)
00022B64 6A00 FDCE                  		bpl.w	Obj78_ChkGone
00022B68 4EF9 0001 5D72             		jmp	DisplaySprite
00022B6E                            ; ===========================================================================
00022B6E                            Ani_obj78:
00022B6E                            	include "_anim\obj78.asm"
00022B6E                            ; ---------------------------------------------------------------------------
00022B6E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00022B6E                            ; ---------------------------------------------------------------------------
00022B6E 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00022B7E 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00022B8E 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00022B9E 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00022BAE 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00022BBE 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00022BCE 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00022BDE 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00022BEE                            	even
00022BEE                            	even
00022BEE                            
00022BEE                            ; ---------------------------------------------------------------------------
00022BEE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00022BEE                            ; ---------------------------------------------------------------------------
00022BEE                            Map_obj78:
00022BEE                            	include "_maps\obj78.asm"
00022BEE                            ; ---------------------------------------------------------------------------
00022BEE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00022BEE                            ; ---------------------------------------------------------------------------
00022BEE 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00022BF2 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00022BF6 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00022BFA 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00022BFE 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00022C02 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00022C06 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00022C0A 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00022C0E 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00022C12 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00022C16 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00022C1A 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00022C1E 01                         byte_16D9E:	dc.b 1
00022C1F F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00022C24 01                         byte_16DA4:	dc.b 1
00022C25 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00022C2A 01                         byte_16DAA:	dc.b 1
00022C2B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00022C30 01                         byte_16DB0:	dc.b 1
00022C31 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00022C36 01                         byte_16DB6:	dc.b 1
00022C37 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00022C3C 01                         byte_16DBC:	dc.b 1
00022C3D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00022C42 01                         byte_16DC2:	dc.b 1
00022C43 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00022C48 01                         byte_16DC8:	dc.b 1
00022C49 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00022C4E 01                         byte_16DCE:	dc.b 1
00022C4F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00022C54 01                         byte_16DD4:	dc.b 1
00022C55 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00022C5A 01                         byte_16DDA:	dc.b 1
00022C5B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00022C60 01                         byte_16DE0:	dc.b 1
00022C61 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00022C66 01                         byte_16DE6:	dc.b 1
00022C67 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00022C6C 01                         byte_16DEC:	dc.b 1
00022C6D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00022C72 01                         byte_16DF2:	dc.b 1
00022C73 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00022C78 01                         byte_16DF8:	dc.b 1
00022C79 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00022C7E 01                         byte_16DFE:	dc.b 1
00022C7F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00022C84 01                         byte_16E04:	dc.b 1
00022C85 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00022C8A 01                         byte_16E0A:	dc.b 1
00022C8B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00022C90 01                         byte_16E10:	dc.b 1
00022C91 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00022C96 01                         byte_16E16:	dc.b 1
00022C97 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00022C9C 01                         byte_16E1C:	dc.b 1
00022C9D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00022CA2 01                         byte_16E22:	dc.b 1
00022CA3 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00022CA8 01                         byte_16E28:	dc.b 1
00022CA9 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00022CAE                            		even
00022CAE                            		even
00022CAE                            
00022CAE                            ; ===========================================================================
00022CAE                            ; ---------------------------------------------------------------------------
00022CAE                            ; Object 79 - Star pole / starpost / checkpoint (Modified port from Sonic 2F)
00022CAE                            ; ---------------------------------------------------------------------------
00022CAE                            
00022CAE                            Obj79:					; XREF: Obj_Index
00022CAE 7000                       		moveq	#0,d0
00022CB0 1028 0024                  		move.b	routine(a0),d0
00022CB4 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00022CB8 4EFB 1000                  		jmp	Obj79_Index(pc,d1.w)
00022CBC                            ;		jmp	MarkObjGone
00022CBC                            ; ===========================================================================
00022CBC 0000                       Obj79_Index:	dc.w Obj79_Init-Obj79_Index; 0
00022CBE 0000                       	dc.w Obj79_Main-Obj79_Index; 2
00022CC0 0000                       	dc.w Obj79_Animate-Obj79_Index; 4
00022CC2 0000                       	dc.w Obj79_Dongle-Obj79_Index; 6
00022CC4                            ;	dc.w Obj79_Star-Obj79_Index; 8
00022CC4                            ; ===========================================================================
00022CC4                            
00022CC4                            Obj79_Init:
00022CC4 5428 0024                  	addq.b	#2,routine(a0) ; => Obj79_Main
00022CC8 217C 0000 0000 0004        	move.l	#Map_obj79,4(a0)
00022CD0 317C 06C0 0002             	move.w	#($D800/$20),2(a0)
00022CD6                            ;	bsr.w	JmpTo3_Adjust2PArtPointer
00022CD6 117C 0004 0001             	move.b	#4,render_flags(a0)
00022CDC 117C 0008 0023             	move.b	#8,width_pixels(a0)
00022CE2 317C 0280 0018             	move.w	#$280,priority(a0)
00022CE8                            ;	lea	(v_objstate).w,a2
00022CE8 7000                       	moveq	#0,d0
00022CEA 3028 0014                  	move.w	respawn_index(a0),d0
00022CEE 3440                           movea.w	d0,a2
00022CF0                            ;	bclr	#7,(a2)
00022CF0 0812 0000                  	btst	#0,(a2)
00022CF4 6600                       	bne.s	Obj79_FlashingLamp
00022CF6 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
00022CFA 0201 007F                  	andi.b	#$7F,d1
00022CFE 1428 0028                  	move.b	subtype(a0),d2
00022D02 0202 007F                  	andi.b	#$7F,d2
00022D06 B202                       	cmp.b	d2,d1
00022D08 6500                       	bcs.s	Obj79_Main
00022D0A                            
00022D0A                            Obj79_FlashingLamp:
00022D0A 08D2 0000                  	bset	#0,(a2)
00022D0E 117C 0002 001C             	move.b	#2,anim(a0)
00022D14                            
00022D14                            ; loc_1F12C:
00022D14                            Obj79_Main:
00022D14 4A78 FE08                  	tst.w	(Debug_placement_mode).w
00022D18 6600 0000                  	bne.w	Obj79_Animate
00022D1C 47F8 D000                  	lea	(MainCharacter).w,a3 ; a3=character
00022D20 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
00022D24 6100                       	bsr.s	Obj79_CheckActivation
00022D26                            ;	tst.w	(Two_player_mode).w
00022D26                            ;	beq.w	Obj79_Animate
00022D26                            ;	lea	(Sidekick).w,a3 ; a3=character
00022D26                            ;	move.b	(Last_star_pole_hit_2P).w,d1
00022D26                            ;	bsr.s	Obj79_CheckActivation
00022D26 6000 0000                  	bra.w	Obj79_Animate
00022D2A                            ; ---------------------------------------------------------------------------
00022D2A                            ; loc_1F154:
00022D2A                            Obj79_CheckActivation:
00022D2A 0201 007F                  	andi.b	#$7F,d1
00022D2E 1428 0028                  	move.b	subtype(a0),d2
00022D32 0202 007F                  	andi.b	#$7F,d2
00022D36 B202                       	cmp.b	d2,d1
00022D38 6400 0000                  	bcc.w	loc_1F222
00022D3C 302B 0008                  	move.w	x_pos(a3),d0
00022D40 9068 0008                  	sub.w	x_pos(a0),d0
00022D44 5040                       	addi.w	#8,d0
00022D46 0C40 0010                  	cmpi.w	#$10,d0
00022D4A 6400 0000                  	bcc.w	return_1F220
00022D4E 302B 000C                  	move.w	y_pos(a3),d0
00022D52 9068 000C                  	sub.w	y_pos(a0),d0
00022D56 0640 0040                  	addi.w	#$40,d0
00022D5A 0C40 0068                  	cmpi.w	#$68,d0
00022D5E 6400 0000                  	bcc.w	return_1F220
00022D62 303C 0063                  	move.w	#$63,d0 ; checkpoint ding-dong sound
00022D66 4EB9 0000 3212             	jsr	(PlaySound).l
00022D6C 4EB9 0001 687C             	jsr	(SingleObjLoad).l
00022D72 6600                       	bne.s	loc_1F206
00022D74 12BC 0079                  	move.b	#$79,0(a1) ; load obj79
00022D78 137C 0006 0024             	move.b	#6,routine(a1) ; => Obj79_Dongle
00022D7E 3368 0008 0030             	move.w	x_pos(a0),objoff_30(a1)
00022D84 3368 000C 0032             	move.w	y_pos(a0),objoff_32(a1)
00022D8A 0469 0014 0032             	subi.w	#$14,objoff_32(a1)
00022D90 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
00022D96 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
00022D9C 137C 0004 0001             	move.b	#4,render_flags(a1)
00022DA2 137C 0008 0023             	move.b	#8,width_pixels(a1)
00022DA8 337C 0200 0018             	move.w	#$200,priority(a1)
00022DAE 137C 0002 001A             	move.b	#2,mapping_frame(a1)
00022DB4 337C 0020 0036             	move.w	#$20,objoff_36(a1)
00022DBA 3348 003E                  	move.w	a0,parent(a1)
00022DBE                            ;	tst.w	(Two_player_mode).w
00022DBE                            ;	bne.s	loc_1F206
00022DBE                            ;	cmpi.b	#7,(Emerald_count).w
00022DBE                            ;	beq.s	loc_1F206
00022DBE                            ;	cmpi.w	#$32,(Ring_count).w
00022DBE                            ;	bcs.s	loc_1F206
00022DBE                            ;	move.w	(Player_option).w,d0
00022DBE                            ;	cmpi.b	#3,d0	; is the player Metal?
00022DBE                            ;	beq.w	loc_1F206
00022DBE                            ;	bsr.w	Obj79_MakeSpecialStars
00022DBE                            
00022DBE                            loc_1F206:
00022DBE 117C 0001 001C             	move.b	#1,anim(a0)
00022DC4 6100 0000                  	bsr.w	Obj79_StoreInfo
00022DC8                            ;	lea	(v_objstate).w,a2
00022DC8 7000                       	moveq	#0,d0
00022DCA 3028 0014                  	move.w	respawn_index(a0),d0
00022DCE 3440                           movea.w	d0,a2
00022DD0 08D2 0000                  	bset	#0,(a2)
00022DD4                            
00022DD4                            return_1F220:
00022DD4 4E75                       	rts
00022DD6                            ; ===========================================================================
00022DD6                            
00022DD6                            loc_1F222:
00022DD6 4A28 001C                  	tst.b	anim(a0)
00022DDA 6600                       	bne.s	return_1F22E
00022DDC 117C 0002 001C             	move.b	#2,anim(a0)
00022DE2                            
00022DE2                            return_1F22E:
00022DE2 4E75                       	rts
00022DE4                            ; ===========================================================================
00022DE4                            ; loc_1F230:
00022DE4                            Obj79_Animate:
00022DE4 43F9 0000 0000             	lea	(Ani_Obj79).l,a1
00022DEA 6100 0000                  	bsr.w	JmpTo2_AnimateSprite
00022DEE 4EF9 0001 8EA6             	jmp	MarkObjGone
00022DF4                            ; ===========================================================================
00022DF4                            ; loc_1F240:
00022DF4                            Obj79_Dongle:
00022DF4 5368 0036                  	subq.w	#1,objoff_36(a0)
00022DF8 6A00                       	bpl.s	Obj79_MoveDonglyThing
00022DFA 3268 003E                  	movea.w	parent(a0),a1 ; a1=object
00022DFE 0C11 0079                  	cmpi.b	#$79,(a1)
00022E02 6600                       	bne.s	@dongle
00022E04 137C 0002 001C             	move.b	#2,anim(a1)
00022E0A 137C 0000 001A             	move.b	#0,mapping_frame(a1)
00022E10                            @dongle:
00022E10 4EF9 0001 5D26             	jmp	DeleteObject
00022E16                            ; ===========================================================================
00022E16                            ; loc_1F262:
00022E16                            Obj79_MoveDonglyThing:
00022E16 1028 0026                  	move.b	angle(a0),d0
00022E1A 0428 0010 0026             	subi.b	#$10,angle(a0)
00022E20 0400 0040                  	subi.b	#$40,d0
00022E24 4EB9 0000 8F30             	jsr	(CalcSine).l
00022E2A C3FC 0C00                  	muls.w	#$C00,d1
00022E2E 4841                       	swap	d1
00022E30 D268 0030                  	add.w	objoff_30(a0),d1
00022E34 3141 0008                  	move.w	d1,x_pos(a0)
00022E38 C1FC 0C00                  	muls.w	#$C00,d0
00022E3C 4840                       	swap	d0
00022E3E D068 0032                  	add.w	objoff_32(a0),d0
00022E42 3140 000C                  	move.w	d0,y_pos(a0)
00022E46 4EF9 0001 8EA6             	jmp	MarkObjGone
00022E4C                            ; ---------------------------------------------------------------------------
00022E4C                            ; Subroutine to	store information when you hit a starpost
00022E4C                            ; ---------------------------------------------------------------------------
00022E4C                            
00022E4C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00022E4C 11E8 0028 FE30             		move.b	subtype(a0),($FFFFFE30).w 		; lamppost number
00022E52 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00022E58 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00022E5E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00022E64 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00022E6A                            ;		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00022E6A 21F8 FE22 FE38             		move.l	(Timer).w,($FFFFFE38).w 	; time
00022E70 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00022E76 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00022E7C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00022E82 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00022E88 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00022E8E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00022E94 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00022E9A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00022EA0 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00022EA6 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00022EAC 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00022EB2 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00022EB8 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00022EBE 4E75                       		rts	
00022EC0                            
00022EC0                            ; ---------------------------------------------------------------------------
00022EC0                            ; Subroutine to	load stored info when you start	a level	from a starpost
00022EC0                            ; ---------------------------------------------------------------------------
00022EC0                            
00022EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00022EC0                            
00022EC0                            
00022EC0                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00022EC0 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00022EC6 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00022ECC 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00022ED2 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00022ED8                            ;		move.b	($FFFFFE54).w,($FFFFFE1B).w
00022ED8 4278 FE20                  		clr.w	($FFFFFE20).w
00022EDC 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00022EE2 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(Timer).w
00022EE8 11FC 003B FE25             		move.b	#59,(Timer_Centisecond).w
00022EEE 5338 FE24                  		subq.b	#1,(Timer_Second).w
00022EF2 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00022EF8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00022EFE 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00022F04 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00022F0A 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00022F10 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00022F16 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00022F1C 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00022F22 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00022F28 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00022F2E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00022F34 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00022F3A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00022F40 6600                       		bne.s	loc_170E4
00022F42 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00022F48 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00022F4E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00022F54                            
00022F54                            loc_170E4:
00022F54 4A38 FE30                  		tst.b	($FFFFFE30).w
00022F58 6A00                       		bpl.s	locret_170F6
00022F5A 3038 FE32                  		move.w	($FFFFFE32).w,d0
00022F5E 0440 00A0                  		subi.w	#$A0,d0
00022F62 31C0 F728                  		move.w	d0,($FFFFF728).w
00022F66                            
00022F66                            locret_170F6:
00022F66 4E75                       		rts	
00022F68                            ; End of function Obj79_LoadInfo
00022F68                            
00022F68 0000                       Ani_Obj79:	dc.w byte_1F41A-Ani_Obj79
00022F6A 0000                       	dc.w byte_1F41D-Ani_Obj79
00022F6C 0000                       	dc.w byte_1F420-Ani_Obj79
00022F6E                            byte_1F41A:
00022F6E 0F00 FF                    	dc.b  $F,  0,$FF
00022F71                            byte_1F41D:
00022F71 0F01 FF                    	dc.b  $F,  1,$FF
00022F74                            byte_1F420:
00022F74 0300 04FF                  	dc.b   3,  0,  4,$FF
00022F78                            	even
00022F78                            
00022F78                            ; ===========================================================================
00022F78                            ; ---------------------------------------------------------------------------
00022F78                            ; Sprite mappings - starpost
00022F78                            ; ---------------------------------------------------------------------------
00022F78                            Map_obj79:
00022F78                            	include "_maps\obj79s2.asm"
00022F78                            ; --------------------------------------------------------------------------------
00022F78                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022F78                            ; --------------------------------------------------------------------------------
00022F78                            
00022F78                            SME_Y2pSa:	
00022F78 0000 0000                  		dc.w SME_Y2pSa_A-SME_Y2pSa, SME_Y2pSa_1F-SME_Y2pSa	
00022F7C 0000 0000                  		dc.w SME_Y2pSa_2F-SME_Y2pSa, SME_Y2pSa_35-SME_Y2pSa	
00022F80 0000                       		dc.w SME_Y2pSa_3B-SME_Y2pSa	
00022F82 04                         SME_Y2pSa_A:	dc.b 4	
00022F83 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022F88 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022F8D F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022F92 D805 0000 F8               		dc.b $D8, 5, 0, 0, $F8	
00022F97 03                         SME_Y2pSa_1F:	dc.b 3	
00022F98 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022F9D F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022FA2 F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022FA7 01                         SME_Y2pSa_2F:	dc.b 1	
00022FA8 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00022FAD 01                         SME_Y2pSa_35:	dc.b 1	
00022FAE F805 2000 F8               		dc.b $F8, 5, $20, 0, $F8	
00022FB3 04                         SME_Y2pSa_3B:	dc.b 4	
00022FB4 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022FB9 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022FBE F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022FC3 D805 2000 F8               		dc.b $D8, 5, $20, 0, $F8	
00022FC8                            		even
00022FC8                            		even
00022FC8                            
00022FC8                            ; ===========================================================================
00022FC8                            JmpTo2_AnimateSprite:
00022FC8 4EF9 0001 2754             	jmp	AnimateSprite
00022FCE                            ;	rts
00022FCE                            
00022FCE                            JmpTo10_DeleteObject:
00022FCE 4EF9 0001 5D26             	jmp	DeleteObject
00022FD4                            ; ===========================================================================
00022FD4 4E71                       	nop
00022FD6                            
00022FD6                            JmpTo_MarkObjGone:
00022FD6 4EF9 0001 8EA6             	jmp	MarkObjGone
00022FDC                            ; ===========================================================================
00022FDC                            
00022FDC                            ;JmpTo2_AnimateSprite
00022FDC                            ;	jmp	AnimateSprite
00022FDC                            ; ===========================================================================
00022FDC                            ; ---------------------------------------------------------------------------
00022FDC                            ; Object 7D - hidden points at the end of a level
00022FDC                            ; ---------------------------------------------------------------------------
00022FDC                            
00022FDC                            Obj7D:					; XREF: Obj_Index
00022FDC 7000                       		moveq	#0,d0
00022FDE 1028 0024                  		move.b	routine(a0),d0
00022FE2 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00022FE6 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00022FEA                            ; ===========================================================================
00022FEA 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00022FEC 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00022FEE                            ; ===========================================================================
00022FEE                            
00022FEE                            Obj7D_Main:				; XREF: Obj7D_Index
00022FEE 7410                       		moveq	#$10,d2
00022FF0 3602                       		move.w	d2,d3
00022FF2 D643                       		add.w	d3,d3
00022FF4 43F8 D000                  		lea	($FFFFD000).w,a1
00022FF8 3029 0008                  		move.w	8(a1),d0
00022FFC 9068 0008                  		sub.w	8(a0),d0
00023000 D042                       		add.w	d2,d0
00023002 B043                       		cmp.w	d3,d0
00023004 6400                       		bcc.s	Obj7D_ChkDel
00023006 3229 000C                  		move.w	$C(a1),d1
0002300A 9268 000C                  		sub.w	$C(a0),d1
0002300E D242                       		add.w	d2,d1
00023010 B243                       		cmp.w	d3,d1
00023012 6400                       		bcc.s	Obj7D_ChkDel
00023014 4A78 FE08                  		tst.w	($FFFFFE08).w
00023018 6600                       		bne.s	Obj7D_ChkDel
0002301A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0002301E 6600                       		bne.s	Obj7D_ChkDel
00023020 5428 0024                  		addq.b	#2,routine(a0)
00023024 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0002302C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00023032 0028 0004 0001             		ori.b	#4,1(a0)
00023038 117C 0000 0018             		move.b	#0,priority(a0)
0002303E 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00023044 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
0002304A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00023050 303C 00C9                  		move.w	#$C9,d0
00023054 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play bonus sound
0002305A 7000                       		moveq	#0,d0
0002305C 1028 0028                  		move.b	subtype(a0),d0
00023060 D040                       		add.w	d0,d0
00023062 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00023066 4EB9 0000 0000             		jsr	AddPoints
0002306C                            
0002306C                            Obj7D_ChkDel:
0002306C 4EF9 0001 91E6             		jmp	MarkObjGone3
00023072                            ; ===========================================================================
00023072 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00023074 03E8                       		dc.w 1000
00023076 0064                       		dc.w 100
00023078 0001                       		dc.w 1
0002307A                            ; ===========================================================================
0002307A                            
0002307A                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0002307A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0002307E 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00023080 3028 0008                  		move.w	8(a0),d0
00023084 0240 FF80                  		andi.w	#-$80,d0
00023088 3238 F700                  		move.w	($FFFFF700).w,d1
0002308C 0441 0080                  		subi.w	#$80,d1
00023090 0241 FF80                  		andi.w	#-$80,d1
00023094 9041                       		sub.w	d1,d0
00023096 0C40 0280                  		cmpi.w	#$280,d0
0002309A 6200                       		bhi.s	Obj7D_Delete2
0002309C 4EF9 0001 5D72             		jmp	DisplaySprite
000230A2                            ; ===========================================================================
000230A2                            
000230A2                            Obj7D_Delete2:
000230A2 4EF9 0001 5D26             		jmp	DeleteObject
000230A8                            ; ===========================================================================
000230A8                            ; ---------------------------------------------------------------------------
000230A8                            ; Sprite mappings - hidden points at the end of	a level
000230A8                            ; ---------------------------------------------------------------------------
000230A8                            Map_obj7D:
000230A8                            	include "_maps\obj7D.asm"
000230A8                            ; ---------------------------------------------------------------------------
000230A8                            ; Sprite mappings - hidden points at the end of	a level
000230A8                            ; ---------------------------------------------------------------------------
000230A8 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000230AC 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000230B0 00                         byte_17250:	dc.b 0
000230B1 01                         byte_17251:	dc.b 1
000230B2 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000230B7 01                         byte_17257:	dc.b 1
000230B8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000230BD 01                         byte_1725D:	dc.b 1
000230BE F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000230C4 00                         		even
000230C4 00                         		even
000230C4                            
000230C4                            ; ===========================================================================
000230C4                            ; ---------------------------------------------------------------------------
000230C4                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000230C4                            ; ---------------------------------------------------------------------------
000230C4                            
000230C4                            Obj8A:					; XREF: Obj_Index
000230C4 7000                       		moveq	#0,d0
000230C6 1028 0024                  		move.b	routine(a0),d0
000230CA 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000230CE 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000230D2                            ; ===========================================================================
000230D2 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000230D4 0000                       		dc.w Obj8A_Display-Obj8A_Index
000230D6                            ; ===========================================================================
000230D6                            
000230D6                            Obj8A_Main:				; XREF: Obj8A_Index
000230D6 5428 0024                  		addq.b	#2,routine(a0)
000230DA 317C 0120 0008             		move.w	#$120,8(a0)
000230E0 317C 00F0 000A             		move.w	#$F0,$A(a0)
000230E6 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000230EE 317C 05A0 0002             		move.w	#$5A0,2(a0)
000230F4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000230F8 1140 001A                  		move.b	d0,mapping_frame(a0)	; display appropriate sprite
000230FC 117C 0000 0001             		move.b	#0,1(a0)
00023102 117C 0000 0018             		move.b	#0,priority(a0)
00023108 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0002310E 6600                       		bne.s	Obj8A_Display	; if not, branch
00023110 317C 00A6 0002             		move.w	#$A6,2(a0)
00023116 117C 000A 001A             		move.b	#$A,mapping_frame(a0)	; display "SONIC TEAM PRESENTS"
0002311C 4A38 FFD3                  		tst.b	($FFFFFFD3).w	; is hidden credits cheat on?
00023120 4E71                       		nop	Obj8A_Display	; if not, branch
00023122 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00023128 6600                       		bne.s	Obj8A_Display	; if not, branch
0002312A 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00023130 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00023136 4EF9 0001 5D26             		jmp	DeleteObject
0002313C                            ; ===========================================================================
0002313C                            
0002313C                            Obj8A_Display:				; XREF: Obj8A_Index
0002313C 4EF9 0001 5D72             		jmp	DisplaySprite
00023142                            ; ===========================================================================
00023142                            ; ---------------------------------------------------------------------------
00023142                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00023142                            ; ---------------------------------------------------------------------------
00023142                            Map_obj8A:
00023142                            	include "_maps\obj8A.asm"
00023142                            ; ---------------------------------------------------------------------------
00023142                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00023142                            ; ---------------------------------------------------------------------------
00023142 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00023146 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
0002314A 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0002314E 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00023152 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00023156 0000                       		dc.w byte_176A9-Map_obj8A
00023158 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00023159 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0002315E F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00023163 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00023168 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0002316D F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00023172 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00023177 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0002317C F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00023181 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00023186 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0002318B F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00023190 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00023195 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0002319A F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0002319F 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
000231A0 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
000231A5 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000231AA D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000231AF D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000231B4 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000231B9 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000231BE D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000231C3 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000231C8 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000231CD 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000231D2 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000231D7 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000231DC 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000231E1 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000231E6 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000231EB 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000231F0 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000231F1 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000231F6 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000231FB D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00023200 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00023205 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
0002320A D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
0002320F D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00023214 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00023219 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
0002321E 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00023223 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00023224 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00023229 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
0002322E D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00023233 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00023238 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
0002323D D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00023242 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00023247 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
0002324C D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00023251 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00023256 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
0002325B D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00023260 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00023265 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
0002326A D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0002326F 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00023274 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00023279 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0002327E 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00023283 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00023288 0805 0016 00               		dc.b 8,	5, 0, $16, 0
0002328D 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00023292 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00023297 0805 0042 30               		dc.b 8,	5, 0, $42, $30
0002329C 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
0002329D D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
000232A2 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
000232A7 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000232AC D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000232B1 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000232B6 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000232BB 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000232C0 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000232C5 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000232CA 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000232CF 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000232D4 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000232D9 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000232DE 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000232E3 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000232E8 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000232ED 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000232F2 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000232F7 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000232FC 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00023301 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00023302 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00023307 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
0002330C D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00023311 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00023316 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
0002331B D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00023320 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00023325 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
0002332A D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
0002332F D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00023334 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00023339 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
0002333E 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00023343 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00023348 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
0002334D 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00023352 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00023357 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
0002335C 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00023361 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00023366 0805 0058 18               		dc.b 8,	5, 0, $58, $18
0002336B 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00023370 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00023375 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
0002337A 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0002337F 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00023384 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00023385 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0002338A D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0002338F D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00023394 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00023399 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0002339E D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
000233A3 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
000233A8 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000233AD D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000233B2 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000233B7 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000233BC D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000233C1 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000233C6 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000233CB 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000233D0 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000233D5 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000233DA 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000233DF 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000233E4 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000233E9 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000233EE 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000233F3 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000233F8 48                         byte_17598:	dc.b $48	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL THANKS
000233F9 D805 002E 84               		dc.b $D8, 5, 0, $2E, $84	; S
000233FE D805 0012 94               		dc.b $D8, 5, 0, $12, $94	; P
00023403 D805 000E A4               		dc.b $D8, 5, 0, $0E, $A4	; E
00023408 D805 001E B4               		dc.b $D8, 5, 0, $1E, $B4	; C
0002340D D801 0046 C4               		dc.b $D8, 1, 0, $46, $C4	; I
00023412 D805 0004 CC               		dc.b $D8, 5, 0, 4, $CC		; A
00023417 D805 0016 DC               		dc.b $D8, 5, 0, $16, $DC	; L
0002341C D805 003E FC               		dc.b $D8, 5, 0, $3E, $FC	; T
00023421 D805 003A 0C               		dc.b $D8, 5, 0, $3A, $C	; H
00023426 D805 0004 1C               		dc.b $D8, 5, 0, 4, $1C		; A
0002342B D805 001A 2C               		dc.b $D8, 5, 0, $1A, $2C	; N
00023430 D805 0058 3C               		dc.b $D8, 5, 0, $58, $3C	; K
00023435 D805 002E 4C               		dc.b $D8, 5, 0, $2E, $4C	; S
0002343A                            
0002343A 0005 005C B0               		dc.b $0, 5, 0, $5C, $B0	; F
0002343F 0005 0032 C0               		dc.b $0, 5, 0, $32, $C0	; U
00023444 0005 004C D0               		dc.b $0, 5, 0, $4C, $D0	; J
00023449 0001 0046 E0               		dc.b $0, 1, 0, $46, $E0	; I
0002344E 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
00023453 0009 0008 00               		dc.b $0, 9, 0, 8, 0		; M
00023458 0001 0046 14               		dc.b $0, 1, 0, $46, $14	; I
0002345D 0005 001A 1C               		dc.b $0, 5, 0, $1A, $1C	; N
00023462 0005 000E 2C               		dc.b $0, 5, 0, $0E, $2C	; E
00023467 0005 0000 3C               		dc.b $0, 5, 0, 0, $3C		; G
0002346C 0001 0046 4C               		dc.b $0, 1, 0, $46, $4C	; I
00023471 0005 002E 54               		dc.b $0, 5, 0, $2E, $54	; S
00023476 0005 003A 64               		dc.b $0, 5, 0, $3A, $64	; H
0002347B 0001 0046 74               		dc.b $0, 1, 0, $46, $74	; I
00023480                            ; ERROR: UNKOWN SIGN
00023480                            ; ERROR: UNKOWN SIGN
00023480 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	; P
00023485 2005 0004 08               		dc.b $20, 5, 0, 4, $8		; A
0002348A 2005 0012 18               		dc.b $20, 5, 0, $12, $18	; P
0002348F 2005 0004 28               		dc.b $20, 5, 0, 4, $28		; A
00023494                            ; ERROR: UNKOWN SIGN
00023494                            ; ERROR: UNKOWN SIGN
00023494 3005 0022 E0               		dc.b $30, 5, 0, $22, $E0	; R
00023499 3005 000E F0               		dc.b $30, 5, 0, $0E, $F0	; E
0002349E 3005 0042 00               		dc.b $30, 5, 0, $42, $0	; D
000234A3 3005 003A 10               		dc.b $30, 5, 0, $3A, $10	; H
000234A8 3005 0026 20               		dc.b $30, 5, 0, $26, $20	; O
000234AD 3005 003E 30               		dc.b $30, 5, 0, $3E, $30	; T
000234B2 3005 002E 40               		dc.b $30, 5, 0, $2E, $40	; S
000234B7 3005 0026 50               		dc.b $30, 5, 0, $26, $50	; O
000234BC 3005 001A 60               		dc.b $30, 5, 0, $1A, $60	; N
000234C1 3001 0046 70               		dc.b $30, 1, 0, $46, $70	; I
000234C6 3005 001E 78               		dc.b $30, 5, 0, $1E, $78	; C
000234CB                            ; ERROR: UNKOWN SIGN
000234CB                            ; ERROR: UNKOWN SIGN
000234CB 4009 0008 A8               		dc.b $40, 9, 0, 8, $A8		; M
000234D0 4005 0004 BC               		dc.b $40, 5, 0, 4, $BC		; A
000234D5 4005 0022 CC               		dc.b $40, 5, 0, $22, $CC	; R
000234DA 4005 0058 DC               		dc.b $40, 5, 0, $58, $DC	; K
000234DF 4005 000E EC               		dc.b $40, 5, 0, $0E, $EC	; E
000234E4 4005 002A FC               		dc.b $40, 5, 0, $2A, $FC	; Y
000234E9 4005 004C 0C               		dc.b $40, 5, 0, $4C, $C	; J
000234EE 4005 000E 1C               		dc.b $40, 5, 0, $0E, $1C	; E
000234F3 4005 002E 2C               		dc.b $40, 5, 0, $2E, $2C	; S
000234F8 4005 003E 3C               		dc.b $40, 5, 0, $3E, $3C	; T
000234FD 4005 000E 4C               		dc.b $40, 5, 0, $0E, $4C	; E
00023502 4005 0022 5C               		dc.b $40, 5, 0, $22, $5C	; R
00023507                            ; ERROR: UNKOWN SIGN
00023507                            ; ERROR: UNKOWN SIGN
00023507 5005 002E 8C               		dc.b $50, 5, 0, $2E, $8C	; S
0002350C 5005 000E 9C               		dc.b $50, 5, 0, $0E, $9C	; E
00023511 5005 0016 AC               		dc.b $50, 5, 0, $16, $AC	; L
00023516 5005 0048 BC               		dc.b $50, 5, 0, $48, $BC	; B
0002351B 5001 0046 CC               		dc.b $50, 1, 0, $46, $CC	; I
00023520 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00023521 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00023526 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0002352B F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00023530 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00023535 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0002353A F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0002353F F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00023544 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00023549 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0002354E F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00023553 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00023558 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0002355D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00023562 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00023567 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0002356C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0002356D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00023572 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00023577 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0002357C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00023581 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00023586 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0002358B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00023590 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00023595 17                         byte_176A9:	dc.b $17	;  SONIC TEAM PRESENTS | THERETROGUY PRODUCTIONS
00023596 E805 003E 80               		dc.b $E8, 5, 0, $3E, $80	; T
0002359B E805 003A 90               		dc.b $E8, 5, 0, $3A, $90	; H
000235A0 E805 000E A0               		dc.b $E8, 5, 0, $0E, $A0	; E
000235A5 E805 0022 B0               		dc.b $E8, 5, 0, $22, $B0	; R
000235AA E805 000E C0               		dc.b $E8, 5, 0, $0E, $C0	; E
000235AF E805 003E D0               		dc.b $E8, 5, 0, $3E, $D0	; T
000235B4 E805 0022 E0               		dc.b $E8, 5, 0, $22, $E0	; R
000235B9 E805 0026 F0               		dc.b $E8, 5, 0, $26, $F0	; O
000235BE E805 0000 00               		dc.b $E8, 5, 0, 0, $0		; G
000235C3 E805 0032 10               		dc.b $E8, 5, 0, $32, $10	; U
000235C8 E805 002A 20               		dc.b $E8, 5, 0, $2A, $20	; Y
000235CD                            
000235CD 0005 0012 C8               		dc.b $0, 5, 0, $12, $C8	; P
000235D2 0005 0022 D8               		dc.b $0, 5, 0, $22, $D8	; R
000235D7 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
000235DC 0005 0042 F8               		dc.b $0, 5, 0, $42, $F8	; D
000235E1 0005 0032 08               		dc.b $0, 5, 0, $32, $8	; U
000235E6 0005 001E 18               		dc.b $0, 5, 0, $1E, $18	; C
000235EB 0005 003E 28               		dc.b $0, 5, 0, $3E, $28	; T
000235F0 0001 0046 38               		dc.b $0, 1, 0, $46, $38	; I
000235F5 0005 0026 40               		dc.b $0, 5, 0, $26, $40	; O
000235FA 0005 001A 50               		dc.b $0, 5, 0, $1A, $50	; N
000235FF 0005 002E 60               		dc.b $0, 5, 0, $2E, $60	; S
00023604                            		even
00023604                            		even
00023604                            
00023604                            ; ===========================================================================
00023604                            ; ---------------------------------------------------------------------------
00023604                            ; Object 3D - Eggman (GHZ)
00023604                            ; ---------------------------------------------------------------------------
00023604                            
00023604                            Obj3D:					; XREF: Obj_Index
00023604 7000                       		moveq	#0,d0
00023606 1028 0024                  		move.b	$24(a0),d0
0002360A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0002360E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00023612                            ; ===========================================================================
00023612 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00023614 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00023616 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00023618 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0002361A                            
0002361A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0002361C 0401                       		dc.b 4,	1
0002361E 0607                       		dc.b 6,	7
00023620                            ; ===========================================================================
00023620                            
00023620                            Obj3D_Main:				; XREF: Obj3D_Index
00023620 45F9 0002 361A             		lea	(Obj3D_ObjData).l,a2
00023626 2248                       		movea.l	a0,a1
00023628 7202                       		moveq	#2,d1
0002362A 6000                       		bra.s	Obj3D_LoadBoss
0002362C                            ; ===========================================================================
0002362C                            
0002362C                            Obj3D_Loop:
0002362C 4EB9 0001 6892             		jsr	SingleObjLoad2
00023632 6600                       		bne.s	loc_17772
00023634                            
00023634                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00023634 135A 0024                  		move.b	(a2)+,$24(a1)
00023638 12BC 003D                  		move.b	#$3D,0(a1)
0002363C 3368 0008 0008             		move.w	8(a0),8(a1)
00023642 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023648 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00023650 337C 0400 0002             		move.w	#$400,2(a1)
00023656 137C 0004 0001             		move.b	#4,1(a1)
0002365C 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00023662 337C 0180 0018             		move.w	#$180,priority(a1)
00023668 135A 001C                  		move.b	(a2)+,$1C(a1)
0002366C 2348 0034                  		move.l	a0,$34(a1)
00023670 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00023674                            
00023674                            loc_17772:
00023674 3168 0008 0030             		move.w	8(a0),$30(a0)
0002367A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023680 117C 000F 0020             		move.b	#$F,$20(a0)
00023686 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0002368C                            
0002368C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0002368C 7000                       		moveq	#0,d0
0002368E 1028 0025                  		move.b	$25(a0),d0
00023692 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00023696 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0002369A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000236A0 4EB9 0001 2754             		jsr	AnimateSprite
000236A6 1028 0022                  		move.b	$22(a0),d0
000236AA 0200 0003                  		andi.b	#3,d0
000236AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000236B4 8128 0001                  		or.b	d0,1(a0)
000236B8 4EF9 0001 5D72             		jmp	DisplaySprite
000236BE                            ; ===========================================================================
000236BE 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000236C0 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000236C2 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000236C4 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000236C6 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000236C8 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000236CA 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000236CC                            ; ===========================================================================
000236CC                            
000236CC                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000236CC 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000236D2 6100 0000                  		bsr.w	BossMove
000236D6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000236DC 6600                       		bne.s	loc_177E6
000236DE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000236E4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000236E8                            
000236E8                            loc_177E6:
000236E8 1028 003F                  		move.b	$3F(a0),d0
000236EC 4EB9 0000 8F30             		jsr	(CalcSine).l
000236F2 EC40                       		asr.w	#6,d0
000236F4 D068 0038                  		add.w	$38(a0),d0
000236F8 3140 000C                  		move.w	d0,$C(a0)
000236FC 3168 0030 0008             		move.w	$30(a0),8(a0)
00023702 5428 003F                  		addq.b	#2,$3F(a0)
00023706 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0002370C 6400                       		bcc.s	locret_1784A
0002370E 4A28 0022                  		tst.b	$22(a0)
00023712 6B00                       		bmi.s	loc_1784C
00023714 4A28 0020                  		tst.b	$20(a0)
00023718 6600                       		bne.s	locret_1784A
0002371A 4A28 003E                  		tst.b	$3E(a0)
0002371E 6600                       		bne.s	Obj3D_ShipFlash
00023720 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00023724 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0002372A                            ;		move.w	#$AC,d0
0002372A 4EB9 0001 EEC4             		jsr	(BossModeMusic).l ;	play boss damage sound
00023730                            
00023730                            Obj3D_ShipFlash:
00023730 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00023734 7000                       		moveq	#0,d0		; move 0 (black) to d0
00023736 4A51                       		tst.w	(a1)
00023738 6600                       		bne.s	loc_1783C
0002373A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0002373E                            
0002373E                            loc_1783C:
0002373E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00023740 5328 003E                  		subq.b	#1,$3E(a0)
00023744 6600                       		bne.s	locret_1784A
00023746 117C 000F 0020             		move.b	#$F,$20(a0)
0002374C                            
0002374C                            locret_1784A:
0002374C 4E75                       		rts	
0002374E                            ; ===========================================================================
0002374E                            
0002374E                            loc_1784C:				; XREF: loc_177E6
0002374E 7064                       		moveq	#100,d0
00023750 6100 0000                  		bsr.w	AddPoints
00023754 117C 0008 0025             		move.b	#8,$25(a0)
0002375A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00023760 4E75                       		rts	
00023762                            
00023762                            ; ---------------------------------------------------------------------------
00023762                            ; Defeated boss	subroutine
00023762                            ; ---------------------------------------------------------------------------
00023762                            
00023762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023762                            
00023762                            
00023762                            BossDefeated:
00023762 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00023766 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0002376A 0200 0007                  		andi.b	#7,d0
0002376E 6600                       		bne.s	locret_178A2
00023770 4EB9 0001 687C             		jsr	SingleObjLoad
00023776 6600                       		bne.s	locret_178A2
00023778 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0002377C 3368 0008 0008             		move.w	8(a0),8(a1)
00023782 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023788 4EB9 0000 8F0A             		jsr	(RandomNumber).l
0002378E 3200                       		move.w	d0,d1
00023790 7200                       		moveq	#0,d1
00023792 1200                       		move.b	d0,d1
00023794 E409                       		lsr.b	#2,d1
00023796 0441 0020                  		subi.w	#$20,d1
0002379A D369 0008                  		add.w	d1,8(a1)
0002379E E048                       		lsr.w	#8,d0
000237A0 E608                       		lsr.b	#3,d0
000237A2 D169 000C                  		add.w	d0,$C(a1)
000237A6                            
000237A6                            locret_178A2:
000237A6 4E75                       		rts	
000237A8                            ; End of function BossDefeated
000237A8                            
000237A8                            ; ---------------------------------------------------------------------------
000237A8                            ; Subroutine to	move a boss
000237A8                            ; ---------------------------------------------------------------------------
000237A8                            
000237A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000237A8                            
000237A8                            
000237A8                            BossMove:
000237A8 2428 0030                  		move.l	$30(a0),d2
000237AC 2628 0038                  		move.l	$38(a0),d3
000237B0 3028 0010                  		move.w	$10(a0),d0
000237B4 48C0                       		ext.l	d0
000237B6 E180                       		asl.l	#8,d0
000237B8 D480                       		add.l	d0,d2
000237BA 3028 0012                  		move.w	$12(a0),d0
000237BE 48C0                       		ext.l	d0
000237C0 E180                       		asl.l	#8,d0
000237C2 D680                       		add.l	d0,d3
000237C4 2142 0030                  		move.l	d2,$30(a0)
000237C8 2143 0038                  		move.l	d3,$38(a0)
000237CC 4E75                       		rts	
000237CE                            ; End of function BossMove
000237CE                            
000237CE                            ; ===========================================================================
000237CE                            
000237CE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000237CE 317C FF00 0010             		move.w	#-$100,$10(a0)
000237D4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000237DA 6100 FFCC                  		bsr.w	BossMove
000237DE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000237E4 6600                       		bne.s	loc_17916
000237E6 317C 0000 0010             		move.w	#0,$10(a0)
000237EC 317C 0000 0012             		move.w	#0,$12(a0)
000237F2 5428 0025                  		addq.b	#2,$25(a0)
000237F6 4EB9 0001 6892             		jsr	SingleObjLoad2
000237FC 6600                       		bne.s	loc_17910
000237FE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00023802 3368 0030 0008             		move.w	$30(a0),8(a1)
00023808 3368 0038 000C             		move.w	$38(a0),$C(a1)
0002380E 2348 0034                  		move.l	a0,$34(a1)
00023812                            
00023812                            loc_17910:
00023812 317C 0077 003C             		move.w	#$77,$3C(a0)
00023818                            
00023818                            loc_17916:
00023818 6000 FECE                  		bra.w	loc_177E6
0002381C                            ; ===========================================================================
0002381C                            
0002381C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0002381C 5368 003C                  		subq.w	#1,$3C(a0)
00023820 6A00                       		bpl.s	Obj3D_Reverse
00023822 5428 0025                  		addq.b	#2,$25(a0)
00023826 317C 003F 003C             		move.w	#$3F,$3C(a0)
0002382C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00023832 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00023838 6600                       		bne.s	Obj3D_Reverse
0002383A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00023840 317C 0040 0010             		move.w	#$40,$10(a0)
00023846                            
00023846                            Obj3D_Reverse:
00023846 0828 0000 0022             		btst	#0,$22(a0)
0002384C 6600                       		bne.s	loc_17950
0002384E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00023852                            
00023852                            loc_17950:
00023852 6000 FE94                  		bra.w	loc_177E6
00023856                            ; ===========================================================================
00023856                            
00023856                            loc_17954:				; XREF: Obj3D_ShipIndex
00023856 5368 003C                  		subq.w	#1,$3C(a0)
0002385A 6B00                       		bmi.s	loc_17960
0002385C 6100 FF4A                  		bsr.w	BossMove
00023860 6000                       		bra.s	loc_17976
00023862                            ; ===========================================================================
00023862                            
00023862                            loc_17960:
00023862 0868 0000 0022             		bchg	#0,$22(a0)
00023868 317C 003F 003C             		move.w	#$3F,$3C(a0)
0002386E 5528 0025                  		subq.b	#2,$25(a0)
00023872 317C 0000 0010             		move.w	#0,$10(a0)
00023878                            
00023878                            loc_17976:
00023878 6000 FE6E                  		bra.w	loc_177E6
0002387C                            ; ===========================================================================
0002387C                            
0002387C                            loc_1797A:				; XREF: Obj3D_ShipIndex
0002387C 5368 003C                  		subq.w	#1,$3C(a0)
00023880 6B00                       		bmi.s	loc_17984
00023882 6000 FEDE                  		bra.w	BossDefeated
00023886                            ; ===========================================================================
00023886                            
00023886                            loc_17984:
00023886 08E8 0000 0022             		bset	#0,$22(a0)
0002388C 08A8 0007 0022             		bclr	#7,$22(a0)
00023892 4268 0010                  		clr.w	$10(a0)
00023896 5428 0025                  		addq.b	#2,$25(a0)
0002389A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000238A0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000238A4 6600                       		bne.s	locret_179AA
000238A6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000238AC                            
000238AC                            locret_179AA:
000238AC 4E75                       		rts	
000238AE                            ; ===========================================================================
000238AE                            
000238AE                            loc_179AC:				; XREF: Obj3D_ShipIndex
000238AE 5268 003C                  		addq.w	#1,$3C(a0)
000238B2 6700                       		beq.s	loc_179BC
000238B4 6A00                       		bpl.s	loc_179C2
000238B6 0668 0018 0012             		addi.w	#$18,$12(a0)
000238BC 6000                       		bra.s	loc_179EE
000238BE                            ; ===========================================================================
000238BE                            
000238BE                            loc_179BC:
000238BE 4268 0012                  		clr.w	$12(a0)
000238C2 6000                       		bra.s	loc_179EE
000238C4                            ; ===========================================================================
000238C4                            
000238C4                            loc_179C2:
000238C4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000238CA 6500                       		bcs.s	loc_179DA
000238CC 6700                       		beq.s	loc_179E0
000238CE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000238D4 6500                       		bcs.s	loc_179EE
000238D6 5428 0025                  		addq.b	#2,$25(a0)
000238DA 6000                       		bra.s	loc_179EE
000238DC                            ; ===========================================================================
000238DC                            
000238DC                            loc_179DA:
000238DC 5168 0012                  		subq.w	#8,$12(a0)
000238E0 6000                       		bra.s	loc_179EE
000238E2                            ; ===========================================================================
000238E2                            
000238E2                            loc_179E0:
000238E2 4268 0012                  		clr.w	$12(a0)
000238E6                            	;	move.w	#$81,d0
000238E6 4EB9 0001 DAEA             		jsr	(super_GetBgm).l	; play GHZ music
000238EC                            
000238EC                            loc_179EE:
000238EC 6100 FEBA                  		bsr.w	BossMove
000238F0 6000 FDF6                  		bra.w	loc_177E6
000238F4                            ; ===========================================================================
000238F4                            
000238F4                            loc_179F6:				; XREF: Obj3D_ShipIndex
000238F4 317C 0400 0010             		move.w	#$400,$10(a0)
000238FA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00023900 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00023906 6700                       		beq.s	loc_17A10
00023908 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0002390C 6000                       		bra.s	loc_17A16
0002390E                            ; ===========================================================================
0002390E                            
0002390E                            loc_17A10:
0002390E 4A28 0001                  		tst.b	1(a0)
00023912 6A00                       		bpl.s	Obj3D_ShipDel
00023914                            
00023914                            loc_17A16:
00023914 6100 FE92                  		bsr.w	BossMove
00023918 6000 FDCE                  		bra.w	loc_177E6
0002391C                            ; ===========================================================================
0002391C                            
0002391C                            Obj3D_ShipDel:
0002391C 4EF9 0001 5D26             		jmp	DeleteObject
00023922                            ; ===========================================================================
00023922                            
00023922                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00023922 7000                       		moveq	#0,d0
00023924 7201                       		moveq	#1,d1
00023926 2268 0034                  		movea.l	$34(a0),a1
0002392A 1029 0025                  		move.b	$25(a1),d0
0002392E 5900                       		subq.b	#4,d0
00023930 6600                       		bne.s	loc_17A3E
00023932 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00023938 6600                       		bne.s	loc_17A46
0002393A 7204                       		moveq	#4,d1
0002393C                            
0002393C                            loc_17A3E:
0002393C 5D00                       		subq.b	#6,d0
0002393E 6B00                       		bmi.s	loc_17A46
00023940 720A                       		moveq	#$A,d1
00023942 6000                       		bra.s	loc_17A5A
00023944                            ; ===========================================================================
00023944                            
00023944                            loc_17A46:
00023944 4A29 0020                  		tst.b	$20(a1)
00023948 6600                       		bne.s	loc_17A50
0002394A 7205                       		moveq	#5,d1
0002394C 6000                       		bra.s	loc_17A5A
0002394E                            ; ===========================================================================
0002394E                            
0002394E                            loc_17A50:
0002394E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00023954 6500                       		bcs.s	loc_17A5A
00023956 7204                       		moveq	#4,d1
00023958                            
00023958                            loc_17A5A:
00023958 1141 001C                  		move.b	d1,$1C(a0)
0002395C 5500                       		subq.b	#2,d0
0002395E 6600                       		bne.s	Obj3D_FaceDisp
00023960 117C 0006 001C             		move.b	#6,$1C(a0)
00023966 4A28 0001                  		tst.b	1(a0)
0002396A 6A00                       		bpl.s	Obj3D_FaceDel
0002396C                            
0002396C                            Obj3D_FaceDisp:
0002396C 6000                       		bra.s	Obj3D_Display
0002396E                            ; ===========================================================================
0002396E                            
0002396E                            Obj3D_FaceDel:
0002396E 4EF9 0001 5D26             		jmp	DeleteObject
00023974                            ; ===========================================================================
00023974                            
00023974                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00023974 117C 0007 001C             		move.b	#7,$1C(a0)
0002397A 2268 0034                  		movea.l	$34(a0),a1
0002397E 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00023984 6600                       		bne.s	loc_17A96
00023986 117C 000B 001C             		move.b	#$B,$1C(a0)
0002398C 4A28 0001                  		tst.b	1(a0)
00023990 6A00                       		bpl.s	Obj3D_FlameDel
00023992 6000                       		bra.s	Obj3D_FlameDisp
00023994                            ; ===========================================================================
00023994                            
00023994                            loc_17A96:
00023994 3029 0010                  		move.w	$10(a1),d0
00023998 6700                       		beq.s	Obj3D_FlameDisp
0002399A 117C 0008 001C             		move.b	#8,$1C(a0)
000239A0                            
000239A0                            Obj3D_FlameDisp:
000239A0 6000                       		bra.s	Obj3D_Display
000239A2                            ; ===========================================================================
000239A2                            
000239A2                            Obj3D_FlameDel:
000239A2 4EF9 0001 5D26             		jmp	DeleteObject
000239A8                            ; ===========================================================================
000239A8                            
000239A8                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000239A8 2268 0034                  		movea.l	$34(a0),a1
000239AC 3169 0008 0008             		move.w	8(a1),8(a0)
000239B2 3169 000C 000C             		move.w	$C(a1),$C(a0)
000239B8 1169 0022 0022             		move.b	$22(a1),$22(a0)
000239BE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000239C4 4EB9 0001 2754             		jsr	AnimateSprite
000239CA 1028 0022                  		move.b	$22(a0),d0
000239CE 0200 0003                  		andi.b	#3,d0
000239D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000239D8 8128 0001                  		or.b	d0,1(a0)
000239DC 4EF9 0001 5D72             		jmp	DisplaySprite
000239E2                            ; ===========================================================================
000239E2                            ; ---------------------------------------------------------------------------
000239E2                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000239E2                            ; ---------------------------------------------------------------------------
000239E2                            
000239E2                            Obj48:					; XREF: Obj_Index
000239E2 7000                       		moveq	#0,d0
000239E4 1028 0024                  		move.b	$24(a0),d0
000239E8 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000239EC 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000239F0                            ; ===========================================================================
000239F0 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000239F2 0000                       		dc.w Obj48_Base-Obj48_Index
000239F4 0000                       		dc.w Obj48_Display2-Obj48_Index
000239F6 0000                       		dc.w loc_17C68-Obj48_Index
000239F8 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000239FA                            ; ===========================================================================
000239FA                            
000239FA                            Obj48_Main:				; XREF: Obj48_Index
000239FA 5428 0024                  		addq.b	#2,$24(a0)
000239FE 317C 4080 0026             		move.w	#$4080,$26(a0)
00023A04 317C FE00 003E             		move.w	#-$200,$3E(a0)
00023A0A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00023A12 317C 046C 0002             		move.w	#$46C,2(a0)
00023A18 45E8 0028                  		lea	$28(a0),a2
00023A1C 14FC 0000                  		move.b	#0,(a2)+
00023A20 7205                       		moveq	#5,d1
00023A22 2248                       		movea.l	a0,a1
00023A24 6000                       		bra.s	loc_17B60
00023A26                            ; ===========================================================================
00023A26                            
00023A26                            Obj48_MakeLinks:
00023A26 4EB9 0001 6892             		jsr	SingleObjLoad2
00023A2C 6600                       		bne.s	Obj48_MakeBall
00023A2E 3368 0008 0008             		move.w	8(a0),8(a1)
00023A34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023A3A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00023A3E 137C 0006 0024             		move.b	#6,$24(a1)
00023A44 237C 0000 F6AC 0004        		move.l	#Map_obj15,4(a1)
00023A4C 337C 0380 0002             		move.w	#$380,2(a1)
00023A52 137C 0001 001A             		move.b	#1,$1A(a1)
00023A58 5228 0028                  		addq.b	#1,$28(a0)
00023A5C                            
00023A5C                            loc_17B60:				; XREF: Obj48_Main
00023A5C 3A09                       		move.w	a1,d5
00023A5E 0445 D000                  		subi.w	#$D000,d5
00023A62 EC4D                       		lsr.w	#6,d5
00023A64 0245 007F                  		andi.w	#$7F,d5
00023A68 14C5                       		move.b	d5,(a2)+
00023A6A 137C 0004 0001             		move.b	#4,1(a1)
00023A70 137C 0008 0023             		move.b	#8,width_pixels(a1)
00023A76 337C 0300 0018             		move.w	#$300,priority(a1)
00023A7C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00023A82 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00023A86                            
00023A86                            Obj48_MakeBall:
00023A86 137C 0008 0024             		move.b	#8,$24(a1)
00023A8C 237C 0000 FEB4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00023A94 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00023A9A 137C 0001 001A             		move.b	#1,$1A(a1)
00023AA0 337C 0280 0018             		move.w	#$280,priority(a1)
00023AA6 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00023AAC 4E75                       		rts	
00023AAE                            ; ===========================================================================
00023AAE                            
00023AAE 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00023AB4                            
00023AB4                            ; ===========================================================================
00023AB4                            
00023AB4                            Obj48_Base:				; XREF: Obj48_Index
00023AB4 47F9 0002 3AAE             		lea	(Obj48_PosData).l,a3
00023ABA 45E8 0028                  		lea	$28(a0),a2
00023ABE 7C00                       		moveq	#0,d6
00023AC0 1C1A                       		move.b	(a2)+,d6
00023AC2                            
00023AC2                            loc_17BC6:
00023AC2 7800                       		moveq	#0,d4
00023AC4 181A                       		move.b	(a2)+,d4
00023AC6 ED4C                       		lsl.w	#6,d4
00023AC8 0684 00FF D000             		addi.l	#$FFD000,d4
00023ACE 2244                       		movea.l	d4,a1
00023AD0 101B                       		move.b	(a3)+,d0
00023AD2 B029 003C                  		cmp.b	$3C(a1),d0
00023AD6 6700                       		beq.s	loc_17BE0
00023AD8 5229 003C                  		addq.b	#1,$3C(a1)
00023ADC                            
00023ADC                            loc_17BE0:
00023ADC 51CE FFE4                  		dbf	d6,loc_17BC6
00023AE0                            
00023AE0 B029 003C                  		cmp.b	$3C(a1),d0
00023AE4 6600                       		bne.s	loc_17BFA
00023AE6 2268 0034                  		movea.l	$34(a0),a1
00023AEA 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00023AF0 6600                       		bne.s	loc_17BFA
00023AF2 5428 0024                  		addq.b	#2,$24(a0)
00023AF6                            
00023AF6                            loc_17BFA:
00023AF6 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00023AFC 6700                       		beq.s	Obj48_Display
00023AFE 5268 0032                  		addq.w	#1,$32(a0)
00023B02                            
00023B02                            Obj48_Display:
00023B02 6100 0000                  		bsr.w	sub_17C2A
00023B06 1028 0026                  		move.b	$26(a0),d0
00023B0A 4EB9 0000 F612             		jsr	(Obj15_Move2).l
00023B10 4EF9 0001 5D72             		jmp	DisplaySprite
00023B16                            ; ===========================================================================
00023B16                            
00023B16                            Obj48_Display2:				; XREF: Obj48_Index
00023B16 6100 0000                  		bsr.w	sub_17C2A
00023B1A 4EB9 0000 F5D2             		jsr	(Obj48_Move).l
00023B20 4EF9 0001 5D72             		jmp	DisplaySprite
00023B26                            
00023B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023B26                            
00023B26                            
00023B26                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00023B26 2268 0034                  		movea.l	$34(a0),a1
00023B2A 0628 0020 001B             		addi.b	#$20,$1B(a0)
00023B30 6400                       		bcc.s	loc_17C3C
00023B32 0868 0000 001A             		bchg	#0,$1A(a0)
00023B38                            
00023B38                            loc_17C3C:
00023B38 3169 0008 003A             		move.w	8(a1),$3A(a0)
00023B3E 3029 000C                  		move.w	$C(a1),d0
00023B42 D068 0032                  		add.w	$32(a0),d0
00023B46 3140 0038                  		move.w	d0,$38(a0)
00023B4A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00023B50 4A29 0022                  		tst.b	$22(a1)
00023B54 6A00                       		bpl.s	locret_17C66
00023B56 10BC 003F                  		move.b	#$3F,0(a0)
00023B5A 117C 0000 0024             		move.b	#0,$24(a0)
00023B60                            
00023B60                            locret_17C66:
00023B60 4E75                       		rts	
00023B62                            ; End of function sub_17C2A
00023B62                            
00023B62                            ; ===========================================================================
00023B62                            
00023B62                            loc_17C68:				; XREF: Obj48_Index
00023B62 2268 0034                  		movea.l	$34(a0),a1
00023B66 4A29 0022                  		tst.b	$22(a1)
00023B6A 6A00                       		bpl.s	Obj48_Display3
00023B6C 10BC 003F                  		move.b	#$3F,0(a0)
00023B70 117C 0000 0024             		move.b	#0,$24(a0)
00023B76                            
00023B76                            Obj48_Display3:
00023B76 4EF9 0001 5D72             		jmp	DisplaySprite
00023B7C                            ; ===========================================================================
00023B7C                            
00023B7C                            Obj48_ChkVanish:			; XREF: Obj48_Index
00023B7C 7000                       		moveq	#0,d0
00023B7E 4A28 001A                  		tst.b	$1A(a0)
00023B82 6600                       		bne.s	Obj48_Vanish
00023B84 5200                       		addq.b	#1,d0
00023B86                            
00023B86                            Obj48_Vanish:
00023B86 1140 001A                  		move.b	d0,$1A(a0)
00023B8A 2268 0034                  		movea.l	$34(a0),a1
00023B8E 4A29 0022                  		tst.b	$22(a1)
00023B92 6A00                       		bpl.s	Obj48_Display4
00023B94 117C 0000 0020             		move.b	#0,$20(a0)
00023B9A 6100 FBC6                  		bsr.w	BossDefeated
00023B9E 5328 003C                  		subq.b	#1,$3C(a0)
00023BA2 6A00                       		bpl.s	Obj48_Display4
00023BA4 10BC 003F                  		move.b	#$3F,(a0)
00023BA8 117C 0000 0024             		move.b	#0,$24(a0)
00023BAE                            
00023BAE                            Obj48_Display4:
00023BAE 4EF9 0001 5D72             		jmp	DisplaySprite
00023BB4                            ; ===========================================================================
00023BB4                            Ani_Eggman:
00023BB4                            	include "_anim\Eggman.asm"
00023BB4                            ; ---------------------------------------------------------------------------
00023BB4                            ; Animation script - Eggman (bosses)
00023BB4                            ; ---------------------------------------------------------------------------
00023BB4 0000                       		dc.w byte_17CD4-Ani_Eggman
00023BB6 0000                       		dc.w byte_17CD8-Ani_Eggman
00023BB8 0000                       		dc.w byte_17CDC-Ani_Eggman
00023BBA 0000                       		dc.w byte_17CE0-Ani_Eggman
00023BBC 0000                       		dc.w byte_17CE4-Ani_Eggman
00023BBE 0000                       		dc.w byte_17CE8-Ani_Eggman
00023BC0 0000                       		dc.w byte_17CEC-Ani_Eggman
00023BC2 0000                       		dc.w byte_17CF0-Ani_Eggman
00023BC4 0000                       		dc.w byte_17CF4-Ani_Eggman
00023BC6 0000                       		dc.w byte_17CF8-Ani_Eggman
00023BC8 0000                       		dc.w byte_17CFC-Ani_Eggman
00023BCA 0000                       		dc.w byte_17D00-Ani_Eggman
00023BCC 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00023BD0 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00023BD4 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00023BD8 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00023BDC 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00023BE0 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00023BE4 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00023BE8 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00023BEC 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00023BF0 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00023BF4 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00023BF8 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00023C04                            		even
00023C04                            		even
00023C04                            
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            ; Sprite mappings - Eggman (boss levels)
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            Map_Eggman:
00023C04                            	include "_maps\Eggman.asm"
00023C04                            ; ---------------------------------------------------------------------------
00023C04                            ; Sprite mappings - Eggman (boss levels)
00023C04                            ; ---------------------------------------------------------------------------
00023C04 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00023C08 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00023C0C 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00023C10 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00023C14 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00023C18 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00023C1C 0000                       		dc.w byte_17DC8-Map_Eggman
00023C1E 06                         byte_17D26:	dc.b 6
00023C1F EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00023C24 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00023C29 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00023C2E FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00023C33 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00023C38 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00023C3D 02                         byte_17D45:	dc.b 2
00023C3E E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00023C43 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00023C48 02                         byte_17D50:	dc.b 2
00023C49 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00023C4E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00023C53 03                         byte_17D5B:	dc.b 3
00023C54 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00023C59 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00023C5E EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00023C63 03                         byte_17D6B:	dc.b 3
00023C64 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00023C69 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00023C6E EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00023C73 03                         byte_17D7B:	dc.b 3
00023C74 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00023C79 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00023C7E EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00023C83 03                         byte_17D8B:	dc.b 3
00023C84 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00023C89 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00023C8E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00023C93 04                         byte_17D9B:	dc.b 4
00023C94 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00023C99 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00023C9E EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00023CA3 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00023CA8 01                         byte_17DB0:	dc.b 1
00023CA9 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00023CAE 01                         byte_17DB6:	dc.b 1
00023CAF 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00023CB4 00                         byte_17DBC:	dc.b 0
00023CB5 02                         byte_17DBD:	dc.b 2
00023CB6 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00023CBB 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00023CC0 02                         byte_17DC8:	dc.b 2
00023CC1 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00023CC6 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00023CCC 00                         		even
00023CCC 00                         		even
00023CCC                            ;	even
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            Map_BossItems:
00023CCC                            	include "_maps\Boss items.asm"
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00023CCC                            ; ---------------------------------------------------------------------------
00023CCC 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00023CD0 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00023CD4 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00023CD8 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00023CDC 01                         byte_17DE4:	dc.b 1
00023CDD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00023CE2 02                         byte_17DEA:	dc.b 2
00023CE3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00023CE8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00023CED 00                         		dc.b 0
00023CEE 01                         byte_17DF6:	dc.b 1
00023CEF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00023CF4 01                         byte_17DFC:	dc.b 1
00023CF5 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00023CFA 01                         byte_17E02:	dc.b 1
00023CFB 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00023D00 04                         byte_17E08:	dc.b 4
00023D01 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00023D06 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00023D0B F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00023D10 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00023D15 00                         		dc.b 0
00023D16 02                         byte_17E1E:	dc.b 2
00023D17 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00023D1C 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00023D21 00                         		dc.b 0
00023D22 02                         byte_17E2A:	dc.b 2
00023D23 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00023D28 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00023D2E 00                         		even
00023D2E 00                         		even
00023D2E                            ;	even
00023D2E                            
00023D2E                            ; ---------------------------------------------------------------------------
00023D2E                            ; Object 77 - Eggman (LZ)
00023D2E                            ; ---------------------------------------------------------------------------
00023D2E                            
00023D2E                            Obj77:					; XREF: Obj_Index
00023D2E 7000                       		moveq	#0,d0
00023D30 1028 0024                  		move.b	$24(a0),d0
00023D34 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00023D38 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00023D3C                            ; ===========================================================================
00023D3C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00023D3E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00023D40 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00023D42 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00023D44                            
00023D44 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00023D46 0401                       		dc.b 4,	1
00023D48 0607                       		dc.b 6,	7
00023D4A                            ; ===========================================================================
00023D4A                            
00023D4A                            Obj77_Main:				; XREF: Obj77_Index
00023D4A 317C 1E10 0008             		move.w	#$1E10,8(a0)
00023D50 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00023D56 3168 0008 0030             		move.w	8(a0),$30(a0)
00023D5C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023D62 117C 000F 0020             		move.b	#$F,$20(a0)
00023D68 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00023D6E 317C 0200 0018             		move.w	#$200,priority(a0)
00023D74 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00023D78 2248                       		movea.l	a0,a1
00023D7A 7202                       		moveq	#2,d1
00023D7C 6000                       		bra.s	Obj77_LoadBoss
00023D7E                            ; ===========================================================================
00023D7E                            
00023D7E                            Obj77_Loop:
00023D7E 4EB9 0001 6892             		jsr	SingleObjLoad2
00023D84 6600                       		bne.s	Obj77_ShipMain
00023D86 12BC 0077                  		move.b	#$77,0(a1)
00023D8A 3368 0008 0008             		move.w	8(a0),8(a1)
00023D90 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023D96                            
00023D96                            Obj77_LoadBoss:				; XREF: Obj77_Main
00023D96 08A8 0000 0022             		bclr	#0,$22(a0)
00023D9C 4229 0025                  		clr.b	$25(a1)
00023DA0 135A 0024                  		move.b	(a2)+,$24(a1)
00023DA4 135A 001C                  		move.b	(a2)+,$1C(a1)
00023DA8 3368 0018 0018             		move.w	priority(a0),priority(a1)
00023DAE 237C 0002 3C04 0004        		move.l	#Map_Eggman,4(a1)
00023DB6 337C 0400 0002             		move.w	#$400,2(a1)
00023DBC 137C 0004 0001             		move.b	#4,1(a1)
00023DC2 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00023DC8 2348 0034                  		move.l	a0,$34(a1)
00023DCC 51C9 FFB0                  		dbf	d1,Obj77_Loop
00023DD0                            
00023DD0                            Obj77_ShipMain:
00023DD0 43F8 D000                  		lea	($FFFFD000).w,a1
00023DD4 7000                       		moveq	#0,d0
00023DD6 1028 0025                  		move.b	$25(a0),d0
00023DDA 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00023DDE 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00023DE2 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
00023DE8 4EB9 0001 2754             		jsr	AnimateSprite
00023DEE 7003                       		moveq	#3,d0
00023DF0 C028 0022                  		and.b	$22(a0),d0
00023DF4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023DFA 8128 0001                  		or.b	d0,1(a0)
00023DFE 4EF9 0001 5D72             		jmp	DisplaySprite
00023E04                            ; ===========================================================================
00023E04 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00023E08 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00023E0C 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00023E10 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00023E14                            ; ===========================================================================
00023E14                            
00023E14                            loc_17F1E:				; XREF: Obj77_ShipIndex
00023E14 3029 0008                  		move.w	8(a1),d0
00023E18 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00023E1C 6500                       		bcs.s	loc_17F38
00023E1E 317C FE80 0012             		move.w	#-$180,$12(a0)
00023E24 317C 0060 0010             		move.w	#$60,$10(a0)
00023E2A 5428 0025                  		addq.b	#2,$25(a0)
00023E2E                            
00023E2E                            loc_17F38:
00023E2E 6100 F978                  		bsr.w	BossMove
00023E32 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023E38 3168 0030 0008             		move.w	$30(a0),8(a0)
00023E3E                            
00023E3E                            loc_17F48:
00023E3E 4A28 003D                  		tst.b	$3D(a0)
00023E42 6600                       		bne.s	loc_17F8E
00023E44 4A28 0022                  		tst.b	$22(a0)
00023E48 6B00                       		bmi.s	loc_17F92
00023E4A 4A28 0020                  		tst.b	$20(a0)
00023E4E 6600                       		bne.s	locret_17F8C
00023E50 4A28 003E                  		tst.b	$3E(a0)
00023E54 6600                       		bne.s	loc_17F70
00023E56 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00023E5A 117C 0020 003E             		move.b	#$20,$3E(a0)
00023E60                            ;		move.w	#$AC,d0
00023E60 4EB9 0001 EEC4             		jsr	(BossModeMusic).l
00023E66                            
00023E66                            loc_17F70:
00023E66 43F8 FB22                  		lea	($FFFFFB22).w,a1
00023E6A 7000                       		moveq	#0,d0
00023E6C 4A51                       		tst.w	(a1)
00023E6E 6600                       		bne.s	loc_17F7E
00023E70 303C 0EEE                  		move.w	#$EEE,d0
00023E74                            
00023E74                            loc_17F7E:
00023E74 3280                       		move.w	d0,(a1)
00023E76 5328 003E                  		subq.b	#1,$3E(a0)
00023E7A 6600                       		bne.s	locret_17F8C
00023E7C 117C 000F 0020             		move.b	#$F,$20(a0)
00023E82                            
00023E82                            locret_17F8C:
00023E82 4E75                       		rts	
00023E84                            ; ===========================================================================
00023E84                            
00023E84                            loc_17F8E:				; XREF: loc_17F48
00023E84 6000 F8DC                  		bra.w	BossDefeated
00023E88                            ; ===========================================================================
00023E88                            
00023E88                            loc_17F92:				; XREF: loc_17F48
00023E88 7064                       		moveq	#100,d0
00023E8A 6100 0000                  		bsr.w	AddPoints
00023E8E 117C 00FF 003D             		move.b	#-1,$3D(a0)
00023E94 4E75                       		rts	
00023E96                            ; ===========================================================================
00023E96                            
00023E96                            loc_17FA0:				; XREF: Obj77_ShipIndex
00023E96 70FE                       		moveq	#-2,d0
00023E98 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00023E9E 6500                       		bcs.s	loc_17FB6
00023EA0 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00023EA6 4268 0010                  		clr.w	$10(a0)
00023EAA 5240                       		addq.w	#1,d0
00023EAC                            
00023EAC                            loc_17FB6:
00023EAC 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00023EB2 6E00                       		bgt.s	loc_17FCA
00023EB4 317C 0500 0038             		move.w	#$500,$38(a0)
00023EBA 4268 0012                  		clr.w	$12(a0)
00023EBE 5240                       		addq.w	#1,d0
00023EC0                            
00023EC0                            loc_17FCA:
00023EC0 6600                       		bne.s	loc_17FDC
00023EC2 317C 0140 0010             		move.w	#$140,$10(a0)
00023EC8 317C FE00 0012             		move.w	#-$200,$12(a0)
00023ECE 5428 0025                  		addq.b	#2,$25(a0)
00023ED2                            
00023ED2                            loc_17FDC:
00023ED2 6000 FF5A                  		bra.w	loc_17F38
00023ED6                            ; ===========================================================================
00023ED6                            
00023ED6                            loc_17FE0:				; XREF: Obj77_ShipIndex
00023ED6 70FE                       		moveq	#-2,d0
00023ED8 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00023EDE 6500                       		bcs.s	loc_17FF6
00023EE0 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00023EE6 4268 0010                  		clr.w	$10(a0)
00023EEA 5240                       		addq.w	#1,d0
00023EEC                            
00023EEC                            loc_17FF6:
00023EEC 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00023EF2 6E00                       		bgt.s	loc_1800A
00023EF4 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00023EFA 4268 0012                  		clr.w	$12(a0)
00023EFE 5240                       		addq.w	#1,d0
00023F00                            
00023F00                            loc_1800A:
00023F00 6600                       		bne.s	loc_1801A
00023F02 317C FE80 0012             		move.w	#-$180,$12(a0)
00023F08 5428 0025                  		addq.b	#2,$25(a0)
00023F0C 4228 003F                  		clr.b	$3F(a0)
00023F10                            
00023F10                            loc_1801A:
00023F10 6000 FF1C                  		bra.w	loc_17F38
00023F14                            ; ===========================================================================
00023F14                            
00023F14                            loc_1801E:				; XREF: Obj77_ShipIndex
00023F14 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00023F1A 6E00                       		bgt.s	loc_1804E
00023F1C 317C 0100 0038             		move.w	#$100,$38(a0)
00023F22 317C 0140 0010             		move.w	#$140,$10(a0)
00023F28 317C FF80 0012             		move.w	#-$80,$12(a0)
00023F2E 4A28 003D                  		tst.b	$3D(a0)
00023F32 6700                       		beq.s	loc_18046
00023F34 E1E8 0010                  		asl	$10(a0)
00023F38 E1E8 0012                  		asl	$12(a0)
00023F3C                            
00023F3C                            loc_18046:
00023F3C 5428 0025                  		addq.b	#2,$25(a0)
00023F40 6000 FEEC                  		bra.w	loc_17F38
00023F44                            ; ===========================================================================
00023F44                            
00023F44                            loc_1804E:
00023F44 08E8 0000 0022             		bset	#0,$22(a0)
00023F4A 5428 003F                  		addq.b	#2,$3F(a0)
00023F4E 1028 003F                  		move.b	$3F(a0),d0
00023F52 4EB9 0000 8F30             		jsr	(CalcSine).l
00023F58 4A41                       		tst.w	d1
00023F5A 6A00                       		bpl.s	loc_1806C
00023F5C 08A8 0000 0022             		bclr	#0,$22(a0)
00023F62                            
00023F62                            loc_1806C:
00023F62 E840                       		asr.w	#4,d0
00023F64 4840                       		swap	d0
00023F66 4240                       		clr.w	d0
00023F68 D0A8 0030                  		add.l	$30(a0),d0
00023F6C 4840                       		swap	d0
00023F6E 3140 0008                  		move.w	d0,8(a0)
00023F72 3028 0012                  		move.w	$12(a0),d0
00023F76 3238 D00C                  		move.w	($FFFFD00C).w,d1
00023F7A 9268 000C                  		sub.w	$C(a0),d1
00023F7E 6500                       		bcs.s	loc_180A2
00023F80 0441 0048                  		subi.w	#$48,d1
00023F84 6500                       		bcs.s	loc_180A2
00023F86 E240                       		asr.w	#1,d0
00023F88 0441 0028                  		subi.w	#$28,d1
00023F8C 6500                       		bcs.s	loc_180A2
00023F8E E240                       		asr.w	#1,d0
00023F90 0441 0028                  		subi.w	#$28,d1
00023F94 6500                       		bcs.s	loc_180A2
00023F96 7000                       		moveq	#0,d0
00023F98                            
00023F98                            loc_180A2:
00023F98 48C0                       		ext.l	d0
00023F9A E180                       		asl.l	#8,d0
00023F9C 4A28 003D                  		tst.b	$3D(a0)
00023FA0 6700                       		beq.s	loc_180AE
00023FA2 D080                       		add.l	d0,d0
00023FA4                            
00023FA4                            loc_180AE:
00023FA4 D1A8 0038                  		add.l	d0,$38(a0)
00023FA8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023FAE 6000 FE8E                  		bra.w	loc_17F48
00023FB2                            ; ===========================================================================
00023FB2                            
00023FB2                            loc_180BC:				; XREF: Obj77_ShipIndex
00023FB2 70FE                       		moveq	#-2,d0
00023FB4 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00023FBA 6500                       		bcs.s	loc_180D2
00023FBC 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00023FC2 4268 0010                  		clr.w	$10(a0)
00023FC6 5240                       		addq.w	#1,d0
00023FC8                            
00023FC8                            loc_180D2:
00023FC8 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00023FCE 6E00                       		bgt.s	loc_180E6
00023FD0 317C 00C0 0038             		move.w	#$C0,$38(a0)
00023FD6 4268 0012                  		clr.w	$12(a0)
00023FDA 5240                       		addq.w	#1,d0
00023FDC                            
00023FDC                            loc_180E6:
00023FDC 6600                       		bne.s	loc_180F2
00023FDE 5428 0025                  		addq.b	#2,$25(a0)
00023FE2 08A8 0000 0022             		bclr	#0,$22(a0)
00023FE8                            
00023FE8                            loc_180F2:
00023FE8 6000 FE44                  		bra.w	loc_17F38
00023FEC                            ; ===========================================================================
00023FEC                            
00023FEC                            loc_180F6:				; XREF: Obj77_ShipIndex
00023FEC 4A28 003D                  		tst.b	$3D(a0)
00023FF0 6600                       		bne.s	loc_18112
00023FF2 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00023FF8 6D00                       		blt.s	loc_18126
00023FFA 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00024000 6E00                       		bgt.s	loc_18126
00024002 117C 0032 003C             		move.b	#$32,$3C(a0)
00024008                            
00024008                            loc_18112:
00024008                            	;	move.w	(Level_Music).w,d0
00024008 4EB9 0001 DAEA             		jsr	(super_GetBgm).l	; play LZ music
0002400E 08E8 0000 0022             		bset	#0,$22(a0)
00024014 5428 0025                  		addq.b	#2,$25(a0)
00024018                            
00024018                            loc_18126:
00024018 6000 FE14                  		bra.w	loc_17F38
0002401C                            ; ===========================================================================
0002401C                            
0002401C                            loc_1812A:				; XREF: Obj77_ShipIndex
0002401C 4A28 003D                  		tst.b	$3D(a0)
00024020 6600                       		bne.s	loc_18136
00024022 5328 003C                  		subq.b	#1,$3C(a0)
00024026 6600                       		bne.s	loc_1814E
00024028                            
00024028                            loc_18136:
00024028 4228 003C                  		clr.b	$3C(a0)
0002402C 317C 0400 0010             		move.w	#$400,$10(a0)
00024032 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024038 4228 003D                  		clr.b	$3D(a0)
0002403C 5428 0025                  		addq.b	#2,$25(a0)
00024040                            
00024040                            loc_1814E:
00024040 6000 FDEC                  		bra.w	loc_17F38
00024044                            ; ===========================================================================
00024044                            
00024044                            loc_18152:				; XREF: Obj77_ShipIndex
00024044 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0002404A 6400                       		bcc.s	loc_18160
0002404C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00024050 6000                       		bra.s	loc_18166
00024052                            ; ===========================================================================
00024052                            
00024052                            loc_18160:
00024052 4A28 0001                  		tst.b	1(a0)
00024056 6A00                       		bpl.s	Obj77_ShipDel
00024058                            
00024058                            loc_18166:
00024058 6000 FDD4                  		bra.w	loc_17F38
0002405C                            ; ===========================================================================
0002405C                            
0002405C                            Obj77_ShipDel:
0002405C 4EF9 0001 5D26             		jmp	DeleteObject
00024062                            ; ===========================================================================
00024062                            
00024062                            Obj77_FaceMain:				; XREF: Obj77_Index
00024062 2268 0034                  		movea.l	$34(a0),a1
00024066 1011                       		move.b	(a1),d0
00024068 B010                       		cmp.b	(a0),d0
0002406A 6600                       		bne.s	Obj77_FaceDel
0002406C 7000                       		moveq	#0,d0
0002406E 1029 0025                  		move.b	$25(a1),d0
00024072 7201                       		moveq	#1,d1
00024074 4A28 003D                  		tst.b	$3D(a0)
00024078 6700                       		beq.s	loc_1818C
0002407A 720A                       		moveq	#$A,d1
0002407C 6000                       		bra.s	loc_181A0
0002407E                            ; ===========================================================================
0002407E                            
0002407E                            loc_1818C:
0002407E 4A29 0020                  		tst.b	$20(a1)
00024082 6600                       		bne.s	loc_18196
00024084 7205                       		moveq	#5,d1
00024086 6000                       		bra.s	loc_181A0
00024088                            ; ===========================================================================
00024088                            
00024088                            loc_18196:
00024088 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0002408E 6500                       		bcs.s	loc_181A0
00024090 7204                       		moveq	#4,d1
00024092                            
00024092                            loc_181A0:
00024092 1141 001C                  		move.b	d1,$1C(a0)
00024096 0C00 000E                  		cmpi.b	#$E,d0
0002409A 6600                       		bne.s	loc_181B6
0002409C 117C 0006 001C             		move.b	#6,$1C(a0)
000240A2 4A28 0001                  		tst.b	1(a0)
000240A6 6A00                       		bpl.s	Obj77_FaceDel
000240A8                            
000240A8                            loc_181B6:
000240A8 6000                       		bra.s	Obj77_Display
000240AA                            ; ===========================================================================
000240AA                            
000240AA                            Obj77_FaceDel:
000240AA 4EF9 0001 5D26             		jmp	DeleteObject
000240B0                            ; ===========================================================================
000240B0                            
000240B0                            Obj77_FlameMain:			; XREF: Obj77_Index
000240B0 117C 0007 001C             		move.b	#7,$1C(a0)
000240B6 2268 0034                  		movea.l	$34(a0),a1
000240BA 1011                       		move.b	(a1),d0
000240BC B010                       		cmp.b	(a0),d0
000240BE 6600                       		bne.s	Obj77_FlameDel
000240C0 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000240C6 6600                       		bne.s	loc_181F0
000240C8 117C 000B 001C             		move.b	#$B,$1C(a0)
000240CE 4A28 0001                  		tst.b	1(a0)
000240D2 6A00                       		bpl.s	Obj77_FlameDel
000240D4 6000                       		bra.s	loc_181F0
000240D6                            ; ===========================================================================
000240D6 4A69 0010                  		tst.w	$10(a1)
000240DA 6700                       		beq.s	loc_181F0
000240DC 117C 0008 001C             		move.b	#8,$1C(a0)
000240E2                            
000240E2                            loc_181F0:
000240E2 6000                       		bra.s	Obj77_Display
000240E4                            ; ===========================================================================
000240E4                            
000240E4                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000240E4 4EF9 0001 5D26             		jmp	DeleteObject
000240EA                            ; ===========================================================================
000240EA                            
000240EA                            Obj77_Display:
000240EA 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
000240F0 4EB9 0001 2754             		jsr	AnimateSprite
000240F6 2268 0034                  		movea.l	$34(a0),a1
000240FA 3169 0008 0008             		move.w	8(a1),8(a0)
00024100 3169 000C 000C             		move.w	$C(a1),$C(a0)
00024106 1169 0022 0022             		move.b	$22(a1),$22(a0)
0002410C 7003                       		moveq	#3,d0
0002410E C028 0022                  		and.b	$22(a0),d0
00024112 0228 00FC 0001             		andi.b	#-4,1(a0)
00024118 8128 0001                  		or.b	d0,1(a0)
0002411C 4EF9 0001 5D72             		jmp	DisplaySprite
00024122                            ; ===========================================================================
00024122                            ; ---------------------------------------------------------------------------
00024122                            ; Object 73 - Eggman (MZ)
00024122                            ; ---------------------------------------------------------------------------
00024122                            
00024122                            Obj73:					; XREF: Obj_Index
00024122 7000                       		moveq	#0,d0
00024124 1028 0024                  		move.b	$24(a0),d0
00024128 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0002412C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00024130                            ; ===========================================================================
00024130 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00024132 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00024134 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00024136 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00024138 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0002413A                            
0002413A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0002413D 0401 04                    		dc.b 4,	1, 4
00024140 0607 04                    		dc.b 6,	7, 4
00024143 0800 03                    		dc.b 8,	0, 3
00024146                            ; ===========================================================================
00024146                            
00024146                            Obj73_Main:				; XREF: Obj73_Index
00024146 3168 0008 0030             		move.w	8(a0),$30(a0)
0002414C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00024152 117C 000F 0020             		move.b	#$F,$20(a0)
00024158 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0002415E 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00024162 2248                       		movea.l	a0,a1
00024164 7203                       		moveq	#3,d1
00024166 6000                       		bra.s	Obj73_LoadBoss
00024168                            ; ===========================================================================
00024168                            
00024168                            Obj73_Loop:
00024168 4EB9 0001 6892             		jsr	SingleObjLoad2
0002416E 6600                       		bne.s	Obj73_ShipMain
00024170 12BC 0073                  		move.b	#$73,0(a1)
00024174 3368 0008 0008             		move.w	8(a0),8(a1)
0002417A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024180                            
00024180                            Obj73_LoadBoss:				; XREF: Obj73_Main
00024180 08A8 0000 0022             		bclr	#0,$22(a0)
00024186 4229 0025                  		clr.b	$25(a1)
0002418A 135A 0024                  		move.b	(a2)+,$24(a1)
0002418E 135A 001C                  		move.b	(a2)+,$1C(a1)
00024192 135A 0018                  		move.b	(a2)+,priority(a1)
00024196 3029 0018                  		move.w  priority(a1),d0
0002419A E248                               lsr.w   #1,d0
0002419C 0240 0380                          andi.w  #$380,d0
000241A0 3340 0018                          move.w  d0,priority(a1)
000241A4 237C 0002 3C04 0004        		move.l	#Map_Eggman,4(a1)
000241AC 337C 0400 0002             		move.w	#$400,2(a1)
000241B2 137C 0004 0001             		move.b	#4,1(a1)
000241B8 137C 0020 0023             		move.b	#$20,width_pixels(a1)
000241BE 2348 0034                  		move.l	a0,$34(a1)
000241C2 51C9 FFA4                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000241C6                            
000241C6                            Obj73_ShipMain:
000241C6 7000                       		moveq	#0,d0
000241C8 1028 0025                  		move.b	$25(a0),d0
000241CC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000241D0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000241D4 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
000241DA 4EB9 0001 2754             		jsr	AnimateSprite
000241E0 7003                       		moveq	#3,d0
000241E2 C028 0022                  		and.b	$22(a0),d0
000241E6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000241EC 8128 0001                  		or.b	d0,1(a0)
000241F0 4EF9 0001 5D72             		jmp	DisplaySprite
000241F6                            ; ===========================================================================
000241F6 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000241F8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000241FA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000241FC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000241FE 0000                       		dc.w loc_18582-Obj73_ShipIndex
00024200                            ; ===========================================================================
00024200                            
00024200                            loc_18302:				; XREF: Obj73_ShipIndex
00024200 1028 003F                  		move.b	$3F(a0),d0
00024204 5428 003F                  		addq.b	#2,$3F(a0)
00024208 4EB9 0000 8F30             		jsr	(CalcSine).l
0002420E E440                       		asr.w	#2,d0
00024210 3140 0012                  		move.w	d0,$12(a0)
00024214 317C FF00 0010             		move.w	#-$100,$10(a0)
0002421A 6100 F58C                  		bsr.w	BossMove
0002421E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00024224 6600                       		bne.s	loc_18334
00024226 5428 0025                  		addq.b	#2,$25(a0)
0002422A 4228 0028                  		clr.b	$28(a0)
0002422E 42A8 0010                  		clr.l	$10(a0)
00024232                            
00024232                            loc_18334:
00024232 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00024238 1140 0034                  		move.b	d0,$34(a0)
0002423C                            
0002423C                            loc_1833E:
0002423C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00024242 3168 0030 0008             		move.w	$30(a0),8(a0)
00024248 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0002424E 6400                       		bcc.s	locret_18390
00024250 4A28 0022                  		tst.b	$22(a0)
00024254 6B00                       		bmi.s	loc_18392
00024256 4A28 0020                  		tst.b	$20(a0)
0002425A 6600                       		bne.s	locret_18390
0002425C 4A28 003E                  		tst.b	$3E(a0)
00024260 6600                       		bne.s	loc_18374
00024262 117C 0028 003E             		move.b	#$28,$3E(a0)
00024268                            ;		move.w	#$AC,d0
00024268 4EB9 0001 EEC4             		jsr	(BossModeMusic).l ;	play boss damage sound
0002426E                            
0002426E                            loc_18374:
0002426E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00024272 7000                       		moveq	#0,d0
00024274 4A51                       		tst.w	(a1)
00024276 6600                       		bne.s	loc_18382
00024278 303C 0EEE                  		move.w	#$EEE,d0
0002427C                            
0002427C                            loc_18382:
0002427C 3280                       		move.w	d0,(a1)
0002427E 5328 003E                  		subq.b	#1,$3E(a0)
00024282 6600                       		bne.s	locret_18390
00024284 117C 000F 0020             		move.b	#$F,$20(a0)
0002428A                            
0002428A                            locret_18390:
0002428A 4E75                       		rts	
0002428C                            ; ===========================================================================
0002428C                            
0002428C                            loc_18392:				; XREF: loc_1833E
0002428C 7064                       		moveq	#100,d0
0002428E 6100 0000                  		bsr.w	AddPoints
00024292 117C 0004 0025             		move.b	#4,$25(a0)
00024298 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0002429E 4268 0010                  		clr.w	$10(a0)
000242A2 4E75                       		rts	
000242A4                            ; ===========================================================================
000242A4                            
000242A4                            loc_183AA:				; XREF: Obj73_ShipIndex
000242A4 7000                       		moveq	#0,d0
000242A6 1028 0028                  		move.b	$28(a0),d0
000242AA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000242AE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000242B2 0228 0006 0028             		andi.b	#6,$28(a0)
000242B8 6000 FF82                  		bra.w	loc_1833E
000242BC                            ; ===========================================================================
000242BC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000242BE 0000                       		dc.w Obj73_MakeLava2-off_183C2
000242C0 0000                       		dc.w loc_183CA-off_183C2
000242C2 0000                       		dc.w Obj73_MakeLava2-off_183C2
000242C4                            ; ===========================================================================
000242C4                            
000242C4                            loc_183CA:				; XREF: off_183C2
000242C4 4A68 0010                  		tst.w	$10(a0)
000242C8 6600                       		bne.s	loc_183FE
000242CA 7040                       		moveq	#$40,d0
000242CC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000242D2 6700                       		beq.s	loc_183E6
000242D4 6500                       		bcs.s	loc_183DE
000242D6 4440                       		neg.w	d0
000242D8                            
000242D8                            loc_183DE:
000242D8 3140 0012                  		move.w	d0,$12(a0)
000242DC 6000 F4CA                  		bra.w	BossMove
000242E0                            ; ===========================================================================
000242E0                            
000242E0                            loc_183E6:
000242E0 317C 0200 0010             		move.w	#$200,$10(a0)
000242E6 317C 0100 0012             		move.w	#$100,$12(a0)
000242EC 0828 0000 0022             		btst	#0,$22(a0)
000242F2 6600                       		bne.s	loc_183FE
000242F4 4468 0010                  		neg.w	$10(a0)
000242F8                            
000242F8                            loc_183FE:
000242F8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000242FE 6400                       		bcc.s	Obj73_MakeLava
00024300 6100 F4A6                  		bsr.w	BossMove
00024304 5968 0012                  		subq.w	#4,$12(a0)
00024308                            
00024308                            Obj73_MakeLava:
00024308 5328 0034                  		subq.b	#1,$34(a0)
0002430C 6400                       		bcc.s	loc_1845C
0002430E 4EB9 0001 687C             		jsr	SingleObjLoad
00024314 6600                       		bne.s	loc_1844A
00024316 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0002431A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00024320 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00024326 0280 0000 FFFF             		andi.l	#$FFFF,d0
0002432C 80FC 0050                  		divu.w	#$50,d0
00024330 4840                       		swap	d0
00024332 0640 1878                  		addi.w	#$1878,d0
00024336 3340 0008                  		move.w	d0,8(a1)
0002433A EE09                       		lsr.b	#7,d1
0002433C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00024342                            
00024342                            loc_1844A:
00024342 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00024348 0200 001F                  		andi.b	#$1F,d0
0002434C 0600 0040                  		addi.b	#$40,d0
00024350 1140 0034                  		move.b	d0,$34(a0)
00024354                            
00024354                            loc_1845C:
00024354 0828 0000 0022             		btst	#0,$22(a0)
0002435A 6700                       		beq.s	loc_18474
0002435C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00024362 6D00                       		blt.s	locret_1849C
00024364 317C 1910 0030             		move.w	#$1910,$30(a0)
0002436A 6000                       		bra.s	loc_18482
0002436C                            ; ===========================================================================
0002436C                            
0002436C                            loc_18474:
0002436C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00024372 6E00                       		bgt.s	locret_1849C
00024374 317C 1830 0030             		move.w	#$1830,$30(a0)
0002437A                            
0002437A                            loc_18482:
0002437A 4268 0010                  		clr.w	$10(a0)
0002437E 317C FE80 0012             		move.w	#-$180,$12(a0)
00024384 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0002438A 6400                       		bcc.s	loc_18498
0002438C 4468 0012                  		neg.w	$12(a0)
00024390                            
00024390                            loc_18498:
00024390 5428 0028                  		addq.b	#2,$28(a0)
00024394                            
00024394                            locret_1849C:
00024394 4E75                       		rts	
00024396                            ; ===========================================================================
00024396                            
00024396                            Obj73_MakeLava2:			; XREF: off_183C2
00024396 6100 F410                  		bsr.w	BossMove
0002439A 3028 0038                  		move.w	$38(a0),d0
0002439E 0440 022C                  		subi.w	#$22C,d0
000243A2 6E00                       		bgt.s	locret_184F4
000243A4 303C 022C                  		move.w	#$22C,d0
000243A8 4A68 0012                  		tst.w	$12(a0)
000243AC 6700                       		beq.s	loc_184EA
000243AE 4268 0012                  		clr.w	$12(a0)
000243B2 317C 0050 003C             		move.w	#$50,$3C(a0)
000243B8 0868 0000 0022             		bchg	#0,$22(a0)
000243BE 4EB9 0001 687C             		jsr	SingleObjLoad
000243C4 6600                       		bne.s	loc_184EA
000243C6 3368 0030 0008             		move.w	$30(a0),8(a1)
000243CC 3368 0038 000C             		move.w	$38(a0),$C(a1)
000243D2 0669 0018 000C             		addi.w	#$18,$C(a1)
000243D8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000243DC 137C 0001 0028             		move.b	#1,$28(a1)
000243E2                            
000243E2                            loc_184EA:
000243E2 5368 003C                  		subq.w	#1,$3C(a0)
000243E6 6600                       		bne.s	locret_184F4
000243E8 5428 0028                  		addq.b	#2,$28(a0)
000243EC                            
000243EC                            locret_184F4:
000243EC 4E75                       		rts	
000243EE                            ; ===========================================================================
000243EE                            
000243EE                            loc_184F6:				; XREF: Obj73_ShipIndex
000243EE 5368 003C                  		subq.w	#1,$3C(a0)
000243F2 6B00                       		bmi.s	loc_18500
000243F4 6000 F36C                  		bra.w	BossDefeated
000243F8                            ; ===========================================================================
000243F8                            
000243F8                            loc_18500:
000243F8 08E8 0000 0022             		bset	#0,$22(a0)
000243FE 08A8 0007 0022             		bclr	#7,$22(a0)
00024404 4268 0010                  		clr.w	$10(a0)
00024408 5428 0025                  		addq.b	#2,$25(a0)
0002440C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00024412 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00024416 6600                       		bne.s	locret_1852A
00024418 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0002441E 4268 0012                  		clr.w	$12(a0)
00024422                            
00024422                            locret_1852A:
00024422 4E75                       		rts	
00024424                            ; ===========================================================================
00024424                            
00024424                            loc_1852C:				; XREF: Obj73_ShipIndex
00024424 5268 003C                  		addq.w	#1,$3C(a0)
00024428 6700                       		beq.s	loc_18544
0002442A 6A00                       		bpl.s	loc_1854E
0002442C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00024432 6400                       		bcc.s	loc_18544
00024434 0668 0018 0012             		addi.w	#$18,$12(a0)
0002443A 6000                       		bra.s	loc_1857A
0002443C                            ; ===========================================================================
0002443C                            
0002443C                            loc_18544:
0002443C 4268 0012                  		clr.w	$12(a0)
00024440 4268 003C                  		clr.w	$3C(a0)
00024444 6000                       		bra.s	loc_1857A
00024446                            ; ===========================================================================
00024446                            
00024446                            loc_1854E:
00024446 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0002444C 6500                       		bcs.s	loc_18566
0002444E 6700                       		beq.s	loc_1856C
00024450 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00024456 6500                       		bcs.s	loc_1857A
00024458 5428 0025                  		addq.b	#2,$25(a0)
0002445C 6000                       		bra.s	loc_1857A
0002445E                            ; ===========================================================================
0002445E                            
0002445E                            loc_18566:
0002445E 5168 0012                  		subq.w	#8,$12(a0)
00024462 6000                       		bra.s	loc_1857A
00024464                            ; ===========================================================================
00024464                            
00024464                            loc_1856C:
00024464 4268 0012                  		clr.w	$12(a0)
00024468                            	;	move.w	(Level_Music).w,d0
00024468 4EB9 0001 DAEA             		jsr	(super_GetBgm).l	; play MZ music
0002446E                            
0002446E                            loc_1857A:
0002446E 6100 F338                  		bsr.w	BossMove
00024472 6000 FDC8                  		bra.w	loc_1833E
00024476                            ; ===========================================================================
00024476                            
00024476                            loc_18582:				; XREF: Obj73_ShipIndex
00024476 317C 0500 0010             		move.w	#$500,$10(a0)
0002447C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024482 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00024488 6400                       		bcc.s	loc_1859C
0002448A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0002448E 6000                       		bra.s	loc_185A2
00024490                            ; ===========================================================================
00024490                            
00024490                            loc_1859C:
00024490 4A28 0001                  		tst.b	1(a0)
00024494 6A00                       		bpl.s	Obj73_ShipDel
00024496                            
00024496                            loc_185A2:
00024496 6100 F310                  		bsr.w	BossMove
0002449A 6000 FDA0                  		bra.w	loc_1833E
0002449E                            ; ===========================================================================
0002449E                            
0002449E                            Obj73_ShipDel:
0002449E 4EF9 0001 5D26             		jmp	DeleteObject
000244A4                            ; ===========================================================================
000244A4                            
000244A4                            Obj73_FaceMain:				; XREF: Obj73_Index
000244A4 7000                       		moveq	#0,d0
000244A6 7201                       		moveq	#1,d1
000244A8 2268 0034                  		movea.l	$34(a0),a1
000244AC 1029 0025                  		move.b	$25(a1),d0
000244B0 5540                       		subq.w	#2,d0
000244B2 6600                       		bne.s	loc_185D2
000244B4 0829 0001 0028             		btst	#1,$28(a1)
000244BA 6700                       		beq.s	loc_185DA
000244BC 4A69 0012                  		tst.w	$12(a1)
000244C0 6600                       		bne.s	loc_185DA
000244C2 7204                       		moveq	#4,d1
000244C4 6000                       		bra.s	loc_185EE
000244C6                            ; ===========================================================================
000244C6                            
000244C6                            loc_185D2:
000244C6 5500                       		subq.b	#2,d0
000244C8 6B00                       		bmi.s	loc_185DA
000244CA 720A                       		moveq	#$A,d1
000244CC 6000                       		bra.s	loc_185EE
000244CE                            ; ===========================================================================
000244CE                            
000244CE                            loc_185DA:
000244CE 4A29 0020                  		tst.b	$20(a1)
000244D2 6600                       		bne.s	loc_185E4
000244D4 7205                       		moveq	#5,d1
000244D6 6000                       		bra.s	loc_185EE
000244D8                            ; ===========================================================================
000244D8                            
000244D8                            loc_185E4:
000244D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000244DE 6500                       		bcs.s	loc_185EE
000244E0 7204                       		moveq	#4,d1
000244E2                            
000244E2                            loc_185EE:
000244E2 1141 001C                  		move.b	d1,$1C(a0)
000244E6 5900                       		subq.b	#4,d0
000244E8 6600                       		bne.s	loc_18602
000244EA 117C 0006 001C             		move.b	#6,$1C(a0)
000244F0 4A28 0001                  		tst.b	1(a0)
000244F4 6A00                       		bpl.s	Obj73_FaceDel
000244F6                            
000244F6                            loc_18602:
000244F6 6000                       		bra.s	Obj73_Display
000244F8                            ; ===========================================================================
000244F8                            
000244F8                            Obj73_FaceDel:
000244F8 4EF9 0001 5D26             		jmp	DeleteObject
000244FE                            ; ===========================================================================
000244FE                            
000244FE                            Obj73_FlameMain:			; XREF: Obj73_Index
000244FE 117C 0007 001C             		move.b	#7,$1C(a0)
00024504 2268 0034                  		movea.l	$34(a0),a1
00024508 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0002450E 6D00                       		blt.s	loc_1862A
00024510 117C 000B 001C             		move.b	#$B,$1C(a0)
00024516 4A28 0001                  		tst.b	1(a0)
0002451A 6A00                       		bpl.s	Obj73_FlameDel
0002451C 6000                       		bra.s	loc_18636
0002451E                            ; ===========================================================================
0002451E                            
0002451E                            loc_1862A:
0002451E 4A69 0010                  		tst.w	$10(a1)
00024522 6700                       		beq.s	loc_18636
00024524 117C 0008 001C             		move.b	#8,$1C(a0)
0002452A                            
0002452A                            loc_18636:
0002452A 6000                       		bra.s	Obj73_Display
0002452C                            ; ===========================================================================
0002452C                            
0002452C                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0002452C 4EF9 0001 5D26             		jmp	DeleteObject
00024532                            ; ===========================================================================
00024532                            
00024532                            Obj73_Display:
00024532 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
00024538 4EB9 0001 2754             		jsr	AnimateSprite
0002453E                            
0002453E                            loc_1864A:
0002453E 2268 0034                  		movea.l	$34(a0),a1
00024542 3169 0008 0008             		move.w	8(a1),8(a0)
00024548 3169 000C 000C             		move.w	$C(a1),$C(a0)
0002454E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00024554 7003                       		moveq	#3,d0
00024556 C028 0022                  		and.b	$22(a0),d0
0002455A 0228 00FC 0001             		andi.b	#-4,1(a0)
00024560 8128 0001                  		or.b	d0,1(a0)
00024564 4EF9 0001 5D72             		jmp	DisplaySprite
0002456A                            ; ===========================================================================
0002456A                            
0002456A                            Obj73_TubeMain:				; XREF: Obj73_Index
0002456A 2268 0034                  		movea.l	$34(a0),a1
0002456E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00024574 6600                       		bne.s	loc_18688
00024576 4A28 0001                  		tst.b	1(a0)
0002457A 6A00                       		bpl.s	Obj73_TubeDel
0002457C                            
0002457C                            loc_18688:
0002457C 217C 0002 3CCC 0004        		move.l	#Map_BossItems,4(a0)
00024584 317C 246C 0002             		move.w	#$246C,2(a0)
0002458A 117C 0004 001A             		move.b	#4,$1A(a0)
00024590 60AC                       		bra.s	loc_1864A
00024592                            ; ===========================================================================
00024592                            
00024592                            Obj73_TubeDel:
00024592 4EF9 0001 5D26             		jmp	DeleteObject
00024598                            ; ===========================================================================
00024598                            ; ---------------------------------------------------------------------------
00024598                            ; Object 74 - lava that	Eggman drops (MZ)
00024598                            ; ---------------------------------------------------------------------------
00024598                            
00024598                            Obj74:					; XREF: Obj_Index
00024598 7000                       		moveq	#0,d0
0002459A 1028 0024                  		move.b	$24(a0),d0
0002459E 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000245A2 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000245A6 4EF9 0001 5D72             		jmp	DisplaySprite
000245AC                            ; ===========================================================================
000245AC 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000245AE 0000                       		dc.w Obj74_Action-Obj74_Index
000245B0 0000                       		dc.w loc_18886-Obj74_Index
000245B2 0000                       		dc.w Obj74_Delete3-Obj74_Index
000245B4                            ; ===========================================================================
000245B4                            
000245B4                            Obj74_Main:				; XREF: Obj74_Index
000245B4 117C 0008 0016             		move.b	#8,$16(a0)
000245BA 117C 0008 0017             		move.b	#8,$17(a0)
000245C0 217C 0001 358A 0004        		move.l	#Map_obj14,4(a0)
000245C8 317C 0345 0002             		move.w	#$345,2(a0)
000245CE 117C 0004 0001             		move.b	#4,1(a0)
000245D4 317C 0280 0018             		move.w	#$280,priority(a0)
000245DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000245E0 117C 0008 0023             		move.b	#8,width_pixels(a0)
000245E6 5428 0024                  		addq.b	#2,$24(a0)
000245EA 4A28 0028                  		tst.b	$28(a0)
000245EE 6600                       		bne.s	loc_1870A
000245F0 117C 008B 0020             		move.b	#$8B,$20(a0)
000245F6 5428 0024                  		addq.b	#2,$24(a0)
000245FA 6000 0000                  		bra.w	loc_18886
000245FE                            ; ===========================================================================
000245FE                            
000245FE                            loc_1870A:
000245FE 117C 001E 0029             		move.b	#$1E,$29(a0)
00024604 303C 00AE                  		move.w	#$AE,d0
00024608 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava sound
0002460E                            
0002460E                            Obj74_Action:				; XREF: Obj74_Index
0002460E 7000                       		moveq	#0,d0
00024610 1028 0025                  		move.b	$25(a0),d0
00024614 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00024618 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0002461C 4EB9 0001 5D0C             		jsr	SpeedToPos
00024622 43F9 0001 786C             		lea	(Ani_obj14).l,a1
00024628 4EB9 0001 2754             		jsr	AnimateSprite
0002462E 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00024634 6200                       		bhi.s	Obj74_Delete
00024636 4E75                       		rts	
00024638                            ; ===========================================================================
00024638                            
00024638                            Obj74_Delete:
00024638 4EF9 0001 5D26             		jmp	DeleteObject
0002463E                            ; ===========================================================================
0002463E 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00024640 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00024642 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00024644 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00024646                            ; ===========================================================================
00024646                            
00024646                            Obj74_Drop:				; XREF: Obj74_Index2
00024646 08E8 0001 0022             		bset	#1,$22(a0)
0002464C 5328 0029                  		subq.b	#1,$29(a0)
00024650 6A00                       		bpl.s	locret_18780
00024652 117C 008B 0020             		move.b	#$8B,$20(a0)
00024658 4228 0028                  		clr.b	$28(a0)
0002465C 0668 0018 0012             		addi.w	#$18,$12(a0)
00024662 08A8 0001 0022             		bclr	#1,$22(a0)
00024668 6100 C69C                  		bsr.w	ObjHitFloor
0002466C 4A41                       		tst.w	d1
0002466E 6A00                       		bpl.s	locret_18780
00024670 5428 0025                  		addq.b	#2,$25(a0)
00024674                            
00024674                            locret_18780:
00024674 4E75                       		rts	
00024676                            ; ===========================================================================
00024676                            
00024676                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00024676 5568 000C                  		subq.w	#2,$C(a0)
0002467A 08E8 0007 0002             		bset	#7,2(a0)
00024680 317C 00A0 0010             		move.w	#$A0,$10(a0)
00024686 4268 0012                  		clr.w	$12(a0)
0002468A 3168 0008 0030             		move.w	8(a0),$30(a0)
00024690 3168 000C 0038             		move.w	$C(a0),$38(a0)
00024696 117C 0003 0029             		move.b	#3,$29(a0)
0002469C 4EB9 0001 6892             		jsr	SingleObjLoad2
000246A2 6600                       		bne.s	loc_187CA
000246A4 47D1                       		lea	(a1),a3
000246A6 45D0                       		lea	(a0),a2
000246A8 7003                       		moveq	#3,d0
000246AA                            
000246AA                            Obj74_Loop:
000246AA 26DA                       		move.l	(a2)+,(a3)+
000246AC 26DA                       		move.l	(a2)+,(a3)+
000246AE 26DA                       		move.l	(a2)+,(a3)+
000246B0 26DA                       		move.l	(a2)+,(a3)+
000246B2 51C8 FFF6                  		dbf	d0,Obj74_Loop
000246B6                            
000246B6 4469 0010                  		neg.w	$10(a1)
000246BA 5429 0025                  		addq.b	#2,$25(a1)
000246BE                            
000246BE                            loc_187CA:
000246BE 5428 0025                  		addq.b	#2,$25(a0)
000246C2 4E75                       		rts	
000246C4                            
000246C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000246C4                            
000246C4                            
000246C4                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000246C4 4EB9 0001 6892             		jsr	SingleObjLoad2
000246CA 6600                       		bne.s	locret_187EE
000246CC 3368 0008 0008             		move.w	8(a0),8(a1)
000246D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000246D8 12BC 0074                  		move.b	#$74,(a1)
000246DC 337C 0067 0028             		move.w	#$67,$28(a1)
000246E2                            
000246E2                            locret_187EE:
000246E2 4E75                       		rts	
000246E4                            ; End of function Obj74_Duplicate2
000246E4                            
000246E4                            ; ===========================================================================
000246E4                            
000246E4                            Obj74_Duplicate:			; XREF: Obj74_Index2
000246E4 6100 C620                  		bsr.w	ObjHitFloor
000246E8 4A41                       		tst.w	d1
000246EA 6A00                       		bpl.s	loc_18826
000246EC 3028 0008                  		move.w	8(a0),d0
000246F0 0C40 1940                  		cmpi.w	#$1940,d0
000246F4 6E00                       		bgt.s	loc_1882C
000246F6 3228 0030                  		move.w	$30(a0),d1
000246FA B240                       		cmp.w	d0,d1
000246FC 6700                       		beq.s	loc_1881E
000246FE 0240 0010                  		andi.w	#$10,d0
00024702 0241 0010                  		andi.w	#$10,d1
00024706 B240                       		cmp.w	d0,d1
00024708 6700                       		beq.s	loc_1881E
0002470A 61B8                       		bsr.s	Obj74_Duplicate2
0002470C 3168 0008 0032             		move.w	8(a0),$32(a0)
00024712                            
00024712                            loc_1881E:
00024712 3168 0008 0030             		move.w	8(a0),$30(a0)
00024718 4E75                       		rts	
0002471A                            ; ===========================================================================
0002471A                            
0002471A                            loc_18826:
0002471A 5428 0025                  		addq.b	#2,$25(a0)
0002471E 4E75                       		rts	
00024720                            ; ===========================================================================
00024720                            
00024720                            loc_1882C:
00024720 5428 0024                  		addq.b	#2,$24(a0)
00024724 4E75                       		rts	
00024726                            ; ===========================================================================
00024726                            
00024726                            Obj74_FallEdge:				; XREF: Obj74_Index2
00024726 08A8 0001 0022             		bclr	#1,$22(a0)
0002472C 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00024732 3028 0008                  		move.w	8(a0),d0
00024736 9068 0032                  		sub.w	$32(a0),d0
0002473A 6A00                       		bpl.s	loc_1884A
0002473C 4440                       		neg.w	d0
0002473E                            
0002473E                            loc_1884A:
0002473E 0C40 0012                  		cmpi.w	#$12,d0
00024742 6600                       		bne.s	loc_18856
00024744 08A8 0007 0002             		bclr	#7,2(a0)
0002474A                            
0002474A                            loc_18856:
0002474A 6100 C5BA                  		bsr.w	ObjHitFloor
0002474E 4A41                       		tst.w	d1
00024750 6A00                       		bpl.s	locret_1887E
00024752 5328 0029                  		subq.b	#1,$29(a0)
00024756 6700                       		beq.s	Obj74_Delete2
00024758 4268 0012                  		clr.w	$12(a0)
0002475C 3168 0032 0008             		move.w	$32(a0),8(a0)
00024762 3168 0038 000C             		move.w	$38(a0),$C(a0)
00024768 08E8 0007 0002             		bset	#7,2(a0)
0002476E 5528 0025                  		subq.b	#2,$25(a0)
00024772                            
00024772                            locret_1887E:
00024772 4E75                       		rts	
00024774                            ; ===========================================================================
00024774                            
00024774                            Obj74_Delete2:
00024774 4EF9 0001 5D26             		jmp	DeleteObject
0002477A                            ; ===========================================================================
0002477A                            
0002477A                            loc_18886:				; XREF: Obj74_Index
0002477A 08E8 0007 0002             		bset	#7,2(a0)
00024780 5328 0029                  		subq.b	#1,$29(a0)
00024784 6600                       		bne.s	Obj74_Animate
00024786 117C 0001 001C             		move.b	#1,$1C(a0)
0002478C 5968 000C                  		subq.w	#4,$C(a0)
00024790 4228 0020                  		clr.b	$20(a0)
00024794                            
00024794                            Obj74_Animate:
00024794 43F9 0001 786C             		lea	(Ani_obj14).l,a1
0002479A 4EF9 0001 2754             		jmp	AnimateSprite
000247A0                            ; ===========================================================================
000247A0                            
000247A0                            Obj74_Delete3:				; XREF: Obj74_Index
000247A0 4EF9 0001 5D26             		jmp	DeleteObject
000247A6                            ; ===========================================================================
000247A6                            
000247A6                            Obj7A_Delete:
000247A6 4EF9 0001 5D26             		jmp	DeleteObject
000247AC                            ; ===========================================================================
000247AC                            ; ---------------------------------------------------------------------------
000247AC                            ; Object 7A - Eggman (SLZ)
000247AC                            ; ---------------------------------------------------------------------------
000247AC                            
000247AC                            Obj7A:					; XREF: Obj_Index
000247AC 7000                       		moveq	#0,d0
000247AE 1028 0024                  		move.b	$24(a0),d0
000247B2 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000247B6 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000247BA                            ; ===========================================================================
000247BA 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000247BC 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000247BE 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000247C0 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000247C2 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000247C4                            
000247C4 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000247C7 0401 04                    		dc.b 4,	1, 4
000247CA 0607 04                    		dc.b 6,	7, 4
000247CD 0800 03                    		dc.b 8,	0, 3
000247D0                            ; ===========================================================================
000247D0                            
000247D0                            Obj7A_Main:				; XREF: Obj7A_Index
000247D0 317C 2188 0008             		move.w	#$2188,8(a0)
000247D6 317C 0228 000C             		move.w	#$228,$C(a0)
000247DC 3168 0008 0030             		move.w	8(a0),$30(a0)
000247E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000247E8 117C 000F 0020             		move.b	#$F,$20(a0)
000247EE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000247F4 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000247F8 2248                       		movea.l	a0,a1
000247FA 7203                       		moveq	#3,d1
000247FC 6000                       		bra.s	Obj7A_LoadBoss
000247FE                            ; ===========================================================================
000247FE                            
000247FE                            Obj7A_Loop:
000247FE 4EB9 0001 6892             		jsr	SingleObjLoad2
00024804 6600                       		bne.s	loc_1895C
00024806 12BC 007A                  		move.b	#$7A,0(a1)
0002480A 3368 0008 0008             		move.w	8(a0),8(a1)
00024810 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024816                            
00024816                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00024816 08A8 0000 0022             		bclr	#0,$22(a0)
0002481C 4229 0025                  		clr.b	$25(a1)
00024820 135A 0024                  		move.b	(a2)+,$24(a1)
00024824 135A 001C                  		move.b	(a2)+,$1C(a1)
00024828 135A 0018                  		move.b	(a2)+,priority(a1)
0002482C 3029 0018                          move.w  priority(a1),d0
00024830 E248                               lsr.w   #1,d0
00024832 0240 0380                          andi.w  #$380,d0
00024836 3340 0018                          move.w  d0,priority(a1)
0002483A 237C 0002 3C04 0004        		move.l	#Map_Eggman,4(a1)
00024842 337C 0400 0002             		move.w	#$400,2(a1)
00024848 137C 0004 0001             		move.b	#4,1(a1)
0002484E 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00024854 2348 0034                  		move.l	a0,$34(a1)
00024858 51C9 FFA4                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0002485C                            
0002485C                            loc_1895C:
0002485C 43F8 D040                  		lea	($FFFFD040).w,a1
00024860 45E8 002A                  		lea	$2A(a0),a2
00024864 705E                       		moveq	#$5E,d0
00024866 723E                       		moveq	#$3E,d1
00024868                            
00024868                            loc_18968:
00024868 B011                       		cmp.b	(a1),d0
0002486A 6600                       		bne.s	loc_18974
0002486C 4A29 0028                  		tst.b	$28(a1)
00024870 6700                       		beq.s	loc_18974
00024872 34C9                       		move.w	a1,(a2)+
00024874                            
00024874                            loc_18974:
00024874 D2FC 0040                  		adda.w	#$40,a1
00024878 51C9 FFEE                  		dbf	d1,loc_18968
0002487C                            
0002487C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0002487C 7000                       		moveq	#0,d0
0002487E 1028 0025                  		move.b	$25(a0),d0
00024882 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00024886 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0002488A 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
00024890 4EB9 0001 2754             		jsr	AnimateSprite
00024896 7003                       		moveq	#3,d0
00024898 C028 0022                  		and.b	$22(a0),d0
0002489C 0228 00FC 0001             		andi.b	#$FC,1(a0)
000248A2 8128 0001                  		or.b	d0,1(a0)
000248A6 4EF9 0001 5D72             		jmp	DisplaySprite
000248AC                            ; ===========================================================================
000248AC 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000248AE 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000248B0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000248B2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000248B4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000248B6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000248B8                            ; ===========================================================================
000248B8                            
000248B8                            loc_189B8:				; XREF: Obj7A_ShipIndex
000248B8 317C FF00 0010             		move.w	#-$100,$10(a0)
000248BE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000248C4 6400                       		bcc.s	loc_189CA
000248C6 5428 0025                  		addq.b	#2,$25(a0)
000248CA                            
000248CA                            loc_189CA:
000248CA 6100 EEDC                  		bsr.w	BossMove
000248CE 1028 003F                  		move.b	$3F(a0),d0
000248D2 5428 003F                  		addq.b	#2,$3F(a0)
000248D6 4EB9 0000 8F30             		jsr	(CalcSine).l
000248DC EC40                       		asr.w	#6,d0
000248DE D068 0038                  		add.w	$38(a0),d0
000248E2 3140 000C                  		move.w	d0,$C(a0)
000248E6 3168 0030 0008             		move.w	$30(a0),8(a0)
000248EC 6000                       		bra.s	loc_189FE
000248EE                            ; ===========================================================================
000248EE                            
000248EE                            loc_189EE:
000248EE 6100 EEB8                  		bsr.w	BossMove
000248F2 3168 0038 000C             		move.w	$38(a0),$C(a0)
000248F8 3168 0030 0008             		move.w	$30(a0),8(a0)
000248FE                            
000248FE                            loc_189FE:
000248FE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00024904 6400                       		bcc.s	locret_18A44
00024906 4A28 0022                  		tst.b	$22(a0)
0002490A 6B00                       		bmi.s	loc_18A46
0002490C 4A28 0020                  		tst.b	$20(a0)
00024910 6600                       		bne.s	locret_18A44
00024912 4A28 003E                  		tst.b	$3E(a0)
00024916 6600                       		bne.s	loc_18A28
00024918 117C 0020 003E             		move.b	#$20,$3E(a0)
0002491E                            ;		move.w	#$AC,d0
0002491E 4EB9 0001 EEC4             		jsr	(BossModeMusic).l ;	play boss damage sound
00024924                            
00024924                            loc_18A28:
00024924 43F8 FB22                  		lea	($FFFFFB22).w,a1
00024928 7000                       		moveq	#0,d0
0002492A 4A51                       		tst.w	(a1)
0002492C 6600                       		bne.s	loc_18A36
0002492E 303C 0EEE                  		move.w	#$EEE,d0
00024932                            
00024932                            loc_18A36:
00024932 3280                       		move.w	d0,(a1)
00024934 5328 003E                  		subq.b	#1,$3E(a0)
00024938 6600                       		bne.s	locret_18A44
0002493A 117C 000F 0020             		move.b	#$F,$20(a0)
00024940                            
00024940                            locret_18A44:
00024940 4E75                       		rts	
00024942                            ; ===========================================================================
00024942                            
00024942                            loc_18A46:
00024942 7064                       		moveq	#100,d0
00024944 6100 0000                  		bsr.w	AddPoints
00024948 117C 0006 0025             		move.b	#6,$25(a0)
0002494E 117C 0078 003C             		move.b	#$78,$3C(a0)
00024954 4268 0010                  		clr.w	$10(a0)
00024958 4E75                       		rts	
0002495A                            ; ===========================================================================
0002495A                            
0002495A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0002495A 3028 0030                  		move.w	$30(a0),d0
0002495E 317C 0200 0010             		move.w	#$200,$10(a0)
00024964 0828 0000 0022             		btst	#0,$22(a0)
0002496A 6600                       		bne.s	loc_18A7C
0002496C 4468 0010                  		neg.w	$10(a0)
00024970 0C40 2008                  		cmpi.w	#$2008,d0
00024974 6E00                       		bgt.s	loc_18A88
00024976 6000                       		bra.s	loc_18A82
00024978                            ; ===========================================================================
00024978                            
00024978                            loc_18A7C:
00024978 0C40 2138                  		cmpi.w	#$2138,d0
0002497C 6D00                       		blt.s	loc_18A88
0002497E                            
0002497E                            loc_18A82:
0002497E 0868 0000 0022             		bchg	#0,$22(a0)
00024984                            
00024984                            loc_18A88:
00024984 3028 0008                  		move.w	8(a0),d0
00024988 72FF                       		moveq	#-1,d1
0002498A 7402                       		moveq	#2,d2
0002498C 45E8 002A                  		lea	$2A(a0),a2
00024990 7828                       		moveq	#$28,d4
00024992 4A68 0010                  		tst.w	$10(a0)
00024996 6A00                       		bpl.s	loc_18A9E
00024998 4444                       		neg.w	d4
0002499A                            
0002499A                            loc_18A9E:
0002499A 321A                       		move.w	(a2)+,d1
0002499C 2641                       		movea.l	d1,a3
0002499E 082B 0003 0022             		btst	#3,$22(a3)
000249A4 6600                       		bne.s	loc_18AB4
000249A6 362B 0008                  		move.w	8(a3),d3
000249AA D644                       		add.w	d4,d3
000249AC 9640                       		sub.w	d0,d3
000249AE 6700                       		beq.s	loc_18AC0
000249B0                            
000249B0                            loc_18AB4:
000249B0 51CA FFE8                  		dbf	d2,loc_18A9E
000249B4                            
000249B4 1142 0028                  		move.b	d2,$28(a0)
000249B8 6000 FF10                  		bra.w	loc_189CA
000249BC                            ; ===========================================================================
000249BC                            
000249BC                            loc_18AC0:
000249BC 1142 0028                  		move.b	d2,$28(a0)
000249C0 5428 0025                  		addq.b	#2,$25(a0)
000249C4 117C 0028 003C             		move.b	#$28,$3C(a0)
000249CA 6000 FEFE                  		bra.w	loc_189CA
000249CE                            ; ===========================================================================
000249CE                            
000249CE                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000249CE 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000249D4 6600                       		bne.s	loc_18B36
000249D6 70FF                       		moveq	#-1,d0
000249D8 1028 0028                  		move.b	$28(a0),d0
000249DC 4880                       		ext.w	d0
000249DE 6B00                       		bmi.s	loc_18B40
000249E0 5540                       		subq.w	#2,d0
000249E2 4440                       		neg.w	d0
000249E4 D040                       		add.w	d0,d0
000249E6 43E8 002A                  		lea	$2A(a0),a1
000249EA 3031 0000                  		move.w	(a1,d0.w),d0
000249EE 2440                       		movea.l	d0,a2
000249F0 43F8 D040                  		lea	($FFFFD040).w,a1
000249F4 723E                       		moveq	#$3E,d1
000249F6                            
000249F6                            loc_18AFA:
000249F6 B0A9 003C                  		cmp.l	$3C(a1),d0
000249FA 6700                       		beq.s	loc_18B40
000249FC D2FC 0040                  		adda.w	#$40,a1
00024A00 51C9 FFF4                  		dbf	d1,loc_18AFA
00024A04                            
00024A04 2F08                       		move.l	a0,-(sp)
00024A06 41D2                       		lea	(a2),a0
00024A08 4EB9 0001 6892             		jsr	SingleObjLoad2
00024A0E 205F                       		movea.l	(sp)+,a0
00024A10 6600                       		bne.s	loc_18B40
00024A12 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00024A16 3368 0008 0008             		move.w	8(a0),8(a1)
00024A1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024A22 0669 0020 000C             		addi.w	#$20,$C(a1)
00024A28 136A 0022 0022             		move.b	$22(a2),$22(a1)
00024A2E 234A 003C                  		move.l	a2,$3C(a1)
00024A32                            
00024A32                            loc_18B36:
00024A32 5328 003C                  		subq.b	#1,$3C(a0)
00024A36 6700                       		beq.s	loc_18B40
00024A38 6000 FEC4                  		bra.w	loc_189FE
00024A3C                            ; ===========================================================================
00024A3C                            
00024A3C                            loc_18B40:
00024A3C 5528 0025                  		subq.b	#2,$25(a0)
00024A40 6000 FE88                  		bra.w	loc_189CA
00024A44                            ; ===========================================================================
00024A44                            
00024A44                            loc_18B48:				; XREF: Obj7A_ShipIndex
00024A44 5328 003C                  		subq.b	#1,$3C(a0)
00024A48 6B00                       		bmi.s	loc_18B52
00024A4A 6000 ED16                  		bra.w	BossDefeated
00024A4E                            ; ===========================================================================
00024A4E                            
00024A4E                            loc_18B52:
00024A4E 5428 0025                  		addq.b	#2,$25(a0)
00024A52 4268 0012                  		clr.w	$12(a0)
00024A56 08E8 0000 0022             		bset	#0,$22(a0)
00024A5C 08A8 0007 0022             		bclr	#7,$22(a0)
00024A62 4268 0010                  		clr.w	$10(a0)
00024A66 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00024A6C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00024A70 6600                       		bne.s	loc_18B7C
00024A72 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00024A78                            
00024A78                            loc_18B7C:
00024A78 6000 FE84                  		bra.w	loc_189FE
00024A7C                            ; ===========================================================================
00024A7C                            
00024A7C                            loc_18B80:				; XREF: Obj7A_ShipIndex
00024A7C 5228 003C                  		addq.b	#1,$3C(a0)
00024A80 6700                       		beq.s	loc_18B90
00024A82 6A00                       		bpl.s	loc_18B96
00024A84 0668 0018 0012             		addi.w	#$18,$12(a0)
00024A8A 6000                       		bra.s	loc_18BC2
00024A8C                            ; ===========================================================================
00024A8C                            
00024A8C                            loc_18B90:
00024A8C 4268 0012                  		clr.w	$12(a0)
00024A90 6000                       		bra.s	loc_18BC2
00024A92                            ; ===========================================================================
00024A92                            
00024A92                            loc_18B96:
00024A92 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00024A98 6500                       		bcs.s	loc_18BAE
00024A9A 6700                       		beq.s	loc_18BB4
00024A9C 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00024AA2 6500                       		bcs.s	loc_18BC2
00024AA4 5428 0025                  		addq.b	#2,$25(a0)
00024AA8 6000                       		bra.s	loc_18BC2
00024AAA                            ; ===========================================================================
00024AAA                            
00024AAA                            loc_18BAE:
00024AAA 5168 0012                  		subq.w	#8,$12(a0)
00024AAE 6000                       		bra.s	loc_18BC2
00024AB0                            ; ===========================================================================
00024AB0                            
00024AB0                            loc_18BB4:
00024AB0 4268 0012                  		clr.w	$12(a0)
00024AB4                            	;	move.w	(Level_Music).w,d0
00024AB4 4EB9 0001 DAEA             		jsr	(super_GetBgm).l	; play SLZ music
00024ABA                            
00024ABA                            loc_18BC2:
00024ABA 6000 FE32                  		bra.w	loc_189EE
00024ABE                            ; ===========================================================================
00024ABE                            
00024ABE                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00024ABE 317C 0400 0010             		move.w	#$400,$10(a0)
00024AC4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024ACA 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00024AD0 6400                       		bcc.s	loc_18BE0
00024AD2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00024AD6 6000                       		bra.s	loc_18BE8
00024AD8                            ; ===========================================================================
00024AD8                            
00024AD8                            loc_18BE0:
00024AD8 4A28 0001                  		tst.b	1(a0)
00024ADC 6A00 FCC8                  		bpl.w	Obj7A_Delete
00024AE0                            
00024AE0                            loc_18BE8:
00024AE0 6100 ECC6                  		bsr.w	BossMove
00024AE4 6000 FDE4                  		bra.w	loc_189CA
00024AE8                            ; ===========================================================================
00024AE8                            
00024AE8                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00024AE8 7000                       		moveq	#0,d0
00024AEA 7201                       		moveq	#1,d1
00024AEC 2268 0034                  		movea.l	$34(a0),a1
00024AF0 1029 0025                  		move.b	$25(a1),d0
00024AF4 0C00 0006                  		cmpi.b	#6,d0
00024AF8 6B00                       		bmi.s	loc_18C06
00024AFA 720A                       		moveq	#$A,d1
00024AFC 6000                       		bra.s	loc_18C1A
00024AFE                            ; ===========================================================================
00024AFE                            
00024AFE                            loc_18C06:
00024AFE 4A29 0020                  		tst.b	$20(a1)
00024B02 6600                       		bne.s	loc_18C10
00024B04 7205                       		moveq	#5,d1
00024B06 6000                       		bra.s	loc_18C1A
00024B08                            ; ===========================================================================
00024B08                            
00024B08                            loc_18C10:
00024B08 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00024B0E 6500                       		bcs.s	loc_18C1A
00024B10 7204                       		moveq	#4,d1
00024B12                            
00024B12                            loc_18C1A:
00024B12 1141 001C                  		move.b	d1,$1C(a0)
00024B16 0C00 000A                  		cmpi.b	#$A,d0
00024B1A 6600                       		bne.s	loc_18C32
00024B1C 117C 0006 001C             		move.b	#6,$1C(a0)
00024B22 4A28 0001                  		tst.b	1(a0)
00024B26 6A00 FC7E                  		bpl.w	Obj7A_Delete
00024B2A                            
00024B2A                            loc_18C32:
00024B2A 6000                       		bra.s	loc_18C6C
00024B2C                            ; ===========================================================================
00024B2C                            
00024B2C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00024B2C 117C 0008 001C             		move.b	#8,$1C(a0)
00024B32 2268 0034                  		movea.l	$34(a0),a1
00024B36 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024B3C 6600                       		bne.s	loc_18C56
00024B3E 4A28 0001                  		tst.b	1(a0)
00024B42 6A00 FC62                  		bpl.w	Obj7A_Delete
00024B46 117C 000B 001C             		move.b	#$B,$1C(a0)
00024B4C 6000                       		bra.s	loc_18C6C
00024B4E                            ; ===========================================================================
00024B4E                            
00024B4E                            loc_18C56:
00024B4E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00024B54 6E00                       		bgt.s	loc_18C6C
00024B56 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00024B5C 6D00                       		blt.s	loc_18C6C
00024B5E 117C 0007 001C             		move.b	#7,$1C(a0)
00024B64                            
00024B64                            loc_18C6C:
00024B64 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
00024B6A 4EB9 0001 2754             		jsr	AnimateSprite
00024B70                            
00024B70                            loc_18C78:
00024B70 2268 0034                  		movea.l	$34(a0),a1
00024B74 3169 0008 0008             		move.w	8(a1),8(a0)
00024B7A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00024B80 1169 0022 0022             		move.b	$22(a1),$22(a0)
00024B86 7003                       		moveq	#3,d0
00024B88 C028 0022                  		and.b	$22(a0),d0
00024B8C 0228 00FC 0001             		andi.b	#-4,1(a0)
00024B92 8128 0001                  		or.b	d0,1(a0)
00024B96 4EF9 0001 5D72             		jmp	DisplaySprite
00024B9C                            ; ===========================================================================
00024B9C                            
00024B9C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00024B9C 2268 0034                  		movea.l	$34(a0),a1
00024BA0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024BA6 6600                       		bne.s	loc_18CB8
00024BA8 4A28 0001                  		tst.b	1(a0)
00024BAC 6A00 FBF8                  		bpl.w	Obj7A_Delete
00024BB0                            
00024BB0                            loc_18CB8:
00024BB0 217C 0002 3CCC 0004        		move.l	#Map_BossItems,4(a0)
00024BB8 317C 246C 0002             		move.w	#$246C,2(a0)
00024BBE 117C 0003 001A             		move.b	#3,$1A(a0)
00024BC4 60AA                       		bra.s	loc_18C78
00024BC6                            ; ===========================================================================
00024BC6                            ; ---------------------------------------------------------------------------
00024BC6                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00024BC6                            ; ---------------------------------------------------------------------------
00024BC6                            
00024BC6                            Obj7B:					; XREF: Obj_Index
00024BC6 7000                       		moveq	#0,d0
00024BC8 1028 0024                  		move.b	$24(a0),d0
00024BCC 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00024BD0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00024BD4 3028 0030                  		move.w	$30(a0),d0
00024BD8 0240 FF80                  		andi.w	#$FF80,d0
00024BDC 3238 F700                  		move.w	($FFFFF700).w,d1
00024BE0 0441 0080                  		subi.w	#$80,d1
00024BE4 0241 FF80                  		andi.w	#$FF80,d1
00024BE8 9041                       		sub.w	d1,d0
00024BEA 6B00 FBBA                  		bmi.w	Obj7A_Delete
00024BEE 0C40 0280                  		cmpi.w	#$280,d0
00024BF2 6200 FBB2                  		bhi.w	Obj7A_Delete
00024BF6 4EF9 0001 5D72             		jmp	DisplaySprite
00024BFC                            ; ===========================================================================
00024BFC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00024BFE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00024C00 0000                       		dc.w loc_18DC6-Obj7B_Index
00024C02 0000                       		dc.w loc_18EAA-Obj7B_Index
00024C04 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00024C06 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00024C08                            ; ===========================================================================
00024C08                            
00024C08                            Obj7B_Main:				; XREF: Obj7B_Index
00024C08 217C 0001 B66E 0004        		move.l	#Map_obj5Ea,4(a0)
00024C10 317C 0518 0002             		move.w	#$518,2(a0)
00024C16 117C 0001 001A             		move.b	#1,$1A(a0)
00024C1C 0028 0004 0001             		ori.b	#4,1(a0)
00024C22 317C 0200 0018             		move.w	#$200,priority(a0)
00024C28 117C 008B 0020             		move.b	#$8B,$20(a0)
00024C2E 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00024C34 2268 003C                  		movea.l	$3C(a0),a1
00024C38 3169 0008 0030             		move.w	8(a1),$30(a0)
00024C3E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00024C44 08E8 0000 0022             		bset	#0,$22(a0)
00024C4A 3028 0008                  		move.w	8(a0),d0
00024C4E B069 0008                  		cmp.w	8(a1),d0
00024C52 6E00                       		bgt.s	loc_18D68
00024C54 08A8 0000 0022             		bclr	#0,$22(a0)
00024C5A 117C 0002 003A             		move.b	#2,$3A(a0)
00024C60                            
00024C60                            loc_18D68:
00024C60 5428 0024                  		addq.b	#2,$24(a0)
00024C64                            
00024C64                            Obj7B_Fall:				; XREF: Obj7B_Index
00024C64 4EB9 0001 5CEC             		jsr	ObjectFall
00024C6A 2268 003C                  		movea.l	$3C(a0),a1
00024C6E 45F9 0000 0000             		lea	(word_19018).l,a2
00024C74 7000                       		moveq	#0,d0
00024C76 1029 001A                  		move.b	$1A(a1),d0
00024C7A 3228 0008                  		move.w	8(a0),d1
00024C7E 9268 0030                  		sub.w	$30(a0),d1
00024C82 6400                       		bcc.s	loc_18D8E
00024C84 5440                       		addq.w	#2,d0
00024C86                            
00024C86                            loc_18D8E:
00024C86 D040                       		add.w	d0,d0
00024C88 3228 0034                  		move.w	$34(a0),d1
00024C8C D272 0000                  		add.w	(a2,d0.w),d1
00024C90 B268 000C                  		cmp.w	$C(a0),d1
00024C94 6E00                       		bgt.s	locret_18DC4
00024C96 2268 003C                  		movea.l	$3C(a0),a1
00024C9A 7202                       		moveq	#2,d1
00024C9C 0828 0000 0022             		btst	#0,$22(a0)
00024CA2 6700                       		beq.s	loc_18DAE
00024CA4 7200                       		moveq	#0,d1
00024CA6                            
00024CA6                            loc_18DAE:
00024CA6 317C 00F0 0028             		move.w	#$F0,$28(a0)
00024CAC 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00024CB2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00024CB8 6000 0000                  		bra.w	loc_18FA2
00024CBC                            ; ===========================================================================
00024CBC                            
00024CBC                            locret_18DC4:
00024CBC 4E75                       		rts	
00024CBE                            ; ===========================================================================
00024CBE                            
00024CBE                            loc_18DC6:				; XREF: Obj7B_Index
00024CBE 2268 003C                  		movea.l	$3C(a0),a1
00024CC2 7000                       		moveq	#0,d0
00024CC4 1028 003A                  		move.b	$3A(a0),d0
00024CC8 9029 003A                  		sub.b	$3A(a1),d0
00024CCC 6700                       		beq.s	loc_18E2A
00024CCE 6400                       		bcc.s	loc_18DDA
00024CD0 4400                       		neg.b	d0
00024CD2                            
00024CD2                            loc_18DDA:
00024CD2 323C F7E8                  		move.w	#-$818,d1
00024CD6 343C FEEC                  		move.w	#-$114,d2
00024CDA 0C00 0001                  		cmpi.b	#1,d0
00024CDE 6700                       		beq.s	loc_18E00
00024CE0 323C F6A0                  		move.w	#-$960,d1
00024CE4 343C FF0C                  		move.w	#-$F4,d2
00024CE8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00024CEE 6D00                       		blt.s	loc_18E00
00024CF0 323C F5E0                  		move.w	#-$A20,d1
00024CF4 343C FF80                  		move.w	#-$80,d2
00024CF8                            
00024CF8                            loc_18E00:
00024CF8 3141 0012                  		move.w	d1,$12(a0)
00024CFC 3142 0010                  		move.w	d2,$10(a0)
00024D00 3028 0008                  		move.w	8(a0),d0
00024D04 9068 0030                  		sub.w	$30(a0),d0
00024D08 6400                       		bcc.s	loc_18E16
00024D0A 4468 0010                  		neg.w	$10(a0)
00024D0E                            
00024D0E                            loc_18E16:
00024D0E 117C 0001 001A             		move.b	#1,$1A(a0)
00024D14 317C 0020 0028             		move.w	#$20,$28(a0)
00024D1A 5428 0024                  		addq.b	#2,$24(a0)
00024D1E 6000 0000                  		bra.w	loc_18EAA
00024D22                            ; ===========================================================================
00024D22                            
00024D22                            loc_18E2A:				; XREF: loc_18DC6
00024D22 45F9 0000 0000             		lea	(word_19018).l,a2
00024D28 7000                       		moveq	#0,d0
00024D2A 1029 001A                  		move.b	$1A(a1),d0
00024D2E 343C 0028                  		move.w	#$28,d2
00024D32 3228 0008                  		move.w	8(a0),d1
00024D36 9268 0030                  		sub.w	$30(a0),d1
00024D3A 6400                       		bcc.s	loc_18E48
00024D3C 4442                       		neg.w	d2
00024D3E 5440                       		addq.w	#2,d0
00024D40                            
00024D40                            loc_18E48:
00024D40 D040                       		add.w	d0,d0
00024D42 3228 0034                  		move.w	$34(a0),d1
00024D46 D272 0000                  		add.w	(a2,d0.w),d1
00024D4A 3141 000C                  		move.w	d1,$C(a0)
00024D4E D468 0030                  		add.w	$30(a0),d2
00024D52 3142 0008                  		move.w	d2,8(a0)
00024D56 4268 000E                  		clr.w	$E(a0)
00024D5A 4268 000A                  		clr.w	$A(a0)
00024D5E 5368 0028                  		subq.w	#1,$28(a0)
00024D62 6600                       		bne.s	loc_18E7A
00024D64 317C 0020 0028             		move.w	#$20,$28(a0)
00024D6A 117C 0008 0024             		move.b	#8,$24(a0)
00024D70 4E75                       		rts	
00024D72                            ; ===========================================================================
00024D72                            
00024D72                            loc_18E7A:
00024D72 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00024D78 6600                       		bne.s	loc_18E88
00024D7A 117C 0005 001F             		move.b	#5,$1F(a0)
00024D80                            
00024D80                            loc_18E88:
00024D80 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00024D86 6600                       		bne.s	loc_18E96
00024D88 117C 0002 001F             		move.b	#2,$1F(a0)
00024D8E                            
00024D8E                            loc_18E96:
00024D8E 5328 001E                  		subq.b	#1,$1E(a0)
00024D92 6E00                       		bgt.s	locret_18EA8
00024D94 0868 0000 001A             		bchg	#0,$1A(a0)
00024D9A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00024DA0                            
00024DA0                            locret_18EA8:
00024DA0 4E75                       		rts	
00024DA2                            ; ===========================================================================
00024DA2                            
00024DA2                            loc_18EAA:				; XREF: Obj7B_Index
00024DA2 43F8 D040                  		lea	($FFFFD040).w,a1
00024DA6 707A                       		moveq	#$7A,d0
00024DA8 7240                       		moveq	#$40,d1
00024DAA 743E                       		moveq	#$3E,d2
00024DAC                            
00024DAC                            loc_18EB4:
00024DAC B011                       		cmp.b	(a1),d0
00024DAE 6700                       		beq.s	loc_18EC0
00024DB0 D2C1                       		adda.w	d1,a1
00024DB2 51CA FFF8                  		dbf	d2,loc_18EB4
00024DB6                            
00024DB6 6000                       		bra.s	loc_18F38
00024DB8                            ; ===========================================================================
00024DB8                            
00024DB8                            loc_18EC0:
00024DB8 3029 0008                  		move.w	8(a1),d0
00024DBC 3229 000C                  		move.w	$C(a1),d1
00024DC0 3428 0008                  		move.w	8(a0),d2
00024DC4 3628 000C                  		move.w	$C(a0),d3
00024DC8 45FA 0000                  		lea	byte_19022(pc),a2
00024DCC 47FA 0000                  		lea	byte_19026(pc),a3
00024DD0 181A                       		move.b	(a2)+,d4
00024DD2 4884                       		ext.w	d4
00024DD4 D044                       		add.w	d4,d0
00024DD6 181B                       		move.b	(a3)+,d4
00024DD8 4884                       		ext.w	d4
00024DDA D444                       		add.w	d4,d2
00024DDC B440                       		cmp.w	d0,d2
00024DDE 6500                       		bcs.s	loc_18F38
00024DE0 181A                       		move.b	(a2)+,d4
00024DE2 4884                       		ext.w	d4
00024DE4 D044                       		add.w	d4,d0
00024DE6 181B                       		move.b	(a3)+,d4
00024DE8 4884                       		ext.w	d4
00024DEA D444                       		add.w	d4,d2
00024DEC B042                       		cmp.w	d2,d0
00024DEE 6500                       		bcs.s	loc_18F38
00024DF0 181A                       		move.b	(a2)+,d4
00024DF2 4884                       		ext.w	d4
00024DF4 D244                       		add.w	d4,d1
00024DF6 181B                       		move.b	(a3)+,d4
00024DF8 4884                       		ext.w	d4
00024DFA D644                       		add.w	d4,d3
00024DFC B641                       		cmp.w	d1,d3
00024DFE 6500                       		bcs.s	loc_18F38
00024E00 181A                       		move.b	(a2)+,d4
00024E02 4884                       		ext.w	d4
00024E04 D244                       		add.w	d4,d1
00024E06 181B                       		move.b	(a3)+,d4
00024E08 4884                       		ext.w	d4
00024E0A D644                       		add.w	d4,d3
00024E0C B243                       		cmp.w	d3,d1
00024E0E 6500                       		bcs.s	loc_18F38
00024E10 5428 0024                  		addq.b	#2,$24(a0)
00024E14 4268 0028                  		clr.w	$28(a0)
00024E18 4229 0020                  		clr.b	$20(a1)
00024E1C 5329 0021                  		subq.b	#1,$21(a1)
00024E20 6600                       		bne.s	loc_18F38
00024E22 08E9 0007 0022             		bset	#7,$22(a1)
00024E28 4268 0010                  		clr.w	$10(a0)
00024E2C 4268 0012                  		clr.w	$12(a0)
00024E30                            
00024E30                            loc_18F38:
00024E30 4A68 0012                  		tst.w	$12(a0)
00024E34 6A00                       		bpl.s	loc_18F5C
00024E36 4EB9 0001 5CEC             		jsr	ObjectFall
00024E3C 3028 0034                  		move.w	$34(a0),d0
00024E40 0440 002F                  		subi.w	#$2F,d0
00024E44 B068 000C                  		cmp.w	$C(a0),d0
00024E48 6E00                       		bgt.s	loc_18F58
00024E4A 4EB9 0001 5CEC             		jsr	ObjectFall
00024E50                            
00024E50                            loc_18F58:
00024E50 6000 FF20                  		bra.w	loc_18E7A
00024E54                            ; ===========================================================================
00024E54                            
00024E54                            loc_18F5C:
00024E54 4EB9 0001 5CEC             		jsr	ObjectFall
00024E5A 2268 003C                  		movea.l	$3C(a0),a1
00024E5E 45F9 0000 0000             		lea	(word_19018).l,a2
00024E64 7000                       		moveq	#0,d0
00024E66 1029 001A                  		move.b	$1A(a1),d0
00024E6A 3228 0008                  		move.w	8(a0),d1
00024E6E 9268 0030                  		sub.w	$30(a0),d1
00024E72 6400                       		bcc.s	loc_18F7E
00024E74 5440                       		addq.w	#2,d0
00024E76                            
00024E76                            loc_18F7E:
00024E76 D040                       		add.w	d0,d0
00024E78 3228 0034                  		move.w	$34(a0),d1
00024E7C D272 0000                  		add.w	(a2,d0.w),d1
00024E80 B268 000C                  		cmp.w	$C(a0),d1
00024E84 6ECA                       		bgt.s	loc_18F58
00024E86 2268 003C                  		movea.l	$3C(a0),a1
00024E8A 7202                       		moveq	#2,d1
00024E8C 4A68 0010                  		tst.w	$10(a0)
00024E90 6B00                       		bmi.s	loc_18F9C
00024E92 7200                       		moveq	#0,d1
00024E94                            
00024E94                            loc_18F9C:
00024E94 317C 0000 0028             		move.w	#0,$28(a0)
00024E9A                            
00024E9A                            loc_18FA2:
00024E9A 1341 003A                  		move.b	d1,$3A(a1)
00024E9E 1141 003A                  		move.b	d1,$3A(a0)
00024EA2 B229 001A                  		cmp.b	$1A(a1),d1
00024EA6 6700                       		beq.s	loc_19008
00024EA8 08A9 0003 0022             		bclr	#3,$22(a1)
00024EAE 6700                       		beq.s	loc_19008
00024EB0 4229 0025                  		clr.b	$25(a1)
00024EB4 137C 0002 0024             		move.b	#2,$24(a1)
00024EBA 45F8 D000                  		lea	($FFFFD000).w,a2
00024EBE 3568 0012 0012             		move.w	$12(a0),$12(a2)
00024EC4 446A 0012                  		neg.w	$12(a2)
00024EC8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00024ECE 6600                       		bne.s	loc_18FDC
00024ED0 E0EA 0012                  		asr	$12(a2)
00024ED4                            
00024ED4                            loc_18FDC:
00024ED4 08EA 0001 0022             		bset	#1,$22(a2)
00024EDA 08AA 0003 0022             		bclr	#3,$22(a2)
00024EE0 422A 003C                  		clr.b	$3C(a2)
00024EE4 2F08                       		move.l	a0,-(sp)
00024EE6 41D2                       		lea	(a2),a0
00024EE8 4EBA 87C6                  		jsr	Obj01_ChkRoll
00024EEC 205F                       		movea.l	(sp)+,a0
00024EEE 157C 0002 0024             		move.b	#2,$24(a2)
00024EF4 303C 00B1                  		move.w	#$B1,d0
00024EF8 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "spring" sound
00024EFE                            
00024EFE                            loc_19008:
00024EFE 4268 0010                  		clr.w	$10(a0)
00024F02 4268 0012                  		clr.w	$12(a0)
00024F06 5428 0024                  		addq.b	#2,$24(a0)
00024F0A 6000 FE66                  		bra.w	loc_18E7A
00024F0E                            ; ===========================================================================
00024F0E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00024F18                            		even
00024F18 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00024F1C                            		even
00024F1C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00024F20                            		even
00024F20                            ; ===========================================================================
00024F20                            
00024F20                            Obj7B_Explode:				; XREF: Obj7B_Index
00024F20 10BC 003F                  		move.b	#$3F,(a0)
00024F24 4228 0024                  		clr.b	$24(a0)
00024F28 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00024F2E 6700                       		beq.s	Obj7B_MakeFrag
00024F30 4E75                       		rts	
00024F32                            ; ===========================================================================
00024F32                            
00024F32                            Obj7B_MakeFrag:
00024F32 3168 0034 000C             		move.w	$34(a0),$C(a0)
00024F38 7203                       		moveq	#3,d1
00024F3A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00024F3E                            
00024F3E                            Obj7B_Loop:
00024F3E 4EB9 0001 687C             		jsr	SingleObjLoad
00024F44 6600                       		bne.s	loc_1909A
00024F46 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00024F4A 137C 000A 0024             		move.b	#$A,$24(a1)
00024F50 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00024F58 337C 0180 0018             		move.w	#$180,priority(a1)
00024F5E 337C 0518 0002             		move.w	#$518,2(a1)
00024F64 3368 0008 0008             		move.w	8(a0),8(a1)
00024F6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024F70 335A 0010                  		move.w	(a2)+,$10(a1)
00024F74 335A 0012                  		move.w	(a2)+,$12(a1)
00024F78 137C 0098 0020             		move.b	#$98,$20(a1)
00024F7E 0029 0004 0001             		ori.b	#4,1(a1)
00024F84 08E9 0007 0001             		bset	#7,1(a1)
00024F8A 137C 000C 0023             		move.b	#$C,width_pixels(a1)
00024F90                            
00024F90                            loc_1909A:
00024F90 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00024F94                            
00024F94 4E75                       		rts	
00024F96                            ; ===========================================================================
00024F96 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00024F9A FF60 FDC0                  		dc.w $FF60, $FDC0
00024F9E 0100 FCC0                  		dc.w $100, $FCC0
00024FA2 00A0 FDC0                  		dc.w $A0, $FDC0
00024FA6                            ; ===========================================================================
00024FA6                            
00024FA6                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00024FA6 4EB9 0001 5D0C             		jsr	SpeedToPos
00024FAC 3168 0008 0030             		move.w	8(a0),$30(a0)
00024FB2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00024FB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00024FBE 7004                       		moveq	#4,d0
00024FC0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00024FC4 E448                       		lsr.w	#2,d0
00024FC6 1140 001A                  		move.b	d0,$1A(a0)
00024FCA 4A28 0001                  		tst.b	1(a0)
00024FCE 6A00 F7D6                  		bpl.w	Obj7A_Delete
00024FD2 4E75                       		rts	
00024FD4                            ; ===========================================================================
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            Map_obj7B:
00024FD4                            	include "_maps\obj7B.asm"
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4 0000                       		dc.w byte_190E2-Map_obj7B
00024FD6 0000                       		dc.w byte_190E8-Map_obj7B
00024FD8 01                         byte_190E2:	dc.b 1
00024FD9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00024FDE 01                         byte_190E8:	dc.b 1
00024FDF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00024FE4                            		even
00024FE4                            		even
00024FE4                            
00024FE4                            ; ===========================================================================
00024FE4                            ; ---------------------------------------------------------------------------
00024FE4                            ; Object 75 - Eggman (SYZ)
00024FE4                            ; ---------------------------------------------------------------------------
00024FE4                            
00024FE4                            Obj75:					; XREF: Obj_Index
00024FE4 7000                       		moveq	#0,d0
00024FE6 1028 0024                  		move.b	$24(a0),d0
00024FEA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00024FEE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00024FF2                            ; ===========================================================================
00024FF2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00024FF4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00024FF6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00024FF8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00024FFA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00024FFC                            
00024FFC 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00024FFF 0401 05                    		dc.b 4,	1, 5
00025002 0607 05                    		dc.b 6,	7, 5
00025005 0800 05                    		dc.b 8,	0, 5
00025008                            ; ===========================================================================
00025008                            
00025008                            Obj75_Main:				; XREF: Obj75_Index
00025008 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0002500E 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00025014 3168 0008 0030             		move.w	8(a0),$30(a0)
0002501A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00025020 117C 000F 0020             		move.b	#$F,$20(a0)
00025026 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0002502C 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00025030 2248                       		movea.l	a0,a1
00025032 7203                       		moveq	#3,d1
00025034 6000                       		bra.s	Obj75_LoadBoss
00025036                            ; ===========================================================================
00025036                            
00025036                            Obj75_Loop:
00025036 4EB9 0001 6892             		jsr	SingleObjLoad2
0002503C 6600                       		bne.s	Obj75_ShipMain
0002503E 12BC 0075                  		move.b	#$75,(a1)
00025042 3368 0008 0008             		move.w	8(a0),8(a1)
00025048 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002504E                            
0002504E                            Obj75_LoadBoss:				; XREF: Obj75_Main
0002504E 08A8 0000 0022             		bclr	#0,$22(a0)
00025054 4229 0025                  		clr.b	$25(a1)
00025058 135A 0024                  		move.b	(a2)+,$24(a1)
0002505C 135A 001C                  		move.b	(a2)+,$1C(a1)
00025060 135A 0018                  		move.b	(a2)+,priority(a1)
00025064 3029 0018                          move.w  priority(a1),d0
00025068 E248                               lsr.w   #1,d0
0002506A 0240 0380                          andi.w  #$380,d0
0002506E 3340 0018                          move.w  d0,priority(a1)
00025072 237C 0002 3C04 0004        		move.l	#Map_Eggman,4(a1)
0002507A 337C 0400 0002             		move.w	#$400,2(a1)
00025080 137C 0004 0001             		move.b	#4,1(a1)
00025086 137C 0020 0023             		move.b	#$20,width_pixels(a1)
0002508C 2348 0034                  		move.l	a0,$34(a1)
00025090 51C9 FFA4                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00025094                            
00025094                            Obj75_ShipMain:				; XREF: Obj75_Index
00025094 7000                       		moveq	#0,d0
00025096 1028 0025                  		move.b	$25(a0),d0
0002509A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0002509E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000250A2 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
000250A8 4EB9 0001 2754             		jsr	AnimateSprite
000250AE 7003                       		moveq	#3,d0
000250B0 C028 0022                  		and.b	$22(a0),d0
000250B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000250BA 8128 0001                  		or.b	d0,1(a0)
000250BE 4EF9 0001 5D72             		jmp	DisplaySprite
000250C4                            ; ===========================================================================
000250C4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000250C8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000250CC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000250D0                            ; ===========================================================================
000250D0                            
000250D0                            loc_191CC:				; XREF: Obj75_ShipIndex
000250D0 317C FF00 0010             		move.w	#-$100,$10(a0)
000250D6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000250DC 6400                       		bcc.s	loc_191DE
000250DE 5428 0025                  		addq.b	#2,$25(a0)
000250E2                            
000250E2                            loc_191DE:
000250E2 1028 003F                  		move.b	$3F(a0),d0
000250E6 5428 003F                  		addq.b	#2,$3F(a0)
000250EA 4EB9 0000 8F30             		jsr	(CalcSine).l
000250F0 E440                       		asr.w	#2,d0
000250F2 3140 0012                  		move.w	d0,$12(a0)
000250F6                            
000250F6                            loc_191F2:
000250F6 6100 E6B0                  		bsr.w	BossMove
000250FA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00025100 3168 0030 0008             		move.w	$30(a0),8(a0)
00025106                            
00025106                            loc_19202:
00025106 3028 0008                  		move.w	8(a0),d0
0002510A 0440 2C00                  		subi.w	#$2C00,d0
0002510E EA48                       		lsr.w	#5,d0
00025110 1140 0034                  		move.b	d0,$34(a0)
00025114 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0002511A 6400                       		bcc.s	locret_19256
0002511C 4A28 0022                  		tst.b	$22(a0)
00025120 6B00                       		bmi.s	loc_19258
00025122 4A28 0020                  		tst.b	$20(a0)
00025126 6600                       		bne.s	locret_19256
00025128 4A28 003E                  		tst.b	$3E(a0)
0002512C 6600                       		bne.s	loc_1923A
0002512E 117C 0020 003E             		move.b	#$20,$3E(a0)
00025134                            ;		move.w	#$AC,d0
00025134 4EB9 0001 EEC4             		jsr	(BossModeMusic).l ;	play boss damage sound
0002513A                            
0002513A                            loc_1923A:
0002513A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0002513E 7000                       		moveq	#0,d0
00025140 4A51                       		tst.w	(a1)
00025142 6600                       		bne.s	loc_19248
00025144 303C 0EEE                  		move.w	#$EEE,d0
00025148                            
00025148                            loc_19248:
00025148 3280                       		move.w	d0,(a1)
0002514A 5328 003E                  		subq.b	#1,$3E(a0)
0002514E 6600                       		bne.s	locret_19256
00025150 117C 000F 0020             		move.b	#$F,$20(a0)
00025156                            
00025156                            locret_19256:
00025156 4E75                       		rts	
00025158                            ; ===========================================================================
00025158                            
00025158                            loc_19258:				; XREF: loc_19202
00025158 7064                       		moveq	#100,d0
0002515A 6100 0000                  		bsr.w	AddPoints
0002515E 117C 0006 0025             		move.b	#6,$25(a0)
00025164 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0002516A 4268 0010                  		clr.w	$10(a0)
0002516E 4E75                       		rts	
00025170                            ; ===========================================================================
00025170                            
00025170                            loc_19270:				; XREF: Obj75_ShipIndex
00025170 3028 0030                  		move.w	$30(a0),d0
00025174 317C 0140 0010             		move.w	#$140,$10(a0)
0002517A 0828 0000 0022             		btst	#0,$22(a0)
00025180 6600                       		bne.s	loc_1928E
00025182 4468 0010                  		neg.w	$10(a0)
00025186 0C40 2C08                  		cmpi.w	#$2C08,d0
0002518A 6E00                       		bgt.s	loc_1929E
0002518C 6000                       		bra.s	loc_19294
0002518E                            ; ===========================================================================
0002518E                            
0002518E                            loc_1928E:
0002518E 0C40 2D38                  		cmpi.w	#$2D38,d0
00025192 6D00                       		blt.s	loc_1929E
00025194                            
00025194                            loc_19294:
00025194 0868 0000 0022             		bchg	#0,$22(a0)
0002519A 4228 003D                  		clr.b	$3D(a0)
0002519E                            
0002519E                            loc_1929E:
0002519E 0440 2C10                  		subi.w	#$2C10,d0
000251A2 0240 001F                  		andi.w	#$1F,d0
000251A6 0440 001F                  		subi.w	#$1F,d0
000251AA 6A00                       		bpl.s	loc_192AE
000251AC 4440                       		neg.w	d0
000251AE                            
000251AE                            loc_192AE:
000251AE 5340                       		subq.w	#1,d0
000251B0 6E00                       		bgt.s	loc_192E8
000251B2 4A28 003D                  		tst.b	$3D(a0)
000251B6 6600                       		bne.s	loc_192E8
000251B8 3238 D008                  		move.w	($FFFFD008).w,d1
000251BC 0441 2C00                  		subi.w	#$2C00,d1
000251C0 EA41                       		asr.w	#5,d1
000251C2 B228 0034                  		cmp.b	$34(a0),d1
000251C6 6600                       		bne.s	loc_192E8
000251C8 7000                       		moveq	#0,d0
000251CA 1028 0034                  		move.b	$34(a0),d0
000251CE EB40                       		asl.w	#5,d0
000251D0 0640 2C10                  		addi.w	#$2C10,d0
000251D4 3140 0030                  		move.w	d0,$30(a0)
000251D8 6100 0000                  		bsr.w	Obj75_FindBlocks
000251DC 5428 0025                  		addq.b	#2,$25(a0)
000251E0 4268 0028                  		clr.w	$28(a0)
000251E4 4268 0010                  		clr.w	$10(a0)
000251E8                            
000251E8                            loc_192E8:
000251E8 6000 FEF8                  		bra.w	loc_191DE
000251EC                            ; ===========================================================================
000251EC                            
000251EC                            loc_192EC:				; XREF: Obj75_ShipIndex
000251EC 7000                       		moveq	#0,d0
000251EE 1028 0028                  		move.b	$28(a0),d0
000251F2 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000251F6 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000251FA                            ; ===========================================================================
000251FA 0000                       off_192FA:	dc.w loc_19302-off_192FA
000251FC 0000                       		dc.w loc_19348-off_192FA
000251FE 0000                       		dc.w loc_1938E-off_192FA
00025200 0000                       		dc.w loc_193D0-off_192FA
00025202                            ; ===========================================================================
00025202                            
00025202                            loc_19302:				; XREF: off_192FA
00025202 317C 0180 0012             		move.w	#$180,$12(a0)
00025208 3028 0038                  		move.w	$38(a0),d0
0002520C 0C40 0556                  		cmpi.w	#$556,d0
00025210 6500                       		bcs.s	loc_19344
00025212 317C 0556 0038             		move.w	#$556,$38(a0)
00025218 4268 003C                  		clr.w	$3C(a0)
0002521C 70FF                       		moveq	#-1,d0
0002521E 3028 0036                  		move.w	$36(a0),d0
00025222 6700                       		beq.s	loc_1933C
00025224 2240                       		movea.l	d0,a1
00025226 137C 00FF 0029             		move.b	#-1,$29(a1)
0002522C 117C 00FF 0029             		move.b	#-1,$29(a0)
00025232 2348 0034                  		move.l	a0,$34(a1)
00025236 317C 0032 003C             		move.w	#$32,$3C(a0)
0002523C                            
0002523C                            loc_1933C:
0002523C 4268 0012                  		clr.w	$12(a0)
00025240 5428 0028                  		addq.b	#2,$28(a0)
00025244                            
00025244                            loc_19344:
00025244 6000 FEB0                  		bra.w	loc_191F2
00025248                            ; ===========================================================================
00025248                            
00025248                            loc_19348:				; XREF: off_192FA
00025248 5368 003C                  		subq.w	#1,$3C(a0)
0002524C 6A00                       		bpl.s	loc_19366
0002524E 5428 0028                  		addq.b	#2,$28(a0)
00025252 317C F800 0012             		move.w	#-$800,$12(a0)
00025258 4A68 0036                  		tst.w	$36(a0)
0002525C 6600                       		bne.s	loc_19362
0002525E E0E8 0012                  		asr	$12(a0)
00025262                            
00025262                            loc_19362:
00025262 7000                       		moveq	#0,d0
00025264 6000                       		bra.s	loc_1937C
00025266                            ; ===========================================================================
00025266                            
00025266                            loc_19366:
00025266 7000                       		moveq	#0,d0
00025268 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0002526E 6E00                       		bgt.s	loc_1937C
00025270 7002                       		moveq	#2,d0
00025272 0828 0001 003D             		btst	#1,$3D(a0)
00025278 6700                       		beq.s	loc_1937C
0002527A 4440                       		neg.w	d0
0002527C                            
0002527C                            loc_1937C:
0002527C D068 0038                  		add.w	$38(a0),d0
00025280 3140 000C                  		move.w	d0,$C(a0)
00025284 3168 0030 0008             		move.w	$30(a0),8(a0)
0002528A 6000 FE7A                  		bra.w	loc_19202
0002528E                            ; ===========================================================================
0002528E                            
0002528E                            loc_1938E:				; XREF: off_192FA
0002528E 303C 04DA                  		move.w	#$4DA,d0
00025292 4A68 0036                  		tst.w	$36(a0)
00025296 6700                       		beq.s	loc_1939C
00025298 0440 0018                  		subi.w	#$18,d0
0002529C                            
0002529C                            loc_1939C:
0002529C B068 0038                  		cmp.w	$38(a0),d0
000252A0 6D00                       		blt.s	loc_193BE
000252A2 317C 0008 003C             		move.w	#8,$3C(a0)
000252A8 4A68 0036                  		tst.w	$36(a0)
000252AC 6700                       		beq.s	loc_193B4
000252AE 317C 002D 003C             		move.w	#$2D,$3C(a0)
000252B4                            
000252B4                            loc_193B4:
000252B4 5428 0028                  		addq.b	#2,$28(a0)
000252B8 4268 0012                  		clr.w	$12(a0)
000252BC 6000                       		bra.s	loc_193CC
000252BE                            ; ===========================================================================
000252BE                            
000252BE                            loc_193BE:
000252BE 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000252C4 6C00                       		bge.s	loc_193CC
000252C6 0668 000C 0012             		addi.w	#$C,$12(a0)
000252CC                            
000252CC                            loc_193CC:
000252CC 6000 FE28                  		bra.w	loc_191F2
000252D0                            ; ===========================================================================
000252D0                            
000252D0                            loc_193D0:				; XREF: off_192FA
000252D0 5368 003C                  		subq.w	#1,$3C(a0)
000252D4 6E00                       		bgt.s	loc_19406
000252D6 6B00                       		bmi.s	loc_193EE
000252D8 70FF                       		moveq	#-1,d0
000252DA 3028 0036                  		move.w	$36(a0),d0
000252DE 6700                       		beq.s	loc_193E8
000252E0 2240                       		movea.l	d0,a1
000252E2 137C 000A 0029             		move.b	#$A,$29(a1)
000252E8                            
000252E8                            loc_193E8:
000252E8 4268 0036                  		clr.w	$36(a0)
000252EC 6000                       		bra.s	loc_19406
000252EE                            ; ===========================================================================
000252EE                            
000252EE                            loc_193EE:
000252EE 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000252F4 6600                       		bne.s	loc_19406
000252F6 4228 0029                  		clr.b	$29(a0)
000252FA 5528 0025                  		subq.b	#2,$25(a0)
000252FE 117C 00FF 003D             		move.b	#-1,$3D(a0)
00025304 6000                       		bra.s	loc_19446
00025306                            ; ===========================================================================
00025306                            
00025306                            loc_19406:
00025306 7001                       		moveq	#1,d0
00025308 4A68 0036                  		tst.w	$36(a0)
0002530C 6700                       		beq.s	loc_19410
0002530E 7002                       		moveq	#2,d0
00025310                            
00025310                            loc_19410:
00025310 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00025316 6700                       		beq.s	loc_19424
00025318 6D00                       		blt.s	loc_1941C
0002531A 4440                       		neg.w	d0
0002531C                            
0002531C                            loc_1941C:
0002531C 4A68 0036                  		tst.w	$36(a0)
00025320 D168 0038                  		add.w	d0,$38(a0)
00025324                            
00025324                            loc_19424:
00025324 7000                       		moveq	#0,d0
00025326 4A68 0036                  		tst.w	$36(a0)
0002532A 6700                       		beq.s	loc_19438
0002532C 7002                       		moveq	#2,d0
0002532E 0828 0000 003D             		btst	#0,$3D(a0)
00025334 6700                       		beq.s	loc_19438
00025336 4440                       		neg.w	d0
00025338                            
00025338                            loc_19438:
00025338 D068 0038                  		add.w	$38(a0),d0
0002533C 3140 000C                  		move.w	d0,$C(a0)
00025340 3168 0030 0008             		move.w	$30(a0),8(a0)
00025346                            
00025346                            loc_19446:
00025346 6000 FDBE                  		bra.w	loc_19202
0002534A                            
0002534A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002534A                            
0002534A                            
0002534A                            Obj75_FindBlocks:			; XREF: loc_192AE
0002534A 4268 0036                  		clr.w	$36(a0)
0002534E 43F8 D040                  		lea	($FFFFD040).w,a1
00025352 703E                       		moveq	#$3E,d0
00025354 7276                       		moveq	#$76,d1
00025356 1428 0034                  		move.b	$34(a0),d2
0002535A                            
0002535A                            Obj75_FindLoop:
0002535A B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0002535C 6600                       		bne.s	loc_1946A	; if not, branch
0002535E B429 0028                  		cmp.b	$28(a1),d2
00025362 6600                       		bne.s	loc_1946A
00025364 3149 0036                  		move.w	a1,$36(a0)
00025368 6000                       		bra.s	locret_19472
0002536A                            ; ===========================================================================
0002536A                            
0002536A                            loc_1946A:
0002536A 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0002536E 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00025372                            
00025372                            locret_19472:
00025372 4E75                       		rts	
00025374                            ; End of function Obj75_FindBlocks
00025374                            
00025374                            ; ===========================================================================
00025374                            
00025374                            loc_19474:				; XREF: Obj75_ShipIndex
00025374 5368 003C                  		subq.w	#1,$3C(a0)
00025378 6B00                       		bmi.s	loc_1947E
0002537A 6000 E3E6                  		bra.w	BossDefeated
0002537E                            ; ===========================================================================
0002537E                            
0002537E                            loc_1947E:
0002537E 5428 0025                  		addq.b	#2,$25(a0)
00025382 4268 0012                  		clr.w	$12(a0)
00025386 08E8 0000 0022             		bset	#0,$22(a0)
0002538C 08A8 0007 0022             		bclr	#7,$22(a0)
00025392 4268 0010                  		clr.w	$10(a0)
00025396 317C FFFF 003C             		move.w	#-1,$3C(a0)
0002539C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000253A0 6600                       		bne.s	loc_194A8
000253A2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000253A8                            
000253A8                            loc_194A8:
000253A8 6000 FD5C                  		bra.w	loc_19202
000253AC                            ; ===========================================================================
000253AC                            
000253AC                            loc_194AC:				; XREF: Obj75_ShipIndex
000253AC 5268 003C                  		addq.w	#1,$3C(a0)
000253B0 6700                       		beq.s	loc_194BC
000253B2 6A00                       		bpl.s	loc_194C2
000253B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000253BA 6000                       		bra.s	loc_194EE
000253BC                            ; ===========================================================================
000253BC                            
000253BC                            loc_194BC:
000253BC 4268 0012                  		clr.w	$12(a0)
000253C0 6000                       		bra.s	loc_194EE
000253C2                            ; ===========================================================================
000253C2                            
000253C2                            loc_194C2:
000253C2 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
000253C8 6500                       		bcs.s	loc_194DA
000253CA 6700                       		beq.s	loc_194E0
000253CC 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000253D2 6500                       		bcs.s	loc_194EE
000253D4 5428 0025                  		addq.b	#2,$25(a0)
000253D8 6000                       		bra.s	loc_194EE
000253DA                            ; ===========================================================================
000253DA                            
000253DA                            loc_194DA:
000253DA 5168 0012                  		subq.w	#8,$12(a0)
000253DE 6000                       		bra.s	loc_194EE
000253E0                            ; ===========================================================================
000253E0                            
000253E0                            loc_194E0:
000253E0 4268 0012                  		clr.w	$12(a0)
000253E4                            	;	move.w	#$85,d0
000253E4 4EB9 0001 DAEA             		jsr	(super_GetBgm).l	; play SYZ music
000253EA                            
000253EA                            loc_194EE:
000253EA 6000 FD0A                  		bra.w	loc_191F2
000253EE                            ; ===========================================================================
000253EE                            
000253EE                            loc_194F2:				; XREF: Obj75_ShipIndex
000253EE 317C 0400 0010             		move.w	#$400,$10(a0)
000253F4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000253FA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00025400 6400                       		bcc.s	loc_1950C
00025402 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00025406 6000                       		bra.s	loc_19512
00025408                            ; ===========================================================================
00025408                            
00025408                            loc_1950C:
00025408 4A28 0001                  		tst.b	1(a0)
0002540C 6A00                       		bpl.s	Obj75_ShipDelete
0002540E                            
0002540E                            loc_19512:
0002540E 6100 E398                  		bsr.w	BossMove
00025412 6000 FCCE                  		bra.w	loc_191DE
00025416                            ; ===========================================================================
00025416                            
00025416                            Obj75_ShipDelete:
00025416 4EF9 0001 5D26             		jmp	DeleteObject
0002541C                            ; ===========================================================================
0002541C                            
0002541C                            Obj75_FaceMain:				; XREF: Obj75_Index
0002541C 7201                       		moveq	#1,d1
0002541E 2268 0034                  		movea.l	$34(a0),a1
00025422 7000                       		moveq	#0,d0
00025424 1029 0025                  		move.b	$25(a1),d0
00025428 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0002542C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00025430 1141 001C                  		move.b	d1,$1C(a0)
00025434 1010                       		move.b	(a0),d0
00025436 B011                       		cmp.b	(a1),d0
00025438 6600                       		bne.s	Obj75_FaceDelete
0002543A 6000                       		bra.s	loc_195BE
0002543C                            ; ===========================================================================
0002543C                            
0002543C                            Obj75_FaceDelete:
0002543C 4EF9 0001 5D26             		jmp	DeleteObject
00025442                            ; ===========================================================================
00025442 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00025446 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0002544A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0002544E                            ; ===========================================================================
0002544E                            
0002544E                            loc_19552:				; XREF: off_19546
0002544E 720A                       		moveq	#$A,d1
00025450 4E75                       		rts	
00025452                            ; ===========================================================================
00025452                            
00025452                            loc_19556:				; XREF: off_19546
00025452 7206                       		moveq	#6,d1
00025454 4E75                       		rts	
00025456                            ; ===========================================================================
00025456                            
00025456                            loc_1955A:				; XREF: off_19546
00025456 7000                       		moveq	#0,d0
00025458 1029 0028                  		move.b	$28(a1),d0
0002545C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00025460 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00025464                            ; ===========================================================================
00025464 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00025468 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0002546C                            ; ===========================================================================
0002546C                            
0002546C                            loc_19570:				; XREF: off_19568
0002546C 6000                       		bra.s	loc_19574
0002546E                            ; ===========================================================================
0002546E                            
0002546E                            loc_19572:				; XREF: off_19568
0002546E 7206                       		moveq	#6,d1
00025470                            
00025470                            loc_19574:				; XREF: off_19546
00025470 4A29 0020                  		tst.b	$20(a1)
00025474 6600                       		bne.s	loc_1957E
00025476 7205                       		moveq	#5,d1
00025478 4E75                       		rts	
0002547A                            ; ===========================================================================
0002547A                            
0002547A                            loc_1957E:
0002547A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00025480 6500                       		bcs.s	locret_19588
00025482 7204                       		moveq	#4,d1
00025484                            
00025484                            locret_19588:
00025484 4E75                       		rts	
00025486                            ; ===========================================================================
00025486                            
00025486                            Obj75_FlameMain:			; XREF: Obj75_Index
00025486 117C 0007 001C             		move.b	#7,$1C(a0)
0002548C 2268 0034                  		movea.l	$34(a0),a1
00025490 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00025496 6600                       		bne.s	loc_195AA
00025498 117C 000B 001C             		move.b	#$B,$1C(a0)
0002549E 4A28 0001                  		tst.b	1(a0)
000254A2 6A00                       		bpl.s	Obj75_FlameDelete
000254A4 6000                       		bra.s	loc_195B6
000254A6                            ; ===========================================================================
000254A6                            
000254A6                            loc_195AA:
000254A6 4A69 0010                  		tst.w	$10(a1)
000254AA 6700                       		beq.s	loc_195B6
000254AC 117C 0008 001C             		move.b	#8,$1C(a0)
000254B2                            
000254B2                            loc_195B6:
000254B2 6000                       		bra.s	loc_195BE
000254B4                            ; ===========================================================================
000254B4                            
000254B4                            Obj75_FlameDelete:
000254B4 4EF9 0001 5D26             		jmp	DeleteObject
000254BA                            ; ===========================================================================
000254BA                            
000254BA                            loc_195BE:
000254BA 43F9 0002 3BB4             		lea	(Ani_Eggman).l,a1
000254C0 4EB9 0001 2754             		jsr	AnimateSprite
000254C6 2268 0034                  		movea.l	$34(a0),a1
000254CA 3169 0008 0008             		move.w	8(a1),8(a0)
000254D0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000254D6                            
000254D6                            loc_195DA:
000254D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000254DC 7003                       		moveq	#3,d0
000254DE C028 0022                  		and.b	$22(a0),d0
000254E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000254E8 8128 0001                  		or.b	d0,1(a0)
000254EC 4EF9 0001 5D72             		jmp	DisplaySprite
000254F2                            ; ===========================================================================
000254F2                            
000254F2                            Obj75_SpikeMain:			; XREF: Obj75_Index
000254F2 217C 0002 3CCC 0004        		move.l	#Map_BossItems,4(a0)
000254FA 317C 246C 0002             		move.w	#$246C,2(a0)
00025500 117C 0005 001A             		move.b	#5,$1A(a0)
00025506 2268 0034                  		movea.l	$34(a0),a1
0002550A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00025510 6600                       		bne.s	loc_1961C
00025512 4A28 0001                  		tst.b	1(a0)
00025516 6A00                       		bpl.s	Obj75_SpikeDelete
00025518                            
00025518                            loc_1961C:
00025518 3169 0008 0008             		move.w	8(a1),8(a0)
0002551E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025524 3028 003C                  		move.w	$3C(a0),d0
00025528 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0002552E 6600                       		bne.s	loc_19652
00025530 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00025536 6700                       		beq.s	loc_1964C
00025538 4A29 0028                  		tst.b	$28(a1)
0002553C 6600                       		bne.s	loc_19658
0002553E 0C40 0094                  		cmpi.w	#$94,d0
00025542 6C00                       		bge.s	loc_19658
00025544 5E40                       		addq.w	#7,d0
00025546 6000                       		bra.s	loc_19658
00025548                            ; ===========================================================================
00025548                            
00025548                            loc_1964C:
00025548 4A69 003C                  		tst.w	$3C(a1)
0002554C 6A00                       		bpl.s	loc_19658
0002554E                            
0002554E                            loc_19652:
0002554E 4A40                       		tst.w	d0
00025550 6F00                       		ble.s	loc_19658
00025552 5B40                       		subq.w	#5,d0
00025554                            
00025554                            loc_19658:
00025554 3140 003C                  		move.w	d0,$3C(a0)
00025558 E440                       		asr.w	#2,d0
0002555A D168 000C                  		add.w	d0,$C(a0)
0002555E 117C 0008 0023             		move.b	#8,width_pixels(a0)
00025564 117C 000C 0016             		move.b	#$C,$16(a0)
0002556A 4228 0020                  		clr.b	$20(a0)
0002556E 2268 0034                  		movea.l	$34(a0),a1
00025572 4A29 0020                  		tst.b	$20(a1)
00025576 6700                       		beq.s	loc_19688
00025578 4A29 0029                  		tst.b	$29(a1)
0002557C 6600                       		bne.s	loc_19688
0002557E 117C 0084 0020             		move.b	#$84,$20(a0)
00025584                            
00025584                            loc_19688:
00025584 6000 FF50                  		bra.w	loc_195DA
00025588                            ; ===========================================================================
00025588                            
00025588                            Obj75_SpikeDelete:
00025588 4EF9 0001 5D26             		jmp	DeleteObject
0002558E                            ; ===========================================================================
0002558E                            ; ---------------------------------------------------------------------------
0002558E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0002558E                            ; ---------------------------------------------------------------------------
0002558E                            
0002558E                            Obj76:					; XREF: Obj_Index
0002558E 7000                       		moveq	#0,d0
00025590 1028 0024                  		move.b	$24(a0),d0
00025594 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00025598 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0002559C                            ; ===========================================================================
0002559C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0002559E 0000                       		dc.w Obj76_Action-Obj76_Index
000255A0 0000                       		dc.w loc_19762-Obj76_Index
000255A2                            ; ===========================================================================
000255A2                            
000255A2                            Obj76_Main:				; XREF: Obj76_Index
000255A2 7800                       		moveq	#0,d4
000255A4 3A3C 2C10                  		move.w	#$2C10,d5
000255A8 7C09                       		moveq	#9,d6
000255AA 43D0                       		lea	(a0),a1
000255AC 6000                       		bra.s	Obj76_MakeBlock
000255AE                            ; ===========================================================================
000255AE                            
000255AE                            Obj76_Loop:
000255AE 4EB9 0001 687C             		jsr	SingleObjLoad
000255B4 6600                       		bne.s	Obj76_ExitLoop
000255B6                            
000255B6                            Obj76_MakeBlock:			; XREF: Obj76_Main
000255B6 12BC 0076                  		move.b	#$76,(a1)
000255BA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
000255C2 337C 4000 0002             		move.w	#$4000,2(a1)
000255C8 137C 0004 0001             		move.b	#4,1(a1)
000255CE 137C 0010 0023             		move.b	#$10,width_pixels(a1)
000255D4 137C 0010 0016             		move.b	#$10,$16(a1)
000255DA 337C 0180 0018             		move.w	#$180,priority(a1)
000255E0 3345 0008                  		move.w	d5,8(a1)	; set x-position
000255E4 337C 0582 000C             		move.w	#$582,$C(a1)
000255EA 3344 0028                  		move.w	d4,$28(a1)
000255EE 0644 0101                  		addi.w	#$101,d4
000255F2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
000255F6 5429 0024                  		addq.b	#2,$24(a1)
000255FA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
000255FE                            
000255FE                            Obj76_ExitLoop:
000255FE 4E75                       		rts	
00025600                            ; ===========================================================================
00025600                            
00025600                            Obj76_Action:				; XREF: Obj76_Index
00025600 1028 0029                  		move.b	$29(a0),d0
00025604 B028 0028                  		cmp.b	$28(a0),d0
00025608 6700                       		beq.s	Obj76_Solid
0002560A 4A00                       		tst.b	d0
0002560C 6B00                       		bmi.s	loc_19718
0002560E                            
0002560E                            loc_19712:
0002560E 6100 0000                  		bsr.w	Obj76_Break
00025612 6000                       		bra.s	Obj76_Display
00025614                            ; ===========================================================================
00025614                            
00025614                            loc_19718:
00025614 2268 0034                  		movea.l	$34(a0),a1
00025618 4A29 0021                  		tst.b	$21(a1)
0002561C 67F0                       		beq.s	loc_19712
0002561E 3169 0008 0008             		move.w	8(a1),8(a0)
00025624 3169 000C 000C             		move.w	$C(a1),$C(a0)
0002562A 0668 002C 000C             		addi.w	#$2C,$C(a0)
00025630 B2C8                       		cmpa.w	a0,a1
00025632 6500                       		bcs.s	Obj76_Display
00025634 3029 0012                  		move.w	$12(a1),d0
00025638 48C0                       		ext.l	d0
0002563A E080                       		asr.l	#8,d0
0002563C D168 000C                  		add.w	d0,$C(a0)
00025640 6000                       		bra.s	Obj76_Display
00025642                            ; ===========================================================================
00025642                            
00025642                            Obj76_Solid:				; XREF: Obj76_Action
00025642 323C 001B                  		move.w	#$1B,d1
00025646 343C 0010                  		move.w	#$10,d2
0002564A 363C 0011                  		move.w	#$11,d3
0002564E 3828 0008                  		move.w	8(a0),d4
00025652 4EB9 0001 958A             		jsr	SolidObject
00025658                            
00025658                            Obj76_Display:				; XREF: Obj76_Action
00025658 4EF9 0001 5D72             		jmp	DisplaySprite
0002565E                            ; ===========================================================================
0002565E                            
0002565E                            loc_19762:				; XREF: Obj76_Index
0002565E 4A28 0001                  		tst.b	1(a0)
00025662 6A00                       		bpl.s	Obj76_Delete
00025664 4EB9 0001 5CEC             		jsr	ObjectFall
0002566A 4EF9 0001 5D72             		jmp	DisplaySprite
00025670                            ; ===========================================================================
00025670                            
00025670                            Obj76_Delete:
00025670 4EF9 0001 5D26             		jmp	DeleteObject
00025676                            
00025676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00025676                            
00025676                            
00025676                            Obj76_Break:				; XREF: Obj76_Action
00025676 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0002567A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0002567E 7801                       		moveq	#1,d4
00025680 7203                       		moveq	#3,d1
00025682 7438                       		moveq	#$38,d2
00025684 5428 0024                  		addq.b	#2,$24(a0)
00025688 117C 0008 0023             		move.b	#8,width_pixels(a0)
0002568E 117C 0008 0016             		move.b	#8,$16(a0)
00025694 43D0                       		lea	(a0),a1
00025696 6000                       		bra.s	Obj76_MakeFrag
00025698                            ; ===========================================================================
00025698                            
00025698                            Obj76_LoopFrag:
00025698 4EB9 0001 6892             		jsr	SingleObjLoad2
0002569E 6600                       		bne.s	loc_197D4
000256A0                            
000256A0                            Obj76_MakeFrag:
000256A0 45D0                       		lea	(a0),a2
000256A2 47D1                       		lea	(a1),a3
000256A4 7603                       		moveq	#3,d3
000256A6                            
000256A6                            loc_197AA:
000256A6 26DA                       		move.l	(a2)+,(a3)+
000256A8 26DA                       		move.l	(a2)+,(a3)+
000256AA 26DA                       		move.l	(a2)+,(a3)+
000256AC 26DA                       		move.l	(a2)+,(a3)+
000256AE 51CB FFF6                  		dbf	d3,loc_197AA
000256B2                            
000256B2 335C 0010                  		move.w	(a4)+,$10(a1)
000256B6 335C 0012                  		move.w	(a4)+,$12(a1)
000256BA 361D                       		move.w	(a5)+,d3
000256BC D769 0008                  		add.w	d3,8(a1)
000256C0 361D                       		move.w	(a5)+,d3
000256C2 D769 000C                  		add.w	d3,$C(a1)
000256C6 1344 001A                  		move.b	d4,$1A(a1)
000256CA 5244                       		addq.w	#1,d4
000256CC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
000256D0                            
000256D0                            loc_197D4:
000256D0 303C 00D6                  		move.w	#$D6,d0
000256D4 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
000256DA                            ; End of function Obj76_Break
000256DA                            
000256DA                            ; ===========================================================================
000256DA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
000256DE 0180 FE00                  		dc.w $180, $FE00
000256E2 FF00 FF00                  		dc.w $FF00, $FF00
000256E6 0100 FF00                  		dc.w $100, $FF00
000256EA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
000256EE 0010 0000                  		dc.w $10, 0
000256F2 0000 0010                  		dc.w 0,	$10
000256F6 0010 0010                  		dc.w $10, $10
000256FA                            ; ---------------------------------------------------------------------------
000256FA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
000256FA                            ; ---------------------------------------------------------------------------
000256FA                            Map_obj76:
000256FA                            	include "_maps\obj76.asm"
000256FA                            ; ---------------------------------------------------------------------------
000256FA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
000256FA                            ; ---------------------------------------------------------------------------
000256FA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
000256FE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00025702 0000                       		dc.w byte_19826-Map_obj76
00025704 02                         byte_19808:	dc.b 2
00025705 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0002570A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0002570F 00                         		dc.b 0
00025710 01                         byte_19814:	dc.b 1
00025711 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00025716 01                         byte_1981A:	dc.b 1
00025717 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0002571C 01                         byte_19820:	dc.b 1
0002571D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00025722 01                         byte_19826:	dc.b 1
00025723 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00025728                            		even
00025728                            		even
00025728                            
00025728                            ; ===========================================================================
00025728                            
00025728                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00025728 4EF9 0001 5D26             		jmp	DeleteObject
0002572E                            ; ===========================================================================
0002572E                            ; ---------------------------------------------------------------------------
0002572E                            ; Object 82 - Eggman (SBZ2)
0002572E                            ; ---------------------------------------------------------------------------
0002572E                            
0002572E                            Obj82:					; XREF: Obj_Index
0002572E 7000                       		moveq	#0,d0
00025730 1028 0024                  		move.b	$24(a0),d0
00025734 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00025738 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0002573C                            ; ===========================================================================
0002573C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0002573E 0000                       		dc.w Obj82_Eggman-Obj82_Index
00025740 0000                       		dc.w Obj82_Switch-Obj82_Index
00025742                            
00025742 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00025745 0400 03                    		dc.b 4,	0, 3
00025748                            ; ===========================================================================
00025748                            
00025748                            Obj82_Main:				; XREF: Obj82_Index
00025748 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0002574C 317C 2160 0008             		move.w	#$2160,8(a0)
00025752 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00025758 117C 000F 0020             		move.b	#$F,$20(a0)
0002575E 117C 0010 0021             		move.b	#$10,$21(a0)
00025764 08A8 0000 0022             		bclr	#0,$22(a0)
0002576A 4228 0025                  		clr.b	$25(a0)
0002576E 115A 0024                  		move.b	(a2)+,$24(a0)
00025772 115A 001C                  		move.b	(a2)+,$1C(a0)
00025776 115A 0018                  		move.b	(a2)+,priority(a0)
0002577A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00025782 317C 0400 0002             		move.w	#$400,2(a0)
00025788 117C 0004 0001             		move.b	#4,1(a0)
0002578E 08E8 0007 0001             		bset	#7,1(a0)
00025794 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0002579A 4EB9 0001 6892             		jsr	SingleObjLoad2
000257A0 6600                       		bne.s	Obj82_Eggman
000257A2 2348 0034                  		move.l	a0,$34(a1)
000257A6 12BC 0082                  		move.b	#$82,(a1)	; load switch object
000257AA 337C 2130 0008             		move.w	#$2130,8(a1)
000257B0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
000257B6 4228 0025                  		clr.b	$25(a0)
000257BA 135A 0024                  		move.b	(a2)+,$24(a1)
000257BE 135A 001C                  		move.b	(a2)+,$1C(a1)
000257C2 135A 0018                  		move.b	(a2)+,priority(a1)
000257C6 237C 0001 4068 0004        		move.l	#Map_obj32,4(a1)
000257CE 337C 04A4 0002             		move.w	#$4A4,2(a1)
000257D4 137C 0004 0001             		move.b	#4,1(a1)
000257DA 08E9 0007 0001             		bset	#7,1(a1)
000257E0 137C 0010 0023             		move.b	#$10,width_pixels(a1)
000257E6 137C 0000 001A             		move.b	#0,$1A(a1)
000257EC                            
000257EC                            Obj82_Eggman:				; XREF: Obj82_Index
000257EC 7000                       		moveq	#0,d0
000257EE 1028 0025                  		move.b	$25(a0),d0
000257F2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
000257F6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
000257FA 43FA 0000                  		lea	Ani_obj82(pc),a1
000257FE 4EB9 0001 2754             		jsr	AnimateSprite
00025804 4EF9 0001 5D72             		jmp	DisplaySprite
0002580A                            ; ===========================================================================
0002580A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0002580C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0002580E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00025810 0000                       		dc.w loc_19934-Obj82_EggIndex
00025812                            ; ===========================================================================
00025812                            
00025812                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00025812 3028 0008                  		move.w	8(a0),d0
00025816 9078 D008                  		sub.w	($FFFFD008).w,d0
0002581A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0002581E 6400                       		bcc.s	loc_19934	; if not, branch
00025820 5428 0025                  		addq.b	#2,$25(a0)
00025824 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0002582A 117C 0001 001C             		move.b	#1,$1C(a0)
00025830                            
00025830                            loc_19934:				; XREF: Obj82_EggIndex
00025830 4EF9 0001 5D0C             		jmp	SpeedToPos
00025836                            ; ===========================================================================
00025836                            
00025836                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00025836 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0002583A 6600                       		bne.s	loc_19954	; if time remains, branch
0002583C 5428 0025                  		addq.b	#2,$25(a0)
00025840 117C 0002 001C             		move.b	#2,$1C(a0)
00025846 5868 000C                  		addq.w	#4,$C(a0)
0002584A 317C 000F 003C             		move.w	#15,$3C(a0)
00025850                            
00025850                            loc_19954:
00025850 60DE                       		bra.s	loc_19934
00025852                            ; ===========================================================================
00025852                            
00025852                            Obj82_Leap:				; XREF: Obj82_EggIndex
00025852 5368 003C                  		subq.w	#1,$3C(a0)
00025856 6E00                       		bgt.s	loc_199D0
00025858 6600                       		bne.s	loc_1996A
0002585A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00025860 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00025866                            
00025866                            loc_1996A:
00025866 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0002586C 6E00                       		bgt.s	loc_19976
0002586E 4268 0010                  		clr.w	$10(a0)
00025872                            
00025872                            loc_19976:
00025872 0668 0024 0012             		addi.w	#$24,$12(a0)
00025878 4A68 0012                  		tst.w	$12(a0)
0002587C 6B00                       		bmi.s	Obj82_FindBlocks
0002587E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00025884 6500                       		bcs.s	Obj82_FindBlocks
00025886 317C 5357 0028             		move.w	#$5357,$28(a0)
0002588C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00025892 6500                       		bcs.s	Obj82_FindBlocks
00025894 317C 059B 000C             		move.w	#$59B,$C(a0)
0002589A 4268 0012                  		clr.w	$12(a0)
0002589E                            
0002589E                            Obj82_FindBlocks:
0002589E 3028 0010                  		move.w	$10(a0),d0
000258A2 8068 0012                  		or.w	$12(a0),d0
000258A6 6600                       		bne.s	loc_199D0
000258A8 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
000258AC 703E                       		moveq	#$3E,d0
000258AE 7240                       		moveq	#$40,d1
000258B0                            
000258B0                            Obj82_FindLoop:	
000258B0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
000258B2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
000258B6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
000258BA                            
000258BA 6600                       		bne.s	loc_199D0
000258BC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
000258C2 5428 0025                  		addq.b	#2,$25(a0)
000258C6 117C 0001 001C             		move.b	#1,$1C(a0)
000258CC                            
000258CC                            loc_199D0:
000258CC 6000 FF62                  		bra.w	loc_19934
000258D0                            ; ===========================================================================
000258D0                            
000258D0                            Obj82_Switch:				; XREF: Obj82_Index
000258D0 7000                       		moveq	#0,d0
000258D2 1028 0025                  		move.b	$25(a0),d0
000258D6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
000258DA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
000258DE                            ; ===========================================================================
000258DE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
000258E0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
000258E2                            ; ===========================================================================
000258E2                            
000258E2                            loc_199E6:				; XREF: Obj82_SwIndex
000258E2 2268 0034                  		movea.l	$34(a0),a1
000258E6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
000258EC 6600                       		bne.s	Obj82_SwDisplay
000258EE 117C 0001 001A             		move.b	#1,$1A(a0)
000258F4 5428 0025                  		addq.b	#2,$25(a0)
000258F8                            
000258F8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
000258F8 4EF9 0001 5D72             		jmp	DisplaySprite
000258FE                            ; ===========================================================================
000258FE                            Ani_obj82:
000258FE                            	include "_anim\obj82.asm"
000258FE                            ; ---------------------------------------------------------------------------
000258FE                            ; Animation script - Eggman (SBZ2)
000258FE                            ; ---------------------------------------------------------------------------
000258FE 0000                       		dc.w byte_19A10-Ani_obj82
00025900 0000                       		dc.w byte_19A14-Ani_obj82
00025902 0000                       		dc.w byte_19A18-Ani_obj82
00025904 0000                       		dc.w byte_19A20-Ani_obj82
00025906 0000                       		dc.w byte_19A24-Ani_obj82
00025908 0000                       		dc.w byte_19A2A-Ani_obj82
0002590A 0000                       		dc.w byte_19A30-Ani_obj82
0002590C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00025910 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00025914 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0002591C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00025920 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00025926 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0002592C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00025930                            		even
00025930                            		even
00025930                            
00025930                            ; ---------------------------------------------------------------------------
00025930                            ; Sprite mappings - Eggman (SBZ2)
00025930                            ; ---------------------------------------------------------------------------
00025930                            Map_obj82:
00025930                            	include "_maps\obj82.asm"
00025930                            ; ---------------------------------------------------------------------------
00025930                            ; Sprite mappings - Eggman (SBZ2)
00025930                            ; ---------------------------------------------------------------------------
00025930 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00025934 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00025938 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0002593C 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00025940 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00025944 0000                       		dc.w byte_19B4F-Map_obj82
00025946 03                         byte_19A4A:	dc.b 3
00025947 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0002594C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025951 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025956 04                         byte_19A5A:	dc.b 4
00025957 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0002595C E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025961 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025966 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0002596B 00                         		dc.b 0
0002596C 04                         byte_19A70:	dc.b 4
0002596D E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00025972 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00025977 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0002597C FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00025981 00                         		dc.b 0
00025982 04                         byte_19A86:	dc.b 4
00025983 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00025988 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0002598D 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00025992 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00025997 00                         		dc.b 0
00025998 04                         byte_19A9C:	dc.b 4
00025999 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0002599E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000259A3 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
000259A8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000259AD 00                         		dc.b 0
000259AE 04                         byte_19AB2:	dc.b 4
000259AF E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000259B4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000259B9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000259BE 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000259C3 00                         		dc.b 0
000259C4 07                         byte_19AC8:	dc.b 7
000259C5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000259CA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000259CF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000259D4 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000259D9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000259DE F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
000259E3 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
000259E8 05                         byte_19AEC:	dc.b 5
000259E9 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000259EE F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000259F3 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000259F8 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000259FD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025A02 06                         byte_19B06:	dc.b 6
00025A03 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00025A08 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00025A0D 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00025A12 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00025A17 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00025A1C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00025A21 00                         		dc.b 0
00025A22 08                         byte_19B26:	dc.b 8
00025A23 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00025A28 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00025A2D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025A32 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025A37 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00025A3C F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00025A41 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00025A46 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00025A4B 03                         byte_19B4F:	dc.b 3
00025A4C EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00025A51 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00025A56 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00025A5C 00                         		even
00025A5C 00                         		even
00025A5C                            
00025A5C                            ; ===========================================================================
00025A5C                            ; ---------------------------------------------------------------------------
00025A5C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00025A5C                            ; ---------------------------------------------------------------------------
00025A5C                            
00025A5C                            Obj83:					; XREF: Obj_Index
00025A5C 7000                       		moveq	#0,d0
00025A5E 1028 0024                  		move.b	$24(a0),d0
00025A62 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00025A66 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00025A6A                            ; ===========================================================================
00025A6A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00025A6C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00025A6E 0000                       		dc.w loc_19C36-Obj83_Index
00025A70 0000                       		dc.w loc_19C62-Obj83_Index
00025A72 0000                       		dc.w loc_19C72-Obj83_Index
00025A74 0000                       		dc.w loc_19C80-Obj83_Index
00025A76                            ; ===========================================================================
00025A76                            
00025A76                            Obj83_Main:				; XREF: Obj83_Index
00025A76 317C 2080 0008             		move.w	#$2080,8(a0)
00025A7C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00025A82 117C 0080 0023             		move.b	#$80,width_pixels(a0)
00025A88 117C 0010 0016             		move.b	#$10,$16(a0)
00025A8E 117C 0004 0001             		move.b	#4,1(a0)
00025A94 08E8 0007 0001             		bset	#7,1(a0)
00025A9A 7800                       		moveq	#0,d4
00025A9C 3A3C 2010                  		move.w	#$2010,d5
00025AA0 7C07                       		moveq	#7,d6
00025AA2 45E8 0030                  		lea	$30(a0),a2
00025AA6                            
00025AA6                            Obj83_MakeBlock:
00025AA6 4EB9 0001 687C             		jsr	SingleObjLoad
00025AAC 6600                       		bne.s	Obj83_ExitMake
00025AAE 34C9                       		move.w	a1,(a2)+
00025AB0 12BC 0083                  		move.b	#$83,(a1)	; load block object
00025AB4 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00025ABC 337C 4518 0002             		move.w	#$4518,2(a1)
00025AC2 137C 0004 0001             		move.b	#4,1(a1)
00025AC8 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00025ACE 137C 0010 0016             		move.b	#$10,$16(a1)
00025AD4 337C 0180 0018             		move.w	#$180,priority(a1)
00025ADA 3345 0008                  		move.w	d5,8(a1)	; set X	position
00025ADE 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00025AE4 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00025AE8 137C 0008 0024             		move.b	#8,$24(a1)
00025AEE 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00025AF2                            
00025AF2                            Obj83_ExitMake:
00025AF2 5428 0024                  		addq.b	#2,$24(a0)
00025AF6 4E75                       		rts	
00025AF8                            ; ===========================================================================
00025AF8                            
00025AF8                            Obj83_ChkBreak:				; XREF: Obj83_Index
00025AF8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00025AFE 6600                       		bne.s	Obj83_Solid	; if not, branch
00025B00 4228 001A                  		clr.b	$1A(a0)
00025B04 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00025B08                            
00025B08                            Obj83_Solid:
00025B08 7000                       		moveq	#0,d0
00025B0A 1028 001A                  		move.b	$1A(a0),d0
00025B0E 4400                       		neg.b	d0
00025B10 4880                       		ext.w	d0
00025B12 5040                       		addq.w	#8,d0
00025B14 E940                       		asl.w	#4,d0
00025B16 383C 2100                  		move.w	#$2100,d4
00025B1A 9840                       		sub.w	d0,d4
00025B1C 1140 0023                  		move.b	d0,width_pixels(a0)
00025B20 3144 0008                  		move.w	d4,8(a0)
00025B24 720B                       		moveq	#$B,d1
00025B26 D240                       		add.w	d0,d1
00025B28 7410                       		moveq	#$10,d2
00025B2A 7611                       		moveq	#$11,d3
00025B2C 4EF9 0001 958A             		jmp	SolidObject
00025B32                            ; ===========================================================================
00025B32                            
00025B32                            loc_19C36:				; XREF: Obj83_Index
00025B32 0428 000E 001E             		subi.b	#$E,$1E(a0)
00025B38 6400                       		bcc.s	Obj83_Solid2
00025B3A 70FF                       		moveq	#-1,d0
00025B3C 1028 001A                  		move.b	$1A(a0),d0
00025B40 4880                       		ext.w	d0
00025B42 D040                       		add.w	d0,d0
00025B44 3030 0030                  		move.w	$30(a0,d0.w),d0
00025B48 2240                       		movea.l	d0,a1
00025B4A 337C 474F 0028             		move.w	#$474F,$28(a1)
00025B50 5228 001A                  		addq.b	#1,$1A(a0)
00025B54 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00025B5A 6700                       		beq.s	loc_19C62
00025B5C                            
00025B5C                            Obj83_Solid2:
00025B5C 60AA                       		bra.s	Obj83_Solid
00025B5E                            ; ===========================================================================
00025B5E                            
00025B5E                            loc_19C62:				; XREF: Obj83_Index
00025B5E 08A8 0003 0022             		bclr	#3,$22(a0)
00025B64 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00025B6A 6000 FBBC                  		bra.w	loc_1982C
00025B6E                            ; ===========================================================================
00025B6E                            
00025B6E                            loc_19C72:				; XREF: Obj83_Index
00025B6E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00025B74 6700                       		beq.s	Obj83_Break	; if yes, branch
00025B76 4EF9 0001 5D72             		jmp	DisplaySprite
00025B7C                            ; ===========================================================================
00025B7C                            
00025B7C                            loc_19C80:				; XREF: Obj83_Index
00025B7C 4A28 0001                  		tst.b	1(a0)
00025B80 6A00 FBA6                  		bpl.w	loc_1982C
00025B84 4EB9 0001 5CEC             		jsr	ObjectFall
00025B8A 4EF9 0001 5D72             		jmp	DisplaySprite
00025B90                            ; ===========================================================================
00025B90                            
00025B90                            Obj83_Break:				; XREF: loc_19C72
00025B90 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00025B94 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00025B98 7801                       		moveq	#1,d4
00025B9A 7203                       		moveq	#3,d1
00025B9C 7438                       		moveq	#$38,d2
00025B9E 5428 0024                  		addq.b	#2,$24(a0)
00025BA2 117C 0008 0023             		move.b	#8,width_pixels(a0)
00025BA8 117C 0008 0016             		move.b	#8,$16(a0)
00025BAE 43D0                       		lea	(a0),a1
00025BB0 6000                       		bra.s	Obj83_MakeFrag
00025BB2                            ; ===========================================================================
00025BB2                            
00025BB2                            Obj83_LoopFrag:
00025BB2 4EB9 0001 6892             		jsr	SingleObjLoad2
00025BB8 6600                       		bne.s	Obj83_BreakSnd
00025BBA                            
00025BBA                            Obj83_MakeFrag:				; XREF: Obj83_Break
00025BBA 45D0                       		lea	(a0),a2
00025BBC 47D1                       		lea	(a1),a3
00025BBE 7603                       		moveq	#3,d3
00025BC0                            
00025BC0                            loc_19CC4:
00025BC0 26DA                       		move.l	(a2)+,(a3)+
00025BC2 26DA                       		move.l	(a2)+,(a3)+
00025BC4 26DA                       		move.l	(a2)+,(a3)+
00025BC6 26DA                       		move.l	(a2)+,(a3)+
00025BC8 51CB FFF6                  		dbf	d3,loc_19CC4
00025BCC                            
00025BCC 335C 0012                  		move.w	(a4)+,$12(a1)
00025BD0 361D                       		move.w	(a5)+,d3
00025BD2 D769 0008                  		add.w	d3,8(a1)
00025BD6 361D                       		move.w	(a5)+,d3
00025BD8 D769 000C                  		add.w	d3,$C(a1)
00025BDC 1344 001A                  		move.b	d4,$1A(a1)
00025BE0 5244                       		addq.w	#1,d4
00025BE2 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00025BE6                            
00025BE6                            Obj83_BreakSnd:
00025BE6 303C 00D6                  		move.w	#$D6,d0
00025BEA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play smashing sound
00025BF0 4EF9 0001 5D72             		jmp	DisplaySprite
00025BF6                            ; ===========================================================================
00025BF6 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00025BFA 0120 00C0                  		dc.w $120, $C0
00025BFE FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00025C02 0010 0000                  		dc.w $10, 0
00025C06 0000 0010                  		dc.w 0,	$10
00025C0A 0010 0010                  		dc.w $10, $10
00025C0E                            ; ---------------------------------------------------------------------------
00025C0E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00025C0E                            ; ---------------------------------------------------------------------------
00025C0E                            Map_obj83:
00025C0E                            	include "_maps\obj83.asm"
00025C0E                            ; ---------------------------------------------------------------------------
00025C0E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00025C0E                            ; ---------------------------------------------------------------------------
00025C0E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00025C12 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00025C16 0000                       		dc.w byte_19D46-Map_obj83
00025C18 01                         byte_19D1C:	dc.b 1
00025C19 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00025C1E 02                         byte_19D22:	dc.b 2
00025C1F F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00025C24 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00025C29 00                         		dc.b 0
00025C2A 02                         byte_19D2E:	dc.b 2
00025C2B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00025C30 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00025C35 00                         		dc.b 0
00025C36 02                         byte_19D3A:	dc.b 2
00025C37 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00025C3C F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00025C41 00                         		dc.b 0
00025C42 02                         byte_19D46:	dc.b 2
00025C43 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00025C48 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00025C4E 00                         		even
00025C4E 00                         		even
00025C4E                            
00025C4E                            ; ===========================================================================
00025C4E                            ; ---------------------------------------------------------------------------
00025C4E                            ; Object 85 - Eggman (FZ)
00025C4E                            ; ---------------------------------------------------------------------------
00025C4E                            
00025C4E                            Obj85_Delete:
00025C4E 4EF9 0001 5D26             		jmp	DeleteObject
00025C54                            ; ===========================================================================
00025C54                            
00025C54                            Obj85:					; XREF: Obj_Index
00025C54 7000                       		moveq	#0,d0
00025C56 1028 0024                  		move.b	$24(a0),d0
00025C5A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00025C5E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00025C62                            ; ===========================================================================
00025C62 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00025C64 0000                       		dc.w Obj85_Eggman-Obj85_Index
00025C66 0000                       		dc.w loc_1A38E-Obj85_Index
00025C68 0000                       		dc.w loc_1A346-Obj85_Index
00025C6A 0000                       		dc.w loc_1A2C6-Obj85_Index
00025C6C 0000                       		dc.w loc_1A3AC-Obj85_Index
00025C6E 0000                       		dc.w loc_1A264-Obj85_Index
00025C70                            
00025C70 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00025C76 0002 5930                  		dc.l Map_obj82		; mappings pointer
00025C7A 25B0 0590 0300             		dc.w $25B0, $590, $300
00025C80 0000 0000                  		dc.l Map_obj84
00025C84 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00025C8A 0000 0000                  		dc.l Map_FZBoss
00025C8E 26E0 0596 0470             		dc.w $26E0, $596, $470
00025C94 0002 5930                  		dc.l Map_obj82
00025C98 26E0 0596 0400             		dc.w $26E0, $596, $400
00025C9E 0002 3C04                  		dc.l Map_Eggman
00025CA2 26E0 0596 0400             		dc.w $26E0, $596, $400
00025CA8 0002 3C04                  		dc.l Map_Eggman
00025CAC                            
00025CAC 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00025CB1 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00025CB6 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00025CBB 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00025CC0 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00025CC5 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00025CCA                            ; ===========================================================================
00025CCA                            
00025CCA                            Obj85_Main:				; XREF: Obj85_Index
00025CCA 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00025CCE 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00025CD2 2248                       		movea.l	a0,a1
00025CD4 7205                       		moveq	#5,d1
00025CD6 6000                       		bra.s	Obj85_LoadBoss
00025CD8                            ; ===========================================================================
00025CD8                            
00025CD8                            Obj85_Loop:
00025CD8 4EB9 0001 6892             		jsr	SingleObjLoad2
00025CDE 6600                       		bne.s	loc_19E20
00025CE0                            
00025CE0                            Obj85_LoadBoss:				; XREF: Obj85_Main
00025CE0 12BC 0085                  		move.b	#$85,(a1)
00025CE4 335A 0008                  		move.w	(a2)+,8(a1)
00025CE8 335A 000C                  		move.w	(a2)+,$C(a1)
00025CEC 335A 0002                  		move.w	(a2)+,2(a1)
00025CF0 235A 0004                  		move.l	(a2)+,4(a1)
00025CF4 135B 0024                  		move.b	(a3)+,$24(a1)
00025CF8 135B 001C                  		move.b	(a3)+,$1C(a1)
00025CFC 135B 0018                  		move.b	(a3)+,priority(a1)
00025D00 3029 0018                          move.w  priority(a1),d0
00025D04 E248                               lsr.w   #1,d0
00025D06 0240 0380                          andi.w  #$380,d0
00025D0A 3340 0018                          move.w  d0,priority(a1)
00025D0E 135B 0017                  		move.b	(a3)+,$17(a1)
00025D12 135B 0016                  		move.b	(a3)+,$16(a1)
00025D16 137C 0004 0001             		move.b	#4,1(a1)
00025D1C 08E8 0007 0001             		bset	#7,1(a0)
00025D22 2348 0034                  		move.l	a0,$34(a1)
00025D26 51C9 FFB0                  		dbf	d1,Obj85_Loop
00025D2A                            
00025D2A                            loc_19E20:
00025D2A 45E8 0036                  		lea	$36(a0),a2
00025D2E 4EB9 0001 687C             		jsr	SingleObjLoad
00025D34 6600                       		bne.s	loc_19E5A
00025D36 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00025D3A 3489                       		move.w	a1,(a2)
00025D3C 2348 0034                  		move.l	a0,$34(a1)
00025D40 45E8 0038                  		lea	$38(a0),a2
00025D44 7400                       		moveq	#0,d2
00025D46 7203                       		moveq	#3,d1
00025D48                            
00025D48                            loc_19E3E:
00025D48 4EB9 0001 6892             		jsr	SingleObjLoad2
00025D4E 6600                       		bne.s	loc_19E5A
00025D50 34C9                       		move.w	a1,(a2)+
00025D52 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00025D56 2348 0034                  		move.l	a0,$34(a1)
00025D5A 1342 0028                  		move.b	d2,$28(a1)
00025D5E 5442                       		addq.w	#2,d2
00025D60 51C9 FFE6                  		dbf	d1,loc_19E3E
00025D64                            
00025D64                            loc_19E5A:
00025D64 317C 0000 0034             		move.w	#0,$34(a0)
00025D6A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00025D70 317C FFFF 0030             		move.w	#-1,$30(a0)
00025D76                            
00025D76                            Obj85_Eggman:				; XREF: Obj85_Index
00025D76 7000                       		moveq	#0,d0
00025D78 1028 0034                  		move.b	$34(a0),d0
00025D7C 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00025D80 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00025D84 4EF9 0001 5D72             		jmp	DisplaySprite
00025D8A                            ; ===========================================================================
00025D8A 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00025D8E 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00025D92 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00025D96 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00025D9A                            ; ===========================================================================
00025D9A                            
00025D9A                            loc_19E90:				; XREF: off_19E80
00025D9A 4AB8 F680                  		tst.l	($FFFFF680).w
00025D9E 6600                       		bne.s	loc_19EA2
00025DA0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00025DA6 6500                       		bcs.s	loc_19EA2
00025DA8 5428 0034                  		addq.b	#2,$34(a0)
00025DAC                            
00025DAC                            loc_19EA2:
00025DAC 52B8 F636                  		addq.l	#1,($FFFFF636).w
00025DB0 4E75                       		rts	
00025DB2                            ; ===========================================================================
00025DB2                            
00025DB2                            loc_19EA8:				; XREF: off_19E80
00025DB2 4A68 0030                  		tst.w	$30(a0)
00025DB6 6A00                       		bpl.s	loc_19F10
00025DB8 4268 0030                  		clr.w	$30(a0)
00025DBC 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00025DC2 0240 000C                  		andi.w	#$C,d0
00025DC6 3200                       		move.w	d0,d1
00025DC8 5441                       		addq.w	#2,d1
00025DCA 4A80                       		tst.l	d0
00025DCC 6A00                       		bpl.s	loc_19EC6
00025DCE C141                       		exg	d1,d0
00025DD0                            
00025DD0                            loc_19EC6:
00025DD0 43FA 0000                  		lea	word_19FD6(pc),a1
00025DD4 3031 0000                  		move.w	(a1,d0.w),d0
00025DD8 3231 1000                  		move.w	(a1,d1.w),d1
00025DDC 3140 0030                  		move.w	d0,$30(a0)
00025DE0 74FF                       		moveq	#-1,d2
00025DE2 3430 0038                  		move.w	$38(a0,d0.w),d2
00025DE6 2242                       		movea.l	d2,a1
00025DE8 137C 00FF 0029             		move.b	#-1,$29(a1)
00025DEE 337C FFFF 0030             		move.w	#-1,$30(a1)
00025DF4 3430 1038                  		move.w	$38(a0,d1.w),d2
00025DF8 2242                       		movea.l	d2,a1
00025DFA 137C 0001 0029             		move.b	#1,$29(a1)
00025E00 337C 0000 0030             		move.w	#0,$30(a1)
00025E06 317C 0001 0032             		move.w	#1,$32(a0)
00025E0C 4228 0035                  		clr.b	$35(a0)
00025E10 303C 00B7                  		move.w	#$B7,d0
00025E14 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rumbling sound
00025E1A                            
00025E1A                            loc_19F10:
00025E1A 4A68 0032                  		tst.w	$32(a0)
00025E1E 6B00 0000                  		bmi.w	loc_19FA6
00025E22 08A8 0000 0022             		bclr	#0,$22(a0)
00025E28 3038 D008                  		move.w	($FFFFD008).w,d0
00025E2C 9068 0008                  		sub.w	8(a0),d0
00025E30 6500                       		bcs.s	loc_19F2E
00025E32 08E8 0000 0022             		bset	#0,$22(a0)
00025E38                            
00025E38                            loc_19F2E:
00025E38 323C 002B                  		move.w	#$2B,d1
00025E3C 343C 0014                  		move.w	#$14,d2
00025E40 363C 0014                  		move.w	#$14,d3
00025E44 3828 0008                  		move.w	8(a0),d4
00025E48 4EB9 0001 958A             		jsr	SolidObject
00025E4E 4A44                       		tst.w	d4
00025E50 6E00                       		bgt.s	loc_19F50
00025E52                            
00025E52                            loc_19F48:
00025E52 4A28 0035                  		tst.b	$35(a0)
00025E56 6600                       		bne.s	loc_19F88
00025E58 6000                       		bra.s	loc_19F96
00025E5A                            ; ===========================================================================
00025E5A                            
00025E5A                            loc_19F50:
00025E5A 5E78 F636                  		addq.w	#7,($FFFFF636).w
00025E5E 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00025E64 66EC                       		bne.s	loc_19F48
00025E66 303C 0300                  		move.w	#$300,d0
00025E6A 0828 0000 0022             		btst	#0,$22(a0)
00025E70 6600                       		bne.s	loc_19F6A
00025E72 4440                       		neg.w	d0
00025E74                            
00025E74                            loc_19F6A:
00025E74 31C0 D010                  		move.w	d0,($FFFFD010).w
00025E78 4A28 0035                  		tst.b	$35(a0)
00025E7C 6600                       		bne.s	loc_19F88
00025E7E 5328 0021                  		subq.b	#1,$21(a0)
00025E82 117C 0064 0035             		move.b	#$64,$35(a0)
00025E88 303C 00AC                  		move.w	#$AC,d0
00025E8C 4EB9 0000 325C             		jsr	(PlaySound_Special).l
00025E92                            
00025E92                            loc_19F88:
00025E92 5328 0035                  		subq.b	#1,$35(a0)
00025E96 6700                       		beq.s	loc_19F96
00025E98 117C 0003 001C             		move.b	#3,$1C(a0)
00025E9E 6000                       		bra.s	loc_19F9C
00025EA0                            ; ===========================================================================
00025EA0                            
00025EA0                            loc_19F96:
00025EA0 117C 0001 001C             		move.b	#1,$1C(a0)
00025EA6                            
00025EA6                            loc_19F9C:
00025EA6 43FA FA56                  		lea	Ani_obj82(pc),a1
00025EAA 4EF9 0001 2754             		jmp	AnimateSprite
00025EB0                            ; ===========================================================================
00025EB0                            
00025EB0                            loc_19FA6:
00025EB0 4A28 0021                  		tst.b	$21(a0)
00025EB4 6700                       		beq.s	loc_19FBC
00025EB6 5428 0034                  		addq.b	#2,$34(a0)
00025EBA 317C FFFF 0030             		move.w	#-1,$30(a0)
00025EC0 4268 0032                  		clr.w	$32(a0)
00025EC4 4E75                       		rts	
00025EC6                            ; ===========================================================================
00025EC6                            
00025EC6                            loc_19FBC:
00025EC6 117C 0006 0034             		move.b	#6,$34(a0)
00025ECC 317C 25C0 0008             		move.w	#$25C0,8(a0)
00025ED2 317C 053C 000C             		move.w	#$53C,$C(a0)
00025ED8 117C 0014 0016             		move.b	#$14,$16(a0)
00025EDE 4E75                       		rts	
00025EE0                            ; ===========================================================================
00025EE0 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
00025EF0                            ; ===========================================================================
00025EF0                            
00025EF0                            loc_19FE6:				; XREF: off_19E80
00025EF0 70FF                       		moveq	#-1,d0
00025EF2 3028 0036                  		move.w	$36(a0),d0
00025EF6 2240                       		movea.l	d0,a1
00025EF8 4A68 0030                  		tst.w	$30(a0)
00025EFC 6A00                       		bpl.s	loc_1A000
00025EFE 4268 0030                  		clr.w	$30(a0)
00025F02 137C 00FF 0029             		move.b	#-1,$29(a1)
00025F08 6100                       		bsr.s	loc_1A020
00025F0A                            
00025F0A                            loc_1A000:
00025F0A 700F                       		moveq	#$F,d0
00025F0C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00025F10 6600                       		bne.s	loc_1A00A
00025F12 6100                       		bsr.s	loc_1A020
00025F14                            
00025F14                            loc_1A00A:
00025F14 4A68 0032                  		tst.w	$32(a0)
00025F18 6700                       		beq.s	locret_1A01E
00025F1A 5528 0034                  		subq.b	#2,$34(a0)
00025F1E 317C FFFF 0030             		move.w	#-1,$30(a0)
00025F24 4268 0032                  		clr.w	$32(a0)
00025F28                            
00025F28                            locret_1A01E:
00025F28 4E75                       		rts	
00025F2A                            ; ===========================================================================
00025F2A                            
00025F2A                            loc_1A020:
00025F2A 303C 00B1                  		move.w	#$B1,d0
00025F2E 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play electricity sound
00025F34                            ; ===========================================================================
00025F34                            
00025F34                            loc_1A02A:				; XREF: off_19E80
00025F34 117C 0030 0017             		move.b	#$30,$17(a0)
00025F3A 08E8 0000 0022             		bset	#0,$22(a0)
00025F40 4EB9 0001 5D0C             		jsr	SpeedToPos
00025F46 117C 0006 001A             		move.b	#6,$1A(a0)
00025F4C 0668 0010 0012             		addi.w	#$10,$12(a0)
00025F52 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
00025F58 6500                       		bcs.s	loc_1A070
00025F5A 317C 059C 000C             		move.w	#$59C,$C(a0)
00025F60 5428 0034                  		addq.b	#2,$34(a0)
00025F64 117C 0020 0017             		move.b	#$20,$17(a0)
00025F6A 317C 0100 0010             		move.w	#$100,$10(a0)
00025F70 317C FF00 0012             		move.w	#-$100,$12(a0)
00025F76 5438 F742                  		addq.b	#2,($FFFFF742).w
00025F7A                            
00025F7A                            loc_1A070:
00025F7A 6000 0000                  		bra.w	loc_1A166
00025F7E                            ; ===========================================================================
00025F7E                            
00025F7E                            loc_1A074:				; XREF: off_19E80
00025F7E 08E8 0000 0022             		bset	#0,$22(a0)
00025F84 117C 0004 001C             		move.b	#4,$1C(a0)
00025F8A 4EB9 0001 5D0C             		jsr	SpeedToPos
00025F90 0668 0010 0012             		addi.w	#$10,$12(a0)
00025F96 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00025F9C 6500                       		bcs.s	loc_1A09A
00025F9E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00025FA4                            
00025FA4                            loc_1A09A:
00025FA4 317C 0400 0010             		move.w	#$400,$10(a0)
00025FAA 3028 0008                  		move.w	8(a0),d0
00025FAE 9078 D008                  		sub.w	($FFFFD008).w,d0
00025FB2 6A00                       		bpl.s	loc_1A0B4
00025FB4 317C 0500 0010             		move.w	#$500,$10(a0)
00025FBA 6000 0000                  		bra.w	loc_1A0F2
00025FBE                            ; ===========================================================================
00025FBE                            
00025FBE                            loc_1A0B4:
00025FBE 0440 0070                  		subi.w	#$70,d0
00025FC2 6500                       		bcs.s	loc_1A0F2
00025FC4 0468 0100 0010             		subi.w	#$100,$10(a0)
00025FCA 5140                       		subq.w	#8,d0
00025FCC 6500                       		bcs.s	loc_1A0F2
00025FCE 0468 0100 0010             		subi.w	#$100,$10(a0)
00025FD4 5140                       		subq.w	#8,d0
00025FD6 6500                       		bcs.s	loc_1A0F2
00025FD8 0468 0080 0010             		subi.w	#$80,$10(a0)
00025FDE 5140                       		subq.w	#8,d0
00025FE0 6500                       		bcs.s	loc_1A0F2
00025FE2 0468 0080 0010             		subi.w	#$80,$10(a0)
00025FE8 5140                       		subq.w	#8,d0
00025FEA 6500                       		bcs.s	loc_1A0F2
00025FEC 0468 0080 0010             		subi.w	#$80,$10(a0)
00025FF2 0440 0038                  		subi.w	#$38,d0
00025FF6 6500                       		bcs.s	loc_1A0F2
00025FF8 4268 0010                  		clr.w	$10(a0)
00025FFC                            
00025FFC                            loc_1A0F2:
00025FFC 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
00026002 6500                       		bcs.s	loc_1A110
00026004 317C 26A0 0008             		move.w	#$26A0,8(a0)
0002600A 317C 0240 0010             		move.w	#$240,$10(a0)
00026010 317C FB40 0012             		move.w	#-$4C0,$12(a0)
00026016 5428 0034                  		addq.b	#2,$34(a0)
0002601A                            
0002601A                            loc_1A110:
0002601A 6000                       		bra.s	loc_1A15C
0002601C                            ; ===========================================================================
0002601C                            
0002601C                            loc_1A112:				; XREF: off_19E80
0002601C 4EB9 0001 5D0C             		jsr	SpeedToPos
00026022 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
00026028 6500                       		bcs.s	loc_1A124
0002602A 4268 0010                  		clr.w	$10(a0)
0002602E                            
0002602E                            loc_1A124:
0002602E 0668 0034 0012             		addi.w	#$34,$12(a0)
00026034 4A68 0012                  		tst.w	$12(a0)
00026038 6B00                       		bmi.s	loc_1A142
0002603A 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
00026040 6500                       		bcs.s	loc_1A142
00026042 317C 0592 000C             		move.w	#$592,$C(a0)
00026048 4268 0012                  		clr.w	$12(a0)
0002604C                            
0002604C                            loc_1A142:
0002604C 3028 0010                  		move.w	$10(a0),d0
00026050 8068 0012                  		or.w	$12(a0),d0
00026054 6600                       		bne.s	loc_1A15C
00026056 5428 0034                  		addq.b	#2,$34(a0)
0002605A 317C FE80 0012             		move.w	#-$180,$12(a0)
00026060 117C 0001 0021             		move.b	#1,$21(a0)
00026066                            
00026066                            loc_1A15C:
00026066 43FA F896                  		lea	Ani_obj82(pc),a1
0002606A 4EB9 0001 2754             		jsr	AnimateSprite
00026070                            
00026070                            loc_1A166:
00026070 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
00026076 6C00                       		bge.s	loc_1A172
00026078 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0002607C                            
0002607C                            loc_1A172:
0002607C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
00026082 6C00                       		bge.s	locret_1A190
00026084 323C 001B                  		move.w	#$1B,d1
00026088 343C 0070                  		move.w	#$70,d2
0002608C 363C 0071                  		move.w	#$71,d3
00026090 3828 0008                  		move.w	8(a0),d4
00026094 4EF9 0001 958A             		jmp	SolidObject
0002609A                            ; ===========================================================================
0002609A                            
0002609A                            locret_1A190:
0002609A 4E75                       		rts	
0002609C                            ; ===========================================================================
0002609C                            
0002609C                            loc_1A192:				; XREF: off_19E80
0002609C 217C 0002 3C04 0004        		move.l	#Map_Eggman,4(a0)
000260A4 317C 0400 0002             		move.w	#$400,2(a0)
000260AA 117C 0000 001C             		move.b	#0,$1C(a0)
000260B0 08E8 0000 0022             		bset	#0,$22(a0)
000260B6 4EB9 0001 5D0C             		jsr	SpeedToPos
000260BC 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
000260C2 6400                       		bcc.s	loc_1A1D0
000260C4 317C 0180 0010             		move.w	#$180,$10(a0)
000260CA 317C FFE8 0012             		move.w	#-$18,$12(a0)
000260D0 117C 000F 0020             		move.b	#$F,$20(a0)
000260D6 5428 0034                  		addq.b	#2,$34(a0)
000260DA                            
000260DA                            loc_1A1D0:
000260DA 6000 FF8A                  		bra.w	loc_1A15C
000260DE                            ; ===========================================================================
000260DE                            
000260DE                            loc_1A1D4:				; XREF: off_19E80
000260DE 08E8 0000 0022             		bset	#0,$22(a0)
000260E4 4EB9 0001 5D0C             		jsr	SpeedToPos
000260EA 4A68 0030                  		tst.w	$30(a0)
000260EE 6600                       		bne.s	loc_1A1FC
000260F0 4A28 0020                  		tst.b	$20(a0)
000260F4 6600                       		bne.s	loc_1A216
000260F6 317C 001E 0030             		move.w	#$1E,$30(a0)
000260FC                            ;		move.w	#$AC,d0
000260FC 4EB9 0001 EEC4             		jsr	(BossModeMusic).l
00026102                            
00026102                            loc_1A1FC:
00026102 5368 0030                  		subq.w	#1,$30(a0)
00026106 6600                       		bne.s	loc_1A216
00026108 4A28 0022                  		tst.b	$22(a0)
0002610C 6A00                       		bpl.s	loc_1A210
0002610E 317C 0060 0012             		move.w	#$60,$12(a0)
00026114 6000                       		bra.s	loc_1A216
00026116                            ; ===========================================================================
00026116                            
00026116                            loc_1A210:
00026116 117C 000F 0020             		move.b	#$F,$20(a0)
0002611C                            
0002611C                            loc_1A216:
0002611C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
00026122 6D00                       		blt.s	loc_1A23A
00026124 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0002612A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00026130 4278 D020                  		clr.w	(MainCharacter+inertia).w
00026134 4A68 0012                  		tst.w	$12(a0)
00026138 6A00                       		bpl.s	loc_1A248
0002613A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
00026140                            
00026140                            loc_1A23A:
00026140 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
00026146 6D00                       		blt.s	loc_1A248
00026148 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0002614E                            
0002614E                            loc_1A248:
0002614E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
00026154 6500                       		bcs.s	loc_1A260
00026156 4A28 0001                  		tst.b	1(a0)
0002615A 6B00                       		bmi.s	loc_1A260
0002615C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
00026162 6000 FAEA                  		bra.w	Obj85_Delete
00026166                            ; ===========================================================================
00026166                            
00026166                            loc_1A260:
00026166 6000 FEFE                  		bra.w	loc_1A15C
0002616A                            ; ===========================================================================
0002616A                            
0002616A                            loc_1A264:				; XREF: Obj85_Index
0002616A 2268 0034                  		movea.l	$34(a0),a1
0002616E 1011                       		move.b	(a1),d0
00026170 B010                       		cmp.b	(a0),d0
00026172 6600 FADA                  		bne.w	Obj85_Delete
00026176 117C 0007 001C             		move.b	#7,$1C(a0)
0002617C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00026182 6C00                       		bge.s	loc_1A280
00026184 6000                       		bra.s	loc_1A2A6
00026186                            ; ===========================================================================
00026186                            
00026186                            loc_1A280:
00026186 4A69 0010                  		tst.w	$10(a1)
0002618A 6700                       		beq.s	loc_1A28C
0002618C 117C 000B 001C             		move.b	#$B,$1C(a0)
00026192                            
00026192                            loc_1A28C:
00026192 43FA DA20                  		lea	Ani_Eggman(pc),a1
00026196 4EB9 0001 2754             		jsr	AnimateSprite
0002619C                            
0002619C                            loc_1A296:
0002619C 2268 0034                  		movea.l	$34(a0),a1
000261A0 3169 0008 0008             		move.w	8(a1),8(a0)
000261A6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000261AC                            
000261AC                            loc_1A2A6:
000261AC 2268 0034                  		movea.l	$34(a0),a1
000261B0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000261B6 7003                       		moveq	#3,d0
000261B8 C028 0022                  		and.b	$22(a0),d0
000261BC 0228 00FC 0001             		andi.b	#-4,1(a0)
000261C2 8128 0001                  		or.b	d0,1(a0)
000261C6 4EF9 0001 5D72             		jmp	DisplaySprite
000261CC                            ; ===========================================================================
000261CC                            
000261CC                            loc_1A2C6:				; XREF: Obj85_Index
000261CC 2268 0034                  		movea.l	$34(a0),a1
000261D0 1011                       		move.b	(a1),d0
000261D2 B010                       		cmp.b	(a0),d0
000261D4 6600 FA78                  		bne.w	Obj85_Delete
000261D8 0CA9 0002 3C04 0004        		cmpi.l	#Map_Eggman,4(a1)
000261E0 6700                       		beq.s	loc_1A2E4
000261E2 117C 000A 001A             		move.b	#$A,$1A(a0)
000261E8 60C2                       		bra.s	loc_1A2A6
000261EA                            ; ===========================================================================
000261EA                            
000261EA                            loc_1A2E4:
000261EA 117C 0001 001C             		move.b	#1,$1C(a0)
000261F0 4A29 0021                  		tst.b	$21(a1)
000261F4 6F00                       		ble.s	loc_1A312
000261F6 117C 0006 001C             		move.b	#6,$1C(a0)
000261FC 217C 0002 3C04 0004        		move.l	#Map_Eggman,4(a0)
00026204 317C 0400 0002             		move.w	#$400,2(a0)
0002620A 43FA D9A8                  		lea	Ani_Eggman(pc),a1
0002620E 4EB9 0001 2754             		jsr	AnimateSprite
00026214 6000 FF86                  		bra.w	loc_1A296
00026218                            ; ===========================================================================
00026218                            
00026218                            loc_1A312:
00026218 4A28 0001                  		tst.b	1(a0)
0002621C 6A00 FA30                  		bpl.w	Obj85_Delete
00026220 6100 D540                  		bsr.w	BossDefeated
00026224 317C 0100 0018             		move.w	#$100,priority(a0)
0002622A 117C 0000 001C             		move.b	#0,$1C(a0)
00026230 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
00026238 317C 03A0 0002             		move.w	#$3A0,2(a0)
0002623E 43FA 0000                  		lea	Ani_obj85(pc),a1
00026242 4EB9 0001 2754             		jsr	AnimateSprite
00026248 6000 FF52                  		bra.w	loc_1A296
0002624C                            ; ===========================================================================
0002624C                            
0002624C                            loc_1A346:				; XREF: Obj85_Index
0002624C 08E8 0000 0022             		bset	#0,$22(a0)
00026252 2268 0034                  		movea.l	$34(a0),a1
00026256 0CA9 0002 3C04 0004        		cmpi.l	#Map_Eggman,4(a1)
0002625E 6700                       		beq.s	loc_1A35E
00026260 6000 FF4A                  		bra.w	loc_1A2A6
00026264                            ; ===========================================================================
00026264                            
00026264                            loc_1A35E:
00026264 3169 0008 0008             		move.w	8(a1),8(a0)
0002626A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00026270 4A28 001E                  		tst.b	$1E(a0)
00026274 6600                       		bne.s	loc_1A376
00026276 117C 0014 001E             		move.b	#$14,$1E(a0)
0002627C                            
0002627C                            loc_1A376:
0002627C 5328 001E                  		subq.b	#1,$1E(a0)
00026280 6E00                       		bgt.s	loc_1A38A
00026282 5228 001A                  		addq.b	#1,$1A(a0)
00026286 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0002628C 6E00 F9C0                  		bgt.w	Obj85_Delete
00026290                            
00026290                            loc_1A38A:
00026290 6000 FF0A                  		bra.w	loc_1A296
00026294                            ; ===========================================================================
00026294                            
00026294                            loc_1A38E:				; XREF: Obj85_Index
00026294 117C 000B 001A             		move.b	#$B,$1A(a0)
0002629A 3038 D008                  		move.w	($FFFFD008).w,d0
0002629E 9068 0008                  		sub.w	8(a0),d0
000262A2 6500                       		bcs.s	loc_1A3A6
000262A4 4A28 0001                  		tst.b	1(a0)
000262A8 6A00 F9A4                  		bpl.w	Obj85_Delete
000262AC                            
000262AC                            loc_1A3A6:
000262AC 4EF9 0001 5D72             		jmp	DisplaySprite
000262B2                            ; ===========================================================================
000262B2                            
000262B2                            loc_1A3AC:				; XREF: Obj85_Index
000262B2 117C 0000 001A             		move.b	#0,$1A(a0)
000262B8 08E8 0000 0022             		bset	#0,$22(a0)
000262BE 2268 0034                  		movea.l	$34(a0),a1
000262C2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
000262C8 6600                       		bne.s	loc_1A3D0
000262CA 0CA9 0002 3C04 0004        		cmpi.l	#Map_Eggman,4(a1)
000262D2 6700 F97A                  		beq.w	Obj85_Delete
000262D6                            
000262D6                            loc_1A3D0:
000262D6 6000 FED4                  		bra.w	loc_1A2A6
000262DA                            ; ===========================================================================
000262DA                            Ani_obj85:
000262DA                            	include "_anim\obj85.asm"
000262DA                            ; ---------------------------------------------------------------------------
000262DA                            ; Animation script - Eggman (FZ)
000262DA                            ; ---------------------------------------------------------------------------
000262DA 0000                       		dc.w byte_1A3D6-Ani_obj85
000262DC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
000262E0                            		even
000262E0                            		even
000262E0                            
000262E0                            Map_Eggman2:
000262E0                            	include "_maps\Eggman2.asm"
000262E0                            ; ---------------------------------------------------------------------------
000262E0                            ; Sprite mappings - Eggman (FZ)
000262E0                            ; ---------------------------------------------------------------------------
000262E0 0000                       		dc.w byte_1A3DE-Map_Eggman2
000262E2 0000                       		dc.w byte_1A3FD-Map_Eggman2
000262E4 06                         byte_1A3DE:	dc.b 6
000262E5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
000262EA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
000262EF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
000262F4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
000262F9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
000262FE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00026303 06                         byte_1A3FD:	dc.b 6
00026304 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
00026309 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0002630E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
00026313 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
00026318 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0002631D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00026322                            		even
00026322                            		even
00026322                            
00026322                            Map_FZBoss:
00026322                            	include "_maps\FZ boss.asm"
00026322                            ; ---------------------------------------------------------------------------
00026322                            ; Sprite mappings - boss (FZ)
00026322                            ; ---------------------------------------------------------------------------
00026322 0000                       		dc.w byte_1A422-Map_FZBoss
00026324 0000                       		dc.w byte_1A42D-Map_FZBoss
00026326 0000                       		dc.w byte_1A43D-Map_FZBoss
00026328 02                         byte_1A422:	dc.b 2
00026329 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0002632E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
00026333 03                         byte_1A42D:	dc.b 3
00026334 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
00026339 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0002633E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
00026343 02                         byte_1A43D:	dc.b 2
00026344 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
00026349 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0002634E                            		even
0002634E                            		even
0002634E                            
0002634E                            ; ===========================================================================
0002634E                            
0002634E                            Obj84_Delete:
0002634E 4EF9 0001 5D26             		jmp	DeleteObject
00026354                            ; ===========================================================================
00026354                            ; ---------------------------------------------------------------------------
00026354                            ; Object 84 - cylinder Eggman	hides in (FZ)
00026354                            ; ---------------------------------------------------------------------------
00026354                            
00026354                            Obj84:					; XREF: Obj_Index
00026354 7000                       		moveq	#0,d0
00026356 1028 0024                  		move.b	$24(a0),d0
0002635A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0002635E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
00026362                            ; ===========================================================================
00026362 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
00026364 0000                       		dc.w loc_1A4CE-Obj84_Index
00026366 0000                       		dc.w loc_1A57E-Obj84_Index
00026368                            
00026368 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0002636C 2550 0620                  		dc.w $2550, $620
00026370 2490 04C0                  		dc.w $2490, $4C0
00026374 2510 04C0                  		dc.w $2510, $4C0
00026378                            ; ===========================================================================
00026378                            
00026378                            Obj84_Main:				; XREF: Obj84_Index
00026378 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0002637C 7000                       		moveq	#0,d0
0002637E 1028 0028                  		move.b	$28(a0),d0
00026382 D040                       		add.w	d0,d0
00026384 D2C0                       		adda.w	d0,a1
00026386 117C 0004 0001             		move.b	#4,1(a0)
0002638C 08E8 0007 0001             		bset	#7,1(a0)
00026392 08E8 0004 0001             		bset	#4,1(a0)
00026398 317C 0300 0002             		move.w	#$300,2(a0)
0002639E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
000263A6 3159 0008                  		move.w	(a1)+,8(a0)
000263AA 3151 000C                  		move.w	(a1),$C(a0)
000263AE 3159 0038                  		move.w	(a1)+,$38(a0)
000263B2 117C 0020 0016             		move.b	#$20,$16(a0)
000263B8 117C 0060 0017             		move.b	#$60,$17(a0)
000263BE 117C 0020 0023             		move.b	#$20,width_pixels(a0)
000263C4 117C 0060 0016             		move.b	#$60,$16(a0)
000263CA 317C 0180 0018             		move.w	#$180,priority(a0)
000263D0 5428 0024                  		addq.b	#2,$24(a0)
000263D4                            
000263D4                            loc_1A4CE:				; XREF: Obj84_Index
000263D4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
000263DA 6F00                       		ble.s	loc_1A4DC
000263DC 08E8 0001 0001             		bset	#1,1(a0)
000263E2                            
000263E2                            loc_1A4DC:
000263E2 42A8 003C                  		clr.l	$3C(a0)
000263E6 4A28 0029                  		tst.b	$29(a0)
000263EA 6700                       		beq.s	loc_1A4EA
000263EC 5428 0024                  		addq.b	#2,$24(a0)
000263F0                            
000263F0                            loc_1A4EA:
000263F0 2028 003C                  		move.l	$3C(a0),d0
000263F4 2228 0038                  		move.l	$38(a0),d1
000263F8 D280                       		add.l	d0,d1
000263FA 4841                       		swap	d1
000263FC 3141 000C                  		move.w	d1,$C(a0)
00026400 0C28 0004 0024             		cmpi.b	#4,$24(a0)
00026406 6600                       		bne.s	loc_1A524
00026408 4A68 0030                  		tst.w	$30(a0)
0002640C 6A00                       		bpl.s	loc_1A524
0002640E 70F6                       		moveq	#-$A,d0
00026410 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00026416 6F00                       		ble.s	loc_1A514
00026418 700E                       		moveq	#$E,d0
0002641A                            
0002641A                            loc_1A514:
0002641A D240                       		add.w	d0,d1
0002641C 2268 0034                  		movea.l	$34(a0),a1
00026420 3341 000C                  		move.w	d1,$C(a1)
00026424 3368 0008 0008             		move.w	8(a0),8(a1)
0002642A                            
0002642A                            loc_1A524:
0002642A 323C 002B                  		move.w	#$2B,d1
0002642E 343C 0060                  		move.w	#$60,d2
00026432 363C 0061                  		move.w	#$61,d3
00026436 3828 0008                  		move.w	8(a0),d4
0002643A 4EB9 0001 958A             		jsr	SolidObject
00026440 7000                       		moveq	#0,d0
00026442 3228 003C                  		move.w	$3C(a0),d1
00026446 6A00                       		bpl.s	loc_1A550
00026448 4441                       		neg.w	d1
0002644A 5141                       		subq.w	#8,d1
0002644C 6500                       		bcs.s	loc_1A55C
0002644E 5200                       		addq.b	#1,d0
00026450 E841                       		asr.w	#4,d1
00026452 D041                       		add.w	d1,d0
00026454 6000                       		bra.s	loc_1A55C
00026456                            ; ===========================================================================
00026456                            
00026456                            loc_1A550:
00026456 0441 0027                  		subi.w	#$27,d1
0002645A 6500                       		bcs.s	loc_1A55C
0002645C 5200                       		addq.b	#1,d0
0002645E E841                       		asr.w	#4,d1
00026460 D041                       		add.w	d1,d0
00026462                            
00026462                            loc_1A55C:
00026462 1140 001A                  		move.b	d0,$1A(a0)
00026466 3038 D008                  		move.w	($FFFFD008).w,d0
0002646A 9068 0008                  		sub.w	8(a0),d0
0002646E 6B00                       		bmi.s	loc_1A578
00026470 0440 0140                  		subi.w	#$140,d0
00026474 6B00                       		bmi.s	loc_1A578
00026476 4A28 0001                  		tst.b	1(a0)
0002647A 6A00 FED2                  		bpl.w	Obj84_Delete
0002647E                            
0002647E                            loc_1A578:
0002647E 4EF9 0001 5D72             		jmp	DisplaySprite
00026484                            ; ===========================================================================
00026484                            
00026484                            loc_1A57E:				; XREF: Obj84_Index
00026484 7000                       		moveq	#0,d0
00026486 1028 0028                  		move.b	$28(a0),d0
0002648A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0002648E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
00026492 6000 FF5C                  		bra.w	loc_1A4EA
00026496                            ; ===========================================================================
00026496 0000                       off_1A590:	dc.w loc_1A598-off_1A590
00026498 0000                       		dc.w loc_1A598-off_1A590
0002649A 0000                       		dc.w loc_1A604-off_1A590
0002649C 0000                       		dc.w loc_1A604-off_1A590
0002649E                            ; ===========================================================================
0002649E                            
0002649E                            loc_1A598:				; XREF: off_1A590
0002649E 4A28 0029                  		tst.b	$29(a0)
000264A2 6600                       		bne.s	loc_1A5D4
000264A4 2268 0034                  		movea.l	$34(a0),a1
000264A8 4A29 0021                  		tst.b	$21(a1)
000264AC 6600                       		bne.s	loc_1A5B4
000264AE 6100 D2B2                  		bsr.w	BossDefeated
000264B2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
000264BA                            
000264BA                            loc_1A5B4:
000264BA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
000264C2 6400                       		bcc.s	locret_1A602
000264C4 42A8 003C                  		clr.l	$3C(a0)
000264C8 2268 0034                  		movea.l	$34(a0),a1
000264CC 5369 0032                  		subq.w	#1,$32(a1)
000264D0 4269 0030                  		clr.w	$30(a1)
000264D4 5528 0024                  		subq.b	#2,$24(a0)
000264D8 4E75                       		rts	
000264DA                            ; ===========================================================================
000264DA                            
000264DA                            loc_1A5D4:
000264DA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
000264E0 6C00                       		bge.s	loc_1A5E4
000264E2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
000264EA                            
000264EA                            loc_1A5E4:
000264EA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
000264F2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
000264F8 6E00                       		bgt.s	locret_1A602
000264FA 4268 003E                  		clr.w	$3E(a0)
000264FE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
00026504 4228 0029                  		clr.b	$29(a0)
00026508                            
00026508                            locret_1A602:
00026508 4E75                       		rts	
0002650A                            ; ===========================================================================
0002650A                            
0002650A                            loc_1A604:				; XREF: off_1A590
0002650A 08E8 0001 0001             		bset	#1,1(a0)
00026510 4A28 0029                  		tst.b	$29(a0)
00026514 6600                       		bne.s	loc_1A646
00026516 2268 0034                  		movea.l	$34(a0),a1
0002651A 4A29 0021                  		tst.b	$21(a1)
0002651E 6600                       		bne.s	loc_1A626
00026520 6100 D240                  		bsr.w	BossDefeated
00026524 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0002652C                            
0002652C                            loc_1A626:
0002652C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
00026534 6400                       		bcc.s	locret_1A674
00026536 42A8 003C                  		clr.l	$3C(a0)
0002653A 2268 0034                  		movea.l	$34(a0),a1
0002653E 5369 0032                  		subq.w	#1,$32(a1)
00026542 4269 0030                  		clr.w	$30(a1)
00026546 5528 0024                  		subq.b	#2,$24(a0)
0002654A 4E75                       		rts	
0002654C                            ; ===========================================================================
0002654C                            
0002654C                            loc_1A646:
0002654C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
00026552 6D00                       		blt.s	loc_1A656
00026554 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0002655C                            
0002655C                            loc_1A656:
0002655C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
00026564 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0002656A 6D00                       		blt.s	locret_1A674
0002656C 4268 003E                  		clr.w	$3E(a0)
00026570 317C 00A0 003C             		move.w	#$A0,$3C(a0)
00026576 4228 0029                  		clr.b	$29(a0)
0002657A                            
0002657A                            locret_1A674:
0002657A 4E75                       		rts	
0002657C                            ; ===========================================================================
0002657C                            ; ---------------------------------------------------------------------------
0002657C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0002657C                            ; ---------------------------------------------------------------------------
0002657C                            Map_obj84:
0002657C                            	include "_maps\obj84.asm"
0002657C                            ; ---------------------------------------------------------------------------
0002657C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0002657C                            ; ---------------------------------------------------------------------------
0002657C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
00026580 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
00026584 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
00026588 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0002658C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00026590 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
00026594 06                         byte_1A68E:	dc.b 6
00026595 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0002659A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0002659F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000265A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000265A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000265AE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000265B3 08                         byte_1A6AD:	dc.b 8
000265B4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000265B9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000265BE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000265C3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000265C8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000265CD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000265D2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000265D7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
000265DC 0A                         byte_1A6D6:	dc.b $A
000265DD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000265E2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000265E7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000265EC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000265F1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000265F6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000265FB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00026600 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026605 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0002660A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002660F 0C                         byte_1A709:	dc.b $C
00026610 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026615 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0002661A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002661F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00026624 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00026629 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0002662E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00026633 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026638 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0002663D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00026642 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00026647 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0002664C 0D                         byte_1A746:	dc.b $D
0002664D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026652 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00026657 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002665C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00026661 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00026666 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0002666B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00026670 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00026675 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0002667A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0002667F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00026684 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00026689 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0002668E 0E                         byte_1A788:	dc.b $E
0002668F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00026694 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00026699 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0002669E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000266A3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000266A8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000266AD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000266B2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
000266B7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
000266BC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
000266C1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
000266C6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
000266CB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
000266D0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
000266D5 02                         byte_1A7CF:	dc.b 2
000266D6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
000266DB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
000266E0                            		even
000266E0                            		even
000266E0                            
000266E0                            ; ===========================================================================
000266E0                            ; ---------------------------------------------------------------------------
000266E0                            ; Object 86 - energy balls (FZ)
000266E0                            ; ---------------------------------------------------------------------------
000266E0                            
000266E0                            Obj86:					; XREF: Obj_Index
000266E0 7000                       		moveq	#0,d0
000266E2 1028 0024                  		move.b	$24(a0),d0
000266E6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
000266EA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
000266EE                            ; ===========================================================================
000266EE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
000266F0 0000                       		dc.w Obj86_Generator-Obj86_Index
000266F2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
000266F4 0000                       		dc.w loc_1A962-Obj86_Index
000266F6 0000                       		dc.w loc_1A982-Obj86_Index
000266F8                            ; ===========================================================================
000266F8                            
000266F8                            Obj86_Main:				; XREF: Obj86_Index
000266F8 317C 2588 0008             		move.w	#$2588,8(a0)
000266FE 317C 053C 000C             		move.w	#$53C,$C(a0)
00026704 317C 0300 0002             		move.w	#$300,2(a0)
0002670A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
00026712 117C 0000 001C             		move.b	#0,$1C(a0)
00026718 317C 0180 0018             		move.w	#$180,priority(a0)
0002671E 117C 0008 0017             		move.b	#8,$17(a0)
00026724 117C 0008 0016             		move.b	#8,$16(a0)
0002672A 117C 0004 0001             		move.b	#4,1(a0)
00026730 08E8 0007 0001             		bset	#7,1(a0)
00026736 5428 0024                  		addq.b	#2,$24(a0)
0002673A                            
0002673A                            Obj86_Generator:			; XREF: Obj86_Index
0002673A 2268 0034                  		movea.l	$34(a0),a1
0002673E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
00026744 6600                       		bne.s	loc_1A850
00026746 10BC 003F                  		move.b	#$3F,(a0)
0002674A 117C 0000 0024             		move.b	#0,$24(a0)
00026750 4EF9 0001 5D72             		jmp	DisplaySprite
00026756                            ; ===========================================================================
00026756                            
00026756                            loc_1A850:
00026756 117C 0000 001C             		move.b	#0,$1C(a0)
0002675C 4A28 0029                  		tst.b	$29(a0)
00026760 6700                       		beq.s	loc_1A86C
00026762 5428 0024                  		addq.b	#2,$24(a0)
00026766 117C 0001 001C             		move.b	#1,$1C(a0)
0002676C 117C 003E 0028             		move.b	#$3E,$28(a0)
00026772                            
00026772                            loc_1A86C:
00026772 323C 0013                  		move.w	#$13,d1
00026776 343C 0008                  		move.w	#8,d2
0002677A 363C 0011                  		move.w	#$11,d3
0002677E 3828 0008                  		move.w	8(a0),d4
00026782 4EB9 0001 958A             		jsr	SolidObject
00026788 3038 D008                  		move.w	($FFFFD008).w,d0
0002678C 9068 0008                  		sub.w	8(a0),d0
00026790 6B00                       		bmi.s	loc_1A89A
00026792 0440 0140                  		subi.w	#$140,d0
00026796 6B00                       		bmi.s	loc_1A89A
00026798 4A28 0001                  		tst.b	1(a0)
0002679C 6A00 FBB0                  		bpl.w	Obj84_Delete
000267A0                            
000267A0                            loc_1A89A:
000267A0 43FA 0000                  		lea	Ani_obj86(pc),a1
000267A4 4EB9 0001 2754             		jsr	AnimateSprite
000267AA 4EF9 0001 5D72             		jmp	DisplaySprite
000267B0                            ; ===========================================================================
000267B0                            
000267B0                            Obj86_MakeBalls:			; XREF: Obj86_Index
000267B0 4A28 0029                  		tst.b	$29(a0)
000267B4 6700 0000                  		beq.w	loc_1A954
000267B8 4228 0029                  		clr.b	$29(a0)
000267BC D068 0030                  		add.w	$30(a0),d0
000267C0 0240 001E                  		andi.w	#$1E,d0
000267C4 D4C0                       		adda.w	d0,a2
000267C6 5868 0030                  		addq.w	#4,$30(a0)
000267CA 4268 0032                  		clr.w	$32(a0)
000267CE 7403                       		moveq	#3,d2
000267D0                            
000267D0                            Obj86_Loop:
000267D0 4EB9 0001 6892             		jsr	SingleObjLoad2
000267D6 6600 0000                  		bne.w	loc_1A954
000267DA 12BC 0086                  		move.b	#$86,(a1)
000267DE 3368 0008 0008             		move.w	8(a0),8(a1)
000267E4 337C 053C 000C             		move.w	#$53C,$C(a1)
000267EA 137C 0008 0024             		move.b	#8,$24(a1)
000267F0 337C 2300 0002             		move.w	#$2300,2(a1)
000267F6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
000267FE 137C 000C 0016             		move.b	#$C,$16(a1)
00026804 137C 000C 0017             		move.b	#$C,$17(a1)
0002680A 137C 0000 0020             		move.b	#0,$20(a1)
00026810 337C 0180 0018             		move.w	#$180,priority(a1)
00026816 337C 003E 0028             		move.w	#$3E,$28(a1)
0002681C 137C 0004 0001             		move.b	#4,1(a1)
00026822 08E9 0007 0001             		bset	#7,1(a1)
00026828 2348 0034                  		move.l	a0,$34(a1)
0002682C 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00026832 3228 0032                  		move.w	$32(a0),d1
00026836 C3FC FFB1                  		muls.w	#-$4F,d1
0002683A 0641 2578                  		addi.w	#$2578,d1
0002683E 0240 001F                  		andi.w	#$1F,d0
00026842 0440 0010                  		subi.w	#$10,d0
00026846 D041                       		add.w	d1,d0
00026848 3340 0030                  		move.w	d0,$30(a1)
0002684C 5268 0032                  		addq.w	#1,$32(a0)
00026850 3168 0032 0038             		move.w	$32(a0),$38(a0)
00026856 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0002685A                            
0002685A                            loc_1A954:
0002685A 4A68 0032                  		tst.w	$32(a0)
0002685E 6600                       		bne.s	loc_1A95E
00026860 5428 0024                  		addq.b	#2,$24(a0)
00026864                            
00026864                            loc_1A95E:
00026864 6000 FF0C                  		bra.w	loc_1A86C
00026868                            ; ===========================================================================
00026868                            
00026868                            loc_1A962:				; XREF: Obj86_Index
00026868 117C 0002 001C             		move.b	#2,$1C(a0)
0002686E 4A68 0038                  		tst.w	$38(a0)
00026872 6600                       		bne.s	loc_1A97E
00026874 117C 0002 0024             		move.b	#2,$24(a0)
0002687A 2268 0034                  		movea.l	$34(a0),a1
0002687E 337C FFFF 0032             		move.w	#-1,$32(a1)
00026884                            
00026884                            loc_1A97E:
00026884 6000 FEEC                  		bra.w	loc_1A86C
00026888                            ; ===========================================================================
00026888                            
00026888                            loc_1A982:				; XREF: Obj86_Index
00026888 7000                       		moveq	#0,d0
0002688A 1028 0025                  		move.b	$25(a0),d0
0002688E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
00026892 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
00026896 43FA 0000                  		lea	Ani_obj86a(pc),a1
0002689A 4EB9 0001 2754             		jsr	AnimateSprite
000268A0 4EF9 0001 5D72             		jmp	DisplaySprite
000268A6                            ; ===========================================================================
000268A6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
000268A8 0000                       		dc.w loc_1A9C0-Obj86_Index2
000268AA 0000                       		dc.w loc_1AA1E-Obj86_Index2
000268AC                            ; ===========================================================================
000268AC                            
000268AC                            loc_1A9A6:				; XREF: Obj86_Index2
000268AC 3028 0030                  		move.w	$30(a0),d0
000268B0 9068 0008                  		sub.w	8(a0),d0
000268B4 E940                       		asl.w	#4,d0
000268B6 3140 0010                  		move.w	d0,$10(a0)
000268BA 317C 00B4 0028             		move.w	#$B4,$28(a0)
000268C0 5428 0025                  		addq.b	#2,$25(a0)
000268C4 4E75                       		rts	
000268C6                            ; ===========================================================================
000268C6                            
000268C6                            loc_1A9C0:				; XREF: Obj86_Index2
000268C6 4A68 0010                  		tst.w	$10(a0)
000268CA 6700                       		beq.s	loc_1A9E6
000268CC 4EB9 0001 5D0C             		jsr	SpeedToPos
000268D2 3028 0008                  		move.w	8(a0),d0
000268D6 9068 0030                  		sub.w	$30(a0),d0
000268DA 6400                       		bcc.s	loc_1A9E6
000268DC 4268 0010                  		clr.w	$10(a0)
000268E0 D168 0008                  		add.w	d0,8(a0)
000268E4 2268 0034                  		movea.l	$34(a0),a1
000268E8 5369 0032                  		subq.w	#1,$32(a1)
000268EC                            
000268EC                            loc_1A9E6:
000268EC 117C 0000 001C             		move.b	#0,$1C(a0)
000268F2 5368 0028                  		subq.w	#1,$28(a0)
000268F6 6600                       		bne.s	locret_1AA1C
000268F8 5428 0025                  		addq.b	#2,$25(a0)
000268FC 117C 0001 001C             		move.b	#1,$1C(a0)
00026902 117C 009A 0020             		move.b	#$9A,$20(a0)
00026908 317C 00B4 0028             		move.w	#$B4,$28(a0)
0002690E 7000                       		moveq	#0,d0
00026910 3038 D008                  		move.w	($FFFFD008).w,d0
00026914 9068 0008                  		sub.w	8(a0),d0
00026918 3140 0010                  		move.w	d0,$10(a0)
0002691C 317C 0140 0012             		move.w	#$140,$12(a0)
00026922                            
00026922                            locret_1AA1C:
00026922 4E75                       		rts	
00026924                            ; ===========================================================================
00026924                            
00026924                            loc_1AA1E:				; XREF: Obj86_Index2
00026924 4EB9 0001 5D0C             		jsr	SpeedToPos
0002692A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
00026930 6400                       		bcc.s	loc_1AA34
00026932 5368 0028                  		subq.w	#1,$28(a0)
00026936 6700                       		beq.s	loc_1AA34
00026938 4E75                       		rts	
0002693A                            ; ===========================================================================
0002693A                            
0002693A                            loc_1AA34:
0002693A 2268 0034                  		movea.l	$34(a0),a1
0002693E 5369 0038                  		subq.w	#1,$38(a1)
00026942 6000 FA0A                  		bra.w	Obj84_Delete
00026946                            ; ===========================================================================
00026946                            Ani_obj86:
00026946                            	include "_anim\obj86.asm"
00026946                            ; ---------------------------------------------------------------------------
00026946                            ; Animation script - energy ball launcher (FZ)
00026946                            ; ---------------------------------------------------------------------------
00026946 0000                       		dc.w byte_1AA46-Ani_obj86
00026948 0000                       		dc.w byte_1AA4A-Ani_obj86
0002694A 0000                       		dc.w byte_1AA50-Ani_obj86
0002694C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
00026950 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
00026956 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0002695C                            		even
0002695C                            		even
0002695C                            
0002695C                            ; ---------------------------------------------------------------------------
0002695C                            ; Sprite mappings - energy ball	launcher (FZ)
0002695C                            ; ---------------------------------------------------------------------------
0002695C                            Map_obj86:
0002695C                            	include "_maps\obj86.asm"
0002695C                            ; ---------------------------------------------------------------------------
0002695C                            ; Sprite mappings - energy ball	launcher (FZ)
0002695C                            ; ---------------------------------------------------------------------------
0002695C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
00026960 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
00026964 01                         byte_1AA5E:	dc.b 1
00026965 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0002696A 01                         byte_1AA64:	dc.b 1
0002696B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
00026970 01                         byte_1AA6A:	dc.b 1
00026971 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
00026976 01                         byte_1AA70:	dc.b 1
00026977 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0002697C                            		even
0002697C                            		even
0002697C                            
0002697C                            Ani_obj86a:
0002697C                            	include "_anim\obj86a.asm"
0002697C                            ; ---------------------------------------------------------------------------
0002697C                            ; Animation script - energy balls (FZ)
0002697C                            ; ---------------------------------------------------------------------------
0002697C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0002697E 0000                       		dc.w byte_1AA9C-Ani_obj86a
00026980 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0002698F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0002699E 0A05 FF00                  		dc.b $A, 5, $FF, 0
000269A2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
000269AC                            		even
000269AC                            		even
000269AC                            
000269AC                            ; ---------------------------------------------------------------------------
000269AC                            ; Sprite mappings - energy balls (FZ)
000269AC                            ; ---------------------------------------------------------------------------
000269AC                            Map_obj86a:
000269AC                            	include "_maps\obj86a.asm"
000269AC                            ; ---------------------------------------------------------------------------
000269AC                            ; Sprite mappings - energy balls (FZ)
000269AC                            ; ---------------------------------------------------------------------------
000269AC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
000269B0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
000269B4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
000269B8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
000269BC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
000269C0 0000                       		dc.w byte_1AB20-Map_obj86a
000269C2 02                         byte_1AABC:	dc.b 2
000269C3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
000269C8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
000269CD 02                         byte_1AAC7:	dc.b 2
000269CE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
000269D3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
000269D8 02                         byte_1AAD2:	dc.b 2
000269D9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
000269DE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
000269E3 02                         byte_1AADD:	dc.b 2
000269E4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
000269E9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
000269EE 02                         byte_1AAE8:	dc.b 2
000269EF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
000269F4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
000269F9 02                         byte_1AAF3:	dc.b 2
000269FA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
000269FF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
00026A04 01                         byte_1AAFE:	dc.b 1
00026A05 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
00026A0A 01                         byte_1AB04:	dc.b 1
00026A0B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
00026A10 02                         byte_1AB0A:	dc.b 2
00026A11 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
00026A16 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
00026A1B 02                         byte_1AB15:	dc.b 2
00026A1C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
00026A21 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
00026A26 00                         byte_1AB20:	dc.b 0
00026A28 00                         		even
00026A28 00                         		even
00026A28                            
00026A28                            ; ===========================================================================
00026A28                            ; ---------------------------------------------------------------------------
00026A28                            ; Object 3E - prison capsule
00026A28                            ; ---------------------------------------------------------------------------
00026A28                            
00026A28                            Obj3E:					; XREF: Obj_Index
00026A28 7000                       		moveq	#0,d0
00026A2A 1028 0024                  		move.b	$24(a0),d0
00026A2E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
00026A32 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
00026A36 4EF9 0001 8EA6             		jmp	MarkObjGone
00026A3C                            ; ===========================================================================
00026A3C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
00026A3E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
00026A40 0000                       		dc.w Obj3E_Switched-Obj3E_Index
00026A42 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00026A44 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00026A46 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00026A48 0000                       		dc.w Obj3E_Animals-Obj3E_Index
00026A4A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
00026A4C                            
00026A4C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
00026A50 040C 0501                  		dc.b 4,	$C, 5, 1
00026A54 0610 0403                  		dc.b 6,	$10, 4,	3
00026A58 0810 0305                  		dc.b 8,	$10, 3,	5
00026A5C                            ; ===========================================================================
00026A5C                            
00026A5C                            Obj3E_Main:				; XREF: Obj3E_Index
00026A5C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
00026A64 317C 049D 0002             		move.w	#$49D,2(a0)
00026A6A 117C 0004 0001             		move.b	#4,1(a0)
00026A70 3168 000C 0030             		move.w	$C(a0),$30(a0)
00026A76 7000                       		moveq	#0,d0
00026A78 1028 0028                  		move.b	$28(a0),d0
00026A7C E548                       		lsl.w	#2,d0
00026A7E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
00026A82 1159 0024                  		move.b	(a1)+,$24(a0)
00026A86 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00026A8A 1159 0018                  		move.b	(a1)+,priority(a0)
00026A8E 3028 0018                          move.w  priority(a0),d0
00026A92 E248                               lsr.w   #1,d0
00026A94 0240 0380                          andi.w  #$380,d0
00026A98 3140 0018                          move.w  d0,priority(a0)
00026A9C 1159 001A                  		move.b	(a1)+,$1A(a0)
00026AA0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
00026AA4 6600                       		bne.s	Obj3E_Not02	; if not, branch
00026AA6 117C 0006 0020             		move.b	#6,$20(a0)
00026AAC 117C 0008 0021             		move.b	#8,$21(a0)
00026AB2                            
00026AB2                            Obj3E_Not02:
00026AB2 4E75                       		rts	
00026AB4                            ; ===========================================================================
00026AB4                            
00026AB4                            Obj3E_BodyMain:				; XREF: Obj3E_Index
00026AB4 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
00026ABA 6700                       		beq.s	Obj3E_ChkOpened
00026ABC 323C 002B                  		move.w	#$2B,d1
00026AC0 343C 0018                  		move.w	#$18,d2
00026AC4 363C 0018                  		move.w	#$18,d3
00026AC8 3828 0008                  		move.w	8(a0),d4
00026ACC 4EF9 0001 958A             		jmp	SolidObject
00026AD2                            ; ===========================================================================
00026AD2                            
00026AD2                            Obj3E_ChkOpened:
00026AD2 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
00026AD6 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
00026AD8 4228 0025                  		clr.b	$25(a0)
00026ADC 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00026AE2 08F8 0001 D022             		bset	#1,($FFFFD022).w
00026AE8                            
00026AE8                            Obj3E_DoOpen:
00026AE8 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
00026AEE 4E75                       		rts	
00026AF0                            ; ===========================================================================
00026AF0                            
00026AF0                            Obj3E_Switched:				; XREF: Obj3E_Index
00026AF0 323C 0017                  		move.w	#$17,d1
00026AF4 343C 0008                  		move.w	#8,d2
00026AF8 363C 0008                  		move.w	#8,d3
00026AFC 3828 0008                  		move.w	8(a0),d4
00026B00 4EB9 0001 958A             		jsr	SolidObject
00026B06 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
00026B0C 4EB9 0001 2754             		jsr	AnimateSprite
00026B12 3168 0030 000C             		move.w	$30(a0),$C(a0)
00026B18 4A28 0025                  		tst.b	$25(a0)
00026B1C 6700                       		beq.s	locret_1AC60
00026B1E 5068 000C                  		addq.w	#8,$C(a0)
00026B22 117C 000A 0024             		move.b	#$A,$24(a0)
00026B28 317C 003C 001E             		move.w	#$3C,$1E(a0)
00026B2E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00026B32 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
00026B36 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00026B3C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00026B42 4228 0025                  		clr.b	$25(a0)
00026B46 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00026B4C 08F8 0001 D022             		bset	#1,($FFFFD022).w
00026B52                            
00026B52                            locret_1AC60:
00026B52 4E75                       		rts	
00026B54                            ; ===========================================================================
00026B54                            
00026B54                            Obj3E_Explosion:			; XREF: Obj3E_Index
00026B54 7007                       		moveq	#7,d0
00026B56 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
00026B5A 6600                       		bne.s	loc_1ACA0
00026B5C 4EB9 0001 687C             		jsr	SingleObjLoad
00026B62 6600                       		bne.s	loc_1ACA0
00026B64 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00026B68 3368 0008 0008             		move.w	8(a0),8(a1)
00026B6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026B74 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00026B7A 7200                       		moveq	#0,d1
00026B7C 1200                       		move.b	d0,d1
00026B7E E409                       		lsr.b	#2,d1
00026B80 0441 0020                  		subi.w	#$20,d1
00026B84 D369 0008                  		add.w	d1,8(a1)
00026B88 E048                       		lsr.w	#8,d0
00026B8A E608                       		lsr.b	#3,d0
00026B8C D169 000C                  		add.w	d0,$C(a1)
00026B90                            
00026B90                            loc_1ACA0:
00026B90 5368 001E                  		subq.w	#1,$1E(a0)
00026B94 6700                       		beq.s	Obj3E_MakeAnimal
00026B96 4E75                       		rts	
00026B98                            ; ===========================================================================
00026B98                            
00026B98                            Obj3E_MakeAnimal:
00026B98 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
00026B9E 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
00026BA4 117C 0006 001A             		move.b	#6,$1A(a0)
00026BAA 317C 0096 001E             		move.w	#$96,$1E(a0)
00026BB0 0668 0020 000C             		addi.w	#$20,$C(a0)
00026BB6 7C07                       		moveq	#7,d6
00026BB8 3A3C 009A                  		move.w	#$9A,d5
00026BBC 78E4                       		moveq	#-$1C,d4
00026BBE                            
00026BBE                            Obj3E_Loop:
00026BBE 4EB9 0001 687C             		jsr	SingleObjLoad
00026BC4 6600                       		bne.s	locret_1ACF8
00026BC6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00026BCA 3368 0008 0008             		move.w	8(a0),8(a1)
00026BD0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026BD6 D969 0008                  		add.w	d4,8(a1)
00026BDA 5E44                       		addq.w	#7,d4
00026BDC 3345 0036                  		move.w	d5,$36(a1)
00026BE0 5145                       		subq.w	#8,d5
00026BE2 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
00026BE6                            
00026BE6                            locret_1ACF8:
00026BE6 4E75                       		rts	
00026BE8                            ; ===========================================================================
00026BE8                            
00026BE8                            Obj3E_Animals:				; XREF: Obj3E_Index
00026BE8 7007                       		moveq	#7,d0
00026BEA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
00026BEE 6600                       		bne.s	loc_1AD38
00026BF0 4EB9 0001 687C             		jsr	SingleObjLoad
00026BF6 6600                       		bne.s	loc_1AD38
00026BF8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00026BFC 3368 0008 0008             		move.w	8(a0),8(a1)
00026C02 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026C08 4EB9 0000 8F0A             		jsr	(RandomNumber).l
00026C0E 0240 001F                  		andi.w	#$1F,d0
00026C12 5D40                       		subq.w	#6,d0
00026C14 4A41                       		tst.w	d1
00026C16 6A00                       		bpl.s	loc_1AD2E
00026C18 4440                       		neg.w	d0
00026C1A                            
00026C1A                            loc_1AD2E:
00026C1A D169 0008                  		add.w	d0,8(a1)
00026C1E 337C 000C 0036             		move.w	#$C,$36(a1)
00026C24                            
00026C24                            loc_1AD38:
00026C24 5368 001E                  		subq.w	#1,$1E(a0)
00026C28 6600                       		bne.s	locret_1AD48
00026C2A 5428 0024                  		addq.b	#2,$24(a0)
00026C2E 317C 00B4 001E             		move.w	#180,$1E(a0)
00026C34                            
00026C34                            locret_1AD48:
00026C34 4E75                       		rts	
00026C36                            ; ===========================================================================
00026C36                            
00026C36                            Obj3E_EndAct:				; XREF: Obj3E_Index
00026C36 703E                       		moveq	#$3E,d0
00026C38 7228                       		moveq	#$28,d1
00026C3A 7440                       		moveq	#$40,d2
00026C3C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
00026C40                            
00026C40                            Obj3E_FindObj28:
00026C40 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
00026C42 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
00026C44 D2C2                       		adda.w	d2,a1		; next object RAM
00026C46 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
00026C4A                            
00026C4A 4EB9 0001 84BA             		jsr	GotThroughAct
00026C50 4EF9 0001 5D26             		jmp	DeleteObject
00026C56                            ; ===========================================================================
00026C56                            
00026C56                            Obj3E_Obj28Found:
00026C56 4E75                       		rts	
00026C58                            ; ===========================================================================
00026C58                            Ani_obj3E:
00026C58                            	include "_anim\obj3E.asm"
00026C58                            ; ---------------------------------------------------------------------------
00026C58                            ; Animation script - prison capsule
00026C58                            ; ---------------------------------------------------------------------------
00026C58 0000                       		dc.w byte_1AD70-Ani_obj3E
00026C5A 0000                       		dc.w byte_1AD70-Ani_obj3E
00026C5C 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
00026C60                            		even
00026C60                            		even
00026C60                            
00026C60                            ; ---------------------------------------------------------------------------
00026C60                            ; Sprite mappings - prison capsule
00026C60                            ; ---------------------------------------------------------------------------
00026C60                            Map_obj3E:
00026C60                            	include "_maps\obj3E.asm"
00026C60                            ; ---------------------------------------------------------------------------
00026C60                            ; Sprite mappings - prison capsule
00026C60                            ; ---------------------------------------------------------------------------
00026C60 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
00026C64 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
00026C68 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
00026C6C 0000                       		dc.w byte_1ADE2-Map_obj3E
00026C6E 07                         byte_1AD82:	dc.b 7
00026C6F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
00026C74 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
00026C79 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
00026C7E F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
00026C83 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
00026C88 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00026C8D 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00026C92 01                         byte_1ADA6:	dc.b 1
00026C93 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
00026C98 06                         byte_1ADAC:	dc.b 6
00026C99 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
00026C9E 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
00026CA3 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
00026CA8 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
00026CAD 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00026CB2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00026CB7 01                         byte_1ADCB:	dc.b 1
00026CB8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
00026CBD 02                         byte_1ADD1:	dc.b 2
00026CBE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
00026CC3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
00026CC8 01                         byte_1ADDC:	dc.b 1
00026CC9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
00026CCE 00                         byte_1ADE2:	dc.b 0
00026CD0 00                         		even
00026CD0 00                         		even
00026CD0                            
00026CD0                            ; ---------------------------------------------------------------------------
00026CD0                            ; Object touch response	subroutine - collision_flags(a0) in	the object RAM
00026CD0                            ; ---------------------------------------------------------------------------
00026CD0                            
00026CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026CD0                            
00026CD0                            
00026CD0                            TouchResponse:				; XREF: Obj01
00026CD0 4E71                       		nop	
00026CD2 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
00026CD6 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
00026CDA 5142                       		subq.w	#8,d2
00026CDC 7A00                       		moveq	#0,d5
00026CDE 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
00026CE2 5705                       		subq.b	#3,d5
00026CE4 9645                       		sub.w	d5,d3
00026CE6 0C28 0039 001A             		cmpi.b	#$39,mapping_frame(a0)	; is Sonic ducking?
00026CEC 6600                       		bne.s	Touch_NoDuck	; if not, branch
00026CEE 0643 000C                  		addi.w	#$C,d3
00026CF2 7A0A                       		moveq	#$A,d5
00026CF4                            
00026CF4                            Touch_NoDuck:
00026CF4 383C 0010                  		move.w	#$10,d4
00026CF8 DA45                       		add.w	d5,d5
00026CFA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
00026CFE 3C3C 005F                  		move.w	#$5F,d6
00026D02                            
00026D02                            Touch_Loop:
00026D02 4A29 0001                  		tst.b	1(a1)
00026D06 6A00                       		bpl.s	Touch_NextObj
00026D08 1029 0020                  		move.b	collision_flags(a1),d0	; load touch response number
00026D0C 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
00026D0E                            
00026D0E                            Touch_NextObj:
00026D0E 43E9 0040                  		lea	object_size(a1),a1	; next object RAM
00026D12 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
00026D16                            
00026D16 7000                       		moveq	#0,d0
00026D18 4E75                       		rts	
00026D1A                            ; ===========================================================================
00026D1A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
00026D1C 0C14                       		dc.b   $C, $14
00026D1E 140C                       		dc.b  $14,  $C
00026D20 0410                       		dc.b	4, $10
00026D22 0C12                       		dc.b   $C, $12
00026D24 1010                       		dc.b  $10, $10
00026D26 0606                       		dc.b	6,   6
00026D28 180C                       		dc.b  $18,  $C
00026D2A 0C10                       		dc.b   $C, $10
00026D2C 100C                       		dc.b  $10,  $C
00026D2E 0808                       		dc.b	8,   8
00026D30 1410                       		dc.b  $14, $10
00026D32 1408                       		dc.b  $14,   8
00026D34 0E0E                       		dc.b   $E,  $E
00026D36 1818                       		dc.b  $18, $18
00026D38 2810                       		dc.b  $28, $10
00026D3A 1018                       		dc.b  $10, $18
00026D3C 0810                       		dc.b	8, $10
00026D3E 2070                       		dc.b  $20, $70
00026D40 4020                       		dc.b  $40, $20
00026D42 8020                       		dc.b  $80, $20
00026D44 2020                       		dc.b  $20, $20
00026D46 0808                       		dc.b	8,   8
00026D48 0404                       		dc.b	4,   4
00026D4A 2008                       		dc.b  $20,   8
00026D4C 0C0C                       		dc.b   $C,  $C
00026D4E 0804                       		dc.b	8,   4
00026D50 1804                       		dc.b  $18,   4
00026D52 2804                       		dc.b  $28,   4
00026D54 0408                       		dc.b	4,   8
00026D56 0418                       		dc.b	4, $18
00026D58 0428                       		dc.b	4, $28
00026D5A 0420                       		dc.b	4, $20
00026D5C 1818                       		dc.b  $18, $18
00026D5E 0C18                       		dc.b   $C, $18
00026D60 4808                       		dc.b  $48,   8
00026D62                            ; ===========================================================================
00026D62                            
00026D62                            Touch_Height:				; XREF: TouchResponse
00026D62 0240 003F                  		andi.w	#$3F,d0
00026D66 D040                       		add.w	d0,d0
00026D68 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
00026D6C 7200                       		moveq	#0,d1
00026D6E 121A                       		move.b	(a2)+,d1
00026D70 3029 0008                  		move.w	8(a1),d0
00026D74 9041                       		sub.w	d1,d0
00026D76 9042                       		sub.w	d2,d0
00026D78 6400                       		bcc.s	loc_1AE98
00026D7A D241                       		add.w	d1,d1
00026D7C D041                       		add.w	d1,d0
00026D7E 6500                       		bcs.s	Touch_Width
00026D80 6000 FF8C                  		bra.w	Touch_NextObj
00026D84                            ; ===========================================================================
00026D84                            
00026D84                            loc_1AE98:
00026D84 B044                       		cmp.w	d4,d0
00026D86 6200 FF86                  		bhi.w	Touch_NextObj
00026D8A                            
00026D8A                            Touch_Width:
00026D8A 7200                       		moveq	#0,d1
00026D8C 121A                       		move.b	(a2)+,d1
00026D8E 3029 000C                  		move.w	$C(a1),d0
00026D92 9041                       		sub.w	d1,d0
00026D94 9043                       		sub.w	d3,d0
00026D96 6400                       		bcc.s	loc_1AEB6
00026D98 D241                       		add.w	d1,d1
00026D9A D240                       		add.w	d0,d1
00026D9C 6500                       		bcs.s	Touch_ChkValue
00026D9E 6000 FF6E                  		bra.w	Touch_NextObj
00026DA2                            ; ===========================================================================
00026DA2                            
00026DA2                            loc_1AEB6:
00026DA2 B045                       		cmp.w	d5,d0
00026DA4 6200 FF68                  		bhi.w	Touch_NextObj
00026DA8                            
00026DA8                            Touch_ChkValue:
00026DA8 1229 0020                  		move.b	collision_flags(a1),d1	; load touch response number
00026DAC 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
00026DB0 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
00026DB4 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
00026DB8 6700 0000                  		beq.w	Touch_Special	; if yes, branch
00026DBC 4A01                       		tst.b	d1		; is touch response $80-$BF ?
00026DBE 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
00026DC2                            
00026DC2                            ; touch	response is $40-$7F
00026DC2                            
00026DC2 1029 0020                  		move.b	collision_flags(a1),d0
00026DC6 0200 003F                  		andi.b	#$3F,d0
00026DCA 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
00026DCE 6700                       		beq.s	Touch_Monitor	; if yes, branch
00026DD0 0C28 005A 0030             		cmpi.b	#$5A,invulnerable_time(a0)
00026DD6 6400 0000                  		bcc.w	locret_1AEF2
00026DDA 5429 0024                  		addq.b	#2,routine(a1)	; advance the object's routine counter
00026DDE                            
00026DDE                            locret_1AEF2:
00026DDE 4E75                       		rts	
00026DE0                            ; ===========================================================================
00026DE0                            
00026DE0                            Touch_Monitor:
00026DE0                            ;		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
00026DE0                            ;		bne.s	loc_1AF1E_bounce	; if yes, destroy the monitor
00026DE0 4A68 0012                  		tst.w	y_vel(a0)		; is Sonic moving upwards?
00026DE4 6A00                       		bpl.s	loc_1AF1E	; if not, branch
00026DE6 3028 000C                  		move.w	$C(a0),d0
00026DEA 0440 0010                  		subi.w	#$10,d0
00026DEE B069 000C                  		cmp.w	$C(a1),d0
00026DF2 6500                       		bcs.s	loc_1AF1E       ; Changed to loc_1AF1E instead of locret_1AF2E
00026DF4 4468 0012                  		neg.w	y_vel(a0)		; reverse Sonic's y-motion
00026DF8 337C FE80 0012             		move.w	#-$180,y_vel(a1)
00026DFE 4A29 0025                  		tst.b	routine_secondary(a1)
00026E02 6600                       		bne.s	locret_1AF2E
00026E04 5829 0025                  		addq.b	#4,routine_secondary(a1)	; advance the monitor's routine counter
00026E08 4E75                       		rts	
00026E0A                            ; ===========================================================================
00026E0A                            
00026E0A                            loc_1AF1E:
00026E0A 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling/jumping?
00026E10 6600                               bne.s   locret_1AF2E
00026E12                            ;        clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00026E12 4A68 0012                          tst.w   y_vel(a0)       ; is Sonic moving upwards?
00026E16 6D00                               blt.s   loc_1AF1E_2               ; if so, branch, we want Sonic to carry on moving up
00026E18 4468 0012                          neg.w   y_vel(a0)       ; reverse Sonic's y-motion, to give him that bounce off the monitor
00026E1C                            loc_1AF1E_2:
00026E1C 5429 0024                          addq.b	#2,routine(a1)	; advance the monitor's routine counter
00026E20 3348 003E                          move.w  a0,parent(a1)
00026E24 4A38 FF7F                  		tst.b	($FFFFFF7F).w	; is Sonic chasing some object?
00026E28 6700 0000                  		beq.w	BounceJD
00026E2C 0838 0007 D022             		btst	#7,(MainCharacter+status).w	; was the monitor destroyed with a jumpdash?
00026E32 6600 0000                  		bne.w	BounceJD	; if yes, branch	
00026E36                            		
00026E36                            		
00026E36                            locret_1AF2E:
00026E36 4E75                       		rts	
00026E38                            ; ===========================================================================
00026E38                            ; ---------------------------------------------------------------------------
00026E38                            ; Subroutine to Bounce Sonic upwards in Homing Attack
00026E38                            ; ---------------------------------------------------------------------------
00026E38                            
00026E38                            HA_Bounceup:
00026E38 4EF9 0000 0000             	jmp	BounceJD
00026E3E                            
00026E3E                            ; ===========================================================================
00026E3E                            
00026E3E                            Touch_Enemy:				; XREF: Touch_ChkValue
00026E3E 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w	; is Sonic invincible?
00026E44 6600                       		bne.s	loc_1AF40	; if yes, branch
00026E46 0C28 001F 001C             		cmpi.b	#$1F,anim(a0)	; is Sonic Spin Dashing?
00026E4C 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
00026E50 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling?
00026E56 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
00026E5A                            
00026E5A                            loc_1AF40:
00026E5A 4A29 0021                  		tst.b	collision_property(a1)
00026E5E 6700                       		beq.s	Touch_KillEnemy
00026E60 4468 0010                  		neg.w	x_vel(a0)
00026E64 4468 0012                  		neg.w	y_vel(a0)
00026E68 E0E8 0010                  		asr	x_vel(a0)
00026E6C E0E8 0012                  		asr	y_vel(a0)
00026E70 137C 0000 0020             		move.b	#0,collision_flags(a1)
00026E76 5329 0021                  		subq.b	#1,collision_property(a1)
00026E7A 6600                       		bne.s	locret_1AF68
00026E7C 08E9 0007 0022             		bset	#7,status(a1)
00026E82                            
00026E82                            locret_1AF68:
00026E82 4E75                       		rts	
00026E84                            ; ===========================================================================
00026E84                            
00026E84                            Touch_KillEnemy:
00026E84 08E9 0007 0022             		bset	#7,status(a1)
00026E8A 7000                       		moveq	#0,d0
00026E8C 3038 F7D0                  		move.w	(Chain_Bonus_counter).w,d0
00026E90 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w ; add 2 to item bonus counter
00026E94 0C40 0006                  		cmpi.w	#6,d0
00026E98 6500                       		bcs.s	loc_1AF82
00026E9A 7006                       		moveq	#6,d0
00026E9C                            
00026E9C                            loc_1AF82:
00026E9C 3340 003E                  		move.w	d0,parent(a1)
00026EA0 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
00026EA4 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 enemies been destroyed?
00026EAA 6500                       		bcs.s	loc_1AF9C	; if not, branch
00026EAC 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
00026EB0 337C 000A 003E             		move.w	#$A,parent(a1)
00026EB6                            
00026EB6                            loc_1AF9C:
00026EB6 4EB9 0000 0000             		jsr	AddPoints
00026EBC 4EBA FF7A                  		jsr	HA_Bounceup	; Bounce Sonic upwards if is Homing Attack
00026EC0                            ;		clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00026EC0 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
00026EC4 137C 0000 0024             		move.b	#0,routine(a1)
00026ECA 0828 0007 0022             		btst	#7,$22(a0)	; was the enemy destroyed with a jumpdash?
00026ED0 6600                       		bne.s	JSR_BounceJD	; if yes, branch
00026ED2 6000                       		bra.s	loc_1AF9C_cont	; if not, skip
00026ED4                            		
00026ED4                            JSR_BounceJD:
00026ED4 4EB9 0000 0000             		jsr	BounceJD	; jump to BounceJD
00026EDA                            		
00026EDA                            loc_1AF9C_cont:
00026EDA 4A68 0012                  		tst.w	y_vel(a0)
00026EDE 6B00                       		bmi.s	loc_1AFC2
00026EE0 3028 000C                  		move.w	$C(a0),d0
00026EE4 B069 000C                  		cmp.w	$C(a1),d0
00026EE8 6400                       		bcc.s	loc_1AFCA
00026EEA 4468 0012                  		neg.w	y_vel(a0)
00026EEE 4E75                       		rts	
00026EF0                            ; ===========================================================================
00026EF0                            
00026EF0                            loc_1AFC2:
00026EF0 0668 0100 0012             		addi.w	#$100,y_vel(a0)
00026EF6 4E75                       		rts	
00026EF8                            ; ===========================================================================
00026EF8                            
00026EF8                            loc_1AFCA:
00026EF8 0468 0100 0012             		subi.w	#$100,y_vel(a0)
00026EFE 4E75                       		rts	
00026F00                            ; ===========================================================================
00026F00 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
00026F08                            ; ===========================================================================
00026F08                            
00026F08                            
00026F08                            
00026F08                            ; -------------------------------------------------------------------------
00026F08                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00026F08                            ; Jumpdash again when he has performed a Jumpdash
00026F08                            ; -------------------------------------------------------------------------
00026F08                            
00026F08                            BounceJD:
00026F08 08B8 0007 D022             		bclr	#7,(MainCharacter+status).w	; clear jumpdash flag
00026F0E 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
00026F12 6700                       		beq.s	BounceJD_End	; if not, branch
00026F14 4238 FF7F                  		clr.b	($FFFFFF7F).w	; if yes, clear HA flag (allow Sonic to HA again)
00026F18 4268 0010                  		clr.w	$10(a0)		; clear X-velocity (stop sonic)
00026F1C 317C FA10 0012             		move.w	#-$5F0,$12(a0)	; move sonic upwards
00026F22 0828 0006 0022             		btst	#6,$22(a0)	; is sonic underwater?
00026F28 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00026F2A 317C FCE0 0012             		move.w	#-$320,$12(a0)
00026F30                            		
00026F30                            BounceJD_Shoes:
00026F30 0828 0002 002B             		btst	#2,status_secondary(a0)	; does sonic has speed shoes?
00026F36 6700                       		beq.s	BounceJD_End	; if not, branch
00026F38 317C F9E0 0012             		move.w	#-$620,$12(a0)	; use -$620 for Y-velocity (move sonic upwards)
00026F3E                            		
00026F3E                            BounceJD_End:
00026F3E 4E75                       		rts			; return
00026F40                            ; End of function BounceJD
00026F40                            
00026F40                            loc_1AFDA:				; XREF: Touch_CatKiller
00026F40 08E9 0007 0022             		bset	#7,status(a1)
00026F46                            
00026F46                            Touch_ChkHurt:				; XREF: Touch_ChkValue
00026F46 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00026F4C 6700                       		beq.s	loc_1AFE6
00026F4E 0838 0001 D02B             		btst	#1,(Maincharacter+status_secondary).w	; is Sonic invincible?
00026F54 6700                       		beq.s	Touch_Hurt	; if not, branch
00026F56                            
00026F56                            loc_1AFE6:				; XREF: Touch_Hurt
00026F56 70FF                       		moveq	#-1,d0
00026F58 4E75                       		rts	
00026F5A                            ; ===========================================================================
00026F5A                            
00026F5A                            Touch_Hurt:				; XREF: Touch_ChkHurt
00026F5A 4E71                       		nop	
00026F5C 4A28 0030                  		tst.b	$30(a0)
00026F60 66F4                       		bne.s	loc_1AFE6
00026F62 2449                       		movea.l	a1,a2
00026F64                            
00026F64                            ; End of function TouchResponse
00026F64                            ; continue straight to HurtSonic
00026F64                            
00026F64                            ; ---------------------------------------------------------------------------
00026F64                            ; Hurting Sonic	subroutine
00026F64                            ; ---------------------------------------------------------------------------
00026F64                            
00026F64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026F64                            
00026F64                            
00026F64                            HurtSonic:
00026F64 0828 0000 002B             		btst	#0,status_secondary(a0)	; does Sonic have a shield?
00026F6A 6600                       		bne.s	Hurt_Shield	; if yes, branch
00026F6C 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
00026F70 6700 0000                  		beq.w	KillCharacter	; if not, branch
00026F74 4EB9 0001 687C             		jsr	SingleObjLoad
00026F7A 6600                       		bne.s	Hurt_Shield
00026F7C 0C28 0006 003B             		cmpi.b	#6,$3B(a0) ; has Sonic been hurt 6 times already?
00026F82 6C00                       		bge.s	@LoadRings ; if yes, branch
00026F84 5228 003B                  		addq.b	#1,$3B(a0) ; increase the hit counter
00026F88                            @LoadRings:
00026F88 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
00026F8C 3368 0008 0008             		move.w	8(a0),8(a1)
00026F92 3368 000C 000C             		move.w	$C(a0),$C(a1)
00026F98                            
00026F98                            Hurt_Shield:
00026F98 08A8 0000 002B             		bclr	#0,status_secondary(a0) ; remove shield
00026F9E 117C 0004 0024             		move.b	#4,routine(a0)
00026FA4 4EB9 0001 DFAA             		jsr	Sonic_ResetOnFloor
00026FAA 08E8 0001 0022             		bset	#1,status(a0)
00026FB0 317C FC00 0012             		move.w	#-$400,y_vel(a0)	; make Sonic bounce away from the object
00026FB6 317C FE00 0010             		move.w	#-$200,x_vel(a0)
00026FBC 0828 0006 0022             		btst	#6,status(a0)
00026FC2 6700                       		beq.s	Hurt_Reverse
00026FC4 317C FE00 0012             		move.w	#-$200,y_vel(a0)
00026FCA 317C FF00 0010             		move.w	#-$100,x_vel(a0)
00026FD0                            
00026FD0                            Hurt_Reverse:
00026FD0 3028 0008                  		move.w	8(a0),d0
00026FD4 B06A 0008                  		cmp.w	8(a2),d0
00026FD8 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
00026FDA 4468 0010                  		neg.w	x_vel(a0)		; if Sonic is right of the object, reverse
00026FDE                            
00026FDE                            Hurt_ChkSpikes:
00026FDE 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
00026FE4 317C 0000 0020             		move.w	#0,inertia(a0)
00026FEA 117C 001A 001C             		move.b	#$1A,anim(a0)
00026FF0 317C 0078 0030             		move.w	#$78,$30(a0)
00026FF6 317C 0000 0020             		move.w	#0,inertia(a0)
00026FFC 117C 001A 001C             		move.b	#$1A,anim(a0)
00027002 117C 0078 0030             		move.b	#$78,$30(a0)
00027008 303C 0035                  		move.w	#$35,d0		; load normal damage sound
0002700C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
00027010 6600                       		bne.s	Hurt_Sound	; if not, branch
00027012 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
00027016 6600                       		bne.s	Hurt_Sound	; if not, branch
00027018 303C 0037                  		move.w	#$37,d0		; load spikes damage sound
0002701C                            
0002701C                            Hurt_Sound:
0002701C 4EB9 0000 3212             		jsr	(PlaySound).l
00027022 70FF                       		moveq	#-1,d0
00027024 4E75                       		rts	
00027026                            ; ===========================================================================
00027026                            
00027026                            KillCharacter_Superrestorespeed:
00027026 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0002702A 4EB9 0001 E904             		jsr	ApplySpeedSettings	; Fetch Speed settings
00027030 4E75                       		rts
00027032                            ; End of function HurtSonic
00027032                            
00027032                            ; ---------------------------------------------------------------------------
00027032                            ; Subroutine to	kill Sonic
00027032                            ; ---------------------------------------------------------------------------
00027032                            
00027032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027032                            
00027032                            
00027032                            KillCharacter:				; CODE XREF: sub_5352+38p
00027032                            					; ROM:0000CF6Ap ...
00027032 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
00027038 6700 0000                  		beq.w	Kill_NoDeath
0002703C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00027042 6700 0000                  		beq.w	Kill_NoDeath
00027046 4A78 FE08                  		tst.w	($FFFFFE08).w
0002704A 6600 0000                  		bne.w	Kill_NoDeath
0002704E 11FC 0001 FFC6             		move.b	#1,(sonickilled).w   ; Mark sonic as dead
00027054 11FC 0000 FFBE             		move.b	#0,(palcheck).w   ; Mark sonic as dead
0002705A 4A38 FE19                  		tst.b	($FFFFFE19).w
0002705E 6700                       		beq.s	Kill_NotSuper
00027060 4238 FE19                  		clr.b	($FFFFFE19).w
00027064 21FC 0000 0000 D004        		move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load Sonic's normal mappings.
0002706C 4EB9 0001 DAEA             		jsr		super_GetBgm
00027072 11FC 0002 F65F             		move.b    #2,($FFFFF65F).w; Remove rotating palette
00027078 31FC 0028 F65C             		move.w    #$28,($FFFFF65C).w; Unknown
0002707E 11FC 0000 FE19             		move.b    #0,($FFFFFE19).w
00027084 117C 0001 001D             		move.b    #1,next_anim(a0); Change animation back to normal ?
0002708A 4EB9 0002 7026             		jsr		(KillCharacter_Superrestorespeed).l
00027090                            
00027090                            Kill_NotSuper:				; CODE XREF: sub_1F3D8+Aj
00027090 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w	; clear lives counter
00027096 11FC 0000 FE1A             		move.b	#0,($FFFFFE1A).w
0002709C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000270A2 4228 002B                  		clr.b	status_secondary(a0)
000270A6                            ;KillSubSRAM:
000270A6                            ;		cmpi.b #0,($FFFFFE12).w
000270A6                            ;		beq.w	KillZero
000270A6                            ;		subi.b	#$1,($200001).l
000270A6                            ;		move.b	($200001).l,($20011F).l
000270A6                            ;		subi.b	#$1,($200080).l
000270A6                            ;KillZero:
000270A6 117C 0006 0024             		move.b	#6,routine(a0)
000270AC 4EB9 0001 DFAA             		jsr	Sonic_ResetOnFloor
000270B2 08E8 0001 0022             		bset	#1,status(a0)
000270B8 317C F900 0012             		move.w	#-$700,y_vel(a0)
000270BE 317C 0000 0010             		move.w	#0,x_vel(a0)
000270C4 317C 0000 0020             		move.w	#0,inertia(a0)
000270CA 3168 000C 0038             		move.w	$C(a0),$38(a0)
000270D0 117C 0018 001C             		move.b	#$18,anim(a0)
000270D6 08E8 0007 0002             		bset	#7,2(a0)
000270DC 303C 0035                  		move.w	#$35,d0	; '?'
000270E0 0C12 0036                  		cmpi.b	#$36,(a2) ; '6'
000270E4 6600                       		bne.s	loc_1F444
000270E6 303C 0037                  		move.w	#$37,d0	; '|'
000270EA                            
000270EA                            loc_1F444:				; CODE XREF: sub_1F3D8+66j
000270EA 4EB9 0000 325C             		jsr	(PlaySound_Special).l
000270F0                            
000270F0                            Kill_NoDeath:				; CODE XREF: sub_1F3D8+4j
000270F0 70FF                       		moveq	#-1,d0
000270F2 4E75                       		rts
000270F4                            
000270F4                            ; End of function KillCharacter
000270F4                            
000270F4                            
000270F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000270F4                            
000270F4                            
000270F4                            Touch_Special:				; XREF: Touch_ChkValue
000270F4 1229 0020                  		move.b	collision_flags(a1),d1
000270F8 0201 003F                  		andi.b	#$3F,d1
000270FC 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
00027100 6700                       		beq.s	Touch_CatKiller	; if yes, branch
00027102 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
00027106 6700                       		beq.s	Touch_Yadrin	; if yes, branch
00027108 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0002710C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0002710E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
00027112 6700                       		beq.s	Touch_D7orE1	; if yes, branch
00027114 4E75                       		rts	
00027116                            ; ===========================================================================
00027116                            
00027116                            Touch_CatKiller:			; XREF: Touch_Special
00027116 6000 FE28                  		bra.w	loc_1AFDA
0002711A                            ; ===========================================================================
0002711A                            
0002711A                            Touch_Yadrin:				; XREF: Touch_Special
0002711A 9A40                       		sub.w	d0,d5
0002711C 0C45 0008                  		cmpi.w	#8,d5
00027120 6400                       		bcc.s	loc_1B144
00027122 3029 0008                  		move.w	8(a1),d0
00027126 5940                       		subq.w	#4,d0
00027128 0829 0000 0022             		btst	#0,status(a1)
0002712E 6700                       		beq.s	loc_1B130
00027130 0440 0010                  		subi.w	#$10,d0
00027134                            
00027134                            loc_1B130:
00027134 9042                       		sub.w	d2,d0
00027136 6400                       		bcc.s	loc_1B13C
00027138 0640 0018                  		addi.w	#$18,d0
0002713C 6500                       		bcs.s	loc_1B140
0002713E 6000                       		bra.s	loc_1B144
00027140                            ; ===========================================================================
00027140                            
00027140                            loc_1B13C:
00027140 B044                       		cmp.w	d4,d0
00027142 6200                       		bhi.s	loc_1B144
00027144                            
00027144                            loc_1B140:
00027144 6000 FE00                  		bra.w	Touch_ChkHurt
00027148                            ; ===========================================================================
00027148                            
00027148                            loc_1B144:
00027148 6000 FCF4                  		bra.w	Touch_Enemy
0002714C                            ; ===========================================================================
0002714C                            
0002714C                            Touch_D7orE1:				; XREF: Touch_Special
0002714C 5229 0021                  		addq.b	#1,collision_property(a1)
00027150 4E75                       		rts	
00027152                            ; End of function Touch_Special
00027152                            
00027152                            ; ---------------------------------------------------------------------------
00027152                            ; Subroutine to	show the special stage layout
00027152                            ; ---------------------------------------------------------------------------
00027152                            
00027152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027152                            
00027152                            
00027152                            SS_ShowLayout:				; XREF: SpecialStage
00027152 4EB9 0000 0000             		jsr	SS_AniWallsRings
00027158 4EB9 0000 0000             		jsr	SS_AniItems
0002715E 3F05                       		move.w	d5,-(sp)
00027160 43F8 8000                  		lea	($FFFF8000).w,a1
00027164 1038 F780                  		move.b	($FFFFF780).w,d0
00027168                            ;		andi.b	#$FC,d0
00027168 4EB9 0000 8F30             		jsr	(CalcSine).l
0002716E 3800                       		move.w	d0,d4
00027170 3A01                       		move.w	d1,d5
00027172 C9FC 0018                  		muls.w	#$18,d4
00027176 CBFC 0018                  		muls.w	#$18,d5
0002717A 7400                       		moveq	#0,d2
0002717C 3438 F700                  		move.w	($FFFFF700).w,d2
00027180 84FC 0018                  		divu.w	#$18,d2
00027184 4842                       		swap	d2
00027186 4442                       		neg.w	d2
00027188 0642 FF4C                  		addi.w	#-$B4,d2
0002718C 7600                       		moveq	#0,d3
0002718E 3638 F704                  		move.w	($FFFFF704).w,d3
00027192 86FC 0018                  		divu.w	#$18,d3
00027196 4843                       		swap	d3
00027198 4443                       		neg.w	d3
0002719A 0643 FF4C                  		addi.w	#-$B4,d3
0002719E 3E3C 000F                  		move.w	#$F,d7
000271A2                            
000271A2                            loc_1B19E:
000271A2 48A7 E000                  		movem.w	d0-d2,-(sp)
000271A6 48A7 C000                  		movem.w	d0-d1,-(sp)
000271AA 4440                       		neg.w	d0
000271AC C3C2                       		muls.w	d2,d1
000271AE C1C3                       		muls.w	d3,d0
000271B0 2C00                       		move.l	d0,d6
000271B2 DC81                       		add.l	d1,d6
000271B4 4C9F 0003                  		movem.w	(sp)+,d0-d1
000271B8 C1C2                       		muls.w	d2,d0
000271BA C3C3                       		muls.w	d3,d1
000271BC D280                       		add.l	d0,d1
000271BE 2406                       		move.l	d6,d2
000271C0 3C3C 000F                  		move.w	#$F,d6
000271C4                            
000271C4                            loc_1B1C0:
000271C4 2002                       		move.l	d2,d0
000271C6 E080                       		asr.l	#8,d0
000271C8 32C0                       		move.w	d0,(a1)+
000271CA 2001                       		move.l	d1,d0
000271CC E080                       		asr.l	#8,d0
000271CE 32C0                       		move.w	d0,(a1)+
000271D0 D485                       		add.l	d5,d2
000271D2 D284                       		add.l	d4,d1
000271D4 51CE FFEE                  		dbf	d6,loc_1B1C0
000271D8                            
000271D8 4C9F 0007                  		movem.w	(sp)+,d0-d2
000271DC 0643 0018                  		addi.w	#$18,d3
000271E0 51CF FFC0                  		dbf	d7,loc_1B19E
000271E4                            
000271E4 3A1F                       		move.w	(sp)+,d5
000271E6 41F9 00FF 0000             		lea	($FF0000).l,a0
000271EC 7000                       		moveq	#0,d0
000271EE 3038 F704                  		move.w	($FFFFF704).w,d0
000271F2 80FC 0018                  		divu.w	#$18,d0
000271F6 C0FC 0080                  		mulu.w	#$80,d0
000271FA D1C0                       		adda.l	d0,a0
000271FC 7000                       		moveq	#0,d0
000271FE 3038 F700                  		move.w	($FFFFF700).w,d0
00027202 80FC 0018                  		divu.w	#$18,d0
00027206 D0C0                       		adda.w	d0,a0
00027208 49F8 8000                  		lea	($FFFF8000).w,a4
0002720C 3E3C 000F                  		move.w	#$F,d7
00027210                            
00027210                            loc_1B20C:
00027210 3C3C 000F                  		move.w	#$F,d6
00027214                            
00027214                            loc_1B210:
00027214 7000                       		moveq	#0,d0
00027216 1018                       		move.b	(a0)+,d0
00027218 6700                       		beq.s	loc_1B268
0002721A 0C00 004E                  		cmpi.b	#$4E,d0
0002721E 6200                       		bhi.s	loc_1B268
00027220 3614                       		move.w	(a4),d3
00027222 0643 0120                  		addi.w	#$120,d3
00027226 0C43 0070                  		cmpi.w	#$70,d3
0002722A 6500                       		bcs.s	loc_1B268
0002722C 0C43 01D0                  		cmpi.w	#$1D0,d3
00027230 6400                       		bcc.s	loc_1B268
00027232 342C 0002                  		move.w	2(a4),d2
00027236 0642 00F0                  		addi.w	#$F0,d2
0002723A 0C42 0070                  		cmpi.w	#$70,d2
0002723E 6500                       		bcs.s	loc_1B268
00027240 0C42 0170                  		cmpi.w	#$170,d2
00027244 6400                       		bcc.s	loc_1B268
00027246 4BF9 00FF 4000             		lea	($FF4000).l,a5
0002724C E748                       		lsl.w	#3,d0
0002724E 4BF5 0000                  		lea	(a5,d0.w),a5
00027252 225D                       		movea.l	(a5)+,a1
00027254 321D                       		move.w	(a5)+,d1
00027256 D241                       		add.w	d1,d1
00027258 D2F1 1000                  		adda.w	(a1,d1.w),a1
0002725C 365D                       		movea.w	(a5)+,a3
0002725E 7200                       		moveq	#0,d1
00027260 1219                       		move.b	(a1)+,d1
00027262 5301                       		subq.b	#1,d1
00027264 6B00                       		bmi.s	loc_1B268
00027266 4EB9 0001 5FD0             		jsr	sub_D762
0002726C                            
0002726C                            loc_1B268:
0002726C 584C                       		addq.w	#4,a4
0002726E 51CE FFA4                  		dbf	d6,loc_1B210
00027272                            
00027272 41E8 0070                  		lea	$70(a0),a0
00027276 51CF FF98                  		dbf	d7,loc_1B20C
0002727A                            
0002727A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0002727E 0C05 0050                  		cmpi.b	#$50,d5
00027282 6700                       		beq.s	loc_1B288
00027284 24BC 0000 0000             		move.l	#0,(a2)
0002728A 4E75                       		rts	
0002728C                            ; ===========================================================================
0002728C                            
0002728C                            loc_1B288:
0002728C 157C 0000 FFFB             		move.b	#0,-5(a2)
00027292 4E75                       		rts
00027294                            ; End of function SS_ShowLayout
00027294                            
00027294                            ; ---------------------------------------------------------------------------
00027294                            ; Subroutine to	animate	walls and rings	in the special stage
00027294                            ; ---------------------------------------------------------------------------
00027294                            
00027294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027294                            
00027294                            
00027294                            SS_AniWallsRings:			; XREF: SS_ShowLayout
00027294                            ;		lea	($FF400C).l,a1
00027294                            ;		moveq	#0,d0
00027294                            ;		move.b	($FFFFF780).w,d0
00027294                            ;		lsr.b	#2,d0
00027294                            ;		andi.w	#$F,d0
00027294                            ;		moveq	#$23,d1
00027294                            
00027294                            ;loc_1B2A4:
00027294                            ;		move.w	d0,(a1)
00027294                            ;		addq.w	#8,a1
00027294                            ;		dbf	d1,loc_1B2A4
00027294                            
00027294 43F9 00FF 4005             		lea	($FF4005).l,a1
0002729A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0002729E 6A00                       		bpl.s	loc_1B2C8
000272A0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000272A6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000272AA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000272B0                            
000272B0                            loc_1B2C8:
000272B0 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
000272B6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000272BA 6A00                       		bpl.s	loc_1B2E4
000272BC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000272C2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000272C6 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
000272CC                            
000272CC                            loc_1B2E4:
000272CC 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
000272D0 1340 0138                  		move.b	d0,$138(a1)
000272D4 1340 0160                  		move.b	d0,$160(a1)
000272D8 1340 0148                  		move.b	d0,$148(a1)
000272DC 1340 0150                  		move.b	d0,$150(a1)
000272E0 1340 01D8                  		move.b	d0,$1D8(a1)
000272E4 1340 01E0                  		move.b	d0,$1E0(a1)
000272E8 1340 01E8                  		move.b	d0,$1E8(a1)
000272EC 1340 01F0                  		move.b	d0,$1F0(a1)
000272F0 1340 01F8                  		move.b	d0,$1F8(a1)
000272F4 1340 0200                  		move.b	d0,$200(a1)
000272F8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000272FC 6A00                       		bpl.s	loc_1B326
000272FE 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
00027304 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
00027308 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0002730E                            
0002730E                            loc_1B326:
0002730E 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
00027312 1340 0168                  		move.b	d0,$168(a1)
00027316 1340 0170                  		move.b	d0,$170(a1)
0002731A 1340 0178                  		move.b	d0,$178(a1)
0002731E 1340 0180                  		move.b	d0,$180(a1)
00027322 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00027326 6A00                       		bpl.s	loc_1B350
00027328 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0002732E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00027332 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00027338                            
00027338                            loc_1B350:
00027338 43F9 00FF 4016             		lea	($FF4016).l,a1
0002733E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
00027344 7000                       		moveq	#0,d0
00027346 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0002734A D040                       		add.w	d0,d0
0002734C 41F0 0000                  		lea	(a0,d0.w),a0
00027350 3290                       		move.w	(a0),(a1)
00027352 3368 0002 0008             		move.w	2(a0),8(a1)
00027358 3368 0004 0010             		move.w	4(a0),$10(a1)
0002735E 3368 0006 0018             		move.w	6(a0),priority(a1)
00027364 3368 0008 0020             		move.w	8(a0),$20(a1)
0002736A 3368 000A 0028             		move.w	$A(a0),$28(a1)
00027370 3368 000C 0030             		move.w	$C(a0),$30(a1)
00027376 3368 000E 0038             		move.w	$E(a0),$38(a1)
0002737C D0FC 0020                  		adda.w	#$20,a0
00027380 D2FC 0048                  		adda.w	#$48,a1
00027384 3290                       		move.w	(a0),(a1)
00027386 3368 0002 0008             		move.w	2(a0),8(a1)
0002738C 3368 0004 0010             		move.w	4(a0),$10(a1)
00027392 3368 0006 0018             		move.w	6(a0),priority(a1)
00027398 3368 0008 0020             		move.w	8(a0),$20(a1)
0002739E 3368 000A 0028             		move.w	$A(a0),$28(a1)
000273A4 3368 000C 0030             		move.w	$C(a0),$30(a1)
000273AA 3368 000E 0038             		move.w	$E(a0),$38(a1)
000273B0 D0FC 0020                  		adda.w	#$20,a0
000273B4 D2FC 0048                  		adda.w	#$48,a1
000273B8 3290                       		move.w	(a0),(a1)
000273BA 3368 0002 0008             		move.w	2(a0),8(a1)
000273C0 3368 0004 0010             		move.w	4(a0),$10(a1)
000273C6 3368 0006 0018             		move.w	6(a0),priority(a1)
000273CC 3368 0008 0020             		move.w	8(a0),$20(a1)
000273D2 3368 000A 0028             		move.w	$A(a0),$28(a1)
000273D8 3368 000C 0030             		move.w	$C(a0),$30(a1)
000273DE 3368 000E 0038             		move.w	$E(a0),$38(a1)
000273E4 D0FC 0020                  		adda.w	#$20,a0
000273E8 D2FC 0048                  		adda.w	#$48,a1
000273EC 3290                       		move.w	(a0),(a1)
000273EE 3368 0002 0008             		move.w	2(a0),8(a1)
000273F4 3368 0004 0010             		move.w	4(a0),$10(a1)
000273FA 3368 0006 0018             		move.w	6(a0),priority(a1)
00027400 3368 0008 0020             		move.w	8(a0),$20(a1)
00027406 3368 000A 0028             		move.w	$A(a0),$28(a1)
0002740C 3368 000C 0030             		move.w	$C(a0),$30(a1)
00027412 3368 000E 0038             		move.w	$E(a0),$38(a1)
00027418 D0FC 0020                  		adda.w	#$20,a0
0002741C D2FC 0048                  		adda.w	#$48,a1
00027420 4E75                       		rts	
00027422                            ; End of function SS_AniWallsRings
00027422                            
00027422                            SS_LoadWalls:
00027422 7000                       		moveq	#0,d0
00027424 1038 F780                  		move.b	(v_ssangle).w,d0	; get the Special Stage angle
00027428 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
0002742A 0240 000F                  		andi.w	#$F,d0
0002742E B038 F784                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
00027432 6700                       		beq.s	@return			; if so, branch
00027434                            	
00027434 4DF9 00C0 0000             		lea	($C00000).l,a6
0002743A 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
00027440 3200                       		move.w	d0,d1
00027442 E149                       		lsl.w	#8,d1
00027444 D241                       		add.w	d1,d1
00027446 D2C1                       		add.w	d1,a1
00027448                            		
00027448 23FC 6840 0000 00C0 0004   		move.l  #$68400000,($C00004).l			; VRAM address
00027452                            		
00027452 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
00027456 4EB9 0000 0000             		jsr	LoadTiles
0002745C 11C0 F784                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
00027460                            		
00027460                            	@return:
00027460 4E75                       		rts
00027462                            
00027462                            ; ===========================================================================
00027462 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00027472 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00027482 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
00027492 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
000274A2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
000274B2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
000274C2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
000274D2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
000274E2                            ; ---------------------------------------------------------------------------
000274E2                            ; Subroutine to	remove items when you collect them in the special stage
000274E2                            ; ---------------------------------------------------------------------------
000274E2                            
000274E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000274E2                            
000274E2                            
000274E2                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
000274E2 45F9 00FF 4400             		lea	($FF4400).l,a2
000274E8 303C 001F                  		move.w	#$1F,d0
000274EC                            
000274EC                            loc_1B4C4:
000274EC 4A12                       		tst.b	(a2)
000274EE 6700                       		beq.s	locret_1B4CE
000274F0 504A                       		addq.w	#8,a2
000274F2 51C8 FFF8                  		dbf	d0,loc_1B4C4
000274F6                            
000274F6                            locret_1B4CE:
000274F6 4E75                       		rts	
000274F8                            ; End of function SS_RemoveCollectedItem
000274F8                            
000274F8                            
000274F8                            
000274F8                            ; ---------------------------------------------------------------------------
000274F8                            ; Subroutine to	animate	special	stage items when you touch them
000274F8                            ; ---------------------------------------------------------------------------
000274F8                            
000274F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000274F8                            
000274F8                            
000274F8                            SS_AniItems:				; XREF: SS_ShowLayout
000274F8 41F9 00FF 4400             		lea	($FF4400).l,a0
000274FE 3E3C 001F                  		move.w	#$1F,d7
00027502                            
00027502                            loc_1B4DA:
00027502 7000                       		moveq	#0,d0
00027504 1010                       		move.b	(a0),d0
00027506 6700                       		beq.s	loc_1B4E8
00027508 E548                       		lsl.w	#2,d0
0002750A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0002750E 4E91                       		jsr	(a1)
00027510                            
00027510                            loc_1B4E8:
00027510 5048                       		addq.w	#8,a0
00027512                            
00027512                            loc_1B4EA:
00027512 51CF FFEE                  		dbf	d7,loc_1B4DA
00027516                            
00027516 4E75                       		rts	
00027518                            ; End of function SS_AniItems
00027518                            
00027518                            ; ===========================================================================
00027518 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0002751C 0000 0000                  		dc.l SS_AniBumper
00027520 0000 0000                  		dc.l SS_Ani1Up
00027524 0000 0000                  		dc.l SS_AniReverse
00027528 0000 0000                  		dc.l SS_AniEmeraldSparks
0002752C 0000 0000                  		dc.l SS_AniGlassBlock
00027530                            ; ===========================================================================
00027530                            
00027530                            SS_AniRingSparks:			; XREF: SS_AniIndex
00027530 5328 0002                  		subq.b	#1,2(a0)
00027534 6A00                       		bpl.s	locret_1B530
00027536 117C 0005 0002             		move.b	#5,2(a0)
0002753C 7000                       		moveq	#0,d0
0002753E 1028 0003                  		move.b	3(a0),d0
00027542 5228 0003                  		addq.b	#1,3(a0)
00027546 2268 0004                  		movea.l	4(a0),a1
0002754A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0002754E 1280                       		move.b	d0,(a1)
00027550 6600                       		bne.s	locret_1B530
00027552 4290                       		clr.l	(a0)
00027554 42A8 0004                  		clr.l	4(a0)
00027558                            
00027558                            locret_1B530:
00027558 4E75                       		rts	
0002755A                            ; ===========================================================================
0002755A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
00027560                            ; ===========================================================================
00027560                            
00027560                            SS_AniBumper:				; XREF: SS_AniIndex
00027560 5328 0002                  		subq.b	#1,2(a0)
00027564 6A00                       		bpl.s	locret_1B566
00027566 117C 0007 0002             		move.b	#7,2(a0)
0002756C 7000                       		moveq	#0,d0
0002756E 1028 0003                  		move.b	3(a0),d0
00027572 5228 0003                  		addq.b	#1,3(a0)
00027576 2268 0004                  		movea.l	4(a0),a1
0002757A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0002757E 6600                       		bne.s	loc_1B564
00027580 4290                       		clr.l	(a0)
00027582 42A8 0004                  		clr.l	4(a0)
00027586 12BC 0025                  		move.b	#$25,(a1)
0002758A 4E75                       		rts	
0002758C                            ; ===========================================================================
0002758C                            
0002758C                            loc_1B564:
0002758C 1280                       		move.b	d0,(a1)
0002758E                            
0002758E                            locret_1B566:
0002758E 4E75                       		rts	
00027590                            ; ===========================================================================
00027590 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
00027596                            ; ===========================================================================
00027596                            
00027596                            SS_Ani1Up:				; XREF: SS_AniIndex
00027596 5328 0002                  		subq.b	#1,2(a0)
0002759A 6A00                       		bpl.s	locret_1B596
0002759C 117C 0005 0002             		move.b	#5,2(a0)
000275A2 7000                       		moveq	#0,d0
000275A4 1028 0003                  		move.b	3(a0),d0
000275A8 5228 0003                  		addq.b	#1,3(a0)
000275AC 2268 0004                  		movea.l	4(a0),a1
000275B0 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
000275B4 1280                       		move.b	d0,(a1)
000275B6 6600                       		bne.s	locret_1B596
000275B8 4290                       		clr.l	(a0)
000275BA 42A8 0004                  		clr.l	4(a0)
000275BE                            
000275BE                            locret_1B596:
000275BE 4E75                       		rts	
000275C0                            ; ===========================================================================
000275C0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
000275C6                            ; ===========================================================================
000275C6                            
000275C6                            SS_AniReverse:				; XREF: SS_AniIndex
000275C6 5328 0002                  		subq.b	#1,2(a0)
000275CA 6A00                       		bpl.s	locret_1B5CC
000275CC 117C 0007 0002             		move.b	#7,2(a0)
000275D2 7000                       		moveq	#0,d0
000275D4 1028 0003                  		move.b	3(a0),d0
000275D8 5228 0003                  		addq.b	#1,3(a0)
000275DC 2268 0004                  		movea.l	4(a0),a1
000275E0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
000275E4 6600                       		bne.s	loc_1B5CA
000275E6 4290                       		clr.l	(a0)
000275E8 42A8 0004                  		clr.l	4(a0)
000275EC 12BC 002B                  		move.b	#$2B,(a1)
000275F0 4E75                       		rts	
000275F2                            ; ===========================================================================
000275F2                            
000275F2                            loc_1B5CA:
000275F2 1280                       		move.b	d0,(a1)
000275F4                            
000275F4                            locret_1B5CC:
000275F4 4E75                       		rts	
000275F6                            ; ===========================================================================
000275F6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
000275FC                            ; ===========================================================================
000275FC                            
000275FC                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
000275FC 5328 0002                  		subq.b	#1,2(a0)
00027600 6A00                       		bpl.s	locret_1B60C
00027602 117C 0005 0002             		move.b	#5,2(a0)
00027608 7000                       		moveq	#0,d0
0002760A 1028 0003                  		move.b	3(a0),d0
0002760E 5228 0003                  		addq.b	#1,3(a0)
00027612 2268 0004                  		movea.l	4(a0),a1
00027616 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0002761A 1280                       		move.b	d0,(a1)
0002761C 6600                       		bne.s	locret_1B60C
0002761E 4290                       		clr.l	(a0)
00027620 42A8 0004                  		clr.l	4(a0)
00027624 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0002762A 303C 006A                  		move.w	#$6A,d0
0002762E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
00027634                            
00027634                            locret_1B60C:
00027634 4E75                       		rts	
00027636                            ; ===========================================================================
00027636 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0002763C                            ; ===========================================================================
0002763C                            
0002763C                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0002763C 5328 0002                  		subq.b	#1,2(a0)
00027640 6A00                       		bpl.s	locret_1B640
00027642 117C 0001 0002             		move.b	#1,2(a0)
00027648 7000                       		moveq	#0,d0
0002764A 1028 0003                  		move.b	3(a0),d0
0002764E 5228 0003                  		addq.b	#1,3(a0)
00027652 2268 0004                  		movea.l	4(a0),a1
00027656 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0002765A 1280                       		move.b	d0,(a1)
0002765C 6600                       		bne.s	locret_1B640
0002765E 12A8 0004                  		move.b	4(a0),(a1)
00027662 4290                       		clr.l	(a0)
00027664 42A8 0004                  		clr.l	4(a0)
00027668                            
00027668                            locret_1B640:
00027668 4E75                       		rts	
0002766A                            ; ===========================================================================
0002766A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
00027674                            ; ---------------------------------------------------------------------------
00027674                            ; Special stage	layout pointers
00027674                            ; ---------------------------------------------------------------------------
00027674                            SS_LayoutIndex:
00027674                            	include "_inc\Special stage layout pointers.asm"
00027674                            ; ---------------------------------------------------------------------------
00027674                            ; Special stage	layout pointers
00027674                            ; ---------------------------------------------------------------------------
00027674 0000 0000                  	dc.l SS_1
00027678 0000 0000                  	dc.l SS_2
0002767C 0000 0000                  	dc.l SS_3
00027680 0000 0000                  	dc.l SS_4
00027684 0000 0000                  	dc.l SS_5
00027688 0000 0000                  	dc.l SS_6
0002768C 0000 0000                  	dc.l SS_7	
00027690                            	even
00027690                            	even
00027690                            
00027690                            ; ---------------------------------------------------------------------------
00027690                            ; Special stage	start locations
00027690                            ; ---------------------------------------------------------------------------
00027690                            SS_StartLoc:	incbin	misc\sloc_ss.bin
000276A8                            		even
000276A8                            
000276A8                            ; ---------------------------------------------------------------------------
000276A8                            ; Subroutine to	load special stage layout
000276A8                            ; ---------------------------------------------------------------------------
000276A8                            
000276A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000276A8                            
000276A8                            
000276A8                            SS_Load:				; XREF: SpecialStage
000276A8 7000                       		moveq	#0,d0
000276AA 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
000276AE 5238 FE16                  		addq.b	#1,($FFFFFE16).w
000276B2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
000276B8 6500                       		bcs.s	SS_ChkEmldNum
000276BA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
000276C0                            
000276C0                            SS_ChkEmldNum:
000276C0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
000276C6 6700                       		beq.s	SS_LoadData	; if yes, branch
000276C8 7200                       		moveq	#0,d1
000276CA 1238 FE57                  		move.b	($FFFFFE57).w,d1
000276CE 5301                       		subq.b	#1,d1
000276D0 6500                       		bcs.s	SS_LoadData
000276D2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
000276D6                            
000276D6                            SS_ChkEmldLoop:	
000276D6 B033 1000                  		cmp.b	(a3,d1.w),d0
000276DA 6600                       		bne.s	SS_ChkEmldRepeat
000276DC 60CA                       		bra.s	SS_Load
000276DE                            ; ===========================================================================
000276DE                            
000276DE                            SS_ChkEmldRepeat:
000276DE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
000276E2                            
000276E2                            SS_LoadData:
000276E2 E548                       		lsl.w	#2,d0
000276E4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
000276E8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
000276EC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
000276F0 207B 0082                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
000276F4 43F9 00FF 4000             		lea	($FF4000).l,a1
000276FA 303C 0000                  		move.w	#0,d0
000276FE 4EB9 0000 38BA             		jsr	(EniDec).l
00027704 43F9 00FF 0000             		lea	($FF0000).l,a1
0002770A 303C 0FFF                  		move.w	#$FFF,d0
0002770E                            
0002770E                            SS_ClrRAM3:
0002770E 4299                       		clr.l	(a1)+
00027710 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
00027714                            
00027714 43F9 00FF 1020             		lea	($FF1020).l,a1
0002771A 41F9 00FF 4000             		lea	($FF4000).l,a0
00027720 723F                       		moveq	#$3F,d1
00027722                            
00027722                            loc_1B6F6:
00027722 743F                       		moveq	#$3F,d2
00027724                            
00027724                            loc_1B6F8:
00027724 12D8                       		move.b	(a0)+,(a1)+
00027726 51CA FFFC                  		dbf	d2,loc_1B6F8
0002772A                            
0002772A 43E9 0040                  		lea	object_size(a1),a1
0002772E 51C9 FFF2                  		dbf	d1,loc_1B6F6
00027732                            
00027732 43F9 00FF 4008             		lea	($FF4008).l,a1
00027738 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0002773E 724D                       		moveq	#$4D,d1
00027740                            
00027740                            loc_1B714:
00027740 22D8                       		move.l	(a0)+,(a1)+
00027742 32FC 0000                  		move.w	#0,(a1)+
00027746 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0002774C 32D8                       		move.w	(a0)+,(a1)+
0002774E 51C9 FFF0                  		dbf	d1,loc_1B714
00027752                            
00027752 43F9 00FF 4400             		lea	($FF4400).l,a1
00027758 323C 003F                  		move.w	#$3F,d1
0002775C                            
0002775C                            loc_1B730:
0002775C                            
0002775C 4299                       		clr.l	(a1)+
0002775E 51C9 FFFC                  		dbf	d1,loc_1B730
00027762                            
00027762 4E75                       		rts	
00027764                            ; End of function SS_Load
00027764                            
00027764                            ; ===========================================================================
00027764                            ; ---------------------------------------------------------------------------
00027764                            ; Special stage	mappings and VRAM pointers
00027764                            ; ---------------------------------------------------------------------------
00027764                            SS_MapIndex:
00027764                            	include "_inc\Special stage mappings and VRAM pointers.asm"
00027764                            ; ---------------------------------------------------------------------------
00027764                            ; Special stage	mappings and VRAM pointers
00027764                            ; ---------------------------------------------------------------------------
00027764 0000 0000                  	dc.l Map_SSWalls	; address of mappings
00027768 0142                       	dc.w $142		; VRAM setting
0002776A 0000 0000                  	dc.l Map_SSWalls
0002776E 0142                       	dc.w $142
00027770 0000 0000                  	dc.l Map_SSWalls
00027774 0142                       	dc.w $142
00027776 0000 0000                  	dc.l Map_SSWalls
0002777A 0142                       	dc.w $142
0002777C 0000 0000                  	dc.l Map_SSWalls
00027780 0142                       	dc.w $142
00027782 0000 0000                  	dc.l Map_SSWalls
00027786 0142                       	dc.w $142
00027788 0000 0000                  	dc.l Map_SSWalls
0002778C 0142                       	dc.w $142
0002778E 0000 0000                  	dc.l Map_SSWalls
00027792 0142                       	dc.w $142
00027794 0000 0000                  	dc.l Map_SSWalls
00027798 0142                       	dc.w $142
0002779A 0000 0000                  	dc.l Map_SSWalls
0002779E 2142                       	dc.w $2142
000277A0 0000 0000                  	dc.l Map_SSWalls
000277A4 2142                       	dc.w $2142
000277A6 0000 0000                  	dc.l Map_SSWalls
000277AA 2142                       	dc.w $2142
000277AC 0000 0000                  	dc.l Map_SSWalls
000277B0 2142                       	dc.w $2142
000277B2 0000 0000                  	dc.l Map_SSWalls
000277B6 2142                       	dc.w $2142
000277B8 0000 0000                  	dc.l Map_SSWalls
000277BC 2142                       	dc.w $2142
000277BE 0000 0000                  	dc.l Map_SSWalls
000277C2 2142                       	dc.w $2142
000277C4 0000 0000                  	dc.l Map_SSWalls
000277C8 2142                       	dc.w $2142
000277CA 0000 0000                  	dc.l Map_SSWalls
000277CE 2142                       	dc.w $2142
000277D0 0000 0000                  	dc.l Map_SSWalls
000277D4 4142                       	dc.w $4142
000277D6 0000 0000                  	dc.l Map_SSWalls
000277DA 4142                       	dc.w $4142
000277DC 0000 0000                  	dc.l Map_SSWalls
000277E0 4142                       	dc.w $4142
000277E2 0000 0000                  	dc.l Map_SSWalls
000277E6 4142                       	dc.w $4142
000277E8 0000 0000                  	dc.l Map_SSWalls
000277EC 4142                       	dc.w $4142
000277EE 0000 0000                  	dc.l Map_SSWalls
000277F2 4142                       	dc.w $4142
000277F4 0000 0000                  	dc.l Map_SSWalls
000277F8 4142                       	dc.w $4142
000277FA 0000 0000                  	dc.l Map_SSWalls
000277FE 4142                       	dc.w $4142
00027800 0000 0000                  	dc.l Map_SSWalls
00027804 4142                       	dc.w $4142
00027806 0000 0000                  	dc.l Map_SSWalls
0002780A 6142                       	dc.w $6142
0002780C 0000 0000                  	dc.l Map_SSWalls
00027810 6142                       	dc.w $6142
00027812 0000 0000                  	dc.l Map_SSWalls
00027816 6142                       	dc.w $6142
00027818 0000 0000                  	dc.l Map_SSWalls
0002781C 6142                       	dc.w $6142
0002781E 0000 0000                  	dc.l Map_SSWalls
00027822 6142                       	dc.w $6142
00027824 0000 0000                  	dc.l Map_SSWalls
00027828 6142                       	dc.w $6142
0002782A 0000 0000                  	dc.l Map_SSWalls
0002782E 6142                       	dc.w $6142
00027830 0000 0000                  	dc.l Map_SSWalls
00027834 6142                       	dc.w $6142
00027836 0000 0000                  	dc.l Map_SSWalls
0002783A 6142                       	dc.w $6142
0002783C 0001 833A                  	dc.l Map_obj47
00027840 023B                       	dc.w $23B
00027842 0000 0000                  	dc.l Map_SS_R
00027846 0570                       	dc.w $570
00027848 0000 0000                  	dc.l Map_SS_R
0002784C 0251                       	dc.w $251
0002784E 0000 0000                  	dc.l Map_SS_R
00027852 0370                       	dc.w $370
00027854 0000 0000                  	dc.l Map_SS_Up
00027858 0263                       	dc.w $263
0002785A 0000 0000                  	dc.l Map_SS_Down
0002785E 0263                       	dc.w $263
00027860 0000 0000                  	dc.l Map_SS_R
00027864 22F0                       	dc.w $22F0
00027866 0000 0000                  	dc.l Map_SS_Glass
0002786A 0470                       	dc.w $470
0002786C 0000 0000                  	dc.l Map_SS_Glass
00027870 05F0                       	dc.w $5F0
00027872 0000 0000                  	dc.l Map_SS_Glass
00027876 65F0                       	dc.w $65F0
00027878 0000 0000                  	dc.l Map_SS_Glass
0002787C 25F0                       	dc.w $25F0
0002787E 0000 0000                  	dc.l Map_SS_Glass
00027882 45F0                       	dc.w $45F0
00027884 0000 0000                  	dc.l Map_SS_R
00027888 02F0                       	dc.w $2F0
0002788A 0101 833A                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0002788E 023B                       	dc.w $23B
00027890 0201 833A                  	dc.l Map_obj47+$2000000
00027894 023B                       	dc.w $23B
00027896 0000 0000                  	dc.l Map_SS_R
0002789A 0797                       	dc.w $797
0002789C 0000 0000                  	dc.l Map_SS_R
000278A0 07A0                       	dc.w $7A0
000278A2 0000 0000                  	dc.l Map_SS_R
000278A6 07A9                       	dc.w $7A9
000278A8 0000 0000                  	dc.l Map_SS_R
000278AC 0797                       	dc.w $797
000278AE 0000 0000                  	dc.l Map_SS_R
000278B2 07A0                       	dc.w $7A0
000278B4 0000 0000                  	dc.l Map_SS_R
000278B8 07A9                       	dc.w $7A9
000278BA 0001 1E48                  	dc.l Map_obj25
000278BE 27B2                       	dc.w $27B2
000278C0 0000 0000                  	dc.l Map_SS_Chaos3
000278C4 0770                       	dc.w $770
000278C6 0000 0000                  	dc.l Map_SS_Chaos3
000278CA 2770                       	dc.w $2770
000278CC 0000 0000                  	dc.l Map_SS_Chaos3
000278D0 4770                       	dc.w $4770
000278D2 0000 0000                  	dc.l Map_SS_Chaos3
000278D6 6770                       	dc.w $6770
000278D8 0000 0000                  	dc.l Map_SS_Chaos1
000278DC 0770                       	dc.w $770
000278DE 0000 0000                  	dc.l Map_SS_Chaos2
000278E2 0770                       	dc.w $770
000278E4 0000 0000                  	dc.l Map_SS_R
000278E8 04F0                       	dc.w $4F0
000278EA 0401 1E48                  	dc.l Map_obj25+$4000000
000278EE 27B2                       	dc.w $27B2
000278F0 0501 1E48                  	dc.l Map_obj25+$5000000
000278F4 27B2                       	dc.w $27B2
000278F6 0601 1E48                  	dc.l Map_obj25+$6000000
000278FA 27B2                       	dc.w $27B2
000278FC 0701 1E48                  	dc.l Map_obj25+$7000000
00027900 27B2                       	dc.w $27B2
00027902 0000 0000                  	dc.l Map_SS_Glass
00027906 23F0                       	dc.w $23F0
00027908 0000 0000                  	dc.l Map_SS_Glass+$1000000
0002790C 23F0                       	dc.w $23F0
0002790E 0000 0000                  	dc.l Map_SS_Glass+$2000000
00027912 23F0                       	dc.w $23F0
00027914 0000 0000                  	dc.l Map_SS_Glass+$3000000
00027918 23F0                       	dc.w $23F0
0002791A 0000 0000                  	dc.l Map_SS_R+$2000000
0002791E 04F0                       	dc.w $4F0
00027920 0000 0000                  	dc.l Map_SS_Glass
00027924 05F0                       	dc.w $5F0
00027926 0000 0000                  	dc.l Map_SS_Glass
0002792A 65F0                       	dc.w $65F0
0002792C 0000 0000                  	dc.l Map_SS_Glass
00027930 25F0                       	dc.w $25F0
00027932 0000 0000                  	dc.l Map_SS_Glass
00027936 45F0                       	dc.w $45F0
00027936 45F0                       	dc.w $45F0
00027938                            
00027938                            ; ---------------------------------------------------------------------------
00027938                            ; Sprite mappings - special stage "R" block
00027938                            ; ---------------------------------------------------------------------------
00027938                            Map_SS_R:
00027938                            	include "_maps\SSRblock.asm"
00027938                            ; ---------------------------------------------------------------------------
00027938                            ; Sprite mappings - special stage "R" block
00027938                            ; ---------------------------------------------------------------------------
00027938 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0002793C 0000                       		dc.w byte_1B91E-Map_SS_R
0002793E 01                         byte_1B912:	dc.b 1
0002793F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00027944 01                         byte_1B918:	dc.b 1
00027945 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0002794A 00                         byte_1B91E:	dc.b 0
0002794C 00                         		even
0002794C 00                         		even
0002794C                            
0002794C                            ; ---------------------------------------------------------------------------
0002794C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0002794C                            ; ---------------------------------------------------------------------------
0002794C                            Map_SS_Glass:
0002794C                            	include "_maps\SSglassblock.asm"
0002794C                            ; ---------------------------------------------------------------------------
0002794C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0002794C                            ; ---------------------------------------------------------------------------
0002794C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
00027950 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
00027954 01                         byte_1B928:	dc.b 1
00027955 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002795A 01                         byte_1B92E:	dc.b 1
0002795B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
00027960 01                         byte_1B934:	dc.b 1
00027961 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
00027966 01                         byte_1B93A:	dc.b 1
00027967 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0002796C                            		even
0002796C                            		even
0002796C                            
0002796C                            ; ---------------------------------------------------------------------------
0002796C                            ; Sprite mappings - special stage "UP" block
0002796C                            ; ---------------------------------------------------------------------------
0002796C                            Map_SS_Up:
0002796C                            	include "_maps\SSUPblock.asm"
0002796C                            ; ---------------------------------------------------------------------------
0002796C                            ; Sprite mappings - special stage "UP" block
0002796C                            ; ---------------------------------------------------------------------------
0002796C 0000                       		dc.w byte_1B944-Map_SS_Up
0002796E 0000                       		dc.w byte_1B94A-Map_SS_Up
00027970 01                         byte_1B944:	dc.b 1
00027971 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00027976 01                         byte_1B94A:	dc.b 1
00027977 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0002797C                            		even
0002797C                            		even
0002797C                            
0002797C                            ; ---------------------------------------------------------------------------
0002797C                            ; Sprite mappings - special stage "DOWN" block
0002797C                            ; ---------------------------------------------------------------------------
0002797C                            Map_SS_Down:
0002797C                            	include "_maps\SSDOWNblock.asm"
0002797C                            ; ---------------------------------------------------------------------------
0002797C                            ; Sprite mappings - special stage "DOWN" block
0002797C                            ; ---------------------------------------------------------------------------
0002797C 0000                       		dc.w byte_1B954-Map_SS_Down
0002797E 0000                       		dc.w byte_1B95A-Map_SS_Down
00027980 01                         byte_1B954:	dc.b 1
00027981 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00027986 01                         byte_1B95A:	dc.b 1
00027987 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0002798C                            		even
0002798C                            		even
0002798C                            
0002798C                            ; ---------------------------------------------------------------------------
0002798C                            ; Sprite mappings - special stage chaos	emeralds
0002798C                            ; ---------------------------------------------------------------------------
0002798C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0002798E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
00027990 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
00027992 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
00027994 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
00027996 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
00027998 01                         byte_1B96C:	dc.b 1
00027999 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0002799E 01                         byte_1B972:	dc.b 1
0002799F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000279A4 01                         byte_1B978:	dc.b 1
000279A5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000279AA 01                         byte_1B97E:	dc.b 1
000279AB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000279B0                            		even
000279B0                            ; ===========================================================================
000279B0                            ; ---------------------------------------------------------------------------
000279B0                            ; Object 09 - Sonic (special stage)
000279B0                            ; ---------------------------------------------------------------------------
000279B0                            
000279B0                            Obj09:					; XREF: Obj_Index
000279B0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000279B4 6700                       		beq.s	Obj09_Normal	; if not, branch
000279B6 4EB9 0000 0000             		jsr	SS_FixCamera
000279BC 6000 0000                  		bra.w	DebugMode
000279C0                            ; ===========================================================================
000279C0                            
000279C0                            Obj09_Normal:
000279C0 7000                       		moveq	#0,d0
000279C2 1028 0024                  		move.b	routine(a0),d0
000279C6 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
000279CA 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
000279CE                            ; ===========================================================================
000279CE 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
000279D0 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
000279D2 0000                       		dc.w Obj09_ExitStage-Obj09_Index
000279D4 0000                       		dc.w Obj09_Exit2-Obj09_Index
000279D6                            ; ===========================================================================
000279D6                            
000279D6                            Obj09_Main:				; XREF: Obj09_Index
000279D6 5428 0024                  		addq.b	#2,routine(a0)
000279DA 117C 000E 0016             		move.b	#$E,$16(a0)
000279E0 117C 0007 0017             		move.b	#7,$17(a0)
000279E6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000279EE 317C 0780 0002             		move.w	#$780,2(a0)
000279F4 117C 0004 0001             		move.b	#4,1(a0)
000279FA 117C 0000 0018             		move.b	#0,priority(a0)
00027A00 117C 0002 001C             		move.b	#2,anim(a0)
00027A06 08E8 0002 0022             		bset	#2,status(a0)
00027A0C 08E8 0001 0022             		bset	#1,status(a0)
00027A12                            
00027A12                            Obj09_ChkDebug:				; XREF: Obj09_Index
00027A12 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
00027A16 6700                       		beq.s	Obj09_NoDebug	; if not, branch
00027A18 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
00027A1E 6700                       		beq.s	Obj09_NoDebug	; if not, branch
00027A20 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
00027A26                            
00027A26                            Obj09_NoDebug:
00027A26 117C 0000 0030             		move.b	#0,$30(a0)
00027A2C 7000                       		moveq	#0,d0
00027A2E 1028 0022                  		move.b	status(a0),d0
00027A32 0240 0002                  		andi.w	#2,d0
00027A36 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
00027A3A 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
00027A3E 4EB9 0001 E89A             		jsr	LoadSonicDynPLC
00027A44 4EF9 0001 5D72             		jmp	DisplaySprite
00027A4A                            ; ===========================================================================
00027A4A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
00027A4C 0000                       		dc.w Obj09_InAir-Obj09_Modes
00027A4E                            ; ===========================================================================
00027A4E                            
00027A4E                            Obj09_OnWall:				; XREF: Obj09_Modes
00027A4E 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
00027A54 4EB9 0000 0000             		jsr	Obj09_Jump
00027A5A 4EB9 0000 0000             		jsr	Obj09_Move
00027A60 4EB9 0000 0000             		jsr	Obj09_Fall
00027A66 6000                       		bra.s	Obj09_Display
00027A68                            ; ===========================================================================
00027A68                            
00027A68                            Obj09_InAir:				; XREF: Obj09_Modes
00027A68 4EB9 0000 0000             		jsr	Obj09_JumpHeight
00027A6E 4EB9 0000 0000             		jsr	Obj09_Move
00027A74 4EB9 0000 0000             		jsr	Obj09_Fall
00027A7A                            
00027A7A                            Obj09_Display:				; XREF: Obj09_OnWall
00027A7A 4EB9 0000 0000             		jsr	Obj09_ChkItems
00027A80 4EB9 0000 0000             		jsr	Obj09_ChkItems2
00027A86 4EB9 0001 5D0C             		jsr	SpeedToPos
00027A8C 4EB9 0000 0000             		jsr	SS_FixCamera
00027A92 3038 F780                  		move.w	($FFFFF780).w,d0
00027A96 D078 F782                  		add.w	($FFFFF782).w,d0
00027A9A 31C0 F780                  		move.w	d0,($FFFFF780).w
00027A9E 4EB9 0001 E2B8             		jsr	Sonic_Animate
00027AA4 4E75                       		rts	
00027AA6                            
00027AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027AA6                            
00027AA6                            
00027AA6                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
00027AA6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00027AAC 6700                       		beq.s	Obj09_ChkRight	; if not, branch
00027AAE 4EB9 0000 0000             		jsr	Obj09_MoveLeft
00027AB4                            
00027AB4                            Obj09_ChkRight:
00027AB4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00027ABA 6700                       		beq.s	loc_1BA78	; if not, branch
00027ABC 4EB9 0000 0000             		jsr	Obj09_MoveRight
00027AC2                            
00027AC2                            loc_1BA78:
00027AC2 1038 F602                  		move.b	($FFFFF602).w,d0
00027AC6 0200 000C                  		andi.b	#$C,d0
00027ACA 6600                       		bne.s	loc_1BAA8
00027ACC 3028 0020                  		move.w	inertia(a0),d0
00027AD0 6700                       		beq.s	loc_1BAA8
00027AD2 6B00                       		bmi.s	loc_1BA9A
00027AD4 0440 000C                  		subi.w	#$C,d0
00027AD8 6400                       		bcc.s	loc_1BA94
00027ADA 303C 0000                  		move.w	#0,d0
00027ADE                            
00027ADE                            loc_1BA94:
00027ADE 3140 0020                  		move.w	d0,inertia(a0)
00027AE2 6000                       		bra.s	loc_1BAA8
00027AE4                            ; ===========================================================================
00027AE4                            
00027AE4                            loc_1BA9A:
00027AE4 0640 000C                  		addi.w	#$C,d0
00027AE8 6400                       		bcc.s	loc_1BAA4
00027AEA 303C 0000                  		move.w	#0,d0
00027AEE                            
00027AEE                            loc_1BAA4:
00027AEE 3140 0020                  		move.w	d0,inertia(a0)
00027AF2                            
00027AF2                            loc_1BAA8:
00027AF2 1038 F780                  		move.b	($FFFFF780).w,d0
00027AF6 0600 0020                  		addi.b	#$20,d0
00027AFA 0200 00C0                  		andi.b	#$C0,d0
00027AFE 4400                       		neg.b	d0
00027B00 4EB9 0000 8F30             		jsr	(CalcSine).l
00027B06 C3E8 0020                  		muls.w	inertia(a0),d1
00027B0A D3A8 0008                  		add.l	d1,8(a0)
00027B0E C1E8 0020                  		muls.w	inertia(a0),d0
00027B12 D1A8 000C                  		add.l	d0,$C(a0)
00027B16 48E7 C000                  		movem.l	d0-d1,-(sp)
00027B1A 2428 000C                  		move.l	$C(a0),d2
00027B1E 2628 0008                  		move.l	8(a0),d3
00027B22 4EB9 0000 0000             		jsr	sub_1BCE8
00027B28 6700                       		beq.s	loc_1BAF2
00027B2A 4CDF 0003                  		movem.l	(sp)+,d0-d1
00027B2E 93A8 0008                  		sub.l	d1,8(a0)
00027B32 91A8 000C                  		sub.l	d0,$C(a0)
00027B36 317C 0000 0020             		move.w	#0,inertia(a0)
00027B3C 4E75                       		rts	
00027B3E                            ; ===========================================================================
00027B3E                            
00027B3E                            loc_1BAF2:
00027B3E 4CDF 0003                  		movem.l	(sp)+,d0-d1
00027B42 4E75                       		rts	
00027B44                            ; End of function Obj09_Move
00027B44                            
00027B44                            
00027B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027B44                            
00027B44                            
00027B44                            Obj09_MoveLeft:				; XREF: Obj09_Move
00027B44 08E8 0000 0022             		bset	#0,status(a0)
00027B4A 3028 0020                  		move.w	inertia(a0),d0
00027B4E 6700                       		beq.s	loc_1BB06
00027B50 6A00                       		bpl.s	loc_1BB1A
00027B52                            
00027B52                            loc_1BB06:
00027B52 0440 000C                  		subi.w	#$C,d0
00027B56 0C40 F800                  		cmpi.w	#-$800,d0
00027B5A 6E00                       		bgt.s	loc_1BB14
00027B5C 303C F800                  		move.w	#-$800,d0
00027B60                            
00027B60                            loc_1BB14:
00027B60 3140 0020                  		move.w	d0,inertia(a0)
00027B64 4E75                       		rts	
00027B66                            ; ===========================================================================
00027B66                            
00027B66                            loc_1BB1A:
00027B66 0440 0040                  		subi.w	#$40,d0
00027B6A 6400                       		bcc.s	loc_1BB22
00027B6C 4E71                       		nop	
00027B6E                            
00027B6E                            loc_1BB22:
00027B6E 3140 0020                  		move.w	d0,inertia(a0)
00027B72 4E75                       		rts	
00027B74                            ; End of function Obj09_MoveLeft
00027B74                            
00027B74                            
00027B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027B74                            
00027B74                            
00027B74                            Obj09_MoveRight:			; XREF: Obj09_Move
00027B74 08A8 0000 0022             		bclr	#0,status(a0)
00027B7A 3028 0020                  		move.w	inertia(a0),d0
00027B7E 6B00                       		bmi.s	loc_1BB48
00027B80 0640 000C                  		addi.w	#$C,d0
00027B84 0C40 0800                  		cmpi.w	#$800,d0
00027B88 6D00                       		blt.s	loc_1BB42
00027B8A 303C 0800                  		move.w	#$800,d0
00027B8E                            
00027B8E                            loc_1BB42:
00027B8E 3140 0020                  		move.w	d0,inertia(a0)
00027B92 6000                       		bra.s	locret_1BB54
00027B94                            ; ===========================================================================
00027B94                            
00027B94                            loc_1BB48:
00027B94 0640 0040                  		addi.w	#$40,d0
00027B98 6400                       		bcc.s	loc_1BB50
00027B9A 4E71                       		nop	
00027B9C                            
00027B9C                            loc_1BB50:
00027B9C 3140 0020                  		move.w	d0,inertia(a0)
00027BA0                            
00027BA0                            locret_1BB54:
00027BA0 4E75                       		rts	
00027BA2                            ; End of function Obj09_MoveRight
00027BA2                            
00027BA2                            
00027BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027BA2                            
00027BA2                            
00027BA2                            Obj09_Jump:				; XREF: Obj09_OnWall
00027BA2 1038 F603                  		move.b	($FFFFF603).w,d0
00027BA6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00027BAA 6700                       		beq.s	Obj09_NoJump	; if not, branch
00027BAC 1038 F780                  		move.b	($FFFFF780).w,d0
00027BB0 0200 00FC                  		andi.b	#$FC,d0
00027BB4 4400                       		neg.b	d0
00027BB6 0400 0040                  		subi.b	#$40,d0
00027BBA 4EB9 0000 8F30             		jsr	(CalcSine).l
00027BC0 C3FC 0680                  		muls.w	#$680,d1
00027BC4 E081                       		asr.l	#8,d1
00027BC6 3141 0010                  		move.w	d1,x_vel(a0)
00027BCA C1FC 0680                  		muls.w	#$680,d0
00027BCE E080                       		asr.l	#8,d0
00027BD0 3140 0012                  		move.w	d0,y_vel(a0)
00027BD4 08E8 0001 0022             		bset	#1,status(a0)
00027BDA 08E8 0007 0022             		bset	#7,status(a0)	; set "Sonic has jumped" flag
00027BE0 303C 0062                  		move.w	#$62,d0
00027BE4 4EB9 0000 3212             		jsr	(PlaySound).l ;	play jumping sound
00027BEA                            
00027BEA                            Obj09_NoJump:
00027BEA 4E75                       		rts	
00027BEC                            ; End of function Obj09_Jump
00027BEC                            
00027BEC                            ; ===========================================================================
00027BEC                            ; ---------------------------------------------------------------------------
00027BEC                            ; Subroutine to limit Sonic's upward vertical speed
00027BEC                            ; ---------------------------------------------------------------------------
00027BEC                             
00027BEC                            Obj09_JumpHeight:			; XREF: Obj09_InAir
00027BEC 1038 F602                  		move.b	($FFFFF602).w,d0	; is the jump button up?
00027BF0 0200 0070                  		andi.b	#$70,d0
00027BF4 6600                       		bne.s	locret_1BBB4		; if not, branch to return
00027BF6 0828 0007 0022             		btst	#7,status(a0)		; did Sonic jump or is he just falling or hit by a bumper?
00027BFC 6700                       		beq.s	locret_1BBB4		; if not, branch to return
00027BFE 1038 F780                  		move.b	($FFFFF780).w,d0	; get SS angle
00027C02 0200 00FC                  		andi.b	#$FC,d0
00027C06 4400                       		neg.b	d0
00027C08 0400 0040                  		subi.b	#$40,d0
00027C0C 4EB9 0000 8F30             		jsr	(CalcSine).l			
00027C12 3428 0012                  		move.w	y_vel(a0),d2		; get Y speed
00027C16 C1C2                       		muls.w	d2,d0			; multiply Y speed by sin
00027C18 E080                       		asr.l	#8,d0			; find the new Y speed
00027C1A 3428 0010                  		move.w	x_vel(a0),d2		; get X speed
00027C1E C3C2                       		muls.w	d2,d1			; multiply X speed by cos
00027C20 E081                       		asr.l	#8,d1			; find the new X speed
00027C22 D240                       		add.w	d0,d1			; combine the two speeds
00027C24 0C41 0400                  		cmpi.w	#$400,d1		; compare the combined speed with the jump release speed
00027C28 6F00                       		ble.s	locret_1BBB4		; if it's less, branch to return
00027C2A 1038 F780                  		move.b	($FFFFF780).w,d0
00027C2E 0200 00FC                  		andi.b	#$FC,d0
00027C32 4400                       		neg.b	d0
00027C34 0400 0040                  		subi.b	#$40,d0
00027C38 4EB9 0000 8F30             		jsr	(CalcSine).l
00027C3E C3FC 0400                  		muls.w	#$400,d1
00027C42 E081                       		asr.l	#8,d1
00027C44 3141 0010                  		move.w	d1,x_vel(a0)
00027C48 C1FC 0400                  		muls.w	#$400,d0
00027C4C E080                       		asr.l	#8,d0
00027C4E 3140 0012                  		move.w	d0,y_vel(a0)		; set the speed to the jump release speed
00027C52 08A8 0007 0022             		bclr	#7,status(a0)		; clear "Sonic has jumped" flag
00027C58                             
00027C58                            locret_1BBB4:
00027C58 4E75                       		rts
00027C5A                            
00027C5A                            ; ---------------------------------------------------------------------------
00027C5A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
00027C5A                            ; ---------------------------------------------------------------------------
00027C5A                            
00027C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027C5A                            
00027C5A                            
00027C5A                            SS_FixCamera:				; XREF: Obj09
00027C5A 3428 000C                  		move.w	$C(a0),d2
00027C5E 3628 0008                  		move.w	8(a0),d3
00027C62 3038 F700                  		move.w	($FFFFF700).w,d0
00027C66 0443 00A0                  		subi.w	#$A0,d3
00027C6A 6500                       		bcs.s	loc_1BBCE
00027C6C 9043                       		sub.w	d3,d0
00027C6E 9178 F700                  		sub.w	d0,($FFFFF700).w
00027C72                            
00027C72                            loc_1BBCE:
00027C72 3038 F704                  		move.w	($FFFFF704).w,d0
00027C76 0442 0070                  		subi.w	#$70,d2
00027C7A 6500                       		bcs.s	locret_1BBDE
00027C7C 9042                       		sub.w	d2,d0
00027C7E 9178 F704                  		sub.w	d0,($FFFFF704).w
00027C82                            
00027C82                            locret_1BBDE:
00027C82 4E75                       		rts	
00027C84                            ; End of function SS_FixCamera
00027C84                            
00027C84                            ; ===========================================================================
00027C84                            
00027C84                            Obj09_ExitStage:			; XREF: Obj09_Index
00027C84 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
00027C8A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
00027C90 6600                       		bne.s	loc_1BBF4
00027C92 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00027C98                            
00027C98                            loc_1BBF4:
00027C98 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
00027C9E 6D00                       		blt.s	loc_1BC12
00027CA0 31FC 0000 F782             		move.w	#0,($FFFFF782).w
00027CA6 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
00027CAC 5428 0024                  		addq.b	#2,routine(a0)
00027CB0 317C 003C 0038             		move.w	#$3C,$38(a0)
00027CB6                            
00027CB6                            loc_1BC12:
00027CB6 3038 F780                  		move.w	($FFFFF780).w,d0
00027CBA D078 F782                  		add.w	($FFFFF782).w,d0
00027CBE 31C0 F780                  		move.w	d0,($FFFFF780).w
00027CC2 4EB9 0001 E2B8             		jsr	Sonic_Animate
00027CC8 4EB9 0001 E89A             		jsr	LoadSonicDynPLC
00027CCE 4EBA FF8A                  		jsr	SS_FixCamera
00027CD2 4EF9 0001 5D72             		jmp	DisplaySprite
00027CD8                            ; ===========================================================================
00027CD8                            
00027CD8                            Obj09_Exit2:				; XREF: Obj09_Index
00027CD8 5368 0038                  		subq.w	#1,$38(a0)
00027CDC 6600                       		bne.s	loc_1BC40
00027CDE 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00027CE4                            
00027CE4                            loc_1BC40:
00027CE4 4EB9 0001 E2B8             		jsr	Sonic_Animate
00027CEA 4EB9 0001 E89A             		jsr	LoadSonicDynPLC
00027CF0 4EBA FF68                  		jsr	SS_FixCamera
00027CF4 4EF9 0001 5D72             		jmp	DisplaySprite
00027CFA                            
00027CFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027CFA                            
00027CFA                            
00027CFA                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
00027CFA 2428 000C                  		move.l	$C(a0),d2
00027CFE 2628 0008                  		move.l	8(a0),d3
00027D02 1038 F780                  		move.b	($FFFFF780).w,d0
00027D06 0200 00FC                  		andi.b	#$FC,d0
00027D0A 4EB9 0000 8F30             		jsr	(CalcSine).l
00027D10 3828 0010                  		move.w	x_vel(a0),d4
00027D14 48C4                       		ext.l	d4
00027D16 E184                       		asl.l	#8,d4
00027D18 C1FC 002A                  		muls.w	#$2A,d0
00027D1C D084                       		add.l	d4,d0
00027D1E 3828 0012                  		move.w	y_vel(a0),d4
00027D22 48C4                       		ext.l	d4
00027D24 E184                       		asl.l	#8,d4
00027D26 C3FC 002A                  		muls.w	#$2A,d1
00027D2A D284                       		add.l	d4,d1
00027D2C D680                       		add.l	d0,d3
00027D2E 4EB9 0000 0000             		jsr	sub_1BCE8
00027D34 6700                       		beq.s	loc_1BCB0
00027D36 9680                       		sub.l	d0,d3
00027D38 7000                       		moveq	#0,d0
00027D3A 3140 0010                  		move.w	d0,x_vel(a0)
00027D3E 08A8 0001 0022             		bclr	#1,status(a0)
00027D44 D481                       		add.l	d1,d2
00027D46 4EB9 0000 0000             		jsr	sub_1BCE8
00027D4C 6700                       		beq.s	loc_1BCC6
00027D4E 9481                       		sub.l	d1,d2
00027D50 7200                       		moveq	#0,d1
00027D52 3141 0012                  		move.w	d1,y_vel(a0)
00027D56 4E75                       		rts	
00027D58                            ; ===========================================================================
00027D58                            
00027D58                            loc_1BCB0:
00027D58 D481                       		add.l	d1,d2
00027D5A 4EB9 0000 0000             		jsr	sub_1BCE8
00027D60 6700                       		beq.s	loc_1BCD4
00027D62 9481                       		sub.l	d1,d2
00027D64 7200                       		moveq	#0,d1
00027D66 3141 0012                  		move.w	d1,y_vel(a0)
00027D6A 08A8 0001 0022             		bclr	#1,status(a0)
00027D70                            
00027D70                            loc_1BCC6:
00027D70 E080                       		asr.l	#8,d0
00027D72 E081                       		asr.l	#8,d1
00027D74 3140 0010                  		move.w	d0,x_vel(a0)
00027D78 3141 0012                  		move.w	d1,y_vel(a0)
00027D7C 4E75                       		rts	
00027D7E                            ; ===========================================================================
00027D7E                            
00027D7E                            loc_1BCD4:
00027D7E E080                       		asr.l	#8,d0
00027D80 E081                       		asr.l	#8,d1
00027D82 3140 0010                  		move.w	d0,x_vel(a0)
00027D86 3141 0012                  		move.w	d1,y_vel(a0)
00027D8A 08E8 0001 0022             		bset	#1,status(a0)
00027D90 4E75                       		rts	
00027D92                            ; End of function Obj09_Fall
00027D92                            
00027D92                            
00027D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027D92                            
00027D92                            
00027D92                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
00027D92 43F9 00FF 0000             		lea	($FF0000).l,a1
00027D98 7800                       		moveq	#0,d4
00027D9A 4842                       		swap	d2
00027D9C 3802                       		move.w	d2,d4
00027D9E 4842                       		swap	d2
00027DA0 0644 0044                  		addi.w	#$44,d4
00027DA4 88FC 0018                  		divu.w	#$18,d4
00027DA8 C8FC 0080                  		mulu.w	#$80,d4
00027DAC D3C4                       		adda.l	d4,a1
00027DAE 7800                       		moveq	#0,d4
00027DB0 4843                       		swap	d3
00027DB2 3803                       		move.w	d3,d4
00027DB4 4843                       		swap	d3
00027DB6 0644 0014                  		addi.w	#$14,d4
00027DBA 88FC 0018                  		divu.w	#$18,d4
00027DBE D2C4                       		adda.w	d4,a1
00027DC0 7A00                       		moveq	#0,d5
00027DC2 1819                       		move.b	(a1)+,d4
00027DC4 6100                       		bsr.s	sub_1BD30
00027DC6 1819                       		move.b	(a1)+,d4
00027DC8 6100                       		bsr.s	sub_1BD30
00027DCA D2FC 007E                  		adda.w	#$7E,a1
00027DCE 1819                       		move.b	(a1)+,d4
00027DD0 6100                       		bsr.s	sub_1BD30
00027DD2 1819                       		move.b	(a1)+,d4
00027DD4 6100                       		bsr.s	sub_1BD30
00027DD6 4A05                       		tst.b	d5
00027DD8 4E75                       		rts	
00027DDA                            ; End of function sub_1BCE8
00027DDA                            
00027DDA                            
00027DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027DDA                            
00027DDA                            
00027DDA                            sub_1BD30:				; XREF: sub_1BCE8
00027DDA 6700                       		beq.s	locret_1BD44
00027DDC 0C04 0028                  		cmpi.b	#$28,d4
00027DE0 6700                       		beq.s	locret_1BD44
00027DE2 0C04 003A                  		cmpi.b	#$3A,d4
00027DE6 6500                       		bcs.s	loc_1BD46
00027DE8 0C04 004B                  		cmpi.b	#$4B,d4
00027DEC 6400                       		bcc.s	loc_1BD46
00027DEE                            
00027DEE                            locret_1BD44:
00027DEE 4E75                       		rts	
00027DF0                            ; ===========================================================================
00027DF0                            
00027DF0                            loc_1BD46:
00027DF0 1144 0030                  		move.b	d4,$30(a0)
00027DF4 2149 0032                  		move.l	a1,$32(a0)
00027DF8 7AFF                       		moveq	#-1,d5
00027DFA 4E75                       		rts	
00027DFC                            ; End of function sub_1BD30
00027DFC                            
00027DFC                            
00027DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027DFC                            
00027DFC                            
00027DFC                            Obj09_ChkItems:				; XREF: Obj09_Display
00027DFC 43F9 00FF 0000             		lea	($FF0000).l,a1
00027E02 7800                       		moveq	#0,d4
00027E04 3828 000C                  		move.w	$C(a0),d4
00027E08 0644 0050                  		addi.w	#$50,d4
00027E0C 88FC 0018                  		divu.w	#$18,d4
00027E10 C8FC 0080                  		mulu.w	#$80,d4
00027E14 D3C4                       		adda.l	d4,a1
00027E16 7800                       		moveq	#0,d4
00027E18 3828 0008                  		move.w	8(a0),d4
00027E1C 0644 0020                  		addi.w	#$20,d4
00027E20 88FC 0018                  		divu.w	#$18,d4
00027E24 D2C4                       		adda.w	d4,a1
00027E26 1811                       		move.b	(a1),d4
00027E28 6600                       		bne.s	Obj09_ChkCont
00027E2A 4A28 003A                  		tst.b	$3A(a0)
00027E2E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
00027E32 7800                       		moveq	#0,d4
00027E34 4E75                       		rts	
00027E36                            ; ===========================================================================
00027E36                            
00027E36                            Obj09_ChkCont:
00027E36 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
00027E3A 6600                       		bne.s	Obj09_Chk1Up
00027E3C 4EBA F6A4                  		jsr	SS_RemoveCollectedItem
00027E40 6600                       		bne.s	Obj09_GetCont
00027E42 14BC 0001                  		move.b	#1,(a2)
00027E46 2549 0004                  		move.l	a1,4(a2)
00027E4A                            
00027E4A                            Obj09_GetCont:
00027E4A 4EB9 0001 1A66             		jsr	CollectRing
00027E50 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
00027E56 6500                       		bcs.s	Obj09_NoCont
00027E58 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
00027E5E 6600                       		bne.s	Obj09_NoCont
00027E60 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
00027E64 303C 00AC                  		move.w	#$AC,d0
00027E68 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra continue sound
00027E6E                            
00027E6E                            Obj09_NoCont:
00027E6E 7800                       		moveq	#0,d4
00027E70 4E75                       		rts	
00027E72                            ; ===========================================================================
00027E72                            
00027E72                            Obj09_Chk1Up:
00027E72 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
00027E76 6600                       		bne.s	Obj09_ChkEmer
00027E78 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
00027E7E 6E00                       		bgt.b	Obj09_Get1Upcont
00027E80 4EBA F660                  		jsr	SS_RemoveCollectedItem
00027E84 6600                       		bne.s	Obj09_Get1Up
00027E86 14BC 0003                  		move.b	#3,(a2)
00027E8A 2549 0004                  		move.l	a1,4(a2)
00027E8E                            
00027E8E                            Obj09_Get1Up:
00027E8E 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
00027E94 6C00                       		bge.s	Obj09_Get1Upcont
00027E96 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
00027E9A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
00027E9E                            Obj09_Get1Upcont:
00027E9E 303C 0088                  		move.w	#$88,d0
00027EA2 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra life music
00027EA8 7800                       		moveq	#0,d4
00027EAA 4E75                       		rts	
00027EAC                            
00027EAC                            ; ===========================================================================
00027EAC                            
00027EAC                            Obj09_ChkEmer:
00027EAC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
00027EB0 6500                       		bcs.s	Obj09_ChkGhost
00027EB2 0C04 0040                  		cmpi.b	#$40,d4
00027EB6 6200                       		bhi.s	Obj09_ChkGhost
00027EB8 4EBA F628                  		jsr	SS_RemoveCollectedItem
00027EBC 6600                       		bne.s	Obj09_GetEmer
00027EBE 14BC 0005                  		move.b	#5,(a2)
00027EC2 2549 0004                  		move.l	a1,4(a2)
00027EC6                            
00027EC6                            Obj09_GetEmer:
00027EC6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00027ECC 6C00                       		bge.s	Obj09_NoEmer	; if yes, branch
00027ECE 0404 003B                  		subi.b	#$3B,d4
00027ED2 7000                       		moveq	#0,d0
00027ED4 1038 FE57                  		move.b	($FFFFFE57).w,d0
00027ED8 45F8 FE58                  		lea	($FFFFFE58).w,a2
00027EDC 1584 0000                  		move.b	d4,(a2,d0.w)
00027EE0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00027EE6 6C00                       		bge.s	Obj09_NoEmer_2	; if yes, branch
00027EE8 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
00027EEC 4EF9 0000 0000             		jmp	Obj09_EmerSND
00027EF2                            
00027EF2                            Obj09_NoEmer_2:
00027EF2 11FC 0006 FE57             		move.b	#6,($FFFFFE57).w ; add 1 to number of emeralds
00027EF8 4EF9 0000 0000             		jmp	Obj09_EmerSND
00027EFE                            Obj09_NoEmer:
00027EFE 303C 002B                  		move.w	#$2B,d0
00027F02                            Obj09_EmerSND:
00027F02 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play emerald music
00027F08 7800                       		moveq	#0,d4
00027F0A 4E75                       		rts	
00027F0C                            ; ===========================================================================
00027F0C                            
00027F0C                            Obj09_ChkGhost:
00027F0C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
00027F10 6600                       		bne.s	Obj09_ChkGhostTag
00027F12 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
00027F18                            
00027F18                            Obj09_ChkGhostTag:
00027F18 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
00027F1C 6600                       		bne.s	Obj09_NoGhost
00027F1E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
00027F24 6600                       		bne.s	Obj09_NoGhost	; if not, branch
00027F26 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
00027F2C                            
00027F2C                            Obj09_NoGhost:
00027F2C 78FF                       		moveq	#-1,d4
00027F2E 4E75                       		rts	
00027F30                            ; ===========================================================================
00027F30                            
00027F30                            Obj09_MakeGhostSolid:
00027F30 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
00027F36 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
00027F38 43F9 00FF 1020             		lea	($FF1020).l,a1
00027F3E 723F                       		moveq	#$3F,d1
00027F40                            
00027F40                            Obj09_GhostLoop2:
00027F40 743F                       		moveq	#$3F,d2
00027F42                            
00027F42                            Obj09_GhostLoop:
00027F42 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
00027F46 6600                       		bne.s	Obj09_NoReplace	; if not, branch
00027F48 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
00027F4C                            
00027F4C                            Obj09_NoReplace:
00027F4C 5249                       		addq.w	#1,a1
00027F4E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
00027F52 43E9 0040                  		lea	object_size(a1),a1
00027F56 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
00027F5A                            
00027F5A                            Obj09_GhostNotSolid:
00027F5A 4228 003A                  		clr.b	$3A(a0)
00027F5E 7800                       		moveq	#0,d4
00027F60 4E75                       		rts	
00027F62                            ; End of function Obj09_ChkItems
00027F62                            
00027F62                            
00027F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027F62                            
00027F62                            
00027F62                            Obj09_ChkItems2:			; XREF: Obj09_Display
00027F62 1028 0030                  		move.b	$30(a0),d0
00027F66 6600                       		bne.s	Obj09_ChkBumper
00027F68 5328 0036                  		subq.b	#1,$36(a0)
00027F6C 6A00                       		bpl.s	loc_1BEA0
00027F6E 117C 0000 0036             		move.b	#0,$36(a0)
00027F74                            
00027F74                            loc_1BEA0:
00027F74 5328 0037                  		subq.b	#1,$37(a0)
00027F78 6A00                       		bpl.s	locret_1BEAC
00027F7A 117C 0000 0037             		move.b	#0,$37(a0)
00027F80                            
00027F80                            locret_1BEAC:
00027F80 4E75                       		rts	
00027F82                            ; ===========================================================================
00027F82                            
00027F82                            Obj09_ChkBumper:
00027F82 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
00027F86 6600                       		bne.s	Obj09_GOAL
00027F88 2228 0032                  		move.l	$32(a0),d1
00027F8C 0481 00FF 0001             		subi.l	#$FF0001,d1
00027F92 3401                       		move.w	d1,d2
00027F94 0241 007F                  		andi.w	#$7F,d1
00027F98 C2FC 0018                  		mulu.w	#$18,d1
00027F9C 0441 0014                  		subi.w	#$14,d1
00027FA0 EE4A                       		lsr.w	#7,d2
00027FA2 0242 007F                  		andi.w	#$7F,d2
00027FA6 C4FC 0018                  		mulu.w	#$18,d2
00027FAA 0442 0044                  		subi.w	#$44,d2
00027FAE 9268 0008                  		sub.w	8(a0),d1
00027FB2 9468 000C                  		sub.w	$C(a0),d2
00027FB6 4EB9 0000 91FE             		jsr	(CalcAngle).l
00027FBC 4EB9 0000 8F30             		jsr	(CalcSine).l
00027FC2 C3FC F900                  		muls.w	#-$700,d1
00027FC6 E081                       		asr.l	#8,d1
00027FC8 3141 0010                  		move.w	d1,x_vel(a0)
00027FCC C1FC F900                  		muls.w	#-$700,d0
00027FD0 E080                       		asr.l	#8,d0
00027FD2 3140 0012                  		move.w	d0,y_vel(a0)
00027FD6 08E8 0001 0022             		bset	#1,status(a0)
00027FDC 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
00027FE2 4EBA F4FE                  		jsr	SS_RemoveCollectedItem
00027FE6 6600                       		bne.s	Obj09_BumpSnd
00027FE8 14BC 0002                  		move.b	#2,(a2)
00027FEC 2028 0032                  		move.l	$32(a0),d0
00027FF0 5380                       		subq.l	#1,d0
00027FF2 2540 0004                  		move.l	d0,4(a2)
00027FF6                            
00027FF6                            Obj09_BumpSnd:
00027FF6 303C 00AA                  		move.w	#$AA,d0
00027FFA 4EF9 0000 3212             		jmp	(PlaySound).l ;	play bumper sound
00028000                            ; ===========================================================================
00028000                            
00028000                            Obj09_GOAL:
00028000 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
00028004 6600                       		bne.s	Obj09_UPblock
00028006 5428 0024                  		addq.b	#2,routine(a0)	; run routine "Obj09_ExitStage"
0002800A 303C 006A                  		move.w	#$6A,d0		; change item
0002800E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
00028014 4E75                       		rts	
00028016                            ; ===========================================================================
00028016                            
00028016                            Obj09_UPblock:
00028016 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0002801A 6600                       		bne.s	Obj09_DOWNblock
0002801C 4A28 0036                  		tst.b	$36(a0)
00028020 6600 0000                  		bne.w	Obj09_NoGlass
00028024 117C 001E 0036             		move.b	#$1E,$36(a0)
0002802A 0838 0006 F783             		btst	#6,($FFFFF783).w
00028030 6700                       		beq.s	Obj09_UPsnd
00028032 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
00028036 2268 0032                  		movea.l	$32(a0),a1
0002803A 5389                       		subq.l	#1,a1
0002803C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00028040                            
00028040                            Obj09_UPsnd:
00028040 303C 006B                  		move.w	#$6B,d0
00028044 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
0002804A                            ; ===========================================================================
0002804A                            
0002804A                            Obj09_DOWNblock:
0002804A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0002804E 6600                       		bne.s	Obj09_Rblock
00028050 4A28 0036                  		tst.b	$36(a0)
00028054 6600 0000                  		bne.w	Obj09_NoGlass
00028058 117C 001E 0036             		move.b	#$1E,$36(a0)
0002805E 0838 0006 F783             		btst	#6,($FFFFF783).w
00028064 6600                       		bne.s	Obj09_DOWNsnd
00028066 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0002806A 2268 0032                  		movea.l	$32(a0),a1
0002806E 5389                       		subq.l	#1,a1
00028070 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
00028074                            
00028074                            Obj09_DOWNsnd:
00028074 303C 006B                  		move.w	#$6B,d0
00028078 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
0002807E                            ; ===========================================================================
0002807E                            
0002807E                            Obj09_Rblock:
0002807E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
00028082 6600                       		bne.s	Obj09_ChkGlass
00028084 4A28 0037                  		tst.b	$37(a0)
00028088 6600 0000                  		bne.w	Obj09_NoGlass
0002808C 117C 001E 0037             		move.b	#$1E,$37(a0)
00028092 4EBA F44E                  		jsr	SS_RemoveCollectedItem
00028096 6600                       		bne.s	Obj09_RevStage
00028098 14BC 0004                  		move.b	#4,(a2)
0002809C 2028 0032                  		move.l	$32(a0),d0
000280A0 5380                       		subq.l	#1,d0
000280A2 2540 0004                  		move.l	d0,4(a2)
000280A6                            
000280A6                            Obj09_RevStage:
000280A6 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
000280AA 303C 006B                  		move.w	#$6B,d0
000280AE 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play sound
000280B4                            ; ===========================================================================
000280B4                            
000280B4                            Obj09_ChkGlass:
000280B4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
000280B8 6700                       		beq.s	Obj09_Glass	; if yes, branch
000280BA 0C00 002E                  		cmpi.b	#$2E,d0
000280BE 6700                       		beq.s	Obj09_Glass
000280C0 0C00 002F                  		cmpi.b	#$2F,d0
000280C4 6700                       		beq.s	Obj09_Glass
000280C6 0C00 0030                  		cmpi.b	#$30,d0
000280CA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
000280CC                            
000280CC                            Obj09_Glass:
000280CC 4EBA F414                  		jsr	SS_RemoveCollectedItem
000280D0 6600                       		bne.s	Obj09_GlassSnd
000280D2 14BC 0006                  		move.b	#6,(a2)
000280D6 2268 0032                  		movea.l	$32(a0),a1
000280DA 5389                       		subq.l	#1,a1
000280DC 2549 0004                  		move.l	a1,4(a2)
000280E0 1011                       		move.b	(a1),d0
000280E2 5200                       		addq.b	#1,d0		; change glass type when touched
000280E4 0C00 0030                  		cmpi.b	#$30,d0
000280E8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
000280EA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
000280EC                            
000280EC                            Obj09_GlassUpdate:
000280EC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
000280F0                            
000280F0                            Obj09_GlassSnd:
000280F0 303C 00B5                  		move.w	#$B5,d0
000280F4 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play glass block sound
000280FA                            ; ===========================================================================
000280FA                            
000280FA                            Obj09_NoGlass:
000280FA 4E75                       		rts	
000280FC                            ; End of function Obj09_ChkItems2
000280FC                            
000280FC                            ; ===========================================================================
000280FC                            ; ---------------------------------------------------------------------------
000280FC                            ; Object 10 - blank
000280FC                            ; ---------------------------------------------------------------------------
000280FC                            
000280FC                            Obj10:					; XREF: Obj_Index
000280FC                            ; ----------------------------------------------------------------------------
000280FC                            ; Object 86 - Flipper from CNZ
000280FC                            ; ----------------------------------------------------------------------------
000280FC                            ; Sprite_2B140:
000280FC 7000                       	moveq	#0,d0
000280FE 1028 0024                  	move.b	routine(a0),d0
00028102 323B 0000                  	move.w	off_2B152(pc,d0.w),d1
00028106 4EBB 1000                  	jsr	off_2B152(pc,d1.w)
0002810A 6000 0000                  	bra.w	JmpTo27_MarkObjGone
0002810E                            ; ===========================================================================
0002810E                            off_2B152:
0002810E 0000                       	dc.w loc_2B158-off_2B152
00028110 0000                       	dc.w loc_2B194-off_2B152; 1
00028112 0000                       	dc.w loc_2B312-off_2B152; 2
00028114                            ; ===========================================================================
00028114                            
00028114                            loc_2B158:
00028114 5428 0024                  	addq.b	#2,routine(a0)
00028118 217C 0000 0000 0004        	move.l	#Obj86_MapUnc_2B45A,mappings(a0)
00028120 317C 43B2 0002             	move.w	#$43B2,art_tile(a0)
00028126                            ;	bsr.w	JmpTo50_Adjust2PArtPointer
00028126 0028 0004 0001             	ori.b	#4,render_flags(a0)
0002812C 117C 0018 0023             	move.b	#$18,width_pixels(a0)
00028132 317C 0200 0018             	move.w	#$200,priority(a0)
00028138 4A28 0028                  	tst.b	subtype(a0)
0002813C 6700                       	beq.s	loc_2B194
0002813E 5428 0024                  	addq.b	#2,routine(a0)
00028142 117C 0002 001C             	move.b	#2,anim(a0)
00028148 6000 0000                  	bra.w	loc_2B312
0002814C                            ; ===========================================================================
0002814C                            
0002814C                            loc_2B194:
0002814C                            
0002814C 4A78 FE08                  	tst.w	(Debug_placement_mode).w
00028150 6600                       	bne.s	return_2B208
00028152 45F9 0000 0000             	lea	(byte_2B3C6).l,a2
00028158 1028 001A                  	move.b	mapping_frame(a0),d0
0002815C 6700                       	beq.s	loc_2B1B6
0002815E 45F9 0000 0000             	lea	(byte_2B3EA).l,a2
00028164 5300                       	subq.b	#1,d0
00028166 6700                       	beq.s	loc_2B1B6
00028168 45F9 0000 0000             	lea	(byte_2B40E).l,a2
0002816E                            
0002816E                            loc_2B1B6:
0002816E 323C 0023                  	move.w	#$23,d1
00028172 343C 0006                  	move.w	#6,d2
00028176 3828 0008                  	move.w	x_pos(a0),d4
0002817A 6100 0000                  	bsr.w	JmpTo2_SolidObject86_30
0002817E 47E8 0036                  	lea	objoff_36(a0),a3
00028182 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00028186 3A38 F602                  	move.w	(Ctrl_1_Logical).w,d5
0002818A 7C03                       	moveq	#3,d6
0002818C 6100                       	bsr.s	loc_2B20A
0002818E 524B                       	addq.w	#1,a3
00028190 43F8 D040                  	lea	(Sidekick).w,a1 ; a1=character
00028194 3A38 F606                  	move.w	(Ctrl_2).w,d5
00028198 7C04                       	moveq	#4,d6
0002819A 6100                       	bsr.s	loc_2B20A
0002819C 4A28 0038                  	tst.b	objoff_38(a0)
000281A0 6700                       	beq.s	loc_2B1FE
000281A2 4228 0038                  	clr.b	objoff_38(a0)
000281A6 6100 0000                  	bsr.w	loc_2B290
000281AA 534B                       	subq.w	#1,a3
000281AC 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000281B0 7C03                       	moveq	#3,d6
000281B2 6100 0000                  	bsr.w	loc_2B290
000281B6                            
000281B6                            loc_2B1FE:
000281B6 43F9 0000 0000             	lea	(off_2B432).l,a1
000281BC 6000 0000                  	bra.w	JmpTo9_AnimateSprite
000281C0                            ; ===========================================================================
000281C0                            
000281C0                            return_2B208:
000281C0 4E75                       	rts
000281C2                            ; ===========================================================================
000281C2                            
000281C2                            loc_2B20A:
000281C2 1013                       	move.b	(a3),d0
000281C4 6600                       	bne.s	loc_2B23C
000281C6 0D28 0022                  	btst	d6,status(a0)
000281CA 67F4                       	beq.s	return_2B208
000281CC 11FC 0001 F7CC             	move.b	#1,(Control_locked).w
000281D2 137C 000E 0016             	move.b	#$E,y_radius(a1)
000281D8 137C 0007 0017             	move.b	#7,x_radius(a1)
000281DE 137C 0002 001C             	move.b	#2,anim(a1)
000281E4 08E9 0002 0022             	bset	#2,status(a1)
000281EA 6600                       	bne.s	loc_2B238
000281EC 5A69 000C                  	addq.w	#5,y_pos(a1)
000281F0                            
000281F0                            loc_2B238:
000281F0 5213                       	addq.b	#1,(a3)
000281F2 4E75                       	rts
000281F4                            ; ===========================================================================
000281F4                            
000281F4                            loc_2B23C:
000281F4 0245 0070                  	andi.w	#$70,d5
000281F8 6600                       	bne.s	loc_2B288
000281FA 0D28 0022                  	btst	d6,status(a0)
000281FE 6600                       	bne.s	loc_2B254
00028200 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
00028206 16BC 0000                  	move.b	#0,(a3)
0002820A 4E75                       	rts
0002820C                            ; ===========================================================================
0002820C                            
0002820C                            loc_2B254:
0002820C 7200                       	moveq	#0,d1
0002820E 1228 001A                  	move.b	mapping_frame(a0),d1
00028212 5341                       	subq.w	#1,d1
00028214 08E9 0000 0022             	bset	#0,status(a1)
0002821A 0828 0000 0022             	btst	#0,status(a0)
00028220 6600                       	bne.s	loc_2B272
00028222 4441                       	neg.w	d1
00028224 08A9 0000 0022             	bclr	#0,status(a1)
0002822A                            
0002822A                            loc_2B272:
0002822A D369 0008                  	add.w	d1,x_pos(a1)
0002822E E149                       	lsl.w	#8,d1
00028230 3341 0010                  	move.w	d1,x_vel(a1)
00028234 3341 0020                  	move.w	d1,inertia(a1)
00028238 337C 0000 0012             	move.w	#0,y_vel(a1)
0002823E 4E75                       	rts
00028240                            ; ===========================================================================
00028240                            
00028240                            loc_2B288:
00028240 117C 0001 0038             	move.b	#1,objoff_38(a0)
00028246 4E75                       	rts
00028248                            ; ===========================================================================
00028248                            
00028248                            loc_2B290:
00028248 0DA8 0022                  	bclr	d6,status(a0)
0002824C 6700 FF72                  	beq.w	return_2B208
00028250 3029 0008                  	move.w	x_pos(a1),d0
00028254 9068 0008                  	sub.w	x_pos(a0),d0
00028258 0828 0000 0022             	btst	#0,status(a0)
0002825E 6700                       	beq.s	loc_2B2AA
00028260 4440                       	neg.w	d0
00028262                            
00028262                            loc_2B2AA:
00028262 0640 0023                  	addi.w	#$23,d0
00028266 3400                       	move.w	d0,d2
00028268 0C42 0040                  	cmpi.w	#$40,d2
0002826C 6500                       	bcs.s	loc_2B2BA
0002826E 343C 0040                  	move.w	#$40,d2
00028272                            
00028272                            loc_2B2BA:
00028272 EB4A                       	lsl.w	#5,d2
00028274 0642 0800                  	addi.w	#$800,d2
00028278 4442                       	neg.w	d2
0002827A E440                       	asr.w	#2,d0
0002827C 0640 0040                  	addi.w	#$40,d0
00028280 6100 0000                  	bsr.w	JmpTo11_CalcSine
00028284 C1C2                       	muls.w	d2,d0
00028286 C3C2                       	muls.w	d2,d1
00028288 E080                       	asr.l	#8,d0
0002828A E081                       	asr.l	#8,d1
0002828C 3340 0012                  	move.w	d0,y_vel(a1)
00028290 0828 0000 0022             	btst	#0,status(a0)
00028296 6700                       	beq.s	loc_2B2E2
00028298 4441                       	neg.w	d1
0002829A                            
0002829A                            loc_2B2E2:
0002829A 3341 0010                  	move.w	d1,x_vel(a1)
0002829E 08E9 0001 0022             	bset	#1,status(a1)
000282A4 08A9 0003 0022             	bclr	#3,status(a1)
000282AA 137C 0002 0024             	move.b	#2,routine(a1)
000282B0 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
000282B6 117C 0001 001C             	move.b	#1,anim(a0)
000282BC 16BC 0000                  	move.b	#0,(a3)
000282C0 303C 00DB                  	move.w	#$DB,d0
000282C4 4EF9 0000 3212             	jmp	(PlaySound).l
000282CA                            ; ===========================================================================
000282CA                            
000282CA                            loc_2B312:
000282CA                            
000282CA 323C 0013                  	move.w	#$13,d1
000282CE 343C 0018                  	move.w	#$18,d2
000282D2 363C 0019                  	move.w	#$19,d3
000282D6 3828 0008                  	move.w	x_pos(a0),d4
000282DA 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000282DE 7C03                       	moveq	#3,d6
000282E0 48E7 7800                  	movem.l	d1-d4,-(sp)
000282E4 6100 0000                  	bsr.w	JmpTo6_loc_1978E
000282E8 0828 0005 0022             	btst	#5,status(a0)
000282EE 6700                       	beq.s	loc_2B352
000282F0 6100                       	bsr.s	loc_2B35C
000282F2                            
000282F2                            ;loc_2B33A:
000282F2                            ;	movem.l	(sp)+,d1-d4
000282F2                            ;	lea	(Sidekick).w,a1 ; a1=character
000282F2                            ;	moveq	#4,d6
000282F2                            ;	bsr.w	JmpTo6_loc_1978E
000282F2                            ;	btst	#6,status(a0)
000282F2                            ;	beq.s	loc_2B352
000282F2                            ;	bsr.s	loc_2B35C
000282F2                            
000282F2                            loc_2B352:
000282F2 43F9 0000 0000             	lea	(off_2B432).l,a1
000282F8 6000 0000                  	bra.w	JmpTo9_AnimateSprite
000282FC                            ; ===========================================================================
000282FC                            
000282FC                            loc_2B35C:
000282FC 317C 0300 001C             	move.w	#$300,anim(a0)
00028302 337C F000 0010             	move.w	#-$1000,x_vel(a1)
00028308 5069 0008                  	addq.w	#8,x_pos(a1)
0002830C 08E9 0000 0022             	bset	#0,status(a1)
00028312 3028 0008                  	move.w	x_pos(a0),d0
00028316 9069 0008                  	sub.w	x_pos(a1),d0
0002831A 6400                       	bcc.s	loc_2B392
0002831C 08A9 0000 0022             	bclr	#0,status(a1)
00028322 0469 0010 0008             	subi.w	#$10,x_pos(a1)
00028328 4469 0010                  	neg.w	x_vel(a1)
0002832C 317C 0400 001C             	move.w	#$400,anim(a0)
00028332                            
00028332                            loc_2B392:
00028332 337C 000F 002E             	move.w	#$F,move_lock(a1)
00028338 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)
0002833E 137C 000E 0016             	move.b	#$E,y_radius(a1)
00028344 137C 0007 0017             	move.b	#7,x_radius(a1)
0002834A 137C 0002 001C             	move.b	#2,anim(a1)
00028350 08E9 0002 0022             	bset	#2,status(a1)
00028356 6600                       	bne.s	loc_2B3BC
00028358 5A69 000C                  	addq.w	#5,y_pos(a1)
0002835C                            
0002835C                            loc_2B3BC:
0002835C 303C 00DB                  	move.w	#$DB,d0
00028360 4EF9 0000 3212             	jmp	(PlaySound).l
00028366                            ; ===========================================================================
00028366                            byte_2B3C6:
00028366 0707 0707 0707 0708 090A+  	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6
00028376 0504 0302 0100 FFFE FDFC+  	dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6; 16
00028386 F5F4 F3F2                  	dc.b $F5,$F4,$F3,$F2	; 32
0002838A                            byte_2B3EA:
0002838A 0606 0606 0606 0708 0909+  	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8
0002839A 0808 0808 0707 0707 0606+  	dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4; 16
000283AA 0404 0404                  	dc.b   4,  4,  4,  4	; 32
000283AE                            byte_2B40E:
000283AE 0505 0505 0506 0708 090A+  	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D
000283BE 0E0E 0F0F 1010 1111 1212+  	dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10; 16
000283CE 1010 1010                  	dc.b $10,$10,$10,$10	; 32
000283D2                            
000283D2                            ; animation script
000283D2                            off_2B432:
000283D2 0000                       	dc.w byte_2B43C-off_2B432
000283D4 0000                       	dc.w byte_2B43F-off_2B432; 1
000283D6 0000                       	dc.w byte_2B445-off_2B432; 2
000283D8 0000                       	dc.w byte_2B448-off_2B432; 3
000283DA 0000                       	dc.w byte_2B451-off_2B432; 4
000283DC 0F00 FF                    byte_2B43C:	dc.b  $F,  0,$FF
000283DF 0301 0201 FD00             byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0
000283E5 0F04 FF                    byte_2B445:	dc.b  $F,  4,$FF
000283E8 0005 0403 0303 03FD 02     byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2
000283F1 0003 0405 0505 05FD 02     byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2
000283FA                            	even
000283FA                            ; ----------------------------------------------------------------------------
000283FA                            ; sprite mappings
000283FA                            ; ----------------------------------------------------------------------------
000283FA                            Map_obj10:
000283FA                            Obj86_MapUnc_2B45A:	include "mappings/sprite/Flippers.asm"
000283FA                            ; --------------------------------------------------------------------------------
000283FA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000283FA                            ; --------------------------------------------------------------------------------
000283FA                            
000283FA                            SME_ifQsP:	
000283FA 0000 0000                  		dc.w SME_ifQsP_C-SME_ifQsP, SME_ifQsP_1C-SME_ifQsP	
000283FE 0000 0000                  		dc.w SME_ifQsP_27-SME_ifQsP, SME_ifQsP_37-SME_ifQsP	
00028402 0000 0000                  		dc.w SME_ifQsP_47-SME_ifQsP, SME_ifQsP_5C-SME_ifQsP	
00028406 03                         SME_ifQsP_C:	dc.b 3	
00028407 F70B 000C E7               		dc.b $F7, $B, 0, $C, $E7	
0002840C FE01 0018 FF               		dc.b $FE, 1, 0, $18, $FF	
00028411 0105 001A 07               		dc.b 1, 5, 0, $1A, 7	
00028416 02                         SME_ifQsP_1C:	dc.b 2	
00028417 F80D 0000 E8               		dc.b $F8, $D, 0, 0, $E8	
0002841C F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00028421 03                         SME_ifQsP_27:	dc.b 3	
00028422 E90B 100C E7               		dc.b $E9, $B, $10, $C, $E7	
00028427 F201 1018 FF               		dc.b $F2, 1, $10, $18, $FF	
0002842C EF05 101A 07               		dc.b $EF, 5, $10, $1A, 7	
00028431 03                         SME_ifQsP_37:	dc.b 3	
00028432 E709 0024 F1               		dc.b $E7, 9, 0, $24, $F1	
00028437 F709 002A EF               		dc.b $F7, 9, 0, $2A, $EF	
0002843C 0705 0030 EF               		dc.b 7, 5, 0, $30, $EF	
00028441 04                         SME_ifQsP_47:	dc.b 4	
00028442 E803 001E F8               		dc.b $E8, 3, 0, $1E, $F8	
00028447 E803 081E 00               		dc.b $E8, 3, 8, $1E, 0	
0002844C 0801 0022 F8               		dc.b 8, 1, 0, $22, $F8	
00028451 0801 0822 00               		dc.b 8, 1, 8, $22, 0	
00028456 03                         SME_ifQsP_5C:	dc.b 3	
00028457 E709 0824 F7               		dc.b $E7, 9, 8, $24, $F7	
0002845C F709 082A F9               		dc.b $F7, 9, 8, $2A, $F9	
00028461 0705 0830 01               		dc.b 7, 5, 8, $30, 1	
00028466                            		even
00028466                            		even
00028466                            	even
00028466                            ; ===========================================================================
00028466 4E71                       	nop
00028468                            
00028468                            JmpTo27_MarkObjGone:
00028468 4EF9 0001 8EA6             	jmp	MarkObjGone
0002846E                            ; ===========================================================================
0002846E                            
0002846E                            JmpTo9_AnimateSprite:
0002846E 4EF9 0001 2754             	jmp	AnimateSprite
00028474                            ; ===========================================================================
00028474                            
00028474                            ;JmpTo50_Adjust2PArtPointer
00028474                            ;	jmp	Adjust2PArtPointer
00028474                            ; ===========================================================================
00028474                            
00028474                            JmpTo11_CalcSine:
00028474 4EF9 0000 8F30             	jmp	(CalcSine).l
0002847A                            ; ===========================================================================
0002847A                            
0002847A                            JmpTo6_loc_1978E:
0002847A 4EF9 0001 958A             	jmp	SolidObject
00028480                            ; ===========================================================================
00028480                            
00028480                            JmpTo2_SolidObject86_30:
00028480 4EF9 0001 961E             	jmp	SolidObject71
00028486                            ; ===========================================================================
00028486                            ; ---------------------------------------------------------------------------
00028486                            ; Subroutine to	animate	level graphics
00028486                            ; ---------------------------------------------------------------------------
00028486                            
00028486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028486                            
00028486                            
00028486                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00028486 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0002848A 6600                       		bne.s	AniArt_Pause	; if yes, branch
0002848C 4DF9 00C0 0000             		lea	($C00000).l,a6
00028492 4EB9 0000 0000             		jsr	AniArt_GiantRing
00028498 7000                       		moveq	#0,d0
0002849A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002849E D040                       		add.w	d0,d0
000284A0 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
000284A4 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
000284A8                            ; ===========================================================================
000284A8                            
000284A8                            AniArt_Pause:
000284A8 4E75                       		rts	
000284AA                            ; End of function AniArt_Load
000284AA                            
000284AA                            ; ===========================================================================
000284AA 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
000284AE 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
000284B2 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
000284B6 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_none-AniArt_Index
000284BA                            ; ===========================================================================
000284BA                            ; ---------------------------------------------------------------------------
000284BA                            ; Animated pattern routine - Green Hill
000284BA                            ; ---------------------------------------------------------------------------
000284BA                            
000284BA                            AniArt_GHZ:				; XREF: AniArt_Index
000284BA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
000284BE 6A00                       		bpl.s	loc_1C08A
000284C0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
000284C6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
000284CC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
000284D0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
000284D4 0240 0001                  		andi.w	#1,d0
000284D8 6700                       		beq.s	loc_1C078
000284DA 43E9 0100                  		lea	$100(a1),a1	; load next frame
000284DE                            
000284DE                            loc_1C078:
000284DE 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
000284E8 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
000284EC 6000 0000                  		bra.w	LoadTiles
000284F0                            ; ===========================================================================
000284F0                            
000284F0                            loc_1C08A:
000284F0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000284F4 6A00                       		bpl.s	loc_1C0C0
000284F6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
000284FC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00028502 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00028506 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0002850A 0240 0001                  		andi.w	#1,d0
0002850E 6700                       		beq.s	loc_1C0AE
00028510 43E9 0200                  		lea	$200(a1),a1
00028514                            
00028514                            loc_1C0AE:
00028514 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0002851E 323C 000F                  		move.w	#$F,d1
00028522 6000 0000                  		bra.w	LoadTiles
00028526                            ; ===========================================================================
00028526                            
00028526                            loc_1C0C0:
00028526 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002852A 6A00                       		bpl.s	locret_1C10C
0002852C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00028532 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00028536 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0002853A 0240 0003                  		andi.w	#3,d0
0002853E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
00028542 0800 0000                  		btst	#0,d0
00028546 6600                       		bne.s	loc_1C0E8
00028548 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0002854E                            
0002854E                            loc_1C0E8:
0002854E EF48                       		lsl.w	#7,d0
00028550 3200                       		move.w	d0,d1
00028552 D040                       		add.w	d0,d0
00028554 D041                       		add.w	d1,d0
00028556 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00028560 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00028566 43F1 0000                  		lea	(a1,d0.w),a1
0002856A 323C 000B                  		move.w	#$B,d1
0002856E 4EB9 0000 0000             		jsr	LoadTiles
00028574                            
00028574                            locret_1C10C:
00028574 4E75                       		rts	
00028576                            ; ===========================================================================
00028576 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0002857A                            ; ===========================================================================
0002857A                            ; ---------------------------------------------------------------------------
0002857A                            ; Animated pattern routine - Marble
0002857A                            ; ---------------------------------------------------------------------------
0002857A                            
0002857A                            AniArt_MZ:				; XREF: AniArt_Index
0002857A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0002857E 6A00                       		bpl.s	loc_1C150
00028580 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
00028586 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0002858C 7000                       		moveq	#0,d0
0002858E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00028592 5200                       		addq.b	#1,d0
00028594 0C00 0003                  		cmpi.b	#3,d0
00028598 6600                       		bne.s	loc_1C134
0002859A 7000                       		moveq	#0,d0
0002859C                            
0002859C                            loc_1C134:
0002859C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
000285A0 C0FC 0100                  		mulu.w	#$100,d0
000285A4 D2C0                       		adda.w	d0,a1
000285A6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
000285B0 323C 0007                  		move.w	#7,d1
000285B4 4EB9 0000 0000             		jsr	LoadTiles
000285BA                            
000285BA                            loc_1C150:
000285BA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000285BE 6A00                       		bpl.s	loc_1C1AE
000285C0 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
000285C6 7000                       		moveq	#0,d0
000285C8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
000285CC 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
000285D2 EE58                       		ror.w	#7,d0
000285D4 D8C0                       		adda.w	d0,a4
000285D6 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
000285E0 7600                       		moveq	#0,d3
000285E2 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
000285E6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000285EA 1638 FE68                  		move.b	($FFFFFE68).w,d3
000285EE 343C 0003                  		move.w	#3,d2
000285F2                            
000285F2                            loc_1C188:
000285F2 3003                       		move.w	d3,d0
000285F4 D040                       		add.w	d0,d0
000285F6 0240 001E                  		andi.w	#$1E,d0
000285FA 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00028600 3033 0000                  		move.w	(a3,d0.w),d0
00028604 47F3 0000                  		lea	(a3,d0.w),a3
00028608 224C                       		movea.l	a4,a1
0002860A 323C 001F                  		move.w	#$1F,d1
0002860E 4E93                       		jsr	(a3)
00028610 5843                       		addq.w	#4,d3
00028612 51CA FFDE                  		dbf	d2,loc_1C188
00028616 4E75                       		rts	
00028618                            ; ===========================================================================
00028618                            
00028618                            loc_1C1AE:
00028618 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002861C 6A00 0000                  		bpl.w	locret_1C1EA
00028620 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00028626 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0002862C 7000                       		moveq	#0,d0
0002862E 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
00028632 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
00028636 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0002863C C0FC 00C0                  		mulu.w	#$C0,d0
00028640 D2C0                       		adda.w	d0,a1
00028642 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0002864C 323C 0005                  		move.w	#5,d1
00028650 6000 0000                  		bra.w	LoadTiles
00028654                            ; ===========================================================================
00028654                            
00028654                            locret_1C1EA:
00028654 4E75                       		rts	
00028656                            ; ===========================================================================
00028656                            ; ---------------------------------------------------------------------------
00028656                            ; Animated pattern routine - Scrap Brain
00028656                            ; ---------------------------------------------------------------------------
00028656                            
00028656                            AniArt_SBZ:				; XREF: AniArt_Index
00028656 7000                       		moveq	#0,d0
00028658 1038 FE11                  		move.b	($FFFFFE11).w,d0
0002865C D040                       		add.w	d0,d0
0002865E 303B 0000                  		move.w	AniArt_SBZ_Index(pc,d0.w),d0
00028662 4EFB 0000                  		jmp	AniArt_SBZ_Index(pc,d0.w)
00028666                            
00028666                            AniArt_SBZ_Index:
00028666 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index
00028668 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
0002866A 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
0002866C 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index ; this if you have a 4th SB act using outside bg
0002866E                            AniArt_SBZIn:
0002866E 4E75                       		rts
00028670                            
00028670                            AniArt_SBZOut:
00028670                            ; ===========================================================================
00028670                            
00028670                            loc_1C1F8:
00028670 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00028674 6A00                       		bpl.s	loc_1C250
00028676 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0002867C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00028682 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0002868C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00028690 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00028694 0240 0007                  		andi.w	#7,d0
00028698 6700                       		beq.s	loc_1C234
0002869A 5340                       		subq.w	#1,d0
0002869C C0FC 0180                  		mulu.w	#$180,d0
000286A0 43F1 0000                  		lea	(a1,d0.w),a1
000286A4 323C 000B                  		move.w	#$B,d1
000286A8 6000 0000                  		bra.w	LoadTiles
000286AC                            ; ===========================================================================
000286AC                            
000286AC                            loc_1C234:
000286AC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
000286B2                            
000286B2                            loc_1C23A:
000286B2 323C 0005                  		move.w	#5,d1
000286B6 4EB9 0000 0000             		jsr	LoadTiles
000286BC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000286C2 323C 0005                  		move.w	#5,d1
000286C6 6000 0000                  		bra.w	LoadTiles
000286CA                            ; ===========================================================================
000286CA                            
000286CA                            loc_1C250:
000286CA 4A38 F7B5                  		tst.b	($FFFFF7B5).w
000286CE 6700                       		beq.s	loc_1C25C
000286D0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000286D4 6000                       		bra.s	locret_1C2A0
000286D6                            ; ===========================================================================
000286D6                            
000286D6                            loc_1C25C:
000286D6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000286DA 6A00                       		bpl.s	locret_1C2A0
000286DC 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
000286E2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
000286E8 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
000286F2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
000286F6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000286FA 0240 0007                  		andi.w	#7,d0
000286FE 6700                       		beq.s	loc_1C298
00028700 5340                       		subq.w	#1,d0
00028702 C0FC 0180                  		mulu.w	#$180,d0
00028706 43F1 0000                  		lea	(a1,d0.w),a1
0002870A 323C 000B                  		move.w	#$B,d1
0002870E 6000 0000                  		bra.w	LoadTiles
00028712                            ; ===========================================================================
00028712                            
00028712                            loc_1C298:
00028712 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
00028718 6098                       		bra.s	loc_1C23A
0002871A                            ; ===========================================================================
0002871A                            
0002871A                            locret_1C2A0:
0002871A 4E75                       		rts	
0002871C                            ; ===========================================================================
0002871C                            ; ---------------------------------------------------------------------------
0002871C                            ; Animated pattern routine - ending sequence
0002871C                            ; ---------------------------------------------------------------------------
0002871C                            
0002871C                            AniArt_Ending:				; XREF: AniArt_Index
0002871C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00028720 6A00                       		bpl.s	loc_1C2F4
00028722 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00028728 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0002872E 45F8 9400                  		lea	($FFFF9400).w,a2
00028732 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00028736 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0002873A 0240 0001                  		andi.w	#1,d0
0002873E 6700                       		beq.s	loc_1C2CE
00028740 43E9 0200                  		lea	$200(a1),a1
00028744 45EA 0200                  		lea	$200(a2),a2
00028748                            
00028748                            loc_1C2CE:
00028748 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
00028752 323C 000F                  		move.w	#$F,d1
00028756 4EB9 0000 0000             		jsr	LoadTiles
0002875C 224A                       		movea.l	a2,a1
0002875E 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
00028768 323C 000F                  		move.w	#$F,d1
0002876C 6000 0000                  		bra.w	LoadTiles
00028770                            ; ===========================================================================
00028770                            
00028770                            loc_1C2F4:
00028770 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00028774 6A00                       		bpl.s	loc_1C33C
00028776 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0002877C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00028780 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
00028784 0240 0007                  		andi.w	#7,d0
00028788 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0002878C EF48                       		lsl.w	#7,d0
0002878E 3200                       		move.w	d0,d1
00028790 D040                       		add.w	d0,d0
00028792 D041                       		add.w	d1,d0
00028794 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0002879E 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
000287A4 43F1 0000                  		lea	(a1,d0.w),a1
000287A8 323C 000B                  		move.w	#$B,d1
000287AC 6000 0000                  		bra.w	LoadTiles
000287B0                            ; ===========================================================================
000287B0 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
000287B8                            ; ===========================================================================
000287B8                            
000287B8                            loc_1C33C:
000287B8 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
000287BC 6A00                       		bpl.s	loc_1C37A
000287BE 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
000287C4 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
000287C8 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
000287CC 0240 0003                  		andi.w	#3,d0
000287D0 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
000287D4 E148                       		lsl.w	#8,d0
000287D6 D040                       		add.w	d0,d0
000287D8 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
000287E2 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000287E6 43F1 0000                  		lea	(a1,d0.w),a1
000287EA 323C 000F                  		move.w	#$F,d1
000287EE 6000 0000                  		bra.w	LoadTiles
000287F2                            ; ===========================================================================
000287F2 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
000287F6                            ; ===========================================================================
000287F6                            
000287F6                            loc_1C37A:
000287F6 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
000287FA 6A00                       		bpl.s	locret_1C3B4
000287FC 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
00028802 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
00028806 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0002880A 0240 0003                  		andi.w	#3,d0
0002880E 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
00028812 E148                       		lsl.w	#8,d0
00028814 D040                       		add.w	d0,d0
00028816 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
00028820 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
00028824 43F1 0000                  		lea	(a1,d0.w),a1
00028828 323C 000F                  		move.w	#$F,d1
0002882C 6000 0000                  		bra.w	LoadTiles
00028830                            ; ===========================================================================
00028830                            
00028830                            locret_1C3B4:
00028830 4E75                       		rts	
00028832                            ; ===========================================================================
00028832                            
00028832                            AniArt_none:				; XREF: AniArt_Index
00028832 4E75                       		rts	
00028834                            
00028834                            ; ---------------------------------------------------------------------------
00028834                            ; Subroutine to	load (d1 - 1) 8x8 tiles
00028834                            ; ---------------------------------------------------------------------------
00028834                            
00028834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028834                            
00028834                            
00028834                            LoadTiles:
00028834 2C99                       		move.l	(a1)+,(a6)
00028836 2C99                       		move.l	(a1)+,(a6)
00028838 2C99                       		move.l	(a1)+,(a6)
0002883A 2C99                       		move.l	(a1)+,(a6)
0002883C 2C99                       		move.l	(a1)+,(a6)
0002883E 2C99                       		move.l	(a1)+,(a6)
00028840 2C99                       		move.l	(a1)+,(a6)
00028842 2C99                       		move.l	(a1)+,(a6)
00028844 51C9 FFEE                  		dbf	d1,LoadTiles
00028848 4E75                       		rts	
0002884A                            ; End of function LoadTiles
0002884A                            
0002884A                            ; ===========================================================================
0002884A                            ; ---------------------------------------------------------------------------
0002884A                            ; Animated pattern routine - more Marble Zone
0002884A                            ; ---------------------------------------------------------------------------
0002884A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0002884E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
00028852 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
00028856 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0002885A 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0002885E 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
00028862 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
00028866 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0002886A                            ; ===========================================================================
0002886A                            
0002886A                            loc_1C3EE:				; XREF: AniArt_MZextra
0002886A 2C91                       		move.l	(a1),(a6)
0002886C 43E9 0010                  		lea	x_vel(a1),a1
00028870 51C9 FFF8                  		dbf	d1,loc_1C3EE
00028874 4E75                       		rts	
00028876                            ; ===========================================================================
00028876                            
00028876                            loc_1C3FA:				; XREF: AniArt_MZextra
00028876 2029 0002                  		move.l	2(a1),d0
0002887A 1029 0001                  		move.b	1(a1),d0
0002887E E098                       		ror.l	#8,d0
00028880 2C80                       		move.l	d0,(a6)
00028882 43E9 0010                  		lea	x_vel(a1),a1
00028886 51C9 FFEE                  		dbf	d1,loc_1C3FA
0002888A 4E75                       		rts	
0002888C                            ; ===========================================================================
0002888C                            
0002888C                            loc_1C410:				; XREF: AniArt_MZextra
0002888C 2CA9 0002                  		move.l	2(a1),(a6)
00028890 43E9 0010                  		lea	x_vel(a1),a1
00028894 51C9 FFF6                  		dbf	d1,loc_1C410
00028898 4E75                       		rts	
0002889A                            ; ===========================================================================
0002889A                            
0002889A                            loc_1C41E:				; XREF: AniArt_MZextra
0002889A 2029 0004                  		move.l	4(a1),d0
0002889E 1029 0003                  		move.b	3(a1),d0
000288A2 E098                       		ror.l	#8,d0
000288A4 2C80                       		move.l	d0,(a6)
000288A6 43E9 0010                  		lea	x_vel(a1),a1
000288AA 51C9 FFEE                  		dbf	d1,loc_1C41E
000288AE 4E75                       		rts	
000288B0                            ; ===========================================================================
000288B0                            
000288B0                            loc_1C434:				; XREF: AniArt_MZextra
000288B0 2CA9 0004                  		move.l	4(a1),(a6)
000288B4 43E9 0010                  		lea	x_vel(a1),a1
000288B8 51C9 FFF6                  		dbf	d1,loc_1C434
000288BC 4E75                       		rts	
000288BE                            ; ===========================================================================
000288BE                            
000288BE                            loc_1C442:				; XREF: AniArt_MZextra
000288BE 2029 0006                  		move.l	6(a1),d0
000288C2 1029 0005                  		move.b	5(a1),d0
000288C6 E098                       		ror.l	#8,d0
000288C8 2C80                       		move.l	d0,(a6)
000288CA 43E9 0010                  		lea	x_vel(a1),a1
000288CE 51C9 FFEE                  		dbf	d1,loc_1C442
000288D2 4E75                       		rts	
000288D4                            ; ===========================================================================
000288D4                            
000288D4                            loc_1C458:				; XREF: AniArt_MZextra
000288D4 2CA9 0006                  		move.l	6(a1),(a6)
000288D8 43E9 0010                  		lea	x_vel(a1),a1
000288DC 51C9 FFF6                  		dbf	d1,loc_1C458
000288E0 4E75                       		rts	
000288E2                            ; ===========================================================================
000288E2                            
000288E2                            loc_1C466:				; XREF: AniArt_MZextra
000288E2 2029 0008                  		move.l	8(a1),d0
000288E6 1029 0007                  		move.b	7(a1),d0
000288EA E098                       		ror.l	#8,d0
000288EC 2C80                       		move.l	d0,(a6)
000288EE 43E9 0010                  		lea	x_vel(a1),a1
000288F2 51C9 FFEE                  		dbf	d1,loc_1C466
000288F6 4E75                       		rts	
000288F8                            ; ===========================================================================
000288F8                            
000288F8                            loc_1C47C:				; XREF: AniArt_MZextra
000288F8 2CA9 0008                  		move.l	8(a1),(a6)
000288FC 43E9 0010                  		lea	x_vel(a1),a1
00028900 51C9 FFF6                  		dbf	d1,loc_1C47C
00028904 4E75                       		rts	
00028906                            ; ===========================================================================
00028906                            
00028906                            loc_1C48A:				; XREF: AniArt_MZextra
00028906 2029 000A                  		move.l	$A(a1),d0
0002890A 1029 0009                  		move.b	9(a1),d0
0002890E E098                       		ror.l	#8,d0
00028910 2C80                       		move.l	d0,(a6)
00028912 43E9 0010                  		lea	x_vel(a1),a1
00028916 51C9 FFEE                  		dbf	d1,loc_1C48A
0002891A 4E75                       		rts	
0002891C                            ; ===========================================================================
0002891C                            
0002891C                            loc_1C4A0:				; XREF: AniArt_MZextra
0002891C 2CA9 000A                  		move.l	$A(a1),(a6)
00028920 43E9 0010                  		lea	x_vel(a1),a1
00028924 51C9 FFF6                  		dbf	d1,loc_1C4A0
00028928 4E75                       		rts	
0002892A                            ; ===========================================================================
0002892A                            
0002892A                            loc_1C4AE:				; XREF: AniArt_MZextra
0002892A 2029 000C                  		move.l	$C(a1),d0
0002892E 1029 000B                  		move.b	$B(a1),d0
00028932 E098                       		ror.l	#8,d0
00028934 2C80                       		move.l	d0,(a6)
00028936 43E9 0010                  		lea	x_vel(a1),a1
0002893A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0002893E 4E75                       		rts	
00028940                            ; ===========================================================================
00028940                            
00028940                            loc_1C4C4:				; XREF: AniArt_MZextra
00028940 2CA9 000C                  		move.l	$C(a1),(a6)
00028944 43E9 0010                  		lea	x_vel(a1),a1
00028948 51C9 FFF6                  		dbf	d1,loc_1C4C4
0002894C 4E75                       		rts	
0002894E                            ; ===========================================================================
0002894E                            
0002894E                            loc_1C4D2:				; XREF: AniArt_MZextra
0002894E 2029 000C                  		move.l	$C(a1),d0
00028952 E198                       		rol.l	#8,d0
00028954 1011                       		move.b	0(a1),d0
00028956 2C80                       		move.l	d0,(a6)
00028958 43E9 0010                  		lea	x_vel(a1),a1
0002895C 51C9 FFF0                  		dbf	d1,loc_1C4D2
00028960 4E75                       		rts	
00028962                            ; ===========================================================================
00028962                            
00028962                            loc_1C4E8:				; XREF: AniArt_MZextra
00028962 3CA9 000E                  		move.w	$E(a1),(a6)
00028966 3C91                       		move.w	0(a1),(a6)
00028968 43E9 0010                  		lea	x_vel(a1),a1
0002896C 51C9 FFF4                  		dbf	d1,loc_1C4E8
00028970 4E75                       		rts	
00028972                            ; ===========================================================================
00028972                            
00028972                            loc_1C4FA:				; XREF: AniArt_MZextra
00028972 2011                       		move.l	0(a1),d0
00028974 1029 000F                  		move.b	$F(a1),d0
00028978 E098                       		ror.l	#8,d0
0002897A 2C80                       		move.l	d0,(a6)
0002897C 43E9 0010                  		lea	x_vel(a1),a1
00028980 51C9 FFF0                  		dbf	d1,loc_1C4FA
00028984 4E75                       		rts	
00028986                            
00028986                            ; ---------------------------------------------------------------------------
00028986                            ; Animated pattern routine - giant ring
00028986                            ; ---------------------------------------------------------------------------
00028986                            
00028986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028986                            
00028986                            
00028986                            AniArt_GiantRing:			; XREF: AniArt_Load
00028986 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0002898A 6600                       		bne.s	loc_1C518
0002898C 4E75                       		rts	
0002898E                            ; ===========================================================================
0002898E                            
0002898E                            loc_1C518:
0002898E 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
00028994 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0002899A 7000                       		moveq	#0,d0
0002899C 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
000289A0 43F1 0000                  		lea	(a1,d0.w),a1
000289A4 0640 8000                  		addi.w	#$8000,d0
000289A8 E588                       		lsl.l	#2,d0
000289AA E448                       		lsr.w	#2,d0
000289AC 0040 4000                  		ori.w	#$4000,d0
000289B0 4840                       		swap	d0
000289B2 2D40 0004                  		move.l	d0,4(a6)
000289B6 323C 000D                  		move.w	#$D,d1
000289BA 6000 FE78                  		bra.w	LoadTiles
000289BE                            ; End of function AniArt_GiantRing
000289BE                            
000289BE                            ; ===========================================================================
000289BE                            ; ---------------------------------------------------------------------------
000289BE                            ; Object 21 - SCORE, TIME, RINGS
000289BE                            ; ---------------------------------------------------------------------------
000289BE                            
000289BE                            Obj21:					; XREF: Obj_Index
000289BE 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
000289C4 6600                       		bne.s	Obj21_NoCutscene
000289C6 4E75                       		rts
000289C8                            Obj21_NoCutscene:
000289C8 0C38 003A D5C0             		cmpi.b	#$3A,($FFFFD5C0).w	; is the level finished?
000289CE 6600                       		bne.s	Obj21_HUD	; if not, branch
000289D0 4EF9 0001 5D26             		jmp		DeleteObject
000289D6                            Obj21_HUD:
000289D6 4EB9 0001 5D4E             		jsr		LoadLivesCounterArt
000289DC                            ;		tst.w	(Game_paused).w	; is the game paused?
000289DC                            ;		beq.s	Obj21_HUD	; if not, branch
000289DC                            ;		jmp		Obj04
000289DC                            ;Obj21_HUD:
000289DC 7000                       		moveq	#0,d0
000289DE 1028 0024                  		move.b	routine(a0),d0
000289E2 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
000289E6 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
000289EA                            ; ===========================================================================
000289EA 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
000289EC 0000                       		dc.w Obj21_Flash-Obj21_Index
000289EE                            ; ===========================================================================
000289EE                            
000289EE                            Obj21_Main:				; XREF: Obj21_Main
000289EE 5428 0024                  		addq.b	#2,routine(a0)
000289F2 317C 0000 0008             		move.w	#0,8(a0)
000289F8 317C 0108 000A             		move.w	#$108,$A(a0)
000289FE 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
00028A06                            ;	if HUDInSpecialStage=1	;Mercury HUD in Special Stage
00028A06 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w ; test if in Special Stage Mode
00028A0C 6600                       		bne.s	@skipload	; if yes, branch
00028A0E 217C 0000 0000 0004        		move.l	#Map_obj21SS,mappings(a0)
00028A16                            	@skipload:
00028A16 317C 06CA 0002             		move.w	#$6CA,2(a0)	;Mercury HUD Centiseconds
00028A1C                            
00028A1C                            
00028A1C                            ;	endc	;end HUD in Special Stage
00028A1C 117C 0000 0001             		move.b	#0,1(a0)
00028A22 117C 0000 0018             		move.b	#0,priority(a0)
00028A28                            
00028A28                            Obj21_Flash:
00028A28                            ;		cmpi.b	#9,(v_player).w ; test if Special Stage Sonic is present
00028A28                            ;		beq.s	@Obj21_Flash	; if yes, branch
00028A28                            ;		jsr      HudMove_DisplayCol
00028A28                            ;		jmp		@Obj21_Flash2
00028A28                            ;@Obj21_Flash:
00028A28 317C 0090 0008             		move.w  #$90,8(a0)
00028A2E                            @Obj21_Flash2:
00028A2E 4A78 FE20                          tst.w    ($FFFFFE20).w; do you have any rings?
00028A32 6700                               beq.s    Obj21_Flash2; if not, branch
00028A34 7000                               moveq    #0,d0
00028A36 0838 0003 FE05                     btst    #3,($FFFFFE05).w
00028A3C 6600                               bne.s    Obj21_Display
00028A3E 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
00028A44 6600                               bne.s    Obj21_Display; if not, branch
00028A46 5440                               addq.w    #2,d0    ; make time counter flash red
00028A48 6000                               bra.s    Obj21_Display
00028A4A                            ; ===========================================================================
00028A4A                            
00028A4A                            Obj21_Flash2:
00028A4A 7000                               moveq    #0,d0
00028A4C 0838 0003 FE05                     btst    #3,($FFFFFE05).w
00028A52 6600                               bne.s    Obj21_Display
00028A54 5240                               addq.w    #1,d0    ; make ring counter flash red
00028A56 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
00028A5C 6600                               bne.s    Obj21_Display; if not, branch
00028A5E 5440                               addq.w    #2,d0    ; make time counter flash red 
00028A60                            		
00028A60                            Obj21_Display:
00028A60 1140 001A                  		move.b	d0,mapping_frame(a0)
00028A64 4EF9 0001 5D72             		jmp	DisplaySprite
00028A6A                            ; ===========================================================================
00028A6A                            ; ---------------------------------------------------------------------------
00028A6A                            ; Sprite mappings - SCORE, TIME, RINGS
00028A6A                            ; ---------------------------------------------------------------------------
00028A6A                            Map_obj21:
00028A6A                            	include "_maps\obj21.asm"
00028A6A                            ; ---------------------------------------------------------------------------
00028A6A                            ; Sprite mappings - SCORE, TIME, RINGS
00028A6A                            ; ---------------------------------------------------------------------------
00028A6A 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
00028A6E 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
00028A72                            		
00028A72                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
00028A72 0C                         byte_1C5BC:	dc.b $C
00028A73 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028A78 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028A7D 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028A82 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
00028A87 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028A8C 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028A91 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028A96 A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
00028A9B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
00028AA0 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028AA5 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028AAA 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028AAF 00                         		dc.b 0
00028AB0 0A                         byte_1C5F0:	dc.b $A
00028AB1 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028AB6 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028ABB 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028AC0 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
00028AC5 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028ACA 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028ACF 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028AD4                            ;		dc.b $A0, $D, $A0, 8, 0		; RING
00028AD4                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
00028AD4 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028AD9 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028ADE 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028AE3 00                         		dc.b 0
00028AE4 0B                         byte_1C624:	dc.b $B
00028AE5 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028AEA 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028AEF 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028AF4                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
00028AF4 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028AF9 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028AFE 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028B03 A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
00028B08 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
00028B0D A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028B12 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028B17 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028B1C 00                         		dc.b 0
00028B1D 09                         byte_1C658:	dc.b $9
00028B1E 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028B23 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028B28 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028B2D                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
00028B2D 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028B32 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028B37 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028B3C                            ;		dc.b $A0, $D, $A0, 8, -2		; RING
00028B3C                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
00028B3C A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028B41 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
00028B46 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028B4C 00                         		even
00028B4C 00                         		even
00028B4C                            Map_obj21SS:
00028B4C                            	include "_maps\obj21ss.asm"
00028B4C                            ; ---------------------------------------------------------------------------
00028B4C                            ; Sprite mappings - SCORE, TIME, RINGS
00028B4C                            ; ---------------------------------------------------------------------------
00028B4C 0000 0000                  		dc.w byte_1C5BC_SS-Map_obj21SS, byte_1C5F0_SS-Map_obj21SS
00028B50 0000 0000                  		dc.w byte_1C624_SS-Map_obj21SS, byte_1C658_SS-Map_obj21SS
00028B54                            		
00028B54                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
00028B54 05                         byte_1C5BC_SS:	dc.b 5
00028B55                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028B55                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028B55                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028B55 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
00028B5A 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028B5F                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028B5F                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028B5F 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
00028B64 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
00028B69 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028B6E                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028B6E                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028B6E 00                         		dc.b 0
00028B6F 05                         byte_1C5F0_SS:	dc.b 5
00028B70                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028B70                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028B70                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028B70 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
00028B75 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028B7A                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028B7A                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028B7A 900D A008 00               		dc.b $90, $D, $A0, 8, 0		; RING
00028B7F 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
00028B84 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028B89                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028B89                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028B89 00                         		dc.b 0
00028B8A 05                         byte_1C624_SS:	dc.b 5
00028B8B                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028B8B                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028B8B                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028B8B 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
00028B90 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028B95                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028B95                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028B95 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
00028B9A 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
00028B9F 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028BA4                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028BA4                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028BA4 00                         		dc.b 0
00028BA5 05                         byte_1C658_SS:	dc.b 5
00028BA6                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028BA6                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028BA6                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028BA6 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
00028BAB 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028BB0                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028BB0                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028BB0 900D A008 FE               		dc.b $90, $D, $A0, 8, -2		; RING
00028BB5 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
00028BBA 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028BBF                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028BBF                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028BC0 00                         		even
00028BC0 00                         		even
00028BC0                            
00028BC0                            ; ----------------------------------------------------------------------------
00028BC0                            ; HUD code
00028BC0                            ; ----------------------------------------------------------------------------
00028BC0                            loc_40804:
00028BC0                            
00028BC0 4A78 FE20                  	tst.w	(Ring_count).w
00028BC4 6700                       	beq.s	loc_40820
00028BC6 7200                       	moveq	#0,d1
00028BC8 0838 0003 FE05             	btst	#3,($FFFFFE05).w
00028BCE 6600                       	bne.s	BranchTo_loc_40836
00028BD0 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
00028BD6 6600                       	bne.s	BranchTo_loc_40836
00028BD8 5441                       	addq.w	#2,d1
00028BDA                            
00028BDA                            BranchTo_loc_40836:
00028BDA 6000                       	bra.s	loc_40836
00028BDC                            ; ===========================================================================
00028BDC                            
00028BDC                            loc_40820:
00028BDC 7200                       	moveq	#0,d1
00028BDE 0838 0003 FE05             	btst	#3,($FFFFFE05).w
00028BE4 6600                       	bne.s	loc_40836
00028BE6 5241                       	addq.w	#1,d1
00028BE8 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
00028BEE 6600                       	bne.s	loc_40836
00028BF0 5441                       	addq.w	#2,d1
00028BF2                            
00028BF2                            loc_40836:
00028BF2                            ;	illegal
00028BF2                            ;	movem 	d1-d3,-(sp)
00028BF2                            ;	jsr		LoadLivesCounterArt
00028BF2                            ;	movem	(sp)+,d1-d3
00028BF2 363C 0090                  	move.w	#$90,d3
00028BF6 343C 0108                  	move.w	#$108,d2
00028BFA 43F9 0002 8A6A             	lea	(Map_obj21).l,a1
00028C00 367C 06CA                  	movea.w	#$6CA,a3
00028C04 D241                       	add.w	d1,d1
00028C06 D2F1 1000                  	adda.w	(a1,d1.w),a1
00028C0A 3219                       	move.w	(a1)+,d1
00028C0C 5341                       	subq.w	#1,d1
00028C0E 6B00                       	bmi.s	return_40858
00028C10 6100 0000                  	bsr.w	JmpTo_loc_1682A
00028C14                            
00028C14                            return_40858:
00028C14 4E75                       	rts
00028C16                            ; End of function h
00028C16                            
00028C16                            ; =============== S U B	R O U T	I N E =======================================
00028C16                            
00028C16                            
00028C16                            Hud_CentSec:				; CODE XREF: HUDUpdate:
00028C16 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
00028C1C 6600 0000                  		bne.w	Hud_CentSec2
00028C20 4EF9 0000 0000             		jmp		Hud_LoadZero2
00028C26                            Hud_CentSec2:
00028C26 7200                       		moveq	#0,d1
00028C28 1238 FE25                  		move.b	(Timer_frame).w,d1
00028C2C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028C32 6600                       		bne.s	Hud_CentSec3			; if not, branch
00028C34 123B 1000                  		move.b	CentSecTable(pc,d1.w),d1	
00028C38 4EF9 0000 0000             		jmp		Hud_CentSec4
00028C3E                            Hud_CentSec3:
00028C3E 123B 1000                  		move.b	CentSecTablePAL(pc,d1.w),d1
00028C42                            Hud_CentSec4:
00028C42 203C 75C0 0003             		move.l	#$75C00003,d0
00028C48 4EF9 0000 0000             		jmp	Hud_Secs
00028C4E                            ; End of function Hud_CentSec
00028C4E                            
00028C4E                            ; ---------------------------------------------------------------------------
00028C4E 0001 0305                  CentSecTable:	dc.b 0,	1, 3, 5		; DATA XREF: Hud_CentSec2:
00028C52 0608 0A0B                  		dc.b 6,	8, 10, 11
00028C56 0D0F 1012                  		dc.b 13, 15, 16, 18
00028C5A 1415 1719                  		dc.b 20, 21, 23, 25
00028C5E 1B1C 1E20                  		dc.b 27, 28, 30, 32
00028C62 2123 2526                  		dc.b 33, 35, 37, 38
00028C66 282A 2B2D                  		dc.b 40, 42, 43, 45
00028C6A 2F31 3234                  		dc.b 47, 49, 50, 52
00028C6E 3637 393B                  		dc.b 54, 55, 57, 59
00028C72 3C3E 4041                  		dc.b 60, 62, 64, 65
00028C76 4345 4648                  		dc.b 67, 69, 70, 72
00028C7A 4A4C 4D4F                  		dc.b 74, 76, 77, 79
00028C7E 5152 5456                  		dc.b 81, 82, 84, 86
00028C82 5759 5B5C                  		dc.b 87, 89, 91, 92
00028C86 5E60 6263                  		dc.b 94, 96, 98, 99
00028C8A                            		even			; added this to avoid alignment errors
00028C8A                            
00028C8A                            
00028C8A 0002 0406                  CentSecTablePAL:	dc.b 0,	2, 4, 6		; DATA XREF: Hud_CentSec2:
00028C8E 080A 0C0E                  		dc.b 8,	10, 12, 14
00028C92 1012 1416                  		dc.b 16, 18, 20, 22
00028C96 181A 1C1E                  		dc.b 24, 26, 28, 30
00028C9A 2022 2426                  		dc.b 32, 34, 36, 38
00028C9E 282A 2C2E                  		dc.b 40, 42, 44, 46
00028CA2 3032 3436                  		dc.b 48, 50, 52, 54
00028CA6 383A 3C3E                  		dc.b 56, 58, 60, 62
00028CAA 4042 4446                  		dc.b 64, 66, 68, 70
00028CAE 484A 4C4E                  		dc.b 72, 74, 76, 78
00028CB2 5052 5456                  		dc.b 80, 82, 84, 86
00028CB6 585A 5C5E                  		dc.b 88, 90, 92, 94
00028CBA 6063                       		dc.b 96, 99
00028CBC                            		even			; added this to avoid alignment errors
00028CBC                            ; ---------------------------------------------------------------------------
00028CBC                            ; Add points subroutine
00028CBC                            ; ---------------------------------------------------------------------------
00028CBC                            
00028CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028CBC                            
00028CBC                            
00028CBC                            AddPoints:					  ; ...
00028CBC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00028CC2 47F8 FE26                  		lea	($FFFFFE26).w,a3
00028CC6 D193                       		add.l	d0,(a3)
00028CC8 223C 000F 423F             		move.l	#999999,d1
00028CCE B293                       		cmp.l	(a3),d1
00028CD0 6200                       		bhi.s	loc_339488
00028CD2 2681                       		move.l	d1,(a3)
00028CD4                            
00028CD4                            loc_339488:					  ; ...
00028CD4 2013                       		move.l	(a3),d0
00028CD6 B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
00028CDA 6500                       		bcs.s	return_3394AA
00028CDC B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
00028CE0 6500                       		bcs.s	return_3394AA
00028CE2 06B8 0000 1388 FFC0        		add.l	#$1388,($FFFFFFC0).w
00028CEA                            ;		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
00028CEA                            ;		bge.s	@playbgm
00028CEA 4EF9 0001 223E             		jmp		ExtraLife
00028CF0                            ; ===========================================================================
00028CF0                            
00028CF0                            return_3394AA:
00028CF0 4E75                       	rts
00028CF2                            ; End of function AddPoints
00028CF2                            
00028CF2                            ; ---------------------------------------------------------------------------
00028CF2                            ; Subroutine to update the HUD
00028CF2                            ; ---------------------------------------------------------------------------
00028CF2                            
00028CF2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00028CF2                            
00028CF2                            ; sub_40D8A:
00028CF2                            HudUpdate:
00028CF2 4E71                       	nop
00028CF4 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
00028CFA                            ;	tst.w	(Two_player_mode).w
00028CFA                            ;	bne.w	loc_40F50
00028CFA 0C38 0001 FE09             	cmpi.b	#1,($FFFFFE09).w
00028D00 6700 0000                  	beq.w	loc_40E9A
00028D04 6100 FF10                  	bsr.w	Hud_CentSec
00028D08 4A38 FE1F                  	tst.b	(Update_HUD_score).w	; does the score need updating?
00028D0C 6700                       	beq.s	Hud_ChkRings	; if not, branch
00028D0E 4238 FE1F                  	clr.b	(Update_HUD_score).w
00028D12 203C 5C80 0003             	move.l	#$5C800003,d0	; set VRAM address
00028D18 2238 FE26                  	move.l	(Score).w,d1	; load score
00028D1C 6100 0000                  	bsr.w	Hud_Score
00028D20                            ; loc_40DBA:
00028D20                            Hud_ChkRings:
00028D20 4A38 FE1D                  	tst.b	(Update_HUD_rings).w	; does the ring counter need updating?
00028D24 6700                       	beq.s	Hud_ChkTime	; if not, branch
00028D26 6A00                       	bpl.s	loc_40DC6
00028D28 6100 0000                  	bsr.w	Hud_LoadZero
00028D2C                            ;	bsr.w	Hud_LoadZero2
00028D2C                            
00028D2C                            loc_40DC6:
00028D2C 4238 FE1D                  	clr.b	(Update_HUD_rings).w
00028D30 203C 5F40 0003             	move.l	#$5F400003,d0
00028D36 7200                       	moveq	#0,d1
00028D38 3238 FE20                  	move.w	(Ring_count).w,d1
00028D3C 0C41 03E8                  	cmpi.w	#1000,d1
00028D40 6500                       	blo.s	@cappedrings
00028D42 323C 03E7                  	move.w	#999,d1
00028D46 31C1 FE20                  	move.w	d1,(Ring_count).w
00028D4A                            
00028D4A                            @cappedrings:
00028D4A 6100 0000                  	bsr.w	Hud_Rings
00028D4E                            ; loc_40DDA:
00028D4E                            Hud_ChkTime:
00028D4E 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; does the time need updating?
00028D52 6700 0000                  	beq.w	Hud_ChkLives	; if not, branch
00028D56 4A78 F63A                  	tst.w	(Game_paused).w	; is the game paused?
00028D5A 6600 0000                  	bne.w	Hud_ChkLives	; if yes, branch
00028D5E 43F8 FE22                  	lea	(Timer).w,a1
00028D62                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
00028D62                            ;		cmpi.l	#$93B3B,(a1)+	; is the time 9'59"99?
00028D62                            ;		bge.w	loc_40E84	; if yes, branch	; if yes, branch	;Mercury HUD In Special Stage (bsr.s => bsr.w)
00028D62                            ;		move.b	(v_centstep).w,d1
00028D62                            ;		addi.b	#1,d1
00028D62                            ;		cmpi.b	#3,d1
00028D62                            ;		bne.s	@skip
00028D62                            ;		move.b	#0,d1
00028D62                            		
00028D62                            ;	@skip:
00028D62                            ;		move.b	d1,(v_centstep).w
00028D62                            ;		cmpi.b	#2,d1
00028D62                            ;		beq.s	@skip2
00028D62                            ;		addi.b	#1,d1
00028D62                            ;		
00028D62                            ;	@skip2:
00028D62                            ;		add.b	d1,-(a1)
00028D62                            ;		cmpi.b	#100,(a1)
00028D62                            ;		bcs.s	Hud_DoCent
00028D62                            ;	else
00028D62 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028D68 6700                       	beq.s	Hud_TimeOverNotPAL			; if not, branch
00028D6A 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+	; is the time 9.59?
00028D70 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
00028D74 4EF9 0000 0000             	jmp		Hud_TimeOverNotPAL2
00028D7A                            Hud_TimeOverNotPAL:
00028D7A 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
00028D80 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
00028D84                            Hud_TimeOverNotPAL2:
00028D84 5221                       	addq.b	#1,-(a1)
00028D86 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028D8C 6600                       	bne.s	Hud_ChkTimePAL
00028D8E 0C11 003C                  	cmpi.b	#60,(a1)
00028D92 6500 0000                  	bcs.w	Hud_ChkLives
00028D96 4EF9 0000 0000             	jmp		Hud_ChkTimeNotPAL
00028D9C                            ;	endc	;end HUD Centiseconds
00028D9C                            Hud_ChkTimePAL:
00028D9C 0C11 0032                  	cmpi.b	#50,(a1)
00028DA0 6500                       	bcs.s	Hud_ChkLives
00028DA2                            	
00028DA2                            Hud_ChkTimeNotPAL:	
00028DA2 0C38 0009 FE23             	cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
00028DA8 6D00                       	blt.s	ContinueHUDU	; if not, branch
00028DAA 0C38 0028 FE24             	cmpi.b	#40,(Timer_second).w
00028DB0 6D00                       	blt.s	ContinueHUDU
00028DB2 33FC 0100 00A1 1100 0839+  	stopZ80
00028DC4 13FC 00A7 00A0 1C0A        	move.b	#$A7,($A01C0A).l
00028DCC 33FC 0000 00A1 1100        	startZ80
00028DD4                            ContinueHUDU:
00028DD4                            ;	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028DD4                            ;	bne.s	ContinueHUDUPAL
00028DD4 12BC 0000                  	move.b	#0,(a1)
00028DD8 5221                       	addq.b	#1,-(a1)
00028DDA 0C11 003C                  	cmpi.b	#60,(a1)
00028DDE 6500                       	bcs.s	loc_40E18
00028DE0 12BC 0000                  	move.b	#0,(a1)
00028DE4 5221                       	addq.b	#1,-(a1)
00028DE6 0C11 0009                  	cmpi.b	#9,(a1)
00028DEA 6500                       	bcs.s	loc_40E18
00028DEC 12BC 0009                  	move.b	#9,(a1)
00028DF0                            ;	jmp		loc_40E18
00028DF0                            ;ContinueHUDUPAL:
00028DF0                            ;	move.b	#0,(a1)
00028DF0                            ;	addq.b	#1,-(a1)
00028DF0                            ;	cmpi.b	#60,(a1)
00028DF0                            ;	bcs.s	loc_40E18
00028DF0                            ;	move.b	#0,(a1)
00028DF0                            ;	addq.b	#1,-(a1)
00028DF0                            ;	cmpi.b	#9,(a1)
00028DF0                            ;	bcs.s	loc_40E18
00028DF0                            ;	move.b	#9,(a1)
00028DF0                            	
00028DF0                            loc_40E18:		
00028DF0                            
00028DF0 203C 5E40 0003             	move.l	#$5E400003,d0
00028DF6 7200                       	moveq	#0,d1
00028DF8 1238 FE23                  	move.b	(Timer_minute).w,d1
00028DFC 6100 0000                  	bsr.w	Hud_Mins
00028E00 203C 5EC0 0003             	move.l	#$5EC00003,d0
00028E06 7200                       	moveq	#0,d1
00028E08 1238 FE24                  	move.b	(Timer_second).w,d1
00028E0C 6100 0000                  	bsr.w	Hud_Secs
00028E10                            ;	move.l	#$75C00003,d0
00028E10                            ;	moveq	#0,d1
00028E10                            ;	move.b	(Timer_frame).w,d1
00028E10                            ;	bsr.w	Hud_Secs
00028E10                            	
00028E10                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
00028E10                            ;Hud_DoCent:
00028E10                            ;		move.l	#$75C00003,d0	;Mercury Macros
00028E10                            ;		moveq	#0,d1
00028E10                            ;		move.b	(Timer_Centisecond).w,d1 ; load	seconds
00028E10                            ;		bsr.w	Hud_Secs
00028E10                            ;	endc	;end HUD Centiseconds
00028E10                            ; loc_40E38:
00028E10                            Hud_ChkLives:
00028E10                            ;	bsr.s	CentiSecond
00028E10 4A38 FE1C                  	tst.b	(Update_HUD_lives).w	; does the lives counter need updating?
00028E14 6700                       	beq.s	Hud_ChkBonus	; if not, branch
00028E16 4238 FE1C                  	clr.b	(Update_HUD_lives).w
00028E1A 6100 0000                  	bsr.w	Hud_Lives
00028E1E                            ; loc_40E46:
00028E1E                            Hud_ChkBonus:
00028E1E 4A38 F7D6                  		tst.b	(Update_Bonus_score).w	; do time/ring bonus counters need updating?
00028E22 6700                       		beq.s	Hud_End		; if not, branch
00028E24 4238 F7D6                  		clr.b	(Update_Bonus_score).w
00028E28 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
00028E32 7200                       		moveq	#0,d1
00028E34 3238 F7D2                  		move.w	(Bonus_Countdown_1).w,d1 ; load	time bonus
00028E38 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
00028E3E 7200                       		moveq	#0,d1
00028E40 3238 F7D4                  		move.w	(Bonus_Countdown_2).w,d1 ; load	ring bonus
00028E44 0C41 2706                  		cmpi.w	#9990,d1
00028E48 6500                       		blo.s	@cappedringbonus
00028E4A 323C 2706                  		move.w	#9990,d1
00028E4E                            
00028E4E                            @cappedringbonus:
00028E4E 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
00028E54                            ; return_40E82:
00028E54                            Hud_End:
00028E54 4E75                       	rts
00028E56                            
00028E56                            ; End of function sub_23BB4
00028E56                            ;Debug_Timeover:
00028E56                            ;		clr.w (Timer).w
00028E56                            ;		clr.b (Timer_minute).w
00028E56                            ;		clr.b (Timer_Second).w
00028E56                            ;		clr.b (Timer_Centisecond).w
00028E56                            ;		rts
00028E56                            
00028E56                            ; ===========================================================================
00028E56                            
00028E56                            loc_40E84:
00028E56 11FC 0000 FE1E             	move.b	#0,(Update_HUD_timer).w
00028E5C 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
00028E60 2448                       	movea.l	a0,a2
00028E62 6100 E1CE                  	bsr.w	KillCharacter
00028E66 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028E6C 4E75                       	rts
00028E6E                            ; ===========================================================================
00028E6E                            
00028E6E                            loc_40E9A:
00028E6E 6100 0000                  	bsr.w	HudDb_XY
00028E72 6100 FDA2                  	bsr.w	Hud_CentSec
00028E76 4A38 FE1D                  	tst.b	(Update_HUD_rings).w
00028E7A 6700                       	beq.s	loc_40EBE
00028E7C 6A00                       	bpl.s	loc_40EAA
00028E7E 6100 0000                  	bsr.w	Hud_LoadZero
00028E82                            ;	bsr.w	Hud_LoadZero2
00028E82                            
00028E82                            loc_40EAA:
00028E82 4238 FE1D                  	clr.b	(Update_HUD_rings).w
00028E86 203C 5F40 0003             	move.l	#$5F400003,d0
00028E8C 7200                       	moveq	#0,d1
00028E8E 3238 FE20                  	move.w	(Ring_count).w,d1
00028E92 6100 0000                  	bsr.w	Hud_Rings
00028E96                            
00028E96                            loc_40EBE:
00028E96 203C 5EC0 0003             	move.l	#$5EC00003,d0
00028E9C 7200                       	moveq	#0,d1
00028E9E 1238 F62C                  	move.b	($FFFFF62C).w,d1
00028EA2 6100 0000                  	bsr.w	Hud_Secs
00028EA6 4A38 FE1C                  	tst.b	(Update_HUD_lives).w
00028EAA 6700                       	beq.s	loc_40EDC
00028EAC 4238 FE1C                  	clr.b	(Update_HUD_lives).w
00028EB0 6100 0000                  	bsr.w	Hud_Lives
00028EB4                            
00028EB4                            loc_40EDC:
00028EB4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
00028EB8 6700                       		beq.s	loc_40F18	; if not, branch
00028EBA 4238 F7D6                  		clr.b	($FFFFF7D6).w
00028EBE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
00028EC8 7200                       		moveq	#0,d1
00028ECA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
00028ECE 6100 0000                  		bsr.w	Hud_TimeRingBonus
00028ED2 7200                       		moveq	#0,d1
00028ED4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00028ED8 0C41 2706                  		cmpi.w	#9990,d1
00028EDC 6500                       		blo.s	@cappedringbonus
00028EDE 323C 2706                  		move.w	#9990,d1
00028EE2                            
00028EE2                            @cappedringbonus:
00028EE2 6100 0000                  		bsr.w	Hud_TimeRingBonus
00028EE6                            
00028EE6                            loc_40F18:
00028EE6 4A78 F63A                  	tst.w	(Game_paused).w
00028EEA 6600                       	bne.s	return_40F4E
00028EEC 43F8 FE22                  	lea	(Timer).w,a1
00028EF0                            ;		move.b	(v_centstep).w,d1
00028EF0                            ;		addi.b	#1,d1
00028EF0                            ;		cmpi.b	#3,d1
00028EF0                            ;		bne.s	@skipno2
00028EF0                            ;		move.b	#0,d1
00028EF0                            ;		
00028EF0                            ;	@skipno2:
00028EF0                            ;		move.b	d1,(v_centstep).w
00028EF0                            ;		cmpi.b	#2,d1
00028EF0                            ;		beq.s	@skip2no2
00028EF0                            ;		addi.b	#1,d1
00028EF0                            ;		
00028EF0                            ;	@skip2no2:
00028EF0                            ;		add.b	d1,-(a1)
00028EF0                            ;		cmpi.b	#100,(a1)
00028EF0                            ;		bcs.w	Hud_DoCent
00028EF0 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028EF6 6700                       	beq.s	HUpdateNPALTimeOver
00028EF8 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+
00028EFE 4EF9 0000 0000             	jmp		HUpdateNotPALTimeOver
00028F04                            HUpdateNPALTimeOver:
00028F04 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+
00028F0A                            HUpdateNotPALTimeOver:
00028F0A 4E71                       	nop
00028F0C 5221                       	addq.b	#1,-(a1)
00028F0E 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028F14 6700                       	beq.s	HUpdateNotPAL
00028F16 0C11 0032                  	cmpi.b	#50,(a1)
00028F1A 6500                       	bcs.s	return_40F4E
00028F1C                            ;	move.b	#0,(a1)
00028F1C                            ;	addq.b	#1,-(a1)
00028F1C                            ;	cmpi.b	#50,(a1)
00028F1C                            ;	bcs.s	return_40F4E
00028F1C                            ;	move.b	#0,(a1)
00028F1C                            ;	addq.b	#1,-(a1)
00028F1C                            ;	cmpi.b	#9,(a1)
00028F1C                            ;	bcs.s	return_40F4E
00028F1C                            ;	move.b	#9,(a1)
00028F1C 4EF9 0000 0000             	jmp		HUpdateNotPAL2
00028F22                            HUpdateNotPAL:
00028F22 0C11 003C                  	cmpi.b	#$3C,(a1)
00028F26 6500                       	bcs.s	return_40F4E
00028F28                            HUpdateNotPAL2:
00028F28 12BC 0000                  	move.b	#0,(a1)
00028F2C 5221                       	addq.b	#1,-(a1)
00028F2E 0C11 003C                  	cmpi.b	#$3C,(a1)
00028F32 6500                       	bcs.s	return_40F4E
00028F34 12BC 0000                  	move.b	#0,(a1)
00028F38 5221                       	addq.b	#1,-(a1)
00028F3A 0C11 0009                  	cmpi.b	#9,(a1)
00028F3E 6500                       	bcs.s	return_40F4E
00028F40 12BC 0009                  	move.b	#9,(a1)
00028F44                            return_40F4E:
00028F44 4E75                       	rts
00028F46                            ; ===========================================================================
00028F46                            
00028F46                            loc_40F50:
00028F46 4A78 FFFA                  	tst.w	($FFFFFFFA).w
00028F4A 6600 0000                  	bne.w	HudDb_XY
00028F4E 4E75                       	rts
00028F50                            
00028F50                            ;loc_40F90:
00028F50                            ;	tst.b	(Update_HUD_timer_2P).w
00028F50                            ;	beq.s	loc_40FC8
00028F50                            ;	lea	(Timer_2P).w,a1
00028F50                            ;	cmpi.l	#$93B3B,(a1)+
00028F50                            ;	beq.w	TimeOver2
00028F50                            ;	addq.b	#1,-(a1)
00028F50                            ;	cmpi.b	#$3C,(a1)
00028F50                            ;	bcs.s	loc_40FC8
00028F50                            ;	move.b	#0,(a1)
00028F50                            ;	addq.b	#1,-(a1)
00028F50                            ;	cmpi.b	#$3C,(a1)
00028F50                            ;	bcs.s	loc_40FC8
00028F50                            ;	move.b	#0,(a1)
00028F50                            ;	addq.b	#1,-(a1)
00028F50                            ;	cmpi.b	#9,(a1)
00028F50                            ;	bcs.s	loc_40FC8
00028F50                            ;	move.b	#9,(a1)
00028F50                            
00028F50                            ;loc_40FC8:
00028F50                            ;	bsr.w	CentiSecond
00028F50                            ;	tst.b	(Update_HUD_lives).w
00028F50                            ;	beq.s	loc_40FD6
00028F50                            ;	clr.b	(Update_HUD_lives).w
00028F50                            ;	bsr.w	Hud_Lives
00028F50                            
00028F50                            ;loc_40FD6:
00028F50                            ;	tst.b	(Update_HUD_lives_2P).w
00028F50                            ;	beq.s	loc_40FE4
00028F50                            ;	clr.b	(Update_HUD_lives_2P).w
00028F50                            ;	bsr.w	Hud_Lives
00028F50                            
00028F50                            ;loc_40FE4:
00028F50                            ;	move.b	(Update_HUD_timer).w,d0
00028F50                            ;	or.b	(Update_HUD_timer_2P).w,d0
00028F50                            ;	beq.s	return_4101A
00028F50                            ;	lea	(Loser_Time_Left).w,a1
00028F50                            ;	tst.w	(a1)+
00028F50                            ;	beq.s	return_4101A
00028F50                            ;	subq.b	#1,-(a1)
00028F50                            ;	bhi.s	return_4101A
00028F50                            ;	move.b	#$3C,(a1)
00028F50                            ;	cmpi.b	#$C,-1(a1)
00028F50                            ;	bne.s	loc_41010
00028F50                            ;	move.w	#$92,d0
00028F50                            ;	jsr	(PlayMusic).l
00028F50                            
00028F50                            ;loc_41010:
00028F50                            ;	subq.b	#1,-(a1)
00028F50                            ;	bcc.s	return_4101A
00028F50                            ;	move.w	#0,(a1)
00028F50                            ;	bsr.s	TimeOver0
00028F50                            
00028F50                            ;return_4101A:
00028F50                            
00028F50                            ;	rts
00028F50                            ; End of function HudUpdate
00028F50                            
00028F50                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00028F50                            
00028F50                            ; sub_4101C:
00028F50                            TimeOver0:
00028F50                            ;	tst.w ($FFFFFFFA).w ; is debug mode on?
00028F50                            ;	bne.w Debug_Timeover ; if yes, branch
00028F50 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
00028F54 6600                       	bne.s	TimeOver
00028F56                            ;	tst.b	(Update_HUD_timer_2P).w
00028F56                            ;	bne.s	TimeOver2
00028F56 4E75                       	rts
00028F58                            ; ===========================================================================
00028F58                            ; loc_4102A:
00028F58                            TimeOver:
00028F58                            
00028F58 4238 FE1E                  	clr.b	(Update_HUD_timer).w
00028F5C 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
00028F60 2448                       	movea.l	a0,a2
00028F62 6100 E0CE                  	bsr.w	KillCharacter
00028F66 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028F6C                            ;	tst.b	(Update_HUD_timer_2P).w
00028F6C                            ;	beq.s	return_41058
00028F6C                            ; loc_41044:
00028F6C                            ;TimeOver2:
00028F6C                            
00028F6C                            ;	clr.b	(Update_HUD_timer_2P).w
00028F6C                            ;	lea	(Sidekick).w,a0 ; a0=character
00028F6C                            ;	movea.l	a0,a2
00028F6C                            ;	bsr.w	KillCharacter
00028F6C                            ;	move.b	#1,(Time_Over_flag_2P).w
00028F6C                            
00028F6C                            return_41058:
00028F6C 4E75                       	rts
00028F6E                            ; End of function TimeOver0
00028F6E                            Hud_LoadZero2:
00028F6E 7200                       		moveq	#0,d1
00028F70                            ;		move.b	($FFFFFE25).w,d1
00028F70                            ;		move.b	CentSecTable(pc,d1.w),d1
00028F70 203C 75C0 0003             		move.l	#$75C00003,d0
00028F76 4EB9 0000 0000             		jsr	Hud_Secs		
00028F7C 4E75                       		rts
00028F7E                            ; ---------------------------------------------------------------------------
00028F7E                            ; Subroutine to	load "0" on the	HUD
00028F7E                            ; ---------------------------------------------------------------------------
00028F7E                            
00028F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028F7E                            
00028F7E                            
00028F7E                            Hud_LoadZero:				; XREF: HudUpdate
00028F7E                            ;		bsr.w	Hud_LoadZero2
00028F7E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
00028F88 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00028F8C 343C 0002                  		move.w	#2,d2
00028F90 6000                       		bra.s	loc_1C83E
00028F92                            ; End of function Hud_LoadZero
00028F92                            
00028F92                            ; ---------------------------------------------------------------------------
00028F92                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00028F92                            ; ---------------------------------------------------------------------------
00028F92                            
00028F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028F92                            
00028F92                            
00028F92                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
00028F92 4DF9 00C0 0000             		lea	($C00000).l,a6
00028F98 4EB9 0000 0000             		jsr	Hud_Lives
00028F9E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00028FA8 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00028FAC 343C 000E                  		move.w	#$E,d2
00028FB0                            
00028FB0                            loc_1C83E:				; XREF: Hud_LoadZero
00028FB0 43FA 0000                  		lea	Art_Hud(pc),a1
00028FB4                            
00028FB4                            loc_1C842:
00028FB4 323C 000F                  		move.w	#$F,d1
00028FB8 101A                       		move.b	(a2)+,d0
00028FBA 6B00                       		bmi.s	loc_1C85E
00028FBC 4880                       		ext.w	d0
00028FBE EB48                       		lsl.w	#5,d0
00028FC0 47F1 0000                  		lea	(a1,d0.w),a3
00028FC4                            
00028FC4                            loc_1C852:
00028FC4 2C9B                       		move.l	(a3)+,(a6)
00028FC6 51C9 FFFC                  		dbf	d1,loc_1C852
00028FCA                            
00028FCA                            loc_1C858:
00028FCA 51CA FFE8                  		dbf	d2,loc_1C842
00028FCE                            
00028FCE 4E75                       		rts	
00028FD0                            ; ===========================================================================
00028FD0                            
00028FD0                            loc_1C85E:
00028FD0 2CBC 0000 0000             		move.l	#0,(a6)
00028FD6 51C9 FFF8                  		dbf	d1,loc_1C85E
00028FDA                            
00028FDA 60EE                       		bra.s	loc_1C858
00028FDC                            ; End of function Hud_Base
00028FDC                            
00028FDC                            ; ===========================================================================
00028FDC                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
00028FDC                            ;Hud_TilesMarks:	dc.b $1A, 0, 0, 0
00028FDC                            ;Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $18, 0, 0
00028FDC                            ;	else
00028FDC 1618 1818 1818 1800 0014+  Hud_TilesBase:	dc.b $16, $18, $18, $18, $18, $18, $18,	0, 0, $14, 0, 0
00028FE8                            ;	endc	;end HUD Centiseconds
00028FE8 1818 0000                  Hud_TilesZero:	dc.b $18, $18, 0, 0
00028FEC 0000 0000                  Hud_TilesZero2:	dc.b 0, 0, 0, 0
00028FF0                            ; ---------------------------------------------------------------------------
00028FF0                            ; Subroutine to	load debug mode	numbers	patterns
00028FF0                            ; ---------------------------------------------------------------------------
00028FF0                            
00028FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028FF0                            
00028FF0                            
00028FF0                            HudDb_XY:				; XREF: HudDebug
00028FF0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
00028FFA 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
00028FFE 4841                       		swap	d1
00029000 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
00029004 6100                       		bsr.s	HudDb_XY2
00029006 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0002900A 4841                       		swap	d1
0002900C 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
00029010                            ; End of function HudDb_XY
00029010                            
00029010                            
00029010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00029010                            
00029010                            
00029010                            HudDb_XY2:
00029010 7C07                       		moveq	#7,d6
00029012 43F9 0000 0000             		lea	(Art_Text2).l,a1
00029018                            
00029018                            HudDb_XYLoop:
00029018 E959                       		rol.w	#4,d1
0002901A 3401                       		move.w	d1,d2
0002901C 0242 000F                  		andi.w	#$F,d2
00029020 0C42 000A                  		cmpi.w	#$A,d2
00029024 6500                       		bcs.s	loc_1C8B2
00029026 5E42                       		addq.w	#7,d2
00029028                            
00029028                            loc_1C8B2:
00029028 EB4A                       		lsl.w	#5,d2
0002902A 47F1 2000                  		lea	(a1,d2.w),a3
0002902E                            		rept 8
0002902E                            		move.l	(a3)+,(a6)
0002902E 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
0002903E 4841                       		swap	d1
00029040 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00029044                            
00029044 4E75                       		rts	
00029046                            ; End of function HudDb_XY2
00029046                            
00029046                            ; ---------------------------------------------------------------------------
00029046                            ; Subroutine to	load rings numbers patterns
00029046                            ; ---------------------------------------------------------------------------
00029046                            
00029046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00029046                            
00029046                            
00029046                            Hud_Rings:				; XREF: HudUpdate
00029046 45F9 0000 0000             		lea	(Hud_100).l,a2
0002904C 7C02                       		moveq	#2,d6
0002904E 6000                       		bra.s	Hud_LoadArt
00029050                            ; End of function Hud_Rings
00029050                            
00029050                            ; ---------------------------------------------------------------------------
00029050                            ; Subroutine to	load score numbers patterns
00029050                            ; ---------------------------------------------------------------------------
00029050                            
00029050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00029050                            
00029050                            
00029050                            Hud_Score:				; XREF: HudUpdate
00029050 45F9 0000 0000             		lea	(Hud_100000).l,a2
00029056 7C05                       		moveq	#5,d6
00029058                            
00029058                            Hud_LoadArt:
00029058 43FA 0000                  		lea	Art_Hud(pc),a1
0002905C 283C 0080 0000             		move.l	#$800000,d4
00029062                            Hud_ScoreLoop:
00029062 7400                       		moveq	#0,d2
00029064 261A                       		move.l	(a2)+,d3
00029066                            
00029066                            loc_1C8EC:
00029066 9283                       		sub.l	d3,d1
00029068 6500                       		bcs.s	loc_1C8F4
0002906A 5242                       		addq.w	#1,d2
0002906C 60F8                       		bra.s	loc_1C8EC
0002906E                            ; ===========================================================================
0002906E                            
0002906E                            loc_1C8F4:
0002906E D283                       		add.l	d3,d1
00029070 4A42                       		tst.w	d2
00029072 6700                       		beq.s	loc_1C8FE
00029074 383C 0001                  		move.w	#1,d4
00029078                            
00029078                            loc_1C8FE:
00029078                            ;	if HUDHasLeadingZeroes=0	;Mercury HUD Has Leading Zeroes
00029078 4A44                       		tst.w	d4
0002907A 6700                       		beq.s	loc_1C92C
0002907C                            ;	endc	;end HUD Has Leading Zeroes
0002907C ED4A                       		lsl.w	#6,d2
0002907E 2D40 0004                  		move.l	d0,4(a6)
00029082 47F1 2000                  		lea	(a1,d2.w),a3
00029086                            		rept 16
00029086                            		move.l	(a3)+,(a6)
00029086 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
000290A6                            
000290A6                            loc_1C92C:
000290A6 0680 0040 0000             		addi.l	#$400000,d0
000290AC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
000290B0                            
000290B0 4E75                       		rts	
000290B2                            ; End of function Hud_Score
000290B2                            
000290B2                            ; ---------------------------------------------------------------------------
000290B2                            ; Subroutine to	load countdown numbers on the continue screen
000290B2                            ; ---------------------------------------------------------------------------
000290B2                            
000290B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000290B2                            
000290B2                            
000290B2                            ContScrCounter:				; XREF: ContinueScreen
000290B2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
000290BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000290C2 45F9 0000 0000             		lea	(Hud_10).l,a2
000290C8 7C01                       		moveq	#1,d6
000290CA 7800                       		moveq	#0,d4
000290CC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000290D0                            
000290D0                            ContScr_Loop:
000290D0 7400                       		moveq	#0,d2
000290D2 261A                       		move.l	(a2)+,d3
000290D4                            
000290D4                            loc_1C95A:
000290D4 9283                       		sub.l	d3,d1
000290D6 6500                       		bcs.s	loc_1C962
000290D8 5242                       		addq.w	#1,d2
000290DA 60F8                       		bra.s	loc_1C95A
000290DC                            ; ===========================================================================
000290DC                            
000290DC                            loc_1C962:
000290DC D283                       		add.l	d3,d1
000290DE ED4A                       		lsl.w	#6,d2
000290E0 47F1 2000                  		lea	(a1,d2.w),a3
000290E4                            		rept 16
000290E4                            		move.l	(a3)+,(a6)
000290E4 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00029104 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00029108                            
00029108 4E75                       		rts	
0002910A                            ; End of function ContScrCounter
0002910A                            
0002910A                            ; ===========================================================================
0002910A                            ; ---------------------------------------------------------------------------
0002910A                            ; HUD counter sizes
0002910A                            ; ---------------------------------------------------------------------------
0002910A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0002910E 0000 2710                  Hud_10000:	dc.l 10000
00029112 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
00029116 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0002911A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0002911E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
00029122                            
00029122                            ; ---------------------------------------------------------------------------
00029122                            ; Subroutine to	load time numbers patterns
00029122                            ; ---------------------------------------------------------------------------
00029122                            
00029122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00029122                            
00029122                            
00029122                            Hud_Mins:				; XREF: Hud_ChkTime
00029122 45F9 0002 911E             		lea	(Hud_1).l,a2
00029128 7C00                       		moveq	#0,d6
0002912A 6000                       		bra.s	loc_1C9BA
0002912C                            ; End of function Hud_Mins
0002912C                            
0002912C                            
0002912C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002912C                            
0002912C                            
0002912C                            Hud_Secs:				; XREF: Hud_ChkTime
0002912C 45F9 0002 911A             		lea	(Hud_10).l,a2
00029132 7C01                       		moveq	#1,d6
00029134                            
00029134                            loc_1C9BA:
00029134 7800                       		moveq	#0,d4
00029136 43FA 0000                  		lea	Art_Hud(pc),a1
0002913A                            ;		move.l	#$800000,d4
0002913A                            Hud_TimeLoop:
0002913A 7400                       		moveq	#0,d2
0002913C 261A                       		move.l	(a2)+,d3
0002913E                            
0002913E                            loc_1C9C4:
0002913E 9283                       		sub.l	d3,d1
00029140 6500                       		bcs.s	loc_1C9CC
00029142 5242                       		addq.w	#1,d2
00029144 60F8                       		bra.s	loc_1C9C4
00029146                            ; ===========================================================================
00029146                            
00029146                            loc_1C9CC:
00029146 D283                       		add.l	d3,d1
00029148 4A42                       		tst.w	d2
0002914A 6700                       		beq.s	loc_1C9D6
0002914C 383C 0001                  		move.w	#1,d4
00029150                            
00029150                            loc_1C9D6:
00029150 ED4A                       		lsl.w	#6,d2
00029152 2D40 0004                  		move.l	d0,4(a6)
00029156 47F1 2000                  		lea	(a1,d2.w),a3
0002915A                            		rept 16
0002915A                            		move.l	(a3)+,(a6)
0002915A 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
0002917A 0680 0040 0000             		addi.l	#$400000,d0
00029180 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00029184                            
00029184 4E75                       		rts	
00029186                            ; End of function Hud_Secs
00029186                            
00029186                            ; ---------------------------------------------------------------------------
00029186                            ; Subroutine to	load time/ring bonus numbers patterns
00029186                            ; ---------------------------------------------------------------------------
00029186                            
00029186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00029186                            
00029186                            
00029186                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00029186 45F9 0002 9112             		lea	(Hud_1000).l,a2
0002918C 7C03                       		moveq	#3,d6
0002918E 7800                       		moveq	#0,d4
00029190 43FA 0000                  		lea	Art_Hud(pc),a1
00029194 283C 0080 0000             		move.l	#$800000,d4
0002919A                            Hud_BonusLoop:
0002919A 7400                       		moveq	#0,d2
0002919C 261A                       		move.l	(a2)+,d3
0002919E                            
0002919E                            
0002919E                            loc_1CA1E:
0002919E 9283                       		sub.l	d3,d1
000291A0 6500                       		bcs.s	loc_1CA26
000291A2 5242                       		addq.w	#1,d2
000291A4 60F8                       		bra.s	loc_1CA1E
000291A6                            ; ===========================================================================
000291A6                            
000291A6                            loc_1CA26:
000291A6 D283                       		add.l	d3,d1
000291A8 4A42                       		tst.w	d2
000291AA 6700                       		beq.s	loc_1CA30
000291AC 383C 0001                  		move.w	#1,d4
000291B0                            
000291B0                            loc_1CA30:
000291B0 4A44                       		tst.w	d4
000291B2 6700                       		beq.s	Hud_ClrBonus
000291B4 ED4A                       		lsl.w	#6,d2
000291B6 47F1 2000                  		lea	(a1,d2.w),a3
000291BA                            		rept 16
000291BA                            		move.l	(a3)+,(a6)
000291BA 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
000291DA                            
000291DA                            loc_1CA5A:
000291DA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
000291DE                            
000291DE 4E75                       		rts	
000291E0                            ; ===========================================================================
000291E0                            
000291E0                            Hud_ClrBonus:
000291E0 7A0F                       		moveq	#$F,d5
000291E2                            
000291E2                            Hud_ClrBonusLoop:
000291E2 2CBC 0000 0000             		move.l	#0,(a6)
000291E8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
000291EC                            
000291EC 60EC                       		bra.s	loc_1CA5A
000291EE                            ; End of function Hud_TimeRingBonus
000291EE                            
000291EE                            ; ---------------------------------------------------------------------------
000291EE                            ; Subroutine to	load uncompressed lives	counter	patterns
000291EE                            ; ---------------------------------------------------------------------------
000291EE                            
000291EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000291EE                            
000291EE                            
000291EE                            Hud_Lives:				; XREF: Hud_ChkLives
000291EE 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
000291F4 7200                       		moveq	#0,d1
000291F6 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
000291FA 0C01 0064                  		cmpi.b	#100,d1
000291FE 6500                       		blo.s	@cappedlives
00029200 123C 0063                  		move.b	#99,d1
00029204 11C1 FE12                  		move.b	d1,($FFFFFE12).w
00029208                            ;		tst.b	d1				; just a feature that was used in games like
00029208                            ;		beq.s 	@skipsub		; Sonic Adventure and it's sequel SA2
00029208                            ;		sub.b	#1,d1			; This simply tests if number of lives is 0 
00029208                            								; and if not it then subtracts one from the 
00029208                            								; life number in d1
00029208                            ;@skipsub:
00029208                            @cappedlives
00029208 45F9 0002 911A             		lea	(Hud_10).l,a2
0002920E 7C01                       		moveq	#1,d6
00029210 7800                       		moveq	#0,d4
00029212 43FA 0000                  		lea	Art_LivesNums(pc),a1
00029216                            
00029216                            Hud_LivesLoop:
00029216 2D40 0004                  		move.l	d0,4(a6)
0002921A 7400                       		moveq	#0,d2
0002921C 261A                       		move.l	(a2)+,d3
0002921E                            
0002921E                            loc_1CA90:
0002921E 9283                       		sub.l	d3,d1
00029220 6500                       		bcs.s	loc_1CA98
00029222 5242                       		addq.w	#1,d2
00029224 60F8                       		bra.s	loc_1CA90
00029226                            ; ===========================================================================
00029226                            
00029226                            loc_1CA98:
00029226 D283                       		add.l	d3,d1
00029228 4A42                       		tst.w	d2
0002922A 6700                       		beq.s	loc_1CAA2
0002922C 383C 0001                  		move.w	#1,d4
00029230                            
00029230                            loc_1CAA2:
00029230                            
00029230                            loc_1CAA6:
00029230 EB4A                       		lsl.w	#5,d2
00029232 47F1 2000                  		lea	(a1,d2.w),a3
00029236                            		rept 8
00029236                            		move.l	(a3)+,(a6)
00029236 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00029246                            
00029246                            loc_1CABC:
00029246 0680 0040 0000             		addi.l	#$400000,d0
0002924C 51CE FFC8                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00029250                            
00029250 4E75                       		rts	
00029252                            ; ===========================================================================
00029252                            
00029252                            Hud_ClrLives:
00029252 4A46                       		tst.w	d6
00029254 67DA                       		beq.s	loc_1CAA6
00029256 7A07                       		moveq	#7,d5
00029258                            
00029258                            Hud_ClrLivesLoop:
00029258 2CBC 0000 0000             		move.l	#0,(a6)
0002925E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00029262 60E2                       		bra.s	loc_1CABC
00029264                            ; End of function Hud_Lives
00029264                            
00029264                            
00029264                            ; ===========================================================================
00029264                            Art_Hud:	incbin	#artunc\HUD.bin		; 8x16 pixel numbers on HUD
000295A4                            		even
000295A4                            Art_LivesNums:	incbin	#artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
00029C04                            		even
00029C04                            Art_Text2:	incbin	#artunc\menutext.bin	; text used in debug mode
0002A124                            		even
0002A124                            Art_Text:	incbin	#artunc\menutextascii.bin	; text used in level select
0002AC24                            		even
0002AC24                            ; ===========================================================================
0002AC24                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0002AC24                            
0002AC24                            
0002AC24                            JmpTo_loc_1682A:
0002AC24 4EF9 0001 5FE4             	jmp	sub_D762_2
0002AC2A                            ; End of function JmpTo_loc_1682A
0002AC2A                            
0002AC2A                            ; ---------------------------------------------------------------------------
0002AC2A                            ; When debug mode is currently in use
0002AC2A                            ; ---------------------------------------------------------------------------
0002AC2A                            
0002AC2A                            DebugMode:				; XREF: Obj01; Obj09
0002AC2A 7000                       		moveq	#0,d0
0002AC2C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0002AC30 323B 0000                  		move.w	Debug_Index(pc,d0),d1
0002AC34 4EFB 1000                  		jmp	Debug_Index(pc,d1)
0002AC38                            ; ===========================================================================
0002AC38 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002AC3A 0000                       		dc.w Debug_Skip-Debug_Index
0002AC3C                            ; ===========================================================================
0002AC3C                            Debug_Main:
0002AC3C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0002AC40                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
0002AC40 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w
0002AC46 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w
0002AC4C 0C38 0010 FE10             		cmpi.b	#$10,($FFFFFE10).w ; is	game mode = $10	(special stage)?
0002AC52 6600                       		bne.s	loc_3D852	; if not, branch
0002AC54 31FC 0000 F728             		move.w	#0,($FFFFF728).w
0002AC5A 31FC 3FFF F72A             		move.w	#$3FFF,($FFFFF72A).w
0002AC60                            ;		cmpi.b	#6,routine(a0)
0002AC60                            ;		bcc.s	loc_3D852
0002AC60                            ;		move.w	(MainCharacter+art_tile).w,($FFFFFF7E).w
0002AC60                            loc_3D852:
0002AC60 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0002AC66 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0002AC6C 0278 07FF F70C             		andi.w	#$7FF,($FFFFF70C).w
0002AC72 08A8 0006 0022             		bclr	#6,status(a0)
0002AC78 6700                       		beq.s	Debug_NotUnderWater
0002AC7A 2248                       		movea.l	a0,a1
0002AC7C 4EB9 0001 EE7C             		jsr	(ResumeMusic).l
0002AC82 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0002AC86 4EB9 0001 E904             		jsr	ApplySpeedSettings	; Fetch Speed settings
0002AC8C                            
0002AC8C                            Debug_NotUnderWater:
0002AC8C 117C 0000 001A             		move.b	#0,$1A(a0)
0002AC92 117C 0000 001C             		move.b	#0,$1C(a0)
0002AC98 08A8 0001 0022             		bclr	#1,status(a0)
0002AC9E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0002ACA4 6600                       		bne.s	Debug_Zone	; if not, branch
0002ACA6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0002ACAC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0002ACB2 7006                       		moveq	#6,d0		; use 6th debug	item list
0002ACB4 6000                       		bra.s	Debug_UseList
0002ACB6                            ; ===========================================================================
0002ACB6                            
0002ACB6                            Debug_Zone:
0002ACB6 7000                       		moveq	#0,d0
0002ACB8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002ACBC                            
0002ACBC                            Debug_UseList:
0002ACBC 45F9 0000 0000             		lea	(DebugList).l,a2 
0002ACC2 D040                       		add.w	d0,d0
0002ACC4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002ACC8 3C1A                       		move.w	(a2)+,d6
0002ACCA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002ACCE 6200                       		bhi.s	loc_3D89C
0002ACD0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0002ACD6                            		
0002ACD6                            loc_3D89C:
0002ACD6 6100 0000                  		bsr.w	Debug_ShowItem
0002ACDA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002ACE0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0002ACE6                            		
0002ACE6                            Debug_Skip:
0002ACE6 7006                       		moveq	#6,d0
0002ACE8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002ACEE 6700                       		beq.s	loc_3D8BC
0002ACF0 7000                       		moveq	#0,d0
0002ACF2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002ACF6                            		
0002ACF6                            loc_3D8BC:
0002ACF6 45F9 0000 0000             		lea	(DebugList).l,a2 
0002ACFC D040                       		add.w	d0,d0
0002ACFE D4F2 0000                  		adda.w	(a2,d0.w),a2
0002AD02 3C1A                       		move.w	(a2)+,d6
0002AD04 6100 0000                  		bsr.w	Debug_Control
0002AD08 4EF9 0001 5D72             		jmp	DisplaySprite 
0002AD0E                            		
0002AD0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002AD0E                            
0002AD0E                            
0002AD0E                            Debug_Control:
0002AD0E 7800                       		moveq	#0,d4
0002AD10 323C 0001                  		move.w	#1,d1
0002AD14 1838 F605                  		move.b	($FFFFF605).w,d4
0002AD18 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0002AD1C 6600                       		bne.s	loc_3D916	; if yes, branch
0002AD1E 1038 F604                  		move.b	($FFFFF604).w,d0
0002AD22 0240 000F                  		andi.w	#$F,d0
0002AD26 6600                       		bne.s	loc_3D8FE
0002AD28 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002AD2E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0002AD34 6000 0000                  		bra.w	Debug_BackItem
0002AD38                            
0002AD38                            loc_3D8FE:
0002AD38 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0002AD3C 6600                       		bne.s	loc_3D91A
0002AD3E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0002AD44 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0002AD48 6600                       		bne.s	loc_3D916
0002AD4A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0002AD50                            
0002AD50                            loc_3D916:
0002AD50 1838 F604                  		move.b	($FFFFF604).w,d4
0002AD54                            		
0002AD54                            loc_3D91A:
0002AD54 7200                       		moveq	#0,d1
0002AD56 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0002AD5A 5241                       		addq.w	#1,d1
0002AD5C 4841                       		swap.w	d1
0002AD5E E881                       		asr.l	#4,d1
0002AD60 2428 000C                  		move.l	$C(a0),d2
0002AD64 2628 0008                  		move.l	8(a0),d3
0002AD68 0804 0000                  		btst	#0,d4		; is up	being pressed?
0002AD6C 6700                       		beq.s	loc_3D944	; if not, branch
0002AD6E 9481                       		sub.l	d1,d2
0002AD70 7000                       		moveq	#0,d0
0002AD72 3038 F72C                  		move.w	($FFFFF72C).w,d0
0002AD76 4840                       		swap.w	d0
0002AD78 B480                       		cmp.l	d0,d2
0002AD7A 6C00                       		bge.s	loc_3D944
0002AD7C 2400                       		move.l	d0,d2
0002AD7E                            		
0002AD7E                            loc_3D944:
0002AD7E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0002AD82 6700                       		beq.s	loc_3D95E	; if not, branch
0002AD84 D481                       		add.l	d1,d2
0002AD86 7000                       		moveq	#0,d0
0002AD88 3038 F726                  		move.w	($FFFFF726).w,d0
0002AD8C 0640 00DF                  		addi.w	#$DF,d0
0002AD90 4840                       		swap.w	d0
0002AD92 B480                       		cmp.l	d0,d2
0002AD94 6D00                       		blt.s	loc_3D95E
0002AD96 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002AD9C 6700                       		beq.s	loc_3D95E
0002AD9E 2400                       		move.l	d0,d2
0002ADA0                            		
0002ADA0                            loc_3D95E:
0002ADA0 0804 0002                  		btst	#2,d4
0002ADA4 6700                       		beq.s	loc_3D96A
0002ADA6 9681                       		sub.l	d1,d3
0002ADA8 6400                       		bcc.s	loc_3D96A
0002ADAA 7600                       		moveq	#0,d3
0002ADAC                            
0002ADAC                            loc_3D96A:
0002ADAC 0804 0003                  		btst	#3,d4
0002ADB0 6700                       		beq.s	loc_3D972
0002ADB2 D681                       		add.l	d1,d3
0002ADB4                            
0002ADB4                            loc_3D972:
0002ADB4 2142 000C                  		move.l	d2,$C(a0)
0002ADB8 2143 0008                  		move.l	d3,8(a0)
0002ADBC                            
0002ADBC                            Debug_BackItem:
0002ADBC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0002ADC2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002ADC4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002ADCA 6700                       		beq.s	Debug_NextItem	; if not, branch
0002ADCC 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0002ADD0 6400                       		bcc.s	Debug_NoLoop
0002ADD2 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0002ADD6 6000                       		bra.s	Debug_NoLoop
0002ADD8                            ; ===========================================================================
0002ADD8                            
0002ADD8                            Debug_NextItem:
0002ADD8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0002ADDE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002ADE0 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0002ADE4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002ADE8 6200                       		bhi.s	Debug_NoLoop
0002ADEA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0002ADF0                            
0002ADF0                            Debug_NoLoop:
0002ADF0 6000 0000                  		bra	Debug_ShowItem
0002ADF4                            ; ===========================================================================
0002ADF4                            
0002ADF4                            Debug_MakeItem:
0002ADF4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002ADFA 6700                       		beq.s	Debug_Exit	; if not, branch
0002ADFC                            ;----------------------------------------------------
0002ADFC                            ; Debug glitch fix ; Neto - Sonic 2D
0002ADFC 0C38 0006 D024             		cmpi.b  #$06, ($FFFFD024).w  
0002AE02 6600                       		bne.s   Player_Ok                              
0002AE04 4E75                       		rts                                          
0002AE06                            Player_Ok:                
0002AE06                            ;--------------------------------------------------- 
0002AE06 4EB9 0000 0000             		jsr	SingleObjectLoad 
0002AE0C 6600                       		bne.s	Debug_Exit
0002AE0E 3368 0008 0008             		move.w	8(a0),8(a1)
0002AE14 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002AE1A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002AE1E 1368 0001 0001             		move.b	1(a0),1(a1)
0002AE24 1368 0001 0022             		move.b	1(a0),$22(a1)
0002AE2A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0002AE30 7000                       		moveq	#0,d0
0002AE32 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002AE36 E748                       		lsl.w	#3,d0
0002AE38 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0002AE3E 4E75                       		rts
0002AE40                            ; ===========================================================================
0002AE40                            
0002AE40                            Debug_Exit:
0002AE40 0838 0004 F605             		btst	#4,($FFFFF605).w
0002AE46 6700 0000                  		beq.w	Debug_DoNothing
0002AE4A 7000                       		moveq	#0,d0
0002AE4C 31C0 FE08                  		move.w	d0,(Debug_placement_mode).w
0002AE50 46FC 2700                  		move	#$2700,sr
0002AE54 4EB9 0002 8F92             		jsr	(Hud_Base).l
0002AE5A 11FC 0001 FE1F             		move.b	#1,(Update_HUD_score).w
0002AE60 11FC 0080 FE1D             		move.b	#-$80,(Update_HUD_rings).w
0002AE66 46FC 2300                  		move	#$2300,sr
0002AE6A 43F8 D000                  		lea	(MainCharacter).w,a1
0002AE6E                            		;bcc.w	Debug_Exit_2
0002AE6E                            		
0002AE6E                            Debug_Exit_2:
0002AE6E 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0002AE72 6700                       		beq.s	Debug_Exit_3	; if not, branch
0002AE74 237C 0000 0000 0004        		move.l	#Map_SuperSonic,mappings(a1)
0002AE7C 4EF9 0000 0000             		jmp	Debug_Exit_Final
0002AE82                            		
0002AE82                            Debug_Exit_3:
0002AE82 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1)
0002AE8A                            ;		bcc.w	Debug_Exit_Final
0002AE8A                            
0002AE8A                            Debug_Exit_Final:		
0002AE8A 337C 0780 0002             		move.w	#$780,art_tile(a1)
0002AE90 1340 001C                  		move.b	d0,anim(a1)
0002AE94 3340 000A                  		move.w	d0,$A(a1)
0002AE98 3340 000E                  		move.w	d0,$E(a1)
0002AE9C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0002AEA2 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002AEA8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in the special stage?
0002AEAE 6600                       		bne.s	Debug_Exitnormal ; if not, branch
0002AEB0 4278 F780                  		clr.w ($FFFFF780).w ; Clear special stage rotation
0002AEB4 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0002AEBA 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1); use mappings
0002AEC2                            ;		move.w	#$780,art_tile(a1) ; Use right art
0002AEC2 137C 0002 001C                     move.b  #2,anim(a1)
0002AEC8 08E9 0002 0022                     bset    #2,status(a1)
0002AECE 08E9 0001 0022                     bset    #1,status(a1)
0002AED4 4E75                       		rts ; retrun
0002AED6                            Debug_Exitnormal:
0002AED6                            ;		move.l	($FFFFFF7A).w,(MainCharacter+mappings).w
0002AED6                            ;		move.w	($FFFFFF7E).w,(MainCharacter+art_tile).w
0002AED6 6100                       		bsr.s	sub_92C54
0002AED8 137C 0013 0016             		move.b	#$13,$16(a1) ; Set Sonic's vertical size
0002AEDE 137C 0009 0017             		move.b	#9,$17(a1) ; Set Sonic's horizontal size
0002AEE4                            ;		clr.w ($FFFFD010).w ; Clear Sonic's horizontal speed
0002AEE4                            ;		clr.l ($FFFFD012).w ; Clear Sonic's vertical speed & inertia
0002AEE4                            ;		clr.b 	jumping(a0) ; Clear standing on object flag
0002AEE4                            ;		clr.b	($FFFFD022).w ; Set Sonic to air (Will clear any other state)
0002AEE4                            ;		clr.b	(MainCharacter+anim).w ; Set to roll animation
0002AEE4                            ;		clr.b ($FFFFD025).w ; Clear secondary routine counter
0002AEE4                            ;		addq.l	#4,sp ; Make Sonic unable to jump for small period of time (If I'm correct, it is 1 frame)
0002AEE4                            
0002AEE4                            Debug_DoNothing:
0002AEE4 4E75                       		rts	
0002AEE6                            ; End of function Debug_Control
0002AEE6                            sub_92C54:
0002AEE6 1340 001C                  		move.b	d0,anim(a1)
0002AEEA 3340 000A                  		move.w	d0,2+x_pos(a1) ; subpixel x
0002AEEE 3340 000E                  		move.w	d0,2+y_pos(a1) ; subpixel y
0002AEF2 11C0 F7C8                  		move.b	d0,($FFFFF7C8).w
0002AEF6 1340 0039                  		move.b	d0,spindash_flag(a1)
0002AEFA 3340 0010                  		move.w	d0,x_vel(a1)
0002AEFE 3340 0012                  		move.w	d0,y_vel(a1)
0002AF02 3340 0020                  		move.w	d0,inertia(a1)
0002AF06 1340 0038                  		move.b	d0,$38(a1)
0002AF0A 0229 0001 0022             		andi.b	#1,status(a1)
0002AF10 0029 0002 0022             		ori.b	#2,status(a1)
0002AF16 137C 0002 0024             		move.b	#2,routine(a1)
0002AF1C 4E75                       		rts
0002AF1E                            ; End of function sub_92C54
0002AF1E                            
0002AF1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002AF1E                            
0002AF1E                            
0002AF1E                            Debug_ShowItem:				; XREF: Debug_Main
0002AF1E 7000                       		moveq	#0,d0
0002AF20 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002AF24 E748                       		lsl.w	#3,d0
0002AF26 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0002AF2C 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0002AF32 1172 0005 001A             		move.b	5(a2,d0.w),mapping_frame(a0) ; load frame	number for item
0002AF38 4E75                       		rts	
0002AF3A                            ; End of function Debug_ShowItem
0002AF3A                            
0002AF3A                            ; ===========================================================================
0002AF3A                            
0002AF3A                            dbglistobj macro   obj, mapaddr,  decl, frame, flags, vram
0002AF3A                            	dc.l obj<<24|mapaddr
0002AF3A                            	dc.w decl<<8|frame
0002AF3A                            	dc.w flags<<12|vram
0002AF3A                                endm
0002AF3A                            
0002AF3A                            ; ---------------------------------------------------------------------------
0002AF3A                            ; Debug	list pointers
0002AF3A                            ; ---------------------------------------------------------------------------
0002AF3A                            DebugList:
0002AF3A                            	include "_inc\Debug list pointers.asm"
0002AF3A                            ; ---------------------------------------------------------------------------
0002AF3A                            ; Debug	list pointers
0002AF3A                            ; ---------------------------------------------------------------------------
0002AF3A 0000                       	dc.w Debug_GHZ-DebugList
0002AF3C 0000                       	dc.w Debug_LZ-DebugList
0002AF3E 0000                       	dc.w Debug_MZ-DebugList
0002AF40 0000                       	dc.w Debug_SLZ-DebugList
0002AF42 0000                       	dc.w Debug_SYZ-DebugList
0002AF44 0000                       	dc.w Debug_SBZ-DebugList
0002AF46 0000                       	dc.w Debug_Ending-DebugList
0002AF48 0000                       	dc.w Debug_ABZ-DebugList
0002AF48 0000                       	dc.w Debug_ABZ-DebugList
0002AF4A                            
0002AF4A                            ; ---------------------------------------------------------------------------
0002AF4A                            ; Debug	list - Green Hill
0002AF4A                            ; ---------------------------------------------------------------------------
0002AF4A                            Debug_GHZ:
0002AF4A                            	include "_inc\Debug list - GHZ.asm"
0002AF4A                            ; ---------------------------------------------------------------------------
0002AF4A                            ; Debug	list - Green Hill
0002AF4A                            ; ---------------------------------------------------------------------------
0002AF4A 0000                       	dc.w (((Debug_GHz_End-Debug_GHz-$02)/$08))			; number of items in list
0002AF4C 2501 1E48                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0002AF50 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0002AF54 2601 2502                  	dc.l Map_obj26+$26000000
0002AF58 080A 0680                  	dc.b 8,	$A, 6, $80
0002AF5C 2601 2502                  	dc.l Map_obj26+$26000000
0002AF60 0608 0680                  	dc.b 6,	8, 6, $80
0002AF64 2601 2502                  	dc.l Map_obj26+$26000000
0002AF68 0507 0680                  	dc.b 5,	7, 6, $80
0002AF6C 2601 2502                  	dc.l Map_obj26+$26000000
0002AF70 0406 0680                  	dc.b 4,	6, 6, $80
0002AF74 2601 2502                  	dc.l Map_obj26+$26000000
0002AF78 0305 0680                  	dc.b 3,	5, 6, $80
0002AF7C 2601 2502                  	dc.l Map_obj26+$26000000
0002AF80 0204 0680                  	dc.b 2,	4, 6, $80
0002AF84 2601 2502                  	dc.l Map_obj26+$26000000
0002AF88 0103 0680                  	dc.b 1,	3, 6, $80
0002AF8C 1F01 14F6                  	dc.l Map_obj1F+$1F000000
0002AF90 0000 0400                  	dc.b 0,	0, 4, 0
0002AF94 2201 17EE                  	dc.l Map_obj22+$22000000
0002AF98 0000 0444                  	dc.b 0,	0, 4, $44
0002AF9C 2B01 2DEE                  	dc.l Map_obj2B+$2B000000
0002AFA0 0000 047B                  	dc.b 0,	0, 4, $7B
0002AFA4 3601 560C                  	dc.l Map_obj36+$36000000
0002AFA8 0000 051B                  	dc.b 0,	0, 5, $1B
0002AFAC 1800 FB94                  	dc.l Map_obj18+$18000000
0002AFB0 0000 4000                  	dc.b 0,	0, $40,	0
0002AFB4 3B01 577A                  	dc.l Map_obj3B+$3B000000
0002AFB8 0000 63D0                  	dc.b 0,	0, $63,	$D0
0002AFBC 4001 8FC0                  	dc.l Map_obj40+$40000000
0002AFC0 0000 04F0                  	dc.b 0,	0, 4, $F0
0002AFC4 4101 70A6                  	dc.l Map_obj41+$41000000
0002AFC8 0000 0523                  	dc.b 0,	0, 5, $23
0002AFCC 4101 70A6                  	dc.l Map_obj41+$41000000
0002AFD0 1003 0533                  	dc.b $10,	3, 5, $33
0002AFD4 4101 70A6                  	dc.l Map_obj41+$41000000
0002AFD8 2006 0523                  	dc.b $20,	6, 5, $23
0002AFDC                            ;	dc.l Map_obj41+$41000000
0002AFDC                            ;	dc.b 1,	0, 5, $23
0002AFDC                            ;	dc.l Map_obj41+$41000000
0002AFDC                            ;	dc.b $40,	$A, 5, $23
0002AFDC 3E02 6C60                  	dc.l Map_obj3E+$3E000000
0002AFE0 0000 0024                  	dc.b 0,	0, 0, $24
0002AFE4 3E03 6C60                  	dc.l Map_obj3E+$3E010000
0002AFE8 0100 0024                  	dc.b 1,	0, 0, $24
0002AFEC 4201 7340                  	dc.l Map_obj42+$42000000
0002AFF0 0000 249B                  	dc.b 0,	0, $24,	$9B
0002AFF4 4401 760A                  	dc.l Map_obj44+$44000000
0002AFF8 0000 434C                  	dc.b 0,	0, $43,	$4C
0002AFFC 1900 FEB4                  	dc.l Map_obj48+$19000000
0002B000 0000 43AA                  	dc.b 0,	0, $43,	$AA
0002B004 4F01 9146                  	dc.l Map_SpdBooster+$4F000000
0002B008 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B00C 1002 83FA                  	dc.l Map_obj10+$10000000
0002B010 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002B014 1900 FDFC                  	dc.l Map_obj19+$19000000
0002B018 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002B01C 7902 2F78                  	dc.l Map_obj79+$79000000
0002B020 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B024 4B01 1E88                  	dc.l Map_obj4B+$4B000000
0002B028 0000 2400                  	dc.b 0,	0, $24,	0
0002B02C 7D02 30A8                  	dc.l Map_obj7D+$7D000000
0002B030 0101 84B6                  	dc.b 1,	1, $84,	$B6
0002B034 1100 F342                  	dc.l Map_obj11+$11000000
0002B038 0C00 438E                  	dc.b $C,	0, $43,	$8E
0002B03C                            	even
0002B03C                            	even
0002B03C                            Debug_GHZ_End:
0002B03C                            
0002B03C                            ; ---------------------------------------------------------------------------
0002B03C                            ; Debug	list - Labyrinth
0002B03C                            ; ---------------------------------------------------------------------------
0002B03C                            Debug_LZ:
0002B03C                            	include "_inc\Debug list - LZ.asm"
0002B03C                            ; ---------------------------------------------------------------------------
0002B03C                            ; Debug	list - Labyrinth
0002B03C                            ; ---------------------------------------------------------------------------
0002B03C 001F                       	dc.w $1F
0002B03E 2501 1E48                  	dc.l Map_obj25+$25000000
0002B042 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B046 2601 2502                  	dc.l Map_obj26+$26000000
0002B04A 080A 0680                  	dc.b 8,	$A, 6, $80
0002B04E 2601 2502                  	dc.l Map_obj26+$26000000
0002B052 0608 0680                  	dc.b 6,	8, 6, $80
0002B056 2601 2502                  	dc.l Map_obj26+$26000000
0002B05A 0507 0680                  	dc.b 5,	7, 6, $80
0002B05E 2601 2502                  	dc.l Map_obj26+$26000000
0002B062 0406 0680                  	dc.b 4,	6, 6, $80
0002B066 2601 2502                  	dc.l Map_obj26+$26000000
0002B06A 0305 0680                  	dc.b 3,	5, 6, $80
0002B06E 2601 2502                  	dc.l Map_obj26+$26000000
0002B072 0204 0680                  	dc.b 2,	4, 6, $80
0002B076 2601 2502                  	dc.l Map_obj26+$26000000
0002B07A 0103 0680                  	dc.b 1,	3, 6, $80
0002B07E 4101 70A6                  	dc.l Map_obj41+$41000000
0002B082 0000 0523                  	dc.b 0,	0, 5, $23
0002B086 2C01 2E96                  	dc.l Map_obj2C+$2C000000
0002B08A 0800 2486                  	dc.b 8,	0, $24,	$86
0002B08E 2D01 308A                  	dc.l Map_obj2D+$2D000000
0002B092 0002 84A6                  	dc.b 0,	2, $84,	$A6
0002B096 1601 BC20                  	dc.l Map_obj16+$16000000
0002B09A 0000 03CC                  	dc.b 0,	0, 3, $CC
0002B09E 1601 BC20                  	dc.l Map_obj16+$16000000
0002B0A2 0203 03CC                  	dc.b 2,	3, 3, $CC
0002B0A6 3301 44AC                  	dc.l Map_obj33+$33000000
0002B0AA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002B0AE 3201 4068                  	dc.l Map_obj32+$32000000
0002B0B2 0000 0513                  	dc.b 0,	0, 5, $13
0002B0B6 3601 560C                  	dc.l Map_obj36+$36000000
0002B0BA 0000 051B                  	dc.b 0,	0, 5, $1B
0002B0BE 5201 9DFE                  	dc.l Map_obj52a+$52000000
0002B0C2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0002B0C6 6101 BE38                  	dc.l Map_obj61+$61000000
0002B0CA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0002B0CE 6101 BE38                  	dc.l Map_obj61+$61000000
0002B0D2 1301 43E6                  	dc.b $13, 1, $43, $E6
0002B0D6 6101 BE38                  	dc.l Map_obj61+$61000000
0002B0DA 0500 43E6                  	dc.b 5,	0, $43,	$E6
0002B0DE 6201 BF90                  	dc.l Map_obj62+$62000000
0002B0E2 0000 443E                  	dc.b 0,	0, $44,	$3E
0002B0E6 6101 BE38                  	dc.l Map_obj61+$61000000
0002B0EA 2702 43E6                  	dc.b $27, 2, $43, $E6
0002B0EE 6101 BE38                  	dc.l Map_obj61+$61000000
0002B0F2 3003 43E6                  	dc.b $30, 3, $43, $E6
0002B0F6 6301 C2F4                  	dc.l Map_obj63+$63000000
0002B0FA 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0002B0FE 6001 BB68                  	dc.l Map_obj60+$60000000
0002B102 0000 0467                  	dc.b 0,	0, 4, $67
0002B106 6401 C63E                  	dc.l Map_obj64+$64000000
0002B10A 8413 8348                  	dc.b $84, $13, $83, $48
0002B10E 6501 C7C6                  	dc.l Map_obj65+$65000000
0002B112 0202 C259                  	dc.b 2,	2, $C2,	$59
0002B116 6501 C7C6                  	dc.l Map_obj65+$65000000
0002B11A 0909 C259                  	dc.b 9,	9, $C2,	$59
0002B11E 0B01 AFD6                  	dc.l Map_obj0B+$B000000
0002B122 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002B126 0C01 B0A8                  	dc.l Map_obj0C+$C000000
0002B12A 0200 4328                  	dc.b 2,	0, $43,	$28
0002B12E 7902 2F78                  	dc.l Map_obj79+$79000000
0002B132 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B136 4B01 1E88                  	dc.l Map_obj4B+$4B000000
0002B13A 0000 2400                  	dc.b 0,	0, $24,	0
0002B13E                            	even
0002B13E                            	even
0002B13E                            Debug_LZ_End:
0002B13E                            
0002B13E                            ; ---------------------------------------------------------------------------
0002B13E                            ; Debug	list - Marble
0002B13E                            ; ---------------------------------------------------------------------------
0002B13E                            Debug_MZ:
0002B13E                            	include "_inc\Debug list - MZ.asm"
0002B13E                            ; ---------------------------------------------------------------------------
0002B13E                            ; Debug	list - Marble
0002B13E                            ; ---------------------------------------------------------------------------
0002B13E 0019                       	dc.w $19
0002B140 2501 1E48                  	dc.l Map_obj25+$25000000
0002B144 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B148 2601 2502                  	dc.l Map_obj26+$26000000
0002B14C 080A 0680                  	dc.b 8,	$A, 6, $80
0002B150 2601 2502                  	dc.l Map_obj26+$26000000
0002B154 0608 0680                  	dc.b 6,	8, 6, $80
0002B158 2601 2502                  	dc.l Map_obj26+$26000000
0002B15C 0507 0680                  	dc.b 5,	7, 6, $80
0002B160 2601 2502                  	dc.l Map_obj26+$26000000
0002B164 0406 0680                  	dc.b 4,	6, 6, $80
0002B168 2601 2502                  	dc.l Map_obj26+$26000000
0002B16C 0305 0680                  	dc.b 3,	5, 6, $80
0002B170 2601 2502                  	dc.l Map_obj26+$26000000
0002B174 0204 0680                  	dc.b 2,	4, 6, $80
0002B178 2601 2502                  	dc.l Map_obj26+$26000000
0002B17C 0103 0680                  	dc.b 1,	3, 6, $80
0002B180 2201 17EE                  	dc.l Map_obj22+$22000000
0002B184 0000 0444                  	dc.b 0,	0, 4, $44
0002B188 3601 560C                  	dc.l Map_obj36+$36000000
0002B18C 0000 051B                  	dc.b 0,	0, 5, $1B
0002B190 4101 70A6                  	dc.l Map_obj41+$41000000
0002B194 0000 0523                  	dc.b 0,	0, 5, $23
0002B198 1301 358A                  	dc.l Map_obj14+$13000000
0002B19C 0000 0345                  	dc.b 0,	0, 3, $45
0002B1A0 4601 7C78                  	dc.l Map_obj46+$46000000
0002B1A4 0000 4000                  	dc.b 0,	0, $40,	0
0002B1A8 4C01 8A44                  	dc.l Map_obj4C+$4C000000
0002B1AC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002B1B0 4E01 8D28                  	dc.l Map_obj4E+$4E000000
0002B1B4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002B1B8 3301 44AC                  	dc.l Map_obj33+$33000000
0002B1BC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002B1C0 5001 9374                  	dc.l Map_obj50+$50000000
0002B1C4 0000 247B                  	dc.b 0,	0, $24,	$7B
0002B1C8 5101 9B5A                  	dc.l Map_obj51+$51000000
0002B1CC 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002B1D0 5201 9DA8                  	dc.l Map_obj52+$52000000
0002B1D4 0000 02B8                  	dc.b 0,	0, 2, $B8
0002B1D8 5301 04A2                  	dc.l Map_obj53+$53000000
0002B1DC 0000 62B8                  	dc.b 0,	0, $62,	$B8
0002B1E0 5401 8A0A                  	dc.l Map_obj54+$54000000
0002B1E4 0000 8680                  	dc.b 0,	0, $86,	$80
0002B1E8 5501 9FA2                  	dc.l Map_obj55+$55000000
0002B1EC 0000 04B8                  	dc.b 0,	0, 4, $B8
0002B1F0 7802 2BEE                  	dc.l Map_obj78+$78000000
0002B1F4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002B1F8 4F01 9146                  	dc.l Map_SpdBooster+$4F000000
0002B1FC 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B200 7902 2F78                  	dc.l Map_obj79+$79000000
0002B204 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B208 4B01 1E88                  	dc.l Map_obj4B+$4B000000
0002B20C 0000 2400                  	dc.b 0,	0, $24,	0
0002B210                            	even
0002B210                            	even
0002B210                            Debug_MZ_End:
0002B210                            
0002B210                            ; ---------------------------------------------------------------------------
0002B210                            ; Debug	list - Star Light
0002B210                            ; ---------------------------------------------------------------------------
0002B210                            Debug_SLZ:
0002B210                            	include "_inc\Debug list - SLZ.asm"
0002B210                            ; ---------------------------------------------------------------------------
0002B210                            ; Debug	list - Star Light
0002B210                            ; ---------------------------------------------------------------------------
0002B210 0016                       	dc.w $16
0002B212 2501 1E48                  	dc.l Map_obj25+$25000000
0002B216 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B21A 2601 2502                  	dc.l Map_obj26+$26000000
0002B21E 080A 0680                  	dc.b 8,	$A, 6, $80
0002B222 2601 2502                  	dc.l Map_obj26+$26000000
0002B226 0608 0680                  	dc.b 6,	8, 6, $80
0002B22A 2601 2502                  	dc.l Map_obj26+$26000000
0002B22E 0507 0680                  	dc.b 5,	7, 6, $80
0002B232 2601 2502                  	dc.l Map_obj26+$26000000
0002B236 0406 0680                  	dc.b 4,	6, 6, $80
0002B23A 2601 2502                  	dc.l Map_obj26+$26000000
0002B23E 0305 0680                  	dc.b 3,	5, 6, $80
0002B242 2601 2502                  	dc.l Map_obj26+$26000000
0002B246 0204 0680                  	dc.b 2,	4, 6, $80
0002B24A 2601 2502                  	dc.l Map_obj26+$26000000
0002B24E 0103 0680                  	dc.b 1,	3, 6, $80
0002B252 5901 AA30                  	dc.l Map_obj59+$59000000
0002B256 0000 4000                  	dc.b 0,	0, $40,	0
0002B25A 5301 04A2                  	dc.l Map_obj53+$53000000
0002B25E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0002B262 1800 FBF2                  	dc.l Map_obj18b+$18000000
0002B266 0000 4000                  	dc.b 0,	0, $40,	0
0002B26A 5A01 AB52                  	dc.l Map_obj5A+$5A000000
0002B26E 0000 4000                  	dc.b 0,	0, $40,	0
0002B272 5B01 ACF0                  	dc.l Map_obj5B+$5B000000
0002B276 0000 4000                  	dc.b 0,	0, $40,	0
0002B27A 5D01 B2B4                  	dc.l Map_obj5D+$5D000000
0002B27E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0002B282 5E01 B62C                  	dc.l Map_obj5E+$5E000000
0002B286 0000 0374                  	dc.b 0,	0, 3, $74
0002B28A 4101 70A6                  	dc.l Map_obj41+$41000000
0002B28E 0000 0523                  	dc.b 0,	0, 5, $23
0002B292 1301 358A                  	dc.l Map_obj14+$13000000
0002B296 0000 0480                  	dc.b 0,	0, 4, $80
0002B29A 1C01 05A4                  	dc.l Map_obj1C+$1C000000
0002B29E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0002B2A2 5F01 B8B4                  	dc.l Map_obj5F+$5F000000
0002B2A6 0000 0400                  	dc.b 0,	0, 4, 0
0002B2AA 6001 BB68                  	dc.l Map_obj60+$60000000
0002B2AE 0000 2429                  	dc.b 0,	0, $24,	$29
0002B2B2 4F01 9146                  	dc.l Map_SpdBooster+$4F000000
0002B2B6 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B2BA 7902 2F78                  	dc.l Map_obj79+$79000000
0002B2BE 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B2C2 4B01 1E88                  	dc.l Map_obj4B+$4B000000
0002B2C6 0000 2400                  	dc.b 0,	0, $24,	0
0002B2CA                            	even
0002B2CA                            	even
0002B2CA                            Debug_SLZ_End:
0002B2CA                            
0002B2CA                            ; ---------------------------------------------------------------------------
0002B2CA                            ; Debug	list - Spring Yard
0002B2CA                            ; ---------------------------------------------------------------------------
0002B2CA                            Debug_SYZ:
0002B2CA                            	include "_inc\Debug list - SYZ.asm"
0002B2CA                            ; ---------------------------------------------------------------------------
0002B2CA                            ; Debug	list - Spring Yard
0002B2CA                            ; ---------------------------------------------------------------------------
0002B2CA 0016                       	dc.w $16
0002B2CC 2501 1E48                  	dc.l Map_obj25+$25000000
0002B2D0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B2D4 2601 2502                  	dc.l Map_obj26+$26000000
0002B2D8 080A 0680                  	dc.b 8,	$A, 6, $80
0002B2DC 2601 2502                  	dc.l Map_obj26+$26000000
0002B2E0 0608 0680                  	dc.b 6,	8, 6, $80
0002B2E4 2601 2502                  	dc.l Map_obj26+$26000000
0002B2E8 0507 0680                  	dc.b 5,	7, 6, $80
0002B2EC 2601 2502                  	dc.l Map_obj26+$26000000
0002B2F0 0406 0680                  	dc.b 4,	6, 6, $80
0002B2F4 2601 2502                  	dc.l Map_obj26+$26000000
0002B2F8 0305 0680                  	dc.b 3,	5, 6, $80
0002B2FC 2601 2502                  	dc.l Map_obj26+$26000000
0002B300 0204 0680                  	dc.b 2,	4, 6, $80
0002B304 2601 2502                  	dc.l Map_obj26+$26000000
0002B308 0103 0680                  	dc.b 1,	3, 6, $80
0002B30C 3601 560C                  	dc.l Map_obj36+$36000000
0002B310 0000 051B                  	dc.b 0,	0, 5, $1B
0002B314 4101 70A6                  	dc.l Map_obj41+$41000000
0002B318 0000 0523                  	dc.b 0,	0, 5, $23
0002B31C 4301 7576                  	dc.l Map_obj43+$43000000
0002B320 0000 04B8                  	dc.b 0,	0, 4, $B8
0002B324 1201 7CDA                  	dc.l Map_obj12+$12000000
0002B328 0000 0000                  	dc.b 0,	0, 0, 0
0002B32C 4701 833A                  	dc.l Map_obj47+$47000000
0002B330 0000 0380                  	dc.b 0,	0, 3, $80
0002B334 1F01 14F6                  	dc.l Map_obj1F+$1F000000
0002B338 0000 0400                  	dc.b 0,	0, 4, 0
0002B33C 2201 17EE                  	dc.l Map_obj22+$22000000
0002B340 0000 0444                  	dc.b 0,	0, 4, $44
0002B344 5001 9374                  	dc.l Map_obj50+$50000000
0002B348 0000 247B                  	dc.b 0,	0, $24,	$7B
0002B34C 1800 FBE0                  	dc.l Map_obj18a+$18000000
0002B350 0000 4000                  	dc.b 0,	0, $40,	0
0002B354 5601 A434                  	dc.l Map_obj56+$56000000
0002B358 0000 4000                  	dc.b 0,	0, $40,	0
0002B35C 3201 4068                  	dc.l Map_obj32+$32000000
0002B360 0000 0513                  	dc.b 0,	0, 5, $13
0002B364 7802 2BEE                  	dc.l Map_obj78+$78000000
0002B368 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002B36C 4F01 9146                  	dc.l Map_SpdBooster+$4F000000
0002B370 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B374 7902 2F78                  	dc.l Map_obj79+$79000000
0002B378 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B37C                            	even
0002B37C                            	even
0002B37C                            Debug_SYZ_End:
0002B37C                            
0002B37C                            ; ---------------------------------------------------------------------------
0002B37C                            ; Debug	list - Scrap Brain
0002B37C                            ; ---------------------------------------------------------------------------
0002B37C                            Debug_SBZ:
0002B37C                            	include "_inc\Debug list - SBZ.asm"
0002B37C                            ; ---------------------------------------------------------------------------
0002B37C                            ; Debug	list - Scrap Brain
0002B37C                            ; ---------------------------------------------------------------------------
0002B37C 0024                       	dc.w $24
0002B37E 2501 1E48                  	dc.l Map_obj25+$25000000
0002B382 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B386 2601 2502                  	dc.l Map_obj26+$26000000
0002B38A 080A 0680                  	dc.b 8,	$A, 6, $80
0002B38E 2601 2502                  	dc.l Map_obj26+$26000000
0002B392 0608 0680                  	dc.b 6,	8, 6, $80
0002B396 2601 2502                  	dc.l Map_obj26+$26000000
0002B39A 0507 0680                  	dc.b 5,	7, 6, $80
0002B39E 2601 2502                  	dc.l Map_obj26+$26000000
0002B3A2 0406 0680                  	dc.b 4,	6, 6, $80
0002B3A6 2601 2502                  	dc.l Map_obj26+$26000000
0002B3AA 0305 0680                  	dc.b 3,	5, 6, $80
0002B3AE 2601 2502                  	dc.l Map_obj26+$26000000
0002B3B2 0204 0680                  	dc.b 2,	4, 6, $80
0002B3B6 2601 2502                  	dc.l Map_obj26+$26000000
0002B3BA 0103 0680                  	dc.b 1,	3, 6, $80
0002B3BE 5F01 B8B4                  	dc.l Map_obj5F+$5F000000
0002B3C2 0000 0400                  	dc.b 0,	0, 4, 0
0002B3C6 6001 BB68                  	dc.l Map_obj60+$60000000
0002B3CA 0000 0429                  	dc.b 0,	0, 4, $29
0002B3CE 7802 2BEE                  	dc.l Map_obj78+$78000000
0002B3D2 0000 22B0                  	dc.b 0,	0, $22,	$B0
0002B3D6 1501 A7B6                  	dc.l Map_obj15b+$15000000
0002B3DA 0702 4391                  	dc.b 7,	2, $43,	$91
0002B3DE 6702 1580                  	dc.l Map_obj67+$67000000
0002B3E2 E000 C344                  	dc.b $E0, 0, $C3, $44
0002B3E6 5201 9DA8                  	dc.l Map_obj52+$52000000
0002B3EA 2802 22C0                  	dc.b $28, 2, $22, $C0
0002B3EE 3201 4068                  	dc.l Map_obj32+$32000000
0002B3F2 0000 0513                  	dc.b 0,	0, 5, $13
0002B3F6 6902 17C8                  	dc.l Map_obj69+$69000000
0002B3FA 0300 4492                  	dc.b 3,	0, $44,	$92
0002B3FE 6902 1822                  	dc.l Map_obj69a+$69000000
0002B402 8300 04DF                  	dc.b $83, 0, 4,	$DF
0002B406 6A02 1A62                  	dc.l Map_obj6A+$6A000000
0002B40A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0002B40E 5301 04A2                  	dc.l Map_obj53+$53000000
0002B412 0000 43F5                  	dc.b 0,	0, $43,	$F5
0002B416 5201 9DA8                  	dc.l Map_obj52+$52000000
0002B41A 3903 4460                  	dc.b $39, 3, $44, $60
0002B41E 6B02 1E18                  	dc.l Map_obj6B+$6B000000
0002B422 0000 22C0                  	dc.b 0,	0, $22,	$C0
0002B426 2A01 0724                  	dc.l Map_obj2A+$2A000000
0002B42A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0002B42E 6B02 1E18                  	dc.l Map_obj6B+$6B000000
0002B432 1301 22C0                  	dc.b $13, 1, $22, $C0
0002B436 6A02 1A62                  	dc.l Map_obj6A+$6A000000
0002B43A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0002B43E 6B02 1E18                  	dc.l Map_obj6B+$6B000000
0002B442 2401 22C0                  	dc.b $24, 1, $22, $C0
0002B446 6A02 1A62                  	dc.l Map_obj6A+$6A000000
0002B44A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0002B44E 6B02 1E18                  	dc.l Map_obj6B+$6B000000
0002B452 3401 22C0                  	dc.b $34, 1, $22, $C0
0002B456 6C02 1FE2                  	dc.l Map_obj6C+$6C000000
0002B45A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0002B45E 6D01 7980                  	dc.l Map_obj6D+$6D000000
0002B462 6400 83D9                  	dc.b $64, 0, $83, $D9
0002B466 6D01 7980                  	dc.l Map_obj6D+$6D000000
0002B46A 640B 83D9                  	dc.b $64, $B, $83, $D9
0002B46E 6E02 209A                  	dc.l Map_obj6E+$6E000000
0002B472 0400 047E                  	dc.b 4,	0, 4, $7E
0002B476 7002 24D4                  	dc.l Map_obj70+$70000000
0002B47A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0002B47E 7101 B176                  	dc.l Map_obj71+$71000000
0002B482 1100 8680                  	dc.b $11, 0, $86, $80
0002B486 1E01 0BBE                  	dc.l Map_obj1E+$1E000000
0002B48A 0400 2302                  	dc.b 4,	0, $23,	2
0002B48E 4F01 9146                  	dc.l Map_SpdBooster+$4F000000
0002B492 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002B496 7902 2F78                  	dc.l Map_obj79+$79000000
0002B49A 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B49E                            	even
0002B49E                            	even
0002B49E                            Debug_SBZ_End:
0002B49E                            
0002B49E                            ; ---------------------------------------------------------------------------
0002B49E                            ; Debug	list - ending sequence / special stage
0002B49E                            ; ---------------------------------------------------------------------------
0002B49E                            Debug_Ending:
0002B49E                            	include "_inc\Debug list - Ending and SS.asm"
0002B49E                            ; ---------------------------------------------------------------------------
0002B49E                            ; Debug	list - ending sequence / special stage
0002B49E                            ; ---------------------------------------------------------------------------
0002B49E 000D                       	dc.w $D
0002B4A0 2501 1E48                  	dc.l Map_obj25+$25000000
0002B4A4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B4A8 4701 833A                  	dc.l Map_obj47+$47000000
0002B4AC 0000 0380                  	dc.b 0,	0, 3, $80
0002B4B0 2801 120E                  	dc.l Map_obj28a+$28000000
0002B4B4 0A00 05A0                  	dc.b $A, 0, 5, $A0
0002B4B8 2801 120E                  	dc.l Map_obj28a+$28000000
0002B4BC 0B00 05A0                  	dc.b $B, 0, 5, $A0
0002B4C0 2801 120E                  	dc.l Map_obj28a+$28000000
0002B4C4 0C00 05A0                  	dc.b $C, 0, 5, $A0
0002B4C8 2801 11F6                  	dc.l Map_obj28+$28000000
0002B4CC 0D00 0553                  	dc.b $D, 0, 5, $53
0002B4D0 2801 11F6                  	dc.l Map_obj28+$28000000
0002B4D4 0E00 0553                  	dc.b $E, 0, 5, $53
0002B4D8 2801 11F6                  	dc.l Map_obj28+$28000000
0002B4DC 0F00 0573                  	dc.b $F, 0, 5, $73
0002B4E0 2801 11F6                  	dc.l Map_obj28+$28000000
0002B4E4 1000 0573                  	dc.b $10, 0, 5,	$73
0002B4E8 2801 120E                  	dc.l Map_obj28a+$28000000
0002B4EC 1100 0585                  	dc.b $11, 0, 5,	$85
0002B4F0 2801 1226                  	dc.l Map_obj28b+$28000000
0002B4F4 1200 0593                  	dc.b $12, 0, 5,	$93
0002B4F8 2801 120E                  	dc.l Map_obj28a+$28000000
0002B4FC 1300 0565                  	dc.b $13, 0, 5,	$65
0002B500 2801 1226                  	dc.l Map_obj28b+$28000000
0002B504 1400 05B3                  	dc.b $14, 0, 5,	$B3
0002B508                            	even
0002B508                            	even
0002B508                            Debug_Ending_End:
0002B508                            	
0002B508                            ; ---------------------------------------------------------------------------
0002B508                            ; Debug	list - Alpha Beta
0002B508                            ; ---------------------------------------------------------------------------
0002B508                            Debug_ABZ:
0002B508                            	include "_inc\Debug list - ABZ.asm"
0002B508                            ; ---------------------------------------------------------------------------
0002B508                            ; Debug	list - Alpha Beta
0002B508                            ; ---------------------------------------------------------------------------
0002B508 0000                       	dc.w (((Debug_ABz_End-Debug_ABz-$02)/$08))
0002B50A 2501 1E48                  	dc.l Map_obj25+$25000000
0002B50E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002B512 2601 2502                  	dc.l Map_obj26+$26000000
0002B516 080A 0680                  	dc.b 8,	$A, 6, $80
0002B51A 2601 2502                  	dc.l Map_obj26+$26000000
0002B51E 0608 0680                  	dc.b 6,	8, 6, $80
0002B522 2601 2502                  	dc.l Map_obj26+$26000000
0002B526 0507 0680                  	dc.b 5,	7, 6, $80
0002B52A 2601 2502                  	dc.l Map_obj26+$26000000
0002B52E 0406 0680                  	dc.b 4,	6, 6, $80
0002B532 2601 2502                  	dc.l Map_obj26+$26000000
0002B536 0305 0680                  	dc.b 3,	5, 6, $80
0002B53A 2601 2502                  	dc.l Map_obj26+$26000000
0002B53E 0204 0680                  	dc.b 2,	4, 6, $80
0002B542 2601 2502                  	dc.l Map_obj26+$26000000
0002B546 0103 0680                  	dc.b 1,	3, 6, $80
0002B54A 7902 2F78                  	dc.l Map_obj79+$79000000
0002B54E 0100 06C0                  	dc.b 1,	0, 6, $C0
0002B552 4A01 FB64                  	dc.l Map_Rocket+$4A000000
0002B556 0000 0541                  	dc.b 0,	0, 5,	$41
0002B55A                            	even
0002B55A                            	even
0002B55A                            Debug_ABZ_End:
0002B55A                            ; ---------------------------------------------------------------------------
0002B55A                            ; Main level load blocks
0002B55A                            ; ---------------------------------------------------------------------------
0002B55A                            MainLoadBlocks:
0002B55A                            	include "_inc\Main level load blocks.asm"
0002B55A                            ; ---------------------------------------------------------------------------
0002B55A                            ; Main level load blocks
0002B55A                            ;
0002B55A                            ; ===FORMAT===
0002B55A                            ; level	patterns + (1st	PLC num	* 10^6)
0002B55A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B55A                            ; 256x256 mappings
0002B55A                            ; blank, music (unused), pal index (unused), pal index
0002B55A                            ; ---------------------------------------------------------------------------
0002B55A 0000 0000                  	dc.l Nem_GHZ+$4000000  ;changed from Nem_GHZ_2nd
0002B55E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0002B562 0000 0000                  	dc.l Blk256_GHZ
0002B566 0081 0404                  	dc.b 0,	$81, 4,	4
0002B56A 0000 0000                  	dc.l Nem_LZ+$6000000
0002B56E 0000 0000                  	dc.l Blk16_LZ+$7000000
0002B572 0000 0000                  	dc.l Blk256_LZ
0002B576 0082 0505                  	dc.b 0,	$82, 5,	5
0002B57A 0000 0000                  	dc.l Nem_MZ+$8000000
0002B57E 0000 0000                  	dc.l Blk16_MZ+$9000000
0002B582 0000 0000                  	dc.l Blk256_MZ
0002B586 0083 0606                  	dc.b 0,	$83, 6,	6
0002B58A 0000 0000                  	dc.l Nem_SLZ+$A000000
0002B58E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0002B592 0000 0000                  	dc.l Blk256_SLZ
0002B596 0084 0707                  	dc.b 0,	$84, 7,	7
0002B59A 0000 0000                  	dc.l Nem_SYZ+$C000000
0002B59E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0002B5A2 0000 0000                  	dc.l Blk256_SYZ
0002B5A6 0085 0808                  	dc.b 0,	$85, 8,	8
0002B5AA 0000 0000                  	dc.l Nem_SBZ+$E000000
0002B5AE 0000 0000                  	dc.l Blk16_SBZ+$F000000
0002B5B2 0000 0000                  	dc.l Blk256_SBZ
0002B5B6 0086 0909                  	dc.b 0,	$86, 9,	9
0002B5BA 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0002B5BE 0000 0000                  	dc.l Blk16_GHZ
0002B5C2 0000 0000                  	dc.l Blk256_GHZ
0002B5C6 0086 1313                  	dc.b 0,	$86, $13, $13
0002B5CA 0000 0000                  	dc.l Nem_ABZ+$20000000
0002B5CE 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002B5D2 0000 0000                  	dc.l Blk256_ABZ
0002B5D6 008C 1414                  	dc.b 0,	$8C, $14, $14
0002B5DA                            	even
0002B5DA                            	even
0002B5DA                            MainLoadBlocks2:
0002B5DA                            	include "_inc\Main level load blocks2.asm"
0002B5DA                            ; ---------------------------------------------------------------------------
0002B5DA                            ; Main level load blocks
0002B5DA                            ;
0002B5DA                            ; ===FORMAT===
0002B5DA                            ; level	patterns + (1st	PLC num	* 10^6)
0002B5DA                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B5DA                            ; 256x256 mappings
0002B5DA                            ; blank, music (unused), pal index (unused), pal index
0002B5DA                            ; ---------------------------------------------------------------------------
0002B5DA 0000 0000                  	dc.l Nem_GHZ2+$4000000
0002B5DE 0000 0000                  	dc.l Blk16_GHZ2+$5000000
0002B5E2 0000 0000                  	dc.l Blk256_GHZ2
0002B5E6 0081 0404                  	dc.b 0,	$81, 4,	4
0002B5EA 0000 0000                  	dc.l Nem_LZ2+$6000000
0002B5EE 0000 0000                  	dc.l Blk16_LZ2+$7000000
0002B5F2 0000 0000                  	dc.l Blk256_LZ2
0002B5F6 0082 0505                  	dc.b 0,	$82, 5,	5
0002B5FA 0000 0000                  	dc.l Nem_MZ2+$8000000
0002B5FE 0000 0000                  	dc.l Blk16_MZ2+$9000000
0002B602 0000 0000                  	dc.l Blk256_MZ2
0002B606 0083 0606                  	dc.b 0,	$83, 6,	6
0002B60A 0000 0000                  	dc.l Nem_SLZ2+$A000000
0002B60E 0000 0000                  	dc.l Blk16_SLZ2+$B000000
0002B612 0000 0000                  	dc.l Blk256_SLZ2
0002B616 0084 0707                  	dc.b 0,	$84, 7,	7
0002B61A 0000 0000                  	dc.l Nem_SYZ2+$C000000
0002B61E 0000 0000                  	dc.l Blk16_SYZ2+$D000000
0002B622 0000 0000                  	dc.l Blk256_SYZ2
0002B626 0085 0808                  	dc.b 0,	$85, 8,	8
0002B62A 0000 0000                  	dc.l Nem_SBZ2+$E000000
0002B62E 0000 0000                  	dc.l Blk16_SBZ2+$F000000
0002B632 0000 0000                  	dc.l Blk256_SBZ2
0002B636 0086 0909                  	dc.b 0,	$86, 9,	9
0002B63A 0000 0000                  	dc.l Nem_GHZ2_2nd; main load block for ending
0002B63E 0000 0000                  	dc.l Blk16_GHZ2
0002B642 0000 0000                  	dc.l Blk256_GHZ2
0002B646 0086 1313                  	dc.b 0,	$86, $13, $13
0002B64A 0000 0000                  	dc.l Nem_ABZ+$20000000
0002B64E 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002B652 0000 0000                  	dc.l Blk256_ABZ
0002B656 008C 1414                  	dc.b 0,	$8C, $14, $14
0002B65A                            	even
0002B65A                            	even
0002B65A                            MainLoadBlocks3:
0002B65A                            	include "_inc\Main level load blocks3.asm"
0002B65A                            ; ---------------------------------------------------------------------------
0002B65A                            ; Main level load blocks
0002B65A                            ;
0002B65A                            ; ===FORMAT===
0002B65A                            ; level	patterns + (1st	PLC num	* 10^6)
0002B65A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002B65A                            ; 256x256 mappings
0002B65A                            ; blank, music (unused), pal index (unused), pal index
0002B65A                            ; ---------------------------------------------------------------------------
0002B65A 0000 0000                  	dc.l Nem_GHZ3+$4000000
0002B65E 0000 0000                  	dc.l Blk16_GHZ3+$5000000
0002B662 0000 0000                  	dc.l Blk256_GHZ3
0002B666 0081 0404                  	dc.b 0,	$81, 4,	4
0002B66A 0000 0000                  	dc.l Nem_LZ3+$6000000
0002B66E 0000 0000                  	dc.l Blk16_LZ3+$7000000
0002B672 0000 0000                  	dc.l Blk256_LZ3
0002B676 0082 0505                  	dc.b 0,	$82, 5,	5
0002B67A 0000 0000                  	dc.l Nem_MZ3+$8000000
0002B67E 0000 0000                  	dc.l Blk16_MZ3+$9000000
0002B682 0000 0000                  	dc.l Blk256_MZ3
0002B686 0083 0606                  	dc.b 0,	$83, 6,	6
0002B68A 0000 0000                  	dc.l Nem_SLZ3+$A000000
0002B68E 0000 0000                  	dc.l Blk16_SLZ3+$B000000
0002B692 0000 0000                  	dc.l Blk256_SLZ3
0002B696 0084 0707                  	dc.b 0,	$84, 7,	7
0002B69A 0000 0000                  	dc.l Nem_SYZ3+$C000000
0002B69E 0000 0000                  	dc.l Blk16_SYZ3+$D000000
0002B6A2 0000 0000                  	dc.l Blk256_SYZ3
0002B6A6 0085 0808                  	dc.b 0,	$85, 8,	8
0002B6AA 0000 0000                  	dc.l Nem_SBZ3+$E000000
0002B6AE 0000 0000                  	dc.l Blk16_SBZ3+$F000000
0002B6B2 0000 0000                  	dc.l Blk256_SBZ3
0002B6B6 0086 0909                  	dc.b 0,	$86, 9,	9
0002B6BA 0000 0000                  	dc.l Nem_GHZ3_2nd; main load block for ending
0002B6BE 0000 0000                  	dc.l Blk16_GHZ3
0002B6C2 0000 0000                  	dc.l Blk256_GHZ3
0002B6C6 0086 1313                  	dc.b 0,	$86, $13, $13
0002B6CA                            	even
0002B6CA                            	even
0002B6CA                            ;MainLoadBlocks4:
0002B6CA                            ;	include "_inc\Main level load blocks4.asm"
0002B6CA                            
0002B6CA                            ; ---------------------------------------------------------------------------
0002B6CA                            ; Pattern load cues
0002B6CA                            ; ---------------------------------------------------------------------------
0002B6CA                            ArtLoadCues:
0002B6CA                            	include "_inc\Pattern load cues.asm"
0002B6CA                            ; ---------------------------------------------------------------------------
0002B6CA                            ; Pattern load cues - index
0002B6CA                            ; ---------------------------------------------------------------------------
0002B6CA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	;2
0002B6CE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	;4
0002B6D2 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues	;6
0002B6D6 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0002B6DA 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0002B6DE 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0002B6E2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0002B6E6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0002B6EA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0002B6EE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0002B6F2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0002B6F6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0002B6FA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0002B6FE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0002B702 0000                       	dc.w PLC_Ending-ArtLoadCues			; 28 - 1C
0002B704 0000                       	dc.w PLC_TryAgain-ArtLoadCues		; 29 - 1D
0002B706 0000                       	dc.w PLC_EggmanSBZ2-ArtLoadCues		; 30 - 1E
0002B708 0000                       	dc.w PLC_FZBoss-ArtLoadCues			; 31 - 1F
0002B70A 0000 0000 0000             	dc.w PLC_ABZ-ArtLoadCues, PLC_ABZ2-ArtLoadCues, PLC_ABZAnimals-ArtLoadCues
0002B710 0000                       	dc.w PLC_Main-ArtLoadCues		; 37 - 23
0002B712 0000                       	dc.w PLC_Main-ArtLoadCues	; 40 - 24
0002B714 0000                       	dc.w RingPLC-ArtLoadCues	; 41 - 25
0002B716 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 26
0002B718 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 27
0002B71A                            ;	dc.w PLC_Shield-ArtLoadCues	
0002B71A 0000                       	dc.w PLC_TitleCard2-ArtLoadCues ; 43 - 28
0002B71C                            	
0002B71C                            plcm:	macro gfx,vram
0002B71C                            	dc.l gfx
0002B71C                            	dc.w vram
0002B71C                            	endm
0002B71C                            ; ---------------------------------------------------------------------------
0002B71C                            ; Pattern load cues - standard block 1
0002B71C                            ; ---------------------------------------------------------------------------
0002B71C 0000                       PLC_Main:	dc.w ((PLC_Main_End-PLC_Main-2)/6)-1
0002B71E 0001 9178                          dc.l Artnem_SpdBooster	; spikes
0002B722 BD80                       		dc.w $BD80
0002B724 0000 0000                  		dc.l Nem_Lamp		; lamppost
0002B728 D800                       		dc.w $D800
0002B72A 0000 0000                  		dc.l Nem_Hud		; HUD
0002B72E D940                       		dc.w $D940
0002B730                            ;		dc.l Nem_Lives		; lives	counter
0002B730                            ;		dc.w $FA80
0002B730 0000 0000                  		dc.l Nem_Ring_S		; rings
0002B734 F640                       		dc.w $F640
0002B736                            ;		dc.l Nem_Points		; points from enemy
0002B736                            ;		dc.w $F2E0
0002B736                            PLC_Main_End:
0002B736                            ; ---------------------------------------------------------------------------
0002B736                            ; Pattern load cues - standard block 2
0002B736                            ; ---------------------------------------------------------------------------
0002B736 0000                       PLC_Main2:	dc.w ((PLC_Main2_End-PLC_Main2-2)/6)-1
0002B738 0000 0000                  		dc.l Nem_Monitors	; monitors
0002B73C D000                       		dc.w $D000
0002B73E                            ;		dc.l Nem_Shield		; shield
0002B73E                            ;		dc.w $A820
0002B73E                            ;		dc.l Nem_Stars		; invincibility	stars
0002B73E                            ;		dc.w $ABC0
0002B73E                            PLC_Main2_End:
0002B73E                            ; ---------------------------------------------------------------------------
0002B73E                            ; Pattern load cues - explosion
0002B73E                            ; ---------------------------------------------------------------------------
0002B73E 0000                       PLC_Explode:	dc.w ((PLC_Explode_End-PLC_Explode-2)/6)-1
0002B740 0000 0000                  		dc.l Nem_Explode	; explosion
0002B744 B400                       		dc.w $B400
0002B746                            ;		dc.l Nem_PauseMenu	; explosion
0002B746                            ;		dc.w $BC80
0002B746 0001 9178                  		dc.l Artnem_SpdBooster	; spikes
0002B74A BE80                       		dc.w $BE80
0002B74C                            PLC_Explode_End:
0002B74C                            ; ---------------------------------------------------------------------------
0002B74C                            ; Pattern load cues - Super Stars
0002B74C                            ; ---------------------------------------------------------------------------
0002B74C                            ;SuperPLC_Star:	dc.w ((SuperPLC_Starend-SuperPLC_Star-2)/6)-1
0002B74C                            ;		dc.l Nem_SuperSonic_stars
0002B74C                            ;		dc.w $ABC0
0002B74C                            ;	SuperPLC_Starend:
0002B74C                            ; ---------------------------------------------------------------------------
0002B74C                            ; Pattern load cues - Super Stars
0002B74C                            ; ---------------------------------------------------------------------------
0002B74C 0000                       RingPLC:	dc.w ((RingPLC_Ringend-RingPLC-2)/6)-1
0002B74E 0000 0000                  		dc.l Nem_Ring		; rings
0002B752 F640                       		dc.w $F640
0002B754                            	RingPLC_Ringend:
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ; Pattern load cues - Super Sonic Lives 
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ;SuperLives:	dc.w ((SuperLivesend-SuperLives-2)/6)-1
0002B754                            ;		dc.l Nem_SuperLives		; lives	counter
0002B754                            ;		dc.w $FA80
0002B754                            ;	SuperLivesend:
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ; Pattern load cues - Super Sonic Lives 
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ;NormalLives:	dc.w ((NormalLivesend-NormalLives-2)/6)-1
0002B754                            ;		dc.l Nem_Lives		; lives	counter
0002B754                            ;		dc.w $FA80
0002B754                            ;	NormalLivesend:
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ; Pattern load cues - invincibility stars
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ;PLC_Invincibility:	dc.w ((PLC_Invincibilityend-PLC_Invincibility-2)/6)-1
0002B754                            ;		dc.l Nem_Stars
0002B754                            ;		dc.w $ABC0
0002B754                            ;	PLC_Invincibilityend:
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ; Pattern load cues - Shield
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ;PLC_Shield:	dc.w ((PLC_Shieldend-PLC_Shield-2)/6)-1
0002B754                            ;		dc.l Nem_Shield		; shield
0002B754                            ;		dc.w $A820
0002B754                            ;	PLC_Shieldend:
0002B754                            ; ---------------------------------------------------------------------------
0002B754                            ; Pattern load cues - game/time	over
0002B754                            ; ---------------------------------------------------------------------------
0002B754 0000                       PLC_GameOver:	dc.w ((PLC_GameOver_End-PLC_GameOver-2)/6)-1
0002B756 0000 0000                  		dc.l Nem_GameOver	; game/time over
0002B75A ABC0                       		dc.w $ABC0
0002B75C                            PLC_GameOver_End:
0002B75C                            		
0002B75C                            ; ---------------------------------------------------------------------------
0002B75C                            ; Pattern load cues - Green Hill
0002B75C                            ; ---------------------------------------------------------------------------
0002B75C 0000                       PLC_GHZ:	dc.w ((PLC_GHZ_End-PLC_GHZ-2)/6)-1
0002B75E                            ;		dc.l Nem_GHZ; GHZ main patterns
0002B75E                            ;		dc.w 0
0002B75E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002B762 6B00                       		dc.w $6B00
0002B764 0000 0000                  		dc.l Nem_PplRock	; purple rock
0002B768 7A00                       		dc.w $7A00
0002B76A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B76E 8000                       		dc.w $8000
0002B770 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B774 8880                       		dc.w $8880
0002B776 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0002B77A 8F60                       		dc.w $8F60
0002B77C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0002B780 9360                       		dc.w $9360
0002B782 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0002B786 9E00                       		dc.w $9E00
0002B788 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B78C A360                       		dc.w $A360
0002B78E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B792 A460                       		dc.w $A460
0002B794 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B798 A660                       		dc.w $A660
0002B79A                            PLC_GHZ_End
0002B79A 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2_End-PLC_GHZ2-2)/6)-1
0002B79C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B7A0 7000                       		dc.w $7000
0002B7A2 0000 0000                  		dc.l Nem_Bridge		; bridge
0002B7A6 71C0                       		dc.w $71C0
0002B7A8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0002B7AC 7300                       		dc.w $7300
0002B7AE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0002B7B2 7540                       		dc.w $7540
0002B7B4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0002B7B8 A1E0                       		dc.w $A1E0
0002B7BA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0002B7BE 6980                       		dc.w $6980
0002B7C0                            PLC_GHZ2_End
0002B7C0                            ; ---------------------------------------------------------------------------
0002B7C0                            ; Pattern load cues - Labyrinth
0002B7C0                            ; ---------------------------------------------------------------------------
0002B7C0 0000                       PLC_LZ:		dc.w ((PLC_LZ_End-PLC_LZ-2)/6)-1
0002B7C2                            ;		dc.l Nem_LZ		; LZ main patterns
0002B7C2                            ;		dc.w 0
0002B7C2 0000 0000                  		dc.l Nem_LzBlock1	; block
0002B7C6 3C00                       		dc.w $3C00
0002B7C8 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0002B7CC 3E00                       		dc.w $3E00
0002B7CE 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0002B7D2 4B20                       		dc.w $4B20
0002B7D4 0000 0000                  		dc.l Nem_Water		; water	surface
0002B7D8 6000                       		dc.w $6000
0002B7DA 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0002B7DE 6200                       		dc.w $6200
0002B7E0 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0002B7E4 6500                       		dc.w $6500
0002B7E6 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0002B7EA 6900                       		dc.w $6900
0002B7EC 0000 0000                  		dc.l Nem_LzBlock3	; block
0002B7F0 7780                       		dc.w $7780
0002B7F2 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0002B7F6 7880                       		dc.w $7880
0002B7F8 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0002B7FC 7980                       		dc.w $7980
0002B7FE 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0002B802 94C0                       		dc.w $94C0
0002B804                            PLC_LZ_End
0002B804 0000                       PLC_LZ2:	dc.w ((PLC_LZ2_End-PLC_LZ2-2)/6)-1
0002B806 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0002B80A 7BC0                       		dc.w $7BC0
0002B80C 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0002B810 7CC0                       		dc.w $7CC0
0002B812 0000 0000                  		dc.l Nem_LzWheel	; wheel
0002B816 7EC0                       		dc.w $7EC0
0002B818 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0002B81C 5D20                       		dc.w $5D20
0002B81E 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0002B822 8800                       		dc.w $8800
0002B824 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0002B828 89E0                       		dc.w $89E0
0002B82A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B82E 8CE0                       		dc.w $8CE0
0002B830 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0002B834 90C0                       		dc.w $90C0
0002B836 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B83A A1E0                       		dc.w $A1E0
0002B83C 0000 0000                  		dc.l Nem_Cork		; cork block
0002B840 A000                       		dc.w $A000
0002B842 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B846 A360                       		dc.w $A360
0002B848 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B84C A460                       		dc.w $A460
0002B84E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B852 A660                       		dc.w $A660
0002B854                            PLC_LZ2_End:
0002B854                            ; ---------------------------------------------------------------------------
0002B854                            ; Pattern load cues - Marble
0002B854                            ; ---------------------------------------------------------------------------
0002B854 0000                       PLC_MZ:		dc.w ((PLC_MZ_End-PLC_MZ-2)/6)-1
0002B856                            ;		dc.l Nem_MZ		; MZ main patterns
0002B856                            ;		dc.w 0
0002B856 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0002B85A 6000                       		dc.w $6000
0002B85C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B860 68A0                       		dc.w $68A0
0002B862 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B866 7000                       		dc.w $7000
0002B868 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0002B86C 71C0                       		dc.w $71C0
0002B86E 0000 0000                  		dc.l Nem_Lava		; lava
0002B872 7500                       		dc.w $7500
0002B874 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B878 8880                       		dc.w $8880
0002B87A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B87E 8F60                       		dc.w $8F60
0002B880 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0002B884 9700                       		dc.w $9700
0002B886 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B88A 9FE0                       		dc.w $9FE0
0002B88C                            PLC_MZ_End:
0002B88C 0000                       PLC_MZ2:	dc.w ((PLC_MZ2_End-PLC_MZ2-2)/6)-1
0002B88E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002B892 A260                       		dc.w $A260
0002B894 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B898 A360                       		dc.w $A360
0002B89A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B89E A460                       		dc.w $A460
0002B8A0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B8A4 A660                       		dc.w $A660
0002B8A6 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0002B8AA 5700                       		dc.w $5700
0002B8AC                            PLC_MZ2_End:
0002B8AC                            ; ---------------------------------------------------------------------------
0002B8AC                            ; Pattern load cues - Star Light
0002B8AC                            ; ---------------------------------------------------------------------------
0002B8AC 0000                       PLC_SLZ:	dc.w ((PLC_SLZ_End-PLC_SLZ-2)/6)-1
0002B8AE                            ;		dc.l Nem_SLZ		; SLZ main patterns
0002B8AE                            ;		dc.w 0
0002B8AE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B8B2 8000                       		dc.w $8000
0002B8B4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B8B8 8520                       		dc.w $8520
0002B8BA 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B8BE 9000                       		dc.w $9000
0002B8C0 0000 0000                  		dc.l Nem_SlzBlock	; block
0002B8C4 9C00                       		dc.w $9C00
0002B8C6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0002B8CA A260                       		dc.w $A260
0002B8CC 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B8D0 A360                       		dc.w $A360
0002B8D2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B8D6 A460                       		dc.w $A460
0002B8D8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B8DC A660                       		dc.w $A660
0002B8DE                            PLC_SLZ_End
0002B8DE 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2_End-PLC_SLZ2-2)/6)-1
0002B8E0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0002B8E4 6E80                       		dc.w $6E80
0002B8E6 0000 0000                  		dc.l Nem_Fan		; fan
0002B8EA 7400                       		dc.w $7400
0002B8EC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0002B8F0 7980                       		dc.w $7980
0002B8F2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0002B8F6 7B80                       		dc.w $7B80
0002B8F8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0002B8FC 9B00                       		dc.w $9B00
0002B8FE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0002B902 9E00                       		dc.w $9E00
0002B904                            PLC_SLZ2_End
0002B904                            ; ---------------------------------------------------------------------------
0002B904                            ; Pattern load cues - Spring Yard
0002B904                            ; ---------------------------------------------------------------------------
0002B904 0000                       PLC_SYZ:	dc.w ((PLC_SYZ_End-PLC_SYZ-2)/6)-1
0002B906                            ;		dc.l Nem_SYZ		; SYZ main patterns
0002B906                            ;		dc.w 0
0002B906 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B90A 8000                       		dc.w $8000
0002B90C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B910 8880                       		dc.w $8880
0002B912 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B916 8F60                       		dc.w $8F60
0002B918 0000 0000                  		dc.l Nem_Roller		; roller enemy
0002B91C 9700                       		dc.w $9700
0002B91E                            PLC_SYZ_End:
0002B91E 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2_End-PLC_SYZ2-2)/6)-1
0002B920 0000 0000                  		dc.l Nem_Bumper		; bumper
0002B924 7000                       		dc.w $7000
0002B926 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B92A 72C0                       		dc.w $72C0
0002B92C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0002B930 7740                       		dc.w $7740
0002B932 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B936 9FE0                       		dc.w $9FE0
0002B938 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B93C A1E0                       		dc.w $A1E0
0002B93E 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B942 A360                       		dc.w $A360
0002B944 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B948 A460                       		dc.w $A460
0002B94A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B94E A660                       		dc.w $A660
0002B950                            PLC_SYZ2_End:
0002B950                            ; ---------------------------------------------------------------------------
0002B950                            ; Pattern load cues - Scrap Brain
0002B950                            ; ---------------------------------------------------------------------------
0002B950 0000                       PLC_SBZ:	dc.w ((PLC_SBZ_End-PLC_SBZ-2)/6)-1
0002B952                            ;		dc.l Nem_SBZ		; SBZ main patterns
0002B952                            ;		dc.w 0
0002B952 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0002B956 5800                       		dc.w $5800
0002B958 0000 0000                  		dc.l Nem_SbzDoor1	; door
0002B95C 5D00                       		dc.w $5D00
0002B95E 0000 0000                  		dc.l Nem_Girder		; girder
0002B962 5E00                       		dc.w $5E00
0002B964 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0002B968 6040                       		dc.w $6040
0002B96A 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0002B96E 6880                       		dc.w $6880
0002B970 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0002B974 6900                       		dc.w $6900
0002B976 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B97A 7220                       		dc.w $7220
0002B97C 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0002B980 76A0                       		dc.w $76A0
0002B982 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0002B986 7B20                       		dc.w $7B20
0002B988 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B98C 7EA0                       		dc.w $7EA0
0002B98E 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0002B992 9860                       		dc.w $9860
0002B994                            PLC_SBZ_End
0002B994 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2_End-PLC_SBZ2-2)/6)-1
0002B996 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B99A 5600                       		dc.w $5600
0002B99C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B9A0 8000                       		dc.w $8000
0002B9A2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B9A6 8520                       		dc.w $8520
0002B9A8 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0002B9AC 8C00                       		dc.w $8C00
0002B9AE 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0002B9B2 8DE0                       		dc.w $8DE0
0002B9B4 0000 0000                  		dc.l Nem_Electric	; electric orb
0002B9B8 8FC0                       		dc.w $8FC0
0002B9BA 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0002B9BE 9240                       		dc.w $9240
0002B9C0 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B9C4 7F20                       		dc.w $7F20
0002B9C6 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0002B9CA 9BE0                       		dc.w $9BE0
0002B9CC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B9D0 A1E0                       		dc.w $A1E0
0002B9D2 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B9D6 A360                       		dc.w $A360
0002B9D8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B9DC A460                       		dc.w $A460
0002B9DE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B9E2 A660                       		dc.w $A660
0002B9E4                            PLC_SBZ2_End
0002B9E4                            ; ---------------------------------------------------------------------------
0002B9E4                            ; Pattern load cues - title card
0002B9E4                            ; ---------------------------------------------------------------------------
0002B9E4 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCard_End-PLC_TitleCard-2)/6)-1
0002B9E6 0000 0000                  		dc.l Nem_TitleCard
0002B9EA B000                       		dc.w $B000
0002B9EC                            PLC_TitleCard_End
0002B9EC                            PLC_TitleCard2:
0002B9EC 0000                       		dc.w ((PLC_TitleCard2_End-PLC_TitleCard2-2)/6)-1
0002B9EE 0000 0000                  		dc.l Nem_TitleCard2
0002B9F2 B000                       		dc.w $B000
0002B9F4 0000 0000                  		dc.l Nem_TitleCard3
0002B9F8 D000                       		dc.w $D000
0002B9FA                            PLC_TitleCard2_End
0002B9FA                            ; ---------------------------------------------------------------------------
0002B9FA                            ; Pattern load cues - act 3 boss
0002B9FA                            ; ---------------------------------------------------------------------------
0002B9FA 0000                       PLC_Boss:	dc.w ((PLC_Boss_End-PLC_Boss-2)/6)-1
0002B9FC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002BA00 8000                       		dc.w $8000
0002BA02 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0002BA06 8D80                       		dc.w $8D80
0002BA08 0000 0000                  		dc.l Nem_Prison		; prison capsule
0002BA0C 93A0                       		dc.w $93A0
0002BA0E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0002BA12 A300                       		dc.w $A300
0002BA14 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0002BA18 A300                       		dc.w $A300
0002BA1A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002BA1E A540                       		dc.w $A540
0002BA20 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002BA24 B400                       		dc.w $B400
0002BA26                            PLC_Boss_End
0002BA26                            ; ---------------------------------------------------------------------------
0002BA26                            ; Pattern load cues - act 1/2 signpost
0002BA26                            ; ---------------------------------------------------------------------------
0002BA26 0000                       PLC_Signpost:	dc.w ((PLC_Signpost_End-PLC_Signpost-2)/6)-1
0002BA28 0000 0000                  		dc.l Nem_SignPost	; signpost
0002BA2C D000                       		dc.w $D000
0002BA2E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0002BA32 96C0                       		dc.w $96C0
0002BA34 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002BA38 8C40                       		dc.w $8C40
0002BA3A                            PLC_Signpost_End
0002BA3A                            ; ---------------------------------------------------------------------------
0002BA3A                            ; Pattern load cues - beta special stage warp effect
0002BA3A                            ; ---------------------------------------------------------------------------
0002BA3A                            PLC_Warp:
0002BA3A 0000                       		dc.w ((PLC_Warpend-PLC_Warp-2)/6)-1
0002BA3C 0000 0000                  		dc.l Nem_Warp
0002BA40 A820                       		dc.w $A820
0002BA42                            	PLC_Warpend:
0002BA42                            ; ---------------------------------------------------------------------------
0002BA42                            ; Pattern load cues - special stage
0002BA42                            ; ---------------------------------------------------------------------------
0002BA42 0000                       PLC_SpeStage:	dc.w ((PLC_SpeStage_End-PLC_SpeStage-2)/6)-1
0002BA44 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0002BA48 0000                       		dc.w 0
0002BA4A 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0002BA4E 0A20                       		dc.w $A20
0002BA50                            ;		dc.l Nem_SSWalls	; walls
0002BA50                            ;		dc.w $2840
0002BA50 0000 0000                  		dc.l Nem_Bumper		; bumper
0002BA54 4760                       		dc.w $4760
0002BA56 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0002BA5A 4A20                       		dc.w $4A20
0002BA5C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0002BA60 4C60                       		dc.w $4C60
0002BA62 0000 0000                  		dc.l Nem_SSRBlock	; R block
0002BA66 5E00                       		dc.w $5E00
0002BA68 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0002BA6C 6E00                       		dc.w $6E00
0002BA6E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0002BA72 7E00                       		dc.w $7E00
0002BA74 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0002BA78 8E00                       		dc.w $8E00
0002BA7A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0002BA7E 9E00                       		dc.w $9E00
0002BA80 0000 0000                  		dc.l Nem_SSWBlock	; W block
0002BA84 AE00                       		dc.w $AE00
0002BA86 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0002BA8A BE00                       		dc.w $BE00
0002BA8C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0002BA90 EE00                       		dc.w $EE00
0002BA92 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0002BA96 F2E0                       		dc.w $F2E0
0002BA98 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0002BA9C F400                       		dc.w $F400
0002BA9E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0002BAA2 F520                       		dc.w $F520
0002BAA4 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0002BAA8 F2E0                       		dc.w $F2E0
0002BAAA 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0002BAAE F400                       		dc.w $F400
0002BAB0 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0002BAB4 F520                       		dc.w $F520
0002BAB6                            PLC_SpeStage_End
0002BAB6                            ; ---------------------------------------------------------------------------
0002BAB6                            ; Pattern load cues - GHZ animals
0002BAB6                            ; ---------------------------------------------------------------------------
0002BAB6 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimals_End-PLC_GHZAnimals-2)/6)-1
0002BAB8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002BABC B000                       		dc.w $B000
0002BABE 0000 0000                  		dc.l Nem_Flicky		; flicky
0002BAC2 B240                       		dc.w $B240
0002BAC4                            PLC_GHZAnimals_End
0002BAC4                            ; ---------------------------------------------------------------------------
0002BAC4                            ; Pattern load cues - LZ animals
0002BAC4                            ; ---------------------------------------------------------------------------
0002BAC4 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimals_End-PLC_LZAnimals-2)/6)-1
0002BAC6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002BACA B000                       		dc.w $B000
0002BACC 0000 0000                  		dc.l Nem_Seal		; seal
0002BAD0 B240                       		dc.w $B240
0002BAD2                            PLC_LZAnimals_End
0002BAD2                            ; ---------------------------------------------------------------------------
0002BAD2                            ; Pattern load cues - MZ animals
0002BAD2                            ; ---------------------------------------------------------------------------
0002BAD2 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimals_End-PLC_MZAnimals-2)/6)-1
0002BAD4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002BAD8 B000                       		dc.w $B000
0002BADA 0000 0000                  		dc.l Nem_Seal		; seal
0002BADE B240                       		dc.w $B240
0002BAE0                            PLC_MZAnimals_End
0002BAE0                            ; ---------------------------------------------------------------------------
0002BAE0                            ; Pattern load cues - SLZ animals
0002BAE0                            ; ---------------------------------------------------------------------------
0002BAE0 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimals_End-PLC_SLZAnimals-2)/6)-1
0002BAE2 0000 0000                  		dc.l Nem_Pig		; pig
0002BAE6 B000                       		dc.w $B000
0002BAE8 0000 0000                  		dc.l Nem_Flicky		; flicky
0002BAEC B240                       		dc.w $B240
0002BAEE                            PLC_SLZAnimals_End
0002BAEE                            ; ---------------------------------------------------------------------------
0002BAEE                            ; Pattern load cues - SYZ animals
0002BAEE                            ; ---------------------------------------------------------------------------
0002BAEE 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimals_End-PLC_SYZAnimals-2)/6)-1
0002BAF0 0000 0000                  		dc.l Nem_Pig		; pig
0002BAF4 B000                       		dc.w $B000
0002BAF6 0000 0000                  		dc.l Nem_Chicken	; chicken
0002BAFA B240                       		dc.w $B240
0002BAFC                            PLC_SYZAnimals_End
0002BAFC                            ; ---------------------------------------------------------------------------
0002BAFC                            ; Pattern load cues - SBZ animals
0002BAFC                            ; ---------------------------------------------------------------------------
0002BAFC 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimals_End-PLC_SBZAnimals-2)/6)-1
0002BAFE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002BB02 B000                       		dc.w $B000
0002BB04 0000 0000                  		dc.l Nem_Chicken	; chicken
0002BB08 B240                       		dc.w $B240
0002BB0A                            PLC_SBZAnimals_End
0002BB0A                            ; ---------------------------------------------------------------------------
0002BB0A                            ; Pattern load cues - MZ animals
0002BB0A                            ; ---------------------------------------------------------------------------
0002BB0A 0000                       PLC_ABZAnimals:	dc.w ((PLC_ABZAnimals_End-PLC_ABZAnimals-2)/6)-1
0002BB0C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002BB10 B000                       		dc.w $B000
0002BB12 0000 0000                  		dc.l Nem_Seal		; seal
0002BB16 B240                       		dc.w $B240
0002BB18                            PLC_ABZAnimals_End
0002BB18                            ; ---------------------------------------------------------------------------
0002BB18                            ; Pattern load cues - special stage results screen
0002BB18                            ; ---------------------------------------------------------------------------
0002BB18 0000                       PLC_SpeStResult:dc.w ((PLC_SpeStResult_End-PLC_SpeStResult-2)/6)-1
0002BB1A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0002BB1E A820                       		dc.w $A820
0002BB20 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0002BB24 AA20                       		dc.w $AA20
0002BB26                            PLC_SpeStResult_End			
0002BB26                            ; ---------------------------------------------------------------------------
0002BB26                            ; Pattern load cues - ending sequence
0002BB26                            ; ---------------------------------------------------------------------------
0002BB26 0000                       PLC_Ending:	dc.w ((PLC_Ending_End-PLC_Ending-2)/6)-1
0002BB28                            ;		dc.l Nem_GHZ_1st	; GHZ main patterns
0002BB28                            ;		dc.w 0
0002BB28                            ;		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0002BB28                            ;		dc.w $39A0
0002BB28 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002BB2C 6B00                       		dc.w $6B00
0002BB2E 0000 0000                  		dc.l Nem_EndFlower	; flowers
0002BB32 7400                       		dc.w $7400
0002BB34 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002BB38 78A0                       		dc.w $78A0
0002BB3A 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0002BB3E 7C20                       		dc.w $7C20
0002BB40 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0002BB44 A480                       		dc.w $A480
0002BB46 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002BB4A AA60                       		dc.w $AA60
0002BB4C 0000 0000                  		dc.l Nem_Chicken	; chicken
0002BB50 ACA0                       		dc.w $ACA0
0002BB52 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002BB56 AE60                       		dc.w $AE60
0002BB58 0000 0000                  		dc.l Nem_Seal		; seal
0002BB5C B0A0                       		dc.w $B0A0
0002BB5E 0000 0000                  		dc.l Nem_Pig		; pig
0002BB62 B260                       		dc.w $B260
0002BB64 0000 0000                  		dc.l Nem_Flicky		; flicky
0002BB68 B4A0                       		dc.w $B4A0
0002BB6A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002BB6E B660                       		dc.w $B660
0002BB70 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0002BB74 B8A0                       		dc.w $B8A0
0002BB76                            PLC_Ending_End
0002BB76                            ; ---------------------------------------------------------------------------
0002BB76                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002BB76                            ; ---------------------------------------------------------------------------
0002BB76 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgain_End-PLC_TryAgain-2)/6)-1
0002BB78 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002BB7C 78A0                       		dc.w $78A0
0002BB7E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0002BB82 7C20                       		dc.w $7C20
0002BB84 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0002BB88 B400                       		dc.w $B400
0002BB8A                            PLC_TryAgain_End
0002BB8A                            ; ---------------------------------------------------------------------------
0002BB8A                            ; Pattern load cues - Eggman on SBZ 2
0002BB8A                            ; ---------------------------------------------------------------------------
0002BB8A 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2_End-PLC_EggmanSBZ2-2)/6)-1
0002BB8C 0000 0000                  		dc.l Nem_SbzBlock	; block
0002BB90 A300                       		dc.w $A300
0002BB92 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0002BB96 8000                       		dc.w $8000
0002BB98 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002BB9C 9400                       		dc.w $9400
0002BB9E                            PLC_EggmanSBZ2_End
0002BB9E                            ; ---------------------------------------------------------------------------
0002BB9E                            ; Pattern load cues - final boss
0002BB9E                            ; ---------------------------------------------------------------------------
0002BB9E 0000                       PLC_FZBoss:	dc.w ((PLC_FZBoss_End-PLC_FZBoss-2)/6)-1
0002BBA0 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0002BBA4 7400                       		dc.w $7400
0002BBA6 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0002BBAA 6000                       		dc.w $6000
0002BBAC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002BBB0 8000                       		dc.w $8000
0002BBB2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0002BBB6 8E00                       		dc.w $8E00
0002BBB8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002BBBC A540                       		dc.w $A540
0002BBBE 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002BBC2 B400                       		dc.w $B400
0002BBC4                            PLC_FZBoss_End:
0002BBC4                            ; ---------------------------------------------------------------------------
0002BBC4                            ; Pattern load cues - Alpha Beta
0002BBC4                            ; ---------------------------------------------------------------------------
0002BBC4 0000                       PLC_ABZ:	dc.w ((PLC_ABZ_End-PLC_ABZ-2)/6)-1
0002BBC6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002BBCA 8000                       		dc.w $8000
0002BBCC 0000 0000                  		dc.l Nem_Rocket		; ABZ main patterns
0002BBD0 A820                       		dc.w $A820
0002BBD2                            PLC_ABZ_End
0002BBD2 0000                       PLC_ABZ2:	dc.w ((PLC_ABZ2_End-PLC_ABZ2-2)/6)-1
0002BBD4 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002BBD8 A260                       		dc.w $A260
0002BBDA 0000 0000                  		dc.l Nem_Spikes		; spikes
0002BBDE A360                       		dc.w $A360
0002BBE0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002BBE4 A460                       		dc.w $A460
0002BBE6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002BBEA A660                       		dc.w $A660
0002BBEC                            PLC_ABZ2_End
0002BBEC                            		even
0002BBEC                            		even
0002BBEC                            
0002BBEC                            		incbin	misc\padding.bin
0002BCDA                            		even
0002BCDA                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002C13C                            		even
0002C13C                            ;Sega_Spr: 
0002C13C                            ;		incbin 'data/sprites/sega.nem'
0002C13C                            ;Sega_Blocks_Spr: 
0002C13C                            ;		incbin 'data/sprites/sega_blk.nem'
0002C13C                            ;Sega_Mappings: 
0002C13C                            ;		incbin 'data/all/sega.eni' 
0002C13C                            ;Metal_Sonic: 
0002C13C                            ;		incbin 'data/dez/metal_snc.nem' 
0002C13C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0002C234                            		even
0002C234                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002C33E                            		even
0002C33E                            Nem_TitleFg:	incbin	artnem\titlefgv2.bin	; title screen foreground
0002D2BE                            		even
0002D2BE                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002EC8C                            		even
0002EC8C                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002ECC0                            		even
0002ECC0                            Eni_SSRGBG:	incbin	mapeni\ssrgbg.bin
0002ED5E 00                         		even
0002ED5E                            Nem_SSRGBG:	incbin	artnem\ssrgbg.bin
0002F3FC                            		even
0002F3FC                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002F43A                            		even
0002F43A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002F8E2                            		even
0002F8E2                            Unc_SuperSonic_stars:	incbin	artnem\superstarsfixunc.bin ; Super Sonic stars
0002FAE2                            		even
0002FAE2                            Nem_MenuFont:	incbin	artnem\menufont.bin ; level select s2 font
000300BE 00                         		even
000300BE                            Nem_MenuBox:	incbin	artnem\menubox.bin  ; menu options box
0003013E                            		even
0003013E                            Eni_MenuBox:	incbin	mapeni\menubox.bin	; menu options box (mappings)
0003016A                            		even
0003016A                            ;Eni_MenuBg:	incbin  'data\menu\menubg.eni'	; level select s2 background (mappings)
0003016A                            ;		even
0003016A                            ;Nem_LevelIcons:	incbin	artnem\levelico.bin	; level select s2 icons
0003016A                            ;		even
0003016A                            ; ---------------------------------------------------------------------------
0003016A                            ; Sprite mappings - Sonic
0003016A                            ; ---------------------------------------------------------------------------
0003016A                            ;Map_Sonic:
0003016A                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2.asm"
0003016A                            ;	even
0003016A                            Map_Sonic:
0003016A                            	include "_maps\Sonic.asm"
0003016A                            ; --------------------------------------------------------------------------------
0003016A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0003016A                            ; --------------------------------------------------------------------------------
0003016A                            
0003016A                            SME_KM9WW:	
0003016A 0000 0000                  		dc.w SME_KM9WW_1B4-SME_KM9WW, SME_KM9WW_1B5-SME_KM9WW	
0003016E 0000 0000                  		dc.w SME_KM9WW_1C5-SME_KM9WW, SME_KM9WW_1D5-SME_KM9WW	
00030172 0000 0000                  		dc.w SME_KM9WW_1E5-SME_KM9WW, SME_KM9WW_1F0-SME_KM9WW	
00030176 0000 0000                  		dc.w SME_KM9WW_200-SME_KM9WW, SME_KM9WW_210-SME_KM9WW	
0003017A 0000 0000                  		dc.w SME_KM9WW_220-SME_KM9WW, SME_KM9WW_22B-SME_KM9WW	
0003017E 0000 0000                  		dc.w SME_KM9WW_240-SME_KM9WW, SME_KM9WW_255-SME_KM9WW	
00030182 0000 0000                  		dc.w SME_KM9WW_26A-SME_KM9WW, SME_KM9WW_27F-SME_KM9WW	
00030186 0000 0000                  		dc.w SME_KM9WW_294-SME_KM9WW, SME_KM9WW_2A9-SME_KM9WW	
0003018A 0000 0000                  		dc.w SME_KM9WW_2BE-SME_KM9WW, SME_KM9WW_2D3-SME_KM9WW	
0003018E 0000 0000                  		dc.w SME_KM9WW_2E3-SME_KM9WW, SME_KM9WW_2F3-SME_KM9WW	
00030192 0000 0000                  		dc.w SME_KM9WW_303-SME_KM9WW, SME_KM9WW_30E-SME_KM9WW	
00030196 0000 0000                  		dc.w SME_KM9WW_31E-SME_KM9WW, SME_KM9WW_333-SME_KM9WW	
0003019A 0000 0000                  		dc.w SME_KM9WW_343-SME_KM9WW, SME_KM9WW_34E-SME_KM9WW	
0003019E 0000 0000                  		dc.w SME_KM9WW_363-SME_KM9WW, SME_KM9WW_378-SME_KM9WW	
000301A2 0000 0000                  		dc.w SME_KM9WW_38D-SME_KM9WW, SME_KM9WW_3A2-SME_KM9WW	
000301A6 0000 0000                  		dc.w SME_KM9WW_3B7-SME_KM9WW, SME_KM9WW_3CC-SME_KM9WW	
000301AA 0000 0000                  		dc.w SME_KM9WW_3E1-SME_KM9WW, SME_KM9WW_3F6-SME_KM9WW	
000301AE 0000 0000                  		dc.w SME_KM9WW_401-SME_KM9WW, SME_KM9WW_40C-SME_KM9WW	
000301B2 0000 0000                  		dc.w SME_KM9WW_417-SME_KM9WW, SME_KM9WW_422-SME_KM9WW	
000301B6 0000 0000                  		dc.w SME_KM9WW_437-SME_KM9WW, SME_KM9WW_442-SME_KM9WW	
000301BA 0000 0000                  		dc.w SME_KM9WW_457-SME_KM9WW, SME_KM9WW_462-SME_KM9WW	
000301BE 0000 0000                  		dc.w SME_KM9WW_46D-SME_KM9WW, SME_KM9WW_478-SME_KM9WW	
000301C2 0000 0000                  		dc.w SME_KM9WW_483-SME_KM9WW, SME_KM9WW_48E-SME_KM9WW	
000301C6 0000 0000                  		dc.w SME_KM9WW_49E-SME_KM9WW, SME_KM9WW_4A9-SME_KM9WW	
000301CA 0000 0000                  		dc.w SME_KM9WW_4B9-SME_KM9WW, SME_KM9WW_4C4-SME_KM9WW	
000301CE 0000 0000                  		dc.w SME_KM9WW_4D4-SME_KM9WW, SME_KM9WW_4E9-SME_KM9WW	
000301D2 0000 0000                  		dc.w SME_KM9WW_4FE-SME_KM9WW, SME_KM9WW_513-SME_KM9WW	
000301D6 0000 0000                  		dc.w SME_KM9WW_528-SME_KM9WW, SME_KM9WW_538-SME_KM9WW	
000301DA 0000 0000                  		dc.w SME_KM9WW_543-SME_KM9WW, SME_KM9WW_54E-SME_KM9WW	
000301DE 0000 0000                  		dc.w SME_KM9WW_55E-SME_KM9WW, SME_KM9WW_573-SME_KM9WW	
000301E2 0000 0000                  		dc.w SME_KM9WW_57E-SME_KM9WW, SME_KM9WW_589-SME_KM9WW	
000301E6 0000 0000                  		dc.w SME_KM9WW_599-SME_KM9WW, SME_KM9WW_59F-SME_KM9WW	
000301EA 0000 0000                  		dc.w SME_KM9WW_5AF-SME_KM9WW, SME_KM9WW_5C4-SME_KM9WW	
000301EE 0000 0000                  		dc.w SME_KM9WW_5D9-SME_KM9WW, SME_KM9WW_5EE-SME_KM9WW	
000301F2 0000 0000                  		dc.w SME_KM9WW_5F9-SME_KM9WW, SME_KM9WW_5FF-SME_KM9WW	
000301F6 0000 0000                  		dc.w SME_KM9WW_60A-SME_KM9WW, SME_KM9WW_610-SME_KM9WW	
000301FA 0000 0000                  		dc.w SME_KM9WW_61B-SME_KM9WW, SME_KM9WW_62B-SME_KM9WW	
000301FE 0000 0000                  		dc.w SME_KM9WW_640-SME_KM9WW, SME_KM9WW_655-SME_KM9WW	
00030202 0000 0000                  		dc.w SME_KM9WW_665-SME_KM9WW, SME_KM9WW_675-SME_KM9WW	
00030206 0000 0000                  		dc.w SME_KM9WW_685-SME_KM9WW, SME_KM9WW_68B-SME_KM9WW	
0003020A 0000 0000                  		dc.w SME_KM9WW_6A0-SME_KM9WW, SME_KM9WW_6B5-SME_KM9WW	
0003020E 0000 0000                  		dc.w SME_KM9WW_6C0-SME_KM9WW, SME_KM9WW_6D0-SME_KM9WW	
00030212 0000 0000                  		dc.w SME_KM9WW_6E0-SME_KM9WW, SME_KM9WW_6EB-SME_KM9WW	
00030216 0000 0000                  		dc.w SME_KM9WW_700-SME_KM9WW, SME_KM9WW_710-SME_KM9WW	
0003021A 0000 0000                  		dc.w SME_KM9WW_71B-SME_KM9WW, SME_KM9WW_726-SME_KM9WW	
0003021E 0000 0000                  		dc.w SME_KM9WW_73B-SME_KM9WW, SME_KM9WW_74B-SME_KM9WW	
00030222 0000 0000                  		dc.w SME_KM9WW_756-SME_KM9WW, SME_KM9WW_766-SME_KM9WW	
00030226 0000 0000                  		dc.w SME_KM9WW_76C-SME_KM9WW, SME_KM9WW_777-SME_KM9WW	
0003022A 0000 0000                  		dc.w SME_KM9WW_787-SME_KM9WW, SME_KM9WW_78D-SME_KM9WW	
0003022E 0000 0000                  		dc.w SME_KM9WW_798-SME_KM9WW, SME_KM9WW_7A3-SME_KM9WW	
00030232 0000 0000                  		dc.w SME_KM9WW_7B3-SME_KM9WW, SME_KM9WW_7B9-SME_KM9WW	
00030236 0000 0000                  		dc.w SME_KM9WW_7C4-SME_KM9WW, SME_KM9WW_7D4-SME_KM9WW	
0003023A 0000 0000                  		dc.w SME_KM9WW_7DA-SME_KM9WW, SME_KM9WW_7E5-SME_KM9WW	
0003023E 0000 0000                  		dc.w SME_KM9WW_7F0-SME_KM9WW, SME_KM9WW_805-SME_KM9WW	
00030242 0000 0000                  		dc.w SME_KM9WW_815-SME_KM9WW, SME_KM9WW_825-SME_KM9WW	
00030246 0000 0000                  		dc.w SME_KM9WW_830-SME_KM9WW, SME_KM9WW_840-SME_KM9WW	
0003024A 0000 0000                  		dc.w SME_KM9WW_850-SME_KM9WW, SME_KM9WW_860-SME_KM9WW	
0003024E 0000 0000                  		dc.w SME_KM9WW_86B-SME_KM9WW, SME_KM9WW_880-SME_KM9WW	
00030252 0000 0000                  		dc.w SME_KM9WW_890-SME_KM9WW, SME_KM9WW_8A0-SME_KM9WW	
00030256 0000 0000                  		dc.w SME_KM9WW_8AB-SME_KM9WW, SME_KM9WW_8BB-SME_KM9WW	
0003025A 0000 0000                  		dc.w SME_KM9WW_8C1-SME_KM9WW, SME_KM9WW_8D6-SME_KM9WW	
0003025E 0000 0000                  		dc.w SME_KM9WW_8EB-SME_KM9WW, SME_KM9WW_8FB-SME_KM9WW	
00030262 0000 0000                  		dc.w SME_KM9WW_910-SME_KM9WW, SME_KM9WW_925-SME_KM9WW	
00030266 0000 0000                  		dc.w SME_KM9WW_93A-SME_KM9WW, SME_KM9WW_94A-SME_KM9WW	
0003026A 0000 0000                  		dc.w SME_KM9WW_95F-SME_KM9WW, SME_KM9WW_974-SME_KM9WW	
0003026E 0000 0000                  		dc.w SME_KM9WW_989-SME_KM9WW, SME_KM9WW_999-SME_KM9WW	
00030272 0000 0000                  		dc.w SME_KM9WW_9AE-SME_KM9WW, SME_KM9WW_9BE-SME_KM9WW	
00030276 0000 0000                  		dc.w SME_KM9WW_9C9-SME_KM9WW, SME_KM9WW_9D9-SME_KM9WW	
0003027A 0000 0000                  		dc.w SME_KM9WW_9E4-SME_KM9WW, SME_KM9WW_9EF-SME_KM9WW	
0003027E 0000 0000                  		dc.w SME_KM9WW_9FA-SME_KM9WW, SME_KM9WW_A05-SME_KM9WW	
00030282 0000 0000                  		dc.w SME_KM9WW_A10-SME_KM9WW, SME_KM9WW_A20-SME_KM9WW	
00030286 0000 0000                  		dc.w SME_KM9WW_A30-SME_KM9WW, SME_KM9WW_A3B-SME_KM9WW	
0003028A 0000 0000                  		dc.w SME_KM9WW_A4B-SME_KM9WW, SME_KM9WW_A60-SME_KM9WW	
0003028E 0000 0000                  		dc.w SME_KM9WW_A75-SME_KM9WW, SME_KM9WW_A8A-SME_KM9WW	
00030292 0000 0000                  		dc.w SME_KM9WW_A95-SME_KM9WW, SME_KM9WW_AAF-SME_KM9WW	
00030296 0000 0000                  		dc.w SME_KM9WW_AC9-SME_KM9WW, SME_KM9WW_ACF-SME_KM9WW	
0003029A 0000 0000                  		dc.w SME_KM9WW_AD5-SME_KM9WW, SME_KM9WW_ADB-SME_KM9WW	
0003029E 0000 0000                  		dc.w SME_KM9WW_AE1-SME_KM9WW, SME_KM9WW_AE7-SME_KM9WW	
000302A2 0000 0000                  		dc.w SME_KM9WW_AF2-SME_KM9WW, SME_KM9WW_AFD-SME_KM9WW	
000302A6 0000 0000                  		dc.w SME_KM9WW_B12-SME_KM9WW, SME_KM9WW_B27-SME_KM9WW	
000302AA 0000 0000                  		dc.w SME_KM9WW_B3C-SME_KM9WW, SME_KM9WW_B4C-SME_KM9WW	
000302AE 0000 0000                  		dc.w SME_KM9WW_B5C-SME_KM9WW, SME_KM9WW_B71-SME_KM9WW	
000302B2 0000 0000                  		dc.w SME_KM9WW_B81-SME_KM9WW, SME_KM9WW_B96-SME_KM9WW	
000302B6 0000 0000                  		dc.w SME_KM9WW_BA6-SME_KM9WW, SME_KM9WW_BBB-SME_KM9WW	
000302BA 0000 0000                  		dc.w SME_KM9WW_BCB-SME_KM9WW, SME_KM9WW_BDB-SME_KM9WW	
000302BE 0000 0000                  		dc.w SME_KM9WW_BEB-SME_KM9WW, SME_KM9WW_BFB-SME_KM9WW	
000302C2 0000 0000                  		dc.w SME_KM9WW_C0B-SME_KM9WW, SME_KM9WW_C20-SME_KM9WW	
000302C6 0000 0000                  		dc.w SME_KM9WW_C35-SME_KM9WW, SME_KM9WW_C4A-SME_KM9WW	
000302CA 0000 0000                  		dc.w SME_KM9WW_C5F-SME_KM9WW, SME_KM9WW_C6A-SME_KM9WW	
000302CE 0000 0000                  		dc.w SME_KM9WW_C7A-SME_KM9WW, SME_KM9WW_C8A-SME_KM9WW	
000302D2 0000 0000                  		dc.w SME_KM9WW_C9A-SME_KM9WW, SME_KM9WW_CAA-SME_KM9WW	
000302D6 0000 0000                  		dc.w SME_KM9WW_CBA-SME_KM9WW, SME_KM9WW_CCA-SME_KM9WW	
000302DA 0000 0000                  		dc.w SME_KM9WW_CDA-SME_KM9WW, SME_KM9WW_CEA-SME_KM9WW	
000302DE 0000 0000                  		dc.w SME_KM9WW_CFA-SME_KM9WW, SME_KM9WW_D0F-SME_KM9WW	
000302E2 0000 0000                  		dc.w SME_KM9WW_D1F-SME_KM9WW, SME_KM9WW_D34-SME_KM9WW	
000302E6 0000 0000                  		dc.w SME_KM9WW_D49-SME_KM9WW, SME_KM9WW_D5E-SME_KM9WW	
000302EA 0000 0000                  		dc.w SME_KM9WW_D73-SME_KM9WW, SME_KM9WW_D88-SME_KM9WW	
000302EE 0000 0000                  		dc.w SME_KM9WW_D93-SME_KM9WW, SME_KM9WW_DA8-SME_KM9WW	
000302F2 0000 0000                  		dc.w SME_KM9WW_DBD-SME_KM9WW, SME_KM9WW_DD2-SME_KM9WW	
000302F6 0000 0000                  		dc.w SME_KM9WW_DE2-SME_KM9WW, SME_KM9WW_DF7-SME_KM9WW	
000302FA 0000 0000                  		dc.w SME_KM9WW_E0C-SME_KM9WW, SME_KM9WW_E1C-SME_KM9WW	
000302FE 0000 0000                  		dc.w SME_KM9WW_E2C-SME_KM9WW, SME_KM9WW_E37-SME_KM9WW	
00030302 0000 0000                  		dc.w SME_KM9WW_E47-SME_KM9WW, SME_KM9WW_E57-SME_KM9WW	
00030306 0000 0000                  		dc.w SME_KM9WW_E62-SME_KM9WW, SME_KM9WW_E6D-SME_KM9WW	
0003030A 0000 0000                  		dc.w SME_KM9WW_E78-SME_KM9WW, SME_KM9WW_E88-SME_KM9WW	
0003030E 0000 0000                  		dc.w SME_KM9WW_E98-SME_KM9WW, SME_KM9WW_E9E-SME_KM9WW	
00030312 0000 0000                  		dc.w SME_KM9WW_EAE-SME_KM9WW, SME_KM9WW_EB9-SME_KM9WW	
00030316 0000 0000                  		dc.w SME_KM9WW_EC9-SME_KM9WW, SME_KM9WW_ED9-SME_KM9WW	
0003031A 0000 0000                  		dc.w SME_KM9WW_EE9-SME_KM9WW, SME_KM9WW_EF9-SME_KM9WW	
0003031E 00                         SME_KM9WW_1B4:	dc.b 0	
0003031F 03                         SME_KM9WW_1B5:	dc.b 3	
00030320 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	
00030325 FC06 0008 04               		dc.b $FC, 6, 0, 8, 4	
0003032A FC0A 000E EC               		dc.b $FC, $A, 0, $E, $EC	
0003032F 03                         SME_KM9WW_1C5:	dc.b 3	
00030330 FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
00030335 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
0003033A ED0D 000E EC               		dc.b $ED, $D, 0, $E, $EC	
0003033F 03                         SME_KM9WW_1D5:	dc.b 3	
00030340 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
00030345 F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
0003034A EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0003034F 02                         SME_KM9WW_1E5:	dc.b 2	
00030350 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030355 EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
0003035A 03                         SME_KM9WW_1F0:	dc.b 3	
0003035B FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030360 FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
00030365 EC09 000E F4               		dc.b $EC, 9, 0, $E, $F4	
0003036A 03                         SME_KM9WW_200:	dc.b 3	
0003036B FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
00030370 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
00030375 ED09 000E F4               		dc.b $ED, 9, 0, $E, $F4	
0003037A 03                         SME_KM9WW_210:	dc.b 3	
0003037B FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
00030380 F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
00030385 EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0003038A 02                         SME_KM9WW_220:	dc.b 2	
0003038B FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
00030390 EC0D 0009 EC               		dc.b $EC, $D, 0, 9, $EC	
00030395 04                         SME_KM9WW_22B:	dc.b 4	
00030396 FD0B 0000 FB               		dc.b $FD, $B, 0, 0, $FB	
0003039B ED0D 000C EB               		dc.b $ED, $D, 0, $C, $EB	
000303A0 F500 0014 0B               		dc.b $F5, 0, 0, $14, $B	
000303A5 FD05 0015 EB               		dc.b $FD, 5, 0, $15, $EB	
000303AA 04                         SME_KM9WW_240:	dc.b 4	
000303AB 020E 0000 FC               		dc.b 2, $E, 0, 0, $FC	
000303B0 F20D 000C EC               		dc.b $F2, $D, 0, $C, $EC	
000303B5 FA04 0014 0C               		dc.b $FA, 4, 0, $14, $C	
000303BA 0204 0016 EC               		dc.b 2, 4, 0, $16, $EC	
000303BF 04                         SME_KM9WW_255:	dc.b 4	
000303C0 FB0A 0000 FD               		dc.b $FB, $A, 0, 0, $FD	
000303C5 EB04 0009 F5               		dc.b $EB, 4, 0, 9, $F5	
000303CA F30C 000B ED               		dc.b $F3, $C, 0, $B, $ED	
000303CF FB05 000F ED               		dc.b $FB, 5, 0, $F, $ED	
000303D4 04                         SME_KM9WW_26A:	dc.b 4	
000303D5 FD0E 0000 FC               		dc.b $FD, $E, 0, 0, $FC	
000303DA ED0D 000C EC               		dc.b $ED, $D, 0, $C, $EC	
000303DF FD04 0014 EC               		dc.b $FD, 4, 0, $14, $EC	
000303E4 0500 0016 F4               		dc.b 5, 0, 0, $16, $F4	
000303E9 04                         SME_KM9WW_27F:	dc.b 4	
000303EA FE0B 0000 FC               		dc.b $FE, $B, 0, 0, $FC	
000303EF EE0D 000C EC               		dc.b $EE, $D, 0, $C, $EC	
000303F4 EE01 0014 0C               		dc.b $EE, 1, 0, $14, $C	
000303F9 FE06 0016 EC               		dc.b $FE, 6, 0, $16, $EC	
000303FE 04                         SME_KM9WW_294:	dc.b 4	
000303FF FC0F 0000 FB               		dc.b $FC, $F, 0, 0, $FB	
00030404 EC09 0010 EB               		dc.b $EC, 9, 0, $10, $EB	
00030409 F408 0016 03               		dc.b $F4, 8, 0, $16, 3	
0003040E FC05 0019 EB               		dc.b $FC, 5, 0, $19, $EB	
00030413 04                         SME_KM9WW_2A9:	dc.b 4	
00030414 FF0A 0000 FA               		dc.b $FF, $A, 0, 0, $FA	
00030419 EF0D 0009 EA               		dc.b $EF, $D, 0, 9, $EA	
0003041E FF04 0011 EA               		dc.b $FF, 4, 0, $11, $EA	
00030423 0700 0013 F2               		dc.b 7, 0, 0, $13, $F2	
00030428 04                         SME_KM9WW_2BE:	dc.b 4	
00030429 FE0A 0000 FC               		dc.b $FE, $A, 0, 0, $FC	
0003042E EE08 0009 EC               		dc.b $EE, 8, 0, 9, $EC	
00030433 F60C 000C EC               		dc.b $F6, $C, 0, $C, $EC	
00030438 FE05 0010 EC               		dc.b $FE, 5, 0, $10, $EC	
0003043D 03                         SME_KM9WW_2D3:	dc.b 3	
0003043E ED09 0000 FC               		dc.b $ED, 9, 0, 0, $FC	
00030443 FD0A 0006 FC               		dc.b $FD, $A, 0, 6, $FC	
00030448 F507 000F EC               		dc.b $F5, 7, 0, $F, $EC	
0003044D 03                         SME_KM9WW_2E3:	dc.b 3	
0003044E F50B 0000 FC               		dc.b $F5, $B, 0, 0, $FC	
00030453 ED04 000C 04               		dc.b $ED, 4, 0, $C, 4	
00030458 F507 000E EC               		dc.b $F5, 7, 0, $E, $EC	
0003045D 03                         SME_KM9WW_2F3:	dc.b 3	
0003045E F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
00030463 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
00030468 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
0003046D 02                         SME_KM9WW_303:	dc.b 2	
0003046E F30B 0000 FC               		dc.b $F3, $B, 0, 0, $FC	
00030473 F307 000C EC               		dc.b $F3, 7, 0, $C, $EC	
00030478 03                         SME_KM9WW_30E:	dc.b 3	
00030479 EB04 0000 FC               		dc.b $EB, 4, 0, 0, $FC	
0003047E F30B 0002 FC               		dc.b $F3, $B, 0, 2, $FC	
00030483 F307 000E EC               		dc.b $F3, 7, 0, $E, $EC	
00030488 04                         SME_KM9WW_31E:	dc.b 4	
00030489 EC04 0000 04               		dc.b $EC, 4, 0, 0, 4	
0003048E F40B 0002 FC               		dc.b $F4, $B, 0, 2, $FC	
00030493 F406 000E EC               		dc.b $F4, 6, 0, $E, $EC	
00030498 0C00 0014 F4               		dc.b $C, 0, 0, $14, $F4	
0003049D 03                         SME_KM9WW_333:	dc.b 3	
0003049E F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
000304A3 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
000304A8 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
000304AD 02                         SME_KM9WW_343:	dc.b 2	
000304AE F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
000304B3 F507 0009 EC               		dc.b $F5, 7, 0, 9, $EC	
000304B8 04                         SME_KM9WW_34E:	dc.b 4	
000304B9 EF0E 0000 FE               		dc.b $EF, $E, 0, 0, $FE	
000304BE EF06 000C EE               		dc.b $EF, 6, 0, $C, $EE	
000304C3 070C 0012 EE               		dc.b 7, $C, 0, $12, $EE	
000304C8 0F08 0016 EE               		dc.b $F, 8, 0, $16, $EE	
000304CD 04                         SME_KM9WW_363:	dc.b 4	
000304CE E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
000304D3 E701 000C F8               		dc.b $E7, 1, 0, $C, $F8	
000304D8 F705 000E F0               		dc.b $F7, 5, 0, $E, $F0	
000304DD 0709 0012 F0               		dc.b 7, 9, 0, $12, $F0	
000304E2 04                         SME_KM9WW_378:	dc.b 4	
000304E3 EF0A 0000 FD               		dc.b $EF, $A, 0, 0, $FD	
000304E8 F705 0009 ED               		dc.b $F7, 5, 0, 9, $ED	
000304ED 070C 000D ED               		dc.b 7, $C, 0, $D, $ED	
000304F2 0F04 0011 F5               		dc.b $F, 4, 0, $11, $F5	
000304F7 04                         SME_KM9WW_38D:	dc.b 4	
000304F8 E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
000304FD F705 000C F0               		dc.b $F7, 5, 0, $C, $F0	
00030502 070C 0010 F0               		dc.b 7, $C, 0, $10, $F0	
00030507 0F08 0014 F0               		dc.b $F, 8, 0, $14, $F0	
0003050C 04                         SME_KM9WW_3A2:	dc.b 4	
0003050D EE0E 0000 FF               		dc.b $EE, $E, 0, 0, $FF	
00030512 EE06 000C EF               		dc.b $EE, 6, 0, $C, $EF	
00030517 060D 0012 EF               		dc.b 6, $D, 0, $12, $EF	
0003051C 0600 001A 0F               		dc.b 6, 0, 0, $1A, $F	
00030521 04                         SME_KM9WW_3B7:	dc.b 4	
00030522 E80F 0000 FF               		dc.b $E8, $F, 0, 0, $FF	
00030527 E802 0010 F7               		dc.b $E8, 2, 0, $10, $F7	
0003052C 0004 0013 EF               		dc.b 0, 4, 0, $13, $EF	
00030531 080D 0015 EF               		dc.b 8, $D, 0, $15, $EF	
00030536 04                         SME_KM9WW_3CC:	dc.b 4	
00030537 EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
0003053C F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
00030541 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
00030546 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
0003054B 04                         SME_KM9WW_3E1:	dc.b 4	
0003054C EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
00030551 F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
00030556 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
0003055B 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
00030560 02                         SME_KM9WW_3F6:	dc.b 2	
00030561 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030566 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0003056B 02                         SME_KM9WW_401:	dc.b 2	
0003056C EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030571 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030576 02                         SME_KM9WW_40C:	dc.b 2	
00030577 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0003057C F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030581 02                         SME_KM9WW_417:	dc.b 2	
00030582 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030587 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0003058C 04                         SME_KM9WW_422:	dc.b 4	
0003058D EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
00030592 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
00030597 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
0003059C 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
000305A1 02                         SME_KM9WW_437:	dc.b 2	
000305A2 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
000305A7 F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
000305AC 04                         SME_KM9WW_442:	dc.b 4	
000305AD EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
000305B2 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
000305B7 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
000305BC 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
000305C1 02                         SME_KM9WW_457:	dc.b 2	
000305C2 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
000305C7 F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
000305CC 02                         SME_KM9WW_462:	dc.b 2	
000305CD F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
000305D2 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
000305D7 02                         SME_KM9WW_46D:	dc.b 2	
000305D8 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
000305DD F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
000305E2 02                         SME_KM9WW_478:	dc.b 2	
000305E3 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
000305E8 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
000305ED 02                         SME_KM9WW_483:	dc.b 2	
000305EE F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
000305F3 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
000305F8 03                         SME_KM9WW_48E:	dc.b 3	
000305F9 EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
000305FE F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
00030603 F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
00030608 02                         SME_KM9WW_49E:	dc.b 2	
00030609 F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
0003060E EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
00030613 03                         SME_KM9WW_4A9:	dc.b 3	
00030614 EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
00030619 F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
0003061E F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
00030623 02                         SME_KM9WW_4B9:	dc.b 2	
00030624 F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
00030629 EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
0003062E 03                         SME_KM9WW_4C4:	dc.b 3	
0003062F EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
00030634 F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
00030639 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
0003063E 04                         SME_KM9WW_4D4:	dc.b 4	
0003063F EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
00030644 FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
00030649 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
0003064E 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
00030653 04                         SME_KM9WW_4E9:	dc.b 4	
00030654 F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
00030659 F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
0003065E 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
00030663 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
00030668 04                         SME_KM9WW_4FE:	dc.b 4	
00030669 EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
0003066E F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
00030673 FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
00030678 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
0003067D 04                         SME_KM9WW_513:	dc.b 4	
0003067E EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
00030683 F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
00030688 FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
0003068D 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
00030692 03                         SME_KM9WW_528:	dc.b 3	
00030693 EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
00030698 F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
0003069D 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
000306A2 02                         SME_KM9WW_538:	dc.b 2	
000306A3 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
000306A8 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
000306AD 02                         SME_KM9WW_543:	dc.b 2	
000306AE EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
000306B3 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
000306B8 03                         SME_KM9WW_54E:	dc.b 3	
000306B9 EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
000306BE F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
000306C3 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
000306C8 04                         SME_KM9WW_55E:	dc.b 4	
000306C9 F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
000306CE F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
000306D3 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
000306D8 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
000306DD 02                         SME_KM9WW_573:	dc.b 2	
000306DE EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
000306E3 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
000306E8 02                         SME_KM9WW_57E:	dc.b 2	
000306E9 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
000306EE 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
000306F3 03                         SME_KM9WW_589:	dc.b 3	
000306F4 E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
000306F9 EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
000306FE 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
00030703 01                         SME_KM9WW_599:	dc.b 1	
00030704 F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
00030709 03                         SME_KM9WW_59F:	dc.b 3	
0003070A F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
0003070F F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
00030714 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
00030719 04                         SME_KM9WW_5AF:	dc.b 4	
0003071A F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
0003071F FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
00030724 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
00030729 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
0003072E 04                         SME_KM9WW_5C4:	dc.b 4	
0003072F EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
00030734 FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
00030739 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
0003073E 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
00030743 04                         SME_KM9WW_5D9:	dc.b 4	
00030744 EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
00030749 FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
0003074E 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
00030753 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
00030758 02                         SME_KM9WW_5EE:	dc.b 2	
00030759 EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
0003075E 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
00030763 01                         SME_KM9WW_5F9:	dc.b 1	
00030764 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00030769 02                         SME_KM9WW_5FF:	dc.b 2	
0003076A F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
0003076F 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
00030774 01                         SME_KM9WW_60A:	dc.b 1	
00030775 F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
0003077A 02                         SME_KM9WW_610:	dc.b 2	
0003077B EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
00030780 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
00030785 03                         SME_KM9WW_61B:	dc.b 3	
00030786 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0003078B F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030790 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
00030795 04                         SME_KM9WW_62B:	dc.b 4	
00030796 E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
0003079B F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
000307A0 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
000307A5 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
000307AA 04                         SME_KM9WW_640:	dc.b 4	
000307AB EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
000307B0 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
000307B5 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
000307BA 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
000307BF 03                         SME_KM9WW_655:	dc.b 3	
000307C0 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
000307C5 FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
000307CA 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
000307CF 03                         SME_KM9WW_665:	dc.b 3	
000307D0 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
000307D5 F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
000307DA 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
000307DF 03                         SME_KM9WW_675:	dc.b 3	
000307E0 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
000307E5 F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
000307EA 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
000307EF 01                         SME_KM9WW_685:	dc.b 1	
000307F0 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
000307F5 04                         SME_KM9WW_68B:	dc.b 4	
000307F6 EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
000307FB F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
00030800 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
00030805 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
0003080A 04                         SME_KM9WW_6A0:	dc.b 4	
0003080B EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
00030810 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
00030815 FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
0003081A FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
0003081F 02                         SME_KM9WW_6B5:	dc.b 2	
00030820 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
00030825 F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
0003082A 03                         SME_KM9WW_6C0:	dc.b 3	
0003082B EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
00030830 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
00030835 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
0003083A 03                         SME_KM9WW_6D0:	dc.b 3	
0003083B ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
00030840 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
00030845 FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
0003084A 02                         SME_KM9WW_6E0:	dc.b 2	
0003084B F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
00030850 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
00030855 04                         SME_KM9WW_6EB:	dc.b 4	
00030856 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0003085B F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030860 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00030865 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
0003086A 03                         SME_KM9WW_700:	dc.b 3	
0003086B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030870 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030875 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
0003087A 02                         SME_KM9WW_710:	dc.b 2	
0003087B EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00030880 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
00030885 02                         SME_KM9WW_71B:	dc.b 2	
00030886 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
0003088B 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00030890 04                         SME_KM9WW_726:	dc.b 4	
00030891 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
00030896 F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
0003089B FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
000308A0 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
000308A5 03                         SME_KM9WW_73B:	dc.b 3	
000308A6 EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
000308AB 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
000308B0 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
000308B5 02                         SME_KM9WW_74B:	dc.b 2	
000308B6 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
000308BB 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
000308C0 03                         SME_KM9WW_756:	dc.b 3	
000308C1 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
000308C6 F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
000308CB 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
000308D0 01                         SME_KM9WW_766:	dc.b 1	
000308D1 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
000308D6 02                         SME_KM9WW_76C:	dc.b 2	
000308D7 F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
000308DC F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
000308E1 03                         SME_KM9WW_777:	dc.b 3	
000308E2 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
000308E7 F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
000308EC 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
000308F1 01                         SME_KM9WW_787:	dc.b 1	
000308F2 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
000308F7 02                         SME_KM9WW_78D:	dc.b 2	
000308F8 FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
000308FD F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
00030902 02                         SME_KM9WW_798:	dc.b 2	
00030903 F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
00030908 F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
0003090D 03                         SME_KM9WW_7A3:	dc.b 3	
0003090E E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
00030913 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
00030918 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
0003091D 01                         SME_KM9WW_7B3:	dc.b 1	
0003091E F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
00030923 02                         SME_KM9WW_7B9:	dc.b 2	
00030924 EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
00030929 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
0003092E 03                         SME_KM9WW_7C4:	dc.b 3	
0003092F E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
00030934 F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
00030939 F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
0003093E 01                         SME_KM9WW_7D4:	dc.b 1	
0003093F F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
00030944 02                         SME_KM9WW_7DA:	dc.b 2	
00030945 E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
0003094A F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
0003094F 02                         SME_KM9WW_7E5:	dc.b 2	
00030950 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00030955 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0003095A 04                         SME_KM9WW_7F0:	dc.b 4	
0003095B EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
00030960 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
00030965 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0003096A 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
0003096F 03                         SME_KM9WW_805:	dc.b 3	
00030970 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
00030975 F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
0003097A 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
0003097F 03                         SME_KM9WW_815:	dc.b 3	
00030980 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00030985 F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
0003098A 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
0003098F 02                         SME_KM9WW_825:	dc.b 2	
00030990 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
00030995 F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
0003099A 03                         SME_KM9WW_830:	dc.b 3	
0003099B F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
000309A0 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
000309A5 F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
000309AA 03                         SME_KM9WW_840:	dc.b 3	
000309AB F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
000309B0 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
000309B5 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
000309BA 03                         SME_KM9WW_850:	dc.b 3	
000309BB F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
000309C0 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
000309C5 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
000309CA 02                         SME_KM9WW_860:	dc.b 2	
000309CB F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
000309D0 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
000309D5 04                         SME_KM9WW_86B:	dc.b 4	
000309D6 F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
000309DB F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
000309E0 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
000309E5 F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
000309EA 03                         SME_KM9WW_880:	dc.b 3	
000309EB F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
000309F0 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
000309F5 F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
000309FA 03                         SME_KM9WW_890:	dc.b 3	
000309FB F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00030A00 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
00030A05 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
00030A0A 02                         SME_KM9WW_8A0:	dc.b 2	
00030A0B F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
00030A10 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
00030A15 03                         SME_KM9WW_8AB:	dc.b 3	
00030A16 F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
00030A1B F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
00030A20 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
00030A25 01                         SME_KM9WW_8BB:	dc.b 1	
00030A26 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
00030A2B 04                         SME_KM9WW_8C1:	dc.b 4	
00030A2C E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
00030A31 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
00030A36 F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
00030A3B 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
00030A40 04                         SME_KM9WW_8D6:	dc.b 4	
00030A41 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
00030A46 EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
00030A4B F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
00030A50 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
00030A55 03                         SME_KM9WW_8EB:	dc.b 3	
00030A56 F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
00030A5B F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
00030A60 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
00030A65 04                         SME_KM9WW_8FB:	dc.b 4	
00030A66 EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
00030A6B F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
00030A70 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
00030A75 FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
00030A7A 04                         SME_KM9WW_910:	dc.b 4	
00030A7B 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
00030A80 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
00030A85 FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
00030A8A EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
00030A8F 04                         SME_KM9WW_925:	dc.b 4	
00030A90 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
00030A95 FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
00030A9A F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
00030A9F F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
00030AA4 03                         SME_KM9WW_93A:	dc.b 3	
00030AA5 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
00030AAA EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
00030AAF F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
00030AB4 04                         SME_KM9WW_94A:	dc.b 4	
00030AB5 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
00030ABA 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
00030ABF EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
00030AC4 E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
00030AC9 04                         SME_KM9WW_95F:	dc.b 4	
00030ACA E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00030ACF E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
00030AD4 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
00030AD9 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
00030ADE 04                         SME_KM9WW_974:	dc.b 4	
00030ADF E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
00030AE4 F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
00030AE9 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
00030AEE 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
00030AF3 03                         SME_KM9WW_989:	dc.b 3	
00030AF4 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
00030AF9 F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
00030AFE F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
00030B03 04                         SME_KM9WW_999:	dc.b 4	
00030B04 E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
00030B09 E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
00030B0E F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
00030B13 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
00030B18 03                         SME_KM9WW_9AE:	dc.b 3	
00030B19 E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
00030B1E 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
00030B23 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
00030B28 02                         SME_KM9WW_9BE:	dc.b 2	
00030B29 E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00030B2E 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
00030B33 03                         SME_KM9WW_9C9:	dc.b 3	
00030B34 F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
00030B39 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
00030B3E 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
00030B43 02                         SME_KM9WW_9D9:	dc.b 2	
00030B44 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030B49 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030B4E 02                         SME_KM9WW_9E4:	dc.b 2	
00030B4F F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030B54 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030B59 02                         SME_KM9WW_9EF:	dc.b 2	
00030B5A F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030B5F 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030B64 02                         SME_KM9WW_9FA:	dc.b 2	
00030B65 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030B6A 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030B6F 02                         SME_KM9WW_A05:	dc.b 2	
00030B70 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030B75 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030B7A 03                         SME_KM9WW_A10:	dc.b 3	
00030B7B F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00030B80 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
00030B85 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
00030B8A 03                         SME_KM9WW_A20:	dc.b 3	
00030B8B EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
00030B90 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
00030B95 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
00030B9A 02                         SME_KM9WW_A30:	dc.b 2	
00030B9B E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00030BA0 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
00030BA5 03                         SME_KM9WW_A3B:	dc.b 3	
00030BA6 F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
00030BAB F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
00030BB0 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
00030BB5 04                         SME_KM9WW_A4B:	dc.b 4	
00030BB6 E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
00030BBB F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
00030BC0 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
00030BC5 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
00030BCA 04                         SME_KM9WW_A60:	dc.b 4	
00030BCB E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00030BD0 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
00030BD5 FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
00030BDA 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
00030BDF 04                         SME_KM9WW_A75:	dc.b 4	
00030BE0 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00030BE5 F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00030BEA 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
00030BEF 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
00030BF4 02                         SME_KM9WW_A8A:	dc.b 2	
00030BF5 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00030BFA F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00030BFF 05                         SME_KM9WW_A95:	dc.b 5	
00030C00 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
00030C05 E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
00030C0A F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
00030C0F 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
00030C14 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
00030C19 05                         SME_KM9WW_AAF:	dc.b 5	
00030C1A E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
00030C1F E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
00030C24 F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
00030C29 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
00030C2E 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
00030C33 01                         SME_KM9WW_AC9:	dc.b 1	
00030C34 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030C39 01                         SME_KM9WW_ACF:	dc.b 1	
00030C3A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030C3F 01                         SME_KM9WW_AD5:	dc.b 1	
00030C40 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030C45 01                         SME_KM9WW_ADB:	dc.b 1	
00030C46 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030C4B 01                         SME_KM9WW_AE1:	dc.b 1	
00030C4C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030C51 02                         SME_KM9WW_AE7:	dc.b 2	
00030C52 EC00 0000 00               		dc.b $EC, 0, 0, 0, 0	
00030C57 F40B 0001 F8               		dc.b $F4, $B, 0, 1, $F8	
00030C5C 02                         SME_KM9WW_AF2:	dc.b 2	
00030C5D F400 0000 03               		dc.b $F4, 0, 0, 0, 3	
00030C62 FC0E 0001 F3               		dc.b $FC, $E, 0, 1, $F3	
00030C67 04                         SME_KM9WW_AFD:	dc.b 4	
00030C68 EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
00030C6D F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
00030C72 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
00030C77 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
00030C7C 04                         SME_KM9WW_B12:	dc.b 4	
00030C7D EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
00030C82 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
00030C87 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
00030C8C 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
00030C91 04                         SME_KM9WW_B27:	dc.b 4	
00030C92 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
00030C97 F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
00030C9C 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
00030CA1 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
00030CA6 03                         SME_KM9WW_B3C:	dc.b 3	
00030CA7 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030CAC F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
00030CB1 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
00030CB6 03                         SME_KM9WW_B4C:	dc.b 3	
00030CB7 EC0D 0000 EB               		dc.b $EC, $D, 0, 0, $EB	
00030CBC EC00 0008 0B               		dc.b $EC, 0, 0, 8, $B	
00030CC1 FC0A 0009 EB               		dc.b $FC, $A, 0, 9, $EB	
00030CC6 04                         SME_KM9WW_B5C:	dc.b 4	
00030CC7 E500 0000 F4               		dc.b $E5, 0, 0, 0, $F4	
00030CCC ED0E 0001 EC               		dc.b $ED, $E, 0, 1, $EC	
00030CD1 ED00 000D E4               		dc.b $ED, 0, 0, $D, $E4	
00030CD6 0509 000E EC               		dc.b 5, 9, 0, $E, $EC	
00030CDB 03                         SME_KM9WW_B71:	dc.b 3	
00030CDC E400 0000 FB               		dc.b $E4, 0, 0, 0, $FB	
00030CE1 EC0F 0001 EB               		dc.b $EC, $F, 0, 1, $EB	
00030CE6 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
00030CEB 04                         SME_KM9WW_B81:	dc.b 4	
00030CEC EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
00030CF1 F40E 0003 E2               		dc.b $F4, $E, 0, 3, $E2	
00030CF6 F401 000F 02               		dc.b $F4, 1, 0, $F, 2	
00030CFB 0C08 0011 EA               		dc.b $C, 8, 0, $11, $EA	
00030D00 03                         SME_KM9WW_B96:	dc.b 3	
00030D01 EC0F 0000 EB               		dc.b $EC, $F, 0, 0, $EB	
00030D06 0400 0010 E3               		dc.b 4, 0, 0, $10, $E3	
00030D0B 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
00030D10 04                         SME_KM9WW_BA6:	dc.b 4	
00030D11 ED08 0000 F2               		dc.b $ED, 8, 0, 0, $F2	
00030D16 F50E 0003 E2               		dc.b $F5, $E, 0, 3, $E2	
00030D1B F501 000F 02               		dc.b $F5, 1, 0, $F, 2	
00030D20 0D08 0011 EA               		dc.b $D, 8, 0, $11, $EA	
00030D25 03                         SME_KM9WW_BBB:	dc.b 3	
00030D26 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030D2B F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030D30 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00030D35 03                         SME_KM9WW_BCB:	dc.b 3	
00030D36 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030D3B F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030D40 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00030D45 03                         SME_KM9WW_BDB:	dc.b 3	
00030D46 EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
00030D4B F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
00030D50 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
00030D55 03                         SME_KM9WW_BEB:	dc.b 3	
00030D56 F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00030D5B F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00030D60 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
00030D65 03                         SME_KM9WW_BFB:	dc.b 3	
00030D66 F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00030D6B F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00030D70 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
00030D75 04                         SME_KM9WW_C0B:	dc.b 4	
00030D76 EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
00030D7B 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
00030D80 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
00030D85 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
00030D8A 04                         SME_KM9WW_C20:	dc.b 4	
00030D8B EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030D90 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030D95 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00030D9A 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030D9F 04                         SME_KM9WW_C35:	dc.b 4	
00030DA0 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030DA5 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030DAA 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00030DAF 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030DB4 04                         SME_KM9WW_C4A:	dc.b 4	
00030DB5 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030DBA F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00030DBF FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
00030DC4 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
00030DC9 02                         SME_KM9WW_C5F:	dc.b 2	
00030DCA EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00030DCF FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
00030DD4 03                         SME_KM9WW_C6A:	dc.b 3	
00030DD5 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030DDA F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030DDF 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030DE4 03                         SME_KM9WW_C7A:	dc.b 3	
00030DE5 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030DEA F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030DEF 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030DF4 03                         SME_KM9WW_C8A:	dc.b 3	
00030DF5 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030DFA F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00030DFF 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00030E04 03                         SME_KM9WW_C9A:	dc.b 3	
00030E05 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00030E0A 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00030E0F 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00030E14 03                         SME_KM9WW_CAA:	dc.b 3	
00030E15 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00030E1A 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00030E1F 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00030E24 03                         SME_KM9WW_CBA:	dc.b 3	
00030E25 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030E2A F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
00030E2F 0C0C 000B ED               		dc.b $C, $C, 0, $B, $ED	
00030E34 03                         SME_KM9WW_CCA:	dc.b 3	
00030E35 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030E3A F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
00030E3F 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
00030E44 03                         SME_KM9WW_CDA:	dc.b 3	
00030E45 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030E4A F409 0002 F5               		dc.b $F4, 9, 0, 2, $F5	
00030E4F 040D 0008 ED               		dc.b 4, $D, 0, 8, $ED	
00030E54 03                         SME_KM9WW_CEA:	dc.b 3	
00030E55 EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030E5A F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
00030E5F 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
00030E64 04                         SME_KM9WW_CFA:	dc.b 4	
00030E65 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00030E6A EC08 0009 F0               		dc.b $EC, 8, 0, 9, $F0	
00030E6F F40C 000C F0               		dc.b $F4, $C, 0, $C, $F0	
00030E74 FC00 0010 F0               		dc.b $FC, 0, 0, $10, $F0	
00030E79 03                         SME_KM9WW_D0F:	dc.b 3	
00030E7A ED08 0000 EE               		dc.b $ED, 8, 0, 0, $EE	
00030E7F F50D 0003 EE               		dc.b $F5, $D, 0, 3, $EE	
00030E84 0509 000B F6               		dc.b 5, 9, 0, $B, $F6	
00030E89 04                         SME_KM9WW_D1F:	dc.b 4	
00030E8A EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030E8F F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030E94 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030E99 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030E9E 04                         SME_KM9WW_D34:	dc.b 4	
00030E9F EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030EA4 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030EA9 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030EAE 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030EB3 04                         SME_KM9WW_D49:	dc.b 4	
00030EB4 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030EB9 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030EBE 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030EC3 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030EC8 04                         SME_KM9WW_D5E:	dc.b 4	
00030EC9 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030ECE F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030ED3 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030ED8 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030EDD 04                         SME_KM9WW_D73:	dc.b 4	
00030EDE EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030EE3 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030EE8 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030EED 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030EF2 02                         SME_KM9WW_D88:	dc.b 2	
00030EF3 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
00030EF8 0C0C 000C F3               		dc.b $C, $C, 0, $C, $F3	
00030EFD 04                         SME_KM9WW_D93:	dc.b 4	
00030EFE EC08 0000 F3               		dc.b $EC, 8, 0, 0, $F3	
00030F03 F40D 0003 F3               		dc.b $F4, $D, 0, 3, $F3	
00030F08 0408 000B F3               		dc.b 4, 8, 0, $B, $F3	
00030F0D 0C0C 000E F3               		dc.b $C, $C, 0, $E, $F3	
00030F12 04                         SME_KM9WW_DA8:	dc.b 4	
00030F13 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
00030F18 F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
00030F1D 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
00030F22 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
00030F27 04                         SME_KM9WW_DBD:	dc.b 4	
00030F28 EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
00030F2D F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
00030F32 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
00030F37 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
00030F3C 03                         SME_KM9WW_DD2:	dc.b 3	
00030F3D EC0E 0000 ED               		dc.b $EC, $E, 0, 0, $ED	
00030F42 0408 000C F5               		dc.b 4, 8, 0, $C, $F5	
00030F47 0C08 000F F5               		dc.b $C, 8, 0, $F, $F5	
00030F4C 04                         SME_KM9WW_DE2:	dc.b 4	
00030F4D EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030F52 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030F57 0408 000B F6               		dc.b 4, 8, 0, $B, $F6	
00030F5C 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030F61 04                         SME_KM9WW_DF7:	dc.b 4	
00030F62 EC08 0000 F5               		dc.b $EC, 8, 0, 0, $F5	
00030F67 F40C 0003 ED               		dc.b $F4, $C, 0, 3, $ED	
00030F6C FC09 0007 F5               		dc.b $FC, 9, 0, 7, $F5	
00030F71 0C08 000D F5               		dc.b $C, 8, 0, $D, $F5	
00030F76 03                         SME_KM9WW_E0C:	dc.b 3	
00030F77 F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
00030F7C FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
00030F81 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
00030F86 03                         SME_KM9WW_E1C:	dc.b 3	
00030F87 F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00030F8C 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00030F91 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
00030F96 02                         SME_KM9WW_E2C:	dc.b 2	
00030F97 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030F9C 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00030FA1 03                         SME_KM9WW_E37:	dc.b 3	
00030FA2 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
00030FA7 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00030FAC 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00030FB1 03                         SME_KM9WW_E47:	dc.b 3	
00030FB2 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
00030FB7 FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00030FBC 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00030FC1 02                         SME_KM9WW_E57:	dc.b 2	
00030FC2 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
00030FC7 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00030FCC 02                         SME_KM9WW_E62:	dc.b 2	
00030FCD F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030FD2 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00030FD7 02                         SME_KM9WW_E6D:	dc.b 2	
00030FD8 F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
00030FDD 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
00030FE2 03                         SME_KM9WW_E78:	dc.b 3	
00030FE3 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
00030FE8 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00030FED 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
00030FF2 03                         SME_KM9WW_E88:	dc.b 3	
00030FF3 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
00030FF8 F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
00030FFD 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
00031002 01                         SME_KM9WW_E98:	dc.b 1	
00031003 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00031008 03                         SME_KM9WW_E9E:	dc.b 3	
00031009 E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
0003100E F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
00031013 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
00031018 02                         SME_KM9WW_EAE:	dc.b 2	
00031019 E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
0003101E 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00031023 03                         SME_KM9WW_EB9:	dc.b 3	
00031024 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00031029 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
0003102E 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00031033 03                         SME_KM9WW_EC9:	dc.b 3	
00031034 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00031039 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
0003103E 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00031043 03                         SME_KM9WW_ED9:	dc.b 3	
00031044 F40E 0000 E8               		dc.b $F4, $E, 0, 0, $E8	
00031049 F402 000C 08               		dc.b $F4, 2, 0, $C, 8	
0003104E 0C08 000F F0               		dc.b $C, 8, 0, $F, $F0	
00031053 03                         SME_KM9WW_EE9:	dc.b 3	
00031054 F30E 0000 E8               		dc.b $F3, $E, 0, 0, $E8	
00031059 F302 000C 08               		dc.b $F3, 2, 0, $C, 8	
0003105E 0B08 000F F0               		dc.b $B, 8, 0, $F, $F0	
00031063 04                         SME_KM9WW_EF9:	dc.b 4	
00031064 EC0E 0000 E8               		dc.b $EC, $E, 0, 0, $E8	
00031069 FC00 000C 08               		dc.b $FC, 0, 0, $C, 8	
0003106E 040C 000D F0               		dc.b 4, $C, 0, $D, $F0	
00031073 0C08 0011 F8               		dc.b $C, 8, 0, $11, $F8	
00031078                            		even
00031078                            		even
00031078                            ;Map_Metal:
00031078                            ;	include "_maps\Metal.asm"
00031078                            Map_SuperSonic:
00031078                            		include	_maps\SuperSonic.asm
00031078                            ; --------------------------------------------------------------------------------
00031078                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00031078                            ; --------------------------------------------------------------------------------
00031078                            
00031078                            SME_tvPJu:	
00031078 0000 0000                  		dc.w SME_tvPJu_1AC-SME_tvPJu, SME_tvPJu_1AD-SME_tvPJu	
0003107C 0000 0000                  		dc.w SME_tvPJu_1BD-SME_tvPJu, SME_tvPJu_1CD-SME_tvPJu	
00031080 0000 0000                  		dc.w SME_tvPJu_1DD-SME_tvPJu, SME_tvPJu_1ED-SME_tvPJu	
00031084 0000 0000                  		dc.w SME_tvPJu_202-SME_tvPJu, SME_tvPJu_217-SME_tvPJu	
00031088 0000 0000                  		dc.w SME_tvPJu_227-SME_tvPJu, SME_tvPJu_232-SME_tvPJu	
0003108C 0000 0000                  		dc.w SME_tvPJu_247-SME_tvPJu, SME_tvPJu_25C-SME_tvPJu	
00031090 0000 0000                  		dc.w SME_tvPJu_271-SME_tvPJu, SME_tvPJu_286-SME_tvPJu	
00031094 0000 0000                  		dc.w SME_tvPJu_29B-SME_tvPJu, SME_tvPJu_2B0-SME_tvPJu	
00031098 0000 0000                  		dc.w SME_tvPJu_2C5-SME_tvPJu, SME_tvPJu_2DA-SME_tvPJu	
0003109C 0000 0000                  		dc.w SME_tvPJu_2EA-SME_tvPJu, SME_tvPJu_2FA-SME_tvPJu	
000310A0 0000 0000                  		dc.w SME_tvPJu_30A-SME_tvPJu, SME_tvPJu_31A-SME_tvPJu	
000310A4 0000 0000                  		dc.w SME_tvPJu_32F-SME_tvPJu, SME_tvPJu_344-SME_tvPJu	
000310A8 0000 0000                  		dc.w SME_tvPJu_354-SME_tvPJu, SME_tvPJu_35F-SME_tvPJu	
000310AC 0000 0000                  		dc.w SME_tvPJu_374-SME_tvPJu, SME_tvPJu_389-SME_tvPJu	
000310B0 0000 0000                  		dc.w SME_tvPJu_39E-SME_tvPJu, SME_tvPJu_3B3-SME_tvPJu	
000310B4 0000 0000                  		dc.w SME_tvPJu_3C8-SME_tvPJu, SME_tvPJu_3DD-SME_tvPJu	
000310B8 0000 0000                  		dc.w SME_tvPJu_3F2-SME_tvPJu, SME_tvPJu_407-SME_tvPJu	
000310BC 0000 0000                  		dc.w SME_tvPJu_41C-SME_tvPJu, SME_tvPJu_431-SME_tvPJu	
000310C0 0000 0000                  		dc.w SME_tvPJu_446-SME_tvPJu, SME_tvPJu_45B-SME_tvPJu	
000310C4 0000 0000                  		dc.w SME_tvPJu_470-SME_tvPJu, SME_tvPJu_485-SME_tvPJu	
000310C8 0000 0000                  		dc.w SME_tvPJu_49A-SME_tvPJu, SME_tvPJu_4AF-SME_tvPJu	
000310CC 0000 0000                  		dc.w SME_tvPJu_4C4-SME_tvPJu, SME_tvPJu_4D9-SME_tvPJu	
000310D0 0000 0000                  		dc.w SME_tvPJu_4EE-SME_tvPJu, SME_tvPJu_503-SME_tvPJu	
000310D4 0000 0000                  		dc.w SME_tvPJu_518-SME_tvPJu, SME_tvPJu_52D-SME_tvPJu	
000310D8 0000 0000                  		dc.w SME_tvPJu_542-SME_tvPJu, SME_tvPJu_557-SME_tvPJu	
000310DC 0000 0000                  		dc.w SME_tvPJu_567-SME_tvPJu, SME_tvPJu_57C-SME_tvPJu	
000310E0 0000 0000                  		dc.w SME_tvPJu_591-SME_tvPJu, SME_tvPJu_5A6-SME_tvPJu	
000310E4 0000 0000                  		dc.w SME_tvPJu_5BB-SME_tvPJu, SME_tvPJu_5CB-SME_tvPJu	
000310E8 0000 0000                  		dc.w SME_tvPJu_5D6-SME_tvPJu, SME_tvPJu_5E1-SME_tvPJu	
000310EC 0000 0000                  		dc.w SME_tvPJu_5F1-SME_tvPJu, SME_tvPJu_606-SME_tvPJu	
000310F0 0000 0000                  		dc.w SME_tvPJu_611-SME_tvPJu, SME_tvPJu_61C-SME_tvPJu	
000310F4 0000 0000                  		dc.w SME_tvPJu_62C-SME_tvPJu, SME_tvPJu_632-SME_tvPJu	
000310F8 0000 0000                  		dc.w SME_tvPJu_642-SME_tvPJu, SME_tvPJu_657-SME_tvPJu	
000310FC 0000 0000                  		dc.w SME_tvPJu_66C-SME_tvPJu, SME_tvPJu_681-SME_tvPJu	
00031100 0000 0000                  		dc.w SME_tvPJu_68C-SME_tvPJu, SME_tvPJu_692-SME_tvPJu	
00031104 0000 0000                  		dc.w SME_tvPJu_69D-SME_tvPJu, SME_tvPJu_6A3-SME_tvPJu	
00031108 0000 0000                  		dc.w SME_tvPJu_6AE-SME_tvPJu, SME_tvPJu_6BE-SME_tvPJu	
0003110C 0000 0000                  		dc.w SME_tvPJu_6D3-SME_tvPJu, SME_tvPJu_6E8-SME_tvPJu	
00031110 0000 0000                  		dc.w SME_tvPJu_6F8-SME_tvPJu, SME_tvPJu_708-SME_tvPJu	
00031114 0000 0000                  		dc.w SME_tvPJu_718-SME_tvPJu, SME_tvPJu_71E-SME_tvPJu	
00031118 0000 0000                  		dc.w SME_tvPJu_733-SME_tvPJu, SME_tvPJu_748-SME_tvPJu	
0003111C 0000 0000                  		dc.w SME_tvPJu_753-SME_tvPJu, SME_tvPJu_763-SME_tvPJu	
00031120 0000 0000                  		dc.w SME_tvPJu_773-SME_tvPJu, SME_tvPJu_77E-SME_tvPJu	
00031124 0000 0000                  		dc.w SME_tvPJu_793-SME_tvPJu, SME_tvPJu_7A3-SME_tvPJu	
00031128 0000 0000                  		dc.w SME_tvPJu_7AE-SME_tvPJu, SME_tvPJu_7B9-SME_tvPJu	
0003112C 0000 0000                  		dc.w SME_tvPJu_7CE-SME_tvPJu, SME_tvPJu_7DE-SME_tvPJu	
00031130 0000 0000                  		dc.w SME_tvPJu_7E9-SME_tvPJu, SME_tvPJu_7F9-SME_tvPJu	
00031134 0000 0000                  		dc.w SME_tvPJu_7FF-SME_tvPJu, SME_tvPJu_80A-SME_tvPJu	
00031138 0000 0000                  		dc.w SME_tvPJu_81A-SME_tvPJu, SME_tvPJu_820-SME_tvPJu	
0003113C 0000 0000                  		dc.w SME_tvPJu_82B-SME_tvPJu, SME_tvPJu_836-SME_tvPJu	
00031140 0000 0000                  		dc.w SME_tvPJu_846-SME_tvPJu, SME_tvPJu_84C-SME_tvPJu	
00031144 0000 0000                  		dc.w SME_tvPJu_857-SME_tvPJu, SME_tvPJu_867-SME_tvPJu	
00031148 0000 0000                  		dc.w SME_tvPJu_86D-SME_tvPJu, SME_tvPJu_878-SME_tvPJu	
0003114C 0000 0000                  		dc.w SME_tvPJu_883-SME_tvPJu, SME_tvPJu_898-SME_tvPJu	
00031150 0000 0000                  		dc.w SME_tvPJu_8A8-SME_tvPJu, SME_tvPJu_8B8-SME_tvPJu	
00031154 0000 0000                  		dc.w SME_tvPJu_8C3-SME_tvPJu, SME_tvPJu_8D3-SME_tvPJu	
00031158 0000 0000                  		dc.w SME_tvPJu_8E3-SME_tvPJu, SME_tvPJu_8F3-SME_tvPJu	
0003115C 0000 0000                  		dc.w SME_tvPJu_8FE-SME_tvPJu, SME_tvPJu_913-SME_tvPJu	
00031160 0000 0000                  		dc.w SME_tvPJu_923-SME_tvPJu, SME_tvPJu_933-SME_tvPJu	
00031164 0000 0000                  		dc.w SME_tvPJu_93E-SME_tvPJu, SME_tvPJu_94E-SME_tvPJu	
00031168 0000 0000                  		dc.w SME_tvPJu_954-SME_tvPJu, SME_tvPJu_969-SME_tvPJu	
0003116C 0000 0000                  		dc.w SME_tvPJu_97E-SME_tvPJu, SME_tvPJu_98E-SME_tvPJu	
00031170 0000 0000                  		dc.w SME_tvPJu_9A3-SME_tvPJu, SME_tvPJu_9B8-SME_tvPJu	
00031174 0000 0000                  		dc.w SME_tvPJu_9CD-SME_tvPJu, SME_tvPJu_9DD-SME_tvPJu	
00031178 0000 0000                  		dc.w SME_tvPJu_9F2-SME_tvPJu, SME_tvPJu_A07-SME_tvPJu	
0003117C 0000 0000                  		dc.w SME_tvPJu_A1C-SME_tvPJu, SME_tvPJu_A2C-SME_tvPJu	
00031180 0000 0000                  		dc.w SME_tvPJu_A41-SME_tvPJu, SME_tvPJu_A51-SME_tvPJu	
00031184 0000 0000                  		dc.w SME_tvPJu_A5C-SME_tvPJu, SME_tvPJu_A6C-SME_tvPJu	
00031188 0000 0000                  		dc.w SME_tvPJu_A77-SME_tvPJu, SME_tvPJu_A82-SME_tvPJu	
0003118C 0000 0000                  		dc.w SME_tvPJu_A8D-SME_tvPJu, SME_tvPJu_A98-SME_tvPJu	
00031190 0000 0000                  		dc.w SME_tvPJu_AA3-SME_tvPJu, SME_tvPJu_AB3-SME_tvPJu	
00031194 0000 0000                  		dc.w SME_tvPJu_AC3-SME_tvPJu, SME_tvPJu_ACE-SME_tvPJu	
00031198 0000 0000                  		dc.w SME_tvPJu_ADE-SME_tvPJu, SME_tvPJu_AF3-SME_tvPJu	
0003119C 0000 0000                  		dc.w SME_tvPJu_B08-SME_tvPJu, SME_tvPJu_B1D-SME_tvPJu	
000311A0 0000 0000                  		dc.w SME_tvPJu_B28-SME_tvPJu, SME_tvPJu_B42-SME_tvPJu	
000311A4 0000 0000                  		dc.w SME_tvPJu_B5C-SME_tvPJu, SME_tvPJu_B62-SME_tvPJu	
000311A8 0000 0000                  		dc.w SME_tvPJu_B68-SME_tvPJu, SME_tvPJu_B6E-SME_tvPJu	
000311AC 0000 0000                  		dc.w SME_tvPJu_B74-SME_tvPJu, SME_tvPJu_B7A-SME_tvPJu	
000311B0 0000 0000                  		dc.w SME_tvPJu_B85-SME_tvPJu, SME_tvPJu_B90-SME_tvPJu	
000311B4 0000 0000                  		dc.w SME_tvPJu_BA5-SME_tvPJu, SME_tvPJu_BBA-SME_tvPJu	
000311B8 0000 0000                  		dc.w SME_tvPJu_BCF-SME_tvPJu, SME_tvPJu_BDF-SME_tvPJu	
000311BC 0000 0000                  		dc.w SME_tvPJu_BF4-SME_tvPJu, SME_tvPJu_C09-SME_tvPJu	
000311C0 0000 0000                  		dc.w SME_tvPJu_C1E-SME_tvPJu, SME_tvPJu_C33-SME_tvPJu	
000311C4 0000 0000                  		dc.w SME_tvPJu_C48-SME_tvPJu, SME_tvPJu_C5D-SME_tvPJu	
000311C8 0000 0000                  		dc.w SME_tvPJu_C6D-SME_tvPJu, SME_tvPJu_C7D-SME_tvPJu	
000311CC 0000 0000                  		dc.w SME_tvPJu_C8D-SME_tvPJu, SME_tvPJu_C9D-SME_tvPJu	
000311D0 0000 0000                  		dc.w SME_tvPJu_CAD-SME_tvPJu, SME_tvPJu_CC2-SME_tvPJu	
000311D4 0000 0000                  		dc.w SME_tvPJu_CD7-SME_tvPJu, SME_tvPJu_CEC-SME_tvPJu	
000311D8 0000 0000                  		dc.w SME_tvPJu_D01-SME_tvPJu, SME_tvPJu_D0C-SME_tvPJu	
000311DC 0000 0000                  		dc.w SME_tvPJu_D1C-SME_tvPJu, SME_tvPJu_D2C-SME_tvPJu	
000311E0 0000 0000                  		dc.w SME_tvPJu_D3C-SME_tvPJu, SME_tvPJu_D4C-SME_tvPJu	
000311E4 0000 0000                  		dc.w SME_tvPJu_D5C-SME_tvPJu, SME_tvPJu_D6C-SME_tvPJu	
000311E8 0000 0000                  		dc.w SME_tvPJu_D7C-SME_tvPJu, SME_tvPJu_D8C-SME_tvPJu	
000311EC 0000 0000                  		dc.w SME_tvPJu_D9C-SME_tvPJu, SME_tvPJu_DB1-SME_tvPJu	
000311F0 0000 0000                  		dc.w SME_tvPJu_DC6-SME_tvPJu, SME_tvPJu_DD6-SME_tvPJu	
000311F4 0000 0000                  		dc.w SME_tvPJu_DEB-SME_tvPJu, SME_tvPJu_E00-SME_tvPJu	
000311F8 0000 0000                  		dc.w SME_tvPJu_E10-SME_tvPJu, SME_tvPJu_E25-SME_tvPJu	
000311FC 0000 0000                  		dc.w SME_tvPJu_E3A-SME_tvPJu, SME_tvPJu_E4A-SME_tvPJu	
00031200 0000 0000                  		dc.w SME_tvPJu_E5F-SME_tvPJu, SME_tvPJu_E74-SME_tvPJu	
00031204 0000 0000                  		dc.w SME_tvPJu_E89-SME_tvPJu, SME_tvPJu_E9E-SME_tvPJu	
00031208 0000 0000                  		dc.w SME_tvPJu_EAE-SME_tvPJu, SME_tvPJu_EBE-SME_tvPJu	
0003120C 0000 0000                  		dc.w SME_tvPJu_ECE-SME_tvPJu, SME_tvPJu_ED9-SME_tvPJu	
00031210 0000 0000                  		dc.w SME_tvPJu_EE9-SME_tvPJu, SME_tvPJu_EF9-SME_tvPJu	
00031214 0000 0000                  		dc.w SME_tvPJu_F04-SME_tvPJu, SME_tvPJu_F0F-SME_tvPJu	
00031218 0000 0000                  		dc.w SME_tvPJu_F1A-SME_tvPJu, SME_tvPJu_F2A-SME_tvPJu	
0003121C 0000 0000                  		dc.w SME_tvPJu_F3A-SME_tvPJu, SME_tvPJu_F40-SME_tvPJu	
00031220 0000 0000                  		dc.w SME_tvPJu_F50-SME_tvPJu, SME_tvPJu_F5B-SME_tvPJu	
00031224 00                         SME_tvPJu_1AC:	dc.b 0	
00031225 03                         SME_tvPJu_1AD:	dc.b 3	
00031226 FC0A 0000 EC               		dc.b $FC, $A, 0, 0, $EC	
0003122B FC06 0009 04               		dc.b $FC, 6, 0, 9, 4	
00031230 E40E 000F EC               		dc.b $E4, $E, 0, $F, $EC	
00031235 03                         SME_tvPJu_1BD:	dc.b 3	
00031236 FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
0003123B 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
00031240 E50E 000E EC               		dc.b $E5, $E, 0, $E, $EC	
00031245 03                         SME_tvPJu_1CD:	dc.b 3	
00031246 E60D 0000 EC               		dc.b $E6, $D, 0, 0, $EC	
0003124B FE0A 0008 F4               		dc.b $FE, $A, 0, 8, $F4	
00031250 F608 0011 F4               		dc.b $F6, 8, 0, $11, $F4	
00031255 03                         SME_tvPJu_1DD:	dc.b 3	
00031256 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0003125B EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
00031260 E40C 0012 EC               		dc.b $E4, $C, 0, $12, $EC	
00031265 04                         SME_tvPJu_1ED:	dc.b 4	
00031266 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0003126B FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
00031270 E40C 000E EC               		dc.b $E4, $C, 0, $E, $EC	
00031275 EC09 0012 F4               		dc.b $EC, 9, 0, $12, $F4	
0003127A 04                         SME_tvPJu_202:	dc.b 4	
0003127B FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
00031280 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
00031285 E50C 000E EC               		dc.b $E5, $C, 0, $E, $EC	
0003128A ED09 0012 F4               		dc.b $ED, 9, 0, $12, $F4	
0003128F 03                         SME_tvPJu_217:	dc.b 3	
00031290 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
00031295 F608 0009 F4               		dc.b $F6, 8, 0, 9, $F4	
0003129A E60D 000C EC               		dc.b $E6, $D, 0, $C, $EC	
0003129F 02                         SME_tvPJu_227:	dc.b 2	
000312A0 FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
000312A5 E40E 0009 EC               		dc.b $E4, $E, 0, 9, $EC	
000312AA 04                         SME_tvPJu_232:	dc.b 4	
000312AB FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
000312B0 E304 000C EB               		dc.b $E3, 4, 0, $C, $EB	
000312B5 EB0B 000E E3               		dc.b $EB, $B, 0, $E, $E3	
000312BA EB09 001A FB               		dc.b $EB, 9, 0, $1A, $FB	
000312BF 04                         SME_tvPJu_247:	dc.b 4	
000312C0 FF0E 0000 FB               		dc.b $FF, $E, 0, 0, $FB	
000312C5 E704 000C EB               		dc.b $E7, 4, 0, $C, $EB	
000312CA EF0A 000E E3               		dc.b $EF, $A, 0, $E, $E3	
000312CF EF0D 0017 FB               		dc.b $EF, $D, 0, $17, $FB	
000312D4 04                         SME_tvPJu_25C:	dc.b 4	
000312D5 FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
000312DA EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
000312DF F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
000312E4 FB04 0012 EB               		dc.b $FB, 4, 0, $12, $EB	
000312E9 04                         SME_tvPJu_271:	dc.b 4	
000312EA FB0E 0000 FB               		dc.b $FB, $E, 0, 0, $FB	
000312EF EB0B 000C E3               		dc.b $EB, $B, 0, $C, $E3	
000312F4 E300 0018 EB               		dc.b $E3, 0, 0, $18, $EB	
000312F9 EB05 0019 FB               		dc.b $EB, 5, 0, $19, $FB	
000312FE 04                         SME_tvPJu_286:	dc.b 4	
000312FF FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
00031304 E30A 000C E3               		dc.b $E3, $A, 0, $C, $E3	
00031309 EB09 0015 FB               		dc.b $EB, 9, 0, $15, $FB	
0003130E FB06 001B EB               		dc.b $FB, 6, 0, $1B, $EB	
00031313 04                         SME_tvPJu_29B:	dc.b 4	
00031314 FB0F 0000 FB               		dc.b $FB, $F, 0, 0, $FB	
00031319 EB0D 0010 E3               		dc.b $EB, $D, 0, $10, $E3	
0003131E F308 0018 03               		dc.b $F3, 8, 0, $18, 3	
00031323 FB05 001B EB               		dc.b $FB, 5, 0, $1B, $EB	
00031328 04                         SME_tvPJu_2B0:	dc.b 4	
00031329 FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
0003132E E309 0009 EB               		dc.b $E3, 9, 0, 9, $EB	
00031333 F30A 000F E3               		dc.b $F3, $A, 0, $F, $E3	
00031338 F304 0018 FB               		dc.b $F3, 4, 0, $18, $FB	
0003133D 04                         SME_tvPJu_2C5:	dc.b 4	
0003133E FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00031343 EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
00031348 F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
0003134D FB08 0012 E3               		dc.b $FB, 8, 0, $12, $E3	
00031352 03                         SME_tvPJu_2DA:	dc.b 3	
00031353 EC09 0000 FC               		dc.b $EC, 9, 0, 0, $FC	
00031358 FC0A 0006 FC               		dc.b $FC, $A, 0, 6, $FC	
0003135D F40B 000F E4               		dc.b $F4, $B, 0, $F, $E4	
00031362 03                         SME_tvPJu_2EA:	dc.b 3	
00031363 EC04 0000 05               		dc.b $EC, 4, 0, 0, 5	
00031368 F40B 0002 FD               		dc.b $F4, $B, 0, 2, $FD	
0003136D F40B 000E E5               		dc.b $F4, $B, 0, $E, $E5	
00031372 03                         SME_tvPJu_2FA:	dc.b 3	
00031373 F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
00031378 F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
0003137D 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
00031382 03                         SME_tvPJu_30A:	dc.b 3	
00031383 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00031388 F40A 000C E4               		dc.b $F4, $A, 0, $C, $E4	
0003138D 0C00 0015 E4               		dc.b $C, 0, 0, $15, $E4	
00031392 04                         SME_tvPJu_31A:	dc.b 4	
00031393 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00031398 EA04 000C FC               		dc.b $EA, 4, 0, $C, $FC	
0003139D F40A 000E E4               		dc.b $F4, $A, 0, $E, $E4	
000313A2 0C00 0017 E4               		dc.b $C, 0, 0, $17, $E4	
000313A7 04                         SME_tvPJu_32F:	dc.b 4	
000313A8 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
000313AD EB04 000C 05               		dc.b $EB, 4, 0, $C, 5	
000313B2 F40A 000E E5               		dc.b $F4, $A, 0, $E, $E5	
000313B7 0C00 0017 E5               		dc.b $C, 0, 0, $17, $E5	
000313BC 03                         SME_tvPJu_344:	dc.b 3	
000313BD F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
000313C2 F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
000313C7 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
000313CC 02                         SME_tvPJu_354:	dc.b 2	
000313CD F40A 0000 FC               		dc.b $F4, $A, 0, 0, $FC	
000313D2 F40B 0009 E4               		dc.b $F4, $B, 0, 9, $E4	
000313D7 04                         SME_tvPJu_35F:	dc.b 4	
000313D8 EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
000313DD EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
000313E2 040E 0012 E4               		dc.b 4, $E, 0, $12, $E4	
000313E7 0400 001E 04               		dc.b 4, 0, 0, $1E, 4	
000313EC 04                         SME_tvPJu_374:	dc.b 4	
000313ED E40B 0000 00               		dc.b $E4, $B, 0, 0, 0	
000313F2 E407 000C F0               		dc.b $E4, 7, 0, $C, $F0	
000313F7 040D 0014 E8               		dc.b 4, $D, 0, $14, $E8	
000313FC 1404 001C F0               		dc.b $14, 4, 0, $1C, $F0	
00031401 04                         SME_tvPJu_389:	dc.b 4	
00031402 EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00031407 F400 0009 F4               		dc.b $F4, 0, 0, 9, $F4	
0003140C FC04 000A EC               		dc.b $FC, 4, 0, $A, $EC	
00031411 040A 000C EC               		dc.b 4, $A, 0, $C, $EC	
00031416 04                         SME_tvPJu_39E:	dc.b 4	
00031417 E40B 0000 FC               		dc.b $E4, $B, 0, 0, $FC	
0003141C F405 000C EC               		dc.b $F4, 5, 0, $C, $EC	
00031421 040E 0010 E4               		dc.b 4, $E, 0, $10, $E4	
00031426 0400 001C 04               		dc.b 4, 0, 0, $1C, 4	
0003142B 04                         SME_tvPJu_3B3:	dc.b 4	
0003142C EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
00031431 EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
00031436 040A 0012 E4               		dc.b 4, $A, 0, $12, $E4	
0003143B 0409 001B FC               		dc.b 4, 9, 0, $1B, $FC	
00031440 04                         SME_tvPJu_3C8:	dc.b 4	
00031441 E40F 0000 FC               		dc.b $E4, $F, 0, 0, $FC	
00031446 E403 0010 F4               		dc.b $E4, 3, 0, $10, $F4	
0003144B FC00 0014 EC               		dc.b $FC, 0, 0, $14, $EC	
00031450 040E 0015 EC               		dc.b 4, $E, 0, $15, $EC	
00031455 04                         SME_tvPJu_3DD:	dc.b 4	
00031456 EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
0003145B F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00031460 040E 000D E4               		dc.b 4, $E, 0, $D, $E4	
00031465 0400 0019 04               		dc.b 4, 0, 0, $19, 4	
0003146A 04                         SME_tvPJu_3F2:	dc.b 4	
0003146B EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00031470 F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00031475 0409 000D EC               		dc.b 4, 9, 0, $D, $EC	
0003147A 1404 0013 F4               		dc.b $14, 4, 0, $13, $F4	
0003147F 04                         SME_tvPJu_407:	dc.b 4	
00031480 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00031485 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
0003148A 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
0003148F 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00031494 04                         SME_tvPJu_41C:	dc.b 4	
00031495 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
0003149A FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
0003149F 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
000314A4 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000314A9 04                         SME_tvPJu_431:	dc.b 4	
000314AA EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
000314AF FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
000314B4 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
000314B9 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000314BE 04                         SME_tvPJu_446:	dc.b 4	
000314BF EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
000314C4 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
000314C9 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
000314CE 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
000314D3 04                         SME_tvPJu_45B:	dc.b 4	
000314D4 EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
000314D9 F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
000314DE FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
000314E3 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
000314E8 04                         SME_tvPJu_470:	dc.b 4	
000314E9 E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
000314EE F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
000314F3 F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
000314F8 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
000314FD 04                         SME_tvPJu_485:	dc.b 4	
000314FE EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
00031503 F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
00031508 FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
0003150D 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
00031512 04                         SME_tvPJu_49A:	dc.b 4	
00031513 E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
00031518 F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
0003151D F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
00031522 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
00031527 04                         SME_tvPJu_4AF:	dc.b 4	
00031528 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
0003152D 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00031532 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00031537 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
0003153C 04                         SME_tvPJu_4C4:	dc.b 4	
0003153D F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00031542 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00031547 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
0003154C 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00031551 04                         SME_tvPJu_4D9:	dc.b 4	
00031552 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00031557 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
0003155C 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00031561 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00031566 04                         SME_tvPJu_4EE:	dc.b 4	
00031567 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
0003156C 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00031571 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00031576 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
0003157B 04                         SME_tvPJu_503:	dc.b 4	
0003157C F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
00031581 FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
00031586 FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
0003158B 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
00031590 04                         SME_tvPJu_518:	dc.b 4	
00031591 F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
00031596 FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
0003159B FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
000315A0 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
000315A5 04                         SME_tvPJu_52D:	dc.b 4	
000315A6 F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
000315AB FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
000315B0 FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
000315B5 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
000315BA 04                         SME_tvPJu_542:	dc.b 4	
000315BB F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
000315C0 FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
000315C5 FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
000315CA 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
000315CF 03                         SME_tvPJu_557:	dc.b 3	
000315D0 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
000315D5 F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
000315DA 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
000315DF 04                         SME_tvPJu_567:	dc.b 4	
000315E0 EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
000315E5 FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
000315EA 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
000315EF 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
000315F4 04                         SME_tvPJu_57C:	dc.b 4	
000315F5 F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
000315FA F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
000315FF 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
00031604 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
00031609 04                         SME_tvPJu_591:	dc.b 4	
0003160A EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
0003160F F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
00031614 FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
00031619 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
0003161E 04                         SME_tvPJu_5A6:	dc.b 4	
0003161F EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
00031624 F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
00031629 FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
0003162E 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
00031633 03                         SME_tvPJu_5BB:	dc.b 3	
00031634 EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
00031639 F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
0003163E 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
00031643 02                         SME_tvPJu_5CB:	dc.b 2	
00031644 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
00031649 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
0003164E 02                         SME_tvPJu_5D6:	dc.b 2	
0003164F EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
00031654 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
00031659 03                         SME_tvPJu_5E1:	dc.b 3	
0003165A EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
0003165F F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
00031664 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
00031669 04                         SME_tvPJu_5F1:	dc.b 4	
0003166A F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
0003166F F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
00031674 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
00031679 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
0003167E 02                         SME_tvPJu_606:	dc.b 2	
0003167F EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
00031684 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
00031689 02                         SME_tvPJu_611:	dc.b 2	
0003168A EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0003168F 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00031694 03                         SME_tvPJu_61C:	dc.b 3	
00031695 E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
0003169A EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
0003169F 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
000316A4 01                         SME_tvPJu_62C:	dc.b 1	
000316A5 F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
000316AA 03                         SME_tvPJu_632:	dc.b 3	
000316AB F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
000316B0 F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
000316B5 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
000316BA 04                         SME_tvPJu_642:	dc.b 4	
000316BB F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
000316C0 FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
000316C5 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
000316CA 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
000316CF 04                         SME_tvPJu_657:	dc.b 4	
000316D0 EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
000316D5 FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
000316DA 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
000316DF 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
000316E4 04                         SME_tvPJu_66C:	dc.b 4	
000316E5 EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
000316EA FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
000316EF 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
000316F4 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
000316F9 02                         SME_tvPJu_681:	dc.b 2	
000316FA EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
000316FF 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
00031704 01                         SME_tvPJu_68C:	dc.b 1	
00031705 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
0003170A 02                         SME_tvPJu_692:	dc.b 2	
0003170B F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
00031710 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
00031715 01                         SME_tvPJu_69D:	dc.b 1	
00031716 F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
0003171B 02                         SME_tvPJu_6A3:	dc.b 2	
0003171C EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
00031721 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
00031726 03                         SME_tvPJu_6AE:	dc.b 3	
00031727 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0003172C F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00031731 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
00031736 04                         SME_tvPJu_6BE:	dc.b 4	
00031737 E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
0003173C F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
00031741 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
00031746 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
0003174B 04                         SME_tvPJu_6D3:	dc.b 4	
0003174C EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
00031751 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
00031756 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
0003175B 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
00031760 03                         SME_tvPJu_6E8:	dc.b 3	
00031761 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
00031766 FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
0003176B 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
00031770 03                         SME_tvPJu_6F8:	dc.b 3	
00031771 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
00031776 F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
0003177B 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
00031780 03                         SME_tvPJu_708:	dc.b 3	
00031781 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
00031786 F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
0003178B 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
00031790 01                         SME_tvPJu_718:	dc.b 1	
00031791 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
00031796 04                         SME_tvPJu_71E:	dc.b 4	
00031797 EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
0003179C F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
000317A1 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
000317A6 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
000317AB 04                         SME_tvPJu_733:	dc.b 4	
000317AC EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
000317B1 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
000317B6 FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
000317BB FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
000317C0 02                         SME_tvPJu_748:	dc.b 2	
000317C1 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
000317C6 F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
000317CB 03                         SME_tvPJu_753:	dc.b 3	
000317CC EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
000317D1 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
000317D6 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
000317DB 03                         SME_tvPJu_763:	dc.b 3	
000317DC ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
000317E1 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
000317E6 FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
000317EB 02                         SME_tvPJu_773:	dc.b 2	
000317EC F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
000317F1 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
000317F6 04                         SME_tvPJu_77E:	dc.b 4	
000317F7 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000317FC F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00031801 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00031806 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
0003180B 03                         SME_tvPJu_793:	dc.b 3	
0003180C EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031811 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031816 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
0003181B 02                         SME_tvPJu_7A3:	dc.b 2	
0003181C EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00031821 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
00031826 02                         SME_tvPJu_7AE:	dc.b 2	
00031827 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
0003182C 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00031831 04                         SME_tvPJu_7B9:	dc.b 4	
00031832 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
00031837 F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
0003183C FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
00031841 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
00031846 03                         SME_tvPJu_7CE:	dc.b 3	
00031847 EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
0003184C 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
00031851 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00031856 02                         SME_tvPJu_7DE:	dc.b 2	
00031857 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
0003185C 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00031861 03                         SME_tvPJu_7E9:	dc.b 3	
00031862 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
00031867 F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
0003186C 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
00031871 01                         SME_tvPJu_7F9:	dc.b 1	
00031872 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
00031877 02                         SME_tvPJu_7FF:	dc.b 2	
00031878 F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
0003187D F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
00031882 03                         SME_tvPJu_80A:	dc.b 3	
00031883 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
00031888 F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
0003188D 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
00031892 01                         SME_tvPJu_81A:	dc.b 1	
00031893 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
00031898 02                         SME_tvPJu_820:	dc.b 2	
00031899 FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
0003189E F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
000318A3 02                         SME_tvPJu_82B:	dc.b 2	
000318A4 F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
000318A9 F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
000318AE 03                         SME_tvPJu_836:	dc.b 3	
000318AF E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
000318B4 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
000318B9 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
000318BE 01                         SME_tvPJu_846:	dc.b 1	
000318BF F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
000318C4 02                         SME_tvPJu_84C:	dc.b 2	
000318C5 EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
000318CA 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
000318CF 03                         SME_tvPJu_857:	dc.b 3	
000318D0 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
000318D5 F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
000318DA F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
000318DF 01                         SME_tvPJu_867:	dc.b 1	
000318E0 F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
000318E5 02                         SME_tvPJu_86D:	dc.b 2	
000318E6 E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
000318EB F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
000318F0 02                         SME_tvPJu_878:	dc.b 2	
000318F1 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000318F6 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000318FB 04                         SME_tvPJu_883:	dc.b 4	
000318FC EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
00031901 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
00031906 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
0003190B 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
00031910 03                         SME_tvPJu_898:	dc.b 3	
00031911 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
00031916 F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
0003191B 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00031920 03                         SME_tvPJu_8A8:	dc.b 3	
00031921 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00031926 F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
0003192B 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
00031930 02                         SME_tvPJu_8B8:	dc.b 2	
00031931 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
00031936 F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
0003193B 03                         SME_tvPJu_8C3:	dc.b 3	
0003193C F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
00031941 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
00031946 F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
0003194B 03                         SME_tvPJu_8D3:	dc.b 3	
0003194C F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00031951 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
00031956 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
0003195B 03                         SME_tvPJu_8E3:	dc.b 3	
0003195C F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
00031961 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
00031966 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
0003196B 02                         SME_tvPJu_8F3:	dc.b 2	
0003196C F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00031971 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
00031976 04                         SME_tvPJu_8FE:	dc.b 4	
00031977 F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
0003197C F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
00031981 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
00031986 F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
0003198B 03                         SME_tvPJu_913:	dc.b 3	
0003198C F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
00031991 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
00031996 F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
0003199B 03                         SME_tvPJu_923:	dc.b 3	
0003199C F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
000319A1 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
000319A6 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
000319AB 02                         SME_tvPJu_933:	dc.b 2	
000319AC F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
000319B1 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
000319B6 03                         SME_tvPJu_93E:	dc.b 3	
000319B7 F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
000319BC F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
000319C1 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
000319C6 01                         SME_tvPJu_94E:	dc.b 1	
000319C7 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
000319CC 04                         SME_tvPJu_954:	dc.b 4	
000319CD E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
000319D2 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
000319D7 F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
000319DC 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
000319E1 04                         SME_tvPJu_969:	dc.b 4	
000319E2 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
000319E7 EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
000319EC F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
000319F1 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
000319F6 03                         SME_tvPJu_97E:	dc.b 3	
000319F7 F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
000319FC F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
00031A01 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
00031A06 04                         SME_tvPJu_98E:	dc.b 4	
00031A07 EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
00031A0C F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
00031A11 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
00031A16 FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
00031A1B 04                         SME_tvPJu_9A3:	dc.b 4	
00031A1C 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
00031A21 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
00031A26 FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
00031A2B EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
00031A30 04                         SME_tvPJu_9B8:	dc.b 4	
00031A31 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
00031A36 FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
00031A3B F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
00031A40 F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
00031A45 03                         SME_tvPJu_9CD:	dc.b 3	
00031A46 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
00031A4B EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
00031A50 F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
00031A55 04                         SME_tvPJu_9DD:	dc.b 4	
00031A56 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
00031A5B 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
00031A60 EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
00031A65 E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
00031A6A 04                         SME_tvPJu_9F2:	dc.b 4	
00031A6B E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031A70 E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
00031A75 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
00031A7A 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
00031A7F 04                         SME_tvPJu_A07:	dc.b 4	
00031A80 E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
00031A85 F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
00031A8A 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
00031A8F 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
00031A94 03                         SME_tvPJu_A1C:	dc.b 3	
00031A95 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
00031A9A F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
00031A9F F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
00031AA4 04                         SME_tvPJu_A2C:	dc.b 4	
00031AA5 E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
00031AAA E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
00031AAF F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
00031AB4 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
00031AB9 03                         SME_tvPJu_A41:	dc.b 3	
00031ABA E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
00031ABF 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
00031AC4 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
00031AC9 02                         SME_tvPJu_A51:	dc.b 2	
00031ACA E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031ACF 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
00031AD4 03                         SME_tvPJu_A5C:	dc.b 3	
00031AD5 F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
00031ADA 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
00031ADF 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
00031AE4 02                         SME_tvPJu_A6C:	dc.b 2	
00031AE5 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031AEA 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031AEF 02                         SME_tvPJu_A77:	dc.b 2	
00031AF0 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031AF5 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031AFA 02                         SME_tvPJu_A82:	dc.b 2	
00031AFB F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031B00 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031B05 02                         SME_tvPJu_A8D:	dc.b 2	
00031B06 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031B0B 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031B10 02                         SME_tvPJu_A98:	dc.b 2	
00031B11 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00031B16 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00031B1B 03                         SME_tvPJu_AA3:	dc.b 3	
00031B1C F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00031B21 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
00031B26 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
00031B2B 03                         SME_tvPJu_AB3:	dc.b 3	
00031B2C EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
00031B31 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
00031B36 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
00031B3B 02                         SME_tvPJu_AC3:	dc.b 2	
00031B3C E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00031B41 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
00031B46 03                         SME_tvPJu_ACE:	dc.b 3	
00031B47 F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
00031B4C F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
00031B51 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
00031B56 04                         SME_tvPJu_ADE:	dc.b 4	
00031B57 E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
00031B5C F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
00031B61 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
00031B66 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
00031B6B 04                         SME_tvPJu_AF3:	dc.b 4	
00031B6C E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00031B71 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
00031B76 FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
00031B7B 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
00031B80 04                         SME_tvPJu_B08:	dc.b 4	
00031B81 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00031B86 F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00031B8B 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
00031B90 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
00031B95 02                         SME_tvPJu_B1D:	dc.b 2	
00031B96 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00031B9B F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00031BA0 05                         SME_tvPJu_B28:	dc.b 5	
00031BA1 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
00031BA6 E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
00031BAB F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
00031BB0 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
00031BB5 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
00031BBA 05                         SME_tvPJu_B42:	dc.b 5	
00031BBB E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
00031BC0 E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
00031BC5 F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
00031BCA 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
00031BCF 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
00031BD4 01                         SME_tvPJu_B5C:	dc.b 1	
00031BD5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031BDA 01                         SME_tvPJu_B62:	dc.b 1	
00031BDB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031BE0 01                         SME_tvPJu_B68:	dc.b 1	
00031BE1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031BE6 01                         SME_tvPJu_B6E:	dc.b 1	
00031BE7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031BEC 01                         SME_tvPJu_B74:	dc.b 1	
00031BED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00031BF2 02                         SME_tvPJu_B7A:	dc.b 2	
00031BF3 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00031BF8 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
00031BFD 02                         SME_tvPJu_B85:	dc.b 2	
00031BFE F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00031C03 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
00031C08 04                         SME_tvPJu_B90:	dc.b 4	
00031C09 EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
00031C0E F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
00031C13 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
00031C18 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
00031C1D 04                         SME_tvPJu_BA5:	dc.b 4	
00031C1E EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
00031C23 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
00031C28 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
00031C2D 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
00031C32 04                         SME_tvPJu_BBA:	dc.b 4	
00031C33 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
00031C38 F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
00031C3D 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
00031C42 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
00031C47 03                         SME_tvPJu_BCF:	dc.b 3	
00031C48 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031C4D F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
00031C52 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
00031C57 04                         SME_tvPJu_BDF:	dc.b 4	
00031C58 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031C5D 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031C62 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031C67 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031C6C 04                         SME_tvPJu_BF4:	dc.b 4	
00031C6D F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031C72 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031C77 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031C7C F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031C81 04                         SME_tvPJu_C09:	dc.b 4	
00031C82 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031C87 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031C8C E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031C91 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031C96 04                         SME_tvPJu_C1E:	dc.b 4	
00031C97 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031C9C 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031CA1 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031CA6 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031CAB 04                         SME_tvPJu_C33:	dc.b 4	
00031CAC F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031CB1 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031CB6 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031CBB F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031CC0 04                         SME_tvPJu_C48:	dc.b 4	
00031CC1 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031CC6 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031CCB E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031CD0 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031CD5 03                         SME_tvPJu_C5D:	dc.b 3	
00031CD6 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00031CDB F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00031CE0 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00031CE5 03                         SME_tvPJu_C6D:	dc.b 3	
00031CE6 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00031CEB F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00031CF0 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
00031CF5 03                         SME_tvPJu_C7D:	dc.b 3	
00031CF6 EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
00031CFB F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
00031D00 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
00031D05 03                         SME_tvPJu_C8D:	dc.b 3	
00031D06 F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00031D0B F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00031D10 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
00031D15 03                         SME_tvPJu_C9D:	dc.b 3	
00031D16 F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00031D1B F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00031D20 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
00031D25 04                         SME_tvPJu_CAD:	dc.b 4	
00031D26 EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
00031D2B 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
00031D30 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
00031D35 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
00031D3A 04                         SME_tvPJu_CC2:	dc.b 4	
00031D3B EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00031D40 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00031D45 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00031D4A 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00031D4F 04                         SME_tvPJu_CD7:	dc.b 4	
00031D50 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00031D55 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00031D5A 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00031D5F 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00031D64 04                         SME_tvPJu_CEC:	dc.b 4	
00031D65 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00031D6A F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00031D6F FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
00031D74 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
00031D79 02                         SME_tvPJu_D01:	dc.b 2	
00031D7A EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00031D7F FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
00031D84 03                         SME_tvPJu_D0C:	dc.b 3	
00031D85 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031D8A F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031D8F 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031D94 03                         SME_tvPJu_D1C:	dc.b 3	
00031D95 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031D9A F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031D9F 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031DA4 03                         SME_tvPJu_D2C:	dc.b 3	
00031DA5 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031DAA F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031DAF 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
00031DB4 03                         SME_tvPJu_D3C:	dc.b 3	
00031DB5 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00031DBA 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031DBF 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00031DC4 03                         SME_tvPJu_D4C:	dc.b 3	
00031DC5 E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00031DCA 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031DCF 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
00031DD4 03                         SME_tvPJu_D5C:	dc.b 3	
00031DD5 E408 0000 ED               		dc.b $E4, 8, 0, 0, $ED	
00031DDA EC0F 0003 ED               		dc.b $EC, $F, 0, 3, $ED	
00031DDF 0C0C 0013 ED               		dc.b $C, $C, 0, $13, $ED	
00031DE4 03                         SME_tvPJu_D6C:	dc.b 3	
00031DE5 E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
00031DEA ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
00031DEF 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
00031DF4 03                         SME_tvPJu_D7C:	dc.b 3	
00031DF5 E400 0000 FD               		dc.b $E4, 0, 0, 0, $FD	
00031DFA EC0F 0001 ED               		dc.b $EC, $F, 0, 1, $ED	
00031DFF 0C0C 0011 ED               		dc.b $C, $C, 0, $11, $ED	
00031E04 03                         SME_tvPJu_D8C:	dc.b 3	
00031E05 E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
00031E0A ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
00031E0F 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
00031E14 04                         SME_tvPJu_D9C:	dc.b 4	
00031E15 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E1A E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031E1F F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031E24 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031E29 04                         SME_tvPJu_DB1:	dc.b 4	
00031E2A FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E2F E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031E34 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031E39 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031E3E 03                         SME_tvPJu_DC6:	dc.b 3	
00031E3F FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E44 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031E49 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031E4E 04                         SME_tvPJu_DD6:	dc.b 4	
00031E4F FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E54 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031E59 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031E5E FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031E63 04                         SME_tvPJu_DEB:	dc.b 4	
00031E64 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E69 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031E6E F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031E73 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031E78 03                         SME_tvPJu_E00:	dc.b 3	
00031E79 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E7E E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031E83 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031E88 04                         SME_tvPJu_E10:	dc.b 4	
00031E89 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031E8E E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031E93 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031E98 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031E9D 04                         SME_tvPJu_E25:	dc.b 4	
00031E9E FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031EA3 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031EA8 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031EAD FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031EB2 03                         SME_tvPJu_E3A:	dc.b 3	
00031EB3 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031EB8 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031EBD FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031EC2 04                         SME_tvPJu_E4A:	dc.b 4	
00031EC3 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
00031EC8 F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
00031ECD 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
00031ED2 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
00031ED7 04                         SME_tvPJu_E5F:	dc.b 4	
00031ED8 EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
00031EDD F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
00031EE2 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
00031EE7 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
00031EEC 04                         SME_tvPJu_E74:	dc.b 4	
00031EED FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031EF2 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031EF7 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031EFC FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031F01 04                         SME_tvPJu_E89:	dc.b 4	
00031F02 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031F07 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031F0C F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031F11 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031F16 03                         SME_tvPJu_E9E:	dc.b 3	
00031F17 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031F1C E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031F21 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031F26 03                         SME_tvPJu_EAE:	dc.b 3	
00031F27 F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
00031F2C FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
00031F31 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
00031F36 03                         SME_tvPJu_EBE:	dc.b 3	
00031F37 F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00031F3C 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00031F41 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
00031F46 02                         SME_tvPJu_ECE:	dc.b 2	
00031F47 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031F4C 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00031F51 03                         SME_tvPJu_ED9:	dc.b 3	
00031F52 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
00031F57 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00031F5C 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00031F61 03                         SME_tvPJu_EE9:	dc.b 3	
00031F62 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
00031F67 FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00031F6C 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00031F71 02                         SME_tvPJu_EF9:	dc.b 2	
00031F72 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
00031F77 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00031F7C 02                         SME_tvPJu_F04:	dc.b 2	
00031F7D F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031F82 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00031F87 02                         SME_tvPJu_F0F:	dc.b 2	
00031F88 F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
00031F8D 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
00031F92 03                         SME_tvPJu_F1A:	dc.b 3	
00031F93 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
00031F98 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00031F9D 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
00031FA2 03                         SME_tvPJu_F2A:	dc.b 3	
00031FA3 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
00031FA8 F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
00031FAD 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
00031FB2 01                         SME_tvPJu_F3A:	dc.b 1	
00031FB3 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00031FB8 03                         SME_tvPJu_F40:	dc.b 3	
00031FB9 E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
00031FBE F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
00031FC3 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
00031FC8 02                         SME_tvPJu_F50:	dc.b 2	
00031FC9 E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
00031FCE 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00031FD3 03                         SME_tvPJu_F5B:	dc.b 3	
00031FD4 E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
00031FD9 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
00031FDE 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00031FE4 00                         		even
00031FE4 00                         		even
00031FE4                            		even
00031FE4                            ; ---------------------------------------------------------------------------
00031FE4                            ; Uncompressed graphics	loading	array for Sonic
00031FE4                            ; ---------------------------------------------------------------------------
00031FE4                            ;SonicDynPLC:
00031FE4                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2Cues.asm"
00031FE4                            ;	even
00031FE4                            SonicDynPLC:
00031FE4                            	include "_inc\Sonic dynamic pattern load cues.asm"
00031FE4                            ; --------------------------------------------------------------------------------
00031FE4                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00031FE4                            
00031FE4                            SME_kbS1m:	
00031FE4 0000 0000                  		dc.w SME_kbS1m_1B4-SME_kbS1m, SME_kbS1m_1B5-SME_kbS1m	
00031FE8 0000 0000                  		dc.w SME_kbS1m_1BC-SME_kbS1m, SME_kbS1m_1C3-SME_kbS1m	
00031FEC 0000 0000                  		dc.w SME_kbS1m_1CA-SME_kbS1m, SME_kbS1m_1CF-SME_kbS1m	
00031FF0 0000 0000                  		dc.w SME_kbS1m_1D6-SME_kbS1m, SME_kbS1m_1DD-SME_kbS1m	
00031FF4 0000 0000                  		dc.w SME_kbS1m_1E4-SME_kbS1m, SME_kbS1m_1E9-SME_kbS1m	
00031FF8 0000 0000                  		dc.w SME_kbS1m_1F2-SME_kbS1m, SME_kbS1m_1FB-SME_kbS1m	
00031FFC 0000 0000                  		dc.w SME_kbS1m_204-SME_kbS1m, SME_kbS1m_20D-SME_kbS1m	
00032000 0000 0000                  		dc.w SME_kbS1m_216-SME_kbS1m, SME_kbS1m_21F-SME_kbS1m	
00032004 0000 0000                  		dc.w SME_kbS1m_228-SME_kbS1m, SME_kbS1m_231-SME_kbS1m	
00032008 0000 0000                  		dc.w SME_kbS1m_238-SME_kbS1m, SME_kbS1m_23F-SME_kbS1m	
0003200C 0000 0000                  		dc.w SME_kbS1m_246-SME_kbS1m, SME_kbS1m_24B-SME_kbS1m	
00032010 0000 0000                  		dc.w SME_kbS1m_252-SME_kbS1m, SME_kbS1m_25B-SME_kbS1m	
00032014 0000 0000                  		dc.w SME_kbS1m_262-SME_kbS1m, SME_kbS1m_267-SME_kbS1m	
00032018 0000 0000                  		dc.w SME_kbS1m_270-SME_kbS1m, SME_kbS1m_279-SME_kbS1m	
0003201C 0000 0000                  		dc.w SME_kbS1m_282-SME_kbS1m, SME_kbS1m_28B-SME_kbS1m	
00032020 0000 0000                  		dc.w SME_kbS1m_294-SME_kbS1m, SME_kbS1m_29D-SME_kbS1m	
00032024 0000 0000                  		dc.w SME_kbS1m_2A6-SME_kbS1m, SME_kbS1m_2AF-SME_kbS1m	
00032028 0000 0000                  		dc.w SME_kbS1m_2B4-SME_kbS1m, SME_kbS1m_2B9-SME_kbS1m	
0003202C 0000 0000                  		dc.w SME_kbS1m_2BE-SME_kbS1m, SME_kbS1m_2C3-SME_kbS1m	
00032030 0000 0000                  		dc.w SME_kbS1m_2CC-SME_kbS1m, SME_kbS1m_2D1-SME_kbS1m	
00032034 0000 0000                  		dc.w SME_kbS1m_2DA-SME_kbS1m, SME_kbS1m_2DF-SME_kbS1m	
00032038 0000 0000                  		dc.w SME_kbS1m_2E4-SME_kbS1m, SME_kbS1m_2E9-SME_kbS1m	
0003203C 0000 0000                  		dc.w SME_kbS1m_2EE-SME_kbS1m, SME_kbS1m_2F3-SME_kbS1m	
00032040 0000 0000                  		dc.w SME_kbS1m_2FA-SME_kbS1m, SME_kbS1m_2FF-SME_kbS1m	
00032044 0000 0000                  		dc.w SME_kbS1m_306-SME_kbS1m, SME_kbS1m_30B-SME_kbS1m	
00032048 0000 0000                  		dc.w SME_kbS1m_312-SME_kbS1m, SME_kbS1m_31B-SME_kbS1m	
0003204C 0000 0000                  		dc.w SME_kbS1m_324-SME_kbS1m, SME_kbS1m_32D-SME_kbS1m	
00032050 0000 0000                  		dc.w SME_kbS1m_336-SME_kbS1m, SME_kbS1m_33D-SME_kbS1m	
00032054 0000 0000                  		dc.w SME_kbS1m_342-SME_kbS1m, SME_kbS1m_347-SME_kbS1m	
00032058 0000 0000                  		dc.w SME_kbS1m_34E-SME_kbS1m, SME_kbS1m_357-SME_kbS1m	
0003205C 0000 0000                  		dc.w SME_kbS1m_35C-SME_kbS1m, SME_kbS1m_361-SME_kbS1m	
00032060 0000 0000                  		dc.w SME_kbS1m_368-SME_kbS1m, SME_kbS1m_36B-SME_kbS1m	
00032064 0000 0000                  		dc.w SME_kbS1m_372-SME_kbS1m, SME_kbS1m_37B-SME_kbS1m	
00032068 0000 0000                  		dc.w SME_kbS1m_384-SME_kbS1m, SME_kbS1m_38D-SME_kbS1m	
0003206C 0000 0000                  		dc.w SME_kbS1m_392-SME_kbS1m, SME_kbS1m_395-SME_kbS1m	
00032070 0000 0000                  		dc.w SME_kbS1m_39A-SME_kbS1m, SME_kbS1m_39D-SME_kbS1m	
00032074 0000 0000                  		dc.w SME_kbS1m_3A2-SME_kbS1m, SME_kbS1m_3A9-SME_kbS1m	
00032078 0000 0000                  		dc.w SME_kbS1m_3B2-SME_kbS1m, SME_kbS1m_3BB-SME_kbS1m	
0003207C 0000 0000                  		dc.w SME_kbS1m_3C2-SME_kbS1m, SME_kbS1m_3C9-SME_kbS1m	
00032080 0000 0000                  		dc.w SME_kbS1m_3D0-SME_kbS1m, SME_kbS1m_3D3-SME_kbS1m	
00032084 0000 0000                  		dc.w SME_kbS1m_3DC-SME_kbS1m, SME_kbS1m_3E5-SME_kbS1m	
00032088 0000 0000                  		dc.w SME_kbS1m_3EA-SME_kbS1m, SME_kbS1m_3F1-SME_kbS1m	
0003208C 0000 0000                  		dc.w SME_kbS1m_3F8-SME_kbS1m, SME_kbS1m_3FD-SME_kbS1m	
00032090 0000 0000                  		dc.w SME_kbS1m_406-SME_kbS1m, SME_kbS1m_40D-SME_kbS1m	
00032094 0000 0000                  		dc.w SME_kbS1m_412-SME_kbS1m, SME_kbS1m_417-SME_kbS1m	
00032098 0000 0000                  		dc.w SME_kbS1m_420-SME_kbS1m, SME_kbS1m_427-SME_kbS1m	
0003209C 0000 0000                  		dc.w SME_kbS1m_42C-SME_kbS1m, SME_kbS1m_433-SME_kbS1m	
000320A0 0000 0000                  		dc.w SME_kbS1m_436-SME_kbS1m, SME_kbS1m_43B-SME_kbS1m	
000320A4 0000 0000                  		dc.w SME_kbS1m_442-SME_kbS1m, SME_kbS1m_445-SME_kbS1m	
000320A8 0000 0000                  		dc.w SME_kbS1m_44A-SME_kbS1m, SME_kbS1m_44F-SME_kbS1m	
000320AC 0000 0000                  		dc.w SME_kbS1m_456-SME_kbS1m, SME_kbS1m_459-SME_kbS1m	
000320B0 0000 0000                  		dc.w SME_kbS1m_45E-SME_kbS1m, SME_kbS1m_465-SME_kbS1m	
000320B4 0000 0000                  		dc.w SME_kbS1m_468-SME_kbS1m, SME_kbS1m_46D-SME_kbS1m	
000320B8 0000 0000                  		dc.w SME_kbS1m_472-SME_kbS1m, SME_kbS1m_47B-SME_kbS1m	
000320BC 0000 0000                  		dc.w SME_kbS1m_482-SME_kbS1m, SME_kbS1m_489-SME_kbS1m	
000320C0 0000 0000                  		dc.w SME_kbS1m_48E-SME_kbS1m, SME_kbS1m_495-SME_kbS1m	
000320C4 0000 0000                  		dc.w SME_kbS1m_49C-SME_kbS1m, SME_kbS1m_4A3-SME_kbS1m	
000320C8 0000 0000                  		dc.w SME_kbS1m_4A8-SME_kbS1m, SME_kbS1m_4B1-SME_kbS1m	
000320CC 0000 0000                  		dc.w SME_kbS1m_4B8-SME_kbS1m, SME_kbS1m_4BF-SME_kbS1m	
000320D0 0000 0000                  		dc.w SME_kbS1m_4C4-SME_kbS1m, SME_kbS1m_4CB-SME_kbS1m	
000320D4 0000 0000                  		dc.w SME_kbS1m_4CE-SME_kbS1m, SME_kbS1m_4D7-SME_kbS1m	
000320D8 0000 0000                  		dc.w SME_kbS1m_4E0-SME_kbS1m, SME_kbS1m_4E7-SME_kbS1m	
000320DC 0000 0000                  		dc.w SME_kbS1m_4F0-SME_kbS1m, SME_kbS1m_4F9-SME_kbS1m	
000320E0 0000 0000                  		dc.w SME_kbS1m_502-SME_kbS1m, SME_kbS1m_509-SME_kbS1m	
000320E4 0000 0000                  		dc.w SME_kbS1m_512-SME_kbS1m, SME_kbS1m_51B-SME_kbS1m	
000320E8 0000 0000                  		dc.w SME_kbS1m_524-SME_kbS1m, SME_kbS1m_52B-SME_kbS1m	
000320EC 0000 0000                  		dc.w SME_kbS1m_534-SME_kbS1m, SME_kbS1m_53B-SME_kbS1m	
000320F0 0000 0000                  		dc.w SME_kbS1m_540-SME_kbS1m, SME_kbS1m_547-SME_kbS1m	
000320F4 0000 0000                  		dc.w SME_kbS1m_54C-SME_kbS1m, SME_kbS1m_551-SME_kbS1m	
000320F8 0000 0000                  		dc.w SME_kbS1m_556-SME_kbS1m, SME_kbS1m_55B-SME_kbS1m	
000320FC 0000 0000                  		dc.w SME_kbS1m_560-SME_kbS1m, SME_kbS1m_567-SME_kbS1m	
00032100 0000 0000                  		dc.w SME_kbS1m_56E-SME_kbS1m, SME_kbS1m_573-SME_kbS1m	
00032104 0000 0000                  		dc.w SME_kbS1m_57A-SME_kbS1m, SME_kbS1m_583-SME_kbS1m	
00032108 0000 0000                  		dc.w SME_kbS1m_58C-SME_kbS1m, SME_kbS1m_595-SME_kbS1m	
0003210C 0000 0000                  		dc.w SME_kbS1m_59A-SME_kbS1m, SME_kbS1m_5A5-SME_kbS1m	
00032110 0000 0000                  		dc.w SME_kbS1m_5B0-SME_kbS1m, SME_kbS1m_5B3-SME_kbS1m	
00032114 0000 0000                  		dc.w SME_kbS1m_5B6-SME_kbS1m, SME_kbS1m_5B9-SME_kbS1m	
00032118 0000 0000                  		dc.w SME_kbS1m_5BC-SME_kbS1m, SME_kbS1m_5BF-SME_kbS1m	
0003211C 0000 0000                  		dc.w SME_kbS1m_5C4-SME_kbS1m, SME_kbS1m_5C9-SME_kbS1m	
00032120 0000 0000                  		dc.w SME_kbS1m_5D2-SME_kbS1m, SME_kbS1m_5DB-SME_kbS1m	
00032124 0000 0000                  		dc.w SME_kbS1m_5E4-SME_kbS1m, SME_kbS1m_5EB-SME_kbS1m	
00032128 0000 0000                  		dc.w SME_kbS1m_5F2-SME_kbS1m, SME_kbS1m_5FB-SME_kbS1m	
0003212C 0000 0000                  		dc.w SME_kbS1m_602-SME_kbS1m, SME_kbS1m_60B-SME_kbS1m	
00032130 0000 0000                  		dc.w SME_kbS1m_612-SME_kbS1m, SME_kbS1m_61B-SME_kbS1m	
00032134 0000 0000                  		dc.w SME_kbS1m_622-SME_kbS1m, SME_kbS1m_629-SME_kbS1m	
00032138 0000 0000                  		dc.w SME_kbS1m_630-SME_kbS1m, SME_kbS1m_637-SME_kbS1m	
0003213C 0000 0000                  		dc.w SME_kbS1m_63E-SME_kbS1m, SME_kbS1m_647-SME_kbS1m	
00032140 0000 0000                  		dc.w SME_kbS1m_650-SME_kbS1m, SME_kbS1m_659-SME_kbS1m	
00032144 0000 0000                  		dc.w SME_kbS1m_662-SME_kbS1m, SME_kbS1m_667-SME_kbS1m	
00032148 0000 0000                  		dc.w SME_kbS1m_66E-SME_kbS1m, SME_kbS1m_675-SME_kbS1m	
0003214C 0000 0000                  		dc.w SME_kbS1m_67C-SME_kbS1m, SME_kbS1m_683-SME_kbS1m	
00032150 0000 0000                  		dc.w SME_kbS1m_68A-SME_kbS1m, SME_kbS1m_691-SME_kbS1m	
00032154 0000 0000                  		dc.w SME_kbS1m_698-SME_kbS1m, SME_kbS1m_69F-SME_kbS1m	
00032158 0000 0000                  		dc.w SME_kbS1m_6A6-SME_kbS1m, SME_kbS1m_6AF-SME_kbS1m	
0003215C 0000 0000                  		dc.w SME_kbS1m_6B6-SME_kbS1m, SME_kbS1m_6BF-SME_kbS1m	
00032160 0000 0000                  		dc.w SME_kbS1m_6C8-SME_kbS1m, SME_kbS1m_6D1-SME_kbS1m	
00032164 0000 0000                  		dc.w SME_kbS1m_6DA-SME_kbS1m, SME_kbS1m_6E3-SME_kbS1m	
00032168 0000 0000                  		dc.w SME_kbS1m_6E8-SME_kbS1m, SME_kbS1m_6F1-SME_kbS1m	
0003216C 0000 0000                  		dc.w SME_kbS1m_6FA-SME_kbS1m, SME_kbS1m_703-SME_kbS1m	
00032170 0000 0000                  		dc.w SME_kbS1m_70A-SME_kbS1m, SME_kbS1m_713-SME_kbS1m	
00032174 0000 0000                  		dc.w SME_kbS1m_71C-SME_kbS1m, SME_kbS1m_723-SME_kbS1m	
00032178 0000 0000                  		dc.w SME_kbS1m_72A-SME_kbS1m, SME_kbS1m_72F-SME_kbS1m	
0003217C 0000 0000                  		dc.w SME_kbS1m_736-SME_kbS1m, SME_kbS1m_73D-SME_kbS1m	
00032180 0000 0000                  		dc.w SME_kbS1m_742-SME_kbS1m, SME_kbS1m_747-SME_kbS1m	
00032184 0000 0000                  		dc.w SME_kbS1m_74C-SME_kbS1m, SME_kbS1m_753-SME_kbS1m	
00032188 0000 0000                  		dc.w SME_kbS1m_75A-SME_kbS1m, SME_kbS1m_75D-SME_kbS1m	
0003218C 0000 0000                  		dc.w SME_kbS1m_764-SME_kbS1m, SME_kbS1m_769-SME_kbS1m	
00032190 0000 0000                  		dc.w SME_kbS1m_770-SME_kbS1m, SME_kbS1m_777-SME_kbS1m	
00032194 0000 0000                  		dc.w SME_kbS1m_77E-SME_kbS1m, SME_kbS1m_785-SME_kbS1m	
00032198 00                         SME_kbS1m_1B4:	dc.b 0	
00032199 0370 0050 0880 0E          SME_kbS1m_1B5:	dc.b 3, $70, 0, $50, 8, $80, $E	
000321A0 03B0 1710 2370 00          SME_kbS1m_1BC:	dc.b 3, $B0, $17, $10, $23, $70, 0	
000321A7 0380 2530 2E20 32          SME_kbS1m_1C3:	dc.b 3, $80, $25, $30, $2E, $20, $32	
000321AE 02B0 3550 41               SME_kbS1m_1CA:	dc.b 2, $B0, $35, $50, $41	
000321B3 03B0 4710 5350 41          SME_kbS1m_1CF:	dc.b 3, $B0, $47, $10, $53, $50, $41	
000321BA 03B0 5510 6150 41          SME_kbS1m_1D6:	dc.b 3, $B0, $55, $10, $61, $50, $41	
000321C1 0380 6330 2E20 32          SME_kbS1m_1DD:	dc.b 3, $80, $63, $30, $2E, $20, $32	
000321C8 0280 6C70 00               SME_kbS1m_1E4:	dc.b 2, $80, $6C, $70, 0	
000321CD 04B0 AF70 BB00 C330 C4     SME_kbS1m_1E9:	dc.b 4, $B0, $AF, $70, $BB, 0, $C3, $30, $C4	
000321D6 04B0 C870 D410 DC10 DE     SME_kbS1m_1F2:	dc.b 4, $B0, $C8, $70, $D4, $10, $DC, $10, $DE	
000321DF 0480 E010 E930 EB30 EF     SME_kbS1m_1FB:	dc.b 4, $80, $E0, $10, $E9, $30, $EB, $30, $EF	
000321E8 04B0 F370 FF11 0701 09     SME_kbS1m_204:	dc.b 4, $B0, $F3, $70, $FF, $11, 7, 1, 9	
000321F1 04B1 0A71 1611 1E51 20     SME_kbS1m_20D:	dc.b 4, $B1, $A, $71, $16, $11, $1E, $51, $20	
000321FA 04F1 2651 3621 3C31 3F     SME_kbS1m_216:	dc.b 4, $F1, $26, $51, $36, $21, $3C, $31, $3F	
00032203 0481 4371 4C11 5401 56     SME_kbS1m_21F:	dc.b 4, $81, $43, $71, $4C, $11, $54, 1, $56	
0003220C 0481 5721 6031 6331 67     SME_kbS1m_228:	dc.b 4, $81, $57, $21, $60, $31, $63, $31, $67	
00032215 0351 EF81 F571 FE          SME_kbS1m_231:	dc.b 3, $51, $EF, $81, $F5, $71, $FE	
0003221C 03B2 0612 1272 14          SME_kbS1m_238:	dc.b 3, $B2, 6, $12, $12, $72, $14	
00032223 0382 1C52 2502 2B          SME_kbS1m_23F:	dc.b 3, $82, $1C, $52, $25, 2, $2B	
0003222A 02B2 2C72 38               SME_kbS1m_246:	dc.b 2, $B2, $2C, $72, $38	
0003222F 0312 40B2 4272 38          SME_kbS1m_24B:	dc.b 3, $12, $40, $B2, $42, $72, $38	
00032236 0412 4EB2 5052 5C02 62     SME_kbS1m_252:	dc.b 4, $12, $4E, $B2, $50, $52, $5C, 2, $62	
0003223F 0382 6352 2502 2B          SME_kbS1m_25B:	dc.b 3, $82, $63, $52, $25, 2, $2B	
00032246 0282 6C71 FE               SME_kbS1m_262:	dc.b 2, $82, $6C, $71, $FE	
0003224B 04B2 E352 EF32 F522 F9     SME_kbS1m_267:	dc.b 4, $B2, $E3, $52, $EF, $32, $F5, $22, $F9	
00032254 04B2 FC13 0833 0A53 0E     SME_kbS1m_270:	dc.b 4, $B2, $FC, $13, 8, $33, $A, $53, $E	
0003225D 0483 1433 1D33 2113 25     SME_kbS1m_279:	dc.b 4, $83, $14, $33, $1D, $33, $21, $13, $25	
00032266 04B3 2733 3333 3723 3B     SME_kbS1m_282:	dc.b 4, $B3, $27, $33, $33, $33, $37, $23, $3B	
0003226F 04B3 3E53 4A73 5003 58     SME_kbS1m_28B:	dc.b 4, $B3, $3E, $53, $4A, $73, $50, 3, $58	
00032278 04F3 5923 6913 6C73 6E     SME_kbS1m_294:	dc.b 4, $F3, $59, $23, $69, $13, $6C, $73, $6E	
00032281 0483 7633 7F33 8323 87     SME_kbS1m_29D:	dc.b 4, $83, $76, $33, $7F, $33, $83, $23, $87	
0003228A 0483 8A33 9333 9723 9B     SME_kbS1m_2A6:	dc.b 4, $83, $8A, $33, $93, $33, $97, $23, $9B	
00032293 0224 21F4 24               SME_kbS1m_2AF:	dc.b 2, $24, $21, $F4, $24	
00032298 0224 34F4 37               SME_kbS1m_2B4:	dc.b 2, $24, $34, $F4, $37	
0003229D 0224 21F4 47               SME_kbS1m_2B9:	dc.b 2, $24, $21, $F4, $47	
000322A2 0224 34F4 57               SME_kbS1m_2BE:	dc.b 2, $24, $34, $F4, $57	
000322A7 04B4 8B04 9734 9824 9C     SME_kbS1m_2C3:	dc.b 4, $B4, $8B, 4, $97, $34, $98, $24, $9C	
000322B0 0224 9FF4 A2               SME_kbS1m_2CC:	dc.b 2, $24, $9F, $F4, $A2	
000322B5 04B4 B204 BE34 BF24 C3     SME_kbS1m_2D1:	dc.b 4, $B4, $B2, 4, $BE, $34, $BF, $24, $C3	
000322BE 0224 9FF4 C6               SME_kbS1m_2DA:	dc.b 2, $24, $9F, $F4, $C6	
000322C3 0225 04F5 07               SME_kbS1m_2DF:	dc.b 2, $25, 4, $F5, 7	
000322C8 0225 17F5 1A               SME_kbS1m_2E4:	dc.b 2, $25, $17, $F5, $1A	
000322CD 0225 04F5 2A               SME_kbS1m_2E9:	dc.b 2, $25, 4, $F5, $2A	
000322D2 0225 17F5 3A               SME_kbS1m_2EE:	dc.b 2, $25, $17, $F5, $3A	
000322D7 0315 70B5 7255 7E          SME_kbS1m_2F3:	dc.b 3, $15, $70, $B5, $72, $55, $7E	
000322DE 0225 84F5 87               SME_kbS1m_2FA:	dc.b 2, $25, $84, $F5, $87	
000322E3 0315 97B5 9955 A5          SME_kbS1m_2FF:	dc.b 3, $15, $97, $B5, $99, $55, $A5	
000322EA 0225 84F5 AB               SME_kbS1m_306:	dc.b 2, $25, $84, $F5, $AB	
000322EF 0325 E6B5 E925 F5          SME_kbS1m_30B:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
000322F6 0455 F835 FE26 0216 05     SME_kbS1m_312:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
000322FF 0416 0726 0936 0C16 10     SME_kbS1m_31B:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00032308 0426 1236 1526 1936 1C     SME_kbS1m_324:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
00032311 0416 2026 2236 2526 29     SME_kbS1m_32D:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
0003231A 0316 2C76 2E56 36          SME_kbS1m_336:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
00032321 02F6 3C26 4C               SME_kbS1m_33D:	dc.b 2, $F6, $3C, $26, $4C	
00032326 02B6 4F06 5B               SME_kbS1m_342:	dc.b 2, $B6, $4F, 6, $5B	
0003232B 0316 5C76 5E26 66          SME_kbS1m_347:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
00032332 0426 6936 6C26 7016 73     SME_kbS1m_34E:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
0003233B 0286 7536 7E               SME_kbS1m_357:	dc.b 2, $86, $75, $36, $7E	
00032340 02B6 8226 8E               SME_kbS1m_35C:	dc.b 2, $B6, $82, $26, $8E	
00032345 0306 91B6 9226 9E          SME_kbS1m_361:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
0003234C 01B6 A1                    SME_kbS1m_368:	dc.b 1, $B6, $A1	
0003234F 0326 AD76 B016 B8          SME_kbS1m_36B:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
00032356 0426 BA36 BD26 C116 C4     SME_kbS1m_372:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
0003235F 0456 C636 CC26 D016 D3     SME_kbS1m_37B:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
00032368 0456 D526 DB36 DE26 E2     SME_kbS1m_384:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
00032371 02B6 E526 F1               SME_kbS1m_38D:	dc.b 2, $B6, $E5, $26, $F1	
00032376 01B6 F4                    SME_kbS1m_392:	dc.b 1, $B6, $F4	
00032379 0277 0027 08               SME_kbS1m_395:	dc.b 2, $77, 0, $27, 8	
0003237E 01B7 0B                    SME_kbS1m_39A:	dc.b 1, $B7, $B	
00032381 0217 17B7 19               SME_kbS1m_39D:	dc.b 2, $17, $17, $B7, $19	
00032386 0327 2577 2857 30          SME_kbS1m_3A2:	dc.b 3, $27, $25, $77, $28, $57, $30	
0003238D 0487 3637 3F37 4327 47     SME_kbS1m_3A9:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
00032396 0427 4A77 4D27 5537 58     SME_kbS1m_3B2:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
0003239F 0357 5C37 6227 66          SME_kbS1m_3BB:	dc.b 3, $57, $5C, $37, $62, $27, $66	
000323A6 0327 6977 6C27 74          SME_kbS1m_3C2:	dc.b 3, $27, $69, $77, $6C, $27, $74	
000323AD 0317 7777 7917 81          SME_kbS1m_3C9:	dc.b 3, $17, $77, $77, $79, $17, $81	
000323B4 01F7 83                    SME_kbS1m_3D0:	dc.b 1, $F7, $83	
000323B7 0407 9377 9407 9C77 9D     SME_kbS1m_3D3:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
000323C0 0417 A527 A787 AA37 B3     SME_kbS1m_3DC:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
000323C9 0217 B7B7 B9               SME_kbS1m_3E5:	dc.b 2, $17, $B7, $B7, $B9	
000323CE 0317 C577 C717 CF          SME_kbS1m_3EA:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
000323D5 0307 D187 D217 DB          SME_kbS1m_3F1:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
000323DC 02F7 DD07 ED               SME_kbS1m_3F8:	dc.b 2, $F7, $DD, 7, $ED	
000323E1 0428 0078 0328 0B28 0E     SME_kbS1m_3FD:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
000323EA 0328 1178 1458 1C          SME_kbS1m_406:	dc.b 3, $28, $11, $78, $14, $58, $1C	
000323F1 02B8 2238 2E               SME_kbS1m_40D:	dc.b 2, $B8, $22, $38, $2E	
000323F6 02B8 3228 3E               SME_kbS1m_412:	dc.b 2, $B8, $32, $28, $3E	
000323FB 0428 4138 4428 4878 4B     SME_kbS1m_417:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
00032404 0388 5338 5C28 60          SME_kbS1m_420:	dc.b 3, $88, $53, $38, $5C, $28, $60	
0003240B 02B8 6328 6F               SME_kbS1m_427:	dc.b 2, $B8, $63, $28, $6F	
00032410 0388 7258 7B08 81          SME_kbS1m_42C:	dc.b 3, $88, $72, $58, $7B, 8, $81	
00032417 01B8 82                    SME_kbS1m_433:	dc.b 1, $B8, $82	
0003241A 02B8 8E28 9A               SME_kbS1m_436:	dc.b 2, $B8, $8E, $28, $9A	
0003241F 0338 9DB8 A108 AD          SME_kbS1m_43B:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
00032426 01B8 AE                    SME_kbS1m_442:	dc.b 1, $B8, $AE	
00032429 0208 BAB8 BB               SME_kbS1m_445:	dc.b 2, 8, $BA, $B8, $BB	
0003242E 0288 C758 D0               SME_kbS1m_44A:	dc.b 2, $88, $C7, $58, $D0	
00032433 0388 D638 DF28 E3          SME_kbS1m_44F:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
0003243A 01B8 E6                    SME_kbS1m_456:	dc.b 1, $B8, $E6	
0003243D 02B8 F228 FE               SME_kbS1m_459:	dc.b 2, $B8, $F2, $28, $FE	
00032442 0329 0119 04B9 06          SME_kbS1m_45E:	dc.b 3, $29, 1, $19, 4, $B9, 6	
00032449 01B9 12                    SME_kbS1m_465:	dc.b 1, $B9, $12	
0003244C 0209 1EB9 1F               SME_kbS1m_468:	dc.b 2, 9, $1E, $B9, $1F	
00032451 02B9 2B29 37               SME_kbS1m_46D:	dc.b 2, $B9, $2B, $29, $37	
00032456 0419 3A39 3C59 4019 46     SME_kbS1m_472:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
0003245F 0309 4879 4929 51          SME_kbS1m_47B:	dc.b 3, 9, $48, $79, $49, $29, $51	
00032466 0309 5479 5529 5D          SME_kbS1m_482:	dc.b 3, 9, $54, $79, $55, $29, $5D	
0003246D 0259 60B9 66               SME_kbS1m_489:	dc.b 2, $59, $60, $B9, $66	
00032472 0309 7289 7339 7C          SME_kbS1m_48E:	dc.b 3, 9, $72, $89, $73, $39, $7C	
00032479 0319 8059 8239 88          SME_kbS1m_495:	dc.b 3, $19, $80, $59, $82, $39, $88	
00032480 0359 8C39 9219 96          SME_kbS1m_49C:	dc.b 3, $59, $8C, $39, $92, $19, $96	
00032487 0209 98B9 99               SME_kbS1m_4A3:	dc.b 2, 9, $98, $B9, $99	
0003248C 0419 A509 A709 A8B9 A9     SME_kbS1m_4A8:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
00032495 0319 B5B9 B729 C3          SME_kbS1m_4B1:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
0003249C 0319 C679 C829 D0          SME_kbS1m_4B8:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
000324A3 0209 D389 D4               SME_kbS1m_4BF:	dc.b 2, 9, $D3, $89, $D4	
000324A8 0329 DD79 E029 E8          SME_kbS1m_4C4:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
000324AF 01B9 EB                    SME_kbS1m_4CB:	dc.b 1, $B9, $EB	
000324B2 0439 F729 FB79 FE7A 06     SME_kbS1m_4CE:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
000324BB 041A 0EBA 105A 1C2A 22     SME_kbS1m_4D7:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
000324C4 032A 25BA 287A 34          SME_kbS1m_4E0:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
000324CB 042A 3C1A 3F1A 41FA 43     SME_kbS1m_4E7:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
000324D4 0439 F729 FB79 FE7A 06     SME_kbS1m_4F0:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
000324DD 041A 0EBA 105A 1C2A 22     SME_kbS1m_4F9:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
000324E6 032A 25BA 287A 34          SME_kbS1m_502:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
000324ED 042A 3C1A 3F1A 41FA 43     SME_kbS1m_509:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
000324F6 04BA 530A 5F1A 605A 62     SME_kbS1m_512:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
000324FF 043A 687A 6C3A 742A 78     SME_kbS1m_51B:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
00032508 032A 7B3A 7EBA 82          SME_kbS1m_524:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
0003250F 040A 8E7A 8F2A 975A 9A     SME_kbS1m_52B:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
00032518 03BA A05A AC1A B2          SME_kbS1m_534:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
0003251F 02BA B45A C0               SME_kbS1m_53B:	dc.b 2, $BA, $B4, $5A, $C0	
00032524 032A C67A C92A D1          SME_kbS1m_540:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
0003252B 02BA D42A E0               SME_kbS1m_547:	dc.b 2, $BA, $D4, $2A, $E0	
00032530 02BA E32A E0               SME_kbS1m_54C:	dc.b 2, $BA, $E3, $2A, $E0	
00032535 02BA EF2A E0               SME_kbS1m_551:	dc.b 2, $BA, $EF, $2A, $E0	
0003253A 02BA FB2A E0               SME_kbS1m_556:	dc.b 2, $BA, $FB, $2A, $E0	
0003253F 02BB 072A E0               SME_kbS1m_55B:	dc.b 2, $BB, 7, $2A, $E0	
00032544 03BB 132B 1F2B 22          SME_kbS1m_560:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
0003254B 03BB 252B 1F2B 22          SME_kbS1m_567:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032552 02B7 EF37 FB               SME_kbS1m_56E:	dc.b 2, $B7, $EF, $37, $FB	
00032557 033B 313B 358B 39          SME_kbS1m_573:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
0003255E 045B 423B 482B 4C5B 4F     SME_kbS1m_57A:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
00032567 045B 553B 5B2B 5F7B 62     SME_kbS1m_583:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
00032570 042B 6ABB 6D0B 791B 7A     SME_kbS1m_58C:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
00032579 022B 6ABB 7C               SME_kbS1m_595:	dc.b 2, $2B, $6A, $BB, $7C	
0003257E 057B 881B 935B 953B 9B2B+  SME_kbS1m_59A:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032589 052B 901B 935B 953B 9B2B+  SME_kbS1m_5A5:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032594 01FB A2                    SME_kbS1m_5B0:	dc.b 1, $FB, $A2	
00032597 01FB B2                    SME_kbS1m_5B3:	dc.b 1, $FB, $B2	
0003259A 01FB C2                    SME_kbS1m_5B6:	dc.b 1, $FB, $C2	
0003259D 01FB D2                    SME_kbS1m_5B9:	dc.b 1, $FB, $D2	
000325A0 01FB E2                    SME_kbS1m_5BC:	dc.b 1, $FB, $E2	
000325A3 020B F2BB F3               SME_kbS1m_5BF:	dc.b 2, $B, $F2, $BB, $F3	
000325A8 020B FFBC 00               SME_kbS1m_5C4:	dc.b 2, $B, $FF, $BC, 0	
000325AD 048C 0C1C 153C 172C 1B     SME_kbS1m_5C9:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
000325B6 048C 0C1C 1E3C 202C 24     SME_kbS1m_5D2:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
000325BF 042C 277C 2A2C 321C 35     SME_kbS1m_5DB:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
000325C8 032C 37BC 3A2C 46          SME_kbS1m_5E4:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
000325CF 037C 490C 518C 52          SME_kbS1m_5EB:	dc.b 3, $7C, $49, $C, $51, $8C, $52	
000325D6 040C 5BBC 5C0C 685C 69     SME_kbS1m_5F2:	dc.b 4, $C, $5B, $BC, $5C, $C, $68, $5C, $69	
000325DF 030C 6FFC 702C 80          SME_kbS1m_5FB:	dc.b 3, $C, $6F, $FC, $70, $2C, $80	
000325E6 042C 83BC 861C 922C 94     SME_kbS1m_602:	dc.b 4, $2C, $83, $BC, $86, $1C, $92, $2C, $94	
000325EF 03FC 970C A72C A8          SME_kbS1m_60B:	dc.b 3, $FC, $97, $C, $A7, $2C, $A8	
000325F6 042C 83BC AB1C B72C B9     SME_kbS1m_612:	dc.b 4, $2C, $83, $BC, $AB, $1C, $B7, $2C, $B9	
000325FF 032C BCFC BF0C CF          SME_kbS1m_61B:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
00032606 032C D0FC D30C CF          SME_kbS1m_622:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
0003260D 031C E3FC E50C CF          SME_kbS1m_629:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
00032614 03BC F50D 015D 02          SME_kbS1m_630:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
0003261B 03BD 080D 145D 15          SME_kbS1m_637:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
00032622 04FD 1B0D 2B1D 2C1D 2E     SME_kbS1m_63E:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
0003262B 042D 307D 331D 3B2D 3D     SME_kbS1m_647:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
00032634 042D 307D 401D 3B2D 3D     SME_kbS1m_650:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
0003263D 042D 483D 4B7D 4F2D 3D     SME_kbS1m_659:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
00032646 027D 768D 7E               SME_kbS1m_662:	dc.b 2, $7D, $76, $8D, $7E	
0003264B 032D 877D 8A5D 92          SME_kbS1m_667:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
00032652 032D 877D 985D 92          SME_kbS1m_66E:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
00032659 032D 877D A05D 92          SME_kbS1m_675:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
00032660 03BD A82D B43D B7          SME_kbS1m_67C:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
00032667 03BD BB2D C73D CA          SME_kbS1m_683:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
0003266E 031D CE8D D03D D9          SME_kbS1m_68A:	dc.b 3, $1D, $CE, $8D, $D0, $3D, $D9	
00032675 031D CE8D DD1D E6          SME_kbS1m_691:	dc.b 3, $1D, $CE, $8D, $DD, $1D, $E6	
0003267C 031D CE5D E87D EE          SME_kbS1m_698:	dc.b 3, $1D, $CE, $5D, $E8, $7D, $EE	
00032683 031D CE8D F61D FF          SME_kbS1m_69F:	dc.b 3, $1D, $CE, $8D, $F6, $1D, $FF	
0003268A 048E 0128 113E 0A08 15     SME_kbS1m_6A6:	dc.b 4, $8E, 1, $28, $11, $3E, $A, 8, $15	
00032693 032E 0E7E 115E 19          SME_kbS1m_6AF:	dc.b 3, $2E, $E, $7E, $11, $5E, $19	
0003269A 042E 1F7E 222E 2A2E 2D     SME_kbS1m_6B6:	dc.b 4, $2E, $1F, $7E, $22, $2E, $2A, $2E, $2D	
000326A3 042D 877E 302E 2A2E 2D     SME_kbS1m_6BF:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $2D	
000326AC 042D 877E 302E 2A2E 38     SME_kbS1m_6C8:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $38	
000326B5 042D 877E 3B2E 2A2E 2D     SME_kbS1m_6D1:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $2D	
000326BE 042D 877E 3B2E 2A2E 38     SME_kbS1m_6DA:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $38	
000326C7 02BE 433E 4F               SME_kbS1m_6E3:	dc.b 2, $BE, $43, $3E, $4F	
000326CC 042E 537E 562E 5E3E 4F     SME_kbS1m_6E8:	dc.b 4, $2E, $53, $7E, $56, $2E, $5E, $3E, $4F	
000326D5 042E 617E 642E 6C2E 6F     SME_kbS1m_6F1:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
000326DE 042E 723E 753E 795E 7D     SME_kbS1m_6FA:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
000326E7 03BE 832E 8F2E 6F          SME_kbS1m_703:	dc.b 3, $BE, $83, $2E, $8F, $2E, $6F	
000326EE 042E 927E 952E 9D2E A0     SME_kbS1m_70A:	dc.b 4, $2E, $92, $7E, $95, $2E, $9D, $2E, $A0	
000326F7 042E A33E A65E AA2E 6F     SME_kbS1m_713:	dc.b 4, $2E, $A3, $3E, $A6, $5E, $AA, $2E, $6F	
00032700 038E B01E B92E BB          SME_kbS1m_71C:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032707 035E BE3E C40E C8          SME_kbS1m_723:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
0003270E 025E C93E CF               SME_kbS1m_72A:	dc.b 2, $5E, $C9, $3E, $CF	
00032713 035E BE3E C40E C8          SME_kbS1m_72F:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
0003271A 038E B01E B92E BB          SME_kbS1m_736:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032721 02BE D30E DF               SME_kbS1m_73D:	dc.b 2, $BE, $D3, $E, $DF	
00032726 025E E03E E6               SME_kbS1m_742:	dc.b 2, $5E, $E0, $3E, $E6	
0003272B 02BE D30E DF               SME_kbS1m_747:	dc.b 2, $BE, $D3, $E, $DF	
00032730 03BB 132B 1F2B 22          SME_kbS1m_74C:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032737 03BB 252B 1F2B 22          SME_kbS1m_753:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
0003273E 01BF 1C                    SME_kbS1m_75A:	dc.b 1, $BF, $1C	
00032741 035F 287F 2E5F 36          SME_kbS1m_75D:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
00032748 02FF 3C5F 4C               SME_kbS1m_764:	dc.b 2, $FF, $3C, $5F, $4C	
0003274D 038F 523F 5B5F 5F          SME_kbS1m_769:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
00032754 038F 653F 5B5F 5F          SME_kbS1m_770:	dc.b 3, $8F, $65, $3F, $5B, $5F, $5F	
0003275B 03BB 132B 1F2B 22          SME_kbS1m_777:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032762 03BB 252B 1F2B 22          SME_kbS1m_77E:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032769 04BD 570D 633D 642D 68     SME_kbS1m_785:	dc.b 4, $BD, $57, $D, $63, $3D, $64, $2D, $68	
00032772                            		even
00032772                            		even
00032772                            SuperSonicDynPLC:
00032772                            		include	"_inc\Super Sonic dynamic pattern load cues.asm"
00032772                            ; --------------------------------------------------------------------------------
00032772                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00032772                            
00032772                            SME_eiGQM:	
00032772 0000 0000                  		dc.w SME_eiGQM_1AC-SME_eiGQM, SME_eiGQM_1AD-SME_eiGQM	
00032776 0000 0000                  		dc.w SME_eiGQM_1B4-SME_eiGQM, SME_eiGQM_1BB-SME_eiGQM	
0003277A 0000 0000                  		dc.w SME_eiGQM_1C2-SME_eiGQM, SME_eiGQM_1C9-SME_eiGQM	
0003277E 0000 0000                  		dc.w SME_eiGQM_1D2-SME_eiGQM, SME_eiGQM_1DB-SME_eiGQM	
00032782 0000 0000                  		dc.w SME_eiGQM_1E2-SME_eiGQM, SME_eiGQM_1E7-SME_eiGQM	
00032786 0000 0000                  		dc.w SME_eiGQM_1F0-SME_eiGQM, SME_eiGQM_1F9-SME_eiGQM	
0003278A 0000 0000                  		dc.w SME_eiGQM_202-SME_eiGQM, SME_eiGQM_20B-SME_eiGQM	
0003278E 0000 0000                  		dc.w SME_eiGQM_214-SME_eiGQM, SME_eiGQM_21D-SME_eiGQM	
00032792 0000 0000                  		dc.w SME_eiGQM_226-SME_eiGQM, SME_eiGQM_22F-SME_eiGQM	
00032796 0000 0000                  		dc.w SME_eiGQM_236-SME_eiGQM, SME_eiGQM_23D-SME_eiGQM	
0003279A 0000 0000                  		dc.w SME_eiGQM_244-SME_eiGQM, SME_eiGQM_24B-SME_eiGQM	
0003279E 0000 0000                  		dc.w SME_eiGQM_254-SME_eiGQM, SME_eiGQM_25D-SME_eiGQM	
000327A2 0000 0000                  		dc.w SME_eiGQM_264-SME_eiGQM, SME_eiGQM_269-SME_eiGQM	
000327A6 0000 0000                  		dc.w SME_eiGQM_272-SME_eiGQM, SME_eiGQM_27B-SME_eiGQM	
000327AA 0000 0000                  		dc.w SME_eiGQM_284-SME_eiGQM, SME_eiGQM_28D-SME_eiGQM	
000327AE 0000 0000                  		dc.w SME_eiGQM_296-SME_eiGQM, SME_eiGQM_29F-SME_eiGQM	
000327B2 0000 0000                  		dc.w SME_eiGQM_2A8-SME_eiGQM, SME_eiGQM_2B1-SME_eiGQM	
000327B6 0000 0000                  		dc.w SME_eiGQM_2BA-SME_eiGQM, SME_eiGQM_2C3-SME_eiGQM	
000327BA 0000 0000                  		dc.w SME_eiGQM_2CC-SME_eiGQM, SME_eiGQM_2D5-SME_eiGQM	
000327BE 0000 0000                  		dc.w SME_eiGQM_2DE-SME_eiGQM, SME_eiGQM_2E7-SME_eiGQM	
000327C2 0000 0000                  		dc.w SME_eiGQM_2F0-SME_eiGQM, SME_eiGQM_2F9-SME_eiGQM	
000327C6 0000 0000                  		dc.w SME_eiGQM_302-SME_eiGQM, SME_eiGQM_30B-SME_eiGQM	
000327CA 0000 0000                  		dc.w SME_eiGQM_314-SME_eiGQM, SME_eiGQM_31D-SME_eiGQM	
000327CE 0000 0000                  		dc.w SME_eiGQM_326-SME_eiGQM, SME_eiGQM_32F-SME_eiGQM	
000327D2 0000 0000                  		dc.w SME_eiGQM_338-SME_eiGQM, SME_eiGQM_341-SME_eiGQM	
000327D6 0000 0000                  		dc.w SME_eiGQM_348-SME_eiGQM, SME_eiGQM_351-SME_eiGQM	
000327DA 0000 0000                  		dc.w SME_eiGQM_35A-SME_eiGQM, SME_eiGQM_363-SME_eiGQM	
000327DE 0000 0000                  		dc.w SME_eiGQM_36C-SME_eiGQM, SME_eiGQM_373-SME_eiGQM	
000327E2 0000 0000                  		dc.w SME_eiGQM_378-SME_eiGQM, SME_eiGQM_37D-SME_eiGQM	
000327E6 0000 0000                  		dc.w SME_eiGQM_384-SME_eiGQM, SME_eiGQM_38D-SME_eiGQM	
000327EA 0000 0000                  		dc.w SME_eiGQM_392-SME_eiGQM, SME_eiGQM_397-SME_eiGQM	
000327EE 0000 0000                  		dc.w SME_eiGQM_39E-SME_eiGQM, SME_eiGQM_3A1-SME_eiGQM	
000327F2 0000 0000                  		dc.w SME_eiGQM_3A8-SME_eiGQM, SME_eiGQM_3B1-SME_eiGQM	
000327F6 0000 0000                  		dc.w SME_eiGQM_3BA-SME_eiGQM, SME_eiGQM_3C3-SME_eiGQM	
000327FA 0000 0000                  		dc.w SME_eiGQM_3C8-SME_eiGQM, SME_eiGQM_3CB-SME_eiGQM	
000327FE 0000 0000                  		dc.w SME_eiGQM_3D0-SME_eiGQM, SME_eiGQM_3D3-SME_eiGQM	
00032802 0000 0000                  		dc.w SME_eiGQM_3D8-SME_eiGQM, SME_eiGQM_3DF-SME_eiGQM	
00032806 0000 0000                  		dc.w SME_eiGQM_3E8-SME_eiGQM, SME_eiGQM_3F1-SME_eiGQM	
0003280A 0000 0000                  		dc.w SME_eiGQM_3F8-SME_eiGQM, SME_eiGQM_3FF-SME_eiGQM	
0003280E 0000 0000                  		dc.w SME_eiGQM_406-SME_eiGQM, SME_eiGQM_409-SME_eiGQM	
00032812 0000 0000                  		dc.w SME_eiGQM_412-SME_eiGQM, SME_eiGQM_41B-SME_eiGQM	
00032816 0000 0000                  		dc.w SME_eiGQM_420-SME_eiGQM, SME_eiGQM_427-SME_eiGQM	
0003281A 0000 0000                  		dc.w SME_eiGQM_42E-SME_eiGQM, SME_eiGQM_433-SME_eiGQM	
0003281E 0000 0000                  		dc.w SME_eiGQM_43C-SME_eiGQM, SME_eiGQM_443-SME_eiGQM	
00032822 0000 0000                  		dc.w SME_eiGQM_448-SME_eiGQM, SME_eiGQM_44D-SME_eiGQM	
00032826 0000 0000                  		dc.w SME_eiGQM_456-SME_eiGQM, SME_eiGQM_45D-SME_eiGQM	
0003282A 0000 0000                  		dc.w SME_eiGQM_462-SME_eiGQM, SME_eiGQM_469-SME_eiGQM	
0003282E 0000 0000                  		dc.w SME_eiGQM_46C-SME_eiGQM, SME_eiGQM_471-SME_eiGQM	
00032832 0000 0000                  		dc.w SME_eiGQM_478-SME_eiGQM, SME_eiGQM_47B-SME_eiGQM	
00032836 0000 0000                  		dc.w SME_eiGQM_480-SME_eiGQM, SME_eiGQM_485-SME_eiGQM	
0003283A 0000 0000                  		dc.w SME_eiGQM_48C-SME_eiGQM, SME_eiGQM_48F-SME_eiGQM	
0003283E 0000 0000                  		dc.w SME_eiGQM_494-SME_eiGQM, SME_eiGQM_49B-SME_eiGQM	
00032842 0000 0000                  		dc.w SME_eiGQM_49E-SME_eiGQM, SME_eiGQM_4A3-SME_eiGQM	
00032846 0000 0000                  		dc.w SME_eiGQM_4A8-SME_eiGQM, SME_eiGQM_4B1-SME_eiGQM	
0003284A 0000 0000                  		dc.w SME_eiGQM_4B8-SME_eiGQM, SME_eiGQM_4BF-SME_eiGQM	
0003284E 0000 0000                  		dc.w SME_eiGQM_4C4-SME_eiGQM, SME_eiGQM_4CB-SME_eiGQM	
00032852 0000 0000                  		dc.w SME_eiGQM_4D2-SME_eiGQM, SME_eiGQM_4D9-SME_eiGQM	
00032856 0000 0000                  		dc.w SME_eiGQM_4DE-SME_eiGQM, SME_eiGQM_4E7-SME_eiGQM	
0003285A 0000 0000                  		dc.w SME_eiGQM_4EE-SME_eiGQM, SME_eiGQM_4F5-SME_eiGQM	
0003285E 0000 0000                  		dc.w SME_eiGQM_4FA-SME_eiGQM, SME_eiGQM_501-SME_eiGQM	
00032862 0000 0000                  		dc.w SME_eiGQM_504-SME_eiGQM, SME_eiGQM_50D-SME_eiGQM	
00032866 0000 0000                  		dc.w SME_eiGQM_516-SME_eiGQM, SME_eiGQM_51D-SME_eiGQM	
0003286A 0000 0000                  		dc.w SME_eiGQM_526-SME_eiGQM, SME_eiGQM_52F-SME_eiGQM	
0003286E 0000 0000                  		dc.w SME_eiGQM_538-SME_eiGQM, SME_eiGQM_53F-SME_eiGQM	
00032872 0000 0000                  		dc.w SME_eiGQM_548-SME_eiGQM, SME_eiGQM_551-SME_eiGQM	
00032876 0000 0000                  		dc.w SME_eiGQM_55A-SME_eiGQM, SME_eiGQM_561-SME_eiGQM	
0003287A 0000 0000                  		dc.w SME_eiGQM_56A-SME_eiGQM, SME_eiGQM_571-SME_eiGQM	
0003287E 0000 0000                  		dc.w SME_eiGQM_576-SME_eiGQM, SME_eiGQM_57D-SME_eiGQM	
00032882 0000 0000                  		dc.w SME_eiGQM_582-SME_eiGQM, SME_eiGQM_587-SME_eiGQM	
00032886 0000 0000                  		dc.w SME_eiGQM_58C-SME_eiGQM, SME_eiGQM_591-SME_eiGQM	
0003288A 0000 0000                  		dc.w SME_eiGQM_596-SME_eiGQM, SME_eiGQM_59D-SME_eiGQM	
0003288E 0000 0000                  		dc.w SME_eiGQM_5A4-SME_eiGQM, SME_eiGQM_5A9-SME_eiGQM	
00032892 0000 0000                  		dc.w SME_eiGQM_5B0-SME_eiGQM, SME_eiGQM_5B9-SME_eiGQM	
00032896 0000 0000                  		dc.w SME_eiGQM_5C2-SME_eiGQM, SME_eiGQM_5CB-SME_eiGQM	
0003289A 0000 0000                  		dc.w SME_eiGQM_5D0-SME_eiGQM, SME_eiGQM_5DB-SME_eiGQM	
0003289E 0000 0000                  		dc.w SME_eiGQM_5E6-SME_eiGQM, SME_eiGQM_5E9-SME_eiGQM	
000328A2 0000 0000                  		dc.w SME_eiGQM_5EC-SME_eiGQM, SME_eiGQM_5EF-SME_eiGQM	
000328A6 0000 0000                  		dc.w SME_eiGQM_5F2-SME_eiGQM, SME_eiGQM_5F5-SME_eiGQM	
000328AA 0000 0000                  		dc.w SME_eiGQM_5FA-SME_eiGQM, SME_eiGQM_5FF-SME_eiGQM	
000328AE 0000 0000                  		dc.w SME_eiGQM_608-SME_eiGQM, SME_eiGQM_611-SME_eiGQM	
000328B2 0000 0000                  		dc.w SME_eiGQM_61A-SME_eiGQM, SME_eiGQM_621-SME_eiGQM	
000328B6 0000 0000                  		dc.w SME_eiGQM_62A-SME_eiGQM, SME_eiGQM_633-SME_eiGQM	
000328BA 0000 0000                  		dc.w SME_eiGQM_63C-SME_eiGQM, SME_eiGQM_645-SME_eiGQM	
000328BE 0000 0000                  		dc.w SME_eiGQM_64E-SME_eiGQM, SME_eiGQM_657-SME_eiGQM	
000328C2 0000 0000                  		dc.w SME_eiGQM_65E-SME_eiGQM, SME_eiGQM_665-SME_eiGQM	
000328C6 0000 0000                  		dc.w SME_eiGQM_66C-SME_eiGQM, SME_eiGQM_673-SME_eiGQM	
000328CA 0000 0000                  		dc.w SME_eiGQM_67A-SME_eiGQM, SME_eiGQM_683-SME_eiGQM	
000328CE 0000 0000                  		dc.w SME_eiGQM_68C-SME_eiGQM, SME_eiGQM_695-SME_eiGQM	
000328D2 0000 0000                  		dc.w SME_eiGQM_69E-SME_eiGQM, SME_eiGQM_6A3-SME_eiGQM	
000328D6 0000 0000                  		dc.w SME_eiGQM_6AA-SME_eiGQM, SME_eiGQM_6B1-SME_eiGQM	
000328DA 0000 0000                  		dc.w SME_eiGQM_6B8-SME_eiGQM, SME_eiGQM_6BF-SME_eiGQM	
000328DE 0000 0000                  		dc.w SME_eiGQM_6C6-SME_eiGQM, SME_eiGQM_6CD-SME_eiGQM	
000328E2 0000 0000                  		dc.w SME_eiGQM_6D4-SME_eiGQM, SME_eiGQM_6DB-SME_eiGQM	
000328E6 0000 0000                  		dc.w SME_eiGQM_6E2-SME_eiGQM, SME_eiGQM_6EB-SME_eiGQM	
000328EA 0000 0000                  		dc.w SME_eiGQM_6F4-SME_eiGQM, SME_eiGQM_6FD-SME_eiGQM	
000328EE 0000 0000                  		dc.w SME_eiGQM_706-SME_eiGQM, SME_eiGQM_70F-SME_eiGQM	
000328F2 0000 0000                  		dc.w SME_eiGQM_718-SME_eiGQM, SME_eiGQM_721-SME_eiGQM	
000328F6 0000 0000                  		dc.w SME_eiGQM_72A-SME_eiGQM, SME_eiGQM_733-SME_eiGQM	
000328FA 0000 0000                  		dc.w SME_eiGQM_73C-SME_eiGQM, SME_eiGQM_745-SME_eiGQM	
000328FE 0000 0000                  		dc.w SME_eiGQM_74E-SME_eiGQM, SME_eiGQM_757-SME_eiGQM	
00032902 0000 0000                  		dc.w SME_eiGQM_760-SME_eiGQM, SME_eiGQM_767-SME_eiGQM	
00032906 0000 0000                  		dc.w SME_eiGQM_76E-SME_eiGQM, SME_eiGQM_773-SME_eiGQM	
0003290A 0000 0000                  		dc.w SME_eiGQM_77A-SME_eiGQM, SME_eiGQM_781-SME_eiGQM	
0003290E 0000 0000                  		dc.w SME_eiGQM_786-SME_eiGQM, SME_eiGQM_78B-SME_eiGQM	
00032912 0000 0000                  		dc.w SME_eiGQM_790-SME_eiGQM, SME_eiGQM_797-SME_eiGQM	
00032916 0000 0000                  		dc.w SME_eiGQM_79E-SME_eiGQM, SME_eiGQM_7A1-SME_eiGQM	
0003291A 0000 0000                  		dc.w SME_eiGQM_7A8-SME_eiGQM, SME_eiGQM_7AD-SME_eiGQM	
0003291E 00                         SME_eiGQM_1AC:	dc.b 0	
0003291F 0380 0E50 08B0 75          SME_eiGQM_1AD:	dc.b 3, $80, $E, $50, 8, $B0, $75	
00032926 03B0 1710 23B0 81          SME_eiGQM_1B4:	dc.b 3, $B0, $17, $10, $23, $B0, $81	
0003292D 0370 8D80 2520 95          SME_eiGQM_1BB:	dc.b 3, $70, $8D, $80, $25, $20, $95	
00032934 03B0 3550 9830 9E          SME_eiGQM_1C2:	dc.b 3, $B0, $35, $50, $98, $30, $9E	
0003293B 04B0 4710 5330 A250 A6     SME_eiGQM_1C9:	dc.b 4, $B0, $47, $10, $53, $30, $A2, $50, $A6	
00032944 04B0 5510 6130 9E50 98     SME_eiGQM_1D2:	dc.b 4, $B0, $55, $10, $61, $30, $9E, $50, $98	
0003294D 0380 6320 AC70 8D          SME_eiGQM_1DB:	dc.b 3, $80, $63, $20, $AC, $70, $8D	
00032954 0280 6CB0 81               SME_eiGQM_1E2:	dc.b 2, $80, $6C, $B0, $81	
00032959 04B0 AF11 6BB1 6D51 79     SME_eiGQM_1E7:	dc.b 4, $B0, $AF, $11, $6B, $B1, $6D, $51, $79	
00032962 04B0 C811 7F81 8171 8A     SME_eiGQM_1F0:	dc.b 4, $B0, $C8, $11, $7F, $81, $81, $71, $8A	
0003296B 0480 E071 9201 9A11 9B     SME_eiGQM_1F9:	dc.b 4, $80, $E0, $71, $92, 1, $9A, $11, $9B	
00032974 04B0 F3B1 9D01 A931 AA     SME_eiGQM_202:	dc.b 4, $B0, $F3, $B1, $9D, 1, $A9, $31, $AA	
0003297D 04B1 0A81 AE51 B751 BD     SME_eiGQM_20B:	dc.b 4, $B1, $A, $81, $AE, $51, $B7, $51, $BD	
00032986 04F1 2671 C321 CB31 CE     SME_eiGQM_214:	dc.b 4, $F1, $26, $71, $C3, $21, $CB, $31, $CE	
0003298F 0481 4351 D281 D811 E1     SME_eiGQM_21D:	dc.b 4, $81, $43, $51, $D2, $81, $D8, $11, $E1	
00032998 0481 5771 E301 EB21 EC     SME_eiGQM_226:	dc.b 4, $81, $57, $71, $E3, 1, $EB, $21, $EC	
000329A1 0351 EF81 F5B2 75          SME_eiGQM_22F:	dc.b 3, $51, $EF, $81, $F5, $B2, $75	
000329A8 0312 81B2 83B2 8F          SME_eiGQM_236:	dc.b 3, $12, $81, $B2, $83, $B2, $8F	
000329AF 0382 9B82 A412 AD          SME_eiGQM_23D:	dc.b 3, $82, $9B, $82, $A4, $12, $AD	
000329B6 03B2 2C82 AF02 B8          SME_eiGQM_244:	dc.b 3, $B2, $2C, $82, $AF, 2, $B8	
000329BD 04B2 4212 4082 B902 C2     SME_eiGQM_24B:	dc.b 4, $B2, $42, $12, $40, $82, $B9, 2, $C2	
000329C6 04B2 C312 CF82 AF02 B8     SME_eiGQM_254:	dc.b 4, $B2, $C3, $12, $CF, $82, $AF, 2, $B8	
000329CF 0382 D182 DA12 AD          SME_eiGQM_25D:	dc.b 3, $82, $D1, $82, $DA, $12, $AD	
000329D6 0282 6CB2 8F               SME_eiGQM_264:	dc.b 2, $82, $6C, $B2, $8F	
000329DB 04B2 E353 9EB3 A403 B0     SME_eiGQM_269:	dc.b 4, $B2, $E3, $53, $9E, $B3, $A4, 3, $B0	
000329E4 04B2 FC73 B173 B913 C1     SME_eiGQM_272:	dc.b 4, $B2, $FC, $73, $B1, $73, $B9, $13, $C1	
000329ED 0483 1403 C313 C483 C6     SME_eiGQM_27B:	dc.b 4, $83, $14, 3, $C3, $13, $C4, $83, $C6	
000329F6 04B3 2733 CFB3 D303 3A     SME_eiGQM_284:	dc.b 4, $B3, $27, $33, $CF, $B3, $D3, 3, $3A	
000329FF 04B3 3E53 DF83 E553 EE     SME_eiGQM_28D:	dc.b 4, $B3, $3E, $53, $DF, $83, $E5, $53, $EE	
00032A08 04F3 5933 F403 F8B3 F9     SME_eiGQM_296:	dc.b 4, $F3, $59, $33, $F4, 3, $F8, $B3, $F9	
00032A11 0483 7634 05B4 0903 86     SME_eiGQM_29F:	dc.b 4, $83, $76, $34, 5, $B4, 9, 3, $86	
00032A1A 0483 8A34 1554 1914 1F     SME_eiGQM_2A8:	dc.b 4, $83, $8A, $34, $15, $54, $19, $14, $1F	
00032A23 0474 6724 6F54 7214 78     SME_eiGQM_2B1:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
00032A2C 0474 7A24 8254 8514 78     SME_eiGQM_2BA:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
00032A35 0474 6724 6F54 7214 78     SME_eiGQM_2C3:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
00032A3E 0474 7A24 8254 8514 78     SME_eiGQM_2CC:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
00032A47 0414 D674 D804 E0B4 E1     SME_eiGQM_2D5:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
00032A50 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2DE:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
00032A59 0414 D674 D804 E0B4 E1     SME_eiGQM_2E7:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
00032A62 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2F0:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
00032A6B 04B5 4A15 5605 5835 59     SME_eiGQM_2F9:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
00032A74 04B5 5D15 6905 6B35 6C     SME_eiGQM_302:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032A7D 04B5 4A15 5605 5835 59     SME_eiGQM_30B:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
00032A86 04B5 5D15 6905 6B35 6C     SME_eiGQM_314:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032A8F 0435 BB75 BF55 C735 CD     SME_eiGQM_31D:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
00032A98 0425 D175 D455 DC35 E2     SME_eiGQM_326:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032AA1 0435 BB75 BF55 C735 CD     SME_eiGQM_32F:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
00032AAA 0425 D175 D455 DC35 E2     SME_eiGQM_338:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032AB3 0325 E6B5 E925 F5          SME_eiGQM_341:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
00032ABA 0455 F835 FE26 0216 05     SME_eiGQM_348:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
00032AC3 0416 0726 0936 0C16 10     SME_eiGQM_351:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00032ACC 0426 1236 1526 1936 1C     SME_eiGQM_35A:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
00032AD5 0416 2026 2236 2526 29     SME_eiGQM_363:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
00032ADE 0316 2C76 2E56 36          SME_eiGQM_36C:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
00032AE5 02F6 3C26 4C               SME_eiGQM_373:	dc.b 2, $F6, $3C, $26, $4C	
00032AEA 02B6 4F06 5B               SME_eiGQM_378:	dc.b 2, $B6, $4F, 6, $5B	
00032AEF 0316 5C76 5E26 66          SME_eiGQM_37D:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
00032AF6 0426 6936 6C26 7016 73     SME_eiGQM_384:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
00032AFF 0286 7536 7E               SME_eiGQM_38D:	dc.b 2, $86, $75, $36, $7E	
00032B04 02B6 8226 8E               SME_eiGQM_392:	dc.b 2, $B6, $82, $26, $8E	
00032B09 0306 91B6 9226 9E          SME_eiGQM_397:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
00032B10 01B6 A1                    SME_eiGQM_39E:	dc.b 1, $B6, $A1	
00032B13 0326 AD76 B016 B8          SME_eiGQM_3A1:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
00032B1A 0426 BA36 BD26 C116 C4     SME_eiGQM_3A8:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
00032B23 0456 C636 CC26 D016 D3     SME_eiGQM_3B1:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
00032B2C 0456 D526 DB36 DE26 E2     SME_eiGQM_3BA:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
00032B35 02B6 E526 F1               SME_eiGQM_3C3:	dc.b 2, $B6, $E5, $26, $F1	
00032B3A 01B6 F4                    SME_eiGQM_3C8:	dc.b 1, $B6, $F4	
00032B3D 0277 0027 08               SME_eiGQM_3CB:	dc.b 2, $77, 0, $27, 8	
00032B42 01B7 0B                    SME_eiGQM_3D0:	dc.b 1, $B7, $B	
00032B45 0217 17B7 19               SME_eiGQM_3D3:	dc.b 2, $17, $17, $B7, $19	
00032B4A 0327 2577 2857 30          SME_eiGQM_3D8:	dc.b 3, $27, $25, $77, $28, $57, $30	
00032B51 0487 3637 3F37 4327 47     SME_eiGQM_3DF:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
00032B5A 0427 4A77 4D27 5537 58     SME_eiGQM_3E8:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
00032B63 0357 5C37 6227 66          SME_eiGQM_3F1:	dc.b 3, $57, $5C, $37, $62, $27, $66	
00032B6A 0327 6977 6C27 74          SME_eiGQM_3F8:	dc.b 3, $27, $69, $77, $6C, $27, $74	
00032B71 0317 7777 7917 81          SME_eiGQM_3FF:	dc.b 3, $17, $77, $77, $79, $17, $81	
00032B78 01F7 83                    SME_eiGQM_406:	dc.b 1, $F7, $83	
00032B7B 0407 9377 9407 9C77 9D     SME_eiGQM_409:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
00032B84 0417 A527 A787 AA37 B3     SME_eiGQM_412:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
00032B8D 0217 B7B7 B9               SME_eiGQM_41B:	dc.b 2, $17, $B7, $B7, $B9	
00032B92 0317 C577 C717 CF          SME_eiGQM_420:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
00032B99 0307 D187 D217 DB          SME_eiGQM_427:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
00032BA0 02F7 DD07 ED               SME_eiGQM_42E:	dc.b 2, $F7, $DD, 7, $ED	
00032BA5 0428 0078 0328 0B28 0E     SME_eiGQM_433:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
00032BAE 0328 1178 1458 1C          SME_eiGQM_43C:	dc.b 3, $28, $11, $78, $14, $58, $1C	
00032BB5 02B8 2238 2E               SME_eiGQM_443:	dc.b 2, $B8, $22, $38, $2E	
00032BBA 02B8 3228 3E               SME_eiGQM_448:	dc.b 2, $B8, $32, $28, $3E	
00032BBF 0428 4138 4428 4878 4B     SME_eiGQM_44D:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
00032BC8 0388 5338 5C28 60          SME_eiGQM_456:	dc.b 3, $88, $53, $38, $5C, $28, $60	
00032BCF 02B8 6328 6F               SME_eiGQM_45D:	dc.b 2, $B8, $63, $28, $6F	
00032BD4 0388 7258 7B08 81          SME_eiGQM_462:	dc.b 3, $88, $72, $58, $7B, 8, $81	
00032BDB 01B8 82                    SME_eiGQM_469:	dc.b 1, $B8, $82	
00032BDE 02B8 8E28 9A               SME_eiGQM_46C:	dc.b 2, $B8, $8E, $28, $9A	
00032BE3 0338 9DB8 A108 AD          SME_eiGQM_471:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
00032BEA 01B8 AE                    SME_eiGQM_478:	dc.b 1, $B8, $AE	
00032BED 0208 BAB8 BB               SME_eiGQM_47B:	dc.b 2, 8, $BA, $B8, $BB	
00032BF2 0288 C758 D0               SME_eiGQM_480:	dc.b 2, $88, $C7, $58, $D0	
00032BF7 0388 D638 DF28 E3          SME_eiGQM_485:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
00032BFE 01B8 E6                    SME_eiGQM_48C:	dc.b 1, $B8, $E6	
00032C01 02B8 F228 FE               SME_eiGQM_48F:	dc.b 2, $B8, $F2, $28, $FE	
00032C06 0329 0119 04B9 06          SME_eiGQM_494:	dc.b 3, $29, 1, $19, 4, $B9, 6	
00032C0D 01B9 12                    SME_eiGQM_49B:	dc.b 1, $B9, $12	
00032C10 0209 1EB9 1F               SME_eiGQM_49E:	dc.b 2, 9, $1E, $B9, $1F	
00032C15 02B9 2B29 37               SME_eiGQM_4A3:	dc.b 2, $B9, $2B, $29, $37	
00032C1A 0419 3A39 3C59 4019 46     SME_eiGQM_4A8:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
00032C23 0309 4879 4929 51          SME_eiGQM_4B1:	dc.b 3, 9, $48, $79, $49, $29, $51	
00032C2A 0309 5479 5529 5D          SME_eiGQM_4B8:	dc.b 3, 9, $54, $79, $55, $29, $5D	
00032C31 0259 60B9 66               SME_eiGQM_4BF:	dc.b 2, $59, $60, $B9, $66	
00032C36 0309 7289 7339 7C          SME_eiGQM_4C4:	dc.b 3, 9, $72, $89, $73, $39, $7C	
00032C3D 0319 8059 8239 88          SME_eiGQM_4CB:	dc.b 3, $19, $80, $59, $82, $39, $88	
00032C44 0359 8C39 9219 96          SME_eiGQM_4D2:	dc.b 3, $59, $8C, $39, $92, $19, $96	
00032C4B 0209 98B9 99               SME_eiGQM_4D9:	dc.b 2, 9, $98, $B9, $99	
00032C50 0419 A509 A709 A8B9 A9     SME_eiGQM_4DE:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
00032C59 0319 B5B9 B729 C3          SME_eiGQM_4E7:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
00032C60 0319 C679 C829 D0          SME_eiGQM_4EE:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
00032C67 0209 D389 D4               SME_eiGQM_4F5:	dc.b 2, 9, $D3, $89, $D4	
00032C6C 0329 DD79 E029 E8          SME_eiGQM_4FA:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
00032C73 01B9 EB                    SME_eiGQM_501:	dc.b 1, $B9, $EB	
00032C76 0439 F729 FB79 FE7A 06     SME_eiGQM_504:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032C7F 041A 0EBA 105A 1C2A 22     SME_eiGQM_50D:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00032C88 032A 25BA 287A 34          SME_eiGQM_516:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032C8F 042A 3C1A 3F1A 41FA 43     SME_eiGQM_51D:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00032C98 0439 F729 FB79 FE7A 06     SME_eiGQM_526:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032CA1 041A 0EBA 105A 1C2A 22     SME_eiGQM_52F:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00032CAA 032A 25BA 287A 34          SME_eiGQM_538:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032CB1 042A 3C1A 3F1A 41FA 43     SME_eiGQM_53F:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00032CBA 04BA 530A 5F1A 605A 62     SME_eiGQM_548:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
00032CC3 043A 687A 6C3A 742A 78     SME_eiGQM_551:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
00032CCC 032A 7B3A 7EBA 82          SME_eiGQM_55A:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
00032CD3 040A 8E7A 8F2A 975A 9A     SME_eiGQM_561:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
00032CDC 03BA A05A AC1A B2          SME_eiGQM_56A:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
00032CE3 02BA B45A C0               SME_eiGQM_571:	dc.b 2, $BA, $B4, $5A, $C0	
00032CE8 032A C67A C92A D1          SME_eiGQM_576:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
00032CEF 02BA D42A E0               SME_eiGQM_57D:	dc.b 2, $BA, $D4, $2A, $E0	
00032CF4 02BA E32A E0               SME_eiGQM_582:	dc.b 2, $BA, $E3, $2A, $E0	
00032CF9 02BA EF2A E0               SME_eiGQM_587:	dc.b 2, $BA, $EF, $2A, $E0	
00032CFE 02BA FB2A E0               SME_eiGQM_58C:	dc.b 2, $BA, $FB, $2A, $E0	
00032D03 02BB 072A E0               SME_eiGQM_591:	dc.b 2, $BB, 7, $2A, $E0	
00032D08 03BB 132B 1F2B 22          SME_eiGQM_596:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032D0F 03BB 252B 1F2B 22          SME_eiGQM_59D:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032D16 02B7 EF37 FB               SME_eiGQM_5A4:	dc.b 2, $B7, $EF, $37, $FB	
00032D1B 033B 313B 358B 39          SME_eiGQM_5A9:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
00032D22 045B 423B 482B 4C5B 4F     SME_eiGQM_5B0:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
00032D2B 045B 553B 5B2B 5F7B 62     SME_eiGQM_5B9:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
00032D34 042B 6ABB 6D0B 791B 7A     SME_eiGQM_5C2:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
00032D3D 022B 6ABB 7C               SME_eiGQM_5CB:	dc.b 2, $2B, $6A, $BB, $7C	
00032D42 057B 881B 935B 953B 9B2B+  SME_eiGQM_5D0:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032D4D 052B 901B 935B 953B 9B2B+  SME_eiGQM_5DB:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032D58 01FB A2                    SME_eiGQM_5E6:	dc.b 1, $FB, $A2	
00032D5B 01FB B2                    SME_eiGQM_5E9:	dc.b 1, $FB, $B2	
00032D5E 01FB C2                    SME_eiGQM_5EC:	dc.b 1, $FB, $C2	
00032D61 01FB D2                    SME_eiGQM_5EF:	dc.b 1, $FB, $D2	
00032D64 01FB E2                    SME_eiGQM_5F2:	dc.b 1, $FB, $E2	
00032D67 02FF C30F D3               SME_eiGQM_5F5:	dc.b 2, $FF, $C3, $F, $D3	
00032D6C 02FF C30F D3               SME_eiGQM_5FA:	dc.b 2, $FF, $C3, $F, $D3	
00032D71 048C 0C1C 153C 172C 1B     SME_eiGQM_5FF:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
00032D7A 048C 0C1C 1E3C 202C 24     SME_eiGQM_608:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
00032D83 042C 277C 2A2C 321C 35     SME_eiGQM_611:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
00032D8C 032C 37BC 3A2C 46          SME_eiGQM_61A:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
00032D93 043E EA3E EE7E F25E FA     SME_eiGQM_621:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
00032D9C 043E EA3E EE7F 005F 08     SME_eiGQM_62A:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
00032DA5 043E EA3E EE7F 0E5F 16     SME_eiGQM_633:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
00032DAE 043E EA3E EE7E F25E FA     SME_eiGQM_63C:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
00032DB7 043E EA3E EE7F 005F 08     SME_eiGQM_645:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
00032DC0 043E EA3E EE7F 0E5F 16     SME_eiGQM_64E:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
00032DC9 032C BCFC BF0C CF          SME_eiGQM_657:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
00032DD0 032C D0FC D30C CF          SME_eiGQM_65E:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
00032DD7 031C E3FC E50C CF          SME_eiGQM_665:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
00032DDE 03BC F50D 015D 02          SME_eiGQM_66C:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
00032DE5 03BD 080D 145D 15          SME_eiGQM_673:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
00032DEC 04FD 1B0D 2B1D 2C1D 2E     SME_eiGQM_67A:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
00032DF5 042D 307D 331D 3B2D 3D     SME_eiGQM_683:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
00032DFE 042D 307D 401D 3B2D 3D     SME_eiGQM_68C:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
00032E07 042D 483D 4B7D 4F2D 3D     SME_eiGQM_695:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
00032E10 027D 768D 7E               SME_eiGQM_69E:	dc.b 2, $7D, $76, $8D, $7E	
00032E15 032D 877D 8A5D 92          SME_eiGQM_6A3:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
00032E1C 032D 877D 985D 92          SME_eiGQM_6AA:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
00032E23 032D 877D A05D 92          SME_eiGQM_6B1:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
00032E2A 03BD A82D B43D B7          SME_eiGQM_6B8:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
00032E31 03BD BB2D C73D CA          SME_eiGQM_6BF:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
00032E38 032F 6EFF 713F 81          SME_eiGQM_6C6:	dc.b 3, $2F, $6E, $FF, $71, $3F, $81	
00032E3F 032F 85FF 882F 98          SME_eiGQM_6CD:	dc.b 3, $2F, $85, $FF, $88, $2F, $98	
00032E46 030F 9BFF 9C3F AC          SME_eiGQM_6D4:	dc.b 3, $F, $9B, $FF, $9C, $3F, $AC	
00032E4D 032F 85FF B02F C0          SME_eiGQM_6DB:	dc.b 3, $2F, $85, $FF, $B0, $2F, $C0	
00032E54 048E 017F D42F DC0F DF     SME_eiGQM_6E2:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032E5D 048E 017F E02F E80F EB     SME_eiGQM_6EB:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032E66 048E 017F D42F DC0F DF     SME_eiGQM_6F4:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032E6F 048E 017F E02F E80F EB     SME_eiGQM_6FD:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032E78 048E 017F D42F DC0F DF     SME_eiGQM_706:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032E81 048E 017F E02F E80F EB     SME_eiGQM_70F:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032E8A 048E 017F D42F DC0F DF     SME_eiGQM_718:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032E93 048E 017F E02F E80F EB     SME_eiGQM_721:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032E9C 048E 017F D42F DC0F DF     SME_eiGQM_72A:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032EA5 042E 617E 642E 6C2E 6F     SME_eiGQM_733:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
00032EAE 042E 723E 753E 795E 7D     SME_eiGQM_73C:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
00032EB7 048E 017F E02F E80F EB     SME_eiGQM_745:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032EC0 048E 017F D42F DC0F DF     SME_eiGQM_74E:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032EC9 048E 017F E02F E80F EB     SME_eiGQM_757:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032ED2 038E B01E B92E BB          SME_eiGQM_760:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032ED9 035E BE3E C40E C8          SME_eiGQM_767:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00032EE0 025E C93E CF               SME_eiGQM_76E:	dc.b 2, $5E, $C9, $3E, $CF	
00032EE5 035E BE3E C40E C8          SME_eiGQM_773:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00032EEC 038E B01E B92E BB          SME_eiGQM_77A:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00032EF3 02BE D30E DF               SME_eiGQM_781:	dc.b 2, $BE, $D3, $E, $DF	
00032EF8 025E E03E E6               SME_eiGQM_786:	dc.b 2, $5E, $E0, $3E, $E6	
00032EFD 02BE D30E DF               SME_eiGQM_78B:	dc.b 2, $BE, $D3, $E, $DF	
00032F02 03BB 132B 1F2B 22          SME_eiGQM_790:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032F09 03BB 252B 1F2B 22          SME_eiGQM_797:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032F10 01BF 1C                    SME_eiGQM_79E:	dc.b 1, $BF, $1C	
00032F13 035F 287F 2E5F 36          SME_eiGQM_7A1:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
00032F1A 02FF 3C5F 4C               SME_eiGQM_7A8:	dc.b 2, $FF, $3C, $5F, $4C	
00032F1F 038F 523F 5B5F 5F          SME_eiGQM_7AD:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
00032F26                            		even
00032F26                            		even
00032F26                            ;MetalSonicDynPLC:
00032F26                            ;	include "_inc\Metal Sonic dynamic pattern load cues.asm"
00032F26                            
00032F26                            ; ---------------------------------------------------------------------------
00032F26                            ; Uncompressed graphics	- Sonic
00032F26                            ; ---------------------------------------------------------------------------
00032F26                            ;	align $20
00032F26                            ;Art_Sonic:	INCBIN	"art/uncompressed/Sonic's art.bin"
00032F26                            ;	dc.b 0,0,0,0,0,0
00032F26                            Art_Sonic:	incbin	#artunc\sonic.bin	; Sonic
00052FE6                            		even
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            ; Uncompressed graphics - Metal Sonic
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            ;Art_MetalSonic:	incbin	#artunc\msonic.bin; Metal Sonic
00052FE6                            ;		even
00052FE6                            ;Art_ASCII:	incbin	#artunc\ascii.bin	; ascii font
00052FE6                            ;		even
00052FE6                            		
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            ; Uncompressed graphics	- Tails
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            ;Art_Tails:	incbin	#artunc\tails.bin	; Tails
00052FE6                            ;		even
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            ; Uncompressed graphics	- Slot Machine Pictures
00052FE6                            ; ---------------------------------------------------------------------------
00052FE6                            Art_Slot:	incbin	#artunc\Slotpictures.bin	; Tails
00053BE6                            		even
00053BE6                            ; ---------------------------------------------------------------------------
00053BE6                            ; Uncompressed graphics - Super Sonic
00053BE6                            ; ---------------------------------------------------------------------------
00053BE6                            ;Art_SSonic:	incbin	#artunc\ssonic.bin; Super Sonic
00053BE6                            ;		even
00053BE6                            ; ---------------------------------------------------------------------------
00053BE6                            ; Compressed graphics - various
00053BE6                            ; ---------------------------------------------------------------------------
00053BE6                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00053CEA                            		even
00053CEA                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00053D24                            		even
00053D24                            ;Nem_Shield:	incbin	artnem\shields2.bin	; shield
00053D24                            ;		even
00053D24                            Unc_Shield:	incbin	artnem\shields2mod.bin
000540C4                            		even
000540C4                            Unc_Stars:	incbin	artnem\InvStarsUnc.bin	; invincibility stars
00054504                            		even
00054504                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0005460E                            		even
0005460E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00054660                            		even
00054660                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000548A8                            		even
000548A8                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00054A2E                            		even
00054A2E                            		include	"_maps\SS Walls Dynamic.asm"
00054A2E                            ; ---------------------------------------------------------------------------
00054A2E                            ; Sprite mappings - walls of the special stage
00054A2E                            ; ---------------------------------------------------------------------------
00054A2E 0000                       Map_SSWalls:	dc.w byte_2C584-Map_SSWalls
00054A30 01                         byte_2C584:	dc.b 1
00054A31 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00054A36                            		even
00054A36                            		even
00054A36                            
00054A36                            ; ---------------------------------------------------------------------------
00054A36                            ; Compressed graphics - special stage
00054A36                            ; ---------------------------------------------------------------------------
00054A36                            
00054A36                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
00054A36                            Art_SSWalls:	incbin	"#artunc\Special Walls.bin" ; special stage walls
00056956                            		even
00056956                            ;	else
00056956                            ;Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
00056956                            ;		even
00056956                            ;	endc	;Mercury Dynamic Special Stage Walls
00056956                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00056A8A                            		even
00056A8A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0005771A                            		even
0005771A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00057A1A                            		even
00057A1A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00057F0E                            		even
00057F0E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00057FFC                            		even
00057FFC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000580E8                            		even
000580E8                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000581DE                            		even
000581DE                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0005823C                            		even
0005823C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000582CE                            		even
000582CE                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00058390                            		even
00058390                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0005845E                            		even
0005845E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0005852A                            		even
0005852A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000585F2                            		even
000585F2                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000586BC                            		even
000586BC                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0005878C                            		even
0005878C                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00058980                            		even
00058980                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00058AC8 00                         		even
00058AC8                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00058B78                            		even
00058B78                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00058C52                            		even
00058C52                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00058CD6                            		even
00058CD6                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00058E28                            		even
00058E28                            ; ---------------------------------------------------------------------------
00058E28                            ; Compressed graphics - GHZ stuff
00058E28                            ; ---------------------------------------------------------------------------
00058E28                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00058E72                            		even
00058E72                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00058F8C                            		even
00058F8C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0005907C 00                         		even
0005907C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0005921A                            		even
0005921A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00059262                            		even
00059262                            Nem_Spikes:	incbin	artnem\spikess3.bin	; spikes
000592C8 00                         		even
000592C8                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000594DC                            		even
000594DC                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00059608                            		even
00059608                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00059736                            		even
00059736                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000597D4                            		even
000597D4                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00059834                            		even
00059834                            ; ---------------------------------------------------------------------------
00059834                            ; Compressed graphics - LZ stuff
00059834                            ; ---------------------------------------------------------------------------
00059834                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00059958                            		even
00059958                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0005A14C                            		even
0005A14C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0005A2CC                            		even
0005A2CC                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0005A436                            		even
0005A436                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0005AA8C                            		even
0005AA8C                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0005AB42                            		even
0005AB42                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0005ABE4                            		even
0005ABE4                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0005AD40                            		even
0005AD40                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0005ADA4                            		even
0005ADA4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0005AEF6                            		even
0005AEF6                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0005B3D8                            		even
0005B3D8                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0005B548                            		even
0005B548                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0005B800                            		even
0005B800                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0005B938                            		even
0005B938                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0005BA62                            		even
0005BA62                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0005BB72                            		even
0005BB72                            ; ---------------------------------------------------------------------------
0005BB72                            ; Compressed graphics - MZ stuff
0005BB72                            ; ---------------------------------------------------------------------------
0005BB72                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0005BE00                            		even
0005BE00                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0005BE84 00                         		even
0005BE84                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0005BF3C                            		even
0005BF3C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0005BF90                            		even
0005BF90                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0005C26E                            		even
0005C26E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0005CB84                            		even
0005CB84                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0005CCE8                            		even
0005CCE8                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0005CD70                            		even
0005CD70                            ; ---------------------------------------------------------------------------
0005CD70                            ; Compressed graphics - SLZ stuff
0005CD70                            ; ---------------------------------------------------------------------------
0005CD70                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0005CFAC                            		even
0005CFAC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0005D0F2                            		even
0005D0F2                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0005D336                            		even
0005D336                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0005D398                            		even
0005D398                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0005D47A                            		even
0005D47A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0005D65C                            		even
0005D65C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0005D768                            		even
0005D768                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0005D80C                            		even
0005D80C                            ; ---------------------------------------------------------------------------
0005D80C                            ; Compressed graphics - SYZ stuff
0005D80C                            ; ---------------------------------------------------------------------------
0005D80C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0005D97C                            		even
0005D97C                            Nem_Flipper:	incbin	artnem\Flippers.bin	; Pinball Flippers
0005DCA0                            		even
0005DCA0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0005DD02                            		even
0005DD02                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0005DDB2                            		even
0005DDB2                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0005E040                            		even
0005E040                            ; ---------------------------------------------------------------------------
0005E040                            ; Compressed graphics - SBZ stuff
0005E040                            ; ---------------------------------------------------------------------------
0005E040                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0005E094                            		even
0005E094                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0005E330                            		even
0005E330                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0005E534                            		even
0005E534                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0005E6D2                            		even
0005E6D2                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0005EA02                            		even
0005EA02                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0005EBE0                            		even
0005EBE0                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0005EC38                            		even
0005EC38                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0005EDB8                            		even
0005EDB8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0005EEB6                            		even
0005EEB6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0005F042                            		even
0005F042                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0005F092                            		even
0005F092                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0005F0EA                            		even
0005F0EA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0005F1E6                            		even
0005F1E6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0005F2FC                            		even
0005F2FC                            ; ---------------------------------------------------------------------------
0005F2FC                            ; Compressed graphics - enemies
0005F2FC                            ; ---------------------------------------------------------------------------
0005F2FC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0005F6BC                            		even
0005F6BC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0005FBAA                            		even
0005FBAA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0005FF50                            		even
0005FF50                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00060138                            		even
00060138                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00060822                            		even
00060822                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00060A1E 00                         		even
00060A1E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00060CA8                            		even
00060CA8                            Nem_Roller:	incbin	artnem\roller.bin	; roller
000611CC                            		even
000611CC                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00061456                            		even
00061456                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00061A74                            		even
00061A74                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00061E5C                            		even
00061E5C                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00062158                            		even
00062158                            Nem_Splats:	incbin	artnem\splats.bin	; splats
000623A0                            		even
000623A0                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00062638                            		even
00062638                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00062816                            		even
00062816                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000629A4                            		even
000629A4                            ; ---------------------------------------------------------------------------
000629A4                            ; Compressed graphics - various
000629A4                            ; ---------------------------------------------------------------------------
000629A4                            Nem_GTA:	incbin	artnem\GotThrough.bin
00062EFA                            		even
00062EFA                            Nem_TitleCard:
00062EFA                            			incbin	artnem\ttlcards.bin	; title cards
000634EA                            		even
000634EA                            ArtNem_TitleCard:
000634EA                            Nem_TitleCard2:
000634EA                            			incbin	'art/nemesis/Title card.bin'	; title cards
00063848                            		even
00063848                            ArtNem_TitleCard2:
00063848                            Nem_TitleCard3:
00063848                            			incbin	'art/nemesis/Font using large broken letters.bin'	; title cards
00063C4E                            		even
00063C4E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00063D6E 00                         		even
00063D6E                            Unc_Lives:	incbin	artnem\lifeiconunc.bin	; life counter icon
00063EEE                            		even
00063EEE                            Unc_SuperLives:	incbin	"artnem\Super Sonic lives counter uncompressed.bin"	; life counter icon
0006406E                            		even
0006406E                            Nem_TailsLives:	incbin	artnem\mlifeicon.bin	; life counter icon
0006414E                            		even
0006414E                            Nem_MilesLives:	incbin	artnem\mileslifeicon.bin	; life counter icon
00064236 00                         		even
00064236                            Nem_Ring:	incbin	artnem\ringsnew.bin	; rings
0006432C                            		even
0006432C                            Nem_Ring_S:	incbin	artnem\ringsnew.bin	; rings
00064422                            		even
00064422                            Nem_Monitors:	incbin	"artnem\(Mercury) Monitors (optimised alt).bin"
000648B2 00                         		even
000648B2                            Nem_TailsMonitors:	incbin	artnem\tailsmonitors.bin	; monitors
00064D02                            		even
00064D02                            Nem_Explode:	incbin	artnem\explosios3.bin	; explosion
00065076                            		even
00065076                            Nem_BossExplode:	incbin	artnem\bexplosio.bin	; explosion
000653C2                            		even
000653C2                            Unc_PauseMenu:	incbin	artnem\PauseMenuStuffunc.bin
00065542                            		even
00065542                            Unc_Points:	incbin	artnem\pointsunc.bin	; points from destroyed enemy or object
00065662                            		even
00065662                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00065890                            		even
00065890                            Nem_HSpring:	incbin	artnem\springh2nd.bin	; horizontal spring
000659BA 00                         		even
000659BA                            Nem_VSpring:	incbin	artnem\springv2nd.bin	; vertical spring
00065AA6 00                         		even
00065AA6                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00065F06                            		even
00065F06                            Nem_TailsSignPost:	incbin	artnem\tailssignpost.bin	; end of level signpost
00066370 00                         		even
00066370                            Nem_SignPostMetal:	incbin	artnem\msignpost.bin	; end of level signpost
000667DA 00                         		even
000667DA                            Nem_Lamp:	incbin	artnem\lampposts2.bin	; lamppost
000668D8                            		even
000668D8                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00066A4C                            		even
00066A4C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00066D4E                            		even
00066D4E                            Unc_PauseMenuBG:	incbin	"#artunc\Pause BG.bin"
00066DCE                            		even
00066DCE                            ; ---------------------------------------------------------------------------
00066DCE                            ; Compressed graphics - continue screen
00066DCE                            ; ---------------------------------------------------------------------------
00066DCE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0006707E                            		even
0006707E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000672B8                            		even
000672B8                            ; ---------------------------------------------------------------------------
000672B8                            ; Compressed graphics - animals
000672B8                            ; ---------------------------------------------------------------------------
000672B8                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00067410                            		even
00067410                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0006756C                            		even
0006756C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000676E8                            		even
000676E8                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00067804                            		even
00067804                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0006793A                            		even
0006793A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00067A74                            		even
00067A74                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00067BD0                            		even
00067BD0                            ; ---------------------------------------------------------------------------
00067BD0                            ; Compressed graphics - primary patterns and block mappings
00067BD0                            ; ---------------------------------------------------------------------------
00067BD0                            Blk16_Title:	incbin	map16\titlebg.bin
00067E0E                            		even
00067E0E                            Blk256_Title:	incbin	map256\titlebg.bin
00067FB2                            		even
00067FB2                            Blk16_GHZ:	incbin	"map16\map16 128\ghz.bin"
00068544                            		even
00068544                            Nem_GHZ:		incbin	artnem\8x8ghzkos.bin	 ; New GHZ file.
00069FEE 00                         				even
00069FEE                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1kos.bin; GHZ primary patterns
0006B456                            		even
0006B456                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2kos.bin; GHZ secondary patterns
0006C718                            		even
0006C718                            Blk16_TS:	incbin	map16\ts.bin
0006D0B8                            		even
0006D0B8                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
0006E6CA                            		even
0006E6CA                            Blk256_GHZ:	incbin	"map256\map256 128\ghz.bin"
0006E92C                            		even
0006E92C                            Blk16_LZ:	incbin	"map16\map16 128\lz.bin"
0006EE12                            		even
0006EE12                            Nem_LZ:		incbin	artnem\8x8lzkos.bin; LZ primary patterns
000708B8 00                         		even
000708B8                            Blk256_LZ:	incbin	"map256\map256 128\lz.bin"
00072D40                            		even
00072D40                            Blk16_MZ:	incbin	"map16\map16 128\mz.bin"
00073598                            		even
00073598                            Nem_MZ:		incbin	artnem\8x8mzkos.bin; MZ primary patterns
000756D4 00                         		even
000756D4                            Blk256_MZ:	incbin	"map256\map256 128\mz.bin"
00076E0C                            		even
00076E0C                            Blk16_SLZ:	incbin	"map16\map16 128\slz.bin"
00077832                            		even
00077832                            Nem_SLZ:	incbin	artnem\8x8slzkos.bin; SLZ primary patterns
0007A198 00                         		even
0007A198                            Blk256_SLZ:	incbin	"map256\map256 128\slz.bin"
0007C114                            		even
0007C114                            Blk16_SYZ:	incbin	"map16\map16 128\syz.bin"
0007CB2A                            		even
0007CB2A                            Nem_SYZ:	incbin	artnem\8x8syzkos.bin; SYZ primary patterns
0007F37A                            		even
0007F37A                            Blk256_SYZ:	incbin	"map256\map256 128\syz.bin"
00081664                            		even
00081664                            Blk16_SBZ:	incbin	"map16\map16 128\sbz.bin"
000823C2                            		even
000823C2                            Nem_SBZ:	incbin	artnem\8x8sbzkos.bin; SBZ primary patterns
000847B4 00                         		even
000847B4                            Blk256_SBZ:	incbin	"map256\map256 128\sbz.bin"
00087338 00                         		even
00087338                            Blk16_ABZ:	incbin	"LevelConverter\abz1\Blocks.bin"
000875D6                            		even
000875D6                            Nem_ABZ:	incbin	artnem\8x8abzkos.bin	; ABZ primary patterns
00087DC8                            		even
00087DC8                            Blk256_ABZ:	incbin	"LevelConverter\abz1\Chunks.bin"
00087F50                            		even
00087F50                            ; ---------------------------------------------------------------------------
00087F50                            ; Act2
00087F50                            ; ---------------------------------------------------------------------------
00087F50                            Blk16_GHZ2:	incbin	"map16\map16 128 2\ghz2.bin"
00088200                            		even
00088200                            Nem_GHZ2:		incbin	artnem\8x8ghzkos_2.bin	 ; New GHZ file.
0008A120                            				even
0008A120                            Nem_GHZ2_1st:	incbin	artnem\8x8ghz12.bin; GHZ primary patterns
0008B780                            		even
0008B780                            Nem_GHZ2_2nd:	incbin	artnem\8x8ghz22kos.bin; GHZ secondary patterns
0008CA42                            		even
0008CA42                            Blk256_GHZ2:	incbin	"map256\map256 128 2\ghz2.bin"
0008CBA8                            		even
0008CBA8                            Blk16_LZ2:	incbin	"map16\map16 128 2\lz2.bin"
0008D08E                            		even
0008D08E                            Nem_LZ2:	incbin	artnem\8x8lz2kos.bin; LZ primary patterns
0008EB34 00                         		even
0008EB34                            Blk256_LZ2:	incbin	"map256\map256 128 2\lz2.bin"
00090FBC                            		even
00090FBC                            Blk16_MZ2:	incbin	"map16\map16 128 2\mz2.bin"
00091814                            		even
00091814                            Nem_MZ2:	incbin	artnem\8x8mz2kos.bin; MZ primary patterns
00093950 00                         		even
00093950                            Blk256_MZ2:	incbin	"map256\map256 128 2\mz2.bin"
00095088                            		even
00095088                            Blk16_SLZ2:	incbin	"map16\map16 128 2\slz2.bin"
00095AAE                            		even
00095AAE                            Nem_SLZ2:	incbin	artnem\8x8slz2kos.bin; SLZ primary patterns
00098414 00                         		even
00098414                            Blk256_SLZ2:	incbin	"map256\map256 128 2\slz2.bin"
0009A390                            		even
0009A390                            Blk16_SYZ2:	incbin	"map16\map16 128 2\syz2.bin"
0009ADA6                            		even
0009ADA6                            Nem_SYZ2:	incbin	artnem\8x8syz2kos.bin; SYZ primary patterns
0009D5F6                            		even
0009D5F6                            Blk256_SYZ2:	incbin	"map256\map256 128 2\syz2.bin"
0009F8E0                            		even
0009F8E0                            Blk16_SBZ2:	incbin	"map16\map16 128 2\sbz2.bin"
000A063E                            		even
000A063E                            Nem_SBZ2:	incbin	artnem\8x8sbz2kos.bin; SBZ primary patterns
000A2A30 00                         		even
000A2A30                            Blk256_SBZ2:	incbin	"map256\map256 128 2\sbz2.bin"
000A55B4 00                         		even
000A55B4                            Blk16_ABZ2:	incbin	"LevelConverter\abz2\Blocks.bin"
000A5852                            		even
000A5852                            Nem_ABZ2:	incbin	artnem\8x8abz2kos.bin	; ABZ primary patterns
000A6044                            		even
000A6044                            Blk256_ABZ2:	incbin	"LevelConverter\abz2\Chunks.bin"
000A61C6                            		even
000A61C6                            ; ---------------------------------------------------------------------------
000A61C6                            ; Act3
000A61C6                            ; ---------------------------------------------------------------------------
000A61C6                            Blk16_GHZ3:	incbin	"map16\map16 128 3\ghz3.bin"
000A6476                            		even
000A6476                            Nem_GHZ3:		incbin	artnem\8x8ghzkos_3.bin	 ; New GHZ file.
000A8396                            				even
000A8396                            Nem_GHZ3_1st:	incbin	artnem\8x8ghz13.bin; GHZ primary patterns
000A99F6                            		even
000A99F6                            Nem_GHZ3_2nd:	incbin	artnem\8x8ghz23kos.bin; GHZ secondary patterns
000AACB8                            		even
000AACB8                            Blk256_GHZ3:	incbin	"map256\map256 128 3\ghz3.bin"
000AAE1E                            		even
000AAE1E                            Blk16_LZ3:	incbin	"map16\map16 128 3\lz3.bin"
000AB304                            		even
000AB304                            Nem_LZ3:	incbin	artnem\8x8lz3kos.bin; LZ primary patterns
000ACDAA 00                         		even
000ACDAA                            Blk256_LZ3:	incbin	"map256\map256 128 3\lz3.bin"
000AF232                            		even
000AF232                            Blk16_MZ3:	incbin	"map16\map16 128 3\mz3.bin"
000AFA8A                            		even
000AFA8A                            Nem_MZ3:	incbin	artnem\8x8mz3kos.bin; MZ primary patterns
000B1BC6 00                         		even
000B1BC6                            Blk256_MZ3:	incbin	"map256\map256 128 3\mz3.bin"
000B32FE                            		even
000B32FE                            Blk16_SLZ3:	incbin	"map16\map16 128 3\slz3.bin"
000B3D24                            		even
000B3D24                            Nem_SLZ3:	incbin	artnem\8x8slz3kos.bin; SLZ primary patterns
000B668A 00                         		even
000B668A                            Blk256_SLZ3:	incbin	"map256\map256 128 3\slz3.bin"
000B8606                            		even
000B8606                            Blk16_SYZ3:	incbin	"map16\map16 128 3\syz3.bin"
000B901C                            		even
000B901C                            Nem_SYZ3:	incbin	artnem\8x8syz3kos.bin; SYZ primary patterns
000BB86C                            		even
000BB86C                            Blk256_SYZ3:	incbin	"map256\map256 128 3\syz3.bin"
000BDB56                            		even
000BDB56                            Blk16_SBZ3:	incbin	"map16\map16 128 3\sbz3.bin"
000BE8B4                            		even
000BE8B4                            Nem_SBZ3:	incbin	artnem\8x8sbz3kos.bin; SBZ primary patterns
000C0CA6 00                         		even
000C0CA6                            Blk256_SBZ3:	incbin	"map256\map256 128 3\sbz3.bin"
000C382A 00                         		even
000C382A                            Blk16_ABZ3:	incbin	"LevelConverter\abz2\Blocks.bin"
000C3AC8                            		even
000C3AC8                            Nem_ABZ3:	incbin	artnem\8x8abz3kos.bin	; ABZ primary patterns
000C42BA                            		even
000C42BA                            Blk256_ABZ3:	incbin	"LevelConverter\abz2\Chunks.bin"
000C443C                            		even
000C443C                            ; ---------------------------------------------------------------------------
000C443C                            ; Kosiniski Compressed graphics - level art
000C443C                            ; ---------------------------------------------------------------------------
000C443C                            ;Kos_GHZ:	incbin	artkos\8x8ghz_kos.bin	; GHZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_LZ:	incbin	artkos\8x8lz_kos.bin	; LZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_MZ:	incbin	artkos\8x8mz_kos.bin	; MZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_SYZ:	incbin	artkos\8x8syz_kos.bin	; SYZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_SLZ:	incbin	artkos\8x8slz_kos.bin	; SLZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_SBZ:	incbin	artkos\8x8sbz_kos.bin	; SBZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_ABZ:	incbin	artkos\8x8abz_kos.bin	; ABZ primary patterns
000C443C                            ;		even
000C443C                            ;Kos_GHZ_2nd:	incbin	artnem\8x8ghz2_kos.bin; GHZ secondary patterns
000C443C                            ;		even
000C443C                            ; ---------------------------------------------------------------------------
000C443C                            ; Compressed graphics - bosses and ending sequence
000C443C                            ; ---------------------------------------------------------------------------
000C443C                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000C4CA0                            		even
000C4CA0                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000C4F8A                            		even
000C4F8A                            Nem_Rocket:	incbin	artnem\s4rocket.bin	; boss add-ons and weapons
000C549E                            		even
000C549E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000C5D22                            		even
000C5D22                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000C654E                            		even
000C654E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000C6CB6                            		even
000C6CB6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000C7236                            		even
000C7236                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000C7356                            		even
000C7356                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000C7554                            		even
000C7554                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000C8732                            		even
000C8732                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000C9076                            		even
000C9076                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000C944C                            		even
000C944C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000C99DC                            		even
000C99DC                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000C9C64                            		even
000C9C64                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000C9EA6                            		even
000C9EA6                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000CA170 00                         		even
000CA170                            		incbin	misc\padding2.bin
000CA274                            		even
000CA274                            ; ---------------------------------------------------------------------------
000CA274                            ; Collision data
000CA274                            ; ---------------------------------------------------------------------------
000CA274                            AngleMap:	incbin	"collide\collide 128\anglemap.bin"	; floor angle map
000CA374                            		even
000CA374                            CollArray1:	incbin	"collide\collide 128\carray_n.bin"	; normal collision array
000CB374                            		even
000CB374                            CollArray2:	incbin	"collide\collide 128\carray_r.bin"	; rotated collision array
000CC374                            		even
000CC374                            Col_GHZ_1:	incbin	"collide\collide 128\ghz1.bin"	; GHZ index 1
000CC43E 00                         		even
000CC43E                            Col_GHZ_2:	incbin	"collide\collide 128\ghz2.bin"	; GHZ index 2
000CC508 00                         		even
000CC508                            Col_LZ_1:	incbin	"collide\collide 128\lz1.bin"	; LZ index 1
000CC5CC                            		even
000CC5CC                            Col_LZ_2:	incbin	"collide\collide 128\lz2.bin"		; LZ index 2
000CC690                            		even
000CC690                            Col_MZ_1:	incbin	"collide\collide 128\mz1.bin"		; MZ index 1
000CC820                            		even
000CC820                            Col_MZ_2:	incbin	"collide\collide 128\mz2.bin"		; MZ index 2
000CC9B0                            		even
000CC9B0                            Col_SLZ_1:	incbin	"collide\collide 128\slz1.bin"	; SLZ index 1
000CCB4E                            		even
000CCB4E                            Col_SLZ_2:	incbin	"collide\collide 128\slz2.bin"	; SLZ index 2
000CCCEC                            		even
000CCCEC                            Col_SYZ_1:	incbin	"collide\collide 128\syz1.bin"	; SYZ index 1
000CCEE0                            		even
000CCEE0                            Col_SYZ_2:	incbin	"collide\collide 128\syz2.bin"	; SYZ index 2
000CD0D4                            		even
000CD0D4                            Col_SBZ_1:	incbin	"collide\collide 128\sbz1.bin"	; SBZ index 1
000CD32C                            		even
000CD32C                            Col_SBZ_2:	incbin	"collide\collide 128\sbz2.bin"	; SBZ index 2
000CD584                            		even
000CD584                            Col_ABZ_1:	incbin	"LevelConverter\abz1\Indexes1.bin"		; ABZ index
000CD590                            		even
000CD590                            Col_ABZ_2:	incbin	"LevelConverter\abz1\Indexes2.bin"		; ABZ index
000CD59C                            		even
000CD59C                            ; ---------------------------------------------------------------------------
000CD59C                            ; Special layouts
000CD59C                            ; ---------------------------------------------------------------------------
000CD59C                            SS_1:		incbin	sslayout\1.bin
000CD816                            		even
000CD816                            SS_2:		incbin	sslayout\2.bin
000CDC28                            		even
000CDC28                            SS_3:		incbin	sslayout\3.bin
000CDF84                            		even
000CDF84                            SS_4:		incbin	sslayout\4.bin
000CE45E                            		even
000CE45E                            SS_5:		incbin	sslayout\5.bin
000CE930                            		even
000CE930                            SS_6:		incbin	sslayout\6.bin
000CEC40                            		even
000CEC40                            SS_7:		incbin	sslayout\7.bin
000CEF3E                            		even
000CEF3E                            ; ---------------------------------------------------------------------------
000CEF3E                            ; Animated uncompressed graphics
000CEF3E                            ; ---------------------------------------------------------------------------
000CEF3E                            Art_GhzWater:	incbin	#artunc\ghzwater.bin	; GHZ waterfall
000CF13E                            		even
000CF13E                            Art_GhzFlower1:	incbin	#artunc\ghzflowl.bin	; GHZ large flower
000CF53E                            		even
000CF53E                            Art_GhzFlower2:	incbin	#artunc\ghzflows.bin	; GHZ small flower
000CF9BE                            		even
000CF9BE                            Art_MzLava1:	incbin	#artunc\mzlava1.bin	; MZ lava surface
000CFCBE                            		even
000CFCBE                            Art_MzLava2:	incbin	#artunc\mzlava2.bin	; MZ lava
000D02BE                            		even
000D02BE                            Art_MzTorch:	incbin	#artunc\mztorch.bin	; MZ torch in background
000D05BE                            		even
000D05BE                            Art_SbzSmoke:	incbin	#artunc\sbzsmoke.bin	; SBZ smoke in background
000D103E                            		even
000D103E                            
000D103E                            ; ---------------------------------------------------------------------------
000D103E                            ; Level	layout index
000D103E                            ; ---------------------------------------------------------------------------
000D103E 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70
000D104A 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
000D1056 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
000D1062 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
000D106E 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
000D107A 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
000D1086 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
000D1092 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
000D109E 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
000D10AA 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
000D10B6 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
000D10C2 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
000D10CE 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
000D10DA 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
000D10E6 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
000D10F2 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
000D10FE 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
000D110A 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
000D1116 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
000D1122 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
000D112E 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
000D113A 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
000D1146 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
000D1152 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
000D115E 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D116A 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D1176 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D1182 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D118E 0000 0000 0000 0000 0000+  		dc.l Level_ABZ1, Level_ABZbg, byte_6A320
000D119A 0000 0000 0000 0000 0000+  		dc.l Level_ABZ2, Level_ABZbg, byte_6A320
000D11A6 0000 0000 0000 0000 0000+  		dc.l Level_ABZ3, Level_ABZbg, byte_6A320
000D11B2 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D11BE                            
000D11BE                            Level_GHZ1:	incbin	"levels\levels 128\ghz1.bin"
000D21BE                            		even
000D21BE 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000D21C2                            Level_GHZ2:	incbin	"levels\levels 128\ghz2.bin"
000D31C2                            		even
000D31C2 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000D31C6                            Level_GHZ3:	incbin	"levels\levels 128\ghz3.bin"
000D41C6                            		even
000D41C6                            Level_GHZbg:	incbin	"levels\levels 128\ghzbg.bin"
000D41E8                            		even
000D41E8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000D41EC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000D41F0                            
000D41F0                            Level_LZ1:	incbin	"levels\levels 128\lz1.bin"
000D51F0                            		even
000D51F0                            Level_LZbg:	incbin	"levels\levels 128\lzbg.bin"
000D52F2                            		even
000D52F2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000D52F6                            Level_LZ2:	incbin	"levels\levels 128\lz2.bin"
000D62F6                            		even
000D62F6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000D62FA                            Level_LZ3:	incbin	"levels\levels 128\lz3.bin"
000D72FA                            		even
000D72FA                            Level_LZ3_WALL:	incbin	"levels\levels 128\lz3_wall.bin"	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
000D82FA                            		even
000D82FA 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000D82FE                            Level_SBZ3:	incbin	"levels\levels 128\sbz3.bin"
000D92FE                            		even
000D92FE 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000D9302                            
000D9302                            Level_MZ1:	incbin	"levels\levels 128\mz1.bin"
000DA302                            		even
000DA302                            Level_MZ1bg:	incbin	"levels\levels 128\mz1bg.bin"
000DA37C                            		even
000DA37C                            Level_MZ2:	incbin	"levels\levels 128\mz2.bin"
000DB37C                            		even
000DB37C                            Level_MZ2bg:	incbin	"levels\levels 128\mz2bg.bin"
000DB40E                            		even
000DB40E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000DB412                            Level_MZ3:	incbin	"levels\levels 128\mz3.bin"
000DC412                            		even
000DC412                            Level_MZ3bg:	incbin	"levels\levels 128\mz3bg.bin"
000DC4B6                            		even
000DC4B6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000DC4BA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000DC4BE                            
000DC4BE                            Level_SLZ1:	incbin	"levels\levels 128\slz1.bin"
000DD4BE                            		even
000DD4BE                            Level_SLZbg:	incbin	"levels\levels 128\slzbg.bin"
000DD538                            		even
000DD538                            Level_SLZ2:	incbin	"levels\levels 128\slz2.bin"
000DE538                            		even
000DE538                            Level_SLZ3:	incbin	"levels\levels 128\slz3.bin"
000DF538                            		even
000DF538 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000DF53C                            
000DF53C                            Level_SYZ1:	incbin	"levels\levels 128\syz1.bin"
000E053C                            		even
000E053C                            Level_SYZbg:	incbin	"levels\levels 128\syzbg.bin"
000E0576                            		even
000E0576 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000E057A                            Level_SYZ2:	incbin	"levels\levels 128\syz2.bin"
000E157A                            		even
000E157A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000E157E                            Level_SYZ3:	incbin	"levels\levels 128\syz3.bin"
000E257E                            		even
000E257E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000E2582 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000E2586                            
000E2586                            Level_SBZ1:	incbin	"levels\levels 128\sbz1.bin"
000E3586                            		even
000E3586                            Level_SBZ1bg:	incbin	"levels\levels 128\sbz1bg.bin"
000E35C4                            		even
000E35C4                            Level_SBZ2:	incbin	"levels\levels 128\sbz2.bin"
000E45C4                            		even
000E45C4                            Level_SBZ2bg:	incbin	"levels\levels 128\sbz2bg.bin"
000E472E                            		even
000E472E 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000E4732 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000E4736                            Level_End:	incbin	"levels\levels 128\ending.bin"
000E5736                            		even
000E5736 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000E573A                            Level_ABZ1:	incbin	"LevelConverter\abz1\Layout.bin"
000E57AA                            		even
000E57AA                            Level_ABZ2:	incbin	"LevelConverter\abz2\Layout.bin"
000E5816                            		even
000E5816                            Level_ABZ3:	incbin	"LevelConverter\abz2\Layout.bin"
000E5882                            		even
000E5882                            Level_ABZbg:	incbin	levels\abzbg.bin
000E594C                            		even
000E594C                            
000E594C                            ; ---------------------------------------------------------------------------
000E594C                            ; Animated uncompressed giant ring graphics
000E594C                            ; ---------------------------------------------------------------------------
000E594C                            Art_BigRing:	incbin	#artunc\bigring.bin
000E658C                            		even
000E658C                            
000E658C                            		incbin	misc\padding3.bin
000E6628                            		even
000E6628                            
000E6628                            ; ---------------------------------------------------------------------------
000E6628                            ; Sprite locations index
000E6628                            ; ---------------------------------------------------------------------------
000E6628 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E662C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6630 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6634 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6638 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E663C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6640 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6644 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6648 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E664C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6650 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6654 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6658 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E665C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6660 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6664 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6668 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E666C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6670 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6674 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6678 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E667C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6680 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6684 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6688 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E668C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6690 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6694 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6698 0000 0000                  		dc.w ObjPos_ABZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E669C 0000 0000                  		dc.w ObjPos_ABZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E66A0 0000 0000                  		dc.w ObjPos_ABZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E66A4                            ObjPos_LZxpf_Index:		
000E66A4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E66A8 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000E66AC 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000E66B0 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E66B4                            ObjPos_SBZ1pf_Index:
000E66B4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E66B8 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
000E66BC 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
000E66C0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E66C4 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000E66CA                            ObjPos_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Objects.bin"
000E6BD4                            		even
000E6BD4                            ObjPos_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Objects.bin"
000E71A4                            		even
000E71A4                            ObjPos_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Objects.bin"
000E7870                            		even
000E7870                            ObjPos_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Objects.bin"
000E7CDE                            		even
000E7CDE                            ObjPos_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Objects.bin"
000E8020                            		even
000E8020                            ObjPos_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Objects.bin"
000E8602                            		even
000E8602                            ObjPos_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Objects.bin"
000E8A9A                            		even
000E8A9A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000E8ACC                            		even
000E8ACC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000E8AFE                            		even
000E8AFE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000E8B30                            		even
000E8B30                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000E8B62                            		even
000E8B62                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000E8BAC                            		even
000E8BAC                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000E8BEA                            		even
000E8BEA                            ObjPos_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Objects.bin"
000E8F56                            		even
000E8F56                            ObjPos_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Objects.bin"
000E9400                            		even
000E9400                            ObjPos_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Objects.bin"
000E9976                            		even
000E9976                            ObjPos_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Objects.bin"
000E9ECE                            		even
000E9ECE                            ObjPos_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Objects.bin"
000EA38A                            		even
000EA38A                            ObjPos_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Objects.bin"
000EA9B4                            		even
000EA9B4                            ObjPos_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Objects.bin"
000EAE40                            		even
000EAE40                            ObjPos_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Objects.bin"
000EB3AA                            		even
000EB3AA                            ObjPos_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Objects.bin"
000EB9B0                            		even
000EB9B0                            ObjPos_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Objects.bin"
000EC0EE                            		even
000EC0EE                            ObjPos_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Objects.bin"
000EC7CC                            		even
000EC7CC                            ObjPos_FZ:	incbin	"LevelConverter\Final Zone\Objects.bin"
000EC7DE                            		even
000EC7DE                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000EC810                            		even
000EC810                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000EC842                            		even
000EC842                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000EC874                            		even
000EC874                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000EC8A6                            		even
000EC8A6                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000EC8D8                            		even
000EC8D8                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000EC910                            		even
000EC910                            ObjPos_End:	incbin	"LevelConverter\Ending\Objects.bin"
000ECA6C                            		even
000ECA6C                            ObjPos_ABZ1:	incbin	"LevelConverter\abz1\Objects.bin"
000ECA7E                            		even
000ECA7E                            ObjPos_ABZ2:	incbin	"LevelConverter\abz2\Objects.bin"
000ECA84                            		even
000ECA84                            ObjPos_ABZ3:	incbin	"LevelConverter\abz2\Objects.bin"
000ECA8A                            		even
000ECA8A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000ECA90                            ; ---------------------------------------------------------------------------
000ECA90                            		incbin	misc\padding4.bin
000ED0BA                            		even
000ED0BA                            
000ED0BA                            	include	'#screens\DAC_Player.asm'
000ED0BA                            DAC_Player:
000ED0BA 70E4                       	moveq	#$FFFFFFE4,d0
000ED0BC 4EB8 325C                  	jsr	PlaySound_Special
000ED0C0                            
000ED0C0 4EB8 3770                  	jsr	ClearPLC
000ED0C4 4EB8 46B4                  	jsr	Pal_FadeFrom
000ED0C8 4DF9 00C0 0004             	lea	($C00004).l,a6
000ED0CE                            
000ED0CE                            	; store VDP registers
000ED0CE 3CBC 8004                  	move.w	#$8004,(a6)	; $00
000ED0D2 3CBC 8230                  	move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
000ED0D6 3CBC 8407                  	move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
000ED0DA 3CBC 8700                  	move.w	#$8700,(a6)     ; $07, set Blackdrop Color
000ED0DE 3CBC 8B00                  	move.w	#$8B00,(a6)	; $0B, set Scrolling Mode
000ED0E2                            
000ED0E2 4238 F64E                  	clr.b	($FFFFF64E).w	; clear water palette state
000ED0E6 46FC 2700                  	move	#$2700,sr	; disable interrupts
000ED0EA 33FC 8134 00C0 0004        	move.w	#$8134,($C00004).l
000ED0F2 4EB8 3084                  	jsr	ClearScreen
000ED0F6                            
000ED0F6 4DF9 00C0 0000             	lea	($C00000).l,a6
000ED106 41F9 0002 A124             	lea	(Art_Text).l,a0
000ED10C 7216                       	moveq	#$16,d1
000ED10E 2C98                       @0	move.l	(a0)+,(a6)
000ED110 2C98                       	move.l	(a0)+,(a6)
000ED112 2C98                       	move.l	(a0)+,(a6)
000ED114 2C98                       	move.l	(a0)+,(a6)
000ED116 2C98                       	move.l	(a0)+,(a6)
000ED118 2C98                       	move.l	(a0)+,(a6)
000ED11A 2C98                       	move.l	(a0)+,(a6)
000ED11C 2C98                       	move.l	(a0)+,(a6)
000ED11E 51C9 FFEE                          dbf	d1,@0
000ED122                            
000ED122 7003                       	moveq	#3,d0		; load Sonic's pallet
000ED124 4EB8 4986                  	jsr	PalLoad1
000ED128 0838 0007 F604             	btst	#7,($FFFFF604).w ; is Start button pressed?
000ED12E 6700                       	beq.s	DAC_DoNothing	; if not, branch
000ED130 11FC 0000 F600             	move.b	#0,($FFFFF600).w
000ED136 4E75                       	rts
000ED138                            DAC_DoNothing:
000ED138 4EB8 45FA                  	jsr	Pal_FadeTo
000ED13C                            
000ED13C 33FC 8174 00C0 0004        	move.w	#$8174,($C00004).l
000ED144 7C80                       	moveq	#$FFFFFF80,d6	; start sample
000ED146 2E06                       	move.l	d6,d7
000ED148 7600                       	moveq	#0,d3
000ED14A 7A00                       	moveq	#0,d5
000ED14C 4879 0000 0000             	pea	Player_MainProcess
000ED152                            
000ED152                            ; ==========================================================
000ED152                            
000ED152                            Player_Redraw:
000ED152                            
000ED152                            	; Draw Cursor
000ED152 7001                       	moveq	#1,d0		; cursor pattern
000ED154 4A45                       	tst.w	d5
000ED156 6700                       	beq.s	@2
000ED158 4840                       	swap	d0
000ED164 3C80                       	move.w	d0,(a6)
000ED166 4840                       	swap	d0
000ED172 3C80                       	move.w	d0,(a6)
000ED174                            
000ED174                            	; Draw Sample numbers
000ED17E 3006                       	move.w	d6,d0		; load PCM A Number
000ED180 6100                       	bsr.s	@Draw
000ED182 3007                       	move.w	d7,d0		; load PCM B Number
000ED18E 6100                       	bsr.s	@Draw
000ED190                            	
000ED190                            	; Debug draw
000ED19A 3004                       	move.w	d4,d0
000ED19C                            
000ED19C                            @Draw:
000ED19C 3200                       	move.w	d0,d1
000ED19E E809                       	lsr.b	#4,d1
000ED1A0 0241 000F                  	andi.w	#$F,d1
000ED1A4 0C41 000A                  	cmpi.w	#$A,d1
000ED1A8 6500                       	bcs.s	@0
000ED1AA 5841                       	addq.w	#4,d1
000ED1AC 5241                       @0	addq.w	#1,d1
000ED1AE 3C81                       	move.w	d1,(a6)
000ED1B0                            
000ED1B0 3200                       	move.w	d0,d1
000ED1B2 0241 000F                  	andi.w	#$F,d1
000ED1B6 0C41 000A                  	cmpi.w	#$A,d1
000ED1BA 6500                       	bcs.s	@1
000ED1BC 5841                       	addq.w	#4,d1
000ED1BE 5241                       @1	addq.w	#1,d1
000ED1C0 3C81                       	move.w	d1,(a6)
000ED1C2 4E75                       	rts
000ED1C4                            
000ED1C4                            ; ==========================================================
000ED1C4                            
000ED1C4                            Player_MainProcess:
000ED1C4 11FC 0002 F62A             	move.b	#2,($FFFFF62A).w
000ED1CA 4EB9 0000 8EFE             	jsr	DelayProgram
000ED1D0 6100 0000                  	bsr	DebugShit
000ED1D4 1238 F605                  	move.b	Joypad|Press,d1
000ED1D8 67EA                       	beq.s	Player_MainProcess
000ED1DA 6A00                       	bpl.s	@ControlPlayer
000ED1DC 4E75                       	rts
000ED1DE                            
000ED1DE                            @ControlPlayer:     
000ED1DE 487A FFE4                  	pea	Player_MainProcess
000ED1E2 74FF                       	moveq	#-1,d2
000ED1E4 0801 0002                  	btst	#iLeft,d1
000ED1E8 6600                       	bne.s	@ChangeNumber
000ED1EA 0801 0003                  	btst	#iRight,d1
000ED1EE 6700                       	beq.s	@ChangeCursor
000ED1F0 7401                       	moveq	#1,d2
000ED1F2                            
000ED1F2                            @ChangeNumber:  
000ED1F2 4A45                       	tst.w	d5
000ED1F4 6700                       	beq.s	@0
000ED1F6 DE42                       	add.w	d2,d7		; PCM B
000ED1F8 6000 FF58                  	bra	Player_Redraw
000ED1FC DC42                       @0	add.w	d2,d6		; PCM A
000ED1FE 6000 FF52                  	bra	Player_Redraw
000ED202                            
000ED202                            @ChangeCursor:
000ED202 1401                       	move.b	d1,d2
000ED204 0202 0003                  	andi.b	#Up+Down,d2
000ED208 6700                       	beq.s	@ChangeMode
000ED20A 4645                       	not.w	d5
000ED20C 6000 FF44                  	bra	Player_Redraw
000ED210                            
000ED210                            @ChangeMode:
000ED210 0801 0006                  	btst	#iA,d1
000ED214 6700                       	beq.s	@PlaySample
000ED216 4643                       	not.w	d3
000ED218 3003                       	move.w	d3,d0
000ED21A 4EF8 31DC                  	jmp	Set_MegaPCM_Mode
000ED21E                            
000ED21E                            @PlaySample:
000ED21E 4A45                       	tst.w	d5
000ED220 6700                       	beq.s	@1
000ED222 3007                       	move.w	d7,d0
000ED224 4EF8 31B0                  	jmp	PlaySample_2
000ED228 3006                       @1	move.w	d6,d0
000ED22A 4EF8 3184                  	jmp	PlaySample
000ED22E                            
000ED22E                            ; ==========================================================
000ED22E                            DebugShit:
000ED22E 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
000ED236 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000ED23E 66F6                       	bne.s	@0
000ED240 1839 00A0 1FF2             	move.b	$A01ff2,d4
000ED246 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000ED24E 6000 FF02                  	bra	Player_Redraw
000ED24E 6000 FF02                  	bra	Player_Redraw
000ED252                            	
000ED252                            ;	include	'_inc\ASCII texts.asm'
000ED252                            ;	include '_inc\Selchar.asm'
000ED252                            ;	include '_inc\pausemenu.asm'
000ED252                            ; end of 'ROM'
000ED252                            	include	"SSRG\SSRG.asm"
000ED252                            ; ===========================================================================
000ED252                            ; ---------------------------------------------------------------------------
000ED252                            ; SSRG Splash Screen
000ED252                            ; ---------------------------------------------------------------------------
000ED252                            
000ED252                            SSRGScreen:
000ED252 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
000ED254 4EB8 325C                  		jsr	PlaySound_Special			; play ID
000ED258 4EB8 3770                  		jsr	ClearPLC				; clear pattern load cues list
000ED25C 4EB8 46B4                  		jsr	Pal_FadeFrom				; fade palettes out
000ED260 4EB8 3084                  		jsr	ClearScreen				; clear the plane mappings
000ED264 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
000ED268 7000                       		moveq	#$00,d0					; clear d0
000ED26A 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
000ED26E                            
000ED26E                            SRG_ClearObjects:
000ED26E 22C0                       		move.l	d0,(a1)+				; clear object ram
000ED270 22C0                       		move.l	d0,(a1)+				; ''
000ED272 22C0                       		move.l	d0,(a1)+				; ''
000ED274 22C0                       		move.l	d0,(a1)+				; ''
000ED276 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
000ED27A 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED27E 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
000ED284 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
000ED288 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
000ED28C 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
000ED294 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
000ED29E 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
000ED2A2 4EB8 35B2                  		jsr	NemDec					; decompress and dump
000ED2A6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
000ED2B0 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
000ED2B4 4EB8 35B2                  		jsr	NemDec					; decompress and dump
000ED2B8 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
000ED2C2 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
000ED2C6 4EB8 35B2                  		jsr	NemDec					; decompress and dump
000ED2CA 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
000ED2D4 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
000ED2D8 4EB8 35B2                  		jsr	NemDec					; decompress and dump
000ED2DC 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
000ED2E0 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ED2E6 4EB8 3A42                  		jsr	KosDec					; decompress and dump
000ED2EA 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ED2F0 701F                       		moveq	#$1F,d0					; set number of columns
000ED2F2 7200                       		moveq	#$00,d1					; set number of rows
000ED2F4 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
000ED2FA 6100 0000                  		bsr	MapScreen				; write to the map plane
000ED2FE 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
000ED302 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ED308 4EB8 3A42                  		jsr	KosDec					; decompress and dump
000ED30C 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
000ED310 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
000ED316 4EB8 3A42                  		jsr	KosDec					; decompress and dump
000ED31A 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
000ED31E 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
000ED322 7E07                       		moveq	#$07,d7					; set repeat times
000ED324                            
000ED324                            SRG_DumpPal:
000ED324 22D8                       		move.l	(a0)+,(a1)+				; dump palette
000ED326 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED328 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED32A 22D8                       		move.l	(a0)+,(a1)+				; ''
000ED32C 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
000ED330 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
000ED334 12BC 0001                  		move.b	#$01,(a1)				; set "S"
000ED338 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
000ED33E 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
000ED344 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
000ED34A 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED34E 4EB8 45FA                  		jsr	Pal_FadeTo				; fade palettes in
000ED352 7000                       		moveq	#$00,d0					; clear d0
000ED354 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
000ED35A 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
000ED360 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
000ED366                            
000ED366                            ; ---------------------------------------------------------------------------
000ED366                            ; SSRG Splash Screen main loop
000ED366                            ; ---------------------------------------------------------------------------
000ED366                            
000ED366                            SSRGScreen_Loop:
000ED366 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
000ED36C 4EB9 0000 8EFE             		jsr	DelayProgram				; hult til V-Blank begins
000ED372 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
000ED378 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
000ED37C 6100 0000                  		bsr	ObjectLetters				; run "S"
000ED380 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
000ED384 6100 0000                  		bsr	ObjectLetters				; run "S"
000ED388 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
000ED38C 6100 0000                  		bsr	ObjectLetters				; run "R"
000ED390 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
000ED394 6100 0000                  		bsr	ObjectLetters				; run "G"
000ED398 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
000ED39C 6100 0000                  		bsr	ObjectSquare				; run Square
000ED3A0 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
000ED3A4 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
000ED3A8 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
000ED3AC 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
000ED3B0 4EB9 0001 5DC2             		jsr	BuildSprites				; present all object sprites on screen
000ED3B6 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
000ED3BA 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
000ED3BE 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
000ED3C6 6D9E                       		blt	SSRGScreen_Loop				; if not, loop
000ED3C8                            
000ED3C8                            SSRGScreen_Finish:
000ED3C8 4EB9 0000 0000             		jsr	SRScreen ; go to next screen
000ED3CE 4E75                       		rts						; return
000ED3D0                            
000ED3D0                            ; ===========================================================================
000ED3D0                            ; ---------------------------------------------------------------------------
000ED3D0                            ; Subroutine to control the FG scrolling
000ED3D0                            ; ---------------------------------------------------------------------------
000ED3D0                            
000ED3D0                            SRG_ScrollFG:
000ED3D0 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
000ED3D4 7000                       		moveq	#$00,d0					; clear d0
000ED3D6 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ED3DC 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
000ED3E0 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
000ED3E4 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
000ED3E8 D040                       		add.w	d0,d0					; multiply by 2
000ED3EA 4440                       		neg.w	d0					; negate to move left insted
000ED3EC 4840                       		swap	d0					; send left for FG
000ED3EE 7E1F                       		moveq	#$1F,d7					; set repeat times
000ED3F0                            
000ED3F0                            SRG_SFG_Scroll01:
000ED3F0 22C0                       		move.l	d0,(a1)+				; dump to buffer
000ED3F2 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
000ED3F6                            
000ED3F6                            SRG_FinFGScroll:
000ED3F6 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
000ED3FA 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
000ED400 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
000ED404                            
000ED404                            SRG_SBG_Scroll02:
000ED404 5449                       		addq.w	#$02,a1					; skip FG
000ED406 32C0                       		move.w	d0,(a1)+				; dump BG
000ED408 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
000ED40C 4E75                       		rts						; return
000ED40E                            
000ED40E                            ; ===========================================================================
000ED40E                            ; ---------------------------------------------------------------------------
000ED40E                            ; Subroutine to control the FG map/drawing
000ED40E                            ; ---------------------------------------------------------------------------
000ED40E                            
000ED40E                            SRG_DrawFG:
000ED40E 7000                       		moveq	#$00,d0					; clear d0
000ED410 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ED416 D040                       		add.w	d0,d0					; multiply by 2
000ED418 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
000ED41C 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
000ED420 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
000ED424 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED428 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
000ED42E 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
000ED434 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
000ED438 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
000ED43E 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
000ED442 E448                       		lsr.w	#$02,d0					; divide by 4
000ED444 3200                       		move.w	d0,d1					; copy to d1
000ED446 4840                       		swap	d0					; align
000ED448 DC80                       		add.l	d0,d6					; add to V-Ram address
000ED44A D8C1                       		adda.w	d1,a4					; add to map buffer address
000ED44C 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
000ED450 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
000ED454 2C86                       		move.l	d6,(a6)					; set VDP mode and address
000ED456 3014                       		move.w	(a4),d0					; load map tile
000ED458 D041                       		add.w	d1,d0					; increase palette to next line
000ED45A 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED45C 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ED460 3014                       		move.w	(a4),d0					; load map tile
000ED462 D041                       		add.w	d1,d0					; increase palette to next line
000ED464 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED466 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ED46A 3014                       		move.w	(a4),d0					; load map tile
000ED46C D041                       		add.w	d1,d0					; increase palette to next line
000ED46E 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ED470 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
000ED474 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED478 4E75                       		rts						; return
000ED47A                            
000ED47A                            SRG_DFG_FlashOn:
000ED47A 0440 0170                  		subi.w	#$0170,d0				; minus starting point
000ED47E 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
000ED482 7A00                       		moveq	#$00,d5					; set tile add value (Light)
000ED484 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
000ED488 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
000ED48C 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
000ED490 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
000ED494 0200 0008                  		andi.b	#$08,d0					; get within 8
000ED498 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
000ED49C 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
000ED4A0                            
000ED4A0                            SRG_DFG_DrawFlash:
000ED4A0 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ED4A6 7022                       		moveq	#$22,d0					; set number of columns
000ED4A8 7202                       		moveq	#$02,d1					; set number of rows
000ED4AA 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
000ED4B0 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
000ED4B4                            
000ED4B4                            SRG_DFG_NoDraw:
000ED4B4 4E75                       		rts						; return
000ED4B6                            
000ED4B6                            ; ===========================================================================
000ED4B6                            ; ---------------------------------------------------------------------------
000ED4B6                            ; Subroutine to control a Neon Sonic object
000ED4B6                            ; ---------------------------------------------------------------------------
000ED4B6                            
000ED4B6                            ObjectSonicNeon:
000ED4B6 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
000ED4BA 6600 0000                  		bne	OSN_SetupDone				; if so, branch
000ED4BE 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
000ED4C2 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
000ED4C8 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
000ED4D0 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
000ED4D8 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ED4DE 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000ED4E4 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000ED4EA 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
000ED4F0 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
000ED4F6 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED4FA                            
000ED4FA                            OSN_SetupDone:
000ED4FA 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
000ED4FE 6700 0000                  		beq	OSN_MoveIn				; if not, branch
000ED502 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000ED506 4E75                       		rts						; return
000ED508                            
000ED508                            OSN_MoveIn:
000ED508 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
000ED50E 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
000ED512 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
000ED518 6D00 0000                  		blt	OSN_NoStop				; if not, branch
000ED51C 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
000ED522 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
000ED526 303C 003C                  		move.w	#$3C,d0				; set to play spinning SFX
000ED52A 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED52E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED532                            
000ED532                            OSN_NoStop:
000ED532 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
000ED538 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
000ED53C 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
000ED540 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
000ED544 7000                       		moveq	#$00,d0					; reset to 0
000ED546 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
000ED54A                            
000ED54A                            OSN_NoResetAni:
000ED54A 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ED54E 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
000ED554 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
000ED558 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
000ED55C 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
000ED560 45D1                       		lea	(a1),a2					; '' to a2
000ED562 3019                       		move.w	(a1)+,d0				; store first colour
000ED564 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
000ED566 34D9                       		move.w	(a1)+,(a2)+				; ''
000ED568 34D1                       		move.w	(a1),(a2)+				; ''
000ED56A 3280                       		move.w	d0,(a1)					; save first colour as last
000ED56C                            
000ED56C                            OSN_NoCyclePalette:
000ED56C 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000ED570 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED576                            
000ED576                            ; ===========================================================================
000ED576                            ; ---------------------------------------------------------------------------
000ED576 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
000ED578 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
000ED57A 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
000ED57C 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
000ED57E 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
000ED580 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
000ED582                            ; ---------------------------------------------------------------------------
000ED582 04                         ObjSon00:	dc.b	$04
000ED583 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
000ED588 FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
000ED58D FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
000ED592 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
000ED597 02                         ObjSon01:	dc.b	$02
000ED598 EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
000ED59D FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
000ED5A2 02                         ObjSon02:	dc.b	$02
000ED5A3 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
000ED5A8 FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
000ED5AD 04                         ObjSon03:	dc.b	$04
000ED5AE EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
000ED5B3 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
000ED5B8 FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
000ED5BD 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
000ED5C2 02                         ObjSon04:	dc.b	$02
000ED5C3 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
000ED5C8 FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
000ED5CD 03                         ObjSon05:	dc.b	$03
000ED5CE ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
000ED5D3 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
000ED5D8 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
000ED5DE 00                         		even
000ED5DE                            ; ---------------------------------------------------------------------------
000ED5DE                            ; ===========================================================================
000ED5DE                            ; ---------------------------------------------------------------------------
000ED5DE                            ; Subroutine to control the Square much like objects
000ED5DE                            ; ---------------------------------------------------------------------------
000ED5DE                            
000ED5DE                            ObjectSquare:
000ED5DE 7000                       		moveq	#$00,d0					; clear d0
000ED5E0 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED5E4 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
000ED5E8 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
000ED5EC                            
000ED5EC                            ; ===========================================================================
000ED5EC                            ; ---------------------------------------------------------------------------
000ED5EC 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
000ED5EE 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
000ED5F0 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
000ED5F2 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
000ED5F4 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
000ED5F6 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
000ED5F8                            ; ---------------------------------------------------------------------------
000ED5F8                            ; ===========================================================================
000ED5F8                            ; ---------------------------------------------------------------------------
000ED5F8                            ; Startup
000ED5F8                            ; ---------------------------------------------------------------------------
000ED5F8                            
000ED5F8                            OS_Startup:
000ED5F8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED5FC 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
000ED604 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
000ED60A 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
000ED612 6000 0000                  		bra	UpdateScrollPositions			; update positions
000ED616                            
000ED616                            ; ===========================================================================
000ED616                            ; ---------------------------------------------------------------------------
000ED616                            ; Playing spin sound once
000ED616                            ; ---------------------------------------------------------------------------
000ED616                            
000ED616                            OS_PlaySound:
000ED616 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED61A 70B6                       		moveq	#$FFFFFFB6,d0				; set to play spin release SFX
000ED61C 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED620                            
000ED620                            ; ===========================================================================
000ED620                            ; ---------------------------------------------------------------------------
000ED620                            ; Spinning in and hitting the SSRG letters
000ED620                            ; ---------------------------------------------------------------------------
000ED620                            
000ED620                            OS_SpinIn:
000ED620 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
000ED624 3028 0008                  		move.w	$08(a0),d0				; load X position
000ED628 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
000ED62C 6D00 0000                  		blt	OS_Display				; if not, branch
000ED630 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED634 7096                       		moveq	#$FFFFFF96,d0				; set to play spiked chandelier SFX
000ED636 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED63A 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
000ED642 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
000ED648 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
000ED64E 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
000ED656 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
000ED65E 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
000ED666 6000 0000                  		bra	OS_Display				; continue
000ED66A                            
000ED66A                            ; ===========================================================================
000ED66A                            ; ---------------------------------------------------------------------------
000ED66A                            ; Spinning in and hitting the SSRG letters
000ED66A                            ; ---------------------------------------------------------------------------
000ED66A                            
000ED66A                            OS_UpAndLand:
000ED66A 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
000ED66E 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
000ED674 6B00 0000                  		bmi	OS_Display				; if not going down, branch
000ED678 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
000ED67E 6D00 0000                  		blt	OS_Display				; if not, branch
000ED682 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
000ED688 7000                       		moveq	#$00,d0					; clear d0
000ED68A 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000ED68E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED692 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
000ED698 6000 0000                  		bra	OS_Display				; continue
000ED69C                            
000ED69C                            ; ===========================================================================
000ED69C                            ; ---------------------------------------------------------------------------
000ED69C                            ; Finishing the spin by slowing down
000ED69C                            ; ---------------------------------------------------------------------------
000ED69C                            
000ED69C                            OS_FinishSpin:
000ED69C 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
000ED6A0 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
000ED6A4 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
000ED6A8 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
000ED6AC 6700 0000                  		beq	OS_NoColour01				; if so, branch
000ED6B0 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
000ED6B4                            
000ED6B4                            OS_NoColour01:
000ED6B4 5849                       		addq.w	#$04,a1					; goto next 2nd colour
000ED6B6 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
000ED6BA 6700 0000                  		beq	OS_Display				; if so, branch
000ED6BE 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
000ED6C2 6000 0000                  		bra	OS_Display				; continue
000ED6C6                            
000ED6C6                            OS_NoFinish:
000ED6C6 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
000ED6CA 3200                       		move.w	d0,d1					; copy to d1
000ED6CC E049                       		lsr.w	#$08,d1					; get left byte only
000ED6CE 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
000ED6D2 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
000ED6D6                            
000ED6D6                            ; ===========================================================================
000ED6D6                            ; ---------------------------------------------------------------------------
000ED6D6                            ; Displaying the square
000ED6D6                            ; ---------------------------------------------------------------------------
000ED6D6                            
000ED6D6                            OS_Display:
000ED6D6 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED6DC 6100 0000                  		bsr	UpdateScrollPositions			; update positions
000ED6E0                            
000ED6E0                            OS_DiplayEnd:
000ED6E0 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
000ED6E4 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED6E8 7010                       		moveq	#$10,d0					; set number of columns
000ED6EA 7210                       		moveq	#$10,d1					; set number of rows
000ED6EC 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
000ED6F2 7A00                       		moveq	#$00,d5					; set blank tile
000ED6F4 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
000ED6F8 301F                       		move.w	(sp)+,d0				; load spin counter
000ED6FA 0240 0018                  		andi.w	#$0018,d0				; keep in range
000ED6FE D040                       		add.w	d0,d0					; multiply by 2
000ED700 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
000ED704 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
000ED706 241C                       		move.l	(a4)+,d2				; load V-Ram address
000ED708 301C                       		move.w	(a4)+,d0				; load X draw amount
000ED70A 321C                       		move.w	(a4)+,d1				; load Y draw amount
000ED70C 6100 0000                  		bsr	MapScreen				; write to the map plane
000ED710 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED714 4E75                       		rts						; return
000ED716                            
000ED716                            ; ---------------------------------------------------------------------------
000ED716                            ; Updating the scroll positions for the BG plane
000ED716                            ; ---------------------------------------------------------------------------
000ED716                            
000ED716                            UpdateScrollPositions:
000ED716 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
000ED71E 3028 000A                  		move.w	$0A(a0),d0				; load Y position
000ED722 4440                       		neg.w	d0					; negate opposite direction
000ED724 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
000ED728 4E75                       		rts						; return
000ED72A                            
000ED72A                            ; ===========================================================================
000ED72A                            ; ---------------------------------------------------------------------------
000ED72A FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
000ED72E 6104 0003                  		dc.l	$61040003				; V-Ram address
000ED732 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
000ED736 0000 0000                  		dc.l	$00000000				; null/spare
000ED73A FFFF 4120                  		dc.l	$FFFF4120				; ''
000ED73E 6000 0003                  		dc.l	$60000003				; ''
000ED742 000F 000F                  		dc.l	$000F000F				; ''
000ED746 0000 0000                  		dc.l	$00000000				; ''
000ED74A FFFF 4320                  		dc.l	$FFFF4320				; ''
000ED74E 6000 0003                  		dc.l	$60000003				; ''
000ED752 0010 0010                  		dc.l	$00100010				; ''
000ED756 0000 0000                  		dc.l	$00000000				; ''
000ED75A FFFF 4562                  		dc.l	$FFFF4562				; ''
000ED75E 6000 0003                  		dc.l	$60000003				; ''
000ED762 000F 000F                  		dc.l	$000F000F				; ''
000ED766 0000 0000                  		dc.l	$00000000				; ''
000ED76A                            ; ---------------------------------------------------------------------------
000ED76A                            ; ===========================================================================
000ED76A                            ; ---------------------------------------------------------------------------
000ED76A                            ; Subroutine to control the "SSRG" letter sprites
000ED76A                            ; ---------------------------------------------------------------------------
000ED76A                            
000ED76A                            ObjectLetters:
000ED76A 7000                       		moveq	#$00,d0					; clear d0
000ED76C 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED770 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
000ED774 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
000ED778                            
000ED778                            ; ===========================================================================
000ED778                            ; ---------------------------------------------------------------------------
000ED778 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
000ED77A 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
000ED77C 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
000ED77E 0000                       		dc.w	OL_Spring-OL_Index			; 06
000ED780 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
000ED782 0000                       		dc.w	OL_Idle-OL_Index			; 0A
000ED784                            ; ---------------------------------------------------------------------------
000ED784                            ; ===========================================================================
000ED784                            ; ---------------------------------------------------------------------------
000ED784                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
000ED784                            ; ---------------------------------------------------------------------------
000ED784 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
000ED794 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
000ED7A4 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
000ED7B4 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
000ED7C4                            ; ---------------------------------------------------------------------------
000ED7C4                            ; ===========================================================================
000ED7C4                            ; ---------------------------------------------------------------------------
000ED7C4                            ; Startup
000ED7C4                            ; ---------------------------------------------------------------------------
000ED7C4                            
000ED7C4                            OL_Startup:
000ED7C4 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED7C8 1010                       		move.b	(a0),d0					; load object type
000ED7CA 5300                       		subq.b	#$01,d0					; decrease by 1
000ED7CC E948                       		lsl.w	#$04,d0					; multiply by 10
000ED7CE 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
000ED7D2 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
000ED7D6 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
000ED7DA 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
000ED7DE 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
000ED7E2 3019                       		move.w	(a1)+,d0				; load map ID
000ED7E4 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ED7E8 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
000ED7F0 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ED7F6 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000ED7FC 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000ED802                            
000ED802                            ; ===========================================================================
000ED802                            ; ---------------------------------------------------------------------------
000ED802                            ; Delay/Time wait
000ED802                            ; ---------------------------------------------------------------------------
000ED802                            
000ED802                            OL_WaitTime:
000ED802 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000ED806 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
000ED80A 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED80E                            
000ED80E                            OL_WT_Wait:
000ED80E 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED814                            
000ED814                            ; ===========================================================================
000ED814                            ; ---------------------------------------------------------------------------
000ED814                            ; Flying up and landing
000ED814                            ; ---------------------------------------------------------------------------
000ED814                            
000ED814                            OL_FlyUp:
000ED814 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED81A 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
000ED820 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
000ED824 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
000ED828 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
000ED82C 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
000ED830 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED834                            
000ED834                            OL_NoStopDown:
000ED834 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED83A                            
000ED83A                            ; ===========================================================================
000ED83A                            ; ---------------------------------------------------------------------------
000ED83A                            ; Springing under the land and back up again
000ED83A                            ; ---------------------------------------------------------------------------
000ED83A                            
000ED83A                            OL_Spring:
000ED83A 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED840 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
000ED846 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
000ED84A 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
000ED84E B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
000ED852 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
000ED856 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000ED85A 4268 002A                  		clr.w	$2A(a0)					; clear timer
000ED85E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED862                            
000ED862                            OL_NoStopUp:
000ED862 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED868                            
000ED868                            ; ===========================================================================
000ED868                            ; ---------------------------------------------------------------------------
000ED868                            ; Slowing the letter down on X
000ED868                            ; ---------------------------------------------------------------------------
000ED868                            
000ED868                            OL_SlowDown:
000ED868 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
000ED86C 6A00 0000                  		bpl	OL_NoMove				; if not, branch
000ED870 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED876 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
000ED87C 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED882                            
000ED882                            OL_NoMove:
000ED882 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
000ED886 1028 002A                  		move.b	$2A(a0),d0				; load timer
000ED88A 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
000ED88E 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
000ED892 7040                       		moveq	#$40,d0					; set colour line to check value on
000ED894 B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
000ED898 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
000ED89C 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
000ED8A2 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED8A6 7000                       		moveq	#$00,d0					; clear d0
000ED8A8 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000ED8AC 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
000ED8B2 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000ED8B8 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED8BE                            
000ED8BE                            OL_NoFinish:
000ED8BE 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
000ED8C4                            
000ED8C4                            ; ===========================================================================
000ED8C4                            ; ---------------------------------------------------------------------------
000ED8C4                            ; Idle (Finish)
000ED8C4                            ; ---------------------------------------------------------------------------
000ED8C4                            
000ED8C4                            OL_Idle:
000ED8C4 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000ED8C8 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
000ED8CE 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
000ED8D2 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
000ED8D6 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000ED8DA 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000ED8E0 6000 0000                  		bra	OL_CheckXSpeed				; continue
000ED8E4                            
000ED8E4                            OL_CheckYSpeed:
000ED8E4 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
000ED8EA                            
000ED8EA                            OL_CheckXSpeed:
000ED8EA 303C 0040                  		move.w	#$0040,d0				; set speed decrease
000ED8EE 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
000ED8F2 6700 0000                  		beq	OL_Display				; if not, branch
000ED8F6 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
000ED8FA 4440                       		neg.w	d0					; negate decreasing speed
000ED8FC                            
000ED8FC                            OL_DecreaseRight:
000ED8FC 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
000ED900                            
000ED900                            OL_Display:
000ED900 4EF9 0001 5D72             		jmp	DisplaySprite				; save object for displaying
000ED906                            
000ED906                            ; ===========================================================================
000ED906                            ; ---------------------------------------------------------------------------
000ED906 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
000ED908                            ; ---------------------------------------------------------------------------
000ED908 01                         ObjLet_SSRG:	dc.b	$01
000ED909 F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
000ED90E                            		even
000ED90E                            ; ---------------------------------------------------------------------------
000ED90E                            ; ===========================================================================
000ED90E                            ; ---------------------------------------------------------------------------
000ED90E                            ; Subroutine to convert speed to position for HUD objects
000ED90E                            ; ---------------------------------------------------------------------------
000ED90E                            
000ED90E                            SpeedToPosHud:
000ED90E 3028 0010                  		move.w	$10(a0),d0				; load X speed
000ED912 48C0                       		ext.l	d0					; extend incase it's negative
000ED914 E180                       		asl.l	#$08,d0					; multiply by 100
000ED916 4840                       		swap	d0					; get X add position
000ED918 D168 0008                  		add.w	d0,$08(a0)				; save new X position
000ED91C 3028 0012                  		move.w	$12(a0),d0				; load Y speed
000ED920 48C0                       		ext.l	d0					; extend incase it's negative
000ED922 E180                       		asl.l	#$08,d0					; multiply by 100
000ED924 D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
000ED928 4E75                       		rts						; return
000ED92A                            
000ED92A                            ; ===========================================================================
000ED92A                            ; ---------------------------------------------------------------------------
000ED92A                            ; Subroutine to map tile to VDP screen
000ED92A                            ; ---------------------------------------------------------------------------
000ED92A                            
000ED92A                            MapScreen:
000ED92A 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED930 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED934 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED93A                            
000ED93A                            MapScreen_Row:
000ED93A 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED93C 3600                       		move.w	d0,d3					; reload number of columns
000ED93E                            
000ED93E                            MapScreen_Column:
000ED93E 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
000ED940 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
000ED944 D484                       		add.l	d4,d2					; increae to next row on VRam
000ED946 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
000ED94A 4E75                       		rts						; return
000ED94C                            
000ED94C                            ; ===========================================================================
000ED94C                            ; ---------------------------------------------------------------------------
000ED94C                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
000ED94C                            ; ---------------------------------------------------------------------------
000ED94C                            
000ED94C                            MapScreenAdd:
000ED94C 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED952 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED956 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED95C                            
000ED95C                            MapScreenAdd_Row:
000ED95C 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED95E 3600                       		move.w	d0,d3					; reload number of columns
000ED960                            
000ED960                            MapScreenAdd_Column:
000ED960 3C1D                       		move.w	(a5)+,d6				; load map ID
000ED962 DC45                       		add.w	d5,d6					; add d5 contents
000ED964 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
000ED966 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
000ED96A D484                       		add.l	d4,d2					; increae to next row on VRam
000ED96C 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
000ED970 4E75                       		rts						; return
000ED972                            
000ED972                            ; ===========================================================================
000ED972                            ; ---------------------------------------------------------------------------
000ED972                            ; Subroutine to map a single tile to VDP screen
000ED972                            ; ---------------------------------------------------------------------------
000ED972                            
000ED972                            MapScreenSingle:
000ED972 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED978 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED97C 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED982                            
000ED982                            MapScreenSingle_Row:
000ED982 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED984 3600                       		move.w	d0,d3					; reload number of columns
000ED986                            
000ED986                            MapScreenSingle_Column:
000ED986 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
000ED988 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
000ED98C D484                       		add.l	d4,d2					; increae to next row on VRam
000ED98E 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
000ED992 4E75                       		rts						; return
000ED994                            
000ED994                            ; ===========================================================================
000ED994                            ; ---------------------------------------------------------------------------
000ED994                            ; SSRG Data
000ED994                            ; ---------------------------------------------------------------------------
000ED994                            Pal_SSRG:	incbin	"SSRG/SSRG.pal"
000EDA14                            		even
000EDA14                            ; ---------------------------------------------------------------------------
000EDA14                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
000EE088 00                         		even
000EE088                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
000EE4F4 00                         		even
000EE4F4                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
000EE7D2                            		even
000EE7D2                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
000EE8BA                            		even
000EE8BA                            ; ---------------------------------------------------------------------------
000EE8BA                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
000EE96C 00                         		even
000EE96C                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
000EEBB6                            		even
000EEBB6                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
000EEBEC                            		even
000EEBEC                            ; ---------------------------------------------------------------------------
000EEBEC                            ; ===========================================================================
000EEBEC                            ; ===========================================================================
000EEBEC                            ; Sonic 2 Options and level select	
000EEBEC                            s2_menuasm:
000EEBEC                            		include 's2_menu.asm'
000EEBEC                            ;===============================================================================
000EEBEC                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
000EEBEC                            ; [ Início ]
000EEBEC                            ;
000EEBEC                            ; O código deste menu foi desenvolvido para funcionar com
000EEBEC                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
000EEBEC                            ; 
000EEBEC                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
000EEBEC                            ; código para que aponte para as rotinas equivalentes.
000EEBEC                            ; 
000EEBEC                            ; Para pode utilizar este menu basta fazer a seguinte modificação no código 
000EEBEC                            ; original:
000EEBEC                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
000EEBEC                            ; O código deve ficar como abaixo
000EEBEC                            ;               ......................
000EEBEC                            ; loc_3242:
000EEBEC                            ;		tst.b	($FFFFFFD0).w
000EEBEC                            ;		beq.w	PlayLevel	
000EEBEC                            ;		btst	#6,($FFFFF604).w 
000EEBEC                            ;		beq.w	PlayLevel	  		
000EEBEC                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
000EEBEC                            ;		moveq	#2,d0		
000EEBEC                            ;		bsr.w	PalLoad		 
000EEBEC                            ;               ...............
000EEBEC                            ;
000EEBEC                            ; Não esqueça de incluir este asm em seu código com a diretiva include:
000EEBEC                            ;               include 's2_menu.asm'
000EEBEC                            ;===============================================================================  
000EEBEC                            ;Slow_Motion_Flag      equ $FFFFFFD1
000EEBEC                            ;Debug_Mode_Flag       equ $FFFFFFD2
000EEBEC                            
000EEBEC =00000010                  Main_Menu_Snd   = $0010
000EEBEC =0000002B                  Emerald_Snd             = $002B
000EEBEC =00000033                  Ring_Snd                = $0033
000EEBEC =000000E1                  Volume_Down             = $00E1
000EEBEC =000000E0                  Stop_Sound              = $00E0
000EEBEC                            ;-------------------------------------------------------------------------------
000EEBEC                            ; Options and Level Select Code from Sonic 2 Rev02 (Sonic Classics Version) 
000EEBEC                            ;-------------------------------------------------------------------------------
000EEBEC                            MenuScreen:
000EEBEC                            Main_Menu_Screen: ; Offset_0x008B50:   
000EEBEC 4EB8 46B4                                  jsr     Pal_FadeFrom                           ; Offset_0x002426
000EEBF0 46FC 2700                                  move    #$2700, SR
000EEBF4 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EEBF8 0200 00BF                                  andi.b  #$BF, D0                                     ; $00C00004
000EEBFC 33C0 00C0 0004                             move.w  D0, ($00C00004)
000EEC02 4EB8 3084                                  jsr     ClearScreen                            ; Offset_0x0011C4
000EEC06 4DF9 00C0 0004                             lea     ($00C00004), A6                       ; $00C00004
000EEC0C 3CBC 8004                                  move.w  #$8004, (A6)
000EEC10 3CBC 8230                                  move.w  #$8230, (A6)
000EEC14 3CBC 8407                                  move.w  #$8407, (A6)
000EEC18 3CBC 8230                                  move.w  #$8230, (A6)
000EEC1C 3CBC 8700                                  move.w  #$8700, (A6)
000EEC20 3CBC 8C81                                  move.w  #$8C81, (A6)
000EEC24 3CBC 9001                                  move.w  #$9001, (A6)
000EEC28 43F8 AC00                                  lea     ($FFFFAC00).w, A1
000EEC2C 7000                                       moveq   #$00, D0
000EEC2E 323C 00FF                                  move.w  #$00FF, D1
000EEC32                            Offset_0x008B96:
000EEC32 22C0                                       move.l  D0, (A1)+
000EEC34 51C9 FFFC                                  dbra    D1, Offset_0x008B96
000EEC38 43F8 D000                                  lea     ($FFFFD000).w, A1
000EEC3C 7000                                       moveq   #$00, D0
000EEC3E 323C 07FF                                  move.w  #$07FF, D1
000EEC42                            Offset_0x008BA6:
000EEC42 22C0                                       move.l  D0, (A1)+
000EEC44 51C9 FFFC                                  dbra    D1, Offset_0x008BA6
000EEC48 4278 C800                                  clr.w   ($FFFFC800).w
000EEC4C 21FC FFFF C800 C8FC                        move.l  #$FFFFC800, ($FFFFC8FC).w
000EEC54 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)               ; $00C00004
000EEC5E 41F9 0002 FAE2                             lea     (Nem_MenuFont), A0                        ; Offset_0x07C43A
000EEC64 4EB8 35B2                                  jsr     NemDec                             ; Offset_0x00149A
000EEC68 23FC 4E00 0000 00C0 0004                   move.l  #$4E000000, ($00C00004)               ; $00C00004
000EEC72 41F9 0000 0000                             lea     (Menu_Frame), A0                       ; Offset_0x07D990
000EEC78 4EB8 35B2                                  jsr     NemDec                             ; Offset_0x00149A
000EEC7C 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)               ; $00C00004
000EEC86 41F9 0000 0000                             lea     (Level_Icons), A0                      ; Offset_0x07DA10
000EEC8C 4EB8 35B2                                  jsr     NemDec                             ; Offset_0x00149A
000EEC90 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEC96 41F9 0000 0000                             lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x07CB80
000EEC9C 303C 6000                                  move.w  #$6000, D0
000EECA0 4EB8 38BA                                  jsr     EniDec                              ; Offset_0x00177A
000EECA4 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EECAA 203C 6000 0003                             move.l  #$60000003, D0
000EECB0 7227                                       moveq   #$27, D1
000EECB2 741B                                       moveq   #$1B, D2
000EECB4 4EB8 34BC                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EECB8 0C38 002C F600                             cmpi.b  #$2C, ($FFFFF600).w         ; $24, $FFFFF600
000EECBE 6700 0000                  				beq     Options_Menu                           ; Offset_0x008F56
000EECC2 4EF9 0000 0000             				jmp    	Level_Select_Menu                ; Offset_0x00928C
000EECC8                            Offset_0x008F48:
000EECC8 7200                                       moveq   #$00, D1
000EECCA 1219                                       move.b  (A1)+, D1
000EECCC                            Offset_0x008F4C:
000EECCC 1019                                       move.b  (A1)+, D0
000EECCE 34C0                                       move.w  D0, (A2)+
000EECD0 51C9 FFFA                                  dbra    D1, Offset_0x008F4C
000EECD4 4E75                                       rts                
000EECD6                            ;===============================================================================                
000EECD6                            Options_Menu: ; Offset_0x008F56:
000EECD6 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EECDC 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EECE2 303C 0070                                  move.w  #$0070, D0
000EECE6 4EB8 38BA                                  jsr     EniDec                              ; Offset_0x00177A
000EECEA 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EECF0 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EECF6 303C 2070                                  move.w  #$2070, D0
000EECFA 4EB8 38BA                                  jsr     EniDec                              ; Offset_0x00177A
000EECFE 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EED02 6100 0000                                  bsr     Offset_0x009118
000EED06 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EED0A 6100 0000                                  bsr     Offset_0x00918C
000EED0E 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EED12 6100 0000                                  bsr     Offset_0x00918C
000EED16 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EED1A 4238 F711                                  clr.b   ($FFFFF711).w
000EED1E 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EED22 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EED28 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EED2E 7014                                       moveq   #$14, D0
000EED30 4EB8 4986                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EED34 103C 0010                                  move.b  #Main_Menu_Snd, D0      ; $91
000EED38 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EED3C                            ;                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EED3C 42B8 F700                                  clr.l   ($FFFFF700).w
000EED40 42B8 F704                                  clr.l   ($FFFFF704).w
000EED44 4278 FFE4                                  clr.w   ($FFFFFFE4).w
000EED48 4278 FFE6                                  clr.w   ($FFFFFFE6).w
000EED4C 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EED52 4EB9 0000 8EFE                             jsr     DelayProgram                           ; Offset_0x00333E
000EED58 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EED5C 0000 0040                                  ori.b   #$40, D0
000EED60 33C0 00C0 0004                             move.w  D0, ($C00004)                       ; $00C00004
000EED66 4EB8 45FA                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EED6A                            Offset_0x008FEE:
000EED6A 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EED70 4EB9 0000 8EFE                             jsr     DelayProgram                           ; Offset_0x00333E
000EED76 46FC 2700                                  move    #$2700, SR
000EED7A 6100 0000                                  bsr     Offset_0x00918C
000EED7E 6100 0000                                  bsr     Offset_0x009070
000EED82 6100 0000                                  bsr     Offset_0x009118
000EED86 46FC 2300                                  move    #$2300, SR
000EED8A 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EED90 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EED96 1038 F605                                  move.b  ($FFFFF605).w, D0
000EED9A 8038 F607                                  or.b    ($FFFFF607).w, D0
000EED9E 0200 0080                                  andi.b  #$80, D0
000EEDA2 6600                                       bne.s   Menu_Go_Play_Mode                      ; Offset_0x00902A
000EEDA4 60C4                                       bra     Offset_0x008FEE
000EEDA6                            Menu_Go_Play_Mode: ; Offset_0x00902A:
000EEDA6 1038 FF8C                                  move.b  ($FFFFFF8C).w, D0
000EEDAA 6600                                       bne.s   Menu_Go_Versus_Mode                    ; Offset_0x009046
000EEDAC 7000                                       moveq   #$00, D0
000EEDAE                            ;                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
000EEDAE 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EEDB2 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EEDB6 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EEDBC 4E75                                       rts
000EEDBE                            Menu_Go_Versus_Mode: ; Offset_0x009046:
000EEDBE 5300                                       subq.b  #$01, D0
000EEDC0 6600                                       bne.s   Offset_0x009068
000EEDC2 7001                                       moveq   #$01, D0
000EEDC4                              ;              move.w  D0, (Two_Player_Flag).w      ; $FFFFFFB8
000EEDC4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EEDC8 11FC 003C F600                             move.b  #$3C, ($FFFFF600).w     ; $1C, $FFFFF600
000EEDCE 11FC 0000 FF88                             move.b  #$00, ($FFFFFF88).w
000EEDD4 31FC 0000 FF7A                             move.w  #$0000, ($FFFFFF7A).w
000EEDDA 4E75                                       rts
000EEDDC                            Offset_0x009068:
000EEDDC 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w     ; $FFFFF600
000EEDE2 4E75                                       rts
000EEDE4                            Offset_0x009070:
000EEDE4 7400                                       moveq   #$00, D2
000EEDE6 1438 FF8C                                  move.b  ($FFFFFF8C).w, D2
000EEDEA 1038 F605                                  move.b  ($FFFFF605).w, D0
000EEDEE 8038 F607                                  or.b    ($FFFFF607).w, D0
000EEDF2 0800 0000                                  btst    #$00, D0
000EEDF6 6700                                       beq.s   Offset_0x00908C
000EEDF8 4EB9 0000 A2C6             				jsr		Sound_Select_Options
000EEDFE 5302                                       subq.b  #$01, D2
000EEE00 6400                                       bcc.s   Offset_0x00908C
000EEE02 143C 0002                                  move.b  #$02, D2
000EEE06                            Offset_0x00908C:
000EEE06 0800 0001                                  btst    #$01, D0
000EEE0A 6700                                       beq.s   Offset_0x00909C
000EEE0C 4EB9 0000 A2C6             				jsr		Sound_Select_Options
000EEE12 5202                                       addq.b  #$01, D2
000EEE14 0C02 0003                                  cmpi.b  #$03, D2
000EEE18 6500                                       bcs.s   Offset_0x00909C
000EEE1A 7400                                       moveq   #$00, D2
000EEE1C                            Offset_0x00909C:
000EEE1C 11C2 FF8C                                  move.b  D2, ($FFFFFF8C).w
000EEE20 E54A                                       lsl.w   #$02, D2
000EEE22 163B 2000                                  move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x00910C
000EEE26 227B 2000                                  move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x00910C
000EEE2A 3411                                       move.w  (A1), D2                      
000EEE2C 0800 0002                                  btst    #$02, D0
000EEE30 6700                                       beq.s   Offset_0x0090B8
000EEE32 5302                                       subq.b  #$01, D2
000EEE34 6400                                       bcc.s   Offset_0x0090B8
000EEE36 1403                                       move.b  D3, D2
000EEE38                            Offset_0x0090B8:
000EEE38 0800 0003                                  btst    #$03, D0
000EEE3C 6700                                       beq.s   Offset_0x0090C6
000EEE3E 5202                                       addq.b  #$01, D2
000EEE40 B403                                       cmp.b   D3, D2
000EEE42 6300                                       bls.s   Offset_0x0090C6
000EEE44 7400                                       moveq   #$00, D2
000EEE46                            Offset_0x0090C6:
000EEE46 0800 0006                                  btst    #button_A, D0
000EEE4A 6700                                       beq.s   Offset_0x0090C6_2
000EEE4C 0602 0010                  				addi.b  #$10, D2
000EEE50 4EF9 0000 0000             				jmp		Offset_0x0090C6_3
000EEE56                            Offset_0x0090C6_2:
000EEE56 0800 0004                  				btst	#button_B,d0
000EEE5A 6700                       				beq.s	Offset_0x0090D6
000EEE5C 0402 0010                  				subi.b	#$10,d2
000EEE60                            Offset_0x0090C6_3: 
000EEE60 B403                                       cmp.b   D3, D2
000EEE62 6300                                       bls.s   Offset_0x0090D6
000EEE64 7400                                       moveq   #$00, D2
000EEE66                            Offset_0x0090D6:
000EEE66 3282                                       move.w  D2, (A1)
000EEE68 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEE6E 6600                                       bne.s   Offset_0x00910A
000EEE70 0240 0020                                  andi.w	#button_C_mask,d0
000EEE74 6700                                       beq.s   Offset_0x00910A
000EEE76 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EEE7A 4EB8 325C                  				jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EEE7E 41F9 0000 0000                             lea     (Code_Level_Select), A0                ; Offset_0x00975C
000EEE84 45F9 0000 0000                             lea     (Code_14_Continues), A2                ; Offset_0x009762
000EEE8A 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EEE8E 7400                                       moveq   #$00, D2
000EEE90 6100 0000                                  bsr     Offset_0x0096EA
000EEE94                            Offset_0x00910A:
000EEE94 4E75                                       rts
000EEE96                            ;-------------------------------------------------------------------------------                 
000EEE96                            Menu_Options_Boundaries: ; Offset_0x00910C:
000EEE96 02FF FF74                  		dc.l (3-1)<<24|($FFFFFF74&$FFFFFF)
000EEE9A FFFF FF94                  		dc.l (2-1)<<24|(Level_Music+4&$FFFFFF)
000EEE9E FFFF FF84                  		dc.l ($FF)<<24|(Sound_test_sound&$FFFFFF)  
000EEEA2                            ;------------------------------------------------------------------------------- 
000EEEA2                            Offset_0x009118:
000EEEA2 6100 0000                                  bsr     Offset_0x0091FE
000EEEA6 7200                                       moveq   #$00, D1
000EEEA8 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EEEAC E749                                       lsl.w   #$03, D1
000EEEAE 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EEEB4 47F3 1000                                  lea     $00(A3, D1), A3
000EEEB8 303C 6000                                  move.w  #$6000, D0
000EEEBC 45F9 FFFF 0030                             lea     ($FFFF0030), A2
000EEEC2 225B                                       move.l  (A3)+, A1
000EEEC4 6100 FE02                                  bsr     Offset_0x008F48
000EEEC8 45F9 FFFF 00B6                             lea     ($FFFF00B6), A2
000EEECE 7200                                       moveq   #$00, D1
000EEED0 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEED6 6700                                       beq.s   Offset_0x009160
000EEED8 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EEEDC E549                                       lsl.w   #$02, D1
000EEEDE 43FA FFB6                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EEEE2 2271 1000                                  move.l  $00(A1, D1), A1
000EEEE6 3211                                       move.w  (A1), D1
000EEEE8 E549                                       lsl.w   #$02, D1
000EEEEA                            Offset_0x009160:
000EEEEA 2274 1000                                  move.l  $00(A4, D1), A1
000EEEEE 6100 FDD8                                  bsr     Offset_0x008F48
000EEEF2 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEEF8 6600                                       bne.s   Offset_0x00917A
000EEEFA 45F9 FFFF 00C2                             lea     ($FFFF00C2), A2
000EEF00 6100 0000                                  bsr     Offset_0x00922C
000EEF04                            Offset_0x00917A:
000EEF04 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEF0A 201B                                       move.l  (A3)+, D0
000EEF0C 7215                                       moveq   #$15, D1
000EEF0E 7407                                       moveq   #$07, D2
000EEF10 4EF8 34BC                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EEF14                            Offset_0x00918C:
000EEF14 6100 0000                                  bsr     Offset_0x0091FE
000EEF18 7200                                       moveq   #$00, D1
000EEF1A 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EEF1E E749                                       lsl.w   #$03, D1
000EEF20 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EEF26 47F3 1000                                  lea     $00(A3, D1), A3
000EEF2A 7000                                       moveq   #$00, D0
000EEF2C 45F9 FFFF 0190                             lea     ($FFFF0190), A2
000EEF32 225B                                       move.l  (A3)+, A1
000EEF34 6100 FD92                                  bsr     Offset_0x008F48
000EEF38 45F9 FFFF 0216                             lea     ($FFFF0216), A2
000EEF3E 7200                                       moveq   #$00, D1
000EEF40 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEF46 6700                                       beq.s   Offset_0x0091D2
000EEF48 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EEF4C E549                                       lsl.w   #$02, D1
000EEF4E 43FA FF46                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EEF52 2271 1000                                  move.l  $00(A1, D1), A1
000EEF56 3211                                       move.w  (A1), D1
000EEF58 E549                                       lsl.w   #$02, D1
000EEF5A                            Offset_0x0091D2:
000EEF5A 2274 1000                                  move.l  $00(A4, D1), A1
000EEF5E 6100 FD68                                  bsr     Offset_0x008F48
000EEF62 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEF68 6600                                       bne.s   Offset_0x0091EC
000EEF6A 45F9 FFFF 0222                             lea     ($FFFF0222), A2
000EEF70 6100 0000                                  bsr     Offset_0x00922C
000EEF74                            Offset_0x0091EC:
000EEF74 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EEF7A 201B                                       move.l  (A3)+, D0
000EEF7C 7215                                       moveq   #$15, D1
000EEF7E 7407                                       moveq   #$07, D2
000EEF80 4EF8 34BC                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EEF84                            Offset_0x0091FE:
000EEF84 49F9 0000 0000                            lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x009268
000EEF8A 4A38 FFF8                                 tst.b   ($FFFFFFF8).w                              ; $FFFFFFD8
000EEF8E 6A00                                      bpl.s   Offset_0x009210
000EEF90 49F9 0000 0000                            lea     (Map_Player_Select_Idx), A4            ; Offset_0x009274
000EEF96                            Offset_0x009210:
000EEF96 4A38 FF8C                                  tst.b   ($FFFFFF8C).w
000EEF9A 6700                                       beq.s   Offset_0x00921C
000EEF9C 49F9 0000 0000                             lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x009280
000EEFA2                            Offset_0x00921C:
000EEFA2 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EEFA8 6600                                       bne.s   Offset_0x00922A
000EEFAA 49F9 0000 0000                             lea     (Map_Sound_Test_Idx), A4               ; Offset_0x009288
000EEFB0                            Offset_0x00922A:
000EEFB0 4E75                                       rts
000EEFB2                            Offset_0x00922C:
000EEFB2 3238 FF84                                  move.w  ($FFFFFF84).w, D1                     ; $FFFFFF64
000EEFB6 1401                                       move.b  D1, D2
000EEFB8 E809                                       lsr.b   #$04, D1
000EEFBA 6100                                       bsr.s   Offset_0x009238
000EEFBC 1202                                       move.b  D2, D1
000EEFBE                            Offset_0x009238:
000EEFBE 0241 000F                                  andi.w  #$000F, D1
000EEFC2 0C01 000A                                  cmpi.b  #$0A, D1
000EEFC6 6500                                       bcs.s   Offset_0x009246
000EEFC8 5801                                       addi.b  #$04, D1
000EEFCA                            Offset_0x009246:
000EEFCA 0601 0010                                  addi.b  #$10, D1
000EEFCE 1001                                       move.b  D1, D0
000EEFD0 34C0                                       move.w  D0, (A2)+
000EEFD2 4E75                                       rts
000EEFD4                            ;-------------------------------------------------------------------------------                
000EEFD4                            Menu_Options_Idx: ; Offset_0x009250:
000EEFD4 0000 0000                                  dc.l    Map_Player_Select_Caption              ; Offset_0x009778
000EEFD8 4192 0003                                  dc.w    $4192, $0003
000EEFDC 0000 0000                                  dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0097DA       
000EEFE0 4592 0003                                  dc.w    $4592, $0003
000EEFE4 0000 0000                                  dc.l    Map_Sound_Test_Caption                 ; Offset_0x00980C   
000EEFE8 4992 0003                                  dc.w    $4992, $0003  
000EEFEC                            ;-------------------------------------------------------------------------------                
000EEFEC                            Map_Player_Select_Jap_Idx: ; Offset_0x009268: 
000EEFEC 0000 0000                                  dc.l    Map_Sonic_And_Miles                    ; Offset_0x00978A                 
000EEFF0 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA  
000EEFF4 0000 0000                                  dc.l    Map_Miles_Alone                        ; Offset_0x0097BA 
000EEFF8                            ;-------------------------------------------------------------------------------                
000EEFF8                            Map_Player_Select_Idx: ; Offset_0x009274  
000EEFF8 0000 0000                                  dc.l    Map_Sonic_And_Tails                    ; Offset_0x00979A 
000EEFFC 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA
000EF000 0000 0000                                  dc.l    Map_Tails_Alone                        ; Offset_0x0097CA               
000EF004                            ;-------------------------------------------------------------------------------                
000EF004                            Map_Vs_Mode_Items_Idx: ; Offset_0x009280:  
000EF004 0000 0000                                  dc.l    Map_All_Kinds_Items                    ; Offset_0x0097EC  
000EF008 0000 0000                                  dc.l    Map_Teleport_Only                      ; Offset_0x0097FC
000EF00C                            ;-------------------------------------------------------------------------------                
000EF00C                            Map_Sound_Test_Idx: ; Offset_0x009288:          
000EF00C 0000 0000                                  dc.l    Map_Sound_Test_Sound                   ; Offset_0x00981E
000EF010                            ;===============================================================================
000EF010                            
000EF010                            Level_Select_Menu: ; Offset_0x00928C:
000EF010 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EF016 41F9 0000 0000                             lea     (Menu_Level_Select_Text), A0           ; Offset_0x009A8C
000EF01C 303C 0000                                  move.w  #$0000, D0
000EF020 4EB8 38BA                                  jsr     EniDec                              ; Offset_0x00177A
000EF024 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EF02A 203C 4000 0003                             move.l  #$40000003, D0
000EF030 7227                                       moveq   #$27, D1
000EF032 741B                                       moveq   #$1B, D2
000EF034 4EB8 34BC                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF038 7600                                       moveq   #$00, D3
000EF03A 6100 0000                                  bsr     Offset_0x0095FC
000EF03E 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EF044 41F9 0000 0000                             lea     (Menu_Icons_Mappings), A0              ; Offset_0x009BE0
000EF04A 303C 0090                                  move.w  #$0090, D0
000EF04E 4EB8 38BA                                  jsr     EniDec                              ; Offset_0x00177A
000EF052 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EF056 4278 FF7A                                  clr.w   ($FFFFFF7A).w
000EF05A 4278 FF10                                  clr.w   ($FFFFFF10).w
000EF05E 4238 F711                                  clr.b   ($FFFFF711).w
000EF062 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EF066 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EF06C 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EF072 7014                                       moveq   #$14, D0
000EF074 4EB8 4986                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EF078 43F8 FB40                                  lea     ($FFFFFB40).w, A1
000EF07C 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
000EF080 7207                                       moveq   #$07, D1
000EF082                            Offset_0x009300:
000EF082 24D1                                       move.l  (A1), (A2)+
000EF084 4299                                       clr.l   (A1)+
000EF086 51C9 FFFA                                  dbra    D1, Offset_0x009300
000EF08A 103C 000F                                  move.b  #$0F, D0      ; $91
000EF08E 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF092 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
000EF098                            ;               clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EF098 42B8 F700                                  clr.l   ($FFFFF700).w
000EF09C 42B8 F704                                  clr.l   ($FFFFF704).w
000EF0A0 4278 FF0C                                  clr.w   ($FFFFFF0C).w
000EF0A4 4278 FF0E                                  clr.w   ($FFFFFF0E).w
000EF0A8 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EF0AE 4EB9 0000 8EFE                             jsr     DelayProgram                           ; Offset_0x00333E
000EF0B4 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EF0B8 0000 0040                                  ori.b   #$40, D0
000EF0BC 33C0 00C0 0004                             move.w  D0, ($00C00004)                       ; $00C00004
000EF0C2 4EB8 45FA                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EF0C6                            Level_Select_Menu_Main_Loop: ; Offset_0x009348:
000EF0C6 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EF0CC 4EB9 0000 8EFE                             jsr     DelayProgram                           ; Offset_0x00333E
000EF0D2 46FC 2700                                  move    #$2700, SR
000EF0D6 7600                                       moveq   #$00, D3
000EF0D8 6100 0000                                  bsr     Offset_0x00955A
000EF0DC 6100 0000                                  bsr     Offset_0x00947C
000EF0E0 363C 6000                                  move.w  #$6000, D3
000EF0E4 6100 0000                                  bsr     Offset_0x00955A
000EF0E8 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EF0EC 46FC 2300                                  move    #$2300, SR
000EF0F0 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EF0F6 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EF0FC 1038 F605                                  move.b  ($FFFFF605).w, D0
000EF100 8038 F607                                  or.b    ($FFFFF607).w, D0
000EF104 0200 0080                                  andi.b  #$80, D0
000EF108 6600                                       bne.s   Offset_0x00938E
000EF10A 60BA                                       bra     Level_Select_Menu_Main_Loop            ; Offset_0x009348
000EF10C                            Offset_0x00938E:
000EF10C 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF110 D040                                       add.w   D0, D0
000EF112 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x0093F2
000EF116 6B00 0000                                  bmi     Menu_Game_Reset                        ; Offset_0x0093EA
000EF11A 0C40 0600                                  cmpi.w  #$0600, D0
000EF11E 6700 0000                                  beq     Menu_Test_Stage
000EF122 0C40 4000                                  cmpi.w  #$4000, D0
000EF126 6600 0000                                  bne.w   Menu_Load_Level                        ; Offset_0x00941E
000EF12A 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w         ; $10, $FFFFF600
000EF130 4278 FE10                                  clr.w   ($FFFFFE10).w                                 ; $FFFFFE10
000EF134 4EB9 0000 9B84                             jsr (LoadLivesLS).l
000EF13A                            ;				move.b  #$03, ($FFFFFEC6).w
000EF13A 7000                                       moveq   #$00, D0
000EF13C 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EF140 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EF144 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EF148 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EF14C 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EF150 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EF154 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EF15C                            ;               move.l  #$00001388, ($FFFFFFC4).w
000EF15C 31F8 FF7C FF7A                             move.w  ($FFFFFF7C).w, ($FFFFFF7A).w
000EF162 4E75                                       rts
000EF164                            Menu_Game_Reset: ; Offset_0x0093EA:
000EF164 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w           ; $00, $FFFFF600
000EF16A 4E75                                       rts
000EF16C                            Menu_Test_Stage:
000EF16C                            ;                move.b	#$0018,($FFFFF600).w
000EF16C                            ;				move.w	#$0701,($FFFFFE10).w
000EF16C 4EB9 0000 0000             				jsr		Menu_Load_Level
000EF172 4E75                       				rts
000EF174                            ;-------------------------------------------------------------------------------                
000EF174                            Menu_Level_Select_Array: ; Offset_0x0093F2:
000EF174 0000 0001 0002                             dc.w    $0000, $0001, $0002
000EF17A 0100 0101 0102                             dc.w    $0100, $0101, $0102
000EF180 0200 0201 0202                             dc.w    $0200, $0201, $0202
000EF186 0300 0301 0302                             dc.w    $0300, $0301, $0302
000EF18C 0400 0401 0402                             dc.w    $0400, $0401, $0402
000EF192 0500 0501 0103                             dc.w    $0500, $0501, $0103
000EF198 0502 4000 0701                             dc.w    $0502, $4000, $0701
000EF19E FFFF                                       dc.w    $FFFF
000EF1A0                            ;------------------------------------------------------------------------------- 
000EF1A0                            Menu_Load_Level: ; Offset_0x00941E:
000EF1A0 0240 3FFF                                  andi.w  #$3FFF, D0
000EF1A4 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EF1A8 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EF1AE 4EB9 0000 9B84                             jsr (LoadLivesLS).l
000EF1B4                            ;                move.b  #$03, ($FFFFFEC6).w
000EF1B4 7000                                       moveq   #$00, D0
000EF1B6 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EF1BA 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EF1BE 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EF1C2 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EF1C6 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EF1CA 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EF1CE 11C0 FE18                                  move.b  D0, ($FFFFFE18).w
000EF1D2 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EF1DA                            ;				move.l  #$00001388, ($FFFFFFC4).w
000EF1DA 103C 00E1                                  move.b  #Volume_Down, D0        ; $F9
000EF1DE 4EB8 3212                                  jsr     (PlaySound)                             ; Offset_0x00132C
000EF1E2 7000                                       moveq   #$00, D0
000EF1E4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EF1E8 31C0 FFE8                                  move.w  D0, ($FFFFFFE8).w
000EF1EC 4E75                                       rts 
000EF1EE                            ;------------------------------------------------------------------------------- 
000EF1EE                            Offset_0x00947C:
000EF1EE 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF1F2 0201 0003                                  andi.b  #$03, D1
000EF1F6 6600                                       bne.s   Offset_0x00948C
000EF1F8 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
000EF1FC 6A00                                       bpl.s   Offset_0x0094C2
000EF1FE                            Offset_0x00948C:
000EF1FE                            ;                move.w  #$000B, ($FFFFFF80).w
000EF1FE 0838 0006 FFF8             				btst	#6,(Graphics_Flags).w
000EF204 6600                       				bne.s	Offset_0x00948C_2
000EF206 31FC 000B FF80             				move.w  #$000B, ($FFFFFF80).w
000EF20C 6000 0000                  				bra.w	Offset_0x00948C_3
000EF210                            Offset_0x00948C_2:
000EF210 31FC 0009 FF80             				move.w  #$0009, ($FFFFFF80).w
000EF216                            Offset_0x00948C_3:
000EF216 1238 F604                                  move.b  ($FFFFF604).w, D1
000EF21A 0201 0003                                  andi.b  #button_up_mask|button_down_mask, D1
000EF21E 6700                                       beq.s   Offset_0x0094C2
000EF220 4EB9 0000 A2C6             				jsr		Sound_Select_Options
000EF226 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF22A 0801 0000                                  btst    #$00, D1
000EF22E 6700                                       beq.s   Offset_0x0094AC
000EF230 5340                                       subq.w  #$01, D0
000EF232 6400                                       bcc.s   Offset_0x0094AC
000EF234 7015                                       moveq   #$15, D0
000EF236                            Offset_0x0094AC:
000EF236 0801 0001                                  btst    #$01, D1
000EF23A 6700                                       beq.s   Offset_0x0094BC
000EF23C 5240                                       addq.w  #$01, D0
000EF23E 0C40 0016                                  cmpi.w  #$0016, D0
000EF242 6500                                       bcs.s   Offset_0x0094BC
000EF244 7000                                       moveq   #$00, D0
000EF246                            Offset_0x0094BC:
000EF246 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EF24A 4E75                                       rts
000EF24C                            Offset_0x0094C2:
000EF24C 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EF252 6600                                       bne.s   Offset_0x00952C
000EF254 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF258 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF25C 0801 0002                                  btst    #$02, D1
000EF260 6700                                       beq.s   Offset_0x0094DE
000EF262 5300                                       subq.b  #$01, D0
000EF264                            ;                bcc.w   Offset_0x0094DE
000EF264                                    ;        moveq   #$7F, D0
000EF264                            Offset_0x0094DE:
000EF264 0801 0003                                  btst    #$03, D1
000EF268 6700                                       beq.s   Offset_0x0094EE
000EF26A 5200                                       addq.b  #$01, D0
000EF26C                               ;             cmpi.w  #$0080, D0
000EF26C                              ;              bcs.s   Offset_0x0094EE
000EF26C                             ;               moveq   #$00, D0
000EF26C                            Offset_0x0094EE:
000EF26C 0801 0006                  	btst	#button_A,d1
000EF270 6700                       	beq.s	Offset_0x0094EE_2
000EF272 0600 0010                  	addi.b	#$10,d0
000EF276                            Offset_0x0094EE_2:
000EF276 0801 0004                  	btst	#button_B,d1
000EF27A 6700                       	beq.s	Offset_0x0094FC
000EF27C 0400 0010                  	subi.b	#$10,d0
000EF280                            ;	andi.b	#$FF,d0
000EF280                            
000EF280                            Offset_0x0094FC:
000EF280 31C0 FF84                                  move.w  D0, ($FFFFFF84).w                     ; $FFFFFF64
000EF284 0241 0020                                  andi.w  #button_C_mask, D1
000EF288 6700                                       beq.s   Offset_0x00952A
000EF28A 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF28E 4EB8 3212                                  jsr     (PlaySound)                           ; Offset_0x00131A
000EF292 41F9 0000 0000                             lea     (Code_Debug_Mode), A0                  ; Offset_0x009768
000EF298 45F9 0000 0000                             lea     (Code_All_Emeralds), A2                ; Offset_0x009772
000EF29E 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EF2A2 7401                                       moveq   #$01, D2
000EF2A4 6100 0000                                  bsr     Offset_0x0096EA
000EF2A8                            Offset_0x00952A:
000EF2A8 4E75                                       rts
000EF2AA                            Offset_0x00952C:
000EF2AA 1238 F605                                  move.b  ($FFFFF605).w, D1
000EF2AE 0201 000C                                  andi.b  #$0C, D1
000EF2B2 6700                                       beq.s   Offset_0x009542
000EF2B4 4EB9 0000 A2C6             				jsr		Sound_Select_Options
000EF2BA 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF2BE 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x009544
000EF2C2 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EF2C6                            Offset_0x009542:
000EF2C6 4E75                                       rts
000EF2C8                            ;-------------------------------------------------------------------------------
000EF2C8                            Menu_Left_Right_Select: ; Offset_0x009544:
000EF2C8 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
000EF2D7 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C                                                               
000EF2DE                            ;-------------------------------------------------------------------------------  
000EF2DE                            Offset_0x00955A:
000EF2DE 49F9 FFFF 0000                             lea     ($FFFF0000), A4
000EF2E4 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5              ; Offset_0x009692
000EF2EA 4DF9 00C0 0000                             lea     ($00C00000), A6                          ; $00C00000
000EF2F0 7000                                       moveq   #$00, D0
000EF2F2 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF2F6 E548                                       lsl.w   #$02, D0
000EF2F8 47F5 0000                                  lea     $00(A5, D0), A3
000EF2FC 7000                                       moveq   #$00, D0
000EF2FE 1013                                       move.b  (A3), D0
000EF300 C0FC 0050                                  mulu.w  #$0050, D0
000EF304 7200                                       moveq   #$00, D1
000EF306 122B 0001                                  move.b  $0001(A3), D1
000EF30A D041                                       add.w   D1, D0
000EF30C 43F4 0000                                  lea     $00(A4, D0), A1
000EF310 7200                                       moveq   #$00, D1
000EF312 1213                                       move.b  (A3), D1
000EF314 EF49                                       lsl.w   #$07, D1
000EF316 D22B 0001                                  add.b   $0001(A3), D1
000EF31A 0641 C000                                  addi.w  #$C000, D1
000EF31E E589                                       lsl.l   #$02, D1
000EF320 E449                                       lsr.w   #$02, D1
000EF322 0041 4000                                  ori.w   #$4000, D1
000EF326 4841                                       swap.w  D1
000EF328 2D41 0004                                  move.l  D1, $0004(A6)
000EF32C 740D                                       moveq   #$0D, D2
000EF32E                            Offset_0x0095AA:
000EF32E 3019                                       move.w  (A1)+, D0
000EF330 D043                                       add.w   D3, D0
000EF332 3C80                                       move.w  D0, (A6)
000EF334 51CA FFF8                                  dbra    D2, Offset_0x0095AA
000EF338 544B                                       addq.w  #$02, A3
000EF33A 7000                                       moveq   #$00, D0
000EF33C 1013                                       move.b  (A3), D0
000EF33E 6700                                       beq.s   Offset_0x0095EE
000EF340 C0FC 0050                                  mulu.w  #$0050, D0
000EF344 7200                                       moveq   #$00, D1
000EF346 122B 0001                                  move.b  $0001(A3), D1
000EF34A D041                                       add.w   D1, D0
000EF34C 43F4 0000                                  lea     $00(A4, D0), A1
000EF350 7200                                       moveq   #$00, D1
000EF352 1213                                       move.b  (A3), D1
000EF354 EF49                                       lsl.w   #$07, D1
000EF356 D22B 0001                                  add.b   $0001(A3), D1
000EF35A 0641 C000                                  addi.w  #$C000, D1
000EF35E E589                                       lsl.l   #$02, D1
000EF360 E449                                       lsr.w   #$02, D1
000EF362 0041 4000                                  ori.w   #$4000, D1
000EF366 4841                                       swap.w  D1
000EF368 2D41 0004                                  move.l  D1, $0004(A6)
000EF36C 3019                                       move.w  (A1)+, D0
000EF36E D043                                       add.w   D3, D0
000EF370 3C80                                       move.w  D0, (A6)
000EF372                            Offset_0x0095EE:
000EF372 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EF378 6600                                       bne.s   Offset_0x0095FA
000EF37A 6100 0000                                  bsr     Offset_0x0095FC
000EF37E                            Offset_0x0095FA:
000EF37E 4E75                                       rts       
000EF380                            ;------------------------------------------------------------------------------- 
000EF380                            Offset_0x0095FC:
000EF380 23FC 49C4 0003 00C0 0004                   move.l  #$49C40003, ($00C00004) ; Posição dos números do Sound Test
000EF38A 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF38E 1400                                       move.b  D0, D2
000EF390 E808                                       lsr.b   #$04, D0
000EF392 6100                                       bsr.s   Offset_0x009612
000EF394 1002                                       move.b  D2, D0
000EF396                            Offset_0x009612:
000EF396 0240 000F                                  andi.w  #$000F, D0
000EF39A 0C00 000A                                  cmpi.b  #$0A, D0
000EF39E 6500                                       bcs.s   Offset_0x009620
000EF3A0 5800                                       addi.b  #$04, D0
000EF3A2                            Offset_0x009620:
000EF3A2 0600 0010                                  addi.b  #$10, D0
000EF3A6 D043                                       add.w   D3, D0
000EF3A8 3C80                                       move.w  D0, (A6)
000EF3AA 4E75                                       rts
000EF3AC                            Offset_0x0096EA:
000EF3AC 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
000EF3B0 D0C0                                       adda.w  D0, A0
000EF3B2 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF3B6 B010                                       cmp.b   (A0), D0
000EF3B8 6600                                       bne.s   Offset_0x009710
000EF3BA 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
000EF3BE 4A28 0001                                  tst.b   $0001(A0)
000EF3C2 6600                                       bne.s   Offset_0x009716
000EF3C4 22BC 0101 0101                             move.l  #$01010101, (A1)
000EF3CA 31D1 FFD0                  				move.w	(A1),($FFFFFFD0).w	; activate slow motion & frame advance cheat flag
000EF3CE 11FC 0001 FFD2             				move.b	#$01,($FFFFFFD2).w	; activate debug mode cheat flag
000EF3D4 11FC 0001 FFFA             				move.b	#$01,($FFFFFFFA).w	; activate debug mode cheat flag
000EF3DA 103C 0033                                  move.b  #$33, D0           ; $B5
000EF3DE 4EB8 325C                                  jsr     (PlaySound_Special)                             ; Offset_0x00132C
000EF3E2                            Offset_0x009710:
000EF3E2 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
000EF3E8                            Offset_0x009716:
000EF3E8 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
000EF3EC D4C0                                       adda.w  D0, A2
000EF3EE 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EF3F2 B012                                       cmp.b   (A2), D0
000EF3F4 6600                                       bne.s   Offset_0x009754
000EF3F6 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
000EF3FA 4A2A 0001                                  tst.b   $0001(A2)
000EF3FE 6600                                       bne.s   Offset_0x00975A
000EF400 4A42                                       tst.w   D2
000EF402 6600                                       bne.s   Offset_0x009744
000EF404 11FC 000F FE18                             move.b  #$0F, ($FFFFFE18).w
000EF40A 103C 00BF                                  move.b  #$BF, D0 ; $3F - Referência incorreta
000EF40E 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF412 6000                                       bra.s   Offset_0x009754
000EF414                            Offset_0x009744:
000EF414 13FC 0001 00A1 30F1        				move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000EF41C 11FC 0006 FE57             				move.b	#$6,(Emeralds_flag).w	; set number of chaos emeralds to 6
000EF422 13FC 0006 0020 0121        				move.b	#$6,($200121).l
000EF42A 31FC 0102 FE58             				move.w	#$0102,(Emeralds_flag+1).w	; set number of chaos emeralds to 6
000EF430 13FC 0001 0020 0123        				move.b	#$1,($200123).l
000EF438 31FC 0304 FE5A             				move.w	#$0304,(Emeralds_flag+3).w	; set number of chaos emeralds to 6	
000EF43E 13FC 0002 0020 0125        				move.b	#$2,($200125).l
000EF446 11FC 0005 FE5C             				move.b	#$05,(Emeralds_flag+5).w	; set number of chaos emeralds to 6
000EF44C 13FC 0003 0020 0127        				move.b	#$3,($200127).l
000EF454 13FC 0004 0020 0129        				move.b	#$4,($200129).l
000EF45C 13FC 0005 0020 012B        				move.b	#$5,($20012B).l
000EF464 13FC 0000 00A1 30F1        				move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000EF46C 103C 002B                                  move.b  #Emerald_Snd, D0        ; $9D
000EF470 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EF474                            Offset_0x009754:
000EF474 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
000EF47A                            Offset_0x00975A:
000EF47A 4E75                                       rts
000EF47C                            ;-------------------------------------------------------------------------------                    
000EF47C                            Code_Level_Select: ;  Offset_0x00975C:
000EF47C 1965 0917 0000                             dc.b    $19, $65, $09, $17, $00, $00
000EF482                            ;-------------------------------------------------------------------------------                 
000EF482                            Code_14_Continues: ; Offset_0x009762:
000EF482 0101 0204 0000                             dc.b    $01, $01, $02, $04, $00, $00
000EF488                            ;-------------------------------------------------------------------------------                  
000EF488                            Code_Debug_Mode: ; Offset_0x009768:
000EF488 0109 0902 0101 0204 0000                   dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $00, $00
000EF492                            ;-------------------------------------------------------------------------------                 
000EF492                            Code_All_Emeralds: ; Offset_0x009772:
000EF492 0401 0206 0000                             dc.b    $04, $01, $02, $06, $00, $00
000EF498                            ;-------------------------------------------------------------------------------  
000EF498 =00000000                  __ = $00
000EF498 =00000010                  _0 = $10
000EF498 =00000011                  _1 = $11
000EF498 =00000012                  _2 = $12
000EF498 =00000013                  _3 = $13
000EF498 =00000014                  _4 = $14
000EF498 =00000015                  _5 = $15
000EF498 =00000016                  _6 = $16
000EF498 =00000017                  _7 = $17
000EF498 =00000018                  _8 = $18
000EF498 =00000019                  _9 = $19
000EF498 =0000001E                  _A = $1E
000EF498 =0000001F                  _B = $1F
000EF498 =00000020                  _C = $20
000EF498 =00000021                  _D = $21
000EF498 =00000022                  _E = $22    
000EF498 =00000023                  _F = $23
000EF498 =00000024                  _G = $24
000EF498 =00000025                  _H = $25
000EF498 =00000026                  _I = $26
000EF498 =00000027                  _J = $27
000EF498 =00000028                  _K = $28
000EF498 =00000029                  _L = $29
000EF498 =0000002A                  _M = $2A
000EF498 =0000002B                  _N = $2B
000EF498 =0000002C                  _O = $2C
000EF498 =0000002D                  _P = $2D
000EF498 =0000002E                  _Q = $2E
000EF498 =0000002F                  _R = $2F
000EF498 =00000030                  _S = $30
000EF498 =00000031                  _T = $31
000EF498 =00000032                  _U = $32
000EF498 =00000033                  _V = $33
000EF498 =00000034                  _W = $34
000EF498 =00000035                  _X = $35
000EF498 =00000036                  _Y = $36
000EF498 =00000037                  _Z = $37
000EF498 =0000001A                  _st = $1A
000EF498                            
000EF498                            Map_Player_Select_Caption: ; Offset_0x009778:
000EF498 10                                         dc.b    $10
000EF499 1A00 2D29 1E36 222F 0030+                  dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
000EF4AA                            Map_Sonic_And_Miles: ; Offset_0x00978A: 
000EF4AA 0E                                         dc.b    $0E
000EF4AB 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
000EF4BA                            Map_Sonic_And_Tails: ; Offset_0x00979A: 
000EF4BA 0E                                         dc.b    $0E
000EF4BB 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
000EF4CA                            Map_Sonic_Alone: ; Offset_0x0097AA:
000EF4CA 0E                                         dc.b    $0E
000EF4CB 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF4DA                            Map_Miles_Alone: ; Offset_0x0097BA:
000EF4DA 0E                                         dc.b    $0E
000EF4DB 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF4EA                            Map_Tails_Alone: ; Offset_0x0097CA:
000EF4EA 0E                                         dc.b    $0E
000EF4EB 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EF4FA                            ;-------------------------------------------------------------------------------     
000EF4FA                            Map_Vs_Mode_Items_Caption: ; Offset_0x0097DA:
000EF4FA 10                                         dc.b    $10
000EF4FB 1A1E 2931 222F 2B1E 3122+                  dc.b    _st,_A,_L,_T,_E,_R,_N,_A,_T,_E,__,_M,_U,_S,_I,_C,_st  
000EF50C                            Map_All_Kinds_Items: ; Offset_0x0097EC:  
000EF50C 0E                                         dc.b    $0E
000EF50D 0000 0000 0000 2C23 2300+                  dc.b    __,__,__,__,__,__,_O,_F,_F,__,__,__,__,__,__
000EF51C                            Map_Teleport_Only: ; Offset_0x0097FC:
000EF51C 0E                                         dc.b    $0E
000EF51D 0000 0000 0000 2C2B 0000+                  dc.b    __,__,__,__,__,__,_O,_N,__,__,__,__,__,__,__
000EF52C                            ;-------------------------------------------------------------------------------   
000EF52C                            Map_Sound_Test_Caption: ; Offset_0x00980C:
000EF52C 10                                         dc.b    $10
000EF52D 1A00 0030 2C32 2B21 0031+                  dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
000EF53E                            Map_Sound_Test_Sound: ; Offset_0x00981E:   
000EF53E 0E                                         dc.b    $0E
000EF53F 0000 0000 0000 1010 0000+                  dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__   
000EF54E                            ;-------------------------------------------------------------------------------                               
000EF54E                            Menu_Display_Icon: ; Offset_0x00962A:
000EF54E 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EF552 47F9 0000 0000                             lea     (Menu_Icon_List), A3                   ; Offset_0x00967C
000EF558 47F3 0000                                  lea     $00(A3, D0), A3
000EF55C 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EF562 7000                                       moveq   #$00, D0
000EF564 1013                                       move.b  (A3), D0
000EF566 E748                                       lsl.w   #$03, D0
000EF568 3200                                       move.w  D0, D1
000EF56A D040                                       add.w   D0, D0
000EF56C D041                                       add.w   D1, D0
000EF56E 43F1 0000                                  lea     $00(A1, D0), A1
000EF572 203C 4B36 0003                             move.l  #$4B360003, D0
000EF578 7203                                       moveq   #$03, D1
000EF57A 7402                                       moveq   #$02, D2
000EF57C 4EB8 34BC                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EF580 43F9 0000 0000                             lea     (Pal_Levels_Icons), A1                 ; Offset_0x00982E
000EF586 7000                                       moveq   #$00, D0
000EF588 1013                                       move.b  (A3), D0
000EF58A EB48                                       lsl.w   #$05, D0
000EF58C 43F1 0000                                  lea     $00(A1, D0), A1
000EF590 45F8 FB40                                  lea     ($FFFFFB40).w, A2
000EF594 7207                                       moveq   #$07, D1
000EF596                            Offset_0x009674:
000EF596 24D9                                       move.l  (A1)+, (A2)+
000EF598 51C9 FFFC                                  dbra    D1, Offset_0x009674
000EF59C 4E75                                       rts
000EF59E                            
000EF59E                            ;--------------------------------------------------------------------------------
000EF59E                            Dynamic_Normal: 
000EF59E 47F8 F7F0                  		lea	($FFFFF7F0).w,a3 
000EF5A2                            loc_3BD74: 
000EF5A2 3C1A                       		move.w	(a2)+,d6
000EF5A4                            Dynamic_Normal_Loop: 
000EF5A4 5313                       		subq.b	#1,(a3)
000EF5A6 6400                       		bcc.s	loc_3BDBC
000EF5A8 7000                       		moveq	#0,d0
000EF5AA 102B 0001                  		move.b	1(a3),d0
000EF5AE B02A 0006                  		cmp.b	6(a2),d0
000EF5B2 6500                       		bcs.s	loc_3BD8C
000EF5B4 7000                       		moveq	#0,d0
000EF5B6 1740 0001                  		move.b	d0,1(a3)
000EF5BA                            loc_3BD8C:
000EF5BA 522B 0001                  		addq.b	#1,1(a3)
000EF5BE 1692                       		move.b	(a2),(a3)
000EF5C0 6A00                       		bpl.s	loc_3BD9A
000EF5C2 D040                       		add.w	d0,d0
000EF5C4 16B2 0009                  		move.b	9(a2,d0),(a3)
000EF5C8                            loc_3BD9A:
000EF5C8 1032 0008                  		move.b	8(a2,d0),d0
000EF5CC EB48                       		lsl.w	#5,d0
000EF5CE 342A 0004                  		move.w	4(a2),d2
000EF5D2 2212                       		move.l	(a2),d1
000EF5D4 0281 00FF FFFF             		and.l	#$FFFFFF,d1
000EF5DA D280                       		add.l	d0,d1
000EF5DC 7600                       		moveq	#0,d3
000EF5DE 162A 0007                  		move.b	7(a2),d3
000EF5E2 E94B                       		lsl.w	#4,d3
000EF5E4 4EB8 34FC                  		jsr	QueueDMATransfer 
000EF5E8                            loc_3BDBC:
000EF5E8 102A 0006                  		move.b	6(a2),d0
000EF5EC 4A12                       		tst.b	(a2)
000EF5EE 6A00                       		bpl.s	loc_3BDC6
000EF5F0 D000                       		add.b	d0,d0
000EF5F2                            loc_3BDC6:
000EF5F2 5200                       		addq.b	#1,d0
000EF5F4 0240 00FE                  		and.w	#$FE,d0
000EF5F8 45F2 0008                  		lea	8(a2,d0),a2
000EF5FC 544B                       		addq.w	#2,a3
000EF5FE 51CE FFA4                  		dbra	d6,dynamic_Normal_Loop 
000EF602 4E75                       		rts
000EF604                            
000EF604                            Menu_Animate: ; Offset_0x00874E:  
000EF604 0000                       	dc.w   0
000EF606                            ; Sonic/Miles animated background
000EF606 0000 0000                  	dc.l ($FF<<$18)|Sonic_Miles
000EF60A 0020                       	dc.w $20
000EF60C 05                         	dc.b 5
000EF60D 0A                         	dc.b $A
000EF60E 0000                       	dc.b   0,0
000EF610 0A05                       	dc.b  $A,  5	; 2
000EF612 1405                       	dc.b $14,  5	; 4
000EF614 1E05                       	dc.b $1E,  5	; 10
000EF616 0000                       	dc.b   0,0
000EF618                            Pal_Levels_Icons: ; Offset_0x00982E:                
000EF618                                            incbin  'data\menus\lvsicons.pal'
000EF7F8                            Menu_Palette:
000EF7F8                                            incbin  'data\menu\menu.pal'
000EF878                            ;-------------------------------------------------------------------------------                  
000EF878                            Menu_Icon_List: ; Offset_0x00967C:
000EF878 0000 0008 0808 0202 0206+                  dc.b    $00, $00, $00, $08, $08, $08, $02, $02, $02, $06, $06, $06, $07, $07, $07, $04
000EF888 0404 010C 0B0E                             dc.b    $04, $04, $01, $0C, $0B, $0E  
000EF88E                            ;-------------------------------------------------------------------------------  
000EF88E                            Menu_Text_Highlight: ; Offset_0x009692: 
000EF88E 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
000EF89E 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
000EF8AE 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
000EF8BE 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
000EF8CE 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
000EF8DE 0F2C 0F48 132C 1348                        dc.w    $0F2C, $0F48, $132C, $1348                  
000EF8E6                            
000EF8E6                            ;-------------------------------------------------------------------------------
000EF8E6                            ;Nem_MenuFont:                                                    ; Offset_0x07C43A:
000EF8E6                             ;               incbin  'data\sprites\menufont.nem'  
000EF8E6                            Menu_Frame:                                                   ; Offset_0x07D990:
000EF8E6                                            incbin  'data\menus\menu_frm.nem'  
000EF966                            Level_Icons:
000EF966                                            incbin  'data\menus\levelico.nem' 
000F07C0                            Menu_Icons_Mappings: ; Offset_0x009BE0: 
000F07C0                                            incbin  'data\menus\iconsmap.eni'   
000F07F2                            Versus_Menu_Bg_Mappings:                                      ; Offset_0x07CB80:
000F07F2                                            INCBIN	'data\menu\menubg.eni'     
000F09E2                            ;-------------------------------------------------------------------------------                 
000F09E2                            Menu_Level_Select_Text: ; Offset_0x009A8C:
000F09E2                                            incbin  'data\menus\menutext.eni'  
000F0B28                            Sonic_Miles:                                                  ; Offset_0x07CD2C: 
000F0B28                                            incbin  'data\menu\soncmils.bin'         
000F1028                            ;-------------------------------------------------------------------------------   
000F1028                            Options_Frame_Mappings: ; Offset_0x009A60:
000F1028                                            incbin  'data\menus\optframe.eni'
000F1028                                            incbin  'data\menus\optframe.eni'
000F1054                            ;OptionsMenu:
000F1054                            ;		include	"_inc\s2_option.asm"
000F1054                            ;Splashscreen:
000F1054                            ;		include _inc\splash.asm
000F1054                            ;		even
000F1054                            
000F1054                            Art_Dust:		incbin	#artunc\spindust.bin	; Spindash dust
000F2994                            		even	
000F2994                            
000F2994                            Splashscreen2:
000F2994                            		include _inc\splash2.asm
000F2994 103C 00E0                  Splash2:			move.b	#$E0,d0
000F2998 4EB9 0000 0000             			jsr	PlayMusic				  ; Stop the music
000F299E 4EB8 3770                  			jsr	ClearPLC			; Clear the PLC
000F29A2 4EB8 4804                  			jsr	Pal_MakeFlash			; Fade out
000F29A6 46FC 2700                  			move	#$2700,sr
000F29AA                            
000F29AA 4DF9 00C0 0004             Splash2_SetupVDP:	lea	($C00004).l,a6			; Setup teh VDP
000F29B0 3CBC 8004                  			move.w	#$8004,(a6)			; Mode register 1 setting
000F29B4 3CBC 8230                  			move.w	#$8230,(a6)			; Map Plane A setting
000F29B8 3CBC 8407                  			move.w	#$8407,(a6)			; Map Plane B setting
000F29BC 3CBC 9001                  			move.w	#$9001,(a6)			; Plane size setting
000F29C0 3CBC 9200                  			move.w	#$9200,(a6)			; Window vertical position
000F29C4 3CBC 8B03                  			move.w	#$8B03,(a6)			; Mode register 3 setting
000F29C8 3CBC 8720                  			move.w	#$8720,(a6)			; Backdrop color setting
000F29CC 4238 F64E                  			clr.b	($FFFFF64E).w
000F29D0 4EB8 3084                  			jsr	ClearScreen			; Clear the actual screen
000F29D4 43F8 D000                  			lea	($FFFFD000).w,a1		; Clear $FFD000-$FFD7FF
000F29D8 7000                       			moveq	#0,d0
000F29DA 323C 07FF                  			move.w	#$7FF,d1
000F29DE                            
000F29DE                            Splash2_ClrObjRam:
000F29DE 22C0                       			move.l	d0,(a1)+
000F29E0 51C9 FFFC                  			dbf	d1,Splash2_ClrObjRam
000F29E4                            				
000F29E4 23FC 4000 0000 00C0 0004   Splash2_Art:		move.l	#$40000000,($C00004).l		; VRAM $0000
000F29EE 41F9 0000 0000             			lea	(Art_Splash2).l,a0		; Image's tiles
000F29F4 4EB8 35B2                  			jsr	NemDec				; Decompress
000F29F8                            ;Here, you may add the art used for your objects
000F29F8                            ;		   move.l	#$54C00000,($C00004).l
000F29F8                            ;		   lea	(Nem_ObjSplash2).l,a0
000F29F8                            ;		   jsr	NemDec
000F29F8                            				
000F29F8                            Splash2_Mappings:
000F29F8 43F9 00FF 0000             			lea	($FF0000).l,a1			; Load screen mappings
000F29FE 41F9 0000 0000             			lea	(Map_Splash2).l,a0
000F2A04 303C 0000                  			move.w	#0,d0
000F2A08 4EB8 38BA                  			jsr	EniDec
000F2A0C                            				
000F2A0C 43F9 00FF 0000             Splash2_ShowOnVDP:	lea	($FF0000).l,a1			; Show screen
000F2A12 203C 4000 0003             			move.l	#$40000003,d0			; Location
000F2A18 7227                       			moveq	#$27,d1
000F2A1A 741B                       			moveq	#$1B,d2
000F2A1C 4EB8 34BC                  			jsr	ShowVDPGraphics				
000F2A20                            
000F2A20                            Splash2_Palette:
000F2A20 43F9 0000 0000             		lea	(Pal_Splash2).l,a1
000F2A26 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F2A2A 701F                       		moveq	#$1F,d0
000F2A2C 24D9                       	loop3:	move.l	(a1)+,(a2)+
000F2A2E 51C8 FFFC                  		dbf	d0,loop3
000F2A32                            				
000F2A32 303C 0046                  Splash2_Music:		move.w	#$46,d0		; Play music
000F2A36 4EB8 3212                  			jsr	PlaySound
000F2A3A                            ; The own palette for your object.
000F2A3A                            ;			moveq	#$19,d0		; load Sonic's pallet
000F2A3A                            ;			jsr	PalLoad2				
000F2A3A                            Splash2_LoadObj:
000F2A3A 4EB8 4804                  			jsr	Pal_MakeFlash
000F2A3E 4EB8 45FA                  			jsr	Pal_Fadeto
000F2A42                            ;Set the object's ID on $FFFFB000
000F2A42                            			;move.b	#$00,($FFFFB000).w ; load your object
000F2A42 4EB9 0000 0000             			jsr	RunObjects
000F2A48 4EB9 0001 5DC2             			jsr	BuildSprites
000F2A4E                            ; ---------------------------------------------------------------------------------------------------------------------
000F2A4E 11FC 0002 F62A             Splash2_Loop:		move.b	#2,(Delay_Time).w		; Function 2 in vInt
000F2A54 31FC 02F8 F614             		move.w	#760,(Demo_Time_left).w	; run Sonic Team Screen for 300 frames		
000F2A5A 4EB9 0000 0000             		jsr	RunObjects
000F2A60 4EB9 0001 5DC2             		jsr	BuildSprites
000F2A66 6000 0000                  		bra.w Sega2_WaitEnd2
000F2A6A                            
000F2A6A                            Sega2_WaitEnd2:	
000F2A6A 11FC 0002 F62A             		move.b	#2,(Delay_Time).w
000F2A70 4EB9 0000 8EFE             		jsr	DelayProgram
000F2A76 5378 F614                  		sub.w	#1,(Demo_Time_left).w	; add 1 to frame counter
000F2A7A 0C78 0168 F614             		cmp.w	#360,(Demo_Time_left).w	; is the frame 360?
000F2A80 6700 0000                  		beq.w	Sega2_GotoTitle
000F2A84 0238 0080 F605             		andi.b	#$80,(Ctrl_1_Press).w ; is	Start button pressed?
000F2A8A 6700 FFDE                  		beq.w	Sega2_WaitEnd2	; if not, branch
000F2A8E                            
000F2A8E                            Sega2_GotoTitle:
000F2A8E 4278 F614                  		clr.w	(Demo_Time_left).w	; clear frame counter
000F2A92 11FC 0004 F600             		move.b	#$4,(Game_Mode).w	; go to title screen
000F2A98 4E75                       		rts
000F2A9A                            		
000F2A9A                            Pal_Splash2:		incbin	"STPAL.BIN"
000F2ABA                            			even
000F2ABA                            Art_Splash2:		incbin	"STTILES.BIN"
000F3540 00                         			even
000F3540                            Map_Splash2:		incbin	"STMAP.BIN"
000F35B8                            			even
000F35B8                            SplashScreen3:
000F35B8 4EBA 9C98                  	jsr		ssrgscreen
000F35BC                            	even
000F35BC                            	even
000F35BC                            		even
000F35BC                            
000F35BC                            SonicRetroscreen:
000F35BC                            		include _inc\SonicRetro.asm
000F35BC                            
000F35BC                            SRScreen:
000F35BC 4EF9 0000 0000             	jmp		RetroScreen
000F35C2                            
000F35C2                            unk_3140:	incbin	SonicRetroPal.bin
000F3642                            		even
000F3642                            
000F3642                            
000F3642                            ; ---------------------------------------------------------------------------
000F3642                            
000F3642                            RetroScreen:				; DATA XREF: ROM:00000394o
000F3642 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F3648 103C 00E4                  		move.b	#$E4,d0
000F364C 4EB8 325C                  		jsr	PlaySound_Special
000F3650 4EB8 3770                  		jsr	ClearPLC
000F3654 4EB8 46B4                  		jsr	Pal_FadeFrom
000F3658                            ;		jsr	VDP_ClrCRAM
000F3658 46FC 2700                  		move	#$2700,sr
000F365C 43F8 D000                  		lea	($FFFFD000).w,a1
000F3660 7000                       		moveq	#0,d0
000F3662 323C 07FF                  		move.w	#$7FF,d1
000F3666                            
000F3666                            loc_6EA56:				; CODE XREF: ROM:0006EA5Cj
000F3666 22FC 0000 0000             		move.l	#0,(a1)+
000F366C 51C9 FFF8                  		dbf	d1,loc_6EA56
000F3670 46FC 2300                  		move	#$2300,sr
000F3674 4278 C800                  		clr.w	($FFFFC800).w				;	clear the VDP buffer to prevent a minor bug that causes glitchy tiles
000F3678 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w	;	from the level select to appear on the Splash Screen star emblem
000F3680 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000F368A 41F9 0000 0000             		lea	(unk_6F694).l,a0
000F3690 4EB8 35B2                  		jsr	NemDec
000F3694 23FC 6040 0000 00C0 0004   		move.l	#$60400000,($C00004).l
000F369E 41F9 0000 0000             		lea	(unk_701FA).l,a0
000F36A4 4EB8 35B2                  		jsr	NemDec
000F36A8 23FC 6AE0 0000 00C0 0004   		move.l	#$6AE00000,($C00004).l
000F36B2 41F9 0000 0000             		lea	(unk_7074C).l,a0
000F36B8 4EB8 35B2                  		jsr	NemDec
000F36BC 4EB8 3084                  		jsr	ClearScreen
000F36C0 46FC 2300                  		move	#$2300,sr
000F36C4 7000                       		moveq	#0,d0
000F36C6 43F9 0000 0000             		lea	(byte_6F46A).l,a1
000F36CC E748                       		lsl.w	#3,d0
000F36CE D2C0                       		adda.w	d0,a1
000F36D0 2459                       		movea.l	(a1)+,a2
000F36D2 3659                       		movea.w	(a1)+,a3
000F36D4 D6FC 0080                  		adda.w	#$80,a3	; ''
000F36D8 3E19                       		move.w	(a1)+,d7
000F36DA                            
000F36DA                            loc_6EABE:				; CODE XREF: ROM:0006EAC0j
000F36DA 26DA                       		move.l	(a2)+,(a3)+
000F36DC 51CF FFFC                  		dbf	d7,loc_6EABE
000F36E0 43F9 000F 35C2             		lea	(unk_3140).l,a1		; Load palette
000F36E6 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F36EA 103C 0040                  		move.b	#$40,d0
000F36EE 24D9                       @loop:	move.l	(a1)+,(a2)+
000F36F0 4A40                       		tst.w	d0
000F36F2 6700                       		beq.s	@endloop
000F36F4 5340                       		sub.w	#1,d0
000F36F6 60F6                       		bra.s	@loop
000F36F8                            @endloop:
000F36F8 103C 0019                  		move.b	#$19,d0
000F36FC 4EB8 3212                  		jsr	PlaySound
000F3700 6100 0000                  		bsr.w	sub_6EB68
000F3704                            ;		move.w	#3,d0
000F3704                            ;		jsr	PalLoad1
000F3704 11FC 0001 D000             		move.b	#1,($FFFFD000).w
000F370A 11FC 0000 D028             		move.b	#0,($FFFFD028).w
000F3710 11FC 0001 D040             		move.b	#1,($FFFFD040).w
000F3716 11FC 0001 D068             		move.b	#1,($FFFFD068).w
000F371C 11FC 0001 D080             		move.b	#1,($FFFFD080).w
000F3722 11FC 0002 D0A8             		move.b	#2,($FFFFD0A8).w
000F3728 4EB9 0000 0000             		jsr	loc_6F4F2
000F372E 4EB9 0001 5DC2             		jsr	BuildSprites
000F3734 4EB8 45FA                  		jsr	Pal_FadeTo
000F3738                            
000F3738                            loc_6EB04:				; CODE XREF: ROM:0006EB56j
000F3738 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000F373E 4EB9 0000 8EFE             		jsr	DelayProgram
000F3744 5278 FF38                  		addq.w	#1,($FFFFFF38).w
000F3748 4EB9 0000 0000             		jsr	loc_6F4F2
000F374E 4EB9 0001 5DC2             		jsr	BuildSprites
000F3754 7200                       		moveq	#0,d1
000F3756 123C 0050                  		move.b	#$50,d1	; 'P'
000F375A 0C78 0340 FF38             		cmpi.w	#$340,($FFFFFF38).w
000F3760 6C00                       		bge.s	loc_6EB5A
000F3762 7200                       		moveq	#0,d1
000F3764 123C 0050                  		move.b	#$50,d1	; 'P'
000F3768 1038 F605                  		move.b	($FFFFF605).w,d0
000F376C 0800 0004                  		btst	#4,d0
000F3770 6600 0000                  		bne.w	loc_6EB5A
000F3774 0800 0005                  		btst	#5,d0
000F3778 6600 0000                  		bne.w	loc_6EB5A
000F377C 0800 0006                  		btst	#6,d0
000F3780 6600 0000                  		bne.w	loc_6EB5A
000F3784 0800 0007                  		btst	#7,d0
000F3788 6600 0000                  		bne.w	loc_6EB5A
000F378C 6000 FFAA                  		bra.w	loc_6EB04
000F3790                            ; ---------------------------------------------------------------------------
000F3790                            
000F3790                            loc_6EB5A:				; CODE XREF: ROM:0006EB2Aj
000F3790                            					; ROM:0006EB3Aj ...
000F3790 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F3796 4EBA F1FC                  		jsr	SplashScreen2	; go to title screen
000F379A 4E75                       		rts
000F379C                            
000F379C                            ; =============== S U B	R O U T	I N E =======================================
000F379C                            
000F379C                            
000F379C                            sub_6EB68:				; CODE XREF: ROM:0006EACCp
000F379C 43F9 0000 0000             		lea	(unk_6EBAA).l,a1
000F37A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000F37A8 283C 4000 0003             		move.l	#$40000003,d4
000F37AE 721B                       		moveq	#$1B,d1
000F37B0                            
000F37B0                            loc_6EB7C:				; CODE XREF: sub_6EB68+22j
000F37B0 2D44 0004                  		move.l	d4,4(a6)
000F37B4 6100 0000                  		bsr.w	sub_6EB90
000F37B8 0684 0080 0000             		addi.l	#$800000,d4
000F37BE 51C9 FFF0                  		dbf	d1,loc_6EB7C
000F37C2 4E75                       		rts
000F37C4                            ; End of function sub_6EB68
000F37C4                            
000F37C4                            
000F37C4                            ; =============== S U B	R O U T	I N E =======================================
000F37C4                            
000F37C4                            
000F37C4                            sub_6EB90:				; CODE XREF: sub_6EB68+18p
000F37C4 7427                       		moveq	#$27,d2	; '''
000F37C6                            
000F37C6                            loc_6EB92:				; CODE XREF: sub_6EB90+Cj
000F37C6                            					; sub_6EB90+14j
000F37C6 7000                       		moveq	#0,d0
000F37C8 3019                       		move.w	(a1)+,d0
000F37CA 6A00                       		bpl.s	loc_6EBA2
000F37CC 3CBC 0000                  		move.w	#0,(a6)
000F37D0 51CA FFF4                  		dbf	d2,loc_6EB92
000F37D4 4E75                       		rts
000F37D6                            ; ---------------------------------------------------------------------------
000F37D6                            
000F37D6                            loc_6EBA2:				; CODE XREF: sub_6EB90+6j
000F37D6 3C80                       		move.w	d0,(a6)
000F37D8 51CA FFEC                  		dbf	d2,loc_6EB92
000F37DC 4E75                       		rts
000F37DE                            ; End of function sub_6EB90
000F37DE                            
000F37DE                            ; ---------------------------------------------------------------------------
000F37DE                            unk_6EBAA:	incbin	AsciiMaybe.bin
000F409E                            		even
000F409E                            byte_6F46A:	incbin	SRMappings.bin
000F4128                            		even
000F4128                            ; ---------------------------------------------------------------------------
000F4128                            
000F4128                            loc_6F4F2:				; CODE XREF: ROM:0006EAF4p
000F4128                            					; ROM:0006EB12p
000F4128 41F8 D000                  		lea	($FFFFD000).w,a0
000F412C 7E7F                       		moveq	#$7F,d7	; ''
000F412E 7000                       		moveq	#0,d0
000F4130                            
000F4130                            loc_6F4FA:				; CODE XREF: ROM:loc_6F50Ej
000F4130 1010                       		move.b	(a0),d0
000F4132 6700                       		beq.s	loc_6F50A
000F4134 D040                       		add.w	d0,d0
000F4136 D040                       		add.w	d0,d0
000F4138 227B 0000                  		movea.l	off_6F514-4(pc,d0.w),a1
000F413C 4E91                       		jsr	(a1)
000F413E 7000                       		moveq	#0,d0
000F4140                            
000F4140                            loc_6F50A:				; CODE XREF: ROM:0006F4FCj
000F4140 41E8 0040                  		lea	$40(a0),a0
000F4144                            
000F4144                            loc_6F50E:
000F4144 51CF FFEA                  		dbf	d7,loc_6F4FA
000F4148 4E75                       		rts
000F414A                            ; ---------------------------------------------------------------------------
000F414A 0000 0000                  off_6F514:	dc.l loc_6F518		; DATA XREF: ROM:0006F502t
000F414E                            ; ---------------------------------------------------------------------------
000F414E                            
000F414E                            loc_6F518:				; DATA XREF: ROM:off_6F514o
000F414E 7000                       		moveq	#0,d0
000F4150 1028 0028                  		move.b	$28(a0),d0
000F4154 D040                       		add.w	d0,d0
000F4156 D040                       		add.w	d0,d0
000F4158 4EFB 0000                  		jmp	loc_6F528(pc,d0.w)
000F415C                            ; ---------------------------------------------------------------------------
000F415C 4E75                       		rts
000F415E                            ; ---------------------------------------------------------------------------
000F415E                            
000F415E                            loc_6F528:				; CODE XREF: ROM:0006F522j
000F415E 6000 0000                  		bra.w	loc_6F534
000F4162                            ; ---------------------------------------------------------------------------
000F4162 6000 0000                  		bra.w	loc_6F576
000F4166                            ; ---------------------------------------------------------------------------
000F4166 6000 0000                  		bra.w	loc_6F5E6
000F416A                            ; ---------------------------------------------------------------------------
000F416A                            
000F416A                            loc_6F534:				; CODE XREF: ROM:loc_6F528j
000F416A 7000                       		moveq	#0,d0
000F416C 1028 0024                  		move.b	$24(a0),d0
000F4170 323B 0000                  		move.w	off_6F542(pc,d0.w),d1
000F4174 4EFB 1000                  		jmp	off_6F542(pc,d1.w)
000F4178                            ; ---------------------------------------------------------------------------
000F4178 0000                       off_6F542:	dc.w loc_6F546-off_6F542 ; DATA	XREF: ROM:0006F53Ar
000F417A                            					; ROM:off_6F542o ...
000F417A 0000                       		dc.w loc_6F570-off_6F542
000F417C                            ; ---------------------------------------------------------------------------
000F417C                            
000F417C                            loc_6F546:				; DATA XREF: ROM:off_6F542o
000F417C 5428 0024                  		addq.b	#2,$24(a0)
000F4180 317C 0193 0008             		move.w	#$193,8(a0)
000F4186 317C 0102 000A             		move.w	#$102,$A(a0)
000F418C 217C 0000 0000 0004        		move.l	#byte_6F63A,4(a0)
000F4194 317C 2102 0002             		move.w	#$2102,2(a0)
000F419A 117C 0000 0001             		move.b	#0,1(a0)
000F41A0 317C 0200 0018             		move.w	#$200,priority(a0)
000F41A6                            
000F41A6                            loc_6F570:				; DATA XREF: ROM:0006F544o
000F41A6 4EF9 0001 5D72             		jmp	DisplaySprite
000F41AC                            ; ---------------------------------------------------------------------------
000F41AC                            
000F41AC                            loc_6F576:				; CODE XREF: ROM:0006F52Cj
000F41AC 7000                       		moveq	#0,d0
000F41AE 1028 0024                  		move.b	$24(a0),d0
000F41B2 323B 0000                  		move.w	off_6F584(pc,d0.w),d1
000F41B6 4EFB 1000                  		jmp	off_6F584(pc,d1.w)
000F41BA                            ; ---------------------------------------------------------------------------
000F41BA 0000                       off_6F584:	dc.w loc_6F588-off_6F584 ; DATA	XREF: ROM:0006F57Cr
000F41BC                            					; ROM:off_6F584o ...
000F41BC 0000                       		dc.w loc_6F5B2-off_6F584
000F41BE                            ; ---------------------------------------------------------------------------
000F41BE                            
000F41BE                            loc_6F588:				; DATA XREF: ROM:off_6F584o
000F41BE 5428 0024                  		addq.b	#2,$24(a0)
000F41C2 317C 0191 0008             		move.w	#$191,8(a0)
000F41C8 317C 00E2 000A             		move.w	#$E2,$A(a0) ; 'â'
000F41CE 217C 0000 0000 0004        		move.l	#byte_6F67A,4(a0)
000F41D6 317C 4157 0002             		move.w	#$4157,2(a0)
000F41DC 117C 0000 0001             		move.b	#0,1(a0)
000F41E2 317C 0180 0018             		move.w	#$180,priority(a0)
000F41E8                            
000F41E8                            loc_6F5B2:				; DATA XREF: ROM:0006F586o
000F41E8 5228 0031                  		addq.b	#1,$31(a0)
000F41EC 0C28 000B 0031             		cmpi.b	#$B,$31(a0)
000F41F2 6D00 0000                  		blt.w	loc_6F5DA
000F41F6 117C 0000 0031             		move.b	#0,$31(a0)
000F41FC 5228 0030                  		addq.b	#1,$30(a0)
000F4200 0C28 0002 0030             		cmpi.b	#2,$30(a0)
000F4206 6600 0000                  		bne.w	loc_6F5DA
000F420A 117C 0000 0030             		move.b	#0,$30(a0)
000F4210                            
000F4210                            loc_6F5DA:				; CODE XREF: ROM:0006F5BCj
000F4210                            					; ROM:0006F5D0j
000F4210 1168 0030 001A             		move.b	$30(a0),$1A(a0)
000F4216 4EF9 0001 5D72             		jmp	DisplaySprite
000F421C                            ; ---------------------------------------------------------------------------
000F421C                            
000F421C                            loc_6F5E6:				; CODE XREF: ROM:0006F530j
000F421C 7000                       		moveq	#0,d0
000F421E 1028 0024                  		move.b	$24(a0),d0
000F4222 323B 0000                  		move.w	off_6F5F4(pc,d0.w),d1
000F4226 4EFB 1000                  		jmp	off_6F5F4(pc,d1.w)
000F422A                            ; ---------------------------------------------------------------------------
000F422A 0000                       off_6F5F4:	dc.w loc_6F5F8-off_6F5F4 ; DATA	XREF: ROM:0006F5ECr
000F422C                            					; ROM:off_6F5F4o ...
000F422C 0000                       		dc.w loc_6F622-off_6F5F4
000F422E                            ; ---------------------------------------------------------------------------
000F422E                            
000F422E                            loc_6F5F8:				; DATA XREF: ROM:off_6F5F4o
000F422E 5428 0024                  		addq.b	#2,$24(a0)
000F4232 317C 0124 0008             		move.w	#$124,8(a0)
000F4238 317C 00FF 000A             		move.w	#$FF,$A(a0)
000F423E 217C 0000 0000 0004        		move.l	#byte_6F628,4(a0)
000F4246 317C 0000 0002             		move.w	#0,2(a0)
000F424C 117C 0000 0001             		move.b	#0,1(a0)
000F4252 117C 0000 0018             		move.b	#0,priority(a0)
000F4258                            
000F4258                            loc_6F622:				; DATA XREF: ROM:0006F5F6o
000F4258 4EF9 0001 5D72             		jmp	DisplaySprite
000F425E                            ; ---------------------------------------------------------------------------
000F425E                            byte_6F628:	include		map1.asm
000F425E                            ; --------------------------------------------------------------------------------
000F425E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F425E                            ; --------------------------------------------------------------------------------
000F425E                            
000F425E                            SME_UkA14:	
000F425E 0000                       		dc.w SME_UkA14_2-SME_UkA14	
000F4260 03                         SME_UkA14_2:	dc.b 3	
000F4261 000E 00C0 00               		dc.b 0, $E, 0, $C0, 0	
000F4266 000E 00CC 20               		dc.b 0, $E, 0, $CC, $20	
000F426B 000E 00D8 40               		dc.b 0, $E, 0, $D8, $40	
000F4270                            		even
000F4270                            		even
000F4270                            byte_6F63A:	include		map2.asm
000F4270                            ; --------------------------------------------------------------------------------
000F4270                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F4270                            ; --------------------------------------------------------------------------------
000F4270                            
000F4270                            SME_beAal:	
000F4270 0000 0000                  		dc.w SME_beAal_6-SME_beAal, SME_beAal_1B-SME_beAal	
000F4274 0000                       		dc.w SME_beAal_30-SME_beAal	
000F4276 04                         SME_beAal_6:	dc.b 4	
000F4277 F00F 0000 E0               		dc.b $F0, $F, 0, 0, $E0	
000F427C F00F 0010 00               		dc.b $F0, $F, 0, $10, 0	
000F4281 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F4286 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F428B 04                         SME_beAal_1B:	dc.b 4	
000F428C 000D 0045 E0               		dc.b 0, $D, 0, $45, $E0	
000F4291 000D 004D 00               		dc.b 0, $D, 0, $4D, 0	
000F4296 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F429B 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F42A0 03                         SME_beAal_30:	dc.b 3	
000F42A1 F00F 0023 E0               		dc.b $F0, $F, 0, $23, $E0	
000F42A6 F00F 0033 00               		dc.b $F0, $F, 0, $33, 0	
000F42AB 1004 0043 F8               		dc.b $10, 4, 0, $43, $F8	
000F42B0                            		even
000F42B0                            		even
000F42B0                            byte_6F67A:	include		map3.asm
000F42B0                            ; --------------------------------------------------------------------------------
000F42B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F42B0                            ; --------------------------------------------------------------------------------
000F42B0                            
000F42B0                            SME_lHRJj:	
000F42B0 0000 0000                  		dc.w SME_lHRJj_4-SME_lHRJj, SME_lHRJj_F-SME_lHRJj	
000F42B4 02                         SME_lHRJj_4:	dc.b 2	
000F42B5 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000F42BA 0808 000C F4               		dc.b 8, 8, 0, $C, $F4	
000F42BF 02                         SME_lHRJj_F:	dc.b 2	
000F42C0 E80B 000F F4               		dc.b $E8, $B, 0, $F, $F4	
000F42C5 0808 001B F4               		dc.b 8, 8, 0, $1B, $F4	
000F42CA                            		even
000F42CA                            		even
000F42CA                            unk_6F694:	incbin	SRBack.bin
000F4E30                            		even
000F4E30                            unk_701FA:	incbin	masteremerald.bin
000F5382 00                         		even
000F5382                            unk_7074C:	incbin SonicOnRetro.bin
000F5644                            		even
000F5644                            		even
000F5644                            		even
000F5644                            
000F5644                            ;ClearVDPStuff:
000F5644                            ;		jsr	clearplc
000F5644                            ;		jsr	pal_fadefrom
000F5644                            ;		lea	($FFFFF700).w,a1
000F5644                            ;		moveq	#0,d0
000F5644                            ;		move.w	#$3F,d1
000F5644                            
000F5644                            ;loc_30332A_2:					  ; ...
000F5644                            ;		move.l	d0,(a1)+
000F5644                            ;		dbf	d1,loc_30332A_2
000F5644                            ;		lea	($FFFFD000).w,a1
000F5644                            ;		moveq	#0,d0
000F5644                            ;		move.w	#$7FF,d1
000F5644                            
000F5644                            ;loc_30333A_2:					  ; ...
000F5644                            ;		move.l	d0,(a1)+
000F5644                            ;		dbf	d1,loc_30333A_2
000F5644                            ;		lea	($C00004).l,a6
000F5644                            ;		move.w	#$8004,(a6)
000F5644                            ;		move.w	#$8230,(a6)
000F5644                            ;		move.w	#$8407,(a6)
000F5644                            ;		move.w	#$8700,(a6)
000F5644                            ;		move.w	#$8B00,(a6)
000F5644                            ;		clr.b	($FFFFF64E).w
000F5644                            ;		disable_ints
000F5644                            ;		move.w	($FFFFF60C).w,d0
000F5644                            ;		andi.b	#$BF,d0
000F5644                            ;		move.w	d0,($C00004).l
000F5644                            ;		jsr	ClearScreen
000F5644                            ;		rts
000F5644                            
000F5644                            ;	include aplib.asm
000F5644                            ;tree_tile:
000F5644                            ;	incbin	treet.apl
000F5644                            ;	even
000F5644                            ;tree_pal:
000F5644                            ;	incbin	treep.bin
000F5644                            ;	even
000F5644                            ;tree_map:
000F5644                            ;	incbin	treem.eni
000F5644                            ;	even
000F5644                            		include  EniCredProg.asm
000F5644                            ; How to install this:
000F5644                            
000F5644                            ; Go to "Cred_ClrPallet:"
000F5644                            ; Replace:
000F5644                            ; "		move.b	#$8A,($FFFFD080).w ; load credits object"
000F5644                            ; with:
000F5644                            ; "		jsr	Credits_MapLoad"
000F5644                            ; Now, go to the "end of ROM", and put this above it:
000F5644                            
000F5644                            ;		include  EniCredProg.asm
000F5644                            ;		even
000F5644                            ;EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F5644                            ;		even
000F5644                            ;EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F5644                            ;		even
000F5644                            ;EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F5644                            ;		even
000F5644                            ;EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F5644                            ;		even
000F5644                            ;EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F5644                            ;		even
000F5644                            ;EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F5644                            ;		even
000F5644                            ;EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F5644                            ;		even
000F5644                            ;EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F5644                            ;		even
000F5644                            ;EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F5644                            ;		even
000F5644                            ;EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F5644                            ;		even
000F5644                            
000F5644                            ; Then uncomment it
000F5644                            
000F5644                            Credits_Mappings:
000F5644 0000 0000                  		dc.l	EniCred_0	; credit id = 0
000F5648 0000 0000                  		dc.l	EniCred_1	; credit id = 1
000F564C 0000 0000                  		dc.l	EniCred_2	; credit id = 2
000F5650 0000 0000                  		dc.l	EniCred_3	; credit id = 3
000F5654 0000 0000                  		dc.l	EniCred_4	; credit id = 4
000F5658 0000 0000                  		dc.l	EniCred_5	; credit id = 5
000F565C 0000 0000                  		dc.l	EniCred_6	; credit id = 6
000F5660 0000 0000                  		dc.l	EniCred_7	; credit id = 7
000F5664 0000 0000                  		dc.l	EniCred_8	; credit id = 8
000F5668 0000 0000                  		dc.l	EniCred_9	; credit id = 9
000F566C                            
000F566C                            Credits_MapLoad:
000F566C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000F5672 6600                       		bne.s	Credits_MapLoad_Title
000F5674                            		
000F5674 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000F5678 D040                       		add.w	d0,d0
000F567A D040                       		add.w	d0,d0
000F567C 207B 00C6                  		movea.l	Credits_Mappings(pc,d0.w),a0
000F5680 4EF9 0000 0000             		jmp	Credits_MapLoad_cont
000F5686                            		
000F5686                            Credits_MapLoad_Title:
000F5686 41F9 0000 0000             		lea EniCred_Title,a0
000F568C                            
000F568C                            Credits_MapLoad_cont:
000F568C 43F9 00FF 0000             		lea	($FF0000).l,a1
000F5692 7000                       		moveq	#0,d0		; location of art in VRAM
000F5694 4EB8 38BA                  		jsr	EniDec
000F5698                            		;lea	($FF0000).l,a1	; EniDec doesn't change a1
000F5698 203C 4000 0003             		move.l	#$40000003,d0
000F569E 7227                       		moveq	#40-1,d1	 ; X size = 40
000F56A0 741B                       		moveq	#28-1,d2	 ; Y size = 28
000F56A2 4EF8 34BC                  		jmp	ShowVDPGraphics
000F56A6                            ;EniCredEnd:
000F56A6                            ;		rts
000F56A6                            
000F56A6                            EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F56FC                            		even
000F56FC                            EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F5758                            		even
000F5758                            EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F57AA                            		even
000F57AA                            EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F5814                            		even
000F5814                            EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F5876                            		even
000F5876                            EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F58E6                            		even
000F58E6                            EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F5952                            		even
000F5952                            EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F59F4                            		even
000F59F4                            EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F5A4E                            		even
000F5A4E                            EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F5A9C                            		even
000F5A9C                            EniCred_Title:	incbin	credeni\credtitle.bin	; "Sonic Team Presents" mappings
000F5AFA                            		even
000F5AFA                            		even
000F5AFA                            		even
000F5AFA                            		
000F5AFA                            SoundDriverASM:
000F5AFA                            		even
000F5AFA                            
000F5AFA                            EndOfRom:
000F5AFA                            ;		include 's3driver.asm'
000F5AFA                            ;		include	"Echo\68k\s2_option.asm"
