00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	'_inc\s2_constants.asm'
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            ; some constants and variables of this code and other constants of sonic 2 used in this code
00000000                            ;--------------------------------------------------------------------------------------------
00000000                            
00000000                            ; files
00000000                            Nem_LevelIcons					equ	Level_Icons
00000000                            Eni_MenuBg						equ MapEng_MenuBack
00000000                            ArtNem_FontStuff				equ	Nem_MenuFont
00000000                            ArtNem_1P2PWins					equ Nem_1P2PWins
00000000                            MapEng_MenuBack					equ	Menu_Mappings
00000000                            MapEng_Options					equ	Eni_MenuBox
00000000                            MapUnc_Sonic					equ	Map_Sonic
00000000                            Obj38_MapUnc_1DBE4				equ	Map_obj38
00000000                            byte_1DBD6						equ	Ani_obj38
00000000                            ArtUnc_Sonic					equ	Art_Sonic
00000000                            MapRUnc_Sonic					equ	SonicDynPLC
00000000                            Load_Sprites					equ ObjPosLoad
00000000                            ; ===========================================================================
00000000                            ; routines
00000000                            JmpTo_PlayMusic					equ	PlaySound
00000000                            Play_Sfx						equ	PlaySound_Special	
00000000                            PlayMusic						equ	PlaySound
00000000                            JmpTo_PlaySoundStereo			equ	PlaySound_Special
00000000                            WaitForVint						equ	DelayProgram
00000000                            JmpTo2_Dynamic_Normal			equ	Dynamic_Menu
00000000                            Anim_SonicMilesBG				equ	Sonic_Miles_Frame_Select
00000000                            level_select_cheat				equ	Code_Level_Select
00000000                            continues_cheat					equ	Code_Continues
00000000                            CheckCheats						equ	Menu_Code_Test
00000000                            JmpTo_PlaneMapToVRAM			equ	ShowVDPGraphics
00000000                            PlaneMapToVRAM					equ	ShowVDPGraphics
00000000                            Player_ResetAirTimer			equ	ResumeMusic
00000000                            RunObjects						equ	ObjectsLoad
00000000                            Sonic_InputAcceleration_Path	equ	Sonic_Move
00000000                            SingleObjectLoad				equ	SingleObjLoad
00000000                            S1SingleObjectLoad				equ	SingleObjLoad2
00000000                            CalcRoomInFront					equ	Sonic_WalkSpeed
00000000                            AnglePos						equ	Sonic_AnglePos
00000000                            ObjectMove						equ	SpeedToPos
00000000                            ObjectMoveAndFall				equ	ObjectFall
00000000                            KillSonic						equ	KillCharacter
00000000                            CheckGameOver					equ	GameOver
00000000                            Sonic_CheckFloor				equ	Sonic_HitFloor
00000000                            checkleftceilingdist			equ	loc_14FD6
00000000                            CheckCeilingDist				equ	Sonic_DontRunOnWalls
00000000                            checkleftwalldist				equ	Sonic_HitWall
00000000                            CheckRightCeilingDist			equ	sub_14E50
00000000                            CheckRightWallDist				equ	sub_14EB4
00000000                            CalcRoomOverHead				equ	sub_14D48
00000000                            ChkFloorEdge					equ	ObjHitFloor
00000000                            ChkFloorEdge_Part2				equ	ObjHitFloor2
00000000                            Sonic_HitFloor2					equ	loc_13772
00000000                            Sonic_HitCeiling2				equ	loc_13758
00000000                            Sonic_HitRightWall				equ loc_1373E
00000000                            ObjCheckFloorDist				equ ObjHitFloor
00000000                            loc_1B02C						equ	loc_13726
00000000                            Sonic_HitCeilingAndWalls		equ loc_136E2
00000000                            Sonic_HitFloorS2				equ	loc_136B4
00000000                            Sonic_DoLevelCollision			equ	Sonic_Floor
00000000                            ; ===========================================================================
00000000                            ; constants
00000000 =00000091                  Level_Select_Menu_snd			=	$0091
00000000 =00000091                  MusID_Options					=	$0091
00000000 =000000BF                  SndID_ContinueJingle			=	$00BF
00000000 =000000F7                  Emerald_Snd						=	$00F7
00000000 =000000B5                  Ring_Snd						=	$00B5
00000000 =000000E0                  Volume_Down						=	$00E0
00000000 =000000E4                  Stop_Sound						=	$00E4
00000000                            
00000000 =00000014                  PalID_Menu						=	$14
00000000 =00000081                  MusID_2PResult					=	$81
00000000                            
00000000 =0000000C                  GameModeID_Level				=	$0C
00000000 =00000000                  GameModeID_SegaScreen			=	$00
00000000 =00000010                  GameModeID_SpecialStage			=	$10
00000000 =00000020                  GameModeID_2PResults			=	$20
00000000 =00000020                  GameModeID_2PLevelSelect		=	$20
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Controller Buttons
00000000                            ;
00000000                            ; Buttons bit numbers
00000000 =00000000                  button_up:                      EQU     0
00000000 =00000001                  button_down:                    EQU     1
00000000 =00000002                  button_left:                    EQU     2
00000000 =00000003                  button_right:                   EQU     3
00000000 =00000004                  button_B:                       EQU     4
00000000 =00000005                  button_C:                       EQU     5
00000000 =00000006                  button_A:                       EQU     6
00000000 =00000007                  button_start:                   EQU     7
00000000                            ; Buttons masks (1 << x == pow(2, x))
00000000 =00000001                  button_up_mask:                 EQU     1<<button_up    ; $01
00000000 =00000002                  button_down_mask:               EQU     1<<button_down  ; $02
00000000 =00000004                  button_left_mask:               EQU     1<<button_left  ; $04
00000000 =00000008                  button_right_mask:              EQU     1<<button_right ; $08
00000000 =00000010                  button_B_mask:                  EQU     1<<button_B     ; $10
00000000 =00000020                  button_C_mask:                  EQU     1<<button_C     ; $20
00000000 =00000040                  button_A_mask:                  EQU     1<<button_A     ; $40
00000000 =00000080                  button_start_mask:              EQU     1<<button_start ; $80
00000000                            
00000000                            
00000000 =00000000                  VsRSID_Act						equ	0
00000000 =00000001                  VsRSID_Zone						equ	1
00000000 =00000002                  VsRSID_Game						equ	2
00000000 =00000003                  VsRSID_SS						equ	3
00000000 =00000004                  VsRSID_SSZone					equ	4
00000000                            
00000000 =00000090                  ObjID_HUD						equ	$90
00000000 =00000040                  id2								equ	$40
00000000                            
00000000 =00000000                  id equ                      0 ; object ID (if you change this, change insn1op and insn2op in s2.macrosetup.asm, if you still use them)
00000000 =00000001                  render_flags equ		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile equ		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings equ		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos equ			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000A                  x_sub equ			 $A
00000000 =0000000C                  y_pos equ			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =0000000E                  y_sub equ			 $E
00000000 =00000018                  priority equ		$18 ; 0 = front
00000000 =00000023                  width_pixels equ		$23
00000000 =0000001A                  mapping_frame equ		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel equ			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel equ			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius equ		$16 ; collision width / 2
00000000 =00000017                  x_radius equ		$17 ; collision height / 2
00000000 =0000001B                  anim_frame equ		$1B
00000000 =0000001C                  anim equ			$1C
00000000 =0000001D                  next_anim equ		$1D
00000000 =0000001E                  anim_frame_duration equ	$1E
00000000 =00000022                  status equ		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine equ		$24
00000000 =00000025                  routine_secondary equ	$25
00000000 =00000026                  angle equ			$26 ; angle about the zequ0 axis (360 degrees equ 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags equ	$20
00000000 =00000021                  collision_property equ	$21
00000000 =00000014                  respawn_index equ		$14
00000000 =00000028                  subtype equ		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000020                  inertia equ		$20 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000031                  flip_angle equ		$31 ; angle about the xequ0 axis (360 degrees equ 256) (twist/tumble)
00000000 =00000028                  air_left equ		$28
00000000 =00000035                  flip_turned equ		$35 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control equ		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary equ	$2B
00000000 =00000033                  flips_remaining equ	$33 ; number of flip revolutions remaining
00000000 =00000034                  flip_speed equ		$34 ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock equ		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time equ	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time equ	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time equ	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt equ		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt equ			$37 ; angle on ground
00000000 =00000038                  stick_to_convex equ	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag equ		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter equ	$3A ; and $3B
00000000 =0000003C                  jumping equ		$3C
00000000 =0000003D                  interact equ		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer equ			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus equ		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel equ		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel equ		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent equ		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000 =00000020                  NumberOfZones equ $20
00000000                            ; TODO: $2C is often parent instead (see LoadChildObject); consider defining parent2 = $2C and changing some objoff_2Cs to that
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by some/most bosses:
00000000 =0000000A                  boss_subtype		= $A
00000000 =00000014                  boss_invulnerable_time	= $14
00000000 =0000001A                  boss_sine_count		= $1A	; mapping_frame
00000000 =00000026                  boss_routine		= $26	; angle
00000000 =0000002C                  boss_defeated		= $2C
00000000 =00000032                  boss_hitcount2		= $32
00000000 =00000038                  boss_hurt_sonic		= $38	; flag set by collision response routine when sonic has just been hurt (by boss?)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; when childsprites are activated (i.e. bit #6 of render_flags set)
00000000 =0000000B                  mainspr_mapframe	= $B
00000000 =0000000E                  mainspr_width		= $E
00000000 =0000000F                  mainspr_childsprites 	= $F	; amount of child sprites
00000000 =00000014                  mainspr_height		= $14
00000000 =00000010                  sub2_x_pos		= $10	; x_vel
00000000 =00000012                  sub2_y_pos		= $12	; y_vel
00000000 =00000015                  sub2_mapframe		= $15
00000000 =00000016                  sub3_x_pos		= $16	; y_radius
00000000 =00000018                  sub3_y_pos		= $18	; priority
00000000 =0000001B                  sub3_mapframe		= $1B	; anim_frame
00000000 =0000001C                  sub4_x_pos		= $1C	; anim
00000000 =0000001E                  sub4_y_pos		= $1E	; anim_frame_duration
00000000 =00000021                  sub4_mapframe		= $21	; collision_property
00000000 =00000022                  sub5_x_pos		= $22	; status
00000000 =00000024                  sub5_y_pos		= $24	; routine
00000000 =00000027                  sub5_mapframe		= $27
00000000 =00000028                  sub6_x_pos		= $28	; subtype
00000000 =0000002A                  sub6_y_pos		= $2A
00000000 =0000002D                  sub6_mapframe		= $2D
00000000 =0000002E                  sub7_x_pos		= $2E
00000000 =00000030                  sub7_y_pos		= $30
00000000 =00000033                  sub7_mapframe		= $33
00000000 =00000034                  sub8_x_pos		= $34
00000000 =00000036                  sub8_y_pos		= $36
00000000 =00000039                  sub8_mapframe		= $39
00000000 =0000003A                  sub9_x_pos		= $3A
00000000 =0000003C                  sub9_y_pos		= $3C
00000000 =0000003F                  sub9_mapframe		= $3F
00000000 =00000006                  next_subspr		= $6
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A equ		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B equ		3+x_pos
00000000 =0000000E                  objoff_E equ		2+y_pos
00000000 =0000000F                  objoff_F equ		3+y_pos
00000000 =00000014                  objoff_14 equ		$14
00000000 =00000015                  objoff_15 equ		$15
00000000 =0000001F                  objoff_1F equ		$1F
00000000 =00000027                  objoff_27 equ		$27
00000000 =00000028                  objoff_28 equ		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 equ $29
00000000 =0000002A                  objoff_2A equ $2A
00000000 =0000002B                  objoff_2B equ $2B
00000000 =0000002C                  objoff_2C equ $2C
00000000 =0000002D                  objoff_2D equ $2D
00000000 =0000002E                  objoff_2E equ $2E
00000000 =0000002F                  objoff_2F equ $2F
00000000 =00000030                  objoff_30 equ $30
00000000 =00000031                  objoff_31 equ $31
00000000 =00000032                  objoff_32 equ $32
00000000 =00000033                  objoff_33 equ $33
00000000 =00000034                  objoff_34 equ $34
00000000 =00000035                  objoff_35 equ $35
00000000 =00000036                  objoff_36 equ $36
00000000 =00000037                  objoff_37 equ $37
00000000 =00000038                  objoff_38 equ $38
00000000 =00000039                  objoff_39 equ $39
00000000 =0000003A                  objoff_3A equ $3A
00000000 =0000003B                  objoff_3B equ $3B
00000000 =0000003C                  objoff_3C equ $3C
00000000 =0000003D                  objoff_3D equ $3D
00000000 =0000003E                  objoff_3E equ $3E
00000000 =0000003F                  objoff_3F equ $3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  object_size =           $40 ; the size of an object
00000000 =00000040                  next_object =           object_size
00000000                            
00000000 =00A130F1                  SRAM_access_flag =		$A130F1
00000000                            
00000000 =00000000                  __ = $00
00000000 =00000010                  _0 = $10
00000000 =00000011                  _1 = $11
00000000 =00000012                  _2 = $12
00000000 =0000001E                  _A = $1E
00000000 =0000001F                  _B = $1F
00000000 =00000020                  _C = $20
00000000 =00000021                  _D = $21
00000000 =00000022                  _E = $22    
00000000 =00000023                  _F = $23
00000000 =00000024                  _G = $24
00000000 =00000025                  _H = $25
00000000 =00000026                  _I = $26
00000000 =00000027                  _J = $27
00000000 =00000028                  _K = $28
00000000 =00000029                  _L = $29
00000000 =0000002A                  _M = $2A
00000000 =0000002B                  _N = $2B
00000000 =0000002C                  _O = $2C
00000000 =0000002D                  _P = $2D
00000000 =0000002E                  _Q = $2E
00000000 =0000002F                  _R = $2F
00000000 =00000030                  _S = $30
00000000 =00000031                  _T = $31
00000000 =00000032                  _U = $32
00000000 =00000033                  _V = $33
00000000 =00000034                  _W = $34
00000000 =00000035                  _X = $35
00000000 =00000036                  _Y = $36
00000000 =00000037                  _Z = $37
00000000 =0000001A                  _st = $1A
00000000                            
00000000                            ; ===========================================================================
00000000                            ; variables and flags
00000000 =00C00004                  VDP_control_port				equ	$C00004
00000000 =FFFF0000                  Chunk_Table						equ	$FFFF0000
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot			equ	$FFFFC8FC
00000000 =FFFFD000                  MainCharacter					equ	$FFFFD000
00000000 =FFFFD000                  VSResults_HUD					equ	$FFFFD000
00000000 =FFFFC800                  VDP_Command_Buffer				equ	$FFFFC800
00000000 =FFFFF700                  Camera_X_pos					equ	$FFFFF700
00000000 =FFFFF704                  Camera_Y_pos					equ	$FFFFF704
00000000 =FFFFF708                  Camera_BG_X_pos					equ	$FFFFF708 ; word
00000000 =FFFFF70C                  Camera_BG_Y_pos 				equ $FFFFF70C	; word
00000000 =FFFFF710                  Camera_BG2_X_pos 				equ $FFFFF710	; word
00000000 =FFFFF714                  Camera_BG2_Y_pos 				equ $FFFFF714	; word
00000000 =FFFFF718                  Camera_BG3_X_pos 				equ $FFFFF718	; word
00000000 =FFFFF71C                  Camera_BG3_Y_pos 				equ $FFFFF71C	; word
00000000 =FFFFF600                  Game_Mode						equ	$FFFFF600
00000000 =FFFFF60C                  VDP_Reg1_val					equ	$FFFFF60C
00000000 =FFFFF605                  Ctrl_1_Press					equ	$FFFFF605
00000000 =FFFFF614                  Demo_Time_left					equ	$FFFFF614
00000000 =FFFFF61A                  Vscroll_Factor					equ	$FFFFF61A
00000000 =FFFFF62A                  Vint_routine					equ	$FFFFF62A
00000000 =FFFFF680                  Plc_Buffer						equ	$FFFFF680
00000000 =FFFFF711                  Level_started_flag				equ	$FFFFF711
00000000 =FFFFFF94                  Reverse_gravity_flag 			equ	$FFFFFF94
00000000 =FFFFFE0C                  Vint_runcount					equ	$FFFFFE0C
00000000 =FFFFFE10                  Current_ZoneAndAct				equ	$FFFFFE10
00000000 =FFFFFE10                  Current_Zone_2P					equ	$FFFFFE10
00000000 =FFFFFE11                  Current_Act						equ	$FFFFFE11
00000000 =FFFFFE11                  Current_Act_2P					equ	$FFFFFE11
00000000 =FFFFFE12                  Life_count						equ	$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage			equ	$FFFFFE16
00000000 =FFFFFE18                  Continue_count					equ	$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag				equ $FFFFFE19
00000000 =FFFFFE20                  Ring_count						equ	$FFFFFE20
00000000 =FFFFFE22                  Timer							equ	$FFFFFE22
00000000 =FFFFFE22                  Timer_minute_word				equ	$FFFFFE22
00000000 =FFFFFE24                  Timer_second					equ	$FFFFFE24
00000000 =FFFFFE25                  Timer_frame						equ	$FFFFFE25
00000000 =FFFFFE26                  Score							equ	$FFFFFE26
00000000 =FFFFFE30                  Last_star_pole_hit				equ	$FFFFFE30
00000000 =FFFFFE32                  Saved_x_pos						equ	 $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos						equ	 $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count				equ	 $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer						equ	 $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile					equ	 $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer						equ	 $FFFFFE3E
00000000 =FFFFFE57                  Emeralds_flag					equ	$FFFFFE57
00000000 =FFFFFEC2                  Game_Over_2P					equ	$FFFFFEC2
00000000 =FFFFFF80                  LevSel_HoldTimer				equ	$FFFFFF80
00000000                            ;Level_select_zone				equ	$FFFFFF81
00000000 =FFFFFF84                  Sound_test_sound				equ	$FFFFFF84
00000000 =FFFFFF74                  Options_menu_box				equ	$FFFFFF74
00000000 =FFFFFF90                  Results_Screen_2P				equ	$FFFFFF90
00000000 =FFFFFF92                  SS_Total_Won					equ	$FFFFFF92
00000000 =FFFFFF96                  Monitors_Broken					equ	$FFFFFF96
00000000 =FFFFFF98                  Rings_Collected					equ	$FFFFFF98
00000000 =FFFFFFA8                  Results_Data_2P					equ	$FFFFFFA8
00000000 =FFFFFFA8                  EHZ_Results_2P					equ	$FFFFFFA8
00000000 =FFFFFFAE                  MCZ_Results_2P					equ	$FFFFFFAE
00000000 =FFFFFFB4                  CNZ_Results_2P					equ	$FFFFFFB4
00000000 =FFFFFFBA                  SS_Results_2P					equ	$FFFFFFBA
00000000 =FFFFFFD0                  Level_select_flag				equ	$FFFFFFD0
00000000 =FFFFFFD1                  Slow_Motion_Flag				equ	$FFFFFFD1
00000000 =FFFFFFD4                  Correct_cheat_entries			equ	$FFFFFFD4 
00000000 =FFFFFFD6                  Correct_cheat_entries_2 		equ	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFDA                  Debug_Mode_Flag					equ	$FFFFFFDA
00000000 =FFFFFFF8                  Graphics_Flags					equ	$FFFFFFF8
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            	include	'#macros\equates.asm'
00000000                            
00000000                            ; Variaveis para selecionar qual letra dos Title Cards devem ser carregadas para
00000000                            ; a VRAM
00000000 =00000004                  TC_A                    equ  $0004
00000000 =00000404                  TC_B                    equ  $0404
00000000 =00000804                  TC_C                    equ  $0804
00000000 =00000C04                  TC_D                    equ  $0C04
00000000 =00001004                  TC_F                    equ  $1004
00000000 =00001404                  TC_G                    equ  $1404
00000000 =00001804                  TC_H                    equ  $1804
00000000 =00001C02                  TC_I                    equ  $1C02
00000000 =00001E04                  TC_J                    equ  $1E04
00000000 =00002204                  TC_K                    equ  $2204
00000000 =00002604                  TC_L                    equ  $2604
00000000 =00002A06                  TC_M                    equ  $2A06
00000000 =00003004                  TC_P                    equ  $3004
00000000 =00003404                  TC_Q                    equ  $3404
00000000 =00003804                  TC_R                    equ  $3804
00000000 =00003C04                  TC_S                    equ  $3C04
00000000 =00004004                  TC_T                    equ  $4004
00000000 =00004404                  TC_U                    equ  $4404
00000000 =00004804                  TC_V                    equ  $4804
00000000 =00004C06                  TC_W                    equ  $4C06
00000000 =00005204                  TC_X                    equ  $5204
00000000 =00005604                  TC_Y                    equ  $5604  
00000000 =00005A02                  TCpt                    equ  $5A02   ; "." 
00000000 =0000FFFF                  TC_Break                equ  $FFFF
00000000                            
00000000                            
00000000 =00000080                  Start	= $80
00000000 =00000070                  ABC	= $70
00000000 =00000040                  A	= $40
00000000 =00000020                  C	= $20
00000000 =00000010                  B	= $10
00000000 =00000008                  Right	= $08
00000000 =00000004                  Left	= $04
00000000 =00000002                  Down	= $02
00000000 =00000001                  Up	= $01
00000000 =000000CD                  Option_Select_Sfx equ $CD 
00000000                            
00000000                            
00000000 =FFFF8000                  Level_Layout 			equ $FFFF8000
00000000 =FFFF8080                  Level_BG_Layout 		equ $FFFF8080
00000000 =FFFF9000                  Block_Table 			equ $FFFF9000
00000000 =FFFFF796                  Collision_addr  		equ $FFFFF796
00000000 =FFFFFE10                  Zone_Id					equ $FFFFFE10	;	Check wich Zone should be activated now
00000000 =FFFFFE11                  Act_Id					equ $FFFFFE11	;	Check wich Act should be activated now (Act 1, Act 2, Act 3 or Act 4)
00000000 =FFFFFF88                  Game_Mode_Ram			equ $FFFFFF88	;	Game Mode/Difficulty (Original, Harder or Expert)
00000000 =FFFFFFB0                  PlaylistType			equ	$FFFFFFB0	;	Fixed Playlist Type (A, B or C)
00000000 =FFFFFF76                  Player_option			equ $FFFFFF76	;	Who you choose on Options? (0-> Sonic, 1-> Tails, 2-> Knuckles)
00000000 =FFFFFFAB                  Current_Character		equ $FFFFFFAB	;	0 -> Sonic, 1 -> Tails, 2 -> Knuckles
00000000 =FFFFFFF6                  Knuckles_Gliding_Flag	equ $FFFFFFF6	;	Address to store Knuckles Gliding information
00000000 =FFFFFFF7                  Unknown_Flag			equ $FFFFFFF7	;	Unknown Flag used on some climb functions on the Knuckles code
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00FFF000                  Sound_Driver_RAM equ $FFF000
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start		equ $FFFF0000 
00000000 =FFFF0000                  Metablock_Table		equ $FFFF0000 
00000000 =FFFF8000                  Level_Layout			equ $FFFF8000 
00000000 =FFFF9000                  Block_Table			equ $FFFF9000 
00000000 =FFFFAA00                  Decomp_Buffer			equ $FFFFAA00 
00000000 =FFFFAC00                  Sprite_Table_Input 		equ $FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFD000                  Object_RAM			equ $FFFFD000 ; through $FFFFD5FF
00000000 =FFFFD040                  Sidekick			equ $FFFFD040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails			equ $FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD1C0                  Sonic_Dust			equ $FFFFD1C0 
00000000 =FFFFD140                  Tails_Dust			equ $FFFFD140 
00000000                            
00000000 =FFFFD000                  PNT_Buffer			equ $FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision		equ $FFFFD600 
00000000 =FFFFD700                  Horiz_Scroll_Buf_2		equ $FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision		equ $FFFFD900 
00000000 =FFFFDD00                  Sprite_Table_2		equ $FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFCC00                  Horiz_Scroll_Buf		equ $FFFFCC00 
00000000 =FFFFCA00                  Sonic_Stat_Record_Buf		equ $FFFFCA00
00000000 =FFFFCB00                  Sonic_Pos_Record_Buf		equ $FFFFCB00
00000000 =FFFFE600                  Tails_Pos_Record_Buf		equ $FFFFE600
00000000 =FFFFCE00                  Ring_Positions		equ $FFFFCE00
00000000 =FFFFF700                  Camera_RAM			equ $FFFFF700
00000000                            ;Camera_X_pos			equ $FFFFEE00
00000000                            ;Camera_Y_pos			equ $FFFFEE04
00000000 =FFFFE726                  Camera_Max_Y_pos		equ $FFFFE726
00000000 =FFFFF728                  Camera_Min_X_pos		equ $FFFFF728
00000000 =FFFFF72A                  Camera_Max_X_pos		equ $FFFFF72A
00000000 =FFFFF72C                  Camera_Min_Y_pos		equ $FFFFF72C
00000000 =FFFFF72E                  Camera_Max_Y_pos_now		equ $FFFFF72E ; was "Camera_max_scroll_spd"...
00000000 =FFFFF7A8                  Sonic_Pos_Record_Index	equ $FFFFF7A8 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFF736                  Tails_Pos_Record_Index	equ $FFFFF736 ; into Tails_Pos_Record_Buf
00000000 =FFFFF73E                  Camera_Y_pos_bias		equ $FFFFF73E ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P		equ $FFFFEEDA ; for Tails
00000000 =FFFFF742                  Dynamic_Resize_Routine	equ $FFFFF742
00000000 =FFFFEEF8                  Tails_Min_X_pos		equ $FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos		equ $FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos		equ $FFFFEEFE
00000000                            
00000000 =FFFFFA00                  Underwater_palette_2 		equ $FFFFFA00 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFFA80                  Underwater_palette 		equ $FFFFFA80 ; main palette for underwater parts of the screen
00000000 =FFFFFAE0                  Underwater_palette_line4 	equ $FFFFFAE0
00000000                            
00000000 =FFFFF600                  Game_Mode			equ $FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical		equ $FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical		equ $FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical		equ $FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1			equ $FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held			equ $FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press			equ $FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2			equ $FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held			equ $FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press			equ $FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left		equ $FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF624                  Hint_counter_reserve		equ $FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time			equ $FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed			equ $FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused			equ $FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk		equ $FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1			equ $FFFFF646
00000000 =FFFFF648                  Water_Level_2			equ $FFFFF648
00000000 =FFFFF64A                  Water_Level_3			equ $FFFFF64A
00000000 =FFFFF64D                  Water_routine			equ $FFFFF64D
00000000 =FFFFF64E                  Water_move			equ $FFFFF64E
00000000 =FFFFF64C                  Water_on			equ $FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level		equ $FFFFF650
00000000 =FFFFF652                  Water_change_speed		equ $FFFFF652
00000000 =FFFFF65E                  Palette_frame_count		equ $FFFFF65E
00000000 =FFFFF65F                  Super_Sonic_palette		equ $FFFFF65F
00000000 =FFFFF66A                  Ctrl_2_Logical		equ $FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical		equ $FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical		equ $FFFFF66B ; 1 byte
00000000 =FFFFC903                  Sonic_Look_delay_counter 	equ $FFFFC903 ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter 	equ $FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count	equ $FFFFF670
00000000 =FFFFF680                  Plc_Buffer			equ $FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables		equ $FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter		equ $FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter		equ $FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine	equ $FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x		equ $FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y		equ $FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID		equ $FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag		equ $FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine		equ $FFFFF71A
00000000 =FFFFF745                  Dirty_flag			equ $FFFFF745 ; if whole screen needs to redraw
00000000 =FFFFFFA4                  Transforming_Flag equ	$FFFFFFA4
00000000 =FFFFF760                  Sonic_top_speed		equ $FFFFF760
00000000 =FFFFF762                  Sonic_acceleration		equ $FFFFF762
00000000 =FFFFF764                  Sonic_deceleration		equ $FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine		equ $FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0		equ $FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1		equ $FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2		equ $FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3		equ $FFFFF77C
00000000 =FFFFF790                  Demo_button_index		equ $FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter		equ $FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P		equ $FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P		equ $FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr		equ $FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID		equ $FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked		equ $FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter		equ $FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1		equ $FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2		equ $FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score		equ $FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse		equ $FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table			equ $FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette		equ $FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2		equ $FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3		equ $FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4		equ $FFFFFB60
00000000 =FFFFFB80                  Second_palette		equ $FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2		equ $FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3		equ $FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4		equ $FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table		equ $FFFFFC00
00000000 =FFFFFE00                  System_Stack			equ $FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag 		equ $FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames			equ $FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object			equ $FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode		equ $FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct		equ $FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone			equ $FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act			equ $FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count			equ $FFFFFE12 
00000000 =FFFFFE16                  Current_Special_Stage		equ $FFFFFE16
00000000 =FFFFFE18                  Continue_count		equ $FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag		equ $FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag		equ $FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags		equ $FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives		equ $FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings		equ $FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer		equ $FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score		equ $FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count			equ $FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer				equ $FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word		equ $FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute			equ $FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second			equ $FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond		equ $FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score				equ $FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit		equ $FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit	equ $FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos			equ $FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos			equ $FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count		equ $FFFFFE36
00000000 =FFFFFE38                  Saved_Timer			equ $FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile		equ $FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer			equ $FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos		equ $FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos		equ $FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level		equ $FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine		equ $FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move		equ $FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags	equ $FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P	equ $FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos	equ $FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine	equ $FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter		equ $FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame		equ $FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter		equ $FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame		equ $FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter		equ $FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame		equ $FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter	equ $FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame		equ $FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum		equ $FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed		equ $FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration		equ $FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration		equ $FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P			equ $FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P		equ $FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P		equ $FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P		equ $FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P		equ $FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P		equ $FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P		equ $FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P			equ $FFFFFED0
00000000 =FFFFFED2                  Timer_2P			equ $FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P		equ $FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P		equ $FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P		equ $FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P		equ $FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P			equ $FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P		equ $FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P	equ $FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P		equ $FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P		equ $FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P		equ $FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P		equ $FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P		equ $FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P		equ $FFFFFEEE
00000000                            
00000000 =FFFFFF74                  Two_player_items		equ $FFFFFF74
00000000 =FFFFFF82                  Level_select_zone		equ $FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound		equ $FFFFFF84
00000000 =FFFFFF86                  Title_screen_option		equ $FFFFFF86
00000000 =FFFFFF8A                  Two_player_mode_copy		equ $FFFFFF8A
00000000 =FFFFFF90                  Level_Music			equ $FFFFFF90
00000000 =FFFFFFB0                  Got_Emerald			equ $FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count			equ $FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array		equ $FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score		equ $FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P	equ $FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost		equ $FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD4                  Correct_cheat_entries		equ $FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2	equ $FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFF88                  Two_player_mode		equ $FFFFFF88 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =00FFF003                  Music_Pause   = Sound_Driver_RAM+$003
00000000 =00FFF00A                  Music_to_play = Sound_Driver_RAM+$00A
00000000 =00FFF00B                  SFX_to_play   = Sound_Driver_RAM+$00B ; normal
00000000 =00FFF00C                  SFX_to_play_2 = Sound_Driver_RAM+$00C ; alternating stereo
00000000 =00FFF00C                  Music_to_play_2	= Sound_Driver_RAM+$00C ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag		equ $FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number			equ $FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags		equ $FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc		equ $FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000
00000000 =00A14000                  Security_Addr =			$A14000
00000000                            	include	'#macros\asm68kfix.asm'
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	endm
00000000                            	include	'#macros\misc.asm'
00000000 =FFFFFFBC                  Water_Flag                    equ       $FFFFFFBC  ; if the level has water
00000000                            ; Extracted from S1hackingStudio by VladikComper
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to set VRAM write access
00000000                            ; Arguments:	1 - raw VRAM offset
00000000                            ;		2 - register to write access bitfield in (Optional)
00000000                            ; -------------------------------------------------------------
00000000                            vram	macro
00000000                            	if (narg=1)
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),($C00004).l
00000000                            	else
00000000                            		move.l	#($40000000+((\1&$3FFF)<<16)+((\1&$C000)>>14)),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm
00000000                            	endm
00000000                            	include	'(Mercury) Fixes.asm'
00000000                            ; ELECTIVE MODS
00000000                            ; ================================================================================
00000000                            
00000000 =00000000                  Revision: = 0
00000000                            ; Name: Wall Jump
00000000                            ; Function: Gives Sonic a Wall Jump ability
00000000                            ; Date: 2011-02-02 (Feb), 2011-02-03 (Feb), 2011-02-05 (Feb)
00000000                            ; Depends On: Constants, Macros
00000000 =00000001                  WallJumpActive: = 1
00000000                            
00000000                            ; Name: Move Lamppost VRAM
00000000                            ; Function: Moves the Lamppost tiles in VRAM to allow for things like dust or the Insta-Shield to fit instead.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  MoveLamppostVRAM: = 1
00000000                            
00000000                            ; Name: UseDMAQueue
00000000                            ; Function: Uses a DMA queue to load Sonic's art, freeing RAM and allowing Spin Dash dust or the Insta-Shield to function.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  UseDMAQueue: = 1
00000000                            
00000000                            ; Name: Spin Dash
00000000                            ; Function: Enables the Sonic 2 Spin Dash
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by (various)
00000000 =00000001                  SpinDashActive: = 1
00000000 =00000001                  	SpinDashDustActive: = SpinDashActive*MoveLamppostVRAM*UseDMAQueue*1	; activates animated dust sprite when Spin Dashing
00000000 =00000001                  	SpinDashSFXActive: = SpinDashActive*1	; activates the correct Spin Dash SFX instead of the roll sound
00000000 =00000001                  	SpinDashCancel: = SpinDashActive*1	; makes Sonic stop Spin Dashing if the A/B/C button is let up for long enough
00000000 =00000001                  	SpinDashNoRevDown: = SpinDashActive*1	; makes the Spin Dash not rev down as long as A/B/C button is held down
00000000 =00000001                  	SpinDashCameraLag: = SpinDashActive*1	; makes the camera lag behind when Sonic launches
00000000                            ; Notes: You should also apply the following fixes to avoid bugs: Walking In Air Fix, Pushing While Walking Fix, High Speed Camera Fix, Caterkiller Fix
00000000                            
00000000                            ; Name: Dash CD
00000000                            ; Function: Enables the Sonic CD Dash (aka Super Peel Out).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  DashCDActive: = 1
00000000                            
00000000                            ; Name: Balance CD
00000000                            ; Function: Uses the Sonic CD balancing sprites (forward and back) instead of Sonic 1's.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  BalanceCDActive: = 1
00000000                            
00000000                            ; Name: Insta-Shield
00000000                            ; Function: Enables the Sonic 3/K Insta-Shield.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000000                  InstaShieldActive: = 0
00000000                            ; Notes: Not yet functional
00000000                            
00000000                            ; Name: Simple Cheat Entry
00000000                            ; Function: Enters Level Select, Debug Mode, Slow Mo, and extended Sound Test cheats automatically upon U,D,L,R,A,Start
00000000                            ; Date: 2011-02-05 (Feb)
00000000 =00000001                  SimpleCheatEntry: = 1
00000000                            
00000000                            ; Name: Monitor Art Optimise
00000000                            ; Function: Shuffles the Monitor Art in order to free 8 free tiles (useful for modding HUD)
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  MonitorArtOptimise: = 1
00000000                            
00000000                            ; Name: HUD Centiseconds
00000000                            ; Function: Adds Sonic CD-style centiseconds to the HUD
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-07 (Feb), 2011-02-09 (Feb)
00000000 =00000001                  HUDCentiseconds: = MonitorArtOptimise*1
00000000                            
00000000                            ; Name: Chunks In ROM
00000000                            ; Function: Loads Chunks (256x256) directly from ROM, freeing a huge amount of RAM ($0000-$A3FF)
00000000                            ; Date: 2011-02-05 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  ChunksInROM: = 1
00000000                            
00000000                            ; Name: Blocks In ROM
00000000                            ; Function: Similar to "Chunks In ROM" only with Blocks (16x16), freeing a huge amount of RAM ($B000-$C7FF)
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  BlocksInROM: = 1
00000000                            
00000000                            ; Name: HUD Has Leading Zeroes
00000000                            ; Function: Gives Rings, Score and Lives leading zeroes (i.e. 001 as opposed to 1)
00000000                            ; Date: 2011-02-09 (Feb)
00000000                            ; Thanks to: Markey Jester
00000000 =00000000                  HUDHasLeadingZeroes: = 0
00000000                            
00000000                            ; Name: TIME/RINGS Flash Fix
00000000                            ; Function: Makes TIME and RINGS words in the HUD flash under the correct circumstances
00000000                            ; Date: 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Thanks To: 
00000000 =00000001                  TimeRingsFlashFix: = 1
00000000 =00000001                  	TimeRingsFlashFixNotRed: = TimeRingsFlashFix*1	; when true, "TIME" and "RINGS" will flash on and off instead of flashing red. Useful when changing palettes.
00000000                            
00000000                            ; Name: Dynamic Special Stage Walls 
00000000                            ; Function: Dynamically loads the wall art in the Special Stages to free VRAM (for things like the HUD)
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb)
00000000 =00000000                  DynamicSpecialStageWalls: = 0
00000000                            
00000000                            ; Name: HUD In Special Stage
00000000                            ; Function: Adds HUD to Special Stage. Also useful for adding a decreasing time limit to Special Stage
00000000                            ; Date: 2011-02-05 (Feb), 2011-02-06 (Feb), 2011-02-07 (Feb), 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls
00000000 =00000000                  HUDInSpecialStage: = DynamicSpecialStageWalls*1
00000000 =00000000                  	HUDInSpecialStageType: = 0	; 0=normal; 1=score not shown; 2=score & time not shown; 3=rings only
00000000                            	
00000000                            ; Name: Time Limit in Special Stage
00000000                            ; Function: If HUDInSpecialStage is active, the Special Stage has a working 9:59 time limit anyway, but this makes it a decreasing one with custom values
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Depends On: Dynamic Special Stage Walls, HUD In Special Stage, Time Rings Flash Fix
00000000 =00000000                  TimeLimitInSpecialStage: = HUDInSpecialStage*TimeRingsFlashFix*1
00000000 =00001E00                  	TimeLimitInSpecialStagePinch: = $00001E00	; "pinch" threshold that time must reach in order to trigger "TIME" to flash. Format: $000MSSCC
00000000 =00010000                  	TimeLimitInSpecialStageStart: = $00010000	; time on the clock to start with when Special Stage is entered. Format: $000MSSCC
00000000                            		;IMPORTANT! TimeLimitInSpecialStageStart must always end in 00,
00000000                            
00000000                            ; Name: Title Screen Palette Fix
00000000                            ; Function: Uses the proper GHZ palette on the Title Screen
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  TitleScreenPaletteFix: = 1
00000000                            
00000000                            ; Name: Special Stage Jump Fix
00000000                            ; Function: Gives Sonic variable jump height in the Special Stage to be more fair and consistent with the rest of the game
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000001                  SpecialStageJumpFix: = 1
00000000                            
00000000                            ; Name: Warm Palette Mod
00000000                            ; Function: Gives the game a Chaotix-like shine that helps mask the palette changes and update the look
00000000                            ; Date: 2011-02-07 (Feb)
00000000 =00000000                  WarmPaletteMod: = 0
00000000                            ; Notes: Not yet functional.
00000000                            
00000000                            ; Name: Shield Art Mod
00000000                            ; Function: Attempts to improve the look of the shield.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ShieldArtMod: = 1	; set to 1 to simply make the mirroring less obvious; set to 2 to make it solid, smooth and more like Chaotix's shield art.
00000000                            	; It's not recommended to set this to 2 unless Warm Palette Mod is on.
00000000                            
00000000                            ; Name: Sonic CD Roll Jump
00000000                            ; Function: Makes the Roll Jump work like Sonic CD (Sonic can still control his horizontal trajectory). Frees up a status bit for Sonic.
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  SonicCDRollJump: = 1
00000000                            
00000000                            ; Name: Rebound Mod
00000000                            ; Function: Makes rebounding from enemies/monitors after rolling off a cliff onto them function the same as if they were jumped on - the rebound is cut short if the jump button is released.
00000000                            ; Date: 2011-02-12 (Feb)
00000000 =00000001                  ReboundMod: = 1
00000000                            
00000000                            ; Name: Enable Press Start Button Message
00000000                            ; Function: Makes the "Press Start Button" message appear correctly on the Title Screen
00000000                            ; Date: 2011-02-09 (Feb)
00000000 =00000001                  EnablePSBMessage: = 1
00000000                            
00000000                            ; Name: Limit LZ Block Rising Speed
00000000                            ; Function: Limits the rising speed of blocks in LZ so that Sonic can jump off them more comfortably.
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  LimitLZBlockRisingSpeed: = 1
00000000                            
00000000                            ; Name: Speed Up Score Tally
00000000                            ; Function: Allows the player to hold a button to speed up the score tally
00000000                            ; Date: 2011-02-10 (Feb)
00000000 =00000001                  SpeedUpScoreTally: = 1
00000000                            
00000000                            ; Name: Spike SFX Fix
00000000                            ; Function: Makes the proper sound effect play when Sonic is harmed by Spikes/LZ Harpoons.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  SpikeSFXFix: = 1
00000000                            
00000000                            ; Name: Rolling Turn Around Fix
00000000                            ; Function: Prevents Sonic from turning around while rolling (which without this fix could be abused to roll in place forever).
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  RollingTurnAroundFix: = 1
00000000                            
00000000                            ; Name: Scroll Delay
00000000                            ; Function: Adds a delay before the screen begins to scroll when looking up and down. This is essential if adding the Spin Dash or Super Peel Out.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by shobiz
00000000 =00000001                  ScrollDelay: = 1
00000000 =00000078                  	ScrollDelayTime: = 120	; number of steps before the screen starts to scroll.
00000000                            	
00000000                            ; Name: Look Shift Fix
00000000                            ; Function: Fixing the looking up/down camera shift so that it stops at zone boundaries, preventing a delay when returning to the neutral position.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  LookShiftFix: = 1
00000000                            
00000000                            ; Name: Spike Fix
00000000                            ; Function: Prevents spikes from harming Sonic while he's flashing.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000 =00000001                  SpikeFix: = 1
00000000                            
00000000                            ; Name: Caterkiller Fix
00000000                            ; Function: Makes it safe to roll into the caterkiller from the front at high speeds without fear of being hurt some times and not others.
00000000                            ; Date: 2011-02-11 (Feb)
00000000 =00000001                  CaterkillerFix: = 1
00000000                            
00000000                            ; Name: Custom Demo Delay
00000000                            ; Function: Makes it possible to customise how long the Title Screen waits before going to a demo.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  CustomDemoDelay: = 1
00000000 =00000280                  	CustomDemoDelayTime: = $280	; delay until demo is played; default is $178; use -1 for never (will return to Sega Screen eventually, though).
00000000                            
00000000                            ; Name: Orbinaut Animation Tweak
00000000                            ; Function: Makes Orbinaut "notice" Sonic at a closer range so that it's more likely to happen onscreen, and "get angry" quicker.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  OrbinautAnimationTweak: = 1
00000000 =00000080                  	OrbinautAnimationTweakRange: = $80	; horizontal range in pixels at which Sonic is noticed by the Orbinaut
00000000 =00000008                  	OrbinautAnimationTweakSpeed: = $8	; animation speed of the Orbinaut's "getting angry" animation
00000000                            	
00000000                            ; Name: SLZ Orbinaut Behaviour Mod
00000000                            ; Function: Makes the SLZ Orbinauts beatable by giving them behaviour similar to Sonic 4's.
00000000                            ; Date: 2011-03-06 (Mar)
00000000 =00000001                  SLZOrbinautBehaviourMod: = 1
00000000                            	
00000000                            ; Name: Newtron Behaviour Tweak
00000000                            ; Function: Slightly alters the behaviour of Newtrons.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  NewtronBehaviourTweak: = 3
00000000                            	; set to 1 to make red-blue Newtrons vulnerable after they finish appearing but before they land
00000000                            	; set to 2 to make yellow-green Newtrons reappear once Sonic leaves the vicinity and returns
00000000                            	; set to 3 for both of the above
00000000                            
00000000                            ; Name: Lost Rings Flash
00000000                            ; Function: Makes Lost Rings flash before they disappear.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  LostRingsFlash: = 1
00000000 =00000050                  	LostRingsFlashTime: = 80	; number of steps of life the rings need to have left before they start to flash.
00000000                            	
00000000                            ; Name: FZ Boss Invuln Mod
00000000                            ; Function: Allows you to customise the number of steps the FZ Boss's invulnerability lasts.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000001                  FZBossInvulnMod: = 1
00000000 =00000020                  	FZBossInvulnModTime: = $20	; default is $64.
00000000                            
00000000                            ; Name: Disable Speed Cap
00000000                            ; Function: Disables the speed cap in the air and on the ground.
00000000                            ; Date: 2011-03-02 (Mar)
00000000 =00000003                  DisableSpeedCap: = 3
00000000                            	; set to 1 to remove ground speed cap
00000000                            	; set to 2 to remove air speed cap
00000000                            	; set to 3 for both of the above
00000000                            	
00000000                            ; Name: Giant Ring Art Loads With End Sign
00000000                            ; Function: Makes the Giant Ring art load when End Sign's does, avoiding some issues.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: MZ2 Layout Fix
00000000 =00000001                  GiantRingArtLoadsWithEndSign: = 1
00000000                            
00000000                            ; Name: Special Stage Index Increases Only If Won
00000000                            ; Function: Makes the Special Stage index not increase when you fail the stage, allowing you to practise the stages more easily because next time you enter one it'll be the same one you failed last time.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStageIndexIncreasesOnlyIfWon: = 1
00000000                            
00000000                            ; Name: Special Stages Still Appear With All Emeralds
00000000                            ; Function: Makes the Special Stages still accessible even once all emeralds are collected. Of course more emeralds aren't possible to be collected; they are replaced with Continues, making use of the unused 1-up item in the Special Stages.
00000000                            ; Date: 2011-03-09 (Mar)
00000000 =00000001                  SpecialStagesStillAppearWithAllEmeralds: = 1
00000000                            	
00000000                            ; Name: Giant Rings In SBZ
00000000                            ; Function: Adds Giant Rings (and therefore extra shots at the Special Stage) to SBZ1 and SBZ2.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Modifies: levels\sbz2.bin, objpos\sbz1.bin, objpos\sbz1 (JP1).bin, objpos\sbz2.bin
00000000 =00000001                  GiantRingsInSBZ: = GiantRingArtLoadsWithEndSign*1
00000000 =000004DA                  	GiantRingsInSBZArtLoc1: = $4DA	; originally $400, this is where the Giant Ring art is loaded into VRAM
00000000 =00000568                  	GiantRingsInSBZArtLoc2: = $568	; originally $518, this is where the SBZ Crumbling Floor art is loaded into VRAM
00000000 =000003A0                  	GiantRingsInSBZArtLoc3: = $3A0	; originally $400, this is where the SBZ Eggman art is loaded into VRAM
00000000 =000004C0                  	GiantRingsInSBZArtLoc4: = $4C0	; originally $4A0, this is where the SBZ Eggman Switch art is loaded into VRAM
00000000                            
00000000                            ; Name: Padding Active
00000000                            ; Function: Pads the ROM with a value until it reaches a certain number of megs
00000000                            ; Date: 2011-02-27 (Feb)
00000000 =00000001                  PaddingActive: = 1
00000000 =000000FF                  	PaddingValue: = $FF
00000000 =00000001                  	PaddingMegs: = 1
00000000                            	
00000000                            ; Name: Quarterloop Fix
00000000                            ; Function: Makes Sonic behave better when running back down quarterloops by using Sonic 2's code.
00000000                            ; Date: 2011-03-15 (Mar)
00000000 =00000001                  QuarterloopFix: = 1
00000000                            
00000000                            ; Name: Magnetic Rings
00000000                            ; Function: Gives Rings ability to be attracted to Sonic while he has a Shield.
00000000                            ; Date: 2011-03-24 (Mar)
00000000 =00000001                  MagneticRings: = 1
00000000                            
00000000                            ; Name:  Rings Bounce At Zone Bottom
00000000                            ; Function: Rings will bounce off of the bottom boundary of the Zone, making SYZ boss more fair.
00000000                            ; Date: 2011-04-19 (Apr)
00000000 =00000001                  RingsBounceAtZoneBottom: = 1
00000000                            
00000000                            ; PERMANENT MODS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Name: Continue Sonic Art Fix
00000000                            ; Function: Fixes some incorrect pixels in Sonic's Continue screen sprite.
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: artnem\Continue Screen Sonic.bin
00000000                            
00000000                            ; Name: GHZ3 Wall Solidity
00000000                            ; Function: Fixes a wall object in GHZ3 after the Lamppost that was set to be solid. (It was, of course, solid for a reason: to fix a bug with the platform right next to it. However, the platform could be moved to the right by 16 pixels to solve the problem, too, so that's what I did.)
00000000                            ; Date: 2011-02-02 (Feb)
00000000                            ; Modifies: objpos\GHZ3 (JP1).bin
00000000                            
00000000                            ; Name: Special Stage Cloud Fix
00000000                            ; Function: Fixed the base special stage palette so that the clouds wouldn't flicker when it first fades in, plus altered the fading palette to not have ugly clashing purples
00000000                            ; Date: 2011-02-06 (Feb)
00000000                            ; Modifies: palette\Cycle - Special Stage 1.bin, palette\Special Stage.bin
00000000                            
00000000                            ; Name: Roller Art Fix
00000000                            ; Function: Fixes garbled Roller tiles in SYZ
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: inc\Pattern Load Cues.bin
00000000                            
00000000                            ; Name: Sonic Shoe Stripe Fix
00000000                            ; Function: Adds stripe to Sonic's shoe for the sprites it's missing in (using Sonic 2's tiles)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artunc\Sonic.bin
00000000                            
00000000                            ; Name: Sonic Roll Frame Fix
00000000                            ; Function: Changes Sonic's frame immediately when he rolls up in order to fix flickering while in S-Tunnels (and potentially elsewhere)
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: _incObj\Sonic Roll.asm
00000000                            
00000000                            ; Name: Hedgehog E Fix
00000000                            ; Function: Very minor pixel edit to "THE HEDGEHOG" on Title Screen to fix the inconsistent E's
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: artnem\Title Screen Foreground.bin
00000000                            
00000000                            ; Name: GHZ2 Spring Fix
00000000                            ; Function: Fixes a backward Spring in GHZ2
00000000                            ; Date: 2011-02-07 (Feb)
00000000                            ; Modifies: objpos\GHZ2.bin
00000000                            
00000000                            ; Name: Top Boundary Fix
00000000                            ; Function: Prevents Sonic from dying when he passes the top boundary while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Hurt Splash Fix
00000000                            ; Function: Fixes the missing splash when Sonic hits the water surface while hurt
00000000                            ; Date: 2011-02-08 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Pushing While Walking Fix
00000000                            ; Function: Fixes the bug that makes Sonic use his pushing animation while walking away from walls
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic Animate.asm
00000000                            
00000000                            ; Name: Walking In Air Fix
00000000                            ; Function: Fixes the bug that makes Sonic incorrectly use his walking animation when near solids.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\26 Monitor.asm, sonic.asm
00000000                            
00000000                            ; Name: Screen Scroll While Rolling Fix
00000000                            ; Function: Fixes the bug that prevents the screen from scrolling back to neutral while Sonic is rolling.
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\Sonic RollSpeed.asm
00000000                            
00000000                            ; Name: Ducking Size Fix
00000000                            ; Function: Makes Sonic's hitbox the correct size in regards to solids when he is ducking
00000000                            ; Date: 2011-02-10 (Feb)
00000000                            ; Modifies: _incObj\sub SolidObject.asm, _incObj\sub ReactToItem.asm, sonic.asm
00000000                            
00000000                            ; Name: Exit DLE In Special Stage And Title
00000000                            ; Function: Prevents the DLE from running while on the Title Screen and in the Special Stage, preventing serious problems.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Clear Control Lock When Jump
00000000                            ; Function: Clears control lock when Sonic jumps, preventing it from lingering when he lands again and causing a frustrating lag in input.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic Jump.asm
00000000                            
00000000                            ; Name: Debug Improvements
00000000                            ; Function: Makes a slew of improvements to Debug Mode. Sonic's speed and "atop object" flag are cleared when turning into an item, plus rings/monitors can be placed even after collecting one.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Debug Mode.asm
00000000                            
00000000                            ; Name: SBZ3 Obj Fixes
00000000                            ; Function: Fixes the missing platform from SBZ3 and also prevents Sonic from falling through the floor near beginning of the level.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: objpos\SBZ3.bin
00000000                            
00000000                            ; Name: SBZ3 Button PLC Fix
00000000                            ; Function: Trades the order in which the harpoon and button load their art in order to prevent garbled button art at SBZ3 start.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\Pattern Load Cues.asm
00000000                            
00000000                            ; Name: Demo Playback Fix
00000000                            ; Function: Fixes an issue that makes demo playback interpret the button being held for more than one frame as continual new presses of the button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _inc\MoveSonicInDemo.asm
00000000                            ; Thanks To: FraGag
00000000                            
00000000                            ; Name: Hidden Bonus Points Fix
00000000                            ; Function: Makes the 100pt Hidden Bonuses actually give Sonic 100pts.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\7D Hidden Bonuses.asm
00000000                            ; Thanks To: Sonic Retro How-To by 1337Rooster
00000000                            
00000000                            ; Name: Speed Shoes Work Underwater
00000000                            ; Function: Makes Speed Shoes work correctly when underwater. It's now safe to place them in LZ/SBZ3.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic Display.asm, _incObj\Sonic Water.asm
00000000                            
00000000                            ; Name: Sega Sound Fix
00000000                            ; Function: Fixes the Sega sound at game start so that it won't garble when code is added to the ROM. Also allows the player to skip it with the Start Button.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            ; Thanks To: Sonic Retro How-To by Puto
00000000                            
00000000                            ; Name: Remove Speed Shoes At Signpost Fix
00000000                            ; Function: Removes Speed Shoes when Sonic passes the Signpost so the Level Clear jingle won't play sped up.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\3A Got Through Card.asm
00000000                            
00000000                            ; Name: Game/Time Over Timing Fix
00000000                            ; Function: Makes the Game/Time Over message display a consistent amount of time after Sonic dies, rather than waiting for him fall past the top/bottom of the entire zone.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic (part 2).asm
00000000                            
00000000                            ; Name: Game Over When Drowning Fix
00000000                            ; Function: Fixes a bug that caused the Title Screen background to stop scrolling after Sonic gets a Game Over from drowning.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: sonic.asm
00000000                            
00000000                            ; Name: High Speed Camera Fix
00000000                            ; Function: Fixes problems with camera not catching up at high speeds, as well preventing Sonic from dying in these situations (notably in the S-tunnels in GHZ1 and GHZ3).
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\Sonic LevelBound.asm, _inc\DynamicLevelEvents.asm
00000000                            
00000000                            ; Name: Shield/Invincibility Positioning Fix
00000000                            ; Function: Correctly positions the Shield/Invincibility sprites when balancing on ledges.
00000000                            ; Date: 2011-02-11 (Feb)
00000000                            ; Modifies: _incObj\38 Shield and Invincibility.asm
00000000                            
00000000                            ; Name: Eggman Art Fix
00000000                            ; Function: Fixes Eggman's mappings so that his moustache isn't cut off.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _maps\Eggman.asm
00000000                            
00000000                            ; Name: Lives Over/Underflow Fix
00000000                            ; Function: Prevents life count from over-/underflowing when 1 is added/subtracted.
00000000                            ; Date: 2011-02-12 (Feb)
00000000                            ; Modifies: _incObj\09 Sonic in Special Stage.asm, _incObj\25 & 37 Rings.asm, _incObj\2E Monitor Content Power-Up.asm, _incObj\Sonic (part 2).asm, sonic.asm
00000000                            
00000000                            ; Name: SLZ Solidity Fix
00000000                            ; Function: Fixes goofy solidity in SLZ that allows Sonic to fall through the tops of some 256x256 metatiles.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SLZ.bin, map256_u\SLZ.bin
00000000                            
00000000                            ; Name: SLZ Staircase Fix
00000000                            ; Function: Fixes some staircases in SLZ2 to that they aren't 1 pixel higher than the ground, stopping Sonic short.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ2.bin
00000000                            
00000000                            ; Name: SLZ Pylons Fix
00000000                            ; Function: Removes the SLZ pylons from the object layout files and instead loads them manually when the zone starts. This allows them to appear even when respawning at a Lamppost.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: objpos\SLZ1.bin, objpos\SLZ2.bin, objpos\SLZ3.bin
00000000                            
00000000                            ; Name: FZ Boss Hitcount Fix
00000000                            ; Function: Prevents an underflow glitch when hitting Robotnik an extra time.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: _incObj\85 Boss - Final.asm
00000000                            
00000000                            ; Name: FZ Falling Fix
00000000                            ; Function: Prevents Sonic from falling off after defeating Robotnik by adding an invisible wall.
00000000                            ; Date: 2011-03-02 (Mar)
00000000                            ; Modifies: map256\SBZ.bin, map256\SBZ (JP1).bin, map256_u\SBZ.bin, map256_u\SBZ (JP1).bin, map16\SBZ.bin, map16_u\SBZ.bin, collide\SBZ.bin
00000000                            
00000000                            ; Name: MZ2 Layout Fix
00000000                            ; Function: Moves the End Sign further right so the level won't feel so truncated.
00000000                            ; Date: 2011-03-03 (Mar)
00000000                            ; Depends On: Exit DLE In Special Stage And Title
00000000                            ; Modifies: levels\mz2.bin, objpos\mz2.bin, misc\Level Size Array.bin
00000000                            
00000000                            ; Name: LZ After End Sign PLC Bugfix
00000000                            ; Function: Fixes bug that sometimes crashes the game if roll and look down after passing End Sign in LZ1 and LZ2
00000000                            ; Date: 2011-03-08 (Mar)
00000000                            ; Thanks To: Sonic Retro How-To by FraGag
00000000                            
00000000                            ; Name: Low End Signs Fix
00000000                            ; Function: Some End Signs would be a little too low. This fixes them.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: objpos\SYZ1.bin, objpos\LZ (JP1).bin, objpos\LZ1.bin, objpos\SBZ1 (JP1).bin, objpos\SBZ2.bin
00000000                            
00000000                            ; Name: Monitor Art Mod
00000000                            ; Function: Fixes Robotnik art and adds stripe to Speed Shoes.
00000000                            ; Date: 2011-03-15 (Mar)
00000000                            ; Modifies: artnem\Monitors.bin, artnem\(Mercury) Monitors (optimised).bin
00000000                            
00000000                            ; Name: GHZ Mountain Fix
00000000                            ; Function: Fixes a tile in the GHZ mountain background that's always bothered me - it makes it looks like there's hold in the biggest peaks.
00000000                            ; Date: 2011-04-19 (Apr)
00000000                            ; Modifies: map256\GHZ.bin, map256_U\GHZ.bin
00000000                            
00000000                            ; VARIABLES
00000000                            ; ================================================================================
00000000                            
00000000                            
00000000 =FFFFFEB0                  v_spindashsfx1:	= $FFFFFEB0
00000000 =FFFFFEB1                  v_spindashsfx2:	= v_spindashsfx1+1
00000000 =FFFFFEB2                  v_spindashsfx3:	= v_spindashsfx1+2
00000000                            	
00000000 =FFFFFEB3                  v_cameralag:	= $FFFFFEB3	; camera lag after launching Spin Dash (1 byte)
00000000                            
00000000 =FFFFFEBE                  v_scrolldelay:	= $FFFFFEBE	; scroll delay timer
00000000                            
00000000 =FFFFFE25                  v_centstep:	= $FFFFFE25	; value used to increment centiseconds
00000000                            
00000000                            ; CONSTANTS
00000000                            ; ================================================================================
00000000                            
00000000                            ; Sonic Status Bits
00000000 =00000000                  staFacing:	equ 0
00000000 =00000001                  staAir:		equ 1
00000000 =00000002                  staSpin:	equ 2
00000000 =00000003                  staOnObj:	equ 3
00000000 =00000004                  staRollJump:	equ 4
00000000 =00000005                  staPush:	equ 5
00000000 =00000006                  staWater:	equ 6
00000000                            
00000000 =00000001                  staDash:	equ 1
00000000                            
00000000 =00000000                  staSpinDash:	equ 0
00000000                            
00000000                            ; Sonic OST Bytes
00000000 =0000002C                  obWallJump:	equ $2C	; Wall Jump flag
00000000                            			; $2D reserved, as well
00000000 =00000030                  obInvuln:	equ $30	; Invulnerable (blinking) timer
00000000                            			; $31 reserved as well
00000000 =00000032                  obInvinc:	equ $32	; Invincibility timer
00000000                            			; $33 reserved as well
00000000 =00000034                  obShoes:	equ $34	; Speed Shoes timer
00000000                            			; $35 reserved as well
00000000                            			
00000000 =00000036                  obFrontAngle:	equ $36
00000000 =00000037                  obRearAngle:	equ $37
00000000                            			
00000000 =00000038                  obOnWheel:	equ $38	; on convex wheel flag
00000000                            
00000000 =00000039                  obStatus2:	equ $39	; status for abilities such as Spin Dash
00000000                            
00000000 =0000003A                  obRevSpeed:	equ $3A	; rev speed for Spin Dash or Dash
00000000                            			; $3B reserved as well
00000000                            
00000000 =0000003A                  obRestartTimer:	equ $3A ; level restart timer
00000000 =0000003C                  obJumping:	equ $3C	; jumping flag
00000000 =0000003D                  obPlatformID:	equ $3D	; ost slot of the object Sonic's on top of
00000000 =0000003E                  obLRLock:	equ $3E	; flag for preventing left and right input
00000000                            
00000000                            ; SFX
00000000                            ; ================================================================================
00000000                            
00000000 =000000D1                  sfx_SpinDash:	equ $D1
00000000                            
00000000                            ; MACROS
00000000                            ; ================================================================================
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Store a VRAM address in d0
00000000                            ; input: 16-bit VRAM address
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAMd0:	macro loc
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; SpriteMap macro usage
00000000                            ; l = left coordinate
00000000                            ; t = top coordinate
00000000                            ; w = width (in tiles)
00000000                            ; h = height (in tiles)
00000000                            ; x = horizontal mirroring 1=yes 0=no
00000000                            ; y = vertical mirroring 1=yes 0=no
00000000                            ; pri = priority 1=always on top
00000000                            ; pal = palette index (0...3)
00000000                            ; ind = starting tile index
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            SpriteMap:	macro	l, t, w, h, x, y, pri, pal, ind
00000000                            		dc.b	t
00000000                            		dc.b	(h-1)|((w-1)<<2)
00000000                            		dc.b	(pri<<7)|(pal<<5)|(y<<4)|(x<<3)|(ind>>8)
00000000                            		dc.b	ind&0xFF
00000000                            		dc.b	l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DynPLC macro usage
00000000                            ; n = number of tiles
00000000                            ; i = starting tile index
00000000                            ; o = offset (optional), i.e. Art_SonicSpinDash-Art_Sonic
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            DynPLC:		macro	n, i, o
00000000                            		if (narg=2)
00000000                            		dc.b	((n-1)<<4)|(i>>8)
00000000                            		dc.b	i&$FF
00000000                            		else
00000000                            		dc.b	((n-1)<<4)|((i+((o)>>5))>>8)
00000000                            		dc.b	(i+((o)>>5))&$FF
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            	include	'Variables.asm'
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	= $FFFFFC00		; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	= $FFFFFC40		; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_pcbuffer      = $FFFFFC44     	; stores PC on error (4 bytes)
00000000 =FFFFFC48                  v_errortype:	= $FFFFFC48		; error type
00000000                            
00000000                            
00000000 =00FF0000                  v_256x256:	=   $FF0000		; 256x256 tile mappings ($A400 bytes)
00000000                            
00000000                            
00000000 =FFFF9C00                  Kos_decomp_buffer =  $FFFF9C00  	; $1000 bytes	; each module in a KosM archive is decompressed here and then DMAed to VRAM
00000000                            
00000000 =FFFFAC00                  v_spritequeue:	= $FFFFAC00		; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:	= $FFFFB000		; 16x16 tile mappings
00000000 =FFFFC800                  v_sgfx_buffer:	= $FFFFC800		; buffered Sonic graphics ($18 cells) ($300 bytes)     +++(only $100 now)
00000000 =FFFFC8FC                  v_vdp_buffer_slot = $FFFFC8FC    	; (2 bytes)
00000000 =FFFFC900                  v_ngfx_buffer:	= $FFFFC900		; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFCB00                  v_tracksonic:	= $FFFFCB00		; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_scrolltable:	= $FFFFCC00		; scrolling table data ($400 bytes)
00000000                            		; $CF80 to $D000 seems to be unsused , it only needs $380 bytes to cover the whole screen
00000000                            
00000000 =FFFFD000                  v_objspace:	= $FFFFD000		; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	= v_objspace		; object variable space for Sonic ($40 bytes)
00000000                            ;v_shieldobj:    = v_objspace+$180
00000000                            ;v_dustobj:      = v_objspace+$1C0
00000000                            ;v_homingattackobj = v_objspace+$300
00000000 =FFFFD800                  v_lvlobjspace:	= $FFFFD800		; level object variable space ($1800 bytes)
00000000                            
00000000 =FFFFF000                  v_lvllayout:	= $FFFFF000		; layout is read from rom now, this contains pointers to the location of level layouts on ROM now 			; level and background layouts ($400 bytes)
00000000 =FFFFFC10                  v_screenposy_last   = $FFFFFC10   	; S3K Object manager
00000000 =FFFFFC14                  v_screenposx_coarse = $FFFFFC14   	;         ''
00000000 =FFFFFC18                  v_screenposy_coarse = $FFFFFC18   	;         ''
00000000 =FFFFC900                  v_objstate:	= $FFFFC900		; object state list ($300 bytes)
00000000                            
00000000 =FFFFCC00                  v_variables        = v_objstate+$300
00000000                            ;v_statspeed        = v_variables+$0     ;  speed stat
00000000                            ;v_stataccel        = v_variables+$1     ;  acceleration stat
00000000                            ;v_statjump         = v_variables+$2     ;  jump stat
00000000                            ;v_brokenmonitors1  = v_variables+$3     ;  which monitors are broken in current act, first byte
00000000                            ;v_brokenmonitors2  = v_variables+$4     ;  which monitors are broken in current act, second byte
00000000                            ;v_brokenmonitors3  = v_variables+$5     ;  which monitors are broken in current act, third byte
00000000                            ;v_actflags         = v_variables+$6     ;  flags in the current act to be saved to sram
00000000                            ;v_levselpage       = v_variables+$7     ;  which page of the pause menu is selected
00000000                            ;v_a_ability        = v_variables+$8     ; ability assigned to button A
00000000                            ;v_b_ability        = v_variables+$9     ; ability assigned to button B
00000000                            ;v_c_ability        = v_variables+$A     ; ability assigned to button C
00000000                            ;v_equippedshoes    = v_variables+$B
00000000                            ;v_equippeditem1    = v_variables+$C
00000000                            ;v_equippeditem2    = v_variables+$D
00000000                            ;v_equippedemerald  = v_variables+$E
00000000                            
00000000                            ;v_activeeffects = v_variables+$F		; number of currently active effects
00000000                            ;ItemEffects     = v_variables+$10      	; current active effects (byte)& empty byte & time left (word), 16 slots ($40 bytes)
00000000                            ; --------------------------------------------------------------------------
00000000                            ; Inventory items and abilities
00000000                            ;v_inventory     = v_variables+$40
00000000                            
00000000                            ;v_inv_items     = v_inventory+$0
00000000                            ;v_inv_shield    = v_inv_items+$0                                      
00000000                            ;v_inv_invinc    = v_inv_items+$1
00000000                            ;v_inv_shoes     = v_inv_items+$2
00000000                            ;v_inv_key       = v_inv_items+$3
00000000                            ;v_inv_test      = v_inv_items+$4
00000000                            ;v_inv_bomb      = v_inv_items+$5
00000000                            ;v_inv_eshield   = v_inv_items+$6     	; electric shields
00000000                            ;v_inv_fshield   = v_inv_items+$7     	; fire shields
00000000                            
00000000                            ;v_shoe_items    = v_inventory+$20
00000000                            ;v_shoe_default  = v_shoe_items+$0
00000000                            ;v_shoe_runners  = v_shoe_items+$1
00000000                            ;v_shoe_spring   = v_shoe_items+$2
00000000                            ;v_shoe_spikeproof = v_shoe_items+$3
00000000                            
00000000                            ;v_item_items    = v_inventory+$40
00000000                            ;v_item_goggles  = v_item_items+$0
00000000                            ;v_item_itemsaver = v_item_items+$1
00000000                            ;v_item_speedbracelet = v_item_items+$2
00000000                            
00000000                            ;v_abil_items    = v_inventory+$60
00000000                            ;v_abil_none     = v_abil_items+$0
00000000                            ;v_abil_spindash = v_abil_items+$1
00000000                            ;v_abil_jumpdash = v_abil_items+$2
00000000                            ;v_abil_homing   = v_abil_items+$3
00000000                            ;v_abil_doublejump1 = v_abil_items+$4
00000000                            ;v_abil_doublejump2 = v_abil_items+$5
00000000                            ;v_abil_lightdash = v_abil_items+$6
00000000                            ;v_abil_down     = v_abil_items+$7
00000000                            ;v_abil_peelout  = v_abil_items+$8
00000000                            ;v_abil_walljump = v_abil_items+$9
00000000                            ;v_abil_insta    = v_abil_items+$A        ; instashield
00000000                            ; --------------------------------------------------------------------------
00000000                            
00000000 =FFFFF460                  Kos_decomp_queue_count =	$FFFFF460  ; word 		; the number of pieces of data on the queue. Sign bit set indicates a decompression is in progress
00000000 =FFFFF462                  Kos_decomp_stored_registers =	$FFFFF462  ; $28 bytes 		; allows decompression to be spread over multiple frames
00000000 =FFFFF48A                  Kos_decomp_stored_SR =		$FFFFF48A  ; word
00000000 =FFFFF48C                  Kos_decomp_bookmark =		$FFFFF48C  ; long 		; the address within the Kosinski queue processor at which processing is to be resumed
00000000 =FFFFF490                  Kos_description_field =		$FFFFF490  ; word 		; used by the Kosinski queue processor the same way the stack is used by the normal Kosinski decompression routine
00000000 =FFFFF492                  Kos_decomp_queue =		$FFFFF492  ; $20 bytes 		; 2 longwords per entry, first is source location and second is decompression location
00000000 =FFFFF492                  Kos_decomp_source =		$FFFFF492  ; long 		; the compressed data location for the first entry in the queue
00000000 =FFFFF496                  Kos_decomp_destination =	$FFFFF496  ; long 		; the decompression location for the first entry in the queue
00000000 =FFFFF4B0                  Kos_modules_left =		$FFFFF4B0  ; byte 		; the number of modules left to decompresses. Sign bit set indicates a module is being decompressed/has been decompressed
00000000 =FFFFF4B2                  Kos_last_module_size =		$FFFFF4B2  ; word 		; the uncompressed size of the last module in words. All other modules are $800 words
00000000 =FFFFF4B4                  Kos_module_queue =		$FFFFF4B4  ; $18 bytes 		; 6 bytes per entry, first longword is source location and next word is VRAM destination
00000000 =FFFFF4B4                  Kos_module_source =		$FFFFF4B4  ; long 		; the compressed data location for the first module in the queue
00000000 =FFFFF4CC                  Kos_module_destination =	$FFFFF4CC  ; word 		; the VRAM destination for the first module in the queue
00000000                            
00000000                            ;v_worldmap_X	= $FFFFF49E		; current level's left boundary position in world map squares (1 byte)
00000000                            ;v_worldmap_Y	= $FFFFF49F		; current level's top boundary position in world map squares  (1 byte)
00000000                            ;v_worldmap		= $FFFFF4A0		; $160 bytes, 1 bit for each square of the 80x35 map that has been visited		
00000000                            
00000000 =FFFFF600                  v_gamemode:		= $FFFFF600		; game mode (00=Sega			; 04=Title			; 08=Demo			; 0C=Level			; 10=SS			; 14=Cont			; 18=End			; 1C=Credit			; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	= $FFFFF602		; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	= $FFFFF603		; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	= $FFFFF604		; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	= $FFFFF605		; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	= $FFFFF60C		; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	= $FFFFF614		; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	= $FFFFF616		; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgposy_dup:	= $FFFFF618		; background position y (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF61A                  v_scrposx_dup:	= $FFFFF61A		; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgposx_dup:	= $FFFFF61C		; background position x (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	= $FFFFF624		; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	= $FFFFF625		; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	= $FFFFF626		; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	= $FFFFF627		; palette fading - number of colours
00000000 =FFFFF62A                  v_vbla_routine:	= $FFFFF62A		; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	= $FFFFF62C		; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	= $FFFFF632		; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	= $FFFFF634		; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	= $FFFFF636		; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:	= $FFFFF63A		; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640		; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	= $FFFFF644		; flag set to change palette during HBlank (0000 = no			; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	= $FFFFF646		; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	= $FFFFF648		; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	= $FFFFF64A		; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:	= $FFFFF64C		; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	= $FFFFF64D		; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	= $FFFFF64E		; water palette state when water is above/below the screen (00 = partly/all dry			; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	= $FFFFF650		; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	= $FFFFF680		; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	= $FFFFF6E0		; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	= $FFFFF6F8		; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	= $FFFFF700		; screen position x (2 bytes)   (Plane A)
00000000 =FFFFF704                  v_screenposy:	= $FFFFF704		; screen position y (2 bytes)   (Plane A)
00000000                            
00000000 =FFFFF708                  v_bgposx:	= $FFFFF708		; background position x (2 bytes)   (Plane B)
00000000 =FFFFF70C                  v_bgposy:	= $FFFFF70C		; background position y (2 bytes)   (Plane B)
00000000                            
00000000 =FFFFF720                  v_limitleft1:	= $FFFFF720		; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	= $FFFFF722		; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	= $FFFFF724		; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	= $FFFFF726		; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	= $FFFFF728		; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	= $FFFFF72A		; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	= $FFFFF72C		; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	= $FFFFF72E		; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	= $FFFFF732		; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	= $FFFFF73A		; screen shift as Sonic moves horizontally
00000000                            
00000000 =FFFFF73E                  v_lookshift:	= $FFFFF73E		; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	= $FFFFF742		; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	= $FFFFF744		; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF754                  v_bgscroll1:	= $FFFFF754		; background scrolling variable 1
00000000 =FFFFF756                  v_bgscroll2:	= $FFFFF756		; background scrolling variable 2
00000000 =FFFFF758                  v_bgscroll3:	= $FFFFF758		; background scrolling variable 3
00000000 =FFFFF75C                  f_bgscrollvert:	= $FFFFF75C		; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	= $FFFFF760		; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	= $FFFFF762		; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	= $FFFFF764		; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	= $FFFFF766		; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	= $FFFFF767		; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	= $FFFFF768		; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	= $FFFFF76C		; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	= $FFFFF76E		; ObjPosLoad - screen variable
00000000 =FFFFF76E                  v_screenposx_last = v_opl_screen
00000000 =FFFFF770                  v_opl_data:	= $FFFFF770		; ObjPosLoad - data buffer ($10 bytes)
00000000 =FFFFF770                  Obj_load_addr_right = v_opl_data
00000000 =FFFFF774                  Obj_load_addr_left  = v_opl_data+4
00000000 =FFFFF778                  Obj_respawn_index_right = v_opl_data+8
00000000 =FFFFF77C                  Obj_respawn_index_left  = v_opl_data+$0C
00000000                            
00000000 =FFFFF780                  v_ssangle:	= $FFFFF780		; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	= $FFFFF782		; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	= $FFFFF790		; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	= $FFFFF792		; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	= $FFFFF794		; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	= $FFFFF796		; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	= $FFFFF79A		; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	= $FFFFF79C		; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	= $FFFFF7A4		; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	= $FFFFF7A7		; status of boss and prison capsule (01 = boss defeated			; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	= $FFFFF7A8		; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	= $FFFFF7A9		; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	= $FFFFF7AA		; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	= $FFFFF7AC		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	= $FFFFF7AD		; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	= $FFFFF7AE		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	= $FFFFF7AF		; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	= $FFFFF7B0		; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	= $FFFFF7B1		; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	= $FFFFF7B2		; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	= $FFFFF7B3		; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	= $FFFFF7B4		; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	= $FFFFF7B5		; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	= $FFFFF7B6		; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	= $FFFFF7B7		; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	= $FFFFF7B8		; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	= $FFFFF7B9		; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	= $FFFFF7BA		; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	= $FFFFF7BB		; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	= $FFFFF7BE		; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	= $FFFFF7C0		; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:	= $FFFFF7C1		; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	= $FFFFF7C7		; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	= $FFFFF7C8		; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	= $FFFFF7C9		; LZ water tunnels (00 = enabled			; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	= $FFFFF7CA		; flag set to lock controls apart from jumping         if $FF, Obj01_Modes routines are not run. Sonic freezes and other objects can control his moving manually. This is used in SBZ transporters for example. If this flag is $01, the above applies and the TouchResponse isn't run. Sonic doesn't react to rings or harmful objects anymore.
00000000 =FFFFF7CB                  v_obj6B:	= $FFFFF7CB		; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	= $FFFFF7CC		; flag set to lock controls during ending sequence     if clear, v_jpadhold1(what buttons are pressed) is sent to v_jpadhold2(what buttons the sonic object sees), if set you can send your own buttons to v_jpadhold2
00000000 =FFFFF7CD                  f_bigring:	= $FFFFF7CD		; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	= $FFFFF7D0		; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	= $FFFFF7D2		; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	= $FFFFF7D4		; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	= $FFFFF7D6		; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	= $FFFFF7D7		; routine counter for Sonic in the ending sequence
00000000 =FFFFF7E0                  f_switch:	= $FFFFF7E0		; flags set when Sonic stands on a switch ($10 bytes)
00000000                            
00000000 =FFFFF800                  v_sprites:	= $FFFFF800		; sprite table ($200 bytes)
00000000 =FFFFFA00                  v_pal0_wat:	= $FFFFFA00		; duplicate palette data - underwater ($80 bytes)
00000000 =FFFFFA80                  v_pal0_dry:	= $FFFFFA80		; duplicate palette data - main ($80 bytes)
00000000 =FFFFFB00                  v_pal1_wat:	= $FFFFFB00		; palette data - underwater ($80 bytes)
00000000 =FFFFFB80                  v_pal1_dry:	= $FFFFFB80		; palette data - main ($80 bytes)
00000000                            
00000000                            
00000000                            
00000000 =FFFFFC00                  v_actstates	= $FFFFFC00		; 4 bytes of saved data per act ($A0 bytes, will expand when more zones added)
00000000                            
00000000                            
00000000                            ; stack goes from FE00 backwards, seems like leaving $100 bytes for it would be safe????
00000000                            
00000000 =FFFFFE02                  f_restart:	= $FFFFFE02		; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	= $FFFFFE04		; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	= v_framecount+1	; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	= $FFFFFE06		; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	= $FFFFFE08		; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	= $FFFFFE0A		; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	= $FFFFFE0B		; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	= $FFFFFE0C		; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	= v_vbla_count+2 	; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	= v_vbla_word+1		; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		= $FFFFFE10		; current zone number
00000000 =FFFFFE11                  v_act:		= $FFFFFE11		; current act number
00000000 =FFFFFE12                  v_lives:	= $FFFFFE12		; number of lives
00000000 =FFFFFE14                  v_air:		= $FFFFFE14		; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	= v_air+1		; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	= $FFFFFE16		; last special stage number
00000000 =FFFFFE18                  v_continues:	= $FFFFFE18		; number of continues
00000000 =FFFFFE1A                  f_timeover:	= $FFFFFE1A		; time over flag
00000000 =FFFFFE1B                  v_lifecount:	= $FFFFFE1B		; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	= $FFFFFE1C		; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	= $FFFFFE1D		; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	= $FFFFFE1E		; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	= $FFFFFE1F		; score counter update flag
00000000 =FFFFFE20                  v_rings:	= $FFFFFE20		; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	= v_rings+1		; low byte for rings
00000000 =FFFFFE22                  v_time:		= $FFFFFE22		; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	= $FFFFFE23		; time - minutes
00000000 =FFFFFE24                  v_timesec:	= $FFFFFE24		; time - seconds
00000000 =FFFFFE25                  v_timecent:	= $FFFFFE25		; time - centiseconds
00000000 =FFFFFE26                  v_score:	= $FFFFFE26		; score (4 bytes)
00000000 =FFFFFE2A                  v_shield:	= $FFFFFE2A		; shield status (00 = no			; 01 = yes)
00000000 =FFFFFE2B                  v_invinc:	= $FFFFFE2B		; invinciblity status (00 = no			; 01 = yes) bit 7 set when instashield active
00000000 =FFFFFE2C                  v_shoes:	= $FFFFFE2C		; speed shoes status (00 = no			; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	= $FFFFFE30		; number of the last lamppost you hit ($FF means switching between acts)
00000000 =FFFFFE32                  v_lamp_xpos:	= v_lastlamp+2		; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	= v_lastlamp+4		; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	= v_lastlamp+6		; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	= v_lastlamp+8		; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	= v_lastlamp+$C		; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:= v_lastlamp+$E		; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	= v_lastlamp+$10 	; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	= v_lastlamp+$12 	; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	= v_lastlamp+$20 	; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	= v_lastlamp+$22 	; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	= v_lastlamp+$23 	; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	= v_lastlamp+$24 	; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:		= $FFFFFE57		; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:		= $FFFFFE58		; which individual emeralds you have (00 = no			; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	= $FFFFFE5E		; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	= $FFFFFEC0		; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	= $FFFFFEC1		; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	= $FFFFFEC2		; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	= $FFFFFEC3		; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	= $FFFFFEC4		; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	= $FFFFFEC5		; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	= $FFFFFEC6		; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	= $FFFFFEC7		; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:		= $FFFFFEC8		; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEF0                  v_limittopdb:	= $FFFFFEF0		; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	= $FFFFFEF2		; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000                            ; boss animation array from ported sonic 2 bosses
00000000 =FFFFFEF4                  Boss_AnimationArray:= $FFFFFEF4	; up to $10 bytes			; 2 bytes per entry
00000000 =FFFFFF04                  unk_F750:       = $FFFFFF04
00000000 =FFFFFF04                  Boss_X_pos:		= $FFFFFF04   	; Boss_MoveObject reads a long, but all other places in the game use only the high word
00000000 =FFFFFF08                  Boss_Y_pos:		= $FFFFFF08	; same here
00000000 =FFFFFF0C                  Boss_X_vel:		= $FFFFFF0C
00000000 =FFFFFF0E                  Boss_Y_vel:		= $FFFFFF0E
00000000 =FFFFFF3E                  unk_F75C:		= $FFFFFF3E	; used by mtz boss, only seems to use 2 bytes
00000000                            
00000000                            			; ^^^ can use values between here vvv not FF30 on though, vblank uses it
00000000                            
00000000                            
00000000                            ;v_monitorlocations: = $FFFFFF40    	; array of monitor x positions ($30 bytes)
00000000                            
00000000                            ;v_wassfxspindash: = $FFFFFF70   	; +++ is 1 if the last sound played was the spin dash
00000000                            ;v_timersfxspindash: = $FFFFFF71 	; +++ timer for spin dash rev
00000000                            ;v_pitchsfxspindash: = $FFFFFF72 	; +++ spindash sfx pitch increase
00000000 =FFFFFF73                  v_vscrolldelay  = $FFFFFF73 
00000000 =FFFFFF74                  v_hscrolldelay: = $FFFFFF74     	; +++ something to do with the spin dash and horizontal scrolling
00000000 =FFFFFF76                  f_dontstopmusic: = $FFFFFF76    	; +++ let music continue from last act
00000000 =FFFFFF77                  v_popuptimer	= $FFFFFF77			; how long the popup timer can be onscreen
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	= $FFFFFF80			; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	= $FFFFFF82			; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	= $FFFFFF84			; level select - sound selected (2 bytes)
00000000 =FFFFFF86                  v_levelselnofade  = $FFFFFF86   	; +++ pause menu, don't fade when redrawing text
00000000                            ;v_airjumpcount:    = $FFFFFF88    	; +++ times jumped in the air, for double jump
00000000                            ;v_jumpdashcount:   = $FFFFFF89    	; +++ times jump dashed
00000000                            ;f_supersonic       = $FFFFFF8A    	; +++ has sonic turned Super Sonic?
00000000                            ;v_supersonicpal    = $FFFFFF8B    	; +++ has super sonic palette value
00000000                            ;v_supersonicpalframe  = $FFFFFF8C 	; +++ has super sonic palette frame (2 bytes)
00000000                            ;v_supersonicpaltimer  = $FFFFFF8E 	; +++ has super sonic palette timer
00000000                            ;v_supersonicframecount = $FFFFFF8F	; +++ frame counter for ring countdown
00000000 =FFFFFF90                  v_lastmusic        = $FFFFFF90    	; save music to be restored after drowning countdown etc.
00000000                            ;v_homingdistance   = $FFFFFF92    	; distance between closest object and sonic (2 bytes)
00000000                            ;v_homingtarget     = $FFFFFF94    	; object number that is closest to sonic
00000000                            ;v_homingtimer      = $FFFFFF95    	; frames that sonic can home on an object for (light dash only ATM)
00000000                            ;v_justwalljumped   = $FFFFFF96    	; if just wall jumped, don't run double jump code
00000000                            ;v_Deform_Temp_Value = $FFFFFF98		; GHZ uses this to save last frame's ripple data rom location (2 bytes)
00000000                            ;H_int_jump      = $FFFFFF9A     	; 6 bytes 			; contains an instruction to jump to the H-int handler
00000000                            ;H_int_addr      = $FFFFFFA0     	; long
00000000                            ;v_teleportin	= $FFFFFFA4			; set when sonic needs to beam into the new level
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000                            ;v_lamp_xspeed:   = $FFFFFFB2    	; +++ saved x speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_yspeed:   = $FFFFFFB4    	; +++ saved y speed when moving between acts     (2 bytes)
00000000                            ;v_lamp_inertia:  = $FFFFFFB6    	; +++ saved inertia when moving between acts     (2 bytes)
00000000                            ;v_lamp_anim:     = $FFFFFFB8    	; +++ saved animation when moving between acts   (2 byte)
00000000                            ;v_lamp_roll:     = $FFFFFFBA    	; +++ saved rolling when moving between acts     (1 byte)
00000000                            ;v_lamp_dir:      = $FFFFFFBB    	; +++ saved direction when moving between acts   (1 byte)
00000000                            ;v_drumkit        = $FFFFFFBC    	; +++ drumkit used by current song
00000000                            ;v_currentsong:   = $FFFFFFBD    	; +++ the music currently playing
00000000                            ;v_musicpitch:    = $FFFFFFBE    	; +++ adjust music pitch by this amount
00000000                            ;v_palmuscounter  = $FFFFFFBF    	; +++ counts up to 5 then runs UpdateMusic twice
00000000 =FFFFFFC0                  v_scorecopy:	= $FFFFFFC0		; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	= $FFFFFFC0		; points required for an extra life (4 bytes) (JP1 only)
00000000                            ;f_levselcheat:	= $FFFFFFE0		; level select cheat flag
00000000                            ;f_slomocheat:	= $FFFFFFE1		; slow motion & frame advance cheat flag
00000000                            ;Slow_Motion_Flag      equ $FFFFFFE1
00000000                            ;f_debugcheat:	= $FFFFFFE2		; debug mode cheat flag
00000000                            ;Debug_Mode_Flag       equ $FFFFFFE2
00000000                            ;f_creditscheat:	= $FFFFFFE3		; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	= $FFFFFFE4		; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	= $FFFFFFE6		; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000                            			; ^^^ can use values between here vvv
00000000                            
00000000 =FFFFFFF0                  f_demo:			= $FFFFFFF0		; demo mode flag (0 = no			; 1 = yes			; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:		= $FFFFFFF2		; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	= $FFFFFFF4		; credits index number (2 bytes)
00000000 =FFFFFFF6                  v_layer:        = $FFFFFFF6     	; The bit in the 16x16 entries in the 128x128 block mappings to check for top solidity. Is either $C (for the default collision layer), or $E (for the alternate collision layer).
00000000 =FFFFFFF7                  v_layerplus     = $FFFFFFF7     	; The bit in the 16x16 entries in the 128x128 block mappings to check for left/right/bottom solidity. Is either $D (for the default collision layer), or $F (for the alternate collision layer).
00000000 =FFFFFFF8                  v_megadrive:	= $FFFFFFF8		; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	= $FFFFFFFA		; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:			= $FFFFFFFC		; 'init' text string (4 bytes)
00000000                            
00000000                            ; ===========================================================================
00000000                            ; Pause Menu Memory Locations (only used when in menu, otherwise the 256x256 tiles go here)
00000000                            ; ===========================================================================
00000000                            
00000000                            ;v_menufg        =   $FFFF0000
00000000                            ;v_menubg        =   $FFFF08C0
00000000                            ;v_sndtsttilemap =   $FFFF1180
00000000                            ;v_sndtsttemp    =   $FFFF1A40
00000000                            
00000000                            ;v_vucounter     = $FFFF1FEE     	; amount on vu meter (10 1 byte slots)
00000000                            
00000000                            
00000000                            ;v_menuslots     = $FFFF1FFA     	; number of slots on equip screen (or debug screen)
00000000                            ;v_menuequipslot = $FFFF1FFB     	; which slot is being selected (1 byte)
00000000                            ;v_menupagestate = $FFFF1FFC     	; 00-select page, 01-select slot, 02-select inv item (1 byte)
00000000                            ;FirstDrawnItem  = $FFFF1FFD     	; when inventory scrolls, which number in inv array is at the top of the list (1 byte)
00000000                            ;NumberOfItems   = $FFFF1FFE     	; total number of items currently held in the inventory (2 bytes)
00000000                            ;CurrentInventoryArray  = $FFFF2000 	; all inventory items to draw (?? bytes)
00000000                            
00000000                            
00000000                            ;v_menu_fgX		= $FFFF3000
00000000                            ;v_menu_bgX		= $FFFF3002
00000000                            ;v_menu_fgY		= $FFFF3004
00000000                            ;v_menu_bgY		= $FFFF3006
00000000                            
00000000                            ;v_mapbuffer =   $FFFF3010			; map screen graphics are buffered here before sending to VRAM
00000000                            
00000000                            ;v_mappointerobj	= $FFFFD400			; $40 bytes, 'you are here' object on map screen
00000000                            
00000000                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
00000000 =FFFFF784                  v_ssangleprev:	= $FFFFF784	; previous Special Stage angle (1 byte)
00000000                            ;	endc	;	;Mercury Dynamic Special Stage Walls
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; The high word of d6 after a SolidObject call is a bitfield
00000000                            ; with the following meaning:
00000000 =00000000                  p1_touch_side_bit   = 0
00000000 =00000000                  p2_touch_side_bit   = p1_touch_side_bit + 1
00000000                            
00000000 =00000001                  p1_touch_side       = 1<<p1_touch_side_bit
00000000 =00000001                  p2_touch_side       = 1<<p2_touch_side_bit
00000000                            
00000000 =00000001                  touch_side_mask     = p1_touch_side|p2_touch_side
00000000                            
00000000 =00000000                  p1_touch_bottom_bit = p1_touch_side_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_bottom_bit = p1_touch_bottom_bit + 1
00000000                            
00000000 =00000001                  p1_touch_bottom     = 1<<p1_touch_bottom_bit
00000000 =00000001                  p2_touch_bottom     = 1<<p2_touch_bottom_bit
00000000                            
00000000 =00000001                  touch_bottom_mask   = p1_touch_bottom|p2_touch_bottom
00000000                            
00000000 =00000000                  p1_touch_top_bit   = p1_touch_bottom_bit + pushing_bit_delta
00000000 =00000000                  p2_touch_top_bit   = p1_touch_top_bit + 1
00000000                            
00000000 =00000001                  p1_touch_top       = 1<<p1_touch_top_bit
00000000 =00000001                  p2_touch_top       = 1<<p2_touch_top_bit
00000000                            
00000000 =00000001                  touch_top_mask     = p1_touch_top|p2_touch_top
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Bits 3-6 of an object's status after a SolidObject call is a
00000000                            ; bitfield with the following meaning:
00000000 =00000003                  p1_standing_bit   = 3
00000000 =00000003                  p2_standing_bit   = p1_standing_bit + 1
00000000                            
00000000 =00000008                  p1_standing       = 1<<p1_standing_bit
00000000 =00000008                  p2_standing       = 1<<p2_standing_bit
00000000                            
00000000 =00000002                  pushing_bit_delta = 2
00000000 =00000003                  p1_pushing_bit    = p1_standing_bit + pushing_bit_delta
00000000 =00000003                  p2_pushing_bit    = p1_pushing_bit + 1
00000000                            
00000000 =00000008                  p1_pushing        = 1<<p1_pushing_bit
00000000 =00000008                  p2_pushing        = 1<<p2_pushing_bit
00000000                            
00000000                            
00000000 =00000008                  standing_mask     = p1_standing|p2_standing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000 =00000008                  pushing_mask      = p1_pushing|p2_pushing
00000000                            	include	'Constants.asm'
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_ABZ:		equ 7
00000000                            
00000000                            ; Colours
00000000 =00000000                  cBlack:		equ $000		; colour black
00000000 =00000EEE                  cWhite:		equ $EEE		; colour white
00000000 =00000E00                  cBlue:		equ $E00		; colour blue
00000000 =000000E0                  cGreen:		equ $0E0		; colour green
00000000 =0000000E                  cRed:		equ $00E		; colour red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; colour yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; colour aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; colour magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000023                  obWidth:	equ width_pixels	; width/2
00000000 =00000018                  obPriority:	equ priority	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000014                  obRespawnNo:	equ respawn_index	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000                            bgm_GHZ:	equ ((Music81-MusicIndex)/4)+$81
00000000                            bgm_LZ:		equ ((Music82-MusicIndex)/4)+$81
00000000                            bgm_MZ:		equ ((Music83-MusicIndex)/4)+$81
00000000                            bgm_SLZ:	equ ((Music84-MusicIndex)/4)+$81
00000000                            bgm_SYZ:	equ ((Music85-MusicIndex)/4)+$81
00000000                            bgm_SBZ:	equ ((Music86-MusicIndex)/4)+$81
00000000                            bgm_Invincible:	equ ((Music87-MusicIndex)/4)+$81
00000000                            bgm_ExtraLife:	equ ((Music88-MusicIndex)/4)+$81
00000000                            bgm_SS:		equ ((Music89-MusicIndex)/4)+$81
00000000                            bgm_Title:	equ ((Music8A-MusicIndex)/4)+$81
00000000                            bgm_Ending:	equ ((Music8B-MusicIndex)/4)+$81
00000000                            bgm_Boss:	equ ((Music8C-MusicIndex)/4)+$81
00000000                            bgm_FZ:		equ ((Music8D-MusicIndex)/4)+$81
00000000                            bgm_GotThrough:	equ ((Music23-MusicIndex)/4)+$23
00000000                            bgm_GameOver:	equ ((Music8F-MusicIndex)/4)+$81
00000000                            bgm_Continue:	equ ((Music90-MusicIndex)/4)+$81
00000000                            bgm_Credits:	equ ((Music91-MusicIndex)/4)+$81
00000000                            bgm_Drowning:	equ ((Music92-MusicIndex)/4)+$81
00000000                            bgm_Emerald:	equ ((Music93-MusicIndex)/4)+$81
00000000                            
00000000                            ; Sound effects
00000000                            sfx_Jump:	equ ((SoundA0-SoundIndex)/4)+$A0
00000000                            sfx_Lamppost:	equ ((SoundA1-SoundIndex)/4)+$A0
00000000                            sfx_A2:		equ ((SoundA2-SoundIndex)/4)+$A0
00000000                            sfx_Death:	equ ((SoundA3-SoundIndex)/4)+$A0
00000000                            sfx_Skid:	equ ((SoundA4-SoundIndex)/4)+$A0
00000000                            sfx_A5:		equ ((SoundA5-SoundIndex)/4)+$A0
00000000                            sfx_HitSpikes:	equ ((SoundA6-SoundIndex)/4)+$A0
00000000                            sfx_Push:	equ ((SoundA7-SoundIndex)/4)+$A0
00000000                            sfx_SSGoal:	equ ((SoundA8-SoundIndex)/4)+$A0
00000000                            sfx_SSItem:	equ ((SoundA9-SoundIndex)/4)+$A0
00000000                            sfx_Splash:	equ ((SoundAA-SoundIndex)/4)+$A0
00000000                            sfx_AB:		equ ((SoundAB-SoundIndex)/4)+$A0
00000000                            sfx_HitBoss:	equ ((SoundAC-SoundIndex)/4)+$A0
00000000                            sfx_Bubble:	equ ((SoundAD-SoundIndex)/4)+$A0
00000000                            sfx_Fireball:	equ ((SoundAE-SoundIndex)/4)+$A0
00000000                            sfx_Shield:	equ ((SoundAF-SoundIndex)/4)+$A0
00000000                            sfx_Saw:	equ ((SoundB0-SoundIndex)/4)+$A0
00000000                            sfx_Electric:	equ ((SoundB1-SoundIndex)/4)+$A0
00000000                            sfx_Drown:	equ ((SoundB2-SoundIndex)/4)+$A0
00000000                            sfx_Flamethrower:equ ((SoundB3-SoundIndex)/4)+$A0
00000000                            sfx_Bumper:	equ ((SoundB4-SoundIndex)/4)+$A0
00000000                            sfx_Ring:	equ ((SoundB5-SoundIndex)/4)+$A0
00000000                            sfx_SpikesMove:	equ ((SoundB6-SoundIndex)/4)+$A0
00000000                            sfx_Rumbling:	equ ((SoundB7-SoundIndex)/4)+$A0
00000000                            sfx_B8:		equ ((SoundB8-SoundIndex)/4)+$A0
00000000                            sfx_Collapse:	equ ((SoundB9-SoundIndex)/4)+$A0
00000000                            sfx_SSGlass:	equ ((SoundBA-SoundIndex)/4)+$A0
00000000                            sfx_Door:	equ ((SoundBB-SoundIndex)/4)+$A0
00000000                            sfx_Teleport:	equ ((SoundBC-SoundIndex)/4)+$A0
00000000                            sfx_ChainStomp:	equ ((SoundBD-SoundIndex)/4)+$A0
00000000                            sfx_Roll:	equ ((SoundBE-SoundIndex)/4)+$A0
00000000                            sfx_Continue:	equ ((SoundBF-SoundIndex)/4)+$A0
00000000                            sfx_Basaran:	equ ((SoundC0-SoundIndex)/4)+$A0
00000000                            sfx_BreakItem:	equ ((SoundC1-SoundIndex)/4)+$A0
00000000                            sfx_Warning:	equ ((SoundC2-SoundIndex)/4)+$A0
00000000                            sfx_GiantRing:	equ ((SoundC3-SoundIndex)/4)+$A0
00000000                            sfx_Bomb:	equ ((SoundC4-SoundIndex)/4)+$A0
00000000                            sfx_Cash:	equ ((SoundC5-SoundIndex)/4)+$A0
00000000                            sfx_RingLoss:	equ ((SoundC6-SoundIndex)/4)+$A0
00000000                            sfx_ChainRise:	equ ((SoundC7-SoundIndex)/4)+$A0
00000000                            sfx_Burning:	equ ((SoundC8-SoundIndex)/4)+$A0
00000000                            sfx_Bonus:	equ ((SoundC9-SoundIndex)/4)+$A0
00000000                            sfx_EnterSS:	equ ((SoundCA-SoundIndex)/4)+$A0
00000000                            sfx_WallSmash:	equ ((SoundCB-SoundIndex)/4)+$A0
00000000                            sfx_Spring:	equ ((SoundCC-SoundIndex)/4)+$A0
00000000                            sfx_Switch:	equ ((SoundCD-SoundIndex)/4)+$A0
00000000                            sfx_RingLeft:	equ ((SoundCE-SoundIndex)/4)+$A0
00000000                            sfx_Signpost:	equ ((SoundCF-SoundIndex)/4)+$A0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000                            	include	'Macros.asm'
00000000 =FFFFF602                  SonicControl	equ	$FFFFF602
00000000 =FFFFF604                  Joypad		equ	$FFFFF604
00000000                            
00000000 =00000000                  Held		equ	0
00000000 =00000001                  Press		equ	1
00000000                            
00000000 =00000007                  iStart		equ 	7
00000000 =00000006                  iA		equ 	6
00000000 =00000005                  iC		equ 	5
00000000 =00000004                  iB		equ 	4
00000000 =00000003                  iRight		equ 	3
00000000 =00000002                  iLeft		equ 	2
00000000 =00000001                  iDown		equ 	1
00000000 =00000000                  iUp		equ 	0
00000000                            
00000000 =00000080                  MaskStart		equ 	1<<7
00000000 =00000040                  MaskA		equ 	1<<6
00000000 =00000020                  MaskC		equ 	1<<5
00000000 =00000010                  MaskB		equ 	1<<4
00000000 =00000008                  MaskRight		equ 	1<<3
00000000 =00000004                  MaskLeft		equ 	1<<2
00000000 =00000002                  MaskDown		equ 	1<<1
00000000 =00000001                  MaskUp		equ 	1
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check button presses
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            tpress	macro
00000000                            	move.b	(\2+1),d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            ; =============================================================
00000000                            ; Macro to check if buttons are held
00000000                            ; Arguments:	1 - buttons to check
00000000                            ;		2 - bitfield to check
00000000                            ; -------------------------------------------------------------
00000000                            theld	macro
00000000                            	move.b	\2,d0
00000000                            	andi.b	#\1,d0
00000000                            	endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		bsr.w	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            @wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,($A11100).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            		
00000000                            stopZ80a:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obRange:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.w	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            obRanges:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.s	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine (leave blank to not terminate)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound).l
00000000                            		else
00000000                            		jmp	(PlaySound).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound_Special).l
00000000                            		else
00000000                            		jmp	(PlaySound_Special).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            		
00000000                            waitYM		macro
00000000                            @wait\@:	move.b	($A04000).l,d2
00000000                            		btst	#7,d2
00000000                            		bne.s	@wait\@
00000000                            		endm
00000000                            		
00000000                            ; =============================================================
00000000                            ; Macro to raise an error in vectors
00000000                            ; Arguments:	1 - error number
00000000                            ;		2 - branch location
00000000                            ;		3 - if exists, adds 2 to stack pointer
00000000                            ; -------------------------------------------------------------
00000000                            raise	macro
00000000                            	move.b	#\1,($FFFFFC44).w
00000000                            	if narg=3
00000000                            		addq.l	#2,2(sp)
00000000                            	endc
00000000                            	bra.s	\2
00000000                            	endm	
00000000                            	
00000000                            	
00000000                            Kos_RunBitStream	macro
00000000                            	dbf	d2,@skip\@
00000000                            	moveq	#7,d2
00000000                            	move.b	d1,d0
00000000                            	swap	d3
00000000                            	bpl.s	@skip\@
00000000                            	move.b  (a0)+,d0                        ; get desc. bitfield
00000000                            	move.b  (a0)+,d1                        ;
00000000                            	move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00000000                            	move.b  (a4,d1.w),d1                    ;
00000000                            @skip\@:
00000000                            	endm
00000000                            	
00000000                            	
00000000                            ; fills a region of 68k RAM with 0 (4 bytes at a time)
00000000                            clearRAM macro addr,length,number
00000000                            ;    if length&3
00000000                            ;	fatal "clearRAM len must be divisible by 4, but was length"
00000000                             ;   endif
00000000                            	lea	(addr).w,a1
00000000                            	moveq	#0,d0
00000000                            	move.w	#number,number>>2-1(length),d1
00000000                            @loop:	move.l	d0,(a1)+
00000000                            	dbf	d1,@loop
00000000                                endm
00000000                            	
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; change an objects status in the respawn table
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obMarkGone      macro
00000000                            ;        if S3KObjectManager=1
00000000                            		moveq	#0,d0
00000000                                            move.w	respawn_index(a0),d0	; get address in respawn table
00000000                            	        beq.s	@dontremember		; if it's zero, don't remember object
00000000                            	        movea.w	d0,a2	; load address into a2
00000000                            	        bclr	#7,(a2)	; clear respawn table entry, so object can be loaded again           
00000000                                        @dontremember:
00000000                            
00000000                             ;       else
00000000                            ;		lea	(v_objstate).w,a2
00000000                            ;		moveq	#0,d0
00000000                            ;		move.b	obRespawnNo(a0),d0
00000000                            ;		bclr	#7,2(a2,d0.w)
00000000                             ;       endif
00000000                                            endm
00000000                                            endm
00000000                            ; ===========================================================================
00000000                            
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; ASSEMBLY OPTIONS:
00000000                            
00000000 =00000001                  padToPowerOfTwo = 1
00000000                            ;	| If 1, pads the end of the rom to the next power of two bytes (for real hardware)
00000000                            
00000000 =00000001                  PCMDC equ 1 ; PCM Driver with music compressed?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000                            
00000000 =00000000                  SegaSoundGF64 = 0  ;it´s a bonus :) (default: disabled) [GF64]
00000000                            ;0 - Normal sega sound
00000000                            ;1 - "SEGA!" scream
00000000                            ;2 - "Seeeegaaaaa" for a ytp
00000000                            ;S3Dacs = 1  ;Sonic 3k DAC Samples (Highly Recommended that you turn it on) ; Both S1 and S2 samples are included with the S3K samples in this hack
00000000                            ;0 - Off (Normal S2 Samples)
00000000                            ;1 - On
00000000                            ;2 - Full DAC Table From S3K (Not Supported yet so sorry...)
00000000 =00000001                  TitleScreenPaletteFix = 1
00000000 =00000000                  ChaotixJumpSND = 0
00000000 =00000000                  ChaotixSkidSND = 0
00000000 =00000000                  OldTitleCards = 0
00000000 =00000000                  SonicCDRollJump = 0
00000000 =00000001                  skipChecksumCheck equ 1
00000000                            ;	| If 1, disables the unnecessary (and slow) bootup checksum calculation
00000000 =00000000                  Useoldsounddriver = 0
00000000 =00000001                  zeroOffsetOptimization = 1
00000000                            ;	| If 1, makes a handful of zero-offset instructions smaller
00000000                            ;
00000000 =00000001                  assembleZ80SoundDriver = 1
00000000                            ;	| If 1, the Z80 sound driver is assembled with the rest of the rom
00000000                            ;	| If 0, the Z80 sound driver is incbind (less flexible)
00000000 =00000001                  DebuggingFeatures = 1	; 1 Enables Debugger , 0 Disables Debugger
00000000 =00000001                  HUDCentiseconds = 1
00000000 =00000000                  S2Obj34TitleCards = 0
00000000 =00000001                  UnusedCode equ 1	; compile the unused codes?
00000000                            ; 0 = no
00000000                            ; 1 = yes
00000000 =00000001                  HUDHasLeadingZeroes = 1
00000000                            ; property of all objects:
00000000 =0000003D                  obPlatformID:	equ $3D
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            ;subtype =		$28
00000000                            
00000000 =FFFFCF80                  MusicStack	equ	$FFFFCF80
00000000 =FFFFCF90                  SoundStack	equ	$FFFFCF90
00000000 =FFFFCFA0                  AdvanceStack	equ	$FFFFCFA0
00000000 =FFFFCFB0                  ControlStack	equ	$FFFFCFB0
00000000 =FFFFF015                  v_palmuscounter  equ $FFFFF015	; counts up to 5 then runs UpdateMusic twice
00000000                            ;Sprite_Table_Input =	Sprite_Table_Input
00000000                            
00000000 =000001FF                  Max_Rings = 511 ; default. maximum number possible is 759
00000000                            ;    if Max_Rings > 759
00000000                            ;    fatal "Maximum number of rings possible is 759"
00000000                            ;    endif
00000000                            
00000000 =00000400                  Rings_Space = (Max_Rings+1)*2
00000000                            ;Ring_Positions =		($FFFFE800)
00000000 =FFFFD200                  Ring_start_addr_ROM =   (Ring_Positions+Rings_Space)
00000000 =FFFFD204                  Ring_end_addr_ROM =        (Ring_Positions+Rings_Space+4)
00000000 =FFFFD208                  Ring_start_addr_ROM_P2 =    (Ring_Positions+Rings_Space+8)
00000000 =FFFFD20C                  Ring_end_addr_ROM_P2 =    (Ring_Positions+Rings_Space+12)
00000000 =FFFFD210                  Ring_free_RAM_start =       (Ring_Positions+Rings_Space+16)
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640	; VDP instruction buffer (2 bytes)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            ;
00000000                            ;writeVRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$4000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ;writeCRAM:	macro
00000000                            ;		lea	(vdp_control_port).l,a5
00000000                            ;		move.l	#$94000000,(a5)
00000000                            ;		move.l	#$96000000,(a5)
00000000                            ;		move.w	#$9700,(a5)
00000000                            ;		move.w	#$C000,(a5)
00000000                            ;		move.w	#$80,(v_vdp_buffer2).w
00000000                            ;		move.w	(v_vdp_buffer2).w,(a5)
00000000                            ;		endm
00000000                            
00000000                            ; =======================================================
00000000                            ; Dynamic Event Engine Equates
00000000                            ; =======================================================
00000000                            
00000000                            ; Zone Equates
00000000                            
00000000 =FFFFFE10                  ZONE                            equ     $FFFFFE10
00000000 =00000000                  ZONE_GHZ1                       equ     $0000
00000000 =00000001                  ZONE_GHZ2                       equ     $0001
00000000 =00000002                  ZONE_GHZ3                       equ     $0002
00000000 =00000200                  ZONE_MZ1                        equ     $0200
00000000 =00000201                  ZONE_MZ2                        equ     $0201
00000000 =00000202                  ZONE_MZ3                        equ     $0202
00000000 =00000400                  ZONE_SYZ1                       equ     $0400
00000000 =00000401                  ZONE_SYZ2                       equ     $0401
00000000 =00000402                  ZONE_SYZ3                       equ     $0402
00000000 =00000100                  ZONE_LZ1                        equ     $0100
00000000 =00000101                  ZONE_LZ2                        equ     $0101
00000000 =00000102                  ZONE_LZ3                        equ     $0102
00000000 =00000300                  ZONE_SLZ1                       equ     $0300
00000000 =00000301                  ZONE_SLZ2                       equ     $0301
00000000 =00000302                  ZONE_SLZ3                       equ     $0302
00000000 =00000500                  ZONE_SBZ1                       equ     $0500
00000000 =00000501                  ZONE_SBZ2                       equ     $0501
00000000 =00000103                  ZONE_SBZ3                       equ     $0103
00000000 =00000502                  ZONE_FZ                         equ     $0502
00000000                            
00000000                            ; Other Equates
00000000                            
00000000 =FFFFF700                  CamX                            equ     $FFFFF700
00000000 =FFFFF704                  CamY                            equ     $FFFFF704
00000000 =FFFFD008                  SonX                            equ     $FFFFD008
00000000 =FFFFD00C                  SonY                            equ     $FFFFD00C
00000000                            
00000000 =FFFFFFBE                  palcheck                        equ     $FFFFFFBE
00000000 =FFFFFFEA                  MusicChk                        equ     $FFFFFFEA
00000000                            
00000000 =FFFFFFC6                  SonicKilled                     equ     $FFFFFFC6
00000000                            
00000000 =00000004                  BitMapXpos    equ    4
00000000 =00000002                  BitMapYpos    equ    2
00000000 =00000100                  BitMapWidth    equ    256
00000000 =00000080                  BitMapHeight    equ    128
00000000 =00000010                  BitMapCellHeight    equ    (BitMapHeight/8)
00000000 =00000020                  BitMapCellWidth    equ    (BitMapWidth/8)
00000000 =00002000                  WallPalBits    equ    $2000
00000000 =00000040                  MapRowWidth    equ    64
00000000 =00008000                  bitmapaddr    equ $8000
00000000 =0000C000                  scrollAaddr    equ    $C000
00000000 =0000D800                  spriteaddr    equ    $D800
00000000 =0000DC00                  hscrolladdr    equ    $DC00
00000000 =0000E000                  scrollBaddr    equ    $E000
00000000 =0000F000                  windowaddr    equ    $F000
00000000 =00000000                  DMA_ByteInc    equ    $0
00000000 =00000002                  DMA_Length1    equ    $2
00000000 =00000004                  DMA_Length2    equ    $4
00000000 =00000006                  DMA_SrcAdr1    equ    $6
00000000 =00000008                  DMA_SrcAdr2    equ    $8
00000000 =0000000A                  DMA_SrcAdr3    equ    $A
00000000 =0000000C                  DMA_DMAenbl    equ    $C
00000000 =0000000E                  DMA_DstAdr1    equ    $E
00000000 =00000010                  DMA_DstAdr2    equ    $10
00000000 =00000012                  DMA_DMADisbl    equ    $12
00000000 =00A04000                  SNDADD          EQU     $A04000
00000000 =00A04001                  SNDDAT          EQU     $A04001
00000000 =00A10008                  CNTLA           EQU     $A10008
00000000 =00A1000A                  CNTLB           EQU     $A1000A
00000000 =00A1000C                  CNTLC           EQU     $A1000C
00000000 =00A10009                  CNTLAW          EQU     $A10009
00000000 =00A1000B                  CNTLBW          EQU     $A1000B
00000000 =00A10009                  CNTLCW          EQU     $A10009
00000000 =00A1000D                  PPCNTL          EQU     $A1000D
00000000 =00A10007                  PPDATA          EQU     $A10007
00000000 =00A11100                  BUSREQ          EQU     $A11100
00000000 =00A11200                  BUSRES          EQU     $A11200
00000000 =00A00000                  Z80RAM          EQU     $A00000
00000000 =00C00000                  VDATA           EQU     $C00000
00000000 =00C00004                  VCTRL           EQU     $C00004
00000000 =00000004                  palid_GHZ 		EQU 4
00000000 =00000001                  palid_Title 	EQU 1
00000000                            SetVdpRegister  MACRO
00000000                                    MOVE.W  #$8000|(\1<<8)|\2,VCTRL; check out the SEGA manual
00000000                                    ENDM
00000000                            SetVdpRegisterCode      MACRO
00000000                                    and.w   #$00ff,\2              ; Mask off high part
00000000                                    or.w    #$8000|(\1<<8),\2
00000000                                    move.w  \2,VCTRL
00000000                                    ENDM
00000000                            AutoIncrement   MACRO
00000000                                    SetVdpRegister  15,\1
00000000                                    ENDM
00000000                            VramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            VSramWrtAddr  MACRO
00000000                                    MOVE.L  #$40000010|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CramWrtAddr  MACRO
00000000                                    MOVE.L  #$C0000000|((\1&$3fff)<<16)|((\1>>14)&3),\2
00000000                                    ENDM
00000000                            CalcVramWrtAddrCode MACRO
00000000                                    move.w  \1,\2          ; Copy for lower 14 bits
00000000                                    and.l   #$3fff,\2      ; mask
00000000                                    lsl.l   #8,\2
00000000                                    lsl.l   #8,\2          ; Shift up
00000000                                    or.l    #$40000000,\2  ; Set bit that tells VDP it's a VRAM WRITE
00000000                                    lsr.l   #8,\1
00000000                                    lsr.l   #6,\1          ; Shift down 14 bits
00000000                                    and.l   #$3,\1
00000000                                    or.l    \1,\2          ; and combine
00000000                            	endm
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            
00000000                            binclude macro    filedir
00000000                            	incbin	\filedir
00000000                            	endm
00000000                            setROMBank    macro    page,range        ; page = 0-63 (16MB) 512KB pages useable
00000000                                                    ; range = $A130F1 = $0-$7FFFF not writable
00000000                            
00000000                                    if range=$80000
00000000                                    move.b  #page,($A130F3).l    ; range = $A130F3 = $80000-$FFFFF
00000000                                    endif
00000000                                    if range=$100000
00000000                                    move.b  #page,($A130F5).l    ; range = $A130F5 = $100000-$17FFFF
00000000                                    endif
00000000                                    if range=$180000
00000000                                    move.b  #page,($A130F7).l    ; range = $A130F7 = $180000-$1FFFFF
00000000                                    endif
00000000                                    if range=$200000
00000000                                    move.b  #page,($A130F9).l    ; range = $A130F9 = $200000-$27FFFF
00000000                                    endif
00000000                                    if range=$280000
00000000                                    move.b  #page,($A130FB).l    ; range = $A130FB = $280000-$2FFFFF
00000000                                    endif
00000000                                    if range=$300000
00000000                                    move.b  #page,($A130FD).l    ; range = $A130FD = $300000-$37FFFF
00000000                                    endif
00000000                                    if range=$380000
00000000                                    move.b  #page,($A130FF).l    ; range = $A130FF = $380000-$3FFFFF
00000000                                    endif
00000000                                    endm
00000000                            ; we don"t want AS padding out dc.b instructions
00000000                            	; we don"t need to generate anything for a listing file
00000000                            	; we don"t need warnings about privileged instructions
00000000                            		
00000000                            		include "sonic1.macrosetup.asm"
00000000                            ; 1-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn1op	 macro oper,x
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		!oper	x
00000000                            	  else
00000000                            		!oper	1+x
00000000                            		!org	*-1
00000000                            		!dc.b	0
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            ; 2-arg instruction that's self-patching to remove 0-offset optimization
00000000                            insn2op	 macro oper,x,y
00000000                            	  if (substr("x",0,2)<>"0(") && (substr("x",0,3)<>"ID(")
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            			!oper	x,y
00000000                            		  else
00000000                            			!oper	x,1+y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            	  else
00000000                            		if substr("y",0,1)<>"D"
00000000                            		  if (substr("y",0,2)<>"0(") && (substr("y",0,3)<>"ID(")
00000000                            start:
00000000                            			!oper	1+x,y
00000000                            end:
00000000                            			!org	start+3
00000000                            			!dc.b	0
00000000                            			!org	end
00000000                            		  else
00000000                            			!oper	1+x,1+y
00000000                            			!org	*-3
00000000                            			!dc.b	0
00000000                            			!org	*+1
00000000                            			!dc.b	0
00000000                            		  endif
00000000                            		else
00000000                            			!oper	1+x,y
00000000                            			!org	*-1
00000000                            			!dc.b	0
00000000                            		endif
00000000                            	  endif
00000000                            	 endm
00000000                            
00000000                            	; instructions that were used with 0(a#) syntax
00000000                            	; defined to assemble as they originally did
00000000                            _move	macro
00000000                            		insn2op move.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _add	macro
00000000                            		insn2op add.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _addq	macro
00000000                            		insn2op addq.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmp	macro
00000000                            		insn2op cmp.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _cmpi	macro
00000000                            		insn2op cmpi.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _clr	macro
00000000                            		insn1op clr.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            _tst	macro
00000000                            		insn1op tst.ATTRIBUTE, ALLARGS
00000000                            	endm
00000000                            	endm
00000000                            		
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstrError, ZeroDivideError, CHKExceptionError, TRAPVError
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViolation, TraceError, LineAEmulation, LineFEmulation
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000060 0000 0000 0000 0000 0000+  		dc.l SpuriousException, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM, ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
00000090 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000A0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000B0 0000 0000 0000 0000 0000+  		dc.l TrapVector, TrapVector, TrapVector, TrapVector
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3230+  Date:		dc.b '(C)SEGA 2012.SEP' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG  4 EP.1        ' ; International name
00000180 474D 2030 3030 3032 3130+  		dc.b 'GM 00002109-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 5241 F820                  SRAMSupport:	dc.l $5241F820		; change to $5241F820 (NOT $5241E020) to create SRAM
000001B4 0020 0001                  		dc.l $200001		; SRAM start
000001B8 0020 03FF                  		dc.l $2003FF		; SRAM end
000001BC 5241                               dc.b    'RA'    ; external ram
000001BE F8                                 dc.b    $F8    ; don't clear + odd bytes
000001BF 20                                 dc.b    $20    ; sram
000001C0                            ExRAMAddr:
000001C0 0020 0001 0020 3FFF                dc.l    $200001, $203FFF; start, end
000001C8 2020 2020 2020 2020 2020+  ModemSupport	dc.b '            '	; Modem support
000001D4 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
00000208 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000218                            
00000218                            ; ===========================================================================
00000218                            
00000218                            ErrorTrap:
00000218 4E71                       		nop
0000021A 4E71                       		nop
0000021C 60FA                       		bra.s	ErrorTrap
0000021E                            
0000021E                            EntryPoint:
0000021E 4FF8 FE00                  		lea	($FFFFFE00).w,sp
00000222 4AB9 00A1 0008             		tst.l	($A10008).l
00000228 6600                       		bne.s	PortA_Ok
0000022A 4A79 00A1 000C             		tst.w	($A1000C).l
00000230                            		
00000230                            PortA_Ok:
00000230 6600 0000                  		bne.w	PortC_Ok	; in case of a soft reset
00000234 4BFA 0000                  		lea	InitArray(pc),a5
00000238 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000023C 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000240 1029 EF01                  		move.b	$A10001-$A11100(a1),d0
00000244 0200 000F                  		andi.b	#$F,d0
00000248 6700                       		beq.s	SkipSecurity
0000024A 237C 5345 4741 2F00        		move.l	#'SEGA',$A14000-$A11100(a1)
00000252                            
00000252                            SkipSecurity:
00000252 3014                       		move.w	(a4),d0
00000254 7000                       		moveq	#0,d0
00000256 2C40                       		movea.l	d0,a6
00000258 4E66                       		move.l	a6,usp
0000025A 7200                       		moveq   #VDPInitValues_End-VDPInitValues-1,d1 ; run the following loop $18 times
0000025C                            
0000025C                            VDPInitLoop:
0000025C 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000025E 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000260 DA47                       		add.w	d7,d5		; next register
00000262 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000266 289D                       		move.l	(a5)+,(a4)
00000268 3680                       		move.w	d0,(a3)		; clear	the screen
0000026A 3287                       		move.w	d7,(a1)		; stop the Z80
0000026C 3487                       		move.w	d7,(a2)		; reset	the Z80
0000026E                            
0000026E                            WaitForZ80:
0000026E 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000270 66FC                       		bne.s	WaitForZ80	; if not, branch
00000272 7400                       		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
00000274                            
00000274                            Z80InitLoop:
00000274 10DD                       		move.b	(a5)+,(a0)+
00000276 51CA FFFC                  		dbf	d2,Z80InitLoop
0000027A 3480                       		move.w	d0,(a2)
0000027C 3280                       		move.w	d0,(a1)		; start	the Z80
0000027E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000280                            
00000280                            ClrRAMLoop:
00000280 2D00                       		move.l	d0,-(a6)
00000282 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000286 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
00000288 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000028A 761F                       		moveq	#$1F,d3
0000028C                            
0000028C                            ClrCRAMLoop:
0000028C 2680                       		move.l	d0,(a3)
0000028E 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000292 289D                       		move.l	(a5)+,(a4)
00000294 7813                       		moveq	#$13,d4
00000296                            
00000296                            ClrVDPStuff:
00000296 2680                       		move.l	d0,(a3)
00000298 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000029C 7A00                       		moveq   #PSGInitValues_End-PSGInitValues-1,d5
0000029E                            
0000029E                            PSGInitLoop:
0000029E 175D 0011                  		move.b	(a5)+,$11(a3)
000002A2 51CD FFFA                  		dbf	d5,PSGInitLoop
000002A6 3480                       		move.w	d0,(a2)
000002A8 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
000002AC 46FC 2700                  		disable_ints	; set the sr
000002B0                            
000002B0                            PortC_Ok:
000002B0                            ;		bra.w	GameProgram
000002B0                            
000002B0                            ;Init_SkipPowerOn:
000002B0 6000 0000                  		bra.w	Test_LockOn
000002B4                            		
000002B4                            ;Z80StartupCodeBegin: ; loc_2CA:
000002B4                            ;    if (*)+$26 < $10000
000002B4                            ; 
000002B4                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002B4                            ;	message "Warning: using pre-assembled Z80 startup code."
000002B4                            ;    	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
000002B4                            ;    endif
000002B4                            ; ===========================================================================
000002B4 8000                       InitArray:	dc.w $8000		; VDP register start number
000002B6 3FFF                       		dc.w $3FFF		; size of RAM/4
000002B8 0100                       		dc.w $100		; VDP register diff
000002BA                            
000002BA 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002BE 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002C2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002C6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002CA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002CE                            VDPInitValues:  ; values for VDP registers
000002CE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002CF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002D0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002D1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002D2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002D3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002D4 00                         		dc.b 0
000002D5 00                         		dc.b 0
000002D6 00                         		dc.b 0
000002D7 00                         		dc.b 0
000002D8 FF                         		dc.b $FF
000002D9 00                         		dc.b 0
000002DA 81                         		dc.b $81
000002DB 37                         		dc.b $37
000002DC 00                         		dc.b 0
000002DD 01                         		dc.b 1
000002DE 01                         		dc.b 1
000002DF 00                         		dc.b 0
000002E0 00                         		dc.b 0
000002E1 FF                         		dc.b $FF
000002E2 FF                         		dc.b $FF
000002E3 00                         		dc.b 0
000002E4 00                         		dc.b 0
000002E5 80                         		dc.b $80
000002E6                            VDPInitValues_End:
000002E6 4000 0080                  		dc.l $40000080
000002EA                            	;	dc.b $AF
000002EA                            	;	dc.b 1
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $1F
000002EA                            	;	dc.b $11
000002EA                            	;	dc.b $27
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $21
000002EA                            	;	dc.b $26
000002EA                            	;	dc.b 0
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $77
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $B0
000002EA                            	;	dc.b $DD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $FD
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $47
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $4F
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b 8
000002EA                            	;	dc.b $D9
000002EA                            	;	dc.b $C1
000002EA                            	;	dc.b $D1
000002EA                            	;	dc.b $E1
000002EA                            	;	dc.b $F1
000002EA                            	;	dc.b $F9
000002EA                            	;	dc.b $F3
000002EA                            	;	dc.b $ED
000002EA                            	;	dc.b $56
000002EA                            	;	dc.b $36
000002EA                            	;	dc.b $E9
000002EA                            	;	dc.b $E9
000002EA                            ;		dc.l $81048F02
000002EA                            ;		dc.l $C0000000
000002EA                            ;		dc.l $40000010
000002EA                            ;		dc.b $9F
000002EA                            ;		dc.b $BF
000002EA                            ;		dc.b $DF
000002EA                            ;		dc.b $FF
000002EA                            
000002EA                            ;		dc.b $AF,  1,$D9,$1F,$11,$27,  0,$21,$26,  0,$F9,$77,$ED,$B0,$DD,$E1; 0	; Z80 instructions
000002EA                            ;		dc.b $FD,$E1,$ED,$47,$ED,$4F,$D1,$E1,$F1,  8,$D9,$C1,$D1,$E1,$F1,$F9; 16
000002EA                            ;		dc.b $F3,$ED,$56,$36,$E9,$E9; 32
000002EA                            
000002EA                            Z80StartupCodeBegin: ; loc_2CA:
000002EA                            ;    if (*)+$26 < $10000
000002EA                            ;    CPU Z80 ; start compiling Z80 code
000002EA                            ;    phase 0 ; pretend we're at address 0
000002EA                            ;	xor     a	; clear a to 0
000002EA                            ;	ld      bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
000002EA                            ;	ld      de,zStartupCodeEndLoc+1	; initial destination address
000002EA                            ;	ld      hl,zStartupCodeEndLoc	; initial source address
000002EA                            ;	ld      sp,hl	; set the address the stack starts at
000002EA                            ;	ld      (hl),a	; set first byte of the stack to 0
000002EA                            ;	ldir    	; loop to fill the stack (entire remaining available Z80 RAM) with 0
000002EA                            ;	pop     ix	; clear ix
000002EA                            ;	pop     iy	; clear iy
000002EA                            ;	ld      i,a	; clear i
000002EA                            ;	ld      r,a	; clear r
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ex      af,af'	; swap af with af'
000002EA                            ;	exx		; swap bc/de/hl with their shadow registers too
000002EA                            ;	pop     bc	; clear bc
000002EA                            ;	pop     de	; clear de
000002EA                            ;	pop     hl	; clear hl
000002EA                            ;	pop     af	; clear af
000002EA                            ;	ld      sp,hl	; clear sp
000002EA                            ;	di      	; clear iff1 (for interrupt handler)
000002EA                            ;	im      1	; interrupt handling mode = 1
000002EA                            ;	ld      (hl),0E9H ; replace the first instruction with a jump to itself
000002EA                            ;	jp      (hl)      ; jump to the first instruction (to stay there forever)
000002EA                            ;    zStartupCodeEndLoc:
000002EA                            ;    dephase ; stop pretending
000002EA                            ;    CPU 68000	; switch back to 68000 code
000002EA                            ;    padding off ; unfortunately our flags got reset so we have to set them again...
000002EA                            ;    listing off
000002EA                            ;    supmode on
000002EA                            ;    else ; due to an address range limitation I could work around but don't think is worth doing so:
000002EA                            ;	message "Warning: using pre-assembled Z80 startup code."
000002EA AF01 D91F 1127 0021 2600+      	dc.w $AF01,$D91F,$1127,$0021,$2600,$F977,$EDB0,$DDE1,$FDE1,$ED47,$ED4F,$D1E1,$F108,$D9C1,$D1E1,$F1F9,$F3ED,$5636,$E9E9
00000310                            ;    endif
00000310                            Z80StartupCodeEnd:
00000310                            
00000310 8104                       	dc.w	$8104	; value for VDP display mode
00000312 8F02                       	dc.w	$8F02	; value for VDP increment
00000314 C000 0000                  	dc.l	$C0000000	; value for CRAM write mode
00000318 4000 0010                  	dc.l	$40000010	; unknown (VSRAM?)
0000031C                            
0000031C                            PSGInitValues:
0000031C 9FBF DFFF                          dc.b    $9F,$BF,$DF,$FF ; values for PSG channel volumes
00000320                            PSGInitValues_End:
00000320                            ; ===========================================================================
00000320                            
00000320                            Test_LockOn:
00000320                            ;		tst.w	($C00004).l
00000320                            ;		move.w	#$4EF9,($FFFFFFF0).w	; machine code for jmp
00000320                            ;		move.l	#VDPInitLoop,($FFFFFFF2).w
00000320                            ;		move.w	#$4EF9,($FFFFFFF6).w
00000320                            ;		move.l	#PSGInitLoop,($FFFFFFF8).w
00000320                            
00000320                            GameProgram:
00000320                                   ;move.b  #2,($A130F1).l ; should this be used?
00000320                                    ;move.b  #1,($A130F3).l
00000320                                    ;move.b  #2,($A130F5).l
00000320                                    ;move.b  #3,($A130F7).l
00000320                                    ;move.b  #4,($A130F9).l
00000320                                    ;move.b  #5,($A130FB).l
00000320                                    ;move.b  #6,($A130FD).l
00000320                                    ;move.b  #7,($A130FF).l
00000320 4A79 00C0 0004             		tst.w	($C00004).l
00000326 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000032E 6700                       		beq.s	CheckSumCheck
00000330 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000338 6700 0000                  		beq.w	GameInit				; if yes, branch
0000033C                            
0000033C                            CheckSumCheck:
0000033C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000340 7E00                       		moveq	#0,d7
00000342 3C3C 007F                  		move.w	#$7F,d6
00000346                            
00000346                            loc_348:
00000346 2CC7                       		move.l	d7,(a6)+
00000348 51CE FFFC                  		dbf	d6,loc_348
0000034C 1039 00A1 0001             		move.b	($A10001).l,d0
00000352 0200 00C0                  		andi.b	#$C0,d0
00000356 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035A 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000362                            
00000362                            GameInit:
00000362 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000368 7E00                       		moveq	#0,d7
0000036A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000036E                            
0000036E                            GameClrRAM:
0000036E 2CC7                       		move.l	d7,(a6)+
00000370 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000374                            ;		bsr.w	DetectPAL
00000374 6100 0000                  		bsr.w	VDPSetupGame
00000378 6100 0000                  		bsr.w	JmpTo_SoundDriverLoad
0000037C 6100 0000                  		bsr.w	JoypadInit
00000380 4EB9 0000 0000             		jsr	(loadlivesLS).l
00000386 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000038C                            
0000038C                            MainGameLoop:
0000038C 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000390 0240 007C                  		andi.w	#$7C,d0
00000394 207B 0000                  		move.l	GameModeArray(pc,d0.w),a0	; same system of the Sonic 3 GameMode
00000398 4E90                       		jsr	(a0)							; jump to apt location in ROM
0000039A 60F0                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ;dword_62A8E:	dc.l $D8D0027		; DATA XREF: ROM:loc_62A54r
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 0000 0000                  		dc.l	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 0000 0000                  		dc.l	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 0000 0000                  		dc.l	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 0000 0000                  		dc.l	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 0000 0000                  		dc.l	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 0000 0000                  		dc.l	JumpToSegaScreen	; Back to SEGA screen. Was continue ($14)
000003B4                            ; ===========================================================================
000003B4 0000 0000                  		dc.l	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 0000 0000                  		dc.l	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 0000 0000                  		dc.l	JumpToSegaScreen	; Splash ($20)
000003C0                            ; ===========================================================================
000003C0 0000 0000                  		dc.l	SplashScreen2	; Sonic Team Splash ($24)
000003C4                            ; ===========================================================================
000003C4 0000 0000                  		dc.l	JumpToSegaScreen	; Basic select character screen ($28)
000003C8                            ; ===========================================================================
000003C8 0000 0000                  		dc.l	MenuScreen		; Options Menu ($2C)
000003CC                            ; ===========================================================================
000003CC 0000 0000                  		dc.l	SSRGScreen	; Sonic Retro/SSRG Splash ($30)
000003D0                            ; ===========================================================================
000003D0 0000 0000                  		dc.l	JumpToSegaScreen	; Sonic Retro/SSRG Splash ($34)
000003D4                            ; ===========================================================================
000003D4 0000 0000                  		dc.l	MenuScreen	; LevelSelect S2 ($38)
000003D8                            ; ===========================================================================
000003D8 0000 0000                  		dc.l	DAC_Player	; DAC Player ($3C)
000003DC                            ; ===========================================================================
000003DC 4E75                       		rts	
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            JumpToSegaScreen:
000003DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w
000003E4 4E75                       		rts
000003E6                            
000003E6                            ;JumpToLevelSelect:
000003E6                            ;		jmp	Level_Select_Menu
000003E6                            ;		rts
000003E6                            ;CheckSumError:
000003E6                            ;		bsr.w	VDPSetupGame
000003E6                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003E6                            ;		moveq	#$3F,d7
000003E6                            ;
000003E6                            ;CheckSum_Red:
000003E6                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003E6                            ;
000003E6                            ;CheckSum_Loop:
000003E6                            ;		bra.s	CheckSum_Loop
000003E6                            
000003E6                            ; ===========================================================================
000003E6                            ; New error handler code (debugger) courtesy of Flamewing
000003E6                            	include "DebuggerBlob.asm"
000003E6                            ; These get called from the binary blob. Do not edit them, or move them
000003E6                            ; relative to the binary blobs below.
000003E6 4EF9 0000 0000             	jmp	(KosDec).l
000003EC 4EF9 0000 0000             	jmp	(EniDec).l
000003F2                            
000003F2                            ; This is the terminal code and graphics, plus the disassembler and the plane
000003F2                            ; mappings for the debugger.
000003F2                            	incbin "_debugger/Part1.bin"
00001C9A                            
00001C9A =00000000                  WHITE EQU 0<<13
00001C9A =00002000                  BLUE  EQU 1<<13
00001C9A =00004000                  RED   EQU 2<<13
00001C9A =00006000                  GREEN EQU 3<<13
00001C9A                            ; Strings are word arrays: length followed by characters. You can change the
00001C9A                            ; length, but do NOT change the number of characters! The wasted space is the
00001C9A                            ; price to pay for a binary blob...
00001C9A                            ; The high byte of each word used for a character is the palette line to use:
00001C9A                            HackerName:
00001C9A 000B                       	dc.w 11
00001C9C 0059 006F 0075 0072 0020+  	dc.w WHITE|'Y',	 WHITE|'o',	 WHITE|'u',	 WHITE|'r',	 WHITE|' ',	 WHITE|'N'
00001CA8 0061 006D 0065 0020 0020   	dc.w WHITE|'a',	 WHITE|'m',	 WHITE|'e',	 WHITE|' ',	 WHITE|' '
00001CB2                            	even
00001CB2                            EMailmsg:
00001CB2 0021                       	dc.w 33
00001CB4 2079 206F 2075 2072 202E+  	dc.w BLUE|'y',	BLUE|'o',	BLUE|'u',	BLUE|'r',	BLUE|'.',	BLUE|'e'
00001CC0 206D 2061 2069 206C 2040+  	dc.w BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'l',	BLUE|'@',	BLUE|'s'
00001CCC 2065 2072 2076 2065 2072+  	dc.w BLUE|'e',	BLUE|'r',	BLUE|'v',	BLUE|'e',	BLUE|'r',	BLUE|'.'
00001CD8 2064 206F 206D 2061 2069+  	dc.w BLUE|'d',	BLUE|'o',	BLUE|'m',	BLUE|'a',	BLUE|'i',	BLUE|'n'
00001CE4 2020 2020 2020 2020 2020+  	dc.w BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF0 2020 2020 2020             	dc.w BLUE|' ',	BLUE|' ',	BLUE|' '
00001CF6                            	even
00001CF6                            
00001CF6                            ; Do not move or add padding between the code that follows. The debugger is
00001CF6                            ; split into these many parts because asm68k sucks.
00001CF6                            BusErrorMsg:
00001CF6                            	incbin "_debugger/Part2.bin"
000021A0                            
000021A0                            BusError:
000021A0                            	incbin "_debugger/Part3.bin"
000021BA                            
000021BA                            AddressError:
000021BA                            	incbin "_debugger/Part4.bin"
000021D4                            
000021D4                            TraceError:
000021D4                            	incbin "_debugger/Part5.bin"
000021F0                            
000021F0                            SpuriousException:
000021F0                            	incbin "_debugger/Part6.bin"
0000220C                            
0000220C                            ZeroDivideError:
0000220C                            	incbin "_debugger/Part7.bin"
0000222C                            
0000222C                            CHKExceptionError:
0000222C                            	incbin "_debugger/Part8.bin"
0000224C                            
0000224C                            TRAPVError:
0000224C                            	incbin "_debugger/Part9.bin"
0000226C                            
0000226C                            IllegalInstrError:
0000226C                            	incbin "_debugger/PartA.bin"
00002288                            
00002288                            PrivilegeViolation:
00002288                            	incbin "_debugger/PartB.bin"
000022A4                            
000022A4                            LineAEmulation:
000022A4                            	incbin "_debugger/PartC.bin"
000022C0                            
000022C0                            LineFEmulation:
000022C0                            	incbin "_debugger/PartD.bin"
000022DC                            
000022DC                            TrapVector:
000022DC                            	incbin "_debugger/PartE.bin"
00002352                            
00002352                            ; Edit this to something sensible. One suggestion is the SVN revision.
00002352                            RevisionNumber:
00002352 0001                       	dc.w	1
00002354                            	incbin "_debugger/PartF.bin"
000029AC                            
000029AC                            
000029AC                            
000029AC                            ; ===========================================================================
000029AC                            
000029AC                            ;Art_NewText:	incbin	#artunc\menutextnew.bin	; text used in error messages
000029AC                            ;		even
000029AC                            
000029AC                            ; =============== S U B R O U T I N E =======================================
000029AC                            
000029AC                            HudUpdateAlways:
000029AC 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w
000029B2 6F00                       		ble.s	loc_hud_noupdate
000029B4                            ;		cmpi.b	#$2C,(Game_Mode).w
000029B4                            ;		beq.s	loc_B64_2
000029B4                            ;		tst.b	(Update_HUD_timer).w
000029B4                            ;		beq.w	loc_B64_2
000029B4 11FC 0080 FE1C             		move.b	#-$80,(Update_HUD_Lives).w
000029BA                            ;		bcc.w	loc_B64_2
000029BA                            loc_hud_noupdate:
000029BA 4E75                       		rts
000029BC                            
000029BC                            ; =============== S U B R O U T I N E =======================================
000029BC                            
000029BC                            ; End of function DetectPAL
000029BC                            
000029BC                            ; ===========================================================================
000029BC                            
000029BC                            loc_B10:				; XREF: Vectors
000029BC 4E71                       		nop
000029BE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000029C2 4A38 F62A                  		tst.b	($FFFFF62A).w
000029C6 6700 0000                  		beq.w	VBlank_Sub00
000029CA                            ;		bcc.w	go2
000029CA                            		
000029CA 3039 00C0 0004             go2:	move.w	($C00004).l,d0
000029D0 0240 0008                  		andi.w	#8,d0
000029D4 67F4                       		beq.s	go2
000029D6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000029E0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000029E8 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
000029EE 6700                       		beq.s	loc_B42
000029F0 303C 0700                  		move.w	#$700,d0
000029F4                            loc_B3E:
000029F4 51C8 FFFE                  		dbf	d0,loc_B3E
000029F8                            loc_B42:
000029F8 1038 F62A                  		move.b	($FFFFF62A).w,d0
000029FC 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00002A02 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00002A08 0240 003E                  		andi.w	#$3E,d0
00002A0C 303B 0000                  		move.w	VBlank_Routines(pc,d0.w),d0
00002A10 4EBB 0000                  		jsr	VBlank_Routines(pc,d0.w)
00002A14                            
00002A14                            loc_B5E:				; XREF: loc_B88
00002A14 4E71                       		nop
00002A16                            loc_B64:                               ; CODE XREF: ROM:00004846j
00002A16                                                                    ; ROM:00004854j
00002A16 4EB8 29AC                  		jsr		HudUpdateAlways
00002A1A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00002A1E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002A22 4E73                       		rte	
00002A24                            ; ===========================================================================
00002A24                            
00002A24                            
00002A24                            
00002A24                            
00002A24                            VBlank_Routines:
00002A24 0000                       		dc.w VBlank_Sub00-VBlank_Routines ; $00
00002A26 0000                       		dc.w VBlank_Sub02-VBlank_Routines ; $02
00002A28 0000                       		dc.w VBlank_Sub04-VBlank_Routines ; $04
00002A2A 0000                       		dc.w VBlank_Sub06-VBlank_Routines ; $06
00002A2C 0000                       		dc.w VBlank_Sub08-VBlank_Routines ; $08
00002A2E 0000                       		dc.w VBlank_Sub0A-VBlank_Routines ; $0A
00002A30 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $0C
00002A32 0000                       		dc.w VBlank_Sub0E-VBlank_Routines ; $0E
00002A34 0000                       		dc.w VBlank_Sub10-VBlank_Routines ; $10
00002A36 0000                       		dc.w VBlank_Sub12-VBlank_Routines ; $12
00002A38 0000                       		dc.w VBlank_Sub14-VBlank_Routines ; $14
00002A3A 0000                       		dc.w VBlank_Sub16-VBlank_Routines ; $16
00002A3C 0000                       		dc.w VBlank_Sub0C-VBlank_Routines ; $18
00002A3E                            ; ===========================================================================
00002A3E                            
00002A3E                            ;loc_B88:				; XREF: VBlank; VBlank_Routines
00002A3E                            VBlank_Sub00:
00002A3E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w	; is mode pre-Level?
00002A44 6700                       		beq.s	loc_B9A			; if yes, branch
00002A46 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w	; is mode Level?
00002A4C 6600 FFC6                  		bne.w	loc_B5E			; if yes, branch
00002A50                            
00002A50                            loc_B9A:
00002A50 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w	; is level LZ ?
00002A56 6600 FFBC                  		bne.w	loc_B5E			; if not, branch
00002A5A 3039 00C0 0004             		move.w	($C00004).l,d0
00002A60 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00002A66 6700                       		beq.s	loc_BBA			; if not, branch
00002A68 303C 0700                  		move.w	#$700,d0
00002A6C 51C8 FFFE                  		dbf	d0,*			; delay processor
00002A70                            
00002A70                            loc_BBA:
00002A70 31FC 0001 F644             		move.w	#1,($FFFFF644).w	; enable HBlank
00002A76                            ;		move.w	#$100,($A11100).l
00002A76                            ;
00002A76                            ;loc_BC8:
00002A76                            ;		btst	#0,($A11100).l
00002A76                            ;		bne.s	loc_BC8
00002A76 4A38 F64E                  		tst.b	($FFFFF64E).w		; is water above the top of the screen?
00002A7A 6600                       		bne.s	loc_BFE			; if yes, branch
00002A7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002A82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002A88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002A8E 3ABC 977F                  		move.w	#$977F,(a5)
00002A92 3ABC C000                  		move.w	#$C000,(a5)
00002A96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002A9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AA0 6000                       		bra.s	loc_C22
00002AA2                            ; ===========================================================================
00002AA2                            
00002AA2                            loc_BFE:				; XREF: loc_BC8
00002AA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00002AA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002AAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002AB4 3ABC 977F                  		move.w	#$977F,(a5)
00002AB8 3ABC C000                  		move.w	#$C000,(a5)
00002ABC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002AC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002AC6                            
00002AC6                            loc_C22:				; XREF: loc_BC8
00002AC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002ACA                            ;		move.w	#0,($A11100).l
00002ACA 6000 FF48                  		bra.w	loc_B5E
00002ACE                            ; ===========================================================================
00002ACE                            
00002ACE                            ;loc_C32:
00002ACE                            VBlank_Sub02:				; XREF: VBlank_Routines
00002ACE 6100 0000                  		bsr.w	sub_106E
00002AD2                            
00002AD2                            ;loc_F9A:
00002AD2                            VBlank_Sub14:				; XREF: VBlank_Routines
00002AD2 4A78 FC20                  		tst.w	($FFFFFC20).w
00002AD6 6700 0000                  		beq.w	locret_C42
00002ADA 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002ADE                            
00002ADE                            locret_C42:
00002ADE 4E75                       		rts	
00002AE0                            ; ===========================================================================
00002AE0                            
00002AE0                            ;loc_C44:
00002AE0                            VBlank_Sub04:				; XREF: VBlank_Routines
00002AE0 6100 0000                  		bsr.w	sub_106E
00002AE4 4EB9 0000 0000             		jsr	sub_6886
00002AEA 6100 0000                  		bsr.w	sub_1642
00002AEE 4A78 FC20                  		tst.w	($FFFFFC20).w		; is there time	left on	the demo?
00002AF2 6700 0000                  		beq.w	locret_C5C		; if time is over, branch
00002AF6 5378 FC20                  		subq.w	#1,($FFFFFC20).w	; subtract 1 from time left
00002AFA                            
00002AFA                            locret_C5C:
00002AFA 4E75                       		rts	
00002AFC                            ; ===========================================================================
00002AFC                            
00002AFC                            ;loc_C5E:
00002AFC                            VBlank_Sub06:				; XREF: VBlank_Routines
00002AFC 6100 0000                  		bsr.w	sub_106E
00002B00 4E75                       		rts
00002B02                            ; ===========================================================================
00002B02                            
00002B02                            ;loc_C64:
00002B02                            VBlank_Sub10:				; XREF: VBlank_Routines
00002B02 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00002B08 6700 0000                  		beq.w	VBlank_Sub0A		; if yes, branch
00002B0C                            
00002B0C                            ;loc_C5E:
00002B0C                            VBlank_Sub08:				; XREF: VBlank_Routines
00002B0C                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002B0C                            ;
00002B0C                            ;loc_C76:
00002B0C                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002B0C                            ;		bne.s	loc_C76		; if not, branch
00002B0C 6100 0000                  		bsr.w	ReadJoypads
00002B10 4A38 F64E                  		tst.b	($FFFFF64E).w
00002B14 6600                       		bne.s	loc_CB0
00002B16 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B1C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B22 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002B28 3ABC 977F                  		move.w	#$977F,(a5)
00002B2C 3ABC C000                  		move.w	#$C000,(a5)
00002B30 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B36 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B3A 6000                       		bra.s	loc_CD4
00002B3C                            ; ===========================================================================
00002B3C                            
00002B3C                            loc_CB0:				; XREF: loc_C76
00002B3C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B42 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002B48 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002B4E 3ABC 977F                  		move.w	#$977F,(a5)
00002B52 3ABC C000                  		move.w	#$C000,(a5)
00002B56 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002B5C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B60                            
00002B60                            loc_CD4:				; XREF: loc_C76
00002B60 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002B64 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B6A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002B70 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002B76 3ABC 977F                  		move.w	#$977F,(a5)
00002B7A 3ABC 7C00                  		move.w	#$7C00,(a5)
00002B7E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002B84 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002B88 4BF9 00C0 0004             		lea	($C00004).l,a5
00002B8E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002B94 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002B9A 3ABC 977F                  		move.w	#$977F,(a5)
00002B9E 3ABC 7800                  		move.w	#$7800,(a5)
00002BA2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002BA8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002BAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002BB2                            
00002BB2                            loc_D50:
00002BB2                            ;		move.w	#0,($A11100).l
00002BB2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002BB8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002BBE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002BC4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002BCA 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00002BD0 6400                       		bcc.s	Demo_Time
00002BD2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00002BD8 588F                       		addq.l	#4,sp
00002BDA 6000 FE3A                  		bra.w	loc_B64
00002BDE                            
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            ; Subroutine to	run a demo for an amount of time
00002BDE                            ; ---------------------------------------------------------------------------
00002BDE                            
00002BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BDE                            
00002BDE                            
00002BDE                            Demo_Time:				; XREF: loc_D50; HBlank
00002BDE 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002BE4 4EB9 0000 0000             		jsr	AniArt_Load
00002BEA 4EB9 0000 0000             		jsr	HudUpdate
00002BF0 6100 0000                  		bsr.w	sub_165E
00002BF4 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
00002BF8 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00002BFC 5378 FC20                  		subq.w	#1,($FFFFFC20).w ; subtract 1 from time	left
00002C00                            
00002C00                            Demo_TimeEnd:
00002C00 4E75                       		rts	
00002C02                            ; End of function Demo_Time
00002C02                            
00002C02                            ; ===========================================================================
00002C02                            
00002C02                            ;loc_DA6:
00002C02                            VBlank_Sub0A:				; XREF: VBlank_Routines
00002C02                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C02                            ;
00002C02                            ;loc_DAE:
00002C02                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C02                            ;		bne.s	loc_DAE		; if not, branch
00002C02 6100 0000                  		bsr.w	ReadJoypads
00002C06 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C0C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002C12 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002C18 3ABC 977F                  		move.w	#$977F,(a5)
00002C1C 3ABC C000                  		move.w	#$C000,(a5)
00002C20 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002C26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C30 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002C36 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002C3C 3ABC 977F                  		move.w	#$977F,(a5)
00002C40 3ABC 7800                  		move.w	#$7800,(a5)
00002C44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002C54 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002C5A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002C60 3ABC 977F                  		move.w	#$977F,(a5)
00002C64 3ABC 7C00                  		move.w	#$7C00,(a5)
00002C68 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002C6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002C72                            ;		move.w	#0,($A11100).l
00002C72 4EB9 0000 0000             		jsr	PalCycle_SS
00002C78 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002C7E 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00002C84 6400                       		bcc.s	@update
00002C86 6000 0000                  		bra.w	locret_E70
00002C8A                            		
00002C8A                            	@update:
00002C8A 4EB9 0000 0000             		jsr	SS_LoadWalls
00002C90                            ;		jsr	HUDUpdate
00002C90                            		
00002C90                            loc_E64:
00002C90 4A78 FC20                  		tst.w	($FFFFFC20).w
00002C94 6700 0000                  		beq.w	locret_E70
00002C98 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002C9C                            
00002C9C                            locret_E70:
00002C9C 4E75                       		rts	
00002C9E                            ; ===========================================================================
00002C9E                            
00002C9E                            ;loc_E72:
00002C9E                            VBlank_Sub0C:				; XREF: VBlank_Routines
00002C9E                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002C9E                            ;
00002C9E                            ;loc_E7A:
00002C9E                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002C9E                            ;		bne.s	loc_E7A		; if not, branch
00002C9E 6100 0000                  		bsr.w	ReadJoypads
00002CA2 4A38 F64E                  		tst.b	($FFFFF64E).w
00002CA6 6600                       		bne.s	loc_EB4
00002CA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CAE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CB4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002CBA 3ABC 977F                  		move.w	#$977F,(a5)
00002CBE 3ABC C000                  		move.w	#$C000,(a5)
00002CC2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CC8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CCC 6000                       		bra.s	loc_ED8
00002CCE                            ; ===========================================================================
00002CCE                            
00002CCE                            loc_EB4:				; XREF: loc_E7A
00002CCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CD4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002CDA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002CE0 3ABC 977F                  		move.w	#$977F,(a5)
00002CE4 3ABC C000                  		move.w	#$C000,(a5)
00002CE8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002CEE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002CF2                            
00002CF2                            loc_ED8:				; XREF: loc_E7A
00002CF2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002CF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00002CFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002D02 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002D08                            
00002D08                            loc_EEE:
00002D08 3ABC 977F                  		move.w	#$977F,(a5)
00002D0C 3ABC 7C00                  		move.w	#$7C00,(a5)
00002D10 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D16 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D1A 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D20 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002D26 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002D2C 3ABC 977F                  		move.w	#$977F,(a5)
00002D30 3ABC 7800                  		move.w	#$7800,(a5)
00002D34 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002D3A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002D3E 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002D44                            
00002D44                            loc_F54:
00002D44                            ;		move.w	#0,($A11100).l	; start	the Z80
00002D44 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00002D4A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00002D50 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00002D56 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00002D5C 4EB9 0000 0000             		jsr	LoadTilesAsYouMove
00002D62 4EB9 0000 0000             		jsr	AniArt_Load
00002D68 4EB9 0000 0000             		jsr	HudUpdate
00002D6E 6100 0000                  		bsr.w	sub_1642
00002D72 4E75                       		rts	
00002D74                            ; ===========================================================================
00002D74                            
00002D74                            ;loc_F8A:
00002D74                            VBlank_Sub0E:				; XREF: VBlank_Routines
00002D74 6100 0000                  		bsr.w	sub_106E
00002D78 5238 F628                  		addq.b	#1,($FFFFF628).w
00002D7C 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00002D82 4E75                       		rts	
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            ;loc_F9A:
00002D84                            VBlank_Sub12:				; XREF: VBlank_Routines
00002D84 6100 0000                  		bsr.w	sub_106E
00002D88 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00002D8C 6000 0000                  		bra.w	sub_1642
00002D90                            ; ===========================================================================
00002D90                            
00002D90                            ;loc_FA6:
00002D90                            VBlank_Sub16:				; XREF: VBlank_Routines
00002D90                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002D90                            ;
00002D90                            ;loc_FAE:
00002D90                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002D90                            ;		bne.s	loc_FAE		; if not, branch
00002D90 6100 0000                  		bsr.w	ReadJoypads
00002D94 4BF9 00C0 0004             		lea	($C00004).l,a5
00002D9A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002DA0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002DA6 3ABC 977F                  		move.w	#$977F,(a5)
00002DAA 3ABC C000                  		move.w	#$C000,(a5)
00002DAE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002DB4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DBE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002DC4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002DCA 3ABC 977F                  		move.w	#$977F,(a5)
00002DCE 3ABC 7800                  		move.w	#$7800,(a5)
00002DD2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002DDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00002DE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002DE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002DEE 3ABC 977F                  		move.w	#$977F,(a5)
00002DF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002DF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002DFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E00                            ;		move.w	#0,($A11100).l	; start	the Z80
00002E00 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00002E06                            ;		jsr	sub_1642
00002E06                            loc_1060:
00002E06 4A78 FC20                  		tst.w	($FFFFFC20).w
00002E0A 6700 0000                  		beq.w	locret_106C
00002E0E 5378 FC20                  		subq.w	#1,($FFFFFC20).w
00002E12                            
00002E12                            locret_106C:
00002E12 4E75                       		rts	
00002E14                            
00002E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002E14                            
00002E14                            
00002E14                            sub_106E:				; XREF: VBlank_Sub02; et al
00002E14                            ;		move.w	#$100,($A11100).l ; stop the Z80
00002E14                            ;
00002E14                            ;loc_1076:
00002E14                            ;		btst	#0,($A11100).l	; has Z80 stopped?
00002E14                            ;		bne.s	loc_1076	; if not, branch
00002E14 6100 0000                  		bsr.w	ReadJoypads
00002E18 4A38 F64E                  		tst.b	($FFFFF64E).w
00002E1C 6600                       		bne.s	loc_10B0
00002E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E2A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00002E30 3ABC 977F                  		move.w	#$977F,(a5)
00002E34 3ABC C000                  		move.w	#$C000,(a5)
00002E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E42 6000                       		bra.s	loc_10D4
00002E44                            ; ===========================================================================
00002E44                            
00002E44                            loc_10B0:				; XREF: sub_106E
00002E44 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E4A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00002E50 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00002E56 3ABC 977F                  		move.w	#$977F,(a5)
00002E5A 3ABC C000                  		move.w	#$C000,(a5)
00002E5E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00002E64 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E68                            
00002E68                            loc_10D4:				; XREF: sub_106E
00002E68 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E6E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00002E74 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00002E7A 3ABC 977F                  		move.w	#$977F,(a5)
00002E7E 3ABC 7800                  		move.w	#$7800,(a5)
00002E82 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002E88 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002E8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00002E92 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00002E98 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00002E9E 3ABC 977F                  		move.w	#$977F,(a5)
00002EA2 3ABC 7C00                  		move.w	#$7C00,(a5)
00002EA6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00002EAC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00002EB0                            ;		move.w	#0,($A11100).l	; start	the Z80
00002EB0 4E75                       		rts
00002EB2                            ; End of function sub_106E
00002EB2                            
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            ; Subroutine to	move pallets from the RAM to CRAM
00002EB2                            ; ---------------------------------------------------------------------------
00002EB2                            
00002EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EB2                            
00002EB2                            
00002EB2                            PalToCRAM:
00002EB2 46FC 2700                  		disable_ints
00002EB6 4A78 F644                  		tst.w	($FFFFF644).w
00002EBA 6700                       		beq.s	locret_119C
00002EBC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00002EC2 48E7 00C0                  		movem.l	a0-a1,-(sp)
00002EC6 43F9 00C0 0000             		lea	($C00000).l,a1
00002ECC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00002ED0 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00002ED8                            		rept 32
00002ED8                            		move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
00002ED8 2298 2298 2298 2298 2298+  		endr
00002F18 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00002F1E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00002F22 4A38 F64F                  		tst.b	($FFFFF64F).w
00002F26 6600                       		bne.s	loc_119E
00002F28                            
00002F28                            locret_119C:
00002F28 4E73                       		rte	
00002F2A                            ; ===========================================================================
00002F2A                            
00002F2A                            loc_119E:				; XREF: PalToCRAM
00002F2A 4238 F64F                  		clr.b	($FFFFF64F).w
00002F2E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00002F32 4EB8 2BDE                  		jsr	Demo_Time
00002F36 4E71                       		nop
00002F38                            loc_4862:                               ; CODE XREF: ROM:00004846j
00002F38 4EB8 29AC                  		jsr		HudUpdateAlways
00002F3C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00002F40 4E73                       		rte		
00002F42                            ; End of function PalToCRAM
00002F42                            
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            ; Subroutine to	initialise joypads
00002F42                            ; ---------------------------------------------------------------------------
00002F42                            
00002F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F42                            
00002F42                            
00002F42                            JoypadInit:				; XREF: GameClrRAM
00002F42 33FC 0100 00A1 1100 0839+  		stopZ80 ; stop the Z80
00002F54                            
00002F54                            Joypad_WaitZ80:
00002F54 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00002F5C 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00002F5E 7040                       		moveq	#$40,d0
00002F60 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00002F66 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00002F6C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00002F72                            ;		jsr	sndDriverInput
00002F72 33FC 0000 00A1 1100        		startZ80	; start	the Z80
00002F7A 4E75                       		rts	
00002F7C                            ; End of function JoypadInit
00002F7C                            
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; Subroutine to read joypad input, and send it to the RAM
00002F7C                            ; ---------------------------------------------------------------------------
00002F7C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002F7C                            
00002F7C                            ; sub_111C:
00002F7C                            ReadJoypads:
00002F7C 41F8 F604                  	lea	(Ctrl_1).w,a0	; address where joypad states are written
00002F80 43F9 00A1 0003             	lea	(Z80_Port_1_Data+1).l,a1	; first joypad port
00002F86 0810 0006                  	btst	#button_A,(a0)	; was button A held
00002F8A 6700                       	beq.s	Game_no_reset			; if not, branch
00002F8C 0810 0004                  	btst	#button_B,(a0)	; was button B held 
00002F90 6700                       	beq.s	Game_no_reset			; if not, branch
00002F92 0810 0005                  	btst	#button_C,(a0)	; was button C held 
00002F96 6700                       	beq.s	Game_no_reset			; if not, branch
00002F98 0810 0007                  	btst	#7,(a0) ; was Start button held?
00002F9C 6700                       	beq.s	Game_no_reset	; if not, branch
00002F9E 4EF8 021E                  	jmp		EntryPoint
00002FA2                            
00002FA2                            Game_no_reset:	
00002FA2 6100                       	bsr.s	Joypad_Read		; do the first joypad
00002FA4 5449                       	addq.w	#2,a1			; do the second joypad
00002FA6                            ; End of function ReadJoypads
00002FA6                            
00002FA6                            
00002FA6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002FA6                            
00002FA6                            ; sub_112A:
00002FA6                            Joypad_Read:
00002FA6 12BC 0000                  	move.b	#0,(a1)
00002FAA 4E71                       	nop
00002FAC 4E71                       	nop
00002FAE 1011                       	move.b	(a1),d0
00002FB0 E508                       	lsl.b	#2,d0
00002FB2 0200 00C0                  	andi.b	#$C0,d0
00002FB6 12BC 0040                  	move.b	#$40,(a1)
00002FBA 4E71                       	nop
00002FBC 4E71                       	nop
00002FBE 1211                       	move.b	(a1),d1
00002FC0 0201 003F                  	andi.b	#$3F,d1
00002FC4 8001                       	or.b	d1,d0
00002FC6 4600                       	not.b	d0
00002FC8 1210                       	move.b	(a0),d1
00002FCA B101                       	eor.b	d0,d1
00002FCC 10C0                       	move.b	d0,(a0)+
00002FCE C200                       	and.b	d0,d1
00002FD0 10C1                       	move.b	d1,(a0)+
00002FD2 4E75                       	rts
00002FD4                            ; End of function Joypad_Read
00002FD4                            
00002FD4                            
00002FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FD4                            
00002FD4                            
00002FD4                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00002FD4 41F9 00C0 0004             		lea	($C00004).l,a0
00002FDA 43F9 00C0 0000             		lea	($C00000).l,a1
00002FE0 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00002FE6 7E12                       		moveq	#$12,d7
00002FE8                            
00002FE8                            VDP_Loop:
00002FE8 309A                       		move.w	(a2)+,(a0)
00002FEA 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00002FEE 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00002FF4 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00002FF8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00002FFE 7000                       		moveq	#0,d0
00003000 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000300A 3280                       		move.w	d0,(a1)
0000300C 3280                       		move.w	d0,(a1)
0000300E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l
00003018 3E3C 003F                  		move.w	#$3F,d7	
0000301C                            
0000301C                            VDP_ClrCRAM:
0000301C 3280                       		move.w	d0,(a1)
0000301E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00003022                            
00003022 42B8 F616                  		clr.l	($FFFFF616).w
00003026 42B8 F61A                  		clr.l	($FFFFF61A).w
0000302A 2F01                       		move.l	d1,-(sp)
0000302C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003032 3ABC 8F01                  		move.w	#$8F01,(a5)
00003036 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000303C 3ABC 9780                  		move.w	#$9780,(a5)
00003040 2ABC 4000 0080             		move.l	#$40000080,(a5)
00003046 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000304E                            
0000304E                            loc_128E:
0000304E 3215                       		move.w	(a5),d1
00003050 0801 0001                  		btst	#1,d1
00003054 66F8                       		bne.s	loc_128E
00003056                            
00003056 3ABC 8F02                  		move.w	#$8F02,(a5)
0000305A 221F                       		move.l	(sp)+,d1
0000305C 4E75                       		rts	
0000305E                            ; End of function VDPSetupGame
0000305E                            
0000305E                            ; ===========================================================================
0000305E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00003060 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00003062 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00003064 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00003066 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00003068 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000306A 8600                       		dc.w $8600		; unused
0000306C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000306E 8800                       		dc.w $8800		; unused
00003070 8900                       		dc.w $8900		; unused
00003072 8A00                       		dc.w $8A00		; default H.interrupt register
00003074 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00003076 8C81                       		dc.w $8C81		; 40-cell display mode
00003078 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000307A 8E00                       		dc.w $8E00		; unused
0000307C 8F02                       		dc.w $8F02		; set VDP increment size
0000307E 9001                       		dc.w $9001		; 64-cell hscroll size
00003080 9100                       		dc.w $9100		; window horizontal position
00003082 9200                       		dc.w $9200		; window vertical position
00003084                            
00003084                            ; ---------------------------------------------------------------------------
00003084                            ; Subroutine to	clear the screen
00003084                            ; ---------------------------------------------------------------------------
00003084                            
00003084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003084                            
00003084                            
00003084                            ClearScreen:
00003084 4BF9 00C0 0004             		lea	($C00004).l,a5
0000308A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000308E 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00003094 3ABC 9780                  		move.w	#$9780,(a5)
00003098 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000309E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030A6                            
000030A6                            loc_12E6:
000030A6 3215                       		move.w	(a5),d1
000030A8 0801 0001                  		btst	#1,d1
000030AC 66F8                       		bne.s	loc_12E6
000030AE                            
000030AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000030B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030B8 3ABC 8F01                  		move.w	#$8F01,(a5)
000030BC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000030C2 3ABC 9780                  		move.w	#$9780,(a5)
000030C6 2ABC 6000 0083             		move.l	#$60000083,(a5)
000030CC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000030D4                            
000030D4                            loc_1314:
000030D4 3215                       		move.w	(a5),d1
000030D6 0801 0001                  		btst	#1,d1
000030DA 66F8                       		bne.s	loc_1314
000030DC                            
000030DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000030E0 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000030E8 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000030F0 43F8 F800                  		lea	(Sprite_Table).w,a1
000030F4 7000                       		moveq	#0,d0
000030F6 323C 00A0                  		move.w	#$A0,d1
000030FA                            
000030FA                            loc_133A:
000030FA 22C0                       		move.l	d0,(a1)+
000030FC 51C9 FFFC                  		dbf	d1,loc_133A
00003100                            
00003100 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003104 7000                       		moveq	#0,d0
00003106 323C 0100                  		move.w	#$100,d1
0000310A                            
0000310A                            loc_134A:
0000310A 22C0                       		move.l	d0,(a1)+
0000310C 51C9 FFFC                  		dbf	d1,loc_134A
00003110 4E75                       		rts	
00003112                            ; End of function ClearScreen
00003112                            
00003112                            JmpTo_SoundDriverLoad: 
00003112 4E71                       	nop
00003114 4EF9 0000 0000             	jmp	(SoundDriverLoad).l
0000311A                            
0000311A                            SoundDriverLoad_Routine:
0000311A                            	include	"s1sounddriver.asm"
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            ; Subroutine to	load the sound driver
0000311A                            ; ---------------------------------------------------------------------------
0000311A                            
0000311A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000311A                            
0000311A                            
0000311A                            SoundDriverLoad:            ; XREF: GameClrRAM; TitleScreen
0000311A                            LoadZ80drv:
0000311A 4E71                       		nop
0000311C 33FC 0100 00A1 1100        		move.w	#$100,(z80_bus_request).l
00003124 33FC 0100 00A1 1200        		resetZ80
0000312C 41F9 0000 01A4             		lea		(RomEndLoc).l,a0
00003132 2010                       		move.l	(a0),d0
00003134 5280                       		addq.l	#1,d0
00003136 2040                       		movea.l	d0,a0
00003138 43F9 00A0 0000             		lea	($A00000).l,a1
0000313E 4EB9 0000 0000             		jsr   (KosDec).l
00003144                            ; 		lea	(DriverResetData).l,a0
00003144                            ;		lea	($A01C8A).l,a1									; z80 ram start of variables (A01C00 in older version)
00003144                            ;		move.w	#DriverResetDataEnd-DriverResetData,d0
00003144                             
00003144                            ;DriverResetDataLoadLoop:
00003144                            ;		move.b	(a0)+,(a1)+
00003144                            ;		dbf	d0,DriverResetDataLoadLoop
00003144 0839 0000 00C0 0005        	btst	#0,($C00005).l	; check video mode
0000314C 56F9 00A0 1C02             		sne		($A01C02).l          					; set PAL mode flag 
00003152                            
00003152 33FC 0000 00A1 1200        		resetZ80a
0000315A 4E71                       		nop
0000315C 4E71                       		nop	
0000315E 4E71                       		nop	
00003160 4E71                       		nop	
00003162 33FC 0100 00A1 1200        		resetZ80
0000316A 33FC 0000 00A1 1100        		startZ80
00003172 4E75                       		rts
00003174                            ; End of function SoundDriverLoad
00003174                             
00003174                            DriverResetData:
00003174 0000 0000 0000 0000 0000+  		dc.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00003184                            DriverResetDataEnd:
00003184                            ;End of function SoundDriverLoad
00003184                            ; ---------------------------------------------------------------------------
00003184                            ; Subroutines to control Mega PCM
00003184                            ; ---------------------------------------------------------------------------
00003184                            
00003184                            ;Z80_RAM			equ	$A00000
00003184 =00001FFC                  MegaPCM_InputFlag	equ	$1FFC  
00003184 =00001FFD                  MegaPCM_Mode		equ	$1FFD
00003184 =00001FFE                  MegaPCM_DAC_Number_2	equ	$1FFE
00003184 =00001FFF                  MegaPCM_DAC_Number	equ	$1FFF
00003184                            
00003184                            ; ---------------------------------------------------------------------------
00003184                            PlaySample:
00003184 47F9 00A0 0000             	lea	Z80_RAM,a3
0000318A 33FC 0100 00A1 1100 0839+  	stopz80
0000319C 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031A2 1740 1FFF                  	move.b	d0,MegaPCM_DAC_Number(a3)
000031A6 33FC 0000 00A1 1100        	startZ80
000031AE 4E75                       	rts
000031B0                            
000031B0                            ; ---------------------------------------------------------------------------
000031B0                            PlaySample_2:
000031B0 47F9 00A0 0000             	lea	Z80_RAM,a3
000031B6 33FC 0100 00A1 1100 0839+  	stopZ80
000031C8 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031CE 1740 1FFE                  	move.b	d0,MegaPCM_DAC_Number_2(a3)
000031D2 33FC 0000 00A1 1100        	startZ80
000031DA 4E75                       	rts
000031DC                            
000031DC                            ; ---------------------------------------------------------------------------
000031DC                            Set_MegaPCM_Mode:
000031DC 47F9 00A0 0000             	lea	Z80_RAM,a3
000031E2 33FC 0100 00A1 1100 0839+  	stopZ80
000031F4 177C 0001 1FFC             	move.b	#1,MegaPCM_InputFlag(a3)
000031FA 1740 1FFD                  	move.b	d0,MegaPCM_Mode(a3)
000031FE 33FC 0000 00A1 1100        	startZ80
00003206 4E75                       	rts
00003206 4E75                       	rts
00003208 4E75                       	rts
0000320A                            
0000320A                            
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            ; Subroutine to play a DAC sample
0000320A                            ; ---------------------------------------------------------------------------
0000320A                            
0000320A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000320A                            
0000320A                            
0000320A                            PlayDAC:
0000320A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00003210 4E75                       		rts	
00003212                            ; End of function PlayDAC
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	load the PCM sound driver
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            ;PCMDriverLoad: ; XREF: GameClrRAM; TitleScreen
00003212                            ;		move.w #0,($A11200).l
00003212                            ;		move.w #$100,($A11100).l ; stop the Z80
00003212                            ;		move.w #$100,($A11200).l ; reset the Z80
00003212                            
00003212                            ;		stopZ80
00003212                            ;		lea (Z802),a0		; load sound driver
00003212                            ;		lea ($A00000).l,a1
00003212                            ;		move.w #Z802End-Z802,d1
00003212                            
00003212                            ;LoadDriver:
00003212                            ;		move.b (a0)+,(a1)+
00003212                            ;		dbf d1,LoadDriver
00003212                            ;		move.b #$01,($FFFFFFFF).w	; set PCM Driver flag
00003212                            ;		rts
00003212                            
00003212                            ;Z802:
00003212                            ;	if PCMDC=1
00003212                            ;		incbin sound\driver\pcmdC.bin
00003212                            ;	else
00003212                            ;		incbin sound\driver\pcmd.bin
00003212                            ;	endif
00003212                            ;		even
00003212                            		
00003212                            ;Z802End:
00003212                            ;		rts
00003212                            ; End of function PCMDriverLoad
00003212                            
00003212                            ; ---------------------------------------------------------------------------
00003212                            ; Subroutine to	play a sound or	music track
00003212                            ; ---------------------------------------------------------------------------
00003212                            
00003212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003212                            
00003212                            
00003212                            PlaySound:
00003212 0C40 00FB                  		cmpi.w	#$FB,d0
00003216 6D00                       		blt.s	PlayNotSpecialFlag
00003218 6200                       		bhi.s	TestForNormalSpeed
0000321A 303C 0008                  		move	#8,d0
0000321E 4EF9 0000 0000             		jmp	SetTempo
00003224                             
00003224                            TestForNormalSpeed:
00003224 0C40 00FC                  		cmpi.w	#$FC,d0
00003228 6600                       		bne.s	PlayNotSpecialFlag
0000322A 4240                       		clr.w	d0
0000322C 4EF9 0000 0000             		jmp	SetTempo
00003232                             
00003232                            PlayNotSpecialFlag:
00003232 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000323A                             
0000323A                            PlaySoundZ80NotStopped:
0000323A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003242 66F6                       		bne.s	PlaySoundZ80NotStopped	; loop until it says it's stopped
00003244 13C0 00A0 1C0A             		move.b	d0,($A01C0A).l
0000324A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003252 4E75                       		rts
00003254                            ; End of function PlaySound
00003254                             
00003254                            ; ---------------------------------------------------------------------------
00003254                            ; Exclusive sound/music subroutine
00003254                            ; ---------------------------------------------------------------------------
00003254                             
00003254                             
00003254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003254                             
00003254                             
00003254                             
00003254                            PlaySound_Ex:
00003254 4A28 0004                  		tst.b	4(A0)
00003258 6A00                       		bpl.s	SkipPlaySound_Special
0000325A                            
0000325A                            ; ---------------------------------------------------------------------------
0000325A                            ; Unused sound/music subroutine
0000325A                            ; ---------------------------------------------------------------------------
0000325A                             
0000325A                            PlaySound_Unk:
0000325A 4E71                       		nop
0000325C                            ; ---------------------------------------------------------------------------
0000325C                            ; Subroutine to	play a special sound/music (FB-FF)
0000325C                            ; ---------------------------------------------------------------------------
0000325C                             
0000325C                            PlaySound_Special:
0000325C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003264                             
00003264                            PlaySound_SpecialZ80NotStopped:
00003264 0839 0000 00A1 1100        		btst	#0,($A11100).l
0000326C 66F6                       		bne.s	PlaySound_SpecialZ80NotStopped
0000326E B039 00A0 1C0B             		cmp.b	($A01C0B).l,d0
00003274 6700                       		beq.s	PlaySound_Special1
00003276 4A39 00A0 1C0B             		tst.b	($A01C0B).l
0000327C 6600                       		bne.s	PlaySound_Special0
0000327E 13C0 00A0 1C0B             		move.b	d0,($A01C0B).l
00003284 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000328C 4E75                       		rts
0000328E                             
0000328E                            PlaySound_Special0:
0000328E 13C0 00A0 1C0C             		move.b	d0,($A01C0C).l
00003294                             
00003294                            PlaySound_Special1:
00003294 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000329C                             
0000329C                            SkipPlaySound_Special:
0000329C 4E75                       		rts
0000329E                            ; End of function PlaySound_Special
0000329E                             
0000329E                            ; ---------------------------------------------------------------------------
0000329E                            ; Subroutine to change the music tempo
0000329E                            ; ---------------------------------------------------------------------------
0000329E                             
0000329E                            SetTempo:
0000329E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
000032A6                             
000032A6                            SetTempoZ80NotStopped:
000032A6 0839 0000 00A1 1100        		btst	#0,($A11100).l
000032AE 66F6                       		bne.s	SetTempoZ80NotStopped
000032B0 13C0 00A0 1C08             		move.b	D0,($A01C08).l
000032B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000032BE 4E75                       		rts
000032C0                            
000032C0                            
000032C0                            ; -------------------------------------------------------------------------
000032C0                            ; Pause Game Module new beta pause code below
000032C0                            ; -------------------------------------------------------------------------
000032C0                            
000032C0 =FFFFD040                  obj_Pause = $FFFFD040
000032C0                            
000032C0                            ;PauseGame:				; XREF: Level_MainLoop; et al
000032C0                            ;	tst.b	$FFFFF605		; is Start button pressed?
000032C0                            ;	bpl	NoPause			; if not, branch
000032C0                            ;	cmpi.b	#6,$FFFFD024		; is Sonic dying?
000032C0                            ;	bcc	NoPause			; if yes, branch
000032C0                            ;	tst.b	$FFFFD080		; are Title Cards or Level Results being processed?
000032C0                            ;	bne	NoPause			; if yes, branch
000032C0                            ;	tst.w	$FFFFD130 ; has title card sequence finished?
000032C0                            ;	bne	NoPause	; if not, branch
000032C0                            ;	tst.w	$FFFFD5C0
000032C0                            ;	bne	NoPause
000032C0                            	; Prepare to pause the game
000032C0                            ;	move.w	#1,($FFFFF63A).w	; freeze time
000032C0                            ;	move.b	#1,($FFFFF003).w	; pause music
000032C0                            ;	move.b	$FFFFD1C0,obj_Pause+$1F		; ++ hide spin dust object
000032C0                            ;	sf.b	$FFFFD1C0
000032C0                            
000032C0                            	; Load Pause art
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; synchronize
000032C0                            ;	jsr	DelayProgram		;
000032C0                            ;	jsr	Pause_LoadBGArt
000032C0                            
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	DisplaySprite		; add it to the sprites list
000032C0                            ;	jsr	SaveSpriteList		;
000032C0                            
000032C0                            ;Pause_Loop:
000032C0                            	; Main display & processing stuff
000032C0                            ;	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
000032C0                            ;	jsr	DelayProgram		; render frame
000032C0                            ;	jsr	RunPLC_RAM
000032C0                            ;	lea	obj_Pause,a0		; load pause menu object
000032C0                            ;	jsr	Obj04		; run its code
000032C0                            ;	jsr	LoadSpriteList
000032C0                            ;	jsr	BuildSprites
000032C0                            
000032C0                            	; Check if tha game should be unpaused
000032C0                            ;	tst.b	$FFFFF605		; was Start pressed?
000032C0                            ;	bpl.s	Pause_Loop		; if not, branch     
000032C0                            
000032C0                            ;	move.b	obj_Pause+$1F,$FFFFD1C0	; ++ display spin dust object 
000032C0                            	
000032C0                            	; Kill "PAUSE" objecto
000032C0                            ;	lea	obj_Pause,a0
000032C0                            ;	jsr	DeleteObject
000032C0                            
000032C0                            ;	jsr	sub_F2F8
000032C0                            ;	tst.w	($FFFFFE08).w
000032C0                            ;	bne.s	@0
000032C0                            ;	cmpi.b	#6,($FFFFD024).w
000032C0                            ;	bcc.s	@1
000032C0                            ;@0	jsr	DeformBgLayer
000032C0                            ;@1
000032C0                            
000032C0                            ; ============================================================================
000032C0                            
000032C0                            ;Unpause:
000032C0                            ;		moveq	#0,d0
000032C0                            ;		move.b	($FFFFFFBA).w,d0
000032C0                            ;		add.b	d0,d0
000032C0                            ;		move.w	Pause_Index(pc,d0.w),d1
000032C0                            ;		jmp	Pause_Index(pc,d1.w)
000032C0                            ; ===========================================================================
000032C0                            ;Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
000032C0                            ;		dc.w Pause_Unpause_3-Pause_Index
000032C0                            ;		dc.w Pause_GotoTitle-Pause_Index
000032C0                            ;Pause_GotoTitle:
000032C0                            ;		move.b	#4,($FFFFF600).w
000032C0                            ;		nop
000032C0                            ;		jmp		Pause_UnpauseFin
000032C0                            ;Pause_Unpause_3:
000032C0                            ;	move.w	#1,($FFFFFE02).w ; restart level
000032C0                            		
000032C0                            ;Pause_UnpauseFin:
000032C0                            ;	move.b	#$80,($FFFFF003).w
000032C0                            ;	move.w	#0,($FFFFF63A).w
000032C0                            
000032C0                            ;NoPause	rts
000032C0                            
000032C0                            ; ===============================================================
000032C0                            
000032C0                            ;Pause_LoadBGArt:
000032C0                            ;		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
000032C0                            ;		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
000032C0                            ;								; In this case, VRAM = $541*20
000032C0                            ;		move.w	#$40,d3
000032C0                            ;		jsr	(QueueDMATransfer).l
000032C0                            ;		rts
000032C0                            
000032C0                            
000032C0                            ; ---------------------------------------------------------------
000032C0                            ; Subroutine to save sprite list
000032C0                            ; ---------------------------------------------------------------
000032C0                            
000032C0                            SaveSpriteList:
000032C0 41F8 D070                  	lea	obj_Pause+$30,a0
000032C4 43F8 AC00                  	lea	$FFFFAC00,a1
000032C8 30D1                       	move.w	(a1),(a0)+		; save layer 0
000032CA 30E9 0080                  	move.w	$80(a1),(a0)+		; save layer 1
000032CE 30E9 0100                  	move.w	$100(a1),(a0)+		; save layer 2
000032D2 30E9 0180                  	move.w	$180(a1),(a0)+		; save layer 3
000032D6 30E9 0200                  	move.w	$200(a1),(a0)+		; save layer 4
000032DA 30E9 0280                  	move.w	$280(a1),(a0)+		; save layer 5
000032DE 30E9 0300                  	move.w	$300(a1),(a0)+		; save layer 6
000032E2 30E9 0380                  	move.w	$380(a1),(a0)+		; save layer 7
000032E6 4E75                       	rts
000032E8                            
000032E8                            ; ---------------------------------------------------------------
000032E8                            ; Subroutine to load sprite list
000032E8                            ; ---------------------------------------------------------------
000032E8                            
000032E8                            LoadSpriteList:
000032E8 41F8 D070                  	lea	obj_Pause+$30,a0
000032EC 43F8 AC00                  	lea	$FFFFAC00,a1
000032F0 3298                       	move.w	(a0)+,(a1)		; load layer 0
000032F2 3358 0080                  	move.w	(a0)+,$80(a1)		; load layer 1
000032F6 3358 0100                  	move.w	(a0)+,$100(a1)		; load layer 2
000032FA 3358 0180                  	move.w	(a0)+,$180(a1)		; load layer 3
000032FE 3358 0200                  	move.w	(a0)+,$200(a1)		; load layer 4
00003302 3358 0280                  	move.w	(a0)+,$280(a1)		; load layer 5
00003306 3358 0300                  	move.w	(a0)+,$300(a1)		; load layer 6
0000330A 3358 0380                  	move.w	(a0)+,$380(a1)		; load layer 7
0000330E 4E75                       	rts
00003310                            
00003310                            ; ---------------------------------------------------------------------------
00003310                            ; Improved subroutine to	pause the game imported from Sonic 3K (edited)
00003310                            ; ---------------------------------------------------------------------------
00003310                            		
00003310                            ; =============== S U B R O U T I N E =======================================
00003310                            
00003310                            
00003310                            PauseGame:
00003310 4E71                       		nop
00003312 0C38 0018 F600             		cmpi.b	#$18,(Game_Mode).w
00003318 6D00                       		blt.s	Pause_Main
0000331A 4E75                       		rts
0000331C                            ; ---------------------------------------------------------------------------
0000331C                            
0000331C                            Pause_Main:
0000331C 4A78 D130                  		tst.w	($FFFFD130).w ; has title card sequence finished?
00003320 6600 0000                  		bne.w	Pause_Unpause	; if not, branch
00003324 4A78 D5C0                  		tst.w	($FFFFD5C0).w
00003328 6600 0000                  		bne.w	Pause_Unpause	
0000332C 4A38 FE12                  		tst.b	($FFFFFE12).w
00003330 6700 0000                  		beq.w	Pause_Unpause
00003334 4A78 F63A                  		tst.w	($FFFFF63A).w
00003338 6600                       		bne.s	Pause_Main2
0000333A 1038 F605                  		move.b	($FFFFF605).w,d0
0000333E 0200 0080                  		andi.b	#$80,d0	; is Start pressed?
00003342 6700 0000                  		beq.w	Pause_NoPause	; if not, branch
00003346                            		;jsr		Pause_LoadBGArt
00003346                            Pause_Main2:
00003346 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000334C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00003354                             
00003354                            PauseGameZ80NotStopped:
00003354 0839 0000 00A1 1100        		btst	#0,($A11100).l
0000335C 66F6                       		bne.s	PauseGameZ80NotStopped
0000335E 13FC 0001 00A0 1C10        		move.b	#1,($A01C10).l
00003366 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000336E                             
0000336E                            PauseGameLoop:
0000336E                            		
0000336E 11FC 0010 F62A             			move.b	#$10,($FFFFF62A).w	; synchronize
00003374 4EB9 0000 0000             	jsr	DelayProgram		;
0000337A 4EB9 0000 0000             	jsr	Pause_LoadBGArt
00003380                            
00003380 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
00003384 4EB9 0000 0000             	jsr	Obj04		; run its code
0000338A 4EB9 0000 0000             	jsr	DisplaySprite		; add it to the sprites list
00003390 4EB8 32C0                  	jsr	SaveSpriteList	
00003394                            Pause_Loop:
00003394 11FC 0010 F62A             	move.b	#$10,($FFFFF62A).w	; was $10, normal is 8, $C
0000339A 4EB9 0000 0000             	jsr	DelayProgram		; render frame
000033A0 4EB9 0000 0000             	jsr	RunPLC_RAM
000033A6 41F8 D040                  	lea	obj_Pause,a0		; load pause menu object
000033AA 4EB9 0000 0000             	jsr	Obj04		; run its code
000033B0 4EB8 32E8                  	jsr	LoadSpriteList
000033B4 4EB9 0000 0000             	jsr	BuildSprites
000033BA                            Pause_GotoTitle:		
000033BA 4A38 FFD1                  		tst.b	(slow_motion_flag).w
000033BE 6700 0000                  		beq.w	Pause_NoSlowMo
000033C2 0838 0006 F605             		btst	#6,($FFFFF605).w
000033C8 6700 0000                  		beq.w	Pause_ChkFrameAdvance	; branch if A isn't pressed
000033CC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000033D2 4E71                       		nop
000033D4 6000                       		bra.s	Pause_ResumeMusic
000033D6                            		
000033D6                            ; ---------------------------------------------------------------------------
000033D6                            
000033D6                            Pause_ChkFrameAdvance:
000033D6 0838 0004 F604             		btst	#4,($FFFFF604).w
000033DC 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if B is held
000033E0 0838 0005 F605             		btst	#5,($FFFFF605).w
000033E6 6600 0000                  		bne.w	Pause_FrameAdvance	; branch if C is pressed
000033EA                            
000033EA                            Pause_NoSlowMo:
000033EA                            		;cmpi.b	#$E,($FFFFFE10).w
000033EA                            		;bcs.s	Pause_ChkStart	; if the zone is below ALZ
000033EA                            		;cmpi.b	#$12,($FFFFFE10).w
000033EA                            		;bhi.s	Pause_ChkStart	; if the zone is above EMZ
000033EA 4A38 FF70                  		tst.b	($FFFFFF70).w
000033EE 6A00                       		bpl.s	Pause_ChkStart
000033F0 0838 0004 F605             		btst	#4,($FFFFF605).w
000033F6 6700                       		beq.s	Pause_ChkStart
000033F8                            ;		move.b	#$C0,($FFFFF600).w	; If in time attack mode, go back to 2P menu if B is pressed
000033F8 6000                       		bra.s	Pause_ResumeMusic
000033FA                            ; ---------------------------------------------------------------------------
000033FA                            
000033FA                            Pause_ChkStart:
000033FA 1038 F605                  		move.b	($FFFFF605).w,d0
000033FE 0200 0080                  		andi.b	#$80,d0
00003402 6790                       		beq.s	Pause_Loop
00003404                            
00003404                            Pause_ResumeMusic:
00003404 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000340C                             
0000340C                            Pause_ChkStartZ80NotStopped:
0000340C 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003414 66F6                       		bne.s	Pause_ChkStartZ80NotStopped
00003416 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
0000341E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003426                            
00003426                            Pause_Unpause:
00003426 7000                       		moveq	#0,d0
00003428 1038 D05A                  		move.b	($FFFFD040+mapping_frame).w,d0
0000342C D000                       		add.b	d0,d0
0000342E 323B 0000                  		move.w	Pause_Index(pc,d0.w),d1
00003432 4EFB 1000                  		jmp	Pause_Index(pc,d1.w)
00003436                            ; ===========================================================================
00003436 0000                       Pause_Index:	dc.w Pause_UnpauseFin-Pause_Index
00003438 0000                       		dc.w Pause_Unpause_3-Pause_Index
0000343A 0000                       		dc.w Pause_Reset-Pause_Index
0000343C                            
0000343C                            ;		jmp		Pause_UnpauseFin
0000343C                            Pause_Reset:
0000343C 11FC 0000 F600             		move.b	#0,(Game_Mode).w
00003442 4EF8 0362                  		jmp		GameInit
00003446                            Pause_Unpause_3:
00003446 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000344C                            ;		jmp		Pause_UnpauseFin
0000344C                            		
0000344C                            ;Pause_Unpause_4:
0000344C                            ;		move.b	#0,($FFFFF600).w
0000344C                            ;		nop
0000344C                            ;		bra.w	Pause_ResumeMusic
0000344C                            Pause_UnpauseFin:
0000344C 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w
00003452 41F9 FFFF D040             		lea	($FFFFD040).l,a0
00003458 4EB9 0000 0000             		jsr	DeleteObject
0000345E                            Pause_NoPause:
0000345E 4E75                       		rts
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            Pause_FrameAdvance:
00003460 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00003466 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000346E                             
0000346E                            Pause_SlowMoZ80NotStopped:
0000346E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00003476 66F6                       		bne.s	Pause_SlowMoZ80NotStopped
00003478 13FC 0080 00A0 1C10        		move.b	#$80,($A01C10).l
00003480 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00003488 4E75                       		rts	; advance by a single frame
0000348A                            		
0000348A                            ;Pause_GotoTitle2:
0000348A                            ;		move.b	#4,($FFFFF600).w
0000348A                            ;		nop
0000348A                            ;		bra.s	Pause_ResumeMusic
0000348A                            ; End of function Pause_Game
0000348A                            Pause_LoadBGArt:
0000348A 223C 0000 0000             		move.l	#Unc_PauseMenuBG,d1			        ; Call for Regular Shield Art
00003490 343C BF80                  		move.w	#$BF80,d2			        ; Load Art from this location (VRAM location*20)
00003494                            								; In this case, VRAM = $541*20
00003494 363C 0040                  		move.w	#$40,d3
00003498 4EB9 0000 0000             		jsr	(QueueDMATransfer).l
0000349E 4E75                       		rts
000034A0                            
000034A0                            ; ---------------------------------------------------------------------------
000034A0                            ; Subroutine to	display	patterns via the VDP
000034A0                            ; ---------------------------------------------------------------------------
000034A0                            
000034A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034A0                            
000034A0                            
000034A0                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000034A0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034A6 283C 0080 0000             		move.l	#$800000,d4	; $800000
000034AC                            
000034AC                            loc_142C:
000034AC 2D40 0004                  		move.l	d0,VDP_control_port-VDP_data_port(a6)
000034B0 3601                       		move.w	d1,d3
000034B2                            
000034B2                            loc_1432:
000034B2 3C99                       		move.w	(a1)+,(a6)
000034B4 51CB FFFC                  		dbf	d3,loc_1432
000034B8 D084                       		add.l	d4,d0
000034BA 51CA FFF0                  		dbf	d2,loc_142C
000034BE 4E75                       		rts	
000034C0                            ; End of function ShowVDPGraphics
000034C0                            
000034C0                            ; =============== S U B	R O U T	I N E =======================================
000034C0                            
000034C0                            
000034C0                            ShowVDPGraphics2:				  ; ...
000034C0 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C6 283C 0100 0000             		move.l	#$1000000,d4
000034CC                            
000034CC                            loc_301144:					  ; ...
000034CC 2D40 0004                  		move.l	d0,4(a6)
000034D0 3601                       		move.w	d1,d3
000034D2                            
000034D2                            loc_30114A:					  ; ...
000034D2 3C99                       		move.w	(a1)+,(a6)
000034D4 51CB FFFC                  		dbf	d3,loc_30114A
000034D8 D084                       		add.l	d4,d0
000034DA 51CA FFF0                  		dbf	d2,loc_301144
000034DE 4E75                       		rts
000034E0                            ; End of function ShowVDPGraphics2
000034E0                            
000034E0                            ; ---------------------------------------------------------------------------
000034E0                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000034E0                            ; to be issued the next time ProcessDMAQueue is called.
000034E0                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000034E0                            ; by issuing the commands (this subroutine DOES check for overflow)
000034E0                            ; ---------------------------------------------------------------------------
000034E0                            
000034E0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000034E0                            
000034E0                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000034E0                            QueueDMATransfer:
000034E0 2278 C8FC                  	movea.l	(VDP_Command_Buffer_Slot).w,a1
000034E4 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
000034E8 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000034EA                            
000034EA                            	; piece together some VDP commands and store them for later...
000034EA 303C 9300                  	move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000034EE 1003                       	move.b	d3,d0
000034F0 32C0                       	move.w	d0,(a1)+ ; store command
000034F2                            
000034F2 303C 9400                  	move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000034F6 E04B                       	lsr.w	#8,d3
000034F8 1003                       	move.b	d3,d0
000034FA 32C0                       	move.w	d0,(a1)+ ; store command
000034FC                            
000034FC 303C 9500                  	move.w	#$9500,d0 ; command to specify source address & $0001FE
00003500 E289                       	lsr.l	#1,d1
00003502 1001                       	move.b	d1,d0
00003504 32C0                       	move.w	d0,(a1)+ ; store command
00003506                            
00003506 303C 9600                  	move.w	#$9600,d0 ; command to specify source address & $01FE00
0000350A E089                       	lsr.l	#8,d1
0000350C 1001                       	move.b	d1,d0
0000350E 32C0                       	move.w	d0,(a1)+ ; store command
00003510                            
00003510 303C 9700                  	move.w	#$9700,d0 ; command to specify source address & $FE0000
00003514 E089                       	lsr.l	#8,d1
00003516 1001                       	move.b	d1,d0
00003518 32C0                       	move.w	d0,(a1)+ ; store command
0000351A                            
0000351A 0282 0000 FFFF             	andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00003520 E58A                       	lsl.l	#2,d2
00003522 E44A                       	lsr.w	#2,d2
00003524 4842                       	swap	d2
00003526 0082 4000 0080             	ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
0000352C 22C2                       	move.l	d2,(a1)+ ; store command
0000352E                            
0000352E 21C9 C8FC                  	move.l	a1,(VDP_Command_Buffer_Slot).w ; set the next free slot address
00003532 B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00003536 6700                       	beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00003538 32BC 0000                  	move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000353C                            ; return_14AA:
0000353C                            QueueDMATransfer_Done:
0000353C 4E75                       	rts
0000353E                            ; End of function QueueDMATransfer
0000353E                            
0000353E                            
0000353E                            ; ---------------------------------------------------------------------------
0000353E                            ; Subroutine for issuing all VDP commands that were queued
0000353E                            ; (by earlier calls to QueueDMATransfer)
0000353E                            ; Resets the queue when it's done
0000353E                            ; ---------------------------------------------------------------------------
0000353E                            
0000353E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000353E                            
0000353E                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000353E                            ProcessDMAQueue:
0000353E 4BF9 00C0 0004             	lea	(VDP_control_port).l,a5
00003544 43F8 C800                  	lea	(VDP_Command_Buffer).w,a1
00003548                            ; loc_14B6:
00003548                            ProcessDMAQueue_Loop:
00003548 3019                       	move.w	(a1)+,d0
0000354A 6700                       	beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000354C                            	; issue a set of VDP commands...
0000354C 3A80                       	move.w	d0,(a5)		; transfer length
0000354E 3A99                       	move.w	(a1)+,(a5)	; transfer length
00003550 3A99                       	move.w	(a1)+,(a5)	; source address
00003552 3A99                       	move.w	(a1)+,(a5)	; source address
00003554 3A99                       	move.w	(a1)+,(a5)	; source address
00003556 3A99                       	move.w	(a1)+,(a5)	; destination
00003558 3A99                       	move.w	(a1)+,(a5)	; destination
0000355A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000355E 66E8                       	bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
00003560                            ; loc_14CE:
00003560                            ProcessDMAQueue_Done:
00003560 31FC 0000 C800             	move.w	#0,(VDP_Command_Buffer).w
00003566 21FC FFFF C800 C8FC        	move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000356E 4E75                       	rts
00003570                            ; End of function ProcessDMAQueue
00003570                            
00003570                            ; ---------------------------------------------------------------------------
00003570                            ; Subroutine to load uncompressed art
00003570                            ; ---------------------------------------------------------------------------
00003570                            
00003570                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003570                            
00003570                            
00003570                            LoadUncArt:
00003570 43F9 00C0 0000             		lea	($C00000), a1		;Mover VDP Control a "a1"
00003576                            
00003576                            LoadArt_Loop:
00003576 229A                       		move.l	(a2)+, (a1)		;$xxxxxxxx	<- linea a procesar
00003578 229A                       		move.l	(a2)+, (a1)
0000357A 229A                       		move.l	(a2)+, (a1)
0000357C 229A                       		move.l	(a2)+, (a1)
0000357E 229A                       		move.l	(a2)+, (a1)
00003580 229A                       		move.l	(a2)+, (a1)
00003582 229A                       		move.l	(a2)+, (a1)
00003584 229A                       		move.l	(a2)+, (a1)
00003586 51C8 FFEE                  		dbf	d0, LoadArt_Loop	;Repetir los pasos del d0
0000358A 4E75                       		rts
0000358C                            
0000358C                            ;====================================================================================
0000358C                            
0000358C                            
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            ; Nemesis decompression	algorithm
0000358C                            ; ---------------------------------------------------------------------------
0000358C                            
0000358C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000358C                            
0000358C                            
0000358C                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
0000358C                            
0000358C                            
0000358C                            ; ------------------------------------------------------------------------------
0000358C                            ; Nemesis decompression routine
0000358C                            ; ------------------------------------------------------------------------------
0000358C                            ; Optimized by vladikcomper
0000358C                            ; ------------------------------------------------------------------------------
0000358C                             
0000358C                            NemDec_RAM:
0000358C 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
00003590 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
00003594 6000                               bra.s   NemDec_Main
00003596                             
00003596                            ; ------------------------------------------------------------------------------
00003596                            NemDec:
00003596 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
0000359A 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
000035A0 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
000035A4                             
000035A4                            NemDec_Main:
000035A4 43F8 AA00                          lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
000035A8 3418                               move.w  (a0)+,d2                ; get number of patterns
000035AA 6A00                               bpl.s   @0                      ; are we in Mode 0?
000035AC 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
000035B0 E74A                       @0      lsl.w   #3,d2
000035B2 3A42                               movea.w d2,a5
000035B4 7607                               moveq   #7,d3
000035B6 7400                               moveq   #0,d2
000035B8 7800                               moveq   #0,d4
000035BA 6100 0000                          bsr.w   NemDec4
000035BE 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
000035C0 E145                               asl.w   #8,d5                   ; shift up by a byte
000035C2 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
000035C4 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
000035C8 6100                               bsr.s   NemDec2
000035CA 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
000035CE 4E75                               rts
000035D0                             
000035D0                            ; ---------------------------------------------------------------------------
000035D0                            ; Part of the Nemesis decompressor, processes the actual compressed data
000035D0                            ; ---------------------------------------------------------------------------
000035D0                             
000035D0                            NemDec2:
000035D0 3E06                               move.w  d6,d7
000035D2 5147                               subq.w  #8,d7                   ; get shift value
000035D4 3205                               move.w  d5,d1
000035D6 EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
000035D8 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
000035DC 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
000035DE 0241 00FF                          andi.w  #$FF,d1
000035E2 D241                               add.w   d1,d1
000035E4 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
000035E8 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
000035EC 6400                               bcc.s   @0                      ; if not, branch
000035EE 5046                               addq.w  #8,d6
000035F0 E145                               asl.w   #8,d5
000035F2 1A18                               move.b  (a0)+,d5                ; read next byte
000035F4 1231 1001                  @0      move.b  1(a1,d1.w),d1
000035F8 3001                               move.w  d1,d0
000035FA 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
000035FE 0240 00F0                          andi.w  #$F0,d0
00003602                             
00003602                            NemDec_GetRepeatCount:
00003602 E848                               lsr.w   #4,d0                   ; get repeat count
00003604                             
00003604                            NemDec_WritePixel:
00003604 E98C                               lsl.l   #4,d4                   ; shift up by a nybble
00003606 8801                               or.b    d1,d4                   ; write pixel
00003608 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
0000360C 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
0000360E                            ; ---------------------------------------------------------------------------
0000360E                             
0000360E                            NemDec3:
0000360E 7800                               moveq   #0,d4                   ; reset row
00003610 7607                               moveq   #7,d3                   ; reset nybble counter
00003612                             
00003612                            NemDec_WritePixelLoop:
00003612 51C8 FFF0                          dbf     d0,NemDec_WritePixel
00003616 60B8                               bra.s   NemDec2
00003618                            ; ---------------------------------------------------------------------------
00003618                             
00003618                            NemDec_InlineData:
00003618 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
0000361A 0C46 0009                          cmpi.w  #9,d6
0000361E 6400                               bcc.s   @0
00003620 5046                               addq.w  #8,d6
00003622 E145                               asl.w   #8,d5
00003624 1A18                               move.b  (a0)+,d5
00003626 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
00003628 3205                               move.w  d5,d1
0000362A EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
0000362C 3001                               move.w  d1,d0
0000362E 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00003632 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
00003636 0C46 0009                          cmpi.w  #9,d6
0000363A 64C6                               bcc.s   NemDec_GetRepeatCount
0000363C 5046                               addq.w  #8,d6
0000363E E145                               asl.w   #8,d5
00003640 1A18                               move.b  (a0)+,d5
00003642 60BE                               bra.s   NemDec_GetRepeatCount
00003644                             
00003644                            ; ---------------------------------------------------------------------------
00003644                            ; Subroutines to output decompressed entry
00003644                            ; Selected depending on current decompression mode
00003644                            ; ---------------------------------------------------------------------------
00003644                             
00003644                            NemDec_WriteRowToVDP:
00003644                            loc_1502:
00003644 2884                               move.l  d4,(a4)                 ; write 8-pixel row
00003646 534D                               subq.w  #1,a5
00003648 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
0000364A 66C2                               bne.s   NemDec3                 ; if not, branch
0000364C 4E75                               rts
0000364E                            ; ---------------------------------------------------------------------------
0000364E                             
0000364E                            NemDec_WriteRowToVDP_XOR:
0000364E B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00003650 2882                               move.l  d2,(a4)                 ; and write the result
00003652 534D                               subq.w  #1,a5
00003654 380D                               move.w  a5,d4
00003656 66B6                               bne.s   NemDec3
00003658 4E75                               rts
0000365A                            ; ---------------------------------------------------------------------------
0000365A                             
0000365A                            NemDec_WriteRowToRAM:
0000365A 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
0000365C 534D                               subq.w  #1,a5
0000365E 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00003660 66AC                               bne.s   NemDec3                 ; if not, branch
00003662 4E75                               rts
00003664                            ; ---------------------------------------------------------------------------
00003664                             
00003664                            NemDec_WriteRowToRAM_XOR:
00003664 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00003666 28C2                               move.l  d2,(a4)+                ; and write the result
00003668 534D                               subq.w  #1,a5
0000366A 380D                               move.w  a5,d4
0000366C 66A0                               bne.s   NemDec3
0000366E 4E75                               rts
00003670                             
00003670                            ; ---------------------------------------------------------------------------
00003670                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00003670                            ; ---------------------------------------------------------------------------
00003670                             
00003670                            NemDec4:
00003670 1018                               move.b  (a0)+,d0                ; read first byte
00003672                             
00003672                            @ChkEnd:
00003672 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
00003676 6600                               bne.s   @NewPalIndex            ; if not, branch
00003678 4E75                               rts
0000367A                            ; ---------------------------------------------------------------------------
0000367A                             
0000367A                            @NewPalIndex:
0000367A 3E00                               move.w  d0,d7
0000367C                             
0000367C                            @ItemLoop:
0000367C 1018                               move.b  (a0)+,d0                ; read next byte
0000367E 6BF2                               bmi.s   @ChkEnd                 ; ~~
00003680 1200                               move.b  d0,d1
00003682 0247 000F                          andi.w  #$F,d7                  ; get palette index
00003686 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
0000368A 8E41                               or.w    d1,d7                   ; combine the two
0000368C 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
00003690 1200                               move.b  d0,d1
00003692 E149                               lsl.w   #8,d1
00003694 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
00003696 7208                               moveq   #8,d1
00003698 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
0000369A 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
0000369C 1018                               move.b  (a0)+,d0                ; get code
0000369E D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
000036A0 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
000036A4 60D6                               bra.s   @ItemLoop               ; repeat
000036A6                            ; ---------------------------------------------------------------------------
000036A6                             
000036A6                            @ItemShortCode:
000036A6 1018                               move.b  (a0)+,d0                ; get code
000036A8 E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
000036AA D040                               add.w   d0,d0                   ; get index into code table
000036AC 7A01                               moveq   #1,d5
000036AE E36D                               lsl.w   d1,d5
000036B0 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
000036B2 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
000036B6                             
000036B6                            @ItemShortCodeLoop:
000036B6 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
000036B8 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
000036BC 60BE                               bra.s   @ItemLoop
000036BE                            
000036BE                            ; ---------------------------------------------------------------------------
000036BE                            ; Subroutine to load the art for the animals for the current zone
000036BE                            ; ---------------------------------------------------------------------------
000036BE                             
000036BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036BE                             
000036BE                             
000036BE                            LoadAnimalPLC:
000036BE 7000                       		moveq	#0,d0
000036C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000036C4 0C40 0007                  		cmpi.w	#7,d0
000036C8 6400                       		bhs.s	LoadAnimalPLC_New
000036CA 0640 0015                  		addi.w	#$15,d0
000036CE 6000                       		bra.s	LoadPLC
000036D0                            ; ---------------------------------------------------------------------------
000036D0                             
000036D0                            LoadAnimalPLC_New:
000036D0 5F40                       		subi.w	#7,d0
000036D2                            		; multiply d0 by 3
000036D2 3200                       		move.w	d0,d1
000036D4 D040                       		add.w	d0,d0
000036D6 D041                       		add.w	d1,d0
000036D8                            		; add $22 (this is the index of the animal PLC for the first added zone)
000036D8 0640 0022                  		addi.w	#$22,d0
000036DC                            		; bra.s	LoadPLC
000036DC                            ; End of function LoadAnimalPLC
000036DC                            
000036DC                            ; =============== S U B R O U T I N E =======================================
000036DC                            
000036DC                            
000036DC                            Load_PLC_Raw:
000036DC 45F8 F680                  		lea	($FFFFF680).w,a2
000036E0                            
000036E0                            @findFreeSlot:
000036E0 4A92                       		tst.l	(a2)
000036E2 6700                       		beq.s	@getPieceCount
000036E4 5C4A                       		addq.w	#6,a2
000036E6 60F8                       		bra.s	@findFreeSlot
000036E8                            ; ---------------------------------------------------------------------------
000036E8                            
000036E8                            @getPieceCount:
000036E8 3019                       		move.w	(a1)+,d0
000036EA 6B00                       		bmi.s	@done
000036EC                            
000036EC                            @queuePieces:
000036EC 24D9                       		move.l	(a1)+,(a2)+
000036EE 34D9                       		move.w	(a1)+,(a2)+
000036F0 51C8 FFFA                  		dbf	d0,@queuePieces
000036F4                            
000036F4                            @done:
000036F4 4E75                       		rts
000036F6                            ; End of function Load_PLC_Raw
000036F6                            
000036F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036F6                            
000036F6                            LoadPLC:
000036F6 48E7 0060                  		movem.l	a1-a2,-(sp)
000036FA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00003700 D040                       		add.w	d0,d0
00003702 3031 0000                  		move.w	(a1,d0.w),d0
00003706 43F1 0000                  		lea	(a1,d0.w),a1
0000370A 45F8 F680                  		lea	($FFFFF680).w,a2
0000370E                            
0000370E                            loc_1598:
0000370E 4A92                       		tst.l	(a2)
00003710 6700                       		beq.s	loc_15A0
00003712 5C4A                       		addq.w	#6,a2
00003714 60F8                       		bra.s	loc_1598
00003716                            ; ===========================================================================
00003716                            
00003716                            loc_15A0:				; XREF: LoadPLC
00003716 3019                       		move.w	(a1)+,d0
00003718 6B00                       		bmi.s	loc_15AC
0000371A                            
0000371A                            loc_15A4:
0000371A 24D9                       		move.l	(a1)+,(a2)+
0000371C 34D9                       		move.w	(a1)+,(a2)+
0000371E 51C8 FFFA                  		dbf	d0,loc_15A4
00003722                            
00003722                            loc_15AC:
00003722 4CDF 0600                  		movem.l	(sp)+,a1-a2
00003726 4E75                       		rts	
00003728                            ; End of function LoadPLC
00003728                            
00003728                            
00003728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003728                            
00003728                            
00003728                            LoadPLC2:
00003728 48E7 0060                  		movem.l	a1-a2,-(sp)
0000372C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00003732 D040                       		add.w	d0,d0
00003734 3031 0000                  		move.w	(a1,d0.w),d0
00003738 43F1 0000                  		lea	(a1,d0.w),a1
0000373C 6100                       		bsr.s	ClearPLC
0000373E 45F8 F680                  		lea	($FFFFF680).w,a2
00003742 3019                       		move.w	(a1)+,d0
00003744 6B00                       		bmi.s	loc_15D8
00003746                            
00003746                            loc_15D0:
00003746 24D9                       		move.l	(a1)+,(a2)+
00003748 34D9                       		move.w	(a1)+,(a2)+
0000374A 51C8 FFFA                  		dbf	d0,loc_15D0
0000374E                            
0000374E                            loc_15D8:
0000374E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00003752 4E75                       		rts	
00003754                            ; End of function LoadPLC2
00003754                            
00003754                            ; ---------------------------------------------------------------------------
00003754                            ; Subroutines to load pattern load cues
00003754                            
00003754                            ; input:
00003754                            ;	d0 = pattern load cue number
00003754                            ; ---------------------------------------------------------------------------
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754 =000036F6                  AddPLC	=	LoadPLC
00003754                            ; End of function AddPLC
00003754                            
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754 =00003728                  NewPLC	=	LoadPLC2
00003754                            ; End of function NewPLC
00003754                            
00003754                            ; ---------------------------------------------------------------------------
00003754                            ; Subroutine to	clear the pattern load cues
00003754                            ; ---------------------------------------------------------------------------
00003754                            
00003754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003754                            
00003754                            
00003754                            ClearPLC:				; XREF: LoadPLC2
00003754 45F8 F680                  		lea	($FFFFF680).w,a2
00003758 701F                       		moveq	#$1F,d0
0000375A                            
0000375A                            ClearPLC_Loop:
0000375A 429A                       		clr.l	(a2)+
0000375C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00003760 4E75                       		rts	
00003762                            ; End of function ClearPLC
00003762                            
00003762                            ; ---------------------------------------------------------------------------
00003762                            ; Subroutine to	use graphics listed in a pattern load cue
00003762                            ; ---------------------------------------------------------------------------
00003762                            
00003762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003762                            
00003762                            
00003762                            RunPLC_RAM:				; XREF: Pal_FadeTo
00003762 4AB8 F680                  		tst.l	($FFFFF680).w
00003766 6700                       		beq.s	locret_1640
00003768 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000376C 6600                       		bne.s	locret_1640
0000376E 2078 F680                  		movea.l	($FFFFF680).w,a0
00003772 47FA FED0                  		lea	loc_1502(pc),a3
00003776 4E71                       		nop
00003778 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000377C 3418                       		move.w	(a0)+,d2
0000377E 6A00                       		bpl.s	loc_160E
00003780 D6FC 000A                  		adda.w	#$A,a3
00003784                            
00003784                            loc_160E:
00003784 0242 7FFF                  		andi.w	#$7FFF,d2
00003788 4EB8 3670                  		jsr	NemDec4
0000378C 1A18                       		move.b	(a0)+,d5
0000378E E145                       		asl.w	#8,d5
00003790 1A18                       		move.b	(a0)+,d5
00003792 7C10                       		moveq	#$10,d6
00003794 7000                       		moveq	#0,d0
00003796 21C8 F680                  		move.l	a0,($FFFFF680).w
0000379A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000379E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000037A2 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000037A6 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000037AA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000037AE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000037B2 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000037B6                            
000037B6                            locret_1640:
000037B6 4E75                       		rts	
000037B8                            ; End of function RunPLC_RAM
000037B8                            
000037B8                            
000037B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037B8                            
000037B8                            
000037B8                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000037B8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037BC 6700 0000                  		beq.w	locret_16DA
000037C0 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000037C6 7000                       		moveq	#0,d0
000037C8 3038 F684                  		move.w	($FFFFF684).w,d0
000037CC 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000037D2 6000                       		bra.s	loc_1676
000037D4                            ; End of function sub_1642
000037D4                            
000037D4                            
000037D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037D4                            
000037D4                            
000037D4                            sub_165E:				; XREF: Demo_Time
000037D4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000037D8 6700                       		beq.s	locret_16DA
000037DA 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000037E0 7000                       		moveq	#0,d0
000037E2 3038 F684                  		move.w	($FFFFF684).w,d0
000037E6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000037EC                            
000037EC                            loc_1676:				; XREF: sub_1642
000037EC 49F9 00C0 0004             		lea	($C00004).l,a4
000037F2 E588                       		lsl.l	#2,d0
000037F4 E448                       		lsr.w	#2,d0
000037F6 0040 4000                  		ori.w	#$4000,d0
000037FA 4840                       		swap	d0
000037FC 2880                       		move.l	d0,(a4)
000037FE 594C                       		subq.w	#4,a4
00003800 2078 F680                  		movea.l	($FFFFF680).w,a0
00003804 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00003808 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000380C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00003810 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00003814 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00003818 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
0000381C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00003820                            
00003820                            loc_16AA:				; XREF: sub_165E
00003820 3A7C 0008                  		movea.w	#8,a5
00003824 4EB8 360E                  		jsr	NemDec3
00003828 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
0000382C 6700                       		beq.s	loc_16DC
0000382E 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00003832 66EC                       		bne.s	loc_16AA
00003834 21C8 F680                  		move.l	a0,($FFFFF680).w
00003838 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000383C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00003840 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00003844 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00003848 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000384C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00003850                            
00003850                            locret_16DA:				; XREF: sub_1642
00003850 4E75                       		rts	
00003852                            ; ===========================================================================
00003852                            
00003852                            loc_16DC:                       ; XREF: sub_165E
00003852 41F8 F680                                  lea     ($FFFFF680).w,a0
00003856 43E8 0006                                  lea     6(a0),a1
0000385A 700E                                       moveq   #$E,d0          ; do $F cues
0000385C                            
0000385C                            loc_16E2:                               ; XREF: sub_165E
0000385C 20D9                                       move.l  (a1)+,(a0)+
0000385E 30D9                                       move.w  (a1)+,(a0)+
00003860 51C8 FFFA                                  dbf     d0,loc_16E2
00003864                                            
00003864 7000                                       moveq   #0,d0
00003866 20C0                                       move.l  d0,(a0)+        ; clear the last cue to avoid overcopying it
00003868 30C0                                       move.w  d0,(a0)+        ;
0000386A 4E75                                       rts
0000386C                            ; End of function sub_165E
0000386C                            
0000386C                            ; ---------------------------------------------------------------------------
0000386C                            ; Subroutine to	execute	the pattern load cue
0000386C                            ; ---------------------------------------------------------------------------
0000386C                            
0000386C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000386C                            
0000386C                            
0000386C                            RunPLC_ROM:
0000386C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00003872 D040                       		add.w	d0,d0
00003874 3031 0000                  		move.w	(a1,d0.w),d0
00003878 43F1 0000                  		lea	(a1,d0.w),a1
0000387C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000387E                            
0000387E                            RunPLC_Loop:
0000387E 2059                       		movea.l	(a1)+,a0	; get art pointer
00003880 7000                       		moveq	#0,d0
00003882 3019                       		move.w	(a1)+,d0	; get VRAM address
00003884 E588                       		lsl.l	#2,d0		; divide address by $20
00003886 E448                       		lsr.w	#2,d0
00003888 0040 4000                  		ori.w	#$4000,d0
0000388C 4840                       		swap	d0
0000388E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00003894 4EB8 3596                  		jsr	NemDec		; decompress
00003898 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000389C 4E75                       		rts	
0000389E                            ; End of function RunPLC_ROM
0000389E                            
0000389E                            ; ---------------------------------------------------------------------------
0000389E                            ; Enigma decompression algorithm
0000389E                            ; ---------------------------------------------------------------------------
0000389E                            
0000389E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000389E                            
0000389E                            
0000389E                            EniDec:
0000389E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000038A2 3640                       		movea.w	d0,a3
000038A4 1018                       		move.b	(a0)+,d0
000038A6 4880                       		ext.w	d0
000038A8 3A40                       		movea.w	d0,a5
000038AA 1818                       		move.b	(a0)+,d4
000038AC E70C                       		lsl.b	#3,d4
000038AE 3458                       		movea.w	(a0)+,a2
000038B0 D4CB                       		adda.w	a3,a2
000038B2 3858                       		movea.w	(a0)+,a4
000038B4 D8CB                       		adda.w	a3,a4
000038B6 1A18                       		move.b	(a0)+,d5
000038B8 E145                       		asl.w	#8,d5
000038BA 1A18                       		move.b	(a0)+,d5
000038BC 7C10                       		moveq	#$10,d6
000038BE                            
000038BE                            loc_173E:				; XREF: loc_1768
000038BE 7007                       		moveq	#7,d0
000038C0 3E06                       		move.w	d6,d7
000038C2 9E40                       		sub.w	d0,d7
000038C4 3205                       		move.w	d5,d1
000038C6 EE69                       		lsr.w	d7,d1
000038C8 0241 007F                  		andi.w	#$7F,d1
000038CC 3401                       		move.w	d1,d2
000038CE 0C41 0040                  		cmpi.w	#$40,d1
000038D2 6400                       		bcc.s	loc_1758
000038D4 7006                       		moveq	#6,d0
000038D6 E24A                       		lsr.w	#1,d2
000038D8                            
000038D8                            loc_1758:
000038D8 4EB9 0000 0000             		jsr	sub_188C
000038DE 0242 000F                  		andi.w	#$F,d2
000038E2 E849                       		lsr.w	#4,d1
000038E4 D241                       		add.w	d1,d1
000038E6 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000038EA                            ; End of function EniDec
000038EA                            
000038EA                            ; ===========================================================================
000038EA                            
000038EA                            loc_1768:				; XREF: loc_17B4
000038EA 32CA                       		move.w	a2,(a1)+
000038EC 524A                       		addq.w	#1,a2
000038EE 51CA FFFA                  		dbf	d2,loc_1768
000038F2 60CA                       		bra.s	loc_173E
000038F4                            ; ===========================================================================
000038F4                            
000038F4                            loc_1772:				; XREF: loc_17B4
000038F4 32CC                       		move.w	a4,(a1)+
000038F6 51CA FFFC                  		dbf	d2,loc_1772
000038FA 60C2                       		bra.s	loc_173E
000038FC                            ; ===========================================================================
000038FC                            
000038FC                            loc_177A:				; XREF: loc_17B4
000038FC 4EB9 0000 0000             		jsr	loc_17DC
00003902                            
00003902                            loc_177E:
00003902 32C1                       		move.w	d1,(a1)+
00003904 51CA FFFC                  		dbf	d2,loc_177E
00003908 60B4                       		bra.s	loc_173E
0000390A                            ; ===========================================================================
0000390A                            
0000390A                            loc_1786:				; XREF: loc_17B4
0000390A 4EB9 0000 0000             		jsr	loc_17DC
00003910                            
00003910                            loc_178A:
00003910 32C1                       		move.w	d1,(a1)+
00003912 5241                       		addq.w	#1,d1
00003914 51CA FFFA                  		dbf	d2,loc_178A
00003918 60A4                       		bra.s	loc_173E
0000391A                            ; ===========================================================================
0000391A                            
0000391A                            loc_1794:				; XREF: loc_17B4
0000391A 4EB9 0000 0000             		jsr	loc_17DC
00003920                            
00003920                            loc_1798:
00003920 32C1                       		move.w	d1,(a1)+
00003922 5341                       		subq.w	#1,d1
00003924 51CA FFFA                  		dbf	d2,loc_1798
00003928 6094                       		bra.s	loc_173E
0000392A                            ; ===========================================================================
0000392A                            
0000392A                            loc_17A2:				; XREF: loc_17B4
0000392A 0C42 000F                  		cmpi.w	#$F,d2
0000392E 6700                       		beq.s	loc_17C4
00003930                            
00003930                            loc_17A8:
00003930 4EB9 0000 0000             		jsr	loc_17DC
00003936 32C1                       		move.w	d1,(a1)+
00003938 51CA FFF6                  		dbf	d2,loc_17A8
0000393C 6080                       		bra.s	loc_173E
0000393E                            ; ===========================================================================
0000393E                            
0000393E                            loc_17B4:				; XREF: EniDec
0000393E 60AA                       		bra.s	loc_1768
00003940                            ; ===========================================================================
00003940 60A8                       		bra.s	loc_1768
00003942                            ; ===========================================================================
00003942 60B0                       		bra.s	loc_1772
00003944                            ; ===========================================================================
00003944 60AE                       		bra.s	loc_1772
00003946                            ; ===========================================================================
00003946 60B4                       		bra.s	loc_177A
00003948                            ; ===========================================================================
00003948 60C0                       		bra.s	loc_1786
0000394A                            ; ===========================================================================
0000394A 60CE                       		bra.s	loc_1794
0000394C                            ; ===========================================================================
0000394C 60DC                       		bra.s	loc_17A2
0000394E                            ; ===========================================================================
0000394E                            
0000394E                            loc_17C4:				; XREF: loc_17A2
0000394E 5348                       		subq.w	#1,a0
00003950 0C46 0010                  		cmpi.w	#$10,d6
00003954 6600                       		bne.s	loc_17CE
00003956 5348                       		subq.w	#1,a0
00003958                            
00003958                            loc_17CE:
00003958 3008                       		move.w	a0,d0
0000395A E248                       		lsr.w	#1,d0
0000395C 6400                       		bcc.s	loc_17D6
0000395E 5248                       		addq.w	#1,a0
00003960                            
00003960                            loc_17D6:
00003960 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00003964 4E75                       		rts	
00003966                            ; ===========================================================================
00003966                            
00003966                            loc_17DC:				; XREF: loc_17A2
00003966 360B                       		move.w	a3,d3
00003968 1204                       		move.b	d4,d1
0000396A D201                       		add.b	d1,d1
0000396C 6400                       		bcc.s	loc_17EE
0000396E 5346                       		subq.w	#1,d6
00003970 0D05                       		btst	d6,d5
00003972 6700                       		beq.s	loc_17EE
00003974 0043 8000                  		ori.w	#-$8000,d3
00003978                            
00003978                            loc_17EE:
00003978 D201                       		add.b	d1,d1
0000397A 6400                       		bcc.s	loc_17FC
0000397C 5346                       		subq.w	#1,d6
0000397E 0D05                       		btst	d6,d5
00003980 6700                       		beq.s	loc_17FC
00003982 0643 4000                  		addi.w	#$4000,d3
00003986                            
00003986                            loc_17FC:
00003986 D201                       		add.b	d1,d1
00003988 6400                       		bcc.s	loc_180A
0000398A 5346                       		subq.w	#1,d6
0000398C 0D05                       		btst	d6,d5
0000398E 6700                       		beq.s	loc_180A
00003990 0643 2000                  		addi.w	#$2000,d3
00003994                            
00003994                            loc_180A:
00003994 D201                       		add.b	d1,d1
00003996 6400                       		bcc.s	loc_1818
00003998 5346                       		subq.w	#1,d6
0000399A 0D05                       		btst	d6,d5
0000399C 6700                       		beq.s	loc_1818
0000399E 0043 1000                  		ori.w	#$1000,d3
000039A2                            
000039A2                            loc_1818:
000039A2 D201                       		add.b	d1,d1
000039A4 6400                       		bcc.s	loc_1826
000039A6 5346                       		subq.w	#1,d6
000039A8 0D05                       		btst	d6,d5
000039AA 6700                       		beq.s	loc_1826
000039AC 0043 0800                  		ori.w	#$800,d3
000039B0                            
000039B0                            loc_1826:
000039B0 3205                       		move.w	d5,d1
000039B2 3E06                       		move.w	d6,d7
000039B4 9E4D                       		sub.w	a5,d7
000039B6 6400                       		bcc.s	loc_1856
000039B8 3C07                       		move.w	d7,d6
000039BA 0646 0010                  		addi.w	#$10,d6
000039BE 4447                       		neg.w	d7
000039C0 EF69                       		lsl.w	d7,d1
000039C2 1A10                       		move.b	(a0),d5
000039C4 EF3D                       		rol.b	d7,d5
000039C6 DE47                       		add.w	d7,d7
000039C8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000039CC D245                       		add.w	d5,d1
000039CE                            
000039CE                            loc_1844:				; XREF: loc_1868
000039CE 300D                       		move.w	a5,d0
000039D0 D040                       		add.w	d0,d0
000039D2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000039D6 D243                       		add.w	d3,d1
000039D8 1A18                       		move.b	(a0)+,d5
000039DA E14D                       		lsl.w	#8,d5
000039DC 1A18                       		move.b	(a0)+,d5
000039DE 4E75                       		rts	
000039E0                            ; ===========================================================================
000039E0                            
000039E0                            loc_1856:				; XREF: loc_1826
000039E0 6700                       		beq.s	loc_1868
000039E2 EE69                       		lsr.w	d7,d1
000039E4 300D                       		move.w	a5,d0
000039E6 D040                       		add.w	d0,d0
000039E8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000039EC D243                       		add.w	d3,d1
000039EE 300D                       		move.w	a5,d0
000039F0 6000                       		bra.s	sub_188C
000039F2                            ; ===========================================================================
000039F2                            
000039F2                            loc_1868:				; XREF: loc_1856
000039F2 7C10                       		moveq	#$10,d6
000039F4                            
000039F4                            loc_186A:
000039F4 60D8                       		bra.s	loc_1844
000039F6                            ; ===========================================================================
000039F6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00003A0C 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00003A16                            
00003A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A16                            
00003A16                            
00003A16                            sub_188C:				; XREF: EniDec
00003A16 9C40                       		sub.w	d0,d6
00003A18 0C46 0009                  		cmpi.w	#9,d6
00003A1C 6400                       		bcc.s	locret_189A
00003A1E 5046                       		addq.w	#8,d6
00003A20 E145                       		asl.w	#8,d5
00003A22 1A18                       		move.b	(a0)+,d5
00003A24                            
00003A24                            locret_189A:
00003A24 4E75                       		rts	
00003A26                            ; End of function sub_188C
00003A26                            
00003A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00003A26                            ; ---------------------------------------------------------------------------
00003A26                            ; KOSINSKI DECOMPRESSION PROCEDURE
00003A26                            ; (sometimes called KOZINSKI decompression)
00003A26                            
00003A26                            ; This is the only procedure in the game that stores variables on the stack.
00003A26                            
00003A26                            ; ARGUMENTS:
00003A26                            ; a0 = source address
00003A26                            ; a1 = destination address
00003A26                            
00003A26                            ; For format explanation see http://info.sonicretro.org/Kosinski_compression
00003A26                            ; New faster version by vladikcomper
00003A26                            ; ---------------------------------------------------------------------------
00003A26                            ; ===========================================================================
00003A26                            ; KozDec_193A:
00003A26                            KosDec:
00003A26 7E07                               moveq   #7,d7
00003A28 7000                               moveq   #0,d0
00003A2A 7200                               moveq   #0,d1
00003A2C 49FA 0000                          lea     KosDec_ByteMap(pc),a4
00003A30 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
00003A32 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
00003A34 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00003A38 1234 1000                          move.b  (a4,d1.w),d1                    ;
00003A3C 7407                               moveq   #7,d2                           ; set repeat count to 8
00003A3E 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
00003A40 4243                               clr.w   d3                              ;
00003A42 6000                               bra.s   KosDec_FetchNewCode
00003A44                             
00003A44                            KosDec_FetchCodeLoop:
00003A44                                    ; code 1 (Uncompressed byte)
00003A44 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A5C 12D8                               move.b  (a0)+,(a1)+
00003A5E                             
00003A5E                            KosDec_FetchNewCode:
00003A5E D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A60 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
00003A62                             
00003A62                                    ; codes 00 and 01
00003A62 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A7A 7800                               moveq   #0,d4                           ; d4 will contain copy count
00003A7C D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A7E 6500                               bcs.s   KosDec_Code_01
00003A80                             
00003A80                                    ; code 00 (Dictionary ref. short)
00003A80 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003A98 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003A9A D944                               addx.w  d4,d4
00003A9C 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AB4 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00003AB6 D944                               addx.w  d4,d4
00003AB8 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AD0 7AFF                               moveq   #-1,d5
00003AD2 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
00003AD4                             
00003AD4                            KosDec_StreamCopy:
00003AD4 47F1 5000                          lea     (a1,d5),a3
00003AD8 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003ADA                             
00003ADA                            KosDec_copy:
00003ADA 12DB                               move.b  (a3)+,(a1)+
00003ADC 51CC FFFC                          dbf     d4,KosDec_copy
00003AE0 6000 FF7C                          bra.w   KosDec_FetchNewCode
00003AE4                            ; ---------------------------------------------------------------------------
00003AE4                            KosDec_Code_01:
00003AE4                                    ; code 01 (Dictionary ref. long / special)
00003AE4 51CA 0000 7407 1001 4843+          Kos_RunBitStream
00003AFC 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
00003AFE 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
00003B00 7AFF                               moveq   #-1,d5
00003B02 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
00003B04 EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
00003B06 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00003B08 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00003B0A 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00003B0C                             
00003B0C                                    ; special mode (extended counter)
00003B0C 1818                               move.b  (a0)+,d4                        ; read cnt
00003B0E 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
00003B10 5304                               subq.b  #1,d4
00003B12 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
00003B16                             
00003B16 47F1 5000                          lea     (a1,d5),a3
00003B1A 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00003B1C 3C04                               move.w  d4,d6
00003B1E 4646                               not.w   d6
00003B20 CC47                               and.w   d7,d6
00003B22 DC46                               add.w   d6,d6
00003B24 E64C                               lsr.w   #3,d4
00003B26 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
00003B2A                             
00003B2A                            KosDec_largecopy:
00003B2A                                    rept 8
00003B2A                                    move.b  (a3)+,(a1)+
00003B2A 12DB 12DB 12DB 12DB 12DB+          endr
00003B3A 51CC FFEE                          dbf     d4,KosDec_largecopy
00003B3E 6000 FF1E                          bra.w   KosDec_FetchNewCode
00003B42                             
00003B42                            KosDec_Quit:
00003B42 4E75                               rts
00003B44                             
00003B44                            ; ---------------------------------------------------------------------------
00003B44                            ; A look-up table to invert bits order in desc. field bytes
00003B44                            ; ---------------------------------------------------------------------------
00003B44                             
00003B44                            KosDec_ByteMap:
00003B44 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00003B54 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00003B64 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00003B74 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00003B84 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00003B94 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00003BA4 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00003BB4 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00003BC4 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00003BD4 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00003BE4 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00003BF4 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00003C04 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00003C14 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00003C24 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00003C34 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00003C44                             
00003C44                            ; ===========================================================================
00003C44 4E71                       		nop
00003C46                            
00003C46                            ; ---------------------------------------------------------------------------
00003C46                            ; Pallet cycling routine loading subroutine
00003C46                            ; ---------------------------------------------------------------------------
00003C46                            
00003C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C46                            
00003C46                            
00003C46                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00003C46 6100 0000                  		bsr.w	PalCycle_SuperSonic
00003C4A 7400                       		moveq	#0,d2
00003C4C 7000                       		moveq	#0,d0
00003C4E 1038 FE10                  		move.b	($FFFFFE10).w,d0	; get level number
00003C52 D040                       		add.w	d0,d0				; multiply by 2
00003C54 303B 0000                  		move.w	PalCycle(pc,d0.w),d0; load animated pallets offset index into d0
00003C58 4EFB 0000                  		jmp	PalCycle(pc,d0.w)		; jump to PalCycle + offset index
00003C5C                            ; End of function PalCycle_Load
00003C5C                            
00003C5C                            ; ===========================================================================
00003C5C                            ; ---------------------------------------------------------------------------
00003C5C                            ; Pallet cycling routines
00003C5C                            ; ---------------------------------------------------------------------------
00003C5C 0000                       PalCycle:	dc.w PalCycle_ABZ-PalCycle
00003C5E 0000                       		dc.w PalCycle_LZ-PalCycle
00003C60 0000                       		dc.w PalCycle_MZ-PalCycle
00003C62 0000                       		dc.w PalCycle_SLZ-PalCycle
00003C64 0000                       		dc.w PalCycle_SYZ-PalCycle
00003C66 0000                       		dc.w PalCycle_SBZ-PalCycle
00003C68 0000                       		dc.w PalCycle_END-PalCycle
00003C6A 0000                       		dc.w PalCycle_ABZ-PalCycle
00003C6C                            
00003C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C6C                            
00003C6C                            PalCycle_ABZ:				; XREF: PalCycle
00003C6C 4E75                       		rts	
00003C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C6E                            
00003C6E                            
00003C6E                            PalCycle_Title:				; XREF: TitleScreen
00003C6E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00003C74 6000                       		bra.s	loc_196A
00003C76                            ; ===========================================================================
00003C76                            
00003C76                            PalCycle_GHZ:				; XREF: PalCycle
00003C76 4A38 FFCF                  		tst.b	($FFFFFFCF).w	; was after ending flag set?
00003C7A 6600 0000                  		bne.w	PalCycle_END	; if yes, branch
00003C7E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00003C84                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003C84                            ;		bra.w	loc_196A		; if not, branch
00003C84                            ;		lea	(Pall_GHZCyc).l,a0
00003C84                            
00003C84                            loc_196A:				; XREF: PalCycle_Title
00003C84 5378 F634                  		subq.w	#1,($FFFFF634).w
00003C88 6A00                       		bpl.s	locret_1990
00003C8A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00003C90 3038 F632                  		move.w	($FFFFF632).w,d0
00003C94 5278 F632                  		addq.w	#1,($FFFFF632).w
00003C98 0240 0003                  		andi.w	#3,d0
00003C9C E748                       		lsl.w	#3,d0
00003C9E 43F8 FB50                  		lea	($FFFFFB50).w,a1
00003CA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CA6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CAA                            
00003CAA                            locret_1990:
00003CAA 4E75                       		rts	
00003CAC                            ; End of function PalCycle_Title
00003CAC                            
00003CAC                            
00003CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CAC                            
00003CAC                            
00003CAC                            PalCycle_LZ:				; XREF: PalCycle
00003CAC 5378 F634                  		subq.w	#1,($FFFFF634).w
00003CB0 6A00                       		bpl.s	loc_19D8
00003CB2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00003CB8 3038 F632                  		move.w	($FFFFF632).w,d0
00003CBC 5278 F632                  		addq.w	#1,($FFFFF632).w
00003CC0 0240 0003                  		andi.w	#3,d0
00003CC4 E748                       		lsl.w	#3,d0
00003CC6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00003CCC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00003CD2 6600                       		bne.s	loc_19C0
00003CD4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00003CDA                            
00003CDA                            loc_19C0:
00003CDA 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003CDE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CE6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00003CEA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003CEE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003CF2                            
00003CF2                            loc_19D8:
00003CF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00003CF6 0240 0007                  		andi.w	#7,d0
00003CFA 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00003CFE 6700                       		beq.s	locret_1A3A
00003D00 7201                       		moveq	#1,d1
00003D02 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003D06 6700                       		beq.s	loc_19F0
00003D08 4441                       		neg.w	d1
00003D0A                            
00003D0A                            loc_19F0:
00003D0A 3038 F550                  		move.w	($FFFFF550).w,d0
00003D0E 0240 0003                  		andi.w	#3,d0
00003D12 D041                       		add.w	d1,d0
00003D14 0C40 0003                  		cmpi.w	#3,d0
00003D18 6500                       		bcs.s	loc_1A0A
00003D1A 3200                       		move.w	d0,d1
00003D1C 7000                       		moveq	#0,d0
00003D1E 4A41                       		tst.w	d1
00003D20 6A00                       		bpl.s	loc_1A0A
00003D22 7002                       		moveq	#2,d0
00003D24                            
00003D24                            loc_1A0A:
00003D24 31C0 F550                  		move.w	d0,($FFFFF550).w
00003D28 D040                       		add.w	d0,d0
00003D2A 3200                       		move.w	d0,d1
00003D2C D040                       		add.w	d0,d0
00003D2E D041                       		add.w	d1,d0
00003D30 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00003D36 43F8 FB76                  		lea	($FFFFFB76).w,a1
00003D3A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D3E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D42 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00003D48 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00003D4C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003D50 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003D54                            
00003D54                            locret_1A3A:
00003D54 4E75                       		rts	
00003D56                            ; End of function PalCycle_LZ
00003D56                            
00003D56                            ; ===========================================================================
00003D56 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            PalCycle_MZ:				; XREF: PalCycle
00003D5E 4E75                       		rts	
00003D60                            
00003D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D60                            
00003D60                            
00003D60                            PalCycle_SLZ:				; XREF: PalCycle
00003D60 5378 F634                  		subq.w	#1,($FFFFF634).w
00003D64 6A00                       		bpl.s	locret_1A80
00003D66 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00003D6C 3038 F632                  		move.w	($FFFFF632).w,d0
00003D70 5240                       		addq.w	#1,d0
00003D72 0C40 0006                  		cmpi.w	#6,d0
00003D76 6500                       		bcs.s	loc_1A60
00003D78 7000                       		moveq	#0,d0
00003D7A                            
00003D7A                            loc_1A60:
00003D7A 31C0 F632                  		move.w	d0,($FFFFF632).w
00003D7E 3200                       		move.w	d0,d1
00003D80 D241                       		add.w	d1,d1
00003D82 D041                       		add.w	d1,d0
00003D84 D040                       		add.w	d0,d0
00003D86 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00003D8C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00003D90 32B0 0000                  		move.w	(a0,d0.w),(a1)
00003D94 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00003D9A                            
00003D9A                            locret_1A80:
00003D9A 4E75                       		rts	
00003D9C                            ; End of function PalCycle_SLZ
00003D9C                            
00003D9C                            
00003D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D9C                            
00003D9C                            
00003D9C                            PalCycle_SYZ:				; XREF: PalCycle
00003D9C 5378 F634                  		subq.w	#1,($FFFFF634).w
00003DA0 6A00                       		bpl.s	locret_1AC6
00003DA2 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00003DA8 3038 F632                  		move.w	($FFFFF632).w,d0
00003DAC 5278 F632                  		addq.w	#1,($FFFFF632).w
00003DB0 0240 0003                  		andi.w	#3,d0
00003DB4 E548                       		lsl.w	#2,d0
00003DB6 3200                       		move.w	d0,d1
00003DB8 D040                       		add.w	d0,d0
00003DBA 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00003DC0 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00003DC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003DC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00003DCC 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00003DD2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00003DD6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00003DDA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00003DE0                            
00003DE0                            locret_1AC6:
00003DE0 4E75                       		rts	
00003DE2                            ; End of function PalCycle_SYZ
00003DE2                            
00003DE2                            
00003DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DE2                            
00003DE2                            
00003DE2                            PalCycle_SBZ:				; XREF: PalCycle
00003DE2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00003DE8 4A38 FE11                  		tst.b	($FFFFFE11).w
00003DEC 6700                       		beq.s	loc_1ADA
00003DEE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00003DF4                            
00003DF4                            loc_1ADA:
00003DF4 43F8 F550                  		lea	($FFFFF550).w,a1
00003DF8 321A                       		move.w	(a2)+,d1
00003DFA                            
00003DFA                            loc_1AE0:
00003DFA 5311                       		subq.b	#1,(a1)
00003DFC 6B00                       		bmi.s	loc_1AEA
00003DFE 5489                       		addq.l	#2,a1
00003E00 5C8A                       		addq.l	#6,a2
00003E02 6000                       		bra.s	loc_1B06
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_1AEA:				; XREF: PalCycle_SBZ
00003E04 12DA                       		move.b	(a2)+,(a1)+
00003E06 1011                       		move.b	(a1),d0
00003E08 5200                       		addq.b	#1,d0
00003E0A B01A                       		cmp.b	(a2)+,d0
00003E0C 6500                       		bcs.s	loc_1AF6
00003E0E 7000                       		moveq	#0,d0
00003E10                            
00003E10                            loc_1AF6:
00003E10 12C0                       		move.b	d0,(a1)+
00003E12 0240 000F                  		andi.w	#$F,d0
00003E16 D040                       		add.w	d0,d0
00003E18 305A                       		movea.w	(a2)+,a0
00003E1A 365A                       		movea.w	(a2)+,a3
00003E1C 36B0 0000                  		move.w	(a0,d0.w),(a3)
00003E20                            
00003E20                            loc_1B06:				; XREF: PalCycle_SBZ
00003E20 51C9 FFD8                  		dbf	d1,loc_1AE0
00003E24 5378 F634                  		subq.w	#1,($FFFFF634).w
00003E28 6A00                       		bpl.s	locret_1B64
00003E2A 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00003E30 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00003E36 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E3A 6700                       		beq.s	loc_1B2E
00003E3C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00003E42 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003E48                            
00003E48                            loc_1B2E:
00003E48 72FF                       		moveq	#-1,d1
00003E4A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00003E4E 6700                       		beq.s	loc_1B38
00003E50 4441                       		neg.w	d1
00003E52                            
00003E52                            loc_1B38:
00003E52 3038 F632                  		move.w	($FFFFF632).w,d0
00003E56 0240 0003                  		andi.w	#3,d0
00003E5A D041                       		add.w	d1,d0
00003E5C 0C40 0003                  		cmpi.w	#3,d0
00003E60 6500                       		bcs.s	loc_1B52
00003E62 3200                       		move.w	d0,d1
00003E64 7000                       		moveq	#0,d0
00003E66 4A41                       		tst.w	d1
00003E68 6A00                       		bpl.s	loc_1B52
00003E6A 7002                       		moveq	#2,d0
00003E6C                            
00003E6C                            loc_1B52:
00003E6C 31C0 F632                  		move.w	d0,($FFFFF632).w
00003E70 D040                       		add.w	d0,d0
00003E72 43F8 FB58                  		lea	($FFFFFB58).w,a1
00003E76 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00003E7A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00003E7E                            
00003E7E                            locret_1B64:
00003E7E 4E75                       		rts	
00003E80                            ; End of function PalCycle_SBZ
00003E80                            
00003E80                            
00003E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E80                            
00003E80                            
00003E80                            PalCycle_END:				; XREF: PalCycle
00003E80 41F9 0000 0000             		lea	(Pal_ENDCyc).l,a0
00003E86                            ;		tst.b	($FFFFFFFE).w	; is original mode?
00003E86                            ;		beq.w	loc_196A		; if not, branch
00003E86                            ;		lea	(Pall_ENDCyc).l,a0
00003E86 6000 FDFC                  		bra.w	loc_196A
00003E8A                            ; End of function PalCycle_SBZ
00003E8A                            
00003E8A                            ; ===========================================================================
00003E8A                            ; ---------------------------------------------------------------------------
00003E8A                            ; Pallet Cycling data
00003E8A                            ; ---------------------------------------------------------------------------
00003E8A                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00003EAA                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00003ECA                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00003EEA                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00003EFC                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00003F0E                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00003F76                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00003F9A                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00003FBA                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00003FCA                            
00003FCA                            Pal_SBZCycList:
00003FCA                            		include	"_inc\SBZ pallet script 1.asm"
00003FCA                            ; ---------------------------------------------------------------------------
00003FCA                            ; Scrap Brain Zone 1 pallet cycling script
00003FCA                            ; ---------------------------------------------------------------------------
00003FCA 0008                       	dc.w 8			; number of entries - 1
00003FCC 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00003FCE 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00003FD0 FB50                       	dc.w $FB50		; RAM address
00003FD2 0D08                       	dc.b $D, 8
00003FD4 0000                       	dc.w Pal_SBZCyc2
00003FD6 FB52                       	dc.w $FB52
00003FD8 0E08                       	dc.b $E, 8
00003FDA 0000                       	dc.w Pal_SBZCyc3
00003FDC FB6E                       	dc.w $FB6E
00003FDE 0B08                       	dc.b $B, 8
00003FE0 0000                       	dc.w Pal_SBZCyc5
00003FE2 FB70                       	dc.w $FB70
00003FE4 0708                       	dc.b 7,	8
00003FE6 0000                       	dc.w Pal_SBZCyc6
00003FE8 FB72                       	dc.w $FB72
00003FEA 1C10                       	dc.b $1C, $10
00003FEC 0000                       	dc.w Pal_SBZCyc7
00003FEE FB7E                       	dc.w $FB7E
00003FF0 0303                       	dc.b 3,	3
00003FF2 0000                       	dc.w Pal_SBZCyc8
00003FF4 FB78                       	dc.w $FB78
00003FF6 0303                       	dc.b 3,	3
00003FF8 0000                       	dc.w Pal_SBZCyc8+2
00003FFA FB7A                       	dc.w $FB7A
00003FFC 0303                       	dc.b 3,	3
00003FFE 0000                       	dc.w Pal_SBZCyc8+4
00004000 FB7C                       	dc.w $FB7C
00004002                            	even
00004002                            	even
00004002                            
00004002                            Pal_SBZCycList2:
00004002                            		include	"_inc\SBZ pallet script 2.asm"
00004002                            ; ---------------------------------------------------------------------------
00004002                            ; Scrap Brain Zone 2 pallet cycling script
00004002                            ; ---------------------------------------------------------------------------
00004002 0006                       	dc.w 6
00004004 0708                       	dc.b 7,	8
00004006 0000                       	dc.w Pal_SBZCyc1
00004008 FB50                       	dc.w $FB50
0000400A 0D08                       	dc.b $D, 8
0000400C 0000                       	dc.w Pal_SBZCyc2
0000400E FB52                       	dc.w $FB52
00004010 0908                       	dc.b 9,	8
00004012 0000                       	dc.w Pal_SBZCyc9
00004014 FB70                       	dc.w $FB70
00004016 0708                       	dc.b 7,	8
00004018 0000                       	dc.w Pal_SBZCyc6
0000401A FB72                       	dc.w $FB72
0000401C 0303                       	dc.b 3,	3
0000401E 0000                       	dc.w Pal_SBZCyc8
00004020 FB78                       	dc.w $FB78
00004022 0303                       	dc.b 3,	3
00004024 0000                       	dc.w Pal_SBZCyc8+2
00004026 FB7A                       	dc.w $FB7A
00004028 0303                       	dc.b 3,	3
0000402A 0000                       	dc.w Pal_SBZCyc8+4
0000402C FB7C                       	dc.w $FB7C
0000402E                            	even
0000402E                            	even
0000402E                            
0000402E                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
0000403E                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
0000404E                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
0000405E                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
0000406A                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
0000407A                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000408A                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000040AA                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000040B4                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000040C4                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000040D0                            Pal_ENDCyc:	incbin	pallet\c_end.bin
000040F0                            
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            ; Original Pallet Cycling data
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            Pall_GHZCyc:	incbin	pallet_o\c_ghz.bin
00004110                            Pall_ENDCyc:	incbin	pallet_o\c_end.bin
00004130                            
00004130                            
00004130                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00004130                            
00004130                            ; sub_213E:
00004130                            PalCycle_SuperSonic:
00004130 1038 F65F                  		move.b	($FFFFF65F).w,d0
00004134 6700                       		beq.s	locret_214E
00004136 6B00 0000                  		bmi.w	loc_21B0
0000413A 5300                       		subq.b	#1,d0
0000413C 6600                       		bne.s	loc_2150
0000413E 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004142 6A00                       		bpl.s	locret_214E
00004144 11FC 0001 F65E             		move.b	#1,($FFFFF65E).w
0000414A 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004150 3038 F65C                  		move.w	($FFFFF65C).w,d0
00004154 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
00004158 0C78 0024 F65C             		cmpi.w	#$24,($FFFFF65C).w ; '$'
0000415E 6500                       		bcs.s	@loc1
00004160 11FC 00FF F65F             		move.b	#-1,(Super_Sonic_palette).w
00004166 11FC 0000 F7C8             		move.b	#0,($FFFFF7C8).w
0000416C 43F8 FB04                  @loc1:		lea	(Normal_palette+4).w,a1
00004170 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004174 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004178 41F9 0000 0000             		lea	(Pal_22C6).l,a0
0000417E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004184 6700                       		beq.s	loc_21A2
00004186 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
0000418C 6600                       		bne.s	locret_214E
0000418E 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004194 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
00004198 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000419C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000041A0                            
000041A0                            locret_214E:				; CODE XREF: sub_20D4+Ej sub_20D4+1Cj	...
000041A0 4E75                       		rts
000041A2                            ; ---------------------------------------------------------------------------
000041A2                            
000041A2                            loc_2150:				; CODE XREF: sub_20D4+16j
000041A2 5338 F65E                  		subq.b	#1,($FFFFF65E).w
000041A6 6AF8                       		bpl.s	locret_214E
000041A8 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
000041AE 41F9 0000 0000             		lea	(Pal_2246).l,a0
000041B4 3038 F65C                  		move.w	($FFFFF65C).w,d0
000041B8 5178 F65C                  		subq.w	#8,($FFFFF65C).w
000041BC 6400                       		bcc.s	loc_2178
000041BE 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
000041C4 11FC 0000 F65F             		move.b	#0,($FFFFF65F).w
000041CA                            
000041CA                            loc_2178:				; CODE XREF: sub_20D4+96j
000041CA 43F8 FB04                  		lea	(Normal_palette+4).w,a1
000041CE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000041D2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000041D6 41F9 0000 0000             		lea	(Pal_22C6).l,a0
000041DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000041E2 6700 0000                  		beq.w	loc_21A2
000041E6 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
000041EC 66B2                       		bne.s	locret_214E
000041EE 41F9 0000 0000             		lea	(Pal_2346).l,a0
000041F4                            
000041F4                            loc_21A2:				; CODE XREF: sub_20D4+5Ej sub_20D4+BCj
000041F4 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
000041F8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000041FC 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004200 4E75                       		rts
00004202                            ; ---------------------------------------------------------------------------
00004202                            
00004202                            loc_21B0:				; CODE XREF: sub_20D4+10j
00004202 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004206 6A98                       		bpl.s	locret_214E
00004208 11FC 0006 F65E             		move.b	#6,($FFFFF65E).w
0000420E 41F9 0000 0000             		lea	(Pal_2246).l,a0
00004214 3038 F65C                  		move.w	($FFFFF65C).w,d0
00004218 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
0000421C 0C78 0036 F65C             		cmpi.w	#$36,($FFFFF65C).w ; '6'
00004222 6500                       		bcs.s	loc_21D8
00004224 31FC 0024 F65C             		move.w	#$24,($FFFFF65C).w ; '$'
0000422A                            
0000422A                            loc_21D8:				; CODE XREF: sub_20D4+FCj
0000422A 43F8 FB04                  		lea	(Normal_palette+4).w,a1
0000422E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00004232 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00004236 41F9 0000 0000             		lea	(Pal_22C6).l,a0
0000423C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00004242 6700 0000                  		beq.w	loc_2204
00004246 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w
0000424C 6600 FF52                  		bne.w	locret_214E
00004250 41F9 0000 0000             		lea	(Pal_2346).l,a0
00004256                            
00004256                            loc_2204:				; CODE XREF: sub_20D4+11Cj
00004256 43F8 FA84                  		lea	(Underwater_palette+4).w,a1
0000425A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000425E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00004262 4E75                       		rts
00004264                            ; ---------------------------------------------------------------------------
00004264                            
00004264                            loc_2220:				; DATA XREF: ROM:0005A3C8o
00004264                            					; ROM:0005A5C4o ...
00004264 5338 F65E                  		subq.b	#1,($FFFFF65E).w
00004268 6A00                       		bpl.s	locret_223E
0000426A 11FC 0003 F65E             		move.b	#3,($FFFFF65E).w
00004270 11FC 00FF F65F             		move.b	#$FF,($FFFFF65F).w
00004276 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
0000427C 11FC 0000 D02A             		move.b	#0,($FFFFD02A).w
00004282                            
00004282                            locret_223E:				; CODE XREF: sub_20D4+142j
00004282                            					; sub_20D4:loc_2224j ...
00004282 4E75                       		rts
00004284                            ; ---------------------------------------------------------------------------
00004284                            
00004284                            loc_2240:				; CODE XREF: sub_20D4+14Aj
00004284                            					; DATA XREF: ROM:000732FCo ...
00004284 7000                       		moveq	#0,d0
00004286 31C0 F65C                  		move.w	d0,($FFFFF65C).w
0000428A 11C0 F65F                  		move.b	d0,($FFFFF65F).w
0000428E 41F9 0000 0000             		lea	(Pal_22C6).l,a0
00004294 6000 0000                  		bra.w	loc2X
00004298                            ; ---------------------------------------------------------------------------
00004298                            
00004298                            loc_2254:				; CODE XREF: sub_20D4+144j
00004298                            					; DATA XREF: ROM:001E05CCo
00004298 5338 F65E                  		subq.b	#1,($FFFFF65E).w
0000429C 6A00 FFE4                  		bpl.w	locret_223E
000042A0 11FC 0002 F65E             		move.b	#2,($FFFFF65E).w
000042A6 41F9 0000 0000             		lea	(Pal_2246).l,a0
000042AC 3038 F65C                  		move.w	($FFFFF65C).w,d0
000042B0 5C78 F65C                  		addq.w	#6,($FFFFF65C).w
000042B4 0C78 003C F65C             		cmpi.w	#$3C,($FFFFF65C).w ; '<'
000042BA 6500                       		bcs.s	loc2X
000042BC 31FC 0000 F65C             		move.w	#0,($FFFFF65C).w
000042C2 11FC 000E F65E             		move.b	#$E,($FFFFF65E).w
000042C8 43F8 FB04                  loc2X:		lea	(Normal_palette+4).w,a1
000042CC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000042D0 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
000042D6 4A38 F730                  		tst.b	($FFFFF730).w
000042DA 6700 FFA6                  		beq.w	locret_223E
000042DE 43F8 FA84                  		lea	($FFFFFA84).w,a1
000042E2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000042E6 3370 0004 0002             		move.w	4(a0,d0.w),2(a1)
000042EC 4E75                       		rts
000042EE                            ; End of function PalCycle_SuperSonic
000042EE                            
000042EE                            ; ===========================================================================
000042EE                            ;----------------------------------------------------------------------------
000042EE                            ;Palette for transformation to Super Sonic
000042EE                            ;----------------------------------------------------------------------------
000042EE                            Pal_2246:	incbin	"art/palettes/Super Sonic transformation S3.bin"
0000436E                            ;----------------------------------------------------------------------------
0000436E                            ;Palette for transformation to Super Sonic while underwater in CPZ
0000436E                            ;----------------------------------------------------------------------------
0000436E                            Pal_22C6:	incbin	pallet/LZSuperSonic.bin
000043EE                            ;----------------------------------------------------------------------------
000043EE                            ;Palette for transformation to Super Sonic while underwater in ARZ
000043EE                            ;----------------------------------------------------------------------------
000043EE                            Pal_2346:	incbin	pallet/SBZ3SuperSonic.bin
0000446E                            ; ---------------------------------------------------------------------------
0000446E                            ; Subroutine to	fade out and fade in
0000446E                            ; ---------------------------------------------------------------------------
0000446E                            
0000446E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000446E                            
0000446E                            Pal_FadeTo:
0000446E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004474                             
00004474                            Pal_FadeTo2:
00004474 7000                       		moveq	#0,d0
00004476 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000447A 1038 F626                  		move.b	($FFFFF626).w,d0
0000447E D0C0                       		adda.w	d0,a0
00004480 7200                       		moveq	#0,d1
00004482 1038 F627                  		move.b	($FFFFF627).w,d0
00004486                             
00004486                            Pal_ToBlack:
00004486 30C1                       		move.w	d1,(a0)+
00004488 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
0000448C 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
0000448E 7C00                       		moveq	#$00,d6					; MJ: clear d6
00004490                             
00004490                            loc_1DCE:
00004490 4EB8 3762                  		jsr	RunPLC_RAM
00004494 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000449A 4EB9 0000 0000             		jsr	DelayProgram
000044A0 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000044A4 67EA                       		beq	loc_1DCE				; MJ: if null, delay a frame
000044A6 6100                       		bsr.s	Pal_FadeIn
000044A8 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
000044AA 66E4                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
000044AC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
000044B2 4EF9 0000 0000             		jmp	DelayProgram				; MJ: ''
000044B8                             
000044B8                            ; End of function Pal_FadeTo
000044B8                             
000044B8                            ; ---------------------------------------------------------------------------
000044B8                            ; Pallet fade-in subroutine
000044B8                            ; ---------------------------------------------------------------------------
000044B8                             
000044B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B8                             
000044B8                             
000044B8                            Pal_FadeIn:				; XREF: Pal_FadeTo
000044B8 7000                       		moveq	#0,d0
000044BA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000044BE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000044C2 1038 F626                  		move.b	($FFFFF626).w,d0
000044C6 D0C0                       		adda.w	d0,a0
000044C8 D2C0                       		adda.w	d0,a1
000044CA 1038 F627                  		move.b	($FFFFF627).w,d0
000044CE                             
000044CE                            loc_1DFA:
000044CE 6100                       		bsr.s	Pal_AddColor
000044D0 51C8 FFFC                  		dbf	d0,loc_1DFA
000044D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000044DA 6600                       		bne.s	locret_1E24
000044DC 7000                       		moveq	#0,d0
000044DE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000044E2 43F8 FA00                  		lea	($FFFFFA00).w,a1
000044E6 1038 F626                  		move.b	($FFFFF626).w,d0
000044EA D0C0                       		adda.w	d0,a0
000044EC D2C0                       		adda.w	d0,a1
000044EE 1038 F627                  		move.b	($FFFFF627).w,d0
000044F2                             
000044F2                            loc_1E1E:
000044F2 6100                       		bsr.s	Pal_AddColor
000044F4 51C8 FFFC                  		dbf	d0,loc_1E1E
000044F8                             
000044F8                            locret_1E24:
000044F8 4E75                       		rts	
000044FA                            ; End of function Pal_FadeIn
000044FA                             
000044FA                             
000044FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044FA                             
000044FA                             
000044FA                            Pal_AddColor:				; XREF: Pal_FadeIn
000044FA 1A11                       		move.b	(a1),d5					; MJ: load blue
000044FC 3219                       		move.w	(a1)+,d1				; MJ: load green and red
000044FE 1401                       		move.b	d1,d2					; MJ: load red
00004500 E809                       		lsr.b	#$04,d1					; MJ: get only green
00004502 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00004506 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00004508 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
0000450A 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
0000450E 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00004512                             
00004512                            FCI_NoBlue:
00004512 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00004514 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00004518 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
0000451C                             
0000451C                            FCI_NoGreen:
0000451C B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
0000451E 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00004522 5403                       		addq.b	#$02,d3					; MJ: increase red
00004524                             
00004524                            FCI_NoRed:
00004524 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00004526 4E75                       		rts						; MJ: return
00004528                             
00004528                            ; End of function Pal_AddColor
00004528                             
00004528                             
00004528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004528                             
00004528                             
00004528                            Pal_FadeFrom:
00004528 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000452E 7807                       		moveq	#$07,d4					; MJ: set repeat times
00004530 7C00                       		moveq	#$00,d6					; MJ: clear d6
00004532                             
00004532                            loc_1E5C:
00004532 4EB8 3762                  		jsr	RunPLC_RAM
00004536 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000453C 4EB9 0000 0000             		jsr	DelayProgram
00004542 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00004546 67EA                       		beq	loc_1E5C				; MJ: if null, delay a frame
00004548 6100                       		bsr.s	Pal_FadeOut
0000454A 51CC FFE6                  		dbf	d4,loc_1E5C
0000454E 4E75                       		rts	
00004550                            ; End of function Pal_FadeFrom
00004550                             
00004550                            ; ---------------------------------------------------------------------------
00004550                            ; Pallet fade-out subroutine
00004550                            ; ---------------------------------------------------------------------------
00004550                             
00004550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004550                             
00004550                             
00004550                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00004550 7000                       		moveq	#0,d0
00004552 41F8 FB00                  		lea	($FFFFFB00).w,a0
00004556 1038 F626                  		move.b	($FFFFF626).w,d0
0000455A D0C0                       		adda.w	d0,a0
0000455C 1038 F627                  		move.b	($FFFFF627).w,d0
00004560                             
00004560                            loc_1E82:
00004560 6100                       		bsr.s	Pal_DecColor
00004562 51C8 FFFC                  		dbf	d0,loc_1E82
00004566                             
00004566 7000                       		moveq	#0,d0
00004568 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000456C 1038 F626                  		move.b	($FFFFF626).w,d0
00004570 D0C0                       		adda.w	d0,a0
00004572 1038 F627                  		move.b	($FFFFF627).w,d0
00004576                             
00004576                            loc_1E98:
00004576 6100                       		bsr.s	Pal_DecColor
00004578 51C8 FFFC                  		dbf	d0,loc_1E98
0000457C 4E75                       		rts	
0000457E                            ; End of function Pal_FadeOut
0000457E                             
0000457E                             
0000457E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457E                             
0000457E                             
0000457E                            Pal_DecColor:				; XREF: Pal_FadeOut
0000457E 3A10                       		move.w	(a0),d5					; MJ: load colour
00004580 3205                       		move.w	d5,d1					; MJ: copy to d1
00004582 1401                       		move.b	d1,d2					; MJ: load green and red
00004584 1601                       		move.b	d1,d3					; MJ: load red
00004586 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
0000458A 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
0000458E 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00004592                             
00004592                            FCO_NoBlue:
00004592 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00004596 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
0000459A 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000459E                             
0000459E                            FCO_NoGreen:
0000459E 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000045A2 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000045A6 5505                       		subq.b	#$02,d5					; MJ: decrease red
000045A8                             
000045A8                            FCO_NoRed:
000045A8 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
000045AA 4E75                       		rts						; MJ: return
000045AC                             
000045AC                            ; End of function Pal_DecColor
000045AC                            
000045AC                            ; ---------------------------------------------------------------------------
000045AC                            ; Subroutine to	fill the pallet	with white (special stage)
000045AC                            ; ---------------------------------------------------------------------------
000045AC                            
000045AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045AC                            
000045AC                            
000045AC                            Pal_MakeWhite:				; XREF: SpecialStage
000045AC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045B2 7000                       		moveq	#0,d0
000045B4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000045B8 1038 F626                  		move.b	($FFFFF626).w,d0
000045BC D0C0                       		adda.w	d0,a0
000045BE 323C 0EEE                  		move.w	#$EEE,d1
000045C2 1038 F627                  		move.b	($FFFFF627).w,d0
000045C6                            
000045C6                            PalWhite_Loop:
000045C6 30C1                       		move.w	d1,(a0)+
000045C8 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000045CC 4278 FACE                  		clr.w	($FFFFFACE).w
000045D0 383C 0015                  		move.w	#$15,d4
000045D4                            
000045D4                            loc_1EF4:
000045D4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000045DA 4EB9 0000 0000             		jsr	DelayProgram
000045E0 6100                       		bsr.s	Pal_WhiteToBlack
000045E2 4EB8 3762                  		jsr	RunPLC_RAM
000045E6 51CC FFEC                  		dbf	d4,loc_1EF4
000045EA 4E75                       		rts	
000045EC                            ; End of function Pal_MakeWhite
000045EC                            
000045EC                            
000045EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045EC                            
000045EC                            
000045EC                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000045EC 5378 FACE                  		subq.w	#1,($FFFFFACE).w
000045F0 6A00                       		bpl.s	locret_3CEE
000045F2 31FC 0002 FACE             		move.w	#2,($FFFFFACE).w
000045F8 7000                       		moveq	#0,d0
000045FA                            
000045FA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000045FE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00004602 1038 F626                  		move.b	($FFFFF626).w,d0
00004606 D0C0                       		adda.w	d0,a0
00004608 D2C0                       		adda.w	d0,a1
0000460A 1038 F627                  		move.b	($FFFFF627).w,d0
0000460E                            
0000460E                            loc_3CC6:
0000460E 6100                       		bsr.s	Pal_DecColor2
00004610 51C8 FFFC                  		dbf	d0,loc_3CC6
00004614 4A38 F64C                  		tst.b	($FFFFF64C).w
00004618 6700                       		beq.s	locret_3CEE
0000461A 7000                       		moveq	#0,d0
0000461C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00004620 43F8 FA00                  		lea	($FFFFFA00).w,a1
00004624 1038 F626                  		move.b	($FFFFF626).w,d0
00004628 D0C0                       		adda.w	d0,a0
0000462A D2C0                       		adda.w	d0,a1
0000462C 1038 F627                  		move.b	($FFFFF627).w,d0
00004630                            
00004630                            loc_3CE8:
00004630 6100                       		bsr.s	Pal_DecColor2
00004632 51C8 FFFC                  		dbf	d0,loc_3CE8
00004636                            
00004636                            locret_3CEE:
00004636 4E75                       		rts
00004638                            ; End of function Pal_WhiteToBlack
00004638                            
00004638                            
00004638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004638                            
00004638                            
00004638                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00004638 1419                       		move.b	(a1)+,d2
0000463A 0202 000E                  		andi.b	#$E,d2
0000463E 1610                       		move.b	(a0),d3
00004640 0203 000E                  		andi.b	#$E,d3
00004644 B602                       		cmp.b	d2,d3
00004646 6300                       		bls.s	loc_3D02
00004648 5503                       		subq.b	#2,d3
0000464A                            
0000464A                            loc_3D02:
0000464A 10C3                       		move.b	d3,(a0)+
0000464C 1219                       		move.b	(a1)+,d1
0000464E 1401                       		move.b	d1,d2
00004650 0201 00E0                  		andi.b	#$E0,d1
00004654 1610                       		move.b	(a0),d3
00004656 1A03                       		move.b	d3,d5
00004658 0203 00E0                  		andi.b	#$E0,d3
0000465C B601                       		cmp.b	d1,d3
0000465E 6300                       		bls.s	loc_3D1C
00004660 0403 0020                  		subi.b	#$20,d3
00004664                            
00004664                            loc_3D1C:
00004664 0202 000E                  		andi.b	#$E,d2
00004668 0205 000E                  		andi.b	#$E,d5
0000466C BA02                       		cmp.b	d2,d5
0000466E 6300                       		bls.s	loc_3D2A
00004670 5505                       		subq.b	#2,d5
00004672                            
00004672                            loc_3D2A:
00004672 8605                       		or.b	d5,d3
00004674 10C3                       		move.b	d3,(a0)+
00004676 4E75                       		rts
00004678                            ; End of function Pal_DecColor2
00004678                            
00004678                            ; ---------------------------------------------------------------------------
00004678                            ; Subroutine to	make a white flash when	you enter a special stage
00004678                            ; ---------------------------------------------------------------------------
00004678                            
00004678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004678                            
00004678                            
00004678                            Pal_MakeFlash:				; XREF: SpecialStage
00004678 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000467E 383C 0015                  		move.w	#$15,d4
00004682                            
00004682                            loc_1F86:
00004682 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00004688 4EB9 0000 0000             		jsr	DelayProgram
0000468E 6100                       		bsr.s	Pal_ToWhite
00004690 4EB8 3762                  		jsr	RunPLC_RAM
00004694 51CC FFEC                  		dbf	d4,loc_1F86
00004698 4E75                       		rts	
0000469A                            ; End of function Pal_MakeFlash
0000469A                            
0000469A                            
0000469A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000469A                            
0000469A                            
0000469A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000469A 7000                       		moveq	#0,d0
0000469C 41F8 FB00                  		lea	($FFFFFB00).w,a0
000046A0 1038 F626                  		move.b	($FFFFF626).w,d0
000046A4 D0C0                       		adda.w	d0,a0
000046A6 1038 F627                  		move.b	($FFFFF627).w,d0
000046AA                            
000046AA                            loc_1FAC:
000046AA 6100                       		bsr.s	Pal_AddColor2
000046AC 51C8 FFFC                  		dbf	d0,loc_1FAC
000046B0 7000                       		moveq	#0,d0
000046B2 41F8 FA80                  		lea	($FFFFFA80).w,a0
000046B6 1038 F626                  		move.b	($FFFFF626).w,d0
000046BA D0C0                       		adda.w	d0,a0
000046BC 1038 F627                  		move.b	($FFFFF627).w,d0
000046C0                            
000046C0                            loc_1FC2:
000046C0 6100                       		bsr.s	Pal_AddColor2
000046C2 51C8 FFFC                  		dbf	d0,loc_1FC2
000046C6 4E75                       		rts	
000046C8                            ; End of function Pal_ToWhite
000046C8                            
000046C8                            
000046C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046C8                            
000046C8                            
000046C8                            Pal_AddColor2:				; XREF: Pal_ToWhite
000046C8 3410                       		move.w	(a0),d2
000046CA 0C42 0EEE                  		cmpi.w	#$EEE,d2
000046CE 6700                       		beq.s	loc_2006
000046D0 3202                       		move.w	d2,d1
000046D2 0241 000E                  		andi.w	#$E,d1
000046D6 0C41 000E                  		cmpi.w	#$E,d1
000046DA 6700                       		beq.s	loc_1FE2
000046DC 5458                       		addq.w	#2,(a0)+	; increase red value
000046DE 4E75                       		rts	
000046E0                            ; ===========================================================================
000046E0                            
000046E0                            loc_1FE2:				; XREF: Pal_AddColor2
000046E0 3202                       		move.w	d2,d1
000046E2 0241 00E0                  		andi.w	#$E0,d1
000046E6 0C41 00E0                  		cmpi.w	#$E0,d1
000046EA 6700                       		beq.s	loc_1FF4
000046EC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000046F0 4E75                       		rts	
000046F2                            ; ===========================================================================
000046F2                            
000046F2                            loc_1FF4:				; XREF: loc_1FE2
000046F2 3202                       		move.w	d2,d1
000046F4 0241 0E00                  		andi.w	#$E00,d1
000046F8 0C41 0E00                  		cmpi.w	#$E00,d1
000046FC 6700                       		beq.s	loc_2006
000046FE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00004702 4E75                       		rts	
00004704                            ; ===========================================================================
00004704                            
00004704                            loc_2006:				; XREF: Pal_AddColor2
00004704 5448                       		addq.w	#2,a0
00004706 4E75                       		rts	
00004708                            ; End of function Pal_AddColor2
00004708                            
00004708                            ; ---------------------------------------------------------------------------
00004708                            ; Pallet cycling routine - Sega	logo
00004708                            ; ---------------------------------------------------------------------------
00004708                            
00004708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004708                            
00004708                            
00004708                            PalCycle_Sega:				; XREF: SegaScreen
00004708 4A38 F635                  		tst.b	($FFFFF635).w
0000470C 6600                       		bne.s	loc_206A
0000470E 43F8 FB20                  		lea	($FFFFFB20).w,a1
00004712 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00004718 7205                       		moveq	#5,d1
0000471A 3038 F632                  		move.w	($FFFFF632).w,d0
0000471E                            
0000471E                            loc_2020:
0000471E 6A00                       		bpl.s	loc_202A
00004720 5448                       		addq.w	#2,a0
00004722 5341                       		subq.w	#1,d1
00004724 5440                       		addq.w	#2,d0
00004726 60F6                       		bra.s	loc_2020
00004728                            ; ===========================================================================
00004728                            
00004728                            loc_202A:				; XREF: PalCycle_Sega
00004728 3400                       		move.w	d0,d2
0000472A 0242 001E                  		andi.w	#$1E,d2
0000472E 6600                       		bne.s	loc_2034
00004730 5440                       		addq.w	#2,d0
00004732                            
00004732                            loc_2034:
00004732 0C40 0060                  		cmpi.w	#$60,d0
00004736 6400                       		bcc.s	loc_203E
00004738 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000473C                            
0000473C                            loc_203E:
0000473C 5440                       		addq.w	#2,d0
0000473E 51C9 FFE8                  		dbf	d1,loc_202A
00004742 3038 F632                  		move.w	($FFFFF632).w,d0
00004746 5440                       		addq.w	#2,d0
00004748 3400                       		move.w	d0,d2
0000474A 0242 001E                  		andi.w	#$1E,d2
0000474E 6600                       		bne.s	loc_2054
00004750 5440                       		addq.w	#2,d0
00004752                            
00004752                            loc_2054:
00004752 0C40 0064                  		cmpi.w	#$64,d0
00004756 6D00                       		blt.s	loc_2062
00004758 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000475E 70F4                       		moveq	#-$C,d0
00004760                            
00004760                            loc_2062:
00004760 31C0 F632                  		move.w	d0,($FFFFF632).w
00004764 7001                       		moveq	#1,d0
00004766 4E75                       		rts	
00004768                            ; ===========================================================================
00004768                            
00004768                            loc_206A:				; XREF: loc_202A
00004768 5338 F634                  		subq.b	#1,($FFFFF634).w
0000476C 6A00                       		bpl.s	loc_20BC
0000476E 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00004774 3038 F632                  		move.w	($FFFFF632).w,d0
00004778 0640 000C                  		addi.w	#$C,d0
0000477C 0C40 0030                  		cmpi.w	#$30,d0
00004780 6500                       		bcs.s	loc_2088
00004782 7000                       		moveq	#0,d0
00004784 4E75                       		rts	
00004786                            ; ===========================================================================
00004786                            
00004786                            loc_2088:				; XREF: loc_206A
00004786 31C0 F632                  		move.w	d0,($FFFFF632).w
0000478A 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00004790 41F0 0000                  		lea	(a0,d0.w),a0
00004794 43F8 FB04                  		lea	($FFFFFB04).w,a1
00004798 22D8                       		move.l	(a0)+,(a1)+
0000479A 22D8                       		move.l	(a0)+,(a1)+
0000479C 3298                       		move.w	(a0)+,(a1)
0000479E 43F8 FB20                  		lea	($FFFFFB20).w,a1
000047A2 7000                       		moveq	#0,d0
000047A4 722C                       		moveq	#$2C,d1
000047A6                            
000047A6                            loc_20A8:
000047A6 3400                       		move.w	d0,d2
000047A8 0242 001E                  		andi.w	#$1E,d2
000047AC 6600                       		bne.s	loc_20B2
000047AE 5440                       		addq.w	#2,d0
000047B0                            
000047B0                            loc_20B2:
000047B0 3390 0000                  		move.w	(a0),(a1,d0.w)
000047B4 5440                       		addq.w	#2,d0
000047B6 51C9 FFEE                  		dbf	d1,loc_20A8
000047BA                            
000047BA                            loc_20BC:
000047BA 7001                       		moveq	#1,d0
000047BC 4E75                       		rts	
000047BE                            ; End of function PalCycle_Sega
000047BE                            
000047BE                            ; ===========================================================================
000047BE                            
000047BE                            Pal_Sega1:	incbin	pallet\sega1.bin
000047CA                            Pal_Sega2:	incbin	pallet\sega2.bin
000047FA                            
000047FA                            ; ---------------------------------------------------------------------------
000047FA                            ; Subroutines to load pallets
000047FA                            ; ---------------------------------------------------------------------------
000047FA                            
000047FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047FA                            
000047FA                            
000047FA                            PalLoad1:
000047FA 6100                         bsr.s	PalLoad_PalPointers
000047FC E748                         lsl.w	#3,d0
000047FE D2C0                         adda.w	d0,a1
00004800 2459                         movea.l	(a1)+,a2
00004802 3659                         movea.w	(a1)+,a3
00004804 D6FC 0080                    adda.w	#$80,a3
00004808 3E19                         move.w	(a1)+,d7
0000480A                            
0000480A                            loc_2110:
0000480A 26DA                         move.l	(a2)+,(a3)+
0000480C 51CF FFFC                    dbf	d7,loc_2110
00004810 4E75                         rts	
00004812                            ; End of function PalLoad1
00004812                            
00004812                            
00004812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004812                            
00004812                            
00004812                            PalLoad2:
00004812 6100                         bsr.s	PalLoad_PalPointers
00004814 E748                         lsl.w	#3,d0
00004816 D2C0                         adda.w	d0,a1
00004818 2459                         movea.l	(a1)+,a2
0000481A 3659                         movea.w	(a1)+,a3
0000481C 3E19                         move.w	(a1)+,d7
0000481E                            
0000481E                            loc_2128:
0000481E 26DA                         move.l	(a2)+,(a3)+
00004820 51CF FFFC                    dbf	d7,loc_2128
00004824 4E75                         rts	
00004826                            ; End of function PalLoad2
00004826                            
00004826                            ; ---------------------------------------------------------------------------
00004826                            ; Underwater pallet loading subroutine
00004826                            ; ---------------------------------------------------------------------------
00004826                            
00004826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004826                            
00004826                            
00004826                            PalLoad3_Water:
00004826 6100                         bsr.s	PalLoad_PalPointers
00004828 E748                         lsl.w	#3,d0
0000482A D2C0                         adda.w	d0,a1
0000482C 2459                         movea.l	(a1)+,a2
0000482E 3659                         movea.w	(a1)+,a3
00004830 96FC 0080                    suba.w	#$80,a3
00004834 3E19                         move.w	(a1)+,d7
00004836                            
00004836                            loc_2144:
00004836 26DA                         move.l	(a2)+,(a3)+
00004838 51CF FFFC                    dbf	d7,loc_2144
0000483C 4E75                         rts	
0000483E                            ; End of function PalLoad3_Water
0000483E                            
0000483E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000483E                            
0000483E                            
0000483E                            PalLoad4_Water:
0000483E 6100                       		bsr.s	PalLoad_PalPointers
00004840 E748                       		lsl.w	#3,d0
00004842 D2C0                       		adda.w	d0,a1
00004844 2459                       		movea.l	(a1)+,a2
00004846 3659                       		movea.w	(a1)+,a3
00004848 97FC 0000 0080             		suba.l	#$80,a3
0000484E 3E19                       		move.w	(a1)+,d7
00004850                            
00004850                            loc_2160:
00004850 26DA                       		move.l		(a2)+,(a3)+
00004852 51CF FFFC                  		dbf		d7,loc_2160
00004856 4E75                       		rts
00004858                            ; End of function PalLoad4_Water
00004858                            
00004858                            ; ===========================================================================
00004858                            
00004858                            PalLoad_PalPointers:
00004858                            ;		cmpi.b	#1,($FFFFFFFE).w				; is the original mode?
00004858                            ;		beq.s	PalLoad_PalPointers_Original	; if yes, branch
00004858 1238 FE11                  		move.b	($FFFFFE11).w,d1		; set Act number to d1
0000485C 43F9 0000 0000             		lea		(PalPointers).l,a1		; load the PalPointers of the act 1
00004862 0C01 0000                  		cmp.b	#0,d1					; is act 1?
00004866 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
0000486A 43F9 0000 0000             		lea		(PalPointers2).l,a1		; load the PalPointers of the act 2
00004870 0C01 0001                  		cmp.b	#1,d1					; is act 2?
00004874 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004878 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 3
0000487E 0C01 0002                  		cmp.b	#2,d1					; is act 3?
00004882 6700 0000                  		beq.w	PalLoad_PalPointers_rts	; if yes, branch
00004886 43F9 0000 0000             		lea		(PalPointers3).l,a1		; load the PalPointers of the act 4
0000488C 6000 0000                  		bra.w	PalLoad_PalPointers_rts
00004890                            
00004890                            ;PalLoad_PalPointers_Original:
00004890                            ;		lea	(PalPointers).l,a1			; load the Original PalPointers
00004890                            
00004890                            PalLoad_PalPointers_rts:
00004890 4E75                       		rts
00004892                            
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Pallet pointers
00004892                            ; ---------------------------------------------------------------------------
00004892                            PalPointers:
00004892                                   include "_inc\Pallet pointers.asm"
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Pallet pointers
00004892                            ; ---------------------------------------------------------------------------
00004892 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004896 FB00                       	dc.w $FB00		; RAM address
00004898 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000489A 0000 0000                  	dc.l Pal_Title
0000489E FB00                       	dc.w $FB00
000048A0 001F                       	dc.w $1F
000048A2 0000 0000                  	dc.l Pal_LevelSel
000048A6 FB00                       	dc.w $FB00
000048A8 001F                       	dc.w $1F
000048AA 0000 0000                  	dc.l Pal_Sonic
000048AE FB00                       	dc.w $FB00
000048B0 0007                       	dc.w 7
000048B2 0000 0000                  	dc.l Pal_GHZ
000048B6 FB20                       	dc.w $FB20
000048B8 0017                       	dc.w $17
000048BA 0000 0000                  	dc.l Pal_LZ
000048BE FB20                       	dc.w $FB20
000048C0 0017                       	dc.w $17
000048C2 0000 0000                  	dc.l Pal_MZ
000048C6 FB20                       	dc.w $FB20
000048C8 0017                       	dc.w $17
000048CA 0000 0000                  	dc.l Pal_SLZ
000048CE FB20                       	dc.w $FB20
000048D0 0017                       	dc.w $17
000048D2 0000 0000                  	dc.l Pal_SYZ
000048D6 FB20                       	dc.w $FB20
000048D8 0017                       	dc.w $17
000048DA 0000 0000                  	dc.l Pal_SBZ1
000048DE FB20                       	dc.w $FB20
000048E0 0017                       	dc.w $17
000048E2 0000 0000                  	dc.l Pal_Special
000048E6 FB00                       	dc.w $FB00
000048E8 001F                       	dc.w $1F
000048EA 0000 0000                  	dc.l Pal_LZWater
000048EE FB00                       	dc.w $FB00
000048F0 001F                       	dc.w $1F
000048F2 0000 0000                  	dc.l Pal_SBZ3
000048F6 FB20                       	dc.w $FB20
000048F8 0017                       	dc.w $17
000048FA 0000 0000                  	dc.l Pal_SBZ3Water
000048FE FB00                       	dc.w $FB00
00004900 001F                       	dc.w $1F
00004902 0000 0000                  	dc.l Pal_SBZ2
00004906 FB20                       	dc.w $FB20
00004908 0017                       	dc.w $17
0000490A 0000 0000                  	dc.l Pal_LZSonWater
0000490E FB00                       	dc.w $FB00
00004910 0007                       	dc.w 7
00004912 0000 0000                  	dc.l Pal_SBZ3SonWat
00004916 FB00                       	dc.w $FB00
00004918 0007                       	dc.w 7
0000491A 0000 0000                  	dc.l Pal_SpeResult
0000491E FB00                       	dc.w $FB00
00004920 001F                       	dc.w $1F
00004922 0000 0000                  	dc.l Pal_SpeContinue
00004926 FB00                       	dc.w $FB00
00004928 000F                       	dc.w $F
0000492A 0000 0000                  	dc.l Pal_Ending
0000492E FB00                       	dc.w $FB00
00004930 001F                       	dc.w $1F
00004932 0000 0000                  	dc.l Menu_Palette; pallet address
00004936 FB00                       	dc.w $FB00	; RAM address
00004938 001F                       	dc.w $1F	; (pallet length / 2) - 1
0000493A 0000 0000                  	dc.l Pal_Ray
0000493E FB00                       	dc.w $FB00
00004940 0007                       	dc.w 7
00004942 0000 0000                  	dc.l Pal_SonicHeat
00004946 FB00                       	dc.w $FB00
00004948 0007                       	dc.w 7
0000494A 0000 0000                  	dc.l Pal_RayHeat
0000494E FB00                       	dc.w $FB00
00004950 0007                       	dc.w 7
00004952 0000 0000                  	dc.l Pal_ABZ		; 14
00004956 FB20                       	dc.w $FB20
00004958 0017                       	dc.w $17
00004958 0017                       	dc.w $17
0000495A                            PalPointers2:
0000495A                             include "_inc\Pallet pointers2.asm"
0000495A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000495E FB00                       	dc.w $FB00		; RAM address
00004960 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004962 0000 0000                  	dc.l Pal_Title
00004966 FB00                       	dc.w $FB00
00004968 001F                       	dc.w $1F
0000496A 0000 0000                  	dc.l Pal_LevelSel
0000496E FB00                       	dc.w $FB00
00004970 001F                       	dc.w $1F
00004972 0000 0000                  	dc.l Pal_Sonic
00004976 FB00                       	dc.w $FB00
00004978 0007                       	dc.w 7
0000497A 0000 0000                  	dc.l Pal2_GHZ3
0000497E FB20                       	dc.w $FB20
00004980 0017                       	dc.w $17
00004982 0000 0000                  	dc.l Pal2_LZ3
00004986 FB20                       	dc.w $FB20
00004988 0017                       	dc.w $17
0000498A 0000 0000                  	dc.l Pal2_MZ3
0000498E FB20                       	dc.w $FB20
00004990 0017                       	dc.w $17
00004992 0000 0000                  	dc.l Pal2_SLZ3
00004996 FB20                       	dc.w $FB20
00004998 0017                       	dc.w $17
0000499A 0000 0000                  	dc.l Pal2_SYZ3
0000499E FB20                       	dc.w $FB20
000049A0 0017                       	dc.w $17
000049A2 0000 0000                  	dc.l Pal2_SBZ1
000049A6 FB20                       	dc.w $FB20
000049A8 0017                       	dc.w $17
000049AA 0000 0000                  	dc.l Pal2_Special
000049AE FB00                       	dc.w $FB00
000049B0 001F                       	dc.w $1F
000049B2 0000 0000                  	dc.l Pal2_LZWater3
000049B6 FB00                       	dc.w $FB00
000049B8 001F                       	dc.w $1F
000049BA 0000 0000                  	dc.l Pal2_SBZ3
000049BE FB20                       	dc.w $FB20
000049C0 0017                       	dc.w $17
000049C2 0000 0000                  	dc.l Pal2_SBZ3Water
000049C6 FB00                       	dc.w $FB00
000049C8 001F                       	dc.w $1F
000049CA 0000 0000                  	dc.l Pal2_SBZ2
000049CE FB20                       	dc.w $FB20
000049D0 0017                       	dc.w $17
000049D2 0000 0000                  	dc.l Pal2_LZSonWater
000049D6 FB00                       	dc.w $FB00
000049D8 0007                       	dc.w 7
000049DA 0000 0000                  	dc.l Pal2_SBZ3SonWat
000049DE FB00                       	dc.w $FB00
000049E0 0007                       	dc.w 7
000049E2 0000 0000                  	dc.l Pal2_SpeResult
000049E6 FB00                       	dc.w $FB00
000049E8 001F                       	dc.w $1F
000049EA 0000 0000                  	dc.l Pal2_SpeContinue
000049EE FB00                       	dc.w $FB00
000049F0 000F                       	dc.w $F
000049F2 0000 0000                  	dc.l Pal2_Ending
000049F6 FB00                       	dc.w $FB00
000049F8 001F                       	dc.w $1F
000049FA 0000 0000                  	dc.l Pal_ABZ3		; 14
000049FE FB20                       	dc.w $FB20
00004A00 0017                       	dc.w $17
00004A02 0000 0000                  	dc.l Menu_Palette; pallet address
00004A06 FB00                       	dc.w $FB00	; RAM address
00004A08 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004A0A 0000 0000                  	dc.l Pal_Ray
00004A0E FB00                       	dc.w $FB00
00004A10 0007                       	dc.w 7
00004A12 0000 0000                  	dc.l Pal_SonicHeat
00004A16 FB00                       	dc.w $FB00
00004A18 0007                       	dc.w 7
00004A1A 0000 0000                  	dc.l Pal_RayHeat
00004A1E FB00                       	dc.w $FB00
00004A20 0007                       	dc.w 7
00004A20 0007                       	dc.w 7
00004A22                            PalPointers3:
00004A22                             include "_inc\Pallet pointers3.asm"
00004A22                            ; ---------------------------------------------------------------------------
00004A22                            ; Pallet pointers
00004A22                            ; ---------------------------------------------------------------------------
00004A22 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00004A26 FB00                       	dc.w $FB00		; RAM address
00004A28 001F                       	dc.w $1F		; (pallet length / 2) - 1
00004A2A 0000 0000                  	dc.l Pal_Title
00004A2E FB00                       	dc.w $FB00
00004A30 001F                       	dc.w $1F
00004A32 0000 0000                  	dc.l Pal_LevelSel
00004A36 FB00                       	dc.w $FB00
00004A38 001F                       	dc.w $1F
00004A3A 0000 0000                  	dc.l Pal_Sonic
00004A3E FB00                       	dc.w $FB00
00004A40 0007                       	dc.w 7
00004A42 0000 0000                  	dc.l Pal3_GHZ3
00004A46 FB20                       	dc.w $FB20
00004A48 0017                       	dc.w $17
00004A4A 0000 0000                  	dc.l Pal3_LZ3
00004A4E FB20                       	dc.w $FB20
00004A50 0017                       	dc.w $17
00004A52 0000 0000                  	dc.l Pal3_MZ3
00004A56 FB20                       	dc.w $FB20
00004A58 0017                       	dc.w $17
00004A5A 0000 0000                  	dc.l Pal3_SLZ3
00004A5E FB20                       	dc.w $FB20
00004A60 0017                       	dc.w $17
00004A62 0000 0000                  	dc.l Pal3_SYZ3
00004A66 FB20                       	dc.w $FB20
00004A68 0017                       	dc.w $17
00004A6A 0000 0000                  	dc.l Pal3_SBZ3
00004A6E FB20                       	dc.w $FB20
00004A70 0017                       	dc.w $17
00004A72 0000 0000                  	dc.l Pal3_Special
00004A76 FB00                       	dc.w $FB00
00004A78 001F                       	dc.w $1F
00004A7A 0000 0000                  	dc.l Pal3_LZWater3
00004A7E FB00                       	dc.w $FB00
00004A80 001F                       	dc.w $1F
00004A82 0000 0000                  	dc.l Pal3_SBZ3
00004A86 FB20                       	dc.w $FB20
00004A88 0017                       	dc.w $17
00004A8A 0000 0000                  	dc.l Pal3_SBZ3Water
00004A8E FB00                       	dc.w $FB00
00004A90 001F                       	dc.w $1F
00004A92 0000 0000                  	dc.l Pal3_SBZ2
00004A96 FB20                       	dc.w $FB20
00004A98 0017                       	dc.w $17
00004A9A 0000 0000                  	dc.l Pal3_LZSonWater
00004A9E FB00                       	dc.w $FB00
00004AA0 0007                       	dc.w 7
00004AA2 0000 0000                  	dc.l Pal3_SBZ3SonWat
00004AA6 FB00                       	dc.w $FB00
00004AA8 0007                       	dc.w 7
00004AAA 0000 0000                  	dc.l Pal3_SpeResult
00004AAE FB00                       	dc.w $FB00
00004AB0 001F                       	dc.w $1F
00004AB2 0000 0000                  	dc.l Pal3_SpeContinue
00004AB6 FB00                       	dc.w $FB00
00004AB8 000F                       	dc.w $F
00004ABA 0000 0000                  	dc.l Pal3_Ending
00004ABE FB00                       	dc.w $FB00
00004AC0 001F                       	dc.w $1F
00004AC2 0000 0000                  	dc.l Pal_ABZ3		; 14
00004AC6 FB20                       	dc.w $FB20
00004AC8 0017                       	dc.w $17
00004ACA 0000 0000                  	dc.l Menu_Palette; pallet address
00004ACE FB00                       	dc.w $FB00	; RAM address
00004AD0 001F                       	dc.w $1F	; (pallet length / 2) - 1
00004AD2 0000 0000                  	dc.l Pal_Ray
00004AD6 FB00                       	dc.w $FB00
00004AD8 0007                       	dc.w 7
00004ADA 0000 0000                  	dc.l Pal_SonicHeat
00004ADE FB00                       	dc.w $FB00
00004AE0 0007                       	dc.w 7
00004AE2 0000 0000                  	dc.l Pal_RayHeat
00004AE6 FB00                       	dc.w $FB00
00004AE8 0007                       	dc.w 7
00004AE8 0007                       	dc.w 7
00004AEA                            PalPointers4:
00004AEA                             include "_inc\Pallet pointers4.asm"
00004AEA                            ; ---------------------------------------------------------------------------
00004AEA                            ; Pal4let pointers
00004AEA                            ; ---------------------------------------------------------------------------
00004AEA 0000 0000                  	dc.l Pal_SegaBG		; Pal4let address
00004AEE FB00                       	dc.w $FB00		; RAM address
00004AF0 001F                       	dc.w $1F		; (Pal4let length / 2) - 1
00004AF2 0000 0000                  	dc.l Pal_Title
00004AF6 FB00                       	dc.w $FB00
00004AF8 001F                       	dc.w $1F
00004AFA 0000 0000                  	dc.l Pal_LevelSel
00004AFE FB00                       	dc.w $FB00
00004B00 001F                       	dc.w $1F
00004B02 0000 0000                  	dc.l Pal_Sonic
00004B06 FB00                       	dc.w $FB00
00004B08 0007                       	dc.w 7
00004B0A 0000 0000                  	dc.l Pal4_GHZ
00004B0E FB20                       	dc.w $FB20
00004B10 0017                       	dc.w $17
00004B12 0000 0000                  	dc.l Pal4_LZ
00004B16 FB20                       	dc.w $FB20
00004B18 0017                       	dc.w $17
00004B1A 0000 0000                  	dc.l Pal4_MZ
00004B1E FB20                       	dc.w $FB20
00004B20 0017                       	dc.w $17
00004B22 0000 0000                  	dc.l Pal4_SLZ
00004B26 FB20                       	dc.w $FB20
00004B28 0017                       	dc.w $17
00004B2A 0000 0000                  	dc.l Pal4_SYZ
00004B2E FB20                       	dc.w $FB20
00004B30 0017                       	dc.w $17
00004B32 0000 0000                  	dc.l Pal4_SBZ1
00004B36 FB20                       	dc.w $FB20
00004B38 0017                       	dc.w $17
00004B3A 0000 0000                  	dc.l Pal4_Special
00004B3E FB00                       	dc.w $FB00
00004B40 001F                       	dc.w $1F
00004B42 0000 0000                  	dc.l Pal4_LZWater
00004B46 FB00                       	dc.w $FB00
00004B48 001F                       	dc.w $1F
00004B4A 0000 0000                  	dc.l Pal4_SBZ3
00004B4E FB20                       	dc.w $FB20
00004B50 0017                       	dc.w $17
00004B52 0000 0000                  	dc.l Pal4_SBZ3Water
00004B56 FB00                       	dc.w $FB00
00004B58 001F                       	dc.w $1F
00004B5A 0000 0000                  	dc.l Pal4_SBZ2
00004B5E FB20                       	dc.w $FB20
00004B60 0017                       	dc.w $17
00004B62 0000 0000                  	dc.l Pal4_LZSonWater
00004B66 FB00                       	dc.w $FB00
00004B68 0007                       	dc.w 7
00004B6A 0000 0000                  	dc.l Pal4_SBZ3SonWat
00004B6E FB00                       	dc.w $FB00
00004B70 0007                       	dc.w 7
00004B72 0000 0000                  	dc.l Pal4_SpeResult
00004B76 FB00                       	dc.w $FB00
00004B78 001F                       	dc.w $1F
00004B7A 0000 0000                  	dc.l Pal4_SpeContinue
00004B7E FB00                       	dc.w $FB00
00004B80 000F                       	dc.w $F
00004B82 0000 0000                  	dc.l Pal4_Ending
00004B86 FB00                       	dc.w $FB00
00004B88 001F                       	dc.w $1F
00004B8A 0000 0000                  	dc.l Pal_Menu; Pal4let address
00004B8E FB00                       	dc.w $FB00	; RAM address
00004B90 001F                       	dc.w $1F	; (Pal4let length / 2) - 1
00004B92 0000 0000                  	dc.l Pal_Ray
00004B96 FB00                       	dc.w $FB00
00004B98 0007                       	dc.w 7
00004B9A 0000 0000                  	dc.l Pal_SonicHeat
00004B9E FB00                       	dc.w $FB00
00004BA0 0007                       	dc.w 7
00004BA2 0000 0000                  	dc.l Pal_RayHeat
00004BA6 FB00                       	dc.w $FB00
00004BA8 0007                       	dc.w 7
00004BAA 0000 0000                  	dc.l Pal4_ABZ		; 14
00004BAE FB20                       	dc.w $FB20
00004BB0 0017                       	dc.w $17
00004BB0 0017                       	dc.w $17
00004BB2                             
00004BB2                            ; ---------------------------------------------------------------------------
00004BB2                            ; Pallet data
00004BB2                            ; ---------------------------------------------------------------------------
00004BB2                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00004C32                            Pal_SegaBG2:	incbin	pallet\sega_bg2.bin
00004C52                            Pal_Title:	incbin	pallet\title.bin
00004CD2                            Pal_LevelSel:	incbin	'pallet\Level Select.bin'
00004D52                            Pal_Menu:	incbin	pallet\menu.bin
00004DD2                            Pal_MenuIcon:	incbin	pallet\menu_icons.bin
00005032                            Pal_Sonic: incbin pallet\sonic.bin
00005052                            Pal_Tails:	incbin	pallet\tails.bin
00005072                            Pal_Ray:	incbin pallet\sonic.bin
00005092                            Pal_SonicHeat:	incbin pallet\sonic.bin
000050B2                            Pal_RayHeat:	incbin pallet\sonic.bin
000050D2                            Pal_GHZ:	incbin	pallet\ghz.bin
00005132                            Pal_GHZ2:	incbin	pallet\ghz2.bin
00005192                            Pal_GHZ3:	incbin	pallet\ghz3.bin
000051F2                            Pal_GHZ4:	incbin	pallet\ghz3.bin
00005252                            Pal_GHZExtra:	incbin	pallet\ghzextra.bin
000052B2                            Pal_LZ:  incbin	pallet\lz.bin
00005312                            Pal_LZ2:  incbin	pallet\lz2.bin
00005372                            Pal_LZ3:  incbin	pallet\lz3.bin
000053D2                            Pal_LZ4:  incbin	pallet\lz4.bin
00005432                            Pal_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000054B2                            Pal_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00005532                            Pal_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000055B2                            Pal_MZ:  incbin	pallet\mz.bin
00005612                            Pal_MZ2:  incbin	pallet\mz2.bin
00005672                            Pal_MZ3:  incbin	pallet\mz3.bin
000056D2                            Pal_MZ4:	incbin	pallet\mz4.bin
00005732                            Pal_SLZ:	incbin	pallet\slz.bin
00005792                            Pal_SLZ2:	incbin	pallet\slz2.bin
000057F2                            Pal_SLZ3:	incbin	pallet\slz3.bin
00005852                            Pal_SLZ4:	incbin	pallet\slz4.bin
000058B2                            Pal_SYZ:	incbin	pallet\syz.bin
00005912                            Pal_SYZ2:	incbin	pallet\syz2.bin
00005972                            Pal_SYZ3:	incbin	pallet\syz3.bin
000059D2                            Pal_SYZ4:	incbin	pallet\syz4.bin
00005A32                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
00005A92                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00005AF2                            Pal_Special:	incbin	pallet\special.bin; special stage pallets
00005B72                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00005BD2                            Pal_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00005C32                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00005CB2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00005CD2                            Pal_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00005CF2                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00005D12                            Pal_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00005D32                            Pal_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00005DB2                            Pal_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00005DF2                            Pal_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00005E72                            Pal_ABZ:	incbin	pallet\abz.bin
00005ED2                            Pal_ABZ2:	incbin	pallet\abz2.bin
00005F32                            Pal_ABZ3:	incbin	pallet\abz3.bin
00005F92                            Pal_ABZ4:	incbin	pallet\abz4.bin
00005FF2                            Pal2_GHZ:	incbin	pallet\ghz.bin
00006052                            Pal2_GHZ2:	incbin	pallet\ghz2.bin
000060B2                            Pal2_GHZ3:	incbin	pallet\ghz3.bin
00006112                            Pal2_GHZ4:	incbin	pallet\ghz3.bin
00006172                            Pal2_GHZExtra:	incbin	pallet\ghzextra.bin
000061D2                            Pal2_LZ:  incbin	pallet\lz.bin
00006232                            Pal2_LZ2:  incbin	pallet\lz2.bin
00006292                            Pal2_LZ3:  incbin	pallet\lz3.bin
000062F2                            Pal2_LZ4:  incbin	pallet\lz4.bin
00006352                            Pal2_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000063D2                            Pal2_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00006452                            Pal2_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000064D2                            Pal2_MZ:  incbin	pallet\mz.bin
00006532                            Pal2_MZ2:  incbin	pallet\mz2.bin
00006592                            Pal2_MZ3:  incbin	pallet\mz3.bin
000065F2                            Pal2_MZ4:	incbin	pallet\mz4.bin
00006652                            Pal2_SLZ:	incbin	pallet\slz.bin
000066B2                            Pal2_SLZ2:	incbin	pallet\slz2.bin
00006712                            Pal2_SLZ3:	incbin	pallet\slz3.bin
00006772                            Pal2_SLZ4:	incbin	pallet\slz4.bin
000067D2                            Pal2_SYZ:	incbin	pallet\syz.bin
00006832                            Pal2_SYZ2:	incbin	pallet\syz2.bin
00006892                            Pal2_SYZ3:	incbin	pallet\syz3.bin
000068F2                            Pal2_SYZ4:	incbin	pallet\syz4.bin
00006952                            Pal2_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000069B2                            Pal2_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00006A12                            Pal2_Special:	incbin	pallet\special.bin; special stage pallets
00006A92                            Pal2_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00006AF2                            Pal2_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00006B52                            Pal2_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00006BD2                            Pal2_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00006BF2                            Pal2_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00006C12                            Pal2_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00006C32                            Pal2_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00006C52                            Pal2_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00006CD2                            Pal2_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00006D12                            Pal2_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00006D92                            Pal2_ABZ:	incbin	pallet\abz.bin
00006DF2                            Pal2_ABZ2:	incbin	pallet\abz2.bin
00006E52                            Pal2_ABZ3:	incbin	pallet\abz3.bin
00006EB2                            Pal2_ABZ4:	incbin	pallet\abz4.bin
00006F12                            Pal3_GHZ:	incbin	pallet\ghz.bin
00006F72                            Pal3_GHZ2:	incbin	pallet\ghz2.bin
00006FD2                            Pal3_GHZ3:	incbin	pallet\ghz3.bin
00007032                            Pal3_GHZ4:	incbin	pallet\ghz3.bin
00007092                            Pal3_GHZExtra:	incbin	pallet\ghzextra.bin
000070F2                            Pal3_LZ:  incbin	pallet\lz.bin
00007152                            Pal3_LZ2:  incbin	pallet\lz2.bin
000071B2                            Pal3_LZ3:  incbin	pallet\lz3.bin
00007212                            Pal3_LZ4:  incbin	pallet\lz4.bin
00007272                            Pal3_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
000072F2                            Pal3_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00007372                            Pal3_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
000073F2                            Pal3_MZ:  incbin	pallet\mz.bin
00007452                            Pal3_MZ2:  incbin	pallet\mz2.bin
000074B2                            Pal3_MZ3:  incbin	pallet\mz3.bin
00007512                            Pal3_MZ4:	incbin	pallet\mz4.bin
00007572                            Pal3_SLZ:	incbin	pallet\slz.bin
000075D2                            Pal3_SLZ2:	incbin	pallet\slz2.bin
00007632                            Pal3_SLZ3:	incbin	pallet\slz3.bin
00007692                            Pal3_SLZ4:	incbin	pallet\slz4.bin
000076F2                            Pal3_SYZ:	incbin	pallet\syz.bin
00007752                            Pal3_SYZ2:	incbin	pallet\syz2.bin
000077B2                            Pal3_SYZ3:	incbin	pallet\syz3.bin
00007812                            Pal3_SYZ4:	incbin	pallet\syz4.bin
00007872                            Pal3_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000078D2                            Pal3_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00007932                            Pal3_Special:	incbin	pallet\special.bin; special stage pallets
000079B2                            Pal3_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00007A12                            Pal3_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00007A72                            Pal3_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00007AF2                            Pal3_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00007B12                            Pal3_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00007B32                            Pal3_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00007B52                            Pal3_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00007B72                            Pal3_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00007BF2                            Pal3_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00007C32                            Pal3_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00007CB2                            Pal3_ABZ:	incbin	pallet\abz.bin
00007D12                            Pal3_ABZ2:	incbin	pallet\abz2.bin
00007D72                            Pal3_ABZ3:	incbin	pallet\abz3.bin
00007DD2                            Pal3_ABZ4:	incbin	pallet\abz4.bin
00007E32                            Pal4_GHZ:	incbin	pallet\ghz.bin
00007E92                            Pal4_GHZ2:	incbin	pallet\ghz2.bin
00007EF2                            Pal4_GHZ3:	incbin	pallet\ghz3.bin
00007F52                            Pal4_GHZ4:	incbin	pallet\ghz3.bin
00007FB2                            Pal4_GHZExtra:	incbin	pallet\ghzextra.bin
00008012                            Pal4_LZ:  incbin	pallet\lz.bin
00008072                            Pal4_LZ2:  incbin	pallet\lz2.bin
000080D2                            Pal4_LZ3:  incbin	pallet\lz3.bin
00008132                            Pal4_LZ4:  incbin	pallet\lz4.bin
00008192                            Pal4_LZWater:	incbin	pallet\lz_uw.bin; LZ underwater pallets
00008212                            Pal4_LZWater2:	incbin	pallet\lz_uw2.bin; LZ underwater pallets
00008292                            Pal4_LZWater3:	incbin	pallet\lz_uw3.bin; LZ underwater pallets
00008312                            Pal4_MZ:  incbin	pallet\mz.bin
00008372                            Pal4_MZ2:  incbin	pallet\mz2.bin
000083D2                            Pal4_MZ3:  incbin	pallet\mz3.bin
00008432                            Pal4_MZ4:	incbin	pallet\mz4.bin
00008492                            Pal4_SLZ:	incbin	pallet\slz.bin
000084F2                            Pal4_SLZ2:	incbin	pallet\slz2.bin
00008552                            Pal4_SLZ3:	incbin	pallet\slz3.bin
000085B2                            Pal4_SLZ4:	incbin	pallet\slz4.bin
00008612                            Pal4_SYZ:	incbin	pallet\syz.bin
00008672                            Pal4_SYZ2:	incbin	pallet\syz2.bin
000086D2                            Pal4_SYZ3:	incbin	pallet\syz3.bin
00008732                            Pal4_SYZ4:	incbin	pallet\syz4.bin
00008792                            Pal4_SBZ1:	incbin	pallet\sbz_act1.bin; SBZ act 1 pallets
000087F2                            Pal4_SBZ2:	incbin	pallet\sbz_act2.bin; SBZ act 2 & Final Zone pallets
00008852                            Pal4_Special:	incbin	pallet\special.bin; special stage pallets
000088D2                            Pal4_SBZ3:	incbin	pallet\sbz_act3.bin; SBZ act 3 pallets
00008932                            Pal4_SBZ4:	incbin	pallet\sbz_act4.bin; SBZ act 3 pallets
00008992                            Pal4_SBZ3Water:	incbin	pallet\sbz_a3uw.bin; SBZ act 3 (underwater) pallets
00008A12                            Pal4_LZSonWater:	incbin	pallet\son_lzuw.bin; Sonic (underwater in LZ) pallet
00008A32                            Pal4_LZTailsWater:	incbin	pallet\tails_lzuw.bin	; Tails (underwater in LZ) pallet
00008A52                            Pal4_SBZ3SonWat:	incbin	pallet\son_sbzu.bin; Sonic (underwater in SBZ act 3) pallet
00008A72                            Pal4_SBZ3TailsWat:	incbin	pallet\tails_sbzu.bin	; Tails (underwater in SBZ act 3) pallet
00008A92                            Pal4_SpeResult:	incbin	pallet\ssresult.bin; special stage results screen pallets
00008B12                            Pal4_SpeContinue:incbin	pallet\sscontin.bin; special stage results screen continue pallet
00008B52                            Pal4_Ending:	incbin	pallet\ending.bin; ending sequence pallets
00008BD2                            Pal4_ABZ:	incbin	pallet\abz.bin
00008C32                            Pal4_ABZ2:	incbin	pallet\abz2.bin
00008C92                            Pal4_ABZ3:	incbin	pallet\abz3.bin
00008CF2                            Pal4_ABZ4:	incbin	pallet\abz4.bin
00008D52                            Pal_SSRGBG:		incbin	pallet\ssrgbg.bin
00008D72                            
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00008D72                            ; ---------------------------------------------------------------------------
00008D72                            
00008D72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D72                            
00008D72                            
00008D72                            DelayProgram:				; XREF: PauseGame
00008D72 46FC 2300                  		enable_ints
00008D76                            
00008D76                            loc_29AC:
00008D76 4A38 F62A                  		tst.b	($FFFFF62A).w
00008D7A 66FA                       		bne.s	loc_29AC
00008D7C 4E75                       		rts	
00008D7E                            ; End of function DelayProgram
00008D7E                            
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            ; Called at the end of each frame to perform vertical synchronization
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            
00008D7E                            ; =============== S U B R O U T I N E =======================================
00008D7E                            
00008D7E =00008D72                  Wait_VSync	= DelayProgram
00008D7E                            
00008D7E                            ; End of function Wait_VSync
00008D7E                            
00008D7E                            
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            ; Subroutine to	generate a pseudo-random number	in d0
00008D7E                            ; ---------------------------------------------------------------------------
00008D7E                            
00008D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D7E                            
00008D7E                            
00008D7E                            RandomNumber:
00008D7E 2238 F636                  		move.l	($FFFFF636).w,d1
00008D82                            ;		tst.w	d1
00008D82 6600                       		bne.s	loc_29C0
00008D84 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00008D8A                            
00008D8A                            loc_29C0:
00008D8A 2001                       		move.l	d1,d0
00008D8C E581                       		asl.l	#2,d1
00008D8E D280                       		add.l	d0,d1
00008D90 E781                       		asl.l	#3,d1
00008D92 D280                       		add.l	d0,d1
00008D94 3001                       		move.w	d1,d0
00008D96 4841                       		swap	d1
00008D98 D041                       		add.w	d1,d0
00008D9A 3200                       		move.w	d0,d1
00008D9C 4841                       		swap	d1
00008D9E 21C1 F636                  		move.l	d1,($FFFFF636).w
00008DA2 4E75                       		rts	
00008DA4                            ; End of function RandomNumber
00008DA4                            
00008DA4                            CalcSine:				; XREF: SS_BGAnimate; et al
00008DA4 0240 00FF                  		andi.w	#$FF,d0
00008DA8 D040                       		add.w	d0,d0
00008DAA 0640 0080                  		addi.w	#$80,d0
00008DAE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00008DB2 0440 0080                  		subi.w	#$80,d0
00008DB6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00008DBA 4E75                       		rts	
00008DBC                            ; End of function CalcSine
00008DBC                            
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
0000903C                            
0000903C                            ; ===========================================================================
0000903C 48E7 6000                  		movem.l	d1-d2,-(sp)
00009040 3200                       		move.w	d0,d1
00009042 4841                       		swap	d1
00009044 7000                       		moveq	#0,d0
00009046 3200                       		move.w	d0,d1
00009048 7407                       		moveq	#7,d2
0000904A                            
0000904A                            loc_2C80:
0000904A E599                       		rol.l	#2,d1
0000904C D040                       		add.w	d0,d0
0000904E 5240                       		addq.w	#1,d0
00009050 9240                       		sub.w	d0,d1
00009052 6400                       		bcc.s	loc_2C9A
00009054 D240                       		add.w	d0,d1
00009056 5340                       		subq.w	#1,d0
00009058 51CA FFF0                  		dbf	d2,loc_2C80
0000905C E248                       		lsr.w	#1,d0
0000905E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00009062 4E75                       		rts	
00009064                            ; ===========================================================================
00009064                            
00009064                            loc_2C9A:
00009064 5240                       		addq.w	#1,d0
00009066 51CA FFE2                  		dbf	d2,loc_2C80
0000906A E248                       		lsr.w	#1,d0
0000906C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00009070 4E75                       		rts	
00009072                            
00009072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009072                            
00009072                            
00009072                            CalcAngle:
00009072 48E7 1800                  		movem.l	d3-d4,-(sp)
00009076 7600                       		moveq	#0,d3
00009078 7800                       		moveq	#0,d4
0000907A 3601                       		move.w	d1,d3
0000907C 3802                       		move.w	d2,d4
0000907E 8843                       		or.w	d3,d4
00009080 6700                       		beq.s	loc_2D04
00009082 3802                       		move.w	d2,d4
00009084 4A43                       		tst.w	d3
00009086 6A00 0000                  		bpl.w	loc_2CC2
0000908A 4443                       		neg.w	d3
0000908C                            
0000908C                            loc_2CC2:
0000908C 4A44                       		tst.w	d4
0000908E 6A00 0000                  		bpl.w	loc_2CCA
00009092 4444                       		neg.w	d4
00009094                            
00009094                            loc_2CCA:
00009094 B843                       		cmp.w	d3,d4
00009096 6400 0000                  		bcc.w	loc_2CDC
0000909A E18C                       		lsl.l	#8,d4
0000909C 88C3                       		divu.w	d3,d4
0000909E 7000                       		moveq	#0,d0
000090A0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000090A4 6000                       		bra.s	loc_2CE6
000090A6                            ; ===========================================================================
000090A6                            
000090A6                            loc_2CDC:				; XREF: CalcAngle
000090A6 E18B                       		lsl.l	#8,d3
000090A8 86C4                       		divu.w	d4,d3
000090AA 7040                       		moveq	#$40,d0
000090AC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000090B0                            
000090B0                            loc_2CE6:
000090B0 4A41                       		tst.w	d1
000090B2 6A00 0000                  		bpl.w	loc_2CF2
000090B6 4440                       		neg.w	d0
000090B8 0640 0080                  		addi.w	#$80,d0
000090BC                            
000090BC                            loc_2CF2:
000090BC 4A42                       		tst.w	d2
000090BE 6A00 0000                  		bpl.w	loc_2CFE
000090C2 4440                       		neg.w	d0
000090C4 0640 0100                  		addi.w	#$100,d0
000090C8                            
000090C8                            loc_2CFE:
000090C8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000090CC 4E75                       		rts	
000090CE                            ; ===========================================================================
000090CE                            
000090CE                            loc_2D04:				; XREF: CalcAngle
000090CE 303C 0040                  		move.w	#$40,d0
000090D2 4CDF 0018                  		movem.l	(sp)+,d3-d4
000090D6 4E75                       		rts	
000090D8                            ; End of function CalcAngle
000090D8                            
000090D8                            ; ===========================================================================
000090D8                            
000090D8                            Angle_Data:	incbin	misc\angles.bin
000091DA                            
000091DA                            ; ===========================================================================
000091DA                            
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            ; Sega screen
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            
000091DA                            SegaScreen:				; XREF: GameModeArray
000091DA 103C 00E0                  		move.b	#$E0,d0
000091DE 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; stop music
000091E2 4EB8 3754                  		jsr	clearplc
000091E6 4EB8 4528                  		jsr	pal_fadefrom
000091EA 43F8 F700                  		lea	($FFFFF700).w,a1
000091EE 7000                       		moveq	#0,d0
000091F0 323C 003F                  		move.w	#$3F,d1
000091F4                            
000091F4                            loc_30332A:					  ; ...
000091F4 22C0                       		move.l	d0,(a1)+
000091F6 51C9 FFFC                  		dbf	d1,loc_30332A
000091FA 43F8 D000                  		lea	($FFFFD000).w,a1
000091FE 7000                       		moveq	#0,d0
00009200 323C 07FF                  		move.w	#$7FF,d1
00009204                            
00009204                            loc_30333A:					  ; ...
00009204 22C0                       		move.l	d0,(a1)+
00009206 51C9 FFFC                  		dbf	d1,loc_30333A
0000920A 4DF9 00C0 0004             		lea	($C00004).l,a6
00009210 3CBC 8004                  		move.w	#$8004,(a6)
00009214 3CBC 8230                  		move.w	#$8230,(a6)
00009218 3CBC 8407                  		move.w	#$8407,(a6)
0000921C 3CBC 8700                  		move.w	#$8700,(a6)
00009220 3CBC 8B00                  		move.w	#$8B00,(a6)
00009224 4238 F64E                  		clr.b	($FFFFF64E).w
00009228 46FC 2700                  		disable_ints
0000922C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00009230 0200 00BF                  		andi.b	#$BF,d0
00009234 33C0 00C0 0004             		move.w	d0,($C00004).l
0000923A 4EB8 3084                  		jsr	ClearScreen
0000923E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00009248 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000924E 4EB8 3596                  		jsr	NemDec
00009252 43F9 00FF 0000             		lea	($FF0000).l,a1
00009258 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000925E 303C 0000                  		move.w	#0,d0
00009262 4EB8 389E                  		jsr	EniDec
00009266 43F9 00FF 0000             		lea	($FF0000).l,a1
0000926C 203C 6510 0003             		move.l	#$65100003,d0
00009272 7217                       		moveq	#$17,d1
00009274 7407                       		moveq	#7,d2
00009276 4EB8 34A0                  		jsr	ShowVDPGraphics
0000927A 43F9 00FF 0180             		lea	($FF0180).l,a1
00009280 203C 4000 0003             		move.l	#$40000003,d0
00009286 7227                       		moveq	#$27,d1
00009288 741B                       		moveq	#$1B,d2
0000928A 4EB8 34A0                  		jsr	ShowVDPGraphics
0000928E                            ;		lea	($FFFFD080).w,a1
0000928E                            ;		move.b	#6,(a1)
0000928E                            ;		move.b	#$4E,$28(a1)
0000928E                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000928E                            ;		bpl.s	GameInitCont	; if Japanese, branch
0000928E                            ;		jmp		GameInitCont2
0000928E                            ;GameInitCont:
0000928E                            ;		jmp     SegaLogo
0000928E                            ;GameInitCont2:
0000928E 7000                       		moveq	#0,d0
00009290 4EB8 4812                  		jsr	PalLoad2	; load Sega logo pallet
00009294 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000929A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000092A0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000092A6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000092AC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000092B0 0000 0040                  		ori.b	#$40,d0
000092B4 33C0 00C0 0004             		move.w	d0,($C00004).l
000092BA                            
000092BA                            Sega_WaitPallet:
000092BA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000092C0 6100 FAB0                  		bsr.w	Wait_VSync
000092C4 4EB8 4708                  		jsr	PalCycle_Sega
000092C8 66F0                       		bne.s	Sega_WaitPallet
000092CA                            
000092CA 103C 00FF                  		move.b	#$FF,d0
000092CE 6100 0000                  		bsr.w	Jmpto_PlaySound_Special ; play "SEGA"	sound
000092D2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000092D8 6100 FA98                  		bsr.w	Wait_VSync
000092DC 31FC 00B4 FC20             		move.w	#$B4,($FFFFFC20).w
000092E2                            			; If start was pressed, skip ahead
000092E2                            
000092E2                            Sega_WaitEnd:
000092E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000092E8 6100 FA88                  		bsr.w	Wait_VSync
000092EC 4A78 FC20                  		tst.w	($FFFFFC20).w
000092F0 6700                       		beq.s	Sega_GotoTitle
000092F2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000092F8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000092FA                            
000092FA                            Sega_GotoTitle:
000092FA 4EF9 0000 0000             		jmp		SSRGSCreen
00009300 4E75                       		rts
00009302                            
00009302                            ; ===========================================================================
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Subroutine that does the exact same thing as ShowVDPGraphics2
00009302                            ; (this one is used at the Sega screen)
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00009302                            
00009302                            ; sub_396E:
00009302                            ShowVDPGraphics3:
00009302 4DF9 00C0 0000             		lea	($C00000).l,a6
00009308 283C 0100 0000             		move.l	#$1000000,d4
0000930E                            
0000930E                            loc_3034D4:					  ; ...
0000930E 2D40 0004                  		move.l	d0,4(a6)
00009312 3601                       		move.w	d1,d3
00009314                            
00009314                            loc_3034DA:					  ; ...
00009314 3C99                       		move.w	(a1)+,(a6)
00009316 51CB FFFC                  		dbf	d3,loc_3034DA
0000931A D084                       		add.l	d4,d0
0000931C 51CA FFF0                  		dbf	d2,loc_3034D4
00009320 4E75                       		rts
00009322                            ; End of function ShowVDPGraphics3
00009322                            
00009322                            ; ===========================================================================
00009322 4E71                       	nop
00009324                            
00009324                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00009324                            
00009324                            ; sub_3990:
00009324                            JmpTo_RunObjects 
00009324 4EF9 0000 0000             	jmp	ObjectsLoad.l
0000932A                            ; End of function JmpTo_RunObjects
0000932A                            
0000932A                            ; ===========================================================================
0000932A 0000                       	align 4
0000932C                            	
0000932C                            JmpTo_SoundDriverLoad2:
0000932C 4EF8 3112                  	jmp	JmpTo_SoundDriverLoad
00009330 4E75                       	rts
00009332                            
00009332                            Jmpto_PlaySound_Special:
00009332 4EF8 325C                  	jmp	PlaySound_Special
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Title	screen
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            TitleScreen:				; XREF: GameModeArray
00009336 103C 00E4                  		move.b	#$E4,d0
0000933A 6100 FFF6                  		bsr.w	Jmpto_PlaySound_Special ; stop music
0000933E 4EB8 3754                  		jsr	clearplc
00009342                            ;		move.b	#0,($FFFFFFCC).w
00009342 4EB8 4528                  		jsr	pal_fadefrom
00009346 46FC 2700                  		disable_ints
0000934A 6100 FFE0                  		bsr.w	JmpTo_SoundDriverLoad2
0000934E 4DF9 00C0 0004             		lea	($C00004).l,a6
00009354 3CBC 8004                  		move.w	#$8004,(a6)
00009358 3CBC 8230                  		move.w	#$8230,(a6)
0000935C 3CBC 8407                  		move.w	#$8407,(a6)
00009360 3CBC 9001                  		move.w	#$9001,(a6)
00009364 3CBC 9200                  		move.w	#$9200,(a6)
00009368 3CBC 8B03                  		move.w	#$8B03,(a6)
0000936C 3CBC 8720                  		move.w	#$8720,(a6)
00009370 4238 F64E                  		clr.b	($FFFFF64E).w
00009374                            ;		clr.b	($FFFFFF0A).w
00009374 3CBC 8C81                  		move.w	#$8C81,(a6)
00009378 4EB8 3084                  		jsr	ClearScreen
0000937C 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
00009380 7000                       		moveq	#0,d0
00009382 323C 00FF                  		move.w	#$FF,d1
00009386                            
00009386                            loc_303534:					  ; ...
00009386 22C0                       		move.l	d0,(a1)+
00009388 51C9 FFFC                  		dbf	d1,loc_303534
0000938C 43F8 D000                  		lea	($FFFFD000).w,a1
00009390 7000                       		moveq	#0,d0
00009392 323C 07FF                  		move.w	#$7FF,d1
00009396                            
00009396                            loc_303544:					  ; ...
00009396 22C0                       		move.l	d0,(a1)+
00009398 51C9 FFFC                  		dbf	d1,loc_303544
0000939C 43F8 F700                  		lea	($FFFFF700).w,a1
000093A0 7000                       		moveq	#0,d0
000093A2 323C 003F                  		move.w	#$3F,d1
000093A6                            
000093A6                            loc_303554:					  ; ...
000093A6 22C0                       		move.l	d0,(a1)+
000093A8 51C9 FFFC                  		dbf	d1,loc_303554
000093AC 43F8 EE00                  		lea	($FFFFEE00).w,a1
000093B0 7000                       		moveq	#0,d0
000093B2 323C 003F                  		move.w	#$3F,d1
000093B6                            		
000093B6                            loc_303564:					  ; ...
000093B6 22C0                       		move.l	d0,(a1)+
000093B8 51C9 FFFC                  		dbf	d1,loc_303564
000093BC 46FC 2700                  		disable_ints
000093C0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000093CA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000093D0 4EB8 3596                  		jsr	NemDec
000093D4 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000093DE 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000093E4 4EB8 3596                  		jsr	NemDec
000093E8 43F9 00FF 0000             		lea	($FF0000).l,a1
000093EE 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000093F4 303C 0000                  		move.w	#0,d0
000093F8 4EB8 389E                  		jsr	EniDec
000093FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00009402 203C 4000 0003             		move.l	#$40000003,d0
00009408 7227                       		moveq	#$27,d1
0000940A 741B                       		moveq	#$1B,d2
0000940C 4EB8 34A0                  		jsr	ShowVDPGraphics
00009410 43F8 FB80                  		lea	($FFFFFB80).w,a1
00009414 7000                       		moveq	#0,d0
00009416 323C 001F                  		move.w	#$1F,d1
0000941A                            
0000941A                            Title_ClrPallet:
0000941A 22C0                       		move.l	d0,(a1)+
0000941C 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00009420                            
00009420 7003                       		moveq	#3,d0		; load Sonic's pallet
00009422 4EB8 47FA                  		jsr	PalLoad1
00009426                            ;		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00009426 4278 FFF4                  		clr.w	($FFFFFFF4).w
0000942A 4EB9 0000 0000             		jsr	Credits_MapLoad
00009430 4EB9 0000 0000             		jsr	ObjectsLoad
00009436 4EB9 0000 0000             		jsr	BuildSprites
0000943C 4EB8 446E                  		jsr	Pal_FadeTo
00009440 46FC 2700                  		disable_ints
00009444 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000944E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00009454 4EB8 3596                  		jsr	NemDec
00009458 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00009462 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00009468 4EB8 3596                  		jsr	NemDec
0000946C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00009476 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000947C 4EB8 3596                  		jsr	NemDec
00009480 23FC 6240 0002 00C0 0004   		move.l	#$62400002,($C00004).l
0000948A 41F9 0000 0000             		lea	(Nem_TitleMenu).l,a0 ; load "Title Menu text" patterns
00009490 4EB8 3596                  		jsr	NemDec
00009494 4DF9 00C0 0000             		lea	($C00000).l,a6
0000949A 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000094A2 4BF9 0000 0000             		lea	(Art_Text).l,a5
000094A8 323C 028F                  		move.w	#$28F,d1
000094AC                            
000094AC                            Title_LoadText:
000094AC 3C9D                       		move.w	(a5)+,(a6)
000094AE 51C9 FFFC                  		dbf	d1,Title_LoadText; load uncompressed text patterns
000094B2                            	;Mercury Game Over When Drowning Fix
000094B2 11FC 0000 F744             		move.b	#0,(f_nobgscroll).w
000094B8                            	;end Game Over When Drowning Fix
000094B8 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w; clear lamppost counter
000094BE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w; disable debug item placement	mode
000094C4 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w; disable debug mode
000094CA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000094D0 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w; set level to	GHZ (00)
000094D6 31FC 0000 F634             		move.w	#0,($FFFFF634).w; disable palette cycling
000094DC 4EB9 0000 0000             		jsr	LevelSizeLoad
000094E2 4EB9 0000 0000             		jsr	DeformBgLayer
000094E8 43F8 B000                  		lea	($FFFFB000).w,a1
000094EC                            
000094EC 41F9 0000 0000             		lea	(Blk16_Title).l,a0  ; load GHZ 16x16 mappings
000094F2 6100 A532                  		bsr.w	KosDec            ; use Kosinski decompressor instead of Enigma decompresor
000094F6 41F9 0000 0000             		lea	(Blk256_Title).l,a0 ; load GHZ 256x256 mappings
000094FC 43F9 00FF 0000             		lea	($FF0000).l,a1
00009502 4EB8 3A26                  		jsr	KosDec
00009506                            
00009506 4EB9 0000 0000             		jsr	LevelLayoutLoad
0000950C 4EB8 4528                  		jsr	pal_fadefrom
00009510 46FC 2700                  		disable_ints
00009514 4EB8 3084                  		jsr	ClearScreen
00009518 4BF9 00C0 0004             		lea	($C00004).l,a5
0000951E 4DF9 00C0 0000             		lea	($C00000).l,a6
00009524 47F8 F708                  		lea	($FFFFF708).w,a3
00009528 2878 A404                  		movea.l	($FFFFA404).w,a4
0000952C 343C 6000                  		move.w	#$6000,d2
00009530 4EB9 0000 0000             		jsr	LoadTilesFromStart2
00009536                            ;		lea     ($FFFF0858), A1    
00009536                             ;       lea     (CopyrightText), A2                   ; Offset_0x003E3A
00009536                             ;       moveq   #$0A, D6
00009536                            Offset_0x003B1A:
00009536                            	;	move.w  (A2)+, (A1)+
00009536                            	;	dbra    D6, Offset_0x003B1A
00009536                            	;	lea     ($FFFF0000), A1
00009536                            	;	move.l  #$40000003, D0
00009536                            	;	moveq   #$27, D1
00009536                            	;	moveq   #$1B, D2
00009536                            	;	jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
00009536                            	;	lea     ($FFFFFB00).w, A1
00009536                            	;	moveq   #$00, D0
00009536                            ;		move.w  #$003F, D1
00009536 43F9 00FF 0000             		lea	($FF0000).l,a1
0000953C 41F9 0000 0000             		lea	(Eni_Title).l,a0; load	title screen mappings
00009542 303C 0000                  		move.w	#0,d0
00009546 4EB8 389E                  		jsr	EniDec
0000954A 43F9 00FF 0000             		lea	($FF0000).l,a1
00009550 203C 4206 0003             		move.l	#$42060003,d0
00009556 7221                       		moveq	#$21,d1
00009558 7415                       		moveq	#$15,d2
0000955A 4EB8 34A0                  		jsr	ShowVDPGraphics
0000955E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00009568 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0; load GHZ patterns
0000956E 4EB8 3596                  		jsr	NemDec
00009572                            
00009572 7004                       		moveq	#palid_GHZ,d0	; load GHZ palette
00009574 4EB8 47FA                  		jsr	PalLoad1
00009578                            		
00009578 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000957A 4EB8 47FA                  		jsr	PalLoad1
0000957E 103C 0011                  		move.b	#$11,d0; play title screen music
00009582 6100 FDAE                  		bsr.w	Jmpto_PlaySound_Special
00009586 11F9 0020 002D FF8C        		move.b	($20002D).l,($FFFFFF8C).w ; load unlocked level select if game is beaten
0000958E 31FC 0000 D00C             		move.w	#$0,($FFFFD00C).w
00009594 31FC 0000 F704             		move.w	#$0,($FFFFF704).w
0000959A 11FC 0000 FFDA             		move.b	#0,($FFFFFFDA).w; disable debug mode
000095A0 31FC 0178 FC20             		move.w	#$178,($FFFFFC20).w; run title	screen for $178	frames
000095A6 43F8 D080                  		lea	($FFFFD080).w,a1
000095AA 7000                       		moveq	#0,d0
000095AC 323C 0007                  		move.w	#7,d1
000095B0                            
000095B0                            ;Title_ClrObjRam2:
000095B0                            	;	move.l	d0,(a1)+
000095B0                            	;	dbf	d1,Title_ClrObjRam2
000095B0 43F8 D080                  		lea ($FFFFD080).w,a1
000095B4                            
000095B4 4EB9 0000 0000             		jsr DeleteObject2 ;clear object RAM more thoroughly
000095BA 11FC 000E D040             		move.b #$E,($FFFFD040).w ; load big Sonic object
000095C0 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000095C6 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000095CC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000095D2 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000095D8 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000095DE 4EB9 0000 0000             		jsr	ObjectsLoad
000095E4 4EB9 0000 0000             		jsr	DeformBgLayer
000095EA 4EB9 0000 0000             		jsr	BuildSprites
000095F0 7000                       		moveq	#0,d0
000095F2 4EB8 3728                  		jsr	LoadPLC2
000095F6                            ;		jsr	LoadLivesCounterArt
000095F6 31FC 0000 FFD4             		move.w	#0,(Correct_cheat_entries).w
000095FC 31FC 0000 FFD6             		move.w	#0,(Correct_cheat_entries_2).w
00009602 4E71                       		nop
00009604 4E71                       		nop
00009606 4E71                       		nop
00009608 4E71                       		nop
0000960A 4E71                       		nop
0000960C 4E71                       		nop
0000960E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00009612 0000 0040                  		ori.b	#$40,d0
00009616 33C0 00C0 0004             		move.w	d0,($C00004).l
0000961C 4EB8 446E                  		jsr	Pal_FadeTo
00009620                            
00009620                            loc_317C:
00009620 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009626 6100 F74A                  		bsr.w	Wait_VSync
0000962A 4EB9 0000 0000             		jsr	ObjectsLoad
00009630 4EB9 0000 0000             		jsr	DeformBgLayer
00009636 4EB9 0000 0000             		jsr	BuildSprites
0000963C 4EB8 3C76                  		jsr	PalCycle_GHZ
00009640 4EB8 3762                  		jsr	RunPLC_RAM
00009644 3038 D008                  		move.w	($FFFFD008).w,d0
00009648 5440                       		addq.w	#2,d0
0000964A 0C40 FF00                  		cmpi.w	#$FF00,d0	; has Sonic object passed x-position $FF00?
0000964E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00009650                            ;		move.b	#0,($FFFFF600).w ; go to Sega screen
00009650 4E75                       		rts	
00009652                            ; ===========================================================================
00009652                            
00009652                            Title_ChkRegion:
00009652                            ;		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00009652                            ;		bpl.s	Title_RegionJ	; if Japanese, branch
00009652                            ;		lea	(LevelSelectCode_US).l,a0 ; load US code
00009652                            ;		bra.s	Title_EnterCheat
00009652                            ; ===========================================================================
00009652                            
00009652                            Title_RegionJ:				; XREF: Title_ChkRegion
00009652                            ;		lea	(LevelSelectCode_J).l,a0 ; load	J code
00009652                            
00009652                            Title_EnterCheat:			; XREF: Title_ChkRegion
00009652                            ;		move.w	($FFFFFFE4).w,d0
00009652                            ;		adda.w	d0,a0
00009652                            ;		move.b	($FFFFF605).w,d0 ; get button press
00009652                            ;		andi.b	#$F,d0		; read only up/down/left/right buttons
00009652                            ;		cmp.b	(a0),d0		; does button press match the cheat code?
00009652                            ;		bne.s	loc_3210	; if not, branch
00009652                            ;		addq.w	#1,($FFFFFFE4).w ; next	button press
00009652                            ;		tst.b	d0
00009652                            ;		bne.s	Title_CountC
00009652                            ;		lea	($FFFFFFE0).w,a0
00009652                            ;		move.w	($FFFFFFE6).w,d1
00009652                            ;		lsr.w	#1,d1
00009652                            ;		andi.w	#3,d1
00009652                            ;		beq.s	Title_PlayRing
00009652                            ;		tst.b	($FFFFFFF8).w
00009652                            ;		bpl.s	Title_PlayRing
00009652                            ;		moveq	#1,d1
00009652                            ;		move.b	d1,1(a0,d1.w)
00009652                            
00009652                            Title_PlayRing:
00009652                            ;		move.b	#1,(a0,d1.w)	; activate cheat
00009652                            ;		move.b	#$B5,d0		; play ring sound when code is entered
00009652                            ;		jsr	PlaySound_Special
00009652                            ;		bra.s	Title_CountC
00009652                            ; ===========================================================================
00009652                            loc_3210:				; XREF: Title_EnterCheat
00009652                            ;		tst.b	d0
00009652                            ;		beq.s	Title_CountC
00009652                            ;		cmpi.w	#9,($FFFFFFE4).w
00009652                            ;		beq.s	Title_CountC
00009652                            ;		move.w	#0,($FFFFFFE4).w
00009652                            
00009652                            Title_CountC:
00009652                            ;		move.b	($FFFFF605).w,d0
00009652                            ;		andi.b	#$20,d0		; is C button pressed?
00009652                            ;		beq.s	loc_3230	; if not, branch
00009652                            ;		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00009652                            
00009652                            loc_3230:
00009652                            ;		tst.w	($FFFFF614).w
00009652                            ;		beq.w	Demo
00009652 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00009658 6700 FFC6                  		beq.w	loc_317C	; if not, branch
0000965C                            
0000965C                            Title_ChkLevSel:
0000965C                            ;		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		tst.b	($FFFFFFD0).w	; check	if level select	code is	on
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            ;		btst	#6,($FFFFF604).w ; check if A is pressed
0000965C                            ;		beq.w	PlayLevel	; if not, play level
0000965C                            
0000965C 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w	; is Title Menu on?
00009662 6700 FFBC                  		beq.w	loc_317C			; if it not was deleted, branch	
00009666 7400                       		moveq	#0,d2
00009668 1438 FF86                  		move.b	(Title_screen_option).w,d2	; load the choice
0000966C D442                       		add.w	d2,d2				; multiply by 2
0000966E 343B 2000                  		move.w	Obj0F_Menu_Choice(pc,d2.w),d2
00009672 4EFB 2000                  		jmp	Obj0F_Menu_Choice(pc,d2.w)	; jump to the choice code
00009676                            		
00009676                            ; ===========================================================================
00009676                            Obj0F_Menu_Choice:
00009676 0000                       		dc.w PlayLevel-Obj0F_Menu_Choice	; 0
00009678 0000                       		dc.w Menu_LevelSelect-Obj0F_Menu_Choice	; 2
0000967A 0000                       		dc.w Menu_Options-Obj0F_Menu_Choice	; 4
0000967C 0000                       		dc.w PlaySpecialStage-Obj0F_Menu_Choice	; 6
0000967E 0000                       		dc.w Menu_OldLevelSelect-Obj0F_Menu_Choice	; 8
00009680                            ; ===========================================================================
00009680                            
00009680                            Menu_Options:
00009680 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009688 11FC 002C F600             		move.b	#$2C,(Game_Mode).w	; Go to Sonic 2 Options Menu
0000968E 4E75                       		rts
00009690                            Menu_LevelSelect:
00009690 11FC 0038 F600             		move.b	#$38,(Game_Mode).w	; Go to Old Sonic 2 Level Select
00009696 4E75                       		rts
00009698                            Menu_OldLevelSelect:
00009698 7002                       		moveq	#2,d0
0000969A 4EB8 4812                  		jsr	PalLoad2; load level select pallet
0000969E 43F8 CC00                  		lea	($FFFFCC00).w,a1
000096A2 7000                       		moveq	#0,d0
000096A4 323C 00DF                  		move.w	#$DF,d1
000096A8                            ;		jsr	Pal_FadeTo
000096A8                            Title_ClrScroll:
000096A8 22C0                       		move.l	d0,(a1)+
000096AA 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000096AE                            
000096AE 21C0 F616                  		move.l	d0,($FFFFF616).w
000096B2 46FC 2700                  		disable_ints
000096B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000096BC 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000096C6 323C 03FF                  		move.w	#$3FF,d1
000096CA                            
000096CA                            Title_ClrVram:
000096CA 2C80                       		move.l	d0,(a6)
000096CC 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000096D0 103C 000F                  		move.b  #$0F,d0
000096D4 4EB8 3212                  		jsr PlaySound
000096D8 4EB9 0000 0000             		jsr	LevSelTextLoad
000096DE                            ;		move.w	#$19,d0
000096DE                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
000096DE                            ;		move.w	#$1A,d0
000096DE                            ;		bsr.w	Jmpto_Palload1	; load level select pallet
000096DE                                            ;jsr     DeformBGLayer
000096DE                            ;		jsr	Pal_FadeFrom
000096DE                            ; ---------------------------------------------------------------------------
000096DE                            ; Level	Select
000096DE                            ; ---------------------------------------------------------------------------
000096DE                            
000096DE                            LevelSelect:
000096DE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000096E4 6100 F68C                  		bsr.w	DelayProgram
000096E8 6100 0000                  		bsr.w	LevSelControls
000096EC 4EB8 3762                  		jsr	RunPLC_RAM
000096F0 4AB8 F680                  		tst.l	($FFFFF680).w
000096F4 66E8                       		bne.s	LevelSelect
000096F6 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
000096FA 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000096FE 6600                       		bne.s	LevSelLevCheckStart; if not, go to	Level/SS subroutine
00009700 0C38 0080 F605             		cmpi.b	#$80,($FFFFF605).w ; is	Start pressed?
00009706 6700                       		beq.s	LevSelStartPress	; if true, branch
00009708                            ;		cmpi.b	#button_B_mask,($FFFFF605).w ; is	B pressed?
00009708                            ;		beq.s	LevSelBCPress	; if not, branch
00009708 0C38 0020 F605             		cmpi.b	#button_C_mask,($FFFFF605).w ; is	C pressed?
0000970E 6700                       		beq.s	LevSelBCPress	; if not, branch
00009710 60CC                       		bra.s	LevelSelect
00009712                            ; ===========================================================================
00009712                            LevSelLevCheckStart:				; XREF: LevelSelect
00009712 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start pressed?
00009718 67C4                       		beq.s	LevelSelect	; if not, branch
0000971A 6000                       		bra.s	LevSel_Level_SS
0000971C                             
0000971C                            LevSelBCPress:				; XREF: LevelSelect
0000971C 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009720                            ;		addi.w	#$80,d0
00009720 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00009724 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00009726 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
0000972A 65B2                       		bcs.s	LevelSelect	; if yes, branch
0000972C                             
0000972C                            LevSel_PlaySnd:
0000972C 4EB8 325C                  		jsr	PlaySound_Special
00009730 60AC                       		bra.s	LevelSelect
00009732                             
00009732                            LevSelStartPress:				; XREF: LevelSelect
00009732 11FC 0000 F600             		move.b	#$00,$FFFFF600
00009738 4EF8 038C                  		jmp MainGameLoop ;go to sega screen
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            LevSel_Ending:				; XREF: LevelSelect
0000973C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00009742 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00009748 4E75                       		rts	
0000974A                            ; ===========================================================================
0000974A                            
0000974A                            LevSel_Credits:				; XREF: LevelSelect
0000974A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00009750 103C 0091                  		move.b	#$91,d0
00009754 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
00009758 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000975E 4E75                       		rts	
00009760                            ; ===========================================================================
00009760                            
00009760                            LevSel_Level_SS:			; XREF: LevelSelect
00009760 D040                       		add.w	d0,d0
00009762 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00009766 6B00 FF76                  		bmi.w	LevelSelect
0000976A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000976E 6600 0000                  		bne.w	LevSel_Level	; if not, branch
00009772 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009778 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000977C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00009782 7000                       		moveq	#0,d0
00009784 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009788 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000978C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009790 4E75                       		rts	
00009792                            ; ---------------------------------------------------------------------------
00009792                            ; Level	select - level pointers
00009792                            ; ---------------------------------------------------------------------------
00009792                            LSelectPointers:
00009792                            		incbin	misc\ls_point.bin
000097BC                            		even
000097BC                            
000097BC                            ; ===========================================================================
000097BC                            
000097BC                            LevSel_Level:				; XREF: LevSel_Level_SS
000097BC 0240 3FFF                  		andi.w	#$3FFF,d0
000097C0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000097C4                            
000097C4                            PlayLevel:				; XREF: ROM:00003246j ...
000097C4 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000097CA                            ;		clr.b	($FFFFFF0A).w
000097CA 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000097D2 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000097D8 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
000097DC 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000097E4 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000097EC 7000                       		moveq	#0,d0
000097EE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000097F2 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
000097F6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000097FA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000097FE 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009806 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
0000980E 6D00 0000                  		blt.w	PlayLevel_2
00009812 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
0000981A                            PlayLevel_2:
0000981A 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009822 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
0000982A 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009832 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
0000983A 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009842 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0000984A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000984E 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009856 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
0000985C 103C 00E1                  		move.b	#$E1,d0
00009860 6100 FAD0                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
00009864 4E75                       		rts	
00009866                            
00009866                            ; ---------------------------------------------------------------------------
00009866                            ; Level	select codes
00009866                            ; ---------------------------------------------------------------------------
00009866                            LevelSelectCode_J:
00009866                            		incbin	misc\ls_jcode.bin
0000986C                            		even
0000986C                            
0000986C                            LevelSelectCode_US:
0000986C                            		incbin	misc\ls_ucode.bin
00009872                            		even
00009872                            		
00009872                            ;TitleScreen_ASCII:
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "      - - - SONIC THE HEDGEHOG 4 - - -",$FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "                  ",$FF
00009872                            ;		dc.b "                 ",$FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b $FF
00009872                            ;		dc.b "                                       ",$FF
00009872                            ;		dc.b "                                       ",$FF
00009872                            
00009872                            ;		dc.b 0
00009872                            ;		even
00009872                            		
00009872                            ; ===========================================================================
00009872                            
00009872 11FC 001C F600             PlaySpecialStage1: move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00009878 103C 009D                  		move.b	#$9D,d0
0000987C 4EB8 325C                  		jsr	PlaySound_Special ; play credits music
00009880 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00009886 4E75                       		rts	
00009888                            
00009888                            PlaySpecialStage:
00009888 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
0000988E 6C00 0000                  		bge.w	SpecialStage_Cleared	; if yes, branch
00009892 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009898 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000989C 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000098A4 11F9 0020 0001 FE12        		move.b	($200001).l,($FFFFFE12).w ; set lives
000098AC 7000                       		moveq	#0,d0
000098AE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000098B2 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
000098B6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000098BA                            ;		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000098BA 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000098C0 6700 0000                  		beq.w	PlayContinuelives		; if yes, branch
000098C4 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000098CC 11F9 0020 012D FE56        		move.b	($20012D).l,($FFFFFE56).w ; load emeralds
000098D4 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
000098DC 6D00 0000                  		blt.w	PlaySpecialStage2
000098E0 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
000098E8                            PlaySpecialStage2:
000098E8 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
000098F0 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
000098F8 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
00009900 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
00009908 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
00009910 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009918 21FC 0000 1388 FFC0        		move.l	#5000,($FFFFFFC0).w
00009920 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00009926 4E75                       		rts
00009928                            SpecialStage_Cleared:
00009928 103C 00D2                  		move.b	#$D2,d0
0000992C 6100 FA04                  		bsr.w	Jmpto_PlaySound_Special
00009930 0C38 0003 FF86             		cmpi.b	#3,(Title_screen_option).w
00009936 6600 0000                  		bne.w	SpecialStage_Cleared_3
0000993A                            SpecialStage_Cleared_2:
0000993A 4EFA FCE4                  		jmp		loc_317C
0000993E                            SpecialStage_Cleared_3:
0000993E 103C 00D2                  		move.b	#$D2,d0
00009942 6100 F9EE                  		bsr.w	Jmpto_PlaySound_Special
00009946                            	;	jmp	(loc_317C).l	; if not, branch
00009946                            
00009946                            PlayContinuelives:
00009946 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l
0000994E 13FC 0003 0020 0001        		move.b	#3,($200001).l
00009956 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
00009960 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; set lives to 3
00009968 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l
00009970 4E75                       		rts	
00009972                            
00009972                            ;LoadEmeralds_2:
00009972                            ;		clr.b	($FFFFFE57).w
00009972                            ;		jmp		LSRoutine
00009972                            LoadEmeralds:
00009972 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000997A 0C39 0000 0020 0121        		cmpi.b	#0,($200121).l
00009982 6D00 0000                  		blt.w	LoadEmeralds2		
00009986 11F9 0020 0121 FE57        		move.b	($200121).l,($FFFFFE57).w ; load emeralds
0000998E                            LoadEmeralds2:
0000998E 11F9 0020 0123 FE58        		move.b	($200123).l,($FFFFFE58).w ; load emeralds
00009996 11F9 0020 0125 FE59        		move.b	($200125).l,($FFFFFE59).w ; load emeralds
0000999E 11F9 0020 0127 FE5A        		move.b	($200127).l,($FFFFFE5A).w ; load emeralds
000099A6 11F9 0020 0129 FE5B        		move.b	($200129).l,($FFFFFE5B).w ; load emeralds
000099AE 11F9 0020 012B FE5C        		move.b	($20012B).l,($FFFFFE5C).w ; load emeralds
000099B6                            
000099B6 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000099BE 4E75                       		rts
000099C0                            ;		tst.b	($FFFFFE57).w
000099C0                            ;		beq.w	LoadEmeralds_2
000099C0                            ;		bcc.w	LSRoutine
000099C0                            ; ===========================================================================
000099C0                            		
000099C0                            LoadLives:
000099C0 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
000099C8 6D00 0000                  		blt.w	LoadLives2		; if yes, branch
000099CC 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000099D4 4A39 0020 0001             		tst.b	($200001).l				; number of lives in sram is 0?
000099DA 6700 FF6A                  		beq.w	PlayContinuelives		; if yes, branch
000099DE 11F9 0020 011F FE12        		move.b	($20011F).l,($FFFFFE12).w ; load the number of lives
000099E6 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000099EE 4E75                       		rts
000099F0                            LoadLives2:
000099F0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; load the number of lives
000099F6 4E75                       		rts
000099F8                            LoadLivesLS:
000099F8 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
00009A00 6D00 FFEE                  		blt.w	LoadLives2		; if yes, branch
00009A04 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00009A0C 6100 FFB2                  		bsr.w	LoadLives
00009A10 6000 FF60                  		bra.w	LoadEmeralds
00009A14 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
00009A1C 4E75                       		rts
00009A1E                            		
00009A1E                            
00009A1E                            
00009A1E                            ; ===========================================================================
00009A1E                            Jmpto_PlaySound2:
00009A1E 4EF8 3212                  	jmp	PlaySound
00009A22                            ; ---------------------------------------------------------------------------
00009A22                            ; Demo mode
00009A22                            ; ---------------------------------------------------------------------------
00009A22                            
00009A22                            Demo:					; XREF: TitleScreen
00009A22 31FC 001E FC20             		move.w	#$1E,($FFFFFC20).w
00009A28                            
00009A28                            loc_33B6:				; XREF: loc_33E4
00009A28 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00009A2E 6100 F342                  		bsr.w	Wait_VSync
00009A32 4EB9 0000 0000             		jsr	DeformBgLayer
00009A38 4EB8 3C46                  		jsr	PalCycle_Load
00009A3C 4EB8 3762                  		jsr	RunPLC_RAM
00009A40 3038 D008                  		move.w	($FFFFD008).w,d0
00009A44 5440                       		addq.w	#2,d0
00009A46 31C0 D008                  		move.w	d0,($FFFFD008).w
00009A4A 0C40 1C00                  		cmpi.w	#$1C00,d0
00009A4E 6500                       		bcs.s	loc_33E4
00009A50 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00009A56 4E75                       		rts	
00009A58                            ; ===========================================================================
00009A58                            
00009A58                            loc_33E4:				; XREF: Demo
00009A58 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00009A5E 6600 FBFC                  		bne.w	Title_ChkLevSel	; if yes, branch
00009A62 4A78 FC20                  		tst.w	($FFFFFC20).w
00009A66 6600 FFC0                  		bne.w	loc_33B6
00009A6A 103C 00E1                  		move.b	#$E1,d0
00009A6E 6100 F8C2                  		bsr.w	Jmpto_PlaySound_Special ; fade out music
00009A72 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00009A76 0240 0007                  		andi.w	#7,d0
00009A7A D040                       		add.w	d0,d0
00009A7C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00009A80 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00009A84 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00009A88 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00009A8E 6500                       		bcs.s	loc_3422	; if yes, branch
00009A90 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00009A96                            
00009A96                            loc_3422:
00009A96 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00009A9C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00009AA2 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00009AA6 6600                       		bne.s	Demo_Level	; if not, branch
00009AA8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00009AAE 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00009AB2 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00009AB6                            
00009AB6                            Demo_Level:
00009AB6 0C78 001C F600             		cmpi.w	#$1C,($FFFFF600).w	; is level number 0600 (special	stage)?
00009ABC 6700                       		beq.s	Demo_Level_Credits	; if not, branch
00009ABE 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00009AC4                            Demo_Level_Credits:
00009AC4 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00009ACA 7000                       		moveq	#0,d0
00009ACC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00009AD0 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
00009AD4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00009AD8 4E75                       		rts	
00009ADA                            ; ===========================================================================
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            ; Levels used in demos
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            Demo_Levels:	incbin	misc\dm_ord1.bin
00009AE2                            		even
00009AE2                            
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            ; Subroutine to	change what you're selecting in the level select
00009AE2                            ; ---------------------------------------------------------------------------
00009AE2                            
00009AE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AE2                            
00009AE2                            
00009AE2                            LevSelControls:				; XREF: LevelSelect
00009AE2 1238 F605                  		move.b	($FFFFF605).w,d1
00009AE6 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00009AEA 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00009AEC 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009AF0 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00009AF2                            
00009AF2                            LevSel_UpDown:
00009AF2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009AF8 1238 F604                  		move.b	($FFFFF604).w,d1
00009AFC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00009B00 6700                       		beq.s	LevSel_SndTest	; if not, branch
00009B02 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009B06 0801 0000                  		btst	#0,d1		; is up	pressed?
00009B0A 6700                       		beq.s	LevSel_Down	; if not, branch
00009B0C 5340                       		subq.w	#1,d0		; move up 1 selection
00009B0E 6400                       		bcc.s	LevSel_Down
00009B10 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00009B12                            
00009B12                            LevSel_Down:
00009B12 0801 0001                  		btst	#1,d1		; is down pressed?
00009B16 6700                       		beq.s	LevSel_Refresh	; if not, branch
00009B18 5240                       		addq.w	#1,d0		; move down 1 selection
00009B1A 0C40 0015                  		cmpi.w	#$15,d0
00009B1E 6500                       		bcs.s	LevSel_Refresh
00009B20 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00009B22                            
00009B22                            LevSel_Refresh:
00009B22 31C0 FFA8                  		move.w	d0,($FFFFFFA8).w ; set new selection
00009B26 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009B2C 4E75                       		rts	
00009B2E                            ; ===========================================================================
00009B2E                            
00009B2E                            LevSel_SndTest:				; XREF: LevSelControls
00009B2E 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w ; is	item $14 selected?
00009B34 6600                       		bne.s	LevSel_NoMove	; if not, branch		
00009B36 1238 F605                  		move.b	($FFFFF605).w,d1
00009B3A 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed and held?
00009B3E 6600                       		bne.s	LevSel_LRAB	; if yes, branch
00009B40 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00009B44 6A00                       		bpl.s	LevSel_NoMove	; if time remains, branch
00009B46                            
00009B46                            LevSel_LRAB:
00009B46 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00009B4C 1238 F604                  		move.b	($FFFFF604).w,d1
00009B50 0201 005C                  		andi.b	#button_right_mask|button_left_mask|button_A_mask|button_B_mask,d1		; is up/down pressed?		
00009B54 6700                       		beq.s	LevSel_NoMove	; if not, branch
00009B56 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009B5A 0801 0006                  		btst	#6,d1		; is A pressed?
00009B5E 6600                       		bne.s	LevSel_A	; if not, branch
00009B60 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009B64 6600                       		bne.s	LevSel_B	; if not, branch
00009B66 0801 0002                  		btst	#2,d1		; is left pressed?
00009B6A 6700                       		beq.s	LevSel_Right	; if not, branch
00009B6C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00009B6E 6400                       		bcc.s	LevSel_Right
00009B70 303C 00FF                  		move.w	#$FF,d0		; if sound test	moves below 0, set to $FF
00009B74                            
00009B74                            LevSel_A:
00009B74 0801 0006                  		btst	#button_A,d1		; is A button pressed?
00009B78 6700                       		beq.s	LevSel_B	; if not, branch
00009B7A 0640 0010                  		add.w	#16,d0		; add $10 to sound test
00009B7E                            ;		jmp	LevSel_Right
00009B7E                            LevSel_B:
00009B7E 0801 0004                  		btst	#button_B,d1		; is B button pressed?
00009B82 6700                       		beq.s	LevSel_Right	; if not, branch
00009B84 0440 0010                  		sub.w	#16,d0		; subtract $10 from sound test
00009B88                            
00009B88                            LevSel_Right:
00009B88 0801 0003                  		btst	#3,d1		; is right pressed?
00009B8C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00009B8E 5240                       		addq.w	#1,d0		; add 1	to sound test
00009B90                            
00009B90                            LevSel_Refresh2:
00009B90 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00009B94 4EB9 0000 0000             		jsr	LevSelTextLoad	; refresh text
00009B9A                            
00009B9A                            LevSel_NoMove:
00009B9A 4E75                       		rts	
00009B9C                            ; End of function LevSelControls
00009B9C                            
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            ; Subroutine to load level select text
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            
00009B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B9C                            
00009B9C                            
00009B9C                            LevSelTextLoad:				; XREF: TitleScreen
00009B9C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009BA2 4DF9 00C0 0000             		lea	($C00000).l,a6
00009BA8 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00009BAE 363C E680                  		move.w	#$E680,d3	; VRAM setting
00009BB2 7214                       		moveq	#$14,d1		; number of lines of text
00009BB4                            
00009BB4                            loc_34FE:				; XREF: LevSelTextLoad+26j
00009BB4 2D44 0004                  		move.l	d4,4(a6)
00009BB8 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009BBE 0684 0080 0000             		addi.l	#$800000,d4
00009BC4 51C9 FFEE                  		dbf	d1,loc_34FE
00009BC8 7000                       		moveq	#0,d0
00009BCA 3038 FFA8                  		move.w	($FFFFFFA8).w,d0
00009BCE 3200                       		move.w	d0,d1
00009BD0 283C 6210 0003             		move.l	#$62100003,d4
00009BD6 EF48                       		lsl.w	#7,d0
00009BD8 4840                       		swap	d0
00009BDA D880                       		add.l	d0,d4
00009BDC 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00009BE2 E749                       		lsl.w	#3,d1
00009BE4 3001                       		move.w	d1,d0
00009BE6 D241                       		add.w	d1,d1
00009BE8 D240                       		add.w	d0,d1
00009BEA D2C1                       		adda.w	d1,a1
00009BEC 363C C680                  		move.w	#$C680,d3
00009BF0 2D44 0004                  		move.l	d4,4(a6)
00009BF4 4EB9 0000 0000             		jsr	LevSel_ChgLine
00009BFA 363C E680                  		move.w	#$E680,d3
00009BFE 0C78 0014 FFA8             		cmpi.w	#$14,($FFFFFFA8).w
00009C04 6600                       		bne.s	loc_3550
00009C06 363C C680                  		move.w	#$C680,d3
00009C0A                            
00009C0A                            loc_3550:
00009C0A 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00009C14 3038 FF84                  		move.w	($FFFFFF84).w,d0
00009C18 1400                       		move.b	d0,d2
00009C1A E808                       		lsr.b	#4,d0
00009C1C 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009C22 1002                       		move.b	d2,d0
00009C24 4EB9 0000 0000             		jsr	LevSel_ChgSnd
00009C2A 4E75                       		rts	
00009C2C                            ; End of function LevSelTextLoad
00009C2C                            
00009C2C                            
00009C2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C2C                            
00009C2C                            
00009C2C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00009C2C 0240 000F                  		andi.w	#$F,d0
00009C30 0C00 000A                  		cmpi.b	#$A,d0
00009C34 6500                       		bcs.s	loc_3580
00009C36 5800                       		addi.b	#4,d0
00009C38                            
00009C38                            loc_3580:
00009C38 D043                       		add.w	d3,d0
00009C3A 3C80                       		move.w	d0,(a6)
00009C3C 4E75                       		rts	
00009C3E                            ; End of function LevSel_ChgSnd
00009C3E                            
00009C3E                            
00009C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C3E                            
00009C3E                            
00009C3E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00009C3E 7417                       		moveq	#$17,d2		; number of characters per line
00009C40                            
00009C40                            LevSel_LineLoop:
00009C40 7000                       		moveq	#0,d0
00009C42 1019                       		move.b	(a1)+,d0
00009C44 6A00                       		bpl.s	LevSel_CharOk
00009C46 3CBC 0000                  		move.w	#0,(a6)
00009C4A 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00009C4E 4E75                       		rts	
00009C50                            ; ===========================================================================
00009C50                            
00009C50                            LevSel_CharOk:				; XREF: LevSel_ChgLine
00009C50 0C40 0040                  		cmp.w	#$40,d0    ; Check for $40 (End of ASCII number area)
00009C54 6D00                       		blt.s	@notText    ; If this is not an ASCII text character, branch
00009C56 5740                       		sub.w	#$3,d0        ; Subtract an extra 3 (Compensate for missing characters in the font)
00009C58                            @notText:
00009C58 0440 0030                  		sub.w	#$30,d0        ; Subtract #$33 (Convert to S2 font from ASCII)
00009C5C D043                       		add.w	d3,d0        ; combine char with VRAM setting
00009C5E 3C80                       		move.w	d0,(a6)        ; send to VRAM
00009C60 51CA FFDE                  		dbf	d2,LevSel_LineLoop
00009C64 4E75                               rts	
00009C66                            ; End of function LevSel_ChgLine
00009C66                            
00009C66                            ; ===========================================================================
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            ; Level	select menu text
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            LevelMenuText:
00009C66 5350 4C41 5348 2048 494C+  		dc.b	"SPLASH HILL ZONE   ACT 1"
00009C7E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009C96 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009CAE 4C4F 5354 204C 4142 5952+  		dc.b	"LOST LABYRINTH     ACT 1"
00009CC6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009CDE 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009CF6 5359 4C56 414E 4941 2043+  		dc.b	"SYLVANIA CASTLE    ACT 1"
00009D0E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009D26 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009D3E 5748 4954 4520 5041 524B+  		dc.b	"WHITE PARK ZONE    ACT 1"
00009D56 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009D6E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009D86 4341 5349 4E4F 2053 5452+  		dc.b	"CASINO STREET      ACT 1"
00009D9E 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009DB6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009DCE 4D41 4420 4745 4152 205A+  		dc.b	"MAD GEAR ZONE      ACT 1"
00009DE6 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 2"
00009DFE 2020 2020 2020 2020 2020+  		dc.b	"                   ACT 3"
00009E16 4547 4720 5354 4154 494F+  		dc.b	"EGG STATION             "
00009E2E 5350 4543 4941 4C20 5354+  		dc.b	"SPECIAL STAGE           "
00009E46 534F 554E 4420 5445 5354+  		dc.b	"SOUND TEST              "
00009E5E                            		even
00009E5E                            ; ---------------------------------------------------------------------------------
00009E5E                            ; Nemesis compressed art
00009E5E                            ; 10 blocks
00009E5E                            ; Player 1 2 VS Text
00009E5E                            ; ---------------------------------------------------------------------------------
00009E5E                            ; ArtNem_3DF4:
00009E5E                            Nem_TitleMenu:	incbin	artnem\titlemenu.bin	; Menu text on title screen
0000A0F8                            		even
0000A0F8                            
0000A0F8                            ; word_3E82:
0000A0F8                            CopyrightText:
0000A0F8 068B                       	dc.w  $68B	; (C)
0000A0FA 0000                       	dc.w	 0	;
0000A0FC 0682                       	dc.w  $682	; 2
0000A0FE 0680                       	dc.w  $680	; 0
0000A100 0681                       	dc.w  $681	; 1
0000A102 0684                       	dc.w  $684	; 3
0000A104 0000                       	dc.w	 0	;
0000A106 06A0                       	dc.w  $6A0	; S
0000A108 0692                       	dc.w  $692	; E
0000A10A 0694                       	dc.w  $694	; G
0000A10C 068E                       	dc.w  $68E	; A
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            ; Music	playlist
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            MusicList1:	incbin	misc\muslist1.bin
0000A116                            		even
0000A116                            MusicList3:	incbin	misc\muslist3.bin
0000A11E                            		even
0000A11E                            MusicList4:	incbin	misc\muslist4.bin
0000A126                            		even
0000A126                            MusicListAlt:	incbin	misc\muslistalt.bin
0000A12E                            		even
0000A12E                            ;SpecialStage_PlayList:	incbin	misc\speciallist.bin
0000A12E                            ;		even
0000A12E                            ; ===========================================================================
0000A12E                            
0000A12E                            Sound_Select:
0000A12E 103C 005B                  	move.b	#$5B,d0
0000A132 4EB9 0000 3212             	jsr	(PlaySound).l
0000A138 4E75                       	rts
0000A13A                            
0000A13A                            Sound_Select_Options:
0000A13A 13FC 005B 00A0 1C0B        	move.b	#$5B,($A01C0B).l
0000A142 4E75                       	rts
0000A144                            ; ---------------------------------------------------------------------------
0000A144                            ; Level
0000A144                            ; ---------------------------------------------------------------------------
0000A144                            
0000A144                            Level:		; XREF: GameModeArray
0000A144 08F8 0007 F600             		bset	#7,($FFFFF600).w; add $80 to screen mode (for pre level sequence)
0000A14A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A14E 6B00                       		bmi.s	loc_37B6
0000A150 103C 00E1                  		move.b	#$E1,d0
0000A154 6100 F1DC                  		bsr.w	Jmpto_PlaySound_Special; fade out music
0000A158                             
0000A158                            loc_37B6:
0000A158 4EB8 3754                  		jsr	clearplc
0000A15C 4EB8 4528                  		jsr	pal_fadefrom
0000A160 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A164 6B00                       		bmi.s	Level_ClrRam
0000A166 46FC 2700                  		disable_ints
0000A16A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000A174 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0; load title card patterns
0000A17A 4EB8 3596                  		jsr	NemDec
0000A17E 46FC 2300                  		enable_ints
0000A182 7000                       		moveq	#0,d0
0000A184 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A188 E948                       		lsl.w	#4,d0
0000A18A                            ;		clr.b	($FFFFFF0A).w
0000A18A 4238 FF88                  		clr.b	($FFFFFF88).w
0000A18E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000A194 6600                       		bne.s	CheckAct2	 ; if not, branch
0000A196 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000A19C 4EF9 0000 0000             				jmp	 Level_3
0000A1A2                            CheckAct2:
0000A1A2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000A1A8 6600                       		bne.s	Level_2	 ; if not, branch
0000A1AA 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000A1B0 4EF9 0000 0000             				jmp	 Level_3
0000A1B6                            Level_2:
0000A1B6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000A1BC                            Level_3:
0000A1BC 45F2 0000                  		lea	(a2,d0.w),a2
0000A1C0 7000                       		moveq	#0,d0
0000A1C2 1012                       		move.b	(a2),d0
0000A1C4 6700                       		beq.s	loc_37FC
0000A1C6 4EB8 36F6                  		jsr	LoadPLC; load level patterns
0000A1CA                            
0000A1CA                            loc_37FC:
0000A1CA 7001                       		moveq	#1,d0
0000A1CC 4EB8 36F6                  		jsr	LoadPLC		; load standard	patterns
0000A1D0                            
0000A1D0                            Level_ClrRam:	
0000A1D0 4238 FE19                  		clr.b	(Super_Sonic_flag).w; ...
0000A1D4 43F8 AC00                  		lea	(Sprite_Table_Input).w,a1
0000A1D8 7000                       		moveq	#0,d0
0000A1DA 323C 00FF                  		move.w	#$FF,d1
0000A1DE                            
0000A1DE                            loc_303A2E:					  ; ...
0000A1DE 22C0                       		move.l	d0,(a1)+
0000A1E0 51C9 FFFC                  		dbf	d1,loc_303A2E
0000A1E4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A1E8 7000                       		moveq	#0,d0
0000A1EA 323C 08FF                  		move.w	#$8FF,d1
0000A1EE                            
0000A1EE                            loc_303A3E:					  ; ...
0000A1EE 22C0                       		move.l	d0,(a1)+
0000A1F0 51C9 FFFC                  		dbf	d1,loc_303A3E
0000A1F4 43F8 F628                  		lea	($FFFFF628).w,a1
0000A1F8 7000                       		moveq	#0,d0
0000A1FA 323C 0015                  		move.w	#$15,d1
0000A1FE                            
0000A1FE                            Level_ClrVars:
0000A1FE 22C0                       		move.l	d0,(a1)+
0000A200 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000A204                            
0000A204 43F8 F700                  		lea	($FFFFF700).w,a1
0000A208 7000                       		moveq	#0,d0
0000A20A 323C 003F                  		move.w	#$3F,d1
0000A20E                            
0000A20E                            Level_ClrVars2:
0000A20E 22C0                       		move.l	d0,(a1)+
0000A210 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000A214                            
0000A214 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000A218 7000                       		moveq	#0,d0
0000A21A 323C 0047                  		move.w	#$47,d1
0000A21E                            
0000A21E                            Level_ClrVars3:
0000A21E 22C0                       		move.l	d0,(a1)+
0000A220 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000A224                            
0000A224 46FC 2700                  		disable_ints
0000A228 4EB8 3084                  		jsr	ClearScreen
0000A22C 4DF9 00C0 0004             		lea	($C00004).l,a6
0000A232 3CBC 8B03                  		move.w	#$8B03,(a6)
0000A236 3CBC 8230                  		move.w	#$8230,(a6)
0000A23A 3CBC 8407                  		move.w	#$8407,(a6)
0000A23E 3CBC 857C                  		move.w	#$857C,(a6)
0000A242 3CBC 9001                  		move.w	#$9001,(a6)
0000A246 3CBC 8004                  		move.w	#$8004,(a6)
0000A24A 3CBC 8720                  		move.w	#$8720,(a6)
0000A24E 3CBC 8C81                  		move.w	#$8C81,(a6)
0000A252 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000A258 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000A25C 4278 C800                  		clr.w	($FFFFC800).w
0000A260 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000A268 31FC 0000 FC00             		move.w	#0,($FFFFFC00).w	; clear screen delay counter
0000A26E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A274 6600                       		bne.s	Level_LoadPal	; if not, branch
0000A276 3CBC 8014                  		move.w	#$8014,(a6)
0000A27A 7000                       		moveq	#0,d0
0000A27C 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A280 D040                       		add.w	d0,d0
0000A282 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000A288 3031 0000                  		move.w	(a1,d0.w),d0
0000A28C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000A290 31C0 F648                  		move.w	d0,($FFFFF648).w
0000A294 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000A298 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000A29C 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000A2A0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
0000A2A6                            
0000A2A6                            Level_LoadPal:
0000A2A6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000A2AC 46FC 2300                  		enable_ints
0000A2B0 7003                       		moveq	#3,d0
0000A2B2 4EB8 4812                  		jsr	PalLoad2	; load Sonic's pallet line
0000A2B6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ? WATERCHECK
0000A2BC 6600                       		bne.s	Level_GetBgm	; if not, branch
0000A2BE 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
0000A2C0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000A2C6 6600                       		bne.s	Level_WaterPal	; if not, branch
0000A2C8 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
0000A2CA                            
0000A2CA                            Level_WaterPal:
0000A2CA 4EB8 4826                  		jsr	PalLoad3_Water	; load underwater pallet (see d0)
0000A2CE 4A38 FE30                  		tst.b	($FFFFFE30).w
0000A2D2 6700                       		beq.s	Level_GetBgm
0000A2D4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000A2DA                            
0000A2DA                            Level_GetBgm:
0000A2DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A2DE 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
0000A2E2 7000                       		moveq	#0,d0
0000A2E4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A2E8                             
0000A2E8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000A2EE 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000A2F0 43F9 0000 A10E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000A2F6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A2F8                             
0000A2F8                            Level_GetBgm2:
0000A2F8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000A2FE 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000A300 0C38 0001 FF95             		cmpi.b	#$1,(Level_Music+5).w
0000A306 6700 0000                  		beq.w	LevelBGM_ActAlt
0000A30A 43F9 0000 0000             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000A310 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A312                            
0000A312                            LevelBGM_ActAlt:		
0000A312 43F9 0000 A126             		lea	(MusicListAlt).l,a1	; load Music Playlist for Acts 1
0000A318 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A31A                             
0000A31A                            Level_GetBgm3:
0000A31A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000A320 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000A322 43F9 0000 A116             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000A328 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000A32A                             
0000A32A                            Level_GetBgm4:
0000A32A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000A330 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A332 43F9 0000 A11E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000A338                            
0000A338                            Level_BgmNotLZ4:
0000A338 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000A33E 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000A340 7006                       		moveq	#6,d0		; move 6 to d0
0000A342                            
0000A342                            Level_PlayBgm:
0000A342 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000A346 31C0 FF90                  		move.w	d0,(Level_Music).w	; store level music
0000A34A 6100 F6D2                  		bsr.w	Jmpto_PlaySound2	; play music
0000A34E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000A354                            ; loc_40DA:
0000A354                            Level_TtlCard:
0000A354                            
0000A354 11FC 000C F62A             		move.b	#$C,(Delay_Time).w
0000A35A 6100 EA16                  		bsr.w	DelayProgram
0000A35E 4EB9 0000 0000             		jsr	(ObjectsLoad).l
0000A364 4EB9 0000 0000             		jsr	(BuildSprites).l
0000A36A 6100 93F6                  		bsr.w	RunPLC_RAM
0000A36E 3038 D108                  		move.w	($FFFFD108).w,d0
0000A372 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000A376 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000A378 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000A37C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000A37E 4EB9 0000 0000             		jsr	(Hud_Base).l
0000A384                            
0000A384                            loc_3946:
0000A384 7003                       		moveq	#3,d0
0000A386 4EB8 47FA                  		jsr	PalLoad1	; load Sonic's pallet line
0000A38A 4EB9 0000 0000             		jsr	LevelSizeLoad
0000A390 4EB9 0000 0000             		jsr	DeformBgLayer
0000A396 4278 F61A                  		clr.w	(Vscroll_Factor).w
0000A39A 31FC FF20 F61E             		move.w	#-$E0,($FFFFF61E).w
0000A3A0                            
0000A3A0 43F8 CC00                                  lea     ($FFFFCC00).w, A1
0000A3A4 7000                                       moveq   #$00, D0
0000A3A6 323C 00FF                                  move.w  #$00FF, D1
0000A3AA                            Offset_0x0040EC:
0000A3AA 22C0                                       move.l  D0, (A1)+
0000A3AC 51C9 FFFC                                  dbra    D1, Offset_0x0040EC		
0000A3B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000A3B6 4EB9 0000 0000             		jsr	LoadZoneTiles
0000A3BC 4EB9 0000 0000             		jsr	MainLoadBlockLoad ; load block mappings	and pallets
0000A3C2                            	;	move	#$2700,sr
0000A3C2 4EB9 0000 0000             		jsr	LoadTilesFromStart
0000A3C8                            	;	move	#$2300,sr
0000A3C8 4EB9 0000 0000             		jsr	FloorLog_Unk
0000A3CE 4EB9 0000 0000             		jsr	ColIndexLoad
0000A3D4 4EB9 0000 0000             		jsr	LZWaterEffects
0000A3DA 6100 0000                  		bsr.w	InitPlayers
0000A3DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A3E2 6B00                       		bmi.s	Level_ChkDebug
0000A3E4 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000A3EA 31FC F400 D388             		move.w	#-$C00,($FFFFD388).w ; load Obj01 Sonic object at $FFFFD000
0000A3F0                            
0000A3F0                            Level_ChkDebug:
0000A3F0 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000A3F4 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A3F6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000A3FC 6700                       		beq.s	Level_ChkWater	; if not, branch
0000A3FE 11FC 0001 FFDA             		move.b	#1,($FFFFFFDA).w ; enable debug	mode
0000A404                            
0000A404                            Level_ChkWater:
0000A404 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000A40A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000A410 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000A416 6600                       		bne.s	Level_LoadObj	; if not, branch
0000A418 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000A41E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000A424 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000A42A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000A430                            
0000A430                            Level_LoadObj:
0000A430 4EB9 0000 0000             		jsr	ObjPosLoad
0000A436                            ;		jsr	RingsManager
0000A436 4EB9 0000 0000             		jsr	ObjectsLoad
0000A43C 4EB9 0000 0000             		jsr	BuildSprites
0000A442 7000                       		moveq	#0,d0
0000A444 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000A448 6600                       		bne.s	loc_39E8	; if yes, branch
0000A44A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000A44E 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000A452                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
0000A452                            ;		move.b	d0,(v_centstep).w
0000A452                            ;	endc	;end HUD Centiseconds
0000A452 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w ; clear lives counter
0000A458                            
0000A458                            loc_39E8:
0000A458 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000A45C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000A460 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000A464 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000A468 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000A46C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000A470 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000A474 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000A478 4EB9 0000 0000             		jsr	OscillateNumInit
0000A47E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000A484 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000A48A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000A490 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000A496 7000                       		moveq	#0,d0
0000A498 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A49C E548                       		lsl.w	#2,d0
0000A49E 2271 0000                  		movea.l	(a1,d0.w),a1
0000A4A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A4A6 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000A4A8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
0000A4AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000A4B2 5340                       		subq.w	#1,d0
0000A4B4 E548                       		lsl.w	#2,d0
0000A4B6 2271 0000                  		movea.l	(a1,d0.w),a1
0000A4BA                            
0000A4BA                            Level_Demo:
0000A4BA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000A4C0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
0000A4C4 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000A4CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A4CE 6A00                       		bpl.s	Level_ChkWaterPal
0000A4D0 31FC 021C FC20             		move.w	#540,($FFFFFC20).w
0000A4D6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000A4DC 6600                       		bne.s	Level_ChkWaterPal
0000A4DE 31FC 01FE FC20             		move.w	#510,($FFFFFC20).w
0000A4E4                            
0000A4E4                            Level_ChkWaterPal:
0000A4E4 0C38 0001 FE19             		cmpi.b	#1,($FFFFFE19).w ; is level LZ/SBZ3?
0000A4EA 6700                       		beq.s	Level_ChkWaterPal_Super	; if not, branch
0000A4EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A4F2 6600                       		bne.s	Level_Delay	; if not, branch
0000A4F4 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000A4F6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A4FC 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A4FE 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
0000A500                            Level_ChkWaterPal_Super:		
0000A500 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
0000A506 6600                       		bne.s	Level_Delay	; if not, branch
0000A508 701F                       		moveq	#$1F,d0		; pallet $0B (LZ underwater)
0000A50A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
0000A510 6600                       		bne.s	Level_WaterPal2	; if not, branch
0000A512 701F                       		moveq	#$1F,d0		; pallet $0D (SBZ3 underwater)
0000A514                            
0000A514                            Level_WaterPal2:
0000A514 4EB8 483E                  		jsr	PalLoad4_Water
0000A518                            
0000A518                            Level_Delay:
0000A518 323C 0003                  		move.w	#3,d1
0000A51C                            
0000A51C                            Level_DelayLoop:
0000A51C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A522 6100 E84E                  		bsr.w	Wait_VSync
0000A526 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000A52A                            
0000A52A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000A530 4EB8 4474                  		jsr	Pal_FadeTo2
0000A534 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000A538 6B00                       		bmi.s	Level_ClrCardArt
0000A53A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000A53E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000A542 5838 D124                  		addq.b	#4,($FFFFD124).w
0000A546 5838 D164                  		addq.b	#4,($FFFFD164).w
0000A54A                            		
0000A54A 6000                       		bra.s	Level_StartGame
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Level_ClrCardArt:
0000A54C 7002                       		moveq	#2,d0
0000A54E 4EB9 0000 36F6             		jsr	(LoadPLC).l	; load explosion patterns
0000A554 4EB9 0000 36BE             		jsr	(LoadAnimalPLC).l ; load animal patterns
0000A55A 11FC 0001 FF7B             		move.b	#1,($FFFFFF7B).w
0000A560                            Level_StartGame:
0000A560 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
0000A566 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000A56C                            	;	move.b   #1,($FFFFFE1E).w   ; update time counter
0000A56C                            
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            ; Main level loop (when	all title card and loading sequences are finished)
0000A56C                            ; ---------------------------------------------------------------------------
0000A56C                            
0000A56C                            Level_MainLoop:
0000A56C 4EB8 3310                  		jsr	PauseGame
0000A570 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A576 6100 E7FA                  		bsr.w	Wait_VSync
0000A57A 5278 FE04                  		addq.w	#1,($FFFFFE04).w	; add 1 to level timer
0000A57E 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A584 4EB9 0000 0000             		jsr	LZWaterEffects
0000A58A 4EB9 0000 0000             		jsr	ObjectsLoad
0000A590                            ;		tst.w	($FFFFFFCC).w
0000A590                            ;		bne.w	Level_MainLoop2
0000A590                            ;		movem	a0-a3,-(sp)
0000A590                            ;		jsr	RingsManager
0000A590                            ;		movem	(sp)+,a0-a3
0000A590                            ;Level_MainLoop2:
0000A590 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000A594 6600 FBAE                  		bne.w	Level		; if yes, branch
0000A598 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A59C 6600                       		bne.s	loc_3B10
0000A59E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w	; is Sonic dying?
0000A5A4 6400                       		bcc.s	loc_3B14		; if yes, branch
0000A5A6                            
0000A5A6                            loc_3B10:
0000A5A6 4EB9 0000 0000             		jsr	DeformBgLayer
0000A5AC                            
0000A5AC                            loc_3B14:
0000A5AC 4EB9 0000 0000             		jsr	BuildSprites
0000A5B2 4EB9 0000 0000             		jsr	ObjPosLoad
0000A5B8 4EB8 3C46                  		jsr	PalCycle_Load
0000A5BC 4EB8 3762                  		jsr	RunPLC_RAM
0000A5C0 4EB9 0000 0000             		jsr	OscillateNumDo
0000A5C6 4EB9 0000 0000             		jsr	ChangeRingFrame
0000A5CC 4EB9 0000 0000             		jsr	SignpostArtLoad
0000A5D2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A5D8 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000A5DA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000A5E0 6700 FF8A                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000A5E4 4E75                       		rts			; quit
0000A5E6                            ; ===========================================================================
0000A5E6                            
0000A5E6                            Level_ChkDemo:				; XREF: Level_MainLoop
0000A5E6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000A5EA 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000A5EC 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000A5F0 6700                       		beq.s	Level_EndDemo	; if not, branch
0000A5F2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000A5F8 6700 FF72                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000A5FC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A602 4E75                       		rts	
0000A604                            ; ===========================================================================
0000A604                            
0000A604                            Level_EndDemo:				; XREF: Level_ChkDemo
0000A604 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000A60A 6600                       		bne.s	loc_3B88	; if not, branch
0000A60C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000A612 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000A616 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000A618 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000A61E                            
0000A61E                            loc_3B88:
0000A61E 31FC 003C FC20             		move.w	#$3C,($FFFFFC20).w
0000A624 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000A62A 4278 F794                  		clr.w	($FFFFF794).w
0000A62E                            
0000A62E                            loc_3B98:
0000A62E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000A634 6100 E73C                  		bsr.w	Wait_VSync
0000A638 4EB9 0000 0000             		jsr	MoveSonicInDemo
0000A63E 4EB9 0000 0000             		jsr	ObjectsLoad
0000A644 4EB9 0000 0000             		jsr	BuildSprites
0000A64A 4EB9 0000 0000             		jsr	ObjPosLoad
0000A650 5378 F794                  		subq.w	#1,($FFFFF794).w
0000A654 6A00                       		bpl.s	loc_3BC8
0000A656 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000A65C 4EB8 4550                  		jsr	Pal_FadeOut
0000A660                            
0000A660                            loc_3BC8:
0000A660 4A78 FC20                  		tst.w	($FFFFFC20).w
0000A664 66C8                       		bne.s	loc_3B98
0000A666 4E75                       		rts	
0000A668                            
0000A668                            ; ===========================================================================
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            ; Custom Subroutine to make dynamic events happen on a per level basis.
0000A668                            ; ---------------------------------------------------------------------------
0000A668                            DE_PreReturn:                                                               
0000A668 4E75                               rts
0000A66A                            
0000A66A                            DynamicEvents:                            ; Main controller depending on zone
0000A66A 0C38 0001 FFC6                     cmpi.b  #1,(sonickilled).w  ; Is sonic dead?
0000A670 6700 FFF6                          beq.w   DE_PreReturn        ; if so, stop all events.
0000A674                            
0000A674 7000                               moveq   #0,d0
0000A676 1038 FE10                          move.b  ($FFFFFE10).w,d0
0000A67A D040                               add.w   d0,d0
0000A67C 303B 0000                          move.w  DynEvents_Index(pc,d0.w),d0
0000A680 4EFB 0000                          jmp     DynEvents_Index(pc,d0.w)
0000A684                            
0000A684                            DynEvents_Index:
0000A684 0000                               dc.w DynEvents_GHZ-DynEvents_Index
0000A686 0000                               dc.w DynEvents_LZ-DynEvents_Index
0000A688 0000                               dc.w DynEvents_MZ-DynEvents_Index
0000A68A 0000                               dc.w DynEvents_SLZ-DynEvents_Index
0000A68C 0000                               dc.w DynEvents_SYZ-DynEvents_Index
0000A68E 0000                               dc.w DynEvents_SBZ-DynEvents_Index
0000A690                            
0000A690                            DE_PalLoad:                             ; Pallet loading routine.
0000A690 34D9                               move.w  (a1)+,(a2)+
0000A692 51C8 FFFC                          dbf     d0,DE_PalLoad
0000A696 4E75                               rts
0000A698                            
0000A698                            DynEvents_GHZ:
0000A698 7000                                       moveq   #0,d0
0000A69A 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A69E D040                                       add.w   d0,d0
0000A6A0 303B 0000                                  move.w  EventsGHZ_Index(pc,d0.w),d0
0000A6A4 4EFB 0000                                  jmp     EventsGHZ_Index(pc,d0.w)
0000A6A8                            
0000A6A8 0000                       EventsGHZ_Index: dc.w DynamicEvents_GHZ1-EventsGHZ_Index
0000A6AA 0000                                       dc.w DynamicEvents_GHZ2-EventsGHZ_Index
0000A6AC 0000                                       dc.w DynamicEvents_GHZ3-EventsGHZ_Index
0000A6AE                            
0000A6AE                            ;====================================================================
0000A6AE                            
0000A6AE                            DynEvents_LZ:
0000A6AE 7000                                       moveq   #0,d0
0000A6B0 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6B4 D040                                       add.w   d0,d0
0000A6B6 303B 0000                                  move.w  EventsLZ_Index(pc,d0.w),d0
0000A6BA 4EFB 0000                                  jmp     EventsLZ_Index(pc,d0.w)
0000A6BE                            
0000A6BE 0000                       EventsLZ_Index: dc.w DynamicEvents_LZ1-EventsLZ_Index
0000A6C0 0000                                       dc.w DynamicEvents_LZ2-EventsLZ_Index
0000A6C2 0000                                       dc.w DynamicEvents_LZ3-EventsLZ_Index 
0000A6C4                            
0000A6C4                            ;====================================================================
0000A6C4                            
0000A6C4                            DynEvents_MZ:
0000A6C4 7000                                       moveq   #0,d0
0000A6C6 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6CA D040                                       add.w   d0,d0
0000A6CC 303B 0000                                  move.w  EventsMZ_Index(pc,d0.w),d0
0000A6D0 4EFB 0000                                  jmp     EventsMZ_Index(pc,d0.w)
0000A6D4                            
0000A6D4 0000                       EventsMZ_Index: dc.w DynamicEvents_MZ1-EventsMZ_Index
0000A6D6 0000                                       dc.w DynamicEvents_MZ2-EventsMZ_Index
0000A6D8 0000                                       dc.w DynamicEvents_MZ3-EventsMZ_Index 
0000A6DA                            
0000A6DA                            ;====================================================================
0000A6DA                            
0000A6DA                            DynEvents_SLZ:
0000A6DA 7000                                       moveq   #0,d0
0000A6DC 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6E0 D040                                       add.w   d0,d0
0000A6E2 303B 0000                                  move.w  EventsSLZ_Index(pc,d0.w),d0
0000A6E6 4EFB 0000                                  jmp     EventsSLZ_Index(pc,d0.w)
0000A6EA                            
0000A6EA 0000                       EventsSLZ_Index:        dc.w DynamicEvents_SLZ1-EventsSLZ_Index
0000A6EC 0000                                       dc.w DynamicEvents_SLZ2-EventsSLZ_Index
0000A6EE 0000                                       dc.w DynamicEvents_SLZ3-EventsSLZ_Index 
0000A6F0                            
0000A6F0                            ;====================================================================
0000A6F0                            
0000A6F0                            DynEvents_SYZ:
0000A6F0 7000                                       moveq   #0,d0
0000A6F2 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A6F6 D040                                       add.w   d0,d0
0000A6F8 303B 0000                                  move.w  EventsSYZ_Index(pc,d0.w),d0
0000A6FC 4EFB 0000                                  jmp     EventsSYZ_Index(pc,d0.w)
0000A700                            
0000A700 0000                       EventsSYZ_Index:        dc.w DynamicEvents_SYZ1-EventsSYZ_Index
0000A702 0000                                       dc.w DynamicEvents_SYZ2-EventsSYZ_Index
0000A704 0000                                       dc.w DynamicEvents_SYZ3-EventsSYZ_Index 
0000A706                            
0000A706                            ;====================================================================
0000A706                            
0000A706                            DynEvents_SBZ:
0000A706 7000                                       moveq   #0,d0
0000A708 1038 FE11                                  move.b  ($FFFFFE11).w,d0
0000A70C D040                                       add.w   d0,d0
0000A70E 303B 0000                                  move.w  EventsSBZ_Index(pc,d0.w),d0
0000A712 4EFB 0000                                  jmp     EventsSBZ_Index(pc,d0.w)
0000A716                            
0000A716 0000                       EventsSBZ_Index:        dc.w DynamicEvents_SBZ1-EventsSBZ_Index
0000A718 0000                                       dc.w DynamicEvents_SBZ2-EventsSBZ_Index
0000A71A 0000                                       dc.w DynamicEvents_SBZ3-EventsSBZ_Index 
0000A71C                            
0000A71C                            ;====================================================================
0000A71C                            ; Dynamic Events on a zone basis:
0000A71C                            ;====================================================================
0000A71C                            
0000A71C                            DynamicEvents_GHZ1:
0000A71C 4E75                               rts
0000A71E                                            
0000A71E                            ; --------------------------------------------------------------------
0000A71E                            
0000A71E                            DynamicEvents_GHZ2:
0000A71E 4E75                               rts
0000A720                            
0000A720                            ; --------------------------------------------------------------------
0000A720                            
0000A720                            DynamicEvents_GHZ3:
0000A720 4E75                               rts
0000A722                                            
0000A722                            ; ====================================================================
0000A722                            
0000A722                            DynamicEvents_MZ1:
0000A722 4E75                               rts
0000A724                            
0000A724                            ; --------------------------------------------------------------------
0000A724                            
0000A724                            DynamicEvents_MZ2:
0000A724 4E75                               rts
0000A726                            
0000A726                            ; --------------------------------------------------------------------
0000A726                            
0000A726                            DynamicEvents_MZ3:
0000A726 4E75                               rts
0000A728                                            
0000A728                            ; ====================================================================
0000A728                            
0000A728                            DynamicEvents_SYZ1:
0000A728 4E75                               rts
0000A72A                            
0000A72A                            ; --------------------------------------------------------------------
0000A72A                            
0000A72A                            DynamicEvents_SYZ2:
0000A72A 4E75                               rts
0000A72C                            
0000A72C                            ; --------------------------------------------------------------------
0000A72C                            
0000A72C                            DynamicEvents_SYZ3:
0000A72C 4E75                               rts
0000A72E                                            
0000A72E                            ; ====================================================================
0000A72E                            
0000A72E                            DynamicEvents_LZ1:
0000A72E 4E75                               rts
0000A730                            
0000A730                            ; --------------------------------------------------------------------
0000A730                            
0000A730                            DynamicEvents_LZ2:
0000A730 4E75                               rts
0000A732                            
0000A732                            ; --------------------------------------------------------------------
0000A732                            
0000A732                            DynamicEvents_LZ3:
0000A732 4E75                               rts
0000A734                                            
0000A734                            ; ====================================================================
0000A734                            
0000A734                            DynamicEvents_SLZ1:
0000A734 4E75                               rts
0000A736                            
0000A736                            ; --------------------------------------------------------------------
0000A736                            
0000A736                            DynamicEvents_SLZ2:
0000A736 4E75                               rts
0000A738                            
0000A738                            ; --------------------------------------------------------------------
0000A738                            
0000A738                            DynamicEvents_SLZ3:
0000A738 4E75                               rts
0000A73A                                            
0000A73A                            ; ====================================================================
0000A73A                            
0000A73A                            DynamicEvents_SBZ1:
0000A73A 4E75                               rts
0000A73C                            
0000A73C                            ; --------------------------------------------------------------------
0000A73C                            
0000A73C                            DynamicEvents_SBZ2:
0000A73C 4E75                               rts
0000A73E                            
0000A73E                            ; --------------------------------------------------------------------
0000A73E                            
0000A73E                            DynamicEvents_SBZ3:
0000A73E 4E75                               rts
0000A740                                            
0000A740                            ; ====================================================================
0000A740                            
0000A740                            ; End of subroutine DynamicEvents
0000A740                            
0000A740                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000A740                            
0000A740                            ; sub_446E:
0000A740                            InitPlayers:
0000A740 3038 FF74                  	move.w	($FFFFFF74).w,d0
0000A744 6600                       	bne.s	InitPlayers_Alone ; branch if this isn't a Sonic and Tails game
0000A746 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFD000
0000A74C 11FC 0005 D1C0             	move.b	#5,($FFFFD1C0).w
0000A752                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A752                            	;cmpi.b	#0,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A752                            	;cmpi.b	#6,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A752                            	;cmpi.b	#$E,(Current_Zone).w
0000A752                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A752                            ;	cmpi.b	#$10,(Current_Zone).w
0000A752                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A752                            
0000A752                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A752                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A752                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A752                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A752                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A752                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A752                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A752                            
0000A752                            return_44BC:
0000A752 4E75                       	rts
0000A754                            ; ===========================================================================
0000A754                            ; loc_44BE:
0000A754                            InitPlayers_Alone: ; either Sonic or Tails but not both
0000A754 5340                       	subq.w	#1,d0
0000A756 6600                       	bne.s	InitPlayers_TailsAlone ; branch if this is a Tails alone game
0000A758                            
0000A758 11FC 0001 D000             	move.b	#1,(MainCharacter).w ; load Obj01 Sonic object at $FFFFB000
0000A75E                            ;	move.b	#8,($FFFFD100).w ; load Obj08 Sonic's spindash dust/splash object at $FFFFD100
0000A75E                            	;cmpi.b	#0,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is SHZ
0000A75E                            	;cmpi.b	#6,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is WFZ
0000A75E                            	;cmpi.b	#$E,(Current_Zone).w
0000A75E                            	;beq.s	return_44BC ; skip loading Tails if this is DEZ
0000A75E                            ;	cmpi.b	#$10,(Current_Zone).w
0000A75E                            ;	beq.s	return_44BC ; skip loading Tails if this is SCZ
0000A75E                            
0000A75E                            ;	move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000A75E                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A75E                            ;	move.w	(MainCharacter+x_pos).w,(Sidekick+x_pos).w
0000A75E                            ;	move.w	(MainCharacter+y_pos).w,(Sidekick+y_pos).w
0000A75E                            ;	subi.w	#$20,(Sidekick+x_pos).w
0000A75E                            ;	addi.w	#4,(Sidekick+y_pos).w
0000A75E                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD140
0000A75E                            ;	rts
0000A75E                            ; ===========================================================================
0000A75E                            ; loc_44D0:
0000A75E                            InitPlayers_TailsAlone:
0000A75E 3038 FF76                  	move.w	(Player_option).w,d0
0000A762 0C00 0003                  	cmpi.b #3,d0
0000A766 6700 0000                  	beq.w	InitPlayers_MetalAlone
0000A76A                            ;	move.b	#2,(MainCharacter).w ; load Obj02 Tails object at $FFFFB000
0000A76A                            ;	move.w  #Tails_Tails,(Tails_Tails_ptr).w
0000A76A                            ;	move.b	#8,(Tails_Dust).w ; load Obj08 Tails' spindash dust/splash object at $FFFFD100
0000A76A                            ;	addi.w	#4,(MainCharacter+y_pos).w
0000A76A                            ;	clr.b	(Super_Sonic_flag).w
0000A76A                            ;	rts
0000A76A                            
0000A76A                            InitPlayers_MetalAlone:
0000A76A                            ;	move.b	#$4E,(MainCharacter).w
0000A76A                            ;	move.w	(Player_option).w,d0
0000A76A                            ;	move.w	d0,(Player_Mode).w
0000A76A                            ;	move.b	#8,($FFFFD100).w
0000A76A                            ;	move.b	#$01,($FFFFFFE0).w
0000A76A 4E75                       	rts
0000A76C                            ; End of function InitPlayers
0000A76C                            
0000A76C                            
0000A76C                            ; ---------------------------------------------------------------------------
0000A76C                            ; Subroutine to	do special water effects in Labyrinth Zone
0000A76C                            ; ---------------------------------------------------------------------------
0000A76C                            
0000A76C                            LZWaterEffects:				; XREF: Level
0000A76C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000A772 6600                       		bne.s	locret_3C28	; if not, branch
0000A774 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A77A 6400                       		bcc.s	LZMoveWater
0000A77C 4EB9 0000 0000             		jsr	LZWindTunnels
0000A782 4EB9 0000 0000             		jsr	LZWaterSlides
0000A788 4EB9 0000 0000             		jsr	LZDynamicWater
0000A78E                            
0000A78E                            LZMoveWater:
0000A78E 4238 F64E                  		clr.b	($FFFFF64E).w
0000A792 7000                       		moveq	#0,d0
0000A794 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000A798 E248                       		lsr.w	#1,d0
0000A79A D078 F648                  		add.w	($FFFFF648).w,d0
0000A79E 31C0 F646                  		move.w	d0,($FFFFF646).w
0000A7A2 3038 F646                  		move.w	($FFFFF646).w,d0
0000A7A6 9078 F704                  		sub.w	($FFFFF704).w,d0
0000A7AA 6400                       		bcc.s	loc_3C1A
0000A7AC 4A40                       		tst.w	d0
0000A7AE 6A00                       		bpl.s	loc_3C1A
0000A7B0 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000A7B6 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000A7BC                            
0000A7BC                            loc_3C1A:
0000A7BC 0C40 00DF                  		cmpi.w	#$DF,d0
0000A7C0 6500                       		bcs.s	loc_3C24
0000A7C2 303C 00DF                  		move.w	#$DF,d0
0000A7C6                            
0000A7C6                            loc_3C24:
0000A7C6 11C0 F625                  		move.b	d0,($FFFFF625).w
0000A7CA                            
0000A7CA                            locret_3C28:
0000A7CA 4E75                       		rts	
0000A7CC                            ; ===========================================================================
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            ; Labyrinth default water heights
0000A7CC                            ; ---------------------------------------------------------------------------
0000A7CC                            WaterHeight:	incbin	misc\lz_heigh.bin
0000A7D4                            		even
0000A7D4                            ; ===========================================================================
0000A7D4                            
0000A7D4                            ; ---------------------------------------------------------------------------
0000A7D4                            ; Labyrinth dynamic water routines
0000A7D4                            ; ---------------------------------------------------------------------------
0000A7D4                            
0000A7D4                            LZDynamicWater:				; XREF: LZWaterEffects
0000A7D4 7000                       		moveq	#0,d0
0000A7D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A7DA D040                       		add.w	d0,d0
0000A7DC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000A7E0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000A7E4 7200                       		moveq	#0,d1
0000A7E6 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000A7EA 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000A7EE 9078 F648                  		sub.w	($FFFFF648).w,d0
0000A7F2 6700                       		beq.s	locret_3C5A
0000A7F4 6400                       		bcc.s	loc_3C56
0000A7F6 4441                       		neg.w	d1
0000A7F8                            
0000A7F8                            loc_3C56:
0000A7F8 D378 F648                  		add.w	d1,($FFFFF648).w
0000A7FC                            
0000A7FC                            locret_3C5A:
0000A7FC 4E75                       		rts	
0000A7FE                            ; ===========================================================================
0000A7FE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000A800 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000A802 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000A804 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000A806                            ; ===========================================================================
0000A806                            
0000A806                            DynWater_LZ1:				; XREF: DynWater_Index
0000A806 3038 F700                  		move.w	($FFFFF700).w,d0
0000A80A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000A80E 6600                       		bne.s	loc_3CD0
0000A810 323C 00B8                  		move.w	#$B8,d1
0000A814 0C40 0600                  		cmpi.w	#$600,d0
0000A818 6500                       		bcs.s	loc_3CB4
0000A81A 323C 0108                  		move.w	#$108,d1
0000A81E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000A824 6500                       		bcs.s	loc_3CBA
0000A826 0C40 0C00                  		cmpi.w	#$C00,d0
0000A82A 6500                       		bcs.s	loc_3CB4
0000A82C 323C 0318                  		move.w	#$318,d1
0000A830 0C40 1080                  		cmpi.w	#$1080,d0
0000A834 6500                       		bcs.s	loc_3CB4
0000A836 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000A83C 323C 05C8                  		move.w	#$5C8,d1
0000A840 0C40 1380                  		cmpi.w	#$1380,d0
0000A844 6500                       		bcs.s	loc_3CB4
0000A846 323C 03A8                  		move.w	#$3A8,d1
0000A84A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000A84E 6600                       		bne.s	loc_3CB4
0000A850 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000A856                            
0000A856                            loc_3CB4:
0000A856 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A85A 4E75                       		rts	
0000A85C                            ; ===========================================================================
0000A85C                            
0000A85C                            loc_3CBA:				; XREF: DynWater_LZ1
0000A85C 0C40 0C80                  		cmpi.w	#$C80,d0
0000A860 65F4                       		bcs.s	loc_3CB4
0000A862 323C 00E8                  		move.w	#$E8,d1
0000A866 0C40 1500                  		cmpi.w	#$1500,d0
0000A86A 65EA                       		bcs.s	loc_3CB4
0000A86C 323C 0108                  		move.w	#$108,d1
0000A870 60E4                       		bra.s	loc_3CB4
0000A872                            ; ===========================================================================
0000A872                            
0000A872                            loc_3CD0:				; XREF: DynWater_LZ1
0000A872 5302                       		subq.b	#1,d2
0000A874 6600                       		bne.s	locret_3CF4
0000A876 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000A87C 6400                       		bcc.s	locret_3CF4
0000A87E 323C 03A8                  		move.w	#$3A8,d1
0000A882 0C40 1300                  		cmpi.w	#$1300,d0
0000A886 6500                       		bcs.s	loc_3CF0
0000A888 323C 0108                  		move.w	#$108,d1
0000A88C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000A892                            
0000A892                            loc_3CF0:
0000A892 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A896                            
0000A896                            locret_3CF4:
0000A896 4E75                       		rts	
0000A898                            ; ===========================================================================
0000A898                            
0000A898                            DynWater_LZ2:				; XREF: DynWater_Index
0000A898 3038 F700                  		move.w	($FFFFF700).w,d0
0000A89C 323C 0328                  		move.w	#$328,d1
0000A8A0 0C40 0500                  		cmpi.w	#$500,d0
0000A8A4 6500                       		bcs.s	loc_3D12
0000A8A6 323C 03C8                  		move.w	#$3C8,d1
0000A8AA 0C40 0B00                  		cmpi.w	#$B00,d0
0000A8AE 6500                       		bcs.s	loc_3D12
0000A8B0 323C 0428                  		move.w	#$428,d1
0000A8B4                            
0000A8B4                            loc_3D12:
0000A8B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A8B8 4E75                       		rts	
0000A8BA                            ; ===========================================================================
0000A8BA                            
0000A8BA                            DynWater_LZ3:				; XREF: DynWater_Index
0000A8BA 3038 F700                  		move.w	($FFFFF700).w,d0
0000A8BE 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000A8C2 6600                       		bne.s	loc_3D5E
0000A8C4 323C 0900                  		move.w	#$900,d1
0000A8C8 0C40 0600                  		cmpi.w	#$600,d0
0000A8CC 6500                       		bcs.s	loc_3D54
0000A8CE 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000A8D4 6500                       		bcs.s	loc_3D54
0000A8D6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000A8DC 6400                       		bcc.s	loc_3D54
0000A8DE 323C 04C8                  		move.w	#$4C8,d1
0000A8E2 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
0000A8E8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000A8EE 303C 00B7                  		move.w	#$B7,d0
0000A8F2 6100 EA3E                  		bsr.w	Jmpto_PlaySound_Special ; play sound $B7 (rumbling)
0000A8F6                            
0000A8F6                            loc_3D54:
0000A8F6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A8FA 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A8FE 4E75                       		rts	
0000A900                            ; ===========================================================================
0000A900                            
0000A900                            loc_3D5E:				; XREF: DynWater_LZ3
0000A900 5302                       		subq.b	#1,d2
0000A902 6600                       		bne.s	loc_3DA8
0000A904 323C 04C8                  		move.w	#$4C8,d1
0000A908 0C40 0770                  		cmpi.w	#$770,d0
0000A90C 6500                       		bcs.s	loc_3DA2
0000A90E 323C 0308                  		move.w	#$308,d1
0000A912 0C40 1400                  		cmpi.w	#$1400,d0
0000A916 6500                       		bcs.s	loc_3DA2
0000A918 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000A91E 6700                       		beq.s	loc_3D8E
0000A920 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000A926 6400                       		bcc.s	loc_3D8E
0000A928 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000A92E 6400                       		bcc.s	loc_3DA2
0000A930                            
0000A930                            loc_3D8E:
0000A930 323C 0508                  		move.w	#$508,d1
0000A934 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A938 0C40 1770                  		cmpi.w	#$1770,d0
0000A93C 6500                       		bcs.s	loc_3DA2
0000A93E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000A944                            
0000A944                            loc_3DA2:
0000A944 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A948 4E75                       		rts	
0000A94A                            ; ===========================================================================
0000A94A                            
0000A94A                            loc_3DA8:
0000A94A 5302                       		subq.b	#1,d2
0000A94C 6600                       		bne.s	loc_3DD2
0000A94E 323C 0508                  		move.w	#$508,d1
0000A952 0C40 1860                  		cmpi.w	#$1860,d0
0000A956 6500                       		bcs.s	loc_3DCC
0000A958 323C 0188                  		move.w	#$188,d1
0000A95C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000A960 6400                       		bcc.s	loc_3DC6
0000A962 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000A966 6600                       		bne.s	loc_3DCC
0000A968                            
0000A968                            loc_3DC6:
0000A968 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000A96E                            
0000A96E                            loc_3DCC:
0000A96E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A972 4E75                       		rts	
0000A974                            ; ===========================================================================
0000A974                            
0000A974                            loc_3DD2:
0000A974 5302                       		subq.b	#1,d2
0000A976 6600                       		bne.s	loc_3E0E
0000A978 323C 0188                  		move.w	#$188,d1
0000A97C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000A980 6500                       		bcs.s	loc_3E04
0000A982 323C 0900                  		move.w	#$900,d1
0000A986 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000A98A 6500                       		bcs.s	loc_3E04
0000A98C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000A992 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000A998 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000A99E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000A9A4 4E75                       		rts	
0000A9A6                            ; ===========================================================================
0000A9A6                            
0000A9A6                            loc_3E04:
0000A9A6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A9AA 31C1 F648                  		move.w	d1,($FFFFF648).w
0000A9AE 4E75                       		rts	
0000A9B0                            ; ===========================================================================
0000A9B0                            
0000A9B0                            loc_3E0E:
0000A9B0 0C40 1E00                  		cmpi.w	#$1E00,d0
0000A9B4 6500                       		bcs.s	locret_3E1A
0000A9B6 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000A9BC                            
0000A9BC                            locret_3E1A:
0000A9BC 4E75                       		rts	
0000A9BE                            ; ===========================================================================
0000A9BE                            
0000A9BE                            DynWater_SBZ3:				; XREF: DynWater_Index
0000A9BE 323C 0228                  		move.w	#$228,d1
0000A9C2 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000A9C8 6500                       		bcs.s	loc_3E2C
0000A9CA 323C 04C8                  		move.w	#$4C8,d1
0000A9CE                            
0000A9CE                            loc_3E2C:
0000A9CE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000A9D2 4E75                       		rts
0000A9D4                            
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4                            ; Labyrinth Zone "wind tunnels"	subroutine
0000A9D4                            ; ---------------------------------------------------------------------------
0000A9D4                            
0000A9D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9D4                            
0000A9D4                            
0000A9D4                            LZWindTunnels:				; XREF: LZWaterEffects
0000A9D4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000A9D8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000A9DC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000A9E2 7000                       		moveq	#0,d0
0000A9E4 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000A9E8 E748                       		lsl.w	#3,d0
0000A9EA D4C0                       		adda.w	d0,a2
0000A9EC 7200                       		moveq	#0,d1
0000A9EE 4A38 FE11                  		tst.b	($FFFFFE11).w
0000A9F2 6600                       		bne.s	loc_3E56
0000A9F4 7201                       		moveq	#1,d1
0000A9F6 514A                       		subq.w	#8,a2
0000A9F8                            
0000A9F8                            loc_3E56:
0000A9F8 43F8 D000                  		lea	($FFFFD000).w,a1
0000A9FC                            
0000A9FC                            LZWind_Loop:
0000A9FC 3029 0008                  		move.w	8(a1),d0
0000AA00 B052                       		cmp.w	(a2),d0
0000AA02 6500 0000                  		bcs.w	loc_3EF4
0000AA06 B06A 0004                  		cmp.w	4(a2),d0
0000AA0A 6400 0000                  		bcc.w	loc_3EF4
0000AA0E 3429 000C                  		move.w	$C(a1),d2
0000AA12 B46A 0002                  		cmp.w	2(a2),d2
0000AA16 6500                       		bcs.s	loc_3EF4
0000AA18 B46A 0006                  		cmp.w	6(a2),d2
0000AA1C 6400                       		bcc.s	loc_3EF4
0000AA1E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AA22 0200 003F                  		andi.b	#$3F,d0
0000AA26 6600                       		bne.s	loc_3E90
0000AA28 303C 00D0                  		move.w	#$D0,d0
0000AA2C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000AA32                            
0000AA32                            loc_3E90:
0000AA32 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000AA36 6600 0000                  		bne.w	locret_3F0A
0000AA3A 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0000AA40 6400                       		bcc.s	loc_3F06
0000AA42 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000AA48 0440 0080                  		subi.w	#$80,d0
0000AA4C B052                       		cmp.w	(a2),d0
0000AA4E 6400                       		bcc.s	LZWind_Move
0000AA50 7002                       		moveq	#2,d0
0000AA52 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000AA58 6600                       		bne.s	loc_3EBA
0000AA5A 4440                       		neg.w	d0
0000AA5C                            
0000AA5C                            loc_3EBA:
0000AA5C D169 000C                  		add.w	d0,$C(a1)
0000AA60                            
0000AA60                            LZWind_Move:
0000AA60 5869 0008                  		addq.w	#4,8(a1)
0000AA64 337C 0400 0010             		move.w	#$400,x_vel(a1)	; move Sonic horizontally
0000AA6A 337C 0000 0012             		move.w	#0,y_vel(a1)
0000AA70 137C 000F 001C             		move.b	#$F,anim(a1)	; use floating animation
0000AA76 08E9 0001 0022             		bset	#1,status(a1)
0000AA7C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000AA82 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000AA84 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000AA88                            
0000AA88                            LZWind_MoveDown:
0000AA88 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000AA8E 6700                       		beq.s	locret_3EF2	; if not, branch
0000AA90 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000AA94                            
0000AA94                            locret_3EF2:
0000AA94 4E75                       		rts	
0000AA96                            ; ===========================================================================
0000AA96                            
0000AA96                            loc_3EF4:				; XREF: LZWindTunnels
0000AA96 504A                       		addq.w	#8,a2
0000AA98 51C9 FF62                  		dbf	d1,LZWind_Loop
0000AA9C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000AAA0 6700                       		beq.s	locret_3F0A
0000AAA2 137C 0000 001C             		move.b	#0,anim(a1)
0000AAA8                            
0000AAA8                            loc_3F06:
0000AAA8 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000AAAC                            
0000AAAC                            locret_3F0A:
0000AAAC 4E75                       		rts	
0000AAAE                            ; End of function LZWindTunnels
0000AAAE                            
0000AAAE                            ; ===========================================================================
0000AAAE 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000AAB6 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000AAC8 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000AAD6                            					; XREF: LZWindTunnels
0000AAD6                            		even
0000AAD6                            
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            ; Labyrinth Zone water slide subroutine
0000AAD6                            ; ---------------------------------------------------------------------------
0000AAD6                            
0000AAD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAD6                            
0000AAD6                            
0000AAD6                            LZWaterSlides:				; XREF: LZWaterEffects
0000AAD6 43F8 D000                  		lea	($FFFFD000).w,a1
0000AADA 0829 0001 0022             		btst	#1,$22(a1)
0000AAE0 6600                       		bne.s	loc_3F6A
0000AAE2 3029 000C                  		move.w	$0C(a1),d0				; MJ: Load Y position
0000AAE6 3229 0008                  		move.w	$08(a1),d1				; MJ: Load X position
0000AAEA 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0000AAEE E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0000AAF0 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0000AAF2 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0000AAF6 D041                       		add.w	d1,d0					; MJ: add together
0000AAF8 2478 A400                  		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
0000AAFC 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
0000AB00 45FA 0000                  		lea	Slide_002(pc),a2
0000AB04 7214                       		moveq	#$14,d1					; MJ: repeat times
0000AB06                            
0000AB06                            loc_3F62:
0000AB06 B01A                       		cmp.b	(a2)+,d0
0000AB08 57C9 FFFC                  		dbeq	d1,loc_3F62
0000AB0C 6700                       		beq.s	LZSlide_Move
0000AB0E                            
0000AB0E                            loc_3F6A:
0000AB0E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000AB12 6700                       		beq.s	locret_3F7A
0000AB14 337C 0005 003E             		move.w	#5,$3E(a1)
0000AB1A 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000AB1E                            
0000AB1E                            locret_3F7A:
0000AB1E 4E75                       		rts	
0000AB20                            ; ===========================================================================
0000AB20                            
0000AB20                            LZSlide_Move:				; XREF: LZWaterSlides
0000AB20 0C41 0003                  		cmpi.w	#3,d1
0000AB24 6400                       		bcc.s	loc_3F84
0000AB26 4E71                       		nop	
0000AB28                            
0000AB28                            loc_3F84:
0000AB28 08A9 0000 0022             		bclr	#0,$22(a1)
0000AB2E 103B 1000                  		move.b	Slide_001(pc,d1.w),d0
0000AB32 1340 0020                  		move.b	d0,inertia(a1)
0000AB36 6A00                       		bpl.s	loc_3F9A
0000AB38 08E9 0000 0022             		bset	#0,$22(a1)
0000AB3E                            
0000AB3E                            loc_3F9A:
0000AB3E 4229 0015                  		clr.b	$15(a1)
0000AB42 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000AB48 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000AB4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AB52 0200 001F                  		andi.b	#$1F,d0
0000AB56 6600                       		bne.s	locret_3FBE
0000AB58 303C 00D0                  		move.w	#$D0,d0
0000AB5C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play water sound
0000AB62                            
0000AB62                            locret_3FBE:
0000AB62 4E75                       		rts	
0000AB64                            ; End of function LZWaterSlides
0000AB64                            
0000AB64                            ; ===========================================================================
0000AB64 F5                         Slide_001:	dc.b		    $F5
0000AB65 F4F4 F4F4                  		dc.b	$F4,$F4,$F4,$F4
0000AB69 F5F5 F5F5                  		dc.b	$F5,$F5,$F5,$F5
0000AB6D 0B0B 0B0B                  		dc.b	$0B,$0B,$0B,$0B
0000AB71 F6F6 F6F6                  		dc.b	$F6,$F6,$F6,$F6
0000AB75 0A0A 0A0A                  		dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
0000AB79 00                         		align 2
0000AB7A 0506 090A                  Slide_002:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
0000AB7E FAFB FCFD                  		dc.b	$FA,$FB,$FC,$FD
0000AB82 0B0C 0D0E                  		dc.b	$0B,$0C,$0D,$0E
0000AB86 1516 F8F9                  		dc.b	$15,$16,$F8,$F9
0000AB8A 191A 1B1C                  		dc.b	$19,$1A,$1B,$1C
0000AB8E 17                         		dc.b	$17
0000AB8F 00                         		align 2
0000AB90                            
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            ; Subroutine to	move Sonic in demo mode
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            
0000AB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB90                            
0000AB90                            
0000AB90                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000AB90 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000AB94 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000AB96 4E75                       		rts	
0000AB98                            ; ===========================================================================
0000AB98                            
0000AB98                            ; This is an unused subroutine for recording a demo
0000AB98                            
0000AB98                            MoveDemo_Record:
0000AB98 43F9 0008 0000             		lea	($80000).l,a1
0000AB9E 3038 F790                  		move.w	($FFFFF790).w,d0
0000ABA2 D2C0                       		adda.w	d0,a1
0000ABA4 1038 F604                  		move.b	($FFFFF604).w,d0
0000ABA8 B011                       		cmp.b	(a1),d0
0000ABAA 6600                       		bne.s	loc_3FFA
0000ABAC 5229 0001                  		addq.b	#1,1(a1)
0000ABB0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000ABB6 6700                       		beq.s	loc_3FFA
0000ABB8 4E75                       		rts	
0000ABBA                            ; ===========================================================================
0000ABBA                            
0000ABBA                            loc_3FFA:				; XREF: MoveDemo_Record
0000ABBA 1340 0002                  		move.b	d0,2(a1)
0000ABBE 137C 0000 0003             		move.b	#0,3(a1)
0000ABC4 5478 F790                  		addq.w	#2,($FFFFF790).w
0000ABC8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000ABCE 4E75                       		rts	
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000ABD0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w
0000ABD6 4A38 F604                  		tst.b	($FFFFF604).w
0000ABDA 6A00                       		bpl.s	loc_4022
0000ABDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000ABE0 6B00                       		bmi.s	loc_4022
0000ABE2 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000ABE8                            
0000ABE8                            loc_4022:
0000ABE8 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000ABEE 7000                       		moveq	#0,d0
0000ABF0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000ABF4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000ABFA 6600                       		bne.s	loc_4038
0000ABFC 7006                       		moveq	#6,d0
0000ABFE                            
0000ABFE                            loc_4038:
0000ABFE E548                       		lsl.w	#2,d0
0000AC00 2271 0000                  		movea.l	(a1,d0.w),a1
0000AC04 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000AC08 6A00                       		bpl.s	loc_4056
0000AC0A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000AC10 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000AC14 5340                       		subq.w	#1,d0
0000AC16 E548                       		lsl.w	#2,d0
0000AC18 2271 0000                  		movea.l	(a1,d0.w),a1
0000AC1C                            
0000AC1C                            loc_4056:
0000AC1C 3038 F790                  		move.w	($FFFFF790).w,d0
0000AC20 D2C0                       		adda.w	d0,a1
0000AC22 1011                       		move.b	(a1),d0
0000AC24 41F8 F604                  		lea	($FFFFF604).w,a0
0000AC28 1200                       		move.b	d0,d1
0000AC2A 1428 FFFE                  		move.b	-2(a0),d2
0000AC2E B500                       		eor.b	d2,d0
0000AC30 10C1                       		move.b	d1,(a0)+
0000AC32 C001                       		and.b	d1,d0
0000AC34 10C0                       		move.b	d0,(a0)+
0000AC36 5338 F792                  		subq.b	#1,($FFFFF792).w
0000AC3A 6400                       		bcc.s	locret_407E
0000AC3C 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000AC42 5478 F790                  		addq.w	#2,($FFFFF790).w
0000AC46                            
0000AC46                            locret_407E:
0000AC46 4E75                       		rts	
0000AC48                            ; End of function MoveSonicInDemo
0000AC48                            
0000AC48                            ; ===========================================================================
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Demo sequence	pointers
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            Demo_Index:
0000AC48                            	include "_inc\Demo pointers for intro.asm"
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48                            ; Demo sequence	pointers
0000AC48                            ; ---------------------------------------------------------------------------
0000AC48 0000 0000                  	dc.l Demo_GHZ
0000AC4C 0000 0000                  	dc.l Demo_GHZ
0000AC50 0000 0000                  	dc.l Demo_MZ
0000AC54 0000 0000                  	dc.l Demo_MZ
0000AC58 0000 0000                  	dc.l Demo_SYZ
0000AC5C 0000 0000                  	dc.l Demo_SYZ
0000AC60 0000 0000                  	dc.l Demo_SS
0000AC64 0000 0000                  	dc.l Demo_SS
0000AC64 0000 0000                  	dc.l Demo_SS
0000AC68                            
0000AC68                            Demo_EndIndex:
0000AC68                            	include "_inc\Demo pointers for ending.asm"
0000AC68                            ; ---------------------------------------------------------------------------
0000AC68                            ; Demo (ending) sequence pointers
0000AC68                            ; ---------------------------------------------------------------------------
0000AC68 0000 0000                  	dc.l Demo_EndGHZ1
0000AC6C 0000 0000                  	dc.l Demo_EndMZ
0000AC70 0000 0000                  	dc.l Demo_EndSYZ
0000AC74 0000 0000                  	dc.l Demo_EndLZ
0000AC78 0000 0000                  	dc.l Demo_EndSLZ
0000AC7C 0000 0000                  	dc.l Demo_EndSBZ1
0000AC80 0000 0000                  	dc.l Demo_EndSBZ2
0000AC84 0000 0000                  	dc.l Demo_EndGHZ2
0000AC84 0000 0000                  	dc.l Demo_EndGHZ2
0000AC88                            
0000AC88 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000AC98 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000ACA8 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000ACB8                            		even
0000ACB8                            
0000ACB8                            ; ---------------------------------------------------------------------------
0000ACB8                            ; Collision index loading subroutine
0000ACB8                            ; ---------------------------------------------------------------------------
0000ACB8                            
0000ACB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACB8                            
0000ACB8                            
0000ACB8                            ColIndexLoad:				; XREF: Level
0000ACB8 7000                       		moveq	#0,d0
0000ACBA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000ACBE E748                       		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
0000ACC0 21FB 0000 FFE2             		move.l	ColPointers(pc,d0.w),($FFFFFFE2).w	; MJ: get first collision set
0000ACC6 5840                       		add.w	#$04,d0					; MJ: increase to next location
0000ACC8 21FB 0000 FFE6             		move.l	ColPointers(pc,d0.w),($FFFFFFE6).w	; MJ: get second collision set
0000ACCE 4E75                       		rts	
0000ACD0                            ; End of function ColIndexLoad
0000ACD0                            
0000ACD0                            ; ===========================================================================
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ; Collision index pointers for Act 1
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ColPointers:
0000ACD0                            	include "_inc\Collision index pointers.asm"
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0                            ; Collision index pointers
0000ACD0                            ; ---------------------------------------------------------------------------
0000ACD0 0000 0000                  	dc.l Col_GHZ_1
0000ACD4 0000 0000                  	dc.l Col_GHZ_2
0000ACD8 0000 0000                  	dc.l Col_LZ_1
0000ACDC 0000 0000                  	dc.l Col_LZ_2
0000ACE0 0000 0000                  	dc.l Col_MZ_1
0000ACE4 0000 0000                  	dc.l Col_MZ_2
0000ACE8 0000 0000                  	dc.l Col_SLZ_1
0000ACEC 0000 0000                  	dc.l Col_SLZ_2
0000ACF0 0000 0000                  	dc.l Col_SYZ_1
0000ACF4 0000 0000                  	dc.l Col_SYZ_2
0000ACF8 0000 0000                  	dc.l Col_SBZ_1
0000ACFC 0000 0000                  	dc.l Col_SBZ_2
0000AD00 0000 0000                  	dc.l Col_ABZ_1
0000AD04 0000 0000                  	dc.l Col_ABZ_2
0000AD04 0000 0000                  	dc.l Col_ABZ_2
0000AD08                             
0000AD08                            ; ---------------------------------------------------------------------------
0000AD08                            ; Oscillating number subroutine
0000AD08                            ; ---------------------------------------------------------------------------
0000AD08                            
0000AD08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD08                            
0000AD08                            
0000AD08                            OscillateNumInit:			; XREF: Level
0000AD08 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AD0C 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000AD12 7220                       		moveq	#$20,d1
0000AD14                            
0000AD14                            Osc_Loop:
0000AD14 32DA                       		move.w	(a2)+,(a1)+
0000AD16 51C9 FFFC                  		dbf	d1,Osc_Loop
0000AD1A 4E75                       		rts	
0000AD1C                            ; End of function OscillateNumInit
0000AD1C                            
0000AD1C                            ; ===========================================================================
0000AD1C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000AD20 0000 0080                  		dc.w 0,	$80
0000AD24 0000 0080                  		dc.w 0,	$80
0000AD28 0000 0080                  		dc.w 0,	$80
0000AD2C 0000 0080                  		dc.w 0,	$80
0000AD30 0000 0080                  		dc.w 0,	$80
0000AD34 0000 0080                  		dc.w 0,	$80
0000AD38 0000 0080                  		dc.w 0,	$80
0000AD3C 0000 0080                  		dc.w 0,	$80
0000AD40 0000 50F0                  		dc.w 0,	$50F0
0000AD44 011E 2080                  		dc.w $11E, $2080
0000AD48 00B4 3080                  		dc.w $B4, $3080
0000AD4C 010E 5080                  		dc.w $10E, $5080
0000AD50 01C2 7080                  		dc.w $1C2, $7080
0000AD54 0276 0080                  		dc.w $276, $80
0000AD58 0000 0080                  		dc.w 0,	$80
0000AD5C 0000                       		dc.w 0
0000AD5E                            		even
0000AD5E                            
0000AD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD5E                            
0000AD5E                            
0000AD5E                            OscillateNumDo:				; XREF: Level
0000AD5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD64 6400                       		bcc.s	locret_41C4
0000AD66 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000AD6A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000AD70 3619                       		move.w	(a1)+,d3
0000AD72 720F                       		moveq	#$F,d1
0000AD74                            
0000AD74                            loc_4184:
0000AD74 341A                       		move.w	(a2)+,d2
0000AD76 381A                       		move.w	(a2)+,d4
0000AD78 0303                       		btst	d1,d3
0000AD7A 6600                       		bne.s	loc_41A4
0000AD7C 3029 0002                  		move.w	2(a1),d0
0000AD80 D042                       		add.w	d2,d0
0000AD82 3340 0002                  		move.w	d0,2(a1)
0000AD86 D151                       		add.w	d0,0(a1)
0000AD88 B811                       		cmp.b	0(a1),d4
0000AD8A 6200                       		bhi.s	loc_41BA
0000AD8C 03C3                       		bset	d1,d3
0000AD8E 6000                       		bra.s	loc_41BA
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            loc_41A4:				; XREF: OscillateNumDo
0000AD90 3029 0002                  		move.w	2(a1),d0
0000AD94 9042                       		sub.w	d2,d0
0000AD96 3340 0002                  		move.w	d0,2(a1)
0000AD9A D151                       		add.w	d0,0(a1)
0000AD9C B811                       		cmp.b	0(a1),d4
0000AD9E 6300                       		bls.s	loc_41BA
0000ADA0 0383                       		bclr	d1,d3
0000ADA2                            
0000ADA2                            loc_41BA:
0000ADA2 5849                       		addq.w	#4,a1
0000ADA4 51C9 FFCE                  		dbf	d1,loc_4184
0000ADA8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000ADAC                            
0000ADAC                            locret_41C4:
0000ADAC 4E75                       		rts	
0000ADAE                            ; End of function OscillateNumDo
0000ADAE                            
0000ADAE                            ; ===========================================================================
0000ADAE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000ADB2 0002 0018                  		dc.w 2,	$18
0000ADB6 0002 0020                  		dc.w 2,	$20
0000ADBA 0002 0030                  		dc.w 2,	$30
0000ADBE 0004 0020                  		dc.w 4,	$20
0000ADC2 0008 0008                  		dc.w 8,	8
0000ADC6 0008 0040                  		dc.w 8,	$40
0000ADCA 0004 0040                  		dc.w 4,	$40
0000ADCE 0002 0050                  		dc.w 2,	$50
0000ADD2 0002 0050                  		dc.w 2,	$50
0000ADD6 0002 0020                  		dc.w 2,	$20
0000ADDA 0003 0030                  		dc.w 3,	$30
0000ADDE 0005 0050                  		dc.w 5,	$50
0000ADE2 0007 0070                  		dc.w 7,	$70
0000ADE6 0002 0010                  		dc.w 2,	$10
0000ADEA 0002 0010                  		dc.w 2,	$10
0000ADEE                            		even
0000ADEE                            
0000ADEE                            
0000ADEE                            ; ---------------------------------------------------------------------------
0000ADEE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000ADEE                            ; ---------------------------------------------------------------------------
0000ADEE                            
0000ADEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADEE                            
0000ADEE                            
0000ADEE                            ChangeRingFrame:			; XREF: Level
0000ADEE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000ADF2 6A00                       		bpl.s	loc_421C
0000ADF4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000ADFA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000ADFE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0000AE04                            
0000AE04                            loc_421C:
0000AE04 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000AE08 6A00                       		bpl.s	loc_4232
0000AE0A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000AE10 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000AE14 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000AE1A                            
0000AE1A                            loc_4232:
0000AE1A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000AE1E 6A00                       		bpl.s	loc_4250
0000AE20 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000AE26 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000AE2A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000AE30 6500                       		bcs.s	loc_4250
0000AE32 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000AE38                            
0000AE38                            loc_4250:
0000AE38 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AE3C 6700                       		beq.s	locret_4272
0000AE3E 7000                       		moveq	#0,d0
0000AE40 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000AE44 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000AE48 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000AE4C EF58                       		rol.w	#7,d0
0000AE4E 0240 0003                  		andi.w	#3,d0
0000AE52 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000AE56 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000AE5A                            
0000AE5A                            locret_4272:
0000AE5A 4E75                       		rts	
0000AE5C                            ; End of function ChangeRingFrame
0000AE5C                            
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            ; End-of-act signpost pattern loading subroutine
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            
0000AE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE5C                            
0000AE5C                            
0000AE5C                            SignpostArtLoad:			; XREF: Level
0000AE5C 4A78 FE08                  		tst.w	($FFFFFE08).w		; is debug mode	being used?
0000AE60 6600 0000                  		bne.w	Signpost_Exit		; if yes, branch
0000AE64 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w	; is act number 02 (act 3)?
0000AE6A 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000AE6C 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0000AE74 4EB9 0000 0000             		jsr	Save_Progress
0000AE7A 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0000AE82 3038 F700                  		move.w	($FFFFF700).w,d0
0000AE86 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000AE8A 0441 0100                  		subi.w	#$100,d1
0000AE8E B041                       		cmp.w	d1,d0				; has Sonic reached the	edge of	the level?
0000AE90 6D00                       		blt.s	Signpost_Exit		; if not, branch
0000AE92 4A38 FE1E                  		tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0000AE96 6700                       		beq.s	Signpost_Exit		; if yes, branch
0000AE98 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000AE9C 6700                       		beq.s	Signpost_Exit
0000AE9E 31C1 F728                  		move.w	d1,($FFFFF728).w	; move	left boundary to current screen	position
0000AEA2 7012                       		moveq	#$12,d0
0000AEA4 4EF8 3728                  		jmp	LoadPLC2	; load signpost	patterns
0000AEA8                            ; ===========================================================================
0000AEA8                            
0000AEA8                            Signpost_Exit:
0000AEA8 4E75                       		rts	
0000AEAA                            ; End of function SignpostArtLoad
0000AEAA                            
0000AEAA                            ; ===========================================================================
0000AEAA                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000AF2A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000B05A                            Demo_SYZ:	incbin	demodata\i_syz.bin
0000B0DA                            Demo_SS:	incbin	demodata\i_ss.bin
0000B1DA                            ; ===========================================================================
0000B1DA                            
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            ; Special Stage
0000B1DA                            ; ---------------------------------------------------------------------------
0000B1DA                            
0000B1DA                            SpecialStage:				; XREF: GameModeArray
0000B1DA 303C 00AF                  		move.w	#$AF,d0
0000B1DE 6100 E152                  		bsr.w	Jmpto_PlaySound_Special ; play special stage entry sound
0000B1E2                            
0000B1E2 4EB8 4678                  		jsr	Pal_MakeFlash
0000B1E6 46FC 2700                  		disable_ints
0000B1EA 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B1F0 3CBC 8B03                  		move.w	#$8B03,(a6)
0000B1F4 3CBC 8004                  		move.w	#$8004,(a6)
0000B1F8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000B1FE 3CBC 9011                  		move.w	#$9011,(a6)
0000B202 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B206 0200 00BF                  		andi.b	#$BF,d0
0000B20A 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B210 4EB8 3084                  		jsr	ClearScreen
0000B214 46FC 2300                  		enable_ints
0000B218 4BF9 00C0 0004             		lea	($C00004).l,a5
0000B21E 3ABC 8F01                  		move.w	#$8F01,(a5)
0000B222 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000B228 3ABC 9780                  		move.w	#$9780,(a5)
0000B22C 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000B232 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000B23A                            
0000B23A                            loc_463C:
0000B23A 3215                       		move.w	(a5),d1
0000B23C 0801 0001                  		btst	#1,d1
0000B240 66F8                       		bne.s	loc_463C
0000B242 3ABC 8F02                  		move.w	#$8F02,(a5)
0000B246 4EB9 0000 0000             		jsr	SS_BGLoad
0000B24C 7014                       		moveq	#$14,d0
0000B24E 4EB8 386C                  		jsr	RunPLC_ROM	; load special stage patterns
0000B252 43F8 D000                  		lea	($FFFFD000).w,a1
0000B256 7000                       		moveq	#0,d0
0000B258 323C 07FF                  		move.w	#$7FF,d1
0000B25C                            
0000B25C                            SS_ClrObjRam:
0000B25C 22C0                       		move.l	d0,(a1)+
0000B25E 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000B262                            
0000B262 43F8 F700                  		lea	($FFFFF700).w,a1
0000B266 7000                       		moveq	#0,d0
0000B268 323C 003F                  		move.w	#$3F,d1
0000B26C                            
0000B26C                            SS_ClrRam:
0000B26C 22C0                       		move.l	d0,(a1)+
0000B26E 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000B272                            
0000B272 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000B276 7000                       		moveq	#0,d0
0000B278 323C 0027                  		move.w	#$27,d1
0000B27C                            
0000B27C                            SS_ClrRam2:
0000B27C 22C0                       		move.l	d0,(a1)+
0000B27E 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000B282                            
0000B282 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000B286 7000                       		moveq	#0,d0
0000B288 323C 007F                  		move.w	#$7F,d1
0000B28C                            
0000B28C                            SS_ClrNemRam:
0000B28C 22C0                       		move.l	d0,(a1)+
0000B28E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000B292                            
0000B292 4238 F64E                  		clr.b	($FFFFF64E).w
0000B296 4278 FE02                  		clr.w	($FFFFFE02).w
0000B29A 700A                       		moveq	#$A,d0
0000B29C 4EB8 47FA                  		jsr	PalLoad1	; load special stage pallet
0000B2A0 4EB9 0000 0000             		jsr	SS_Load
0000B2A6 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000B2AE 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000B2B6 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000B2BC 11FC 00FF F784             		move.b	#$FF,(v_ssangleprev).w	; fill previous angle with obviously false value to force an update
0000B2C2 6100 0000                  		bsr.w	PalCycle_SS
0000B2C6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000B2CA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000B2D0 303C 0015                  		move.w	#$15,d0
0000B2D4 4EB8 3212                  		jsr	PlaySound	; play special stage BG	music
0000B2D8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000B2DE 43F9 0000 AC48             		lea	(Demo_Index).l,a1
0000B2E4 7006                       		moveq	#6,d0
0000B2E6 E548                       		lsl.w	#2,d0
0000B2E8 2271 0000                  		movea.l	(a1,d0.w),a1
0000B2EC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000B2F2 5338 F792                  		subq.b	#1,($FFFFF792).w
0000B2F6 4278 FE20                  		clr.w	($FFFFFE20).w
0000B2FA 4238 FE1B                  		clr.b	($FFFFFE1B).w
0000B2FE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000B304 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000B30A 4A38 FFD2                  		tst.b	($FFFFFFD2).w	; has debug cheat been entered?
0000B30E 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B310 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000B316 6700                       		beq.s	SS_NoDebug	; if not, branch
0000B318 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000B31E                            
0000B31E                            SS_NoDebug:
0000B31E 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B322 0000 0040                  		ori.b	#$40,d0
0000B326 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B32C 4EB8 45AC                  		jsr	Pal_MakeWhite
0000B330                            
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            ; Main Special Stage loop
0000B330                            ; ---------------------------------------------------------------------------
0000B330                            
0000B330                            SS_MainLoop:
0000B330 4EB8 3310                  		jsr	PauseGame
0000B334 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000B33A 6100 DA36                  		bsr.w	DelayProgram
0000B33E 6100 F850                  		bsr.w	MoveSonicInDemo
0000B342 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B348 4EB9 0000 0000             		jsr	ObjectsLoad
0000B34E 4EB9 0000 0000             		jsr	BuildSprites
0000B354 11FC 0021 D380             		move.b	#$21,($FFFFD380).w
0000B35A 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B360 6100 0000                  		bsr.w	SS_BGAnimate
0000B364 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B368 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000B36A 4A78 FC20                  		tst.w	($FFFFFC20).w	; is there time	left on	the demo?
0000B36E 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000B372                            
0000B372                            SS_ChkEnd:
0000B372 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000B378 6700 FFB6                  		beq.w	SS_MainLoop	; if yes, branch
0000B37C                            
0000B37C                            ;		tst.w	($FFFFFFF0).w	; is demo mode on?
0000B37C                            ;		bne.w	SS_ToSegaScreen	; if yes, branch
0000B37C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000B382 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000B388 6500                       		bcs.s	SS_End		; if not, branch
0000B38A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000B38E                            
0000B38E                            SS_End:
0000B38E 31FC 003C FC20             		move.w	#60,($FFFFFC20).w ; set	delay time to 1	second
0000B394 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000B39A 4278 F794                  		clr.w	($FFFFF794).w
0000B39E                            
0000B39E                            SS_EndLoop:
0000B39E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000B3A4 6100 D9CC                  		bsr.w	DelayProgram
0000B3A8 6100 F7E6                  		bsr.w	MoveSonicInDemo
0000B3AC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000B3B2 4EB9 0000 0000             		jsr	ObjectsLoad
0000B3B8 4EB9 0000 0000             		jsr	BuildSprites
0000B3BE 4EB9 0000 0000             		jsr	SS_ShowLayout
0000B3C4 6100 0000                  		bsr.w	SS_BGAnimate
0000B3C8 5378 F794                  		subq.w	#1,($FFFFF794).w
0000B3CC 6A00                       		bpl.s	loc_47D4
0000B3CE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000B3D4 4EB8 469A                  		jsr	Pal_ToWhite
0000B3D8                            
0000B3D8                            loc_47D4:
0000B3D8 4A78 FC20                  		tst.w	($FFFFFC20).w
0000B3DC 66C0                       		bne.s	SS_EndLoop
0000B3DE                            
0000B3DE 46FC 2700                  		move	#$2700,sr
0000B3E2 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B3E8 3CBC 8230                  		move.w	#$8230,(a6)
0000B3EC 3CBC 8407                  		move.w	#$8407,(a6)
0000B3F0 3CBC 9001                  		move.w	#$9001,(a6)
0000B3F4 4EB8 3084                  		jsr	ClearScreen
0000B3F8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000B402 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000B408 4EB8 3596                  		jsr	NemDec
0000B40C 4EB9 0000 0000             		jsr	Hud_Base
0000B412 46FC 2300                  		move	#$2300,sr
0000B416 7011                       		moveq	#$11,d0
0000B418 4EB8 4812                  		jsr	PalLoad2	; load results screen pallet
0000B41C 7000                       		moveq	#0,d0
0000B41E 4EB8 3728                  		jsr	LoadPLC2
0000B422                            ;		jsr	LoadLivesCounterArt
0000B422 701B                       		moveq	#$1B,d0
0000B424 4EB8 36F6                  		jsr	LoadPLC		; load results screen patterns
0000B428 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000B42E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000B434 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000B438 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000B43C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000B440 303C 0029                  		move.w	#$29,d0
0000B444 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000B44A 43F8 D000                  		lea	($FFFFD000).w,a1
0000B44E 7000                       		moveq	#0,d0
0000B450 323C 07FF                  		move.w	#$7FF,d1
0000B454                            
0000B454                            SS_EndClrObjRam:
0000B454 22C0                       		move.l	d0,(a1)+
0000B456 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000B45A                            
0000B45A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000B460                            
0000B460                            SS_NormalExit:
0000B460 4EB8 3310                  		jsr	PauseGame
0000B464 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000B46A 6100 D906                  		bsr.w	DelayProgram
0000B46E 4EB9 0000 0000             		jsr	ObjectsLoad
0000B474 4EB9 0000 0000             		jsr	BuildSprites
0000B47A 4EB8 3762                  		jsr	RunPLC_RAM
0000B47E 4A78 FE02                  		tst.w	($FFFFFE02).w
0000B482 67DC                       		beq.s	SS_NormalExit
0000B484 4AB8 F680                  		tst.l	($FFFFF680).w
0000B488 66D6                       		bne.s	SS_NormalExit
0000B48A 303C 00AF                  		move.w	#$AF,d0
0000B48E 4EB8 325C                  		jsr	PlaySound_Special ; play special stage exit sound
0000B492 4EB8 4678                  		jsr	Pal_MakeFlash
0000B496 4E75                       		rts	
0000B498                            ; ===========================================================================
0000B498                            
0000B498                            SS_ToSegaScreen:
0000B498 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000B49E 4E75                       		rts
0000B4A0                            
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0                            ; Special stage	background loading subroutine
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0                            
0000B4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4A0                            
0000B4A0                            
0000B4A0                            SS_BGLoad:				; XREF: SpecialStage
0000B4A0 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B4A6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000B4AC 303C 4051                  		move.w	#$4051,d0
0000B4B0 4EB8 389E                  		jsr	EniDec
0000B4B4 263C 5000 0001             		move.l	#$50000001,d3
0000B4BA 45F9 00FF 0080             		lea	($FF0080).l,a2
0000B4C0 7E06                       		moveq	#6,d7
0000B4C2                            
0000B4C2                            loc_48BE:
0000B4C2 2003                       		move.l	d3,d0
0000B4C4 7C03                       		moveq	#3,d6
0000B4C6 7800                       		moveq	#0,d4
0000B4C8 0C47 0003                  		cmpi.w	#3,d7
0000B4CC 6400                       		bcc.s	loc_48CC
0000B4CE 7801                       		moveq	#1,d4
0000B4D0                            
0000B4D0                            loc_48CC:
0000B4D0 7A07                       		moveq	#7,d5
0000B4D2                            
0000B4D2                            loc_48CE:
0000B4D2 224A                       		movea.l	a2,a1
0000B4D4 0A04 0001                  		eori.b	#1,d4
0000B4D8 6600                       		bne.s	loc_48E2
0000B4DA 0C47 0006                  		cmpi.w	#6,d7
0000B4DE 6600                       		bne.s	loc_48F2
0000B4E0 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B4E6                            
0000B4E6                            loc_48E2:
0000B4E6 48E7 F800                  		movem.l	d0-d4,-(sp)
0000B4EA 7207                       		moveq	#7,d1
0000B4EC 7407                       		moveq	#7,d2
0000B4EE 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B4F2 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000B4F6                            
0000B4F6                            loc_48F2:
0000B4F6 0680 0010 0000             		addi.l	#$100000,d0
0000B4FC 51CD FFD4                  		dbf	d5,loc_48CE
0000B500 0680 0380 0000             		addi.l	#$3800000,d0
0000B506 0A04 0001                  		eori.b	#1,d4
0000B50A 51CE FFC4                  		dbf	d6,loc_48CC
0000B50E 0683 1000 0000             		addi.l	#$10000000,d3
0000B514 6A00                       		bpl.s	loc_491C
0000B516 4843                       		swap	d3
0000B518 0683 0000 C000             		addi.l	#$C000,d3
0000B51E 4843                       		swap	d3
0000B520                            
0000B520                            loc_491C:
0000B520 D4FC 0080                  		adda.w	#$80,a2
0000B524 51CF FF9C                  		dbf	d7,loc_48BE
0000B528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B52E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000B534 303C 4000                  		move.w	#$4000,d0
0000B538 4EB8 389E                  		jsr	EniDec
0000B53C 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B542 203C 4000 0003             		move.l	#$40000003,d0
0000B548 723F                       		moveq	#$3F,d1
0000B54A 741F                       		moveq	#$1F,d2
0000B54C 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B550 43F9 00FF 0000             		lea	($FF0000).l,a1
0000B556 203C 5000 0003             		move.l	#$50000003,d0
0000B55C 723F                       		moveq	#$3F,d1
0000B55E 743F                       		moveq	#$3F,d2
0000B560 4EB8 34A0                  		jsr	ShowVDPGraphics
0000B564 4E75                       		rts	
0000B566                            ; End of function SS_BGLoad
0000B566                            
0000B566                            ; ---------------------------------------------------------------------------
0000B566                            ; Pallet cycling routine - special stage
0000B566                            ; ---------------------------------------------------------------------------
0000B566                            
0000B566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B566                            
0000B566                            
0000B566                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000B566 4A78 F63A                  		tst.w	($FFFFF63A).w
0000B56A 6600                       		bne.s	locret_49E6
0000B56C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000B570 6A00                       		bpl.s	locret_49E6
0000B572 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B578 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000B57C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000B580 0240 001F                  		andi.w	#$1F,d0
0000B584 E548                       		lsl.w	#2,d0
0000B586 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000B58C D0C0                       		adda.w	d0,a0
0000B58E 1018                       		move.b	(a0)+,d0
0000B590 6A00                       		bpl.s	loc_4992
0000B592 303C 01FF                  		move.w	#$1FF,d0
0000B596                            
0000B596                            loc_4992:
0000B596 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000B59A 7000                       		moveq	#0,d0
0000B59C 1018                       		move.b	(a0)+,d0
0000B59E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000B5A2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000B5A8 43F1 0000                  		lea	(a1,d0.w),a1
0000B5AC 303C 8200                  		move.w	#-$7E00,d0
0000B5B0 1019                       		move.b	(a1)+,d0
0000B5B2 3C80                       		move.w	d0,(a6)
0000B5B4 11D1 F616                  		move.b	(a1),($FFFFF616).w
0000B5B8 303C 8400                  		move.w	#-$7C00,d0
0000B5BC 1018                       		move.b	(a0)+,d0
0000B5BE 3C80                       		move.w	d0,(a6)
0000B5C0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000B5CA 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000B5D2 7000                       		moveq	#0,d0
0000B5D4 1018                       		move.b	(a0)+,d0
0000B5D6 6B00                       		bmi.s	loc_49E8
0000B5D8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000B5DE D2C0                       		adda.w	d0,a1
0000B5E0 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000B5E4 24D9                       		move.l	(a1)+,(a2)+
0000B5E6 24D9                       		move.l	(a1)+,(a2)+
0000B5E8 24D9                       		move.l	(a1)+,(a2)+
0000B5EA                            
0000B5EA                            locret_49E6:
0000B5EA 4E75                       		rts	
0000B5EC                            ; ===========================================================================
0000B5EC                            
0000B5EC                            loc_49E8:				; XREF: PalCycle_SS
0000B5EC 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000B5F0 0C40 008A                  		cmpi.w	#$8A,d0
0000B5F4 6500                       		bcs.s	loc_49F4
0000B5F6 5241                       		addq.w	#1,d1
0000B5F8                            
0000B5F8                            loc_49F4:
0000B5F8 C2FC 002A                  		mulu.w	#$2A,d1
0000B5FC 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000B602 D2C1                       		adda.w	d1,a1
0000B604 0240 007F                  		andi.w	#$7F,d0
0000B608 0880 0000                  		bclr	#0,d0
0000B60C 6700                       		beq.s	loc_4A18
0000B60E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000B612 24D1                       		move.l	(a1),(a2)+
0000B614 24E9 0004                  		move.l	4(a1),(a2)+
0000B618 24E9 0008                  		move.l	8(a1),(a2)+
0000B61C                            
0000B61C                            loc_4A18:
0000B61C D2FC 000C                  		adda.w	#$C,a1
0000B620 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000B624 0C40 000A                  		cmpi.w	#$A,d0
0000B628 6500                       		bcs.s	loc_4A2E
0000B62A 0440 000A                  		subi.w	#$A,d0
0000B62E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000B632                            
0000B632                            loc_4A2E:
0000B632 3200                       		move.w	d0,d1
0000B634 D040                       		add.w	d0,d0
0000B636 D041                       		add.w	d1,d0
0000B638 D2C0                       		adda.w	d0,a1
0000B63A 24D9                       		move.l	(a1)+,(a2)+
0000B63C 34D9                       		move.w	(a1)+,(a2)+
0000B63E 4E75                       		rts	
0000B640                            ; End of function PalCycle_SS
0000B640                            
0000B640                            ; ===========================================================================
0000B640 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000B650                            					; XREF: PalCycle_SS
0000B650 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000B660 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000B670 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
0000B680 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
0000B690 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
0000B6A0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000B6B0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000B6C0                            		even
0000B6C0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000B6CE                            					; XREF: PalCycle_SS
0000B6CE                            		even
0000B6CE                            
0000B6CE                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000B716                            		even
0000B716                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000B7E8                            		even
0000B7E8                            
0000B7E8                            ; ---------------------------------------------------------------------------
0000B7E8                            ; Subroutine to	make the special stage background animated
0000B7E8                            ; ---------------------------------------------------------------------------
0000B7E8                            
0000B7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7E8                            
0000B7E8                            
0000B7E8                            SS_BGAnimate:				; XREF: SpecialStage
0000B7E8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000B7EC 6600                       		bne.s	loc_4BF6
0000B7EE 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000B7F4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B7FA                            
0000B7FA                            loc_4BF6:
0000B7FA 0C40 0008                  		cmpi.w	#8,d0
0000B7FE 6400                       		bcc.s	loc_4C4E
0000B800 0C40 0006                  		cmpi.w	#6,d0
0000B804 6600                       		bne.s	loc_4C10
0000B806 5278 F718                  		addq.w	#1,($FFFFF718).w
0000B80A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000B80E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000B814                            
0000B814                            loc_4C10:
0000B814 7000                       		moveq	#0,d0
0000B816 3038 F708                  		move.w	($FFFFF708).w,d0
0000B81A 4440                       		neg.w	d0
0000B81C 4840                       		swap	d0
0000B81E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000B824 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B828 7609                       		moveq	#9,d3
0000B82A                            
0000B82A                            loc_4C26:
0000B82A 302B 0002                  		move.w	2(a3),d0
0000B82E 4EBA D574                  		jsr	CalcSine
0000B832 7400                       		moveq	#0,d2
0000B834 1419                       		move.b	(a1)+,d2
0000B836 C1C2                       		muls.w	d2,d0
0000B838 E080                       		asr.l	#8,d0
0000B83A 36C0                       		move.w	d0,(a3)+
0000B83C 1419                       		move.b	(a1)+,d2
0000B83E 4882                       		ext.w	d2
0000B840 D55B                       		add.w	d2,(a3)+
0000B842 51CB FFE6                  		dbf	d3,loc_4C26
0000B846 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000B84A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000B850 6000                       		bra.s	loc_4C7E
0000B852                            ; ===========================================================================
0000B852                            
0000B852                            loc_4C4E:				; XREF: SS_BGAnimate
0000B852 0C40 000C                  		cmpi.w	#$C,d0
0000B856 6600                       		bne.s	loc_4C74
0000B858 5378 F718                  		subq.w	#1,($FFFFF718).w
0000B85C 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000B860 243C 0001 8000             		move.l	#$18000,d2
0000B866 7206                       		moveq	#6,d1
0000B868                            
0000B868                            loc_4C64:
0000B868 2013                       		move.l	(a3),d0
0000B86A 9082                       		sub.l	d2,d0
0000B86C 26C0                       		move.l	d0,(a3)+
0000B86E 0482 0000 2000             		subi.l	#$2000,d2
0000B874 51C9 FFF2                  		dbf	d1,loc_4C64
0000B878                            
0000B878                            loc_4C74:
0000B878 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000B87C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000B882                            
0000B882                            loc_4C7E:
0000B882 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000B886 3038 F718                  		move.w	($FFFFF718).w,d0
0000B88A 4440                       		neg.w	d0
0000B88C 4840                       		swap	d0
0000B88E 7600                       		moveq	#0,d3
0000B890 161A                       		move.b	(a2)+,d3
0000B892 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000B896 4442                       		neg.w	d2
0000B898 0242 00FF                  		andi.w	#$FF,d2
0000B89C E54A                       		lsl.w	#2,d2
0000B89E                            
0000B89E                            loc_4C9A:
0000B89E 301B                       		move.w	(a3)+,d0
0000B8A0 544B                       		addq.w	#2,a3
0000B8A2 7200                       		moveq	#0,d1
0000B8A4 121A                       		move.b	(a2)+,d1
0000B8A6 5341                       		subq.w	#1,d1
0000B8A8                            
0000B8A8                            loc_4CA4:
0000B8A8 2380 2000                  		move.l	d0,(a1,d2.w)
0000B8AC 5842                       		addq.w	#4,d2
0000B8AE 0242 03FC                  		andi.w	#$3FC,d2
0000B8B2 51C9 FFF4                  		dbf	d1,loc_4CA4
0000B8B6 51CB FFE6                  		dbf	d3,loc_4C9A
0000B8BA 4E75                       		rts	
0000B8BC                            ; End of function SS_BGAnimate
0000B8BC                            
0000B8BC                            ; ===========================================================================
0000B8BC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000B8C8                            		even
0000B8C8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000B8D0                            		even
0000B8D0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000B8E4                            		even
0000B8E4                            					; XREF: SS_BGAnimate
0000B8E4                            ; ===========================================================================
0000B8E4                            
0000B8E4                            ; ---------------------------------------------------------------------------
0000B8E4                            ; Continue screen
0000B8E4                            ; ---------------------------------------------------------------------------
0000B8E4                            
0000B8E4                            ContinueScreen:				; XREF: GameModeArray
0000B8E4 4EB8 4528                  		jsr	pal_fadefrom
0000B8E8 46FC 2700                  		disable_ints
0000B8EC 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B8F0 0200 00BF                  		andi.b	#$BF,d0
0000B8F4 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B8FA 4DF9 00C0 0004             		lea	($C00004).l,a6
0000B900 3CBC 8004                  		move.w	#$8004,(a6)
0000B904 3CBC 8700                  		move.w	#$8700,(a6)
0000B908 4EB8 3084                  		jsr	ClearScreen
0000B90C 43F8 D000                  		lea	($FFFFD000).w,a1
0000B910 7000                       		moveq	#0,d0
0000B912 323C 07FF                  		move.w	#$7FF,d1
0000B916                            
0000B916                            Cont_ClrObjRam:
0000B916 22C0                       		move.l	d0,(a1)+
0000B918 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000B91C                            
0000B91C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000B926 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000B92C 4EB8 3596                  		jsr	NemDec
0000B930 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000B93A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000B940 4EB8 3596                  		jsr	NemDec
0000B944 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000B94E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000B954 4EB8 3596                  		jsr	NemDec
0000B958 720A                       		moveq	#10,d1
0000B95A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000B960 7012                       		moveq	#$12,d0
0000B962 4EB8 47FA                  		jsr	PalLoad1	; load continue	screen pallet
0000B966 103C 0090                  		move.b	#$90,d0
0000B96A 6100 E0B2                  		bsr.w	Jmpto_PlaySound2	; play continue	music
0000B96E 31FC 0293 FC20             		move.w	#659,($FFFFFC20).w ; set time delay to 11 seconds
0000B974 42B8 F700                  		clr.l	($FFFFF700).w
0000B978 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000B980 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000B986 11FC 0002 D040             		move.b	#2,(Sidekick).w ; load Obj02 Tails object at $FFFFB040
0000B98C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000B992 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000B998 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000B99E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000B9A4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000B9AA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000B9B0 4EB9 0000 0000             		jsr	ObjectsLoad
0000B9B6 4EB9 0000 0000             		jsr	BuildSprites
0000B9BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000B9C0 0000 0040                  		ori.b	#$40,d0
0000B9C4 33C0 00C0 0004             		move.w	d0,($C00004).l
0000B9CA 4EB8 446E                  		jsr	Pal_FadeTo
0000B9CE                            
0000B9CE                            ; ---------------------------------------------------------------------------
0000B9CE                            ; Continue screen main loop
0000B9CE                            ; ---------------------------------------------------------------------------
0000B9CE                            
0000B9CE                            Cont_MainLoop:
0000B9CE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000B9D4 6100 D39C                  		bsr.w	Wait_VSync
0000B9D8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B9DE 6400                       		bcc.s	loc_4DF2
0000B9E0 46FC 2700                  		disable_ints
0000B9E4 3238 FC20                  		move.w	($FFFFFC20).w,d1
0000B9E8 82FC 003C                  		divu.w	#$3C,d1
0000B9EC 0281 0000 000F             		andi.l	#$F,d1
0000B9F2 4EB9 0000 0000             		jsr	ContScrCounter
0000B9F8 46FC 2300                  		enable_ints
0000B9FC                            
0000B9FC                            loc_4DF2:
0000B9FC 4EB9 0000 0000             		jsr	ObjectsLoad
0000BA02 4EB9 0000 0000             		jsr	BuildSprites
0000BA08 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000BA0E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000BA10 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000BA16 64B6                       		bcc.s	Cont_MainLoop
0000BA18 4A78 FC20                  		tst.w	($FFFFFC20).w
0000BA1C 6600 FFB0                  		bne.w	Cont_MainLoop
0000BA20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000BA26 4E75                       		rts	
0000BA28                            ; ===========================================================================
0000BA28                            
0000BA28                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000BA28 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000BA2E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000BA34 7000                       		moveq	#0,d0
0000BA36 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000BA3A 21C0 FE22                  		move.l	d0,(Timer).w ; clear time
0000BA3E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000BA42 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000BA46 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000BA4A 4E75                       		rts	
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ; Object 80 - Continue screen elements
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            
0000BA4C                            ;Obj80:					; XREF: Obj_Index
0000BA4C                            ;		moveq	#0,d0
0000BA4C                            ;		move.b	routine(a0),d0
0000BA4C                            ;		move.w	Obj80_Index(pc,d0.w),d1
0000BA4C                            ;		jmp	Obj80_Index(pc,d1.w)
0000BA4C                            ; ===========================================================================
0000BA4C                            ;Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000BA4C                            ;		dc.w Obj80_Display-Obj80_Index
0000BA4C                            ;		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000BA4C                            ;		dc.w Obj80_ChkType-Obj80_Index
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj80_Main:				; XREF: Obj80_Index
0000BA4C                            ;		addq.b	#2,routine(a0)
0000BA4C                            ;		move.l	#Map_obj80,4(a0)
0000BA4C                            ;		move.w	#$8500,2(a0)
0000BA4C                            ;		move.b	#0,1(a0)
0000BA4C                            ;		move.b	#$3C,width_pixels(a0)
0000BA4C                            ;		move.w	#$120,8(a0)
0000BA4C                            ;		move.w	#$C0,$A(a0)
0000BA4C                            ;		move.w	#0,($FFFFFE20).w ; clear rings
0000BA4C                            
0000BA4C                            ;Obj80_Display:				; XREF: Obj80_Index
0000BA4C                            ;		jmp	DisplaySprite
0000BA4C                            ; ===========================================================================
0000BA4C                            ;Obj80_MiniSonicPos:
0000BA4C                            ;		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000BA4C                            ;		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000BA4C                            ;		movea.l	a0,a1
0000BA4C                            ;		lea	(Obj80_MiniSonicPos).l,a2
0000BA4C                            ;		moveq	#0,d1
0000BA4C                            ;		move.b	($FFFFFE18).w,d1
0000BA4C                            ;		subq.b	#2,d1
0000BA4C                            ;		bcc.s	loc_4EC4
0000BA4C                            ;		jmp	DeleteObject
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000BA4C                            ;		moveq	#1,d3
0000BA4C                            ;		cmpi.b	#$E,d1
0000BA4C                            ;		bcs.s	loc_4ED0
0000BA4C                            ;		moveq	#0,d3
0000BA4C                            ;		moveq	#$E,d1
0000BA4C                            
0000BA4C                            ;loc_4ED0:
0000BA4C                            ;		move.b	d1,d2
0000BA4C                            ;		andi.b	#1,d2
0000BA4C                            
0000BA4C                            ;Obj80_MiniSonLoop:
0000BA4C                            ;		move.b	#$80,0(a1)	; load mini Sonic object
0000BA4C                            ;		move.w	(a2)+,8(a1)
0000BA4C                            ;		tst.b	d2
0000BA4C                            ;		beq.s	loc_4EEA
0000BA4C                            ;		subi.w	#$A,8(a1)
0000BA4C                            
0000BA4C                            ;loc_4EEA:
0000BA4C                            ;		move.w	#$D0,$A(a1)
0000BA4C                            ;		move.b	#6,mapping_frame(a1)
0000BA4C                            ;		move.b	#6,routine(a1)
0000BA4C                            ;		move.l	#Map_obj80,4(a1)
0000BA4C                            ;		move.w	#$8551,2(a1)
0000BA4C                            ;		move.b	#0,1(a1)
0000BA4C                            ;		lea	object_size(a1),a1
0000BA4C                            ;		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000BA4C                            ;		lea	-$40(a1),a1
0000BA4C                            ;		move.b	d3,subtype(a1)
0000BA4C                            
0000BA4C                            ;Obj80_ChkType:				; XREF: Obj80_Index
0000BA4C                            ;		tst.b	subtype(a0)
0000BA4C                            ;		beq.s	loc_4F40
0000BA4C                            ;		cmpi.b	#6,($FFFFD024).w
0000BA4C                            ;		bcs.s	loc_4F40
0000BA4C                            ;		move.b	($FFFFFE0F).w,d0
0000BA4C                            ;		andi.b	#1,d0
0000BA4C                            ;		bne.s	loc_4F40
0000BA4C                            ;		tst.w	($FFFFD010).w
0000BA4C                            ;		bne.s	Obj80_Delete
0000BA4C                            ;		rts	
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;loc_4F40:				; XREF: Obj80_ChkType
0000BA4C                            ;		move.b	($FFFFFE0F).w,d0
0000BA4C                            ;		andi.b	#$F,d0
0000BA4C                            ;		bne.s	Obj80_Display2
0000BA4C                            ;		bchg	#0,mapping_frame(a0)
0000BA4C                            ;
0000BA4C                            ;Obj80_Display2:
0000BA4C                            ;		jmp	DisplaySprite
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj80_Delete:				; XREF: Obj80_ChkType
0000BA4C                            ;		jmp	DeleteObject
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ; Object 81 - Sonic on the continue screen
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            
0000BA4C                            ;Obj81:					; XREF: Obj_Index
0000BA4C                            ;		moveq	#0,d0
0000BA4C                            ;		move.b	routine(a0),d0
0000BA4C                            ;		move.w	Obj81_Index(pc,d0.w),d1
0000BA4C                            ;		jsr	Obj81_Index(pc,d1.w)
0000BA4C                            ;		jmp	DisplaySprite
0000BA4C                            ; ===========================================================================
0000BA4C                            ;Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000BA4C                            ;		dc.w Obj81_ChkLand-Obj81_Index
0000BA4C                            ;		dc.w Obj81_Animate-Obj81_Index
0000BA4C                            ;		dc.w Obj81_Run-Obj81_Index
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj81_Main:				; XREF: Obj81_Index
0000BA4C                            ;		addq.b	#2,routine(a0)
0000BA4C                            ;		move.w	#$A0,8(a0)
0000BA4C                            ;		move.w	#$C0,$C(a0)
0000BA4C                            ;		move.l	#Map_Sonic,4(a0)
0000BA4C                            ;		move.w	#$780,2(a0)
0000BA4C                            ;		move.b	#4,1(a0)
0000BA4C                            ;		move.w	#$100,priority(a0)
0000BA4C                            ;		move.b	#$1D,anim(a0)	; use "floating" animation
0000BA4C                            ;		move.w	#$400,y_vel(a0)	; make Sonic fall from above
0000BA4C                            
0000BA4C                            ;Obj81_ChkLand:				; XREF: Obj81_Index
0000BA4C                            ;		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000BA4C                            ;		bne.s	Obj81_ShowFall	; if not, branch
0000BA4C                            ;		addq.b	#2,routine(a0)
0000BA4C                            ;		clr.w	y_vel(a0)		; stop Sonic falling
0000BA4C                            ;		move.l	#Map_obj80,4(a0)
0000BA4C                            ;		move.w	#$8500,2(a0)
0000BA4C                            ;		move.b	#0,anim(a0)
0000BA4C                            ;		bra.s	Obj81_Animate
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000BA4C                            ;		jsr	SpeedToPos
0000BA4C                            ;		jsr	Sonic_Animate
0000BA4C                            ;		jmp	LoadSonicDynPLC
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj81_Animate:				; XREF: Obj81_Index
0000BA4C                            ;		tst.b	($FFFFF605).w	; is any button	pressed?
0000BA4C                            ;		bmi.s	Obj81_GetUp	; if yes, branch
0000BA4C                            ;		lea	(Ani_obj81).l,a1
0000BA4C                            ;		jmp	AnimateSprite
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj81_GetUp:				; XREF: Obj81_Animate
0000BA4C                            ;		addq.b	#2,routine(a0)
0000BA4C                            ;		move.l	#Map_Sonic,4(a0)
0000BA4C                            ;		move.w	#$780,2(a0)
0000BA4C                            ;		move.b	#$1E,anim(a0)	; use "getting up" animation
0000BA4C                            ;		clr.w	inertia(a0)
0000BA4C                            ;		subq.w	#8,$C(a0)
0000BA4C                            ;		move.b	#$E0,d0
0000BA4C                            ;		bsr.w	Jmpto_PlaySound_Special ; fade out music
0000BA4C                            
0000BA4C                            ;Obj81_Run:				; XREF: Obj81_Index
0000BA4C                            ;		cmpi.w	#$800,inertia(a0)	; check	Sonic's "run speed" (not moving)
0000BA4C                            ;		bne.s	Obj81_AddSpeed	; if too low, branch
0000BA4C                            ;		move.w	#$1000,x_vel(a0)	; move Sonic to	the right
0000BA4C                            ;		bra.s	Obj81_ShowRun
0000BA4C                            ; ===========================================================================
0000BA4C                            
0000BA4C                            ;Obj81_AddSpeed:				; XREF: Obj81_Run
0000BA4C                            ;		addi.w	#$20,inertia(a0)	; increase "run	speed"
0000BA4C                            
0000BA4C                            ;Obj81_ShowRun:				; XREF: Obj81_Run
0000BA4C                            ;		jsr	SpeedToPos
0000BA4C                            ;		jsr	Sonic_Animate
0000BA4C                            ;		jmp	LoadSonicDynPLC
0000BA4C                            ; ===========================================================================
0000BA4C                            ;Ani_obj81:
0000BA4C                            ;	include "_anim\obj81.asm"
0000BA4C                            
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ; Sprite mappings - Continue screen
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ;Map_obj80:
0000BA4C                            ;	include "_maps\obj80.asm"
0000BA4C                            
0000BA4C                            ; ===========================================================================
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            ; Ending sequence in Green Hill	Zone
0000BA4C                            ; ---------------------------------------------------------------------------
0000BA4C                            
0000BA4C                            EndingSequence:				; XREF: GameModeArray
0000BA4C 103C 00E4                  		move.b	#$E4,d0
0000BA50 6100 0000                  		bsr.w	Jmpto_PlayMus ; stop music
0000BA54 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000BA58 43F8 D000                  		lea	($FFFFD000).w,a1
0000BA5C 7000                       		moveq	#0,d0
0000BA5E 323C 07FF                  		move.w	#$7FF,d1
0000BA62                            
0000BA62                            End_ClrObjRam:
0000BA62 22C0                       		move.l	d0,(a1)+
0000BA64 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000BA68                            
0000BA68 43F8 F628                  		lea	($FFFFF628).w,a1
0000BA6C 7000                       		moveq	#0,d0
0000BA6E 323C 0015                  		move.w	#$15,d1
0000BA72                            
0000BA72                            End_ClrRam:
0000BA72 22C0                       		move.l	d0,(a1)+
0000BA74 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000BA78                            
0000BA78 43F8 F700                  		lea	($FFFFF700).w,a1
0000BA7C 7000                       		moveq	#0,d0
0000BA7E 323C 003F                  		move.w	#$3F,d1
0000BA82                            
0000BA82                            End_ClrRam2:
0000BA82 22C0                       		move.l	d0,(a1)+
0000BA84 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000BA88                            
0000BA88 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000BA8C 7000                       		moveq	#0,d0
0000BA8E 323C 0047                  		move.w	#$47,d1
0000BA92                            
0000BA92                            End_ClrRam3:
0000BA92 22C0                       		move.l	d0,(a1)+
0000BA94 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000BA98                            
0000BA98 46FC 2700                  		move	#$2700,sr
0000BA9C 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BAA0 0200 00BF                  		andi.b	#$BF,d0
0000BAA4 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BAAA 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000BAAE 4DF9 00C0 0004             		lea	($C00004).l,a6
0000BAB4 3CBC 8B03                  		move.w	#$8B03,(a6)
0000BAB8 3CBC 8230                  		move.w	#$8230,(a6)
0000BABC 3CBC 8407                  		move.w	#$8407,(a6)
0000BAC0 3CBC 857C                  		move.w	#$857C,(a6)
0000BAC4 3CBC 9001                  		move.w	#$9001,(a6)
0000BAC8 3CBC 8004                  		move.w	#$8004,(a6)
0000BACC 3CBC 8720                  		move.w	#$8720,(a6)
0000BAD0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000BAD6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000BADA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000BAE0 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000BAE6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BAEC 6700                       		beq.s	End_LoadData	; if yes, branch
0000BAEE 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000BAF4                            
0000BAF4                            End_LoadData:
0000BAF4 701C                       		moveq	#$1C,d0
0000BAF6 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load ending sequence patterns
0000BAFA 4EB9 0000 0000             		jsr	Hud_Base
0000BB00 6100 0000                  		bsr.w	LevelSizeLoad
0000BB04 6100 0000                  		bsr.w	DeformBgLayer
0000BB08 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000BB0E 6100 0000                  		bsr.w	MainLoadBlockLoad
0000BB12 6100 0000                  		bsr.w	LoadTilesFromStart
0000BB16                            ;		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000BB16 21FC 0000 0000 FFE2        		move.l	#Col_GHZ_1,($FFFFFFE2).w			; MJ: Set first collision for ending
0000BB1E 21FC 0000 0000 FFE6        		move.l	#Col_GHZ_2,($FFFFFFE6).w			; MJ: Set second collision for ending
0000BB26 46FC 2300                  		move	#$2300,sr
0000BB2A 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000BB30 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000BB34 6100 0000                  		bsr.w	Jmpto_KosDec
0000BB38 7003                       		moveq	#3,d0
0000BB3A 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load Sonic's pallet
0000BB3E 303C 008B                  		move.w	#$8B,d0
0000BB42 6100 0000                  		bsr.w	Jmpto_PlaySFX	; play ending sequence music
0000BB46 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000BB4C 6700                       		beq.s	End_LoadSonic	; if not, branch
0000BB4E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000BB54                            
0000BB54                            End_LoadSonic:
0000BB54 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000BB5A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000BB60 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000BB66 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000BB6C 31FC F800 D020             		move.w	#$F800,(MainCharacter+inertia).w ; set Sonic's speed
0000BB72 11FC 0021 D380             		move.b	#$21,($FFFFD380).w ; load HUD object
0000BB78 4EB9 0000 0000             		jsr	ObjPosLoad
0000BB7E 4EB9 0000 0000             		jsr	ObjectsLoad
0000BB84 4EB9 0000 0000             		jsr	BuildSprites
0000BB8A 7000                       		moveq	#0,d0
0000BB8C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000BB90 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000BB94 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000BB98 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000BB9C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000BBA0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000BBA4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000BBA8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000BBAC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000BBB0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000BBB4 6100 F152                  		bsr.w	OscillateNumInit
0000BBB8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000BBBE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000BBC4 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000BBCA 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w
0000BBD0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BBD6 6100 D19A                  		bsr.w	DelayProgram
0000BBDA 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000BBDE 0000 0040                  		ori.b	#$40,d0
0000BBE2 33C0 00C0 0004             		move.w	d0,($C00004).l
0000BBE8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BBEE 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000BBF2                            
0000BBF2                            ; ---------------------------------------------------------------------------
0000BBF2                            ; Main ending sequence loop
0000BBF2                            ; ---------------------------------------------------------------------------
0000BBF2                            
0000BBF2                            End_MainLoop:
0000BBF2 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BBF6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BBFC 6100 D174                  		bsr.w	DelayProgram
0000BC00 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BC04 6100 0000                  		bsr.w	End_MoveSonic
0000BC08 4EB9 0000 0000             		jsr	ObjectsLoad
0000BC0E 6100 0000                  		bsr.w	DeformBgLayer
0000BC12 4EB9 0000 0000             		jsr	BuildSprites
0000BC18 4EB9 0000 0000             		jsr	ObjPosLoad
0000BC1E 6100 0000                  		bsr.w	Jmpto_PalCycle_Load
0000BC22 6100 F13A                  		bsr.w	OscillateNumDo
0000BC26 6100 F1C6                  		bsr.w	ChangeRingFrame
0000BC2A 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000BC30 6700                       		beq.s	loc_52DA	; if yes, branch
0000BC32 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000BC38 103C 0091                  		move.b	#$91,d0
0000BC3C 6100 0000                  		bsr.w	Jmpto_PlayMus ; play credits music
0000BC40 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000BC46 4E75                       		rts	
0000BC48                            ; ===========================================================================
0000BC48                            
0000BC48                            loc_52DA:
0000BC48 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000BC4C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000BC50                            
0000BC50 4278 FE02                  		clr.w	($FFFFFE02).w
0000BC54 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000BC5A 4278 F794                  		clr.w	($FFFFF794).w
0000BC5E                            
0000BC5E                            End_AllEmlds:				; XREF: loc_5334
0000BC5E 6100 0000                  		bsr.w	Jmpto_PauseGame
0000BC62 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000BC68 6100 D108                  		bsr.w	DelayProgram
0000BC6C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000BC70 6100 0000                  		bsr.w	End_MoveSonic
0000BC74 4EB9 0000 0000             		jsr	ObjectsLoad
0000BC7A 6100 0000                  		bsr.w	DeformBgLayer
0000BC7E 4EB9 0000 0000             		jsr	BuildSprites
0000BC84 4EB9 0000 0000             		jsr	ObjPosLoad
0000BC8A 6100 F0D2                  		bsr.w	OscillateNumDo
0000BC8E 6100 F15E                  		bsr.w	ChangeRingFrame
0000BC92 5378 F794                  		subq.w	#1,($FFFFF794).w
0000BC96 6A00                       		bpl.s	loc_5334
0000BC98 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000BC9E 6100 0000                  		bsr.w	Jmpto_Pal_ToWhite
0000BCA2                            
0000BCA2                            loc_5334:
0000BCA2 4A78 FE02                  		tst.w	($FFFFFE02).w
0000BCA6 6700 FFB6                  		beq.w	End_AllEmlds
0000BCAA 4278 FE02                  		clr.w	($FFFFFE02).w
0000BCAE 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000BCB4 4BF9 00C0 0004             		lea	($C00004).l,a5
0000BCBA 4DF9 00C0 0000             		lea	($C00000).l,a6
0000BCC0 47F8 F700                  		lea	($FFFFF700).w,a3
0000BCC4 2878 A400                  		movea.l	($FFFFA400).w,a4
0000BCC8 343C 4000                  		move.w	#$4000,d2
0000BCCC 6100 0000                  		bsr.w	LoadTilesFromStart2
0000BCD0 7013                       		moveq	#$13,d0
0000BCD2 6100 0000                  		bsr.w	Jmpto_PalLoad1	; load ending pallet
0000BCD6 6100 0000                  		bsr.w	Jmpto_Pal_MakeWhite
0000BCDA 6000 FF16                  		bra.w	End_MainLoop
0000BCDE                            
0000BCDE                            ; ---------------------------------------------------------------------------
0000BCDE                            ; Subroutine controlling Sonic on the ending sequence
0000BCDE                            ; ---------------------------------------------------------------------------
0000BCDE                            
0000BCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BCDE                            
0000BCDE                            
0000BCDE                            End_MoveSonic:				; XREF: End_MainLoop
0000BCDE 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000BCE2 6600                       		bne.s	End_MoveSonic2
0000BCE4 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000BCEA 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000BCEC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BCF0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000BCF6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000BCFC 4E75                       		rts	
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            End_MoveSonic2:				; XREF: End_MoveSonic
0000BCFE 5500                       		subq.b	#2,d0
0000BD00 6600                       		bne.s	End_MoveSonic3
0000BD02 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000BD08 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000BD0A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BD0E 7000                       		moveq	#0,d0
0000BD10 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000BD14 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000BD18 31C0 D020                  		move.w	d0,(MainCharacter+inertia).w
0000BD1C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000BD22 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000BD28 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000BD2E 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000BD34 4E75                       		rts	
0000BD36                            ; ===========================================================================
0000BD36                            
0000BD36                            End_MoveSonic3:				; XREF: End_MoveSonic
0000BD36 5500                       		subq.b	#2,d0
0000BD38 6600                       		bne.s	End_MoveSonExit
0000BD3A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000BD3E 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000BD44 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000BD4A 4278 D024                  		clr.w	($FFFFD024).w
0000BD4E                            
0000BD4E                            End_MoveSonExit:
0000BD4E 4E75                       		rts	
0000BD50                            ; End of function End_MoveSonic
0000BD50                            
0000BD50                            ; ===========================================================================
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50                            ; Object 87 - Sonic on ending sequence
0000BD50                            ; ---------------------------------------------------------------------------
0000BD50                            
0000BD50                            Obj87:					; XREF: Obj_Index
0000BD50 7000                       		moveq	#0,d0
0000BD52 1028 0025                  		move.b	$25(a0),d0
0000BD56 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000BD5A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000BD5E 4EF9 0000 0000             		jmp	DisplaySprite
0000BD64                            ; ===========================================================================
0000BD64 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000BD68 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000BD6C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD70 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD74 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000BD78                            ; ===========================================================================
0000BD78                            
0000BD78                            Obj87_Main:				; XREF: Obj87_Index
0000BD78 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000BD7E 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000BD80 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000BD86 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000BD8C 4E75                       		rts	
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Obj87_Main2:				; XREF: Obj87_Main
0000BD8E 5428 0025                  		addq.b	#2,$25(a0)
0000BD92 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BD9A 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BDA0 117C 0004 0001             		move.b	#4,1(a0)
0000BDA6 4228 0022                  		clr.b	$22(a0)
0000BDAA 317C 0100 0018             		move.w	#$100,priority(a0)
0000BDB0 117C 0000 001A             		move.b	#0,$1A(a0)
0000BDB6 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000BDBC                            
0000BDBC                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000BDBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000BDC0 6600                       		bne.s	Obj87_Wait
0000BDC2 5428 0025                  		addq.b	#2,$25(a0)
0000BDC6 317C 0001 001C             		move.w	#1,$1C(a0)
0000BDCC 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000BDD2                            
0000BDD2                            Obj87_Wait:
0000BDD2 4E75                       		rts	
0000BDD4                            ; ===========================================================================
0000BDD4                            
0000BDD4                            Obj87_LookUp:				; XREF: Obj87_Index
0000BDD4 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000BDDC 6600                       		bne.s	locret_5480
0000BDDE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000BDE4 317C 005A 0030             		move.w	#$5A,$30(a0)
0000BDEA 5428 0025                  		addq.b	#2,$25(a0)
0000BDEE                            
0000BDEE                            locret_5480:
0000BDEE 4E75                       		rts	
0000BDF0                            ; ===========================================================================
0000BDF0                            
0000BDF0                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000BDF0 5368 0030                  		subq.w	#1,$30(a0)
0000BDF4 6600                       		bne.s	Obj87_Wait2
0000BDF6 43F8 D400                  		lea	($FFFFD400).w,a1
0000BDFA 323C 00FF                  		move.w	#$FF,d1
0000BDFE                            
0000BDFE                            Obj87_ClrLoop:
0000BDFE 4299                       		clr.l	(a1)+
0000BE00 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000BE04 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000BE0A 5428 0025                  		addq.b	#2,$25(a0)
0000BE0E 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE14 317C 003C 0030             		move.w	#$3C,$30(a0)
0000BE1A                            
0000BE1A                            Obj87_Wait2:
0000BE1A 4E75                       		rts	
0000BE1C                            ; ===========================================================================
0000BE1C                            
0000BE1C                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000BE1C 5368 0030                  		subq.w	#1,$30(a0)
0000BE20 6600                       		bne.s	Obj87_Wait3
0000BE22 5428 0025                  		addq.b	#2,$25(a0)
0000BE26 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000BE2C 117C 0002 001C             		move.b	#2,$1C(a0)
0000BE32 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000BE38                            
0000BE38                            Obj87_Wait3:
0000BE38 4E75                       		rts	
0000BE3A                            ; ===========================================================================
0000BE3A                            
0000BE3A                            Obj87_Animate:				; XREF: Obj87_Index
0000BE3A 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000BE40 4EF9 0000 0000             		jmp	AnimateSprite
0000BE46                            ; ===========================================================================
0000BE46                            
0000BE46                            Obj87_Leap:				; XREF: Obj87_Index
0000BE46 5368 0030                  		subq.w	#1,$30(a0)
0000BE4A 6600                       		bne.s	Obj87_Wait4
0000BE4C 5428 0025                  		addq.b	#2,$25(a0)
0000BE50 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000BE58 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000BE5E 117C 0004 0001             		move.b	#4,1(a0)
0000BE64 4228 0022                  		clr.b	$22(a0)
0000BE68 317C 0100 0018             		move.w	#$100,priority(a0)
0000BE6E 117C 0005 001A             		move.b	#5,$1A(a0)
0000BE74 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000BE7A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000BE80 60B8                       		bra.s	Obj87_Animate
0000BE82                            ; ===========================================================================
0000BE82                            
0000BE82                            Obj87_Wait4:				; XREF: Obj87_Leap
0000BE82 4E75                       		rts	
0000BE84                            ; ===========================================================================
0000BE84                            Ani_obj87:
0000BE84                            	include '_anim\obj87.asm'
0000BE84                            ; ---------------------------------------------------------------------------
0000BE84                            ; Animation script - Sonic on the ending sequence
0000BE84                            ; ---------------------------------------------------------------------------
0000BE84 0000                       		dc.w byte_551C-Ani_obj87
0000BE86 0000                       		dc.w byte_552A-Ani_obj87
0000BE88 0000                       		dc.w byte_5534-Ani_obj87
0000BE8A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000BE98 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000BEA2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000BEAA                            		even
0000BEAA                            		even
0000BEAA                            
0000BEAA                            ; ===========================================================================
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Object 88 - chaos emeralds on	the ending sequence
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            
0000BEAA                            Obj88:					; XREF: Obj_Index
0000BEAA 7000                       		moveq	#0,d0
0000BEAC 1028 0024                  		move.b	$24(a0),d0
0000BEB0 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000BEB4 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000BEB8 4EF9 0000 0000             		jmp	DisplaySprite
0000BEBE                            ; ===========================================================================
0000BEBE 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000BEC0 0000                       		dc.w Obj88_Move-Obj88_Index
0000BEC2                            ; ===========================================================================
0000BEC2                            
0000BEC2                            Obj88_Main:				; XREF: Obj88_Index
0000BEC2 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000BEC8 6700                       		beq.s	Obj88_Main2
0000BECA 588F                       		addq.l	#4,sp
0000BECC 4E75                       		rts	
0000BECE                            ; ===========================================================================
0000BECE                            
0000BECE                            Obj88_Main2:				; XREF: Obj88_Main
0000BECE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000BED4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000BEDA 2248                       		movea.l	a0,a1
0000BEDC 7600                       		moveq	#0,d3
0000BEDE 7401                       		moveq	#1,d2
0000BEE0 7205                       		moveq	#5,d1
0000BEE2                            
0000BEE2                            Obj88_MainLoop:
0000BEE2 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000BEE6 5429 0024                  		addq.b	#2,$24(a1)
0000BEEA 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000BEF2 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000BEF8 137C 0004 0001             		move.b	#4,1(a1)
0000BEFE 337C 0080 0018             		move.w	#$80,priority(a1)
0000BF04 3368 0008 0038             		move.w	8(a0),$38(a1)
0000BF0A 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000BF10 1342 001C                  		move.b	d2,$1C(a1)
0000BF14 1342 001A                  		move.b	d2,$1A(a1)
0000BF18 5202                       		addq.b	#1,d2
0000BF1A 1343 0026                  		move.b	d3,$26(a1)
0000BF1E 0603 002A                  		addi.b	#$2A,d3
0000BF22 43E9 0040                  		lea	$40(a1),a1
0000BF26 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000BF2A                            
0000BF2A                            Obj88_Move:				; XREF: Obj88_Index
0000BF2A 3028 003E                  		move.w	$3E(a0),d0
0000BF2E D168 0026                  		add.w	d0,$26(a0)
0000BF32 1028 0026                  		move.b	$26(a0),d0
0000BF36 4EB9 0000 8DA4             		jsr	(CalcSine).l
0000BF3C 7800                       		moveq	#0,d4
0000BF3E 1828 003C                  		move.b	$3C(a0),d4
0000BF42 C3C4                       		muls.w	d4,d1
0000BF44 E081                       		asr.l	#8,d1
0000BF46 C1C4                       		muls.w	d4,d0
0000BF48 E080                       		asr.l	#8,d0
0000BF4A D268 0038                  		add.w	$38(a0),d1
0000BF4E D068 003A                  		add.w	$3A(a0),d0
0000BF52 3141 0008                  		move.w	d1,8(a0)
0000BF56 3140 000C                  		move.w	d0,$C(a0)
0000BF5A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000BF60 6700                       		beq.s	loc_55FA
0000BF62 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000BF68                            
0000BF68                            loc_55FA:
0000BF68 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000BF6E 6700                       		beq.s	loc_5608
0000BF70 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000BF76                            
0000BF76                            loc_5608:
0000BF76 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000BF7C 6700                       		beq.s	locret_5614
0000BF7E 5368 003A                  		subq.w	#1,$3A(a0)
0000BF82                            
0000BF82                            locret_5614:
0000BF82 4E75                       		rts	
0000BF84                            ; ===========================================================================
0000BF84                            ; ---------------------------------------------------------------------------
0000BF84                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000BF84                            ; ---------------------------------------------------------------------------
0000BF84                            
0000BF84                            Obj89:					; XREF: Obj_Index
0000BF84 7000                       		moveq	#0,d0
0000BF86 1028 0024                  		move.b	$24(a0),d0
0000BF8A 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000BF8E 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000BF92                            ; ===========================================================================
0000BF92 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000BF94 0000                       		dc.w Obj89_Move-Obj89_Index
0000BF96 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000BF98                            ; ===========================================================================
0000BF98                            
0000BF98                            Obj89_Main:				; XREF: Obj89_Index
0000BF98 5428 0024                  		addq.b	#2,$24(a0)
0000BF9C 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000BFA2 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000BFA8 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000BFB0 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000BFB6 117C 0000 0001             		move.b	#0,1(a0)
0000BFBC 117C 0000 0018             		move.b	#0,priority(a0)
0000BFC2                            
0000BFC2                            Obj89_Move:				; XREF: Obj89_Index
0000BFC2 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000BFC8 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000BFCA 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000BFD0 4EF9 0000 0000             		jmp	DisplaySprite
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            Obj89_Delay:				; XREF: Obj89_Move
0000BFD6 5428 0024                  		addq.b	#2,$24(a0)
0000BFDA 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000BFE0                            
0000BFE0                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000BFE0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000BFE4 6A00                       		bpl.s	Obj89_Display
0000BFE6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000BFEC                            
0000BFEC                            Obj89_Display:
0000BFEC 4EF9 0000 0000             		jmp	DisplaySprite
0000BFF2                            ; ===========================================================================
0000BFF2                            ; ---------------------------------------------------------------------------
0000BFF2                            ; Sprite mappings - Sonic on the ending	sequence
0000BFF2                            ; ---------------------------------------------------------------------------
0000BFF2                            Map_obj87:
0000BFF2                            	include '_maps\obj87.asm'
0000BFF2                            ; ---------------------------------------------------------------------------
0000BFF2                            ; Sprite mappings - Sonic on the ending	sequence
0000BFF2                            ; ---------------------------------------------------------------------------
0000BFF2 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000BFF6 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000BFFA 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000BFFE 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000C002 02                         byte_5690:	dc.b 2
0000C003 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000C008 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C00D 03                         byte_569B:	dc.b 3
0000C00E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000C013 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000C018 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000C01D 02                         byte_56AB:	dc.b 2
0000C01E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000C023 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000C028 02                         byte_56B6:	dc.b 2
0000C029 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000C02E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000C033 02                         byte_56C1:	dc.b 2
0000C034 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000C039 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000C03E 03                         byte_56CC:	dc.b 3
0000C03F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000C044 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000C049 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000C04E 07                         byte_56DC:	dc.b 7
0000C04F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000C054 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000C059 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000C05E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000C063 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000C068 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000C06D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000C072 18                         byte_5700:	dc.b $18
0000C073 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000C078 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000C07D 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000C082 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000C087 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000C08C 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000C091 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000C096 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000C09B B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000C0A0 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000C0A5 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000C0AA C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000C0AF C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000C0B4 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000C0B9 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000C0BE D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000C0C3 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000C0C8 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000C0CD E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000C0D2 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000C0D7 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000C0DC E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000C0E1 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000C0E6 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000C0EC 00                         		even
0000C0EC 00                         		even
0000C0EC                            
0000C0EC                            ; ---------------------------------------------------------------------------
0000C0EC                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C0EC                            ; ---------------------------------------------------------------------------
0000C0EC                            Map_obj88:
0000C0EC                            	include '_maps\obj88.asm'
0000C0EC                            ; ---------------------------------------------------------------------------
0000C0EC                            ; Sprite mappings - chaos emeralds on the ending sequence
0000C0EC                            ; ---------------------------------------------------------------------------
0000C0EC 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000C0F0 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000C0F4 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000C0F8 0000                       		dc.w byte_57AC-Map_obj88
0000C0FA 01                         byte_5788:	dc.b 1
0000C0FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C100 01                         byte_578E:	dc.b 1
0000C101 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000C106 01                         byte_5794:	dc.b 1
0000C107 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000C10C 01                         byte_579A:	dc.b 1
0000C10D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000C112 01                         byte_57A0:	dc.b 1
0000C113 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000C118 01                         byte_57A6:	dc.b 1
0000C119 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000C11E 01                         byte_57AC:	dc.b 1
0000C11F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0000C124                            		even
0000C124                            		even
0000C124                            
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            Map_obj89:
0000C124                            	include '_maps\obj89.asm'
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000C124                            ; ---------------------------------------------------------------------------
0000C124 0000                       		dc.w byte_57B4-Map_obj89
0000C126 03                         byte_57B4:	dc.b 3
0000C127 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000C12C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C131 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000C136                            		even
0000C136                            		even
0000C136                            
0000C136                            ; ===========================================================================
0000C136                            ; ---------------------------------------------------------------------------
0000C136                            ; Credits ending sequence
0000C136                            ; ---------------------------------------------------------------------------
0000C136                            
0000C136                            Credits:				; XREF: GameModeArray
0000C136 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C13A 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C13E 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C144 3CBC 8004                  		move.w	#$8004,(a6)
0000C148 3CBC 8230                  		move.w	#$8230,(a6)
0000C14C 3CBC 8407                  		move.w	#$8407,(a6)
0000C150 3CBC 9001                  		move.w	#$9001,(a6)
0000C154 3CBC 9200                  		move.w	#$9200,(a6)
0000C158 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C15C 3CBC 8720                  		move.w	#$8720,(a6)
0000C160 4238 F64E                  		clr.b	($FFFFF64E).w
0000C164 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C168 43F8 D000                  		lea	($FFFFD000).w,a1
0000C16C 7000                       		moveq	#0,d0
0000C16E 323C 07FF                  		move.w	#$7FF,d1
0000C172                            
0000C172                            Cred_ClrObjRam:
0000C172 22C0                       		move.l	d0,(a1)+
0000C174 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000C178                            
0000C178 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000C182 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000C188 6100 0000                  		bsr.w	Jmpto_NemDec
0000C18C 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C190 7000                       		moveq	#0,d0
0000C192 323C 001F                  		move.w	#$1F,d1
0000C196                            
0000C196                            Cred_ClrPallet:
0000C196 22C0                       		move.l	d0,(a1)+
0000C198 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000C19C                            
0000C19C 7003                       		moveq	#3,d0
0000C19E 6100 0000                  		bsr.w	Jmpto_Palload1	; load Sonic's pallet
0000C1A2                            ;		move.b	#$8A,($FFFFD080).w ; load credits object
0000C1A2 4EB9 0000 0000             		jsr	Credits_MapLoad
0000C1A8 4EB9 0000 0000             		jsr	ObjectsLoad
0000C1AE 4EB9 0000 0000             		jsr	BuildSprites
0000C1B4 6100 0000                  		bsr.w	EndingDemoLoad
0000C1B8 7000                       		moveq	#0,d0
0000C1BA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C1BE E948                       		lsl.w	#4,d0
0000C1C0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000C1C6 45F2 0000                  		lea	(a2,d0.w),a2
0000C1CA 7000                       		moveq	#0,d0
0000C1CC 1012                       		move.b	(a2),d0
0000C1CE 6700                       		beq.s	loc_5862
0000C1D0 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load level patterns
0000C1D4                            
0000C1D4                            loc_5862:
0000C1D4 7001                       		moveq	#1,d0
0000C1D6 6100 0000                  		bsr.w	Jmpto_LoadPLC		; load standard	level patterns
0000C1DA 31FC 0078 FC20             		move.w	#120,($FFFFFC20).w ; display a credit for 2 seconds
0000C1E0 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C1E4                            
0000C1E4                            Cred_WaitLoop:
0000C1E4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C1EA 6100 CB86                  		bsr.w	DelayProgram
0000C1EE 6100 0000                  		bsr.w	Jmpto_RunPLC_RAM
0000C1F2 4A78 FC20                  		tst.w	($FFFFFC20).w	; have 2 seconds elapsed?
0000C1F6 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000C1F8 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000C1FC 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000C1FE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000C204 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000C208 4E75                       		rts	
0000C20A                            
0000C20A                            ; ---------------------------------------------------------------------------
0000C20A                            ; Ending sequence demo loading subroutine
0000C20A                            ; ---------------------------------------------------------------------------
0000C20A                            
0000C20A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C20A                            
0000C20A                            
0000C20A                            EndingDemoLoad:				; XREF: Credits
0000C20A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000C20E 0240 000F                  		andi.w	#$F,d0
0000C212 D040                       		add.w	d0,d0
0000C214 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000C218 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000C21C 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000C220 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
0000C226 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
0000C228 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000C22E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000C234 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000C23A 7000                       		moveq	#0,d0
0000C23C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000C240 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000C244 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000C248 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000C24C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000C252 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000C254 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000C25A 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000C25E 303C 0008                  		move.w	#8,d0
0000C262                            
0000C262                            EndDemo_LampLoad:
0000C262 24D9                       		move.l	(a1)+,(a2)+
0000C264 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000C268                            
0000C268                            EndDemo_Exit:
0000C268 4E75                       		rts	
0000C26A                            ; End of function EndingDemoLoad
0000C26A                            
0000C26A                            ; ===========================================================================
0000C26A                            ; ---------------------------------------------------------------------------
0000C26A                            ; Levels used in the end sequence demos
0000C26A                            ; ---------------------------------------------------------------------------
0000C26A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000C27A                            
0000C27A                            ; ---------------------------------------------------------------------------
0000C27A                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000C27A                            ; ---------------------------------------------------------------------------
0000C27A                            EndDemo_LampVar:
0000C27A 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000C27C 0A00 062C 000D             		dc.w $A00, $62C, $D
0000C282 0000 0000                  		dc.l 0
0000C286 0000                       		dc.b 0,	0
0000C288 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000C29C 0101                       		dc.b 1,	1
0000C29E                            ; ===========================================================================
0000C29E                            ; ---------------------------------------------------------------------------
0000C29E                            ; "TRY AGAIN" and "END"	screens
0000C29E                            ; ---------------------------------------------------------------------------
0000C29E                            
0000C29E                            TryAgainEnd:				; XREF: Credits
0000C29E 6100 0000                  		bsr.w	Jmpto_ClearPLC
0000C2A2 6100 0000                  		bsr.w	Jmpto_Pal_FadeFrom
0000C2A6 4DF9 00C0 0004             		lea	($C00004).l,a6
0000C2AC 3CBC 8004                  		move.w	#$8004,(a6)
0000C2B0 3CBC 8230                  		move.w	#$8230,(a6)
0000C2B4 3CBC 8407                  		move.w	#$8407,(a6)
0000C2B8 3CBC 9001                  		move.w	#$9001,(a6)
0000C2BC 3CBC 9200                  		move.w	#$9200,(a6)
0000C2C0 3CBC 8B03                  		move.w	#$8B03,(a6)
0000C2C4 3CBC 8720                  		move.w	#$8720,(a6)
0000C2C8 4238 F64E                  		clr.b	($FFFFF64E).w
0000C2CC 6100 0000                  		bsr.w	Jmpto_ClearScreen
0000C2D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C2D4 7000                       		moveq	#0,d0
0000C2D6 323C 07FF                  		move.w	#$7FF,d1
0000C2DA                            
0000C2DA                            TryAg_ClrObjRam:
0000C2DA 22C0                       		move.l	d0,(a1)+
0000C2DC 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000C2E0                            
0000C2E0 701D                       		moveq	#$1D,d0
0000C2E2 6100 0000                  		bsr.w	Jmpto_RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000C2E6 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000C2EA 7000                       		moveq	#0,d0
0000C2EC 323C 001F                  		move.w	#$1F,d1
0000C2F0                            
0000C2F0                            TryAg_ClrPallet:
0000C2F0 22C0                       		move.l	d0,(a1)+
0000C2F2 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000C2F6                            
0000C2F6 7013                       		moveq	#$13,d0
0000C2F8 6100 0000                  		bsr.w	Jmpto_Palload1	; load ending pallet
0000C2FC 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000C300 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000C306 4EB9 0000 0000             		jsr	ObjectsLoad
0000C30C 4EB9 0000 0000             		jsr	BuildSprites
0000C312 31FC 0708 FC20             		move.w	#1800,($FFFFFC20).w ; show screen for 30 seconds
0000C318 6100 0000                  		bsr.w	Jmpto_Pal_FadeTo
0000C31C                            
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C                            ; "TRY AGAIN" and "END"	screen main loop
0000C31C                            ; ---------------------------------------------------------------------------
0000C31C                            TryAg_MainLoop:
0000C31C 6100 0000                  		bsr.w	Jmpto_PauseGame
0000C320 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000C326 6100 CA4A                  		bsr.w	DelayProgram
0000C32A 4EB9 0000 0000             		jsr	ObjectsLoad
0000C330 4EB9 0000 0000             		jsr	BuildSprites
0000C336 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000C33C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000C33E 4A78 FC20                  		tst.w	($FFFFFC20).w	; has 30 seconds elapsed?
0000C342 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000C344 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000C34A 67D0                       		beq.s	TryAg_MainLoop
0000C34C                            
0000C34C                            TryAg_Exit:
0000C34C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000C352 4E75                       		rts	
0000C354                            
0000C354                            ; ===========================================================================
0000C354                            ; ---------------------------------------------------------------------------
0000C354                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000C354                            ; ---------------------------------------------------------------------------
0000C354                            
0000C354                            Obj8B:					; XREF: Obj_Index
0000C354 7000                       		moveq	#0,d0
0000C356 1028 0024                  		move.b	$24(a0),d0
0000C35A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000C35E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000C362 4EF9 0000 0000             		jmp	DisplaySprite
0000C368                            ; ===========================================================================
0000C368 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000C36A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000C36C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000C36E 0000                       		dc.w loc_5A8E-Obj8B_Index
0000C370                            ; ===========================================================================
0000C370                            
0000C370                            Obj8B_Main:				; XREF: Obj8B_Index
0000C370 5428 0024                  		addq.b	#2,$24(a0)
0000C374 317C 0120 0008             		move.w	#$120,8(a0)
0000C37A 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000C380 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000C388 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000C38E 117C 0000 0001             		move.b	#0,1(a0)
0000C394 317C 0100 0018             		move.w	#$100,priority(a0)
0000C39A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000C3A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000C3A6 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000C3A8                            ;		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000C3A8 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000C3AE 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000C3B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000C3BA                            
0000C3BA                            Obj8B_Animate:				; XREF: Obj8B_Index
0000C3BA 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000C3C0 4EF9 0000 0000             		jmp	AnimateSprite
0000C3C6                            ; ===========================================================================
0000C3C6                            
0000C3C6                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000C3C6 5428 0024                  		addq.b	#2,$24(a0)
0000C3CA 7002                       		moveq	#2,d0
0000C3CC 0828 0000 001C             		btst	#0,$1C(a0)
0000C3D2 6700                       		beq.s	loc_5A6A
0000C3D4 4440                       		neg.w	d0
0000C3D6                            
0000C3D6                            loc_5A6A:
0000C3D6 43F8 D800                  		lea	($FFFFD800).w,a1
0000C3DA 7205                       		moveq	#5,d1
0000C3DC                            
0000C3DC                            loc_5A70:
0000C3DC 1340 003E                  		move.b	d0,$3E(a1)
0000C3E0 3400                       		move.w	d0,d2
0000C3E2 E742                       		asl.w	#3,d2
0000C3E4 D529 0026                  		add.b	d2,$26(a1)
0000C3E8 43E9 0040                  		lea	$40(a1),a1
0000C3EC 51C9 FFEE                  		dbf	d1,loc_5A70
0000C3F0 5228 001A                  		addq.b	#1,$1A(a0)
0000C3F4 317C 0070 0030             		move.w	#112,$30(a0)
0000C3FA                            
0000C3FA                            loc_5A8E:				; XREF: Obj8B_Index
0000C3FA 5368 0030                  		subq.w	#1,$30(a0)
0000C3FE 6A00                       		bpl.s	locret_5AA0
0000C400 0868 0000 001C             		bchg	#0,$1C(a0)
0000C406 117C 0002 0024             		move.b	#2,$24(a0)
0000C40C                            
0000C40C                            locret_5AA0:
0000C40C 4E75                       		rts	
0000C40E                            ; ===========================================================================
0000C40E                            Ani_obj8B:
0000C40E                            	include '_anim\obj8B.asm'
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E 0000                       		dc.w byte_5AA8-Ani_obj8B
0000C410 0000                       		dc.w byte_5AAC-Ani_obj8B
0000C412 0000                       		dc.w byte_5AB0-Ani_obj8B
0000C414 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000C418 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
0000C41C 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000C42E                            		even
0000C42E                            		even
0000C42E                            
0000C42E                            ; ===========================================================================
0000C42E                            ; ---------------------------------------------------------------------------
0000C42E                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000C42E                            ; ---------------------------------------------------------------------------
0000C42E                            
0000C42E                            Obj8C:					; XREF: Obj_Index
0000C42E 7000                       		moveq	#0,d0
0000C430 1028 0024                  		move.b	$24(a0),d0
0000C434 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000C438 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000C43C 4EF9 0000 0000             		jmp	DisplaySprite
0000C442                            ; ===========================================================================
0000C442 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000C444 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000C446                            ; ===========================================================================
0000C446                            
0000C446                            Obj8C_Main:				; XREF: Obj8C_Index
0000C446 2248                       		movea.l	a0,a1
0000C448 7400                       		moveq	#0,d2
0000C44A 7600                       		moveq	#0,d3
0000C44C 7205                       		moveq	#5,d1
0000C44E 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000C452                            
0000C452                            Obj8C_MakeEms:				; XREF: loc_5B42
0000C452 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000C456 5429 0024                  		addq.b	#2,$24(a1)
0000C45A 237C 0000 C0EC 0004        		move.l	#Map_obj88,4(a1)
0000C462 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000C468 137C 0000 0001             		move.b	#0,1(a1)
0000C46E 337C 0080 0018             		move.w	#$80,priority(a1)
0000C474 337C 0104 0008             		move.w	#$104,8(a1)
0000C47A 337C 0120 0038             		move.w	#$120,$38(a1)
0000C480 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000C486 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000C48C 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000C492 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000C496                            
0000C496                            Obj8C_ChkEms:
0000C496 7000                       		moveq	#0,d0
0000C498 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000C49C 5340                       		subq.w	#1,d0
0000C49E 6500                       		bcs.s	loc_5B42
0000C4A0                            
0000C4A0                            Obj8C_ChkEmLoop:
0000C4A0 B433 0000                  		cmp.b	(a3,d0.w),d2
0000C4A4 6600                       		bne.s	loc_5B3E
0000C4A6 5202                       		addq.b	#1,d2
0000C4A8 60EC                       		bra.s	Obj8C_ChkEms
0000C4AA                            ; ===========================================================================
0000C4AA                            
0000C4AA                            loc_5B3E:
0000C4AA 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000C4AE                            
0000C4AE                            loc_5B42:
0000C4AE 1342 001A                  		move.b	d2,$1A(a1)
0000C4B2 5229 001A                  		addq.b	#1,$1A(a1)
0000C4B6 5202                       		addq.b	#1,d2
0000C4B8 137C 0080 0026             		move.b	#$80,$26(a1)
0000C4BE 1343 001E                  		move.b	d3,$1E(a1)
0000C4C2 1343 001F                  		move.b	d3,$1F(a1)
0000C4C6 0643 000A                  		addi.w	#$A,d3
0000C4CA 43E9 0040                  		lea	$40(a1),a1
0000C4CE 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000C4D2                            
0000C4D2                            Obj8C_Move:				; XREF: Obj8C_Index
0000C4D2 4A68 003E                  		tst.w	$3E(a0)
0000C4D6 6700                       		beq.s	locret_5BBA
0000C4D8 4A28 001E                  		tst.b	$1E(a0)
0000C4DC 6700                       		beq.s	loc_5B78
0000C4DE 5328 001E                  		subq.b	#1,$1E(a0)
0000C4E2 6600                       		bne.s	loc_5B80
0000C4E4                            
0000C4E4                            loc_5B78:
0000C4E4 3028 003E                  		move.w	$3E(a0),d0
0000C4E8 D168 0026                  		add.w	d0,$26(a0)
0000C4EC                            
0000C4EC                            loc_5B80:
0000C4EC 1028 0026                  		move.b	$26(a0),d0
0000C4F0 6700                       		beq.s	loc_5B8C
0000C4F2 0C00 0080                  		cmpi.b	#$80,d0
0000C4F6 6600                       		bne.s	loc_5B96
0000C4F8                            
0000C4F8                            loc_5B8C:
0000C4F8 4268 003E                  		clr.w	$3E(a0)
0000C4FC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000C502                            
0000C502                            loc_5B96:
0000C502 4EB9 0000 8DA4             		jsr	(CalcSine).l
0000C508 7800                       		moveq	#0,d4
0000C50A 1828 003C                  		move.b	$3C(a0),d4
0000C50E C3C4                       		muls.w	d4,d1
0000C510 E081                       		asr.l	#8,d1
0000C512 C1C4                       		muls.w	d4,d0
0000C514 E080                       		asr.l	#8,d0
0000C516 D268 0038                  		add.w	$38(a0),d1
0000C51A D068 003A                  		add.w	$3A(a0),d0
0000C51E 3141 0008                  		move.w	d1,8(a0)
0000C522 3140 000A                  		move.w	d0,$A(a0)
0000C526                            
0000C526                            locret_5BBA:
0000C526 4E75                       		rts	
0000C528                            ; ===========================================================================
0000C528                            ; ---------------------------------------------------------------------------
0000C528                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000C528                            ; ---------------------------------------------------------------------------
0000C528                            Map_obj8B:
0000C528                            	include '_maps\obj8B.asm'
0000C528                            ; ---------------------------------------------------------------------------
0000C528                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000C528                            ; ---------------------------------------------------------------------------
0000C528 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000C52C 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000C530 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000C534 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000C538 08                         byte_5BCC:	dc.b 8
0000C539 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000C53E F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000C543 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000C548 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000C54D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C552 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C557 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C55C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C561 08                         byte_5BF5:	dc.b 8
0000C562 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000C567 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000C56C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000C571 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000C576 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C57B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C580 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C585 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C58A 08                         byte_5C1E:	dc.b 8
0000C58B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000C590 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000C595 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000C59A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000C59F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000C5A4 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000C5A9 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C5AE 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C5B3 08                         byte_5C47:	dc.b 8
0000C5B4 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000C5B9 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000C5BE E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000C5C3 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000C5C8 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000C5CD 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000C5D2 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000C5D7 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000C5DC 0C                         byte_5C70:	dc.b $C
0000C5DD ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000C5E2 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000C5E7 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000C5EC 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000C5F1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000C5F6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000C5FB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000C600 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000C605 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000C60A 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000C60F 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C614 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C619 0A                         byte_5CAD:	dc.b $A
0000C61A D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000C61F DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000C624 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000C629 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000C62E DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000C633 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000C638 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C63D 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C642 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000C647 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000C64C 0A                         byte_5CE0:	dc.b $A
0000C64D C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000C652 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000C657 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000C65C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000C661 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000C666 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000C66B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000C670 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000C675 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000C67A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000C67F 0C                         byte_5D13:	dc.b $C
0000C680 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000C685 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000C68A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000C68F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000C694 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000C699 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000C69E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000C6A3 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000C6A8 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000C6AD 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000C6B2 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000C6B7 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000C6BC                            		even
0000C6BC                            		even
0000C6BC                            
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            ; Ending sequence demos
0000C6BC                            ; ---------------------------------------------------------------------------
0000C6BC                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000C6EA                            		even
0000C6EA                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000C72A                            		even
0000C72A                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000C75A                            		even
0000C75A                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000C78A                            		even
0000C78A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000C7AA                            		even
0000C7AA                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000C7CA                            		even
0000C7CA                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000C7FA                            		even
0000C7FA                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000C82A                            		even
0000C82A                            
0000C82A                            Jmpto_KosDec:
0000C82A 4EF8 3A26                  	jmp	KosDec
0000C82E                            Jmpto_Palload1:
0000C82E 4EF8 47FA                  	jmp	Palload1
0000C832                            Jmpto_PlaySFX:
0000C832 4EF8 3212                  	jmp	PlaySound
0000C836                            Jmpto_PlayMus:
0000C836 4EF8 325C                  	jmp	PlaySound_Special
0000C83A                            Jmpto_Pal_FadeFrom:
0000C83A 4EF8 4528                  	jmp	Pal_FadeFrom
0000C83E                            Jmpto_Pal_FadeTo:	
0000C83E 4EF8 446E                  	jmp	Pal_FadeTo
0000C842                            Jmpto_Pal_MakeWhite:
0000C842 4EF8 45AC                  	jmp	Pal_MakeWhite
0000C846                            Jmpto_Pal_ToWhite:
0000C846 4EF8 469A                  	jmp	Pal_ToWhite
0000C84A                            Jmpto_ClearScreen:
0000C84A 4EF8 3084                  	jmp	ClearScreen
0000C84E                            Jmpto_RunPLC_ROM:
0000C84E 4EF8 386C                  	jmp	RunPLC_ROM
0000C852                            Jmpto_RunPLC_RAM:
0000C852 4EF8 3762                  	jmp	RunPLC_RAM
0000C856                            Jmpto_NemDec:
0000C856 4EF8 3596                  	jmp	NemDec
0000C85A                            Jmpto_LoadPLC:
0000C85A 4EF8 36F6                  	jmp	LoadPLC
0000C85E                            Jmpto_ClearPLC:
0000C85E 4EF8 3754                  	jmp	ClearPLC
0000C862                            Jmpto_PauseGame:
0000C862 4EF8 3310                  	jmp	PauseGame
0000C866                            Jmpto_PalCycle_Load:
0000C866 4EF8 3C46                  	jmp	PalCycle_Load
0000C86A                            ; ---------------------------------------------------------------------------
0000C86A                            ; Subroutine to	load level boundaries and start	locations
0000C86A                            ; ---------------------------------------------------------------------------
0000C86A                            
0000C86A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C86A                            
0000C86A                            
0000C86A                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000C86A 7000                       		moveq	#0,d0
0000C86C 11C0 F740                  		move.b	d0,($FFFFF740).w
0000C870 11C0 F741                  		move.b	d0,($FFFFF741).w
0000C874 11C0 F746                  		move.b	d0,($FFFFF746).w
0000C878 11C0 F748                  		move.b	d0,($FFFFF748).w
0000C87C 11C0 F742                  		move.b	d0,($FFFFF742).w
0000C880 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000C884 ED08                       		lsl.b	#6,d0
0000C886 E848                       		lsr.w	#4,d0
0000C888 3200                       		move.w	d0,d1
0000C88A D040                       		add.w	d0,d0
0000C88C D041                       		add.w	d1,d0
0000C88E 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000C892 3018                       		move.w	(a0)+,d0
0000C894 31C0 F730                  		move.w	d0,($FFFFF730).w
0000C898 2018                       		move.l	(a0)+,d0
0000C89A 21C0 F728                  		move.l	d0,($FFFFF728).w
0000C89E 21C0 F720                  		move.l	d0,($FFFFF720).w
0000C8A2 2018                       		move.l	(a0)+,d0
0000C8A4 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000C8A8 21C0 F724                  		move.l	d0,($FFFFF724).w
0000C8AC 3038 F728                  		move.w	($FFFFF728).w,d0
0000C8B0 0640 0240                  		addi.w	#$240,d0
0000C8B4 31C0 F732                  		move.w	d0,($FFFFF732).w
0000C8B8 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000C8BE 3018                       		move.w	(a0)+,d0
0000C8C0 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000C8C4 6000 0000                  		bra.w	LevSz_ChkLamp
0000C8C8                            ; ===========================================================================
0000C8C8                            ; ---------------------------------------------------------------------------
0000C8C8                            ; Level size array and ending start location array
0000C8C8                            ; ---------------------------------------------------------------------------
0000C8C8                            LevelSizeArray:	incbin	misc\lvl_size.bin
0000CA18                            		even
0000CA18                            
0000CA18                            EndingStLocArray:
0000CA18                            		incbin	misc\sloc_end.bin
0000CA38                            		even
0000CA38                            
0000CA38                            ; ===========================================================================
0000CA38                            
0000CA38                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000CA38 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000CA3C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000CA3E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000CA44 3238 D008                  		move.w	($FFFFD008).w,d1
0000CA48 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000CA4C                            		;---------------------
0000CA4C                            ; Fix the Frame Counter Bug   //   when start by a Lamppost not have this bug,
0000CA4C                                              ; but after correct the main bug, you see zeros in place of the numbers
0000CA4C                                ;  movem.l   d0-a6,-(sp)
0000CA4C                                  ;move.l   #$5E400003,d0
0000CA4C                                  ;moveq   #0,d1
0000CA4C                                 ; move.b   ($FFFFFE23).w,d1 ; load   minutes
0000CA4C                                ;  jsr   Hud_Mins
0000CA4C                               ;   move.l   #$5EC00003,d0
0000CA4C                              ;    moveq   #0,d1
0000CA4C                             ;     move.b   ($FFFFFE24).w,d1 ; load   seconds
0000CA4C                            ;	cmpi.b	#59,d1
0000CA4C                            ;	blo.w 	@cappedsecs
0000CA4C                            ;	move
0000CA4C                            	
0000CA4C                            ;	jsr   Hud_Secs
0000CA4C                            ;      movem.l   (sp)+,d0-a6
0000CA4C                            ;---------------------
0000CA4C 6000                       		bra.s	loc_60D0
0000CA4E                            ; ===========================================================================
0000CA4E                            
0000CA4E                            TitleLoc:	;	x_pos, y_pos
0000CA4E 0050 03B0                                  dc.w	$50, $3B0
0000CA52                            
0000CA52                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000CA52 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000CA56 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w ; clear Super Sonic Flag
0000CA5C ED08                       		lsl.b	#6,d0
0000CA5E E848                       		lsr.w	#4,d0
0000CA60 43FA FFEC                  		lea	TitleLoc(pc),a1			; Load Title Screen spawn location
0000CA64 0C38 0004 F600             		cmpi.b	#$4,(Game_Mode).w	; Are we on the Title Screen?
0000CA6A 6700                       		beq.s	LevSz_SonicPos			; If so, set the start position using the loaded spawn location
0000CA6C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CA70 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000CA74 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000CA76 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000CA7A 5340                       		subq.w	#1,d0
0000CA7C E548                       		lsl.w	#2,d0
0000CA7E                            		;lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000CA7E                            
0000CA7E                            LevSz_SonicPos:
0000CA7E 7200                       		moveq	#0,d1
0000CA80 3219                       		move.w	(a1)+,d1
0000CA82 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000CA86 7000                       		moveq	#0,d0
0000CA88 3011                       		move.w	(a1),d0
0000CA8A 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000CA8E                            
0000CA8E                            loc_60D0:				; XREF: LevSz_ChkLamp
0000CA8E 4278 F7A8                  	clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
0000CA92 45F8 CB00                  	lea	($FFFFCB00).w,a2	; load the tracking array into a2
0000CA96 743F                       	moveq	#63,d2				; begin a 64-step loop
0000CA98                            @looppoint:
0000CA98 34C1                       	move.w	d1,(a2)+			; fill in X
0000CA9A 34C0                       	move.w	d0,(a2)+			; fill in Y
0000CA9C 51CA FFFA                  	dbf	d2,@looppoint		; loop
0000CAA0 0441 00A0                  	subi.w	#$A0,d1
0000CAA4 6400                       	bcc.s	loc_60D8
0000CAA6 7200                       	moveq	#0,d1
0000CAA8                            
0000CAA8                            loc_60D8:
0000CAA8 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000CAAC B242                       		cmp.w	d2,d1
0000CAAE 6500                       		bcs.s	loc_60E2
0000CAB0 3202                       		move.w	d2,d1
0000CAB2                            
0000CAB2                            loc_60E2:
0000CAB2 31C1 F700                  		move.w	d1,($FFFFF700).w
0000CAB6 0440 0060                  		subi.w	#$60,d0
0000CABA 6400                       		bcc.s	loc_60EE
0000CABC 7000                       		moveq	#0,d0
0000CABE                            
0000CABE                            loc_60EE:
0000CABE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000CAC2 6D00                       		blt.s	loc_60F8
0000CAC4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000CAC8                            
0000CAC8                            loc_60F8:
0000CAC8 31C0 F704                  		move.w	d0,($FFFFF704).w
0000CACC 6100 0000                  		bsr.w	BgScrollSpeed
0000CAD0 6000 0000                  		bra.w	LevSz_Unk
0000CAD4                            ; ===========================================================================
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4                            ; Sonic	start location array
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4                            StartLocArray:
0000CAD4                            		incbin	misc\sloc_lev.bin
0000CB44                            		even
0000CB44                            
0000CB44                            ; ---------------------------------------------------------------------------
0000CB44                            ; Which	256x256	tiles contain loops or roll-tunnels
0000CB44                            ; ---------------------------------------------------------------------------
0000CB44                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000CB44                            ; loop,	loop, tunnel, tunnel
0000CB44                            ; ---------------------------------------------------------------------------
0000CB44                            LoopTileNums:	incbin	misc\loopnums.bin
0000CB60                            		even
0000CB60                            
0000CB60                            ; ===========================================================================
0000CB60                            
0000CB60                            LevSz_Unk:				; XREF: LevelSizeLoad
0000CB60 7000                       		moveq	#0,d0
0000CB62 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB66 E508                       		lsl.b	#2,d0
0000CB68 21FB 00DA F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000CB6E 7000                       		moveq	#0,d0
0000CB70 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB74 E748                       		lsl.w	#3,d0
0000CB76 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000CB7A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000CB7E 24D9                       		move.l	(a1)+,(a2)+
0000CB80 24D9                       		move.l	(a1)+,(a2)+
0000CB82 4E75                       		rts	
0000CB84                            ; End of function LevelSizeLoad
0000CB84                            
0000CB84                            ; ===========================================================================
0000CB84 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000CB8C 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CB94 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CB9C 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBA4 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBAC 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000CBB4 0070 0100 0100 0100        		dc.l $700100, $1000100
0000CBBC                            
0000CBBC                            ; ---------------------------------------------------------------------------
0000CBBC                            ; Subroutine to	set scroll speed of some backgrounds
0000CBBC                            ; ---------------------------------------------------------------------------
0000CBBC                            
0000CBBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CBBC                            
0000CBBC                            
0000CBBC                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000CBBC 4A38 FE30                  		tst.b	($FFFFFE30).w
0000CBC0 6600                       		bne.s	loc_6206
0000CBC2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CBC6 31C0 F714                  		move.w	d0,($FFFFF714).w
0000CBCA 31C1 F708                  		move.w	d1,($FFFFF708).w
0000CBCE 31C1 F710                  		move.w	d1,($FFFFF710).w
0000CBD2 31C1 F718                  		move.w	d1,($FFFFF718).w
0000CBD6                            
0000CBD6                            loc_6206:
0000CBD6 7400                       		moveq	#0,d2
0000CBD8 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000CBDC D442                       		add.w	d2,d2
0000CBDE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000CBE2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000CBE6                            ; End of function BgScrollSpeed
0000CBE6                            
0000CBE6                            ; ===========================================================================
0000CBE6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000CBEA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000CBEE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000CBF2 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_ABZ-BgScroll_Index
0000CBF6                            ; ===========================================================================
0000CBF6                             
0000CBF6                            BgScroll_ABZ:				; XREF: BgScroll_Index
0000CBF6 4E75                       		rts	
0000CBF8                            ; ===========================================================================
0000CBF8                            
0000CBF8                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000CBF8 42B8 F708                  		clr.l	($FFFFF708).w
0000CBFC 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CC00 42B8 F714                  		clr.l	($FFFFF714).w
0000CC04 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CC08 45F8 A800                  		lea	($FFFFA800).w,a2
0000CC0C 429A                       		clr.l	(a2)+
0000CC0E 429A                       		clr.l	(a2)+
0000CC10 429A                       		clr.l	(a2)+
0000CC12 4E75                       		rts 
0000CC14                            ; ===========================================================================
0000CC14                             
0000CC14                            BgScroll_LZ:				; XREF: BgScroll_Index
0000CC14 E280                       		asr.l	#1,d0
0000CC16 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC1A 4E75                       		rts	
0000CC1C                            ; ===========================================================================
0000CC1C                             
0000CC1C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000CC1C 4E75                       		rts	
0000CC1E                            ; ===========================================================================
0000CC1E                             
0000CC1E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000CC1E E280                       		asr.l	#1,d0
0000CC20 0640 00C0                  		addi.w	#$C0,d0
0000CC24 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC28 42B8 F708                  		clr.l	($FFFFF708).w
0000CC2C 4E75                       		rts	
0000CC2E                            ; ===========================================================================
0000CC2E                             
0000CC2E                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000CC2E E980                       		asl.l	#4,d0
0000CC30 2400                       		move.l	d0,d2
0000CC32 E380                       		asl.l	#1,d0
0000CC34 D082                       		add.l	d2,d0
0000CC36 E080                       		asr.l	#8,d0
0000CC38 5240                       		addq.w	#1,d0
0000CC3A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC3E 42B8 F708                  		clr.l	($FFFFF708).w
0000CC42 4E75                       		rts	
0000CC44                            ; ===========================================================================
0000CC44                             
0000CC44                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000CC44 0240 07F8                  		andi.w	#$7F8,d0
0000CC48 E640                       		asr.w	#3,d0
0000CC4A 5240                       		addq.w	#1,d0
0000CC4C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000CC50 4E75                       		rts	
0000CC52                            ; ===========================================================================
0000CC52                             
0000CC52                            BgScroll_End:				; XREF: BgScroll_Index
0000CC52 3038 F700                  		move.w	($FFFFF700).w,d0
0000CC56 E240                       		asr.w	#1,d0
0000CC58 31C0 F708                  		move.w	d0,($FFFFF708).w
0000CC5C 31C0 F710                  		move.w	d0,($FFFFF710).w
0000CC60 E440                       		asr.w	#2,d0
0000CC62 3200                       		move.w	d0,d1
0000CC64 D040                       		add.w	d0,d0
0000CC66 D041                       		add.w	d1,d0
0000CC68 31C0 F718                  		move.w	d0,($FFFFF718).w
0000CC6C 42B8 F70C                  		clr.l	($FFFFF70C).w
0000CC70 42B8 F714                  		clr.l	($FFFFF714).w
0000CC74 42B8 F71C                  		clr.l	($FFFFF71C).w
0000CC78 45F8 A800                  		lea	($FFFFA800).w,a2
0000CC7C 429A                       		clr.l	(a2)+
0000CC7E 429A                       		clr.l	(a2)+
0000CC80 429A                       		clr.l	(a2)+
0000CC82 4E75                       		rts   
0000CC84                            ; ===========================================================================
0000CC84 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000CC8A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000CC90 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000CC96 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000CC9C 4E75                       		rts
0000CC9E                            
0000CC9E                            ; ---------------------------------------------------------------------------
0000CC9E                            ; Background layer deformation subroutines
0000CC9E                            ; ---------------------------------------------------------------------------
0000CC9E                            
0000CC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC9E                            
0000CC9E                            
0000CC9E                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000CC9E 4A38 F744                  		tst.b	($FFFFF744).w
0000CCA2 6700                       		beq.s	loc_628E
0000CCA4 4E75                       		rts	
0000CCA6                            ; ===========================================================================
0000CCA6                            
0000CCA6                            loc_628E:
0000CCA6 4278 F754                  		clr.w	($FFFFF754).w
0000CCAA 4278 F756                  		clr.w	($FFFFF756).w
0000CCAE 4278 F758                  		clr.w	($FFFFF758).w
0000CCB2 4278 F75A                  		clr.w	($FFFFF75A).w
0000CCB6 6100 0000                  		bsr.w	ScrollHoriz
0000CCBA 6100 0000                  		bsr.w	ScrollVertical
0000CCBE 6100 0000                  		bsr.w	DynScrResizeLoad
0000CCC2 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000CCC8 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000CCCE 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000CCD4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000CCDA 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000CCE0 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000CCE6 0C38 0004 F600             		cmpi.b	#4,(Game_Mode).w	;exit if on the Title
0000CCEC 6700                       		beq.s	DLE_NoChg
0000CCEE 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w	;exit if in a Special Stage
0000CCF4 6700                       		beq.s	DLE_NoChg
0000CCF6                            ;		move.l	(Camera_X_pos).w,($FFFFFFC4).w
0000CCF6                            ;		move.l	(Camera_Y_pos).w,($FFFFFFC8).w
0000CCF6 7000                       		moveq	#0,d0
0000CCF8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CCFC D040                       		add.w	d0,d0
0000CCFE 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000CD02 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000CD06                            		
0000CD06                            DLE_NoChg:
0000CD06 4E75                       		rts	
0000CD08                            ; End of function DeformBgLayer
0000CD08                            
0000CD08                            ; ===========================================================================
0000CD08                            ; ---------------------------------------------------------------------------
0000CD08                            ; Offset index for background layer deformation	code
0000CD08                            ; ---------------------------------------------------------------------------
0000CD08 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000CD0C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000CD10 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000CD14 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_ABZ-Deform_Index
0000CD18                            ; ---------------------------------------------------------------------------
0000CD18                            ; Green	Hill Zone background layer deformation code
0000CD18                            ; ---------------------------------------------------------------------------
0000CD18                            
0000CD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD18                            
0000CD18                            
0000CD18                            Deform_GHZ:
0000CD18 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CD1C 48C4                       		ext.l	d4
0000CD1E EB84                       		asl.l	#5,d4
0000CD20 2204                       		move.l	d4,d1
0000CD22 E384                       		asl.l	#1,d4
0000CD24 D881                       		add.l	d1,d4
0000CD26 7C00                       		moveq	#0,d6
0000CD28 6100 0000                  		bsr.w	ScrollBlock6
0000CD2C 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000CD30 48C4                       		ext.l	d4
0000CD32 EF84                       		asl.l	#7,d4
0000CD34 7C00                       		moveq	#0,d6
0000CD36 6100 0000                  		bsr.w	ScrollBlock5
0000CD3A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning of buffer address to a1
0000CD3E                            
0000CD3E 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD42 4440                       		neg.w	d0			; negate (positive to negative)
0000CD44 4840                       		swap	d0			; send to the left side of d0
0000CD46 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD4A 4440                       		neg.w	d0			; negate (positive to negative)
0000CD4C E040                       		asr.w	#8,d0			; divide by 8 (Slow down the scroll position)
0000CD4E 323C 0078                  		move.w	#121-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CD52                            GHZ_DeformLoop_1:
0000CD52 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CD54 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_1	; repeat d1 number of scanlines
0000CD58                            
0000CD58 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD5C 4440                       		neg.w	d0			; negate (positive to negative)
0000CD5E 4840                       		swap	d0			; send to the left side of d0
0000CD60 3038 F700                  		move.w	($FFFFF700).w,d0	; load screen's X position
0000CD64 4440                       		neg.w	d0			; negate (positive to negative)
0000CD66 E240                       		asr.w	#1,d0			; divide by 1 (Slow down the scroll position)
0000CD68 323C 0067                  		move.w	#104-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000CD6C                            GHZ_DeformLoop_2:
0000CD6C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000CD6E 51C9 FFFC                  		dbf	d1,GHZ_DeformLoop_2	; repeat d1 number of scanlines
0000CD72 4E75                       		rts	
0000CD74                            ; End of function Deform_GHZ
0000CD74                            ;		rts
0000CD74                            ; End of function Deform_GHZ
0000CD74                             
0000CD74                             
0000CD74                            ; ===========================================================================
0000CD74                            ; ---------------------------------------------------------------------------
0000CD74                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000CD74                            ; ---------------------------------------------------------------------------
0000CD74                            
0000CD74                            Deform_LZ:
0000CD74 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
0000CD76 3838 F73A                  		move.w	($FFFFF73A).w,d4			; load horizontal movement distance (Since last frame)
0000CD7A 48C4                       		ext.l	d4					; extend to long-word signed
0000CD7C E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000CD7E 3A38 F73C                  		move.w	($FFFFF73C).w,d5			; load vertical movement distance (Since last frame)
0000CD82 48C5                       		ext.l	d5					; extend to long-word signed
0000CD84 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
0000CD86 6100 0000                  		bsr.w	ScrollBlock1				; adjust BG scroll positions (and set draw code direction flags)
0000CD8A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w		; set BG V-scroll position
0000CD90 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load H-scroll buffer
0000CD94 3038 F700                  		move.w	($FFFFF700).w,d0			; load FG X position
0000CD98 4440                       		neg.w	d0					; reverse
0000CD9A 4840                       		swap	d0					; send to upper word
0000CD9C 3038 F708                  		move.w	($FFFFF708).w,d0			; load BG X position
0000CDA0 4440                       		neg.w	d0					; reverse
0000CDA2 7600                       		moveq	#$00,d3					; clear d3
0000CDA4 1638 F7D8                  		move.b	($FFFFF7D8).w,d3			; load wave-scroll timer
0000CDA8 0678 0080 F7D8             		addi.w	#$0080,($FFFFF7D8).w			; increase wave-scroll timer
0000CDAE 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000CDB2 3238 F646                  		move.w	($FFFFF646).w,d1			; load water line position
0000CDB6 9278 F704                  		sub.w	($FFFFF704).w,d1			; minus FG Y position
0000CDBA 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
0000CDBC B242                       		cmp.w	d2,d1					; is the water line below the screen?
0000CDBE 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000CDC0 3202                       		move.w	d2,d1					; set at maximum
0000CDC2                            
0000CDC2                            DLZ_NoWater:
0000CDC2 9441                       		sub.w	d1,d2					; subtract from water-line count
0000CDC4 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
0000CDC6 5301                       		subq.b	#$01,d1					; decrease above water count
0000CDC8 6500                       		bcs.s	DLZ_Water				; if finished, branch
0000CDCA                            
0000CDCA                            DLZ_Above:
0000CDCA 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
0000CDCC 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000CDD0                            
0000CDD0                            DLZ_Water:
0000CDD0 5302                       		subq.b	#$01,d2					; decrease below water count
0000CDD2 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000CDD4 3200                       		move.w	d0,d1					; copy BG position back to d1
0000CDD6 4840                       		swap	d0					; move FG position back to lower word in d0
0000CDD8 3803                       		move.w	d3,d4					; copy sroll timer for BG use
0000CDDA D638 F705                  		add.b	($FFFFF704+$01).w,d3			; add FG Y position
0000CDDE D838 F70D                  		add.b	($FFFFF70C+$01).w,d4			; add BG Y position
0000CDE2 D643                       		add.w	d3,d3					; multiply by word size (2)
0000CDE4 D844                       		add.w	d4,d4					; ''
0000CDE6 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
0000CDEC D6C4                       		adda.w	d4,a3					; advance to correct starting point
0000CDEE 1813                       		move.b	(a3),d4					; get current position byte
0000CDF0 E404                       		asr.b	#$02,d4					; get only the position bits
0000CDF2 4884                       		ext.w	d4					; extend to word
0000CDF4 D244                       		add.w	d4,d1					; adjust BG's current position
0000CDF6 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000CDFA 1812                       		move.b	(a2),d4					; get current position byte
0000CDFC E404                       		asr.b	#$02,d4					; get only the position bits
0000CDFE 4884                       		ext.w	d4					; extend to word
0000CE00 D044                       		add.w	d4,d0					; adjust FG's current position
0000CE02                            
0000CE02                            DLZ_Below:
0000CE02 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
0000CE04 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
0000CE06 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
0000CE08 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000CE0A 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000CE0E                            
0000CE0E                            DLZ_Finish:
0000CE0E 4E75                       		rts						; return
0000CE10                            
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            ; Scroll data for the FG
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            
0000CE10                            DLZ_WaveFG:
0000CE10                            		rept	$02
0000CE10                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
0000CE10 0001 0400 0401 0800 0801+  		endr
0000D210                            
0000D210                            ; ---------------------------------------------------------------------------
0000D210                            ; Scroll data for the BG
0000D210                            ; ---------------------------------------------------------------------------
0000D210                            
0000D210                            DLZ_WaveBG:	rept	$04
0000D210                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
0000D210                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
0000D210                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
0000D210                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
0000D210                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
0000D210                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
0000D210                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
0000D210                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
0000D210 FC01 0000 0000 0000 0000+  		endr
0000D610                            
0000D610                            ; =========================================================================== 
0000D610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D610                            
0000D610                            Deform_ABZ:
0000D610 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000D616 6500 0000                  		bcs.w	Deform_SYZ 
0000D61A 4EF9 0000 0000             		jmp	Deform_SBZ 
0000D620                             
0000D620                            Deform_MZ:
0000D620 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D624 48C4                       		ext.l	d4
0000D626 ED84                       		asl.l	#6,d4
0000D628 2204                       		move.l	d4,d1
0000D62A E384                       		asl.l	#1,d4
0000D62C D881                       		add.l	d1,d4
0000D62E 7C02                       		moveq	#2,d6
0000D630 6100 0000                  		bsr.w	ScrollBlock4
0000D634 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D638 48C4                       		ext.l	d4
0000D63A ED84                       		asl.l	#6,d4
0000D63C 7C06                       		moveq	#6,d6
0000D63E 6100 0000                  		bsr.w	ScrollBlock6
0000D642 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D646 48C4                       		ext.l	d4
0000D648 EF84                       		asl.l	#7,d4
0000D64A 7C04                       		moveq	#4,d6
0000D64C 6100 0000                  		bsr.w	ScrollBlock5
0000D650 303C 0200                  		move.w	#$200,d0
0000D654 3238 F704                  		move.w	($FFFFF704).w,d1
0000D658 0441 01C8                  		subi.w	#$1C8,d1
0000D65C 6500                       		bcs.s	Deform_MZ_1
0000D65E 3401                       		move.w	d1,d2
0000D660 D241                       		add.w	d1,d1
0000D662 D242                       		add.w	d2,d1
0000D664 E441                       		asr.w	#2,d1
0000D666 D041                       		add.w	d1,d0
0000D668                             
0000D668                            Deform_MZ_1:				; XREF: Deform_MZ
0000D668 31C0 F714                  		move.w	d0,($FFFFF714).w
0000D66C 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000D670 6100 0000                  		bsr.w	ScrollBlock3
0000D674 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D67A 1038 F756                  		move.b	($FFFFF756).w,d0
0000D67E 8038 F758                  		or.b	($FFFFF758).w,d0
0000D682 8138 F75A                  		or.b	d0,($FFFFF75A).w
0000D686 4238 F756                  		clr.b	($FFFFF756).w
0000D68A 4238 F758                  		clr.b	($FFFFF758).w
0000D68E 43F8 A800                  		lea	($FFFFA800).w,a1
0000D692 3438 F700                  		move.w	($FFFFF700).w,d2
0000D696 4442                       		neg.w	d2
0000D698 3002                       		move.w	d2,d0
0000D69A E440                       		asr.w	#2,d0
0000D69C 9042                       		sub.w	d2,d0
0000D69E 48C0                       		ext.l	d0
0000D6A0 E780                       		asl.l	#3,d0
0000D6A2 81FC 0005                  		divs.w	#5,d0
0000D6A6 48C0                       		ext.l	d0
0000D6A8 E980                       		asl.l	#4,d0
0000D6AA E180                       		asl.l	#8,d0
0000D6AC 7600                       		moveq	#0,d3
0000D6AE 3602                       		move.w	d2,d3
0000D6B0 E243                       		asr.w	#1,d3
0000D6B2 323C 0004                  		move.w	#4,d1
0000D6B6                             
0000D6B6                            Deform_MZ_2:				; XREF: Deform_MZ
0000D6B6 32C3                       		move.w	d3,(a1)+
0000D6B8 4843                       		swap	d3
0000D6BA D680                       		add.l	d0,d3
0000D6BC 4843                       		swap	d3
0000D6BE 51C9 FFF6                  		dbf	d1,Deform_MZ_2
0000D6C2 3038 F718                  		move.w	($FFFFF718).w,d0
0000D6C6 4440                       		neg.w	d0
0000D6C8 323C 0001                  		move.w	#1,d1
0000D6CC                             
0000D6CC                            Deform_MZ_3:				; XREF: Deform_MZ
0000D6CC 32C0                       		move.w	d0,(a1)+
0000D6CE 51C9 FFFC                  		dbf	d1,Deform_MZ_3
0000D6D2 3038 F710                  		move.w	($FFFFF710).w,d0
0000D6D6 4440                       		neg.w	d0
0000D6D8 323C 0008                  		move.w	#8,d1
0000D6DC                             
0000D6DC                            Deform_MZ_4:				; XREF: Deform_MZ
0000D6DC 32C0                       		move.w	d0,(a1)+
0000D6DE 51C9 FFFC                  		dbf	d1,Deform_MZ_4
0000D6E2 3038 F708                  		move.w	($FFFFF708).w,d0
0000D6E6 4440                       		neg.w	d0
0000D6E8 323C 000F                  		move.w	#$F,d1
0000D6EC                             
0000D6EC                            Deform_MZ_5:				; XREF: Deform_MZ
0000D6EC 32C0                       		move.w	d0,(a1)+
0000D6EE 51C9 FFFC                  		dbf	d1,Deform_MZ_5
0000D6F2 45F8 A800                  		lea	($FFFFA800).w,a2
0000D6F6 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D6FA 0440 0200                  		subi.w	#$200,d0
0000D6FE 3400                       		move.w	d0,d2
0000D700 0C40 0100                  		cmpi.w	#$100,d0
0000D704 6500                       		bcs.s	Deform_MZ_6
0000D706 303C 0100                  		move.w	#$100,d0
0000D70A                             
0000D70A                            Deform_MZ_6:				; XREF: Deform_MZ
0000D70A 0240 01F0                  		andi.w	#$1F0,d0
0000D70E E648                       		lsr.w	#3,d0
0000D710 45F2 0000                  		lea	(a2,d0.w),a2
0000D714 6000 0000                  		bra.w	Deform_All
0000D718                            ; ===========================================================================
0000D718                             
0000D718                            Deform_SLZ:
0000D718 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D71C 48C5                       		ext.l	d5
0000D71E EF85                       		asl.l	#7,d5
0000D720 6100 0000                  		bsr.w	ScrollBlock2
0000D724 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D72A 43F8 A800                  		lea	($FFFFA800).w,a1
0000D72E 3438 F700                  		move.w	($FFFFF700).w,d2
0000D732 4442                       		neg.w	d2
0000D734 3002                       		move.w	d2,d0
0000D736 E640                       		asr.w	#3,d0
0000D738 9042                       		sub.w	d2,d0
0000D73A 48C0                       		ext.l	d0
0000D73C E980                       		asl.l	#4,d0
0000D73E 81FC 001C                  		divs.w	#$1C,d0
0000D742 48C0                       		ext.l	d0
0000D744 E980                       		asl.l	#4,d0
0000D746 E180                       		asl.l	#8,d0
0000D748 7600                       		moveq	#0,d3
0000D74A 3602                       		move.w	d2,d3
0000D74C 323C 001B                  		move.w	#$1B,d1
0000D750                             
0000D750                            Deform_SLZ_1:				; XREF: Deform_MZ
0000D750 32C3                       		move.w	d3,(a1)+
0000D752 4843                       		swap	d3
0000D754 D680                       		add.l	d0,d3
0000D756 4843                       		swap	d3
0000D758 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
0000D75C 3002                       		move.w	d2,d0
0000D75E E640                       		asr.w	#3,d0
0000D760 3200                       		move.w	d0,d1
0000D762 E241                       		asr.w	#1,d1
0000D764 D041                       		add.w	d1,d0
0000D766 323C 0004                  		move.w	#4,d1
0000D76A                             
0000D76A                            Deform_SLZ_2:				; XREF: Deform_MZ
0000D76A 32C0                       		move.w	d0,(a1)+
0000D76C 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
0000D770 3002                       		move.w	d2,d0
0000D772 E440                       		asr.w	#2,d0
0000D774 323C 0004                  		move.w	#4,d1
0000D778                             
0000D778                            Deform_SLZ_3:				; XREF: Deform_MZ
0000D778 32C0                       		move.w	d0,(a1)+
0000D77A 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
0000D77E 3002                       		move.w	d2,d0
0000D780 E240                       		asr.w	#1,d0
0000D782 323C 001D                  		move.w	#$1D,d1
0000D786                             
0000D786                            Deform_SLZ_4:				; XREF: Deform_MZ
0000D786 32C0                       		move.w	d0,(a1)+
0000D788 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
0000D78C 45F8 A800                  		lea	($FFFFA800).w,a2
0000D790 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D794 3400                       		move.w	d0,d2
0000D796 0440 00C0                  		subi.w	#$C0,d0	; 'À'
0000D79A 0240 03F0                  		andi.w	#$3F0,d0
0000D79E E648                       		lsr.w	#3,d0
0000D7A0 45F2 0000                  		lea	(a2,d0.w),a2
0000D7A4                             
0000D7A4                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
0000D7A4 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000D7A8 323C 000E                  		move.w	#$E,d1
0000D7AC 3038 F700                  		move.w	($FFFFF700).w,d0
0000D7B0 4440                       		neg.w	d0
0000D7B2 4840                       		swap	d0
0000D7B4 0242 000F                  		andi.w	#$F,d2
0000D7B8 D442                       		add.w	d2,d2
0000D7BA 301A                       		move.w	(a2)+,d0
0000D7BC 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
0000D7C0                            ; End of function Deform_MZ
0000D7C0                             
0000D7C0                            ; ===========================================================================
0000D7C0                             
0000D7C0                            Deform_All_1:				; XREF: Deform_All
0000D7C0 301A                       		move.w	(a2)+,d0
0000D7C2                             
0000D7C2                            Deform_All_2:
0000D7C2 22C0                       		move.l	d0,(a1)+
0000D7C4 22C0                       		move.l	d0,(a1)+
0000D7C6 22C0                       		move.l	d0,(a1)+
0000D7C8 22C0                       		move.l	d0,(a1)+
0000D7CA 22C0                       		move.l	d0,(a1)+
0000D7CC 22C0                       		move.l	d0,(a1)+
0000D7CE 22C0                       		move.l	d0,(a1)+
0000D7D0 22C0                       		move.l	d0,(a1)+
0000D7D2 22C0                       		move.l	d0,(a1)+
0000D7D4 22C0                       		move.l	d0,(a1)+
0000D7D6 22C0                       		move.l	d0,(a1)+
0000D7D8 22C0                       		move.l	d0,(a1)+
0000D7DA 22C0                       		move.l	d0,(a1)+
0000D7DC 22C0                       		move.l	d0,(a1)+
0000D7DE 22C0                       		move.l	d0,(a1)+
0000D7E0 22C0                       		move.l	d0,(a1)+
0000D7E2 51C9 FFDC                  		dbf	d1,Deform_All_1
0000D7E6 4E75                       		rts	
0000D7E8                             
0000D7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7E8                             
0000D7E8                             
0000D7E8                            Deform_SYZ:
0000D7E8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D7EC 48C5                       		ext.l	d5
0000D7EE E985                       		asl.l	#4,d5
0000D7F0 2205                       		move.l	d5,d1
0000D7F2 E385                       		asl.l	#1,d5
0000D7F4 DA81                       		add.l	d1,d5
0000D7F6 6100 0000                  		bsr.w	ScrollBlock2
0000D7FA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D800 43F8 A800                  		lea	($FFFFA800).w,a1
0000D804 3438 F700                  		move.w	($FFFFF700).w,d2
0000D808 4442                       		neg.w	d2
0000D80A 3002                       		move.w	d2,d0
0000D80C E640                       		asr.w	#3,d0
0000D80E 9042                       		sub.w	d2,d0
0000D810 48C0                       		ext.l	d0
0000D812 E780                       		asl.l	#3,d0
0000D814 81FC 0008                  		divs.w	#8,d0
0000D818 48C0                       		ext.l	d0
0000D81A E980                       		asl.l	#4,d0
0000D81C E180                       		asl.l	#8,d0
0000D81E 7600                       		moveq	#0,d3
0000D820 3602                       		move.w	d2,d3
0000D822 E243                       		asr.w	#1,d3
0000D824 323C 0007                  		move.w	#7,d1
0000D828                             
0000D828                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000D828 32C3                       		move.w	d3,(a1)+
0000D82A 4843                       		swap	d3
0000D82C D680                       		add.l	d0,d3
0000D82E 4843                       		swap	d3
0000D830 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
0000D834 3002                       		move.w	d2,d0
0000D836 E640                       		asr.w	#3,d0
0000D838 323C 0004                  		move.w	#4,d1
0000D83C                             
0000D83C                            Deform_SYZ_2:				; XREF: Deform_SYZ
0000D83C 32C0                       		move.w	d0,(a1)+
0000D83E 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
0000D842 3002                       		move.w	d2,d0
0000D844 E440                       		asr.w	#2,d0
0000D846 323C 0005                  		move.w	#5,d1
0000D84A                             
0000D84A                            Deform_SYZ_3:				; XREF: Deform_SYZ
0000D84A 32C0                       		move.w	d0,(a1)+
0000D84C 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
0000D850 3002                       		move.w	d2,d0
0000D852 3202                       		move.w	d2,d1
0000D854 E241                       		asr.w	#1,d1
0000D856 9041                       		sub.w	d1,d0
0000D858 48C0                       		ext.l	d0
0000D85A E980                       		asl.l	#4,d0
0000D85C 81FC 000E                  		divs.w	#$E,d0
0000D860 48C0                       		ext.l	d0
0000D862 E980                       		asl.l	#4,d0
0000D864 E180                       		asl.l	#8,d0
0000D866 7600                       		moveq	#0,d3
0000D868 3602                       		move.w	d2,d3
0000D86A E243                       		asr.w	#1,d3
0000D86C 323C 000D                  		move.w	#$D,d1
0000D870                             
0000D870                            Deform_SYZ_4:				; XREF: Deform_SYZ
0000D870 32C3                       		move.w	d3,(a1)+
0000D872 4843                       		swap	d3
0000D874 D680                       		add.l	d0,d3
0000D876 4843                       		swap	d3
0000D878 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
0000D87C 45F8 A800                  		lea	($FFFFA800).w,a2
0000D880 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D884 3400                       		move.w	d0,d2
0000D886 0240 01F0                  		andi.w	#$1F0,d0
0000D88A E648                       		lsr.w	#3,d0
0000D88C 45F2 0000                  		lea	(a2,d0.w),a2
0000D890 6000 FF12                  		bra.w	Deform_All
0000D894                            ; End of function Deform_SYZ
0000D894                             
0000D894                             
0000D894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D894                             
0000D894                             
0000D894                            Deform_SBZ:
0000D894 4A38 FE11                  		tst.b	($FFFFFE11).w
0000D898 6600 0000                  		bne.w	Deform_SBZ_Act2
0000D89C 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8A0 48C4                       		ext.l	d4
0000D8A2 EF84                       		asl.l	#7,d4
0000D8A4 7C02                       		moveq	#2,d6
0000D8A6 6100 0000                  		bsr.w	ScrollBlock4
0000D8AA 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8AE 48C4                       		ext.l	d4
0000D8B0 ED84                       		asl.l	#6,d4
0000D8B2 7C06                       		moveq	#6,d6
0000D8B4 6100 0000                  		bsr.w	ScrollBlock6
0000D8B8 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D8BC 48C4                       		ext.l	d4
0000D8BE EB84                       		asl.l	#5,d4
0000D8C0 2204                       		move.l	d4,d1
0000D8C2 E384                       		asl.l	#1,d4
0000D8C4 D881                       		add.l	d1,d4
0000D8C6 7C04                       		moveq	#4,d6
0000D8C8 6100 0000                  		bsr.w	ScrollBlock5
0000D8CC 7800                       		moveq	#0,d4
0000D8CE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D8D2 48C5                       		ext.l	d5
0000D8D4 EB85                       		asl.l	#5,d5
0000D8D6 6100 0000                  		bsr.w	ScrollBlock1_2
0000D8DA 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D8DE 31C0 F714                  		move.w	d0,($FFFFF714).w
0000D8E2 31C0 F71C                  		move.w	d0,($FFFFF71C).w
0000D8E6 31C0 F618                  		move.w	d0,($FFFFF618).w
0000D8EA 1038 F756                  		move.b	($FFFFF756).w,d0
0000D8EE 8038 F75A                  		or.b	($FFFFF75A).w,d0
0000D8F2 8138 F758                  		or.b	d0,($FFFFF758).w
0000D8F6 4238 F756                  		clr.b	($FFFFF756).w
0000D8FA 4238 F75A                  		clr.b	($FFFFF75A).w
0000D8FE 43F8 A800                  		lea	($FFFFA800).w,a1
0000D902 3438 F700                  		move.w	($FFFFF700).w,d2
0000D906 4442                       		neg.w	d2
0000D908 E442                       		asr.w	#2,d2
0000D90A 3002                       		move.w	d2,d0
0000D90C E240                       		asr.w	#1,d0
0000D90E 9042                       		sub.w	d2,d0
0000D910 48C0                       		ext.l	d0
0000D912 E780                       		asl.l	#3,d0
0000D914 81FC 0004                  		divs.w	#4,d0
0000D918 48C0                       		ext.l	d0
0000D91A E980                       		asl.l	#4,d0
0000D91C E180                       		asl.l	#8,d0
0000D91E 7600                       		moveq	#0,d3
0000D920 3602                       		move.w	d2,d3
0000D922 323C 0003                  		move.w	#3,d1
0000D926                             
0000D926                            Deform_SBZ_1:				; XREF: Deform_SBZ
0000D926 32C3                       		move.w	d3,(a1)+
0000D928 4843                       		swap	d3
0000D92A D680                       		add.l	d0,d3
0000D92C 4843                       		swap	d3
0000D92E 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
0000D932 3038 F718                  		move.w	($FFFFF718).w,d0
0000D936 4440                       		neg.w	d0
0000D938 323C 0009                  		move.w	#9,d1
0000D93C                             
0000D93C                            Deform_SBZ_2:				; XREF: Deform_SBZ
0000D93C 32C0                       		move.w	d0,(a1)+
0000D93E 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
0000D942 3038 F710                  		move.w	($FFFFF710).w,d0
0000D946 4440                       		neg.w	d0
0000D948 323C 0006                  		move.w	#6,d1
0000D94C                             
0000D94C                            Deform_SBZ_3:				; XREF: Deform_SBZ
0000D94C 32C0                       		move.w	d0,(a1)+
0000D94E 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
0000D952 3038 F708                  		move.w	($FFFFF708).w,d0
0000D956 4440                       		neg.w	d0
0000D958 323C 000A                  		move.w	#$A,d1
0000D95C                             
0000D95C                            Deform_SBZ_4:				; XREF: Deform_SBZ
0000D95C 32C0                       		move.w	d0,(a1)+
0000D95E 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
0000D962 45F8 A800                  		lea	($FFFFA800).w,a2
0000D966 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000D96A 3400                       		move.w	d0,d2
0000D96C 0240 01F0                  		andi.w	#$1F0,d0
0000D970 E648                       		lsr.w	#3,d0
0000D972 45F2 0000                  		lea	(a2,d0.w),a2
0000D976 6000 FE2C                  		bra.w	Deform_All
0000D97A                            ; ===========================================================================
0000D97A                             
0000D97A                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000D97A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000D97E 48C4                       		ext.l	d4
0000D980 ED84                       		asl.l	#6,d4
0000D982 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000D986 48C5                       		ext.l	d5
0000D988 EB85                       		asl.l	#5,d5
0000D98A 6100 0000                  		bsr.w	ScrollBlock1
0000D98E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000D994 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000D998 323C 00DF                  		move.w	#$DF,d1	; 'ß'
0000D99C 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9A0 4440                       		neg.w	d0
0000D9A2 4840                       		swap	d0
0000D9A4 3038 F708                  		move.w	($FFFFF708).w,d0
0000D9A8 4440                       		neg.w	d0
0000D9AA                             
0000D9AA                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
0000D9AA 22C0                       		move.l	d0,(a1)+
0000D9AC 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
0000D9B0 4E75                       		rts	
0000D9B2                            ; End of function Deform_SBZ
0000D9B2                            
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            
0000D9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B2                            
0000D9B2                            
0000D9B2                            ScrollHoriz:				; XREF: DeformBgLayer
0000D9B2 3838 F700                  		move.w	($FFFFF700).w,d4
0000D9B6 6100                       		bsr.s	ScrollHoriz2
0000D9B8 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9BC 0240 0010                  		andi.w	#$10,d0
0000D9C0 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000D9C4 B300                       		eor.b	d1,d0
0000D9C6 6600                       		bne.s	locret_65B0
0000D9C8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000D9CE 3038 F700                  		move.w	($FFFFF700).w,d0
0000D9D2 9044                       		sub.w	d4,d0
0000D9D4 6A00                       		bpl.s	loc_65AA
0000D9D6 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000D9DC 4E75                       		rts	
0000D9DE                            ; ===========================================================================
0000D9DE                            
0000D9DE                            loc_65AA:
0000D9DE 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000D9E4                            
0000D9E4                            locret_65B0:
0000D9E4 4E75                       		rts	
0000D9E6                            ; End of function ScrollHoriz
0000D9E6                            
0000D9E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9E6                            
0000D9E6                            
0000D9E6                            ScrollHoriz2:				; XREF: ScrollHoriz
0000D9E6 3838 F700                  		move.w	($FFFFF700).w,d4
0000D9EA 4A38 F623                  		tst.b	($FFFFF623).w
0000D9EE 6600                       		bne.s	loc_B520
0000D9F0 3238 FC00                  		move.w	($FFFFFC00).w,d1
0000D9F4 6700                       		beq.s	loc_B50C
0000D9F6 0441 0100                  		sub.w	#$100,d1
0000D9FA 31C1 FC00                  		move.w	d1,($FFFFFC00).w
0000D9FE 7200                       		moveq	#0,d1
0000DA00 1238 FC00                  		move.b	($FFFFFC00).w,d1
0000DA04 E509                       		lsl.b	#2,d1
0000DA06 5801                       		addq.b	#4,d1
0000DA08 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000DA0C 9001                       		sub.b	d1,d0
0000DA0E 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000DA12 3031 0000                  		move.w	(a1,d0.w),d0
0000DA16 0240 3FFF                  		and.w	#$3FFF,d0
0000DA1A 6000                       		bra.s	loc_B510
0000DA1C                            loc_B50C:
0000DA1C 3038 D008                  		move.w	($FFFFD008).w,d0
0000DA20                            loc_B510:
0000DA20 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DA24 0440 0090                  		sub.w	#$90,d0
0000DA28 6B00                       		bmi.s	loc_B522
0000DA2A 0440 0010                  		sub.w	#$10,d0
0000DA2E 6A00                       		bpl.s	loc_B536
0000DA30 4278 F73A                  		clr.w	($FFFFF73A).w
0000DA34                            loc_B520:
0000DA34 4E75                       		rts
0000DA36                            ;--------------------------------------------------------------------------------
0000DA36                            loc_B522:
0000DA36 0C40 FFF0                  		cmp.w	#-$10,d0
0000DA3A 6E00                       		bgt.s	loc_B52C
0000DA3C 303C FFF0                  		move.w	#-$10,d0
0000DA40                            loc_B52C:
0000DA40 D078 F700                  		add.w	($FFFFF700).w,d0
0000DA44 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000DA48 6E00                       		bgt.s	loc_B54C
0000DA4A 3038 F728                  		move.w	($FFFFF728).w,d0
0000DA4E 6000                       		bra.s	loc_B54C
0000DA50                            loc_B536:
0000DA50 0C40 0010                  		cmp.w	#$10,d0
0000DA54 6500                       		bcs.s	loc_B540
0000DA56 303C 0010                  		move.w	#$10,d0
0000DA5A                            
0000DA5A                            loc_B540:
0000DA5A D078 F700                  		add.w	($FFFFF700).w,d0
0000DA5E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000DA62 6D00                       		blt.s	loc_B54C
0000DA64 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000DA68                            loc_B54C:
0000DA68 3200                       		move.w	d0,d1
0000DA6A 9278 F700                  		sub.w	($FFFFF700).w,d1
0000DA6E E141                       		asl.w	#8,d1
0000DA70 31C0 F700                  		move.w	d0,($FFFFF700).w
0000DA74 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000DA78 4E75                       		rts
0000DA7A                            
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000DA7A                            ; ---------------------------------------------------------------------------
0000DA7A                            
0000DA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA7A                            
0000DA7A                            
0000DA7A                            ScrollVertical:				; XREF: DeformBgLayer
0000DA7A 7200                       	moveq	#0,d1
0000DA7C                            ;	move.w	y_pos(a0),d0
0000DA7C 7413                       	moveq	#$13,d2		; set default character height
0000DA7E 9438 D016                  	sub.b	(Maincharacter+y_radius).w,d2	; get difference to character's actual height
0000DA82 4442                       	neg.w	d2		; we need the inverse
0000DA84                            
0000DA84 7000                       	moveq	#0,d0
0000DA86 1038 D026                  	move.b	(Maincharacter+angle).w,d0
0000DA8A 0640 0040                  	add.w	#$40,d0
0000DA8E 4EB9 0000 8DA4             	jsr	(CalcSine).l
0000DA94 C1C2                       	muls.w	d2,d0
0000DA96 48C0                       	ext.l	d0
0000DA98 E080                       	asr.l	#8,d0
0000DA9A D078 D00C                  	add.w	(Maincharacter+y_pos).w,d0	; get player's y position
0000DA9E 9078 F704                  	sub.w	($FFFFF704).w,d0
0000DAA2 4A78 F72C                  	tst.w	(Camera_Min_Y_pos).w		; Does this level y-wrap?
0000DAA6 6A00 0000                  	bpl.w	loc_662A			; If not, branch and skip looping
0000DAAA 0C78 0060 F73E             	cmpi.w	#$60,(Camera_Y_pos_bias).w	; Is screen in its default position?
0000DAB0 6700                       	beq.s	@locvert				; If so, branch, and loop
0000DAB2                            	; It's not at its default position; Sonic must be looking up or down
0000DAB2 4A78 C903                  	tst.w	(Sonic_Look_delay_counter).w	; Is Sonic still looking up or down?
0000DAB6 6600                       	bne.s	@locvert				; If so, branch, and keep looping, Sonic ain't moving anywhere!
0000DAB8                            	; So, Sonic was looking up or down, but now he isn't
0000DAB8 31FC 0060 F73E             	move.w	#$60,(Camera_Y_pos_bias).w	; move the screen to its default position quickly
0000DABE                            ;		btst	#2,($FFFFD022).w
0000DABE                            ;		beq.s	loc_662A
0000DABE                            
0000DABE                            @locvert:
0000DABE 0240 07FF                  		andi.w	#$7FF,d0			; Forever loop
0000DAC2                            		
0000DAC2                            loc_662A:
0000DAC2 0838 0001 D022             		btst	#1,($FFFFD022).w
0000DAC8 6700                       		beq.s	loc_664A
0000DACA 0640 0020                  		addi.w	#$20,d0
0000DACE 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DAD2 6500                       		bcs.s	loc_6696
0000DAD4 0440 0040                  		subi.w	#$40,d0
0000DAD8 6400                       		bcc.s	loc_6696
0000DADA 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DADE 6600                       		bne.s	loc_66A8
0000DAE0 6000                       		bra.s	loc_6656
0000DAE2                            ; ===========================================================================
0000DAE2                            
0000DAE2                            loc_664A:
0000DAE2 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000DAE6 6600                       		bne.s	loc_665C
0000DAE8 4A38 F75C                  		tst.b	($FFFFF75C).w
0000DAEC 6600                       		bne.s	loc_66A8
0000DAEE                            
0000DAEE                            loc_6656:
0000DAEE 4278 F73C                  		clr.w	($FFFFF73C).w
0000DAF2 4E75                       		rts	
0000DAF4                            ; ===========================================================================
0000DAF4                            
0000DAF4                            loc_665C:
0000DAF4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0000DAFA 6600                       		bne.s	loc_6684
0000DAFC 3238 D020                  		move.w	(Maincharacter+inertia).w,d1
0000DB00 6A00                       		bpl.s	loc_666C
0000DB02 4441                       		neg.w	d1
0000DB04                            
0000DB04                            loc_666C:
0000DB04 0C41 0800                  		cmpi.w	#$800,d1
0000DB08 6400                       		bcc.s	loc_6696
0000DB0A 323C 0600                  		move.w	#$600,d1
0000DB0E 0C40 0006                  		cmpi.w	#6,d0
0000DB12 6E00                       		bgt.s	loc_66F6
0000DB14 0C40 FFFA                  		cmpi.w	#-6,d0
0000DB18 6D00                       		blt.s	loc_66C0
0000DB1A 6000                       		bra.s	loc_66AE
0000DB1C                            ; ===========================================================================
0000DB1C                            
0000DB1C                            loc_6684:
0000DB1C 323C 0200                  		move.w	#$200,d1
0000DB20 0C40 0002                  		cmpi.w	#2,d0
0000DB24 6E00                       		bgt.s	loc_66F6
0000DB26 0C40 FFFE                  		cmpi.w	#-2,d0
0000DB2A 6D00                       		blt.s	loc_66C0
0000DB2C 6000                       		bra.s	loc_66AE
0000DB2E                            ; ===========================================================================
0000DB2E                            
0000DB2E                            loc_6696:
0000DB2E 323C 1000                  		move.w	#$1000,d1
0000DB32 0C40 0010                  		cmpi.w	#$10,d0
0000DB36 6E00                       		bgt.s	loc_66F6
0000DB38 0C40 FFF0                  		cmpi.w	#-$10,d0
0000DB3C 6D00                       		blt.s	loc_66C0
0000DB3E 6000                       		bra.s	loc_66AE
0000DB40                            ; ===========================================================================
0000DB40                            
0000DB40                            loc_66A8:
0000DB40 7000                       		moveq	#0,d0
0000DB42 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000DB46                            
0000DB46                            loc_66AE:
0000DB46 7200                       		moveq	#0,d1
0000DB48 3200                       		move.w	d0,d1
0000DB4A D278 F704                  		add.w	($FFFFF704).w,d1
0000DB4E 4A40                       		tst.w	d0
0000DB50 6A00 0000                  		bpl.w	loc_6700
0000DB54 6000 0000                  		bra.w	loc_66CC
0000DB58                            ; ===========================================================================
0000DB58                            
0000DB58                            loc_66C0:
0000DB58 4441                       		neg.w	d1
0000DB5A 48C1                       		ext.l	d1
0000DB5C E181                       		asl.l	#8,d1
0000DB5E D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DB62 4841                       		swap	d1
0000DB64                            
0000DB64                            loc_66CC:
0000DB64 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000DB68 6E00                       		bgt.s	loc_6724
0000DB6A 0C41 FF00                  		cmpi.w	#-$100,d1
0000DB6E 6E00                       		bgt.s	loc_66F0
0000DB70 0241 07FF                  		andi.w	#$7FF,d1
0000DB74                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DB74 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000DB7A                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DB7A 6000                       		bra.s	loc_6724
0000DB7C                            ; ===========================================================================
0000DB7C                            
0000DB7C                            loc_66F0:
0000DB7C 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000DB80 6000                       		bra.s	loc_6724
0000DB82                            ; ===========================================================================
0000DB82                            
0000DB82                            loc_66F6:
0000DB82 48C1                       		ext.l	d1
0000DB84 E181                       		asl.l	#8,d1
0000DB86 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000DB8A 4841                       		swap	d1
0000DB8C                            
0000DB8C                            loc_6700:
0000DB8C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000DB90 6D00                       		blt.s	loc_6724
0000DB92 0441 0800                  		subi.w	#$800,d1
0000DB96 6500                       		bcs.s	loc_6720
0000DB98                            ;		andi.w	#$7FF,($FFFFD00C).w
0000DB98 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000DB9E                            ;		andi.w	#$3FF,($FFFFF70C).w
0000DB9E 6000                       		bra.s	loc_6724
0000DBA0                            ; ===========================================================================
0000DBA0                            
0000DBA0                            loc_6720:
0000DBA0 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000DBA4                            
0000DBA4                            loc_6724:
0000DBA4 3838 F704                  		move.w	($FFFFF704).w,d4
0000DBA8 4841                       		swap	d1
0000DBAA 2601                       		move.l	d1,d3
0000DBAC 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000DBB0 E09B                       		ror.l	#8,d3
0000DBB2 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000DBB6 21C1 F704                  		move.l	d1,($FFFFF704).w
0000DBBA 3038 F704                  		move.w	($FFFFF704).w,d0
0000DBBE 0240 0010                  		andi.w	#$10,d0
0000DBC2 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000DBC6 B300                       		eor.b	d1,d0
0000DBC8 6600                       		bne.s	locret_6766
0000DBCA 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000DBD0 3038 F704                  		move.w	($FFFFF704).w,d0
0000DBD4 9044                       		sub.w	d4,d0
0000DBD6 6A00                       		bpl.s	loc_6760
0000DBD8 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000DBDE 4E75                       		rts	
0000DBE0                            ; ===========================================================================
0000DBE0                            
0000DBE0                            loc_6760:
0000DBE0 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000DBE6                            
0000DBE6                            locret_6766:
0000DBE6 4E75                       		rts	
0000DBE8                            ; End of function ScrollVertical
0000DBE8                            
0000DBE8                            
0000DBE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBE8                            
0000DBE8                            
0000DBE8                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
0000DBE8 2438 F708                  		move.l	($FFFFF708).w,d2
0000DBEC 2002                       		move.l	d2,d0
0000DBEE D084                       		add.l	d4,d0
0000DBF0 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DBF4 2200                       		move.l	d0,d1
0000DBF6 4841                       		swap	d1
0000DBF8 0241 0010                  		andi.w	#$10,d1
0000DBFC 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DC00 B701                       		eor.b	d3,d1
0000DC02 6600                       		bne.s	ScrollBlock1_2
0000DC04 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DC0A 9082                       		sub.l	d2,d0
0000DC0C 6A00                       		bpl.s	ScrollBlock1_1
0000DC0E 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000DC14 6000                       		bra.s	ScrollBlock1_2
0000DC16                            ; ===========================================================================
0000DC16                             
0000DC16                            ScrollBlock1_1:				; XREF: ScrollBlock1
0000DC16 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000DC1C                             
0000DC1C                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
0000DC1C 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DC20 2003                       		move.l	d3,d0
0000DC22 D085                       		add.l	d5,d0
0000DC24 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DC28 2200                       		move.l	d0,d1
0000DC2A 4841                       		swap	d1
0000DC2C 0241 0010                  		andi.w	#$10,d1
0000DC30 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DC34 B501                       		eor.b	d2,d1
0000DC36 6600                       		bne.s	ScrollBlock1_End
0000DC38 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DC3E 9083                       		sub.l	d3,d0
0000DC40 6A00                       		bpl.s	ScrollBlock1_3
0000DC42 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DC48 4E75                       		rts	
0000DC4A                            ; ===========================================================================
0000DC4A                             
0000DC4A                            ScrollBlock1_3:				; XREF: ScrollBlock1
0000DC4A 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DC50                             
0000DC50                            ScrollBlock1_End:			; XREF: ScrollBlock1
0000DC50 4E75                       		rts	
0000DC52                            ; End of function ScrollBlock1
0000DC52                             
0000DC52                             
0000DC52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC52                             
0000DC52                             
0000DC52                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
0000DC52 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000DC56 2003                       		move.l	d3,d0
0000DC58 D085                       		add.l	d5,d0
0000DC5A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000DC5E 2200                       		move.l	d0,d1
0000DC60 4841                       		swap	d1
0000DC62 0241 0010                  		andi.w	#$10,d1
0000DC66 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DC6A B501                       		eor.b	d2,d1
0000DC6C 6600                       		bne.s	ScrollBlock2_End
0000DC6E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DC74 9083                       		sub.l	d3,d0
0000DC76 6A00                       		bpl.s	ScrollBlock2_1
0000DC78 08F8 0004 F756             		bset	#4,($FFFFF756).w
0000DC7E 4E75                       		rts	
0000DC80                            ; ===========================================================================
0000DC80                             
0000DC80                            ScrollBlock2_1:				; XREF: ScrollBlock2
0000DC80 08F8 0005 F756             		bset	#5,($FFFFF756).w
0000DC86                             
0000DC86                            ScrollBlock2_End:			; XREF: ScrollBlock2
0000DC86 4E75                       		rts	
0000DC88                            ; End of function ScrollBlock2
0000DC88                             
0000DC88                             
0000DC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC88                             
0000DC88                             
0000DC88                            ScrollBlock3:				; XREF: Deform_MZ
0000DC88 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000DC8C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000DC90 3200                       		move.w	d0,d1
0000DC92 0241 0010                  		andi.w	#$10,d1
0000DC96 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000DC9A B501                       		eor.b	d2,d1
0000DC9C 6600                       		bne.s	ScrollBlock3_End
0000DC9E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000DCA4 9043                       		sub.w	d3,d0
0000DCA6 6A00                       		bpl.s	ScrollBlock3_1
0000DCA8 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000DCAE 4E75                       		rts	
0000DCB0                            ; ===========================================================================
0000DCB0                             
0000DCB0                            ScrollBlock3_1:				; XREF: ScrollBlock3
0000DCB0 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000DCB6                             
0000DCB6                            ScrollBlock3_End:			; XREF: ScrollBlock3
0000DCB6 4E75                       		rts	
0000DCB8                            ; End of function ScrollBlock3
0000DCB8                             
0000DCB8                             
0000DCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCB8                             
0000DCB8                             
0000DCB8                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
0000DCB8 2438 F708                  		move.l	($FFFFF708).w,d2
0000DCBC 2002                       		move.l	d2,d0
0000DCBE D084                       		add.l	d4,d0
0000DCC0 21C0 F708                  		move.l	d0,($FFFFF708).w
0000DCC4 2200                       		move.l	d0,d1
0000DCC6 4841                       		swap	d1
0000DCC8 0241 0010                  		andi.w	#$10,d1
0000DCCC 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000DCD0 B701                       		eor.b	d3,d1
0000DCD2 6600                       		bne.s	ScrollBlock4_End
0000DCD4 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000DCDA 9082                       		sub.l	d2,d0
0000DCDC 6A00                       		bpl.s	ScrollBlock4_1
0000DCDE 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DCE2 6000                       		bra.s	ScrollBlock4_End
0000DCE4                            ; ===========================================================================
0000DCE4                             
0000DCE4                            ScrollBlock4_1:				; XREF: ScrollBlock4
0000DCE4 5206                       		addq.b	#1,d6
0000DCE6 0DF8 F756                  		bset	d6,($FFFFF756).w
0000DCEA                             
0000DCEA                            ScrollBlock4_End:			; XREF: ScrollBlock4
0000DCEA 4E75                       		rts	
0000DCEC                            ; End of function ScrollBlock4
0000DCEC                             
0000DCEC                             
0000DCEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCEC                             
0000DCEC                             
0000DCEC                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DCEC 2438 F710                  		move.l	($FFFFF710).w,d2
0000DCF0 2002                       		move.l	d2,d0
0000DCF2 D084                       		add.l	d4,d0
0000DCF4 21C0 F710                  		move.l	d0,($FFFFF710).w
0000DCF8 2200                       		move.l	d0,d1
0000DCFA 4841                       		swap	d1
0000DCFC 0241 0010                  		andi.w	#$10,d1
0000DD00 1638 F74E                  		move.b	($FFFFF74E).w,d3
0000DD04 B701                       		eor.b	d3,d1
0000DD06 6600                       		bne.s	ScrollBlock5_End
0000DD08 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000DD0E 9082                       		sub.l	d2,d0
0000DD10 6A00                       		bpl.s	ScrollBlock5_1
0000DD12 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DD16 6000                       		bra.s	ScrollBlock5_End
0000DD18                            ; ===========================================================================
0000DD18                             
0000DD18                            ScrollBlock5_1:				; XREF: ScrollBlock5
0000DD18 5206                       		addq.b	#1,d6
0000DD1A 0DF8 F758                  		bset	d6,($FFFFF758).w
0000DD1E                             
0000DD1E                            ScrollBlock5_End:			; XREF: ScrollBlock5
0000DD1E 4E75                       		rts	
0000DD20                            ; End of function ScrollBlock5
0000DD20                             
0000DD20                             
0000DD20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD20                             
0000DD20                             
0000DD20                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
0000DD20 2438 F718                  		move.l	($FFFFF718).w,d2
0000DD24 2002                       		move.l	d2,d0
0000DD26 D084                       		add.l	d4,d0
0000DD28 21C0 F718                  		move.l	d0,($FFFFF718).w
0000DD2C 2200                       		move.l	d0,d1
0000DD2E 4841                       		swap	d1
0000DD30 0241 0010                  		andi.w	#$10,d1
0000DD34 1638 F750                  		move.b	($FFFFF750).w,d3
0000DD38 B701                       		eor.b	d3,d1
0000DD3A 6600                       		bne.s	ScrollBlock6_End
0000DD3C 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
0000DD42 9082                       		sub.l	d2,d0
0000DD44 6A00                       		bpl.s	ScrollBlock6_1
0000DD46 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DD4A 6000                       		bra.s	ScrollBlock6_End
0000DD4C                            ; ===========================================================================
0000DD4C                             
0000DD4C                            ScrollBlock6_1:				; XREF: ScrollBlock6
0000DD4C 5206                       		addq.b	#1,d6
0000DD4E 0DF8 F75A                  		bset	d6,($FFFFF75A).w
0000DD52                             
0000DD52                            ScrollBlock6_End:			; XREF: ScrollBlock6
0000DD52 4E75                       		rts	
0000DD54                            ; End of function ScrollBlock6
0000DD54                            
0000DD54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD54                            
0000DD54                            
0000DD54                            sub_6886:		
0000DD54 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DD5A 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DD60 45F8 F756                  		lea	($FFFFF756).w,a2
0000DD64 47F8 F708                  		lea	($FFFFF708).w,a3
0000DD68 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DD6C 343C 6000                  		move.w	#$6000,d2
0000DD70 6100 0000                  		bsr.w	sub_6D0A
0000DD74 45F8 F758                  		lea	($FFFFF758).w,a2
0000DD78 47F8 F710                  		lea	($FFFFF710).w,a3
0000DD7C 6000 0000                  		bra.w	sub_6DA6
0000DD80                            ; End of function sub_6886
0000DD80                             
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                            ; Subroutine to	display	correct	tiles as you move
0000DD80                            ; ---------------------------------------------------------------------------
0000DD80                             
0000DD80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD80                             
0000DD80                             
0000DD80                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000DD80 4BF9 00C0 0004             		lea	($C00004).l,a5
0000DD86 4DF9 00C0 0000             		lea	($C00000).l,a6
0000DD8C 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000DD90 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000DD94 2878 A404                  		movea.l	($FFFFA404).w,a4
0000DD98 343C 6000                  		move.w	#$6000,d2
0000DD9C 6100 0000                  		bsr.w	sub_6D0A
0000DDA0 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000DDA4 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000DDA8 6100 0000                  		bsr.w	sub_6DA6
0000DDAC 45F8 FF36                  		lea	($FFFFFF36).w,a2
0000DDB0 47F8 FF28                  		lea	($FFFFFF28).w,a3
0000DDB4 6100 0000                  		bsr.w	sub_6EA4
0000DDB8 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000DDBC 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000DDC0 2878 A400                  		movea.l	($FFFFA400).w,a4
0000DDC4 343C 4000                  		move.w	#$4000,d2
0000DDC8 4A38 F745                  		tst.b	($FFFFF745).w
0000DDCC 6700                       		beq.s	Draw_FG
0000DDCE 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
0000DDD4 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
0000DDD6 7C0F                       		moveq	#$F,d6				;
0000DDD8                             
0000DDD8                            Draw_All:
0000DDD8 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
0000DDDC 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
0000DDDE 3204                       		move.w	d4,d1
0000DDE0 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DDE4 3801                       		move.w	d1,d4
0000DDE6 7AF0                       		moveq	#-$10,d5
0000DDE8 6100 0000                  		bsr.w	DrawTiles_LR
0000DDEC 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000DDF0 0644 0010                  		addi.w	#$10,d4
0000DDF4 51CE FFE2                  		dbf	d6,Draw_All
0000DDF8 4E75                       		rts	
0000DDFA                             
0000DDFA                            Draw_FG:
0000DDFA 4A12                       		tst.b	(a2)
0000DDFC 6700                       		beq.s	locret_6D08
0000DDFE 0892 0000                  		bclr	#0,(a2)
0000DE02 6700                       		beq.s	loc_6CBE
0000DE04 78F0                       		moveq	#-$10,d4
0000DE06 7AF0                       		moveq	#-$10,d5
0000DE08 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE0C 78F0                       		moveq	#-$10,d4
0000DE0E 7AF0                       		moveq	#-$10,d5
0000DE10 6100 0000                  		bsr.w	DrawTiles_LR
0000DE14                             
0000DE14                            loc_6CBE:
0000DE14 0892 0001                  		bclr	#1,(a2)
0000DE18 6700                       		beq.s	loc_6CD8
0000DE1A 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE1E 7AF0                       		moveq	#-$10,d5
0000DE20 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE24 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE28 7AF0                       		moveq	#-$10,d5
0000DE2A 6100 0000                  		bsr.w	DrawTiles_LR
0000DE2E                             
0000DE2E                            loc_6CD8:
0000DE2E 0892 0002                  		bclr	#2,(a2)
0000DE32 6700                       		beq.s	loc_6CEE
0000DE34 78F0                       		moveq	#-$10,d4
0000DE36 7AF0                       		moveq	#-$10,d5
0000DE38 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE3C 78F0                       		moveq	#-$10,d4
0000DE3E 7AF0                       		moveq	#-$10,d5
0000DE40 6100 0000                  		bsr.w	DrawTiles_TB
0000DE44                             
0000DE44                            loc_6CEE:
0000DE44 0892 0003                  		bclr	#3,(a2)
0000DE48 6700                       		beq.s	locret_6D08
0000DE4A 78F0                       		moveq	#-$10,d4
0000DE4C 3A3C 0140                  		move.w	#$140,d5
0000DE50 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE54 78F0                       		moveq	#-$10,d4
0000DE56 3A3C 0140                  		move.w	#$140,d5
0000DE5A 6100 0000                  		bsr.w	DrawTiles_TB
0000DE5E                             
0000DE5E                            locret_6D08:
0000DE5E 4E75                       		rts	
0000DE60                             
0000DE60                            ; End of function LoadTilesAsYouMove
0000DE60                             
0000DE60                             
0000DE60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE60                             
0000DE60                             
0000DE60                            sub_6D0A:
0000DE60 4A12                       		tst.b	(a2)
0000DE62 6700 0000                  		beq.w	locret_6DA4
0000DE66 0892 0000                  		bclr	#0,(a2)
0000DE6A 6700                       		beq.s	loc_6D26
0000DE6C 78F0                       		moveq	#-$10,d4
0000DE6E 7AF0                       		moveq	#-$10,d5
0000DE70 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE74 78F0                       		moveq	#-$10,d4
0000DE76 7AF0                       		moveq	#-$10,d5
0000DE78 6100 0000                  		bsr.w	DrawTiles_LR
0000DE7C                             
0000DE7C                            loc_6D26:
0000DE7C 0892 0001                  		bclr	#1,(a2)
0000DE80 6700                       		beq.s	loc_6D40
0000DE82 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE86 7AF0                       		moveq	#-$10,d5
0000DE88 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DE8C 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DE90 7AF0                       		moveq	#-$10,d5
0000DE92 6100 0000                  		bsr.w	DrawTiles_LR
0000DE96                             
0000DE96                            loc_6D40:
0000DE96 0892 0002                  		bclr	#2,(a2)
0000DE9A 6700                       		beq.s	loc_6D56
0000DE9C 78F0                       		moveq	#-$10,d4
0000DE9E 7AF0                       		moveq	#-$10,d5
0000DEA0 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DEA4 78F0                       		moveq	#-$10,d4
0000DEA6 7AF0                       		moveq	#-$10,d5
0000DEA8 6100 0000                  		bsr.w	DrawTiles_TB
0000DEAC                             
0000DEAC                            loc_6D56:
0000DEAC 0892 0003                  		bclr	#3,(a2)
0000DEB0 6700                       		beq.s	loc_6D70
0000DEB2 78F0                       		moveq	#-$10,d4
0000DEB4 3A3C 0140                  		move.w	#$140,d5
0000DEB8 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DEBC 78F0                       		moveq	#-$10,d4
0000DEBE 3A3C 0140                  		move.w	#$140,d5
0000DEC2 6100 0000                  		bsr.w	DrawTiles_TB
0000DEC6                             
0000DEC6                            loc_6D70:
0000DEC6 0892 0004                  		bclr	#4,(a2)
0000DECA 6700                       		beq.s	loc_6D88
0000DECC 78F0                       		moveq	#-$10,d4
0000DECE 7A00                       		moveq	#0,d5
0000DED0 6100 0000                  		bsr.w	loc_7176
0000DED4 78F0                       		moveq	#-$10,d4
0000DED6 7A00                       		moveq	#0,d5
0000DED8 7C1F                       		moveq	#$1F,d6
0000DEDA 6100 0000                  		bsr.w	DrawTiles_LR3
0000DEDE                             
0000DEDE                            loc_6D88:
0000DEDE 0892 0005                  		bclr	#5,(a2)
0000DEE2 6700                       		beq.s	locret_6DA4
0000DEE4 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DEE8 7A00                       		moveq	#0,d5
0000DEEA 6100 0000                  		bsr.w	loc_7176
0000DEEE 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DEF2 7A00                       		moveq	#0,d5
0000DEF4 7C1F                       		moveq	#$1F,d6
0000DEF6 6100 0000                  		bsr.w	DrawTiles_LR3
0000DEFA                             
0000DEFA                            locret_6DA4:
0000DEFA 4E75                       		rts	
0000DEFC                            ; End of function sub_6D0A
0000DEFC                             
0000DEFC                             
0000DEFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEFC                             
0000DEFC                             
0000DEFC                            sub_6DA6:
0000DEFC 4A12                       		tst.b	(a2)
0000DEFE 6700 0000                  		beq.w	locret_6DF2
0000DF02 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
0000DF08 6700 0000                  		beq.w	loc_6E16
0000DF0C 0892 0000                  		bclr	#0,(a2)
0000DF10 6700                       		beq.s	loc_6DD2
0000DF12 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF16 7AF0                       		moveq	#-$10,d5
0000DF18 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DF1C 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF20 7AF0                       		moveq	#-$10,d5
0000DF22 7C02                       		moveq	#2,d6
0000DF24 6100 0000                  		bsr.w	DrawTiles_TB2
0000DF28                             
0000DF28                            loc_6DD2:
0000DF28 0892 0001                  		bclr	#1,(a2)
0000DF2C 6700                       		beq.s	locret_6DF2
0000DF2E 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF32 3A3C 0140                  		move.w	#$140,d5
0000DF36 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DF3A 383C 0070                  		move.w	#$70,d4	; 'p'
0000DF3E 3A3C 0140                  		move.w	#$140,d5
0000DF42 7C02                       		moveq	#2,d6
0000DF44 6100 0000                  		bsr.w	DrawTiles_TB2
0000DF48                             
0000DF48                            locret_6DF2:
0000DF48 4E75                       		rts	
0000DF4A                            ; ===========================================================================
0000DF4A 00                         unk_6DF4:	dc.b   0 ;	 
0000DF4B 00                         unk_6DF5:	dc.b   0 ;	 
0000DF4C 00                         		dc.b   0 ;  
0000DF4D 00                         		dc.b   0 ;  
0000DF4E 00                         		dc.b   0 ;  
0000DF4F 06                         		dc.b   6 ;  
0000DF50 06                         		dc.b   6 ;  
0000DF51 06                         		dc.b   6 ;  
0000DF52 06                         		dc.b   6 ;  
0000DF53 06                         		dc.b   6 ;  
0000DF54 06                         		dc.b   6 ;  
0000DF55 06                         		dc.b   6 ;  
0000DF56 06                         		dc.b   6 ;  
0000DF57 06                         		dc.b   6 ;  
0000DF58 06                         		dc.b   6 ;  
0000DF59 04                         		dc.b   4 ;  
0000DF5A 04                         		dc.b   4 ;  
0000DF5B 04                         		dc.b   4 ;  
0000DF5C 04                         		dc.b   4 ;  
0000DF5D 04                         		dc.b   4 ;  
0000DF5E 04                         		dc.b   4 ;  
0000DF5F 04                         		dc.b   4 ;  
0000DF60 02                         		dc.b   2 ;  
0000DF61 02                         		dc.b   2 ;  
0000DF62 02                         		dc.b   2 ;  
0000DF63 02                         		dc.b   2 ;  
0000DF64 02                         		dc.b   2 ;  
0000DF65 02                         		dc.b   2 ;  
0000DF66 02                         		dc.b   2 ;  
0000DF67 02                         		dc.b   2 ;  
0000DF68 02                         		dc.b   2 ;  
0000DF69 02                         		dc.b   2 ;  
0000DF6A 02                         		dc.b   2 ;  
0000DF6B 00                         		dc.b   0 ;  
0000DF6C                            ; ===========================================================================
0000DF6C                             
0000DF6C                            loc_6E16:
0000DF6C 41F9 0000 DF4B             		lea	(unk_6DF5).l,a0
0000DF72 78F0                       		moveq	#-$10,d4
0000DF74 0892 0000                  		bclr	#0,(a2)
0000DF78 6600                       		bne.s	loc_6E28
0000DF7A 0892 0001                  		bclr	#1,(a2)
0000DF7E 6700                       		beq.s	loc_6E72
0000DF80 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000DF84                             
0000DF84                            loc_6E28:
0000DF84 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DF88 D044                       		add.w	d4,d0
0000DF8A 0240 01F0                  		andi.w	#$1F0,d0
0000DF8E E848                       		lsr.w	#4,d0
0000DF90 1030 0000                  		move.b	(a0,d0.w),d0
0000DF94 47F9 0000 0000             		lea	(unk_6FE4).l,a3
0000DF9A 3673 0000                  		movea.w	(a3,d0.w),a3
0000DF9E 6700                       		beq.s	loc_6E5E
0000DFA0 7AF0                       		moveq	#-$10,d5
0000DFA2 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000DFA6 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000DFAA 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000DFAE 6100 0000                  		bsr.w	DrawTiles_LR
0000DFB2 6000                       		bra.s	loc_6E72
0000DFB4                            ; ===========================================================================
0000DFB4                             
0000DFB4                            loc_6E5E:
0000DFB4 7A00                       		moveq	#0,d5
0000DFB6 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000DFBA 6100 0000                  		bsr.w	loc_7176
0000DFBE 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000DFC2 7C1F                       		moveq	#$1F,d6
0000DFC4 6100 0000                  		bsr.w	DrawTiles_LR3
0000DFC8                             
0000DFC8                            loc_6E72:
0000DFC8 4A12                       		tst.b	(a2)
0000DFCA 6600                       		bne.s	loc_6E78
0000DFCC 4E75                       		rts	
0000DFCE                            ; ===========================================================================
0000DFCE                             
0000DFCE                            loc_6E78:
0000DFCE 78F0                       		moveq	#-$10,d4
0000DFD0 7AF0                       		moveq	#-$10,d5
0000DFD2 1012                       		move.b	(a2),d0
0000DFD4 0200 00A8                  		andi.b	#-$58,d0
0000DFD8 6700                       		beq.s	loc_6E8C
0000DFDA E208                       		lsr.b	#1,d0
0000DFDC 1480                       		move.b	d0,(a2)
0000DFDE 3A3C 0140                  		move.w	#$140,d5
0000DFE2                             
0000DFE2                            loc_6E8C:
0000DFE2 41F9 0000 DF4A             		lea	(unk_6DF4).l,a0
0000DFE8 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000DFEC 0240 01F0                  		andi.w	#$1F0,d0
0000DFF0 E848                       		lsr.w	#4,d0
0000DFF2 41F0 0000                  		lea	(a0,d0.w),a0
0000DFF6 6000 0000                  		bra.w	loc_6FEC
0000DFFA                            ; End of function sub_6DA6
0000DFFA                             
0000DFFA                             
0000DFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFFA                             
0000DFFA                             
0000DFFA                            sub_6EA4:
0000DFFA 4A12                       		tst.b	(a2)
0000DFFC 6700 0000                  		beq.w	locret_6EF0
0000E000 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E006 6700 0000                  		beq.w	loc_6F54
0000E00A 0892 0000                  		bclr	#0,(a2)
0000E00E 6700                       		beq.s	loc_6ED0_2
0000E010 383C 0040                  		move.w	#$40,d4	; '@'
0000E014 7AF0                       		moveq	#-$10,d5
0000E016 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E01A 383C 0040                  		move.w	#$40,d4	; '@'
0000E01E 7AF0                       		moveq	#-$10,d5
0000E020 7C02                       		moveq	#2,d6
0000E022 6100 0000                  		bsr.w	DrawTiles_TB2
0000E026                             
0000E026                            loc_6ED0_2:
0000E026 0892 0001                  		bclr	#1,(a2)
0000E02A 6700                       		beq.s	locret_6EF0
0000E02C 383C 0040                  		move.w	#$40,d4	; '@'
0000E030 3A3C 0140                  		move.w	#$140,d5
0000E034 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E038 383C 0040                  		move.w	#$40,d4	; '@'
0000E03C 3A3C 0140                  		move.w	#$140,d5
0000E040 7C02                       		moveq	#2,d6
0000E042 6100 0000                  		bsr.w	DrawTiles_TB2
0000E046                             
0000E046                            locret_6EF0:
0000E046 4E75                       		rts	
0000E048                            ; ===========================================================================
0000E048 00                         unk_6EF2:	dc.b   0 ;	 
0000E049 00                         unk_6EF3:	dc.b   0 ;	 
0000E04A 00                         		dc.b   0 ;  
0000E04B 00                         		dc.b   0 ;  
0000E04C 00                         		dc.b   0 ;  
0000E04D 00                         		dc.b   0 ;  
0000E04E 06                         		dc.b   6 ;  
0000E04F 06                         		dc.b   6 ;  
0000E050 04                         		dc.b   4 ;  
0000E051 04                         		dc.b   4 ;  
0000E052 04                         		dc.b   4 ;  
0000E053 04                         		dc.b   4 ;  
0000E054 04                         		dc.b   4 ;  
0000E055 04                         		dc.b   4 ;  
0000E056 04                         		dc.b   4 ;  
0000E057 04                         		dc.b   4 ;  
0000E058 04                         		dc.b   4 ;  
0000E059 02                         		dc.b   2 ;  
0000E05A 02                         		dc.b   2 ;  
0000E05B 02                         		dc.b   2 ;  
0000E05C 02                         		dc.b   2 ;  
0000E05D 02                         		dc.b   2 ;  
0000E05E 02                         		dc.b   2 ;  
0000E05F 02                         		dc.b   2 ;  
0000E060 02                         		dc.b   2 ;  
0000E061 02                         		dc.b   2 ;  
0000E062 02                         		dc.b   2 ;  
0000E063 02                         		dc.b   2 ;  
0000E064 02                         		dc.b   2 ;  
0000E065 02                         		dc.b   2 ;  
0000E066 02                         		dc.b   2 ;  
0000E067 02                         		dc.b   2 ;  
0000E068 02                         		dc.b   2 ;  
0000E069 02                         		dc.b   2 ;  
0000E06A 02                         		dc.b   2 ;  
0000E06B 02                         		dc.b   2 ;  
0000E06C 02                         		dc.b   2 ;  
0000E06D 02                         		dc.b   2 ;  
0000E06E 02                         		dc.b   2 ;  
0000E06F 02                         		dc.b   2 ;  
0000E070 02                         		dc.b   2 ;  
0000E071 02                         		dc.b   2 ;  
0000E072 02                         		dc.b   2 ;  
0000E073 02                         		dc.b   2 ;  
0000E074 02                         		dc.b   2 ;  
0000E075 02                         		dc.b   2 ;  
0000E076 02                         		dc.b   2 ;  
0000E077 02                         		dc.b   2 ;  
0000E078 02                         		dc.b   2 ;  
0000E079 02                         		dc.b   2 ;  
0000E07A 02                         		dc.b   2 ;  
0000E07B 02                         		dc.b   2 ;  
0000E07C 02                         		dc.b   2 ;  
0000E07D 02                         		dc.b   2 ;  
0000E07E 02                         		dc.b   2 ;  
0000E07F 02                         		dc.b   2 ;  
0000E080 02                         		dc.b   2 ;  
0000E081 02                         		dc.b   2 ;  
0000E082 02                         		dc.b   2 ;  
0000E083 02                         		dc.b   2 ;  
0000E084 02                         		dc.b   2 ;  
0000E085 02                         		dc.b   2 ;  
0000E086 02                         		dc.b   2 ;  
0000E087 02                         		dc.b   2 ;  
0000E088 02                         		dc.b   2 ;  
0000E089 02                         		dc.b   2 ;  
0000E08A 02                         		dc.b   2 ;  
0000E08B 02                         		dc.b   2 ;  
0000E08C 02                         		dc.b   2 ;  
0000E08D 02                         		dc.b   2 ;  
0000E08E 02                         		dc.b   2 ;  
0000E08F 02                         		dc.b   2 ;  
0000E090 02                         		dc.b   2 ;  
0000E091 02                         		dc.b   2 ;  
0000E092 02                         		dc.b   2 ;  
0000E093 02                         		dc.b   2 ;  
0000E094 02                         		dc.b   2 ;  
0000E095 02                         		dc.b   2 ;  
0000E096 02                         		dc.b   2 ;  
0000E097 02                         		dc.b   2 ;  
0000E098 02                         		dc.b   2 ;  
0000E099 02                         		dc.b   2 ;  
0000E09A 02                         		dc.b   2 ;  
0000E09B 02                         		dc.b   2 ;  
0000E09C 02                         		dc.b   2 ;  
0000E09D 02                         		dc.b   2 ;  
0000E09E 02                         		dc.b   2 ;  
0000E09F 02                         		dc.b   2 ;  
0000E0A0 02                         		dc.b   2 ;  
0000E0A1 02                         		dc.b   2 ;  
0000E0A2 02                         		dc.b   2 ;  
0000E0A3 02                         		dc.b   2 ;  
0000E0A4 02                         		dc.b   2 ;  
0000E0A5 02                         		dc.b   2 ;  
0000E0A6 02                         		dc.b   2 ;  
0000E0A7 02                         		dc.b   2 ;  
0000E0A8 02                         		dc.b   2 ;  
0000E0A9 00                         		dc.b   0 ;  
0000E0AA                            ; ===========================================================================
0000E0AA                             
0000E0AA                            loc_6F54:
0000E0AA 78F0                       		moveq	#-$10,d4
0000E0AC 0892 0000                  		bclr	#0,(a2)
0000E0B0 6600                       		bne.s	loc_6F66
0000E0B2 0892 0001                  		bclr	#1,(a2)
0000E0B6 6700                       		beq.s	loc_6FAE
0000E0B8 383C 00E0                  		move.w	#$E0,d4	; 'a'
0000E0BC                             
0000E0BC                            loc_6F66:
0000E0BC 41F9 0000 E049             		lea	(unk_6EF3).l,a0
0000E0C2 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E0C6 0440 0200                  		subi.w	#$200,d0
0000E0CA D044                       		add.w	d4,d0
0000E0CC 0240 07F0                  		andi.w	#$7F0,d0
0000E0D0 E848                       		lsr.w	#4,d0
0000E0D2 1030 0000                  		move.b	(a0,d0.w),d0
0000E0D6 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E0DA 6700                       		beq.s	loc_6F9A
0000E0DC 7AF0                       		moveq	#-$10,d5
0000E0DE 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E0E2 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E0E6 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E0EA 6100 0000                  		bsr.w	DrawTiles_LR
0000E0EE 6000                       		bra.s	loc_6FAE
0000E0F0                            ; ===========================================================================
0000E0F0                             
0000E0F0                            loc_6F9A:
0000E0F0 7A00                       		moveq	#0,d5
0000E0F2 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E0F6 6100 0000                  		bsr.w	loc_7176
0000E0FA 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E0FE 7C1F                       		moveq	#$1F,d6
0000E100 6100 0000                  		bsr.w	DrawTiles_LR3
0000E104                             
0000E104                            loc_6FAE:
0000E104 4A12                       		tst.b	(a2)
0000E106 6600                       		bne.s	loc_6FB4
0000E108 4E75                       		rts	
0000E10A                            ; ===========================================================================
0000E10A                             
0000E10A                            loc_6FB4:
0000E10A 78F0                       		moveq	#-$10,d4
0000E10C 7AF0                       		moveq	#-$10,d5
0000E10E 1012                       		move.b	(a2),d0
0000E110 0200 00A8                  		andi.b	#-$58,d0
0000E114 6700                       		beq.s	loc_6FC8
0000E116 E208                       		lsr.b	#1,d0
0000E118 1480                       		move.b	d0,(a2)
0000E11A 3A3C 0140                  		move.w	#$140,d5
0000E11E                             
0000E11E                            loc_6FC8:
0000E11E 41F9 0000 E048             		lea	(unk_6EF2).l,a0
0000E124 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E128 0440 0200                  		subi.w	#$200,d0
0000E12C 0240 07F0                  		andi.w	#$7F0,d0
0000E130 E848                       		lsr.w	#4,d0
0000E132 41F0 0000                  		lea	(a0,d0.w),a0
0000E136 6000 0000                  		bra.w	loc_6FEC
0000E13A                            ; ===========================================================================
0000E13A FF                         unk_6FE4:	dc.b $FF ;  
0000E13B 18                         		dc.b $18 ;  
0000E13C FF                         		dc.b $FF ;  
0000E13D 18                         		dc.b $18 ;  
0000E13E FF                         		dc.b $FF ;  
0000E13F 20                         		dc.b $20 ;  
0000E140 FF                         		dc.b $FF ;  
0000E141 28                         		dc.b $28 ; (
0000E142                            ; ===========================================================================
0000E142                             
0000E142                            loc_6FEC:
0000E142 7C0F                       		moveq	#$F,d6
0000E144 2E3C 0080 0000             		move.l	#$800000,d7
0000E14A                             
0000E14A                            loc_6FF4:
0000E14A 7000                       		moveq	#0,d0
0000E14C 1018                       		move.b	(a0)+,d0
0000E14E 0112                       		btst	d0,(a2)
0000E150 6700                       		beq.s	loc_701C
0000E152 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
0000E156 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
0000E15A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E15E 6100 0000                  		bsr.w	sub_712A
0000E162 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E166 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000E16A 6100 0000                  		bsr.w	sub_70AC
0000E16E 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
0000E172                             
0000E172                            loc_701C:
0000E172 0644 0010                  		addi.w	#$10,d4
0000E176 51CE FFD2                  		dbf	d6,loc_6FF4
0000E17A 4212                       		clr.b	(a2)
0000E17C 4E75                       		rts	
0000E17E                            ; End of function sub_6EA4
0000E17E                             
0000E17E                             
0000E17E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E17E                             
0000E17E                             
0000E17E                            DrawTiles_LR:
0000E17E 7C15                       		moveq	#$15,d6
0000E180                            ; End of function DrawTiles_LR
0000E180                             
0000E180                             
0000E180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E180                             
0000E180                             
0000E180                            DrawTiles_LR2:
0000E180 2E3C 0080 0000             		move.l	#$800000,d7
0000E186 2200                       		move.l	d0,d1
0000E188                             
0000E188                            loc_7032:
0000E188 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E18C 6100 0000                  		bsr.w	sub_712A
0000E190 2001                       		move.l	d1,d0
0000E192 6100 0000                  		bsr.w	sub_70AC
0000E196 5801                       		addq.b	#4,d1
0000E198 0201 007F                  		andi.b	#$7F,d1	; ''
0000E19C 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E1A0 0645 0010                  		addi.w	#$10,d5
0000E1A4 51CE FFE2                  		dbf	d6,loc_7032
0000E1A8 4E75                       		rts	
0000E1AA                            ; End of function DrawTiles_LR2
0000E1AA                             
0000E1AA                             
0000E1AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1AA                             
0000E1AA                             
0000E1AA                            DrawTiles_LR3:
0000E1AA 2E3C 0080 0000             		move.l	#$800000,d7
0000E1B0 2200                       		move.l	d0,d1
0000E1B2                             
0000E1B2                            loc_705C:
0000E1B2 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E1B6 6100 0000                  		bsr.w	loc_712C
0000E1BA 2001                       		move.l	d1,d0
0000E1BC 6100 0000                  		bsr.w	sub_70AC
0000E1C0 5801                       		addq.b	#4,d1
0000E1C2 0201 007F                  		andi.b	#$7F,d1	; ''
0000E1C6 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E1CA 0645 0010                  		addi.w	#$10,d5
0000E1CE 51CE FFE2                  		dbf	d6,loc_705C
0000E1D2 4E75                       		rts	
0000E1D4                            ; End of function DrawTiles_LR3
0000E1D4                             
0000E1D4                             
0000E1D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1D4                             
0000E1D4                             
0000E1D4                            DrawTiles_TB:
0000E1D4 7C0F                       		moveq	#$F,d6
0000E1D6                            ; End of function DrawTiles_TB
0000E1D6                             
0000E1D6                             
0000E1D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1D6                             
0000E1D6                             
0000E1D6                            DrawTiles_TB2:
0000E1D6 2E3C 0080 0000             		move.l	#$800000,d7
0000E1DC 2200                       		move.l	d0,d1
0000E1DE                             
0000E1DE                            loc_7088:
0000E1DE 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E1E2 6100 0000                  		bsr.w	sub_712A
0000E1E6 2001                       		move.l	d1,d0
0000E1E8 6100 0000                  		bsr.w	sub_70AC
0000E1EC 0641 0100                  		addi.w	#$100,d1
0000E1F0 0241 0FFF                  		andi.w	#$FFF,d1
0000E1F4 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E1F8 0644 0010                  		addi.w	#$10,d4
0000E1FC 51CE FFE0                  		dbf	d6,loc_7088
0000E200 4E75                       		rts	
0000E202                            ; End of function DrawTiles_TB2
0000E202                             
0000E202                             
0000E202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E202                             
0000E202                             
0000E202                            sub_70AC:
0000E202 8042                       		or.w	d2,d0
0000E204 4840                       		swap	d0
0000E206 0810 0003                  		btst    #3,(a0)    ; MJ: checking bit 3 not 4 (Flip)
0000E20A 6600                       		bne.s	loc_70E8
0000E20C 0810 0002                  		btst    #2,(a0)    ; MJ: checking bit 2 not 3 (Mirror)
0000E210 6600                       		bne.s	loc_70C8
0000E212 2A80                       		move.l	d0,(a5)
0000E214 2C99                       		move.l	(a1)+,(a6)
0000E216 D087                       		add.l	d7,d0
0000E218 2A80                       		move.l	d0,(a5)
0000E21A 2C99                       		move.l	(a1)+,(a6)
0000E21C 4E75                       		rts	
0000E21E                            ; ===========================================================================
0000E21E                             
0000E21E                            loc_70C8:
0000E21E 2A80                       		move.l	d0,(a5)
0000E220 2819                       		move.l	(a1)+,d4
0000E222 0A84 0800 0800             		eori.l	#$8000800,d4
0000E228 4844                       		swap	d4
0000E22A 2C84                       		move.l	d4,(a6)
0000E22C D087                       		add.l	d7,d0
0000E22E 2A80                       		move.l	d0,(a5)
0000E230 2819                       		move.l	(a1)+,d4
0000E232 0A84 0800 0800             		eori.l	#$8000800,d4
0000E238 4844                       		swap	d4
0000E23A 2C84                       		move.l	d4,(a6)
0000E23C 4E75                       		rts	
0000E23E                            ; ===========================================================================
0000E23E                             
0000E23E                            loc_70E8:
0000E23E 0810 0002                  		btst    #2,(a0)
0000E242 6600                       		bne.s	loc_710A
0000E244 2A80                       		move.l	d0,(a5)
0000E246 2A19                       		move.l	(a1)+,d5
0000E248 2819                       		move.l	(a1)+,d4
0000E24A 0A84 1000 1000             		eori.l	#$10001000,d4
0000E250 2C84                       		move.l	d4,(a6)
0000E252 D087                       		add.l	d7,d0
0000E254 2A80                       		move.l	d0,(a5)
0000E256 0A85 1000 1000             		eori.l	#$10001000,d5
0000E25C 2C85                       		move.l	d5,(a6)
0000E25E 4E75                       		rts	
0000E260                            ; ===========================================================================
0000E260                             
0000E260                            loc_710A:
0000E260 2A80                       		move.l	d0,(a5)
0000E262 2A19                       		move.l	(a1)+,d5
0000E264 2819                       		move.l	(a1)+,d4
0000E266 0A84 1800 1800             		eori.l	#$18001800,d4
0000E26C 4844                       		swap	d4
0000E26E 2C84                       		move.l	d4,(a6)
0000E270 D087                       		add.l	d7,d0
0000E272 2A80                       		move.l	d0,(a5)
0000E274 0A85 1800 1800             		eori.l	#$18001800,d5
0000E27A 4845                       		swap	d5
0000E27C 2C85                       		move.l	d5,(a6)
0000E27E 4E75                       		rts	
0000E280                            ; End of function sub_70AC
0000E280                             
0000E280                             
0000E280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E280                             
0000E280                             
0000E280                            sub_712A:
0000E280 DA53                       		add.w	(a3),d5
0000E282                            		
0000E282                            loc_712C:
0000E282 D86B 0004                  		add.w	4(a3),d4
0000E286 43F8 B000                  		lea	($FFFFB000).w,a1
0000E28A 3604                       		move.w	d4,d3
0000E28C 0243 0780                  		andi.w    #$780,d3 ; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
0000E290 E64D                       		lsr.w	#3,d5
0000E292 3005                       		move.w	d5,d0
0000E294 E848                       		lsr.w    #4,d0    ; MJ: divide by 10 (Not 20)
0000E296 0240 007F                  		andi.w	#$7F,d0	; ''
0000E29A E34B                       		lsl.w    #$01,d3    ; MJ: multiply by 2 (So it skips the BG)
0000E29C D043                       		add.w	d3,d0
0000E29E 76FF                       		moveq	#-1,d3
0000E2A0 1634 0000                  		move.b	(a4,d0.w),d3
0000E2A4 0243 00FF                  		andi.w    #$FF,d3    ; MJ: keep within FF
0000E2A8 EE5B                       		ror.w	#7,d3
0000E2AA E45B                               ror.w    #2,d3    ; MJ: ..plus an extra 2 (so it's within 80 bytes, not 200)
0000E2AC 0244 0070                  		andi.w    #$070,d4 ; MJ: keep Y pos within 80 pixels
0000E2B0 0245 000E                  		andi.w    #$0E,d5    ; MJ: keep X pos within 10
0000E2B4 D644                       		add.w	d4,d3
0000E2B6 D645                       		add.w	d5,d3
0000E2B8 2043                       		movea.l	d3,a0
0000E2BA 3610                       		move.w	(a0),d3
0000E2BC 0243 03FF                  		andi.w	#$3FF,d3
0000E2C0 E74B                       		lsl.w	#3,d3
0000E2C2 D2C3                       		adda.w	d3,a1
0000E2C4                             
0000E2C4                            locret_7172:
0000E2C4 4E75                       		rts	
0000E2C6                            		
0000E2C6                            ; End of function sub_712A
0000E2C6                             
0000E2C6                             
0000E2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C6                             
0000E2C6                             
0000E2C6                            Calc_VRAM_Pos:
0000E2C6 DA53                       		add.w	(a3),d5
0000E2C8                             
0000E2C8                            loc_7176:
0000E2C8 D86B 0004                  		add.w	4(a3),d4
0000E2CC 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E2D0 0245 01F0                  		andi.w	#$1F0,d5
0000E2D4 E94C                       		lsl.w	#4,d4
0000E2D6 E44D                       		lsr.w	#2,d5
0000E2D8 D845                       		add.w	d5,d4
0000E2DA 7003                       		moveq	#3,d0
0000E2DC 4840                       		swap	d0
0000E2DE 3004                       		move.w	d4,d0
0000E2E0 4E75                       		rts	
0000E2E2                            ; End of function Calc_VRAM_Pos
0000E2E2                             
0000E2E2                            ; ===========================================================================
0000E2E2 D86B 0004                  		add.w	4(a3),d4
0000E2E6 DA53                       		add.w	(a3),d5
0000E2E8 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
0000E2EC 0245 01F0                  		andi.w	#$1F0,d5
0000E2F0 E94C                       		lsl.w	#4,d4
0000E2F2 E44D                       		lsr.w	#2,d5
0000E2F4 D845                       		add.w	d5,d4
0000E2F6 7002                       		moveq	#2,d0
0000E2F8 4840                       		swap	d0
0000E2FA 3004                       		move.w	d4,d0
0000E2FC 4E75                       		rts	
0000E2FE                             
0000E2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2FE                             
0000E2FE                             
0000E2FE                            LoadTilesFromStart:
0000E2FE 4BF9 00C0 0004             		lea	($C00004).l,a5
0000E304 4DF9 00C0 0000             		lea	($C00000).l,a6
0000E30A 47F8 F700                  		lea	($FFFFF700).w,a3
0000E30E 2878 A400                  		movea.l	($FFFFA400).w,a4
0000E312 343C 4000                  		move.w	#$4000,d2
0000E316 6100                       		bsr.s	LoadTilesFromStart2
0000E318 47F8 F708                  		lea	($FFFFF708).w,a3
0000E31C 2878 A404                  		movea.l	($FFFFA404).w,a4
0000E320 343C 6000                  		move.w	#$6000,d2
0000E324 4A38 FE10                  		tst.b	($FFFFFE10).w
0000E328 6700 0000                  		beq.w	loc_7220
0000E32C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000E332 6700 0000                  		beq.w	loc_725A
0000E336 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
0000E33C 6700 0000                  		beq.w	loc_7288
0000E340 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
0000E346 6700 0000                  		beq.w	loc_7220
0000E34A                            ; End of function LoadTilesFromStart
0000E34A                             
0000E34A                             
0000E34A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E34A                             
0000E34A                             
0000E34A                            LoadTilesFromStart2:
0000E34A 78F0                       		moveq	#-$10,d4
0000E34C 7C0F                       		moveq	#$F,d6
0000E34E                             
0000E34E                            loc_71FC:
0000E34E 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E352 7A00                       		moveq	#0,d5
0000E354 3204                       		move.w	d4,d1
0000E356 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000E35A 3801                       		move.w	d1,d4
0000E35C 7A00                       		moveq	#0,d5
0000E35E 7C1F                       		moveq	#$1F,d6
0000E360 6100 FE1E                  		bsr.w	DrawTiles_LR2
0000E364 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E368 0644 0010                  		addi.w	#$10,d4
0000E36C 51CE FFE0                  		dbf	d6,loc_71FC
0000E370 4E75                       		rts	
0000E372                            ; End of function LoadTilesFromStart2
0000E372                             
0000E372                            ; ===========================================================================
0000E372                             
0000E372                            loc_7220:
0000E372 7800                       		moveq	#0,d4
0000E374 7C0F                       		moveq	#$F,d6
0000E376                             
0000E376                            loc_7224:
0000E376 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E37A 41F9 0000 0000             		lea	(unk_724A).l,a0
0000E380 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E384 D044                       		add.w	d4,d0
0000E386 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
0000E38A 6100 0000                  		bsr.w	sub_72BA
0000E38E 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E392 0644 0010                  		addi.w	#$10,d4
0000E396 51CE FFDE                  		dbf	d6,loc_7224
0000E39A 4E75                       		rts	
0000E39C                            ; ===========================================================================
0000E39C 00                         unk_724A:	dc.b   0 ;	 
0000E39D 00                         		dc.b   0 ;  
0000E39E 00                         		dc.b   0 ;  
0000E39F 00                         		dc.b   0 ;  
0000E3A0 06                         		dc.b   6 ;  
0000E3A1 06                         		dc.b   6 ;  
0000E3A2 06                         		dc.b   6 ;  
0000E3A3 04                         		dc.b   4 ;  
0000E3A4 04                         		dc.b   4 ;  
0000E3A5 04                         		dc.b   4 ;  
0000E3A6 00                         		dc.b   0 ;  
0000E3A7 00                         		dc.b   0 ;  
0000E3A8 00                         		dc.b   0 ;  
0000E3A9 00                         		dc.b   0 ;  
0000E3AA 00                         		dc.b   0 ;  
0000E3AB 00                         		dc.b   0 ;  
0000E3AC                            ; ===========================================================================
0000E3AC                             
0000E3AC                            loc_725A:
0000E3AC 78F0                       		moveq	#-$10,d4
0000E3AE 7C0F                       		moveq	#$F,d6
0000E3B0                             
0000E3B0                            loc_725E:
0000E3B0 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E3B4 41F9 0000 E049             		lea	(unk_6EF3).l,a0
0000E3BA 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E3BE 0440 0200                  		subi.w	#$200,d0
0000E3C2 D044                       		add.w	d4,d0
0000E3C4 0240 07F0                  		andi.w	#$7F0,d0
0000E3C8 6100 0000                  		bsr.w	sub_72BA
0000E3CC 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E3D0 0644 0010                  		addi.w	#$10,d4
0000E3D4 51CE FFDA                  		dbf	d6,loc_725E
0000E3D8 4E75                       		rts	
0000E3DA                            ; ===========================================================================
0000E3DA                             
0000E3DA                            loc_7288:
0000E3DA 78F0                       		moveq	#-$10,d4
0000E3DC 7C0F                       		moveq	#$F,d6
0000E3DE                             
0000E3DE                            loc_728C:
0000E3DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000E3E2 41F9 0000 DF4B             		lea	(unk_6DF5).l,a0
0000E3E8 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000E3EC D044                       		add.w	d4,d0
0000E3EE 0240 01F0                  		andi.w	#$1F0,d0
0000E3F2 6100 0000                  		bsr.w	sub_72BA
0000E3F6 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000E3FA 0644 0010                  		addi.w	#$10,d4
0000E3FE 51CE FFDE                  		dbf	d6,loc_728C
0000E402 4E75                       		rts	
0000E404                            ; ===========================================================================
0000E404 F7                         unk_72B2:	dc.b $F7 ; ÷
0000E405 08                         		dc.b   8 ;  
0000E406 F7                         		dc.b $F7 ; ÷
0000E407 08                         		dc.b   8 ;  
0000E408 F7                         		dc.b $F7 ; ÷
0000E409 10                         		dc.b $10 ;  
0000E40A F7                         		dc.b $F7 ; ÷
0000E40B 18                         		dc.b $18 ;  
0000E40C                             
0000E40C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E40C                             
0000E40C                             
0000E40C                            sub_72BA:
0000E40C E848                       		lsr.w	#4,d0
0000E40E 1030 0000                  		move.b	(a0,d0.w),d0
0000E412 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
0000E416 6700                       		beq.s	loc_72DA
0000E418 7AF0                       		moveq	#-$10,d5
0000E41A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E41E 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
0000E422 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E426 6100 FD56                  		bsr.w	DrawTiles_LR
0000E42A 6000                       		bra.s	locret_72EE
0000E42C                            ; ===========================================================================
0000E42C                             
0000E42C                            loc_72DA:
0000E42C 7A00                       		moveq	#0,d5
0000E42E 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000E432 6100 FE94                  		bsr.w	loc_7176
0000E436 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000E43A 7C1F                       		moveq	#$1F,d6
0000E43C 6100 FD6C                  		bsr.w	DrawTiles_LR3
0000E440                             
0000E440                            locret_72EE:
0000E440 4E75                       		rts	
0000E442                            ; End of function sub_72BA
0000E442                            
0000E442                            ; ---------------------------------------------------------------------------
0000E442                            ; Level Art loading subroutine
0000E442                            ; ---------------------------------------------------------------------------
0000E442                            
0000E442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E442                            
0000E442                            LoadZoneTiles:
0000E442 7000                       		moveq   #0,d0
0000E444 1038 FE10                  		move.b  ($FFFFFE10).w,d0
0000E448 E948                       		lsl.w   #4,d0
0000E44A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E450 6600                       		bne.s	tile_Check_Act_2	 ; if not, branch
0000E452 45F9 0000 0000             		lea     (MainLoadBlocks3).l,a2
0000E458 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E45E                            tile_Check_Act_2:
0000E45E 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E464 6600                       		bne.s	MainLoadTileLoad2	 ; if not, branch
0000E466 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E46C 4EF9 0000 0000             		jmp	 MainLoadTileLoad3
0000E472                            MainLoadTileLoad2:
0000E472 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E478                            MainLoadTileLoad3:
0000E478 45F2 0000                  		lea     (a2,d0.w),a2
0000E47C 201A                       		move.l  (a2)+,d0
0000E47E 0280 00FF FFFF             		andi.l  #$FFFFFF,d0     ; 8x8 tile pointer
0000E484 2040                       		movea.l d0,a0
0000E486 43F9 00FF 0000             		lea     ($FF0000).l,a1
0000E48C 4EB8 3A26                  		jsr   KosDec
0000E490 3609                       		move.w	a1,d3
0000E492 3E03                       		move.w	d3,d7
0000E494 0243 0FFF                  		andi.w	#$FFF,d3
0000E498 E24B                       		lsr.w	#1,d3
0000E49A E95F                       		rol.w	#4,d7
0000E49C 0247 000F                  		andi.w  #$F,d7
0000E4A0                            
0000E4A0 3407                       tileloop:	move.w  d7,d2
0000E4A2 EF4A                       		lsl.w   #7,d2
0000E4A4 EB4A                       		lsl.w   #5,d2
0000E4A6 223C 00FF FFFF             		move.l  #$FFFFFF,d1
0000E4AC 3202                       		move.w  d2,d1
0000E4AE 4EB9 0000 34E0             		jsr     (QueueDMATransfer).l
0000E4B4 3F07                       		move.w  d7,-(sp)
0000E4B6 11FC 000C F62A             		move.b  #$C,($FFFFF62A).w
0000E4BC 4EBA A8B4                  		jsr   DelayProgram
0000E4C0 4EB8 3762                  		jsr   RunPLC_Ram
0000E4C4 3E1F                       		move.w  (sp)+,d7
0000E4C6 363C 0800                  		move.w  #$800,d3
0000E4CA 51CF FFD4                  		dbf     d7,tileloop
0000E4CE                            
0000E4CE 4E75                       		rts
0000E4D0                            ; End of function LoadZoneTiles
0000E4D0                            
0000E4D0                            ; ---------------------------------------------------------------------------
0000E4D0                            ; Main Load Block loading subroutine
0000E4D0                            ; ---------------------------------------------------------------------------
0000E4D0                            
0000E4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4D0                            
0000E4D0                            
0000E4D0                            MainLoadBlockLoad:; XREF: Level; EndingSequence
0000E4D0 7000                       		moveq	#0,d0
0000E4D2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E4D6 E948                       		lsl.w	#4,d0
0000E4D8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w; is level Act 3?
0000E4DE 6600                       		bne.s	Check_Act_2	 ; if not, branch
0000E4E0 45F9 0000 0000             		lea	(MainLoadBlocks3).l,a2
0000E4E6 4EF9 0000 0000             		jmp	 MainLoadBlockLoad3
0000E4EC                            Check_Act_2:
0000E4EC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w; is level Act 2?
0000E4F2 6600                       		bne.s	MainLoadBlockLoad2	 ; if not, branch
0000E4F4 45F9 0000 0000             		lea	(MainLoadBlocks2).l,a2
0000E4FA 4EF9 0000 0000             				jmp	 MainLoadBlockLoad3
0000E500                            MainLoadBlockLoad2:
0000E500 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000E506                            MainLoadBlockLoad3:
0000E506 45F2 0000                  		lea	(a2,d0.w),a2
0000E50A 2F0A                       		move.l	a2,-(sp)
0000E50C 588A                       		addq.l	#4,a2
0000E50E 205A                       		movea.l	(a2)+,a0
0000E510 43F8 B000                  		lea	($FFFFB000).w,a1; RAM address for 16x16 mappings
0000E514 303C 0000                  		move.w	#0,d0
0000E518 4EB8 3A26                  		jsr	KosDec
0000E51C 205A                       		movea.l	(a2)+,a0
0000E51E                            ;		tst.b	($FFFFFE10).w	; are we in Green Hill Zone?
0000E51E                            ;		beq.s	@no_dec		; if yes, branch
0000E51E                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0000E51E                            ;		beq.s	@no_dec		; if yes, branch
0000E51E 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000E524 4EB8 3A26                  		jsr	KosDec
0000E528                             
0000E528                            ;@no_dec:
0000E528 6100 0000                  		bsr.w	LevelLayoutLoad
0000E52C 301A                       		move.w	(a2)+,d0
0000E52E 3012                       		move.w	(a2),d0
0000E530 0240 00FF                  		andi.w	#$FF,d0
0000E534 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w; is level SBZ3 (LZ4) ?
0000E53A 6600                       		bne.s	MLB_ChkSBZPal; if not, branch
0000E53C 700C                       		moveq	#$C,d0; use SB3 palette
0000E53E                            
0000E53E                            MLB_ChkSBZPal:
0000E53E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000E544 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000E546 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000E54C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000E54E                            
0000E54E                            MLB_UsePal0E:
0000E54E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000E550                            
0000E550                            MLB_NormalPal:
0000E550 4EB8 47FA                  		jsr	PalLoad1	; load pallet (based on	d0)
0000E554 245F                       		movea.l	(sp)+,a2
0000E556 584A                       		addq.w	#4,a2
0000E558 7000                       		moveq	#0,d0
0000E55A 1012                       		move.b	(a2),d0
0000E55C 6700                       		beq.s	locret_6D10
0000E55E 6100 0000                  		bsr.w	JmpTo2_LoadPLC		; load pattern load cues
0000E562                            
0000E562                            locret_6D10:
0000E562 4E75                       		rts	
0000E564                            ; End of function MainLoadBlockLoad
0000E564                            
0000E564                            JmpTo2_LoadPLC:
0000E564 4EF8 36F6                  		jmp	LoadPLC
0000E568                            
0000E568                            ; ---------------------------------------------------------------------------
0000E568                            ; Level	layout loading subroutine
0000E568                            ; ---------------------------------------------------------------------------
0000E568                            
0000E568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E568                            
0000E568                            
0000E568                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000E568 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E56C ED08                       		lsl.b	#6,d0
0000E56E E848                       		lsr.w	#4,d0
0000E570 3400                       		move.w	d0,d2
0000E572 D040                       		add.w	d0,d0
0000E574 D042                       		add.w	d2,d0
0000E576 43F9 0000 0000             		lea	(Level_Index).l,a1
0000E57C 2271 0000                  		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
0000E580 21C9 A400                  		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
0000E584 D2FC 0080                  		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
0000E588 21C9 A404                  		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
0000E58C 4E75                       		rts						; MJ Return
0000E58E                            ; End of function LevelLayoutLoad2
0000E58E                            
0000E58E                            
0000E58E                            ; ---------------------------------------------------------------------------
0000E58E                            ; Dynamic screen resize	loading	subroutine
0000E58E                            ; ---------------------------------------------------------------------------
0000E58E                            
0000E58E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E58E                            
0000E58E                            
0000E58E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000E58E 7000                       		moveq	#0,d0
0000E590 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000E594 D040                       		add.w	d0,d0
0000E596 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000E59A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000E59E 7202                       		moveq	#2,d1
0000E5A0 3038 F726                  		move.w	($FFFFF726).w,d0
0000E5A4 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000E5A8 6700                       		beq.s	locret_6DAA
0000E5AA 6400                       		bcc.s	loc_6DAC
0000E5AC 4441                       		neg.w	d1
0000E5AE 3038 F704                  		move.w	($FFFFF704).w,d0
0000E5B2 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000E5B6 6300                       		bls.s	loc_6DA0
0000E5B8 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000E5BC 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000E5C2                            
0000E5C2                            loc_6DA0:
0000E5C2 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E5C6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E5CC                            
0000E5CC                            locret_6DAA:
0000E5CC 4E75                       		rts	
0000E5CE                            ; ===========================================================================
0000E5CE                            
0000E5CE                            loc_6DAC:				; XREF: DynScrResizeLoad
0000E5CE 3038 F704                  		move.w	($FFFFF704).w,d0
0000E5D2 5040                       		addq.w	#8,d0
0000E5D4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000E5D8 6500                       		bcs.s	loc_6DC4
0000E5DA 0838 0001 D022             		btst	#1,($FFFFD022).w
0000E5E0 6700                       		beq.s	loc_6DC4
0000E5E2 D241                       		add.w	d1,d1
0000E5E4 D241                       		add.w	d1,d1
0000E5E6                            
0000E5E6                            loc_6DC4:
0000E5E6 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000E5EA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000E5F0 4E75                       		rts	
0000E5F2                            ; End of function DynScrResizeLoad
0000E5F2                            
0000E5F2                            ; ===========================================================================
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2                            ; Offset index for dynamic screen resizing
0000E5F2                            ; ---------------------------------------------------------------------------
0000E5F2 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000E5F6 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000E5FA 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000E5FE 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_ABZ-Resize_Index
0000E602                            ; ===========================================================================
0000E602                            ; ---------------------------------------------------------------------------
0000E602                            ; Green	Hill Zone dynamic screen resizing
0000E602                            ; ---------------------------------------------------------------------------
0000E602                            
0000E602                            Resize_GHZ:				; XREF: Resize_Index
0000E602 7000                       		moveq	#0,d0
0000E604 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E608 D040                       		add.w	d0,d0
0000E60A 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000E60E 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000E612                            ; ===========================================================================
0000E612 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000E614 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000E616 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000E618                            ; ===========================================================================
0000E618                            
0000E618                            Resize_GHZ1:
0000E618 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000E61E 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E624 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000E62A 6500                       		bcs.s	locret_6E08	; if not, branch
0000E62C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000E632 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E638                            		
0000E638                            
0000E638                            locret_6E08:
0000E638 4E75                       		rts	
0000E63A                            ; ===========================================================================
0000E63A                            
0000E63A                            Resize_GHZ2:
0000E63A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E640 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000E646 6500                       		bcs.s	locret_6E3A
0000E648 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000E64E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000E654 6500                       		bcs.s	locret_6E3A
0000E656 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E65C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000E662 6500                       		bcs.s	locret_6E3A
0000E664 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E66A                            		
0000E66A                            locret_6E3A:
0000E66A 4E75                       		rts	
0000E66C                            ; ===========================================================================
0000E66C                            
0000E66C                            Resize_GHZ3:
0000E66C 7000                       		moveq	#0,d0
0000E66E 1038 F742                  		move.b	($FFFFF742).w,d0
0000E672 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000E676 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000E67A                            ; ===========================================================================
0000E67A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000E67C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000E67E 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000E680                            ; ===========================================================================
0000E680                            
0000E680                            Resize_GHZ3main:
0000E680 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E686 31FC 0300 F72E             		move.w	#$300,($FFFFF72E).w ; set lower	y-boundary
0000E68C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000E692 6500                       		bcs.s	locret_6E96
0000E694 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000E69A 31FC 0310 F72E             		move.w	#$310,($FFFFF72E).w ; set lower	y-boundary
0000E6A0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E6A6 6500                       		bcs.s	locret_6E96
0000E6A8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000E6AE 6500                       		bcs.s	loc_6E98
0000E6B0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000E6B6 31FC 0400 F72E             		move.w	#$400,($FFFFF72E).w ; set lower	y-boundary
0000E6BC 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000E6C2 6400                       		bcc.s	loc_6E8E
0000E6C4 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000E6CA 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000E6D0                            
0000E6D0                            loc_6E8E:
0000E6D0 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000E6D6 6400                       		bcc.s	loc_6E98
0000E6D8                            
0000E6D8                            locret_6E96:
0000E6D8 4E75                       		rts	
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            loc_6E98:
0000E6DA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000E6E0 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E6E4 4E75                       		rts	
0000E6E6                            ; ===========================================================================
0000E6E6                            
0000E6E6                            Resize_GHZ3boss:
0000E6E6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000E6EC 6400                       		bcc.s	loc_6EB0
0000E6EE 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E6F2                            
0000E6F2                            loc_6EB0:
0000E6F2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000E6F8 6500                       		bcs.s	locret_6EE8
0000E6FA 4EB9 0000 0000             		jsr	SingleObjLoad
0000E700 6600                       		bne.s	loc_6ED0
0000E702 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000E706 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000E70C 337C 0280 000C             		move.w	#$280,$C(a1)
0000E712                            
0000E712                            loc_6ED0:
0000E712 303C 000E                  		move.w	#$0E,d0
0000E716 6100 B306                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E71A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E720 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E724 7011                       		moveq	#$11,d0
0000E726 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E72A                            ; ===========================================================================
0000E72A                            
0000E72A                            locret_6EE8:
0000E72A 4E75                       		rts	
0000E72C                            ; ===========================================================================
0000E72C                            
0000E72C                            Resize_GHZ3end:
0000E72C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E732 4E75                       		rts	
0000E734                            ; ===========================================================================
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            ; Labyrinth Zone dynamic screen	resizing
0000E734                            ; ---------------------------------------------------------------------------
0000E734                            
0000E734                            Resize_LZ:				; XREF: Resize_Index
0000E734 7000                       		moveq	#0,d0
0000E736 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E73A D040                       		add.w	d0,d0
0000E73C 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000E740 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000E744                            ; ===========================================================================
0000E744 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000E746 0000                       		dc.w Resize_LZ12-Resize_LZx
0000E748 0000                       		dc.w Resize_LZ3-Resize_LZx
0000E74A 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000E74C                            ; ===========================================================================
0000E74C                            
0000E74C                            Resize_LZ12:
0000E74C 4E75                       		rts	
0000E74E                            ; ===========================================================================
0000E74E                            
0000E74E                            Resize_LZ3:
0000E74E 4A38 F7EF                  		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
0000E752 6700                       		beq.s	loc_6F28				; if not, branch
0000E754 2038 A400                  		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
0000E758 0C80 0000 0000             		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
0000E75E 6700                       		beq.s	loc_6F28				; MJ: if so, branch to skip
0000E760 21FC 0000 0000 A400        		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
0000E768 303C 00B7                  		move.w	#$B7,d0
0000E76C 6100 ABC4                  		bsr.w	Jmpto_PlaySound_Special ; play rumbling sound
0000E770                            
0000E770                            loc_6F28:
0000E770 4A38 F742                  		tst.b	($FFFFF742).w
0000E774 6600                       		bne.s	locret_6F64
0000E776 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000E77C 6500                       		bcs.s	locret_6F62
0000E77E 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000E784 6400                       		bcc.s	locret_6F62
0000E786 4EB9 0000 0000             		jsr	SingleObjLoad
0000E78C 6600                       		bne.s	loc_6F4A
0000E78E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
0000E792                            
0000E792                            loc_6F4A:
0000E792 303C 000E                  		move.w	#$0E,d0
0000E796 6100 B286                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E79A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E7A0 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E7A4 7011                       		moveq	#$11,d0
0000E7A6 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E7AA                            ; ===========================================================================
0000E7AA                            
0000E7AA                            locret_6F62:
0000E7AA 4E75                       		rts	
0000E7AC                            ; ===========================================================================
0000E7AC                            
0000E7AC                            locret_6F64:
0000E7AC 4E75                       		rts	
0000E7AE                            ; ===========================================================================
0000E7AE                            
0000E7AE                            Resize_SBZ3:
0000E7AE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E7B4 6500                       		bcs.s	locret_6F8C
0000E7B6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000E7BC 6400                       		bcc.s	locret_6F8C	; if not, branch
0000E7BE 4238 FE30                  		clr.b	($FFFFFE30).w
0000E7C2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000E7C8 4EB9 0000 0000             		jsr Save_Progress
0000E7CE 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000E7D4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000E7DA                            
0000E7DA                            locret_6F8C:
0000E7DA 4E75                       		rts	
0000E7DC                            ; ===========================================================================
0000E7DC                            ; ---------------------------------------------------------------------------
0000E7DC                            ; Marble Zone dynamic screen resizing
0000E7DC                            ; ---------------------------------------------------------------------------
0000E7DC                            
0000E7DC                            Resize_MZ:				; XREF: Resize_Index
0000E7DC 7000                       		moveq	#0,d0
0000E7DE 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E7E2 D040                       		add.w	d0,d0
0000E7E4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000E7E8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000E7EC                            ; ===========================================================================
0000E7EC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000E7EE 0000                       		dc.w Resize_MZ2-Resize_MZx
0000E7F0 0000                       		dc.w Resize_MZ3-Resize_MZx
0000E7F2                            ; ===========================================================================
0000E7F2                            
0000E7F2                            Resize_MZ1:
0000E7F2 7000                       		moveq	#0,d0
0000E7F4 1038 F742                  		move.b	($FFFFF742).w,d0
0000E7F8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000E7FC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000E800                            ; ===========================================================================
0000E800 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000E802 0000                       		dc.w loc_6FEA-off_6FB2
0000E804 0000                       		dc.w loc_702E-off_6FB2
0000E806 0000                       		dc.w loc_7050-off_6FB2
0000E808                            ; ===========================================================================
0000E808                            
0000E808                            loc_6FBA:
0000E808 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000E80E 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000E814 6500                       		bcs.s	locret_6FE8
0000E816 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000E81C 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000E822 6500                       		bcs.s	locret_6FE8
0000E824 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000E82A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E830 6500                       		bcs.s	locret_6FE8
0000E832 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E836                            
0000E836                            locret_6FE8:
0000E836 4E75                       		rts	
0000E838                            ; ===========================================================================
0000E838                            
0000E838                            loc_6FEA:
0000E838 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000E83E 6400                       		bcc.s	loc_6FF8
0000E840 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E844 4E75                       		rts	
0000E846                            ; ===========================================================================
0000E846                            
0000E846                            loc_6FF8:
0000E846 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000E84C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000E852 6400                       		bcc.s	locret_702C
0000E854 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000E85A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000E860 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
0000E866 6400                       		bcc.s	locret_702C
0000E868 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000E86E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000E874 6500                       		bcs.s	locret_702C
0000E876 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E87A                            
0000E87A                            locret_702C:
0000E87A 4E75                       		rts	
0000E87C                            ; ===========================================================================
0000E87C                            
0000E87C                            loc_702E:
0000E87C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000E882 6400                       		bcc.s	loc_703C
0000E884 5538 F742                  		subq.b	#2,($FFFFF742).w
0000E888 4E75                       		rts	
0000E88A                            ; ===========================================================================
0000E88A                            
0000E88A                            loc_703C:
0000E88A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000E890 6500                       		bcs.s	locret_704E
0000E892 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000E898 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E89C                            
0000E89C                            locret_704E:
0000E89C 4E75                       		rts	
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            loc_7050:
0000E89E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000E8A4 6500                       		bcs.s	locret_7072
0000E8A6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000E8AC 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000E8B2 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000E8B8 6500                       		bcs.s	locret_7072
0000E8BA 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E8C0                            
0000E8C0                            locret_7072:
0000E8C0 4E75                       		rts	
0000E8C2                            ; ===========================================================================
0000E8C2                            
0000E8C2                            Resize_MZ2:
0000E8C2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E8C8 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000E8CE 6500                       		bcs.s	locret_7088
0000E8D0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000E8D6                            
0000E8D6                            locret_7088:
0000E8D6 4E75                       		rts	
0000E8D8                            ; ===========================================================================
0000E8D8                            
0000E8D8                            Resize_MZ3:
0000E8D8 7000                       		moveq	#0,d0
0000E8DA 1038 F742                  		move.b	($FFFFF742).w,d0
0000E8DE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000E8E2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000E8E6                            ; ===========================================================================
0000E8E6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000E8E8 0000                       		dc.w Resize_MZ3end-off_7098
0000E8EA                            ; ===========================================================================
0000E8EA                            
0000E8EA                            Resize_MZ3boss:
0000E8EA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000E8F0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000E8F6 6500                       		bcs.s	locret_70E8
0000E8F8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E8FE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000E904 6500                       		bcs.s	locret_70E8
0000E906 4EB9 0000 0000             		jsr	SingleObjLoad
0000E90C 6600                       		bne.s	loc_70D0
0000E90E 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000E912 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000E918 337C 022C 000C             		move.w	#$22C,$C(a1)
0000E91E                            
0000E91E                            loc_70D0:
0000E91E 303C 000E                  		move.w	#$0E,d0
0000E922 6100 B0FA                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E926 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E92C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E930 7011                       		moveq	#$11,d0
0000E932 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            locret_70E8:
0000E936 4E75                       		rts	
0000E938                            ; ===========================================================================
0000E938                            
0000E938                            Resize_MZ3end:
0000E938 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E93E 4E75                       		rts	
0000E940                            ; ===========================================================================
0000E940                            ; ---------------------------------------------------------------------------
0000E940                            ; Star Light Zone dynamic screen resizing
0000E940                            ; ---------------------------------------------------------------------------
0000E940                            
0000E940                            Resize_SLZ:				; XREF: Resize_Index
0000E940 7000                       		moveq	#0,d0
0000E942 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E946 D040                       		add.w	d0,d0
0000E948 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000E94C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000E950                            ; ===========================================================================
0000E950 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000E952 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000E954 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000E956                            ; ===========================================================================
0000E956                            
0000E956                            Resize_SLZ12:
0000E956 4E75                       		rts	
0000E958                            ; ===========================================================================
0000E958                            
0000E958                            Resize_SLZ3:
0000E958 7000                       		moveq	#0,d0
0000E95A 1038 F742                  		move.b	($FFFFF742).w,d0
0000E95E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000E962 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000E966                            ; ===========================================================================
0000E966 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000E968 0000                       		dc.w Resize_SLZ3boss-off_7118
0000E96A 0000                       		dc.w Resize_SLZ3end-off_7118
0000E96C                            ; ===========================================================================
0000E96C                            
0000E96C                            Resize_SLZ3main:
0000E96C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000E972 6500                       		bcs.s	locret_7130
0000E974 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000E97A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E97E                            
0000E97E                            locret_7130:
0000E97E 4E75                       		rts	
0000E980                            ; ===========================================================================
0000E980                            
0000E980                            Resize_SLZ3boss:
0000E980 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000E986 6500                       		bcs.s	locret_715C
0000E988 4EB9 0000 0000             		jsr	SingleObjLoad
0000E98E 6600                       		bne.s	loc_7144
0000E990 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000E994                            
0000E994                            loc_7144:
0000E994 303C 000E                  		move.w	#$0E,d0
0000E998 6100 B084                  		bsr.w	Jmpto_PlaySound2	; play boss music
0000E99C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000E9A2 5438 F742                  		addq.b	#2,($FFFFF742).w
0000E9A6 7011                       		moveq	#$11,d0
0000E9A8 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000E9AC                            ; ===========================================================================
0000E9AC                            
0000E9AC                            locret_715C:
0000E9AC 4E75                       		rts	
0000E9AE                            ; ===========================================================================
0000E9AE                            
0000E9AE                            Resize_SLZ3end:
0000E9AE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000E9B4 4E75                       		rts
0000E9B6 4E75                       		rts
0000E9B8                            ; ===========================================================================
0000E9B8                            ; ---------------------------------------------------------------------------
0000E9B8                            ; Spring Yard Zone dynamic screen resizing
0000E9B8                            ; ---------------------------------------------------------------------------
0000E9B8                            
0000E9B8                            Resize_SYZ:				; XREF: Resize_Index
0000E9B8 7000                       		moveq	#0,d0
0000E9BA 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000E9BE D040                       		add.w	d0,d0
0000E9C0 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000E9C4 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000E9C8                            ; ===========================================================================
0000E9C8 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000E9CA 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000E9CC 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000E9CE                            ; ===========================================================================
0000E9CE                            
0000E9CE                            Resize_SYZ1:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            
0000E9D0                            Resize_SYZ2:
0000E9D0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E9D6 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000E9DC 6500                       		bcs.s	locret_71A2
0000E9DE 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000E9E4 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000E9EA 6500                       		bcs.s	locret_71A2
0000E9EC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000E9F2                            
0000E9F2                            locret_71A2:
0000E9F2 4E75                       		rts	
0000E9F4                            ; ===========================================================================
0000E9F4                            
0000E9F4                            Resize_SYZ3:
0000E9F4 7000                       		moveq	#0,d0
0000E9F6 1038 F742                  		move.b	($FFFFF742).w,d0
0000E9FA 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000E9FE 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000EA02                            ; ===========================================================================
0000EA02 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000EA04 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000EA06 0000                       		dc.w Resize_SYZ3end-off_71B2
0000EA08                            ; ===========================================================================
0000EA08                            
0000EA08                            Resize_SYZ3main:
0000EA08 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000EA0E 6500                       		bcs.s	locret_71CE
0000EA10 4EB9 0000 0000             		jsr	SingleObjLoad
0000EA16 6600                       		bne.s	locret_71CE
0000EA18 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000EA1C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA20                            
0000EA20                            locret_71CE:
0000EA20 4E75                       		rts	
0000EA22                            ; ===========================================================================
0000EA22                            
0000EA22                            Resize_SYZ3boss:
0000EA22 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000EA28 6500                       		bcs.s	locret_7200
0000EA2A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000EA30 4EB9 0000 0000             		jsr	SingleObjLoad
0000EA36 6600                       		bne.s	loc_71EC
0000EA38 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000EA3C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EA40                            
0000EA40                            loc_71EC:
0000EA40 303C 000E                  		move.w	#$0E,d0
0000EA44 4EB9 0000 0000             		jsr	JmpTo_PlaySound	; play boss music
0000EA4A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EA50 7011                       		moveq	#$11,d0
0000EA52 4EF8 36F6                  		jmp	LoadPLC		; load boss patterns
0000EA56                            		
0000EA56                            JmpTo_PlaySound:
0000EA56 4EF9 0000 3212             	jmp	(PlaySound).l
0000EA5C                            ; ===========================================================================
0000EA5C                            
0000EA5C                            locret_7200:
0000EA5C 4E75                       		rts	
0000EA5E                            ; ===========================================================================
0000EA5E                            
0000EA5E                            Resize_SYZ3end:
0000EA5E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EA64 4E75                       		rts	
0000EA66                            ; ===========================================================================
0000EA66                            ; ---------------------------------------------------------------------------
0000EA66                            ; Scrap	Brain Zone dynamic screen resizing
0000EA66                            ; ---------------------------------------------------------------------------
0000EA66                            
0000EA66                            Resize_SBZ:				; XREF: Resize_Index
0000EA66 7000                       		moveq	#0,d0
0000EA68 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EA6C D040                       		add.w	d0,d0
0000EA6E 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000EA72 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000EA76                            ; ===========================================================================
0000EA76 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000EA78 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000EA7A 0000                       		dc.w Resize_FZ-Resize_SBZx
0000EA7C                            ; ===========================================================================
0000EA7C                            
0000EA7C                            Resize_SBZ1:
0000EA7C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000EA82 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000EA88 6500                       		bcs.s	locret_7242
0000EA8A 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000EA90 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000EA96 6500                       		bcs.s	locret_7242
0000EA98 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000EA9E                            
0000EA9E                            locret_7242:
0000EA9E 4E75                       		rts	
0000EAA0                            ; ===========================================================================
0000EAA0                            
0000EAA0                            Resize_SBZ2:
0000EAA0 7000                       		moveq	#0,d0
0000EAA2 1038 F742                  		move.b	($FFFFF742).w,d0
0000EAA6 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000EAAA 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000EAAE                            ; ===========================================================================
0000EAAE 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000EAB0 0000                       		dc.w Resize_SBZ2boss-off_7252
0000EAB2 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000EAB4 0000                       		dc.w Resize_SBZ2end-off_7252
0000EAB6                            ; ===========================================================================
0000EAB6                            
0000EAB6                            Resize_SBZ2main:
0000EAB6 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000EABC 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000EAC2 6500                       		bcs.s	locret_727A
0000EAC4 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000EACA 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000EAD0 6500                       		bcs.s	locret_727A
0000EAD2 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EAD6                            
0000EAD6                            locret_727A:
0000EAD6 4E75                       		rts	
0000EAD8                            ; ===========================================================================
0000EAD8                            
0000EAD8                            Resize_SBZ2boss:
0000EAD8 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000EADE 6500                       		bcs.s	locret_7298
0000EAE0 4EB9 0000 0000             		jsr	SingleObjLoad
0000EAE6 6600                       		bne.s	locret_7298
0000EAE8 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000EAEC 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EAF0 701E                       		moveq	#$1E,d0
0000EAF2 4EF8 36F6                  		jmp	LoadPLC		; load SBZ2 Eggman patterns
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            locret_7298:
0000EAF6 4E75                       		rts	
0000EAF8                            ; ===========================================================================
0000EAF8                            
0000EAF8                            Resize_SBZ2boss2:
0000EAF8 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000EAFE 6500                       		bcs.s	loc_72B6
0000EB00 4EB9 0000 0000             		jsr	SingleObjLoad
0000EB06 6600                       		bne.s	loc_72B0
0000EB08 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000EB0C 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB10                            
0000EB10                            loc_72B0:
0000EB10 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EB16                            
0000EB16                            loc_72B6:
0000EB16 6000                       		bra.s	loc_72C2
0000EB18                            ; ===========================================================================
0000EB18                            
0000EB18                            Resize_SBZ2end:
0000EB18 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000EB1E 6500                       		bcs.s	loc_72C2
0000EB20 4E75                       		rts	
0000EB22                            ; ===========================================================================
0000EB22                            
0000EB22                            loc_72C2:
0000EB22 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000EB28 4E75                       		rts	
0000EB2A                            ; ===========================================================================
0000EB2A                            
0000EB2A                            Resize_FZ:
0000EB2A 7000                       		moveq	#0,d0
0000EB2C 1038 F742                  		move.b	($FFFFF742).w,d0
0000EB30 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000EB34 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000EB38                            ; ===========================================================================
0000EB38 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000EB3C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000EB40 0000                       		dc.w Resize_FZend2-off_72D8
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            Resize_FZmain:
0000EB42 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000EB48 6500                       		bcs.s	loc_72F4
0000EB4A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB4E 701F                       		moveq	#$1F,d0
0000EB50 4EB8 36F6                  		jsr	LoadPLC		; load FZ boss patterns
0000EB54                            
0000EB54                            loc_72F4:
0000EB54 60CC                       		bra.s	loc_72C2
0000EB56                            ; ===========================================================================
0000EB56                            
0000EB56                            Resize_FZboss:
0000EB56 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000EB5C 6500                       		bcs.s	loc_7312
0000EB5E 4EB9 0000 0000             		jsr	SingleObjLoad
0000EB64 6600                       		bne.s	loc_7312
0000EB66 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000EB6A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB6E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000EB74                            
0000EB74                            loc_7312:
0000EB74 60AC                       		bra.s	loc_72C2
0000EB76                            ; ===========================================================================
0000EB76                            
0000EB76                            Resize_FZend:
0000EB76 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000EB7C 6500                       		bcs.s	loc_7320
0000EB7E 5438 F742                  		addq.b	#2,($FFFFF742).w
0000EB82                            
0000EB82                            loc_7320:
0000EB82 609E                       		bra.s	loc_72C2
0000EB84                            ; ===========================================================================
0000EB84                            
0000EB84                            locret_7322:
0000EB84 4E75                       		rts	
0000EB86                            ; ===========================================================================
0000EB86                            
0000EB86                            Resize_FZend2:
0000EB86 609A                       		bra.s	loc_72C2
0000EB88                            ; ===========================================================================
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            ; Ending sequence dynamic screen resizing (empty)
0000EB88                            ; ---------------------------------------------------------------------------
0000EB88                            
0000EB88                            Resize_Ending:				; XREF: Resize_Index
0000EB88 4E75                       		rts	
0000EB8A                            ; ===========================================================================
0000EB8A                            ; ---------------------------------------------------------------------------
0000EB8A                            ; Alpha Beta Zone sequence dynamic screen resizing (empty)
0000EB8A                            ; ---------------------------------------------------------------------------
0000EB8A                             
0000EB8A                            Resize_ABZ:				; XREF: Resize_Index
0000EB8A 7000                       		moveq	#0,d0
0000EB8C 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000EB90 D040                       		add.w	d0,d0
0000EB92 303B 0000                  		move.w	Resize_ABZx(pc,d0.w),d0
0000EB96 4EFB 0000                  		jmp	Resize_ABZx(pc,d0.w)
0000EB9A                            ; ===========================================================================
0000EB9A 0000                       Resize_ABZx:	dc.w Resize_ABZ1-Resize_ABZx
0000EB9C 0000                       		dc.w Resize_ABZ2-Resize_ABZx
0000EB9E 0000                       		dc.w Resize_ABZ3-Resize_ABZx
0000EBA0 0000                       		dc.w Resize_ABZ4-Resize_ABZx
0000EBA2                            ; ===========================================================================
0000EBA2                            Resize_ABZ1:
0000EBA2 4E75                       		rts
0000EBA4                            ; ===========================================================================
0000EBA4                            Resize_ABZ2:
0000EBA4 4E75                       		rts
0000EBA6                            ; ===========================================================================
0000EBA6                            Resize_ABZ3:
0000EBA6 4E75                       		rts
0000EBA8                            ; ===========================================================================
0000EBA8                            Resize_ABZ4:
0000EBA8 4E75                       		rts
0000EBAA                            ; ===========================================================================
0000EBAA                            ; ---------------------------------------------------------------------------
0000EBAA                            ; Object 11 - GHZ bridge
0000EBAA                            ; ---------------------------------------------------------------------------
0000EBAA                            ; OST Variables:
0000EBAA =00000030                  Obj11_child1		equ objoff_30	; pointer to first set of bridge segments
0000EBAA =00000034                  Obj11_child2		equ objoff_34	; pointer to second set of bridge segments, if applicable
0000EBAA =0000003C                  Obj11_baseYpos		equ	objoff_3C	; resting y position of bridge
0000EBAA =0000003E                  Obj11_Sonanim		equ $3E
0000EBAA                            
0000EBAA                            Obj11:
0000EBAA                            Bridge:					; XREF: Obj_Index
0000EBAA 0828 0006 0001             		btst	#6,render_flags(a0)	; is this a child sprite object?
0000EBB0 6600 0000                  		bne.w	@child			; if yes, branch
0000EBB4 7000                       		moveq	#0,d0
0000EBB6 1028 0024                  		move.b	routine(a0),d0
0000EBBA 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
0000EBBE 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
0000EBC2                            ; ===========================================================================
0000EBC2                            @child:	; child sprite objects only need to be drawn
0000EBC2 303C 0180                  		move.w	#$180,d0
0000EBC6 6000 0000                  		bra.w	DisplaySprite3
0000EBCA                            ; ===========================================================================
0000EBCA 0000                       Bri_Index:	dc.w 	Bri_Main-Bri_Index
0000EBCC 0000                        			dc.w	Bri_Action-Bri_Index
0000EBCE 0000                        			dc.w 	Bri_Platform-Bri_Index
0000EBD0 0000                        			dc.w	Bri_Delete-Bri_Index
0000EBD2 0000                        			dc.w	Bri_Delete-Bri_Index
0000EBD4 0000                       		 	dc.w	Bri_Display-Bri_Index
0000EBD6 0000                       		 	dc.w	Bri_Collapse-Bri_Index
0000EBD8                            ; ===========================================================================
0000EBD8                            
0000EBD8                            Bri_Main:	; Routine 0
0000EBD8 5428 0024                  	addq.b	#2,routine(a0)
0000EBDC 217C 0000 0000 0004        	move.l	#Map_obj11,4(a0)
0000EBE4 317C 438E 0002             	move.w	#$438E,2(a0)
0000EBEA 117C 0004 0001             	move.b	#4,render_flags(a0)
0000EBF0 317C 0180 0018             	move.w	#$180,priority(a0)
0000EBF6 117C 0080 0023             	move.b	#$80,width_pixels(a0)
0000EBFC 3428 000C                  	move.w	y_pos(a0),d2
0000EC00 3142 003C                  	move.w	d2,Obj11_baseYpos(a0)
0000EC04 3628 0008                  	move.w	x_pos(a0),d3
0000EC08 1810                       	move.b	0(a0),d4	; copy object number ($11) to d4
0000EC0A 45E8 0028                  	lea		subtype(a0),a2
0000EC0E 7200                       	moveq	#0,d1
0000EC10 1212                       	move.b	(a2),d1		; copy bridge length to d1
0000EC12                            ;	move.b	#0,(a2)+	; clear bridge length
0000EC12 3001                       	move.w	d1,d0
0000EC14 E248                       	lsr.w	#1,d0
0000EC16 E948                       	lsl.w	#4,d0
0000EC18 9640                       	sub.w	d0,d3		; d3 is position of leftmost log
0000EC1A 4841                       	swap	d1	; store subtype in high word for later
0000EC1C 323C 0008                  	move.w	#8,d1
0000EC20 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EC22 3029 0028                  	move.w	sub6_x_pos(a1),d0
0000EC26 5140                       	subq.w	#8,d0
0000EC28 3340 0008                  	move.w	d0,x_pos(a1)		; center of first subsprite object
0000EC2C 2149 0030                  	move.l	a1,Obj11_child1(a0)	; pointer to first subsprite object
0000EC30 4841                       	swap	d1	; retrieve subtype
0000EC32 5141                       	subq.w	#8,d1
0000EC34 6300                       	bls.s	@finish	; branch, if subtype <= 8 (bridge has no more than 8 logs)
0000EC36                            	; else, create a second subsprite object for the rest of the bridge
0000EC36 3801                       	move.w	d1,d4
0000EC38 6100                       	bsr.s	Obj11_MakeBdgSegment
0000EC3A 2149 0034                  	move.l	a1,Obj11_child2(a0)	; pointer to second subsprite object
0000EC3E 3004                       	move.w	d4,d0
0000EC40 D040                       	add.w	d0,d0
0000EC42 D044                       	add.w	d4,d0	; d0*3
0000EC44 3031 0010                  	move.w	sub2_x_pos(a1,d0.w),d0
0000EC48 5140                       	subq.w	#8,d0
0000EC4A 3340 0008                  	move.w	d0,x_pos(a1)		; center of second subsprite object 
0000EC4E                            @finish:
0000EC4E 6000                       	bra.s	Bri_Action
0000EC50                            
0000EC50                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EC50                            Obj11_MakeBdgSegment:
0000EC50 6100 0000                  	bsr.w	SingleObjLoad2
0000EC54 6600                       	bne.s	@rts
0000EC56 1290                       	move.b	(a0),(a1) ; load obj11
0000EC58 3368 0008 0008             	move.w	x_pos(a0),x_pos(a1)
0000EC5E 3368 000C 000C             	move.w	y_pos(a0),y_pos(a1)
0000EC64 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
0000EC6A 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
0000EC70 1368 0001 0001             	move.b	render_flags(a0),render_flags(a1)
0000EC76 08E9 0006 0001             	bset	#6,render_flags(a1)
0000EC7C 137C 0040 000E             	move.b	#$40,mainspr_width(a1)
0000EC82 1341 000F                  	move.b	d1,mainspr_childsprites(a1)
0000EC86 5301                       	subq.b	#1,d1
0000EC88 45E9 0010                  	lea		sub2_x_pos(a1),a2 ; starting address for subsprite data
0000EC8C                            
0000EC8C                            @makelog:
0000EC8C 34C3                       	move.w	d3,(a2)+	; sub?_x_pos
0000EC8E 34C2                       	move.w	d2,(a2)+	; sub?_y_pos
0000EC90 34FC 0000                  	move.w	#0,(a2)+	; sub?_mapframe
0000EC94 0643 0010                  	addi.w	#$10,d3		; width of a log, x_pos for next log
0000EC98 51C9 FFF2                  	dbf	d1,@makelog		; repeat for d1 logs
0000EC9C                            @rts:
0000EC9C 4E75                       	rts
0000EC9E                            ; End of function Obj11_MakeBdgSegment
0000EC9E                            
0000EC9E                            ; ===========================================================================
0000EC9E                            Bri_Action:	; Routine 2
0000EC9E 6100                       		bsr.s	Bri_Solid
0000ECA0 4A28 003E                  		tst.b	$3E(a0)
0000ECA4 6700                       		beq.s	@display
0000ECA6 5928 003E                  		subq.b	#4,$3E(a0)
0000ECAA 6100 0000                  		bsr.w	Bri_Bend
0000ECAE                            
0000ECAE                            	@display:
0000ECAE                            		;bsr.w	DisplaySprite
0000ECAE 6000 0000                  		bra.w	Bri_ChkDel
0000ECB2                            
0000ECB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ECB2                            
0000ECB2                            
0000ECB2                            Bri_Solid:
0000ECB2 7200                       		moveq	#0,d1
0000ECB4 1228 0028                  		move.b	subtype(a0),d1
0000ECB8 E749                       		lsl.w	#3,d1
0000ECBA 3401                       		move.w	d1,d2
0000ECBC 5041                       		addq.w	#8,d1
0000ECBE D442                       		add.w	d2,d2
0000ECC0 43F8 D000                  		lea	(v_player).w,a1
0000ECC4 1169 001C 001C             		move.b	anim(a1),anim(a0) 	; remember sonic's animation
0000ECCA 3169 0012 0012             		move.w	y_vel(a1),y_vel(a0) 	; remember sonic's y speed		
0000ECD0 4A69 0012                  		tst.w	y_vel(a1)
0000ECD4 6B00 0000                  		bmi.w	locret_751E
0000ECD8 3029 0008                  		move.w	x_pos(a1),d0
0000ECDC 9068 0008                  		sub.w	x_pos(a0),d0
0000ECE0 D041                       		add.w	d1,d0
0000ECE2 6B00 0000                  		bmi.w	locret_751E
0000ECE6 B042                       		cmp.w	d2,d0
0000ECE8 6400 0000                  		bcc.w	locret_751E
0000ECEC 6000 0000                  		bra.w	Platform2
0000ECF0                            ; End of function Bri_Solid
0000ECF0                            
0000ECF0                            ; ===========================================================================
0000ECF0                            
0000ECF0                            Bri_ChkDel:
0000ED0E 4E75                       	rts
0000ED10                            ; ---------------------------------------------------------------------------
0000ED10                            @delete:	; delete first subsprite object
0000ED10 2268 0030                  	movea.l	Obj11_child1(a0),a1 ; a1=object
0000ED14 6100 0000                  	bsr.w	DeleteObject2
0000ED18 0C28 0008 0028             	cmpi.b	#8,subtype(a0)
0000ED1E 6300                       	bls.s	@delparent	; if bridge has more than 8 logs, delete second subsprite object
0000ED20 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000ED24 6100 0000                  	bsr.w	DeleteObject2
0000ED28                            @delparent:
0000ED28 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000ED2C 3440                       	    movea.w	d0,a2				; load address into a2
0000ED2E 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000ED32 6000 0000                  	bra.w	DeleteObject
0000ED36                            ; ===========================================================================
0000ED36                            Bri_Delete:	; Routine 6, 8
0000ED36 6000 0000                  		bra.w	DeleteObject
0000ED3A                            Bri_Display:
0000ED3A 6000 0000                  		bra.w	DisplaySprite
0000ED3E                            ; ===========================================================================
0000ED3E                            
0000ED3E                            Bri_Platform:	; Routine 4
0000ED3E 0C28 0023 001C             		cmpi.b	#$23,anim(a0) 		; is Sonic stomping?
0000ED44 6600                       		bne.s	@bend
0000ED46 117C 000C 0024             		move.b	#$C,routine(a0)		; go to collapsing routine
0000ED4C 43F8 D000                  		lea	(v_player).w,a1
0000ED50 08A9 0003 0022             		bclr	#3,status(a1)
0000ED56 08A8 0003 0022             		bclr	#3,status(a0)
0000ED5C 137C 0023 001C             		move.b	#$23,anim(a1) 	
0000ED62 3368 0012 0012             		move.w	y_vel(a0),y_vel(a1) 		; restore sonic's y speed		
0000ED68 6000 0000                  		bra.w	Bri_Collapse
0000ED6C                            	@bend:	
0000ED6C 6100 0000                  		bsr.w	Bri_Bend
0000ED70 6100                       		bsr.s	Bri_WalkOff
0000ED72                            	;	bsr.w	DisplaySprite
0000ED72 6000 FF7C                  		bra.w	Bri_ChkDel
0000ED76                            ; ===========================================================================
0000ED76                            
0000ED76                            ; ---------------------------------------------------------------------------
0000ED76                            ; Subroutine allowing Sonic to walk off a bridge
0000ED76                            ; ---------------------------------------------------------------------------
0000ED76                            
0000ED76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED76                            
0000ED76                            Obj11_WalkOff:
0000ED76                            Bri_WalkOff:				; XREF: Bri_Platform
0000ED76 43F8 D000                  		lea	(v_player).w,a1
0000ED7A 7200                       		moveq	#0,d1
0000ED7C 1228 0028                  		move.b	subtype(a0),d1
0000ED80 E749                       		lsl.w	#3,d1
0000ED82 3401                       		move.w	d1,d2
0000ED84 5041                       		addq.w	#8,d1
0000ED86 6100 0000                  		bsr.w	ExitPlatform2
0000ED8A 6400                       		bcc.s	locret_75BE
0000ED8C E848                       		lsr.w	#4,d0
0000ED8E 1140 003F                  		move.b	d0,$3F(a0)
0000ED92 1028 003E                  		move.b	$3E(a0),d0
0000ED96 0C00 0040                  		cmpi.b	#$40,d0
0000ED9A 6700                       		beq.s	loc_75B6
0000ED9C 5828 003E                  		addq.b	#4,$3E(a0)
0000EDA0                            
0000EDA0                            loc_75B6:
0000EDA0 6100 0000                  		bsr.w	Bri_MoveSonic
0000EDA4                            
0000EDA4                            locret_75BE:
0000EDA4 4E75                       		rts	
0000EDA6                            ; End of function Bri_WalkOff
0000EDA6                            
0000EDA6                            
0000EDA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EDA6                            
0000EDA6                            Obj11_MoveSonic:
0000EDA6                            Bri_MoveSonic:				; XREF: Bri_WalkOff
0000EDA6 7000                       		moveq	#0,d0
0000EDA8 1028 003F                  		move.b	$3F(a0),d0						; which piece sonic is standing on
0000EDAC 2468 0030                  	movea.l	Obj11_child1(a0),a2
0000EDB0 0C40 0008                  	cmpi.w	#8,d0								; is piece number under 8
0000EDB4 6500                       	blo.s	@got_object							; if so, we have the right one
0000EDB6 2468 0034                  	movea.l	Obj11_child2(a0),a2 ; a2=object
0000EDBA 5140                       	subi.w	#8,d0
0000EDBC                            @got_object:
0000EDBC D040                       	add.w	d0,d0
0000EDBE 3200                       	move.w	d0,d1
0000EDC0 D040                       	add.w	d0,d0
0000EDC2 D041                       	add.w	d1,d0
0000EDC4 3032 0012                  	move.w	sub2_y_pos(a2,d0.w),d0
0000EDC8 5140                       	subq.w	#8,d0
0000EDCA 7200                       	moveq	#0,d1
0000EDCC 1229 0016                  	move.b	$16(a1),d1
0000EDD0 9041                       	sub.w	d1,d0
0000EDD2 3340 000C                  	move.w	d0,y_pos(a1)							; change Sonic's position on y-axis
0000EDD6                            ;	moveq	#0,d4
0000EDD6 4E75                       	rts
0000EDD8                            ; End of function Bri_MoveSonic
0000EDD8                            
0000EDD8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000EDD8                            ; subroutine to make the bridge push down where Sonic or Tails walks over
0000EDD8                            Obj11_Bend:
0000EDD8                            Bri_Bend:
0000EDD8 1028 003E                  	move.b	objoff_3E(a0),d0
0000EDDC 6100 9FC6                  	bsr.w	CalcSine
0000EDE0 3800                       	move.w	d0,d4
0000EDE2 49F9 0000 0000             	lea	(byte_FB28).l,a4
0000EDE8 7000                       	moveq	#0,d0
0000EDEA 1028 0028                  	move.b	subtype(a0),d0
0000EDEE E948                       	lsl.w	#4,d0
0000EDF0 7600                       	moveq	#0,d3
0000EDF2 1628 003F                  	move.b	objoff_3F(a0),d3
0000EDF6 3403                       	move.w	d3,d2
0000EDF8 D640                       	add.w	d0,d3
0000EDFA 7A00                       	moveq	#0,d5
0000EDFC 4BF9 0000 0000             	lea	(Obj11_DepressionOffsets-$80).l,a5
0000EE02 1A35 3000                  	move.b	(a5,d3.w),d5
0000EE06 0243 000F                  	andi.w	#$F,d3
0000EE0A E94B                       	lsl.w	#4,d3
0000EE0C 47F4 3000                  	lea	(a4,d3.w),a3
0000EE10 2268 0030                  	movea.l	Obj11_child1(a0),a1
0000EE14 45E9 0042                  	lea	sub9_y_pos+next_subspr(a1),a2
0000EE18 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE1C                            
0000EE1C                            @set_piece_y:
0000EE1C 7000                       	moveq	#0,d0
0000EE1E 101B                       	move.b	(a3)+,d0
0000EE20 5240                       	addq.w	#1,d0
0000EE22 C0C5                       	mulu.w	d5,d0
0000EE24 C0C4                       	mulu.w	d4,d0
0000EE26 4840                       	swap	d0
0000EE28 D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000EE2C 3280                       	move.w	d0,(a1)
0000EE2E 5C49                       	addq.w	#6,a1
0000EE30 B2CA                       	cmpa.w	a2,a1
0000EE32 6600                       	bne.s	@next_piece
0000EE34 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EE38 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE3C                            @next_piece:
0000EE3C 51CA FFDE                  	dbf	d2,@set_piece_y
0000EE40                            
0000EE40 7000                       	moveq	#0,d0
0000EE42 1028 0028                  	move.b	subtype(a0),d0
0000EE46 7600                       	moveq	#0,d3
0000EE48 1628 003F                  	move.b	objoff_3F(a0),d3
0000EE4C 5203                       	addq.b	#1,d3
0000EE4E 9600                       	sub.b	d0,d3
0000EE50 4403                       	neg.b	d3
0000EE52 6B00                       	bmi.s	@rts
0000EE54 3403                       	move.w	d3,d2
0000EE56 E94B                       	lsl.w	#4,d3
0000EE58 47F4 3000                  	lea	(a4,d3.w),a3
0000EE5C D6C2                       	adda.w	d2,a3
0000EE5E 5342                       	subq.w	#1,d2
0000EE60 6500                       	bcs.s	@rts
0000EE62                            
0000EE62                            @set_piece_y2:
0000EE62 7000                       	moveq	#0,d0
0000EE64 1023                       	move.b	-(a3),d0
0000EE66 5240                       	addq.w	#1,d0
0000EE68 C0C5                       	mulu.w	d5,d0
0000EE6A C0C4                       	mulu.w	d4,d0
0000EE6C 4840                       	swap	d0
0000EE6E D068 003C                  	add.w	Obj11_baseYpos(a0),d0
0000EE72 3280                       	move.w	d0,(a1)
0000EE74 5C49                       	addq.w	#6,a1
0000EE76 B2CA                       	cmpa.w	a2,a1
0000EE78 6600                       	bne.s	@next_piece2
0000EE7A 2268 0034                  	movea.l	Obj11_child2(a0),a1 ; a1=object
0000EE7E 43E9 0012                  	lea	sub2_y_pos(a1),a1
0000EE82                            @next_piece2:
0000EE82 51CA FFDE                  	dbf	d2,@set_piece_y2
0000EE86                            @rts:
0000EE86 4E75                       	rts
0000EE88                            ; ===========================================================================
0000EE88                            ; seems to be bridge piece vertical position offset data
0000EE88                            Obj11_DepressionOffsets: ; byte_FA98:
0000EE88 0204 0608 0806 0402 0000+  	dc.b   2,  4,  6,  8,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000EE98 0204 0608 0A08 0604 0200+  	dc.b   2,  4,  6,  8, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0,  0; 32
0000EEA8 0204 0608 0A0A 0806 0402+  	dc.b   2,  4,  6,  8, $A, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0,  0; 48
0000EEB8 0204 0608 0A0C 0A08 0604+  	dc.b   2,  4,  6,  8, $A, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0,  0; 64
0000EEC8 0204 0608 0A0C 0C0A 0806+  	dc.b   2,  4,  6,  8, $A, $C, $C, $A,  8,  6,  4,  2,  0,  0,  0,  0; 80
0000EED8 0204 0608 0A0C 0E0C 0A08+  	dc.b   2,  4,  6,  8, $A, $C, $E, $C, $A,  8,  6,  4,  2,  0,  0,  0; 96
0000EEE8 0204 0608 0A0C 0E0E 0C0A+  	dc.b   2,  4,  6,  8, $A, $C, $E, $E, $C, $A,  8,  6,  4,  2,  0,  0; 112
0000EEF8 0204 0608 0A0C 0E10 0E0C+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10, $E, $C, $A,  8,  6,  4,  2,  0; 128
0000EF08 0204 0608 0A0C 0E10 100E+  	dc.b   2,  4,  6,  8, $A, $C, $E,$10,$10, $E, $C, $A,  8,  6,  4,  2; 144
0000EF18                            
0000EF18                            ; something else important for bridge depression to work (phase? bridge size adjustment?)
0000EF18                            byte_FB28:
0000EF18 FF00 0000 0000 0000 0000+  	dc.b $FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 16
0000EF28 B5FF 0000 0000 0000 0000+  	dc.b $B5,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 32
0000EF38 7EDB FF00 0000 0000 0000+  	dc.b $7E,$DB,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 48
0000EF48 61B5 ECFF 0000 0000 0000+  	dc.b $61,$B5,$EC,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 64
0000EF58 4A93 CDF3 FF00 0000 0000+  	dc.b $4A,$93,$CD,$F3,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 80
0000EF68 3E7E B0DB F6FF 0000 0000+  	dc.b $3E,$7E,$B0,$DB,$F6,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0; 96
0000EF78 386D 9DC5 E4F8 FF00 0000+  	dc.b $38,$6D,$9D,$C5,$E4,$F8,$FF,  0,  0,  0,  0,  0,  0,  0,  0,  0; 112
0000EF88 3161 8EB5 D4EC FBFF 0000+  	dc.b $31,$61,$8E,$B5,$D4,$EC,$FB,$FF,  0,  0,  0,  0,  0,  0,  0,  0; 128
0000EF98 2B56 7EA2 C1DB EEFB FF00+  	dc.b $2B,$56,$7E,$A2,$C1,$DB,$EE,$FB,$FF,  0,  0,  0,  0,  0,  0,  0; 144
0000EFA8 254A 7393 B0CD E1F3 FCFF+  	dc.b $25,$4A,$73,$93,$B0,$CD,$E1,$F3,$FC,$FF,  0,  0,  0,  0,  0,  0; 160
0000EFB8 1F44 6788 A7BD D4E7 F4FD+  	dc.b $1F,$44,$67,$88,$A7,$BD,$D4,$E7,$F4,$FD,$FF,  0,  0,  0,  0,  0; 176
0000EFC8 1F3E 5C7E 98B0 C9DB EAF6+  	dc.b $1F,$3E,$5C,$7E,$98,$B0,$C9,$DB,$EA,$F6,$FD,$FF,  0,  0,  0,  0; 192
0000EFD8 1938 5673 8EA7 BDD1 E1EE+  	dc.b $19,$38,$56,$73,$8E,$A7,$BD,$D1,$E1,$EE,$F8,$FE,$FF,  0,  0,  0; 208
0000EFE8 1938 506D 839D B0C5 D8E4+  	dc.b $19,$38,$50,$6D,$83,$9D,$B0,$C5,$D8,$E4,$F1,$F8,$FE,$FF,  0,  0; 224
0000EFF8 1931 4A67 7E93 A7BD CDDB+  	dc.b $19,$31,$4A,$67,$7E,$93,$A7,$BD,$CD,$DB,$E7,$F3,$F9,$FE,$FF,  0; 240
0000F008 1931 4A61 788E A2B5 C5D4+  	dc.b $19,$31,$4A,$61,$78,$8E,$A2,$B5,$C5,$D4,$E1,$EC,$F4,$FB,$FE,$FF; 256
0000F018                            
0000F018                            ; ===========================================================================
0000F018                            PlatformObj_Bridge:
0000F018 4A69 0012                  		tst.w	y_vel(a1)
0000F01C 6B00 0000                  		bmi.w	locret_751E
0000F020 3029 0008                  		move.w	x_pos(a1),d0
0000F024 9068 0008                  		sub.w	x_pos(a0),d0
0000F028 D041                       		add.w	d1,d0
0000F02A 6B00 0000                  		bmi.w	locret_751E
0000F02E B042                       		cmp.w	d2,d0
0000F030 6400 0000                  		bcc.w	locret_751E
0000F034                            		
0000F034 6000 0000                  		bra.w	Platform2
0000F038                            ; End of function Bri_Solid
0000F038                            
0000F038                            ; ===========================================================================
0000F038                            Bri_Collapse:
0000F038 2268 0030                  	movea.l	Obj11_child1(a0),a1	
0000F03C 45E9 0012                  	lea	sub2_y_pos(a1),a2	; load first childsprite y pos
0000F040 47F9 0000 0000             	lea	(Bri_Piece_Speed).l,a3	; load peice speeds
0000F046 7207                       	moveq	#8-1,d1			; move first 8 childsprites
0000F048                            @child1_yfall:
0000F048 301B                       	move.w	(a3)+,d0		; add to childsprite y pos
0000F04A D152                       	add.w	d0,(a2)
0000F04C D5FC 0000 0006             	adda.l	#6,a2			; advance to next piece
0000F052 51C9 FFF4                  	dbf	d1,@child1_yfall
0000F056                            
0000F056 7200                       	moveq	#0,d1
0000F058 1228 0028                  	move.b	subtype(a0),d1	; retrieve subtype
0000F05C 5141                       	subq.w	#8,d1
0000F05E 6300                       	bls.s	@finish			; branch, if subtype <= 8 (bridge has no more than 8 logs)
0000F060                            		
0000F060 2268 0034                  	movea.l	Obj11_child2(a0),a1	
0000F064 45E9 0012                  	lea	sub2_y_pos(a1),a2	; load first childsprite y pos
0000F068                            @child2_yfall:
0000F068 301B                       	move.w	(a3)+,d0		; add to childsprite y pos
0000F06A D152                       	add.w	d0,(a2)
0000F06C D5FC 0000 0006             	adda.l	#6,a2			; advance to next piece
0000F072 51C9 FFF4                  	dbf	d1,@child2_yfall
0000F076                            
0000F076                            @finish:
0000F076 6000 FC78                  		bra.w	Bri_ChkDel
0000F07A                            
0000F07A                            
0000F07A                            
0000F07A                            Bri_Piece_Speed:
0000F07A 0003 0002 0005 0004 0003+  	dc.w	$03,$02,$05,$04,$03,$05,$02,$04,$06,$05,$02,$03,$04,$02,$05,$02
0000F09A                            	even
0000F09A                            
0000F09A                            ; ---------------------------------------------------------------------------
0000F09A                            ; Platform subroutine
0000F09A                            ; ---------------------------------------------------------------------------
0000F09A                            
0000F09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F09A                            
0000F09A                            
0000F09A                            PlatformObject:
0000F09A 43F8 D000                  		lea	($FFFFD000).w,a1
0000F09E 4A69 0012                  		tst.w	y_vel(a1)
0000F0A2 6B00 0000                  		bmi.w	locret_751E
0000F0A6 3029 0008                  		move.w	8(a1),d0
0000F0AA 9068 0008                  		sub.w	8(a0),d0
0000F0AE D041                       		add.w	d1,d0
0000F0B0 6B00 0000                  		bmi.w	locret_751E
0000F0B4 D241                       		add.w	d1,d1
0000F0B6 B041                       		cmp.w	d1,d0
0000F0B8 6400 0000                  		bcc.w	locret_751E
0000F0BC                            
0000F0BC                            Platform2:
0000F0BC 3028 000C                  		move.w	$C(a0),d0
0000F0C0 5140                       		subq.w	#8,d0
0000F0C2                            
0000F0C2                            Platform3:
0000F0C2 3429 000C                  		move.w	$C(a1),d2
0000F0C6 1229 0016                  		move.b	$16(a1),d1
0000F0CA 4881                       		ext.w	d1
0000F0CC D242                       		add.w	d2,d1
0000F0CE 5841                       		addq.w	#4,d1
0000F0D0 9041                       		sub.w	d1,d0
0000F0D2 6200 0000                  		bhi.w	locret_751E
0000F0D6 0C40 FFF0                  		cmpi.w	#-$10,d0
0000F0DA 6500 0000                  		bcs.w	locret_751E
0000F0DE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F0E2 6B00 0000                  		bmi.w	locret_751E
0000F0E6 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F0EC 6400 0000                  		bcc.w	locret_751E
0000F0F0 D440                       		add.w	d0,d2
0000F0F2 5642                       		addq.w	#3,d2
0000F0F4 3342 000C                  		move.w	d2,$C(a1)
0000F0F8 5428 0024                  		addq.b	#2,routine(a0)
0000F0FC                            
0000F0FC                            loc_74AE:
0000F0FC 0829 0003 0022             		btst	#3,status(a1)
0000F102 6700                       		beq.s	loc_74DC
0000F104 7000                       		moveq	#0,d0
0000F106 1029 003D                  		move.b	$3D(a1),d0
0000F10A ED48                       		lsl.w	#6,d0
0000F10C 0680 00FF D000             		addi.l	#$FFD000,d0
0000F112 2440                       		movea.l	d0,a2
0000F114 08AA 0003 0022             		bclr	#3,status(a2)
0000F11A 422A 0025                  		clr.b	routine_secondary(a2)
0000F11E 0C2A 0004 0024             		cmpi.b	#4,routine(a2)
0000F124 6600                       		bne.s	loc_74DC
0000F126 552A 0024                  		subq.b	#2,routine(a2)
0000F12A                            
0000F12A                            loc_74DC:
0000F12A 3008                       		move.w	a0,d0
0000F12C 0440 D000                  		subi.w	#-$3000,d0
0000F130 EC48                       		lsr.w	#6,d0
0000F132 0240 007F                  		andi.w	#$7F,d0
0000F136 1340 003D                  		move.b	d0,$3D(a1)
0000F13A 137C 0000 0026             		move.b	#0,$26(a1)
0000F140 337C 0000 0012             		move.w	#0,y_vel(a1)
0000F146 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
0000F14C 0829 0001 0022             		btst	#1,status(a1)
0000F152 6700                       		beq.s	loc_7512
0000F154 2F08                       		move.l	a0,-(sp)
0000F156 2049                       		movea.l	a1,a0
0000F158 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000F15E 205F                       		movea.l	(sp)+,a0
0000F160                            
0000F160                            loc_7512:
0000F160 08E9 0003 0022             		bset	#3,status(a1)
0000F166 08A9 0001 0022             		bclr	#1,status(a1)
0000F16C 0DE8 0022                  		bset	d6,status(a0)
0000F170                            
0000F170                            locret_751E:
0000F170 4E75                       		rts	
0000F172                            ; End of function PlatformObject
0000F172                            
0000F172                            ; ---------------------------------------------------------------------------
0000F172                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000F172                            ; ---------------------------------------------------------------------------
0000F172                            
0000F172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F172                            
0000F172                            
0000F172                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000F172 43F8 D000                  		lea	($FFFFD000).w,a1
0000F176 4A69 0012                  		tst.w	y_vel(a1)
0000F17A 6B00 FFF4                  		bmi.w	locret_751E
0000F17E 3029 0008                  		move.w	8(a1),d0
0000F182 9068 0008                  		sub.w	8(a0),d0
0000F186 D041                       		add.w	d1,d0
0000F188 6BE6                       		bmi.s	locret_751E
0000F18A D241                       		add.w	d1,d1
0000F18C B041                       		cmp.w	d1,d0
0000F18E 64E0                       		bcc.s	locret_751E
0000F190 0828 0000 0001             		btst	#0,1(a0)
0000F196 6700                       		beq.s	loc_754A
0000F198 4640                       		not.w	d0
0000F19A D041                       		add.w	d1,d0
0000F19C                            
0000F19C                            loc_754A:
0000F19C E248                       		lsr.w	#1,d0
0000F19E 7600                       		moveq	#0,d3
0000F1A0 1632 0000                  		move.b	(a2,d0.w),d3
0000F1A4 3028 000C                  		move.w	$C(a0),d0
0000F1A8 9043                       		sub.w	d3,d0
0000F1AA 6000 FF16                  		bra.w	Platform3
0000F1AE                            ; End of function SlopeObject
0000F1AE                            
0000F1AE                            
0000F1AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1AE                            
0000F1AE                            
0000F1AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000F1AE 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1B2 4A69 0012                  		tst.w	y_vel(a1)
0000F1B6 6B00 FFB8                  		bmi.w	locret_751E
0000F1BA 3029 0008                  		move.w	8(a1),d0
0000F1BE 9068 0008                  		sub.w	8(a0),d0
0000F1C2 D041                       		add.w	d1,d0
0000F1C4 6B00 FFAA                  		bmi.w	locret_751E
0000F1C8 D241                       		add.w	d1,d1
0000F1CA B041                       		cmp.w	d1,d0
0000F1CC 6400 FFA2                  		bcc.w	locret_751E
0000F1D0 3028 000C                  		move.w	$C(a0),d0
0000F1D4 9043                       		sub.w	d3,d0
0000F1D6 6000 FEEA                  		bra.w	Platform3
0000F1DA                            ; End of function Obj15_Solid
0000F1DA                            
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA                            
0000F1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1DA                            
0000F1DA                            
0000F1DA                            ExitPlatform:
0000F1DA 3401                       		move.w	d1,d2
0000F1DC                            
0000F1DC                            ExitPlatform2:
0000F1DC D442                       		add.w	d2,d2
0000F1DE 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1E2 0829 0001 0022             		btst	#1,status(a1)
0000F1E8 6600                       		bne.s	loc_75E0
0000F1EA 3029 0008                  		move.w	8(a1),d0
0000F1EE 9068 0008                  		sub.w	8(a0),d0
0000F1F2 D041                       		add.w	d1,d0
0000F1F4 6B00                       		bmi.s	loc_75E0
0000F1F6 B042                       		cmp.w	d2,d0
0000F1F8 6500                       		bcs.s	locret_75F2
0000F1FA                            
0000F1FA                            loc_75E0:
0000F1FA 08A9 0003 0022             		bclr	#3,status(a1)
0000F200                            ;		bset	#1,status(a1)		
0000F200 117C 0002 0024             		move.b	#2,routine(a0)
0000F206 0DA8 0022                  		bclr	d6,status(a0)
0000F20A                            
0000F20A                            locret_75F2:
0000F20A 4E75                       		rts	
0000F20C                            ; End of function ExitPlatform
0000F20C                            
0000F20C                            ; ---------------------------------------------------------------------------
0000F20C                            ; Sprite mappings - GHZ	bridge
0000F20C                            ; ---------------------------------------------------------------------------
0000F20C                            Map_obj11:
0000F20C                            	include "_maps\obj11.asm"
0000F20C                            ; ---------------------------------------------------------------------------
0000F20C                            ; Sprite mappings - GHZ	bridge
0000F20C                            ; ---------------------------------------------------------------------------
0000F20C 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000F210 0000                       		dc.w byte_794B-Map_obj11
0000F212 01                         byte_793A:	dc.b 1
0000F213 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F218 02                         byte_7940:	dc.b 2
0000F219 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000F21E 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000F223 01                         byte_794B:	dc.b 1
0000F224 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000F22A 00                         		even
0000F22A 00                         		even
0000F22A                            
0000F22A                            ; ===========================================================================
0000F22A                            ; ---------------------------------------------------------------------------
0000F22A                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000F22A                            ;	    - spiked ball on a chain (SBZ)
0000F22A                            ; ---------------------------------------------------------------------------
0000F22A                            
0000F22A                            Obj15:			; XREF: Obj_Index
0000F22A 7000                       		moveq	#0,d0
0000F22C 1028 0024                  		move.b	routine(a0),d0
0000F230 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000F234 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000F238                            ; ===========================================================================
0000F238 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000F23C 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000F240 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000F244 0000                       		dc.w Obj15_Action-Obj15_Index
0000F246                            
0000F246 =0000003A                  origX:		= $3A		; original x-axis position
0000F246 =00000038                  origY:		= $38		; original y-axis position
0000F246                            ; ===========================================================================
0000F246                            
0000F246                            Obj15_Main:	; Routine 0
0000F246 5428 0024                  		addq.b	#2,routine(a0)
0000F24A 217C 0000 0000 0004        		move.l	#Map_obj15,mappings(a0) ; GHZ and MZ specific code
0000F252 317C 4380 0002             		move.w	#$4380,art_tile(a0)
0000F258 117C 0004 0001             		move.b	#4,render_flags(a0)
0000F25E 317C 0180 0018             		move.w	#$180,priority(a0)
0000F264 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F26A 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F270 3168 000C 0038              		move.w	y_pos(a0),origY(a0)
0000F276 3168 0008 003A              		move.w	x_pos(a0),origX(a0)
0000F27C 0C38 0003 FE10              		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F282 6600                        		bne.s	@notSLZ
0000F284 3168 000C 0038                             move.w	y_pos(a0),origY(a0)      ; +++ zone agnostic objects
0000F28A 3168 0008 003A             		move.w	x_pos(a0),origX(a0)
0000F290                             
0000F290 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
0000F296 6600                       		bne.s	@notLZ
0000F298 317C 4310 0002             		move.w	#$4310,art_tile(a0)
0000F29E 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0)
0000F2A6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F2AC                             
0000F2AC                            	@notLZ:
0000F2AC 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000F2B2 6600                       		bne.s	@notSLZ
0000F2B4                            
0000F2B4 217C 0000 0000 0004        		move.l	#Map_obj15a,mappings(a0) ; SLZ specific code
0000F2BC 317C 43DC 0002             		move.w	#$43DC,art_tile(a0)
0000F2C2 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F2C8 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000F2CE 117C 0099 0020             		move.b	#$99,$20(a0)
0000F2D4                            
0000F2D4                            	@notSLZ:
0000F2D4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000F2DA 6600                       		bne.s	@length
0000F2DC                            
0000F2DC 217C 0000 0000 0004        		move.l	#Map_obj15b,mappings(a0) ; SBZ specific code
0000F2E4 317C 0391 0002             		move.w	#$391,art_tile(a0)
0000F2EA 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F2F0 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0000F2F6 117C 0086 0020             		move.b	#$86,$20(a0)
0000F2FC 117C 000C 0024             		move.b	#$C,routine(a0) ; goto Obj15_Action next
0000F302                            
0000F302                            @length:
0000F302 1810                       		move.b	0(a0),d4         ; copy object number do d4 ($15)
0000F304 7200                       		moveq	#0,d1
0000F306 45E8 0028                  		lea	subtype(a0),a2 ; subtype byte is equal to chain length
0000F30A 1212                       		move.b	(a2),d1		 ; copy subtype to d1
0000F30C 3F01                       		move.w	d1,-(sp)         ; put subtype on stack
0000F30E 0241 000F                  		andi.w	#$F,d1           ; make sure chain length is 15 or less
0000F312 14FC 0000                  		move.b	#0,(a2)+         ; set subtype to 0 and increment a2 into scratch ram
0000F316 3601                       		move.w	d1,d3            ; copy chain length
0000F318 E94B                       		lsl.w	#4,d3            ; multiply length by 16(diameter of chain piece in pixels)
0000F31A 5003                       		addq.b	#8,d3            ; raise platform position by 8 pixels
0000F31C 1143 003C                  		move.b	d3,$3C(a0)       ; copy result into scratch ram
0000F320 5103                       		subq.b	#8,d3            ; reset position
0000F322 4A28 001A                  		tst.b	obFrame(a0)
0000F326 6700                       		beq.s	@makechain       ; if frame is 0 (the platform), then create chain
0000F328 5003                       		addq.b	#8,d3            ; add 8
0000F32A 5341                       		subq.w	#1,d1            ; sub 1 from chain length to give correct loop amount
0000F32C                            
0000F32C                            @makechain:
0000F32C 6100 0000                  		bsr.w	SingleObjLoad
0000F330 6600                       		bne.s	@fail
0000F332 5228 0028                  		addq.b	#1,subtype(a0) ; subtype is number of pieces created
0000F336 3A09                       		move.w	a1,d5            ; set d5 to the ram address of the free object
0000F338 0445 D000                  		subi.w	#$D000,d5
0000F33C EC4D                       		lsr.w	#6,d5            ; divide by $40
0000F33E 0245 007F                  		andi.w	#$7F,d5
0000F342 14C5                       		move.b	d5,(a2)+         ; put new chain link's object slot into a list in main object's ram
0000F344 137C 000A 0024             		move.b	#$A,routine(a1) ; new link to goto Obj15_Display next
0000F34A 1284                       		move.b	d4,0(a1)	 ; load link object
0000F34C 2368 0004 0004             		move.l	mappings(a0),mappings(a1)
0000F352 3368 0002 0002             		move.w	art_tile(a0),art_tile(a1)
0000F358 08A9 0006 0002             		bclr	#6,art_tile(a1)
0000F35E 137C 0004 0001             		move.b	#4,render_flags(a1)
0000F364 337C 0200 0018             		move.w	#$200,priority(a1)
0000F36A 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F370 137C 0001 001A             		move.b	#1,obFrame(a1)     ; set frame to link
0000F376 1343 003C                  		move.b	d3,$3C(a1)         ; set link's distance from platform
0000F37A 0403 0010                  		subi.b	#$10,d3            ; get distance of next link
0000F37E 6400                       		bcc.s	@notanchor         ; if not less than 0, leave graphics as a chain link
0000F380 137C 0002 001A             		move.b	#2,obFrame(a1)
0000F386 337C 0180 0018             		move.w	#$180,priority(a1)
0000F38C 08E9 0006 0002             		bset	#6,art_tile(a1)
0000F392 0C38 0001 FE10                     cmpi.b	#id_LZ,(v_zone).w      ; +++ zone agnostic objects
0000F398 6700                       		beq.s	@notanchor             ;
0000F39A 08E9 0006 0002             		bset	#6,art_tile(a1)           ;
0000F3A0                            	@notanchor:
0000F3A0 51C9 FF8A                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000F3A4                            
0000F3A4                            	@fail:
0000F3A4 3A08                       		move.w	a0,d5
0000F3A6 0445 D000                  		subi.w	#$D000,d5
0000F3AA EC4D                       		lsr.w	#6,d5
0000F3AC 0245 007F                  		andi.w	#$7F,d5
0000F3B0 14C5                       		move.b	d5,(a2)+
0000F3B2 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000F3B8 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000F3BE 321F                       		move.w	(sp)+,d1
0000F3C0 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000F3C4 6700                       		beq.s	@not8X	; if not, branch
0000F3C6 217C 0000 0000 0004        		move.l	#Map_obj48,mappings(a0) ; use GHZ ball mappings
0000F3CE 317C 43AA 0002             		move.w	#$43AA,art_tile(a0)
0000F3D4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000F3DA 317C 0100 0018             		move.w	#$100,priority(a0)
0000F3E0 117C 0081 0020             		move.b	#$81,$20(a0) ; make object hurt when touched
0000F3E6                            
0000F3E6                            	@not8X:
0000F3E6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000F3EC 6700                       		beq.s	Obj15_Action	; if yes, branch
0000F3EE                            
0000F3EE                            Obj15_SetSolid:	; Routine 2
0000F3EE 7200                       		moveq	#0,d1
0000F3F0 1228 0023                  		move.b	width_pixels(a0),d1
0000F3F4 7600                       		moveq	#0,d3
0000F3F6 1628 0023                  		move.b	width_pixels(a0),d3
0000F3FA 6100 FDB2                  		bsr.w	Obj15_Solid
0000F3FE                            
0000F3FE                            Obj15_Action:	; Routine $C
0000F3FE 6100 0000                  		bsr.w	Obj15_Move
0000F402 6100 0000                  		bsr.w	DisplaySprite
0000F406 6000 0000                  		bra.w	Obj15_ChkDel
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj15_Action2:	; Routine 4
0000F40A 7200                       		moveq	#0,d1
0000F40C 1228 0023                  		move.b	width_pixels(a0),d1
0000F410 6100 FDC8                  		bsr.w	ExitPlatform
0000F414 3F28 0008                  		move.w	x_pos(a0),-(sp)
0000F418 6100 0000                  		bsr.w	Obj15_Move
0000F41C 341F                       		move.w	(sp)+,d2
0000F41E 7600                       		moveq	#0,d3
0000F420 1628 0023                  		move.b	width_pixels(a0),d3
0000F424 5203                       		addq.b	#1,d3
0000F426 6100 0000                  		bsr.w	MvSonicOnPtfm
0000F42A 6100 0000                  		bsr.w	DisplaySprite
0000F42E 6000 0000                  		bra.w	Obj15_ChkDel
0000F432                            
0000F432 4E75                       		rts
0000F434                            
0000F434                            
0000F434                            ; ===========================================================================
0000F434                            
0000F434                            ; ---------------------------------------------------------------------------
0000F434                            ; Subroutine to	change Sonic's position with a platform
0000F434                            ; ---------------------------------------------------------------------------
0000F434                            
0000F434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F434                            
0000F434                            
0000F434                            MvSonicOnPtfm:
0000F434 43F8 D000                  		lea	($FFFFD000).w,a1
0000F438 3028 000C                  		move.w	$C(a0),d0
0000F43C 9043                       		sub.w	d3,d0
0000F43E 6000                       		bra.s	MvSonic2
0000F440                            ; End of function MvSonicOnPtfm
0000F440                            
0000F440                            
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            ; Subroutine to	change Sonic's position with a platform
0000F440                            ; ---------------------------------------------------------------------------
0000F440                            
0000F440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F440                            
0000F440                            
0000F440                            MvSonicOnPtfm2:
0000F440 43F8 D000                  		lea	($FFFFD000).w,a1
0000F444 3028 000C                  		move.w	$C(a0),d0
0000F448 0440 0009                  		subi.w	#9,d0
0000F44C                            
0000F44C                            MvSonic2:
0000F44C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000F450 6B00                       		bmi.s	locret_7B62
0000F452 0C29 0006 0024             		cmpi.b	#6,routine(a1)
0000F458 6400                       		bcc.s	locret_7B62
0000F45A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000F45E 6600                       		bne.s	locret_7B62
0000F460 7200                       		moveq	#0,d1
0000F462 1229 0016                  		move.b	$16(a1),d1
0000F466 9041                       		sub.w	d1,d0
0000F468 3340 000C                  		move.w	d0,$C(a1)
0000F46C 9468 0008                  		sub.w	8(a0),d2
0000F470 9569 0008                  		sub.w	d2,8(a1)
0000F474 4A38 FE2C                  		tst.b	($FFFFFE2C).w     ; does Sonic have a shield?
0000F478 6700                       		beq.s	locret_7B62       ; if not, branch
0000F47A 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
0000F47E 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
0000F482                            locret_7B62:
0000F482 4E75                       		rts	
0000F484                            ; End of function MvSonicOnPtfm2
0000F484                            
0000F484                            
0000F484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F484                            
0000F484                            
0000F484                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000F484 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000F488 323C 0080                  		move.w	#$80,d1
0000F48C 0828 0000 0022             		btst	#0,$22(a0)
0000F492 6700                       		beq.s	loc_7B78
0000F494 4440                       		neg.w	d0
0000F496 D041                       		add.w	d1,d0
0000F498                            
0000F498                            loc_7B78:
0000F498 6000                       		bra.s	Obj15_Move2
0000F49A                            ; End of function Obj15_Move
0000F49A                            
0000F49A                            
0000F49A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F49A                            
0000F49A                            
0000F49A                            Obj48_Move:				; XREF: Obj48_Display2
0000F49A 4A28 003D                  		tst.b	$3D(a0)
0000F49E 6600                       		bne.s	loc_7B9C
0000F4A0 3028 003E                  		move.w	$3E(a0),d0
0000F4A4 5040                       		addq.w	#8,d0
0000F4A6 3140 003E                  		move.w	d0,$3E(a0)
0000F4AA D168 0026                  		add.w	d0,$26(a0)
0000F4AE 0C40 0200                  		cmpi.w	#$200,d0
0000F4B2 6600                       		bne.s	loc_7BB6
0000F4B4 117C 0001 003D             		move.b	#1,$3D(a0)
0000F4BA 6000                       		bra.s	loc_7BB6
0000F4BC                            ; ===========================================================================
0000F4BC                            
0000F4BC                            loc_7B9C:
0000F4BC 3028 003E                  		move.w	$3E(a0),d0
0000F4C0 5140                       		subq.w	#8,d0
0000F4C2 3140 003E                  		move.w	d0,$3E(a0)
0000F4C6 D168 0026                  		add.w	d0,$26(a0)
0000F4CA 0C40 FE00                  		cmpi.w	#-$200,d0
0000F4CE 6600                       		bne.s	loc_7BB6
0000F4D0 117C 0000 003D             		move.b	#0,$3D(a0)
0000F4D6                            
0000F4D6                            loc_7BB6:
0000F4D6 1028 0026                  		move.b	$26(a0),d0
0000F4DA                            ; End of function Obj48_Move
0000F4DA                            
0000F4DA                            
0000F4DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4DA                            
0000F4DA                            
0000F4DA                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000F4DA 6100 98C8                  		bsr.w	CalcSine
0000F4DE 3428 0038                  		move.w	$38(a0),d2
0000F4E2 3628 003A                  		move.w	$3A(a0),d3
0000F4E6 45E8 0028                  		lea	$28(a0),a2
0000F4EA 7C00                       		moveq	#0,d6
0000F4EC 1C1A                       		move.b	(a2)+,d6
0000F4EE                            
0000F4EE                            loc_7BCE:
0000F4EE 7800                       		moveq	#0,d4
0000F4F0 181A                       		move.b	(a2)+,d4
0000F4F2 ED4C                       		lsl.w	#6,d4
0000F4F4 0684 00FF D000             		addi.l	#$FFD000,d4
0000F4FA 2244                       		movea.l	d4,a1
0000F4FC 7800                       		moveq	#0,d4
0000F4FE 1829 003C                  		move.b	$3C(a1),d4
0000F502 2A04                       		move.l	d4,d5
0000F504 C9C0                       		muls.w	d0,d4
0000F506 E084                       		asr.l	#8,d4
0000F508 CBC1                       		muls.w	d1,d5
0000F50A E085                       		asr.l	#8,d5
0000F50C D842                       		add.w	d2,d4
0000F50E DA43                       		add.w	d3,d5
0000F510 3344 000C                  		move.w	d4,$C(a1)
0000F514 3345 0008                  		move.w	d5,8(a1)
0000F518 51CE FFD4                  		dbf	d6,loc_7BCE
0000F51C 4E75                       		rts	
0000F51E                            ; End of function Obj15_Move2
0000F51E                            
0000F51E                            ; ===========================================================================
0000F51E                            
0000F51E                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000F51E 3028 003A                  		move.w	$3A(a0),d0
0000F522 0240 FF80                  		andi.w	#$FF80,d0
0000F526 3238 F700                  		move.w	($FFFFF700).w,d1
0000F52A 0441 0080                  		subi.w	#$80,d1
0000F52E 0241 FF80                  		andi.w	#$FF80,d1
0000F532 9041                       		sub.w	d1,d0
0000F534 0C40 0280                  		cmpi.w	#$280,d0
0000F538 6200 0000                  		bhi.w	Obj15_DelAll
0000F53C 4E75                       		rts	
0000F53E                            ; ===========================================================================
0000F53E                            
0000F53E                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000F53E 7400                       		moveq	#0,d2
0000F540 45E8 0028                  		lea	$28(a0),a2
0000F544 141A                       		move.b	(a2)+,d2
0000F546                            
0000F546                            Obj15_DelLoop:
0000F546 7000                       		moveq	#0,d0
0000F548 101A                       		move.b	(a2)+,d0
0000F54A ED48                       		lsl.w	#6,d0
0000F54C 0680 00FF D000             		addi.l	#$FFD000,d0
0000F552 2240                       		movea.l	d0,a1
0000F554 6100 0000                  		bsr.w	DeleteObject2
0000F558 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000F55C 4E75                       		rts	
0000F55E                            ; ===========================================================================
0000F55E                            
0000F55E                            Obj15_Delete:				; XREF: Obj15_Index
0000F55E 7000                       		moveq	#0,d0
0000F560 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F564 3440                       	    movea.w	d0,a2				; load address into a2
0000F566 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F56A 6100 0000                  		bsr.w	DeleteObject
0000F56E 4E75                       		rts	
0000F570                            ; ===========================================================================
0000F570                            
0000F570                            Obj15_Display:				; XREF: Obj15_Index
0000F570 6000 0000                  		bra.w	DisplaySprite
0000F574                            ; ===========================================================================
0000F574                            ; ---------------------------------------------------------------------------
0000F574                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F574                            ; ---------------------------------------------------------------------------
0000F574                            Map_obj15:
0000F574                            	include "_maps\obj15ghz.asm"
0000F574                            ; ---------------------------------------------------------------------------
0000F574                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000F574                            ; ---------------------------------------------------------------------------
0000F574 0000                       		dc.w byte_7C4E-Map_obj15
0000F576 0000                       		dc.w byte_7C59-Map_obj15
0000F578 0000                       		dc.w byte_7C5F-Map_obj15
0000F57A 02                         byte_7C4E:	dc.b 2
0000F57B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000F580 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000F585 01                         byte_7C59:	dc.b 1
0000F586 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F58B 01                         byte_7C5F:	dc.b 1
0000F58C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000F592 00                         		even
0000F592 00                         		even
0000F592                            
0000F592                            ; ---------------------------------------------------------------------------
0000F592                            ; Sprite mappings - SLZ	swinging platforms
0000F592                            ; ---------------------------------------------------------------------------
0000F592                            Map_obj15a:
0000F592                            	include "_maps\obj15slz.asm"
0000F592                            ; ---------------------------------------------------------------------------
0000F592                            ; Sprite mappings - SLZ	swinging platforms
0000F592                            ; ---------------------------------------------------------------------------
0000F592 0000                       		dc.w byte_7C6C-Map_obj15a
0000F594 0000                       		dc.w byte_7C95-Map_obj15a
0000F596 0000                       		dc.w byte_7C9B-Map_obj15a
0000F598 08                         byte_7C6C:	dc.b 8
0000F599 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000F59E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000F5A3 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000F5A8 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000F5AD 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000F5B2 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000F5B7 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000F5BC 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000F5C1 01                         byte_7C95:	dc.b 1
0000F5C2 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000F5C7 01                         byte_7C9B:	dc.b 1
0000F5C8 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000F5CE 00                         		even
0000F5CE 00                         		even
0000F5CE                            
0000F5CE                            ; ===========================================================================
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000F5CE                            ; ---------------------------------------------------------------------------
0000F5CE                            
0000F5CE                            Obj17:					; XREF: Obj_Index
0000F5CE 7000                       		moveq	#0,d0
0000F5D0 1028 0024                  		move.b	$24(a0),d0
0000F5D4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000F5D8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000F5DC                            ; ===========================================================================
0000F5DC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000F5DE 0000                       		dc.w Obj17_Action-Obj17_Index
0000F5E0 0000                       		dc.w Obj17_Action-Obj17_Index
0000F5E2 0000                       		dc.w Obj17_Delete-Obj17_Index
0000F5E4 0000                       		dc.w Obj17_Display-Obj17_Index
0000F5E6                            ; ===========================================================================
0000F5E6                            
0000F5E6                            Obj17_Main:				; XREF: Obj17_Index
0000F5E6 5428 0024                  		addq.b	#2,$24(a0)
0000F5EA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000F5F2 317C 4398 0002             		move.w	#$4398,2(a0)
0000F5F8 117C 0007 0022             		move.b	#7,$22(a0)
0000F5FE 117C 0004 0001             		move.b	#4,1(a0)
0000F604 317C 0180 0018             		move.w	#$180,priority(a0)
0000F60A 117C 0008 0023             		move.b	#8,width_pixels(a0)
0000F610 3428 000C                  		move.w	$C(a0),d2
0000F614 3628 0008                  		move.w	8(a0),d3
0000F618 1810                       		move.b	0(a0),d4
0000F61A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F61E 7200                       		moveq	#0,d1
0000F620 1212                       		move.b	(a2),d1		; move a2 to d1
0000F622 14FC 0000                  		move.b	#0,(a2)+
0000F626 3001                       		move.w	d1,d0
0000F628 E248                       		lsr.w	#1,d0
0000F62A E948                       		lsl.w	#4,d0
0000F62C 9640                       		sub.w	d0,d3
0000F62E 5501                       		subq.b	#2,d1
0000F630 6500                       		bcs.s	Obj17_Action
0000F632 7C00                       		moveq	#0,d6
0000F634                            
0000F634                            Obj17_MakeHelix:
0000F634 6100 0000                  		bsr.w	SingleObjLoad
0000F638 6600                       		bne.s	Obj17_Action
0000F63A 5228 0028                  		addq.b	#1,$28(a0)
0000F63E 3A09                       		move.w	a1,d5
0000F640 0445 D000                  		subi.w	#$D000,d5
0000F644 EC4D                       		lsr.w	#6,d5
0000F646 0245 007F                  		andi.w	#$7F,d5
0000F64A 14C5                       		move.b	d5,(a2)+
0000F64C 137C 0008 0024             		move.b	#8,$24(a1)
0000F652 1284                       		move.b	d4,0(a1)
0000F654 3342 000C                  		move.w	d2,$C(a1)
0000F658 3343 0008                  		move.w	d3,8(a1)
0000F65C 2368 0004 0004             		move.l	4(a0),4(a1)
0000F662 337C 4398 0002             		move.w	#$4398,2(a1)
0000F668 137C 0004 0001             		move.b	#4,1(a1)
0000F66E 337C 0180 0018             		move.w	#$180,priority(a1)
0000F674 137C 0008 0023             		move.b	#8,width_pixels(a1)
0000F67A 1346 003E                  		move.b	d6,$3E(a1)
0000F67E 5206                       		addq.b	#1,d6
0000F680 0206 0007                  		andi.b	#7,d6
0000F684 0643 0010                  		addi.w	#$10,d3
0000F688 B668 0008                  		cmp.w	8(a0),d3
0000F68C 6600                       		bne.s	loc_7D78
0000F68E 1146 003E                  		move.b	d6,$3E(a0)
0000F692 5206                       		addq.b	#1,d6
0000F694 0206 0007                  		andi.b	#7,d6
0000F698 0643 0010                  		addi.w	#$10,d3
0000F69C 5228 0028                  		addq.b	#1,$28(a0)
0000F6A0                            
0000F6A0                            loc_7D78:
0000F6A0 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000F6A4                            
0000F6A4                            Obj17_Action:				; XREF: Obj17_Index
0000F6A4 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000F6A8 6100 0000                  		bsr.w	DisplaySprite
0000F6AC 6000 0000                  		bra.w	Obj17_ChkDel
0000F6B0                            
0000F6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6B0                            
0000F6B0                            
0000F6B0                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000F6B0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000F6B4 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000F6BA D028 003E                  		add.b	$3E(a0),d0
0000F6BE 0200 0007                  		andi.b	#7,d0
0000F6C2 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000F6C6 6600                       		bne.s	locret_7DA6
0000F6C8 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000F6CE                            
0000F6CE                            locret_7DA6:
0000F6CE 4E75                       		rts	
0000F6D0                            ; End of function Obj17_RotateSpikes
0000F6D0                            
0000F6D0                            ; ===========================================================================
0000F6D0                            
0000F6D0                            Obj17_ChkDel:				; XREF: Obj17_Action
0000F6D0 3028 0008                  		move.w	8(a0),d0
0000F6D4 0240 FF80                  		andi.w	#$FF80,d0
0000F6D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6DC 0441 0080                  		subi.w	#$80,d1
0000F6E0 0241 FF80                  		andi.w	#$FF80,d1
0000F6E4 9041                       		sub.w	d1,d0
0000F6E6 0C40 0280                  		cmpi.w	#$280,d0
0000F6EA 6200 0000                  		bhi.w	Obj17_DelAll
0000F6EE 4E75                       		rts	
0000F6F0                            ; ===========================================================================
0000F6F0                            
0000F6F0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000F6F0 7400                       		moveq	#0,d2
0000F6F2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000F6F6 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000F6F8 5502                       		subq.b	#2,d2
0000F6FA 6500                       		bcs.s	Obj17_Delete
0000F6FC                            
0000F6FC                            Obj17_DelLoop:
0000F6FC 7000                       		moveq	#0,d0
0000F6FE 101A                       		move.b	(a2)+,d0
0000F700 ED48                       		lsl.w	#6,d0
0000F702 0680 00FF D000             		addi.l	#$FFD000,d0
0000F708 2240                       		movea.l	d0,a1
0000F70A 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000F70E 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000F712                            
0000F712                            Obj17_Delete:				; XREF: Obj17_Index
0000F712 7000                       		moveq	#0,d0
0000F714 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0000F718 3440                       	    movea.w	d0,a2				; load address into a2
0000F71A 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
0000F71E 6100 0000                  		bsr.w	DeleteObject
0000F722 4E75                       		rts	
0000F724                            ; ===========================================================================
0000F724                            
0000F724                            Obj17_Display:				; XREF: Obj17_Index
0000F724 6100 FF8A                  		bsr.w	Obj17_RotateSpikes
0000F728 6000 0000                  		bra.w	DisplaySprite
0000F72C                            ; ===========================================================================
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            Map_obj17:
0000F72C                            	include "_maps\obj17.asm"
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000F730 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000F734 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000F738 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000F73C 01                         byte_7E08:	dc.b 1
0000F73D F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000F742 01                         byte_7E0E:	dc.b 1
0000F743 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000F748 01                         byte_7E14:	dc.b 1
0000F749 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000F74E 01                         byte_7E1A:	dc.b 1
0000F74F FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000F754 01                         byte_7E20:	dc.b 1
0000F755 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000F75A 01                         byte_7E26:	dc.b 1
0000F75B 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000F760 01                         byte_7E2C:	dc.b 1
0000F761 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000F766                            		even
0000F766                            		even
0000F766                            
0000F766                            ; ===========================================================================
0000F766                            ; ---------------------------------------------------------------------------
0000F766                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000F766                            ; ---------------------------------------------------------------------------
0000F766                            
0000F766                            Obj18:					; XREF: Obj_Index
0000F766 7000                       		moveq	#0,d0
0000F768 1028 0024                  		move.b	$24(a0),d0
0000F76C 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000F770 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000F774                            ; ===========================================================================
0000F774 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000F776 0000                       		dc.w Obj18_Solid-Obj18_Index
0000F778 0000                       		dc.w Obj18_Action2-Obj18_Index
0000F77A 0000                       		dc.w Obj18_Delete-Obj18_Index
0000F77C 0000                       		dc.w Obj18_Action-Obj18_Index
0000F77E                            ; ===========================================================================
0000F77E                            
0000F77E                            Obj18_Main:				; XREF: Obj18_Index
0000F77E 5428 0024                  		addq.b	#2,$24(a0)
0000F782 317C 4000 0002             		move.w	#$4000,2(a0)
0000F788 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000F790 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F796 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000F79C 6600                       		bne.s	Obj18_NotSYZ
0000F79E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000F7A6 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F7AC                            
0000F7AC                            Obj18_NotSYZ:
0000F7AC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F7B2 6600                       		bne.s	Obj18_NotSLZ
0000F7B4 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000F7BC 117C 0020 0023             		move.b	#$20,width_pixels(a0)
0000F7C2 317C 4000 0002             		move.w	#$4000,2(a0)
0000F7C8 117C 0003 0028             		move.b	#3,$28(a0)
0000F7CE                            
0000F7CE                            Obj18_NotSLZ:
0000F7CE 117C 0004 0001             		move.b	#4,1(a0)
0000F7D4 317C 0200 0018             		move.w	#$200,priority(a0)
0000F7DA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000F7E0 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000F7E6 3168 0008 0032             		move.w	8(a0),$32(a0)
0000F7EC 317C 0080 0026             		move.w	#$80,$26(a0)
0000F7F2 7200                       		moveq	#0,d1
0000F7F4 1028 0028                  		move.b	$28(a0),d0
0000F7F8 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000F7FC 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000F7FE 5201                       		addq.b	#1,d1		; use frame #1
0000F800 117C 0020 0023             		move.b	#$20,width_pixels(a0)	; set width
0000F806                            
0000F806                            Obj18_SetFrame:
0000F806 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000F80A                            
0000F80A                            Obj18_Solid:				; XREF: Obj18_Index
0000F80A 4A28 0038                  		tst.b	$38(a0)
0000F80E 6700                       		beq.s	loc_7EE0
0000F810 5928 0038                  		subq.b	#4,$38(a0)
0000F814                            
0000F814                            loc_7EE0:
0000F814 7200                       		moveq	#0,d1
0000F816 1228 0023                  		move.b	width_pixels(a0),d1
0000F81A 6100 F87E                  		bsr.w	PlatformObject
0000F81E                            
0000F81E                            Obj18_Action:				; XREF: Obj18_Index
0000F81E 6100 0000                  		bsr.w	Obj18_Move
0000F822 6100 0000                  		bsr.w	Obj18_Nudge
0000F826 6100 0000                  		bsr.w	DisplaySprite
0000F82A 6000 0000                  		bra.w	Obj18_ChkDel
0000F82E                            ; ===========================================================================
0000F82E                            
0000F82E                            Obj18_Action2:				; XREF: Obj18_Index
0000F82E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000F834 6700                       		beq.s	loc_7F06
0000F836 5828 0038                  		addq.b	#4,$38(a0)
0000F83A                            
0000F83A                            loc_7F06:
0000F83A 7200                       		moveq	#0,d1
0000F83C 1228 0023                  		move.b	width_pixels(a0),d1
0000F840 6100 F998                  		bsr.w	ExitPlatform
0000F844 3F28 0008                  		move.w	8(a0),-(sp)
0000F848 6100 0000                  		bsr.w	Obj18_Move
0000F84C 6100 0000                  		bsr.w	Obj18_Nudge
0000F850 341F                       		move.w	(sp)+,d2
0000F852 6100 FBEC                  		bsr.w	MvSonicOnPtfm2
0000F856 6100 0000                  		bsr.w	DisplaySprite
0000F85A 6000 0000                  		bra.w	Obj18_ChkDel
0000F85E                            
0000F85E 4E75                       		rts
0000F860                            
0000F860                            ; ---------------------------------------------------------------------------
0000F860                            ; Subroutine to	move platform slightly when you	stand on it
0000F860                            ; ---------------------------------------------------------------------------
0000F860                            
0000F860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F860                            
0000F860                            
0000F860                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000F860 1028 0038                  		move.b	$38(a0),d0
0000F864 6100 953E                  		bsr.w	CalcSine
0000F868 323C 0400                  		move.w	#$400,d1
0000F86C C1C1                       		muls.w	d1,d0
0000F86E 4840                       		swap	d0
0000F870 D068 002C                  		add.w	$2C(a0),d0
0000F874 3140 000C                  		move.w	d0,$C(a0)
0000F878 4E75                       		rts	
0000F87A                            ; End of function Obj18_Nudge
0000F87A                            
0000F87A                            ; ---------------------------------------------------------------------------
0000F87A                            ; Subroutine to	move platforms
0000F87A                            ; ---------------------------------------------------------------------------
0000F87A                            
0000F87A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F87A                            
0000F87A                            
0000F87A                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000F87A 7000                       		moveq	#0,d0
0000F87C 1028 0028                  		move.b	$28(a0),d0
0000F880 0240 000F                  		andi.w	#$F,d0
0000F884 D040                       		add.w	d0,d0
0000F886 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000F88A 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000F88E                            ; End of function Obj18_Move
0000F88E                            
0000F88E                            ; ===========================================================================
0000F88E 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000F892 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000F896 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000F89A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000F89E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000F8A2 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000F8A6 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000F8A8                            ; ===========================================================================
0000F8A8                            
0000F8A8                            Obj18_Type00:
0000F8A8 4E75                       		rts			; platform 00 doesn't move
0000F8AA                            ; ===========================================================================
0000F8AA                            
0000F8AA                            Obj18_Type05:
0000F8AA 3028 0032                  		move.w	$32(a0),d0
0000F8AE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F8B2 4401                       		neg.b	d1		; reverse platform-motion
0000F8B4 0601 0040                  		addi.b	#$40,d1
0000F8B8 6000                       		bra.s	Obj18_01_Move
0000F8BA                            ; ===========================================================================
0000F8BA                            
0000F8BA                            Obj18_Type01:
0000F8BA 3028 0032                  		move.w	$32(a0),d0
0000F8BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F8C2 0401 0040                  		subi.b	#$40,d1
0000F8C6                            
0000F8C6                            Obj18_01_Move:
0000F8C6 4881                       		ext.w	d1
0000F8C8 D041                       		add.w	d1,d0
0000F8CA 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000F8CE 6000 0000                  		bra.w	Obj18_ChgMotion
0000F8D2                            ; ===========================================================================
0000F8D2                            
0000F8D2                            Obj18_Type0C:
0000F8D2 3028 0034                  		move.w	$34(a0),d0
0000F8D6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000F8DA 4401                       		neg.b	d1		; reverse platform-motion
0000F8DC 0601 0030                  		addi.b	#$30,d1
0000F8E0 6000                       		bra.s	Obj18_02_Move
0000F8E2                            ; ===========================================================================
0000F8E2                            
0000F8E2                            Obj18_Type0B:
0000F8E2 3028 0034                  		move.w	$34(a0),d0
0000F8E6 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000F8EA 0401 0030                  		subi.b	#$30,d1
0000F8EE 6000                       		bra.s	Obj18_02_Move
0000F8F0                            ; ===========================================================================
0000F8F0                            
0000F8F0                            Obj18_Type06:
0000F8F0 3028 0034                  		move.w	$34(a0),d0
0000F8F4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F8F8 4401                       		neg.b	d1		; reverse platform-motion
0000F8FA 0601 0040                  		addi.b	#$40,d1
0000F8FE 6000                       		bra.s	Obj18_02_Move
0000F900                            ; ===========================================================================
0000F900                            
0000F900                            Obj18_Type02:
0000F900 3028 0034                  		move.w	$34(a0),d0
0000F904 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F908 0401 0040                  		subi.b	#$40,d1
0000F90C                            
0000F90C                            Obj18_02_Move:
0000F90C 4881                       		ext.w	d1
0000F90E D041                       		add.w	d1,d0
0000F910 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000F914 6000 0000                  		bra.w	Obj18_ChgMotion
0000F918                            ; ===========================================================================
0000F918                            
0000F918                            Obj18_Type03:
0000F918 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000F91C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000F91E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000F924 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000F926 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000F92C                            
0000F92C                            Obj18_03_NoMove:
0000F92C 4E75                       		rts	
0000F92E                            ; ===========================================================================
0000F92E                            
0000F92E                            Obj18_03_Wait:
0000F92E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000F932 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000F934 317C 0020 003A             		move.w	#32,$3A(a0)
0000F93A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000F93E 4E75                       		rts	
0000F940                            ; ===========================================================================
0000F940                            
0000F940                            Obj18_Type04:
0000F940 4A68 003A                  		tst.w	$3A(a0)
0000F944 6700                       		beq.s	loc_8048
0000F946 5368 003A                  		subq.w	#1,$3A(a0)
0000F94A 6600                       		bne.s	loc_8048
0000F94C 0828 0003 0022             		btst	#3,$22(a0)
0000F952 6700                       		beq.s	loc_8042
0000F954 08E9 0001 0022             		bset	#1,$22(a1)
0000F95A 08A9 0003 0022             		bclr	#3,$22(a1)
0000F960 137C 0002 0024             		move.b	#2,$24(a1)
0000F966 08A8 0003 0022             		bclr	#3,$22(a0)
0000F96C 4228 0025                  		clr.b	$25(a0)
0000F970 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000F976                            
0000F976                            loc_8042:
0000F976 117C 0008 0024             		move.b	#8,$24(a0)
0000F97C                            
0000F97C                            loc_8048:
0000F97C 2628 002C                  		move.l	$2C(a0),d3
0000F980 3028 0012                  		move.w	$12(a0),d0
0000F984 48C0                       		ext.l	d0
0000F986 E180                       		asl.l	#8,d0
0000F988 D680                       		add.l	d0,d3
0000F98A 2143 002C                  		move.l	d3,$2C(a0)
0000F98E 0668 0038 0012             		addi.w	#$38,$12(a0)
0000F994 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000F998 0640 00E0                  		addi.w	#$E0,d0
0000F99C B068 002C                  		cmp.w	$2C(a0),d0
0000F9A0 6400                       		bcc.s	locret_8074
0000F9A2 117C 0006 0024             		move.b	#6,$24(a0)
0000F9A8                            
0000F9A8                            locret_8074:
0000F9A8 4E75                       		rts	
0000F9AA                            ; ===========================================================================
0000F9AA                            
0000F9AA                            Obj18_Type07:
0000F9AA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000F9AE 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000F9B0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000F9B4 7000                       		moveq	#0,d0
0000F9B6 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000F9BA E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000F9BC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000F9C0 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000F9C2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000F9C8                            
0000F9C8                            Obj18_07_NoMove:
0000F9C8 4E75                       		rts	
0000F9CA                            ; ===========================================================================
0000F9CA                            
0000F9CA                            Obj18_07_Wait:
0000F9CA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000F9CE 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000F9D0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000F9D4 4E75                       		rts	
0000F9D6                            ; ===========================================================================
0000F9D6                            
0000F9D6                            Obj18_Type08:
0000F9D6 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000F9DA 3028 0034                  		move.w	$34(a0),d0
0000F9DE 0440 0200                  		subi.w	#$200,d0
0000F9E2 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000F9E6 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000F9E8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000F9EC                            
0000F9EC                            Obj18_08_NoStop:
0000F9EC 4E75                       		rts	
0000F9EE                            ; ===========================================================================
0000F9EE                            
0000F9EE                            Obj18_Type0A:
0000F9EE 3028 0034                  		move.w	$34(a0),d0
0000F9F2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000F9F6 0401 0040                  		subi.b	#$40,d1
0000F9FA 4881                       		ext.w	d1
0000F9FC E241                       		asr.w	#1,d1
0000F9FE D041                       		add.w	d1,d0
0000FA00 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000FA04                            
0000FA04                            Obj18_ChgMotion:
0000FA04 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000FA0A 4E75                       		rts	
0000FA0C                            ; ===========================================================================
0000FA0C                            
0000FA0C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000FA0C 3028 0032                  		move.w	$32(a0),d0
0000FA10 4EF9 0000 0000             		jmp		MarkObjGone4
0000FA16                            Obj18_Delete:				; XREF: Obj18_Index
0000FA16 6000 0000                  		bra.w	DeleteObject
0000FA1A                            ; ===========================================================================
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            ; Sprite mappings - unused
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            Map_obj18x:
0000FA1A                            	include "_maps\obj18x.asm"
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A                            ; Sprite mappings - unused
0000FA1A                            ; ---------------------------------------------------------------------------
0000FA1A 0000                       		dc.w byte_80FE-Map_obj18x
0000FA1C 0000                       		dc.w byte_8109-Map_obj18x
0000FA1E 02                         byte_80FE:	dc.b 2
0000FA1F F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000FA24 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000FA29 0A                         byte_8109:	dc.b $A
0000FA2A F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000FA2F 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000FA34 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000FA39 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000FA3E 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000FA43 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000FA48 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000FA4D 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000FA52 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000FA57 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000FA5C                            		even
0000FA5C                            		even
0000FA5C                            
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            ; Sprite mappings - GHZ	platforms
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            Map_obj18:
0000FA5C                            	include "_maps\obj18ghz.asm"
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C                            ; Sprite mappings - GHZ	platforms
0000FA5C                            ; ---------------------------------------------------------------------------
0000FA5C 0000                       		dc.w byte_8140-Map_obj18
0000FA5E 0000                       		dc.w byte_8155-Map_obj18
0000FA60 04                         byte_8140:	dc.b 4
0000FA61 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000FA66 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000FA6B F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000FA70 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000FA75 0A                         byte_8155:	dc.b $A
0000FA76 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000FA7B 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000FA80 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000FA85 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000FA8A 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000FA8F F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000FA94 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000FA99 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000FA9E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000FAA3 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000FAA8                            		even
0000FAA8                            		even
0000FAA8                            
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8                            ; Sprite mappings - SYZ	platforms
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8                            Map_obj18a:
0000FAA8                            	include "_maps\obj18syz.asm"
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8                            ; Sprite mappings - SYZ	platforms
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8 0000                       		dc.w byte_818A-Map_obj18a
0000FAAA 03                         byte_818A:	dc.b 3
0000FAAB F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000FAB0 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000FAB5 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000FABA                            		even
0000FABA                            		even
0000FABA                            
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - SLZ	platforms
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            Map_obj18b:
0000FABA                            	include "_maps\obj18slz.asm"
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - SLZ	platforms
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA 0000                       		dc.w byte_819C-Map_obj18b
0000FABC 02                         byte_819C:	dc.b 2
0000FABD F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000FAC2 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000FAC8 00                         		even
0000FAC8 00                         		even
0000FAC8                            
0000FAC8                            ; ===========================================================================
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8                            ; Object 19 - blank
0000FAC8                            ; ---------------------------------------------------------------------------
0000FAC8                            
0000FAC8                            Obj19:					; XREF: Obj_Index
0000FAC8                            ;===============================================================================
0000FAC8                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FAC8                            ; [ Begin ]
0000FAC8                            ;=============================================================================== 
0000FAC8                            loc_1CFAA:
0000FAC8 7000                       		moveq	#0,d0
0000FACA 1028 0024                  		move.b	$24(a0),d0
0000FACE 323B 0000                  		move.w	loc_1CFBE(pc,d0),d1
0000FAD2 4EBB 1000                  		jsr	loc_1CFBE(pc,d1)
0000FAD6 4EF9 0000 0000             		jmp	(MarkObjGone3)
0000FADC                            loc_1CFBE:
0000FADC 0000                       		dc.w	loc_1CFC4-loc_1CFBE
0000FADE 0000                       		dc.w	loc_1D072-loc_1CFBE
0000FAE0 0000                       		dc.w	loc_1D13C-loc_1CFBE
0000FAE2                            loc_1CFC4:
0000FAE2 5428 0024                  		addq.b	#2,$24(a0)
0000FAE6 217C 0000 0000 0004        		move.l	#Map_Obj19,4(a0) 
0000FAEE 317C 07B2 0002             		move.w	#$7B2,2(a0)
0000FAF4                            ;		bsr	loc_1D302
0000FAF4 0028 0004 0001             		or.b	#4,1(a0)
0000FAFA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0000FB00 317C 0280 0018             		move.w	#$280,priority(a0)
0000FB06 1028 0028                  		move.b	$28(a0),d0
0000FB0A 0800 0002                  		btst	#2,d0
0000FB0E 6700                       		beq.s	loc_1D03E
0000FB10 5428 0024                  		addq.b	#2,$24(a0)
0000FB14 0240 0007                  		and.w	#7,d0
0000FB18 1140 001A                  		move.b	d0,$1A(a0)
0000FB1C 0240 0003                  		and.w	#3,d0
0000FB20 D040                       		add.w	d0,d0
0000FB22 317B 0000 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FB28 3228 000C                  		move.w	$C(a0),d1
0000FB2C 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB30 B269 000C                  		cmp.w	$C(a1),d1
0000FB34 6400                       		bcc.s	loc_1D032
0000FB36 117C 0001 0034             		move.b	#1,$34(a0)
0000FB3C                            ;loc_1D022:
0000FB3C                            ;		lea	($FFFFD040).w,a1
0000FB3C                            ;		cmp.w	$C(a1),d1
0000FB3C                            ;		bcc.s	loc_1D032
0000FB3C                            ;		move.b	#1,$35(a0)
0000FB3C                            loc_1D032:
0000FB3C 6000 0000                  		bra	loc_1D13C
0000FB40                            loc_1D036:
0000FB40 0020 0040 0080 0100        		dc.w	$20,$40,$80,$100
0000FB48                            loc_1D03E:
0000FB48 0240 0003                  		and.w	#3,d0
0000FB4C 1140 001A                  		move.b	d0,$1A(a0)
0000FB50 D040                       		add.w	d0,d0
0000FB52 317B 00EC 0032             		move.w	loc_1D036(pc,d0),$32(a0)
0000FB58 3228 0008                  		move.w	8(a0),d1
0000FB5C 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB60 B269 0008                  		cmp.w	8(a1),d1
0000FB64 6400                       		bcc.s	loc_1D072
0000FB66 117C 0001 0034             		move.b	#1,$34(a0)
0000FB6C                            ;loc_1D062:
0000FB6C                            ;		lea	($FFFFD040).w,a1
0000FB6C                            ;		cmp.w	8(a1),d1
0000FB6C                            ;		bcc.s	loc_1D072
0000FB6C                            ;		move.b	#1,$35(a0)
0000FB6C                            loc_1D072:
0000FB6C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FB70 6600                       		bne.s	loc_1D0CA
0000FB72 3228 0008                  		move.w	8(a0),d1
0000FB76 45E8 0034                  		lea	$34(a0),a2
0000FB7A 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB7E                            ;		bsr.s	loc_1D08A
0000FB7E                            ;		lea	($FFFFD040).w,a1
0000FB7E                            loc_1D08A:
0000FB7E 4A1A                       		tst.b	(a2)+
0000FB80 6600                       		bne.s	loc_1D0CC
0000FB82 B269 0008                  		cmp.w	8(a1),d1
0000FB86 6200                       		bhi.s	loc_1D0CA
0000FB88 157C 0001 FFFF             		move.b	#1,$FFFFFFFF(a2)
0000FB8E 3428 000C                  		move.w	$C(a0),d2
0000FB92 3602                       		move.w	d2,d3
0000FB94 3828 0032                  		move.w	$32(a0),d4
0000FB98 9444                       		sub.w	d4,d2
0000FB9A D644                       		add.w	d4,d3
0000FB9C 3829 000C                  		move.w	$C(a1),d4
0000FBA0 B842                       		cmp.w	d2,d4
0000FBA2 6500                       		bcs.s	loc_1D0CA
0000FBA4 B843                       		cmp.w	d3,d4
0000FBA6 6400                       		bcc.s	loc_1D0CA
0000FBA8 0828 0000 0001             		btst	#0,1(a0)
0000FBAE 6600                       		bne.s	loc_1D0C4
0000FBB0 137C 0001 0039             		move.b	#1,$39(a1)
0000FBB6 6000                       		bra.s	loc_1D10A
0000FBB8                            loc_1D0C4:
0000FBB8 137C 0000 0039             		move.b	#0,$39(a1)
0000FBBE                            loc_1D0CA:
0000FBBE 4E75                       		rts
0000FBC0                            loc_1D0CC:
0000FBC0 B269 0008                  		cmp.w	8(a1),d1
0000FBC4 63F8                       		bls.s	loc_1D0CA
0000FBC6 157C 0000 FFFF             		move.b	#0,$FFFFFFFF(a2)
0000FBCC 3428 000C                  		move.w	$C(a0),d2
0000FBD0 3602                       		move.w	d2,d3
0000FBD2 3828 0032                  		move.w	$32(a0),d4
0000FBD6 9444                       		sub.w	d4,d2
0000FBD8 D644                       		add.w	d4,d3
0000FBDA 3829 000C                  		move.w	$C(a1),d4
0000FBDE B842                       		cmp.w	d2,d4
0000FBE0 65DC                       		bcs.s	loc_1D0CA
0000FBE2 B843                       		cmp.w	d3,d4
0000FBE4 64D8                       		bcc.s	loc_1D0CA
0000FBE6 0828 0000 0001             		btst	#0,1(a0)
0000FBEC 6700                       		beq.s	loc_1D102
0000FBEE 137C 0001 0039             		move.b	#1,$39(a1)
0000FBF4 6000                       		bra.s	loc_1D10A
0000FBF6                            loc_1D102:
0000FBF6 137C 0000 0039             		move.b	#0,$39(a1)
0000FBFC 4E75                       		rts
0000FBFE                            loc_1D10A:
0000FBFE 0829 0002 0022             		btst	#2,$22(a1)
0000FC04 6700                       		beq.s	loc_1D114
0000FC06 4E75                       		rts
0000FC08                            loc_1D114:
0000FC08 08E9 0002 0022             		bset	#2,$22(a1)
0000FC0E 137C 000E 0016             		move.b	#$E,$16(a1)
0000FC14 137C 0007 0017             		move.b	#7,$17(a1)
0000FC1A 137C 0002 001C             		move.b	#2,$1C(a1)
0000FC20 5A69 000C                  		addq.w	#5,$C(a1)
0000FC24 303C 00BE                  		move.w	#$BE,d0
0000FC28 4EB9 0000 0000             		jsr	Play_Sfx	
0000FC2E 4E75                       		rts
0000FC30                            loc_1D13C:
0000FC30 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FC34 6600                       		bne.s	loc_1D196
0000FC36 3228 000C                  		move.w	$C(a0),d1
0000FC3A 45E8 0034                  		lea	$34(a0),a2
0000FC3E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC42                            ;		bsr.s	loc_1D154
0000FC42                            ;		lea	($FFFFD040).w,a1
0000FC42                            loc_1D154:
0000FC42 4A1A                       		tst.b	(a2)+
0000FC44 6600                       		bne.s	loc_1D198
0000FC46 B269 000C                  		cmp.w	$C(a1),d1
0000FC4A 6200                       		bhi.s	loc_1D196
0000FC4C 157C 0001 FFFF             		move.b	#1,-1(a2)
0000FC52 3428 0008                  		move.w	8(a0),d2
0000FC56 3602                       		move.w	d2,d3
0000FC58 3828 0032                  		move.w	$32(a0),d4
0000FC5C 9444                       		sub.w	d4,d2
0000FC5E D644                       		add.w	d4,d3
0000FC60 3829 0008                  		move.w	8(a1),d4
0000FC64 B842                       		cmp.w	d2,d4
0000FC66 6500                       		bcs.s	loc_1D196
0000FC68 B843                       		cmp.w	d3,d4
0000FC6A 6400                       		bcc.s	loc_1D196
0000FC6C 0828 0000 0001             		btst	#0,1(a0)
0000FC72 6600                       		bne.s	loc_1D190
0000FC74 137C 0001 0039             		move.b	#1,$39(a1)
0000FC7A 6082                       		bra	loc_1D10A
0000FC7C                            loc_1D190:
0000FC7C 137C 0000 0039             		move.b	#0,$39(a1)
0000FC82                            loc_1D196:
0000FC82 4E75                       		rts
0000FC84                            loc_1D198:
0000FC84 B269 000C                  		cmp.w	$C(a1),d1
0000FC88 63F8                       		bls.s	loc_1D196
0000FC8A 157C 0000 FFFF             		move.b	#0,-1(a2)
0000FC90 3428 0008                  		move.w	8(a0),d2
0000FC94 3602                       		move.w	d2,d3
0000FC96 3828 0032                  		move.w	$32(a0),d4
0000FC9A 9444                       		sub.w	d4,d2
0000FC9C D644                       		add.w	d4,d3
0000FC9E 3829 0008                  		move.w	8(a1),d4
0000FCA2 B842                       		cmp.w	d2,d4
0000FCA4 65DC                       		bcs.s	loc_1D196
0000FCA6 B843                       		cmp.w	d3,d4
0000FCA8 64D8                       		bcc.s	loc_1D196
0000FCAA 0828 0000 0001             		btst	#0,1(a0)
0000FCB0 6700                       		beq.s	loc_1D1D0
0000FCB2 137C 0001 0039             		move.b	#1,$39(a1)
0000FCB8 6000 FF44                  		bra	loc_1D10A
0000FCBC                            loc_1D1D0:
0000FCBC 137C 0000 0039             		move.b	#0,$39(a1)
0000FCC2 4E75                       		rts	
0000FCC4                            ;===============================================================================
0000FCC4                            ; Object 0x84 - Auto Spin - Hill Top / Hidden Palace / Casino Night
0000FCC4                            ; [ End ]
0000FCC4                            ;===============================================================================
0000FCC4                            ; ===========================================================================
0000FCC4                            Map_Obj19:	INCLUDE "mappings/sprite/Obj03.asm"
0000FCC4                            ; --------------------------------------------------------------------------------
0000FCC4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000FCC4                            ; --------------------------------------------------------------------------------
0000FCC4                            
0000FCC4                            SME_EOaao:	
0000FCC4 0000 0000                  		dc.w SME_EOaao_10-SME_EOaao, SME_EOaao_25-SME_EOaao	
0000FCC8 0000 0000                  		dc.w SME_EOaao_3A-SME_EOaao, SME_EOaao_4F-SME_EOaao	
0000FCCC 0000 0000                  		dc.w SME_EOaao_64-SME_EOaao, SME_EOaao_79-SME_EOaao	
0000FCD0 0000 0000                  		dc.w SME_EOaao_8E-SME_EOaao, SME_EOaao_A3-SME_EOaao	
0000FCD4 04                         SME_EOaao_10:	dc.b 4	
0000FCD5 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FCDA F005 0000 F8               		dc.b $F0, 5, 0, 0, $F8	
0000FCDF 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FCE4 1005 0000 F8               		dc.b $10, 5, 0, 0, $F8	
0000FCE9 04                         SME_EOaao_25:	dc.b 4	
0000FCEA C005 0000 F8               		dc.b $C0, 5, 0, 0, $F8	
0000FCEF E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FCF4 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FCF9 3005 0000 F8               		dc.b $30, 5, 0, 0, $F8	
0000FCFE 04                         SME_EOaao_3A:	dc.b 4	
0000FCFF 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FD04 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FD09 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FD0E 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FD13 04                         SME_EOaao_4F:	dc.b 4	
0000FD14 8005 0000 F8               		dc.b $80, 5, 0, 0, $F8	
0000FD19 E005 0000 F8               		dc.b $E0, 5, 0, 0, $F8	
0000FD1E 0005 0000 F8               		dc.b 0, 5, 0, 0, $F8	
0000FD23 7005 0000 F8               		dc.b $70, 5, 0, 0, $F8	
0000FD28 04                         SME_EOaao_64:	dc.b 4	
0000FD29 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD2E F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000FD33 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD38 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000FD3D 04                         SME_EOaao_79:	dc.b 4	
0000FD3E F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
0000FD43 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD48 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD4D F805 0000 30               		dc.b $F8, 5, 0, 0, $30	
0000FD52 04                         SME_EOaao_8E:	dc.b 4	
0000FD53 F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FD58 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD5D F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD62 F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FD67 04                         SME_EOaao_A3:	dc.b 4	
0000FD68 F805 0000 80               		dc.b $F8, 5, 0, 0, $80	
0000FD6D F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000FD72 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000FD77 F805 0000 70               		dc.b $F8, 5, 0, 0, $70	
0000FD7C                            		even
0000FD7C                            		even
0000FD7C                            ;		even
0000FD7C                            
0000FD7C                            ; ===========================================================================
0000FD7C                            ; ---------------------------------------------------------------------------
0000FD7C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FD7C                            ; ---------------------------------------------------------------------------
0000FD7C                            Map_obj48:
0000FD7C                            	include "_maps\obj48.asm"
0000FD7C                            ; ---------------------------------------------------------------------------
0000FD7C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000FD7C                            ; ---------------------------------------------------------------------------
0000FD7C 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000FD80 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000FD84 06                         byte_81B2:	dc.b 6
0000FD85 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000FD8A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000FD8F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000FD94 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000FD99 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000FD9E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000FDA3 04                         byte_81D1:	dc.b 4
0000FDA4 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000FDA9 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000FDAE 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000FDB3 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000FDB8 04                         byte_81E6:	dc.b 4
0000FDB9 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000FDBE E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000FDC3 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000FDC8 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000FDCD 04                         byte_81FB:	dc.b 4
0000FDCE E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000FDD3 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000FDD8 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000FDDD 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000FDE2                            		even
0000FDE2                            		even
0000FDE2                            ;	even
0000FDE2                            
0000FDE2                            ; ===========================================================================
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            ; Object 1A - GHZ collapsing ledge
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            
0000FDE2                            Obj1A:					; XREF: Obj_Index
0000FDE2 7000                       		moveq	#0,d0
0000FDE4 1028 0024                  		move.b	$24(a0),d0
0000FDE8 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000FDEC 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000FDF0                            ; ===========================================================================
0000FDF0 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000FDF4 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000FDF8 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000FDFC                            ; ===========================================================================
0000FDFC                            
0000FDFC                            Obj1A_Main:				; XREF: Obj1A_Index
0000FDFC 5428 0024                  		addq.b	#2,$24(a0)
0000FE00 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000FE08 317C 4000 0002             		move.w	#$4000,2(a0)
0000FE0E 0028 0004 0001             		ori.b	#4,1(a0)
0000FE14 317C 0200 0018             		move.w	#$200,priority(a0)
0000FE1A 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000FE20 117C 0064 0023             		move.b	#$64,width_pixels(a0)
0000FE26 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FE2C 117C 0038 0016             		move.b	#$38,$16(a0)
0000FE32 08E8 0004 0001             		bset	#4,1(a0)
0000FE38                            
0000FE38                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000FE38 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000FE3C 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000FE3E 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000FE42 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000FE46 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FE4A                            
0000FE4A                            Obj1A_Slope:
0000FE4A 323C 0030                  		move.w	#$30,d1
0000FE4E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FE54 6100 F31C                  		bsr.w	SlopeObject
0000FE58 4EF9 0000 0000             		jmp	MarkObjGone
0000FE5E                            ; ===========================================================================
0000FE5E                            
0000FE5E                            Obj1A_Touch:				; XREF: Obj1A_Index
0000FE5E 4A28 0038                  		tst.b	$38(a0)
0000FE62 6700 0000                  		beq.w	loc_847A
0000FE66 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000FE6C 5328 0038                  		subq.b	#1,$38(a0)
0000FE70                            
0000FE70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE70                            
0000FE70                            
0000FE70                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000FE70 323C 0030                  		move.w	#$30,d1
0000FE74 6100 F364                  		bsr.w	ExitPlatform
0000FE78 323C 0030                  		move.w	#$30,d1
0000FE7C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000FE82 3428 0008                  		move.w	8(a0),d2
0000FE86 6100 0000                  		bsr.w	SlopeObject2
0000FE8A 4EF9 0000 0000             		jmp	MarkObjGone
0000FE90                            ; End of function Obj1A_WalkOff
0000FE90                            
0000FE90                            ; ===========================================================================
0000FE90                            
0000FE90                            Obj1A_Display:				; XREF: Obj1A_Index
0000FE90 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FE94 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000FE96 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FE9A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000FE9E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FEA2 6000 0000                  		bra.w	DisplaySprite
0000FEA6                            ; ===========================================================================
0000FEA6                            
0000FEA6                            loc_82D0:				; XREF: Obj1A_Display
0000FEA6 5328 0038                  		subq.b	#1,$38(a0)
0000FEAA 6100 FFC4                  		bsr.w	Obj1A_WalkOff
0000FEAE 43F8 D000                  		lea	($FFFFD000).w,a1
0000FEB2 0829 0003 0022             		btst	#3,$22(a1)
0000FEB8 6700                       		beq.s	loc_82FC
0000FEBA 4A28 0038                  		tst.b	$38(a0)
0000FEBE 6600                       		bne.s	locret_8308
0000FEC0 08A9 0003 0022             		bclr	#3,$22(a1)
0000FEC6 08A9 0005 0022             		bclr	#5,$22(a1)
0000FECC 137C 0001 001D             		move.b	#1,$1D(a1)
0000FED2                            
0000FED2                            loc_82FC:
0000FED2 117C 0000 003A             		move.b	#0,$3A(a0)
0000FED8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000FEDE                            
0000FEDE                            locret_8308:
0000FEDE 4E75                       		rts	
0000FEE0                            ; ===========================================================================
0000FEE0                            
0000FEE0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000FEE0 6100 0000                  		bsr.w	ObjectFall
0000FEE4 6100 0000                  		bsr.w	DisplaySprite
0000FEE8 4A28 0001                  		tst.b	1(a0)
0000FEEC 6A00                       		bpl.s	Obj1A_Delete
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0                            
0000FEF0                            Obj1A_Delete:				; XREF: Obj1A_Index
0000FEF0 6100 0000                  		bsr.w	DeleteObject
0000FEF4 4E75                       		rts	
0000FEF6                            ; ===========================================================================
0000FEF6                            ; ---------------------------------------------------------------------------
0000FEF6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000FEF6                            ; ---------------------------------------------------------------------------
0000FEF6                            
0000FEF6                            Obj53:					; XREF: Obj_Index
0000FEF6 7000                       		moveq	#0,d0
0000FEF8 1028 0024                  		move.b	$24(a0),d0
0000FEFC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000FF00 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000FF04                            ; ===========================================================================
0000FF04 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000FF08 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000FF0C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000FF10                            ; ===========================================================================
0000FF10                            
0000FF10                            Obj53_Main:				; XREF: Obj53_Index
0000FF10 5428 0024                  		addq.b	#2,$24(a0)
0000FF14 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000FF1C 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FF22 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000FF28 6600                       		bne.s	Obj53_NotSLZ
0000FF2A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000FF30 5428 001A                  		addq.b	#2,$1A(a0)
0000FF34                            
0000FF34                            Obj53_NotSLZ:
0000FF34 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FF3A 6600                       		bne.s	Obj53_NotSBZ
0000FF3C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000FF42                            
0000FF42                            Obj53_NotSBZ:
0000FF42 0028 0004 0001             		ori.b	#4,1(a0)
0000FF48 317C 0200 0018             		move.w	#$200,priority(a0)
0000FF4E 117C 0007 0038             		move.b	#7,$38(a0)
0000FF54 117C 0044 0023             		move.b	#$44,width_pixels(a0)
0000FF5A                            
0000FF5A                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000FF5A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FF5E 6700                       		beq.s	Obj53_Solid	; if not, branch
0000FF60 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FF64 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000FF68 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FF6C                            
0000FF6C                            Obj53_Solid:
0000FF6C 323C 0020                  		move.w	#$20,d1
0000FF70 6100 F128                  		bsr.w	PlatformObject
0000FF74 4A28 0028                  		tst.b	$28(a0)
0000FF78 6A00                       		bpl.s	Obj53_MarkAsGone
0000FF7A 0829 0003 0022             		btst	#3,$22(a1)
0000FF80 6700                       		beq.s	Obj53_MarkAsGone
0000FF82 08A8 0000 0001             		bclr	#0,1(a0)
0000FF88 3029 0008                  		move.w	8(a1),d0
0000FF8C 9068 0008                  		sub.w	8(a0),d0
0000FF90 6400                       		bcc.s	Obj53_MarkAsGone
0000FF92 08E8 0000 0001             		bset	#0,1(a0)
0000FF98                            
0000FF98                            Obj53_MarkAsGone:
0000FF98 4EF9 0000 0000             		jmp	MarkObjGone
0000FF9E                            ; ===========================================================================
0000FF9E                            
0000FF9E                            Obj53_Touch:				; XREF: Obj53_Index
0000FF9E 4A28 0038                  		tst.b	$38(a0)
0000FFA2 6700 0000                  		beq.w	loc_8458
0000FFA6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000FFAC 5328 0038                  		subq.b	#1,$38(a0)
0000FFB0                            
0000FFB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFB0                            
0000FFB0                            
0000FFB0                            Obj53_WalkOff:				; XREF: Obj53_Index
0000FFB0 323C 0020                  		move.w	#$20,d1
0000FFB4 6100 F224                  		bsr.w	ExitPlatform
0000FFB8 3428 0008                  		move.w	8(a0),d2
0000FFBC 6100 F482                  		bsr.w	MvSonicOnPtfm2
0000FFC0 4EF9 0000 0000             		jmp	MarkObjGone
0000FFC6                            ; End of function Obj53_WalkOff
0000FFC6                            
0000FFC6                            ; ===========================================================================
0000FFC6                            
0000FFC6                            Obj53_Display:				; XREF: Obj53_Index
0000FFC6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000FFCA 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000FFCC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000FFD0 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000FFD4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000FFD8 6000 0000                  		bra.w	DisplaySprite
0000FFDC                            ; ===========================================================================
0000FFDC                            
0000FFDC                            loc_8402:
0000FFDC 5328 0038                  		subq.b	#1,$38(a0)
0000FFE0 6100 FFCE                  		bsr.w	Obj53_WalkOff
0000FFE4 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFE8 0829 0003 0022             		btst	#3,$22(a1)
0000FFEE 6700                       		beq.s	loc_842E
0000FFF0 4A28 0038                  		tst.b	$38(a0)
0000FFF4 6600                       		bne.s	locret_843A
0000FFF6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFFC 08A9 0005 0022             		bclr	#5,$22(a1)
00010002 137C 0001 001D             		move.b	#1,$1D(a1)
00010008                            
00010008                            loc_842E:
00010008 117C 0000 003A             		move.b	#0,$3A(a0)
0001000E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00010014                            
00010014                            locret_843A:
00010014 4E75                       		rts	
00010016                            ; ===========================================================================
00010016                            
00010016                            Obj53_TimeZero:				; XREF: Obj53_Display
00010016 6100 0000                  		bsr.w	ObjectFall
0001001A 6100 0000                  		bsr.w	DisplaySprite
0001001E 4A28 0001                  		tst.b	1(a0)
00010022 6A00                       		bpl.s	Obj53_Delete
00010024 4E75                       		rts	
00010026                            ; ===========================================================================
00010026                            
00010026                            Obj53_Delete:				; XREF: Obj53_Index
00010026 6100 0000                  		bsr.w	DeleteObject
0001002A 4E75                       		rts	
0001002C                            ; ===========================================================================
0001002C                            
0001002C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0001002C 117C 0000 003A             		move.b	#0,$3A(a0)
00010032                            
00010032                            loc_8458:				; XREF: Obj53_Touch
00010032 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00010038 0828 0000 0028             		btst	#0,$28(a0)
0001003E 6700                       		beq.s	loc_846C
00010040 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00010046                            
00010046                            loc_846C:
00010046 7207                       		moveq	#7,d1
00010048 5228 001A                  		addq.b	#1,$1A(a0)
0001004C 6000                       		bra.s	loc_8486
0001004E                            ; ===========================================================================
0001004E                            
0001004E                            Obj1A_Collapse:
0001004E 117C 0000 003A             		move.b	#0,$3A(a0)
00010054                            
00010054                            loc_847A:
00010054 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0001005A 7218                       		moveq	#$18,d1
0001005C 5428 001A                  		addq.b	#2,$1A(a0)
00010060                            
00010060                            loc_8486:
00010060 7000                       		moveq	#0,d0
00010062 1028 001A                  		move.b	$1A(a0),d0
00010066 D040                       		add.w	d0,d0
00010068 2668 0004                  		movea.l	4(a0),a3
0001006C D6F3 0000                  		adda.w	(a3,d0.w),a3
00010070 524B                       		addq.w	#1,a3
00010072 08E8 0005 0001             		bset	#5,1(a0)
00010078 1810                       		move.b	0(a0),d4
0001007A 1A28 0001                  		move.b	1(a0),d5
0001007E 2248                       		movea.l	a0,a1
00010080                            	;	bra.s	loc_84B2	; We have to remove this otherwise a1's value won't be right,
00010080                            	; but since it's what creates the first object over the source object, we also have to create it now...
00010080                            	; First object's creation begins here:
00010080 137C 0006 0024             		move.b	#6,$24(a1)
00010086 1284                       		move.b	d4,0(a1)
00010088 234B 0004                  		move.l	a3,4(a1)
0001008C 1345 0001                  		move.b	d5,1(a1)
00010090 3368 0008 0008             		move.w	8(a0),8(a1)
00010096 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001009C 3368 0002 0002             		move.w	2(a0),2(a1)
000100A2 3368 0018 0018             		move.w	priority(a0),priority(a1)
000100A8 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000100AE 135C 0038                  		move.b	(a4)+,$38(a1)
000100B2                            	; and ends here, it's a simple copy/paste from loc_84B2.
000100B2                            	; Now since we created one object already, we have to decrease the counter
000100B2 5341                       		subq.w	#1,d1
000100B4                            	; We don't have to check whether it's the last one or not, it can't be unless there's not enough free ram to create more (and that's checked later).
000100B4                            	; Here we begin what's replacing SingleObjLoad, in order to avoid resetting its d0 every time an object is created.
000100B4 43F8 D800                  		lea	($FFFFD800).w,a1
000100B8 303C 005F                  		move.w	#$5F,d0
000100BC                            
000100BC                            loc_84AA:
000100BC                            	;	bsr.w	SingleObjLoad	; We remove this, it's the routine we want to avoid
000100BC                            	; So here goes what was originally happening in SingleObjLoad, excepted now d0 won't be reset every time an object has to be created.
000100BC                            	; We'll just copy/paste the content of loc_DA94 and correct the branches.
000100BC                            	@loop:
000100BC 4A11                       		tst.b	(a1)
000100BE 6700                       		beq.s	@cont		; Let's correct the branches. Here we can also skip the bne that was originally after bsr.w SingleObjLoad because we already know there's a free object slot in memory.
000100C0 43E9 0040                  		lea	$40(a1),a1
000100C4 51C8 FFF6                  		dbf	d0,@loop	; Branch correction again.
000100C8 6600                       		bne.s	loc_84F2	; We're moving this line here.
000100CA                            	@cont:
000100CA                            	; And that's it, copy/paste complete.
000100CA 5A4B                       		addq.w	#5,a3
000100CC                            
000100CC                            loc_84B2:
000100CC 137C 0006 0024             		move.b	#6,$24(a1)
000100D2 1284                       		move.b	d4,0(a1)
000100D4 234B 0004                  		move.l	a3,4(a1)
000100D8 1345 0001                  		move.b	d5,1(a1)
000100DC 3368 0008 0008             		move.w	8(a0),8(a1)
000100E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000100E8 3368 0002 0002             		move.w	2(a0),2(a1)
000100EE 3368 0018 0018             		move.w	priority(a0),priority(a1)
000100F4 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000100FA 135C 0038                  		move.b	(a4)+,$38(a1)
000100FE                            	;	cmpa.l	a0,a1		; Finally, this isn't necessary anymore, its only purpose was to skip DisplaySprite2 on the first object
000100FE                            	;	bcc.s	loc_84EE
000100FE 6100 0000                  		bsr.w	DisplaySprite2
00010102                            
00010102                            loc_84EE:
00010102 51C9 FFB8                  		dbf	d1,loc_84AA
00010106                            
00010106                            loc_84F2:
00010106 6100 0000                  		bsr.w	DisplaySprite
0001010A 303C 006F                  		move.w	#$6F,d0
0001010E 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00010114                            ; ===========================================================================
00010114                            ; ---------------------------------------------------------------------------
00010114                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00010114                            ; ---------------------------------------------------------------------------
00010114 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00010124 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0001012E 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00010136 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0001013E                            
0001013E                            ; ---------------------------------------------------------------------------
0001013E                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0001013E                            ; ---------------------------------------------------------------------------
0001013E                            
0001013E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001013E                            
0001013E                            
0001013E                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0001013E 43F8 D000                  		lea	($FFFFD000).w,a1
00010142 0829 0003 0022             		btst	#3,status(a1)
00010148 6700                       		beq.s	locret_856E
0001014A 3029 0008                  		move.w	8(a1),d0
0001014E 9068 0008                  		sub.w	8(a0),d0
00010152 D041                       		add.w	d1,d0
00010154 E248                       		lsr.w	#1,d0
00010156 0828 0000 0001             		btst	#0,1(a0)
0001015C 6700                       		beq.s	loc_854E
0001015E 4640                       		not.w	d0
00010160 D041                       		add.w	d1,d0
00010162                            
00010162                            loc_854E:
00010162 7200                       		moveq	#0,d1
00010164 1232 0000                  		move.b	(a2,d0.w),d1
00010168 3028 000C                  		move.w	$C(a0),d0
0001016C 9041                       		sub.w	d1,d0
0001016E 7200                       		moveq	#0,d1
00010170 1229 0016                  		move.b	$16(a1),d1
00010174 9041                       		sub.w	d1,d0
00010176 3340 000C                  		move.w	d0,$C(a1)
0001017A 9468 0008                  		sub.w	8(a0),d2
0001017E 9569 0008                  		sub.w	d2,8(a1)
00010182 4A38 FE2C                  		tst.b	($FFFFFE2C).w     ; does Sonic have a shield?
00010186 6700                       		beq.s	locret_856E       ; if not, branch
00010188 31C0 D18C                  		move.w	d0,($FFFFD180+$C).w   ; apply change to Shield's Y-Position
0001018C 9578 D188                  		sub.w	d2,($FFFFD180+8).w   ; apply change to Shield's X-Position
00010190                            locret_856E:
00010190 4E75                       		rts	
00010192                            ; End of function SlopeObject2
00010192                            ; ===========================================================================
00010192                            ; ---------------------------------------------------------------------------
00010192                            ; Collision data for GHZ collapsing ledge
00010192                            ; ---------------------------------------------------------------------------
00010192                            Obj1A_SlopeData:
00010192                            		incbin	misc\ghzledge.bin
000101C2                            		even
000101C2                            
000101C2                            ; ---------------------------------------------------------------------------
000101C2                            ; Sprite mappings - GHZ	collapsing ledge
000101C2                            ; ---------------------------------------------------------------------------
000101C2                            Map_obj1A:
000101C2                            	include "_maps\obj1A.asm"
000101C2                            ; ---------------------------------------------------------------------------
000101C2                            ; Sprite mappings - GHZ	collapsing ledge
000101C2                            ; ---------------------------------------------------------------------------
000101C2 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000101C6 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000101CA 10                         byte_85A8:	dc.b $10
000101CB C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000101D0 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000101D5 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000101DA E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000101DF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000101E4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000101E9 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000101EE F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000101F3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000101F8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000101FD 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00010202 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010207 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0001020C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00010211 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00010216 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0001021B 10                         byte_85F9:	dc.b $10
0001021C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00010221 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00010226 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0001022B E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00010230 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00010235 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0001023A F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0001023F F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00010244 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010249 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0001024E 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00010253 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00010258 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0001025D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00010262 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00010267 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0001026C 19                         byte_864A:	dc.b $19
0001026D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00010272 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00010277 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0001027C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00010281 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00010286 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0001028B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00010290 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00010295 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0001029A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0001029F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000102A4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000102A9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000102AE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000102B3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000102B8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000102BD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000102C2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000102C7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000102CC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000102D1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000102D6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000102DB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000102E0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000102E5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000102EA 19                         byte_86C8:	dc.b $19
000102EB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000102F0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000102F5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000102FA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000102FF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00010304 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00010309 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0001030E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00010313 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00010318 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0001031D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00010322 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00010327 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0001032C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00010331 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00010336 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0001033B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00010340 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00010345 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0001034A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0001034F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00010354 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00010359 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0001035E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00010363 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00010368                            		even
00010368                            		even
00010368                            
00010368                            ; ---------------------------------------------------------------------------
00010368                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00010368                            ; ---------------------------------------------------------------------------
00010368                            Map_obj53:
00010368                            	include "_maps\obj53.asm"
00010368                            ; ---------------------------------------------------------------------------
00010368                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00010368                            ; ---------------------------------------------------------------------------
00010368 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
0001036C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00010370 04                         byte_874E:	dc.b 4
00010371 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00010376 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0001037B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00010380 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00010385 08                         byte_8763:	dc.b 8
00010386 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0001038B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00010390 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00010395 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0001039A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0001039F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000103A4 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000103A9 0805 0000 10               		dc.b 8,	5, 0, 0, $10
000103AE 04                         byte_878C:	dc.b 4
000103AF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
000103B4 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
000103B9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000103BE 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
000103C3 08                         byte_87A1:	dc.b 8
000103C4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000103C9 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000103CE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000103D3 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000103D8 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000103DD 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000103E2 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000103E7 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000103EC                            		even
000103EC                            		even
000103EC                            
000103EC                            ; ===========================================================================
000103EC                            ; ---------------------------------------------------------------------------
000103EC                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000103EC                            ; ---------------------------------------------------------------------------
000103EC                            
000103EC                            Obj1C:					; XREF: Obj_Index
000103EC 7000                       		moveq	#0,d0
000103EE 1028 0024                  		move.b	$24(a0),d0
000103F2 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000103F6 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000103FA                            ; ===========================================================================
000103FA 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000103FC 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000103FE                            ; ===========================================================================
000103FE                            
000103FE                            Obj1C_Main:				; XREF: Obj1C_Index
000103FE 5428 0024                  		addq.b	#2,$24(a0)
00010402 7000                       		moveq	#0,d0
00010404 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00010408 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0001040C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00010410 2159 0004                  		move.l	(a1)+,4(a0)
00010414 3159 0002                  		move.w	(a1)+,2(a0)
00010418 0028 0004 0001             		ori.b	#4,1(a0)
0001041E 1159 001A                  		move.b	(a1)+,$1A(a0)
00010422 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00010426 1159 0018                  		move.b	(a1)+,priority(a0)
0001042A 3028 0018                          move.w  priority(a0),d0
0001042E E248                               lsr.w   #1,d0
00010430 0240 0380                          andi.w  #$380,d0
00010434 3140 0018                          move.w  d0,priority(a0)
00010438 1159 0020                  		move.b	(a1)+,$20(a0)
0001043C                            
0001043C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0001043C 4EF9 0000 0000             		jmp	MarkObjGone
00010442                            ; ===========================================================================
00010442                            ; ---------------------------------------------------------------------------
00010442                            ; Variables for	object $1C are stored in an array
00010442                            ; ---------------------------------------------------------------------------
00010442 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00010446 44D8                       		dc.w $44D8		; VRAM setting
00010448 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0001044C 0000 0000                  		dc.l Map_obj1C
00010450 44D8                       		dc.w $44D8
00010452 0008 0200                  		dc.b 0,	8, 2, 0
00010456 0000 0000                  		dc.l Map_obj1C
0001045A 44D8                       		dc.w $44D8
0001045C 0008 0200                  		dc.b 0,	8, 2, 0
00010460 0000 F20C                  		dc.l Map_obj11
00010464 438E                       		dc.w $438E
00010466 0110 0100                  		dc.b 1,	$10, 1,	0
0001046A                            ; ---------------------------------------------------------------------------
0001046A                            ; Sprite mappings - SLZ	lava thrower
0001046A                            ; ---------------------------------------------------------------------------
0001046A                            Map_obj1C:
0001046A                            	include "_maps\obj1C.asm"
0001046A                            ; ---------------------------------------------------------------------------
0001046A                            ; Sprite mappings - SLZ	lava thrower
0001046A                            ; ---------------------------------------------------------------------------
0001046A 0000                       		dc.w byte_8858-Map_obj1C
0001046C 01                         byte_8858:	dc.b 1
0001046D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010472                            		even
00010472                            		even
00010472                            
00010472                            ; ===========================================================================
00010472                            ; ---------------------------------------------------------------------------
00010472                            ; Object 1D - switch that activates when Sonic touches it
00010472                            ; (this	is not used anywhere in	the game)
00010472                            ; ---------------------------------------------------------------------------
00010472                            
00010472                            Obj1D:					; XREF: Obj_Index
00010472 7000                       		moveq	#0,d0
00010474 1028 0024                  		move.b	$24(a0),d0
00010478 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0001047C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00010480                            ; ===========================================================================
00010480 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00010482 0000                       		dc.w Obj1D_Action-Obj1D_Index
00010484 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00010486                            ; ===========================================================================
00010486                            
00010486                            Obj1D_Main:				; XREF: Obj1D_Index
00010486 5428 0024                  		addq.b	#2,$24(a0)
0001048A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00010492 317C 4000 0002             		move.w	#$4000,2(a0)
00010498 117C 0004 0001             		move.b	#4,1(a0)
0001049E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000104A4 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000104AA 317C 0280 0018             		move.w	#$280,priority(a0)
000104B0                            
000104B0                            Obj1D_Action:				; XREF: Obj1D_Index
000104B0 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000104B6 323C 0010                  		move.w	#$10,d1
000104BA 6100 0000                  		bsr.w	Obj1D_ChkTouch
000104BE 6700                       		beq.s	Obj1D_ChkDel
000104C0 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000104C4 7001                       		moveq	#1,d0
000104C6 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000104CA                            
000104CA                            Obj1D_ChkDel:
000104CA 6100 0000                  		bsr.w	DisplaySprite
000104CE 4EF9 0000 0000             		jmp		MarkObjGone3	
000104D4                            Obj1D_Delete:				; XREF: Obj1D_Index
000104D4 6100 0000                  		bsr.w	DeleteObject
000104D8 4E75                       		rts	
000104DA                            ; ---------------------------------------------------------------------------
000104DA                            ; Subroutine to	check if Sonic touches the object
000104DA                            ; ---------------------------------------------------------------------------
000104DA                            
000104DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104DA                            
000104DA                            
000104DA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000104DA 43F8 D000                  		lea	($FFFFD000).w,a1
000104DE 3029 0008                  		move.w	8(a1),d0
000104E2 9068 0008                  		sub.w	8(a0),d0
000104E6 D041                       		add.w	d1,d0
000104E8 6B00                       		bmi.s	loc_8918
000104EA D241                       		add.w	d1,d1
000104EC B041                       		cmp.w	d1,d0
000104EE 6400                       		bcc.s	loc_8918
000104F0 3429 000C                  		move.w	$C(a1),d2
000104F4 1229 0016                  		move.b	$16(a1),d1
000104F8 4881                       		ext.w	d1
000104FA D242                       		add.w	d2,d1
000104FC 3028 000C                  		move.w	$C(a0),d0
00010500 0440 0010                  		subi.w	#$10,d0
00010504 9041                       		sub.w	d1,d0
00010506 6200                       		bhi.s	loc_8918
00010508 0C40 FFF0                  		cmpi.w	#-$10,d0
0001050C 6500                       		bcs.s	loc_8918
0001050E 70FF                       		moveq	#-1,d0
00010510 4E75                       		rts	
00010512                            ; ===========================================================================
00010512                            
00010512                            loc_8918:
00010512 7000                       		moveq	#0,d0
00010514 4E75                       		rts	
00010516                            ; End of function Obj1D_ChkTouch
00010516                            
00010516                            ; ===========================================================================
00010516                            ; ---------------------------------------------------------------------------
00010516                            ; Sprite mappings - object 1D
00010516                            ; ---------------------------------------------------------------------------
00010516                            Map_obj1D:
00010516                            	include '_maps\obj1D.asm'
00010516                            ; ---------------------------------------------------------------------------
00010516                            ; Sprite mappings - object 1D
00010516                            ; ---------------------------------------------------------------------------
00010516 0000                       		dc.w byte_891E-Map_obj1D
00010518 04                         byte_891E:	dc.b 4
00010519 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0001051E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00010523 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00010528 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0001052E 00                         		even
0001052E 00                         		even
0001052E                            
0001052E                            ; ===========================================================================
0001052E                            ; ---------------------------------------------------------------------------
0001052E                            ; Object 2A - doors (SBZ)
0001052E                            ; ---------------------------------------------------------------------------
0001052E                            
0001052E                            Obj2A:					; XREF: Obj_Index
0001052E 7000                       		moveq	#0,d0
00010530 1028 0024                  		move.b	$24(a0),d0
00010534 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00010538 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0001053C                            ; ===========================================================================
0001053C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0001053E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00010540                            ; ===========================================================================
00010540                            
00010540                            Obj2A_Main:				; XREF: Obj2A_Index
00010540 5428 0024                  		addq.b	#2,$24(a0)
00010544 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0001054C 317C 42E8 0002             		move.w	#$42E8,2(a0)
00010552 0028 0004 0001             		ori.b	#4,1(a0)
00010558 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001055E 317C 0200 0018             		move.w	#$200,priority(a0)
00010564                            
00010564                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00010564 323C 0040                  		move.w	#$40,d1
00010568 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0001056C 3038 D008                  		move.w	($FFFFD008).w,d0
00010570 D041                       		add.w	d1,d0
00010572 B068 0008                  		cmp.w	8(a0),d0
00010576 6500                       		bcs.s	Obj2A_Animate
00010578 9041                       		sub.w	d1,d0
0001057A 9041                       		sub.w	d1,d0
0001057C B068 0008                  		cmp.w	8(a0),d0
00010580 6400                       		bcc.s	Obj2A_Animate
00010582 D041                       		add.w	d1,d0
00010584 B068 0008                  		cmp.w	8(a0),d0
00010588 6400                       		bcc.s	loc_899A
0001058A 0828 0000 0022             		btst	#0,$22(a0)
00010590 6600                       		bne.s	Obj2A_Animate
00010592 6000                       		bra.s	Obj2A_Open
00010594                            ; ===========================================================================
00010594                            
00010594                            loc_899A:				; XREF: Obj2A_OpenShut
00010594 0828 0000 0022             		btst	#0,$22(a0)
0001059A 6700                       		beq.s	Obj2A_Animate
0001059C                            
0001059C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0001059C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000105A2                            
000105A2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000105A2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000105A8 6100 0000                  		bsr.w	AnimateSprite
000105AC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000105B0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000105B2 323C 0011                  		move.w	#$11,d1
000105B6 343C 0020                  		move.w	#$20,d2
000105BA 3602                       		move.w	d2,d3
000105BC 5243                       		addq.w	#1,d3
000105BE 3828 0008                  		move.w	8(a0),d4
000105C2 4EB9 0000 0000             		jsr	SolidObject
000105C8                            
000105C8                            Obj2A_MarkAsUsed:
000105C8 4EF9 0000 0000             		jmp	MarkObjGone
000105CE                            ; ===========================================================================
000105CE                            Ani_obj2A:
000105CE                            	include '_anim\obj2A.asm'
000105CE                            ; ---------------------------------------------------------------------------
000105CE                            ; Animation script - doors (SBZ)
000105CE                            ; ---------------------------------------------------------------------------
000105CE 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000105D0 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000105D2 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000105DE 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000105EA                            		even
000105EA                            		even
000105EA                            
000105EA                            ; ---------------------------------------------------------------------------
000105EA                            ; Sprite mappings - doors (SBZ)
000105EA                            ; ---------------------------------------------------------------------------
000105EA                            Map_obj2A:
000105EA                            	include '_maps\obj2A.asm'
000105EA                            ; ---------------------------------------------------------------------------
000105EA                            ; Sprite mappings - doors (SBZ)
000105EA                            ; ---------------------------------------------------------------------------
000105EA 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000105EE 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000105F2 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000105F6 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000105FA 0000                       		dc.w byte_8A56-Map_obj2A
000105FC 02                         byte_89FE:	dc.b 2
000105FD E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00010602 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00010607 02                         byte_8A09:	dc.b 2
00010608 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0001060D 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00010612 02                         byte_8A14:	dc.b 2
00010613 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00010618 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0001061D 02                         byte_8A1F:	dc.b 2
0001061E D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00010623 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00010628 02                         byte_8A2A:	dc.b 2
00010629 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0001062E 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00010633 02                         byte_8A35:	dc.b 2
00010634 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00010639 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0001063E 02                         byte_8A40:	dc.b 2
0001063F C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00010644 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00010649 02                         byte_8A4B:	dc.b 2
0001064A C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0001064F 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00010654 02                         byte_8A56:	dc.b 2
00010655 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
0001065A 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00010660 00                         		even
00010660 00                         		even
00010660                            
00010660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010660                            
00010660                            
00010660                            Obj44_SolidWall:			; XREF: Obj44_Solid
00010660 4EB9 0000 0000             		jsr	Obj44_SolidWall2
00010666 6700                       		beq.s	loc_8AA8
00010668 6B00 0000                  		bmi.w	loc_8AC4
0001066C 4A40                       		tst.w	d0
0001066E 6700 0000                  		beq.w	loc_8A92
00010672 6B00                       		bmi.s	loc_8A7C
00010674 4A69 0010                  		tst.w	x_vel(a1)
00010678 6B00                       		bmi.s	loc_8A92
0001067A 6000                       		bra.s	loc_8A82
0001067C                            ; ===========================================================================
0001067C                            
0001067C                            loc_8A7C:
0001067C 4A69 0010                  		tst.w	x_vel(a1)
00010680 6A00                       		bpl.s	loc_8A92
00010682                            
00010682                            loc_8A82:
00010682 9169 0008                  		sub.w	d0,8(a1)
00010686 337C 0000 0020             		move.w	#0,inertia(a1)
0001068C 337C 0000 0010             		move.w	#0,x_vel(a1)
00010692                            
00010692                            loc_8A92:
00010692 0829 0001 0022             		btst	#1,status(a1)
00010698 6600                       		bne.s	loc_8AB6
0001069A 08E9 0005 0022             		bset	#5,status(a1)
000106A0 08E8 0005 0022             		bset	#5,status(a0)
000106A6 4E75                       		rts	
000106A8                            ; ===========================================================================
000106A8                            
000106A8                            loc_8AA8:
000106A8 0828 0005 0022             		btst	#5,status(a0)
000106AE 6700                       		beq.s	locret_8AC2
000106B0 337C 0001 001C             		move.w	#1,anim(a1)
000106B6                            
000106B6                            loc_8AB6:
000106B6 08A8 0005 0022             		bclr	#5,status(a0)
000106BC 08A9 0005 0022             		bclr	#5,status(a1)
000106C2                            
000106C2                            locret_8AC2:
000106C2 4E75                       		rts	
000106C4                            ; ===========================================================================
000106C4                            
000106C4                            loc_8AC4:
000106C4 4A69 0012                  		tst.w	y_vel(a1)
000106C8 6A00                       		bpl.s	locret_8AD8
000106CA 4A43                       		tst.w	d3
000106CC 6A00                       		bpl.s	locret_8AD8
000106CE 9769 000C                  		sub.w	d3,$C(a1)
000106D2 337C 0000 0012             		move.w	#0,y_vel(a1)
000106D8                            
000106D8                            locret_8AD8:
000106D8 4E75                       		rts	
000106DA                            ; End of function Obj44_SolidWall
000106DA                            
000106DA                            
000106DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000106DA                            
000106DA                            
000106DA                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000106DA 43F8 D000                  		lea	($FFFFD000).w,a1
000106DE 3029 0008                  		move.w	8(a1),d0
000106E2 9068 0008                  		sub.w	8(a0),d0
000106E6 D041                       		add.w	d1,d0
000106E8 6B00                       		bmi.s	loc_8B48
000106EA 3601                       		move.w	d1,d3
000106EC D643                       		add.w	d3,d3
000106EE B043                       		cmp.w	d3,d0
000106F0 6200                       		bhi.s	loc_8B48
000106F2 1629 0016                  		move.b	$16(a1),d3
000106F6 4883                       		ext.w	d3
000106F8 D443                       		add.w	d3,d2
000106FA 3629 000C                  		move.w	$C(a1),d3
000106FE 9668 000C                  		sub.w	$C(a0),d3
00010702 D642                       		add.w	d2,d3
00010704 6B00                       		bmi.s	loc_8B48
00010706 3802                       		move.w	d2,d4
00010708 D844                       		add.w	d4,d4
0001070A B644                       		cmp.w	d4,d3
0001070C 6400                       		bcc.s	loc_8B48
0001070E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010712 6B00                       		bmi.s	loc_8B48
00010714 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001071A 6400                       		bcc.s	loc_8B48
0001071C 4A78 FE08                  		tst.w	($FFFFFE08).w
00010720 6600                       		bne.s	loc_8B48
00010722 3A00                       		move.w	d0,d5
00010724 B240                       		cmp.w	d0,d1
00010726 6400                       		bcc.s	loc_8B30
00010728 D241                       		add.w	d1,d1
0001072A 9041                       		sub.w	d1,d0
0001072C 3A00                       		move.w	d0,d5
0001072E 4445                       		neg.w	d5
00010730                            
00010730                            loc_8B30:
00010730 3203                       		move.w	d3,d1
00010732 B443                       		cmp.w	d3,d2
00010734 6400                       		bcc.s	loc_8B3C
00010736 9644                       		sub.w	d4,d3
00010738 3203                       		move.w	d3,d1
0001073A 4441                       		neg.w	d1
0001073C                            
0001073C                            loc_8B3C:
0001073C BA41                       		cmp.w	d1,d5
0001073E 6200                       		bhi.s	loc_8B44
00010740 7801                       		moveq	#1,d4
00010742 4E75                       		rts	
00010744                            ; ===========================================================================
00010744                            
00010744                            loc_8B44:
00010744 78FF                       		moveq	#-1,d4
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748                            
00010748                            loc_8B48:
00010748 7800                       		moveq	#0,d4
0001074A 4E75                       		rts	
0001074C                            ; End of function Obj44_SolidWall2
0001074C                            
0001074C                            ; ===========================================================================
0001074C                            ; ---------------------------------------------------------------------------
0001074C                            ; Object 1E - Ball Hog enemy (SBZ)
0001074C                            ; ---------------------------------------------------------------------------
0001074C                            
0001074C                            Obj1E:					; XREF: Obj_Index
0001074C 7000                       		moveq	#0,d0
0001074E 1028 0024                  		move.b	routine(a0),d0
00010752 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00010756 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0001075A                            ; ===========================================================================
0001075A 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0001075C 0000                       		dc.w Obj1E_Action-Obj1E_Index
0001075E                            ; ===========================================================================
0001075E                            
0001075E                            Obj1E_Main:				; XREF: Obj1E_Index
0001075E 117C 0013 0016             		move.b	#$13,$16(a0)
00010764 117C 0008 0017             		move.b	#8,$17(a0)
0001076A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00010772 317C 2302 0002             		move.w	#$2302,2(a0)
00010778 117C 0004 0001             		move.b	#4,1(a0)
0001077E 317C 0200 0018             		move.w	#$200,priority(a0)
00010784 117C 0005 0020             		move.b	#5,collision_flags(a0)
0001078A 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010790 4EB9 0000 0000             		jsr	ObjectFall
00010796 4EB9 0000 0000             		jsr	ObjHitFloor
0001079C 4A41                       		tst.w	d1
0001079E 6A00                       		bpl.s	locret_8BAC
000107A0 D368 000C                  		add.w	d1,$C(a0)
000107A4 317C 0000 0012             		move.w	#0,y_vel(a0)
000107AA 5428 0024                  		addq.b	#2,routine(a0)
000107AE                            
000107AE                            locret_8BAC:
000107AE 4E75                       		rts	
000107B0                            ; ===========================================================================
000107B0                            
000107B0                            Obj1E_Action:				; XREF: Obj1E_Index
000107B0 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
000107B6 4EB9 0000 0000             		jsr	AnimateSprite
000107BC 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)	; is final frame (01) displayed?
000107C2 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000107C4 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000107C8 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000107CA 6000                       		bra.s	Obj1E_MarkAsGone
000107CC                            ; ===========================================================================
000107CC                            
000107CC                            Obj1E_SetBall:				; XREF: Obj1E_Action
000107CC 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000107D0                            
000107D0                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000107D0 4EF9 0000 0000             		jmp	MarkObjGone
000107D6                            ; ===========================================================================
000107D6                            
000107D6                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000107D6 117C 0001 0032             		move.b	#1,$32(a0)
000107DC 4EB9 0000 0000             		jsr	SingleObjLoad
000107E2 6600                       		bne.s	loc_8C1A
000107E4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000107E8 3368 0008 0008             		move.w	8(a0),8(a1)
000107EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107F4 337C FF00 0010             		move.w	#-$100,x_vel(a1)	; cannonball bounces to	the left
000107FA 337C 0000 0012             		move.w	#0,y_vel(a1)
00010800 70FC                       		moveq	#-4,d0
00010802 0828 0000 0022             		btst	#0,status(a0)	; is Ball Hog facing right?
00010808 6700                       		beq.s	loc_8C0A	; if not, branch
0001080A 4440                       		neg.w	d0
0001080C 4469 0010                  		neg.w	x_vel(a1)		; cannonball bounces to	the right
00010810                            
00010810                            loc_8C0A:
00010810 D169 0008                  		add.w	d0,8(a1)
00010814 0669 000C 000C             		addi.w	#$C,$C(a1)
0001081A 1368 0028 0028             		move.b	subtype(a0),subtype(a1)	; copy object type from	Ball Hog
00010820                            
00010820                            loc_8C1A:
00010820 60AE                       		bra.s	Obj1E_MarkAsGone
00010822                            ; ===========================================================================
00010822                            ; ---------------------------------------------------------------------------
00010822                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00010822                            ; ---------------------------------------------------------------------------
00010822                            
00010822                            Obj20:					; XREF: Obj_Index
00010822 7000                       		moveq	#0,d0
00010824 1028 0024                  		move.b	routine(a0),d0
00010828 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0001082C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00010830                            ; ===========================================================================
00010830 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00010832 0000                       		dc.w Obj20_Bounce-Obj20_Index
00010834                            ; ===========================================================================
00010834                            
00010834                            Obj20_Main:				; XREF: Obj20_Index
00010834 5428 0024                  		addq.b	#2,routine(a0)
00010838 117C 0007 0016             		move.b	#7,$16(a0)
0001083E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00010846 317C 2302 0002             		move.w	#$2302,2(a0)
0001084C 117C 0004 0001             		move.b	#4,1(a0)
00010852 317C 0180 0018             		move.w	#$180,priority(a0)
00010858 117C 0087 0020             		move.b	#$87,collision_flags(a0)
0001085E 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010864 7000                       		moveq	#0,d0
00010866 1028 0028                  		move.b	subtype(a0),d0	; move object type to d0
0001086A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0001086E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00010872 117C 0004 001A             		move.b	#4,mapping_frame(a0)
00010878                            
00010878                            Obj20_Bounce:				; XREF: Obj20_Index
00010878 4EB9 0000 0000             		jsr	ObjectFall
0001087E 4A68 0012                  		tst.w	y_vel(a0)
00010882 6B00                       		bmi.s	Obj20_ChkExplode
00010884 4EB9 0000 0000             		jsr	ObjHitFloor
0001088A 4A41                       		tst.w	d1
0001088C 6A00                       		bpl.s	Obj20_ChkExplode
0001088E D368 000C                  		add.w	d1,$C(a0)
00010892 317C FD00 0012             		move.w	#-$300,y_vel(a0)
00010898 4A03                       		tst.b	d3
0001089A 6700                       		beq.s	Obj20_ChkExplode
0001089C 6B00                       		bmi.s	loc_8CA4
0001089E 4A68 0010                  		tst.w	x_vel(a0)
000108A2 6A00                       		bpl.s	Obj20_ChkExplode
000108A4 4468 0010                  		neg.w	x_vel(a0)
000108A8 6000                       		bra.s	Obj20_ChkExplode
000108AA                            ; ===========================================================================
000108AA                            
000108AA                            loc_8CA4:				; XREF: Obj20_Bounce
000108AA 4A68 0010                  		tst.w	x_vel(a0)
000108AE 6B00                       		bmi.s	Obj20_ChkExplode
000108B0 4468 0010                  		neg.w	x_vel(a0)
000108B4                            
000108B4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000108B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000108B8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000108BA 10BC 0024                  		move.b	#$24,0(a0)
000108BE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000108C2 117C 0000 0024             		move.b	#0,routine(a0)	; reset	routine	counter
000108C8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000108CC                            ; ===========================================================================
000108CC                            
000108CC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000108CC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
000108D0 6A00                       		bpl.s	Obj20_Display
000108D2 117C 0005 001E             		move.b	#5,anim_frame_duration(a0)	; set frame duration to	5 frames
000108D8 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
000108DE                            
000108DE                            Obj20_Display:
000108DE 4EB9 0000 0000             		jsr	DisplaySprite
000108E4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000108E8 0640 00E0                  		addi.w	#$E0,d0
000108EC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000108F0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000108F4 4E75                       		rts	
000108F6                            ; ===========================================================================
000108F6                            ; ---------------------------------------------------------------------------
000108F6                            ; Object 24 - explosion	from a destroyed monitor
000108F6                            ; ---------------------------------------------------------------------------
000108F6                            
000108F6                            Obj24:					; XREF: Obj_Index
000108F6 7000                       		moveq	#0,d0
000108F8 1028 0024                  		move.b	routine(a0),d0
000108FC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00010900 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00010904                            ; ===========================================================================
00010904 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00010906 0000                       		dc.w Obj24_Animate-Obj24_Index
00010908                            ; ===========================================================================
00010908                            
00010908                            Obj24_Main:				; XREF: Obj24_Index
00010908 5428 0024                  		addq.b	#2,routine(a0)
0001090C 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00010914 317C 041C 0002             		move.w	#$41C,2(a0)
0001091A 117C 0004 0001             		move.b	#4,1(a0)
00010920 317C 0080 0018             		move.w	#$80,priority(a0)
00010926 117C 0000 0020             		move.b	#0,collision_flags(a0)
0001092C 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010932 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)
00010938 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001093E 303C 00A5                  		move.w	#$A5,d0
00010942 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play explosion sound
00010948                            
00010948                            Obj24_Animate:				; XREF: Obj24_Index
00010948 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
0001094C 6A00                       		bpl.s	Obj24_Display
0001094E 117C 0009 001E             		move.b	#9,anim_frame_duration(a0)	; set frame duration to	9 frames
00010954 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
00010958 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is the final frame (04) displayed?
0001095E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010962                            
00010962                            Obj24_Display:
00010962 6000 0000                  		bra.w	DisplaySprite
00010966                            ; ===========================================================================
00010966                            ; ---------------------------------------------------------------------------
00010966                            ; Object 27 - explosion	from a destroyed enemy
00010966                            ; ---------------------------------------------------------------------------
00010966                            
00010966                            Obj27:					; XREF: Obj_Index
00010966 7000                       		moveq	#0,d0
00010968 1028 0024                  		move.b	routine(a0),d0
0001096C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00010970 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00010974                            ; ===========================================================================
00010974 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00010976 0000                       		dc.w Obj27_Main-Obj27_Index
00010978 0000                       		dc.w Obj27_Animate-Obj27_Index
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0001097A 5428 0024                  		addq.b	#2,routine(a0)
0001097E 4EB9 0000 0000             		jsr	SingleObjLoad
00010984 6600                       		bne.s	Obj27_Main
00010986 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001098A 3368 0008 0008             		move.w	8(a0),8(a1)
00010990 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010996 3368 003E 003E             		move.w	parent(a0),parent(a1)
0001099C                            
0001099C                            Obj27_Main:				; XREF: Obj27_Index
0001099C 5428 0024                  		addq.b	#2,routine(a0)
000109A0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000109A8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000109AE 117C 0004 0001             		move.b	#4,1(a0)
000109B4 317C 0080 0018             		move.w	#$80,priority(a0)
000109BA 117C 0000 0020             		move.b	#0,collision_flags(a0)
000109C0 117C 000C 0023             		move.b	#$C,width_pixels(a0)
000109C6 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
000109CC 117C 0000 001A             		move.b	#0,mapping_frame(a0)
000109D2 303C 003D                  		move.w	#$3D,d0
000109D6 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000109DC                            
000109DC                            Obj27_Animate:				; XREF: Obj27_Index
000109DC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
000109E0 6A00                       		bpl.s	Obj27_Display
000109E2 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)	; set frame duration to	7 frames
000109E8 5228 001A                  		addq.b	#1,mapping_frame(a0)	; next frame
000109EC 0C28 0005 001A             		cmpi.b	#5,mapping_frame(a0)	; is the final frame (05) displayed?
000109F2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000109F6                            
000109F6                            Obj27_Display:
000109F6 6000 0000                  		bra.w	DisplaySprite
000109FA                            ; ===========================================================================
000109FA                            ; ---------------------------------------------------------------------------
000109FA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000109FA                            ; ---------------------------------------------------------------------------
000109FA                            
000109FA                            Obj3F:					; XREF: Obj_Index
000109FA 7000                       		moveq	#0,d0
000109FC 1028 0024                  		move.b	routine(a0),d0
00010A00 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00010A04 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00010A08                            ; ===========================================================================
00010A08 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00010A0A 0000                       		dc.w Obj3F_Animate-Obj3F_Index
00010A0C                            ; ===========================================================================
00010A0C                            
00010A0C                            Obj3F_Main:				; XREF: Obj3F_Index
00010A0C 5428 0024                  		addq.b	#2,routine(a0)
00010A10 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00010A18 317C 05A0 0002             		move.w	#$5A0,2(a0)
00010A1E 117C 0004 0001             		move.b	#4,1(a0)
00010A24 317C 0080 0018             		move.w	#$80,priority(a0)
00010A2A 117C 0000 0020             		move.b	#0,collision_flags(a0)
00010A30 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00010A36 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010A3C 117C 0000 001A             		move.b	#0,mapping_frame(a0)
00010A42 303C 00B4                  		move.w	#$B4,d0
00010A46 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00010A4C                            		
00010A4C                            Obj3F_Animate:				; XREF: Obj27_Index
00010A4C 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame	duration
00010A50 6AA4                       		bpl.s	Obj27_Display
00010A52 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00010A58 5228 001A                  		addq.b	#1,mapping_frame(a0)
00010A5C 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
00010A62 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00010A66                            
00010A66                            Obj3F_Display:
00010A66 6000 0000                  		bra.w	DisplaySprite
00010A6A                            ; ===========================================================================
00010A6A                            ; ===========================================================================
00010A6A                            Ani_obj1E:
00010A6A                            	include "_anim\obj1E.asm"
00010A6A                            ; ---------------------------------------------------------------------------
00010A6A                            ; Animation script - doors (SBZ)
00010A6A                            ; ---------------------------------------------------------------------------
00010A6A 0000                       		dc.w byte_8E4A-Ani_obj1E
00010A6C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00010A84 00                         		even
00010A84 00                         		even
00010A84                            
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            Map_obj1E:
00010A84                            	include "_maps\obj1E.asm"
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Sprite mappings - Ball Hog enemy (SBZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00010A88 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00010A8C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00010A90 02                         byte_8E6E:	dc.b 2
00010A91 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010A96 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00010A9B 02                         byte_8E79:	dc.b 2
00010A9C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00010AA1 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00010AA6 02                         byte_8E84:	dc.b 2
00010AA7 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00010AAC 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00010AB1 02                         byte_8E8F:	dc.b 2
00010AB2 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00010AB7 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00010ABC 01                         byte_8E9A:	dc.b 1
00010ABD F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00010AC2 01                         byte_8EA0:	dc.b 1
00010AC3 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00010AC8                            		even
00010AC8                            		even
00010AC8                            
00010AC8                            ; ---------------------------------------------------------------------------
00010AC8                            ; Sprite mappings - explosion
00010AC8                            ; ---------------------------------------------------------------------------
00010AC8                            Map_obj24:
00010AC8                            	include "_maps\obj24s3.asm"
00010AC8                            ; --------------------------------------------------------------------------------
00010AC8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010AC8                            ; --------------------------------------------------------------------------------
00010AC8                            
00010AC8                            SME_nzr3c:	
00010AC8 0000 0000                  		dc.w SME_nzr3c_A-SME_nzr3c, SME_nzr3c_10-SME_nzr3c	
00010ACC 0000 0000                  		dc.w SME_nzr3c_16-SME_nzr3c, SME_nzr3c_1C-SME_nzr3c	
00010AD0 0000                       		dc.w SME_nzr3c_22-SME_nzr3c	
00010AD2 01                         SME_nzr3c_A:	dc.b 1	
00010AD3 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010AD8 01                         SME_nzr3c_10:	dc.b 1	
00010AD9 F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010ADE 01                         SME_nzr3c_16:	dc.b 1	
00010ADF F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010AE4 01                         SME_nzr3c_1C:	dc.b 1	
00010AE5 F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010AEA 01                         SME_nzr3c_22:	dc.b 1	
00010AEB F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010AF0                            		even
00010AF0                            		even
00010AF0                            
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            ; Sprite mappings - explosion
00010AF0                            ; ---------------------------------------------------------------------------
00010AF0                            Map_obj27:include "_maps\obj27s3.asm"
00010AF0                            ; --------------------------------------------------------------------------------
00010AF0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010AF0                            ; --------------------------------------------------------------------------------
00010AF0                            
00010AF0                            SME_stcCy:	
00010AF0 0000 0000                  		dc.w SME_stcCy_A-SME_stcCy, SME_stcCy_10-SME_stcCy	
00010AF4 0000 0000                  		dc.w SME_stcCy_16-SME_stcCy, SME_stcCy_1C-SME_stcCy	
00010AF8 0000                       		dc.w SME_stcCy_22-SME_stcCy	
00010AFA 01                         SME_stcCy_A:	dc.b 1	
00010AFB F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010B00 01                         SME_stcCy_10:	dc.b 1	
00010B01 F00F 2004 F0               		dc.b $F0, $F, $20, 4, $F0	
00010B06 01                         SME_stcCy_16:	dc.b 1	
00010B07 F00F 2014 F0               		dc.b $F0, $F, $20, $14, $F0	
00010B0C 01                         SME_stcCy_1C:	dc.b 1	
00010B0D F00F 2024 F0               		dc.b $F0, $F, $20, $24, $F0	
00010B12 01                         SME_stcCy_22:	dc.b 1	
00010B13 F00F 2034 F0               		dc.b $F0, $F, $20, $34, $F0	
00010B18                            		even
00010B18                            		even
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            ; Sprite mappings - explosion from when	a boss is destroyed
00010B18                            ; ---------------------------------------------------------------------------
00010B18                            Map_obj3F:include "_maps\obj3Fs3.asm"
00010B18                            ; --------------------------------------------------------------------------------
00010B18                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010B18                            ; --------------------------------------------------------------------------------
00010B18                            
00010B18                            SME_georC:	
00010B18 0000 0000                  		dc.w SME_georC_C-SME_georC, SME_georC_12-SME_georC	
00010B1C 0000 0000                  		dc.w SME_georC_18-SME_georC, SME_georC_1E-SME_georC	
00010B20 0000 0000                  		dc.w SME_georC_24-SME_georC, SME_georC_2A-SME_georC	
00010B24 01                         SME_georC_C:	dc.b 1	
00010B25 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00010B2A 01                         SME_georC_12:	dc.b 1	
00010B2B F40A 0004 F4               		dc.b $F4, $A, 0, 4, $F4	
00010B30 01                         SME_georC_18:	dc.b 1	
00010B31 F40A 000D F4               		dc.b $F4, $A, 0, $D, $F4	
00010B36 01                         SME_georC_1E:	dc.b 1	
00010B37 F40A 0016 F4               		dc.b $F4, $A, 0, $16, $F4	
00010B3C 01                         SME_georC_24:	dc.b 1	
00010B3D F30A 001F F4               		dc.b $F3, $A, 0, $1F, $F4	
00010B42 01                         SME_georC_2A:	dc.b 1	
00010B43 F609 0028 F4               		dc.b $F6, 9, 0, $28, $F4	
00010B48                            		even
00010B48                            		even
00010B48                            ; ===========================================================================
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            ; Object 28 - animals
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            
00010B48                            Obj28:					; XREF: Obj_Index
00010B48 7000                       		moveq	#0,d0
00010B4A 1028 0024                  		move.b	$24(a0),d0
00010B4E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00010B52 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00010B56                            ; ===========================================================================
00010B56 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00010B5A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010B5E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00010B62 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00010B66 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00010B6A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00010B6E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00010B72 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010B76 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00010B7A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00010B7E 0000                       		dc.w loc_92D6-Obj28_Index
00010B80                            
00010B80 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00010B8C                            
00010B8C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00010B90 0000 0000                  		dc.l Map_obj28
00010B94 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00010B98 0000 0000                  		dc.l Map_obj28a		; mappings address
00010B9C FE80 FD00                  		dc.w $FE80, $FD00
00010BA0 0000 0000                  		dc.l Map_obj28
00010BA4 FEC0 FE80                  		dc.w $FEC0, $FE80
00010BA8 0000 0000                  		dc.l Map_obj28a
00010BAC FE40 FD00                  		dc.w $FE40, $FD00
00010BB0 0000 0000                  		dc.l Map_obj28b
00010BB4 FD00 FC00                  		dc.w $FD00, $FC00
00010BB8 0000 0000                  		dc.l Map_obj28a
00010BBC FD80 FC80                  		dc.w $FD80, $FC80
00010BC0 0000 0000                  		dc.l Map_obj28b
00010BC4                            
00010BC4 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00010BD4 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00010BE4 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00010BF0                            
00010BF0 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00010C04 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00010C18 0000 0000                  		dc.l Map_obj28b
00010C1C                            
00010C1C 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00010C2E 0565 05B3                  		dc.w $565, $5B3
00010C32                            ; ===========================================================================
00010C32                            
00010C32                            Obj28_Ending:				; XREF: Obj28_Index
00010C32 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00010C36 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00010C3A 7000                       		moveq	#0,d0
00010C3C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00010C40 D040                       		add.w	d0,d0		; multiply d0 by 2
00010C42 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00010C46 0440 0014                  		subi.w	#$14,d0
00010C4A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00010C50 D040                       		add.w	d0,d0
00010C52 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00010C58 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00010C5C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00010C62 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00010C68 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00010C6E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00010C74 117C 000C 0016             		move.b	#$C,$16(a0)
00010C7A 117C 0004 0001             		move.b	#4,1(a0)
00010C80 08E8 0000 0001             		bset	#0,1(a0)
00010C86 317C 0300 0018             		move.w	#$300,priority(a0)
00010C8C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010C92 117C 0007 001E             		move.b	#7,$1E(a0)
00010C98 6000 0000                  		bra.w	DisplaySprite
00010C9C                            ; ===========================================================================
00010C9C                            
00010C9C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00010C9C 5428 0024                  		addq.b	#2,$24(a0)
00010CA0 4EBA 80DC                  		jsr	RandomNumber
00010CA4 0240 0001                  		andi.w	#1,d0
00010CA8 7200                       		moveq	#0,d1
00010CAA 1238 FE10                  		move.b	($FFFFFE10).w,d1
00010CAE D241                       		add.w	d1,d1
00010CB0 D240                       		add.w	d0,d1
00010CB2 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00010CB6 1031 1000                  		move.b	(a1,d1.w),d0
00010CBA 1140 0030                  		move.b	d0,$30(a0)
00010CBE E748                       		lsl.w	#3,d0
00010CC0 43FA FECA                  		lea	Obj28_Variables(pc),a1
00010CC4 D2C0                       		adda.w	d0,a1
00010CC6 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00010CCA 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00010CCE 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00010CD2 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00010CD8 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00010CDE 6700                       		beq.s	loc_90C0	; if yes, branch
00010CE0 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00010CE6                            
00010CE6                            loc_90C0:
00010CE6 117C 000C 0016             		move.b	#$C,$16(a0)
00010CEC 117C 0004 0001             		move.b	#4,1(a0)
00010CF2 08E8 0000 0001             		bset	#0,1(a0)
00010CF8 317C 0300 0018             		move.w	#$300,priority(a0)
00010CFE 117C 0008 0023             		move.b	#8,width_pixels(a0)
00010D04 117C 0007 001E             		move.b	#7,$1E(a0)
00010D0A 117C 0002 001A             		move.b	#2,$1A(a0)
00010D10 317C FC00 0012             		move.w	#-$400,$12(a0)
00010D16 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010D1A 6600                       		bne.s	loc_911C
00010D1C 6100 0000                  		bsr.w	SingleObjLoad
00010D20 6600                       		bne.s	Obj28_Display
00010D22 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010D26 3368 0008 0008             		move.w	8(a0),8(a1)
00010D2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010D32 3028 003E                  		move.w	$3E(a0),d0
00010D36 E248                       		lsr.w	#1,d0
00010D38 1340 001A                  		move.b	d0,$1A(a1)
00010D3C                            
00010D3C                            Obj28_Display:
00010D3C 6000 0000                  		bra.w	DisplaySprite
00010D40                            ; ===========================================================================
00010D40                            
00010D40                            loc_911C:
00010D40 117C 0012 0024             		move.b	#$12,$24(a0)
00010D46 4268 0010                  		clr.w	$10(a0)
00010D4A 6000 0000                  		bra.w	DisplaySprite
00010D4E                            ; ===========================================================================
00010D4E                            
00010D4E                            loc_912A:				; XREF: Obj28_Index
00010D4E 4A28 0001                  		tst.b	1(a0)
00010D52 6A00 0000                  		bpl.w	DeleteObject
00010D56 6100 0000                  		bsr.w	ObjectFall
00010D5A 4A68 0012                  		tst.w	$12(a0)
00010D5E 6B00                       		bmi.s	loc_9180
00010D60 4EB9 0000 0000             		jsr	ObjHitFloor
00010D66 4A41                       		tst.w	d1
00010D68 6A00                       		bpl.s	loc_9180
00010D6A D368 000C                  		add.w	d1,$C(a0)
00010D6E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010D74 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010D7A 117C 0001 001A             		move.b	#1,$1A(a0)
00010D80 1028 0030                  		move.b	$30(a0),d0
00010D84 D000                       		add.b	d0,d0
00010D86 5800                       		addq.b	#4,d0
00010D88 1140 0024                  		move.b	d0,$24(a0)
00010D8C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00010D90 6700                       		beq.s	loc_9180
00010D92 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00010D98 6700                       		beq.s	loc_9180
00010D9A 4468 0010                  		neg.w	$10(a0)
00010D9E 0868 0000 0001             		bchg	#0,1(a0)
00010DA4                            
00010DA4                            loc_9180:
00010DA4 6000 0000                  		bra.w	DisplaySprite
00010DA8                            ; ===========================================================================
00010DA8                            
00010DA8                            loc_9184:				; XREF: Obj28_Index
00010DA8 6100 0000                  		bsr.w	ObjectFall
00010DAC 117C 0001 001A             		move.b	#1,$1A(a0)
00010DB2 4A68 0012                  		tst.w	$12(a0)
00010DB6 6B00                       		bmi.s	loc_91AE
00010DB8 117C 0000 001A             		move.b	#0,$1A(a0)
00010DBE 4EB9 0000 0000             		jsr	ObjHitFloor
00010DC4 4A41                       		tst.w	d1
00010DC6 6A00                       		bpl.s	loc_91AE
00010DC8 D368 000C                  		add.w	d1,$C(a0)
00010DCC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010DD2                            
00010DD2                            loc_91AE:
00010DD2 4A28 0028                  		tst.b	$28(a0)
00010DD6 6600                       		bne.s	loc_9224
00010DD8 4A28 0001                  		tst.b	1(a0)
00010DDC 6A00 0000                  		bpl.w	DeleteObject
00010DE0 6000 0000                  		bra.w	DisplaySprite
00010DE4                            ; ===========================================================================
00010DE4                            
00010DE4                            loc_91C0:				; XREF: Obj28_Index
00010DE4 6100 0000                  		bsr.w	SpeedToPos
00010DE8 0668 0018 0012             		addi.w	#$18,$12(a0)
00010DEE 4A68 0012                  		tst.w	$12(a0)
00010DF2 6B00                       		bmi.s	loc_91FC
00010DF4 4EB9 0000 0000             		jsr	ObjHitFloor
00010DFA 4A41                       		tst.w	d1
00010DFC 6A00                       		bpl.s	loc_91FC
00010DFE D368 000C                  		add.w	d1,$C(a0)
00010E02 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010E08 4A28 0028                  		tst.b	$28(a0)
00010E0C 6700                       		beq.s	loc_91FC
00010E0E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00010E14 6700                       		beq.s	loc_91FC
00010E16 4468 0010                  		neg.w	$10(a0)
00010E1A 0868 0000 0001             		bchg	#0,1(a0)
00010E20                            
00010E20                            loc_91FC:
00010E20 5328 001E                  		subq.b	#1,$1E(a0)
00010E24 6A00                       		bpl.s	loc_9212
00010E26 117C 0001 001E             		move.b	#1,$1E(a0)
00010E2C 5228 001A                  		addq.b	#1,$1A(a0)
00010E30 0228 0001 001A             		andi.b	#1,$1A(a0)
00010E36                            
00010E36                            loc_9212:
00010E36 4A28 0028                  		tst.b	$28(a0)
00010E3A 6600                       		bne.s	loc_9224
00010E3C 4A28 0001                  		tst.b	1(a0)
00010E40 6A00 0000                  		bpl.w	DeleteObject
00010E44 6000 0000                  		bra.w	DisplaySprite
00010E48                            ; ===========================================================================
00010E48                            
00010E48                            loc_9224:				; XREF: Obj28_Index
00010E48 3028 0008                  		move.w	8(a0),d0
00010E4C 9078 D008                  		sub.w	($FFFFD008).w,d0
00010E50 6500                       		bcs.s	loc_923C
00010E52 0440 0180                  		subi.w	#$180,d0
00010E56 6A00                       		bpl.s	loc_923C
00010E58 4A28 0001                  		tst.b	1(a0)
00010E5C 6A00 0000                  		bpl.w	DeleteObject
00010E60                            
00010E60                            loc_923C:
00010E60 6000 0000                  		bra.w	DisplaySprite
00010E64                            ; ===========================================================================
00010E64                            
00010E64                            loc_9240:				; XREF: Obj28_Index
00010E64 4A28 0001                  		tst.b	1(a0)
00010E68 6A00 0000                  		bpl.w	DeleteObject
00010E6C 5368 0036                  		subq.w	#1,$36(a0)
00010E70 6600 0000                  		bne.w	loc_925C
00010E74 117C 0002 0024             		move.b	#2,$24(a0)
00010E7A 317C 0180 0018             		move.w	#$180,priority(a0)
00010E80                            
00010E80                            loc_925C:
00010E80 6000 0000                  		bra.w	DisplaySprite
00010E84                            ; ===========================================================================
00010E84                            
00010E84                            loc_9260:				; XREF: Obj28_Index
00010E84 6100 0000                  		bsr.w	sub_9404
00010E88 6400                       		bcc.s	loc_927C
00010E8A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010E90 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010E96 117C 000E 0024             		move.b	#$E,$24(a0)
00010E9C 6000 FF46                  		bra.w	loc_91C0
00010EA0                            ; ===========================================================================
00010EA0                            
00010EA0                            loc_927C:
00010EA0 6000 FFA6                  		bra.w	loc_9224
00010EA4                            ; ===========================================================================
00010EA4                            
00010EA4                            loc_9280:				; XREF: Obj28_Index
00010EA4 6100 0000                  		bsr.w	sub_9404
00010EA8 6A00                       		bpl.s	loc_92B6
00010EAA 4268 0010                  		clr.w	$10(a0)
00010EAE 4268 0032                  		clr.w	$32(a0)
00010EB2 6100 0000                  		bsr.w	SpeedToPos
00010EB6 0668 0018 0012             		addi.w	#$18,$12(a0)
00010EBC 6100 0000                  		bsr.w	loc_93C4
00010EC0 6100 0000                  		bsr.w	loc_93EC
00010EC4 5328 001E                  		subq.b	#1,$1E(a0)
00010EC8 6A00                       		bpl.s	loc_92B6
00010ECA 117C 0001 001E             		move.b	#1,$1E(a0)
00010ED0 5228 001A                  		addq.b	#1,$1A(a0)
00010ED4 0228 0001 001A             		andi.b	#1,$1A(a0)
00010EDA                            
00010EDA                            loc_92B6:
00010EDA 6000 FF6C                  		bra.w	loc_9224
00010EDE                            ; ===========================================================================
00010EDE                            
00010EDE                            loc_92BA:				; XREF: Obj28_Index
00010EDE 6100 0000                  		bsr.w	sub_9404
00010EE2 6A00                       		bpl.s	loc_9310
00010EE4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00010EEA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010EF0 117C 0004 0024             		move.b	#4,$24(a0)
00010EF6 6000 FEB0                  		bra.w	loc_9184
00010EFA                            ; ===========================================================================
00010EFA                            
00010EFA                            loc_92D6:				; XREF: Obj28_Index
00010EFA 6100 0000                  		bsr.w	ObjectFall
00010EFE 117C 0001 001A             		move.b	#1,$1A(a0)
00010F04 4A68 0012                  		tst.w	$12(a0)
00010F08 6B00                       		bmi.s	loc_9310
00010F0A 117C 0000 001A             		move.b	#0,$1A(a0)
00010F10 4EB9 0000 0000             		jsr	ObjHitFloor
00010F16 4A41                       		tst.w	d1
00010F18 6A00                       		bpl.s	loc_9310
00010F1A 4628 0029                  		not.b	$29(a0)
00010F1E 6600                       		bne.s	loc_9306
00010F20 4468 0010                  		neg.w	$10(a0)
00010F24 0868 0000 0001             		bchg	#0,1(a0)
00010F2A                            
00010F2A                            loc_9306:
00010F2A D368 000C                  		add.w	d1,$C(a0)
00010F2E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F34                            
00010F34                            loc_9310:
00010F34 6000 FF12                  		bra.w	loc_9224
00010F38                            ; ===========================================================================
00010F38                            
00010F38                            loc_9314:				; XREF: Obj28_Index
00010F38 6100 0000                  		bsr.w	sub_9404
00010F3C 6A00                       		bpl.s	loc_932E
00010F3E 4268 0010                  		clr.w	$10(a0)
00010F42 4268 0032                  		clr.w	$32(a0)
00010F46 6100 0000                  		bsr.w	ObjectFall
00010F4A 6100 0000                  		bsr.w	loc_93C4
00010F4E 6100 0000                  		bsr.w	loc_93EC
00010F52                            
00010F52                            loc_932E:
00010F52 6000 FEF4                  		bra.w	loc_9224
00010F56                            ; ===========================================================================
00010F56                            
00010F56                            loc_9332:				; XREF: Obj28_Index
00010F56 6100 0000                  		bsr.w	sub_9404
00010F5A 6A00                       		bpl.s	loc_936C
00010F5C 6100 0000                  		bsr.w	ObjectFall
00010F60 117C 0001 001A             		move.b	#1,$1A(a0)
00010F66 4A68 0012                  		tst.w	$12(a0)
00010F6A 6B00                       		bmi.s	loc_936C
00010F6C 117C 0000 001A             		move.b	#0,$1A(a0)
00010F72 4EB9 0000 0000             		jsr	ObjHitFloor
00010F78 4A41                       		tst.w	d1
00010F7A 6A00                       		bpl.s	loc_936C
00010F7C 4468 0010                  		neg.w	$10(a0)
00010F80 0868 0000 0001             		bchg	#0,1(a0)
00010F86 D368 000C                  		add.w	d1,$C(a0)
00010F8A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010F90                            
00010F90                            loc_936C:
00010F90 6000 FEB6                  		bra.w	loc_9224
00010F94                            ; ===========================================================================
00010F94                            
00010F94                            loc_9370:				; XREF: Obj28_Index
00010F94 6100 0000                  		bsr.w	sub_9404
00010F98 6A00                       		bpl.s	loc_93C0
00010F9A 6100 0000                  		bsr.w	SpeedToPos
00010F9E 0668 0018 0012             		addi.w	#$18,$12(a0)
00010FA4 4A68 0012                  		tst.w	$12(a0)
00010FA8 6B00                       		bmi.s	loc_93AA
00010FAA 4EB9 0000 0000             		jsr	ObjHitFloor
00010FB0 4A41                       		tst.w	d1
00010FB2 6A00                       		bpl.s	loc_93AA
00010FB4 4628 0029                  		not.b	$29(a0)
00010FB8 6600                       		bne.s	loc_93A0
00010FBA 4468 0010                  		neg.w	$10(a0)
00010FBE 0868 0000 0001             		bchg	#0,1(a0)
00010FC4                            
00010FC4                            loc_93A0:
00010FC4 D368 000C                  		add.w	d1,$C(a0)
00010FC8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00010FCE                            
00010FCE                            loc_93AA:
00010FCE 5328 001E                  		subq.b	#1,$1E(a0)
00010FD2 6A00                       		bpl.s	loc_93C0
00010FD4 117C 0001 001E             		move.b	#1,$1E(a0)
00010FDA 5228 001A                  		addq.b	#1,$1A(a0)
00010FDE 0228 0001 001A             		andi.b	#1,$1A(a0)
00010FE4                            
00010FE4                            loc_93C0:
00010FE4 6000 FE62                  		bra.w	loc_9224
00010FE8                            ; ===========================================================================
00010FE8                            
00010FE8                            loc_93C4:
00010FE8 117C 0001 001A             		move.b	#1,$1A(a0)
00010FEE 4A68 0012                  		tst.w	$12(a0)
00010FF2 6B00                       		bmi.s	locret_93EA
00010FF4 117C 0000 001A             		move.b	#0,$1A(a0)
00010FFA 4EB9 0000 0000             		jsr	ObjHitFloor
00011000 4A41                       		tst.w	d1
00011002 6A00                       		bpl.s	locret_93EA
00011004 D368 000C                  		add.w	d1,$C(a0)
00011008 3168 0034 0012             		move.w	$34(a0),$12(a0)
0001100E                            
0001100E                            locret_93EA:
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            loc_93EC:
00011010 08E8 0000 0001             		bset	#0,1(a0)
00011016 3028 0008                  		move.w	8(a0),d0
0001101A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001101E 6400                       		bcc.s	locret_9402
00011020 08A8 0000 0001             		bclr	#0,1(a0)
00011026                            
00011026                            locret_9402:
00011026 4E75                       		rts	
00011028                            
00011028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011028                            
00011028                            
00011028                            sub_9404:
00011028 3038 D008                  		move.w	($FFFFD008).w,d0
0001102C 9068 0008                  		sub.w	8(a0),d0
00011030 0440 00B8                  		subi.w	#$B8,d0
00011034 4E75                       		rts	
00011036                            ; End of function sub_9404
00011036                            
00011036                            ; ===========================================================================
00011036                            ; ---------------------------------------------------------------------------
00011036                            ; Object 29 - points that appear when you destroy something
00011036                            ; ---------------------------------------------------------------------------
00011036                            
00011036                            Obj29:					; XREF: Obj_Index
00011036 223C 0000 0000             		move.l	#Unc_Points,d1			        ; Call for Regular Shield Art
0001103C 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
00011040 4A38 FE2D                  		tst.b	($FFFFFE2D).w
00011044 6700 0000                  		beq.w	nextloc
00011048 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
0001104C                            								; In this case, VRAM = $541*20
0001104C                            nextloc:
0001104C 363C 0090                  		move.w	#$90,d3
00011050 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
00011056 7000                       		moveq	#0,d0
00011058 1028 0024                  		move.b	$24(a0),d0
0001105C 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00011060 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00011064 6000 0000                  		bra.w	DisplaySprite
00011068                            ; ===========================================================================
00011068 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0001106A 0000                       		dc.w Obj29_Slower-Obj29_Index
0001106C                            ; ===========================================================================
0001106C                            
0001106C                            Obj29_Main:				; XREF: Obj29_Index
0001106C 5428 0024                  		addq.b	#2,$24(a0)
00011070 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00011078 317C 255E 0002             		move.w	#$255E,2(a0)
0001107E 4A38 FE2D                  		tst.b	($FFFFFE2D).w
00011082 6700 0000                  		beq.w	nextloc2
00011086 317C 2541 0002             		move.w	#$2541,2(a0)
0001108C                            nextloc2:
0001108C 117C 0004 0001             		move.b	#4,1(a0)
00011092 317C 0080 0018             		move.w	#$80,priority(a0)
00011098 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001109E 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000110A4                            
000110A4                            Obj29_Slower:				; XREF: Obj29_Index
000110A4 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000110A8 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000110AC 6100 0000                  		bsr.w	SpeedToPos
000110B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000110B6 4E75                       		rts	
000110B8                            ; ===========================================================================
000110B8                            ; ---------------------------------------------------------------------------
000110B8                            ; Sprite mappings - animals
000110B8                            ; ---------------------------------------------------------------------------
000110B8                            Map_obj28:
000110B8                            	include '_maps\obj28.asm'
000110B8                            ; ---------------------------------------------------------------------------
000110B8                            ; Sprite mappings - animals
000110B8                            ; ---------------------------------------------------------------------------
000110B8 0000                       		dc.w byte_9472-Map_obj28
000110BA 0000                       		dc.w byte_9478-Map_obj28
000110BC 0000                       		dc.w byte_946C-Map_obj28
000110BE 01                         byte_946C:	dc.b 1
000110BF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000110C4 01                         byte_9472:	dc.b 1
000110C5 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
000110CA 01                         byte_9478:	dc.b 1
000110CB F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
000110D0                            		even
000110D0                            		even
000110D0                            
000110D0                            Map_obj28a:
000110D0                            	include '_maps\obj28a.asm'
000110D0                            ; ---------------------------------------------------------------------------
000110D0                            ; Sprite mappings - animals
000110D0                            ; ---------------------------------------------------------------------------
000110D0 0000                       		dc.w byte_948A-Map_obj28a
000110D2 0000                       		dc.w byte_9490-Map_obj28a
000110D4 0000                       		dc.w byte_9484-Map_obj28a
000110D6 01                         byte_9484:	dc.b 1
000110D7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000110DC 01                         byte_948A:	dc.b 1
000110DD FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000110E2 01                         byte_9490:	dc.b 1
000110E3 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000110E8                            		even
000110E8                            		even
000110E8                            
000110E8                            Map_obj28b:
000110E8                            	include '_maps\obj28b.asm'
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Sprite mappings - animals
000110E8                            ; ---------------------------------------------------------------------------
000110E8 0000                       		dc.w byte_94A2-Map_obj28b
000110EA 0000                       		dc.w byte_94A8-Map_obj28b
000110EC 0000                       		dc.w byte_949C-Map_obj28b
000110EE 01                         byte_949C:	dc.b 1
000110EF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000110F4 01                         byte_94A2:	dc.b 1
000110F5 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000110FA 01                         byte_94A8:	dc.b 1
000110FB FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00011100                            		even
00011100                            		even
00011100                            
00011100                            ; ---------------------------------------------------------------------------
00011100                            ; Sprite mappings - points that	appear when you	destroy	something
00011100                            ; ---------------------------------------------------------------------------
00011100                            Map_obj29:
00011100                            	include '_maps\obj29.asm'
00011100                            ; ---------------------------------------------------------------------------
00011100                            ; Sprite mappings - points that	appear when you	destroy	something
00011100                            ; ---------------------------------------------------------------------------
00011100 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00011104 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00011108 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0001110C 0000                       		dc.w byte_94E5-Map_obj29
0001110E 01                         byte_94BC:	dc.b 1
0001110F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00011114 01                         byte_94C2:	dc.b 1
00011115 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0001111A 01                         byte_94C8:	dc.b 1
0001111B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00011120 01                         byte_94CE:	dc.b 1
00011121 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00011126 01                         byte_94D4:	dc.b 1
00011127 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0001112C 02                         byte_94DA:	dc.b 2
0001112D FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00011132 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00011137 02                         byte_94E5:	dc.b 2
00011138 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0001113D FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00011142                            		even
00011142                            		even
00011142                            
00011142                            ; ===========================================================================
00011142                            ; ---------------------------------------------------------------------------
00011142                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00011142                            ; ---------------------------------------------------------------------------
00011142                            
00011142                            Obj1F:					; XREF: Obj_Index
00011142 7000                       		moveq	#0,d0
00011144 1028 0024                  		move.b	routine(a0),d0
00011148 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0001114C 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00011150                            ; ===========================================================================
00011150 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00011152 0000                       		dc.w Obj1F_Action-Obj1F_Index
00011154 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00011156 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00011158 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj1F_Main:				; XREF: Obj1F_Index
0001115A 117C 0010 0016             		move.b	#$10,$16(a0)
00011160 117C 0008 0017             		move.b	#8,$17(a0)
00011166 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0001116E 317C 0400 0002             		move.w	#$400,2(a0)
00011174 117C 0004 0001             		move.b	#4,1(a0)
0001117A 317C 0180 0018             		move.w	#$180,priority(a0)
00011180 117C 0006 0020             		move.b	#6,collision_flags(a0)
00011186 117C 0015 0023             		move.b	#$15,width_pixels(a0)
0001118C 4EB9 0000 0000             		jsr	ObjectFall
00011192 4EB9 0000 0000             		jsr	ObjHitFloor
00011198 4A41                       		tst.w	d1
0001119A 6A00                       		bpl.s	locret_955A
0001119C D368 000C                  		add.w	d1,$C(a0)
000111A0 1143 0026                  		move.b	d3,$26(a0)
000111A4 317C 0000 0012             		move.w	#0,y_vel(a0)
000111AA 5428 0024                  		addq.b	#2,routine(a0)
000111AE                            
000111AE                            locret_955A:
000111AE 4E75                       		rts	
000111B0                            ; ===========================================================================
000111B0                            
000111B0                            Obj1F_Action:				; XREF: Obj1F_Index
000111B0 7000                       		moveq	#0,d0
000111B2 1028 0025                  		move.b	routine_secondary(a0),d0
000111B6 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000111BA 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000111BE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000111C4 4EB9 0000 0000             		jsr	AnimateSprite
000111CA 6000 0000                  		bra.w	MarkObjGone
000111CE                            ; ===========================================================================
000111CE 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
000111D0 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
000111D2                            ; ===========================================================================
000111D2                            
000111D2                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
000111D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000111D6 6A00                       		bpl.s	locret_95B6
000111D8 4A28 0001                  		tst.b	1(a0)
000111DC 6A00                       		bpl.s	Obj1F_Move
000111DE 0868 0001 0032             		bchg	#1,$32(a0)
000111E4 6600                       		bne.s	Obj1F_MakeFire
000111E6                            
000111E6                            Obj1F_Move:
000111E6 5428 0025                  		addq.b	#2,routine_secondary(a0)
000111EA 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
000111F0 317C 0080 0010             		move.w	#$80,x_vel(a0)	; move Crabmeat	to the right
000111F6 4EB9 0000 0000             		jsr	Obj1F_SetAni
000111FC 5600                       		addq.b	#3,d0
000111FE 1140 001C                  		move.b	d0,anim(a0)
00011202 0868 0000 0022             		bchg	#0,status(a0)
00011208 6600                       		bne.s	locret_95B6
0001120A 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001120E                            
0001120E                            locret_95B6:
0001120E 4E75                       		rts	
00011210                            ; ===========================================================================
00011210                            
00011210                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00011210 317C 003B 0030             		move.w	#$3B,$30(a0)
00011216 117C 0006 001C             		move.b	#6,anim(a0)	; use firing animation
0001121C 4EB9 0000 0000             		jsr	SingleObjLoad
00011222 6600                       		bne.s	Obj1F_MakeFire2
00011224 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00011228 137C 0006 0024             		move.b	#6,routine(a1)
0001122E 3368 0008 0008             		move.w	8(a0),8(a1)
00011234 0469 0010 0008             		subi.w	#$10,8(a1)
0001123A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011240 337C FF00 0010             		move.w	#-$100,x_vel(a1)
00011246                            
00011246                            Obj1F_MakeFire2:
00011246 4EB9 0000 0000             		jsr	SingleObjLoad
0001124C 6600                       		bne.s	locret_9618
0001124E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00011252 137C 0006 0024             		move.b	#6,routine(a1)
00011258 3368 0008 0008             		move.w	8(a0),8(a1)
0001125E 0669 0010 0008             		addi.w	#$10,8(a1)
00011264 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001126A 337C 0100 0010             		move.w	#$100,x_vel(a1)
00011270                            
00011270                            locret_9618:
00011270 4E75                       		rts	
00011272                            ; ===========================================================================
00011272                            
00011272                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00011272 5368 0030                  		subq.w	#1,$30(a0)
00011276 6B00                       		bmi.s	loc_966E
00011278 4EB9 0000 0000             		jsr	SpeedToPos
0001127E 0868 0000 0032             		bchg	#0,$32(a0)
00011284 6600                       		bne.s	loc_9654
00011286 3628 0008                  		move.w	8(a0),d3
0001128A 0643 0010                  		addi.w	#$10,d3
0001128E 0828 0000 0022             		btst	#0,status(a0)
00011294 6700                       		beq.s	loc_9640
00011296 0443 0020                  		subi.w	#$20,d3
0001129A                            
0001129A                            loc_9640:
0001129A 4EB9 0000 0000             		jsr	ObjHitFloor2
000112A0 0C41 FFF8                  		cmpi.w	#-8,d1
000112A4 6D00                       		blt.s	loc_966E
000112A6 0C41 000C                  		cmpi.w	#$C,d1
000112AA 6C00                       		bge.s	loc_966E
000112AC 4E75                       		rts	
000112AE                            ; ===========================================================================
000112AE                            
000112AE                            loc_9654:				; XREF: Obj1F_WalkOnFloor
000112AE 4EB9 0000 0000             		jsr	ObjHitFloor
000112B4 D368 000C                  		add.w	d1,$C(a0)
000112B8 1143 0026                  		move.b	d3,$26(a0)
000112BC 4EB9 0000 0000             		jsr	Obj1F_SetAni
000112C2 5600                       		addq.b	#3,d0
000112C4 1140 001C                  		move.b	d0,anim(a0)
000112C8 4E75                       		rts	
000112CA                            ; ===========================================================================
000112CA                            
000112CA                            loc_966E:				; XREF: Obj1F_WalkOnFloor
000112CA 5528 0025                  		subq.b	#2,routine_secondary(a0)
000112CE 317C 003B 0030             		move.w	#59,$30(a0)
000112D4 317C 0000 0010             		move.w	#0,x_vel(a0)
000112DA 4EB9 0000 0000             		jsr	Obj1F_SetAni
000112E0 1140 001C                  		move.b	d0,anim(a0)
000112E4 4E75                       		rts	
000112E6                            ; ---------------------------------------------------------------------------
000112E6                            ; Subroutine to	set the	correct	animation for a	Crabmeat
000112E6                            ; ---------------------------------------------------------------------------
000112E6                            
000112E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112E6                            
000112E6                            
000112E6                            Obj1F_SetAni:				; XREF: loc_966E
000112E6 7000                       		moveq	#0,d0
000112E8 1628 0026                  		move.b	$26(a0),d3
000112EC 6B00                       		bmi.s	loc_96A4
000112EE 0C03 0006                  		cmpi.b	#6,d3
000112F2 6500                       		bcs.s	locret_96A2
000112F4 7001                       		moveq	#1,d0
000112F6 0828 0000 0022             		btst	#0,status(a0)
000112FC 6600                       		bne.s	locret_96A2
000112FE 7002                       		moveq	#2,d0
00011300                            
00011300                            locret_96A2:
00011300 4E75                       		rts	
00011302                            ; ===========================================================================
00011302                            
00011302                            loc_96A4:				; XREF: Obj1F_SetAni
00011302 0C03 00FA                  		cmpi.b	#-6,d3
00011306 6200                       		bhi.s	locret_96B6
00011308 7002                       		moveq	#2,d0
0001130A 0828 0000 0022             		btst	#0,status(a0)
00011310 6600                       		bne.s	locret_96B6
00011312 7001                       		moveq	#1,d0
00011314                            
00011314                            locret_96B6:
00011314 4E75                       		rts	
00011316                            ; End of function Obj1F_SetAni
00011316                            
00011316                            ; ===========================================================================
00011316                            
00011316                            Obj1F_Delete:				; XREF: Obj1F_Index
00011316 4EB9 0000 0000             		jsr	DeleteObject
0001131C 4E75                       		rts	
0001131E                            ; ===========================================================================
0001131E                            ; ---------------------------------------------------------------------------
0001131E                            ; Sub-object - missile that the	Crabmeat throws
0001131E                            ; ---------------------------------------------------------------------------
0001131E                            
0001131E                            Obj1F_BallMain:				; XREF: Obj1F_Index
0001131E 5428 0024                  		addq.b	#2,routine(a0)
00011322 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0001132A 317C 0400 0002             		move.w	#$400,2(a0)
00011330 117C 0004 0001             		move.b	#4,1(a0)
00011336 317C 0180 0018             		move.w	#$180,priority(a0)
0001133C 117C 0087 0020             		move.b	#$87,collision_flags(a0)
00011342 117C 0008 0023             		move.b	#8,width_pixels(a0)
00011348 317C FC00 0012             		move.w	#-$400,y_vel(a0)
0001134E 117C 0007 001C             		move.b	#7,anim(a0)
00011354                            
00011354                            Obj1F_BallMove:				; XREF: Obj1F_Index
00011354 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0001135A 4EB9 0000 0000             		jsr	AnimateSprite
00011360 4EB9 0000 0000             		jsr	ObjectFall
00011366 4EB9 0000 0000             		jsr	DisplaySprite
0001136C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00011370 0640 00E0                  		addi.w	#$E0,d0
00011374 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00011378 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0001137A 4E75                       		rts	
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj1F_Delete2:
0001137C 6000 0000                  		bra.w	DeleteObject
00011380                            ; ===========================================================================
00011380                            Ani_obj1F:
00011380                            	include "_anim\obj1F.asm"
00011380                            ; ---------------------------------------------------------------------------
00011380                            ; Animation script - Crabmeat enemy
00011380                            ; ---------------------------------------------------------------------------
00011380 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00011386 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0001138C 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00011390 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00011394 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00011398 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0001139C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000113A2 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000113A8 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
000113AE 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
000113B2 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
000113B6                            		even
000113B6                            		even
000113B6                            
000113B6                            ; ---------------------------------------------------------------------------
000113B6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000113B6                            ; ---------------------------------------------------------------------------
000113B6                            Map_obj1F:
000113B6                            	include "_maps\obj1F.asm"
000113B6                            ; ---------------------------------------------------------------------------
000113B6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
000113B6                            ; ---------------------------------------------------------------------------
000113B6 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
000113BA 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
000113BE 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
000113C2 0000                       		dc.w byte_97D7-Map_obj1F
000113C4 04                         byte_975E:	dc.b 4
000113C5 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
000113CA F009 0800 00               		dc.b $F0, 9, 8,	0, 0
000113CF 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
000113D4 0005 0806 00               		dc.b 0,	5, 8, 6, 0
000113D9 04                         byte_9773:	dc.b 4
000113DA F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
000113DF F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
000113E4 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
000113E9 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
000113EE 04                         byte_9788:	dc.b 4
000113EF EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
000113F4 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
000113F9 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
000113FE FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00011403 04                         byte_979D:	dc.b 4
00011404 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00011409 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0001140E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00011413 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00011418 06                         byte_97B2:	dc.b 6
00011419 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0001141E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00011423 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00011428 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0001142D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00011432 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00011437 01                         byte_97D1:	dc.b 1
00011438 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0001143D 01                         byte_97D7:	dc.b 1
0001143E F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00011444 00                         		even
00011444 00                         		even
00011444                            
00011444                            ; ===========================================================================
00011444                            ; ---------------------------------------------------------------------------
00011444                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00011444                            ; ---------------------------------------------------------------------------
00011444                            
00011444                            Obj22:					; XREF: Obj_Index
00011444 7000                       		moveq	#0,d0
00011446 1028 0024                  		move.b	routine(a0),d0
0001144A 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0001144E 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00011452                            ; ===========================================================================
00011452 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00011454 0000                       		dc.w Obj22_Action-Obj22_Index
00011456 0000                       		dc.w Obj22_Delete-Obj22_Index
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj22_Main:				; XREF: Obj22_Index
00011458 5428 0024                  		addq.b	#2,routine(a0)
0001145C 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00011464 317C 0444 0002             		move.w	#$444,2(a0)
0001146A 117C 0004 0001             		move.b	#4,1(a0)
00011470 317C 0180 0018             		move.w	#$180,priority(a0)
00011476 117C 0008 0020             		move.b	#8,collision_flags(a0)
0001147C 117C 0018 0023             		move.b	#$18,width_pixels(a0)
00011482                            
00011482                            Obj22_Action:				; XREF: Obj22_Index
00011482 7000                       		moveq	#0,d0
00011484 1028 0025                  		move.b	routine_secondary(a0),d0
00011488 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0001148C 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00011490 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00011496 4EB9 0000 0000             		jsr	AnimateSprite
0001149C 6000 0000                  		bra.w	MarkObjGone
000114A0                            ; ===========================================================================
000114A0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000114A2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000114A4                            ; ===========================================================================
000114A4                            
000114A4                            Obj22_Move:				; XREF: Obj22_Index2
000114A4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000114A8 6A00                       		bpl.s	locret_986C	; if time remains, branch
000114AA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
000114B0 6600                       		bne.s	Obj22_Fire	; if yes, branch
000114B2 5428 0025                  		addq.b	#2,routine_secondary(a0)
000114B6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
000114BC 317C 0400 0010             		move.w	#$400,x_vel(a0)	; move Buzz Bomber to the right
000114C2 117C 0001 001C             		move.b	#1,anim(a0)	; use "flying" animation
000114C8 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
000114CE 6600                       		bne.s	locret_986C	; if not, branch
000114D0 4468 0010                  		neg.w	x_vel(a0)		; move Buzz Bomber to the left
000114D4                            
000114D4                            locret_986C:
000114D4 4E75                       		rts	
000114D6                            ; ===========================================================================
000114D6                            
000114D6                            Obj22_Fire:				; XREF: Obj22_Move
000114D6 4EB9 0000 0000             		jsr	SingleObjLoad
000114DC 6600                       		bne.s	locret_98D0
000114DE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
000114E2 3368 0008 0008             		move.w	8(a0),8(a1)
000114E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114EE 0669 001C 000C             		addi.w	#$1C,$C(a1)
000114F4 337C 0200 0012             		move.w	#$200,y_vel(a1)	; move missile downwards
000114FA 337C 0200 0010             		move.w	#$200,x_vel(a1)	; move missile to the right
00011500 303C 0018                  		move.w	#$18,d0
00011504 0828 0000 0022             		btst	#0,status(a0)	; is Buzz Bomber facing	left?
0001150A 6600                       		bne.s	loc_98AA	; if not, branch
0001150C 4440                       		neg.w	d0
0001150E 4469 0010                  		neg.w	x_vel(a1)		; move missile to the left
00011512                            
00011512                            loc_98AA:
00011512 D169 0008                  		add.w	d0,8(a1)
00011516 1368 0022 0022             		move.b	status(a0),status(a1)
0001151C 337C 000E 0032             		move.w	#$E,$32(a1)
00011522 2348 003C                  		move.l	a0,$3C(a1)
00011526 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0001152C 317C 003B 0032             		move.w	#$3B,$32(a0)
00011532 117C 0002 001C             		move.b	#2,anim(a0)	; use "firing" animation
00011538                            
00011538                            locret_98D0:
00011538 4E75                       		rts	
0001153A                            ; ===========================================================================
0001153A                            
0001153A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0001153A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0001153E 6B00                       		bmi.s	Obj22_ChgDir
00011540 4EB9 0000 0000             		jsr	SpeedToPos
00011546 4A28 0034                  		tst.b	$34(a0)
0001154A 6600                       		bne.s	locret_992A
0001154C 3038 D008                  		move.w	($FFFFD008).w,d0
00011550 9068 0008                  		sub.w	8(a0),d0
00011554 6A00                       		bpl.s	Obj22_SetNrSonic
00011556 4440                       		neg.w	d0
00011558                            
00011558                            Obj22_SetNrSonic:
00011558 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0001155C 6400                       		bcc.s	locret_992A	; if not, branch
0001155E 4A28 0001                  		tst.b	1(a0)
00011562 6A00                       		bpl.s	locret_992A
00011564 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0001156A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00011570 6000                       		bra.s	Obj22_Stop
00011572                            ; ===========================================================================
00011572                            
00011572                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00011572 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00011578 0868 0000 0022             		bchg	#0,status(a0)	; change direction
0001157E 317C 003B 0032             		move.w	#59,$32(a0)
00011584                            
00011584                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00011584 5528 0025                  		subq.b	#2,routine_secondary(a0)	; run "Obj22_Fire" routine
00011588 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Buzz Bomber moving
0001158E 117C 0000 001C             		move.b	#0,anim(a0)	; use "hovering" animation
00011594                            
00011594                            locret_992A:
00011594 4E75                       		rts	
00011596                            ; ===========================================================================
00011596                            
00011596                            Obj22_Delete:				; XREF: Obj22_Index
00011596 4EB9 0000 0000             		jsr	DeleteObject
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            ; Object 23 - missile that Buzz	Bomber throws
0001159E                            ; ---------------------------------------------------------------------------
0001159E                            
0001159E                            Obj23:					; XREF: Obj_Index
0001159E 7000                       		moveq	#0,d0
000115A0 1028 0024                  		move.b	routine(a0),d0
000115A4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000115A8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000115AC                            ; ===========================================================================
000115AC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000115AE 0000                       		dc.w Obj23_Animate-Obj23_Index
000115B0 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000115B2 0000                       		dc.w Obj23_Delete-Obj23_Index
000115B4 0000                       		dc.w Obj23_FromNewt-Obj23_Index
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            Obj23_Main:				; XREF: Obj23_Index
000115B6 5368 0032                  		subq.w	#1,$32(a0)
000115BA 6A00                       		bpl.s	Obj23_ChkCancel
000115BC 5428 0024                  		addq.b	#2,routine(a0)
000115C0 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
000115C8 317C 2444 0002             		move.w	#$2444,2(a0)
000115CE 117C 0004 0001             		move.b	#4,1(a0)
000115D4 317C 0180 0018             		move.w	#$180,priority(a0)
000115DA 117C 0008 0023             		move.b	#8,width_pixels(a0)
000115E0 0228 0003 0022             		andi.b	#3,status(a0)
000115E6 4A28 0028                  		tst.b	subtype(a0)		; was object created by	a Newtron?
000115EA 6700                       		beq.s	Obj23_Animate	; if not, branch
000115EC 117C 0008 0024             		move.b	#8,routine(a0)	; run "Obj23_FromNewt" routine
000115F2 117C 0087 0020             		move.b	#$87,collision_flags(a0)
000115F8 117C 0001 001C             		move.b	#1,anim(a0)
000115FE 6000                       		bra.s	Obj23_Animate2
00011600                            ; ===========================================================================
00011600                            
00011600                            Obj23_Animate:				; XREF: Obj23_Index
00011600 6100                       		bsr.s	Obj23_ChkCancel
00011602 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00011608 4EB9 0000 0000             		jsr	AnimateSprite
0001160E 6000 0000                  		bra.w	DisplaySprite
00011612                            ; ---------------------------------------------------------------------------
00011612                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00011612                            ; destroyed, and if it has, then cancel	the missile
00011612                            ; ---------------------------------------------------------------------------
00011612                            
00011612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011612                            
00011612                            
00011612                            Obj23_ChkCancel:			; XREF: Obj23_Main
00011612 2268 003C                  		movea.l	$3C(a0),a1
00011616 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0001161A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0001161C 4E75                       		rts	
0001161E                            ; End of function Obj23_ChkCancel
0001161E                            
0001161E                            ; ===========================================================================
0001161E                            
0001161E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0001161E 0828 0007 0022             		btst	#7,status(a0)
00011624 6600                       		bne.s	Obj23_Explode
00011626 117C 0087 0020             		move.b	#$87,collision_flags(a0)
0001162C 117C 0001 001C             		move.b	#1,anim(a0)
00011632 4EB9 0000 0000             		jsr	SpeedToPos
00011638 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0001163E 4EB9 0000 0000             		jsr	AnimateSprite
00011644 4EB9 0000 0000             		jsr	DisplaySprite
0001164A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001164E 0640 00E0                  		addi.w	#$E0,d0
00011652 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00011656 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00011658 4E75                       		rts	
0001165A                            ; ===========================================================================
0001165A                            
0001165A                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0001165A 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0001165E 117C 0000 0024             		move.b	#0,routine(a0)
00011664 6000 F290                  		bra.w	Obj24
00011668                            ; ===========================================================================
00011668                            
00011668                            Obj23_Delete:				; XREF: Obj23_Index
00011668 4EB9 0000 0000             		jsr	DeleteObject
0001166E 4E75                       		rts	
00011670                            ; ===========================================================================
00011670                            
00011670                            Obj23_FromNewt:				; XREF: Obj23_Index
00011670 4A28 0001                  		tst.b	1(a0)
00011674 6AF2                       		bpl.s	Obj23_Delete
00011676 4EB9 0000 0000             		jsr	SpeedToPos
0001167C                            
0001167C                            Obj23_Animate2:				; XREF: Obj23_Main
0001167C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00011682 4EB9 0000 0000             		jsr	AnimateSprite
00011688 4EB9 0000 0000             		jsr	DisplaySprite
0001168E 4E75                       		rts	
00011690                            ; ===========================================================================
00011690                            Ani_obj22:
00011690                            	include "_anim\obj22.asm"
00011690                            ; ---------------------------------------------------------------------------
00011690                            ; Animation script - Buzz Bomber enemy
00011690                            ; ---------------------------------------------------------------------------
00011690 0000                       		dc.w byte_9A1E-Ani_obj22
00011692 0000                       		dc.w byte_9A22-Ani_obj22
00011694 0000                       		dc.w byte_9A26-Ani_obj22
00011696 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0001169A 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0001169E 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000116A2                            		even
000116A2                            		even
000116A2                            
000116A2                            Ani_obj23:
000116A2                            	include "_anim\obj23.asm"
000116A2                            ; ---------------------------------------------------------------------------
000116A2                            ; Animation script - missile that Buzz Bomber throws
000116A2                            ; ---------------------------------------------------------------------------
000116A2 0000                       		dc.w byte_9A2E-Ani_obj23
000116A4 0000                       		dc.w byte_9A32-Ani_obj23
000116A6 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
000116AA 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
000116AE                            		even
000116AE                            		even
000116AE                            
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            ; Sprite mappings - Buzz Bomber	enemy
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            Map_obj22:
000116AE                            	include "_maps\obj22.asm"
000116AE                            ; ---------------------------------------------------------------------------
000116AE                            ; Sprite mappings - Buzz Bomber	enemy
000116AE                            ; ---------------------------------------------------------------------------
000116AE 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
000116B2 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
000116B6 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
000116BA 06                         byte_9A42:	dc.b 6
000116BB F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
000116C0 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
000116C5 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
000116CA 0404 0018 00               		dc.b 4,	4, 0, $18, 0
000116CF F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
000116D4 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
000116D9 06                         byte_9A61:	dc.b 6
000116DA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
000116DF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
000116E4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
000116E9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
000116EE F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
000116F3 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
000116F8 07                         byte_9A80:	dc.b 7
000116F9 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
000116FE F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011703 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00011708 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0001170D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00011712 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00011717 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0001171C 07                         byte_9AA4:	dc.b 7
0001171D 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00011722 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00011727 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0001172C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00011731 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00011736 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0001173B F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00011740 06                         byte_9AC8:	dc.b 6
00011741 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00011746 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0001174B 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00011750 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00011755 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0001175A F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0001175F 04                         byte_9AE7:	dc.b 4
00011760 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00011765 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0001176A 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0001176F 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00011774 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00011779 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0001177E                            		even
0001177E                            		even
0001177E                            
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            ; Sprite mappings - missile that Buzz Bomber throws
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            Map_obj23:
0001177E                            	include "_maps\obj23.asm"
0001177E                            ; ---------------------------------------------------------------------------
0001177E                            ; Sprite mappings - missile that Buzz Bomber throws
0001177E                            ; ---------------------------------------------------------------------------
0001177E 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00011782 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00011786 01                         byte_9B0E:	dc.b 1
00011787 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0001178C 01                         byte_9B14:	dc.b 1
0001178D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00011792 01                         byte_9B1A:	dc.b 1
00011793 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00011798 01                         byte_9B20:	dc.b 1
00011799 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0001179E                            		even
0001179E                            		even
0001179E                            
0001179E                            ; ===========================================================================
0001179E                            ; ---------------------------------------------------------------------------
0001179E                            ; Object 25 - rings
0001179E                            ; ---------------------------------------------------------------------------
0001179E                            
0001179E                            Obj25:					; XREF: Obj_Index
0001179E 7000                       		moveq	#0,d0
000117A0 1028 0024                  		move.b	routine(a0),d0
000117A4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
000117A8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
000117AC                            ; ===========================================================================
000117AC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index                 ; 0
000117AE 0000                       		dc.w Obj25_Animate-Obj25_Index              ; 2
000117B0 0000                       		dc.w Obj25_Collect-Obj25_Index              ; 4
000117B2 0000                       		dc.w Obj25_Sparkle-Obj25_Index              ; 6
000117B4 0000                       		dc.w Obj25_Delete-Obj25_Index               ; 8
000117B6                            ;		dc.w Obj25_Attract-Obj25_Index              ; A
000117B6                            ;		dc.w Obj25_Collect-Obj25_Index              ; C
000117B6                            ;		dc.w Obj25_Sparkle-Obj25_Index              ; E
000117B6                            ;		dc.w Obj25_Delete-Obj25_Index               ; 10
000117B6                            ; ---------------------------------------------------------------------------
000117B6                            ; Distances between rings (format: horizontal, vertical)
000117B6                            ; ---------------------------------------------------------------------------
000117B6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
000117B8 1800                       		dc.b $18, 0		; horizontal normal
000117BA 2000                       		dc.b $20, 0		; horizontal wide
000117BC 0010                       		dc.b 0,	$10		; vertical tight
000117BE 0018                       		dc.b 0,	$18		; vertical normal
000117C0 0020                       		dc.b 0,	$20		; vertical wide
000117C2 1010                       		dc.b $10, $10		; diagonal
000117C4 1818                       		dc.b $18, $18
000117C6 2020                       		dc.b $20, $20
000117C8 F010                       		dc.b $F0, $10
000117CA E818                       		dc.b $E8, $18
000117CC E020                       		dc.b $E0, $20
000117CE 1008                       		dc.b $10, 8
000117D0 1810                       		dc.b $18, $10
000117D2 F008                       		dc.b $F0, 8
000117D4 E810                       		dc.b $E8, $10
000117D6                            ; ===========================================================================
000117D6                            
000117D6                            Obj25_Main:	; Routine 0
000117D6                            ;        if S3KObjectManager=1
000117D6 3028 0014                                  move.w	respawn_index(a0),d0
000117DA 6700 0000                  				beq.w	Obj25_MakeRingsD
000117DE 3440                       	        movea.w	d0,a2	; load address into a2
000117E0                             ;       else
000117E0                            	;	lea	(v_objstate).w,a2
000117E0                            	;	moveq	#0,d0
000117E0                            	;	move.b	respawn_index(a0),d0
000117E0                            	;	lea	2(a2,d0.w),a2
000117E0                            	;endif
000117E0 1812                       		move.b	(a2),d4
000117E2 1228 0028                  		move.b	subtype(a0),d1
000117E6 7000                       		moveq	#0,d0
000117E8 1001                       		move.b	d1,d0
000117EA 0241 0007                  		andi.w	#7,d1
000117EE 0C41 0007                  		cmpi.w	#7,d1
000117F2 6600                       		bne.s	loc_9B80
000117F4 7206                       		moveq	#6,d1
000117F6                            
000117F6                            	loc_9B80:
000117F6 4841                       		swap	d1
000117F8 323C 0000                  		move.w	#0,d1
000117FC E808                       		lsr.b	#4,d0
000117FE D040                       		add.w	d0,d0
00011800 1A3B 00B4                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00011804 4885                       		ext.w	d5
00011806 1C3B 00AF                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0001180A 4886                       		ext.w	d6
0001180C 2248                       		movea.l	a0,a1
0001180E 3428 0008                  		move.w	x_pos(a0),d2
00011812 3628 000C                  		move.w	y_pos(a0),d3
00011816 E20C                       		lsr.b	#1,d4
00011818 6500 0000                  		bcs.w	loc_9C02
0001181C                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
0001181C 6000                       		bra.s	loc_9BBA
0001181E                            ; ===========================================================================
0001181E                            
0001181E                            Obj25_MakeRingsD: ; this routine makes the rings work, and not spawn million of them
0001181E 5428 0024                  		addq.b	#2,routine(a0) ; add 2 to the routine counter
00011822 3168 0008 0032             		move.w	8(a0),$32(a0) ; move x-position to secondary x-position
00011828 217C 0000 0000 0004        		move.l	#Map_obj25,4(a0) ; load mappings
00011830 317C 27B2 0002             		move.w	#$27B2,2(a0) ; load right art
00011836 117C 0004 0001             		move.b	#4,1(a0) ; setup objects render flags
0001183C 317C 0100 0018             		move.w	#$100,priority(a0) ; setup priority
00011842 117C 0047 0020             		move.b	#$47,$20(a0) ; setup touch response
00011848 117C 0008 0023             		move.b	#8,width_pixels(a0) ; setup how wide this object is
0001184E                            ;		move.b	#0,respawn_index(a0) ; we don't want this to use any object spawn table slots
0001184E 117C 0001 0026             		move.b	#1,$26(a0) ; set as debug mode ring (This object does not use angles
00011854 6000                       		bra.s	Obj25_Animate ; branch away
00011856                            
00011856                            Obj25_MakeRings:
00011856 4841                       		swap	d1
00011858 E20C                       		lsr.b	#1,d4
0001185A 6500                       		bcs.s	loc_9C02
0001185C                            ;		bclr	#7,(a2)           ; this makes the s3 object manager think it needs reloading
0001185C 6100 0000                  		bsr.w	SingleObjLoad
00011860 6600                       		bne.s	loc_9C0E
00011862                            
00011862                            loc_9BBA:				; XREF: Obj25_Main
00011862 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00011866 5429 0024                  		addq.b	#2,routine(a1)
0001186A 3342 0008                  		move.w	d2,x_pos(a1)	; set x-axis position based on d2
0001186E 3368 0008 0032             		move.w	x_pos(a0),$32(a1)
00011874 3343 000C                  		move.w	d3,y_pos(a1)	; set y-axis position based on d3
00011878 237C 0000 0000 0004        		move.l	#Map_obj25,mappings(a1)
00011880 337C 27B2 0002             		move.w	#$27B2,art_tile(a1)
00011886 137C 0004 0001             		move.b	#4,render_flags(a1)
0001188C 337C 0100 0018             		move.w	#$100,priority(a1)
00011892 137C 0047 0020             		move.b	#$47,$20(a1)
00011898 137C 0008 0023             		move.b	#8,width_pixels(a1)
0001189E                            ;        if S3KObjectManager=1
0001189E 3368 0014 0014             		move.w	respawn_index(a0),respawn_index(a1)
000118A4                             ;       else
000118A4                            	;	move.b	respawn_index(a0),respawn_index(a1)
000118A4                                 ;   endif
000118A4 1341 0034                  		move.b	d1,$34(a1)
000118A8                            
000118A8                            loc_9C02:
000118A8 5241                       		addq.w	#1,d1
000118AA D445                       		add.w	d5,d2		; add ring spacing value to d2
000118AC D646                       		add.w	d6,d3		; add ring spacing value to d3
000118AE 4841                       		swap	d1
000118B0 51C9 FFA4                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
000118B4                            
000118B4                            loc_9C0E:
000118B4 0812 0000                  		btst	#0,(a2)
000118B8 6600 0000                  		bne.w	DeleteObject
000118BC                            ; --------------------------------------------------------------------------
000118BC                            Obj25_Animate:	; Routine 2
000118BC 1178 FEC3 001A             		move.b	($FFFFFEC3).w,obFrame(a0) ; set frame
000118C2 6100 0000                  		bsr.w	DisplaySprite
000118E2 4E75                       		rts	
000118E4                            ; ===========================================================================
000118E4                            
000118E4                            Obj25_Collect:	; Routine 4
000118E4 5428 0024                  		addq.b	#2,routine(a0)
000118E8 117C 0000 0020             		move.b	#0,obColType(a0)
000118EE 317C 0080 0018             		move.w	#$80,priority(a0)
000118F4 6100 0000                  		bsr.w	CollectRing
000118F8                            ;        if S3KObjectManager=1
000118F8 7000                       		moveq	#0,d0
000118FA 3028 0014                                  move.w	respawn_index(a0),d0	; get address in respawn table
000118FE 3440                       	        movea.w	d0,a2	                ; load address into a2
00011900 1228 0034                  		move.b	$34(a0),d1
00011904 03D2                       		bset	d1,(a2)
00011906                            ;        else
00011906                            ;		lea	(v_objstate).w,a2
00011906                            ;		moveq	#0,d0
00011906                            ;		move.b	respawn_index(a0),d0
00011906                            ;		move.b	$34(a0),d1
00011906                            ;		bset	d1,2(a2,d0.w)
00011906                            ;	endif
00011906                            
00011906                            Obj25_Sparkle:	; Routine 6
00011906 43F9 0000 0000             		lea	(Ani_Obj25).l,a1
0001190C 6100 0000                  		bsr.w	AnimateSprite
00011910 6000 0000                  		bra.w	DisplaySprite
00011914                            ; ===========================================================================
00011914                            
00011914                            Obj25_Delete:	; Routine 8
00011914                             ;       if S3KObjectManager=1
00011914 7000 3028 0014 6700 3440+                  obMarkGone
00011922                              ;      endif
00011922 6000 0000                  		bra.w	DeleteObject
00011926                            ; ===========================================================================
00011926                            
00011926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011926                            
00011926                            
00011926                            CollectRing:				; XREF: Obj25_Collect
00011926 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
0001192C 6400                       	bcc.s	loc_11FD4
0001192E 5278 FF98                  	addq.w	#1,(Rings_Collected).w
00011932                            
00011932                            loc_11FD4:
00011932 303C 0033                  	move.w  #$33,d0 ; '¦'
00011936 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
0001193C 6400 0000                  	bcc.w	loc_115B0
00011940 5278 FE20                  	addq.w	#1,(Ring_count).w
00011944                            ;	cmpi.w  #$3E7,($FFFFFE20).w
00011944                            ;	ble.s   loc_1157E
00011944                            ;	move.w  #$3E7,($FFFFFE20).w
00011944                            	
00011944                            ;loc_1157E:                              ; CODE XREF: ROM:00011576j
00011944 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
0001194A 7200                       	moveq   #0,d1
0001194C 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
00011950 E549                       	lsl.w   #2,d1
00011952 B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
00011956 6E00                       	bgt.s   loc_115B0
00011958 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
0001195E                            ;	cmpi.b  #$A,($FFFFFE10).w
0001195E                            ;	beq.s   loc_115B4
0001195E 0C38 0063 FE12             	cmpi.b	#$63,(Life_count).w
00011964 6C00 0000                  	bge.w	Obj25_ExtraLife
00011968 5238 FE12                  	addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0001196C 5238 FE1C                  	addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00011970                            Obj25_ExtraLife:
00011970 303C 002A                  	move.w	#$2A,d0		; play extra life music
00011974 4EF9 0000 325C             	jmp	(PlaySound_Special).l
0001197A                            loc_115B0:
0001197A 4EF9 0000 3212             	jmp	(PlaySound).l
00011980                            ; End of function CollectRing
00011980                            
00011980                            ; ===========================================================================
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Object 37 - rings flying out of Sonic	when he's hit
00011980                            ; ---------------------------------------------------------------------------
00011980                            
00011980                            Obj37:					; XREF: Obj_Index
00011980 7000                       		moveq	#0,d0
00011982 1028 0024                  		move.b	routine(a0),d0
00011986 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0001198A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0001198E                            ; ===========================================================================
0001198E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00011990 0000                       		dc.w Obj37_Bounce-Obj37_Index
00011992 0000                       		dc.w Obj37_Collect-Obj37_Index
00011994 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00011996 0000                       		dc.w Obj37_Delete-Obj37_Index
00011998                            ; ===========================================================================
00011998                            
00011998                            Obj37_CountRings:			; XREF: Obj37_Index
00011998 2248                       		movea.l	a0,a1
0001199A 7A00                       		moveq	#0,d5
0001199C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
000119A0 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
000119A6 7014                               moveq   #20,d0                  ; lose a max of 20 rings
000119A8 45F8 D000                          lea     ($FFFFD000).w,a2    ; a2=character
000119AC 082A 0006 0022                     btst    #6,status(a2)           ; is Sonic underwater?
000119B2 6700                               beq.s   Obj37_CountRings2                       ; if not, branch
000119B4 47F9 0000 0000                     lea    SpillRingDataU,a3        ; load the UNDERWATER address of the array in a3
000119BA 7008                               moveq   #8,d0                   ; lose a max of 8 rings underwater
000119BC                            Obj37_CountRings2:
000119BC BA40                               cmp.w   d0,d5
000119BE 6500                               bcs.s   loc_9CDE
000119C0 3A00                               move.w  d0,d5
000119C2                            
000119C2                            loc_9CDE:
000119C2 5345                               subq.w  #1,d5
000119C4 383C 0288                          move.w  #$288,d4
000119C8 49F9 FFFF AA00                     lea ($FFFFAA00).l,a4    ; Load $FFFFAA00 to a4
000119CE 6000                       		bra.s	Obj37_MakeRings
000119D0                            ; ===========================================================================
000119D0                            
000119D0                            Obj37_Loop:
000119D0 6100 0000                  		bsr.w	SingleObjLoad
000119D4 6600 0000                  		bne.w	Obj37_ResetCounter
000119D8                            
000119D8                            Obj37_MakeRings:			; XREF: Obj37_CountRings
000119D8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
000119DC 5429 0024                  		addq.b	#2,routine(a1)
000119E0 137C 0008 0016             		move.b	#8,$16(a1)
000119E6 137C 0008 0017             		move.b	#8,$17(a1)
000119EC 3368 0008 0008             		move.w	8(a0),8(a1)
000119F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000119F8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00011A00 337C 27B2 0002             		move.w	#$27B2,2(a1)
00011A06 137C 0004 0001             		move.b	#4,1(a1)
00011A0C                            ;		move.w	#$180,priority(a1)
00011A0C 137C 0047 0020             		move.b	#$47,collision_flags(a1)
00011A12 137C 0008 0023             		move.b	#8,width_pixels(a1)
00011A18                            ;		tst.w	d4
00011A18                            ;		bmi.s	loc_9D62
00011A18                            ;		move.w	d4,d0
00011A18                            ;		jsr	CalcSine
00011A18                            ;		move.w	d4,d2
00011A18                            ;		lsr.w	#8,d2
00011A18                            ;		tst.b   ($FFFFF64C).w ; Does the level have water?
00011A18                            ;		beq.s   Obj37_MRCont ; If not, branch and skip underwater checks
00011A18                            ;		move.w  ($FFFFF646).w,d6 ; Move water level to d6
00011A18                            ;		cmp.w   $C(a0),d6 ; Is the ring object underneath the water level?
00011A18                            ;		bgt.s   Obj37_MRCont ; If not, branch and skip underwater commands
00011A18                            ;		asr.w  #$1,d0 ; Half d0.  Makes the ring's x_vel bounce to the left/right slower
00011A18                            ;		asr.w  #$1,d1 ; Half d1.  Makes the ring's y_vel bounce up/down slower
00011A18                            
00011A18                            Obj37_MRCont:
00011A18                            ;        asl.w   d2,d0
00011A18                             ;       asl.w   d2,d1
00011A18                              ;      move.w  d0,d2
00011A18                               ;     move.w  d1,d3
00011A18                                ;    addi.b  #$10,d4
00011A18                                 ;   bcc.s   loc_9D62
00011A18                                  ;  subi.w  #$80,d4
00011A18                                   ; bcc.s   loc_9D62
00011A18                                    ;move.w  #$288,d4
00011A18                            
00011A18                            ;loc_9D62:
00011A18                            ;        move.w  d2,x_vel(a1)
00011A18                            ;        move.w  d3,y_vel(a1)
00011A18                            ;        neg.w   d2
00011A18                            ;        neg.w   d4
00011A18                            ;        move.w  d2,(a4)+        ; Move d2 to a4 then increment a4 by a word
00011A18 335B 0010                  		move.w  (a3)+,x_vel(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
00011A1C 335B 0012                  		move.w  (a3)+,y_vel(a1)         ; move the data contained in the array to the y velocity and increment the address in a3
00011A20 38C3                       		move.w  d3,(a4)+        ; Move d3 to a4 then increment a4 by a word
00011A22 1438 D03B                  		move.b ($FFFFD03B).w,d2 ; get the number of times Sonic has been hit
00011A26 0C02 0001                  		cmpi.b #1,d2 ; is it more than once?
00011A2A 6F00                       		ble.s @Repeat ; if not, branch
00011A2C 4882                       		ext d2 ; change value from byte to word
00011A2E C5FC 0050                  		muls.w #$50,d2 ; multiply by #$50
00011A32 9569 0012                  		sub.w d2,$12(a1) ; change y-velocity of each ring
00011A36                            @Repeat:
00011A36 51CD FF98                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00011A3A                            
00011A3A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00011A3A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00011A40 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00011A46 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
00011A4C 70FF                       		moveq	#-1,d0			; Move #-1 to d0
00011A4E 1140 001F                  		move.b	d0,obDelayAni(a0)	; Move d0 to new timer
00011A52 11C0 FEC6                  		move.b	d0,(v_ani3_time).w	; Move d0 to old timer (for animated purposes)
00011A56 303C 00B9                  		move.w	#$B9,d0				; MJ: Sound
00011A5A 4EB9 0000 3212             		jsr	(PlaySound).l ;	play ring loss sound
00011A60                            
00011A60                            Obj37_Bounce:				; XREF: Obj37_Index
00011A60 1178 FEC7 001A             		move.b	($FFFFFEC7).w,mapping_frame(a0)
00011A66 4EB9 0000 0000             		jsr	SpeedToPos
00011A6C 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00011A72 4A38 F64C                          tst.b   ($FFFFF64C).w           ; Does the level have water?
00011A76 6700                               beq.s   @skipbounceslow         ; If not, branch and skip underwater checks
00011A78 3C38 F646                          move.w  ($FFFFF646).w,d6        ; Move water level to d6
00011A7C BC68 000C                          cmp.w   y_pos(a0),d6            ; Is the ring object underneath the water level?
00011A80 6E00                               bgt.s   @skipbounceslow         ; If not, branch and skip underwater commands
00011A82 0468 000E 0012                     subi.w  #$E,y_vel(a0)          ; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
00011A88                            @skipbounceslow:
00011A88 6B00                       		bmi.s	Obj37_ChkDel
00011A8A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011A8E D007                       		add.b	d7,d0
00011A90 0200 0003                  		andi.b	#3,d0
00011A94 6600                       		bne.s	Obj37_ChkDel
00011A96 4EB9 0000 0000             		jsr	ObjHitFloor
00011A9C 4A41                       		tst.w	d1
00011A9E 6A00                       		bpl.s	Obj37_ChkDel
00011AA0 D368 000C                  		add.w	d1,$C(a0)
00011AA4 3028 0012                  		move.w	y_vel(a0),d0
00011AA8 E440                       		asr.w	#2,d0
00011AAA 9168 0012                  		sub.w	d0,y_vel(a0)
00011AAE 4468 0012                  		neg.w	y_vel(a0)
00011AB2                            
00011AB2                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00011AB2 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
00011AB6 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
00011ABA 0C78 FF00 F72C                     cmpi.w	#-$100,($FFFFF72C).w            ; is vertical wrapping enabled?
00011AC0 6700 0000                          beq.w   DisplaySprite                   ; if so, branch
00011AC4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00011AC8 0640 00E0                  		addi.w	#$E0,d0
00011ACC B068 000C                  		cmp.w	y_pos(a0),d0	   ; has object moved below level boundary?
00011AD0 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
00011AD2                            ;Mercury Lost Rings Flash
00011AD2 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
00011AD8 6700 0000                  		beq.w	@flash1      ; If the bit is 0, the ring will appear.
00011ADC 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
00011AE2 6200 0000                  		bhi.w	@flash1       ; If the timer is higher than 80, obviously the rings will STAY visible.
00011AE6 4E75                       		rts
00011AE8                            @flash1:
00011AE8 43F8 AC00                  		lea	(v_spritequeue).w,a1
00011AEC D2FC 0180                  		adda.w	#$180,a1	; jump to position in queue
00011AF0 0C51 007E                          cmpi.w  #$7E,(a1)
00011AF4 6400                               bcc.s   @flashskip
00011AF6 5451                               addq.w  #2,(a1)
00011AF8 D2D1                               adda.w  (a1),a1
00011AFA 3288                               move.w  a0,(a1)
00011AFC                            @flashskip:
00011AFC 4E75                               rts
00011AFE                            ;end Lost Rings Flash
00011AFE                            ; ===========================================================================
00011AFE                            
00011AFE                            Obj37_Collect:				; XREF: Obj37_Index
00011AFE 5428 0024                  		addq.b	#2,routine(a0)
00011B02 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011B08 317C 0080 0018             		move.w	#$80,priority(a0)
00011B0E 4EBA FE16                  		jsr	CollectRing
00011B12                            
00011B12                            Obj37_Sparkle:				; XREF: Obj37_Index
00011B12 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00011B18 4EB9 0000 0000             		jsr	AnimateSprite
00011B1E 43F8 AC00                  		lea     (Sprite_Table_Input).w,a1
00011B22 D2FC 0080                  		adda.w  #$80,a1
00011B26 0C51 007E                  		cmpi.w  #$7E,(a1)
00011B2A 6400                       		bcc.s   Obj37_SparkleRTS
00011B2C 5451                       		addq.w  #2,(a1)
00011B2E D2D1                       		adda.w  (a1),a1
00011B30 3288                       		move.w  a0,(a1)
00011B32                            Obj37_SparkleRTS:
00011B32 4E75                       	rts
00011B34                            ; ===========================================================================
00011B34                            
00011B34                            Obj37_Delete:				; XREF: Obj37_Index
00011B34 6000 0000                  		bra.w	DeleteObject
00011B38                            ; ===========================================================================
00011B38                            ; ---------------------------------------------------------------------------
00011B38                            ; Ring Spawn Array
00011B38                            ; ---------------------------------------------------------------------------
00011B38                            
00011B38 00C4 FC14 FF3C FC14 0238+  SpillRingData:  dc.w    $00C4,$FC14, $FF3C,$FC14, $0238,$FCB0, $FDC8,$FCB0 ; 4
00011B48 0350 FDC8 FCB0 FDC8 03EC+                  dc.w    $0350,$FDC8, $FCB0,$FDC8, $03EC,$FF3C, $FC14,$FF3C ; 8
00011B58 03EC 00C4 FC14 00C4 0350+                  dc.w    $03EC,$00C4, $FC14,$00C4, $0350,$0238, $FCB0,$0238 ; 12
00011B68 0238 0350 FDC8 0350 00C4+                  dc.w    $0238,$0350, $FDC8,$0350, $00C4,$03EC, $FF3C,$03EC ; 16
00011B78 0062 FE0A FF9E FE0A 011C+                  dc.w    $0062,$FE0A, $FF9E,$FE0A, $011C,$FE58, $FEE4,$FE58 ; 20
00011B88                                            even
00011B88                            ; ===========================================================================
00011B88                            ; ===========================================================================
00011B88                            ; ---------------------------------------------------------------------------
00011B88                            ; Ring Spawn Array Underwater
00011B88                            ; ---------------------------------------------------------------------------
00011B88                            
00011B88 0064 FE08 FF9C FE08 011C+  SpillRingDataU: dc.w    $0064,$FE08, $FF9C,$FE08, $011C,$FE58, $FEE4,$FE58 ; 4
00011B98 01A8 FEE4 FE58 FEE4 01F8+                  dc.w    $01A8,$FEE4, $FE58,$FEE4, $01F8,$FF9C, $FE08,$FF9C ; 8
00011BA8                                            even
00011BA8                            ; ===========================================================================
00011BA8                            ; ---------------------------------------------------------------------------
00011BA8                            ; Object 4B - giant ring for entry to special stage
00011BA8                            ; ---------------------------------------------------------------------------
00011BA8                            
00011BA8                            Obj4B:					; XREF: Obj_Index
00011BA8 7000                       		moveq	#0,d0
00011BAA 1028 0024                  		move.b	routine(a0),d0
00011BAE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00011BB2 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00011BB6                            ; ===========================================================================
00011BB6 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00011BB8 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00011BBA 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00011BBC 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00011BBE                            ; ===========================================================================
00011BBE                            
00011BBE                            Obj4B_Main:				; XREF: Obj4B_Index
00011BBE 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00011BC6 317C 2400 0002             		move.w	#$2400,2(a0)
00011BCC 0028 0004 0001             		ori.b	#4,1(a0)
00011BD2 117C 0040 0023             		move.b	#$40,width_pixels(a0)
00011BD8 4A28 0001                  		tst.b	1(a0)
00011BDC 6A00                       		bpl.s	Obj4B_Animate
00011BDE                            ;		cmpi.w	#0,($FFFFFF70).w	; are you playing as Sonic?
00011BDE                            ;		beq.w	Obj4B_Sonic			; if yes, branch
00011BDE                            		
00011BDE                            ;Obj4B_Sonic:
00011BDE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w	; do you have 6 emeralds?
00011BE4 6700 0000                  		beq.w	Obj4B_Delete2		; if yes, branch
00011BE8                            ;		cmpi.b	#$01, ($FFFFFF70).w	; are you playing as other characters?
00011BE8                            ;		beq.w	Obj4B_Delete2			; if yes, branch
00011BE8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w	; do you have at least 50 rings?
00011BEE 6400                       		bcc.s	Obj4B_Okay			; if yes, branch
00011BF0 4E75                       		rts	
00011BF2                            ; ===========================================================================
00011BF2                            
00011BF2                            Obj4B_Okay:				; XREF: Obj4B_Main
00011BF2 5428 0024                  		addq.b	#2,routine(a0)
00011BF6 317C 0100 0018             		move.w	#$100,priority(a0)
00011BFC 117C 0052 0020             		move.b	#$52,collision_flags(a0)
00011C02 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00011C08                            
00011C08                            Obj4B_Animate:				; XREF: Obj4B_Index
00011C08 1178 FEC3 001A             		move.b	($FFFFFEC3).w,mapping_frame(a0)
00011C0E 4EF9 0000 0000             		jmp		MarkObjGone
00011C14                            ; ===========================================================================
00011C14                            
00011C14                            Obj4B_Collect:				; XREF: Obj4B_Index
00011C14 5528 0024                  		subq.b	#2,routine(a0)
00011C18 117C 0000 0020             		move.b	#0,collision_flags(a0)
00011C1E 6100 0000                  		bsr.w	SingleObjLoad
00011C22 6600 0000                  		bne.w	Obj4B_PlaySnd
00011C26 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00011C2A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00011C2E 3368 0008 0008             		move.w	8(a0),8(a1)
00011C34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C3A 2348 003C                  		move.l	a0,$3C(a1)
00011C3E 3038 D008                  		move.w	($FFFFD008).w,d0
00011C42 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00011C46 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00011C48 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00011C4E                            
00011C4E                            Obj4B_PlaySnd:
00011C4E 303C 00C3                  		move.w	#$C3,d0
00011C52 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00011C58 60AE                       		bra.s	Obj4B_Animate
00011C5A                            ; ===========================================================================
00011C5A                            
00011C5A                            Obj4B_Delete:				; XREF: Obj4B_Index
00011C5A 4EF9 0000 0000             		jmp	GotThroughAct
00011C60 6000 0000                  		bra.w	DeleteObject
00011C64 6000 0000                  		bra.w	DeleteObject
00011C68                            
00011C68                            Obj4B_Delete2:				; XREF: Obj4B_Index
00011C68 6000 0000                  		bra.w	DeleteObject
00011C6C                            ; ===========================================================================
00011C6C                            ; ---------------------------------------------------------------------------
00011C6C                            ; Object 7C - flash effect when	you collect the	giant ring
00011C6C                            ; ---------------------------------------------------------------------------
00011C6C                            
00011C6C                            Obj7C:					; XREF: Obj_Index
00011C6C 7000                       		moveq	#0,d0
00011C6E 1028 0024                  		move.b	routine(a0),d0
00011C72 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00011C76 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00011C7A                            ; ===========================================================================
00011C7A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00011C7C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00011C7E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00011C80                            ; ===========================================================================
00011C80                            
00011C80                            Obj7C_Main:				; XREF: Obj7C_Index
00011C80 5428 0024                  		addq.b	#2,routine(a0)
00011C84 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00011C8C 317C 2462 0002             		move.w	#$2462,2(a0)
00011C92 0028 0004 0001             		ori.b	#4,1(a0)
00011C98 117C 0000 0018             		move.b	#0,priority(a0)
00011C9E 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00011CA4 117C 00FF 001A             		move.b	#$FF,mapping_frame(a0)
00011CAA                            
00011CAA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00011CAA 6100                       		bsr.s	Obj7C_Collect
00011CAC 4EF9 0000 0000             		jmp		MarkObjGone
00011CB2                            
00011CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011CB2                            
00011CB2                            
00011CB2                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00011CB2 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00011CB6 6A00                       		bpl.s	locret_9F76
00011CB8 117C 0001 001E             		move.b	#1,anim_frame_duration(a0)
00011CBE 5228 001A                  		addq.b	#1,mapping_frame(a0)
00011CC2 0C28 0008 001A             		cmpi.b	#8,mapping_frame(a0)	; has animation	finished?
00011CC8 6400                       		bcc.s	Obj7C_End	; if yes, branch
00011CCA 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is 3rd frame displayed?
00011CD0 6600                       		bne.s	locret_9F76	; if not, branch
00011CD2 2268 003C                  		movea.l	$3C(a0),a1
00011CD6 137C 0006 0024             		move.b	#6,routine(a1)	; delete giant ring object (Obj4B)
00011CDC 11FC 001C D01C             		move.b	#$1C,(MainCharacter+anim).w ; make Sonic	invisible
00011CE2 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00011CE8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00011CEC 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00011CF0                            
00011CF0                            locret_9F76:
00011CF0 4E75                       		rts	
00011CF2                            ; ===========================================================================
00011CF2                            
00011CF2                            Obj7C_End:				; XREF: Obj7C_Collect
00011CF2 5428 0024                  		addq.b	#2,routine(a0)
00011CF6 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00011CFC 588F                       		addq.l	#4,sp
00011CFE 4E75                       		rts	
00011D00                            ; End of function Obj7C_Collect
00011D00                            
00011D00                            ; ===========================================================================
00011D00                            
00011D00                            Obj7C_Delete:				; XREF: Obj7C_Index
00011D00 6000 0000                  		bra.w	DeleteObject
00011D04                            ; ===========================================================================
00011D04                            Ani_obj25:
00011D04                            	include "_anim\obj25.asm"
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            ; Animation script - ring
00011D04                            ; ---------------------------------------------------------------------------
00011D04 0000                       		dc.w byte_9F8C-Ani_obj25
00011D06 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00011D0C                            		even
00011D0C                            		even
00011D0C                            
00011D0C                            ; ---------------------------------------------------------------------------
00011D0C                            ; Sprite mappings - rings
00011D0C                            ; ---------------------------------------------------------------------------
00011D0C                            Map_obj25:
00011D0C                            	include "_maps\obj25.asm"
00011D0C                            ; ---------------------------------------------------------------------------
00011D0C                            ; Sprite mappings - rings
00011D0C                            ; ---------------------------------------------------------------------------
00011D0C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00011D10 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00011D14 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00011D18 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00011D1C 01                         byte_9FA2:	dc.b 1
00011D1D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011D22 01                         byte_9FA8:	dc.b 1
00011D23 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00011D28 01                         byte_9FAE:	dc.b 1
00011D29 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00011D2E 01                         byte_9FB4:	dc.b 1
00011D2F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00011D34 01                         byte_9FBA:	dc.b 1
00011D35 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00011D3A 01                         byte_9FC0:	dc.b 1
00011D3B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00011D40 01                         byte_9FC6:	dc.b 1
00011D41 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00011D46 01                         byte_9FCC:	dc.b 1
00011D47 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00011D4C                            		even
00011D4C                            		even
00011D4C                            
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C                            ; Sprite mappings - giant ring
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C                            Map_obj4B:
00011D4C                            	include "_maps\obj4B.asm"
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C                            ; Sprite mappings - giant ring
00011D4C                            ; ---------------------------------------------------------------------------
00011D4C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00011D50 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00011D54 0A                         byte_9FDA:	dc.b $A
00011D55 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00011D5A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00011D5F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00011D64 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00011D69 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00011D6E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00011D73 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00011D78 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00011D7D 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00011D82 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00011D87 08                         byte_A00D:	dc.b 8
00011D88 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00011D8D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00011D92 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00011D97 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00011D9C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00011DA1 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00011DA6 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00011DAB 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
00011DB0 04                         byte_A036:	dc.b 4
00011DB1 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
00011DB6 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
00011DBB 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
00011DC0 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
00011DC5 08                         byte_A04B:	dc.b 8
00011DC6 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
00011DCB E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
00011DD0 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
00011DD5 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
00011DDA F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
00011DDF 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
00011DE4 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
00011DE9 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
00011DEE                            		even
00011DEE                            		even
00011DEE                            
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE                            ; Sprite mappings - flash effect when you collect the giant ring
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE                            Map_obj7C:
00011DEE                            	include "_maps\obj7C.asm"
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE                            ; Sprite mappings - flash effect when you collect the giant ring
00011DEE                            ; ---------------------------------------------------------------------------
00011DEE 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
00011DF2 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
00011DF6 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
00011DFA 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
00011DFE 02                         byte_A084:	dc.b 2
00011DFF E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
00011E04 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
00011E09 04                         byte_A08F:	dc.b 4
00011E0A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
00011E0F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
00011E14 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
00011E19 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
00011E1E 04                         byte_A0A4:	dc.b 4
00011E1F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
00011E24 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
00011E29 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
00011E2E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
00011E33 04                         byte_A0B9:	dc.b 4
00011E34 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
00011E39 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
00011E3E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
00011E43 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
00011E48 04                         byte_A0CE:	dc.b 4
00011E49 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
00011E4E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
00011E53 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
00011E58 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
00011E5D 04                         byte_A0E3:	dc.b 4
00011E5E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
00011E63 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
00011E68 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
00011E6D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
00011E72 02                         byte_A0F8:	dc.b 2
00011E73 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
00011E78 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
00011E7D 04                         byte_A103:	dc.b 4
00011E7E E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
00011E83 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
00011E88 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
00011E8D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
00011E92                            		even
00011E92                            		even
00011E92                            
00011E92                            ; ===========================================================================
00011E92                            ; ---------------------------------------------------------------------------
00011E92                            ; Object 26 - monitors
00011E92                            ; ---------------------------------------------------------------------------
00011E92                            
00011E92                            Obj26:						  ; ...
00011E92 7000                       		moveq	#0,d0
00011E94 1028 0024                  		move.b	$24(a0),d0
00011E98 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
00011E9C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
00011EA0                            ; ---------------------------------------------------------------------------
00011EA0 0000 0000                  Obj26_Index:	dc.w loc_30F9D4-Obj26_Index,loc_30FA38-Obj26_Index; 0 ;	...
00011EA4 0000 0000                  		dc.w loc_30FAE8-Obj26_Index,loc_30FA86-Obj26_Index; 2
00011EA8 0000                       		dc.w BraTo_MarkObjGone_0-Obj26_Index; 4
00011EAA                            ; ---------------------------------------------------------------------------
00011EAA                            
00011EAA                            loc_30F9D4:					  ; ...
00011EAA 5428 0024                  		addq.b	#2,$24(a0)
00011EAE 117C 000E 0016             		move.b	#$E,$16(a0)
00011EB4 117C 000E 0017             		move.b	#$E,$17(a0)
00011EBA 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
00011EC2 317C 0680 0002             		move.w	#$680,2(a0)
00011EC8 117C 0004 0001             		move.b	#4,1(a0)
00011ECE 317C 0180 0018             		move.w	#$180,priority(a0)
00011ED4 117C 000F 0023             		move.b	#$F,width_pixels(a0)
00011EDA                            ;		lea	(v_objstate).w,a2
00011EDA 7000                       		moveq	#0,d0
00011EDC 3028 0014                          move.w	respawn_index(a0),d0
00011EE0 3440                       	    movea.w	d0,a2
00011EE2 6700                       		beq.s	loc_30FA2C
00011EE4                            ;		bclr	#7,(a2)
00011EE4 0812 0000                  		btst	#0,(a2)
00011EE8 6700                       		beq.s	loc_30FA2C
00011EEA 117C 0008 0024             		move.b	#8,$24(a0)
00011EF0 117C 000B 001A             		move.b	#$B,$1A(a0)
00011EF6 6000 0000                  		bra.w	RememberState
00011EFA                            ; ---------------------------------------------------------------------------
00011EFA                            
00011EFA                            loc_30FA2C:					  ; ...
00011EFA 117C 0046 0020             		move.b	#$46,$20(a0)
00011F00 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011F06                            
00011F06                            loc_30FA38:					  ; ...
00011F06 1028 0025                  		move.b	$25(a0),d0
00011F0A 6700                       		beq.s	SolidObject_Monitor
00011F0C 5500                       		subq.b	#2,d0
00011F0E 6600                       		bne.s	Obj26_Fall
00011F10 7200                       		moveq	#0,d1
00011F12 1228 0023                  		move.b	width_pixels(a0),d1
00011F16 0641 000B                  		addi.w	#$B,d1
00011F1A 4EBA D2BE                  		jsr	ExitPlatform
00011F1E 0829 0003 0022             		btst	#3,$22(a1)
00011F24 6600 0000                  		bne.w	SolidObject_Monitor
00011F28 4228 0025                  		clr.b	$25(a0)
00011F2C 6000 0000                  		bra.w	loc_30FA86
00011F30                            Obj26_Fall:		
00011F30 6100 0000                  		bsr.w	ObjectFall
00011F34 4EB9 0000 0000             		jsr	ObjHitFloor	  ; Also known as ObjHitFloor in Sonic 1
00011F3A 4A41                       		tst.w	d1
00011F3C 6A00 0000                  		bpl.w	SolidObject_Monitor
00011F40 D368 000C                  		add.w	d1,$C(a0)
00011F44 4268 0012                  		clr.w	$12(a0)
00011F48 4228 0025                  		clr.b	$25(a0)
00011F4C                            
00011F4C                            SolidObject_Monitor:				  ; ...
00011F4C 323C 001A                  		move.w	#$1A,d1
00011F50 343C 000F                  		move.w	#$F,d2
00011F54 3602                       		move.w	d2,d3
00011F56 5243                       		addq.w	#1,d3
00011F58 3828 0008                  		move.w	8(a0),d4
00011F5C 43F8 D000                  		lea	($FFFFD000).w,a1
00011F60 7C03                       		moveq	#3,d6
00011F62 48E7 7800                  		movem.l	d1-d4,-(sp)
00011F66 6100 0000                  		bsr.w	SolidObject_Monitor_Sonic
00011F6A 4CDF 001E                  		movem.l	(sp)+,d1-d4
00011F6E                            ;		lea	($FFFFB040).w,a1
00011F6E                            ;		moveq	#4,d6
00011F6E                            ;		bsr.w	SolidObject_Monitor_Tails_Useless
00011F6E                            
00011F6E                            loc_30FA86:					  ; ...
00011F6E 43F9 0000 0000             		lea	(Ani_Obj26).l,a1
00011F74 4EB9 0000 0000             		jsr	AnimateSprite
00011F7A                            
00011F7A                            BraTo_MarkObjGone_0:				  ; ...
00011F7A 4EF9 0000 0000             		jmp	RememberState
00011F80                            
00011F80                            ; =============== S U B	R O U T	I N E =======================================
00011F80                            
00011F80                            
00011F80                            SolidObject_Monitor_Sonic:			  ; ...
00011F80 0D28 0022                  		btst	d6,$22(a0)
00011F84 6600 0000                  		bne.w	ExitPlatform3
00011F88 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
00011F8E 6600 0000                  		bne.w	loc_314E36
00011F92 4E75                       		rts
00011F94                            ; End of function SolidObject_Monitor_Knuckles
00011F94                            
00011F94                            
00011F94                            ; =============== S U B	R O U T	I N E =======================================
00011F94                            
00011F94                            
00011F94                            ;SolidObject_Monitor_Tails_Useless:		  ; ...
00011F94                            ;		btst	d6,$22(a0)
00011F94                            ;		beq.w	loc_314E36
00011F94                            
00011F94                            ExitPlatform3:					  ; ...
00011F94 3401                       		move.w	d1,d2
00011F96 D442                       		add.w	d2,d2
00011F98 0829 0001 0022             		btst	#1,$22(a1)
00011F9E 6600                       		bne.s	loc_30FACA
00011FA0 3029 0008                  		move.w	8(a1),d0
00011FA4 9068 0008                  		sub.w	8(a0),d0
00011FA8 D041                       		add.w	d1,d0
00011FAA 6B00                       		bmi.s	loc_30FACA
00011FAC B042                       		cmp.w	d2,d0
00011FAE 6500                       		bcs.s	loc_30FADE
00011FB0                            
00011FB0                            loc_30FACA:					  ; ...
00011FB0 08A9 0003 0022             		bclr	#3,$22(a1)
00011FB6 08E9 0001 0022             		bset	#1,$22(a1)
00011FBC 117C 0002 0024             		move.b	#2,$24(a0)
00011FC2 0DA8 0022                  		bclr	d6,$22(a0)
00011FC6 7800                       		moveq	#0,d4
00011FC8 4E75                       		rts
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            
00011FCA                            loc_30FADE:					  ; ...
00011FCA 3404                       		move.w	d4,d2
00011FCC 4EBA D466                  		jsr	MvSonicOnPtfm
00011FD0 7800                       		moveq	#0,d4
00011FD2 4E75                       		rts
00011FD4                            ; End of function SolidObject_Monitor_Tails_Useless
00011FD4                            
00011FD4                            ; ---------------------------------------------------------------------------
00011FD4                            
00011FD4                            loc_30FAE8:					  ; ...
00011FD4 1028 0022                  		move.b	$22(a0),d0
00011FD8 0200 0078                  		and.b	#%1111000,d0
00011FDC 6700                       		beq.s	loc_30FB18
00011FDE 1200                       		move.b	d0,d1
00011FE0 0201 0028                  		and.b	#%101000,d1
00011FE4 6700                       		beq.s	loc_30FB06
00011FE6 0238 00D7 D022             		and.b	#%11010111,(MainCharacter+status).w
00011FEC 0038 0002 D022             		or.b	#2,(MainCharacter+status).w
00011FF2                            
00011FF2                            loc_30FB06:					  ; ...
00011FF2                            ;		and.b	#%1010000,d0
00011FF2                            ;		beq.s	loc_30FB18
00011FF2                            ;		and.b	#%11010111,($FFFFD062).w
00011FF2                            ;		or.b	#2,($FFFFD062).w
00011FF2                            
00011FF2                            loc_30FB18:					  ; ...
00011FF2 4228 0022                  		clr.b	$22(a0)
00011FF6 5428 0024                  		addq.b	#2,$24(a0)
00011FFA 117C 0000 0020             		move.b	#0,$20(a0)
00012000 4EB9 0000 0000             		jsr	SingleObjLoad
00012006 6600                       		bne.s	loc_30FB4A
00012008 12BC 002E                  		move.b	#$2E,0(a1)
0001200C 3368 0008 0008             		move.w	8(a0),8(a1)
00012012 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012018 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0001201E                            ;		move.w	$3E(a0),$3E(a1)
0001201E                            
0001201E                            loc_30FB4A:					  ; ...
0001201E 4EB9 0000 0000             		jsr	SingleObjLoad
00012024 6600                       		bne.s	loc_30FB66
00012026 12BC 0027                  		move.b	#$27,0(a1)
0001202A 5429 0024                  		addq.b	#2,$24(a1)
0001202E 3368 0008 0008             		move.w	8(a0),8(a1)
00012034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001203A                            
0001203A                            loc_30FB66:					  ; ...
0001203A                            ;		lea	(v_objstate).w,a2
0001203A 7000                       		moveq	#0,d0
0001203C 3028 0014                          move.w	respawn_index(a0),d0
00012040 3440                       	    movea.w	d0,a2
00012042 08D2 0000                  		bset	#0,(a2)
00012046 117C 0009 001C             		move.b	#9,$1C(a0)
0001204C 4EF9 0000 0000             		jmp	DisplaySprite
00012052                            ;----------------------------------------------------
00012052                            ; Object 2E - contents of monitors
00012052                            ;----------------------------------------------------
00012052                            
00012052                            Obj2E:					; DATA XREF: ROM:Obj_Indexo
00012052 7000                       		moveq	#0,d0
00012054 1028 0024                  		move.b	$24(a0),d0
00012058 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0001205C 4EFB 1000                  		jmp	Obj2E_Index(pc,d1.w)
00012060                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012060 0000                       Obj2E_Index:	dc.w loc_B04E-Obj2E_Index ; DATA XREF: ROM:Obj2E_Indexo
00012062                            					; ROM:0000B04Ao ...
00012062 0000                       		dc.w loc_B092-Obj2E_Index
00012064 0000                       		dc.w Obj2E_Delete-Obj2E_Index
00012066                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00012066                            
00012066                            loc_B04E:				; DATA XREF: ROM:Obj2E_Indexo
00012066 5428 0024                  		addq.b	#2,$24(a0)
0001206A 317C 0680 0002             		move.w	#$680,2(a0)
00012070 117C 0024 0001             		move.b	#$24,1(a0)
00012076 317C 0180 0018             		move.w	#$180,priority(a0)
0001207C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00012082 317C FD00 0012             		move.w	#-$300,$12(a0)
00012088 7000                       		moveq	#0,d0
0001208A 1028 001C                  		move.b	$1C(a0),d0
0001208E 5400                       		addq.b	#2,d0
00012090 1140 001A                  		move.b	d0,$1A(a0)
00012094 227C 0000 0000             		movea.l	#Map_obj26,a1
0001209A D000                       		add.b	d0,d0
0001209C D2F1 0000                  		adda.w	(a1,d0.w),a1
000120A0 5249                       		addq.w	#1,a1
000120A2 2149 0004                  		move.l	a1,4(a0)
000120A6                            
000120A6                            loc_B092:				; DATA XREF: ROM:0000B04Ao
000120A6 6100                       		bsr.s	sub_B098
000120A8 6000 0000                  		bra.w	DisplaySprite
000120AC                            
000120AC                            ; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
000120AC                            
000120AC                            
000120AC                            sub_B098:				; CODE XREF: ROM:loc_B092p
000120AC 4A68 0012                  		tst.w	$12(a0)
000120B0 6A00 0000                  		bpl.w	loc_B0AC
000120B4 6100 0000                  		bsr.w	SpeedToPos
000120B8 0668 0018 0012             		addi.w	#$18,$12(a0)
000120BE 4E75                       		rts
000120C0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000120C0                            
000120C0                            loc_B0AC:				; CODE XREF: sub_B098+4j
000120C0 5428 0024                  		addq.b	#2,$24(a0)
000120C4 317C 001D 001E             		move.w	#$1D,$1E(a0)
000120CA 7000                       		moveq	#0,d0
000120CC 1028 001C                  		move.b	$1C(a0),d0
000120D0 0C28 0009 001C             		cmpi.b	#9,$1C(a0)	; this is to avoid address errors
000120D6 6F00                       		ble.s	loc_B0AC_2	
000120D8 103C 0009                  		move.b	#9,d0
000120DC                            loc_B0AC_2:
000120DC D040                       		add.w	d0,d0
000120DE 303B 0000                  		move.w	Monitor_Subroutines(pc,d0.w),d0
000120E2 4EFB 0000                  		jmp	Monitor_Subroutines(pc,d0.w)
000120E6                            ; End of function sub_B098
000120E6                            
000120E6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000120E6 0000                       Monitor_Subroutines:dc.w Obj2E_ChkEggman-Monitor_Subroutines
000120E8                            					; DATA XREF: ROM:Monitor_Subroutineso
000120E8                            					; ROM:0000B0C8o ...
000120E8 0000                       		dc.w Obj2E_ChkEggman-Monitor_Subroutines
000120EA 0000                       		dc.w Obj2E_ChkSonic-Monitor_Subroutines
000120EC 0000                       		dc.w Obj2E_ChkShoes-Monitor_Subroutines
000120EE 0000                       		dc.w Obj2E_ChkShield-Monitor_Subroutines
000120F0 0000                       		dc.w Obj2E_ChkInvinc-Monitor_Subroutines
000120F2 0000                       		dc.w Obj2E_ChkRings-Monitor_Subroutines
000120F4 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
000120F6 0000                       		dc.w Obj2E_ChkS-Monitor_Subroutines
000120F8 0000                       		dc.w Monitor_Null-Monitor_Subroutines
000120FA                            
000120FA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000120FA                            
000120FA                            Monitor_Null:				; DATA XREF: ROM:Monitor_Subroutineso
000120FA                            					; ROM:0000B0CCo ...
000120FA 4E75                       		rts
000120FC                            
000120FC                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
000120FC                            ;	addq.w	#1,(a2)
000120FC 4EF9 0000 0000             	jmp	Touch_ChkHurt2
00012102                            ;	rts ; The Eggman monitor now does something!
00012102                            ; ===========================================================================
00012102                            
00012102                            Obj2E_ChkSonic:
00012102                            ;		cmpi.b	#2,d0		; does monitor contain Sonic?
00012102                            ;		bne.s	Obj2E_ChkShoes
00012102                            
00012102                            ExtraLife:
00012102 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
00012108 6C00 0000                  		bge.w	@playbgm2
0001210C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00012110 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00012114                            @playbgm2:
00012114 303C 002A                  		move.w	#$2A,d0
00012118 4EF9 0000 3212             		jmp	(PlaySound).l	; play extra life music
0001211E                            ; ===========================================================================
0001211E                            
0001211E                            Obj2E_ChkShoes:
0001211E                            ;		addq.w	#1,(a2)
0001211E 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
00012122 6600 0000                  		bne.w	Obj2E_NoMusic
00012126 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w	; speed up the	BG music
0001212C 11FC 0096 D034             		move.b	#$96,(MainCharacter+speedshoes_time).w	; time limit for the power-up
00012132 48E7 00E0                  	movem.l a0-a2,-(sp)		; Move a0, a1 and a2 onto stack
00012136 41F8 D000                  	lea	(MainCharacter).w,a0	; Load Sonic to a0
0001213A 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001213E 4EB9 0000 0000             	jsr	ApplySpeedSettings	; Fetch Speed settings
00012144 4CDF 0700                  	movem.l (sp)+,a0-a2		; Move a0, a1 and a2 from stack
00012148 303C 0008                  		move.w	#8,d0
0001214C 4EF9 0000 329E             		jmp	(SetTempo).l	; Speed	up the music
00012152                            ; ===========================================================================
00012152                            
00012152                            Obj2E_ChkShield:
00012152                            ;		tst.b	($FFFFFE19).w		; is sonic super?
00012152                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
00012152                            ;		tst.b	($FFFFD032).w		; is sonic invincible?
00012152                            ;		bne.w	Obj2E_ChkShield_Cont		; if yes, branch
00012152                            ;		moveq	#$28,d0
00012152                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
00012152                            ;Obj2E_ChkShield_Cont:
00012152                            ;		addq.w	#1,(a2)
00012152 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
00012158 11FC 0002 D180             		move.b	#$2,($FFFFD180).w ; load shield object	($38)
0001215E 303C 0071                  		move.w	#$71,d0
00012162 4EF9 0000 3212             		jmp	(PlaySound).l	; play shield sound
00012168                            ; ===========================================================================
00012168                            
00012168                            Obj2E_ChkInvinc:
00012168                            ;		addq.w	#1,(a2)
00012168 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001216C 6600 0000                  		bne.w	Obj2E_NoMusic		; if yes, branch
00012170 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
00012174 6700 0000                  		beq.w	Obj2E_NoMusic		; if yes, branch
00012178 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0001217E 11FC 0096 D032             		move.b	#$96,(MainCharacter+invincibility_time).w ; time limit for the power-up
00012184 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0001218A                            ;		move.b	#1,($FFFFD21C).w
0001218A                            ;		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0001218A                            ;		move.b	#2,($FFFFD25C).w
0001218A                            ;		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0001218A                            ;		move.b	#3,($FFFFD29C).w
0001218A                            ;		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0001218A                            ;		move.b	#4,($FFFFD2DC).w
0001218A 0C38 0002 FF88             		cmpi.b	#2,($FFFFFF88).w
00012190 6E00 0000                  		bgt.w	Obj2E_NoInvcMusic
00012194 5238 FF88                  		add.b	#1,($FFFFFF88).w
00012198 0C38 0001 FF88             		cmpi.b	#1,($FFFFFF88).w
0001219E 6E00 0000                  		bgt.w	Obj2E_NoMusic
000121A2 4A38 F7AA                  		tst.b	($FFFFF7AA).w		; is boss mode on?
000121A6 6600                       		bne.s   Obj2E_NoMusic		; If so, don't play music
000121A8 0C78 000C FE14             		cmpi.w  #$C,($FFFFFE14).w	; Check if Sonic has air left
000121AE 6300                       		bls.s   Obj2E_NoMusic		; If so, don't play music
000121B0 303C 002C                  		move.w	#$2C,d0
000121B4 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play invincibility music
000121BA                            
000121BA                            Obj2E_NoMusic:
000121BA 4E75                       		rts	
000121BC                            		
000121BC                            Obj2E_NoInvcMusic:
000121BC 11FC 0002 FF88             		move.b	#2,($FFFFFF88).w
000121C2 4E75                       		rts	
000121C4                            ; ===========================================================================
000121C4                            
000121C4                            Obj2E_ChkRings:
000121C4                            ;		cmpi.b	#6,d0		; does monitor contain 10 rings?
000121C4                            ;		bne.w	Obj2E_ChkS
000121C4                            ;		cmpi.b	#7,d0		; does monitor contain 10 rings?
000121C4                            ;		beq.w	Obj2E_ChkS
000121C4                            ;	addq.w	#1,(a2)
000121C4                            
000121C4                            loc_12992:
000121C4 0678 000A FF98             	addi.w	#$A,(Rings_Collected).w
000121CA 0C78 03E7 FF98             	cmpi.w	#999,(Rings_Collected).w
000121D0 6500                       	bcs.s	loc_129A0
000121D2 31FC 03E7 FF98             	move.w	#999,(Rings_Collected).w
000121D8                            
000121D8                            loc_129A0:
000121D8 0678 000A FE20             	addi.w	#$A,(Ring_count).w
000121DE 0C78 03E7 FE20             	cmpi.w	#999,(Ring_count).w
000121E4 6500                       	bcs.s	loc_129AE
000121E6 31FC 03E7 FE20             	move.w	#999,(Ring_count).w
000121EC                            
000121EC                            loc_129AE:
000121EC 0038 0001 FE1D             	ori.b   #1,($FFFFFE1D).w
000121F2                            ;	move.w  #$B5,d0 ; '¦'
000121F2 7200                       	moveq   #0,d1
000121F4 1238 FFE0                  	move.b  ($FFFFFFE0).w,d1
000121F8 E549                       	lsl.w   #2,d1
000121FA B278 FE20                  	cmp.w   ($FFFFFE20).w,d1
000121FE 6E00                       	bgt.s   loc_129CA
00012200 0638 0019 FFE0             	addi.b  #$19,($FFFFFFE0).w
00012206 4EF9 0000 0000             	jmp		loc_129D4
0001220C                            ;	cmpi.b	#$63,(Life_count).w
0001220C                            ;	bge.w	loc_129D4
0001220C                            
0001220C                            
0001220C                            loc_129CA:
0001220C                            
0001220C 303C 0034                  	move.w	#$34,d0
00012210 4EF9 0000 0000             	jmp	(PlayMusic).l
00012216                            ; ---------------------------------------------------------------------------
00012216                            
00012216                            loc_129D4:
00012216 6000 FEEA                  	bra.w	ExtraLife
0001221A                            ; ===========================================================================
0001221A                            
0001221A                            Obj2E_ChkS:
0001221A                            ;		cmpi.b	#7,d0		; does monitor contain 'S'
0001221A                            ;		bne.w	Obj2E_ChkEnd
0001221A                            ;		addq.w	#1,(a2)
0001221A                            ;		tst.b	(Update_HUD_timer).w
0001221A                            ;		beq.w	S_MonnotSonic ; ?
0001221A 0678 0032 FF98             		addi.w	#$32,(Rings_Collected).w
00012220 0C78 03E7 FF98             		cmpi.w	#999,(Rings_Collected).w
00012226 6500 0000                  		blo.w	@cont
0001222A 31FC 03E7 FF98             		move.w	#999,(Rings_Collected).w
00012230 0678 0032 FE20             @cont:	addi.w	#$32,(Ring_count).w
00012236 0C78 03E7 FE20             		cmpi.w	#999,(Ring_count).w
0001223C 6500 0000                  		blo.w	@cont2
00012240 31FC 03E7 FE20             		move.w	#999,(Ring_count).w
00012246 0038 0001 FE1D             @cont2:	ori.b	#1,(Update_HUD_rings).w
0001224C                            ;		jmp		Obj2E_ChkS_Part2
0001224C                            
0001224C                            ;Obj2E_ChkS_Part2:
0001224C 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
00012250 6600 0000                  		bne.w	S_MonNoTransAnim		; if yes, branch
00012254 4A38 FE1E                  		tst.b	(Update_HUD_timer).w ; is the timer stopped?
00012258 6700 0000                  		beq.w	S_MonNoTransAnim	; if yes, branch
0001225C 0829 0006 0022             		btst	#6,status(a1)	; Check if underwater, return if not
00012262 6700                       		beq.s	locsup
00012264 31FC 0500 F760             		move.w	#$500,(Sonic_top_speed).w
0001226A 31FC 0018 F762             		move.w	#$18,(Sonic_acceleration).w
00012270 31FC 0080 F764             		move.w	#$80,(Sonic_deceleration).w
00012276                            locsup:
00012276                            ;		move.b	#1,(Transforming_Flag-1).w
00012276                            ;		addi.w	#$32,($FFFFFE20).w
00012276 11FC 0001 F65F             		move.b	#1,($FFFFF65F).w
0001227C 11FC 000F F65E             		move.b	#$F,($FFFFF65E).w
00012282 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
00012288 31FC 003C F670             		move.w	#$3C,(Super_Sonic_frame_count).w
0001228E 31FC 0800 F760             		move.w	#$800,($FFFFF760).w
00012294 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0001229A 31FC 00C0 F764             		move.w	#$C0,($FFFFF764).w
000122A0 11FC 0022 D01C             		move.b	#$22,(MainCharacter+anim).w
000122A6 4EB9 0000 0000             		jsr	Super_and_Invincibility_Stars_Jmp
000122AC 11FC 008E D200             		move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD040
000122B2                            ;	moveq	#$23,d0
000122B2                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
000122B2 0C78 0002 FFA0             		cmpi.w	#2,($FFFFFFA0).w
000122B8 6600                       		bne.s	loc_864F8
000122BA 11FC 0000 FE19             		move.b	#0,($FFFFFE19).w
000122C0 11FC 0001 F667             		move.b	#1,($FFFFF667).w
000122C6 11FC 0029 D01C             		move.b	#$29,(MainCharacter+anim).w
000122CC 31FC 0800 FEC0             		move.w	#$800,($FFFFFEC0).w
000122D2 31FC 0018 FEC2             		move.w	#$18,($FFFFFEC2).w
000122D8 31FC 00C0 FEC4             		move.w	#$C0,($FFFFFEC4).w
000122DE                            ;		move.l	#Obj_HyperTails_Birds,($FFFFCD7C).w
000122DE                            ;		bra.s	loc_8652C
000122DE                            ; ---------------------------------------------------------------------------
000122DE                            
000122DE                            loc_864F8:
000122DE 6400                       		bcc.s	loc_86524
000122E0 21FC 0000 0000 D004        		move.l	#Map_SuperSonic,(MainCharacter+mappings).w
000122E8                            ;		tst.w	(Debug_placement_mode).w
000122E8                            ;		beq.s	loc_864F8_2
000122E8                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
000122E8                            ;loc_864F8_2:
000122E8 11FC 0001 FE19             		move.b	#1,($FFFFFE19).w
000122EE 31FC 0A00 F760             		move.w	#$A00,($FFFFF760).w
000122F4 31FC 0030 F762             		move.w	#$30,($FFFFF762).w
000122FA 31FC 0100 F764             		move.w	#$100,($FFFFF764).w
00012300                            ;		move.l	#Obj_HyperSonic_19348,($FFFFCD7C).w
00012300 6000 0000                  		bra.w	loc_8652C
00012304                            ; ---------------------------------------------------------------------------
00012304                            
00012304                            loc_86524:
00012304                            ;		move.l	#Obj_HyperSonicKnux_Trail,($FFFFCBC0).w
00012304                            
00012304                            loc_8652C:
00012304                            
00012304 11FC 0001 F7C8             		move.b	#$1,($FFFFF7C8).w
0001230A 11FC 0000 D032             		move.b	#0,(MainCharacter+invincibility_time).w
00012310 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w	; make Sonic invincible
00012316                            ;		moveq	#$26,d0
00012316                            ;		jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
00012316 303C 0046                  		move.w	#$46,d0
0001231A 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; Play transformation sound effect.
00012320                            ;		tst.b	(Current_Boss_ID).w
00012320                            ;		bne.s	loc_8652C_2		; branch if in a boss fight
00012320 303C 002D                  		move.w	#$2D,d0
00012324 4EF9 0000 3212             		jmp    (PlaySound).l; load the Super Sonic song and return
0001232A                            ;loc_8652C_2:
0001232A 4E75                       	rts
0001232C                            ; ---------------------------------------------------------------------------
0001232C                            ; Called if the character is anyone other than Sonic 
0001232C                            ; or if the timer is stopped when the "S" Monitor is broken.
0001232C                            ; ----------------------------------------------------------------------------
0001232C                            ;S_MonnotSonic:	
0001232C                            ;		addi.w	#$32,(Rings_Collected).w
0001232C                            ;		cmpi.w	#999,(Rings_Collected).w
0001232C                            ;		blo.w	@cont
0001232C                            ;		move.w	#999,(Rings_Collected).w
0001232C                            ;@cont:	addi.w	#$32,(Ring_count).w
0001232C                            ;		cmpi.w	#999,(Ring_count).w
0001232C                            ;		blo.w	@cont2
0001232C                            ;		move.w	#999,(Ring_count).w
0001232C                            ;@cont2:	ori.b	#1,(Update_HUD_rings).w	
0001232C                            ;		move.w	#$B5,d0
0001232C                            ;		jmp	(PlayMusic).l
0001232C                            ; ---------------------------------------------------------------------------
0001232C                            
0001232C                            S_MonNoTransAnim:
0001232C 303C 0034                  		move.w	#$34,d0
00012330 4EF9 0000 0000             		jmp	(PlayMusic).l
00012336                            
00012336                            Obj2E_ChkEnd:
00012336 4E75                       	rts			;  goggles monitors do nothing
00012338                            ; ===========================================================================
00012338                            
00012338                            Obj2E_Delete:				; XREF: Obj2E_Index
00012338 5368 001E                  		subq.w	#1,anim_frame_duration(a0)
0001233C 6B00 0000                  		bmi.w	DeleteObject
00012340 6000 0000                  		bra.w	DisplaySprite
00012344                            ;		rts	
00012344                            
00012344                            ; ===========================================================================
00012344                            Ani_obj26:
00012344                            	include "_anim\obj26.asm"
00012344                            ; ---------------------------------------------------------------------------
00012344                            ; Animation script - monitors
00012344                            ; ---------------------------------------------------------------------------
00012344 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0001234A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
00012350 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
00012356 0000                       		dc.w byte_A582-Ani_obj26
00012358 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0001235E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0001236A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
00012376 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
00012382 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0001238E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0001239A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
000123A6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
000123B2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
000123BE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
000123C6                            		even
000123C6                            		even
000123C6                            
000123C6                            ; ---------------------------------------------------------------------------
000123C6                            ; Sprite mappings - monitors
000123C6                            ; ---------------------------------------------------------------------------
000123C6                            Map_obj26:
000123C6                            	include "_maps\obj26.asm"
000123C6                            ; --------------------------------------------------------------------------------
000123C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000123C6                            ; --------------------------------------------------------------------------------
000123C6                            
000123C6                            SME_vHL8M:	
000123C6 0000 0000                  		dc.w SME_vHL8M_18-SME_vHL8M, SME_vHL8M_1E-SME_vHL8M	
000123CA 0000 0000                  		dc.w SME_vHL8M_29-SME_vHL8M, SME_vHL8M_34-SME_vHL8M	
000123CE 0000 0000                  		dc.w SME_vHL8M_3F-SME_vHL8M, SME_vHL8M_4A-SME_vHL8M	
000123D2 0000 0000                  		dc.w SME_vHL8M_55-SME_vHL8M, SME_vHL8M_60-SME_vHL8M	
000123D6 0000 0000                  		dc.w SME_vHL8M_6B-SME_vHL8M, SME_vHL8M_76-SME_vHL8M	
000123DA 0000 0000                  		dc.w SME_vHL8M_81-SME_vHL8M, SME_vHL8M_8C-SME_vHL8M	
000123DE 01                         SME_vHL8M_18:	dc.b 1	
000123DF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000123E4 02                         SME_vHL8M_1E:	dc.b 2	
000123E5 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
000123EA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000123EF 02                         SME_vHL8M_29:	dc.b 2	
000123F0 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
000123F5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000123FA 02                         SME_vHL8M_34:	dc.b 2	
000123FB F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
00012400 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012405 02                         SME_vHL8M_3F:	dc.b 2	
00012406 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0001240B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012410 02                         SME_vHL8M_4A:	dc.b 2	
00012411 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
00012416 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0001241B 02                         SME_vHL8M_55:	dc.b 2	
0001241C F505 0028 F8               		dc.b $F5, 5, 0, $28, $F8	
00012421 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00012426 02                         SME_vHL8M_60:	dc.b 2	
00012427 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0001242C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012431 02                         SME_vHL8M_6B:	dc.b 2	
00012432 F505 2020 F8               		dc.b $F5, 5, $20,	$20, $F8
00012437 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001243C 02                         SME_vHL8M_76:	dc.b 2	
0001243D F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
00012442 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012447 02                         SME_vHL8M_81:	dc.b 2	
00012448 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0001244D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012452 01                         SME_vHL8M_8C:	dc.b 1	
00012453 FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
00012458                            		even
00012458                            		even
00012458                            
00012458                            ; ===========================================================================
00012458                            ; ---------------------------------------------------------------------------
00012458                            ; Object 0E - Sonic on the title screen
00012458                            ; ---------------------------------------------------------------------------
00012458                            
00012458                            Obj0E:					; XREF: Obj_Index
00012458 7000                       		moveq	#0,d0
0001245A 1028 0024                  		move.b	routine(a0),d0
0001245E 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
00012462 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
00012466                            ; ===========================================================================
00012466 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
00012468 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0001246A 0000                       		dc.w Obj0E_Move-Obj0E_Index
0001246C 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0001246E                            ; ===========================================================================
0001246E                            
0001246E                            Obj0E_Main:				; XREF: Obj0E_Index
0001246E 5428 0024                  		addq.b	#2,routine(a0)
00012472 317C 00F0 0008             		move.w	#$F0,8(a0)
00012478 317C 00DE 000A             		move.w	#$DE,$A(a0)
0001247E 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
00012486 317C 2300 0002             		move.w	#$2300,2(a0)
0001248C 317C 0080 0018             		move.w	#$80,priority(a0)
00012492 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
00012498 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0001249E 4EB9 0000 0000             		jsr	AnimateSprite
000124A4                            
000124A4                            Obj0E_Delay:				; XREF: Obj0E_Index
000124A4 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
000124A8 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
000124AA 5428 0024                  		addq.b	#2,routine(a0)	; go to	next routine
000124AE 6000 0000                  		bra.w	DisplaySprite
000124B2                            ; ===========================================================================
000124B2                            
000124B2                            Obj0E_Wait:				; XREF: Obj0E_Delay
000124B2 4E75                       		rts	
000124B4                            ; ===========================================================================
000124B4                            
000124B4                            Obj0E_Move:				; XREF: Obj0E_Index
000124B4 5168 000A                  		subq.w	#8,$A(a0)
000124B8 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
000124BE 6600                       		bne.s	Obj0E_Display
000124C0 5428 0024                  		addq.b	#2,routine(a0)
000124C4                            
000124C4                            Obj0E_Display:
000124C4 6000 0000                  		bra.w	DisplaySprite
000124C8                            ; ===========================================================================
000124C8 4E75                       		rts	
000124CA                            ; ===========================================================================
000124CA                            
000124CA                            Obj0E_Animate:				; XREF: Obj0E_Index
000124CA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
000124D0 4EB9 0000 0000             		jsr	AnimateSprite
000124D6 6000 0000                  		bra.w	DisplaySprite
000124DA                            ; ===========================================================================
000124DA 4E75                       		rts	
000124DC                            ; ===========================================================================
000124DC                            ; ---------------------------------------------------------------------------
000124DC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
000124DC                            ; ---------------------------------------------------------------------------
000124DC                            
000124DC                            Obj0F:					; XREF: Obj_Index
000124DC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000124E2 6700                       		beq.s	Obj0F_InitMenu
000124E4 4EF9 0000 0000             		jmp		Obj8F
000124EA                            	
000124EA                            Obj0F_InitMenu:
000124EA 7000                       		moveq	#0,d0
000124EC 1028 0024                  		move.b	routine(a0),d0
000124F0 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
000124F4 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
000124F8 6000 0000                  		bra.w	DisplaySprite
000124FC                            ; ===========================================================================
000124FC 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
000124FE 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
00012500 0000                       		dc.w locret_A6F8-Obj0F_Index
00012502 0000                       		dc.w Obj0F_Menu-Obj0F_Index
00012504                            ; ===========================================================================
00012504                            
00012504                            Obj0F_Main:				; XREF: Obj0F_Index
00012504 5428 0024                  		addq.b	#2,routine(a0)
00012508 317C 00D0 0008             		move.w	#$D0,8(a0)
0001250E 317C 0130 000A             		move.w	#$130,$A(a0)
00012514 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0001251C 317C 0200 0002             		move.w	#$200,2(a0)
00012522 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)	; is object "PRESS START"?
00012528 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0001252A 5428 0024                  		addq.b	#2,routine(a0)
0001252E 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)	; is the object	"TM"?
00012534 6600                       		bne.s	locret_A6F8	; if not, branch
00012536 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0001253C 317C 0170 0008             		move.w	#$170,8(a0)
00012542 317C 00F8 000A             		move.w	#$F8,$A(a0)
00012548                            
00012548                            locret_A6F8:				; XREF: Obj0F_Index
00012548 4E75                       		rts	
0001254A                            ; ===========================================================================
0001254A                            
0001254A                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0001254A 0C38 0001 FFF0             		cmpi.b	#1,($FFFFFFF0).w
00012550 6700                       		beq.s	Obj0F_PrsStart_Show
00012552 0838 0007 F605             		btst	#7,($FFFFF605).w	; check if Start is pressed
00012558 6700                       		beq.s	Obj0F_PrsStart_Show	; if not, branch
0001255A 5828 0024                  		addq.b	#4,routine(a0)			; go to Menu in next frame
0001255E 103C 0010                  		move.b	#$10,d0		; play menu music
00012562 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
00012566 317C 0512 0002             		move.w	#$512,2(a0)
0001256C 217C 0000 0000 0004        		move.l	#Map_obj0F_Menu,4(a0)
00012574 317C 00F5 0008             		move.w	#$F5,8(a0)
0001257A 317C 0150 000A             		move.w	#$150,$A(a0)
00012580 4E75                       		rts
00012582                            
00012582                            Obj0F_PrsStart_Show:
00012582 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
00012588 6000 0000                  		bra.w	AnimateSprite
0001258C                            ; ===========================================================================
0001258C                            
0001258C                            Obj0F_Menu:
0001258C 7400                       		moveq	#0,d2
0001258E 1438 FF86                  		move.b	(Title_screen_option).w,d2
00012592 1038 F605                  		move.b	($FFFFF605).w,d0
00012596                            	;	or.b	(Ctrl_2_Press).w,d0 	; this is for the other player but only one player is supported so this has been removed.
00012596 0800 0000                  		btst	#0,d0
0001259A 6700                       		beq.s	loc_13645
0001259C 5302                       		subq.b	#1,d2
0001259E 6400                       		bcc.s	loc_13645
000125A0 143C 0004                  		move.b	#4,d2
000125A4                            
000125A4                            loc_13645:
000125A4 0800 0001                  		btst	#1,d0
000125A8 6700                       		beq.s	loc_13646
000125AA 5202                       		addq.b	#1,d2
000125AC 0C02 0005                  		cmpi.b	#5,d2
000125B0 6500                       		blo.s	loc_13646
000125B2 7400                       		moveq	#0,d2
000125B4                            
000125B4                            loc_13646:
000125B4 1142 001A                  		move.b	d2,mapping_frame(a0)
000125B8 11C2 FF86                  		move.b	d2,(Title_screen_option).w
000125BC 0200 0003                  		andi.b	#3,d0
000125C0 6700                       		beq.s	loc_13647	; rts
000125C2 303C 005B                  		move.w	#$5B,d0 ; selection blip sound
000125C6 6100 0000                  		bsr.w	Jmpto_PlaySound3
000125CA                            
000125CA                            loc_13647:
000125CA 0838 0007 F605             		btst	#7,($FFFFF605).w ; check if Start is pressed
000125D0 6700                       		beq.s	Obj0F_Menu_rts	; if not, branch
000125D2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w		; Do you have all the Chaos Emeralds?
000125D8 6C00 0000                  		bge.w	loc_13647_3	; if not, branch
000125DC                            loc_13647_2:
000125DC 4EF9 0000 0000             		jmp	DeleteObject	; if yes, delete the Title Screen Menu
000125E2                            loc_13647_3:
000125E2 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
000125E8 6600 FFF2                  		bne.w	loc_13647_2
000125EC 103C 00B2                  		move.b	#$B2,d0
000125F0 6100 0000                  		bsr.w	Jmpto_PlaySound_Special2
000125F4                            
000125F4                            Obj0F_Menu_rts:
000125F4 4E75                       		rts
000125F6                            ; ===========================================================================
000125F6                            Ani_obj0E:
000125F6                            	include "_anim\obj0E.asm"
000125F6                            ; ---------------------------------------------------------------------------
000125F6                            ; Animation script - Sonic on the title screen
000125F6                            ; ---------------------------------------------------------------------------
000125F6 0000                       		dc.w byte_A706-Ani_obj0E
000125F8 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
00012604                            		even
00012604                            		even
00012604                            
00012604                            Ani_obj0F:
00012604                            	include "_anim\obj0F.asm"
00012604                            ; ---------------------------------------------------------------------------
00012604                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
00012604                            ; ---------------------------------------------------------------------------
00012604 0000                       		dc.w byte_A714-Ani_obj0F
00012606 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0001260A                            		even
0001260A                            		even
0001260A                            
0001260A                            JmpTo_DeleteObject:
0001260A 4EF9 0000 0000             	jmp	DeleteObject
00012610                            Jmpto_PlaySound_Special2:
00012610 4EF8 325C                  	jmp	PlaySound_Special
00012614                            	
00012614                            Jmpto_PlaySound3:
00012614 4EF8 3212                  	jmp	PlaySound
00012618                            ; ---------------------------------------------------------------------------
00012618                            ; Subroutine to	animate	a sprite using an animation script
00012618                            ; ---------------------------------------------------------------------------
00012618                            
00012618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012618                            
00012618                            
00012618                            AnimateSprite:
00012618 7000                       		moveq	#0,d0
0001261A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0001261E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00012622 6700                       		beq.s	Anim_Run	; if not, branch
00012624 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00012628 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001262E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00012634                            
00012634                            Anim_Run:
00012634 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00012638 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0001263A D040                       		add.w	d0,d0
0001263C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00012640 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
00012644 7200                       		moveq	#0,d1
00012646 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001264A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001264E 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
00012652 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
00012656                             
00012656                            Anim_Next:
00012656 1200                       		move.b	d0,d1
00012658 0200 001F                  		andi.b	#$1F,d0
0001265C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00012660 1028 0022                  		move.b	$22(a0),d0
00012664 E719                       		rol.b	#3,d1
00012666 B101                       		eor.b	d0,d1
00012668 0201 0003                  		andi.b	#3,d1
0001266C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00012672 8328 0001                  		or.b	d1,1(a0)
00012676 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001267A                            
0001267A                            Anim_Wait:
0001267A 4E75                       		rts	
0001267C                            ; ===========================================================================
0001267C                            
0001267C                            Anim_End_FF:
0001267C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001267E 6600                       		bne.s	Anim_End_FE	; if not, branch
00012680 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00012686 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001268A 60CA                       		bra.s	Anim_Next
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            Anim_End_FE:
0001268C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001268E 6600                       		bne.s	Anim_End_FD	; if not, branch
00012690 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00012694 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00012698 9200                       		sub.b	d0,d1
0001269A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001269E 60B6                       		bra.s	Anim_Next
000126A0                            ; ===========================================================================
000126A0                            
000126A0                            Anim_End_FD:
000126A0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000126A2 6600                       		bne.s	Anim_End_FC	; if not, branch
000126A4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000126AA                            
000126AA                            Anim_End_FC:
000126AA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
000126AC 6600                       		bne.s	Anim_End_FB	; if not, branch
000126AE 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
000126B2                            
000126B2                            Anim_End_FB:
000126B2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
000126B4 6600                       		bne.s	Anim_End_FA	; if not, branch
000126B6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000126BC 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
000126C0                            
000126C0                            Anim_End_FA:
000126C0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
000126C2 6600                       		bne.s	Anim_End	; if not, branch
000126C4 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
000126C8                            
000126C8                            Anim_End:
000126C8 4E75                       		rts	
000126CA                            ; End of function AnimateSprite
000126CA                            
000126CA                            ; ===========================================================================
000126CA                            ; ---------------------------------------------------------------------------
000126CA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
000126CA                            ; ---------------------------------------------------------------------------
000126CA                            Map_obj0F:
000126CA                            	include "_maps\obj0F.asm"
000126CA                            ; ---------------------------------------------------------------------------
000126CA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
000126CA                            ; ---------------------------------------------------------------------------
000126CA 0000                       		dc.w byte_A7CD-Map_obj0F
000126CC 0000                       		dc.w byte_A7CC-Map_obj0F
000126CE 0000                       		dc.w byte_A7EB-Map_obj0F
000126D0 0000                       		dc.w byte_A882-Map_obj0F
000126D2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
000126D3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
000126D8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
000126DD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
000126E2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
000126E7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
000126EC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
000126F1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
000126F2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000126F7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000126FC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012701 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012706 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001270B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012710 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012715 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001271A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0001271F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00012724 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012729 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001272E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012733 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012738 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001273D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012742 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012747 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0001274C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012751 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
00012756 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001275B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012760 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012765 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001276A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001276F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012774 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012779 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0001277E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012783 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00012788 01                         byte_A882:	dc.b 1			; "TM"
00012789 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001278E                            		even
0001278E                            		even
0001278E                            Map_obj0F_Menu:
0001278E                            	include "_maps\obj0F_Menu.asm"
0001278E                            ; --------------------------------------------------------------------------------
0001278E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001278E                            ; --------------------------------------------------------------------------------
0001278E                            
0001278E                            SME_113pL:	
0001278E 0000 0000                  		dc.w SME_113pL_A-SME_113pL, SME_113pL_6F-SME_113pL	
00012792 0000 0000                  		dc.w SME_113pL_D4-SME_113pL, SME_113pL_134-SME_113pL	
00012796 0000                       		dc.w SME_113pL_194-SME_113pL	
00012798 14                         SME_113pL_A:	dc.b $14	
00012799 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0001279E E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
000127A3 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
000127A8 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
000127AD E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
000127B2 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
000127B7 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
000127BC E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
000127C1 F000 2019 F0               		dc.b $F0, 0, $20, $19, $F0	
000127C6 F000 2012 F8               		dc.b $F0, 0, $20, $12, $F8	
000127CB F000 2023 00               		dc.b $F0, 0, $20, $23, 0	
000127D0 F000 2012 08               		dc.b $F0, 0, $20, $12, 8	
000127D5 F000 2019 10               		dc.b $F0, 0, $20, $19, $10	
000127DA F000 2020 20               		dc.b $F0, 0, $20, $20, $20	
000127DF F000 2012 28               		dc.b $F0, 0, $20, $12, $28	
000127E4 F000 2019 30               		dc.b $F0, 0, $20, $19, $30	
000127E9 F000 2012 38               		dc.b $F0, 0, $20, $12, $38	
000127EE F000 2010 40               		dc.b $F0, 0, $20, $10, $40	
000127F3 F000 2021 48               		dc.b $F0, 0, $20, $21, $48	
000127F8 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
000127FD 14                         SME_113pL_6F:	dc.b $14	
000127FE E004 2020 F8               		dc.b $E0, 4, $20, $20, $F8	
00012803 E000 200E 08               		dc.b $E0, 0, $20, $E, 8	
00012808 E000 201F 10               		dc.b $E0, 0, $20, $1F, $10	
0001280D E000 2021 18               		dc.b $E0, 0, $20, $21, $18	
00012812 E000 2014 28               		dc.b $E0, 0, $20, $14, $28	
00012817 E000 200E 30               		dc.b $E0, 0, $20, $E, $30	
0001281C E000 201A 38               		dc.b $E0, 0, $20, $1A, $38	
00012821 E000 2012 40               		dc.b $E0, 0, $20, $12, $40	
00012826 F000 0019 F0               		dc.b $F0, 0, 0, $19, $F0	
0001282B F000 0012 F8               		dc.b $F0, 0, 0, $12, $F8	
00012830 F000 0023 00               		dc.b $F0, 0, 0, $23, 0	
00012835 F000 0012 08               		dc.b $F0, 0, 0, $12, 8	
0001283A F000 0019 10               		dc.b $F0, 0, 0, $19, $10	
0001283F F000 0020 20               		dc.b $F0, 0, 0, $20, $20	
00012844 F000 0012 28               		dc.b $F0, 0, 0, $12, $28	
00012849 F000 0019 30               		dc.b $F0, 0, 0, $19, $30	
0001284E F000 0012 38               		dc.b $F0, 0, 0, $12, $38	
00012853 F000 0010 40               		dc.b $F0, 0, 0, $10, $40	
00012858 F000 0021 48               		dc.b $F0, 0, 0, $21, $48	
0001285D F004 0028 D8               		dc.b $F0, 4, 0, $28, $D8	
00012862 13                         SME_113pL_D4:	dc.b $13	
00012863 F000 2020 EC               		dc.b $F0, 0, $20, $20, $EC	
00012868 F000 201D F4               		dc.b $F0, 0, $20, $1D, $F4	
0001286D F000 2012 FC               		dc.b $F0, 0, $20, $12, $FC	
00012872 F000 2010 04               		dc.b $F0, 0, $20, $10, 4	
00012877 F000 2016 0C               		dc.b $F0, 0, $20, $16, $C	
0001287C F000 200E 14               		dc.b $F0, 0, $20, $E, $14	
00012881 F000 2019 1C               		dc.b $F0, 0, $20, $19, $1C	
00012886 F004 2020 2C               		dc.b $F0, 4, $20, $20, $2C	
0001288B F000 200E 3C               		dc.b $F0, 0, $20, $E, $3C	
00012890 F000 2014 44               		dc.b $F0, 0, $20, $14, $44	
00012895 F000 2012 4C               		dc.b $F0, 0, $20, $12, $4C	
0001289A E000 001C 04               		dc.b $E0, 0, 0, $1C, 4	
0001289F E000 001D 0C               		dc.b $E0, 0, 0, $1D, $C	
000128A4 E000 0021 14               		dc.b $E0, 0, 0, $21, $14	
000128A9 E000 0016 1C               		dc.b $E0, 0, 0, $16, $1C	
000128AE E000 001C 24               		dc.b $E0, 0, 0, $1C, $24	
000128B3 E000 001B 2C               		dc.b $E0, 0, 0, $1B, $2C	
000128B8 E000 0020 34               		dc.b $E0, 0, 0, $20, $34	
000128BD E004 0028 EC               		dc.b $E0, 4, 0, $28, $EC	
000128C2 13                         SME_113pL_134:	dc.b $13	
000128C3 F000 0020 EC               		dc.b $F0, 0, 0, $20, $EC	
000128C8 F000 001D F4               		dc.b $F0, 0, 0, $1D, $F4	
000128CD F000 0012 FC               		dc.b $F0, 0, 0, $12, $FC	
000128D2 F000 0010 04               		dc.b $F0, 0, 0, $10, 4	
000128D7 F000 0016 0C               		dc.b $F0, 0, 0, $16, $C	
000128DC F000 000E 14               		dc.b $F0, 0, 0, $E, $14	
000128E1 F000 0019 1C               		dc.b $F0, 0, 0, $19, $1C	
000128E6 F004 0020 2C               		dc.b $F0, 4, 0, $20, $2C	
000128EB F000 000E 3C               		dc.b $F0, 0, 0, $E, $3C	
000128F0 F000 0014 44               		dc.b $F0, 0, 0, $14, $44	
000128F5 F000 0012 4C               		dc.b $F0, 0, 0, $12, $4C	
000128FA E000 201C 04               		dc.b $E0, 0, $20, $1C, 4	
000128FF E000 201D 0C               		dc.b $E0, 0, $20, $1D, $C	
00012904 E000 2021 14               		dc.b $E0, 0, $20, $21, $14	
00012909 E000 2016 1C               		dc.b $E0, 0, $20, $16, $1C	
0001290E E000 201C 24               		dc.b $E0, 0, $20, $1C, $24	
00012913 E000 201B 2C               		dc.b $E0, 0, $20, $1B, $2C	
00012918 E000 2020 34               		dc.b $E0, 0, $20, $20, $34	
0001291D F004 0028 D4               		dc.b $F0, 4, 0, $28, $D4	
00012922 0F                         SME_113pL_194:	dc.b $F	
00012923 E000 001C 0C               		dc.b $E0, 0, 0, $1C, $C	
00012928 E000 0019 14               		dc.b $E0, 0, 0, $19, $14	
0001292D E000 0011 1C               		dc.b $E0, 0, 0, $11, $1C	
00012932 F000 0019 EC               		dc.b $F0, 0, 0, $19, $EC	
00012937 F000 0012 F4               		dc.b $F0, 0, 0, $12, $F4	
0001293C F000 0023 FC               		dc.b $F0, 0, 0, $23, $FC	
00012941 F000 0012 04               		dc.b $F0, 0, 0, $12, 4	
00012946 F000 0019 0C               		dc.b $F0, 0, 0, $19, $C	
0001294B F000 0020 1C               		dc.b $F0, 0, 0, $20, $1C	
00012950 F000 0012 24               		dc.b $F0, 0, 0, $12, $24	
00012955 F000 0019 2C               		dc.b $F0, 0, 0, $19, $2C	
0001295A F000 0012 34               		dc.b $F0, 0, 0, $12, $34	
0001295F F000 0010 3C               		dc.b $F0, 0, 0, $10, $3C	
00012964 F000 0021 44               		dc.b $F0, 0, 0, $21, $44	
00012969 E804 0028 D4               		dc.b $E8, 4, 0, $28, $D4	
0001296E                            		even
0001296E                            		even
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            ; Sprite mappings - Sonic on the title screen
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            Map_obj0E:
0001296E                            	include "_maps\obj0E.asm"
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            ; Sprite mappings - Sonic on the title screen
0001296E                            ; ---------------------------------------------------------------------------
0001296E 0000                       		dc.w byte_A898-Map_obj0E
00012970 0000                       		dc.w byte_A8CB-Map_obj0E
00012972 0000                       		dc.w byte_A917-Map_obj0E
00012974 0000                       		dc.w byte_A96D-Map_obj0E
00012976 0000                       		dc.w byte_A9AF-Map_obj0E
00012978 0000                       		dc.w byte_A9E7-Map_obj0E
0001297A 0000                       		dc.w byte_AA47-Map_obj0E
0001297C 0000                       		dc.w byte_AAB1-Map_obj0E
0001297E 0A                         byte_A898:	dc.b $A
0001297F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
00012984 100F 0003 08               		dc.b $10, $F, 0, 3, 8
00012989 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0001298E 300E 0023 08               		dc.b $30, $E, 0, $23, 8
00012993 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
00012998 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0001299D 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
000129A2 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
000129A7 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
000129AC 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
000129B1 0F                         byte_A8CB:	dc.b $F
000129B2 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
000129B7 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
000129BC 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
000129C1 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
000129C6 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
000129CB 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
000129D0 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
000129D5 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
000129DA 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
000129DF 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
000129E4 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
000129E9 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
000129EE 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
000129F3 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
000129F8 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
000129FD 11                         byte_A917:	dc.b $11
000129FE 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
00012A03 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
00012A08 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
00012A0D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
00012A12 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
00012A17 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
00012A1C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
00012A21 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
00012A26 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
00012A2B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
00012A30 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
00012A35 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
00012A3A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
00012A3F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
00012A44 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
00012A49 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00012A4E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00012A53 0D                         byte_A96D:	dc.b $D
00012A54 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
00012A59 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
00012A5E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
00012A63 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
00012A68 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
00012A6D 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
00012A72 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
00012A77 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
00012A7C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
00012A81 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
00012A86 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
00012A8B 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
00012A90 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
00012A95 0B                         byte_A9AF:	dc.b $B
00012A96 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
00012A9B 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
00012AA0 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
00012AA5 280E 0118 18               		dc.b $28, $E, 1, $18, $18
00012AAA 280E 0124 38               		dc.b $28, $E, 1, $24, $38
00012AAF 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
00012AB4 400E 0132 10               		dc.b $40, $E, 1, $32, $10
00012AB9 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
00012ABE 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
00012AC3 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
00012AC8 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
00012ACD 13                         byte_A9E7:	dc.b $13
00012ACE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012AD3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012AD8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012ADD 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012AE2 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012AE7 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012AEC 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012AF1 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012AF6 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012AFB 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012B00 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012B05 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012B0A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012B0F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012B14 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012B19 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012B1E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012B23 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012B28 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012B2D 15                         byte_AA47:	dc.b $15
00012B2E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00012B33 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00012B38 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00012B3D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00012B42 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012B47 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012B4C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012B51 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012B56 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012B5B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012B60 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012B65 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012B6A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012B6F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012B74 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012B79 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012B7E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012B83 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012B88 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012B8D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012B92 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012B97 16                         byte_AAB1:	dc.b $16
00012B98 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
00012B9D 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
00012BA2 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
00012BA7 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
00012BAC 300B 0201 38               		dc.b $30, $B, 2, 1, $38
00012BB1 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00012BB6 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00012BBB 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00012BC0 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00012BC5 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00012BCA 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00012BCF 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00012BD4 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00012BD9 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00012BDE 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00012BE3 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00012BE8 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00012BED 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00012BF2 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00012BF7 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00012BFC 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00012C01 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00012C06                            		even
00012C06                            		even
00012C06                            
00012C06                            ; ===========================================================================
00012C06                            ; ---------------------------------------------------------------------------
00012C06                            ; Object 2B - Chopper enemy (GHZ)
00012C06                            ; ---------------------------------------------------------------------------
00012C06                            
00012C06                            Obj2B:					; XREF: Obj_Index
00012C06 7000                       		moveq	#0,d0
00012C08 1028 0024                  		move.b	routine(a0),d0
00012C0C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
00012C10 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
00012C14 6000 0000                  		bra.w	MarkObjGone
00012C18                            ; ===========================================================================
00012C18 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
00012C1A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            Obj2B_Main:				; XREF: Obj2B_Index
00012C1C 5428 0024                  		addq.b	#2,routine(a0)
00012C20 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
00012C28 317C 047B 0002             		move.w	#$47B,2(a0)
00012C2E 117C 0004 0001             		move.b	#4,1(a0)
00012C34 317C 0200 0018             		move.w	#$200,priority(a0)
00012C3A 117C 0009 0020             		move.b	#9,collision_flags(a0)
00012C40 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012C46 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012C4C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012C52                            
00012C52                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
00012C52 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
00012C58 4EBA F9BE                  		jsr	AnimateSprite
00012C5C 4EB9 0000 0000             		jsr	SpeedToPos
00012C62 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; reduce speed
00012C68 3028 0030                  		move.w	$30(a0),d0
00012C6C B068 000C                  		cmp.w	$C(a0),d0
00012C70 6400                       		bcc.s	Obj2B_ChgAni
00012C72 3140 000C                  		move.w	d0,$C(a0)
00012C76 317C F900 0012             		move.w	#-$700,y_vel(a0)	; set vertical speed
00012C7C                            
00012C7C                            Obj2B_ChgAni:
00012C7C 117C 0001 001C             		move.b	#1,anim(a0)	; use fast animation
00012C82 0440 00C0                  		subi.w	#$C0,d0
00012C86 B068 000C                  		cmp.w	$C(a0),d0
00012C8A 6400                       		bcc.s	locret_ABB6
00012C8C 117C 0000 001C             		move.b	#0,anim(a0)	; use slow animation
00012C92 4A68 0012                  		tst.w	y_vel(a0)		; is Chopper at	its highest point?
00012C96 6B00                       		bmi.s	locret_ABB6	; if not, branch
00012C98 117C 0002 001C             		move.b	#2,anim(a0)	; use stationary animation
00012C9E                            
00012C9E                            locret_ABB6:
00012C9E 4E75                       		rts	
00012CA0                            ; ===========================================================================
00012CA0                            Ani_obj2B:
00012CA0                            	include "_anim\obj2B.asm"
00012CA0                            ; ---------------------------------------------------------------------------
00012CA0                            ; Animation script - Chopper enemy
00012CA0                            ; ---------------------------------------------------------------------------
00012CA0 0000                       		dc.w byte_ABBE-Ani_obj2B
00012CA2 0000                       		dc.w byte_ABC2-Ani_obj2B
00012CA4 0000                       		dc.w byte_ABC6-Ani_obj2B
00012CA6 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
00012CAA 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
00012CAE 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
00012CB2 00                         		even
00012CB2 00                         		even
00012CB2                            
00012CB2                            ; ---------------------------------------------------------------------------
00012CB2                            ; Sprite mappings - Chopper enemy (GHZ)
00012CB2                            ; ---------------------------------------------------------------------------
00012CB2                            Map_obj2B:
00012CB2                            	include "_maps\obj2B.asm"
00012CB2                            ; ---------------------------------------------------------------------------
00012CB2                            ; Sprite mappings - Chopper enemy (GHZ)
00012CB2                            ; ---------------------------------------------------------------------------
00012CB2 0000                       		dc.w byte_ABCE-Map_obj2B
00012CB4 0000                       		dc.w byte_ABD4-Map_obj2B
00012CB6 01                         byte_ABCE:	dc.b 1
00012CB7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CBC 01                         byte_ABD4:	dc.b 1
00012CBD F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012CC2                            		even
00012CC2                            		even
00012CC2                            
00012CC2                            ; ===========================================================================
00012CC2                            ; ---------------------------------------------------------------------------
00012CC2                            ; Object 2C - Jaws enemy (LZ)
00012CC2                            ; ---------------------------------------------------------------------------
00012CC2                            
00012CC2                            Obj2C:					; XREF: Obj_Index
00012CC2 7000                       		moveq	#0,d0
00012CC4 1028 0024                  		move.b	routine(a0),d0
00012CC8 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
00012CCC 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
00012CD0                            ; ===========================================================================
00012CD0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
00012CD2 0000                       		dc.w Obj2C_Turn-Obj2C_Index
00012CD4                            ; ===========================================================================
00012CD4                            
00012CD4                            Obj2C_Main:				; XREF: Obj2C_Index
00012CD4 5428 0024                  		addq.b	#2,routine(a0)
00012CD8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
00012CE0 317C 2486 0002             		move.w	#$2486,2(a0)
00012CE6 0028 0004 0001             		ori.b	#4,1(a0)
00012CEC 117C 000A 0020             		move.b	#$A,collision_flags(a0)
00012CF2 317C 0200 0018             		move.w	#$200,priority(a0)
00012CF8 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00012CFE 7000                       		moveq	#0,d0
00012D00 1028 0028                  		move.b	subtype(a0),d0	; load object subtype number
00012D04 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
00012D06 5340                       		subq.w	#1,d0
00012D08 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
00012D0C 3140 0032                  		move.w	d0,$32(a0)
00012D10 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move Jaws to the left
00012D16 0828 0000 0022             		btst	#0,status(a0)	; is Jaws facing left?
00012D1C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
00012D1E 4468 0010                  		neg.w	x_vel(a0)		; move Jaws to the right
00012D22                            
00012D22                            Obj2C_Turn:				; XREF: Obj2C_Index
00012D22 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
00012D26 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
00012D28 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
00012D2E 4468 0010                  		neg.w	x_vel(a0)		; change speed direction
00012D32 0868 0000 0022             		bchg	#0,status(a0)	; change Jaws facing direction
00012D38 117C 0001 001D             		move.b	#1,next_anim(a0)	; reset	animation
00012D3E                            
00012D3E                            Obj2C_Animate:
00012D3E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
00012D44 4EBA F8D2                  		jsr	AnimateSprite
00012D48 4EB9 0000 0000             		jsr	SpeedToPos
00012D4E 6000 0000                  		bra.w	MarkObjGone
00012D52                            ; ===========================================================================
00012D52                            Ani_obj2C:
00012D52                            	include "_anim\obj2C.asm"
00012D52                            ; ---------------------------------------------------------------------------
00012D52                            ; Animation script - Jaws enemy
00012D52                            ; ---------------------------------------------------------------------------
00012D52 0000                       		dc.w byte_AC6A-Ani_obj2C
00012D54 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
00012D5A                            		even
00012D5A                            		even
00012D5A                            
00012D5A                            ; ---------------------------------------------------------------------------
00012D5A                            ; Sprite mappings - Jaws enemy (LZ)
00012D5A                            ; ---------------------------------------------------------------------------
00012D5A                            Map_obj2C:
00012D5A                            	include "_maps\obj2C.asm"
00012D5A                            ; ---------------------------------------------------------------------------
00012D5A                            ; Sprite mappings - Jaws enemy (LZ)
00012D5A                            ; ---------------------------------------------------------------------------
00012D5A 0000                       		dc.w byte_AC78-Map_obj2C
00012D5C 0000                       		dc.w byte_AC83-Map_obj2C
00012D5E 0000                       		dc.w byte_AC8E-Map_obj2C
00012D60 0000                       		dc.w byte_AC99-Map_obj2C
00012D62 02                         byte_AC78:	dc.b 2
00012D63 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012D68 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
00012D6D 02                         byte_AC83:	dc.b 2
00012D6E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012D73 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
00012D78 02                         byte_AC8E:	dc.b 2
00012D79 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00012D7E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
00012D83 02                         byte_AC99:	dc.b 2
00012D84 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00012D89 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
00012D8E                            		even
00012D8E                            		even
00012D8E                            
00012D8E                            ; ===========================================================================
00012D8E                            ; ---------------------------------------------------------------------------
00012D8E                            ; Object 2D - Burrobot enemy (LZ)
00012D8E                            ; ---------------------------------------------------------------------------
00012D8E                            
00012D8E                            Obj2D:					; XREF: Obj_Index
00012D8E 7000                       		moveq	#0,d0
00012D90 1028 0024                  		move.b	routine(a0),d0
00012D94 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
00012D98 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
00012D9C                            ; ===========================================================================
00012D9C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
00012D9E 0000                       		dc.w Obj2D_Action-Obj2D_Index
00012DA0                            ; ===========================================================================
00012DA0                            
00012DA0                            Obj2D_Main:				; XREF: Obj2D_Index
00012DA0 5428 0024                  		addq.b	#2,routine(a0)
00012DA4 117C 0013 0016             		move.b	#$13,$16(a0)
00012DAA 117C 0008 0017             		move.b	#8,$17(a0)
00012DB0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
00012DB8 317C 04A6 0002             		move.w	#$4A6,2(a0)
00012DBE 0028 0004 0001             		ori.b	#4,1(a0)
00012DC4 317C 0200 0018             		move.w	#$200,priority(a0)
00012DCA 117C 0005 0020             		move.b	#5,collision_flags(a0)
00012DD0 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00012DD6 5C28 0025                  		addq.b	#6,routine_secondary(a0)	; run "Obj2D_ChkSonic" routine
00012DDA 117C 0002 001C             		move.b	#2,anim(a0)
00012DE0                            
00012DE0                            Obj2D_Action:				; XREF: Obj2D_Index
00012DE0 7000                       		moveq	#0,d0
00012DE2 1028 0025                  		move.b	routine_secondary(a0),d0
00012DE6 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
00012DEA 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
00012DEE 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
00012DF4 4EBA F822                  		jsr	AnimateSprite
00012DF8 6000 0000                  		bra.w	MarkObjGone
00012DFC                            ; ===========================================================================
00012DFC 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
00012DFE 0000                       		dc.w Obj2D_Move-Obj2D_Index2
00012E00 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
00012E02 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
00012E04                            ; ===========================================================================
00012E04                            
00012E04                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
00012E04 5368 0030                  		subq.w	#1,$30(a0)
00012E08 6A00                       		bpl.s	locret_AD42
00012E0A 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012E0E 317C 00FF 0030             		move.w	#$FF,$30(a0)
00012E14 317C 0080 0010             		move.w	#$80,x_vel(a0)
00012E1A 117C 0001 001C             		move.b	#1,anim(a0)
00012E20 0868 0000 0022             		bchg	#0,status(a0)	; change direction the Burrobot	is facing
00012E26 6700                       		beq.s	locret_AD42
00012E28 4468 0010                  		neg.w	x_vel(a0)		; change direction the Burrobot	is moving
00012E2C                            
00012E2C                            locret_AD42:
00012E2C 4E75                       		rts	
00012E2E                            ; ===========================================================================
00012E2E                            
00012E2E                            Obj2D_Move:				; XREF: Obj2D_Index2
00012E2E 5368 0030                  		subq.w	#1,$30(a0)
00012E32 6B00                       		bmi.s	loc_AD84
00012E34 4EB9 0000 0000             		jsr	SpeedToPos
00012E3A 0868 0000 0032             		bchg	#0,$32(a0)
00012E40 6600                       		bne.s	loc_AD78
00012E42 3628 0008                  		move.w	8(a0),d3
00012E46 0643 000C                  		addi.w	#$C,d3
00012E4A 0828 0000 0022             		btst	#0,status(a0)
00012E50 6600                       		bne.s	loc_AD6A
00012E52 0443 0018                  		subi.w	#$18,d3
00012E56                            
00012E56                            loc_AD6A:
00012E56 4EB9 0000 0000             		jsr	ObjHitFloor2
00012E5C 0C41 000C                  		cmpi.w	#$C,d1
00012E60 6C00                       		bge.s	loc_AD84
00012E62 4E75                       		rts	
00012E64                            ; ===========================================================================
00012E64                            
00012E64                            loc_AD78:				; XREF: Obj2D_Move
00012E64 4EB9 0000 0000             		jsr	ObjHitFloor
00012E6A D368 000C                  		add.w	d1,$C(a0)
00012E6E 4E75                       		rts	
00012E70                            ; ===========================================================================
00012E70                            
00012E70                            loc_AD84:				; XREF: Obj2D_Move
00012E70 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
00012E76 6700                       		beq.s	loc_ADA4
00012E78 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012E7C 317C 003B 0030             		move.w	#$3B,$30(a0)
00012E82 317C 0000 0010             		move.w	#0,x_vel(a0)
00012E88 117C 0000 001C             		move.b	#0,anim(a0)
00012E8E 4E75                       		rts	
00012E90                            ; ===========================================================================
00012E90                            
00012E90                            loc_ADA4:
00012E90 5428 0025                  		addq.b	#2,routine_secondary(a0)
00012E94 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00012E9A 117C 0002 001C             		move.b	#2,anim(a0)
00012EA0 4E75                       		rts	
00012EA2                            ; ===========================================================================
00012EA2                            
00012EA2                            Obj2D_Jump:				; XREF: Obj2D_Index2
00012EA2 4EB9 0000 0000             		jsr	SpeedToPos
00012EA8 0668 0018 0012             		addi.w	#$18,y_vel(a0)
00012EAE 6B00                       		bmi.s	locret_ADF0
00012EB0 117C 0003 001C             		move.b	#3,anim(a0)
00012EB6 4EB9 0000 0000             		jsr	ObjHitFloor
00012EBC 4A41                       		tst.w	d1
00012EBE 6A00                       		bpl.s	locret_ADF0
00012EC0 D368 000C                  		add.w	d1,$C(a0)
00012EC4 317C 0000 0012             		move.w	#0,y_vel(a0)
00012ECA 117C 0001 001C             		move.b	#1,anim(a0)
00012ED0 317C 00FF 0030             		move.w	#$FF,$30(a0)
00012ED6 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012EDA 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
00012EE0                            
00012EE0                            locret_ADF0:
00012EE0 4E75                       		rts	
00012EE2                            ; ===========================================================================
00012EE2                            
00012EE2                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
00012EE2 343C 0060                  		move.w	#$60,d2
00012EE6 4EB9 0000 0000             		jsr	Obj2D_ChkSonic2
00012EEC 6400                       		bcc.s	locret_AE20
00012EEE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012EF2 9068 000C                  		sub.w	$C(a0),d0
00012EF6 6400                       		bcc.s	locret_AE20
00012EF8 0C40 FF80                  		cmpi.w	#-$80,d0
00012EFC 6500                       		bcs.s	locret_AE20
00012EFE 4A78 FE08                  		tst.w	($FFFFFE08).w
00012F02 6600                       		bne.s	locret_AE20
00012F04 5528 0025                  		subq.b	#2,routine_secondary(a0)
00012F08 3141 0010                  		move.w	d1,x_vel(a0)
00012F0C 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00012F12                            
00012F12                            locret_AE20:
00012F12 4E75                       		rts	
00012F14                            
00012F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F14                            
00012F14                            
00012F14                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
00012F14 323C 0080                  		move.w	#$80,d1
00012F18 08E8 0000 0022             		bset	#0,status(a0)
00012F1E 3038 D008                  		move.w	($FFFFD008).w,d0
00012F22 9068 0008                  		sub.w	8(a0),d0
00012F26 6400                       		bcc.s	loc_AE40
00012F28 4440                       		neg.w	d0
00012F2A 4441                       		neg.w	d1
00012F2C 08A8 0000 0022             		bclr	#0,status(a0)
00012F32                            
00012F32                            loc_AE40:
00012F32 B042                       		cmp.w	d2,d0
00012F34 4E75                       		rts	
00012F36                            ; End of function Obj2D_ChkSonic2
00012F36                            
00012F36                            ; ===========================================================================
00012F36                            Ani_obj2D:
00012F36                            	include "_anim\obj2D.asm"
00012F36                            ; ---------------------------------------------------------------------------
00012F36                            ; Animation script - Burrobot enemy
00012F36                            ; ---------------------------------------------------------------------------
00012F36 0000                       		dc.w byte_AE4C-Ani_obj2D
00012F38 0000                       		dc.w byte_AE50-Ani_obj2D
00012F3A 0000                       		dc.w byte_AE54-Ani_obj2D
00012F3C 0000                       		dc.w byte_AE58-Ani_obj2D
00012F3E 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
00012F42 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
00012F46 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
00012F4A 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
00012F4E 00                         		even
00012F4E 00                         		even
00012F4E                            
00012F4E                            ; ---------------------------------------------------------------------------
00012F4E                            ; Sprite mappings - Burrobot enemy (LZ)
00012F4E                            ; ---------------------------------------------------------------------------
00012F4E                            Map_obj2D:
00012F4E                            	include "_maps\obj2D.asm"
00012F4E                            ; ---------------------------------------------------------------------------
00012F4E                            ; Sprite mappings - Burrobot enemy (LZ)
00012F4E                            ; ---------------------------------------------------------------------------
00012F4E 0000                       		dc.w byte_AE6A-Map_obj2D
00012F50 0000                       		dc.w byte_AE75-Map_obj2D
00012F52 0000                       		dc.w byte_AE80-Map_obj2D
00012F54 0000                       		dc.w byte_AE8B-Map_obj2D
00012F56 0000                       		dc.w byte_AE96-Map_obj2D
00012F58 0000                       		dc.w byte_AEA1-Map_obj2D
00012F5A 0000                       		dc.w byte_AEAC-Map_obj2D
00012F5C 02                         byte_AE6A:	dc.b 2
00012F5D EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00012F62 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00012F67 02                         byte_AE75:	dc.b 2
00012F68 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00012F6D 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00012F72 02                         byte_AE80:	dc.b 2
00012F73 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
00012F78 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
00012F7D 02                         byte_AE8B:	dc.b 2
00012F7E E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
00012F83 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
00012F88 02                         byte_AE96:	dc.b 2
00012F89 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
00012F8E 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
00012F93 02                         byte_AEA1:	dc.b 2
00012F94 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
00012F99 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
00012F9E 02                         byte_AEAC:	dc.b 2
00012F9F EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00012FA4 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00012FAA 00                         		even
00012FAA 00                         		even
00012FAA                            
00012FAA                            ; ===========================================================================
00012FAA                            ; ---------------------------------------------------------------------------
00012FAA                            ; Object 2F - large moving platforms (MZ)
00012FAA                            ; ---------------------------------------------------------------------------
00012FAA                            
00012FAA                            Obj2F:					; XREF: Obj_Index
00012FAA 7000                       		moveq	#0,d0
00012FAC 1028 0024                  		move.b	routine(a0),d0
00012FB0 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
00012FB4 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
00012FB8                            ; ===========================================================================
00012FB8 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
00012FBA 0000                       		dc.w Obj2F_Action-Obj2F_Index
00012FBC                            
00012FBC 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
00012FBE 0040                       		dc.b 0,	$40			; frame	number,	platform width
00012FC0 0000                       		dc.w Obj2F_Data3-Obj2F_Data
00012FC2 0140                       		dc.b 1,	$40
00012FC4 0000                       		dc.w Obj2F_Data2-Obj2F_Data
00012FC6 0220                       		dc.b 2,	$20
00012FC8                            ; ===========================================================================
00012FC8                            
00012FC8                            Obj2F_Main:				; XREF: Obj2F_Index
00012FC8 5428 0024                  		addq.b	#2,routine(a0)
00012FCC 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
00012FD4 317C C000 0002             		move.w	#$C000,2(a0)
00012FDA 117C 0004 0001             		move.b	#4,1(a0)
00012FE0 317C 0280 0018             		move.w	#$280,priority(a0)
00012FE6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00012FEC 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
00012FF2 7000                       		moveq	#0,d0
00012FF4 1028 0028                  		move.b	subtype(a0),d0
00012FF8 E448                       		lsr.w	#2,d0
00012FFA 0240 001C                  		andi.w	#$1C,d0
00012FFE 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
00013002 3019                       		move.w	(a1)+,d0
00013004 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
00013008 214A 0030                  		move.l	a2,$30(a0)
0001300C 1159 001A                  		move.b	(a1)+,mapping_frame(a0)
00013010 1151 0023                  		move.b	(a1),width_pixels(a0)
00013014 0228 000F 0028             		andi.b	#$F,subtype(a0)
0001301A 117C 0040 0016             		move.b	#$40,$16(a0)
00013020 08E8 0004 0001             		bset	#4,1(a0)
00013026                            
00013026                            Obj2F_Action:				; XREF: Obj2F_Index
00013026 4EB9 0000 0000             		jsr	Obj2F_Types
0001302C 4A28 0025                  		tst.b	routine_secondary(a0)
00013030 6700                       		beq.s	Obj2F_Solid
00013032 7200                       		moveq	#0,d1
00013034 1228 0023                  		move.b	width_pixels(a0),d1
00013038 0641 000B                  		addi.w	#$B,d1
0001303C 4EBA C19C                  		jsr	ExitPlatform
00013040 0829 0003 0022             		btst	#3,status(a1)
00013046 6600 0000                  		bne.w	Obj2F_Slope
0001304A 4228 0025                  		clr.b	routine_secondary(a0)
0001304E 6000                       		bra.s	Obj2F_Display
00013050                            ; ===========================================================================
00013050                            
00013050                            Obj2F_Slope:				; XREF: Obj2F_Action
00013050 7200                       		moveq	#0,d1
00013052 1228 0023                  		move.b	width_pixels(a0),d1
00013056 0641 000B                  		addi.w	#$B,d1
0001305A 2468 0030                  		movea.l	$30(a0),a2
0001305E 3428 0008                  		move.w	8(a0),d2
00013062 4EBA D0DA                  		jsr	SlopeObject2
00013066 6000                       		bra.s	Obj2F_Display
00013068                            ; ===========================================================================
00013068                            
00013068                            Obj2F_Solid:				; XREF: Obj2F_Action
00013068 7200                       		moveq	#0,d1
0001306A 1228 0023                  		move.b	width_pixels(a0),d1
0001306E 0641 000B                  		addi.w	#$B,d1
00013072 343C 0020                  		move.w	#$20,d2
00013076 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
0001307C 6600                       		bne.s	loc_AF8E
0001307E 343C 0030                  		move.w	#$30,d2
00013082                            
00013082                            loc_AF8E:
00013082 2468 0030                  		movea.l	$30(a0),a2
00013086 4EB9 0000 0000             		jsr	SolidObject2F
0001308C                            
0001308C                            Obj2F_Display:				; XREF: Obj2F_Action
0001308C 4EB9 0000 0000             		jsr	DisplaySprite
00013092 6000 0000                  		bra.w	Obj2F_ChkDel
00013096                            
00013096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013096                            
00013096                            
00013096                            Obj2F_Types:				; XREF: Obj2F_Action
00013096 7000                       		moveq	#0,d0
00013098 1028 0028                  		move.b	subtype(a0),d0
0001309C 0240 0007                  		andi.w	#7,d0
000130A0 D040                       		add.w	d0,d0
000130A2 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
000130A6 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
000130AA                            ; End of function Obj2F_Types
000130AA                            
000130AA                            ; ===========================================================================
000130AA 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
000130AC 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
000130AE 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
000130B0 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
000130B2 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
000130B4 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
000130B6                            ; ===========================================================================
000130B6                            
000130B6                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
000130B6 4E75                       		rts			; type 00 platform doesn't move
000130B8                            ; ===========================================================================
000130B8                            
000130B8                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
000130B8 1038 FE60                  		move.b	($FFFFFE60).w,d0
000130BC 323C 0020                  		move.w	#$20,d1
000130C0 6000                       		bra.s	Obj2F_Move
000130C2                            ; ===========================================================================
000130C2                            
000130C2                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
000130C2 1038 FE64                  		move.b	($FFFFFE64).w,d0
000130C6 323C 0030                  		move.w	#$30,d1
000130CA 6000                       		bra.s	Obj2F_Move
000130CC                            ; ===========================================================================
000130CC                            
000130CC                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
000130CC 1038 FE68                  		move.b	($FFFFFE68).w,d0
000130D0 323C 0040                  		move.w	#$40,d1
000130D4 6000                       		bra.s	Obj2F_Move
000130D6                            ; ===========================================================================
000130D6                            
000130D6                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
000130D6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000130DA 323C 0060                  		move.w	#$60,d1
000130DE                            
000130DE                            Obj2F_Move:
000130DE 0828 0003 0028             		btst	#3,subtype(a0)
000130E4 6700                       		beq.s	loc_AFF2
000130E6 4440                       		neg.w	d0
000130E8 D041                       		add.w	d1,d0
000130EA                            
000130EA                            loc_AFF2:
000130EA 3228 002C                  		move.w	$2C(a0),d1
000130EE 9240                       		sub.w	d0,d1
000130F0 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
000130F4 4E75                       		rts	
000130F6                            ; ===========================================================================
000130F6                            
000130F6                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
000130F6 1028 0034                  		move.b	$34(a0),d0
000130FA 4A28 0025                  		tst.b	routine_secondary(a0)
000130FE 6600                       		bne.s	loc_B010
00013100 5500                       		subq.b	#2,d0
00013102 6400                       		bcc.s	loc_B01C
00013104 7000                       		moveq	#0,d0
00013106 6000                       		bra.s	loc_B01C
00013108                            ; ===========================================================================
00013108                            
00013108                            loc_B010:
00013108 5800                       		addq.b	#4,d0
0001310A 0C00 0040                  		cmpi.b	#$40,d0
0001310E 6500                       		bcs.s	loc_B01C
00013110 103C 0040                  		move.b	#$40,d0
00013114                            
00013114                            loc_B01C:
00013114 1140 0034                  		move.b	d0,$34(a0)
00013118 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001311E E848                       		lsr.w	#4,d0
00013120 3200                       		move.w	d0,d1
00013122 D068 002C                  		add.w	$2C(a0),d0
00013126 3140 000C                  		move.w	d0,$C(a0)
0001312A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
00013130 6600                       		bne.s	loc_B07A
00013132 4A28 0035                  		tst.b	$35(a0)
00013136 6600                       		bne.s	loc_B07A
00013138 117C 0001 0035             		move.b	#1,$35(a0)
0001313E 6100 0000                  		bsr.w	SingleObjLoad2
00013142 6600                       		bne.s	loc_B07A
00013144 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
00013148 3368 0008 0008             		move.w	8(a0),8(a1)
0001314E 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
00013154 5069 002C                  		addq.w	#8,$2C(a1)
00013158 5769 002C                  		subq.w	#3,$2C(a1)
0001315C 0469 0040 0008             		subi.w	#$40,8(a1)
00013162 2368 0030 0030             		move.l	$30(a0),$30(a1)
00013168 2348 0038                  		move.l	a0,$38(a1)
0001316C 2448                       		movea.l	a0,a2
0001316E 6100                       		bsr.s	sub_B09C
00013170                            
00013170                            loc_B07A:
00013170 7400                       		moveq	#0,d2
00013172 45E8 0036                  		lea	$36(a0),a2
00013176 141A                       		move.b	(a2)+,d2
00013178 5302                       		subq.b	#1,d2
0001317A 6500                       		bcs.s	locret_B09A
0001317C                            
0001317C                            loc_B086:
0001317C 7000                       		moveq	#0,d0
0001317E 101A                       		move.b	(a2)+,d0
00013180 ED48                       		lsl.w	#6,d0
00013182 0640 D000                  		addi.w	#-$3000,d0
00013186 3240                       		movea.w	d0,a1
00013188 3341 003C                  		move.w	d1,$3C(a1)
0001318C 51CA FFEE                  		dbf	d2,loc_B086
00013190                            
00013190                            locret_B09A:
00013190 4E75                       		rts	
00013192                            
00013192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013192                            
00013192                            
00013192                            sub_B09C:
00013192 45EA 0036                  		lea	$36(a2),a2
00013196 7000                       		moveq	#0,d0
00013198 1012                       		move.b	(a2),d0
0001319A 5212                       		addq.b	#1,(a2)
0001319C 45F2 0001                  		lea	1(a2,d0.w),a2
000131A0 3009                       		move.w	a1,d0
000131A2 0440 D000                  		subi.w	#-$3000,d0
000131A6 EC48                       		lsr.w	#6,d0
000131A8 0240 007F                  		andi.w	#$7F,d0
000131AC 1480                       		move.b	d0,(a2)
000131AE 4E75                       		rts	
000131B0                            ; End of function sub_B09C
000131B0                            
000131B0                            ; ===========================================================================
000131B0                            
000131B0                            Obj2F_ChkDel:				; XREF: Obj2F_Display
000131B0 4A28 0035                  		tst.b	$35(a0)
000131B4 6700                       		beq.s	loc_B0C6
000131B6 4A28 0001                  		tst.b	1(a0)
000131BA 6A00                       		bpl.s	Obj2F_DelFlames
000131BC                            
000131BC                            loc_B0C6:
000131BC 3028 002A                  		move.w	objoff_2A(a0),d0
000131C0 4EF9 0000 0000             		jmp		MarkObjGone4
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
000131C6 7400                       		moveq	#0,d2
000131C8                            
000131C8                            loc_B0E8:
000131C8 45E8 0036                  		lea	$36(a0),a2
000131CC 1412                       		move.b	(a2),d2
000131CE 421A                       		clr.b	(a2)+
000131D0 5302                       		subq.b	#1,d2
000131D2 6500                       		bcs.s	locret_B116
000131D4                            
000131D4                            loc_B0F4:
000131D4 7000                       		moveq	#0,d0
000131D6 1012                       		move.b	(a2),d0
000131D8 421A                       		clr.b	(a2)+
000131DA ED48                       		lsl.w	#6,d0
000131DC 0640 D000                  		addi.w	#-$3000,d0
000131E0 3240                       		movea.w	d0,a1
000131E2 4EB9 0000 0000             		jsr	DeleteObject2
000131E8 51CA FFEA                  		dbf	d2,loc_B0F4
000131EC 117C 0000 0035             		move.b	#0,$35(a0)
000131F2 117C 0000 0034             		move.b	#0,$34(a0)
000131F8                            
000131F8                            locret_B116:
000131F8 4E75                       		rts	
000131FA                            ; ===========================================================================
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            ; Collision data for large moving platforms (MZ)
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
00013246                            		even
00013246                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
00013272                            		even
00013272                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
000132BE                            		even
000132BE                            ; ===========================================================================
000132BE                            ; ---------------------------------------------------------------------------
000132BE                            ; Object 35 - fireball that sits on the	floor (MZ)
000132BE                            ; (appears when	you walk on sinking platforms)
000132BE                            ; ---------------------------------------------------------------------------
000132BE                            
000132BE                            Obj35:					; XREF: Obj_Index
000132BE 7000                       		moveq	#0,d0
000132C0 1028 0024                  		move.b	routine(a0),d0
000132C4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
000132C8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
000132CC                            ; ===========================================================================
000132CC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
000132CE 0000                       		dc.w loc_B238-Obj35_Index
000132D0 0000                       		dc.w Obj35_Move-Obj35_Index
000132D2                            ; ===========================================================================
000132D2                            
000132D2                            Obj35_Main:				; XREF: Obj35_Index
000132D2 5428 0024                  		addq.b	#2,routine(a0)
000132D6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
000132DE 317C 0345 0002             		move.w	#$345,2(a0)
000132E4 3168 0008 002A             		move.w	8(a0),objoff_2A(a0)
000132EA 117C 0004 0001             		move.b	#4,1(a0)
000132F0 317C 0080 0018             		move.w	#$80,priority(a0)
000132F6 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
000132FC 117C 0008 0023             		move.b	#8,width_pixels(a0)
00013302 303C 00C2                  		move.w	#$C2,d0
00013306 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
0001330C 4A28 0028                  		tst.b	subtype(a0)
00013310 6700                       		beq.s	loc_B238
00013312 5428 0024                  		addq.b	#2,routine(a0)
00013316 6000 0000                  		bra.w	Obj35_Move
0001331A                            ; ===========================================================================
0001331A                            
0001331A                            loc_B238:				; XREF: Obj35_Index
0001331A 2268 0030                  		movea.l	$30(a0),a1
0001331E 3228 0008                  		move.w	8(a0),d1
00013322 9268 002A                  		sub.w	objoff_2A(a0),d1
00013326 0641 000C                  		addi.w	#$C,d1
0001332A 3001                       		move.w	d1,d0
0001332C E248                       		lsr.w	#1,d0
0001332E 1031 0000                  		move.b	(a1,d0.w),d0
00013332 4440                       		neg.w	d0
00013334 D068 002C                  		add.w	$2C(a0),d0
00013338 3400                       		move.w	d0,d2
0001333A D068 003C                  		add.w	$3C(a0),d0
0001333E 3140 000C                  		move.w	d0,$C(a0)
00013342 0C41 0084                  		cmpi.w	#$84,d1
00013346 6400                       		bcc.s	loc_B2B0
00013348 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
00013350 0C41 0080                  		cmpi.w	#$80,d1
00013354 6400                       		bcc.s	loc_B2B0
00013356 2028 0008                  		move.l	8(a0),d0
0001335A 0680 0008 0000             		addi.l	#$80000,d0
00013360 0280 000F FFFF             		andi.l	#$FFFFF,d0
00013366 6600                       		bne.s	loc_B2B0
00013368 6100 0000                  		bsr.w	SingleObjLoad2
0001336C 6600                       		bne.s	loc_B2B0
0001336E 12BC 0035                  		move.b	#$35,0(a1)
00013372 3368 0008 0008             		move.w	8(a0),8(a1)
00013378 3342 002C                  		move.w	d2,$2C(a1)
0001337C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
00013382 137C 0001 0028             		move.b	#1,subtype(a1)
00013388 2468 0038                  		movea.l	$38(a0),a2
0001338C 6100 FE04                  		bsr.w	sub_B09C
00013390                            
00013390                            loc_B2B0:
00013390 6000                       		bra.s	Obj35_Animate
00013392                            ; ===========================================================================
00013392                            
00013392                            Obj35_Move:				; XREF: Obj35_Index
00013392 3028 002C                  		move.w	$2C(a0),d0
00013396 D068 003C                  		add.w	$3C(a0),d0
0001339A 3140 000C                  		move.w	d0,$C(a0)
0001339E                            
0001339E                            Obj35_Animate:				; XREF: loc_B238
0001339E 43F9 0000 0000             		lea	(Ani_obj35).l,a1
000133A4 4EBA F272                  		jsr	AnimateSprite
000133A8 6000 0000                  		bra.w	DisplaySprite
000133AC                            ; ===========================================================================
000133AC                            Ani_obj35:
000133AC                            	include "_anim\obj35.asm"
000133AC                            ; ---------------------------------------------------------------------------
000133AC                            ; Animation script - fireball that sits on the	floor (MZ)
000133AC                            ; ---------------------------------------------------------------------------
000133AC 0000                       		dc.w byte_B2CE-Ani_obj35
000133AE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
000133B4                            		even
000133B4                            		even
000133B4                            
000133B4                            ; ---------------------------------------------------------------------------
000133B4                            ; Sprite mappings - large moving platforms (MZ)
000133B4                            ; ---------------------------------------------------------------------------
000133B4                            Map_obj2F:
000133B4                            	include "_maps\obj2F.asm"
000133B4                            ; ---------------------------------------------------------------------------
000133B4                            ; Sprite mappings - large moving platforms (MZ)
000133B4                            ; ---------------------------------------------------------------------------
000133B4 0000                       		dc.w byte_B2DA-Map_obj2F
000133B6 0000                       		dc.w byte_B31C-Map_obj2F
000133B8 0000                       		dc.w byte_B34F-Map_obj2F
000133BA 0D                         byte_B2DA:	dc.b $D
000133BB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
000133C0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
000133C5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
000133CA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
000133CF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
000133D4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
000133D9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
000133DE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
000133E3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
000133E8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
000133ED 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
000133F2 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
000133F7 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
000133FC 0A                         byte_B31C:	dc.b $A
000133FD D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
00013402 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
00013407 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0001340C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
00013411 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
00013416 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0001341B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
00013420 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
00013425 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0001342A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0001342F 06                         byte_B34F:	dc.b 6
00013430 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
00013435 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0001343A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0001343F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
00013444 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
00013449 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0001344E                            		even
0001344E                            		even
0001344E                            
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            ; Sprite mappings - lava balls (MZ, SLZ)
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            Map_obj14:
0001344E                            	include "_maps\obj14.asm"
0001344E                            ; ---------------------------------------------------------------------------
0001344E                            ; Sprite mappings - lava balls (MZ, SLZ)
0001344E                            ; ---------------------------------------------------------------------------
0001344E 0000                       		dc.w byte_B37A-Map_obj14
00013450 0000                       		dc.w byte_B380-Map_obj14
00013452 0000                       		dc.w byte_B386-Map_obj14
00013454 0000                       		dc.w byte_B38C-Map_obj14
00013456 0000                       		dc.w byte_B392-Map_obj14
00013458 0000                       		dc.w byte_B398-Map_obj14
0001345A 01                         byte_B37A:	dc.b 1
0001345B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
00013460 01                         byte_B380:	dc.b 1
00013461 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
00013466 01                         byte_B386:	dc.b 1
00013467 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0001346C 01                         byte_B38C:	dc.b 1
0001346D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
00013472 01                         byte_B392:	dc.b 1
00013473 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
00013478 01                         byte_B398:	dc.b 1
00013479 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0001347E                            		even
0001347E                            		even
0001347E                            
0001347E                            ; ===========================================================================
0001347E                            ; ---------------------------------------------------------------------------
0001347E                            ; Object 30 - large green glassy blocks	(MZ)
0001347E                            ; ---------------------------------------------------------------------------
0001347E                            
0001347E                            Obj30:					; XREF: Obj_Index
0001347E 7000                       		moveq	#0,d0
00013480 1028 0024                  		move.b	routine(a0),d0
00013484 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
00013488 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0001348C 4EF9 0000 0000             		jmp		MarkObjGone
00013492                            ; ===========================================================================
00013492 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
00013494 0000                       		dc.w Obj30_Block012-Obj30_Index
00013496 0000                       		dc.w Obj30_Reflect012-Obj30_Index
00013498 0000                       		dc.w Obj30_Block34-Obj30_Index
0001349A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0001349C                            
0001349C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0001349F 0400 01                    		dc.b 4,	0, 1
000134A2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
000134A5 0800 01                    		dc.b 8,	0, 1
000134A8                            ; ===========================================================================
000134A8                            
000134A8                            Obj30_Main:				; XREF: Obj30_Index
000134A8 45F9 0001 349C             		lea	(Obj30_Vars1).l,a2
000134AE 7201                       		moveq	#1,d1
000134B0 117C 0048 0016             		move.b	#$48,$16(a0)
000134B6 0C28 0003 0028             		cmpi.b	#3,subtype(a0)	; is object type 0/1/2 ?
000134BC 6500                       		bcs.s	loc_B40C	; if yes, branch
000134BE 45F9 0001 34A2             		lea	(Obj30_Vars2).l,a2
000134C4 7201                       		moveq	#1,d1
000134C6 117C 0038 0016             		move.b	#$38,$16(a0)
000134CC                            
000134CC                            loc_B40C:
000134CC 2248                       		movea.l	a0,a1
000134CE 6000                       		bra.s	Obj30_Load	; load main object
000134D0                            ; ===========================================================================
000134D0                            
000134D0                            Obj30_Loop:
000134D0 6100 0000                  		bsr.w	SingleObjLoad2
000134D4 6600                       		bne.s	loc_B480
000134D6                            
000134D6                            Obj30_Load:				; XREF: Obj30_Main
000134D6 135A 0024                  		move.b	(a2)+,routine(a1)
000134DA 12BC 0030                  		move.b	#$30,0(a1)
000134DE 3368 0008 0008             		move.w	8(a0),8(a1)
000134E4 101A                       		move.b	(a2)+,d0
000134E6 4880                       		ext.w	d0
000134E8 D068 000C                  		add.w	$C(a0),d0
000134EC 3340 000C                  		move.w	d0,$C(a1)
000134F0 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
000134F8 337C C38E 0002             		move.w	#$C38E,2(a1)
000134FE 137C 0004 0001             		move.b	#4,1(a1)
00013504 3369 000C 0030             		move.w	$C(a1),$30(a1)
0001350A 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00013510 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013516 337C 0200 0018             		move.w	#$200,priority(a1)
0001351C 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013520 2348 003C                  		move.l	a0,$3C(a1)
00013524 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
00013528                            
00013528 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001352E 337C 0180 0018             		move.w	#$180,priority(a1)
00013534 5029 0028                  		addq.b	#8,subtype(a1)
00013538 0229 000F 0028             		andi.b	#$F,subtype(a1)
0001353E                            
0001353E                            loc_B480:
0001353E 317C 0090 0032             		move.w	#$90,$32(a0)
00013544 08E8 0004 0001             		bset	#4,1(a0)
0001354A                            
0001354A                            Obj30_Block012:				; XREF: Obj30_Index
0001354A 4EB9 0000 0000             		jsr	Obj30_Types
00013550 323C 002B                  		move.w	#$2B,d1
00013554 343C 0048                  		move.w	#$48,d2
00013558 363C 0049                  		move.w	#$49,d3
0001355C 3828 0008                  		move.w	8(a0),d4
00013560 6000 0000                  		bra.w	SolidObject
00013564                            ; ===========================================================================
00013564                            
00013564                            Obj30_Reflect012:			; XREF: Obj30_Index
00013564 2268 003C                  		movea.l	$3C(a0),a1
00013568 3169 0032 0032             		move.w	$32(a1),$32(a0)
0001356E 6000 0000                  		bra.w	Obj30_Types
00013572                            ; ===========================================================================
00013572                            
00013572                            Obj30_Block34:				; XREF: Obj30_Index
00013572 4EB9 0000 0000             		jsr	Obj30_Types
00013578 323C 002B                  		move.w	#$2B,d1
0001357C 343C 0038                  		move.w	#$38,d2
00013580 363C 0039                  		move.w	#$39,d3
00013584 3828 0008                  		move.w	8(a0),d4
00013588 6000 0000                  		bra.w	SolidObject
0001358C                            ; ===========================================================================
0001358C                            
0001358C                            Obj30_Reflect34:			; XREF: Obj30_Index
0001358C 2268 003C                  		movea.l	$3C(a0),a1
00013590 3169 0032 0032             		move.w	$32(a1),$32(a0)
00013596 3169 000C 0030             		move.w	$C(a1),$30(a0)
0001359C 6000 0002                  		bra.w	*+4
000135A0                            
000135A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135A0                            
000135A0                            
000135A0                            Obj30_Types:				; XREF: Obj30_Block012; et al
000135A0 7000                       		moveq	#0,d0
000135A2 1028 0028                  		move.b	subtype(a0),d0
000135A6 0240 0007                  		andi.w	#7,d0
000135AA D040                       		add.w	d0,d0
000135AC 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
000135B0 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
000135B4                            ; End of function Obj30_Types
000135B4                            
000135B4                            ; ===========================================================================
000135B4 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
000135B6 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
000135B8 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
000135BA 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
000135BC 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
000135BE                            ; ===========================================================================
000135BE                            
000135BE                            Obj30_Type00:				; XREF: Obj30_TypeIndex
000135BE 4E75                       		rts	
000135C0                            ; ===========================================================================
000135C0                            
000135C0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
000135C0 1038 FE70                  		move.b	($FFFFFE70).w,d0
000135C4 323C 0040                  		move.w	#$40,d1
000135C8 6000                       		bra.s	loc_B514
000135CA                            ; ===========================================================================
000135CA                            
000135CA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
000135CA 1038 FE70                  		move.b	($FFFFFE70).w,d0
000135CE 323C 0040                  		move.w	#$40,d1
000135D2 4440                       		neg.w	d0
000135D4 D041                       		add.w	d1,d0
000135D6                            
000135D6                            loc_B514:				; XREF: Obj30_Type01
000135D6 0828 0003 0028             		btst	#3,subtype(a0)
000135DC 6700                       		beq.s	loc_B526
000135DE 4440                       		neg.w	d0
000135E0 D041                       		add.w	d1,d0
000135E2 E208                       		lsr.b	#1,d0
000135E4 0640 0020                  		addi.w	#$20,d0
000135E8                            
000135E8                            loc_B526:
000135E8 6000 0000                  		bra.w	loc_B64E
000135EC                            ; ===========================================================================
000135EC                            
000135EC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
000135EC 0828 0003 0028             		btst	#3,subtype(a0)
000135F2 6700                       		beq.s	loc_B53E
000135F4 1038 FE70                  		move.b	($FFFFFE70).w,d0
000135F8 0440 0010                  		subi.w	#$10,d0
000135FC 6000 0000                  		bra.w	loc_B64E
00013600                            ; ===========================================================================
00013600                            
00013600                            loc_B53E:
00013600 0828 0003 0022             		btst	#3,status(a0)
00013606 6600                       		bne.s	loc_B54E
00013608 08A8 0000 0034             		bclr	#0,$34(a0)
0001360E 6000                       		bra.s	loc_B582
00013610                            ; ===========================================================================
00013610                            
00013610                            loc_B54E:
00013610 4A28 0034                  		tst.b	$34(a0)
00013614 6600                       		bne.s	loc_B582
00013616 117C 0001 0034             		move.b	#1,$34(a0)
0001361C 08E8 0000 0035             		bset	#0,$35(a0)
00013622 6700                       		beq.s	loc_B582
00013624 08E8 0007 0034             		bset	#7,$34(a0)
0001362A 317C 0010 0036             		move.w	#$10,$36(a0)
00013630 117C 000A 0038             		move.b	#$A,$38(a0)
00013636 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0001363C 6600                       		bne.s	loc_B582
0001363E 317C 0040 0036             		move.w	#$40,$36(a0)
00013644                            
00013644                            loc_B582:
00013644 4A28 0034                  		tst.b	$34(a0)
00013648 6A00                       		bpl.s	loc_B5AA
0001364A 4A28 0038                  		tst.b	$38(a0)
0001364E 6700                       		beq.s	loc_B594
00013650 5328 0038                  		subq.b	#1,$38(a0)
00013654 6600                       		bne.s	loc_B5AA
00013656                            
00013656                            loc_B594:
00013656 4A68 0032                  		tst.w	$32(a0)
0001365A 6700                       		beq.s	loc_B5A4
0001365C 5368 0032                  		subq.w	#1,$32(a0)
00013660 5368 0036                  		subq.w	#1,$36(a0)
00013664 6600                       		bne.s	loc_B5AA
00013666                            
00013666                            loc_B5A4:
00013666 08A8 0007 0034             		bclr	#7,$34(a0)
0001366C                            
0001366C                            loc_B5AA:
0001366C 3028 0032                  		move.w	$32(a0),d0
00013670 6000                       		bra.s	loc_B64E
00013672                            ; ===========================================================================
00013672                            
00013672                            Obj30_Type04:				; XREF: Obj30_TypeIndex
00013672 0828 0003 0028             		btst	#3,subtype(a0)
00013678 6700                       		beq.s	Obj30_ChkSwitch
0001367A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0001367E 0440 0010                  		subi.w	#$10,d0
00013682 6000                       		bra.s	loc_B64E
00013684                            ; ===========================================================================
00013684                            
00013684                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
00013684 4A28 0034                  		tst.b	$34(a0)
00013688 6600                       		bne.s	loc_B640
0001368A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001368E 7000                       		moveq	#0,d0
00013690 1028 0028                  		move.b	subtype(a0),d0	; load object type number
00013694 E848                       		lsr.w	#4,d0		; read only the	first nybble
00013696 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0001369A 6700                       		beq.s	loc_B64A	; if not, branch
0001369C 117C 0001 0034             		move.b	#1,$34(a0)
000136A2                            
000136A2                            loc_B640:
000136A2 4A68 0032                  		tst.w	$32(a0)
000136A6 6700                       		beq.s	loc_B64A
000136A8 5568 0032                  		subq.w	#2,$32(a0)
000136AC                            
000136AC                            loc_B64A:
000136AC 3028 0032                  		move.w	$32(a0),d0
000136B0                            
000136B0                            loc_B64E:
000136B0 3228 0030                  		move.w	$30(a0),d1
000136B4 9240                       		sub.w	d0,d1
000136B6 3141 000C                  		move.w	d1,$C(a0)
000136BA 4E75                       		rts	
000136BC                            ; ===========================================================================
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            ; Sprite mappings - large green	glassy blocks (MZ)
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            Map_obj30:
000136BC                            	include "_maps\obj30.asm"
000136BC                            ; ---------------------------------------------------------------------------
000136BC                            ; Sprite mappings - large green	glassy blocks (MZ)
000136BC                            ; ---------------------------------------------------------------------------
000136BC 0000                       		dc.w byte_B600-Map_obj30
000136BE 0000                       		dc.w byte_B63D-Map_obj30
000136C0 0000                       		dc.w byte_B648-Map_obj30
000136C2 0C                         byte_B600:	dc.b $C
000136C3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
000136C8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
000136CD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
000136D2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
000136D7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
000136DC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
000136E1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
000136E6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
000136EB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
000136F0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
000136F5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
000136FA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
000136FF 02                         byte_B63D:	dc.b 2
00013700 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
00013705 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0001370A 0A                         byte_B648:	dc.b $A
0001370B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
00013710 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
00013715 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0001371A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0001371F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00013724 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00013729 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0001372E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
00013733 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
00013738 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0001373E 00                         		even
0001373E 00                         		even
0001373E                            
0001373E                            ; ===========================================================================
0001373E                            ; ---------------------------------------------------------------------------
0001373E                            ; Object 31 - stomping metal blocks on chains (MZ)
0001373E                            ; ---------------------------------------------------------------------------
0001373E                            
0001373E                            Obj31:					; XREF: Obj_Index
0001373E 7000                       		moveq	#0,d0
00013740 1028 0024                  		move.b	routine(a0),d0
00013744 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
00013748 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0001374C                            ; ===========================================================================
0001374C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0001374E 0000                       		dc.w loc_B798-Obj31_Index
00013750 0000                       		dc.w loc_B7FE-Obj31_Index
00013752 0000                       		dc.w Obj31_Display2-Obj31_Index
00013754 0000                       		dc.w loc_B7E2-Obj31_Index
00013756                            
00013756 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
00013758 0100                       		dc.b 1,	0
0001375A                            
0001375A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0001375D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
00013760 08CC 03                    		dc.b 8,	$CC, 3
00013763 06F0 02                    		dc.b 6,	$F0, 2
00013766                            
00013766 7000 A000                  word_B6A4:	dc.w $7000, $A000
0001376A 5000 7800                  		dc.w $5000, $7800
0001376E 3800 5800                  		dc.w $3800, $5800
00013772 B800                       		dc.w $B800
00013774                            ; ===========================================================================
00013774                            
00013774                            Obj31_Main:				; XREF: Obj31_Index
00013774 7000                       		moveq	#0,d0
00013776 1028 0028                  		move.b	subtype(a0),d0
0001377A 6A00                       		bpl.s	loc_B6CE
0001377C 0240 007F                  		andi.w	#$7F,d0
00013780 D040                       		add.w	d0,d0
00013782 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
00013786 115A 003A                  		move.b	(a2)+,$3A(a0)
0001378A 101A                       		move.b	(a2)+,d0
0001378C 1140 0028                  		move.b	d0,subtype(a0)
00013790                            
00013790                            loc_B6CE:
00013790 0200 000F                  		andi.b	#$F,d0
00013794 D040                       		add.w	d0,d0
00013796 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0001379A 4A40                       		tst.w	d0
0001379C 6600                       		bne.s	loc_B6E0
0001379E 3142 0032                  		move.w	d2,$32(a0)
000137A2                            
000137A2                            loc_B6E0:
000137A2 45F9 0001 375A             		lea	(Obj31_Var).l,a2
000137A8 2248                       		movea.l	a0,a1
000137AA 7203                       		moveq	#3,d1
000137AC 6000                       		bra.s	Obj31_MakeStomper
000137AE                            ; ===========================================================================
000137AE                            
000137AE                            Obj31_Loop:
000137AE 6100 0000                  		bsr.w	SingleObjLoad2
000137B2 6600 0000                  		bne.w	Obj31_SetSize
000137B6                            
000137B6                            Obj31_MakeStomper:			; XREF: Obj31_Main
000137B6 135A 0024                  		move.b	(a2)+,routine(a1)
000137BA 12BC 0031                  		move.b	#$31,0(a1)
000137BE 3368 0008 0008             		move.w	8(a0),8(a1)
000137C4 101A                       		move.b	(a2)+,d0
000137C6 4880                       		ext.w	d0
000137C8 D068 000C                  		add.w	$C(a0),d0
000137CC 3340 000C                  		move.w	d0,$C(a1)
000137D0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
000137D8 337C 0300 0002             		move.w	#$300,2(a1)
000137DE 137C 0004 0001             		move.b	#4,1(a1)
000137E4 3369 000C 0030             		move.w	$C(a1),$30(a1)
000137EA 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
000137F0 137C 0010 0023             		move.b	#$10,width_pixels(a1)
000137F6 3342 0034                  		move.w	d2,$34(a1)
000137FA 337C 0200 0018             		move.w	#$200,priority(a1)
00013800 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013804 0C29 0001 001A             		cmpi.b	#1,mapping_frame(a1)
0001380A 6600                       		bne.s	loc_B76A
0001380C 5341                       		subq.w	#1,d1
0001380E 1028 0028                  		move.b	subtype(a0),d0
00013812 0240 00F0                  		andi.w	#$F0,d0
00013816 0C40 0020                  		cmpi.w	#$20,d0
0001381A 679A                       		beq.s	Obj31_MakeStomper
0001381C 137C 0038 0023             		move.b	#$38,width_pixels(a1)
00013822 137C 0090 0020             		move.b	#$90,collision_flags(a1)
00013828 5241                       		addq.w	#1,d1
0001382A                            
0001382A                            loc_B76A:
0001382A 2348 003C                  		move.l	a0,$3C(a1)
0001382E 51C9 FF7E                  		dbf	d1,Obj31_Loop
00013832                            
00013832 337C 0180 0018             		move.w	#$180,priority(a1)
00013838                            
00013838                            Obj31_SetSize:
00013838 7000                       		moveq	#0,d0
0001383A 1028 0028                  		move.b	subtype(a0),d0
0001383E E648                       		lsr.w	#3,d0
00013840 0200 000E                  		andi.b	#$E,d0
00013844 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
00013848 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001384C 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
00013850 6000                       		bra.s	loc_B798
00013852                            ; ===========================================================================
00013852 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
00013854 3009                       		dc.b $30, 9
00013856 100A                       		dc.b $10, $A
00013858                            ; ===========================================================================
00013858                            
00013858                            loc_B798:				; XREF: Obj31_Index
00013858 4EB9 0000 0000             		jsr	Obj31_Types
0001385E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
00013864 7200                       		moveq	#0,d1
00013866 1228 0023                  		move.b	width_pixels(a0),d1
0001386A 0641 000B                  		addi.w	#$B,d1
0001386E 343C 000C                  		move.w	#$C,d2
00013872 363C 000D                  		move.w	#$D,d3
00013876 3828 0008                  		move.w	8(a0),d4
0001387A 4EB9 0000 0000             		jsr	SolidObject
00013880 0828 0003 0022             		btst	#3,status(a0)
00013886 6700                       		beq.s	Obj31_Display
00013888 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0001388E 6400                       		bcc.s	Obj31_Display
00013890 2448                       		movea.l	a0,a2
00013892 41F8 D000                  		lea	($FFFFD000).w,a0
00013896 4EB9 0000 0000             		jsr	KillCharacter
0001389C 204A                       		movea.l	a2,a0
0001389E                            
0001389E                            Obj31_Display:
0001389E 4EB9 0000 0000             		jsr	DisplaySprite
000138A4 6000 0000                  		bra.w	Obj31_ChkDel
000138A8                            ; ===========================================================================
000138A8                            
000138A8                            loc_B7E2:				; XREF: Obj31_Index
000138A8 117C 0080 0016             		move.b	#$80,$16(a0)
000138AE 08E8 0004 0001             		bset	#4,1(a0)
000138B4 2268 003C                  		movea.l	$3C(a0),a1
000138B8 1029 0032                  		move.b	$32(a1),d0
000138BC EA08                       		lsr.b	#5,d0
000138BE 5600                       		addq.b	#3,d0
000138C0 1140 001A                  		move.b	d0,mapping_frame(a0)
000138C4                            
000138C4                            loc_B7FE:				; XREF: Obj31_Index
000138C4 2268 003C                  		movea.l	$3C(a0),a1
000138C8 7000                       		moveq	#0,d0
000138CA 1029 0032                  		move.b	$32(a1),d0
000138CE D068 0030                  		add.w	$30(a0),d0
000138D2 3140 000C                  		move.w	d0,$C(a0)
000138D6                            
000138D6                            Obj31_Display2:				; XREF: Obj31_Index
000138D6 4EB9 0000 0000             		jsr	DisplaySprite
000138DC                            
000138DC                            Obj31_ChkDel:				; XREF: Obj31_Display
000138DC 4EF9 0000 0000             		jmp		MarkObjGone
000138E2                            ; ===========================================================================
000138E2                            
000138E2                            Obj31_Types:				; XREF: loc_B798
000138E2 1028 0028                  		move.b	subtype(a0),d0
000138E6 0240 000F                  		andi.w	#$F,d0
000138EA D040                       		add.w	d0,d0
000138EC 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
000138F0 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
000138F4                            ; ===========================================================================
000138F4 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
000138F6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000138F8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000138FA 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
000138FC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000138FE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
00013900 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
00013902                            ; ===========================================================================
00013902                            
00013902                            Obj31_Type00:				; XREF: Obj31_TypeIndex
00013902 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00013906 7000                       		moveq	#0,d0
00013908 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0001390C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
00013910 6700                       		beq.s	loc_B8A8	; if not, branch
00013912 4A78 F7A4                  		tst.w	($FFFFF7A4).w
00013916 6A00                       		bpl.s	loc_B872
00013918 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0001391E 6700                       		beq.s	loc_B8A0
00013920                            
00013920                            loc_B872:
00013920 4A68 0032                  		tst.w	$32(a0)
00013924 6700                       		beq.s	loc_B8A0
00013926 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001392A 0200 000F                  		andi.b	#$F,d0
0001392E 6600                       		bne.s	loc_B892
00013930 4A28 0001                  		tst.b	1(a0)
00013934 6A00                       		bpl.s	loc_B892
00013936 303C 00C7                  		move.w	#$C7,d0
0001393A 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
00013940                            
00013940                            loc_B892:
00013940 0468 0080 0032             		subi.w	#$80,$32(a0)
00013946 6400                       		bcc.s	Obj31_Restart
00013948 317C 0000 0032             		move.w	#0,$32(a0)
0001394E                            
0001394E                            loc_B8A0:
0001394E 317C 0000 0012             		move.w	#0,$12(a0)
00013954 6000                       		bra.s	Obj31_Restart
00013956                            ; ===========================================================================
00013956                            
00013956                            loc_B8A8:				; XREF: Obj31_Type00
00013956 3228 0034                  		move.w	$34(a0),d1
0001395A B268 0032                  		cmp.w	$32(a0),d1
0001395E 6700                       		beq.s	Obj31_Restart
00013960 3028 0012                  		move.w	$12(a0),d0
00013964 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0001396A D168 0032                  		add.w	d0,$32(a0)
0001396E B268 0032                  		cmp.w	$32(a0),d1
00013972 6200                       		bhi.s	Obj31_Restart
00013974 3141 0032                  		move.w	d1,$32(a0)
00013978 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0001397E 4A28 0001                  		tst.b	1(a0)
00013982 6A00                       		bpl.s	Obj31_Restart
00013984 303C 00BD                  		move.w	#$BD,d0
00013988 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
0001398E                            
0001398E                            Obj31_Restart:
0001398E 7000                       		moveq	#0,d0
00013990 1028 0032                  		move.b	$32(a0),d0
00013994 D068 0030                  		add.w	$30(a0),d0
00013998 3140 000C                  		move.w	d0,$C(a0)
0001399C 4E75                       		rts	
0001399E                            ; ===========================================================================
0001399E                            
0001399E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0001399E 4A68 0036                  		tst.w	$36(a0)
000139A2 6700                       		beq.s	loc_B938
000139A4 4A68 0038                  		tst.w	$38(a0)
000139A8 6700                       		beq.s	loc_B902
000139AA 5368 0038                  		subq.w	#1,$38(a0)
000139AE 6000                       		bra.s	loc_B97C
000139B0                            ; ===========================================================================
000139B0                            
000139B0                            loc_B902:
000139B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000139B4 0200 000F                  		andi.b	#$F,d0
000139B8 6600                       		bne.s	loc_B91C
000139BA 4A28 0001                  		tst.b	1(a0)
000139BE 6A00                       		bpl.s	loc_B91C
000139C0 303C 00C7                  		move.w	#$C7,d0
000139C4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rising chain sound
000139CA                            
000139CA                            loc_B91C:
000139CA 0468 0080 0032             		subi.w	#$80,$32(a0)
000139D0 6400                       		bcc.s	loc_B97C
000139D2 317C 0000 0032             		move.w	#0,$32(a0)
000139D8 317C 0000 0012             		move.w	#0,$12(a0)
000139DE 317C 0000 0036             		move.w	#0,$36(a0)
000139E4 6000                       		bra.s	loc_B97C
000139E6                            ; ===========================================================================
000139E6                            
000139E6                            loc_B938:				; XREF: Obj31_Type01
000139E6 3228 0034                  		move.w	$34(a0),d1
000139EA B268 0032                  		cmp.w	$32(a0),d1
000139EE 6700                       		beq.s	loc_B97C
000139F0 3028 0012                  		move.w	$12(a0),d0
000139F4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
000139FA D168 0032                  		add.w	d0,$32(a0)
000139FE B268 0032                  		cmp.w	$32(a0),d1
00013A02 6200                       		bhi.s	loc_B97C
00013A04 3141 0032                  		move.w	d1,$32(a0)
00013A08 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00013A0E 317C 0001 0036             		move.w	#1,$36(a0)
00013A14 317C 003C 0038             		move.w	#$3C,$38(a0)
00013A1A 4A28 0001                  		tst.b	1(a0)
00013A1E 6A00                       		bpl.s	loc_B97C
00013A20 303C 00D5                  		move.w	#$D5,d0
00013A24 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play stomping sound
00013A2A                            
00013A2A                            loc_B97C:
00013A2A 6000 FF62                  		bra.w	Obj31_Restart
00013A2E                            ; ===========================================================================
00013A2E                            
00013A2E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
00013A2E 3038 D008                  		move.w	($FFFFD008).w,d0
00013A32 9068 0008                  		sub.w	8(a0),d0
00013A36 6400                       		bcc.s	loc_B98C
00013A38 4440                       		neg.w	d0
00013A3A                            
00013A3A                            loc_B98C:
00013A3A 0C40 0090                  		cmpi.w	#$90,d0
00013A3E 6400                       		bcc.s	loc_B996
00013A40 5228 0028                  		addq.b	#1,subtype(a0)
00013A44                            
00013A44                            loc_B996:
00013A44 6000 FF48                  		bra.w	Obj31_Restart
00013A48                            ; ===========================================================================
00013A48                            ; ---------------------------------------------------------------------------
00013A48                            ; Object 45 - spiked metal block from beta version (MZ)
00013A48                            ; ---------------------------------------------------------------------------
00013A48                            
00013A48                            Obj45:					; XREF: Obj_Index
00013A48 7000                       		moveq	#0,d0
00013A4A 1028 0024                  		move.b	routine(a0),d0
00013A4E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
00013A52 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
00013A56                            ; ===========================================================================
00013A56 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
00013A58 0000                       		dc.w Obj45_Solid-Obj45_Index
00013A5A 0000                       		dc.w loc_BA8E-Obj45_Index
00013A5C 0000                       		dc.w Obj45_Display-Obj45_Index
00013A5E 0000                       		dc.w loc_BA7A-Obj45_Index
00013A60                            
00013A60 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
00013A63 04E4 01                    		dc.b	4, $E4,	  1
00013A66 0834 03                    		dc.b	8, $34,	  3
00013A69 0628 02                    		dc.b	6, $28,	  2
00013A6C                            
00013A6C 3800                       word_B9BE:	dc.w $3800
00013A6E A000                       		dc.w -$6000
00013A70 5000                       		dc.w $5000
00013A72                            ; ===========================================================================
00013A72                            
00013A72                            Obj45_Main:				; XREF: Obj45_Index
00013A72 7000                       		moveq	#0,d0
00013A74 1028 0028                  		move.b	subtype(a0),d0
00013A78 D040                       		add.w	d0,d0
00013A7A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
00013A7E 45F9 0001 3A60             		lea	(Obj45_Var).l,a2
00013A84 2248                       		movea.l	a0,a1
00013A86 7203                       		moveq	#3,d1
00013A88 6000                       		bra.s	Obj45_Load
00013A8A                            ; ===========================================================================
00013A8A                            
00013A8A                            Obj45_Loop:
00013A8A 6100 0000                  		bsr.w	SingleObjLoad2
00013A8E 6600                       		bne.s	loc_BA52
00013A90                            
00013A90                            Obj45_Load:				; XREF: Obj45_Main
00013A90 135A 0024                  		move.b	(a2)+,routine(a1)
00013A94 12BC 0045                  		move.b	#$45,0(a1)
00013A98 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013A9E 101A                       		move.b	(a2)+,d0
00013AA0 4880                       		ext.w	d0
00013AA2 D068 0008                  		add.w	8(a0),d0
00013AA6 3340 0008                  		move.w	d0,8(a1)
00013AAA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
00013AB2 337C 0300 0002             		move.w	#$300,2(a1)
00013AB8 137C 0004 0001             		move.b	#4,1(a1)
00013ABE 3369 0008 0030             		move.w	8(a1),$30(a1)
00013AC4 3368 0008 003A             		move.w	8(a0),$3A(a1)
00013ACA 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00013AD0 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00013AD6 3342 0034                  		move.w	d2,$34(a1)
00013ADA 337C 0200 0018             		move.w	#$200,priority(a1)
00013AE0 0C12 0001                  		cmpi.b	#1,(a2)
00013AE4 6600                       		bne.s	loc_BA40
00013AE6 137C 0091 0020             		move.b	#$91,collision_flags(a1)
00013AEC                            
00013AEC                            loc_BA40:
00013AEC 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00013AF0 2348 003C                  		move.l	a0,$3C(a1)
00013AF4 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
00013AF8                            
00013AF8 337C 0180 0018             		move.w	#$180,priority(a1)
00013AFE                            
00013AFE                            loc_BA52:
00013AFE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013B04                            
00013B04                            Obj45_Solid:				; XREF: Obj45_Index
00013B04 3F28 0008                  		move.w	8(a0),-(sp)
00013B08 4EB9 0000 0000             		jsr	Obj45_Move
00013B0E 323C 0017                  		move.w	#$17,d1
00013B12 343C 0020                  		move.w	#$20,d2
00013B16 363C 0020                  		move.w	#$20,d3
00013B1A 381F                       		move.w	(sp)+,d4
00013B1C 4EB9 0000 0000             		jsr	SolidObject
00013B22 4EB9 0000 0000             		jsr	DisplaySprite
00013B28 6000 0000                  		bra.w	Obj45_ChkDel
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            loc_BA7A:				; XREF: Obj45_Index
00013B2C 2268 003C                  		movea.l	$3C(a0),a1
00013B30 1029 0032                  		move.b	$32(a1),d0
00013B34 0600 0010                  		addi.b	#$10,d0
00013B38 EA08                       		lsr.b	#5,d0
00013B3A 5600                       		addq.b	#3,d0
00013B3C 1140 001A                  		move.b	d0,mapping_frame(a0)
00013B40                            
00013B40                            loc_BA8E:				; XREF: Obj45_Index
00013B40 2268 003C                  		movea.l	$3C(a0),a1
00013B44 7000                       		moveq	#0,d0
00013B46 1029 0032                  		move.b	$32(a1),d0
00013B4A 4440                       		neg.w	d0
00013B4C D068 0030                  		add.w	$30(a0),d0
00013B50 3140 0008                  		move.w	d0,8(a0)
00013B54                            
00013B54                            Obj45_Display:				; XREF: Obj45_Index
00013B54 4EB9 0000 0000             		jsr	DisplaySprite
00013B5A                            
00013B5A                            Obj45_ChkDel:				; XREF: Obj45_Solid
00013B5A 3028 003A                  		move.w	$3A(a0),d0
00013B5E 4EF9 0000 0000             		jmp		MarkObjGone4
00013B64                            
00013B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B64                            
00013B64                            
00013B64                            Obj45_Move:				; XREF: Obj45_Solid
00013B64 7000                       		moveq	#0,d0
00013B66 1028 0028                  		move.b	subtype(a0),d0
00013B6A D040                       		add.w	d0,d0
00013B6C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
00013B70 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
00013B74                            ; End of function Obj45_Move
00013B74                            
00013B74                            ; ===========================================================================
00013B74 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
00013B76 0000                       		dc.w loc_BADA-off_BAD6
00013B78                            ; ===========================================================================
00013B78                            
00013B78                            loc_BADA:				; XREF: off_BAD6
00013B78 4A68 0036                  		tst.w	$36(a0)
00013B7C 6700                       		beq.s	loc_BB08
00013B7E 4A68 0038                  		tst.w	$38(a0)
00013B82 6700                       		beq.s	loc_BAEC
00013B84 5368 0038                  		subq.w	#1,$38(a0)
00013B88 6000                       		bra.s	loc_BB3C
00013B8A                            ; ===========================================================================
00013B8A                            
00013B8A                            loc_BAEC:
00013B8A 0468 0080 0032             		subi.w	#$80,$32(a0)
00013B90 6400                       		bcc.s	loc_BB3C
00013B92 317C 0000 0032             		move.w	#0,$32(a0)
00013B98 317C 0000 0010             		move.w	#0,x_vel(a0)
00013B9E 317C 0000 0036             		move.w	#0,$36(a0)
00013BA4 6000                       		bra.s	loc_BB3C
00013BA6                            ; ===========================================================================
00013BA6                            
00013BA6                            loc_BB08:				; XREF: loc_BADA
00013BA6 3228 0034                  		move.w	$34(a0),d1
00013BAA B268 0032                  		cmp.w	$32(a0),d1
00013BAE 6700                       		beq.s	loc_BB3C
00013BB0 3028 0010                  		move.w	x_vel(a0),d0
00013BB4 0668 0070 0010             		addi.w	#$70,x_vel(a0)
00013BBA D168 0032                  		add.w	d0,$32(a0)
00013BBE B268 0032                  		cmp.w	$32(a0),d1
00013BC2 6200                       		bhi.s	loc_BB3C
00013BC4 3141 0032                  		move.w	d1,$32(a0)
00013BC8 317C 0000 0010             		move.w	#0,x_vel(a0)
00013BCE 317C 0001 0036             		move.w	#1,$36(a0)
00013BD4 317C 003C 0038             		move.w	#$3C,$38(a0)
00013BDA                            
00013BDA                            loc_BB3C:
00013BDA 7000                       		moveq	#0,d0
00013BDC 1028 0032                  		move.b	$32(a0),d0
00013BE0 4440                       		neg.w	d0
00013BE2 D068 0030                  		add.w	$30(a0),d0
00013BE6 3140 0008                  		move.w	d0,8(a0)
00013BEA 4E75                       		rts	
00013BEC                            ; ===========================================================================
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC                            Map_obj31:
00013BEC                            	include "_maps\obj31.asm"
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC 0000                       		dc.w byte_BB64-Map_obj31
00013BEE 0000                       		dc.w byte_BB7E-Map_obj31
00013BF0 0000                       		dc.w byte_BB98-Map_obj31
00013BF2 0000                       		dc.w byte_BB9E-Map_obj31
00013BF4 0000                       		dc.w byte_BBA9-Map_obj31
00013BF6 0000                       		dc.w byte_BBBE-Map_obj31
00013BF8 0000                       		dc.w byte_BBDD-Map_obj31
00013BFA 0000                       		dc.w byte_BC06-Map_obj31
00013BFC 0000                       		dc.w byte_BC06-Map_obj31
00013BFE 0000                       		dc.w byte_BC39-Map_obj31
00013C00 0000                       		dc.w byte_BC53-Map_obj31
00013C02 05                         byte_BB64:	dc.b 5
00013C03 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
00013C08 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
00013C0D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013C12 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
00013C17 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
00013C1C 05                         byte_BB7E:	dc.b 5
00013C1D F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
00013C22 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
00013C27 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
00013C2C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
00013C31 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
00013C36 01                         byte_BB98:	dc.b 1
00013C37 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
00013C3C 02                         byte_BB9E:	dc.b 2
00013C3D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C42 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C47 04                         byte_BBA9:	dc.b 4
00013C48 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013C4D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013C52 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C57 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C5C 06                         byte_BBBE:	dc.b 6
00013C5D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013C62 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013C67 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013C6C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013C71 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C76 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013C7B 08                         byte_BBDD:	dc.b 8
00013C7C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013C81 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013C86 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013C8B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013C90 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013C95 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013C9A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013C9F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013CA4 0A                         byte_BC06:	dc.b $A
00013CA5 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
00013CAA 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
00013CAF A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00013CB4 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00013CB9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00013CBE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00013CC3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00013CC8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00013CCD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00013CD2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00013CD7 05                         byte_BC39:	dc.b 5
00013CD8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
00013CDD F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
00013CE2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
00013CE7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
00013CEC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00013CF1 01                         byte_BC53:	dc.b 1
00013CF2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
00013CF8 00                         		even
00013CF8 00                         		even
00013CF8                            
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8                            Map_obj45:
00013CF8                            	include "_maps\obj45.asm"
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8                            ; Sprite mappings - spiked metal block from beta version (MZ)
00013CF8                            ; ---------------------------------------------------------------------------
00013CF8 0000                       		dc.w byte_BC6C-Map_obj45
00013CFA 0000                       		dc.w byte_BC7C-Map_obj45
00013CFC 0000                       		dc.w byte_BC8C-Map_obj45
00013CFE 0000                       		dc.w byte_BC92-Map_obj45
00013D00 0000                       		dc.w byte_BC9D-Map_obj45
00013D02 0000                       		dc.w byte_BCB2-Map_obj45
00013D04 0000                       		dc.w byte_BCD1-Map_obj45
00013D06 0000                       		dc.w byte_BCFA-Map_obj45
00013D08 0000                       		dc.w byte_BCFA-Map_obj45
00013D0A 03                         byte_BC6C:	dc.b 3
00013D0B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
00013D10 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
00013D15 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
00013D1A 03                         byte_BC7C:	dc.b 3
00013D1B E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
00013D20 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
00013D25 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
00013D2A 01                         byte_BC8C:	dc.b 1
00013D2B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
00013D30 02                         byte_BC92:	dc.b 2
00013D31 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D36 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D3B 04                         byte_BC9D:	dc.b 4
00013D3C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D41 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D46 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D4B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D50 06                         byte_BCB2:	dc.b 6
00013D51 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D56 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D5B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D60 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D65 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013D6A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013D6F 08                         byte_BCD1:	dc.b 8
00013D70 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D75 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013D7A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013D7F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013D84 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013D89 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013D8E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013D93 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013D98 08                         byte_BCFA:	dc.b 8
00013D99 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00013D9E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00013DA3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00013DA8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00013DAD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00013DB2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00013DB7 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00013DBC F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00013DC1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
00013DC6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
00013DCC 00                         		even
00013DCC 00                         		even
00013DCC                            
00013DCC                            ; ===========================================================================
00013DCC                            ; ---------------------------------------------------------------------------
00013DCC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
00013DCC                            ; ---------------------------------------------------------------------------
00013DCC                            
00013DCC                            Obj32:					; XREF: Obj_Index
00013DCC 7000                       		moveq	#0,d0
00013DCE 1028 0024                  		move.b	routine(a0),d0
00013DD2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
00013DD6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
00013DDA                            ; ===========================================================================
00013DDA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
00013DDC 0000                       		dc.w Obj32_Pressed-Obj32_Index
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            Obj32_Main:				; XREF: Obj32_Index
00013DDE 5428 0024                  		addq.b	#2,routine(a0)
00013DE2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
00013DEA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
00013DF0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00013DF6 6700                       		beq.s	loc_BD60
00013DF8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
00013DFE                            
00013DFE                            loc_BD60:
00013DFE 117C 0004 0001             		move.b	#4,1(a0)
00013E04 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00013E0A 317C 0200 0018             		move.w	#$200,priority(a0)
00013E10 5668 000C                  		addq.w	#3,$C(a0)
00013E14                            
00013E14                            Obj32_Pressed:				; XREF: Obj32_Index
00013E14 4A28 0001                  		tst.b	1(a0)
00013E18 4EB9 0000 0000             		jsr	Obj32_Display
00013E1E 323C 001B                  		move.w	#$1B,d1
00013E22 343C 0005                  		move.w	#5,d2
00013E26 363C 0005                  		move.w	#5,d3
00013E2A 3828 0008                  		move.w	8(a0),d4
00013E2E 4EB9 0000 0000             		jsr	SolidObject
00013E34 08A8 0000 001A             		bclr	#0,mapping_frame(a0)	; use "unpressed" frame
00013E3A 1028 0028                  		move.b	subtype(a0),d0
00013E3E 0240 000F                  		andi.w	#$F,d0
00013E42 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
00013E46 47F3 0000                  		lea	(a3,d0.w),a3
00013E4A 7600                       		moveq	#0,d3
00013E4C 0828 0006 0028             		btst	#6,subtype(a0)
00013E52 6700                       		beq.s	loc_BDB2
00013E54 7607                       		moveq	#7,d3
00013E56                            
00013E56                            loc_BDB2:
00013E56 4A28 0028                  		tst.b	subtype(a0)
00013E5A 6A00                       		bpl.s	loc_BDBE
00013E5C 4EB9 0000 0000             		jsr	Obj32_MZBlock
00013E62 6600                       		bne.s	loc_BDC8
00013E64                            
00013E64                            loc_BDBE:
00013E64 4A28 0025                  		tst.b	routine_secondary(a0)
00013E68 6600                       		bne.s	loc_BDC8
00013E6A 0793                       		bclr	d3,(a3)
00013E6C 6000                       		bra.s	loc_BDDE
00013E6E                            ; ===========================================================================
00013E6E                            
00013E6E                            loc_BDC8:
00013E6E 4A13                       		tst.b	(a3)
00013E70 6600                       		bne.s	loc_BDD6
00013E72 303C 005B                  		move.w	#$5B,d0
00013E76 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play switch sound
00013E7C                            
00013E7C                            loc_BDD6:
00013E7C 07D3                       		bset	d3,(a3)
00013E7E 08E8 0000 001A             		bset	#0,mapping_frame(a0)	; use "pressed"	frame
00013E84                            
00013E84                            loc_BDDE:
00013E84 0828 0005 0028             		btst	#5,subtype(a0)
00013E8A 6700                       		beq.s	Obj32_Display
00013E8C 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
00013E90 6A00                       		bpl.s	Obj32_Display
00013E92 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00013E98 0868 0001 001A             		bchg	#1,mapping_frame(a0)
00013E9E                            
00013E9E                            Obj32_Display:
00013E9E 4EB9 0000 0000             		jsr	DisplaySprite
00013EA4 4EF9 0000 0000             		jmp		MarkObjGone3
00013EAA                            
00013EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EAA                            
00013EAA                            
00013EAA                            Obj32_MZBlock:				; XREF: Obj32_Pressed
00013EAA 3F03                       		move.w	d3,-(sp)
00013EAC 3428 0008                  		move.w	8(a0),d2
00013EB0 3628 000C                  		move.w	$C(a0),d3
00013EB4 0442 0010                  		subi.w	#$10,d2
00013EB8 5143                       		subq.w	#8,d3
00013EBA 383C 0020                  		move.w	#$20,d4
00013EBE 3A3C 0010                  		move.w	#$10,d5
00013EC2 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
00013EC6 3C3C 005F                  		move.w	#$5F,d6
00013ECA                            
00013ECA                            Obj32_MZLoop:
00013ECA 4A29 0001                  		tst.b	1(a1)
00013ECE 6A00                       		bpl.s	loc_BE4E
00013ED0 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
00013ED4 6700                       		beq.s	loc_BE5E	; if yes, branch
00013ED6                            
00013ED6                            loc_BE4E:
00013ED6 43E9 0040                  		lea	object_size(a1),a1	; check	next object
00013EDA 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
00013EDE                            
00013EDE 361F                       		move.w	(sp)+,d3
00013EE0 7000                       		moveq	#0,d0
00013EE2                            
00013EE2                            locret_BE5A:
00013EE2 4E75                       		rts	
00013EE4                            ; ===========================================================================
00013EE4 1010                       Obj32_MZData:	dc.b $10, $10
00013EE6                            ; ===========================================================================
00013EE6                            
00013EE6                            loc_BE5E:				; XREF: Obj32_MZBlock
00013EE6 7001                       		moveq	#1,d0
00013EE8 0240 003F                  		andi.w	#$3F,d0
00013EEC D040                       		add.w	d0,d0
00013EEE 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
00013EF2 121A                       		move.b	(a2)+,d1
00013EF4 4881                       		ext.w	d1
00013EF6 3029 0008                  		move.w	8(a1),d0
00013EFA 9041                       		sub.w	d1,d0
00013EFC 9042                       		sub.w	d2,d0
00013EFE 6400                       		bcc.s	loc_BE80
00013F00 D241                       		add.w	d1,d1
00013F02 D041                       		add.w	d1,d0
00013F04 6500                       		bcs.s	loc_BE84
00013F06 60CE                       		bra.s	loc_BE4E
00013F08                            ; ===========================================================================
00013F08                            
00013F08                            loc_BE80:
00013F08 B044                       		cmp.w	d4,d0
00013F0A 62CA                       		bhi.s	loc_BE4E
00013F0C                            
00013F0C                            loc_BE84:
00013F0C 121A                       		move.b	(a2)+,d1
00013F0E 4881                       		ext.w	d1
00013F10 3029 000C                  		move.w	$C(a1),d0
00013F14 9041                       		sub.w	d1,d0
00013F16 9043                       		sub.w	d3,d0
00013F18 6400                       		bcc.s	loc_BE9A
00013F1A D241                       		add.w	d1,d1
00013F1C D041                       		add.w	d1,d0
00013F1E 6500                       		bcs.s	loc_BE9E
00013F20 60B4                       		bra.s	loc_BE4E
00013F22                            ; ===========================================================================
00013F22                            
00013F22                            loc_BE9A:
00013F22 B045                       		cmp.w	d5,d0
00013F24 62B0                       		bhi.s	loc_BE4E
00013F26                            
00013F26                            loc_BE9E:
00013F26 361F                       		move.w	(sp)+,d3
00013F28 7001                       		moveq	#1,d0
00013F2A 4E75                       		rts	
00013F2C                            ; End of function Obj32_MZBlock
00013F2C                            
00013F2C                            ; ===========================================================================
00013F2C                            ; ---------------------------------------------------------------------------
00013F2C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00013F2C                            ; ---------------------------------------------------------------------------
00013F2C                            Map_obj32:
00013F2C                            	include "_maps\obj32.asm"
00013F2C                            ; ---------------------------------------------------------------------------
00013F2C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00013F2C                            ; ---------------------------------------------------------------------------
00013F2C 0000                       		dc.w byte_BEAC-Map_obj32
00013F2E 0000                       		dc.w byte_BEB7-Map_obj32
00013F30 0000                       		dc.w byte_BEC2-Map_obj32
00013F32 0000                       		dc.w byte_BEB7-Map_obj32
00013F34 02                         byte_BEAC:	dc.b 2
00013F35 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
00013F3A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
00013F3F 02                         byte_BEB7:	dc.b 2
00013F40 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
00013F45 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
00013F4A 02                         byte_BEC2:	dc.b 2
00013F4B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
00013F50 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
00013F55 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013F5A                            		even
00013F5A                            		even
00013F5A                            
00013F5A                            ; ===========================================================================
00013F5A                            ; ---------------------------------------------------------------------------
00013F5A                            ; Object 33 - pushable blocks (MZ, LZ)
00013F5A                            ; ---------------------------------------------------------------------------
00013F5A                            
00013F5A                            Obj33:					; XREF: Obj_Index
00013F5A 7000                       		moveq	#0,d0
00013F5C 1028 0024                  		move.b	routine(a0),d0
00013F60 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
00013F64 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
00013F68                            ; ===========================================================================
00013F68 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
00013F6A 0000                       		dc.w loc_BF6E-Obj33_Index
00013F6C 0000                       		dc.w loc_C02C-Obj33_Index
00013F6E                            
00013F6E 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
00013F70 4001                       		dc.b $40, 1
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            Obj33_Main:				; XREF: Obj33_Index
00013F72 5428 0024                  		addq.b	#2,routine(a0)
00013F76 117C 000F 0016             		move.b	#$F,$16(a0)
00013F7C 117C 000F 0017             		move.b	#$F,$17(a0)
00013F82 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
00013F8A 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
00013F90 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00013F96 6600                       		bne.s	loc_BF16
00013F98 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
00013F9E                            
00013F9E                            loc_BF16:
00013F9E 117C 0004 0001             		move.b	#4,1(a0)
00013FA4 317C 0180 0018             		move.w	#$180,priority(a0)
00013FAA 3168 0008 0034             		move.w	8(a0),$34(a0)
00013FB0 3168 000C 0036             		move.w	$C(a0),$36(a0)
00013FB6 7000                       		moveq	#0,d0
00013FB8 1028 0028                  		move.b	subtype(a0),d0
00013FBC D040                       		add.w	d0,d0
00013FBE 0240 000E                  		andi.w	#$E,d0
00013FC2 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
00013FC6 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00013FCA 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
00013FCE 4A28 0028                  		tst.b	subtype(a0)
00013FD2 6700                       		beq.s	Obj33_ChkGone
00013FD4 317C C2B8 0002             		move.w	#$C2B8,2(a0)
00013FDA                            
00013FDA                            Obj33_ChkGone:
00013FDA                            ;		lea	(v_objstate).w,a2
00013FDA 7000                       		moveq	#0,d0
00013FDC 3028 0014                  		move.w	respawn_index(a0),d0
00013FE0                            ;        move.w	respawn_index(a0),d0
00013FE0 3440                       	    movea.w	d0,a2
00013FE2 6700                       		beq.s	loc_BF6E
00013FE4 0892 0007                  		bclr	#7,(a2)
00013FE8 08D2 0000                  		bset	#0,(a2)
00013FEC 6600 0000                  		bne.w	DeleteObject
00013FF0                            
00013FF0                            loc_BF6E:				; XREF: Obj33_Index
00013FF0 4A28 0032                  		tst.b	$32(a0)
00013FF4 6600 0000                  		bne.w	loc_C046
00013FF8 7200                       		moveq	#0,d1
00013FFA 1228 0023                  		move.b	width_pixels(a0),d1
00013FFE 0641 000B                  		addi.w	#$B,d1
00014002 343C 0010                  		move.w	#$10,d2
00014006 363C 0011                  		move.w	#$11,d3
0001400A 3828 0008                  		move.w	8(a0),d4
0001400E 4EB9 0000 0000             		jsr	loc_C186
00014014 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0001401A 6600                       		bne.s	loc_BFC6	; if not, branch
0001401C 08A8 0007 0028             		bclr	#7,subtype(a0)
00014022 3028 0008                  		move.w	8(a0),d0
00014026 0C40 0A20                  		cmpi.w	#$A20,d0
0001402A 6500                       		bcs.s	loc_BFC6
0001402C 0C40 0AA1                  		cmpi.w	#$AA1,d0
00014030 6400                       		bcc.s	loc_BFC6
00014032 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
00014036 0440 001C                  		subi.w	#$1C,d0
0001403A 3140 000C                  		move.w	d0,$C(a0)
0001403E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
00014044 08E8 0007 0028             		bset	#7,subtype(a0)
0001404A                            
0001404A                            loc_BFC6:
0001404A 3028 0008                  		move.w	8(a0),d0
0001404E 0240 FF80                  		andi.w	#$FF80,d0
00014052 3238 F700                  		move.w	($FFFFF700).w,d1
00014056 0441 0080                  		subi.w	#$80,d1
0001405A 0241 FF80                  		andi.w	#$FF80,d1
0001405E 9041                       		sub.w	d1,d0
00014060 0C40 0280                  		cmpi.w	#$280,d0
00014064 6200                       		bhi.s	loc_BFE6
00014066 6000 0000                  		bra.w	DisplaySprite
0001406A                            ; ===========================================================================
0001406A                            
0001406A                            loc_BFE6:
0001406A 3028 0034                  		move.w	$34(a0),d0
0001406E 0240 FF80                  		andi.w	#$FF80,d0
00014072 3238 F700                  		move.w	($FFFFF700).w,d1
00014076 0441 0080                  		subi.w	#$80,d1
0001407A 0241 FF80                  		andi.w	#$FF80,d1
0001407E 9041                       		sub.w	d1,d0
00014080 0C40 0280                  		cmpi.w	#$280,d0
00014084 6200                       		bhi.s	loc_C016
00014086 3168 0034 0008             		move.w	$34(a0),8(a0)
0001408C 3168 0036 000C             		move.w	$36(a0),$C(a0)
00014092 117C 0004 0024             		move.b	#4,routine(a0)
00014098 6000                       		bra.s	loc_C02C
0001409A                            ; ===========================================================================
0001409A                            
0001409A                            loc_C016:
0001409A                            ;		lea	(v_objstate).w,a2
0001409A 7000                       		moveq	#0,d0
0001409C 3028 0014                  		move.w	respawn_index(a0),d0
000140A0                            ;        move.w	respawn_index(a0),d0
000140A0 3440                       	    movea.w	d0,a2
000140A2 6700                       		beq.s	loc_C028
000140A4 0892 0000                  		bclr	#0,(a2)
000140A8                            
000140A8                            loc_C028:
000140A8 6000 0000                  		bra.w	DeleteObject
000140AC                            ; ===========================================================================
000140AC                            
000140AC                            loc_C02C:				; XREF: Obj33_Index
000140AC 4EB9 0000 0000             		jsr	ChkObjOnScreen2
000140B2 6700                       		beq.s	locret_C044
000140B4 117C 0002 0024             		move.b	#2,routine(a0)
000140BA 4228 0032                  		clr.b	$32(a0)
000140BE 4268 0010                  		clr.w	x_vel(a0)
000140C2 4268 0012                  		clr.w	y_vel(a0)
000140C6                            
000140C6                            locret_C044:
000140C6 4E75                       		rts	
000140C8                            ; ===========================================================================
000140C8                            
000140C8                            loc_C046:				; XREF: loc_BF6E
000140C8 3F28 0008                  		move.w	8(a0),-(sp)
000140CC 0C28 0004 0025             		cmpi.b	#4,routine_secondary(a0)
000140D2 6400                       		bcc.s	loc_C056
000140D4 4EB9 0000 0000             		jsr	SpeedToPos
000140DA                            
000140DA                            loc_C056:
000140DA 0828 0001 0022             		btst	#1,status(a0)
000140E0 6700                       		beq.s	loc_C0A0
000140E2 0668 0018 0012             		addi.w	#$18,y_vel(a0)
000140E8 4EB9 0000 0000             		jsr	ObjHitFloor
000140EE 4A41                       		tst.w	d1
000140F0 6A00 0000                  		bpl.w	loc_C09E
000140F4 D368 000C                  		add.w	d1,$C(a0)
000140F8 4268 0012                  		clr.w	y_vel(a0)
000140FC 08A8 0001 0022             		bclr	#1,status(a0)
00014102 3011                       		move.w	(a1),d0
00014104 0240 03FF                  		andi.w	#$3FF,d0
00014108 0C40 016A                  		cmpi.w	#$16A,d0
0001410C 6500                       		bcs.s	loc_C09E
0001410E 3028 0030                  		move.w	$30(a0),d0
00014112 E640                       		asr.w	#3,d0
00014114 3140 0010                  		move.w	d0,x_vel(a0)
00014118 117C 0001 0032             		move.b	#1,$32(a0)
0001411E 4268 000E                  		clr.w	$E(a0)
00014122                            
00014122                            loc_C09E:
00014122 6000                       		bra.s	loc_C0E6
00014124                            ; ===========================================================================
00014124                            
00014124                            loc_C0A0:
00014124 4A68 0010                  		tst.w	x_vel(a0)
00014128 6700 0000                  		beq.w	loc_C0D6
0001412C 6B00                       		bmi.s	loc_C0BC
0001412E 7600                       		moveq	#0,d3
00014130 1628 0023                  		move.b	width_pixels(a0),d3
00014134 4EB9 0000 0000             		jsr	ObjHitWallRight
0001413A 4A41                       		tst.w	d1		; has block touched a wall?
0001413C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0001413E 6000                       		bra.s	loc_C0E6
00014140                            ; ===========================================================================
00014140                            
00014140                            loc_C0BC:
00014140 7600                       		moveq	#0,d3
00014142 1628 0023                  		move.b	width_pixels(a0),d3
00014146 4643                       		not.w	d3
00014148 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001414E 4A41                       		tst.w	d1		; has block touched a wall?
00014150 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
00014152 6000                       		bra.s	loc_C0E6
00014154                            ; ===========================================================================
00014154                            
00014154                            Obj33_StopPush:
00014154 4268 0010                  		clr.w	x_vel(a0)		; stop block moving
00014158 6000                       		bra.s	loc_C0E6
0001415A                            ; ===========================================================================
0001415A                            
0001415A                            loc_C0D6:
0001415A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
00014162 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
00014168 6400                       		bcc.s	loc_C104
0001416A                            
0001416A                            loc_C0E6:
0001416A 7200                       		moveq	#0,d1
0001416C 1228 0023                  		move.b	width_pixels(a0),d1
00014170 0641 000B                  		addi.w	#$B,d1
00014174 343C 0010                  		move.w	#$10,d2
00014178 363C 0011                  		move.w	#$11,d3
0001417C 381F                       		move.w	(sp)+,d4
0001417E 4EB9 0000 0000             		jsr	loc_C186
00014184 6100                       		bsr.s	Obj33_ChkLava
00014186 6000 FEC2                  		bra.w	loc_BFC6
0001418A                            ; ===========================================================================
0001418A                            
0001418A                            loc_C104:
0001418A 381F                       		move.w	(sp)+,d4
0001418C 43F8 D000                  		lea	($FFFFD000).w,a1
00014190 08A9 0003 0022             		bclr	#3,status(a1)
00014196 08A8 0003 0022             		bclr	#3,status(a0)
0001419C 6000 FECC                  		bra.w	loc_BFE6
000141A0                            ; ===========================================================================
000141A0                            
000141A0                            Obj33_ChkLava:
000141A0 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
000141A6 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
000141A8 343C FFE0                  		move.w	#-$20,d2
000141AC 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
000141B2 6700                       		beq.s	Obj33_LoadLava
000141B4 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
000141BA 6700                       		beq.s	Obj33_LoadLava
000141BC 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
000141C2 6700                       		beq.s	Obj33_LoadLava
000141C4 4E75                       		rts	
000141C6                            ; ===========================================================================
000141C6                            
000141C6                            Obj33_ChkLava2:
000141C6 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
000141CC 6600                       		bne.s	Obj33_NoLava	; if not, branch
000141CE 343C 0020                  		move.w	#$20,d2
000141D2 0C68 0560 0008             		cmpi.w	#$560,8(a0)
000141D8 6700                       		beq.s	Obj33_LoadLava
000141DA 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
000141E0 6700                       		beq.s	Obj33_LoadLava
000141E2                            
000141E2                            Obj33_NoLava:
000141E2 4E75                       		rts	
000141E4                            ; ===========================================================================
000141E4                            
000141E4                            Obj33_LoadLava:
000141E4 6100 0000                  		bsr.w	SingleObjLoad
000141E8 6600                       		bne.s	locret_C184
000141EA 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
000141EE 3368 0008 0008             		move.w	8(a0),8(a1)
000141F4 D569 0008                  		add.w	d2,8(a1)
000141F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000141FE 0669 0010 000C             		addi.w	#$10,$C(a1)
00014204 2348 003C                  		move.l	a0,$3C(a1)
00014208                            
00014208                            locret_C184:
00014208 4E75                       		rts	
0001420A                            ; ===========================================================================
0001420A                            
0001420A                            loc_C186:				; XREF: loc_BF6E
0001420A 1028 0025                  		move.b	routine_secondary(a0),d0
0001420E 6700 0000                  		beq.w	loc_C218
00014212 5500                       		subq.b	#2,d0
00014214 6600                       		bne.s	loc_C1AA
00014216 4EBA AFC2                  		jsr	ExitPlatform
0001421A 0829 0003 0022             		btst	#3,status(a1)
00014220 6600                       		bne.s	loc_C1A4
00014222 4228 0025                  		clr.b	routine_secondary(a0)
00014226 4E75                       		rts	
00014228                            ; ===========================================================================
00014228                            
00014228                            loc_C1A4:
00014228 3404                       		move.w	d4,d2
0001422A 6000 B208                  		bra.w	MvSonicOnPtfm
0001422E                            ; ===========================================================================
0001422E                            
0001422E                            loc_C1AA:
0001422E 5500                       		subq.b	#2,d0
00014230 6600                       		bne.s	loc_C1F2
00014232 4EB9 0000 0000             		jsr	SpeedToPos
00014238 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001423E 4EB9 0000 0000             		jsr	ObjHitFloor
00014244 4A41                       		tst.w	d1
00014246 6A00 0000                  		bpl.w	locret_C1F0
0001424A D368 000C                  		add.w	d1,$C(a0)
0001424E 4268 0012                  		clr.w	y_vel(a0)
00014252 4228 0025                  		clr.b	routine_secondary(a0)
00014256 3011                       		move.w	(a1),d0
00014258 0240 03FF                  		andi.w	#$3FF,d0
0001425C 0C40 016A                  		cmpi.w	#$16A,d0
00014260 6500                       		bcs.s	locret_C1F0
00014262 3028 0030                  		move.w	$30(a0),d0
00014266 E640                       		asr.w	#3,d0
00014268 3140 0010                  		move.w	d0,x_vel(a0)
0001426C 117C 0001 0032             		move.b	#1,$32(a0)
00014272 4268 000E                  		clr.w	$E(a0)
00014276                            
00014276                            locret_C1F0:
00014276 4E75                       		rts	
00014278                            ; ===========================================================================
00014278                            
00014278                            loc_C1F2:
00014278 4EB9 0000 0000             		jsr	SpeedToPos
0001427E 3028 0008                  		move.w	8(a0),d0
00014282 0240 000C                  		andi.w	#$C,d0
00014286 6600 0000                  		bne.w	locret_C2E4
0001428A 0268 FFF0 0008             		andi.w	#-$10,8(a0)
00014290 3168 0010 0030             		move.w	x_vel(a0),$30(a0)
00014296 4268 0010                  		clr.w	x_vel(a0)
0001429A 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001429E 4E75                       		rts	
000142A0                            ; ===========================================================================
000142A0                            
000142A0                            loc_C218:
000142A0 4EB9 0000 0000             		jsr	loc_FAC8
000142A6 4A44                       		tst.w	d4
000142A8 6700 0000                  		beq.w	locret_C2E4
000142AC 6B00 0000                  		bmi.w	locret_C2E4
000142B0 4A28 0032                  		tst.b	$32(a0)
000142B4 6700                       		beq.s	loc_C230
000142B6 6000 0000                  		bra.w	locret_C2E4
000142BA                            ; ===========================================================================
000142BA                            
000142BA                            loc_C230:
000142BA 4A40                       		tst.w	d0
000142BC 6700 0000                  		beq.w	locret_C2E4
000142C0 6B00                       		bmi.s	loc_C268
000142C2 0829 0000 0022             		btst	#0,status(a1)
000142C8 6600 0000                  		bne.w	locret_C2E4
000142CC 3F00                       		move.w	d0,-(sp)
000142CE 7600                       		moveq	#0,d3
000142D0 1628 0023                  		move.b	width_pixels(a0),d3
000142D4 4EB9 0000 0000             		jsr	ObjHitWallRight
000142DA 301F                       		move.w	(sp)+,d0
000142DC 4A41                       		tst.w	d1
000142DE 6B00 0000                  		bmi.w	locret_C2E4
000142E2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
000142EA 7001                       		moveq	#1,d0
000142EC 323C 0040                  		move.w	#$40,d1
000142F0 6000                       		bra.s	loc_C294
000142F2                            ; ===========================================================================
000142F2                            
000142F2                            loc_C268:
000142F2 0829 0000 0022             		btst	#0,status(a1)
000142F8 6700                       		beq.s	locret_C2E4
000142FA 3F00                       		move.w	d0,-(sp)
000142FC 7600                       		moveq	#0,d3
000142FE 1628 0023                  		move.b	width_pixels(a0),d3
00014302 4643                       		not.w	d3
00014304 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001430A 301F                       		move.w	(sp)+,d0
0001430C 4A41                       		tst.w	d1
0001430E 6B00                       		bmi.s	locret_C2E4
00014310 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00014318 70FF                       		moveq	#-1,d0
0001431A 323C FFC0                  		move.w	#-$40,d1
0001431E                            
0001431E                            loc_C294:
0001431E 43F8 D000                  		lea	($FFFFD000).w,a1
00014322 D169 0008                  		add.w	d0,8(a1)
00014326 3341 0020                  		move.w	d1,inertia(a1)
0001432A 337C 0000 0010             		move.w	#0,x_vel(a1)
00014330 3F00                       		move.w	d0,-(sp)
00014332 303C 00A7                  		move.w	#$A7,d0
00014336 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play pushing sound
0001433C 301F                       		move.w	(sp)+,d0
0001433E 4A28 0028                  		tst.b	subtype(a0)
00014342 6B00                       		bmi.s	locret_C2E4
00014344 3F00                       		move.w	d0,-(sp)
00014346 4EB9 0000 0000             		jsr	ObjHitFloor
0001434C 301F                       		move.w	(sp)+,d0
0001434E 0C41 0004                  		cmpi.w	#4,d1
00014352 6F00                       		ble.s	loc_C2E0
00014354 317C 0400 0010             		move.w	#$400,x_vel(a0)
0001435A 4A40                       		tst.w	d0
0001435C 6A00                       		bpl.s	loc_C2D8
0001435E 4468 0010                  		neg.w	x_vel(a0)
00014362                            
00014362                            loc_C2D8:
00014362 117C 0006 0025             		move.b	#6,routine_secondary(a0)
00014368 6000                       		bra.s	locret_C2E4
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            loc_C2E0:
0001436A D368 000C                  		add.w	d1,$C(a0)
0001436E                            
0001436E                            locret_C2E4:
0001436E 4E75                       		rts	
00014370                            ; ===========================================================================
00014370                            ; ---------------------------------------------------------------------------
00014370                            ; Sprite mappings - pushable blocks (MZ, LZ)
00014370                            ; ---------------------------------------------------------------------------
00014370                            Map_obj33:
00014370                            	include "_maps\obj33.asm"
00014370                            ; ---------------------------------------------------------------------------
00014370                            ; Sprite mappings - pushable blocks (MZ, LZ)
00014370                            ; ---------------------------------------------------------------------------
00014370 0000                       		dc.w byte_C2EA-Map_obj33
00014372 0000                       		dc.w byte_C2F0-Map_obj33
00014374 01                         byte_C2EA:	dc.b 1
00014375 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0001437A 04                         byte_C2F0:	dc.b 4
0001437B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
00014380 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
00014385 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0001438A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
00014390 00                         		even
00014390 00                         		even
00014390                            
00014390                            ; ===========================================================================
00014390                            ; ---------------------------------------------------------------------------
00014390                            ; Object 34 - zone title cards
00014390                            ; ---------------------------------------------------------------------------
00014390                            
00014390                            Obj34:					; XREF: Obj_Index
00014390 7000                       		moveq	#0,d0
00014392 1028 0024                  		move.b	routine(a0),d0
00014396 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0001439A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0001439E                            ; ===========================================================================
0001439E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
000143A0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
000143A2 0000                       		dc.w Obj34_Wait-Obj34_Index
000143A4 0000                       		dc.w Obj34_Wait-Obj34_Index
000143A6                            ; ===========================================================================
000143A6                            
000143A6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
000143A6 2248                       		movea.l	a0,a1
000143A8 7000                       		moveq	#0,d0
000143AA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000143AE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
000143B4 6600                       		bne.s	Obj34_CheckFZ
000143B6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
000143B8                            
000143B8                            Obj34_CheckFZ:
000143B8 3400                       		move.w	d0,d2
000143BA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
000143C0 6600                       		bne.s	Obj34_CheckNew
000143C2 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
000143C4 740B                       		moveq	#$B,d2		; use "FINAL" mappings
000143C6                             
000143C6                            Obj34_CheckNew:
000143C6 0C38 0007 FE10             		cmpi.b	#7,($FFFFFE10).w ; check if level is in the new zones
000143CC 6500                       		blo.s	Obj34_LoadConfig
000143CE 5A02                       		addq.b	#$C-7,d2	; use correct mappings
000143D0                            
000143D0                            Obj34_LoadConfig:
000143D0 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
000143D6 E948                       		lsl.w	#4,d0
000143D8 D6C0                       		adda.w	d0,a3
000143DA 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
000143E0 7203                       		moveq	#3,d1
000143E2                            
000143E2                            Obj34_Loop:
000143E2 12BC 0034                  		move.b	#$34,0(a1)
000143E6 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
000143EA 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
000143EE 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
000143F2 335A 000A                  		move.w	(a2)+,$A(a1)
000143F6 135A 0024                  		move.b	(a2)+,routine(a1)
000143FA 101A                       		move.b	(a2)+,d0
000143FC 6600                       		bne.s	Obj34_ActNumber
000143FE 1002                       		move.b	d2,d0
00014400                            
00014400                            Obj34_ActNumber:
00014400 0C00 0007                  		cmpi.b	#7,d0
00014404 6600                       		bne.s	Obj34_MakeSprite
00014406 D038 FE11                  		add.b	($FFFFFE11).w,d0
0001440A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
00014410 6600                       		bne.s	Obj34_ActNumber_4	; if not, branch
00014412 5300                       		subq.b	#1,d0
00014414 6000                       		bra.s	Obj34_MakeSprite
00014416                            
00014416                            Obj34_ActNumber_4:
00014416 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w	; is act number 4?
0001441C 6600                       		bne.s	Obj34_MakeSprite	; if not, branch
0001441E 103C 000C                  		move.b	#12,d0				; set to load the number 4
00014422                            
00014422                            Obj34_MakeSprite:
00014422 1340 001A                  		move.b	d0,mapping_frame(a1)	; display frame	number d0
00014426 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0001442E 337C 8580 0002             		move.w	#$8580,2(a1)
00014434 137C 0078 0023             		move.b	#$78,width_pixels(a1)
0001443A 137C 0000 0001             		move.b	#0,1(a1)
00014440 137C 0000 0018             		move.b	#0,priority(a1)
00014446 337C 003C 001E             		move.w	#60,anim_frame_duration(a1)	; set time delay to 1 second
0001444C 43E9 0040                  		lea	object_size(a1),a1		; next object
00014450 51C9 FF90                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
00014454                            
00014454                            Obj34_ChkPos:				; XREF: Obj34_Index
00014454 7210                       		moveq	#$10,d1		; set horizontal speed
00014456 3028 0030                  		move.w	$30(a0),d0
0001445A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0001445E 6700                       		beq.s	loc_C3C8	; if yes, branch
00014460 6C00                       		bge.s	Obj34_Move
00014462 4441                       		neg.w	d1
00014464                            
00014464                            Obj34_Move:
00014464 D368 0008                  		add.w	d1,8(a0)	; change item's position
00014468                            
00014468                            loc_C3C8:
00014468 3028 0008                  		move.w	8(a0),d0
0001446C 6B00                       		bmi.s	locret_C3D8
0001446E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014472 6400                       		bcc.s	locret_C3D8	; if yes, branch
00014474 6000 0000                  		bra.w	DisplaySprite
00014478                            ; ===========================================================================
00014478                            
00014478                            locret_C3D8:
00014478 4E75                       		rts	
0001447A                            ; ===========================================================================
0001447A                            
0001447A                            Obj34_Wait:				; XREF: Obj34_Index
0001447A 4A68 001E                  		tst.w	anim_frame_duration(a0)			; is time remaining zero?
0001447E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
00014480 5368 001E                  		subq.w	#1,anim_frame_duration(a0)		; subtract 1 from time
00014484 6000 0000                  		bra.w	DisplaySprite
00014488                            ; ===========================================================================
00014488                            
00014488                            Obj34_ChkPos2:				; XREF: Obj34_Wait
00014488 4A28 0001                  		tst.b	1(a0)
0001448C 6A00                       		bpl.s	Obj34_ChangeArt
0001448E 7220                       		moveq	#$20,d1
00014490 3028 0032                  		move.w	$32(a0),d0
00014494 B068 0008                  		cmp.w	8(a0),d0		; has item reached the finish position?
00014498 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0001449A 6C00                       		bge.s	Obj34_Move2
0001449C 4441                       		neg.w	d1
0001449E                            
0001449E                            Obj34_Move2:
0001449E D368 0008                  		add.w	d1,8(a0)	; change item's position
000144A2 3028 0008                  		move.w	8(a0),d0
000144A6 6B00                       		bmi.s	locret_C412
000144A8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000144AC 6400                       		bcc.s	locret_C412	; if yes, branch
000144AE 6000 0000                  		bra.w	DisplaySprite
000144B2                            ; ===========================================================================
000144B2                            
000144B2                            locret_C412:
000144B2 4E75                       		rts	
000144B4                            ; ===========================================================================
000144B4                            
000144B4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
000144B4 0C28 0004 0024             		cmpi.b	#4,routine(a0)
000144BA 6600                       		bne.s	Obj34_Delete
000144BC 7002                       		moveq	#2,d0
000144BE 4EB9 0000 36F6             		jsr	(LoadPLC).l	; load explosion patterns
000144C4 4EB9 0000 36BE             		jsr	(LoadAnimalPLC).l ; load animal patterns
000144CA                            
000144CA                            Obj34_Delete:
000144CA 6000 0000                  		bra.w	DeleteObject
000144CE                            ; ===========================================================================
000144CE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
000144D0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
000144D2 00E4                       		dc.w $E4
000144D4 0206                       		dc.b 2,	6
000144D6 00EA                       		dc.w $EA
000144D8 0207                       		dc.b 2,	7
000144DA 00E0                       		dc.w $E0
000144DC 020A                       		dc.b 2,	$A
000144DE                            ; ---------------------------------------------------------------------------
000144DE                            ; Title	card configuration data
000144DE                            ; Format:
000144DE                            ; 4 bytes per item (YYYY XXXX)
000144DE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
000144DE                            ; ---------------------------------------------------------------------------
000144DE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
000144EE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
000144FE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0001450E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0001451E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0001452E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0001453E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0001454E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; ABZ
0001455E                            ; ===========================================================================
0001455E                            ;===============================================================================
0001455E                            ; Objeto 0x34 - Tela com o nome das fases conhecido tambem conhecido como: 
0001455E                            ; [ Termino ]        - Splash Screen, Title Cards, etc... 
0001455E                            ;===============================================================================  
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0001455E                            ; ---------------------------------------------------------------------------
0001455E                            
0001455E                            Obj39:					; XREF: Obj_Index
0001455E 7000                       		moveq	#0,d0
00014560 1028 0024                  		move.b	routine(a0),d0
00014564 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
00014568 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0001456C                            ; ===========================================================================
0001456C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0001456E 0000                       		dc.w loc_C50C-Obj39_Index
00014570 0000                       		dc.w Obj39_Wait-Obj39_Index
00014572                            ; ===========================================================================
00014572                            
00014572                            Obj39_ChkPLC: 				; XREF: Obj39_Index
00014572 4AB8 F680                          tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014576 6700                       		beq.s	Obj39_Main	; if yes, branch
00014578 4E75                       		rts
0001457A                            ; ===========================================================================
0001457A                            Obj39_Main:
0001457A 43F8 D0C0                          lea 	($FFFFD0C0).w,a1
0001457E 12BC 0039                     		move.b	#$39,(a1) ; load OVER object
00014582 337C 855E 0002             		move.w	#$855E,2(a1)
00014588 237C 0000 0000 0004        		move.l	#Map_obj39,4(a1)
00014590 137C 0001 001A             		move.b	#1,$1A(a1) ; set OVER object to correct frame
00014596 137C 0002 0024             		move.b  #2,routine(a1)
0001459C 337C 00F0 000A             		move.w	#$F0,$A(a1)
000145A2 337C 01F0 0008             		move.w	#$1F0,8(a1)
000145A8 137C 0000 0001             		move.b	#0,1(a1)
000145AE 137C 0000 0018             		move.b	#0,priority(a1)
000145B4 5428 0024                  		addq.b	#2,routine(a0)
000145B8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
000145C0 317C 855E 0002             		move.w	#$855E,2(a0)
000145C6 117C 0000 0001               		move.b	#0,1(a0)
000145CC 117C 0000 0018             		move.b	#0,priority(a0)
000145D2 317C 00F0 000A               		move.w	#$F0,$A(a0)
000145D8 317C 0050 0008               		move.w	#$50,8(a0)	; set x-position
000145DE                            
000145DE                            loc_C50C:				; XREF: Obj39_Index
000145DE 7210                       		moveq	#$10,d1		; set horizontal speed
000145E0 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
000145E6 6700                       		beq.s	Obj39_SetWait	; if yes, branch
000145E8 6500                       		bcs.s	Obj39_Move
000145EA 4441                       		neg.w	d1
000145EC                            
000145EC                            Obj39_Move:
000145EC D368 0008                  		add.w	d1,8(a0)	; change item's position
000145F0 6000 0000                  		bra.w	DisplaySprite
000145F4                            ; ===========================================================================
000145F4                            
000145F4                            Obj39_SetWait:				; XREF: Obj39_Main
000145F4 317C 02D0 001E             		move.w	#720,anim_frame_duration(a0)	; set time delay to 12 seconds
000145FA 5428 0024                  		addq.b	#2,routine(a0)
000145FE 4E75                       		rts	
00014600                            ; ===========================================================================
00014600                            
00014600                            Obj39_Wait:				; XREF: Obj39_Index
00014600 1038 F605                  		move.b	($FFFFF605).w,d0
00014604 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
00014608 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0001460A 0828 0000 001A             		btst	#0,$1A(a0)
00014610 6600                       		bne.s	Obj39_Display
00014612 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
00014616 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
00014618 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0001461C 6000 0000                  		bra.w	DisplaySprite
00014620                            ; ===========================================================================
00014620                            
00014620                            Obj39_ChgMode:				; XREF: Obj39_Wait
00014620 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
00014624 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
00014626 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0001462C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
00014630 6600                       		bne.s	Obj39_Display	; if yes, branch
00014632 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
00014638 6000                       		bra.s	Obj39_Display
0001463A                            ; ===========================================================================
0001463A                            
0001463A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0001463A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014640                            
00014640                            Obj39_Display:				; XREF: Obj39_ChgMode
00014640 6000 0000                  		bra.w	DisplaySprite
00014644                            ; ===========================================================================
00014644                            
00014644                            ; ---------------------------------------------------------------------------
00014644                            ; Object 3A - "SONIC GOT THROUGH" title	card
00014644                            ; ---------------------------------------------------------------------------
00014644                            
00014644                            Obj3A:					; XREF: Obj_Index
00014644 7000                       		moveq	#0,d0
00014646 1028 0024                  		move.b	routine(a0),d0
0001464A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0001464E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
00014652                            ; ===========================================================================
00014652 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
00014654 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
00014656 0000                       		dc.w Obj3A_Wait-Obj3A_Index
00014658 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0001465A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0001465C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0001465E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
00014660 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
00014662 0000                       		dc.w loc_C766-Obj3A_Index
00014664                            ; ===========================================================================
00014664                            
00014664                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
00014664 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014668 6700                       		beq.s	Obj3A_Main	; if yes, branch
0001466A 4E75                       		rts	
0001466C                            ; ===========================================================================
0001466C                            
0001466C                            Obj3A_Main:
0001466C                            	;Mercury Remove Speed Shoes At Signpost Fix
0001466C 4238 D034                  		clr.b	(Maincharacter+speedshoes_time).w	; clear Super Shoes	;Mercury Constants
00014670                            ;		clr.w	($FFFFD032).w		; clear time limit of the invincibility
00014670                            ;		clr.w	($FFFFFE2C).w	; remove shield
00014670                            ;		move.b	#$0,($FFFFD180).w ; load shield object	($38)
00014670                            	;end Remove Speed Shoes At Signpost Fix
00014670                            ;		move.b	#$23,(MainCharacter+anim).w
00014670                            ;		clr.w	(MainCharacter+inertia).w
00014670                            ;		clr.w	(MainCharacter+x_vel).w
00014670 2248                       		movea.l	a0,a1
00014672 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
00014678 7206                       		moveq	#6,d1
0001467A                            
0001467A                            Obj3A_Loop:
0001467A 12BC 003A                  		move.b	#$3A,0(a1)
0001467E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
00014682 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
00014686 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0001468A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0001468E 135A 0024                  		move.b	(a2)+,routine(a1)
00014692 101A                       		move.b	(a2)+,d0
00014694 0C00 0006                  		cmpi.b	#6,d0
00014698 6600                       		bne.s	loc_C5CA
0001469A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0001469E                            
0001469E                            loc_C5CA:
0001469E 1340 001A                  		move.b	d0,mapping_frame(a1)
000146A2                            		
000146A2                            loc_C5CA_2:
000146A2 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
000146AA 337C 8580 0002             		move.w	#$8580,2(a1)
000146B0 137C 0000 0001             		move.b	#0,1(a1)
000146B6 43E9 0040                  		lea	object_size(a1),a1
000146BA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
000146BE                            
000146BE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
000146BE 7210                       		moveq	#$10,d1		; set horizontal speed
000146C0 3028 0030                  		move.w	$30(a0),d0
000146C4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
000146C8 6700                       		beq.s	loc_C61A	; if yes, branch
000146CA 6C00                       		bge.s	Obj3A_Move
000146CC 4441                       		neg.w	d1
000146CE                            
000146CE                            Obj3A_Move:
000146CE D368 0008                  		add.w	d1,8(a0)	; change item's position
000146D2                            
000146D2                            loc_C5FE:				; XREF: loc_C61A
000146D2 3028 0008                  		move.w	8(a0),d0
000146D6 6B00                       		bmi.s	locret_C60E
000146D8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000146DC 6400                       		bcc.s	locret_C60E	; if yes, branch
000146DE 6000 0000                  		bra.w	DisplaySprite
000146E2                            ; ===========================================================================
000146E2                            
000146E2                            locret_C60E:
000146E2 4E75                       		rts	
000146E4                            ; ===========================================================================
000146E4                            
000146E4                            loc_C610:				; XREF: loc_C61A
000146E4 117C 000E 0024             		move.b	#$E,routine(a0)
000146EA 6000 0000                  		bra.w	Obj3A_ChkPos2
000146EE                            ; ===========================================================================
000146EE                            
000146EE                            loc_C61A:				; XREF: Obj3A_ChkPos
000146EE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
000146F4 67EE                       		beq.s	loc_C610
000146F6 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
000146FC 66D4                       		bne.s	loc_C5FE
000146FE 5428 0024                  		addq.b	#2,routine(a0)
00014702 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014708                            
00014708                            Obj3A_Wait:				; XREF: Obj3A_Index
00014708 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
0001470C 6600                       		bne.s	Obj3A_Display
0001470E 5428 0024                  		addq.b	#2,routine(a0)
00014712                            
00014712                            Obj3A_Display:
00014712 6000 0000                  		bra.w	DisplaySprite
00014716                            ; ===========================================================================
00014716                            
00014716                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
00014716 4EB9 0000 0000             		jsr	DisplaySprite
0001471C 123C 000A                  		move.b	#10,d1	; set score decrement to 10
00014720 1038 F604                  		move.b	($FFFFF604).w,d0
00014724 0200 0070                  		andi.b	#$70,d0	; is A, B or C pressed?
00014728 6700 0000                  		beq.w	@dontspeedup	; if not, branch
0001472C 123C 0064                  		move.b	#100,d1	; increase score decrement to 100
00014730                            		
00014730                            @dontspeedup:
00014730 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
00014736 7000                       		moveq	#0,d0
00014738 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0001473C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0001473E B278 F7D2                  		cmp.w	(v_timebonus).w,d1	; compare time bonus to score decrement
00014742 6D00                       		blt.s	@skip	; if it's greater or equal, branch
00014744 3238 F7D2                  		move.w	(v_timebonus).w,d1	; else, set the decrement to the remaining bonus
00014748                            @skip:
00014748 D041                       		add.w	d1,d0		; add decrement to score
0001474A 9378 F7D2                  		sub.w	d1,(v_timebonus).w ; subtract decrement from time bonus
0001474E                            
0001474E                            Obj3A_RingBonus:
0001474E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
00014752 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
00014754 B278 F7D4                  		cmp.w	(v_ringbonus).w,d1	; compare ring bonus to score decrement
00014758 6D00                       		blt.s	@skip2	; if it's greater or equal, branch
0001475A 3238 F7D4                  		move.w	(v_ringbonus).w,d1	; else, set the decrement to the remaining bonus
0001475E                            @skip2:
0001475E D041                       		add.w	d1,d0		; add decrement to score
00014760 9378 F7D4                  		sub.w	d1,(v_ringbonus).w ; subtract decrement from ring bonus
00014764                            
00014764                            Obj3A_ChkBonus:
00014764 4A40                       		tst.w	d0		; is there any bonus?
00014766 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
00014768 303C 00B0                  		move.w	#$B0,d0
0001476C 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "ker-ching" sound
00014772 5428 0024                  		addq.b	#2,routine(a0)
00014776 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0001477C 6600                       		bne.s	Obj3A_SetDelay
0001477E 5828 0024                  		addq.b	#4,routine(a0)
00014782                            
00014782                            Obj3A_SetDelay:
00014782 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014788                            
00014788                            locret_C692:
00014788 4E75                       		rts	
0001478A                            ; ===========================================================================
0001478A                            
0001478A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0001478A 4EB9 0000 0000             		jsr	AddPoints
00014790 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014794 0200 0003                  		andi.b	#3,d0
00014798 66EE                       		bne.s	locret_C692
0001479A 303C 005B                  		move.w	#$5B,d0
0001479E 4EF9 0000 3212             		jmp	(PlaySound).l ;	play "blip" sound
000147A4                            ; ===========================================================================
000147A4                            
000147A4                            Obj3A_NextLevel:			; XREF: Obj3A_Index
000147A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000147A8 0240 0007                  		andi.w	#7,d0
000147AC E748                       		lsl.w	#3,d0
000147AE 1238 FE11                  		move.b	($FFFFFE11).w,d1
000147B2 0241 0003                  		andi.w	#3,d1
000147B6 D241                       		add.w	d1,d1
000147B8 D041                       		add.w	d1,d0
000147BA                            ;		cmpi.b	#$01, ($FFFFFF70).w	; is the player Metal Sonic?
000147BA                            ;		beq.s	MetalLevelOrder		; if yes load level from Metal Sonic's level order array
000147BA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
000147BE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000147C2 4A40                       		tst.w	d0
000147C4 6600                       		bne.s	Obj3A_ChkSS
000147C6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
000147CC 4EB9 0000 0000             		jsr Save_Progress	; Save data to SRAM
000147D2 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000147D8 6000                       		bra.s	Obj3A_Display2
000147DA 4E75                       		rts
000147DC                            
000147DC                            ; ===========================================================================
000147DC                            
000147DC                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
000147DC 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000147E2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000147E6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
000147EA 6700                       		beq.s	loc_C6EA	; if not, branch
000147EC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
000147F2 6000                       		bra.s	Obj3A_Display2
000147F4                            ; ===========================================================================
000147F4                            
000147F4                            loc_C6EA:				; XREF: Obj3A_ChkSS
000147F4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000147FA                            
000147FA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
000147FA 6000 0000                  		bra.w	DisplaySprite
000147FE                            ; ===========================================================================
000147FE                            ; ---------------------------------------------------------------------------
000147FE                            ; Level	order array
000147FE                            ; ---------------------------------------------------------------------------
000147FE 0001 0002 0400 0000        LevelOrder:	dc.w $0001, $0002, $0400, $0000	; GHZ 1-4
00014806 0101 0102 0500 0502        		dc.w $0101, $0102, $0500, $0502	;  LZ 1-4 (SBZ 3 is act 4)
0001480E 0201 0202 0400 0000        		dc.w $0201, $0202, $0400, $0000	;  MZ 1-4
00014816 0301 0302 0500 0000        		dc.w $0301, $0302, $0500, $0000	; SLZ 1-4
0001481E 0401 0402 0100 0000        		dc.w $0401, $0402, $0100, $0000	; SYZ 1-4
00014826 0501 0103 0000 0000        		dc.w $0501, $0103, $0000, $0000	; SBZ 1-4 (FZ is act 3)
0001482E                            		even
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ; Level	order array for Metal
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ;LevelOrderMetal:	incbin	misc\lvl_ordmetal.bin
0001482E                            ;		even
0001482E                            ; ===========================================================================
0001482E                            
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ; Subroutine to Save to SRAM the information needed to Load Auto Save
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            		include	"_inc\Save_to_SRAM.asm"
0001482E                            ; d4 = 0 - save all
0001482E                            ; d4 = 1 - save all with a predetermined level 
0001482E                            ; d4 = 2 - only save the Time Attack, if was time attack flag set
0001482E                            ; d5 = number of the predetermined level 
0001482E                            ; ===========================================================================
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ; Subroutine to Save to SRAM the information needed to Load Auto Save and Time Attack
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            
0001482E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001482E                            
0001482E                            
0001482E                            Save_Progress:
0001482E 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
00014836 0C39 0063 0020 0001        		cmpi.b	#$63,($200001).l				; number of lives in sram is more than 99?
0001483E 6E00 0000                  		bgt.w	Livesfix		; if yes, branch
00014842 0C39 0000 0020 0001        		cmpi.b	#0,($200001).l				; number of lives in sram is more than 99?
0001484A 6D00 0000                  		blt.w	Livesfix2		; if yes, branch
0001484E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00014854 6700 0000                  		beq.w UnlockLevels
00014858 13F8 FE12 0020 0001        		move.b ($FFFFFE12).w,($200001).l
00014860 13F9 0020 0001 0020 011F   		move.b ($200001).l,($20011F).l
0001486A 13F8 FE56 0020 012D        		move.b	($FFFFFE56).w,($20012D).l ; save emeralds
00014872 13F8 FE57 0020 0121        		move.b	($FFFFFE57).w,($200121).l ; save emeralds
0001487A 13F8 FE58 0020 0123        		move.b	($FFFFFE58).w,($200123).l ; save emeralds
00014882 13F8 FE59 0020 0125        		move.b	($FFFFFE59).w,($200125).l ; save emeralds
0001488A 13F8 FE5A 0020 0127        		move.b	($FFFFFE5A).w,($200127).l ; save emeralds
00014892 13F8 FE5B 0020 0129        		move.b	($FFFFFE5B).w,($200129).l ; save emeralds
0001489A 13F8 FE5C 0020 012B        		move.b	($FFFFFE5C).w,($20012B).l ; save emeralds
000148A2 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000148AA 6000                       		bra.s	Save_to_SRAM_rts
000148AC                            Livesfix:
000148AC 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000148B4 13FC 0063 0020 0001        		move.b	#$63,($200001).l ; set lives in sram to 99
000148BC 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
000148C6 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000148CE 6000 0000                  		bra.w	Save_to_SRAM_rts
000148D2                            Livesfix2:
000148D2 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000148DA 13FC 0003 0020 0001        		move.b	#3,($200001).l ; set lives in sram to 99
000148E2 13F9 0020 0001 0020 011F   		move.b	($200001).l,($20011F).l
000148EC 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000148F4 6000                       		bra.s	Save_to_SRAM_rts
000148F6                            UnlockLevels:
000148F6 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000148FE 13FC 0001 0020 002D        		move.b 	#$01,($20002D).l			; add 1 to number of act in sram
00014906 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0001490E                            ;		bra.s	Save_to_SRAM_rts
0001490E                            
0001490E                            Save_to_SRAM_rts:
0001490E 4E75                       		rts
00014910                            ; End of function Save_to_SRAM
00014910                            ; End of function Save_to_SRAM
00014910                            		include	"_inc\Time_attackSave.asm"
00014910                            ; ---------------------------------------------------------------------------
00014910                            ; Subroutine to save time attack records
00014910                            ; ---------------------------------------------------------------------------
00014910                            
00014910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014910                            
00014910                            
00014910                            Timeattack_save:
00014910 0C39 0001 FFFF FFFE        		cmpi.b	#1,($FFFFFFFE).l	; is original mode ?
00014918 6700 0000                  		beq.w	time_rts			; if yes, branch
0001491C                            
0001491C 2038 FE22                  		move.l	($FFFFFE22).w,d0	; set time to d0
00014920 3238 FE20                  		move.w	($FFFFFE20).w,d1	; set rings to d1
00014924 2839 FFFF FE26             		move.l	($FFFFFE26).l,d4	; set score to d4
0001492A 3A38 FF96                  		move.w	($FFFFFF96).w,d5	; set monitors broken to d5
0001492E 3C38 FF98                  		move.w	($FFFFFF98).w,d6	; set rings collected to d6
00014932                            
00014932 4DF9 0020 0040             		lea	($200040).l,a6			; begin of the Time attack SRAM Slot
00014938                            
00014938 7400                       		moveq	#0,d2					
0001493A 3438 FE10                  		move.w	($FFFFFE10).w,d2	; load level number
0001493E                            									; ((Act*2^6)"+Level*$100")/2^2
0001493E ED0A                       		lsl.b	#6,d2				; Act*2^6
00014940 E44A                       		lsr.w	#2,d2				; /2^2
00014942 4DF6 2000                  		lea	(a6,d2.w),a6			; go to Level Time attack Slot
00014946                            
00014946 4A38 FF89                  		tst.b	($FFFFFF89).w		; "Play with Super" is turned?
0001494A 6700                       		beq.s	time_tailstest		; if not, branch
0001494C 4DEE 0170                  		lea	$170(a6),a6				; go to Super Time attack Slot
00014950                            
00014950                            time_tailstest:
00014950 4A38 FF8B                  		tst.b	($FFFFFF8B).w		; is Tails?
00014954 6700                       		beq.s	time_test			; if not, branch
00014956 4DEE 02E0                  		lea	$2E0(a6),a6				; go to Tails Time attack Slot
0001495A                            
0001495A                            ; ---------------------------------------------------------------------------
0001495A                            time_test:
0001495A 4A2E 0006                  		tst.b	6(a6)			; did you play the level?
0001495E 6700                       		beq.s	time_save_all	; if not, save all
00014960                            
00014960                            ;time_save_time:
00014960 B096                       		cmp.l	(a6),d0			; is time, higher than the recorded time?
00014962 6C00                       		bge.s	time_save_ring	; if yes, don't save
00014964 2C80                       		move.l	d0,(a6)			; save time
00014966                            
00014966                            time_save_ring:
00014966 B26E 0004                  		cmp.w	4(a6),d1		; is rings, lower than the recorded rings?
0001496A 6F00                       		ble.s	time_save_score	; if yes, don't save
0001496C 3D41 0004                  		move.w	d1,4(a6)		; save rings
00014970                            
00014970                            time_save_score:
00014970 B8AE 0007                  		cmp.l	7(a6),d4			; is score, lower than the recorded score?
00014974 6F00                       		ble.s	time_save_monitors	; if yes, don't save
00014976 2D44 0007                  		move.l	d4,7(a6)			; save score
0001497A                            
0001497A                            time_save_monitors:
0001497A BA6E 000B                  		cmp.w	11(a6),d5				; is monitors broken, lower than the recorded monitors broken?
0001497E 6F00                       		ble.s	time_save_ringcollected	; if yes, don't save
00014980 3D45 000B                  		move.w	d5,11(a6)				; save monitors broken
00014984                            
00014984                            time_save_ringcollected:
00014984 BC6E 000D                  		cmp.w	13(a6),d6		; is rings collected, lower than the recorded rings collected?
00014988 6F00                       		ble.s	time_rts		; if yes, don't save
0001498A 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
0001498E 4E75                       		rts
00014990                            
00014990                            time_save_all:
00014990 2C80                       		move.l	d0,(a6)			; save time
00014992 3D41 0004                  		move.w	d1,4(a6)		; save rings
00014996 1D7C 0001 0006             		move.b	#1,6(a6)		; save if you played the level
0001499C 2D44 0007                  		move.l	d4,7(a6)		; save score
000149A0 3D45 000B                  		move.w	d5,11(a6)		; save monitors broken
000149A4 3D46 000D                  		move.w	d6,13(a6)		; save rings collected
000149A8                            
000149A8                            time_rts:
000149A8 4E75                       		rts
000149AA                            ; End of function Timeattack_save
000149AA                            ; End of function Timeattack_save
000149AA                            ; ===========================================================================
000149AA                            
000149AA                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
000149AA 7220                       		moveq	#$20,d1		; set horizontal speed
000149AC 3028 0032                  		move.w	$32(a0),d0
000149B0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
000149B4 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
000149B6 6C00                       		bge.s	Obj3A_Move2
000149B8 4441                       		neg.w	d1
000149BA                            
000149BA                            Obj3A_Move2:
000149BA D368 0008                  		add.w	d1,8(a0)	; change item's position
000149BE 3028 0008                  		move.w	8(a0),d0
000149C2 6B00                       		bmi.s	locret_C748
000149C4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
000149C8 6400                       		bcc.s	locret_C748	; if yes, branch
000149CA 6000 0000                  		bra.w	DisplaySprite
000149CE                            ; ===========================================================================
000149CE                            
000149CE                            locret_C748:
000149CE 4E75                       		rts	
000149D0                            ; ===========================================================================
000149D0                            
000149D0                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
000149D0 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)
000149D6 6600 0000                  		bne.w	DeleteObject
000149DA 5428 0024                  		addq.b	#2,routine(a0)
000149DE 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
000149E2 303C 008D                  		move.w	#$8D,d0
000149E6 4EF9 0000 3212             		jmp	(PlaySound).l	; play FZ music
000149EC                            ; ===========================================================================
000149EC                            
000149EC                            loc_C766:				; XREF: Obj3A_Index
000149EC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000149F0 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
000149F6 6700 0000                  		beq.w	DeleteObject
000149FA 4E75                       		rts	
000149FC                            ; ===========================================================================
000149FC 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
00014A02 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
00014A04 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
00014A0A 0201                       		dc.b 2,	1
00014A0C 040C 014C 00D6             		dc.w $40C, $14C, $D6
00014A12 0206                       		dc.b 2,	6
00014A14 0520 0120 00EC             		dc.w $520, $120, $EC
00014A1A 0202                       		dc.b 2,	2
00014A1C 0540 0120 00FC             		dc.w $540, $120, $FC
00014A22 0203                       		dc.b 2,	3
00014A24 0560 0120 010C             		dc.w $560, $120, $10C
00014A2A 0204                       		dc.b 2,	4
00014A2C 020C 014C 00CC             		dc.w $20C, $14C, $CC
00014A32 0205                       		dc.b 2,	5
00014A34                            ; ===========================================================================
00014A34                            ; ---------------------------------------------------------------------------
00014A34                            ; Object 7E - special stage results screen
00014A34                            ; ---------------------------------------------------------------------------
00014A34                            
00014A34                            Obj7E:					; XREF: Obj_Index
00014A34 7000                       		moveq	#0,d0
00014A36 1028 0024                  		move.b	routine(a0),d0
00014A3A 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
00014A3E 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
00014A42                            ; ===========================================================================
00014A42 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
00014A44 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
00014A46 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A48 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
00014A4A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A4C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014A4E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A50 0000                       		dc.w Obj7E_Continue-Obj7E_Index
00014A52 0000                       		dc.w Obj7E_Wait-Obj7E_Index
00014A54 0000                       		dc.w Obj7E_Exit-Obj7E_Index
00014A56 0000                       		dc.w loc_C91A-Obj7E_Index
00014A58                            ; ===========================================================================
00014A58                            
00014A58                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
00014A58 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
00014A5C 6700                       		beq.s	Obj7E_Main	; if yes, branch
00014A5E 4E75                       		rts	
00014A60                            ; ===========================================================================
00014A60                            
00014A60                            Obj7E_Main:
00014A60 2248                       		movea.l	a0,a1
00014A62 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
00014A68 7203                       		moveq	#3,d1
00014A6A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
00014A70 6500                       		bcs.s	Obj7E_Loop	; if no, branch
00014A72 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
00014A74                            
00014A74                            Obj7E_Loop:
00014A74 12BC 007E                  		move.b	#$7E,0(a1)
00014A78 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
00014A7C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
00014A80 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
00014A84 135A 0024                  		move.b	(a2)+,routine(a1)
00014A88 135A 001A                  		move.b	(a2)+,mapping_frame(a1)
00014A8C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
00014A94 337C 8580 0002             		move.w	#$8580,2(a1)
00014A9A 137C 0000 0001             		move.b	#0,1(a1)
00014AA0 43E9 0040                  		lea	object_size(a1),a1
00014AA4 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
00014AA8                            
00014AA8 7007                       		moveq	#7,d0
00014AAA 1238 FE57                  		move.b	($FFFFFE57).w,d1
00014AAE 6700                       		beq.s	loc_C842
00014AB0 7000                       		moveq	#0,d0
00014AB2 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
00014AB6 6600                       		bne.s	loc_C842	; if not, branch
00014AB8 7008                       		moveq	#8,d0		; load "Sonic got them all" text
00014ABA 317C 0018 0008             		move.w	#$18,8(a0)
00014AC0 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
00014AC6                            
00014AC6                            loc_C842:
00014AC6 1140 001A                  		move.b	d0,mapping_frame(a0)
00014ACA                            
00014ACA                            Obj7E_ChkPos:				; XREF: Obj7E_Index
00014ACA 7210                       		moveq	#$10,d1		; set horizontal speed
00014ACC 3028 0030                  		move.w	$30(a0),d0
00014AD0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
00014AD4 6700                       		beq.s	loc_C86C	; if yes, branch
00014AD6 6C00                       		bge.s	Obj7E_Move
00014AD8 4441                       		neg.w	d1
00014ADA                            
00014ADA                            Obj7E_Move:
00014ADA D368 0008                  		add.w	d1,8(a0)	; change item's position
00014ADE                            
00014ADE                            loc_C85A:				; XREF: loc_C86C
00014ADE 3028 0008                  		move.w	8(a0),d0
00014AE2 6B00                       		bmi.s	locret_C86A
00014AE4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
00014AE8 6400                       		bcc.s	locret_C86A	; if yes, branch
00014AEA 6000 0000                  		bra.w	DisplaySprite
00014AEE                            ; ===========================================================================
00014AEE                            
00014AEE                            locret_C86A:
00014AEE 4E75                       		rts	
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            loc_C86C:				; XREF: Obj7E_ChkPos
00014AF0 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
00014AF6 66E6                       		bne.s	loc_C85A
00014AF8 5428 0024                  		addq.b	#2,routine(a0)
00014AFC 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014B02 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
00014B08                            
00014B08                            Obj7E_Wait:				; XREF: Obj7E_Index
00014B08 5368 001E                  		subq.w	#1,anim_frame_duration(a0)	; subtract 1 from time delay
00014B0C 6600                       		bne.s	Obj7E_Display
00014B0E 5428 0024                  		addq.b	#2,routine(a0)
00014B12                            
00014B12                            Obj7E_Display:
00014B12 6000 0000                  		bra.w	DisplaySprite
00014B16                            ; ===========================================================================
00014B16                            
00014B16                            Obj7E_RingBonus:			; XREF: Obj7E_Index
00014B16 4EB9 0000 0000             		jsr	DisplaySprite
00014B1C 11FC 0001 F7D6             		move.b	#1,(Update_Bonus_score).w ; set ring bonus update flag
00014B22 4A78 F7D4                  		tst.w	(Bonus_Countdown_2).w	; is ring bonus	= zero?
00014B26 6700                       		beq.s	loc_C8C4	; if yes, branch
00014B28 0478 000A F7D4             		subi.w	#10,(Bonus_Countdown_2).w ; subtract 10	from ring bonus
00014B2E 700A                       		moveq	#10,d0		; add 10 to score
00014B30 4EB9 0000 0000             		jsr	AddPoints
00014B36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014B3A 0200 0003                  		andi.b	#3,d0
00014B3E 6600                       		bne.s	locret_C8EA
00014B40 303C 005B                  		move.w	#$5B,d0
00014B44 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play "blip" sound
00014B4A                            ; ===========================================================================
00014B4A                            
00014B4A                            loc_C8C4:				; XREF: Obj7E_RingBonus
00014B4A 303C 00B0                  		move.w	#$B0,d0
00014B4E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
00014B54 5428 0024                  		addq.b	#2,routine(a0)
00014B58 317C 00B4 001E             		move.w	#180,anim_frame_duration(a0)	; set time delay to 3 seconds
00014B5E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00014B64 6500                       		bcs.s	locret_C8EA	; if not, branch
00014B66 317C 003C 001E             		move.w	#60,anim_frame_duration(a0)	; set time delay to 1 second
00014B6C 5828 0024                  		addq.b	#4,routine(a0)	; goto "Obj7E_Continue"	routine
00014B70                            
00014B70                            locret_C8EA:
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            Obj7E_Exit:				; XREF: Obj7E_Index
00014B72 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00014B78 6000 0000                  		bra.w	DisplaySprite
00014B7C                            ; ===========================================================================
00014B7C                            
00014B7C                            Obj7E_Continue:				; XREF: Obj7E_Index
00014B7C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
00014B82 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
00014B88 303C 00BF                  		move.w	#$BF,d0
00014B8C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play continues music
00014B92 5428 0024                  		addq.b	#2,routine(a0)
00014B96 317C 0168 001E             		move.w	#360,anim_frame_duration(a0)	; set time delay to 6 seconds
00014B9C 6000 0000                  		bra.w	DisplaySprite
00014BA0                            ; ===========================================================================
00014BA0                            
00014BA0                            loc_C91A:				; XREF: Obj7E_Index
00014BA0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00014BA4 0200 000F                  		andi.b	#$F,d0
00014BA8 6600                       		bne.s	Obj7E_Display2
00014BAA 0868 0000 001A             		bchg	#0,mapping_frame(a0)
00014BB0                            
00014BB0                            Obj7E_Display2:
00014BB0 6000 0000                  		bra.w	DisplaySprite
00014BB4                            ; ===========================================================================
00014BB4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
00014BBA 0200                       		dc.b 2,	0		; rountine number, frame number
00014BBC 0320 0120 0118             		dc.w $320, $120, $118
00014BC2 0201                       		dc.b 2,	1
00014BC4 0360 0120 0128             		dc.w $360, $120, $128
00014BCA 0202                       		dc.b 2,	2
00014BCC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
00014BD2 0203                       		dc.b 2,	3
00014BD4 03A0 0120 0138             		dc.w $3A0, $120, $138
00014BDA 0206                       		dc.b 2,	6
00014BDC                            ; ===========================================================================
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            ; Object 7F - chaos emeralds from the special stage results screen
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            
00014BDC                            Obj7F:					; XREF: Obj_Index
00014BDC 7000                       		moveq	#0,d0
00014BDE 1028 0024                  		move.b	routine(a0),d0
00014BE2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
00014BE6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
00014BEA                            ; ===========================================================================
00014BEA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
00014BEC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
00014BEE                            
00014BEE                            ; ---------------------------------------------------------------------------
00014BEE                            ; X-axis positions for chaos emeralds
00014BEE                            ; ---------------------------------------------------------------------------
00014BEE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
00014BFA                            ; ===========================================================================
00014BFA                            
00014BFA                            Obj7F_Main:				; XREF: Obj7F_Index
00014BFA 2248                       		movea.l	a0,a1
00014BFC 45F9 0001 4BEE             		lea	(Obj7F_PosData).l,a2
00014C02 7400                       		moveq	#0,d2
00014C04 7200                       		moveq	#0,d1
00014C06 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
00014C0A 5301                       		subq.b	#1,d1		; subtract 1 from d1
00014C0C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
00014C10                            
00014C10                            Obj7F_Loop:
00014C10 12BC 007F                  		move.b	#$7F,0(a1)
00014C14 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
00014C18 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
00014C1E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00014C22 1633 2000                  		move.b	(a3,d2.w),d3
00014C26 1343 001A                  		move.b	d3,mapping_frame(a1)
00014C2A 1343 001C                  		move.b	d3,anim(a1)
00014C2E 5202                       		addq.b	#1,d2
00014C30 5429 0024                  		addq.b	#2,routine(a1)
00014C34 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
00014C3C 337C 8541 0002             		move.w	#$8541,2(a1)
00014C42 137C 0000 0001             		move.b	#0,1(a1)
00014C48 43E9 0040                  		lea	object_size(a1),a1	; next object
00014C4C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
00014C50                            
00014C50                            Obj7F_Flash:				; XREF: Obj7F_Index
00014C50 1028 001A                  		move.b	mapping_frame(a0),d0
00014C54 117C 0006 001A             		move.b	#6,mapping_frame(a0)	; load 6th frame (blank)
00014C5A 0C00 0006                  		cmpi.b	#6,d0
00014C5E 6600                       		bne.s	Obj7F_Display
00014C60 1168 001C 001A             		move.b	anim(a0),mapping_frame(a0)	; load visible frame
00014C66                            
00014C66                            Obj7F_Display:
00014C66 6000 0000                  		bra.w	DisplaySprite
00014C6A                            ; ===========================================================================
00014C6A                            ; ---------------------------------------------------------------------------
00014C6A                            ; Sprite mappings - zone title cards
00014C6A                            ; ---------------------------------------------------------------------------
00014C6A                            Map_obj34:
00014C6A                            	include "_maps\obj34.asm"
00014C6A                            ; --------------------------------------------------------------------------------
00014C6A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00014C6A                            ; --------------------------------------------------------------------------------
00014C6A                            
00014C6A                            SME_zIoYh:	
00014C6A 0000                       		dc.w byte_C9FE-SME_zIoYh
00014C6C 0000                       		dc.w byte_CA2C-SME_zIoYh	
00014C6E 0000                       		dc.w byte_CA5A-SME_zIoYh 
00014C70 0000                       		dc.w byte_CA7A-SME_zIoYh	
00014C72 0000                       		dc.w byte_CAA8-SME_zIoYh
00014C74 0000                       		dc.w byte_CADC-SME_zIoYh	
00014C76 0000                       		dc.w byte_CB10-SME_zIoYh
00014C78 0000                       		dc.w byte_CB26-SME_zIoYh	
00014C7A 0000                       		dc.w byte_CB31-SME_zIoYh
00014C7C 0000                       		dc.w byte_CB3C-SME_zIoYh	
00014C7E 0000                       		dc.w byte_CB47-SME_zIoYh
00014C80 0000                       		dc.w byte_CB8A-SME_zIoYh	
00014C82 0000                       		dc.w TitleCard_ABZ-SME_zIoYh		
00014C84 0B                         byte_C9FE:	dc.b $B	
00014C85 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	
00014C8A F805 0036 B4               		dc.b $F8, 5, 0, $36, $B4	
00014C8F F805 0026 C4               		dc.b $F8, 5, 0, $26, $C4	
00014C94 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4	
00014C99 F805 003E E4               		dc.b $F8, 5, 0, $3E, $E4	
00014C9E F805 001C F4               		dc.b $F8, 5, 0, $1C, $F4	
00014CA3 F800 0056 04               		dc.b $F8, 0, 0, $56, 4	
00014CA8 F805 001C 14               		dc.b $F8, 5, 0, $1C, $14	
00014CAD F801 0020 24               		dc.b $F8, 1, 0, $20, $24	
00014CB2 F805 0026 2C               		dc.b $F8, 5, 0, $26, $2C	
00014CB7 F805 0026 3C               		dc.b $F8, 5, 0, $26, $3C	
00014CBC 0E                         byte_CA2C:	dc.b $E	
00014CBD F805 0026 80               		dc.b $F8, 5, 0, $26, $80	
00014CC2 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	
00014CC7 F805 003E A0               		dc.b $F8, 5, 0, $3E, $A0	
00014CCC F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	
00014CD1 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	
00014CD6 F805 0026 D0               		dc.b $F8, 5, 0, $26, $D0	
00014CDB F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00014CE0 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00014CE5 F805 004A 00               		dc.b $F8, 5, 0, $4A, 0	
00014CEA F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	
00014CEF F801 0020 20               		dc.b $F8, 1, 0, $20, $20	
00014CF4 F805 002E 28               		dc.b $F8, 5, 0, $2E, $28	
00014CF9 F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014CFE F805 001C 48               		dc.b $F8, 5, 0, $1C, $48	
00014D03 0F                         byte_CA5A:	dc.b $F	
00014D04 F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	
00014D09 F805 004A 90               		dc.b $F8, 5, 0, $4A, $90	
00014D0E F805 0026 A0               		dc.b $F8, 5, 0, $26, $A0	
00014D13 F805 0046 B0               		dc.b $F8, 5, 0, $46, $B0	
00014D18 F805 0000 C0               		dc.b $F8, 5, 0, 0, $C0	
00014D1D F805 002E D0               		dc.b $F8, 5, 0, $2E, $D0	
00014D22 F801 0020 E0               		dc.b $F8, 1, 0, $20, $E0	
00014D27 F805 0000 E8               		dc.b $F8, 5, 0, 0, $E8	
00014D2C F800 0056 F8               		dc.b $F8, 0, 0, $56, $F8	
00014D31 F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00014D36 F805 0000 18               		dc.b $F8, 5, 0, 0, $18	
00014D3B F805 003E 28               		dc.b $F8, 5, 0, $3E, $28	
00014D40 F805 0042 38               		dc.b $F8, 5, 0, $42, $38	
00014D45 F805 0026 48               		dc.b $F8, 5, 0, $26, $48	
00014D4A F805 0010 58               		dc.b $F8, 5, 0, $10, $58	
00014D4F 0B                         byte_CA7A:	dc.b $B	
00014D50 F805 0046 9D               		dc.b $F8, 5, 0, $46, $9D	
00014D55 F805 0046 A8               		dc.b $F8, 5, 0, $46, $A8	
00014D5A F801 0020 C6               		dc.b $F8, 1, 0, $20, $C6	
00014D5F F805 0042 CD               		dc.b $F8, 5, 0, $42, $CD	
00014D64 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	
00014D69 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	
00014D6E F805 0036 F8               		dc.b $F8, 5, 0, $36, $F8	
00014D73 F805 0000 08               		dc.b $F8, 5, 0, 0, 8	
00014D78 F805 003A 18               		dc.b $F8, 5, 0, $3A, $18	
00014D7D F805 0022 28               		dc.b $F8, 5, 0, $22, $28	
00014D82 F805 001C B8               		dc.b $F8, 5, 0, $1C, $B8	
00014D87 0D                         byte_CAA8:	dc.b $D	
00014D88 F805 0008 8C               		dc.b $F8, 5, 0, 8, $8C	
00014D8D F805 0000 9C               		dc.b $F8, 5, 0, 0, $9C	
00014D92 F805 003E AC               		dc.b $F8, 5, 0, $3E, $AC	
00014D97 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	
00014D9C F805 002E C4               		dc.b $F8, 5, 0, $2E, $C4	
00014DA1 F805 0032 D4               		dc.b $F8, 5, 0, $32, $D4	
00014DA6 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014DAB F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	
00014DB0 F805 0042 04               		dc.b $F8, 5, 0, $42, 4	
00014DB5 F805 003A 14               		dc.b $F8, 5, 0, $3A, $14	
00014DBA F805 0010 24               		dc.b $F8, 5, 0, $10, $24	
00014DBF F805 0010 34               		dc.b $F8, 5, 0, $10, $34	
00014DC4 F805 0042 44               		dc.b $F8, 5, 0, $42, $44	
00014DC9 08                         byte_CADC:	dc.b 8	
00014DCA F805 002A B4               		dc.b $F8, 5, 0, $2A, $B4	
00014DCF F805 0000 C4               		dc.b $F8, 5, 0, 0, $C4	
00014DD4 F805 000C D4               		dc.b $F8, 5, 0, $C, $D4	
00014DD9 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	
00014DDE F805 0018 F4               		dc.b $F8, 5, 0, $18, $F4	
00014DE3 F805 0010 04               		dc.b $F8, 5, 0, $10, 4	
00014DE8 F805 0000 14               		dc.b $F8, 5, 0, 0, $14	
00014DED F805 003A 24               		dc.b $F8, 5, 0, $3A, $24	
00014DF2 04                         byte_CB10:	dc.b 4	
00014DF3 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	
00014DF8 F805 0032 F0               		dc.b $F8, 5, 0, $32, $F0	
00014DFD F805 002E 00               		dc.b $F8, 5, 0, $2E, 0	
00014E02 F805 0010 10               		dc.b $F8, 5, 0, $10, $10	
00014E07 02                         byte_CB26:	dc.b 2	
00014E08 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E0D F402 0057 0C               		dc.b $F4, 2, 0, $57, $C	
00014E12 02                         byte_CB31:	dc.b 2	
00014E13 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E18 F406 005A 08               		dc.b $F4, 6, 0, $5A, 8	
00014E1D 02                         byte_CB3C:	dc.b 2	
00014E1E 040C 0053 EC               		dc.b 4, $C, 0, $53, $EC	
00014E23 F406 0060 08               		dc.b $F4, 6, 0, $60, 8	
00014E28 0D                         byte_CB47:	dc.b $D	
00014E29 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4	
00014E2E E402 0074 14               		dc.b $E4, 2, 0, $74, $14	
00014E33 EC04 0077 EC               		dc.b $EC, 4, 0, $77, $EC	
00014E38 F405 0079 E4               		dc.b $F4, 5, 0, $79, $E4	
00014E3D 140C 1870 EC               		dc.b $14, $C, $18, $70, $EC	
00014E42 0402 1874 E4               		dc.b 4, 2, $18, $74, $E4	
00014E47 0C04 1877 04               		dc.b $C, 4, $18, $77, 4	
00014E4C FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C	
00014E51 EC08 007D FC               		dc.b $EC, 8, 0, $7D, $FC	
00014E56 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4	
00014E5B FC08 007C F4               		dc.b $FC, 8, 0, $7C, $F4	
00014E60 040C 007C EC               		dc.b 4, $C, 0, $7C, $EC	
00014E65 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC	
00014E6A 05                         byte_CB8A:	dc.b 5	
00014E6B F805 0014 DC               		dc.b $F8, 5, 0, $14, $DC	
00014E70 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	
00014E75 F805 002E F4               		dc.b $F8, 5, 0, $2E, $F4	
00014E7A F805 0000 04               		dc.b $F8, 5, 0, 0, 4	
00014E7F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	
00014E84 09                         TitleCard_ABZ:	dc.b 9	
00014E85 F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0	
00014E8A F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	
00014E8F F805 0036 D0               		dc.b $F8, 5, 0, $36, $D0	
00014E94 F805 001C E0               		dc.b $F8, 5, 0, $1C, $E0	
00014E99 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00014E9E F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00014EA3 F805 0010 20               		dc.b $F8, 5, 0, $10, $20	
00014EA8 F805 0042 30               		dc.b $F8, 5, 0, $42, $30	
00014EAD F805 0000 40               		dc.b $F8, 5, 0, 0, $40	
00014EB2                            		even
00014EB2                            		even
00014EB2                            ; ---------------------------------------------------------------------------
00014EB2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014EB2                            ; ---------------------------------------------------------------------------
00014EB2                            Map_obj39:
00014EB2                            	include "_maps\obj39.asm"
00014EB2                            ; ---------------------------------------------------------------------------
00014EB2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
00014EB2                            ; ---------------------------------------------------------------------------
00014EB2 0000                       		dc.w byte_CBAC-Map_obj39
00014EB4 0000                       		dc.w byte_CBB7-Map_obj39
00014EB6 0000                       		dc.w byte_CBC2-Map_obj39
00014EB8 0000                       		dc.w byte_CBCD-Map_obj39
00014EBA 02                         byte_CBAC:	dc.b 2
00014EBB F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
00014EC0 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
00014EC5 02                         byte_CBB7:	dc.b 2
00014EC6 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
00014ECB F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
00014ED0 02                         byte_CBC2:	dc.b 2
00014ED1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
00014ED6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
00014EDB 02                         byte_CBCD:	dc.b 2
00014EDC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
00014EE1 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
00014EE6                            		even
00014EE6                            		even
00014EE6                            
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6                            ; Sprite mappings - "SONIC HAS PASSED" title card
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6                            ;Map_obj3A_Character:
00014EE6                            ;		move.b	($FF).w,d0	; set Character to d0
00014EE6                            ;		lsl.w	#2,d0
00014EE6                            ;		move.l	Map_obj3A_Characters(pc,d0.w),4(a1)	; load the Character map
00014EE6                            ;		tst.b	($FFFFFFF8)			; check if the machine is US or Japanese
00014EE6                            ;		bpl.s	Map_obj3A_Japanese	; if is Japanese, branch
00014EE6                            ;		rts
00014EE6                            
00014EE6                            ;Map_obj3A_Japanese:
00014EE6                            ;		move.l	Map_obj3A_Characters_Miles(pc,d0.w),4(a1)	; load the Character map
00014EE6                            ;		rts
00014EE6                            		
00014EE6                            ;Map_obj3A_Characters:
00014EE6                            ;		dc.l	Map_obj3A		; Sonic
00014EE6                            		;dc.l	Map_obj3A_Tails	; Tails
00014EE6                            
00014EE6                            ;Map_obj3A_Characters_Miles
00014EE6                            ;		dc.l	Map_obj3A		; Sonic
00014EE6                            		;dc.l	Map_obj3A_Miles	; Miles
00014EE6                            ; End of function Map_obj3A_Character
00014EE6                            
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6                            ; Sprite mappings - "SONIC HAS PASSED" title card
00014EE6                            ; ---------------------------------------------------------------------------
00014EE6 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
00014EE8 0000                       		dc.w byte_CC13-Map_obj3A
00014EEA 0000                       		dc.w byte_CC32-Map_obj3A
00014EEC 0000                       		dc.w byte_CC51-Map_obj3A
00014EEE 0000                       		dc.w byte_CC75-Map_obj3A
00014EF0 FF42                       		dc.w byte_CB47-Map_obj3A
00014EF2 FF21                       		dc.w byte_CB26-Map_obj3A
00014EF4 FF2C                       		dc.w byte_CB31-Map_obj3A
00014EF6 FF37                       		dc.w byte_CB3C-Map_obj3A
00014EF8 08                         byte_CBEA:	dc.b 8			; SONIC HAS
00014EF9 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
00014EFE F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
00014F03 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
00014F08 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
00014F0D F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
00014F12 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
00014F17 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
00014F1C F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
00014F21 06                         byte_CC13:	dc.b 6			; PASSED
00014F22 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
00014F27 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00014F2C F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
00014F31 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
00014F36 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00014F3B F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
00014F40 06                         byte_CC32:	dc.b 6			; SCORE
00014F41 F80D 214A B0               		dc.b $F8, $D, $21, $4A, $B0
00014F46 F801 2162 D0               		dc.b $F8, 1, $21,	$62, $D0
00014F4B F809 2164 18               		dc.b $F8, 9, $21,	$64, $18
00014F50 F80D 216A 30               		dc.b $F8, $D, $21, $6A, $30
00014F55 F704 206E CD               		dc.b $F7, 4, $20,	$6E, $CD
00014F5A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
00014F5F 07                         byte_CC51:	dc.b 7			; TIME BONUS
00014F60 F80D 2158 B0               		dc.b $F8, $D, $21, $5A-2, $B0
00014F65 F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
00014F6A F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
00014F6F F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
00014F74 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00014F79 F80D 1FF0 28               		dc.b $F8, $D, $1F, $F0,	$28
00014F7E F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
00014F83 07                         byte_CC75:	dc.b 7			; RING BONUS
00014F84 F80D 2150 B0               		dc.b $F8, $D, $21, $52-2, $B0
00014F89 F80D 2066 D9               		dc.b $F8, $D, $20, $66, $D9
00014F8E F801 214A F9               		dc.b $F8, 1, $21,	$4A, $F9
00014F93 F704 206E F6               		dc.b $F7, 4, $20,	$6E, $F6
00014F98 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00014F9D F80D 1FF8 28               		dc.b $F8, $D, $1F, $F8,	$28
00014FA2 F801 2170 48               		dc.b $F8, 1, $21,	$70, $48
00014FA8 00                         		even
00014FA8                            ; ---------------------------------------------------------------------------
00014FA8                            ; Sprite mappings - special stage results screen
00014FA8                            ; ---------------------------------------------------------------------------
00014FA8 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
00014FAA 0000                       		dc.w byte_CCEE-Map_obj7E
00014FAC 0000                       		dc.w byte_CD0D-Map_obj7E
00014FAE FE80                       		dc.w byte_CB47-Map_obj7E
00014FB0 0000                       		dc.w byte_CD31-Map_obj7E
00014FB2 0000                       		dc.w byte_CD46-Map_obj7E
00014FB4 0000                       		dc.w byte_CD5B-Map_obj7E
00014FB6 0000                       		dc.w byte_CD6B-Map_obj7E
00014FB8 0000                       		dc.w byte_CDA8-Map_obj7E
00014FBA 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
00014FBB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
00014FC0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
00014FC5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
00014FCA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
00014FCF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
00014FD4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
00014FD9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
00014FDE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
00014FE3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
00014FE8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
00014FED F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
00014FF2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
00014FF7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
00014FFC 06                         byte_CCEE:	dc.b 6			; "SCORE"
00014FFD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
00015002 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
00015007 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0001500C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
00015011 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
00015016 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0001501B 07                         byte_CD0D:	dc.b 7
0001501C F80D 0150 B0               		dc.b $F8, $D, 1, $52-2, $B0
00015021 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
00015026 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0001502B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
00015030 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
00015035 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0001503A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0001503F 04                         byte_CD31:	dc.b 4
00015040 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
00015045 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0001504A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0001504F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
00015054 04                         byte_CD46:	dc.b 4
00015055 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001505A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0001505F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00015064 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
00015069 03                         byte_CD5B:	dc.b 3
0001506A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0001506F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
00015074 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
00015079 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0001507A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0001507F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
00015084 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
00015089 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0001508E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
00015093 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
00015098 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0001509D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
000150A2 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
000150A7 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
000150AC F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
000150B1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
000150B6 0F                         byte_CDA8:	dc.b $F			; "YOU GOT THEM ALL"
000150B7 F805 004A 80               		dc.b $F8, 5, 0, $4A, $80	; Y
000150BC F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
000150C1 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
000150C6 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
000150CB F805 0018 C0               		dc.b $F8, 5, 0, $18, $C0	; G
000150D0 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; O
000150D5 F805 0042 E0               		dc.b $F8, 5, 0, $42, $E0	; T
000150DA F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
000150DF F805 0042 00               		dc.b $F8, 5, 0, $42, $0	; T
000150E4 F805 001C 10               		dc.b $F8, 5, 0, $1C, $10	; H
000150E9 F805 0010 20               		dc.b $F8, 5, 0, $10, $20	; E
000150EE F805 002A 30               		dc.b $F8, 5, 0, $2A, $30	; M
000150F3 F805 0000 50               		dc.b $F8, 5, 0, 0, $50		; A
000150F8 F805 0026 60               		dc.b $F8, 5, 0, $26, $60	; L
000150FD F805 0026 70               		dc.b $F8, 5, 0, $26, $70	; L
00015102                            		even
00015102                            ; ---------------------------------------------------------------------------
00015102                            ; Sprite mappings - chaos emeralds from	the special stage results screen
00015102                            ; ---------------------------------------------------------------------------
00015102                            Map_obj7F:
00015102                            	include "_maps\obj7F.asm"
00015102                            ; ---------------------------------------------------------------------------
00015102                            ; Sprite mappings - chaos emeralds from	the special stage results screen
00015102                            ; ---------------------------------------------------------------------------
00015102 0000                       		dc.w byte_CE02-Map_obj7F
00015104 0000                       		dc.w byte_CE08-Map_obj7F
00015106 0000                       		dc.w byte_CE0E-Map_obj7F
00015108 0000                       		dc.w byte_CE14-Map_obj7F
0001510A 0000                       		dc.w byte_CE1A-Map_obj7F
0001510C 0000                       		dc.w byte_CE20-Map_obj7F
0001510E 0000                       		dc.w byte_CE26-Map_obj7F
00015110 01                         byte_CE02:	dc.b 1
00015111 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
00015116 01                         byte_CE08:	dc.b 1
00015117 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001511C 01                         byte_CE0E:	dc.b 1
0001511D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
00015122 01                         byte_CE14:	dc.b 1
00015123 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
00015128 01                         byte_CE1A:	dc.b 1
00015129 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0001512E 01                         byte_CE20:	dc.b 1
0001512F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
00015134 00                         byte_CE26:	dc.b 0			; Blank frame
00015136 00                         		even
00015136 00                         		even
00015136                            
00015136                            ; ===========================================================================
00015136                            
00015136                            ; ---------------------------------------------------------------------------
00015136                            ; Subroutine for checking if Sonic/Tails should be hurt and hurting them if so
00015136                            ; unlike Touch_ChkHurt, the character is at a1 instead of a0
00015136                            ; ---------------------------------------------------------------------------
00015136                            
00015136                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015136                            
00015136                            Touch_ChkHurtSpikes:
00015136 4A38 FE2D                  	tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001513A 6600                       	bne.s	return_15AC4	; if yes, branch
0001513C 4A29 0030                  	tst.b	$30(a1)	; is Sonic invulnerable?
00015140 6600                       	bne.s	return_15AC4	; if yes, branch
00015142 0C29 0004 0024             	cmpi.b	#4,routine(a1)
00015148 6400                       	bcc.s	return_15AC4
0001514A 2629 000C                  	move.l	y_pos(a1),d3
0001514E 3029 0012                  	move.w	y_vel(a1),d0
00015152 48C0                       	ext.l	d0
00015154 E180                       	asl.l	#8,d0
00015156 9680                       	sub.l	d0,d3
00015158 2343 000C                  	move.l	d3,y_pos(a1)
0001515C 2448                       	movea.l	a0,a2
0001515E 2049                       	movea.l	a1,a0
00015160 4EB9 0000 0000             	jsr	(HurtSonic).l
00015166 204A                       	movea.l	a2,a0
00015168 4EF9 0000 0000             	jmp		return_15AC4
0001516E                            
0001516E                            Touch_ChkHurt2:
0001516E 2248                           move.l    a0,a1
00015170 2F08                       	move.l    a0,-(sp)
00015172 41F8 D000                  	lea    ($FFFFD000).w,a0
00015176 4EB9 0000 0000             	jsr    Touch_ChkHurt
0001517C 205F                       	move.l    (sp)+,a0
0001517E                            
0001517E                            return_15AC4:
0001517E 4E75                       	rts
00015180                            ; End of function Touch_ChkHurt2
00015180                            
00015180                            loc_157A4:
00015180 48E7 8080                  	movem.l	d0/a0,-(sp)
00015184 6100                       	bsr.s	LoadTitleCard0
00015186 4CDF 0101                  	movem.l	(sp)+,d0/a0
0001518A 6000                       	bra.s	loc_157EC
0001518C                            
0001518C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001518C                            
0001518C                            ; sub_157B0:
0001518C                            LoadTitleCard0:
0001518C                            
0001518C 23FC 7000 0002 00C0 0004   	move.l	#$70000002,(VDP_control_port).l
00015196 41F9 0000 0000             	lea	(ArtNem_TitleCard).l,a0
0001519C 6100 0000                  	bsr.w	JmpTo2_NemDec
000151A0 49F8 A400                  	lea	($FFFFA400).w,a4
000151A4 41F9 0000 0000             	lea	(ArtNem_TitleCard2).l,a0
000151AA 6000 0000                  	bra.w	JmpTo_NemDecToRAM
000151AE                            ; ===========================================================================
000151AE                            ; loc_157D2:
000151AE                            LoadTitleCard:
000151AE 61DC                       	bsr.s	LoadTitleCard0
000151B0 7000                       	moveq	#0,d0
000151B2 1038 FE10                  	move.b	(Current_Zone).w,d0
000151B6 103B 0000                  	move.b	byte_15820(pc,d0.w),d0
000151BA 41FA 0000                  	lea	word_15832(pc),a0
000151BE 41F0 0000                  	lea	(a0,d0.w),a0
000151C2 203C 7BC0 0002             	move.l	#$7BC00002,d0
000151C8                            
000151C8                            loc_157EC:
000151C8 46FC 2700                  	move	#$2700,sr
000151CC 43F8 A400                  	lea	($FFFFA400).w,a1
000151D0 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
000151D6 2D40 0004                  	move.l	d0,4(a6)
000151DA                            
000151DA                            loc_157FE:
000151DA 7000                       	moveq	#0,d0
000151DC 1018                       	move.b	(a0)+,d0
000151DE 6B00                       	bmi.s	loc_1581A
000151E0 EB48                       	lsl.w	#5,d0
000151E2 45F1 0000                  	lea	(a1,d0.w),a2
000151E6 7200                       	moveq	#0,d1
000151E8 1218                       	move.b	(a0)+,d1
000151EA E749                       	lsl.w	#3,d1
000151EC 5341                       	subq.w	#1,d1
000151EE                            
000151EE                            loc_15812:
000151EE 2C9A                       	move.l	(a2)+,(a6)
000151F0 51C9 FFFC                  	dbf	d1,loc_15812
000151F4 60E4                       	bra.s	loc_157FE
000151F6                            ; ===========================================================================
000151F6                            
000151F6                            loc_1581A:
000151F6 46FC 2300                  	move	#$2300,sr
000151FA 4E75                       	rts
000151FC                            ; ===========================================================================
000151FC                            ; unknown
000151FC                            byte_15820:
000151FC 0000 0000 1010 9820 2C00+  	dc.b   0,  0,  0,  0,$10,$10,$98,$20,$2C,  0,$3C,$46,$58,$68,$A8,$7A
0001520C 8A00                       	dc.b $8A,  0	; 16
0001520E                            ; unknown
0001520E                            word_15832:
0001520E 2A06 3804 0004 2604 0C04+  	dc.w $2A06,$3804,    4,$2604, $C04,$1804,$1C02,$FFFF
0001521E 2A06 4004 3804 3004 2604+  	dc.w $2A06,$4004,$3804,$3004,$2604,$1C02,$3C04,$FFFF; 8
0001522E 1804 1C02 2604 4004 3004+  	dc.w $1804,$1C02,$2604,$4004,$3004,$FFFF,$1804,$1C02; 16
0001523E 0C04 3004 0004 2604 0804+  	dc.w  $C04,$3004,    4,$2604, $804,$FFFF,$1C02,$2604; 24
0001524E 0804 0004 FFFF 2A06 5604+  	dc.w  $804,    4,$FFFF,$2A06,$5604,$3C04,$4004,$1C02; 32
0001525E 0804 0004 4804 FFFF 0804+  	dc.w  $804,    4,$4804,$FFFF, $804,    4,$3C04,$1C02; 40
0001526E 1404 1804 4004 FFFF 0804+  	dc.w $1404,$1804,$4004,$FFFF, $804,$1804,$2A06,$1C02; 48
0001527E 0004 2604 3004 4004 FFFF+  	dc.w	 4,$2604,$3004,$4004,$FFFF,    4,$3404,$4404; 56
0001528E 4004 1C02 0804 3804 FFFF+  	dc.w $4004,$1C02, $804,$3804,$FFFF,$3C04,$2204,$5604; 64
0001529E 0804 1804 0004 FFFF 4C06+  	dc.w  $804,$1804,    4,$FFFF,$4C06,$1C02,$1404,$1004; 72
000152AE 3804 4004 3C04 FFFF 0C04+  	dc.w $3804,$4004,$3C04,$FFFF, $C04,    4,$4004,$1804; 80
000152BE 1404 FFFF                  	dc.w $1404,$FFFF	; 88
000152C2                            ; ===========================================================================
000152C2 4E71                       	nop
000152C4                            
000152C4                            JmpTo2_NemDec 
000152C4 4EF9 0000 3596             	jmp	(NemDec).l
000152CA                            ; ===========================================================================
000152CA                            
000152CA                            JmpTo_NemDecToRAM 
000152CA 4EF9 0000 358C             	jmp	(NemDec_RAM).l
000152D0                            ; End of function LoadTitleCard0
000152D0                            
000152D0                            ; ===========================================================================
000152D0                            ; ----------------------------------------------------------------------------
000152D0                            ; Object 36 - Spikes
000152D0                            ; ----------------------------------------------------------------------------
000152D0                            ; OST Variables:
000152D0 =00000030                  spikes_base_x_pos	= objoff_30	; original x-position
000152D0 =00000032                  spikes_base_y_pos	= objoff_32	; original y-position
000152D0 =00000034                  spikes_retract_offset	= objoff_34	; actual position relative to base position
000152D0 =00000036                  spikes_retract_state	= objoff_36	; 0 = positive offset, 1 = original position
000152D0 =00000038                  spikes_retract_timer	= objoff_38	; delay, before spikes move again
000152D0                            ; Sprite_15900:
000152D0                            Obj36:
000152D0 7000                       	moveq	#0,d0
000152D2 1028 0024                  	move.b	routine(a0),d0
000152D6 323B 0000                  	move.w	Obj36_Index(pc,d0.w),d1
000152DA 4EFB 1000                  	jmp	Obj36_Index(pc,d1.w)
000152DE                            ; ===========================================================================
000152DE                            ; off_1590E:
000152DE                            Obj36_Index:	
000152DE 0000                       		dc.w Obj36_Init-Obj36_Index		; 0
000152E0 0000                       		dc.w Obj36_Upright-Obj36_Index	; 2
000152E2 0000                       		dc.w Obj36_Sideways-Obj36_Index	; 4
000152E4 0000                       		dc.w Obj36_Upsidedown-Obj36_Index	; 6
000152E6                            ; ===========================================================================
000152E6                            ; byte_15916:
000152E6                            Obj36_InitData:
000152E6                            	;    width_pixels
000152E6                            	;	 y_radius
000152E6 1010                       	dc.b $10,$10	; 0	- Upright or ceiling spikes
000152E8 2010                       	dc.b $20,$10	; 2
000152EA 3010                       	dc.b $30,$10	; 4
000152EC 4010                       	dc.b $40,$10	; 6
000152EE 1010                       	dc.b $10,$10	; 8	- Sideways spikes
000152F0 1020                       	dc.b $10,$20	; 10
000152F2 1030                       	dc.b $10,$30	; 12
000152F4 1040                       	dc.b $10,$40	; 14
000152F6                            ; ===========================================================================
000152F6                            ; loc_15926:
000152F6                            Obj36_Init:
000152F6 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Upright
000152FA 217C 0000 0000 0004        	move.l	#Map_obj36,mappings(a0)
00015302 317C 051B 0002             	move.w	#$51B,art_tile(a0)
00015308 0028 0004 0001             	ori.b	#4,render_flags(a0)
0001530E 317C 0200 0018             	move.w	#$200,priority(a0)
00015314 1028 0028                  	move.b	subtype(a0),d0
00015318 0228 000F 0028             	andi.b	#$F,subtype(a0)		; lower 4 bits determine behavior, upper bits need to be removed
0001531E 0240 00F0                  	andi.w	#$F0,d0
00015322 43FA FFC2                  	lea	Obj36_InitData(pc),a1	; upper 4 bits determine size and orientation
00015326 E648                       	lsr.w	#3,d0			; use upper 4 bits * 2 as offset
00015328 D2C0                       	adda.w	d0,a1
0001532A 1159 0023                  	move.b	(a1)+,width_pixels(a0)
0001532E 1159 0016                  	move.b	(a1)+,y_radius(a0)
00015332 E248                       	lsr.w	#1,d0			; use upper 4 bits to determine mappings frame
00015334 1140 001A                  	move.b	d0,mapping_frame(a0)
00015338 0C00 0004                  	cmpi.b	#4,d0			; do spikes face sideways?
0001533C 6500                       	blo.s	Obj36_Init_2			; if not, branch
0001533E 5428 0024                  	addq.b	#2,routine(a0)	; => Obj36_Sideways
00015342 317C 0523 0002             	move.w	#$523,art_tile(a0)
00015348                            Obj36_Init_2:
00015348 0828 0001 0022             	btst	#1,status(a0)		; are spikes upsiede-down?
0001534E 6700                       	beq.s	Obj36_Init_3			; if not, branch
00015350 117C 0006 0024             	move.b	#6,routine(a0)	; => Obj36_Upsidedown
00015356                            Obj36_Init_3:
00015356 3168 0008 0030             	move.w	x_pos(a0),spikes_base_x_pos(a0)
0001535C 3168 000C 0032             	move.w	y_pos(a0),spikes_base_y_pos(a0)
00015362 4E75                       	rts
00015364                            ; ===========================================================================
00015364                            ; loc_15996:
00015364                            Obj36_Upright:
00015364 6100 0000                  	bsr.w	MoveSpikes
00015368 7200                       	moveq	#0,d1
0001536A 1228 0023                  	move.b	width_pixels(a0),d1
0001536E 0641 000B                  	addi.w	#$B,d1
00015372 7400                       	moveq	#0,d2
00015374 1428 0016                  	move.b	y_radius(a0),d2
00015378 3602                       	move.w	d2,d3
0001537A 5243                       	addq.w	#1,d3
0001537C 3828 0008                  	move.w	x_pos(a0),d4
00015380 6100 0000                  	bsr.w	SolidObject
00015384 1C28 0022                  	move.b	status(a0),d6
00015388 0206 0008                  	andi.b	#standing_mask,d6	; are Sonic or Tails standing on the object?
0001538C 6700                       	beq.s	Obj36_UprightEnd	; if not, branch
0001538E 1006                       	move.b	d6,d0
00015390 0200 0008                  	andi.b	#p1_standing,d0		; is Sonic standing on the object?
00015394 6700                       	beq.s	Obj36_Upright_2			; if not, branch
00015396 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001539A 6100 FD9A                  	bsr.w	Touch_ChkHurtSpikes
0001539E                            Obj36_Upright_2:
0001539E                            ;	andi.b	#p2_standing,d6		; is Tails standing on the object?
0001539E                            ;	beq.s	Obj36_UprightEnd	; if not, branch
0001539E                            ;	lea	(Sidekick).w,a1 ; a1=character
0001539E                            ;	bsr.w	Touch_ChkHurtSpikes
0001539E                            
0001539E                            ; loc_159DE:
0001539E                            Obj36_UprightEnd:
0001539E 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
000153A2 6000 0000                  	bra.w	MarkObjGone2
000153A6                            ; ===========================================================================
000153A6                            ; loc_159E6:
000153A6                            Obj36_Sideways:
000153A6 3F28 0008                  	move.w	x_pos(a0),-(sp)
000153AA 6100 0000                  	bsr.w	MoveSpikes
000153AE 7200                       	moveq	#0,d1
000153B0 1228 0023                  	move.b	width_pixels(a0),d1
000153B4 0641 000B                  	addi.w	#$B,d1
000153B8 7400                       	moveq	#0,d2
000153BA 1428 0016                  	move.b	y_radius(a0),d2
000153BE 3602                       	move.w	d2,d3
000153C0 5243                       	addq.w	#1,d3
000153C2 381F                       	move.w	(sp)+,d4
000153C4 6100 0000                  	bsr.w	SolidObject
000153C8 4846                       	swap	d6
000153CA 0246 0001                  	andi.w	#touch_side_mask,d6	; are Sonic or Tails pushing against the side?
000153CE 6700                       	beq.s	Obj36_SidewaysEnd	; if not, branch
000153D0 1006                       	move.b	d6,d0
000153D2 0200 0001                  	andi.b	#p1_touch_side,d0	; is Sonic pushing against the side?
000153D6 6700                       	beq.s	Obj36_Sideways_2			; if not, branch
000153D8 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
000153DC 6100 FD58                  	bsr.w	Touch_ChkHurtSpikes
000153E0 08A8 0003 0022             	bclr	#p1_pushing_bit,status(a0)
000153E6                            Obj36_Sideways_2:
000153E6                            ;	andi.b	#p2_touch_side,d6	; is Tails pushing against the side?
000153E6                            ;	beq.s	Obj36_SidewaysEnd	; if not, branch
000153E6                            ;	lea	(Sidekick).w,a1 ; a1=character
000153E6                            ;	bsr.w	Touch_ChkHurtSpikes
000153E6                            ;	bclr	#p2_pushing_bit,status(a0)
000153E6                            
000153E6                            ; loc_15A3A:
000153E6                            Obj36_SidewaysEnd:
000153E6 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
000153EA 6000 0000                  	bra.w	MarkObjGone2
000153EE                            ; ===========================================================================
000153EE                            ; loc_15A42:
000153EE                            Obj36_Upsidedown:
000153EE 6100 0000                  	bsr.w	MoveSpikes
000153F2 7200                       	moveq	#0,d1
000153F4 1228 0023                  	move.b	width_pixels(a0),d1
000153F8 0641 000B                  	addi.w	#$B,d1
000153FC 7400                       	moveq	#0,d2
000153FE 1428 0016                  	move.b	y_radius(a0),d2
00015402 3602                       	move.w	d2,d3
00015404 5243                       	addq.w	#1,d3
00015406 3828 0008                  	move.w	x_pos(a0),d4
0001540A 6100 0000                  	bsr.w	SolidObject
0001540E                            ;	tst.b	$25(a0)
0001540E                            ;	bne.s	Obj36_UpsidedownEnd
0001540E 4A44                       	tst.w	d4
00015410 6A00                       	bpl.s	Obj36_UpsidedownEnd	; if not, branch
00015412 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00015416 6100 FD1E                  	bsr.w	Touch_ChkHurtSpikes
0001541A                            Obj36_Upsidedown_2:
0001541A                            ;	andi.b	#p2_touch_bottom,d6	; is Tails touching the bottom?
0001541A                            ;	beq.s	Obj36_UpsidedownEnd	; if not, branch
0001541A                            ;	lea	(Sidekick).w,a1 ; a1=character
0001541A                            ;	bsr.w	Touch_ChkHurtSpikes
0001541A                            
0001541A                            ; loc_15A88:
0001541A                            Obj36_UpsidedownEnd:
0001541A 3028 0030                  	move.w	spikes_base_x_pos(a0),d0
0001541E 6000 0000                  	bra.w	MarkObjGone2
00015422                            
00015422                            
00015422                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015422                            ; handles direction, timing and movement of moving spikes
00015422                            
00015422                            ; sub_15AC6:
00015422                            MoveSpikes:
00015422 7000                       	moveq	#0,d0
00015424 1028 0028                  	move.b	subtype(a0),d0
00015428 D040                       	add.w	d0,d0
0001542A 323B 0000                  	move.w	MoveSpikes_Behaviors(pc,d0.w),d1
0001542E 4EFB 1000                  	jmp	MoveSpikes_Behaviors(pc,d1.w)
00015432                            ; End of function MoveSpikes
00015432                            
00015432                            ; ===========================================================================
00015432                            ; off_15AD6:
00015432                            MoveSpikes_Behaviors:
00015432 0000                       		dc.w MoveSpikes_Still-MoveSpikes_Behaviors		; 0
00015434 0000                       		dc.w MoveSpikes_Vertical-MoveSpikes_Behaviors	; 1
00015436 0000                       		dc.w MoveSpikes_Horizontal-MoveSpikes_Behaviors	; 2
00015438                            ; ===========================================================================
00015438                            ; return_15ADC:
00015438                            MoveSpikes_Still:
00015438 4E75                       	rts
0001543A                            ; ===========================================================================
0001543A                            ; loc_15ADE:
0001543A                            MoveSpikes_Vertical:
0001543A 6100 0000                  	bsr.w	MoveSpikes_Delay
0001543E 7000                       	moveq	#0,d0
00015440 1028 0034                  	move.b	spikes_retract_offset(a0),d0
00015444 D068 0032                  	add.w	spikes_base_y_pos(a0),d0	; apply offset to y-position
00015448 3140 000C                  	move.w	d0,y_pos(a0)
0001544C 4E75                       	rts
0001544E                            ; ===========================================================================
0001544E                            ; loc_15AF2:
0001544E                            MoveSpikes_Horizontal:
0001544E 6100 0000                  	bsr.w	MoveSpikes_Delay
00015452 7000                       	moveq	#0,d0
00015454 1028 0034                  	move.b	spikes_retract_offset(a0),d0
00015458 D068 0030                  	add.w	spikes_base_x_pos(a0),d0	; apply offset to x-position
0001545C 3140 0008                  	move.w	d0,x_pos(a0)
00015460 4E75                       	rts
00015462                            
00015462                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015462                            
00015462                            ; sub_15B06:
00015462                            MoveSpikes_Delay:
00015462 4A68 0038                  	tst.w	spikes_retract_timer(a0)	; is it time for spikes to move again?
00015466 6700                       	beq.s	MoveSpikes_ChkDir		; if yes, branch
00015468 5368 0038                  	subq.w	#1,spikes_retract_timer(a0)	; else, decrement timer
0001546C 6600                       	bne.s	MoveSpikes_Retract_2	; rts			; branch, if timer didn't reach 0
0001546E 4A28 0001                  	tst.b	render_flags(a0)		; are spikes on screen?
00015472 6A00                       	bpl.s	MoveSpikes_Retract_2	; rts			; if not, branch
00015474 303C 00B6                  	move.w	#$B6,d0		; play spike movement sound
00015478 4EB9 0000 3212             	jsr	(PlaySound).l
0001547E 6000                       	bra.s	MoveSpikes_Retract_2	; rts
00015480                            ; ===========================================================================
00015480                            ; loc_15B24:
00015480                            MoveSpikes_ChkDir:
00015480 4A68 0036                  	tst.w	spikes_retract_state(a0)	; do spikes need to move away from initial position?
00015484 6700                       	beq.s	MoveSpikes_Retract		; if yes, branch
00015486 0468 0800 0034             	subi.w	#$800,spikes_retract_offset(a0)	; subtract 8 pixels from offset
0001548C 6400                       	bhs.s	MoveSpikes_Retract_2	; rts			; branch, if offset is not yet 0
0001548E 317C 0000 0034             	move.w	#0,spikes_retract_offset(a0)
00015494 317C 0000 0036             	move.w	#0,spikes_retract_state(a0)	; switch state
0001549A 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
000154A0 6000                       	bra.s	MoveSpikes_Retract_2	; rts
000154A2                            ; ===========================================================================
000154A2                            ; loc_15B46:
000154A2                            MoveSpikes_Retract:
000154A2 0668 0800 0034             	addi.w	#$800,spikes_retract_offset(a0)		; add 8 pixels to offset
000154A8 0C68 2000 0034             	cmpi.w	#$2000,spikes_retract_offset(a0)	; is offset the width of one spike block (32 pixels)?
000154AE 6500                       	blo.s	MoveSpikes_Retract_2	; rts				; if not, branch
000154B0 317C 2000 0034             	move.w	#$2000,spikes_retract_offset(a0)
000154B6 317C 0001 0036             	move.w	#1,spikes_retract_state(a0)	; switch state
000154BC 317C 003C 0038             	move.w	#$3C,spikes_retract_timer(a0)	; reset timer
000154C2                            MoveSpikes_Retract_2:
000154C2 4E75                       	rts
000154C4                            ; End of function MoveSpikes_Delay
000154C4                            
000154C4                            ; ===========================================================================
000154C4                            ; -------------------------------------------------------------------------------
000154C4                            ; sprite mappings
000154C4                            ; -------------------------------------------------------------------------------
000154C4                            Map_obj36:
000154C4                            	include "_maps\spikess2.asm"
000154C4                            ; --------------------------------------------------------------------------------
000154C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000154C4                            ; --------------------------------------------------------------------------------
000154C4                            
000154C4                            SME_AVB8T:	
000154C4 0000 0000                  		dc.w SME_AVB8T_10-SME_AVB8T, SME_AVB8T_1B-SME_AVB8T	
000154C8 0000 0000                  		dc.w SME_AVB8T_30-SME_AVB8T, SME_AVB8T_4F-SME_AVB8T	
000154CC 0000 0000                  		dc.w SME_AVB8T_78-SME_AVB8T, SME_AVB8T_83-SME_AVB8T	
000154D0 0000 0000                  		dc.w SME_AVB8T_98-SME_AVB8T, SME_AVB8T_B7-SME_AVB8T	
000154D4 02                         SME_AVB8T_10:	dc.b 2	
000154D5 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
000154DA F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
000154DF 04                         SME_AVB8T_1B:	dc.b 4	
000154E0 F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
000154E5 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
000154EA F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
000154EF F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
000154F4 06                         SME_AVB8T_30:	dc.b 6	
000154F5 F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
000154FA F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
000154FF F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015504 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
00015509 F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
0001550E F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
00015513 08                         SME_AVB8T_4F:	dc.b 8	
00015514 F007 0000 C0               		dc.b $F0, 7, 0, 0, $C0	
00015519 F007 0000 D0               		dc.b $F0, 7, 0, 0, $D0	
0001551E F007 0000 E0               		dc.b $F0, 7, 0, 0, $E0	
00015523 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00015528 F007 0000 00               		dc.b $F0, 7, 0, 0, 0	
0001552D F007 0000 10               		dc.b $F0, 7, 0, 0, $10	
00015532 F007 0000 20               		dc.b $F0, 7, 0, 0, $20	
00015537 F007 0000 30               		dc.b $F0, 7, 0, 0, $30	
0001553C 02                         SME_AVB8T_78:	dc.b 2	
0001553D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00015542 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015547 04                         SME_AVB8T_83:	dc.b 4	
00015548 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
0001554D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00015552 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015557 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
0001555C 06                         SME_AVB8T_98:	dc.b 6	
0001555D D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
00015562 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
00015567 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
0001556C 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015571 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
00015576 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
0001557B 08                         SME_AVB8T_B7:	dc.b 8	
0001557C C00D 0000 F0               		dc.b $C0, $D, 0, 0, $F0	
00015581 D00D 0000 F0               		dc.b $D0, $D, 0, 0, $F0	
00015586 E00D 0000 F0               		dc.b $E0, $D, 0, 0, $F0	
0001558B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00015590 000D 0000 F0               		dc.b 0, $D, 0, 0, $F0	
00015595 100D 0000 F0               		dc.b $10, $D, 0, 0, $F0	
0001559A 200D 0000 F0               		dc.b $20, $D, 0, 0, $F0	
0001559F 300D 0000 F0               		dc.b $30, $D, 0, 0, $F0	
000155A4                            		even
000155A4                            		even
000155A4                            	even
000155A4                            
000155A4                            ; ===========================================================================
000155A4                            ; ---------------------------------------------------------------------------
000155A4                            ; Object 3B - purple rock (GHZ)
000155A4                            ; ---------------------------------------------------------------------------
000155A4                            
000155A4                            Obj3B:					; XREF: Obj_Index
000155A4 7000                       		moveq	#0,d0
000155A6 1028 0024                  		move.b	routine(a0),d0
000155AA 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
000155AE 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
000155B2                            ; ===========================================================================
000155B2 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
000155B4 0000                       		dc.w Obj3B_Solid-Obj3B_Index
000155B6                            ; ===========================================================================
000155B6                            
000155B6                            Obj3B_Main:				; XREF: Obj3B_Index
000155B6 5428 0024                  		addq.b	#2,routine(a0)
000155BA 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
000155C2 317C 63D0 0002             		move.w	#$63D0,2(a0)
000155C8 117C 0004 0001             		move.b	#4,1(a0)
000155CE 117C 0013 0023             		move.b	#$13,width_pixels(a0)
000155D4 317C 0200 0018             		move.w	#$200,priority(a0)
000155DA                            
000155DA                            Obj3B_Solid:				; XREF: Obj3B_Index
000155DA 323C 001B                  		move.w	#$1B,d1
000155DE 343C 0010                  		move.w	#$10,d2
000155E2 363C 0010                  		move.w	#$10,d3
000155E6 3828 0008                  		move.w	8(a0),d4
000155EA 4EB9 0000 0000             		jsr	SolidObject
000155F0 4EB9 0000 0000             		jsr	DisplaySprite
000155F6 4EF9 0000 0000             		jmp		MarkObjGone3
000155FC                            ; ===========================================================================
000155FC                            ; ---------------------------------------------------------------------------
000155FC                            ; Object 49 - waterfall	sound effect (GHZ)
000155FC                            ; ---------------------------------------------------------------------------
000155FC                            
000155FC                            Obj49:					; XREF: Obj_Index
000155FC 7000                       		moveq	#0,d0
000155FE 1028 0024                  		move.b	routine(a0),d0
00015602 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
00015606 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0001560A                            ; ===========================================================================
0001560A 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0001560C 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0001560E                            ; ===========================================================================
0001560E                            
0001560E                            Obj49_Main:				; XREF: Obj49_Index
0001560E 5428 0024                  		addq.b	#2,routine(a0)
00015612 117C 0004 0001             		move.b	#4,1(a0)
00015618                            
00015618                            Obj49_PlaySnd:				; XREF: Obj49_Index
00015618 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001561C 0200 003F                  		andi.b	#$3F,d0
00015620 6600                       		bne.s	Obj49_ChkDel
00015622 303C 0079                  		move.w	#$79,d0
00015626 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0001562C                            
0001562C                            Obj49_ChkDel:
0001562C 4EF9 0000 0000             		jmp MarkObjGone3
00015632                            ; ===========================================================================
00015632                            ; ---------------------------------------------------------------------------
00015632                            ; Sprite mappings - purple rock	(GHZ)
00015632                            ; ---------------------------------------------------------------------------
00015632                            Map_obj3B:
00015632                            	include "_maps\obj3B.asm"
00015632                            ; ---------------------------------------------------------------------------
00015632                            ; Sprite mappings - purple rock	(GHZ)
00015632                            ; ---------------------------------------------------------------------------
00015632 0000                       		dc.w byte_D110-Map_obj3B
00015634 02                         byte_D110:	dc.b 2
00015635 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0001563A F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
00015640 00                         		even
00015640 00                         		even
00015640                            
00015640                            ; ===========================================================================
00015640                            ; ---------------------------------------------------------------------------
00015640                            ; Object 3C - smashable	wall (GHZ, SLZ)
00015640                            ; ---------------------------------------------------------------------------
00015640                            
00015640                            Obj3C:					; XREF: Obj_Index
00015640 7000                       		moveq	#0,d0
00015642 1028 0024                  		move.b	routine(a0),d0
00015646 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0001564A 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0001564E 6000 0000                  		bra.w	MarkObjGone
00015652                            ; ===========================================================================
00015652 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
00015654 0000                       		dc.w Obj3C_Solid-Obj3C_Index
00015656 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
00015658                            ; ===========================================================================
00015658                            
00015658                            Obj3C_Main:				; XREF: Obj3C_Index
00015658 5428 0024                  		addq.b	#2,$24(a0)
0001565C 217C 0000 0000 0004        		move.l	#Map_Obj3C,4(a0)
00015664 317C 450F 0002             		move.w	#$450F,2(a0)
0001566A 117C 0004 0001             		move.b	#4,1(a0)
00015670 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00015676 317C 0200 0018             		move.w	#$200,priority(a0)
0001567C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00015682 4A39 00FF F7C8             		tst.b	($FFF7C8).l
00015688 6B00                       		bmi.s	locret_102CC
0001568A 0C39 0006 00FF D024        		cmpi.b	#6,($FFD024).l
00015692 6400                       		bcc.s	locret_102CC
00015694 4A79 00FF FE08             		tst.w	($FFFE08).l
0001569A 6600                       		bne.s	locret_102CC
0001569C                            Obj3C_Solid:				; XREF: Obj3C_Index
0001569C 323C 001B                  		move.w	#$1B,d1
000156A0 343C 0020                  		move.w	#$20,d2	; ' '
000156A4 43F9 FFFF D000             		lea	(MainCharacter).l,a1
000156AA 3169 0010 0030             		move.w	$10(a1),$30(a0)
000156B0 0C38 0002 FE2C             		cmpi.b	#2,($FFFFFE2C).w
000156B6 6600                       		bne.s	Obj3C_ChkRoll
000156B8 0C39 0001 00FF D19C        		cmpi.b	#1,($FFD19C).l
000156C0 6700                       		beq.s	Obj3C_Solid2
000156C2                            
000156C2                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
000156C2 4A38 FE08                  		tst.b	(Debug_Placement_Mode).w
000156C6 6600                       		bne.s	locret_102CC
000156C8 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
000156CC 6600                       		bne.s	Obj3C_Solid2
000156CE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)
000156D4 6600                       		bne.s	loc_102BE
000156D6 0829 0001 0022             		btst	#1,$22(a1)
000156DC 6600                       		bne.s	loc_102BE
000156DE 3029 0010                  		move.w	$10(a1),d0
000156E2 6A00                       		bpl.s	Obj3C_ChkSpeed
000156E4 4440                       		neg.w	d0
000156E6                            
000156E6                            Obj3C_ChkSpeed:				; CODE XREF: ROM:000102B4j
000156E6 0C40 0480                  		cmp.w	#$480,d0
000156EA 6C00                       		bge.s	Obj3C_Solid2
000156EC                            
000156EC                            loc_102BE:				; CODE XREF: ROM:000102A6j
000156EC                            					; ROM:000102AEj
000156EC 363C 0020                  		move.w	#$20,d3	; ' '
000156F0 3828 0008                  		move.w	8(a0),d4
000156F4 4EB9 0000 0000             		jsr	SolidObject
000156FA                            
000156FA                            locret_102CC:				; CODE XREF: ROM:00010256j
000156FA                            					; ROM:00010260j ...
000156FA 4E75                       		rts
000156FC                            ; ---------------------------------------------------------------------------
000156FC                            
000156FC                            Obj3C_Solid2:				; CODE XREF: ROM:0001028Ej
000156FC                            					; ROM:00010296j ...
000156FC 3029 0008                  		move.w	8(a1),d0
00015700 9068 0008                  		sub.w	8(a0),d0
00015704 D041                       		add.w	d1,d0
00015706 6B00 FFF2                  		bmi.w	locret_102CC
0001570A 3601                       		move.w	d1,d3
0001570C D643                       		add.w	d3,d3
0001570E B043                       		cmp.w	d3,d0
00015710 62E8                       		bhi.s	locret_102CC
00015712 1629 0016                  		move.b	$16(a1),d3
00015716 4883                       		ext.w	d3
00015718 D443                       		add.w	d3,d2
0001571A 3629 000C                  		move.w	$C(a1),d3
0001571E 9668 000C                  		sub.w	$C(a0),d3
00015722 5843                       		addq.w	#4,d3
00015724 D642                       		add.w	d2,d3
00015726 6BD2                       		bmi.s	locret_102CC
00015728 3802                       		move.w	d2,d4
0001572A D844                       		add.w	d4,d4
0001572C B644                       		cmp.w	d4,d3
0001572E 64CA                       		bcc.s	locret_102CC
00015730                            
00015730                            loc_10302:				; DATA XREF: ROM:000B9E60o
00015730 5869 0008                  		addq.w	#4,8(a1)
00015734 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4
0001573A 3028 0008                  		move.w	8(a0),d0
0001573E B069 0008                  		cmp.w	8(a1),d0
00015742 6500                       		bcs.s	Obj3C_Smash
00015744 5169 0008                  		subq.w	#8,8(a1)
00015748 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4
0001574E                            
0001574E                            Obj3C_Smash:				; CODE XREF: ROM:00010314j
0001574E 3369 0010 0020             		move.w	$10(a1),inertia(a1)
00015754 08A8 0005 0022             		bclr	#5,$22(a0)
0001575A 08A9 0005 0022             		bclr	#5,$22(a1)
00015760 7207                       		moveq	#7,d1
00015762 343C 0070                  		move.w	#$70,d2	; 'p'
00015766 6100                       		bsr.s	SmashObject
00015768                            
00015768                            Obj3C_FragMove:				; DATA XREF: SmashObject+36o
00015768 4EB9 0000 0000             		jsr	SpeedToPos
0001576E 0668 0070 0012             		addi.w	#$70,$12(a0) ; 'p'
00015774 4EB9 0000 0000             		jsr	DisplaySprite
0001577A 4A28 0001                  		tst.b	1(a0)
0001577E 6A00 0000                  		bpl.w	DeleteObject
00015782 4E75                       		rts
00015784                            		
00015784                            ; ---------------------------------------------------------------------------
00015784                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
00015784                            ; ---------------------------------------------------------------------------
00015784                            
00015784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015784                            
00015784                            
00015784                            SmashObject:				; XREF: Obj3C_Smash
00015784 7000                       		moveq	#0,d0
00015786 1028 001A                  		move.b	$1A(a0),d0
0001578A D040                       		add.w	d0,d0
0001578C 2668 0004                  		movea.l	4(a0),a3
00015790 D6F3 0000                  		adda.w	(a3,d0.w),a3
00015794 524B                       		addq.w	#1,a3
00015796 08E8 0005 0001             		bset	#5,1(a0)
0001579C 1810                       		move.b	0(a0),d4
0001579E 1A28 0001                  		move.b	1(a0),d5
000157A2 2248                       		movea.l	a0,a1
000157A4 6000                       		bra.s	Smash_LoadFrag
000157A6                            ; ===========================================================================
000157A6                            
000157A6                            Smash_Loop:
000157A6 6100 0000                  		bsr.w	SingleObjLoad
000157AA 6600                       		bne.s	Smash_PlaySnd
000157AC 5A4B                       		addq.w	#5,a3
000157AE                            
000157AE                            Smash_LoadFrag:				; XREF: SmashObject
000157AE 137C 0004 0024             		move.b	#4,$24(a1)
000157B4 1284                       		move.b	d4,0(a1)
000157B6 234B 0004                  		move.l	a3,4(a1)
000157BA 1345 0001                  		move.b	d5,1(a1)
000157BE 3368 0008 0008             		move.w	8(a0),8(a1)
000157C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000157CA 3368 0002 0002             		move.w	2(a0),2(a1)
000157D0 3368 0018 0018             		move.w	priority(a0),priority(a1)
000157D6 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
000157DC 335C 0010                  		move.w	(a4)+,$10(a1)
000157E0 335C 0012                  		move.w	(a4)+,$12(a1)
000157E4 B3C8                       		cmpa.l	a0,a1
000157E6 6400                       		bcc.s	loc_D268
000157E8 2F08                       		move.l	a0,-(sp)
000157EA 2049                       		movea.l	a1,a0
000157EC 6100 0000                  		bsr.w	SpeedToPos
000157F0 D568 0012                  		add.w	d2,$12(a0)
000157F4 205F                       		movea.l	(sp)+,a0
000157F6 6100 0000                  		bsr.w	DisplaySprite2
000157FA                            
000157FA                            loc_D268:
000157FA 51C9 FFAA                  		dbf	d1,Smash_Loop
000157FE                            
000157FE                            Smash_PlaySnd:
000157FE 0C10 0051                  		cmpi.b	#$51,(a0)
00015802 6700                       		beq.s	Smash_PlaySnd2
00015804 303C 0059                  		move.w	#$59,d0
00015808 4EF9 0000 0000             		jmp		Smash_PlaySnd_Play
0001580E                            Smash_PlaySnd2:		
0001580E 303C 0072                  		move.w	#$72,d0
00015812                            Smash_PlaySnd_Play:
00015812 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
00015818                            ; End of function SmashObject
00015818                            
00015818                            ; ===========================================================================
00015818                            ; Smashed block	fragment speeds
00015818                            ;
00015818 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0001581C 0600 FF00                  		dc.w $600, $FF00
00015820 0600 0100                  		dc.w $600, $100
00015824 0400 0500                  		dc.w $400, $500
00015828 0600 FA00                  		dc.w $600, $FA00
0001582C 0800 FE00                  		dc.w $800, $FE00
00015830 0800 0200                  		dc.w $800, $200
00015834 0600 0600                  		dc.w $600, $600
00015838                            
00015838 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0001583C F800 FE00                  		dc.w $F800, $FE00
00015840 F800 0200                  		dc.w $F800, $200
00015844 FA00 0600                  		dc.w $FA00, $600
00015848 FC00 FB00                  		dc.w $FC00, $FB00
0001584C FA00 FF00                  		dc.w $FA00, $FF00
00015850 FA00 0100                  		dc.w $FA00, $100
00015854 FC00 0500                  		dc.w $FC00, $500
00015858                            ; ---------------------------------------------------------------------------
00015858                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00015858                            ; ---------------------------------------------------------------------------
00015858                            Map_obj3C:
00015858                            	include "_maps\obj3C.asm"
00015858                            ; ---------------------------------------------------------------------------
00015858                            ; Sprite mappings - smashable walls (GHZ, SLZ)
00015858                            ; ---------------------------------------------------------------------------
00015858 0000                       		dc.w byte_D2BC-Map_obj3C
0001585A 0000                       		dc.w byte_D2E5-Map_obj3C
0001585C 0000                       		dc.w byte_D30E-Map_obj3C
0001585E 08                         byte_D2BC:	dc.b 8
0001585F E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
00015864 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
00015869 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0001586E 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
00015873 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
00015878 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0001587D 0005 0004 00               		dc.b 0,	5, 0, 4, 0
00015882 1005 0004 00               		dc.b $10, 5, 0,	4, 0
00015887 08                         byte_D2E5:	dc.b 8
00015888 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0001588D F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
00015892 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
00015897 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0001589C E005 0004 00               		dc.b $E0, 5, 0,	4, 0
000158A1 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
000158A6 0005 0004 00               		dc.b 0,	5, 0, 4, 0
000158AB 1005 0004 00               		dc.b $10, 5, 0,	4, 0
000158B0 08                         byte_D30E:	dc.b 8
000158B1 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
000158B6 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
000158BB 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
000158C0 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
000158C5 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
000158CA F005 0008 00               		dc.b $F0, 5, 0,	8, 0
000158CF 0005 0008 00               		dc.b 0,	5, 0, 8, 0
000158D4 1005 0008 00               		dc.b $10, 5, 0,	8, 0
000158DA 00                         		even
000158DA 00                         		even
000158DA                            
000158DA                            ; ---------------------------------------------------------------------------
000158DA                            ; Object code loading subroutine
000158DA                            ; ---------------------------------------------------------------------------
000158DA                            
000158DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158DA                            
000158DA                            
000158DA                            ; =============== S U B	R O U T	I N E =======================================
000158DA                            
000158DA                            
000158DA                            ObjectsLoad:				; CODE XREF: ROM:00004946p
000158DA                            					; ROM:00004A2Ep ...
000158DA 41F8 D000                  		lea	(Object_RAM).w,a0 ; set address for object RAM
000158DE 7E7F                       		moveq	#$7F,d7
000158E0 7000                       		moveq	#0,d0
000158E2 0C38 0006 D024             		cmpi.b	#6,(MainCharacter+routine).w
000158E8 6400                       		bcc.s	loc_D362
000158EA                            
000158EA                            loc_D348:
000158EA 1010                       		move.b	(a0),d0		; load object number from RAM
000158EC 6700                       		beq.s	loc_D358
000158EE                            ;		add.w	d0,d0
000158EE                            ;		add.w	d0,d0	; d0 = object ID *
000158EE E548                       		lsl.w	#2,d0
000158F0 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
000158F4 4E91                       		jsr	(a1)		; run the object's code
000158F6 7000                       		moveq	#0,d0
000158F8                            
000158F8                            loc_D358:
000158F8 41E8 0040                  		lea	$40(a0),a0	; next object
000158FC 51CF FFEC                  		dbf	d7,loc_D348
00015900 4E75                       		rts	
00015902                            ; ===========================================================================
00015902                            
00015902                            loc_D362:
00015902 0C38 000A D024             		cmpi.b	#$A,(MainCharacter+routine).w      ; Has Sonic drowned?
00015908 67E0                       		beq.s	loc_D348                        ; If so, run objects a little longer
0001590A 7E1F                               moveq	#$1F,d7
0001590C 61DC                       		bsr.s	loc_D348
0001590E 7E5F                       		moveq	#$5F,d7
00015910                            
00015910                            loc_D368:
00015910 7000                       		moveq	#0,d0	; Clear d0 quickly
00015912 1010                       		move.b	(a0),d0	; get the object's ID
00015914 6700                       		beq.s	loc_D37C	; if it's obj00, skip it
00015916 4A28 0001                  		tst.b	render_flags(a0)	; should we render it?
0001591A 6A00                       		bpl.s	loc_D37C	; if not, skip it
0001591C 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
00015920 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
00015926 6700                       		beq.s	loc_D378            ; if not, branch
00015928 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
0001592C                            
0001592C                            loc_D378:
0001592C 6100 0000                  		bsr.w	DisplaySprite3	
00015930                            loc_D37C:
00015930 41E8 0040                  		lea	$40(a0),a0
00015934 51CF FFDA                  		dbf	d7,loc_D368
00015938 4E75                       		rts
0001593A                            ; End of function ObjectsLoad
0001593A                            
0001593A                            
0001593A                            ; =============== S U B	R O U T	I N E =======================================
0001593A                            
0001593A                            
0001593A                            sub_F2F8:				; CODE XREF: sub_1CFC+5Cp
0001593A 41F8 D000                  		lea	($FFFFD000).w,a0
0001593E 7E7F                       		moveq	#$7F,d7	; ''
00015940 7000                       		moveq	#0,d0
00015942 4EF9 0000 0000             		jmp	loc_F308
00015948                            ; ---------------------------------------------------------------------------
00015948                            ;		moveq	#$1F,d7
00015948                            ;		bsr.s	loc_D368
00015948                            ;		moveq	#$5F,d7	; '_'
00015948                            
00015948                            loc_F308:				; CODE XREF: sub_F2F8+8j ROM:loc_F31Cj
00015948 7000                       		moveq	#0,d0
0001594A 1010                       		move.b	(a0),d0
0001594C 6700                       		beq.s	loc_F318
0001594E 4A28 0001                  		tst.b	1(a0)
00015952 6A00                       		bpl.s	loc_F318
00015954 3028 0018                  		move.w  priority(a0),d0        ; move object's priority to d0
00015958 0828 0006 0001             		btst	#6,render_flags(a0)    ; is the compound sprites flag set?
0001595E 6700                       		beq.s	loc_F308_2            ; if not, branch
00015960 303C 0200                  		move.w	#$200,d0        ; move $200 to d0
00015964                            loc_F308_2:
00015964 6100 0000                  		bsr.w	DisplaySprite2
00015968                            
00015968                            loc_F318:				; CODE XREF: sub_F2F8+14j sub_F2F8+1Aj
00015968 41E8 0040                  		lea	$40(a0),a0
0001596C 51CF FFDA                  		dbf	d7,loc_F308
00015970 4E75                       		rts
00015972                            ; ===========================================================================
00015972                            ; ---------------------------------------------------------------------------
00015972                            ; Object pointers
00015972                            ; ---------------------------------------------------------------------------
00015972                            Obj_Index:
00015972                            	include "_inc\Object pointers.asm"
00015972                            ; ---------------------------------------------------------------------------
00015972                            ; Object pointers
00015972                            ; ---------------------------------------------------------------------------
00015972 0000 0000 0000 0000 0000+  	dc.l Obj01, Obj02,	Obj03, Obj04
00015982 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjNull, ObjNull, Obj08
00015992 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
000159A2 0000 0000 0001 2458 0001+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
000159B2 0000 EBAA 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
000159C2 0000 F22A 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
000159D2 0000 FAC8 0000 FDE2 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
000159E2 0001 0472 0001 074C 0001+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
000159F2 0000 0000 0001 1444 0001+  	dc.l Obj21, Obj22, Obj23, Obj24
00015A02 0001 179E 0001 1E92 0001+  	dc.l Obj25, Obj26, Obj27, Obj28
00015A12 0001 1036 0001 052E 0001+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
00015A22 0001 2D8E 0001 2052 0001+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
00015A32 0001 373E 0001 3DCC 0001+  	dc.l Obj31, Obj32, Obj33, Obj34
00015A42 0001 32BE 0001 52D0 0001+  	dc.l Obj35, Obj36, Obj37, Obj38
00015A52 0001 455E 0001 4644 0001+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
00015A62 0000 0000 0000 0000 0001+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
00015A72 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
00015A82 0001 3A48 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
00015A92 0001 55FC 0000 0000 0001+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
00015AA2 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
00015AB2 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
00015AC2 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
00015AD2 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
00015AE2 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
00015AF2 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
00015B02 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
00015B12 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
00015B22 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
00015B32 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
00015B42 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
00015B52 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
00015B62 0000 0000 0001 4A34 0001+  	dc.l Obj7D, Obj7E, Obj7F, ObjNull
00015B72 0000 0000 0000 0000 0000+  	dc.l ObjNull, Obj82, Obj83, Obj84
00015B82 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
00015B92 0000 BF84 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
00015BA2 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015BA2 0000 0000 0000 0000 0000+  	dc.l Obj8D, Obj8E, ObjNull, ObjNull
00015BB2                            
00015BB2                            ; ----------------------------------------------------------------------------
00015BB2                            ; Object removed from the game. All it does is deallocate its array.
00015BB2                            ; ----------------------------------------------------------------------------
00015BB2                            
00015BB2                            ObjNull: ;;
00015BB2 6000 0000                  	bra.w	DeleteObject
00015BB6                            ; ---------------------------------------------------------------------------
00015BB6                            ; Subroutine to	make an	object fall downwards, increasingly fast
00015BB6                            ; ---------------------------------------------------------------------------
00015BB6                            
00015BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BB6                            
00015BB6                            ; ObjectMoveAndFall:
00015BB6                            ObjectFall:
00015BB6 3028 0010                          move.w  x_vel(a0),d0
00015BBA 48C0                               ext.l   d0
00015BBC E188                               lsl.l   #8,d0
00015BBE D1A8 0008                          add.l   d0,x_pos(a0)
00015BC2 3028 0012                          move.w  y_vel(a0),d0
00015BC6 0668 0038 0012                     addi.w  #$38,y_vel(a0) ; apply gravity
00015BCC 48C0                               ext.l   d0
00015BCE E188                               lsl.l   #8,d0
00015BD0 D1A8 000C                          add.l   d0,y_pos(a0)
00015BD4 4E75                               rts
00015BD6                            ; End of function ObjectFall
00015BD6                            
00015BD6                            ; ---------------------------------------------------------------------------
00015BD6                            ; Subroutine translating object	speed to update	object position
00015BD6                            ; ---------------------------------------------------------------------------
00015BD6                            
00015BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BD6                            
00015BD6                            ; ObjectMove:
00015BD6                            SpeedToPos:
00015BD6 3028 0010                          move.w  x_vel(a0),d0
00015BDA 48C0                               ext.l   d0
00015BDC E188                               lsl.l   #8,d0
00015BDE D1A8 0008                          add.l   d0,x_pos(a0)
00015BE2 3028 0012                          move.w  y_vel(a0),d0
00015BE6 48C0                               ext.l   d0
00015BE8 E188                               lsl.l   #8,d0
00015BEA D1A8 000C                          add.l   d0,y_pos(a0)
00015BEE 4E75                               rts
00015BF0                            ; End of function SpeedToPos
00015BF0                            
00015BF0                            ; ---------------------------------------------------------------------------
00015BF0                            ; Subroutine to	delete an object
00015BF0                            ; ---------------------------------------------------------------------------
00015BF0                            
00015BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BF0                            
00015BF0                            
00015BF0                            DeleteObject:
00015BF0 2248                       		movea.l	a0,a1
00015BF2                            
00015BF2                            DeleteChild:
00015BF2                            DeleteObject2:
00015BF2 7200                       		moveq	#0,d1
00015BF4 700F                       		moveq	#$F,d0
00015BF6                            
00015BF6                            loc_D646:
00015BF6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
00015BF8 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
00015BFC                            ;		move.w	d1,(a1)+
00015BFC 4E75                       		rts	
00015BFE                            ; End of function DeleteObject
00015BFE                            
00015BFE                            ; ---------------------------------------------------------------------------
00015BFE                            ; Subroutine to	delete the Super Stars and the Invincibility Stars
00015BFE                            ; ---------------------------------------------------------------------------
00015BFE                            
00015BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BFE                            
00015BFE                            
00015BFE                            Super_and_Invincibility_Stars:
00015BFE 2F08                       		move.l	a0,-(sp)
00015C00 41F8 D200                  		lea		($FFFFD200).w,a0	; stars object ($3801 and $8F)
00015C04 4EBA FFEA                  		jsr		DeleteObject		; delete stars
00015C08 11FC 0000 D2DC             		move.b	#0,($FFFFD2DC).w
00015C0E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; clear speed shoes
00015C14 205F                       		move.l	(sp)+,a0
00015C16 4E75                       		rts
00015C18                            ; End of function Super_and_Invincibility_Stars
00015C18                            
00015C18                            ; ---------------------------------------------------------------------------
00015C18                            ; Subroutine to	load the life counter art depending on Sonic's Status
00015C18                            ; ---------------------------------------------------------------------------
00015C18                            
00015C18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C18                            
00015C18                            
00015C18                            LoadLivesCounterArt:
00015C18 223C 0000 0000             		move.l	#Unc_Lives,d1			        ; Call for Regular Life Icon Art
00015C1E 4A38 FE19                  		tst.b	($FFFFFE19).w
00015C22 6700 0000                  		beq.w	nextloc3
00015C26                            ;		cmpi.b	#-1,(Super_Sonic_palette).w ; '$'
00015C26                            ;		bne.s	nextloc3
00015C26 223C 0000 0000             		move.l	#Unc_SuperLives,d1			        ; Call for Regular Super Life Icon Art		
00015C2C                            nextloc3:
00015C2C 343C FA80                  		move.w	#$FA80,d2			        ; Load Art from this location (VRAM location*20)
00015C30                            								; In this case, VRAM = $7D4*20
00015C30                            
00015C30 363C 00C0                  		move.w	#$C0,d3
00015C34 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
00015C3A 4E75                       		rts
00015C3C                            ; End of function Super_and_Invincibility_Stars
00015C3C                            
00015C3C                            ; ---------------------------------------------------------------------------
00015C3C                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015C3C                            ; ---------------------------------------------------------------------------
00015C3C                            
00015C3C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015C3C                             
00015C3C                            ; sub_164F4:
00015C3C                            DisplaySprite:
00015C3C 43F8 AC00                          lea     (Sprite_Table_Input).w,a1
00015C40 D2E8 0018                          adda.w  priority(a0),a1
00015C44 0C51 007E                          cmpi.w  #$7E,(a1)
00015C48 6400                               bcc.s   return_16510
00015C4A 5451                               addq.w  #2,(a1)
00015C4C D2D1                               adda.w  (a1),a1
00015C4E 3288                               move.w  a0,(a1)
00015C50                             
00015C50                            return_16510:
00015C50 4E75                               rts
00015C52                            ; End of function DisplaySprite
00015C52                             
00015C52                            ; ---------------------------------------------------------------------------
00015C52                            ; Subroutine to display a sprite/object, when a1 is the object RAM
00015C52                            ; ---------------------------------------------------------------------------
00015C52                             
00015C52                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00015C52                             
00015C52                            ; sub_16512:
00015C52                            DisplaySprite2:
00015C52 45F8 AC00                          lea     (Sprite_Table_Input).w,a2
00015C56 D4E9 0018                          adda.w  priority(a1),a2
00015C5A 0C52 007E                          cmpi.w  #$7E,(a2)
00015C5E 6400                               bcc.s   return_1652E
00015C60 5452                               addq.w  #2,(a2)
00015C62 D4D2                               adda.w  (a2),a2
00015C64 3489                               move.w  a1,(a2)
00015C66                             
00015C66                            return_1652E:
00015C66 4E75                               rts
00015C68                            ; End of function DisplaySprite2
00015C68                            
00015C68                            ; -----------------------------------------------------------------------------
00015C68                            ; Subroutine to display a sprite/object, when a0 is the object RAM
00015C68                            ; and d0 is already (priority/2)&$380
00015C68                            ; -----------------------------------------------------------------------------
00015C68                            
00015C68                            ; loc_16530:
00015C68                            DisplaySprite_Param:
00015C68                            DisplaySprite3:
00015C68 43F8 AC00                  	lea	(Sprite_Table_Input).w,a1
00015C6C D2C0                       	adda.w	d0,a1
00015C6E 0C51 007E                  	cmpi.w	#$7E,(a1)
00015C72 6400                       	bcc.s	return_16542
00015C74 5451                       	addq.w	#2,(a1)
00015C76 D2D1                       	adda.w	(a1),a1
00015C78 3288                       	move.w	a0,(a1)
00015C7A                            
00015C7A                            return_16542:
00015C7A 4E75                       	rts
00015C7C                            
00015C7C                            ; ===========================================================================
00015C7C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
00015C80 00FF F700                  		dc.l $FFF700		; main screen x-position
00015C84 00FF F708                  		dc.l $FFF708		; background x-position	1
00015C88 00FF F718                  		dc.l $FFF718		; background x-position	2
00015C8C                            ; ---------------------------------------------------------------------------
00015C8C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
00015C8C                            ; ---------------------------------------------------------------------------
00015C8C                            
00015C8C                            ; =============== S U B	R O U T	I N E =======================================
00015C8C                            
00015C8C                            
00015C8C                            BuildSprites:					  ; ...
00015C8C 45F8 F800                  		lea	($FFFFF800).w,a2
00015C90 7A00                       		moveq	#0,d5
00015C92                            ;		moveq	#0,d4
00015C92                            ;		tst.b	($FFFFF711).w
00015C92                            ;		beq.s	loc_312EA8
00015C92                            ;		jsr	sub_3392AA
00015C92                            ;		bsr.w	sub_3133B4
00015C92                            
00015C92                            ;loc_312EA8:					  ; ...
00015C92 49F8 AC00                  		lea	($FFFFAC00).w,a4
00015C96 7E07                       		moveq	#7,d7
00015C98                            
00015C98                            loc_312EAE:					  ; ...
00015C98 4A54                       		tst.w	(a4)
00015C9A 6700 0000                  		beq.w	loc_312F80
00015C9E 7C02                       		moveq	#2,d6
00015CA0                            
00015CA0                            loc_312EB6:					  ; ...
00015CA0 3074 6000                  		move.w	(a4,d6.w),a0
00015CA4 4A10                       		tst.b	(a0)
00015CA6 6700 0000                  		beq.w	loc_312F78
00015CAA 0228 007F 0001             		and.b	#$7F,1(a0)
00015CB0 1028 0001                  		move.b	1(a0),d0
00015CB4 1800                       		move.b	d0,d4
00015CB6 0C10 0002                  		cmpi.b	#2,(a0)
00015CBA 6D00                       		blt.s	loc_F66A
00015CBC 0800 0006                  		btst	#6,d0
00015CC0 6600 0000                  		bne.w	BuildSprites_MultiDraw
00015CC4                            loc_F66A:				; CODE XREF: BuildSprites+2Ej
00015CC4 0240 000C                  		and.w	#$C,d0
00015CC8 6700                       		beq.s	loc_312F2C
00015CCA 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
00015CCE 7000                       		moveq	#0,d0
00015CD0 1028 0023                  		move.b	width_pixels(a0),d0
00015CD4 3628 0008                  		move.w	8(a0),d3
00015CD8 9651                       		sub.w	(a1),d3
00015CDA 3203                       		move.w	d3,d1
00015CDC D240                       		add.w	d0,d1
00015CDE 6B00 0000                  		bmi.w	loc_312F78
00015CE2 3203                       		move.w	d3,d1
00015CE4 9240                       		sub.w	d0,d1
00015CE6 0C41 0140                  		cmp.w	#$140,d1
00015CEA 6C00 0000                  		bge.w	loc_312F78
00015CEE 0643 0080                  		add.w	#$80,d3
00015CF2 0804 0004                  		btst	#4,d4
00015CF6 6700                       		beq.s	loc_312F36
00015CF8 7000                       		moveq	#0,d0
00015CFA 1028 0016                  		move.b	$16(a0),d0
00015CFE 3428 000C                  		move.w	$C(a0),d2
00015D02 9469 0004                  		sub.w	4(a1),d2
00015D06 3202                       		move.w	d2,d1
00015D08 D240                       		add.w	d0,d1
00015D0A 6B00                       		bmi.s	loc_312F78
00015D0C 3202                       		move.w	d2,d1
00015D0E 9240                       		sub.w	d0,d1
00015D10 0C41 00E0                  		cmp.w	#$E0,d1
00015D14 6C00                       		bge.s	loc_312F78
00015D16 0642 0080                  		add.w	#$80,d2
00015D1A 6000                       		bra.s	loc_312F52
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                            
00015D1C                            loc_312F2C:					  ; ...
00015D1C 3428 000A                  		move.w	$A(a0),d2
00015D20 3628 0008                  		move.w	8(a0),d3
00015D24 6000                       		bra.s	loc_312F52
00015D26                            ; ---------------------------------------------------------------------------
00015D26                            
00015D26                            loc_312F36:					  ; ...
00015D26 3428 000C                  		move.w	$C(a0),d2
00015D2A 9469 0004                  		sub.w	4(a1),d2
00015D2E 0642 0080                  		add.w	#$80,d2
00015D32                            ;		and.w	#$7FF,d2
00015D32 0C42 0060                  		cmp.w	#$60,d2
00015D36 6500                       		bcs.s	loc_312F78
00015D38 0C42 0180                  		cmp.w	#$180,d2
00015D3C 6400                       		bcc.s	loc_312F78
00015D3E                            
00015D3E                            loc_312F52:					  ; ...
00015D3E 2268 0004                  		movea.l	4(a0),a1
00015D42 7200                       		moveq	#0,d1
00015D44 0804 0005                  		btst	#5,d4
00015D48 6600                       		bne.s	loc_312F6E
00015D4A 1228 001A                  		move.b	$1A(a0),d1
00015D4E D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
00015D50 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015D54 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
00015D56 1219                       		move.b	(a1)+,d1
00015D58 5341                       		subq.w	#1,d1
00015D5A 6B00                       		bmi.s	loc_312F72
00015D5C                            
00015D5C                            loc_312F6E:					  ; ...
00015D5C 6100 0000                  		bsr.w	sub_D750
00015D60                            
00015D60                            loc_312F72:					  ; ...
00015D60 0028 0080 0001             		or.b	#$80,1(a0)
00015D66                            
00015D66                            loc_312F78:					  ; ...
00015D66                            loc_D726:
00015D66 5446                       		addq.w	#2,d6
00015D68 5554                       		subq.w	#2,(a4)
00015D6A 6600 FF34                  		bne.w	loc_312EB6
00015D6E                            
00015D6E                            loc_312F80:					  ; ...
00015D6E 49EC 0080                  		lea	$80(a4),a4
00015D72 51CF FF24                  		dbf	d7,loc_312EAE
00015D76 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00015D7A 0C05 0050                  		cmp.b	#$50,d5
00015D7E 6700                       		beq.s	loc_312F9A
00015D80 24BC 0000 0000             		move.l	#0,(a2)
00015D86 4E75                       		rts
00015D88                            ; ---------------------------------------------------------------------------
00015D88                            
00015D88                            loc_312F9A:					  ; ...
00015D88 157C 0000 FFFB             		move.b	#0,-5(a2)
00015D8E 4E75                       		rts
00015D90                            ; ---------------------------------------------------------------------------
00015D90                            
00015D90                            BuildSprites_MultiDraw:
00015D90 2F0C                       		move.l	a4,-(sp)
00015D92 49F8 F700                  		lea	($FFFFF700).w,a4
00015D96 3668 0002                  		movea.w	2(a0),a3
00015D9A 2A68 0004                  		movea.l	4(a0),a5
00015D9E 7000                       		moveq	#0,d0
00015DA0 1028 000E                  		move.b	$E(a0),d0
00015DA4 3628 0008                  		move.w	8(a0),d3
00015DA8 9654                       		sub.w	(a4),d3
00015DAA 3203                       		move.w	d3,d1
00015DAC D240                       		add.w	d0,d1
00015DAE 6B00 0000                  		bmi.w	BuildSprites_MultiDraw_NextObj
00015DB2 3203                       		move.w	d3,d1
00015DB4 9240                       		sub.w	d0,d1
00015DB6 0C41 0140                  		cmpi.w	#$140,d1
00015DBA 6C00 0000                  		bge.w	BuildSprites_MultiDraw_NextObj
00015DBE 0643 0080                  		addi.w	#$80,d3	; '?'
00015DC2 0804 0004                  		btst	#4,d4
00015DC6 6700                       		beq.s	loc_F794
00015DC8 7000                       		moveq	#0,d0
00015DCA 1028 0014                  		move.b	$14(a0),d0
00015DCE 3428 000C                  		move.w	$C(a0),d2
00015DD2 946C 0004                  		sub.w	4(a4),d2
00015DD6 3202                       		move.w	d2,d1
00015DD8 D240                       		add.w	d0,d1
00015DDA 6B00 0000                  		bmi.w	BuildSprites_MultiDraw_NextObj
00015DDE 3202                       		move.w	d2,d1
00015DE0 9240                       		sub.w	d0,d1
00015DE2 0C41 00E0                  		cmpi.w	#$E0,d1	; 'a'
00015DE6 6C00 0000                  		bge.w	BuildSprites_MultiDraw_NextObj
00015DEA 0642 0080                  		addi.w	#$80,d2	; '?'
00015DEE 6000                       		bra.s	loc_F7B0
00015DF0                            ; ---------------------------------------------------------------------------
00015DF0                            
00015DF0                            loc_F794:				; CODE XREF: BuildSprites+138j
00015DF0 3428 000C                  		move.w	$C(a0),d2
00015DF4 946C 0004                  		sub.w	4(a4),d2
00015DF8 0642 0080                  		addi.w	#$80,d2	; '?'
00015DFC 0242 07FF                  		andi.w	#$7FF,d2
00015E00 0C42 0060                  		cmpi.w	#$60,d2	; '`'
00015E04 6500                       		bcs.s	BuildSprites_MultiDraw_NextObj
00015E06 0C42 0180                  		cmpi.w	#$180,d2
00015E0A 6400                       		bcc.s	BuildSprites_MultiDraw_NextObj
00015E0C                            
00015E0C                            loc_F7B0:				; CODE XREF: BuildSprites+160j
00015E0C 7200                       		moveq	#0,d1
00015E0E 1228 000B                  		move.b	$B(a0),d1
00015E12 6700                       		beq.s	loc_F7CE
00015E14 D241                       		add.w	d1,d1
00015E16 224D                       		movea.l	a5,a1
00015E18 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015E1C 3219                       		move.w	(a1)+,d1
00015E1E 5341                       		subq.w	#1,d1
00015E20 6B00                       		bmi.s	loc_F7CE
00015E22 3F04                       		move.w	d4,-(sp)
00015E24 6100 0000                  		bsr.w	ChkDrawSprite
00015E28 381F                       		move.w	(sp)+,d4
00015E2A                            
00015E2A                            loc_F7CE:				; CODE XREF: BuildSprites+184j
00015E2A                            					; BuildSprites+192j
00015E2A 0028 0080 0001             		ori.b	#$80,1(a0)
00015E30 4DE8 0010                  		lea	$10(a0),a6
00015E34 7000                       		moveq	#0,d0
00015E36 1028 000F                  		move.b	$F(a0),d0
00015E3A 5340                       		subq.w	#1,d0
00015E3C 6500                       		bcs.s	BuildSprites_MultiDraw_NextObj
00015E3E                            
00015E3E                            loc_F7E2:				; CODE XREF: BuildSprites+1E6j
00015E3E 4840                       		swap	d0
00015E40 361E                       		move.w	(a6)+,d3
00015E42 9654                       		sub.w	(a4),d3
00015E44 0643 0080                  		addi.w	#$80,d3	; '?'
00015E48 341E                       		move.w	(a6)+,d2
00015E4A 946C 0004                  		sub.w	4(a4),d2
00015E4E 0642 0080                  		addi.w	#$80,d2	; '?'
00015E52 0242 07FF                  		andi.w	#$7FF,d2
00015E56 524E                       		addq.w	#1,a6
00015E58 7200                       		moveq	#0,d1
00015E5A 121E                       		move.b	(a6)+,d1
00015E5C D241                       		add.w	d1,d1
00015E5E 224D                       		movea.l	a5,a1
00015E60 D2F1 1000                  		adda.w	(a1,d1.w),a1
00015E64 1219                       		move.b	(a1)+,d1
00015E66 5301                       		subq.b	#1,d1
00015E68 6B00                       		bmi.s	loc_F816
00015E6A 3F04                       		move.w	d4,-(sp)
00015E6C 6100 0000                  		bsr.w	ChkDrawSprite
00015E70 381F                       		move.w	(sp)+,d4
00015E72                            
00015E72                            loc_F816:				; CODE XREF: BuildSprites+1DAj
00015E72 4840                       		swap	d0
00015E74 51C8 FFC8                  		dbf	d0,loc_F7E2
00015E78                            
00015E78                            BuildSprites_MultiDraw_NextObj:				; CODE XREF: BuildSprites+120j
00015E78                            					; BuildSprites+12Cj ...
00015E78 285F                       		movea.l	(sp)+,a4
00015E7A 6000 FEEA                  		bra.w	loc_D726
00015E7E                            ; End of function BuildSprites
00015E7E                            
00015E7E                            
00015E7E                            ; =============== S U B	R O U T	I N E =======================================
00015E7E                            
00015E7E                            
00015E7E                            ChkDrawSprite:				; CODE XREF: BuildSprites+196p
00015E7E                            					; BuildSprites+1DEp
00015E7E 0C05 0050                  		cmpi.b	#$50,d5	; 'P'
00015E82 6500                       		bcs.s	DrawSprite_Cont
00015E84 4E75                       		rts
00015E86                            ; End of function ChkDrawSprite
00015E86                            
00015E86                            
00015E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E86                            
00015E86                            
00015E86                            sub_D750:				; XREF: BuildSprites
00015E86 3668 0002                  		movea.w	2(a0),a3
00015E8A                            ; loc_1681C:
00015E8A                            DrawSprite_Cont:
00015E8A 0804 0000                  		btst	#0,d4
00015E8E 6600                       		bne.s	loc_D796
00015E90 0804 0001                  		btst	#1,d4
00015E94 6600 0000                  		bne.w	loc_D7E4
00015E98                            ; End of function sub_D750
00015E98                            
00015E98                            
00015E98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E98                            
00015E98                            
00015E98                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
00015E98 0C05 0050                  		cmpi.b	#$50,d5
00015E9C 6700                       		beq.s	locret_D794
00015E9E                            sub_D762_2:
00015E9E 1019                       		move.b	(a1)+,d0
00015EA0 4880                       		ext.w	d0
00015EA2 D042                       		add.w	d2,d0
00015EA4 34C0                       		move.w	d0,(a2)+
00015EA6 14D9                       		move.b	(a1)+,(a2)+
00015EA8 5205                       		addq.b	#1,d5
00015EAA 14C5                       		move.b	d5,(a2)+
00015EAC 1019                       		move.b	(a1)+,d0
00015EAE E148                       		lsl.w	#8,d0
00015EB0 1019                       		move.b	(a1)+,d0
00015EB2 D04B                       		add.w	a3,d0
00015EB4 34C0                       		move.w	d0,(a2)+
00015EB6 1019                       		move.b	(a1)+,d0
00015EB8 4880                       		ext.w	d0
00015EBA D043                       		add.w	d3,d0
00015EBC 0240 01FF                  		andi.w	#$1FF,d0
00015EC0 6600                       		bne.s	loc_D78E
00015EC2 5240                       		addq.w	#1,d0
00015EC4                            
00015EC4                            loc_D78E:
00015EC4 34C0                       		move.w	d0,(a2)+
00015EC6 51C9 FFD0                  		dbf	d1,sub_D762
00015ECA                            
00015ECA                            locret_D794:
00015ECA 4E75                       		rts	
00015ECC                            ; End of function sub_D762
00015ECC                            
00015ECC                            ; ===========================================================================
00015ECC                            
00015ECC                            loc_D796:
00015ECC 0804 0001                  		btst	#1,d4
00015ED0 6600 0000                  		bne.w	loc_D82A
00015ED4                            
00015ED4                            loc_D79E:
00015ED4 0C05 0050                  		cmpi.b	#$50,d5
00015ED8 6700                       		beq.s	locret_D7E2
00015EDA 1019                       		move.b	(a1)+,d0
00015EDC 4880                       		ext.w	d0
00015EDE D042                       		add.w	d2,d0
00015EE0 34C0                       		move.w	d0,(a2)+
00015EE2 1819                       		move.b	(a1)+,d4
00015EE4 14C4                       		move.b	d4,(a2)+
00015EE6 5205                       		addq.b	#1,d5
00015EE8 14C5                       		move.b	d5,(a2)+
00015EEA 1019                       		move.b	(a1)+,d0
00015EEC E148                       		lsl.w	#8,d0
00015EEE 1019                       		move.b	(a1)+,d0
00015EF0 D04B                       		add.w	a3,d0
00015EF2 0A40 0800                  		eori.w	#$800,d0
00015EF6 34C0                       		move.w	d0,(a2)+
00015EF8 1019                       		move.b	(a1)+,d0
00015EFA 4880                       		ext.w	d0
00015EFC 4440                       		neg.w	d0
00015EFE D804                       		add.b	d4,d4
00015F00 0244 0018                  		andi.w	#$18,d4
00015F04 5044                       		addq.w	#8,d4
00015F06 9044                       		sub.w	d4,d0
00015F08 D043                       		add.w	d3,d0
00015F0A 0240 01FF                  		andi.w	#$1FF,d0
00015F0E 6600                       		bne.s	loc_D7DC
00015F10 5240                       		addq.w	#1,d0
00015F12                            
00015F12                            loc_D7DC:
00015F12 34C0                       		move.w	d0,(a2)+
00015F14 51C9 FFBE                  		dbf	d1,loc_D79E
00015F18                            
00015F18                            locret_D7E2:
00015F18 4E75                       		rts	
00015F1A                            ; ===========================================================================
00015F1A                            
00015F1A                            loc_D7E4:				; XREF: sub_D750
00015F1A 0C05 0050                  		cmpi.b	#$50,d5
00015F1E 6700                       		beq.s	locret_D828
00015F20 1019                       		move.b	(a1)+,d0
00015F22 1811                       		move.b	(a1),d4
00015F24 4880                       		ext.w	d0
00015F26 4440                       		neg.w	d0
00015F28 E70C                       		lsl.b	#3,d4
00015F2A 0244 0018                  		andi.w	#$18,d4
00015F2E 5044                       		addq.w	#8,d4
00015F30 9044                       		sub.w	d4,d0
00015F32 D042                       		add.w	d2,d0
00015F34 34C0                       		move.w	d0,(a2)+
00015F36 14D9                       		move.b	(a1)+,(a2)+
00015F38 5205                       		addq.b	#1,d5
00015F3A 14C5                       		move.b	d5,(a2)+
00015F3C 1019                       		move.b	(a1)+,d0
00015F3E E148                       		lsl.w	#8,d0
00015F40 1019                       		move.b	(a1)+,d0
00015F42 D04B                       		add.w	a3,d0
00015F44 0A40 1000                  		eori.w	#$1000,d0
00015F48 34C0                       		move.w	d0,(a2)+
00015F4A 1019                       		move.b	(a1)+,d0
00015F4C 4880                       		ext.w	d0
00015F4E D043                       		add.w	d3,d0
00015F50 0240 01FF                  		andi.w	#$1FF,d0
00015F54 6600                       		bne.s	loc_D822
00015F56 5240                       		addq.w	#1,d0
00015F58                            
00015F58                            loc_D822:
00015F58 34C0                       		move.w	d0,(a2)+
00015F5A 51C9 FFBE                  		dbf	d1,loc_D7E4
00015F5E                            
00015F5E                            locret_D828:
00015F5E 4E75                       		rts	
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            loc_D82A:
00015F60 0C05 0050                  		cmpi.b	#$50,d5
00015F64 6700                       		beq.s	locret_D87C
00015F66 1019                       		move.b	(a1)+,d0
00015F68 1811                       		move.b	(a1),d4
00015F6A 4880                       		ext.w	d0
00015F6C 4440                       		neg.w	d0
00015F6E E70C                       		lsl.b	#3,d4
00015F70 0244 0018                  		andi.w	#$18,d4
00015F74 5044                       		addq.w	#8,d4
00015F76 9044                       		sub.w	d4,d0
00015F78 D042                       		add.w	d2,d0
00015F7A 34C0                       		move.w	d0,(a2)+
00015F7C 1819                       		move.b	(a1)+,d4
00015F7E 14C4                       		move.b	d4,(a2)+
00015F80 5205                       		addq.b	#1,d5
00015F82 14C5                       		move.b	d5,(a2)+
00015F84 1019                       		move.b	(a1)+,d0
00015F86 E148                       		lsl.w	#8,d0
00015F88 1019                       		move.b	(a1)+,d0
00015F8A D04B                       		add.w	a3,d0
00015F8C 0A40 1800                  		eori.w	#$1800,d0
00015F90 34C0                       		move.w	d0,(a2)+
00015F92 1019                       		move.b	(a1)+,d0
00015F94 4880                       		ext.w	d0
00015F96 4440                       		neg.w	d0
00015F98 D804                       		add.b	d4,d4
00015F9A 0244 0018                  		andi.w	#$18,d4
00015F9E 5044                       		addq.w	#8,d4
00015FA0 9044                       		sub.w	d4,d0
00015FA2 D043                       		add.w	d3,d0
00015FA4 0240 01FF                  		andi.w	#$1FF,d0
00015FA8 6600                       		bne.s	loc_D876
00015FAA 5240                       		addq.w	#1,d0
00015FAC                            
00015FAC                            loc_D876:
00015FAC 34C0                       		move.w	d0,(a2)+
00015FAE 51C9 FFB0                  		dbf	d1,loc_D82A
00015FB2                            
00015FB2                            locret_D87C:
00015FB2 4E75                       		rts	
00015FB4                            
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            ; Subroutine to	check if an object is on the screen
00015FB4                            ; ---------------------------------------------------------------------------
00015FB4                            
00015FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FB4                            
00015FB4                            
00015FB4                            ChkObjOnScreen:
00015FB4 3028 0008                  		move.w	8(a0),d0	; get object x-position
00015FB8 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
00015FBC 6B00                       		bmi.s	NotOnScreen
00015FBE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
00015FC2 6C00                       		bge.s	NotOnScreen	; if not, branch
00015FC4                            
00015FC4 3228 000C                  		move.w	$C(a0),d1	; get object y-position
00015FC8 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
00015FCC 6B00                       		bmi.s	NotOnScreen
00015FCE 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
00015FD2 6C00                       		bge.s	NotOnScreen	; if not, branch
00015FD4                            
00015FD4 7000                       		moveq	#0,d0		; set flag to 0
00015FD6 4E75                       		rts	
00015FD8                            ; ===========================================================================
00015FD8                            
00015FD8                            NotOnScreen:				; XREF: ChkObjOnScreen
00015FD8 7001                       		moveq	#1,d0		; set flag to 1
00015FDA 4E75                       		rts	
00015FDC                            ; End of function ChkObjOnScreen
00015FDC                            
00015FDC                            
00015FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FDC                            
00015FDC                            
00015FDC                            ChkObjOnScreen2:
00015FDC 7200                       		moveq	#0,d1
00015FDE 1228 0023                  		move.b	width_pixels(a0),d1
00015FE2 3028 0008                  		move.w	8(a0),d0
00015FE6 9078 F700                  		sub.w	($FFFFF700).w,d0
00015FEA D041                       		add.w	d1,d0
00015FEC 6B00                       		bmi.s	NotOnScreen2
00015FEE D241                       		add.w	d1,d1
00015FF0 9041                       		sub.w	d1,d0
00015FF2 0C40 0140                  		cmpi.w	#320,d0
00015FF6 6C00                       		bge.s	NotOnScreen2
00015FF8                            
00015FF8 3228 000C                  		move.w	$C(a0),d1
00015FFC 9278 F704                  		sub.w	($FFFFF704).w,d1
00016000 6B00                       		bmi.s	NotOnScreen2
00016002 0C41 00E0                  		cmpi.w	#224,d1
00016006 6C00                       		bge.s	NotOnScreen2
00016008                            
00016008 7000                       		moveq	#0,d0
0001600A 4E75                       		rts	
0001600C                            ; ===========================================================================
0001600C                            
0001600C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0001600C 7001                       		moveq	#1,d0
0001600E 4E75                       		rts	
00016010                            ; End of function ChkObjOnScreen2
00016010                            
00016010                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00016010                            
00016010                            
00016010                            JmpTo_loc_40804
00016010 4EF9 0000 0000             	jmp	loc_40804
00016016                            ; ===========================================================================
00016016                            
00016016                            ;JmpTo_loc_4085A
00016016                            ;	jmp	loc_4085A
00016016                            ; ===========================================================================
00016016                            
00016016                            ;JmpTo_loc_409C6
00016016                            ;	jmp	loc_409C6
00016016                            ; ===========================================================================
00016016                            
00016016                            ; =============== S U B	R O U T	I N E =======================================
00016016                            
00016016                            
00016016                            RingsManager:					  ; ...
00016016 7000                       		moveq	#0,d0
00016018 1038 FFCE                  		move.b	($FFFFFFCE).w,d0
0001601C 303B 0000                  		move.w	off_31323A(pc,d0.w),d0
00016020 4EFB 0000                  		jmp	off_31323A(pc,d0.w)
00016024                            ; End of function RingsManager
00016024                            
00016024                            ; ---------------------------------------------------------------------------
00016024 0000 0000                  off_31323A:	dc.w loc_31323E-off_31323A,loc_313282-off_31323A; 0 ; ...
00016028                            ; ---------------------------------------------------------------------------
00016028                            
00016028                            loc_31323E:					  ; ...
00016028 5438 FFCE                  		addq.b	#2,($FFFFFFCE).w
0001602C 6100 0000                  		bsr.w	sub_313432
00016030 43F8 CF80                  		lea	($FFFFCF80).w,a1
00016034 3838 F700                  		move.w	($FFFFF700).w,d4
00016038 5144                       		subq.w	#8,d4
0001603A 6200                       		bhi.s	loc_31325A
0001603C 7801                       		moveq	#1,d4
0001603E 6000                       		bra.s	loc_31325A
00016040                            ; ---------------------------------------------------------------------------
00016040                            
00016040                            loc_313256:					  ; ...
00016040 43E9 0006                  		lea	6(a1),a1
00016044                            
00016044                            loc_31325A:					  ; ...
00016044 B869 0002                  		cmp.w	2(a1),d4
00016048 62F6                       		bhi.s	loc_313256
0001604A 31C9 CF92                  		move.w	a1,($FFFFCF92).w
0001604E 31C9 CF96                  		move.w	a1,($FFFFCF96).w
00016052 0644 0150                  		add.w	#$150,d4
00016056 6000                       		bra.s	loc_313272
00016058                            ; ---------------------------------------------------------------------------
00016058                            
00016058                            loc_31326E:					  ; ...
00016058 43E9 0006                  		lea	6(a1),a1
0001605C                            
0001605C                            loc_313272:					  ; ...
0001605C B869 0002                  		cmp.w	2(a1),d4
00016060 62F6                       		bhi.s	loc_31326E
00016062 31C9 CF94                  		move.w	a1,($FFFFCF94).w
00016066 31C9 CF98                  		move.w	a1,($FFFFCF98).w
0001606A 11FC 0001 CFCC             		move.b	#1,($FFFFCFCC).w
00016070 4E75                       		rts
00016072                            ; ---------------------------------------------------------------------------
00016072                            
00016072                            loc_313282:					  ; ...
00016072 45F8 CFB0                  		lea	($FFFFCFB0).w,a2
00016076 321A                       		move.w	(a2)+,d1
00016078 5341                       		subq.w	#1,d1
0001607A 6500                       		bcs.s	loc_3132B8
0001607C                            
0001607C                            loc_31328C:					  ; ...
0001607C 301A                       		move.w	(a2)+,d0
0001607E 67FC                       		beq.s	loc_31328C
00016080 3240                       		move.w	d0,a1
00016082 5311                       		subq.b	#1,(a1)
00016084 6600                       		bne.s	loc_3132B4
00016086 12BC 0006                  		move.b	#6,(a1)
0001608A 5229 0001                  		addq.b	#1,1(a1)
0001608E 0C29 0008 0001             		cmp.b	#8,1(a1)
00016094 6600                       		bne.s	loc_3132B4
00016096 32BC FFFF                  		move.w	#$FFFF,(a1)
0001609A 357C 0000 FFFE             		move.w	#0,-2(a2)
000160A0 5378 CFB0                  		subq.w	#1,($FFFFCFB0).w
000160A4                            
000160A4                            loc_3132B4:					  ; ...
000160A4 51C9 FFD6                  		dbf	d1,loc_31328C
000160A8                            
000160A8                            loc_3132B8:					  ; ...
000160A8 3278 CF92                  		move.w	($FFFFCF92).w,a1
000160AC 3838 F700                  		move.w	($FFFFF700).w,d4
000160B0 5144                       		subq.w	#8,d4
000160B2 6200                       		bhi.s	loc_3132CC
000160B4 7801                       		moveq	#1,d4
000160B6 6000                       		bra.s	loc_3132CC
000160B8                            ; ---------------------------------------------------------------------------
000160B8                            
000160B8                            loc_3132C8:					  ; ...
000160B8 43E9 0006                  		lea	6(a1),a1
000160BC                            
000160BC                            loc_3132CC:					  ; ...
000160BC B869 0002                  		cmp.w	2(a1),d4
000160C0 62F6                       		bhi.s	loc_3132C8
000160C2 6000                       		bra.s	loc_3132D6
000160C4                            ; ---------------------------------------------------------------------------
000160C4                            
000160C4                            loc_3132D4:					  ; ...
000160C4 5D49                       		subq.w	#6,a1
000160C6                            
000160C6                            loc_3132D6:					  ; ...
000160C6 B869 FFFC                  		cmp.w	-4(a1),d4
000160CA 63F8                       		bls.s	loc_3132D4
000160CC 31C9 CF92                  		move.w	a1,($FFFFCF92).w
000160D0 3478 CF94                  		move.w	($FFFFCF94).w,a2
000160D4 0644 0150                  		add.w	#$150,d4
000160D8 6000                       		bra.s	loc_3132EE
000160DA                            ; ---------------------------------------------------------------------------
000160DA                            
000160DA                            loc_3132EA:					  ; ...
000160DA 45EA 0006                  		lea	6(a2),a2
000160DE                            
000160DE                            loc_3132EE:					  ; ...
000160DE B86A 0002                  		cmp.w	2(a2),d4
000160E2 62F6                       		bhi.s	loc_3132EA
000160E4 6000                       		bra.s	loc_3132F8
000160E6                            ; ---------------------------------------------------------------------------
000160E6                            
000160E6                            loc_3132F6:					  ; ...
000160E6 5D4A                       		subq.w	#6,a2
000160E8                            
000160E8                            loc_3132F8:					  ; ...
000160E8 B86A FFFC                  		cmp.w	-4(a2),d4
000160EC 63F8                       		bls.s	loc_3132F6
000160EE 31CA CF94                  		move.w	a2,($FFFFCF94).w
000160F2 31C9 CF96                  		move.w	a1,($FFFFCF96).w
000160F6 31CA CF98                  		move.w	a2,($FFFFCF98).w
000160FA 4E75                       		rts
000160FC                            
000160FC                            ; =============== S U B	R O U T	I N E =======================================
000160FC                            
000160FC                            
000160FC                            sub_31330C:					  ; ...
000160FC 3278 CF92                  		move.w	($FFFFCF92).w,a1
00016100 3478 CF94                  		move.w	($FFFFCF94).w,a2
00016104 B5C9                       		cmp.l	a1,a2
00016106 6700 0000                  		beq.w	return_3133AA
0001610A 0C68 005A 0030             		cmp.w	#$5A,$30(a0)
00016110 6400 0000                  		bcc.w	return_3133AA
00016114 3428 0008                  		move.w	8(a0),d2
00016118 3628 000C                  		move.w	$C(a0),d3
0001611C 5142                       		sub.w	#8,d2
0001611E 7A00                       		moveq	#0,d5
00016120 1A28 0016                  		move.b	$16(a0),d5
00016124 5705                       		subq.b	#3,d5
00016126 9645                       		sub.w	d5,d3
00016128 0C28 009C 001A             		cmp.b	#$9C,$1A(a0)
0001612E 6600                       		bne.s	loc_313348
00016130 0643 000C                  		add.w	#$C,d3
00016134 7A0A                       		moveq	#$A,d5
00016136                            
00016136                            loc_313348:					  ; ...
00016136 323C 0006                  		move.w	#6,d1
0001613A 3C3C 000C                  		move.w	#$C,d6
0001613E 383C 0010                  		move.w	#$10,d4
00016142 DA45                       		add.w	d5,d5
00016144                            
00016144                            loc_313356:					  ; ...
00016144 4A51                       		tst.w	(a1)
00016146 6600 0000                  		bne.w	loc_3133A0
0001614A 3029 0002                  		move.w	2(a1),d0
0001614E 9041                       		sub.w	d1,d0
00016150 9042                       		sub.w	d2,d0
00016152 6400                       		bcc.s	loc_31336E
00016154 D046                       		add.w	d6,d0
00016156 6500                       		bcs.s	loc_313374
00016158 6000 0000                  		bra.w	loc_3133A0
0001615C                            ; ---------------------------------------------------------------------------
0001615C                            
0001615C                            loc_31336E:					  ; ...
0001615C B044                       		cmp.w	d4,d0
0001615E 6200 0000                  		bhi.w	loc_3133A0
00016162                            
00016162                            loc_313374:					  ; ...
00016162 3029 0004                  		move.w	4(a1),d0
00016166 9041                       		sub.w	d1,d0
00016168 9043                       		sub.w	d3,d0
0001616A 6400                       		bcc.s	loc_313386
0001616C D046                       		add.w	d6,d0
0001616E 6500                       		bcs.s	loc_31338C
00016170 6000 0000                  		bra.w	loc_3133A0
00016174                            ; ---------------------------------------------------------------------------
00016174                            
00016174                            loc_313386:					  ; ...
00016174 B045                       		cmp.w	d5,d0
00016176 6200 0000                  		bhi.w	loc_3133A0
0001617A                            
0001617A                            loc_31338C:					  ; ...
0001617A 32BC 0604                  		move.w	#$604,(a1)
0001617E 6100                       		bsr.s	sub_3133AC
00016180 47F8 CFB2                  		lea	($FFFFCFB2).w,a3
00016184                            
00016184                            loc_313396:					  ; ...
00016184 4A5B                       		tst.w	(a3)+
00016186 66FC                       		bne.s	loc_313396
00016188 3709                       		move.w	a1,-(a3)
0001618A 5278 CFB0                  		addq.w	#1,($FFFFCFB0).w
0001618E                            
0001618E                            loc_3133A0:					  ; ...
0001618E 43E9 0006                  		lea	6(a1),a1
00016192 B5C9                       		cmp.l	a1,a2
00016194 6600 FFAE                  		bne.w	loc_313356
00016198                            
00016198                            return_3133AA:					  ; ...
00016198 4E75                       		rts
0001619A                            ; End of function sub_31330C
0001619A                            
0001619A                            
0001619A                            ; =============== S U B	R O U T	I N E =======================================
0001619A                            
0001619A                            
0001619A                            sub_3133AC:					  ; ...
0001619A 5378 CFA0                  		subq.w	#1,($FFFFCFA0).w
0001619E 6000 B786                  		bra.w	CollectRing
000161A2                            ; End of function sub_3133AC
000161A2                            
000161A2                            
000161A2                            ; =============== S U B	R O U T	I N E =======================================
000161A2                            
000161A2                            
000161A2                            sub_3133B4:					  ; ...
000161A2 3078 CF92                  		move.w	($FFFFCF92).w,a0
000161A6 3878 CF94                  		move.w	($FFFFCF94).w,a4
000161AA B9C8                       		cmp.l	a0,a4
000161AC 6600                       		bne.s	loc_3133C2
000161AE 4E75                       		rts
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            
000161B0                            loc_3133C2:					  ; ...
000161B0 47F8 F700                  		lea	($FFFFF700).w,a3
000161B4                            
000161B4                            loc_3133C6:					  ; ...
000161B4 4A50                       		tst.w	(a0)
000161B6 6B00 0000                  		bmi.w	loc_313426
000161BA 3628 0002                  		move.w	2(a0),d3
000161BE 9653                       		sub.w	(a3),d3
000161C0 0643 0080                  		add.w	#$80,d3
000161C4 3428 0004                  		move.w	4(a0),d2
000161C8 946B 0004                  		sub.w	4(a3),d2
000161CC 0242 07FF                  		and.w	#$7FF,d2
000161D0 5042                       		add.w	#8,d2
000161D2 6B00                       		bmi.s	loc_313426
000161D4 0C42 00F0                  		cmp.w	#$F0,d2
000161D8 6C00                       		bge.s	loc_313426
000161DA 0642 0078                  		add.w	#$78,d2
000161DE 43F9 0000 0000             		lea	(word_3134F8).l,a1
000161E4 7200                       		moveq	#0,d1
000161E6 1228 0001                  		move.b	1(a0),d1
000161EA 6600                       		bne.s	loc_313404
000161EC 1238 FEC3                  		move.b	($FFFFFEC3).w,d1
000161F0                            
000161F0                            loc_313404:					  ; ...
000161F0 D241                       		add.w	d1,d1
000161F2 D2F1 1000                  		add.w	(a1,d1.w),a1
000161F6 1019                       		move.b	(a1)+,d0
000161F8 4880                       		ext.w	d0
000161FA D042                       		add.w	d2,d0
000161FC 34C0                       		move.w	d0,(a2)+
000161FE 14D9                       		move.b	(a1)+,(a2)+
00016200 5205                       		addq.b	#1,d5
00016202 14C5                       		move.b	d5,(a2)+
00016204 3019                       		move.w	(a1)+,d0
00016206 0640 27B2                  		add.w	#$27B2,d0
0001620A 34C0                       		move.w	d0,(a2)+
0001620C 3019                       		move.w	(a1)+,d0
0001620E D043                       		add.w	d3,d0
00016210 34C0                       		move.w	d0,(a2)+
00016212                            
00016212                            loc_313426:					  ; ...
00016212 41E8 0006                  		lea	6(a0),a0
00016216 B9C8                       		cmp.l	a0,a4
00016218 6600 FF9A                  		bne.w	loc_3133C6
0001621C 4E75                       		rts
0001621E                            ; End of function sub_3133B4
0001621E                            
0001621E                            
0001621E                            ; =============== S U B	R O U T	I N E =======================================
0001621E                            
0001621E                            
0001621E                            sub_313432:					  ; ...
0001621E 43F8 CF80                  		lea	($FFFFCF80).w,a1
00016222 7000                       		moveq	#0,d0
00016224 323C 017F                  		move.w	#$17F,d1
00016228                            
00016228                            loc_31343C:					  ; ...
00016228 22C0                       		move.l	d0,(a1)+
0001622A 51C9 FFFC                  		dbf	d1,loc_31343C
0001622E 43F8 CFB0                  		lea	($FFFFCFB0).w,a1
00016232 323C 000F                  		move.w	#$F,d1
00016236                            
00016236                            loc_31344A:					  ; ...
00016236 22C0                       		move.l	d0,(a1)+
00016238 51C9 FFFC                  		dbf	d1,loc_31344A
0001623C 7A00                       		moveq	#0,d5
0001623E 7000                       		moveq	#0,d0
00016240 3038 FE10                  		move.w	($FFFFFE10).w,d0
00016244 ED08                       		lsl.b	#6,d0
00016246 EA48                       		lsr.w	#5,d0
00016248 43F9 0000 0000             		lea	(Off_Rings).l,a1
0001624E 3031 0000                  		move.w	(a1,d0.w),d0
00016252 43F1 0000                  		lea	(a1,d0.w),a1
00016256 45F8 CF86                  		lea	($FFFFCF86).w,a2
0001625A                            
0001625A                            loc_31346E:					  ; ...
0001625A 3419                       		move.w	(a1)+,d2
0001625C 6B00                       		bmi.s	loc_3134B6
0001625E 3619                       		move.w	(a1)+,d3
00016260 6B00                       		bmi.s	loc_313496
00016262 3003                       		move.w	d3,d0
00016264 E958                       		rol.w	#4,d0
00016266 0240 0007                  		and.w	#7,d0
0001626A 0243 0FFF                  		and.w	#$FFF,d3
0001626E                            
0001626E                            loc_313482:					  ; ...
0001626E 34FC 0000                  		move.w	#0,(a2)+
00016272 34C2                       		move.w	d2,(a2)+
00016274 34C3                       		move.w	d3,(a2)+
00016276 0642 0018                  		add.w	#$18,d2
0001627A 5245                       		addq.w	#1,d5
0001627C 51C8 FFF0                  		dbf	d0,loc_313482
00016280 60D8                       		bra.s	loc_31346E
00016282                            ; ---------------------------------------------------------------------------
00016282                            
00016282                            loc_313496:					  ; ...
00016282 3003                       		move.w	d3,d0
00016284 E958                       		rol.w	#4,d0
00016286 0240 0007                  		and.w	#7,d0
0001628A 0243 0FFF                  		and.w	#$FFF,d3
0001628E                            
0001628E                            loc_3134A2:					  ; ...
0001628E 34FC 0000                  		move.w	#0,(a2)+
00016292 34C2                       		move.w	d2,(a2)+
00016294 34C3                       		move.w	d3,(a2)+
00016296 0643 0018                  		add.w	#$18,d3
0001629A 5245                       		addq.w	#1,d5
0001629C 51C8 FFF0                  		dbf	d0,loc_3134A2
000162A0 60B8                       		bra.s	loc_31346E
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            
000162A2                            loc_3134B6:					  ; ...
000162A2 31C5 FF40                  		move.w	d5,($FFFFFF40).w
000162A6 31FC 0000 FF42             		move.w	#0,($FFFFFF42).w
000162AC 70FF                       		moveq	#$FFFFFFFF,d0
000162AE 24C0                       		move.l	d0,(a2)+
000162B0 43F8 CF82                  		lea	($FFFFCF82).w,a1
000162B4 363C 00FE                  		move.w	#$FE,d3
000162B8                            
000162B8                            loc_3134CC:					  ; ...
000162B8 3803                       		move.w	d3,d4
000162BA 45E9 0006                  		lea	6(a1),a2
000162BE 3011                       		move.w	(a1),d0
000162C0                            
000162C0                            loc_3134D4:					  ; ...
000162C0 4A52                       		tst.w	(a2)
000162C2 6700                       		beq.s	loc_3134E6
000162C4 B052                       		cmp.w	(a2),d0
000162C6 6300                       		bls.s	loc_3134E6
000162C8 2211                       		move.l	(a1),d1
000162CA 2012                       		move.l	(a2),d0
000162CC 2280                       		move.l	d0,(a1)
000162CE 2481                       		move.l	d1,(a2)
000162D0 4840                       		swap	d0
000162D2                            
000162D2                            loc_3134E6:					  ; ...
000162D2 45EA 0006                  		lea	6(a2),a2
000162D6 51CC FFE8                  		dbf	d4,loc_3134D4
000162DA 43E9 0006                  		lea	6(a1),a1
000162DE 51CB FFD8                  		dbf	d3,loc_3134CC
000162E2 4E75                       		rts
000162E4                            ; End of function sub_313432
000162E4                            
000162E4                            ; ---------------------------------------------------------------------------
000162E4 0010 0016 001C 0022 0028   word_3134F8:	dc.w	$10,   $16,   $1C,   $22,   $28; 0 ; ...
000162EE 002E 0034 003A F805 0000   		dc.w	$2E,   $34,   $3A, -$7FB,     0; 5
000162F8 FFF8 F805 0004 FFF8 F801   		dc.w	 -8, -$7FB,	4,    -8, -$7FF; 10
00016302 0008 FFFC F805 0804 FFF8   		dc.w	  8,	-4, -$7FB,  $804,    -8; 15
0001630C F805 000A FFF8 F805 180A   		dc.w  -$7FB,	$A,    -8, -$7FB, $180A; 20
00016316 FFF8 F805 080A FFF8 F805   		dc.w	 -8, -$7FB,  $80A,    -8, -$7FB; 25
00016320 100A FFF8                  		dc.w  $100A,	-8		  ; 30
00016324                            		
00016324                            Off_Rings:
00016324 0000                       		dc.w Rings_GHZ1-Off_Rings
00016326 0000                       		dc.w Rings_GHZ2-Off_Rings
00016328 0000                       		dc.w Rings_GHZ3-Off_Rings
0001632A 0000                       		dc.w Rings_GHZ1-Off_Rings
0001632C 0000                       		dc.w Rings_LZ1-Off_Rings
0001632E 0000                       		dc.w Rings_LZ2-Off_Rings
00016330 0000                       		dc.w Rings_LZ3-Off_Rings
00016332 0000                       		dc.w Rings_SBZ3-Off_Rings
00016334 0000                       		dc.w Rings_MZ1-Off_Rings
00016336 0000                       		dc.w Rings_MZ2-Off_Rings
00016338 0000                       		dc.w Rings_MZ3-Off_Rings
0001633A 0000                       		dc.w Rings_MZ1-Off_Rings
0001633C 0000                       		dc.w Rings_SLZ1-Off_Rings
0001633E 0000                       		dc.w Rings_SLZ2-Off_Rings
00016340 0000                       		dc.w Rings_SLZ3-Off_Rings
00016342 0000                       		dc.w Rings_SLZ1-Off_Rings
00016344 0000                       		dc.w Rings_SYZ1-Off_Rings
00016346 0000                       		dc.w Rings_SYZ2-Off_Rings
00016348 0000                       		dc.w Rings_SYZ3-Off_Rings
0001634A 0000                       		dc.w Rings_SYZ1-Off_Rings
0001634C 0000                       		dc.w Rings_SBZ1-Off_Rings
0001634E 0000                       		dc.w Rings_SBZ2-Off_Rings
00016350 0000                       		dc.w Rings_FZ-Off_Rings
00016352 0000                       		dc.w Rings_SBZ1-Off_Rings
00016354 0000                       		dc.w Rings_End-Off_Rings
00016356 0000                       		dc.w Rings_End-Off_Rings
00016358 0000                       		dc.w Rings_End-Off_Rings
0001635A 0000                       		dc.w Rings_End-Off_Rings
0001635C 0000                       		dc.w Rings_ABZ2-Off_Rings
0001635E 0000                       		dc.w Rings_ABZ2-Off_Rings
00016360 0000                       		dc.w Rings_ABZ1-Off_Rings
00016362 0000 0000 0000             Rings_Null:	dc.b 0, 0, 0, 0, 0,	0
00016368                            Rings_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Rings.bin"
0001636C                            			even
0001636C                            Rings_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Rings.bin"
00016370                            			even
00016370                            Rings_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Rings.bin"
00016374                            			even
00016374                            Rings_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Rings.bin"
00016378                            			even
00016378                            Rings_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Rings.bin"
0001637C                            			even
0001637C                            Rings_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Rings.bin"
00016380                            			even
00016380                            Rings_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Rings.bin"
00016384                            			even
00016384                            Rings_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Rings.bin"
00016388                            			even
00016388                            Rings_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Rings.bin"
0001638C                            			even
0001638C                            Rings_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Rings.bin"
00016390                            			even
00016390                            Rings_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Rings.bin"
00016394                            			even
00016394                            Rings_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Rings.bin"
00016398                            			even
00016398                            Rings_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Rings.bin"
0001639C                            			even
0001639C                            Rings_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Rings.bin"
000163A0                            			even
000163A0                            Rings_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Rings.bin"
000163A4                            			even
000163A4                            Rings_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Rings.bin"
000163A8                            			even
000163A8                            Rings_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Rings.bin"
000163AC                            			even
000163AC                            Rings_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Rings.bin"
000163B0                            			even
000163B0                            Rings_FZ:	incbin	"LevelConverter\Final Zone\Rings.bin"
000163B4                            			even
000163B4                            Rings_End:	incbin	"LevelConverter\Ending\Rings.bin"
000163B8                            			even
000163B8                            Rings_ABZ1:	incbin	"LevelConverter\abz1\Rings.bin"
000163BC                            			even
000163BC                            Rings_ABZ2:	incbin	"LevelConverter\abz2\Rings.bin"
000163C0                            			even
000163C0                            
000163C0                            ; ---------------------------------------------------------------------------
000163C0                            ; Subroutine to	load a level's objects (Objects manager for Sonic 1)
000163C0                            ; This one is ported from Sonic 2 so it uses Object Indexes that are in
000163C0                            ; Sonic 2 (S2) format only
000163C0                            ; ---------------------------------------------------------------------------
000163C0                            
000163C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163C0                            
000163C0                            
000163C0                            ; =============== S U B	R O U T	I N E =======================================
000163C0                            
000163C0                            
000163C0                            ;ObjPosLoad:					  ; ...
000163C0                            ; ---------------------------------------------------------------------------
000163C0                            ; Objects Manager
000163C0                            ; Subroutine to load objects whenever they are close to the screen. Unlike in
000163C0                            ; normal s2, in this version every object gets an entry in the respawn table.
000163C0                            ; This is necessary to get the additional y-range checks to work.
000163C0                            ;
000163C0                            ; input variables:
000163C0                            ;  -none-
000163C0                            ;
000163C0                            ; writes:
000163C0                            ;  d0, d1, d2
000163C0                            ;  d3 = upper boundary to load object
000163C0                            ;  d4 = lower boundary to load object
000163C0                            ;  d5 = #$FFF, used to filter out object's y position
000163C0                            ;  d6 = camera position
000163C0                            ;
000163C0                            ;  a0 = address in object placement list
000163C0                            ;  a3 = address in object respawn table
000163C0                            ;  a6 = object loading routine
000163C0                            ; ---------------------------------------------------------------------------
000163C0                             
000163C0                            ; loc_17AA4
000163C0                            ObjPosLoad:
000163C0 7000                       	moveq	#0,d0
000163C2 1038 F76C                  	move.b	(v_opl_routine).w,d0
000163C6 4EFB 0000                  	jmp	ObjectsManager_States(pc,d0.w)
000163CA                             
000163CA                            ; ============== JUMP TABLE	=============================================
000163CA                            ObjectsManager_States:
000163CA 6000 0000                  	bra.w	ObjectsManager_Init		; 0
000163CE 6000 0000                  	bra.w	ObjectsManager_Main		; 2
000163D2 6000 0000                  	bra.w	ObjectsManager_Main		; 4
000163D6 4E75                       	rts
000163D8                            ; ============== END JUMP TABLE	=============================================
000163D8                             
000163D8                            ObjectsManager_Init:
000163D8 5838 F76C                  	addq.b	#4,(v_opl_routine).w
000163DC                             
000163DC 41F8 C900                  	lea     (v_objstate).w,a0
000163E0 7000                       	moveq   #0,d0
000163E2 223C 0000 00C0             	move.l  #$C0,d1 ; set loop counter
000163E8                            OPL_ClrList:
000163E8 20C0                       	move.l  d0,(a0)+
000163EA 51C9 FFFC                  	dbf     d1, OPL_ClrList
000163EE                             
000163EE 3038 FE10                  	move.w	(v_zone).w,d0
000163F2 ED08                       	lsl.b	#6,d0
000163F4 E848                       	lsr.w	#4,d0
000163F6 41F9 0000 0000             	lea		(ObjPos_Index).l,a0    ; load the first pointer in the object layout list pointer index,
000163FC 2248                       	movea.l	a0,a1
000163FE D0F0 0000                  	adda.w	(a0,d0.w),a0           ; load the pointer to the current object layout
00016402                            
00016402                            ; initialize each object load address with the first object in the layout
00016402 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w
00016406 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w
0001640A 47F8 C900                  	lea		(v_objstate).w,a3
0001640E                            
0001640E 3C38 F700                  	move.w	(v_screenposx).w,d6
00016412 0446 0080                  	subi.w	#$80,d6	                ; look one chunk to the left
00016416 6400                       	bcc.s	loc_notneg	                ; if the result was negative,
00016418 7C00                       	moveq	#0,d6	                ; cap at zero
0001641A                            loc_notneg:
0001641A 0246 FF80                  	andi.w	#$FF80,d6	; limit to increments of $80 (width of a chunk)
0001641E                            
0001641E 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0	; get first object in layout
00016422                             
00016422                            ; at the beginning of a level this gives respawn table entries to any object that is one chunk
00016422                            ; behind the left edge of the screen that needs to remember its state (Monitors, Badniks, etc.)
00016422                            loc_D944:
00016422 BC50                       	cmp.w	(a0),d6			; is object's x position >= d6?
00016424 6300                       	bls.s	loc_D956		; if yes, branch
00016426 5C48                       	addq.w	#6,a0	        ; next object
00016428 524B                       	addq.w	#1,a3	        ; respawn index of next object going right
0001642A 60F6                       	bra.s	loc_D944        ; continue with next object
0001642C                            ; ---------------------------------------------------------------------------
0001642C                             
0001642C                            loc_D956:
0001642C 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember rightmost object that has been processed, so far (we still need to look forward)
00016430 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
00016434                            
00016434 47F8 C900                  	lea		(v_objstate).w,a3	        ; reset a3
00016438 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0	; reset a0
0001643C 0446 0080                  	subi.w	#$80,d6						; look even farther left (any object behind this is out of range)
00016440 6500                       	bcs.s	loc_D976					; branch, if camera position would be behind level's left boundary
00016442                             
00016442                            loc_D964:	; count how many objects are behind the screen that are not in range and need to remember their state
00016442 BC50                       	cmp.w	(a0),d6		; is object's x position >= d6?
00016444 6300                       	bls.s	loc_D976	; if yes, branch
00016446 5C48                       	addq.w	#6,a0
00016448 524B                       	addq.w	#1,a3	        ; respawn index of next object going left
0001644A 60F6                       	bra.s	loc_D964        ; continue with next object
0001644C                            ; ---------------------------------------------------------------------------
0001644C                             
0001644C                            loc_D976:
0001644C 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w	; remember current object from the left
00016450 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016454                             
00016454 31FC FFFF F76E             	move.w	#-1,(v_screenposx_last).w	; make sure ObjectsManager_GoingForward is run
0001645A                             
0001645A 3038 F704                  	move.w	(v_screenposy).w,d0
0001645E 0240 FF80                  	andi.w	#$FF80,d0
00016462 31C0 FC10                  	move.w	d0,(v_screenposy_last).w	; make sure the Y check isn't run unnecessarily during initialization
00016466                            ; ---------------------------------------------------------------------------
00016466                             
00016466                            ObjectsManager_Main:
00016466                            	; get coarse camera position
00016466 3238 F704                  	move.w	(v_screenposy).w,d1
0001646A 0441 0080                  	subi.w	#$80,d1
0001646E 0241 FF80                  	andi.w	#$FF80,d1
00016472 31C1 FC18                  	move.w	d1,(v_screenposy_coarse).w
00016476                             
00016476 3238 F700                  	move.w	(v_screenposx).w,d1
0001647A 0441 0080                  	subi.w	#$80,d1
0001647E 0241 FF80                  	andi.w	#$FF80,d1
00016482 31C1 FC14                  	move.w	d1,(v_screenposx_coarse).w
00016486                             
00016486 4A78 F724                  	tst.w	(v_limittop1).w					; does this level y-wrap?
0001648A 6A00                       	bpl.s	ObjMan_Main_NoYWrap				; if not, branch
0001648C 4DF9 0000 0000             	lea		(ChkLoadObj_YWrap).l,a6			; set object loading routine
00016492 3638 F704                  	move.w	(v_screenposy).w,d3
00016496 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
0001649A 3803                       	move.w	d3,d4
0001649C 0644 0200                  	addi.w	#$200,d4						; set lower boundary
000164A0 0443 0080                  	subi.w	#$80,d3							; set upper boundary
000164A4 6A00                       	bpl.s	loc_ok								; branch, if upper boundary > 0
000164A6 0243 07FF                  	andi.w	#$7FF,d3						; wrap value
000164AA 6000                       	bra.s	ObjMan_Main_Cont
000164AC                            ; ---------------------------------------------------------------------------
000164AC                            loc_ok:
000164AC 303C 07FF                  	move.w	#$7FF,d0
000164B0 5240                       	addq.w	#1,d0
000164B2 B840                       	cmp.w	d0,d4
000164B4 6300                       	bls.s	positive						; branch, if lower boundary < $7FF
000164B6 0244 07FF                  	andi.w	#$7FF,d4						; wrap value
000164BA 6000                       	bra.s	ObjMan_Main_Cont
000164BC                            ; ---------------------------------------------------------------------------
000164BC                            
000164BC                            ObjMan_Main_NoYWrap:
000164BC 3638 F704                  	move.w	(v_screenposy).w,d3
000164C0 0243 FF80                  	andi.w	#$FF80,d3						; get coarse value
000164C4 3803                       	move.w	d3,d4
000164C6 0644 0200                  	addi.w	#$200,d4						; set lower boundary
000164CA 0443 0080                  	subi.w	#$80,d3							; set upper boundary
000164CE 6A00                       	bpl.s	positive
000164D0 7600                       	moveq	#0,d3							; no negative values allowed
000164D2                            positive:
000164D2 4DF9 0000 0000             	lea		(ChkLoadObj).l,a6				; set object loading routine
000164D8                             
000164D8                            ObjMan_Main_Cont:
000164D8 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
000164DC 3C38 F700                  	move.w	(v_screenposx).w,d6
000164E0 0246 FF80                  	andi.w	#$FF80,d6
000164E4 BC78 F76E                  	cmp.w	(v_screenposx_last).w,d6		; is the X range the same as last time?
000164E8 6700 0000                  	beq.w	ObjectsManager_SameXRange		; if yes, branch
000164EC 6C00                       	bge.s	ObjectsManager_GoingForward		; if new pos is greater than old pos, branch
000164EE                             
000164EE                            ; if the player is moving back
000164EE 31C6 F76E                  	move.w	d6,(v_screenposx_last).w		; remember current position for next time
000164F2                            
000164F2 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object going left
000164F6 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
000164FA                            
000164FA 0446 0080                  	subi.w	#$80,d6							; look one chunk to the left
000164FE 6500                       	bcs.s	ObjMan_GoingBack_Part2			; branch, if camera position would be behind level's left boundary
00016500                            
00016500 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
00016506 6600                       	bne.s	ObjMan_GoingBack_Part2			; branch, if there are none
00016508                            
00016508                            ; load all objects left of the screen that are now in range
00016508                            loc_D9A6: 
00016508 BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
0001650C 6C00                       	bge.s	ObjMan_GoingBack_Part2			; if it is, branch
0001650E 5D48                       	subq.w	#6,a0							; get object's address
00016510 534B                       	subq.w	#1,a3							; and respawn table index
00016512 4E96                       	jsr		(a6)							; load object
00016514 6600                       	bne.s	loc_undoloadobject					; branch, if SST is full
00016516 5D48                       	subq.w	#6,a0
00016518 60EE                       	bra.s	loc_D9A6						; continue with previous object
0001651A                            ; ---------------------------------------------------------------------------
0001651A                             
0001651A                            loc_undoloadobject:							; undo a few things, if the object couldn't load
0001651A 5C48                       	addq.w	#6,a0							; go back to last object
0001651C 524B                       	addq.w	#1,a3							; since we didn't load the object, undo last change
0001651E                             
0001651E                            ObjMan_GoingBack_Part2:
0001651E 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object going left
00016522 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016526 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object going right
0001652A 3678 F778                  	movea.w	(Obj_respawn_index_right).w,a3	; and its respawn table index
0001652E 0646 0300                  	addi.w	#$300,d6						; look two chunks beyond the right edge of the screen
00016532                            
00016532                            ; subtract number of objects that have been moved out of range (from the right side) 
00016532                            loc_D9DE: 
00016532 BC68 FFFA                  	cmp.w	-6(a0),d6						; is the previous object's X pos less than d6?
00016536 6E00                       	bgt.s	loc_D9F0						; if it is, branch
00016538 5D48                       	subq.w	#6,a0							; get object's address
0001653A 534B                       	subq.w	#1,a3							; and respawn table index
0001653C 60F4                       	bra.s	loc_D9DE						; continue with previous object
0001653E                            ; ---------------------------------------------------------------------------
0001653E                            loc_D9F0:
0001653E 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w	; remember next object going right
00016542 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
00016546 6000                       	bra.s	ObjectsManager_SameXRange
00016548                            ; ---------------------------------------------------------------------------
00016548                            ObjectsManager_GoingForward:
00016548 31C6 F76E                  	move.w	d6,(v_screenposx_last).w
0001654C                             
0001654C 2078 F770                  	movea.l	(Obj_load_addr_right).w,a0		; get next object from the right
00016550 3678 F778                  	movea.w (Obj_respawn_index_right).w,a3	; and its respawn table index
00016554 0646 0280                  	addi.w	#$280,d6						; look two chunks forward
00016558 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; find an empty object slot
0001655E 6600                       	bne.s	ObjMan_GoingForward_Part2		; branch, if there are none
00016560                            
00016560                            ; load all objects right of the screen that are now in range
00016560                            loc_DA02: 
00016560 BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
00016562 6300                       	bls.s	ObjMan_GoingForward_Part2		; if yes, branch
00016564 4E96                       	jsr		(a6)							; load object (and get address of next object)
00016566 524B                       	addq.w	#1,a3							; respawn index of next object to the right
00016568 67F6                       	beq.s	loc_DA02						; continue loading objects, if the SST isn't full
0001656A                             
0001656A                            ObjMan_GoingForward_Part2:
0001656A 21C8 F770                  	move.l	a0,(Obj_load_addr_right).w		; remember next object from the right
0001656E 31CB F778                  	move.w	a3,(Obj_respawn_index_right).w	; and its respawn table index
00016572 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get current object from the left
00016576 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
0001657A 0446 0300                  	subi.w	#$300,d6						; look one chunk behind the left edge of the screen
0001657E 6500                       	bcs.s	ObjMan_GoingForward_End			; branch, if camera position would be behind level's left boundary
00016580                            
00016580                            ; subtract number of objects that have been moved out of range (from the left) 
00016580                            loc_DA24: 
00016580 BC50                       	cmp.w	(a0),d6							; is object's x position >= d6?
00016582 6300                       	bls.s	ObjMan_GoingForward_End			; if yes, branch
00016584 5C48                       	addq.w	#6,a0	                		; next object
00016586 524B                       	addq.w	#1,a3	                		; respawn index of next object to the left
00016588 60F6                       	bra.s	loc_DA24	        			; continue with next object
0001658A                            ; ---------------------------------------------------------------------------
0001658A                            
0001658A                            ObjMan_GoingForward_End:
0001658A 21C8 F774                  	move.l	a0,(Obj_load_addr_left).w		; remember current object from the left
0001658E 31CB F77C                  	move.w	a3,(Obj_respawn_index_left).w	; and its respawn table index
00016592                             
00016592                            ObjectsManager_SameXRange:
00016592 3C38 F704                  	move.w	(v_screenposy).w,d6
00016596 0246 FF80                  	andi.w	#$FF80,d6
0001659A 3606                       	move.w	d6,d3
0001659C BC78 FC10                  	cmp.w	(v_screenposy_last).w,d6		; is the y range the same as last time?
000165A0 6700 0000                  	beq.w	ObjectsManager_SameYRange		; if yes, branch
000165A4 6C00                       	bge.s	ObjectsManager_GoingDown		; if the player is moving down
000165A6                             
000165A6                            ; if the player is moving up
000165A6 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
000165AA 6A00                       	bpl.s	ObjMan_GoingUp_NoYWrap			; if not, branch
000165AC 4A46                       	tst.w	d6	
000165AE 6600                       	bne.s	ObjMan_GoingUp_YWrap
000165B0 0C78 0080 FC10             	cmpi.w	#$80,(v_screenposy_last).w
000165B6 6600                       	bne.s	ObjMan_GoingDown_YWrap
000165B8                             
000165B8                            ObjMan_GoingUp_YWrap:
000165B8 0443 0080                  	subi.w	#$80,d3							; look one chunk up
000165BC 6A00                       	bpl.s	ObjectsManager_YCheck			; go to y check, if camera y position >= $80
000165BE 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
000165C2 6000                       	bra.s	ObjectsManager_YCheck
000165C4                             
000165C4                            ; ---------------------------------------------------------------------------
000165C4                            ObjMan_GoingUp_NoYWrap:
000165C4 0443 0080                  	subi.w	#$80,d3							; look one chunk up
000165C8 6B00 0000                  	bmi.w	ObjectsManager_SameYRange		; don't do anything if camera y position is < $80
000165CC 6000                       	bra.s	ObjectsManager_YCheck
000165CE                            ; ---------------------------------------------------------------------------
000165CE                             
000165CE                            ObjectsManager_GoingDown:
000165CE 4A78 F724                  	tst.w	(v_limittop1).w					; does the level y-wrap?
000165D2 6A00                       	bpl.s	ObjMan_GoingDown_NoYWrap		; if not, branch
000165D4 4A78 FC10                  	tst.w	(v_screenposy_last).w
000165D8 6600                       	bne.s	ObjMan_GoingDown_YWrap
000165DA 0C46 0080                  	cmpi.w	#$80,d6
000165DE 66D8                       	bne.s	ObjMan_GoingUp_YWrap
000165E0                             
000165E0                            ObjMan_GoingDown_YWrap:
000165E0 0643 0180                  	addi.w	#$180,d3						; look one chunk down
000165E4 0C43 07FF                  	cmpi.w	#$7FF,d3
000165E8 6500                       	bcs.s	ObjectsManager_YCheck			; go to  check, if camera y position < $7FF
000165EA 0243 07FF                  	andi.w	#$7FF,d3						; else, wrap value
000165EE 6000                       	bra.s	ObjectsManager_YCheck
000165F0                            ; ---------------------------------------------------------------------------
000165F0                             
000165F0                            ObjMan_GoingDown_NoYWrap:
000165F0 0643 0180                  	addi.w	#$180,d3						; look one chunk down
000165F4 0C43 07FF                  	cmpi.w	#$7FF,d3
000165F8 6200                       	bhi.s	ObjectsManager_SameYRange		; don't do anything, if camera is too close to bottom
000165FA                             
000165FA                            ObjectsManager_YCheck:
000165FA 4EB9 0000 0000             	jsr		(SingleObjLoad).l					; get an empty object slot
00016600 6600                       	bne.s	ObjectsManager_SameYRange		; branch, if there are none
00016602 3803                       	move.w	d3,d4
00016604 0644 0080                  	addi.w	#$80,d4
00016608 3A3C 0FFF                  	move.w	#$FFF,d5						; this will be used later when we load objects
0001660C 2078 F774                  	movea.l	(Obj_load_addr_left).w,a0		; get next object going left
00016610 3678 F77C                  	movea.w	(Obj_respawn_index_left).w,a3	; and its respawn table index
00016614 2E38 F770                  	move.l	(Obj_load_addr_right).w,d7		; get next object going right
00016618 9E88                       	sub.l	a0,d7							; d7 = number of objects between the left and right boundaries * 6
0001661A 6700                       	beq.s	ObjectsManager_SameYRange		; branch if there are no objects inbetween
0001661C 5448                       	addq.w	#2,a0							; align to object's y position
0001661E                            
0001661E                            ; check, if current object needs to be loaded
0001661E                            loc_checknext:	
0001661E 4A13                           tst.b	(a3)	        				; is object already loaded?
00016620 6B00                           bmi.s	loc_nextobj						; if yes, branch
00016622 3210                       	move.w	(a0),d1                  		; get object's y position and status info
00016624 C245                       	and.w	d5,d1	                 		; get y-position
00016626 B243                       	cmp.w	d3,d1                    		; compare to upper boundary to load object
00016628 6500                       	bcs.s	loc_nextobj						; branch, if object is out of range from the top
0001662A B244                       	cmp.w	d4,d1                    		; compare to lower boundary to load object
0001662C 6200                       	bhi.s	loc_nextobj						; branch, if object is out of range from the bottom
0001662E 08D3 0007                  	bset	#7,(a3)	                 		; mark object as loaded
00016632                            ; load object
00016632 3368 FFFE 0008             	move.w	-2(a0),x_pos(a1)
00016638 3210                       	move.w	(a0),d1
0001663A 3401                       	move.w	d1,d2                    		; copy for later
0001663C C245                       	and.w	d5,d1	                 		; get y-position
0001663E 3341 000C                  	move.w	d1,y_pos(a1)
00016642 E75A                       	rol.w	#3,d2                    		; adjust bits
00016644 0202 0003                  	andi.b	#3,d2                    		; get render flags
00016648 1342 0001                  	move.b	d2,render_flags(a1)
0001664C 1342 0022                  	move.b	d2,status(a1)
00016650 12A8 0002                  	move.b	2(a0),(a1)                 		; get object id
00016654 1368 0003 0028             	move.b	3(a0),subtype(a1)
0001665A 334B 0014                  	move.w	a3,respawn_index(a1)
0001665E 4EB9 0000 0000             	jsr		(SingleObjLoad).l	           		; find new object slot
00016664 6600                       	bne.s	ObjectsManager_SameYRange		; brach, if there are none left
00016666                            loc_nextobj:
00016666 5C48                       	addq.w	#6,a0							; address of next object
00016668 524B                       	addq.w	#1,a3							; and its respawn index
0001666A 5D47                       	subq.w	#6,d7							; subtract from size of remaining objects
0001666C 66B0                       	bne.s	loc_checknext						; branch, if there are more
0001666E                            
0001666E                            ObjectsManager_SameYRange:
0001666E 31C6 FC10                  	move.w	d6,(v_screenposy_last).w
00016672 4E75                       	rts
00016674                            ; ===========================================================================
00016674                            ; ---------------------------------------------------------------------------
00016674                            ; Subroutines to check if an object needs to be loaded,
00016674                            ; with and without y-wrapping enabled.
00016674                            ;
00016674                            ; input variables:
00016674                            ;  d3 = upper boundary to load object
00016674                            ;  d4 = lower boundary to load object
00016674                            ;  d5 = #$FFF, used to filter out object's y position
00016674                            ;
00016674                            ;  a0 = address in object placement list
00016674                            ;  a1 = object
00016674                            ;  a3 = address in object respawn table
00016674                            ;
00016674                            ; writes:
00016674                            ;  d1, d2, d7
00016674                            ; ---------------------------------------------------------------------------
00016674                            ChkLoadObj_YWrap:
00016674 4A13                       	tst.b	(a3)	        ; is object already loaded?
00016676 6A00                       	bpl.s	loc_notloaded2		; if not, branch
00016678 5C48                       	addq.w	#6,a0           ; next object
0001667A 7200                       	moveq	#0,d1           ; let the objects manager know that it can keep going
0001667C 4E75                       	rts
0001667E                            ; ===========================================================================
0001667E                            
0001667E                            loc_notloaded2:
0001667E 3E18                       		move.w	(a0)+,d7                 ; get object's x position
00016680 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
00016682 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
00016684 6B00                        	    bmi.s	loc_noYcheck	         	 ; if yes, branch
00016686 C245                       		and.w	d5,d1            	     ; get y-position
00016688 B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
0001668A 6400                       	    bcc.s	loc_loadobject2
0001668C B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
0001668E 6300                       	    bls.s	loc_loadobject2
00016690 5448                       	    addq.w	#2,a0					 ; address of next object
00016692 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
00016694 4E75                       	    rts
00016696                            ; ---------------------------------------------------------------------------
00016696                            loc_noYcheck:
00016696 C245                        		and.w	d5,d1	                 ; get y-position
00016698                            loc_loadobject2:
00016698 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
0001669C 3347 0008                  		move.w	d7,x_pos(a1)
000166A0 3341 000C                  		move.w	d1,y_pos(a1)
000166A4 E75A                       		rol.w	#3,d2                    ; adjust bits
000166A6 0202 0003                  		andi.b	#3,d2                    ; get render flags
000166AA 1342 0001                  		move.b	d2,render_flags(a1)
000166AE 1342 0022                  		move.b	d2,status(a1)
000166B2 1298                       		move.b	(a0)+,(a1)                 ; get object id
000166B4 1358 0028                  		move.b	(a0)+,subtype(a1)
000166B8 334B 0014                  	    move.w	a3,respawn_index(a1)
000166BC 6000 0000                  		bra.w	SingleObjLoad              ; find empty slot
000166C0                            ; ===========================================================================
000166C0                            ChkLoadObj:
000166C0 4A13                       		tst.b	(a3)	        		; is object already loaded?
000166C2 6A00                       		bpl.s	loc_notloaded				; if not, branch
000166C4 5C48                       		addq.w	#6,a0           		; next object
000166C6 7200                       		moveq	#0,d1           		; let the objects manager know that it can keep going
000166C8 4E75                       		rts
000166CA                            ; ===========================================================================
000166CA                            
000166CA                            loc_notloaded:
000166CA 3E18                       		move.w	(a0)+,d7                 ; get object's x position
000166CC 3218                       		move.w	(a0)+,d1                 ; get object's y position and status info
000166CE 3401                       		move.w	d1,d2                    ; does this object skip y-Checks?	;*6
000166D0 6B00                        	    bmi.s	loc_noYcheck2	         	 ; if yes, branch
000166D2 C245                       		and.w	d5,d1	                 ; get y-position
000166D4 B243                       	    cmp.w	d3,d1                    ; compare to upper boundary to load object
000166D6 6500                       	    bcs.s	loc_outofrange				 ; branch, if object is out of range from the top
000166D8 B244                       	    cmp.w	d4,d1                    ; compare to lower boundary to load object
000166DA 6300                       	    bls.s	loc_loadobject              ; branch, if object is in range from the bottom
000166DC                            loc_outofrange:
000166DC 5448                       	    addq.w	#2,a0					 ; address of next object
000166DE 7200                       	    moveq	#0,d1					 ; let the objects manager know that it can keep going
000166E0 4E75                       	    rts
000166E2                            ; ---------------------------------------------------------------------------
000166E2                            loc_noYcheck2:
000166E2 C245                        		and.w	d5,d1                 ; get y-position
000166E4                            loc_loadobject:
000166E4 08D3 0007                  	    bset	#7,(a3)	                 ; mark object as loaded
000166E8 3347 0008                  		move.w	d7,x_pos(a1)
000166EC 3341 000C                  		move.w	d1,y_pos(a1)
000166F0 E75A                       		rol.w	#3,d2                    ; adjust bits
000166F2 0202 0003                  		andi.b	#3,d2                    ; get render flags
000166F6 1342 0001                  		move.b	d2,render_flags(a1)
000166FA 1342 0022                  		move.b	d2,status(a1)
000166FE 1298                       		move.b	(a0)+,(a1)                 ; get object id
00016700 1358 0028                  		move.b	(a0)+,subtype(a1)
00016704 334B 0014                  	    move.w	a3,respawn_index(a1)
00016708                             	; continue straight to SingleObjLoad
00016708                            ; End of function ChkLoadObj
00016708                            ; ===========================================================================
00016708                            
00016708                            ; End of function sub_313D2E
00016708                            
00016708                            
00016708                            ; ---------------------------------------------------------------------------
00016708                            ; Single object	loading	subroutine
00016708                            ; ---------------------------------------------------------------------------
00016708                            
00016708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016708                            
00016708                            FindFreeObj:
00016708                            SingleObjLoad:
00016708 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0001670C 303C 005F                  		move.w	#$5F,d0
00016710                            
00016710                            loc_DA94:
00016710 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
00016712 6700                       		beq.s	locret_DAA0	; if yes, branch
00016714 43E9 0040                  		lea	object_size(a1),a1	; goto next object RAM slot
00016718 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0001671C                            
0001671C                            locret_DAA0:
0001671C 4E75                       		rts	
0001671E                            ; End of function SingleObjLoad
0001671E                            
0001671E                            
0001671E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001671E                            
0001671E                            FindNextFreeObj:
0001671E                            SingleObjLoad2:
0001671E 2248                       	movea.l	a0,a1
00016720 303C F000                  	move.w	#$F000,d0	; $D000
00016724 9048                       	sub.w	a0,d0	; subtract current object location
00016726 EC48                       	lsr.w	#6,d0
00016728 103B 0000                  	move.b	Find_First_Sprite_Table(pc,d0.w),d0
0001672C 6B00                       	bmi.s	return_18014
0001672E                             
0001672E                            SingleObjLoad2_
0001672E 43E9 0040                  	lea	object_size(a1),a1 ; load obj address ; goto next object RAM slot
00016732 4A11                       	tst.b	id(a1)	; is object RAM slot empty?
00016734 57C8 FFF8                  	dbeq	d0,SingleObjLoad2_	; if yes, branch
00016738                             
00016738                            return_18014:
00016738 4E75                       	rts
0001673A                            ; ===========================================================================
0001673A                            Find_First_Sprite_Table:	; map n*64/64 to n*68/64
0001673A FF00 0102 0304 0506 0708+  	dc.b	$FF,  $0,  $1,  $2,  $3,  $4,  $5,  $6,  $7,  $8,  $9,  $A,  $B
00016747 0C0D 0E0F 0F10 1112 1314+  	dc.b	 $C,  $D,  $E,  $F,  $F, $10, $11, $12, $13, $14, $15, $16, $17
00016754 1819 1A1B 1C1D 1E1F 1F20+  	dc.b	$18, $19, $1A, $1B, $1C, $1D, $1E, $1F, $1F, $20, $21, $22, $23
00016761 2425 2627 2829 2A2B 2C2D+  	dc.b	$24, $25, $26, $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $2F
0001676E 3031 3233 3435 3637 3839+  	dc.b	$30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $3A, $3B, $3C
0001677B 3D3E 3F3F 4041 4243 4445+  	dc.b	$3D, $3E, $3F, $3F, $40, $41, $42, $43, $44, $45, $46, $47, $48
00016788 494A 4B4C 4D4E 4F4F 5051+  	dc.b	$49, $4A, $4B, $4C, $4D, $4E, $4F, $4F, $50, $51, $52, $53, $54
00016795 5556 5758 595A 5B5C 5D5E+  	dc.b	$55, $56, $57, $58, $59, $5A, $5B, $5C, $5D, $5E, $5F, $5F, $60
000167A2 6162 6364 65               	dc.b	$61, $62, $63, $64, $65
000167A7                            ; ===========================================================================
000167A8 00                         	even
000167A8                            ; ---------------------------------------------------------------------------
000167A8                            ; Object 41 - springs
000167A8                            ; ---------------------------------------------------------------------------
000167A8                            
000167A8                            ;===============================================================================
000167A8                            ; Obj41 - Springs - diagonal (no diagonal spring art atm) / horizontal / vertical 
000167A8                            ; [ Start ]
000167A8                            ;===============================================================================
000167A8                            Obj41:
000167A8 7000                                       moveq   #$00, D0
000167AA 1028 0024                                  move.b  routine(A0), D0
000167AE 323B 0000                                  move.w  Obj41_Index(PC, D0), D1
000167B2 4EBB 1000                                  jsr     Obj41_Index(PC, D1)
000167B6 4EF9 0000 0000                             jmp     (MarkObjGone)                          ; Offset_0x016358
000167BC                            Obj41_Index:
000167BC 0000                                       dc.w    Obj41_Init-Obj41_Index
000167BE 0000                                       dc.w    Obj41_Up-Obj41_Index
000167C0 0000                                       dc.w    Obj41_Horizontal-Obj41_Index
000167C2 0000                                       dc.w    Obj41_Down-Obj41_Index
000167C4 0000                                       dc.w    Obj41_DiagonallyUp-Obj41_Index
000167C6 0000                                       dc.w    Obj41_DiagonallyDown-Obj41_Index
000167C8                            Obj41_Init:
000167C8 5428 0024                                  addq.b  #$02, routine(A0)
000167CC 217C 0000 0000 0004                        move.l  #Map_obj41, $0004(A0)           ; Offset_0x018F8C
000167D4 317C 0523 0002                             move.w  #$523, $0002(A0)
000167DA 0028 0004 0001                             ori.b   #$04, $0001(A0)
000167E0 117C 0010 0023                             move.b  #$10,width_pixels(a0)
000167E6 317C 0200 0018                             move.w	#$200,priority(a0)
000167EC 1028 0028                                  move.b  $0028(A0), D0
000167F0 E648                                       lsr.w   #$03, D0
000167F2 0240 000E                                  andi.w  #$000E, D0
000167F6 303B 0000                                  move.w  Obj41_Init_Subtypes(PC, D0), D0
000167FA 4EFB 0000                                  jmp     Obj41_Init_Subtypes(PC, D0)
000167FE                            Obj41_Init_Subtypes:
000167FE 0000                                       dc.w    Obj41_Init_Up-Obj41_Init_Subtypes
00016800 0000                                       dc.w    Obj41_Init_Horizontal-Obj41_Init_Subtypes
00016802 0000                                       dc.w    Obj41_Init_Down-Obj41_Init_Subtypes
00016804 0000                                       dc.w    Obj41_Init_DiagonallyUp-Obj41_Init_Subtypes
00016806 0000                                       dc.w    Obj41_Init_DiagonallyDown-Obj41_Init_Subtypes
00016808                            Obj41_Init_Horizontal:
00016808 117C 0004 0024             				move.b	#4,$24(a0)	; use "Obj41_LR" routine
0001680E 117C 0002 001C             				move.b	#2,$1C(a0)
00016814 117C 0003 001A             				move.b	#3,$1A(a0)
0001681A 317C 0533 0002             				move.w	#$533,2(a0)
00016820 117C 0008 0023             				move.b	#8,width_pixels(a0)
00016826 6000                                       bra.s   Obj41_Init_Up
00016828                            Obj41_Init_Down:
00016828 117C 0006 0024                             move.b  #$06, routine(A0)
0001682E 117C 0006 001A                             move.b  #$06, $001A(A0)
00016834 08E8 0001 0022                             bset    #$01, status(A0)
0001683A 6000                                       bra.s   Obj41_Init_Up
0001683C                            Obj41_Init_DiagonallyUp:
0001683C 117C 0008 0024                             move.b  #$08, routine(A0)
00016842 117C 0004 001C                             move.b  #$04, $001C(A0)
00016848 117C 0007 001A                             move.b  #$07, $001A(A0)
0001684E 317C 043C 0002                             move.w  #$043C, $0002(A0)
00016854 6000                                       bra.s   Obj41_Init_Up
00016856                            Obj41_Init_DiagonallyDown:
00016856 117C 000A 0024                             move.b  #$0A, routine(A0)
0001685C 117C 0004 001C                             move.b  #$04, $001C(A0)
00016862 117C 000A 001A                             move.b  #$0A, $001A(A0)
00016868 317C 043C 0002                             move.w  #$043C, $0002(A0)
0001686E 08E8 0001 0022                             bset    #$01, status(A0)
00016874                            Obj41_Init_Up:
00016874 1028 0028                                  move.b  $0028(A0), D0
00016878 0240 000F                                  andi.w	#$F,d0
0001687C 317B 0000 0030                             move.w  Obj41_Powers(PC, D0), $0030(A0)
00016882 0800 0001                                  btst    #$01, D0
00016886 6700                                       beq.s   Offset_0x0188E4
00016888 08E8 0005 0002                             bset    #$05, $0002(A0)
0001688E 217C 0000 0000 0004                        move.l  #Springs_Mappings_01, $0004(A0)        ; Offset_0x018FA2
00016896                            Offset_0x0188E4:
00016896                            ;                bsr     ModifySpriteAttr_2P                    ; Offset_0x016CFA
00016896 4E75                                       rts
00016898                            ;-------------------------------------------------------------------------------                  
00016898 F000                       Obj41_Powers:		dc.w -$1000		; power	of red spring
0001689A F600                       		dc.w -$A00		; power	of yellow spring
0001689C                            ;-------------------------------------------------------------------------------                  
0001689C                            Obj41_Up:
0001689C 323C 001B                                  move.w  #$001B, D1
000168A0 343C 0008                                  move.w  #$0008, D2
000168A4 363C 0010                                  move.w  #$0010, D3
000168A8 3828 0008                                  move.w  $0008(A0), D4
000168AC                            ;                lea     ($FFFFB000).w, A1
000168AC                             ;               moveq   #$03, D6
000168AC                              ;              movem.l D1-D4, -(A7)
000168AC                               ;             bsr     SolidObjectNew                       ; Offset_0x0196FC
000168AC                                ;            btst    #$03, status(A0)
000168AC                                 ;           beq.s   Offset_0x018916
000168AC                                  ;          bsr.s   Offset_0x018938
000168AC                            ;Offset_0x018916:
000168AC                            ;                movem.l (A7)+, D1-D4
000168AC                             ;               lea     ($FFFFB040).w, A1
000168AC                              ;              moveq   #$04, D6
000168AC 6100 0000                                  bsr     SolidObjectNew                       ; Offset_0x0196FC
000168B0 0828 0003 0022                             btst    #$03, status(A0)		; changed to $03 was $04
000168B6 6700                                       beq.s   Offset_0x01892E
000168B8 6100                                       bsr.s   Offset_0x018938
000168BA                            Offset_0x01892E:
000168BA 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
000168C0 6000 BD56                                  bra     AnimateSprite                          ; Offset_0x0164CA
000168C4                            Offset_0x018938:
000168C4 317C 0100 001C                             move.w  #$0100, $001C(A0)
000168CA 5069 000C                                  addq.w  #$08, $000C(A1)
000168CE 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
000168D4 08E9 0001 0022                             bset    #$01, status(A1)
000168DA 08A9 0003 0022                             bclr    #$03, status(A1)
000168E0 137C 0010 001C                             move.b  #$10, $001C(A1)
000168E6 137C 0002 0024                             move.b  #$02, routine(A1)
000168EC 1028 0028                                  move.b  $0028(A0), D0
000168F0 6A00                                       bpl.s   Offset_0x01896C
000168F2 337C 0000 0010                             move.w  #$0000, $0010(A1)
000168F8                            Offset_0x01896C:
000168F8 0800 0000                                  btst    #$00, D0
000168FC 6700                                       beq.s   Offset_0x0189AC
000168FE 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016904 137C 0001 0027                             move.b  #$01, $0027(A1)
0001690A 137C 0000 001C                             move.b  #$00, $001C(A1)
00016910 137C 0000 002C                             move.b  #$00, $002C(A1)
00016916 137C 0004 002D                             move.b  #$04, $002D(A1)
0001691C 0800 0001                                  btst    #$01, D0
00016920 6600                                       bne.s   Offset_0x01899C
00016922 137C 0001 002C                             move.b  #$01, $002C(A1)
00016928                            Offset_0x01899C:
00016928 0829 0000 0022                             btst    #$00, status(A1)
0001692E 6700                                       beq.s   Offset_0x0189AC
00016930 4429 0027                                  neg.b   $0027(A1)
00016934 4469 0020                                  neg.w   inertia(a1)
00016938                            Offset_0x0189AC:
00016938 0200 000C                                  andi.b  #$0C, D0
0001693C 0C00 0004                                  cmpi.b  #$04, D0
00016940 6600                                       bne.s   Offset_0x0189C2
00016942 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016948 137C 000D 003F                             move.b  #$0D, $003F(A1)
0001694E                            Offset_0x0189C2:
0001694E 0C00 0008                                  cmpi.b  #$08, D0
00016952 6600                                       bne.s   Offset_0x0189D4
00016954 137C 000E 003E                             move.b  #$0E, $003E(A1)
0001695A 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016960                            Offset_0x0189D4:
00016960 303C 00B1                  				move.w	#$B1,d0
00016964 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
0001696A 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016970                            Obj41_Horizontal:
00016970 323C 0013                                  move.w  #$0013, D1
00016974 343C 000E                                  move.w  #$000E, D2
00016978 363C 000F                                  move.w  #$000F, D3
0001697C 3828 0008                                  move.w  $0008(A0), D4
00016980                                            ;lea     ($FFFFB000).w, A1
00016980                                            ;moveq   #$03, D6
00016980                                            ;movem.l D1-D4, -(A7)
00016980                                            ;bsr     SolidObject                       ; Offset_0x0196FC
00016980                                            ;btst    #$05, status(A0)
00016980                                            ;beq.s   Offset_0x018A1E
00016980                                            ;move.b  status(A0), D1
00016980                                            ;move.w  $0008(A0), D0
00016980                                            ;sub.w   $0008(A1), D0
00016980                                            ;bcs.s   Offset_0x018A16
00016980                                            ;eori.b  #$01, D1
00016980                            ;Offset_0x018A16:
00016980                            ;                andi.b  #$01, D1
00016980                            ;                bne.s   Offset_0x018A1E
00016980                            ;                bsr.s   Offset_0x018A5C
00016980                            ;Offset_0x018A1E:
00016980                            ;                movem.l (A7)+, D1-D4
00016980                            ;                lea     ($FFFFB040).w, A1
00016980                            ;                moveq   #$04, D6
00016980 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016984 4846                       				swap	d6
00016986 0246 0001                  				andi.w	#1,d6
0001698A 6700                                       beq.s   Offset_0x018A4E
0001698C 1228 0022                                  move.b  status(A0), D1
00016990 3028 0008                                  move.w  $0008(A0), D0
00016994 9069 0008                                  sub.w   $0008(A1), D0
00016998 6500                                       bcs.s   Offset_0x018A46
0001699A 0A01 0001                                  eori.b  #$01, D1
0001699E                            Offset_0x018A46:
0001699E 0201 0001                                  andi.b  #$01, D1
000169A2 6600                                       bne.s   Offset_0x018A4E
000169A4 6100                                       bsr.s   Offset_0x018A5C
000169A6                            Offset_0x018A4E:
000169A6 6100 0000                                  bsr     Offset_0x018B34
000169AA 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
000169B0 6000 BC66                                  bra     AnimateSprite                          ; Offset_0x0164CA
000169B4                            Offset_0x018A5C:
000169B4 317C 0300 001C                             move.w  #$0300, $001C(A0)
000169BA 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
000169C0 5069 0008                                  addq.w  #$08, $0008(A1)
000169C4 08E9 0000 0022                             bset    #$00, status(A1)
000169CA 0828 0000 0022                             btst    #$00, status(A0)
000169D0 6600                                       bne.s   Offset_0x018A8A
000169D2 08A9 0000 0022                             bclr    #$00, status(A1)
000169D8 0469 0010 0008                             subi.w  #$0010, $0008(A1)
000169DE 4469 0010                                  neg.w   $0010(A1)
000169E2                            Offset_0x018A8A:
000169E2 337C 000F 003E                             move.w  #$000F, $003E(A1)
000169E8 3369 0010 0020                             move.w  $0010(A1), inertia(a1)
000169EE 0829 0002 0022                             btst    #$02, status(A1)
000169F4 6600                                       bne.s   Offset_0x018AA4
000169F6 137C 0000 001C                             move.b  #$00, $001C(A1)
000169FC                            Offset_0x018AA4:
000169FC 1028 0028                                  move.b  $0028(A0), D0
00016A00 6A00                                       bpl.s   Offset_0x018AB0
00016A02 337C 0000 0012                             move.w  #$0000, $0012(A1)
00016A08                            Offset_0x018AB0:
00016A08 0800 0000                                  btst    #$00, D0
00016A0C 6700                                       beq.s   Offset_0x018AF0
00016A0E 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016A14 137C 0001 0027                             move.b  #$01, $0027(A1)
00016A1A 137C 0000 001C                             move.b  #$00, $001C(A1)
00016A20 137C 0001 002C                             move.b  #$01, $002C(A1)
00016A26 137C 0008 002D                             move.b  #$08, $002D(A1)
00016A2C 0800 0001                                  btst    #$01, D0
00016A30 6600                                       bne.s   Offset_0x018AE0
00016A32 137C 0003 002C                             move.b  #$03, $002C(A1)
00016A38                            Offset_0x018AE0:
00016A38 0829 0000 0022                             btst    #$00, status(A1)
00016A3E 6700                                       beq.s   Offset_0x018AF0
00016A40 4429 0027                                  neg.b   $0027(A1)
00016A44 4469 0020                                  neg.w   inertia(a1)
00016A48                            Offset_0x018AF0:
00016A48 0200 000C                                  andi.b  #$0C, D0
00016A4C 0C00 0004                                  cmpi.b  #$04, D0
00016A50 6600                                       bne.s   Offset_0x018B06
00016A52 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016A58 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016A5E                            Offset_0x018B06:
00016A5E 0C00 0008                                  cmpi.b  #$08, D0
00016A62 6600                                       bne.s   Offset_0x018B18
00016A64 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016A6A 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016A70                            Offset_0x018B18:
00016A70 08A8 0005 0022                             bclr    #$05, status(A0)
00016A76 08A8 0006 0022                             bclr    #$06, status(A0)
00016A7C 08A9 0005 0022                             bclr    #$05, status(A1)
00016A82 303C 00B1                  				move.w	#$B1,d0
00016A86 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016A8C 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016A92                            Offset_0x018B34:
00016A92 0C28 0003 001C                             cmpi.b  #$03, $001C(A0)
00016A98 6700 0000                                  beq     Offset_0x018BEC
00016A9C 3028 0008                                  move.w  $0008(A0), D0
00016AA0 3200                                       move.w  D0, D1
00016AA2 0641 0028                                  addi.w  #$0028, D1
00016AA6 0828 0000 0022                             btst    #$00, status(A0)
00016AAC 6700                                       beq.s   Offset_0x018B56
00016AAE 3200                                       move.w  D0, D1
00016AB0 0440 0028                                  subi.w  #$0028, D0
00016AB4                            Offset_0x018B56:
00016AB4 3428 000C                                  move.w  $000C(A0), D2
00016AB8 3602                                       move.w  D2, D3
00016ABA 0442 0018                                  subi.w  #$0018, D2
00016ABE 0643 0018                                  addi.w  #$0018, D3
00016AC2 43F8 D000                                  lea     ($FFFFD000).w, A1
00016AC6 0829 0001 0022                             btst    #$01, status(A1)
00016ACC 6600                                       bne.s   Offset_0x018BAA
00016ACE 3829 0020                                  move.w  inertia(a1), D4
00016AD2 0828 0000 0022                             btst    #$00, status(A0)
00016AD8 6700                                       beq.s   Offset_0x018B7E
00016ADA 4444                                       neg.w   D4
00016ADC                            Offset_0x018B7E:
00016ADC 4A44                                       tst.w   D4
00016ADE 6B00                                       bmi.s   Offset_0x018BAA
00016AE0 3829 0008                                  move.w  $0008(A1), D4
00016AE4 B840                                       cmp.w   D0, D4
00016AE6 6500 0000                                  bcs     Offset_0x018BAA
00016AEA B841                                       cmp.w   D1, D4
00016AEC 6400 0000                                  bcc     Offset_0x018BAA
00016AF0 3829 000C                                  move.w  $000C(A1), D4
00016AF4 B842                                       cmp.w   D2, D4
00016AF6 6500 0000                                  bcs     Offset_0x018BAA
00016AFA B843                                       cmp.w   D3, D4
00016AFC 6400 0000                                  bcc     Offset_0x018BAA
00016B00 3F00                                       move.w  D0, -(A7)
00016B02 6100 FEB0                                  bsr     Offset_0x018A5C
00016B06 301F                                       move.w  (A7)+, D0
00016B08                            Offset_0x018BAA:
00016B08                            ;                lea     ($FFFFB040).w, A1
00016B08                             ;               btst    #$01, status(A1)
00016B08                              ;              bne.s   Offset_0x018BEC
00016B08                               ;             move.w  inertia(a1), D4
00016B08                                ;            btst    #$00, status(A0)
00016B08                                 ;           beq.s   Offset_0x018BC4
00016B08                                  ;          neg.w   D4
00016B08                            ;Offset_0x018BC4:
00016B08                             ;               tst.w   D4
00016B08                              ;              bmi.s   Offset_0x018BEC
00016B08                               ;             move.w  $0008(A1), D4
00016B08                                ;            cmp.w   D0, D4
00016B08                                 ;           bcs     Offset_0x018BEC
00016B08                                  ;          cmp.w   D1, D4
00016B08                                   ;         bcc     Offset_0x018BEC
00016B08                                    ;        move.w  $000C(A1), D4
00016B08                                     ;       cmp.w   D2, D4
00016B08                                      ;      bcs     Offset_0x018BEC
00016B08                                       ;     cmp.w   D3, D4
00016B08                                        ;    bcc     Offset_0x018BEC
00016B08                                        ;    bsr     Offset_0x018A5C
00016B08                            Offset_0x018BEC:
00016B08 4E75                                       rts
00016B0A                            Obj41_Down:
00016B0A 323C 001B                                  move.w  #$001B, D1
00016B0E 343C 0008                                  move.w  #$0008, D2
00016B12 363C 0010                                  move.w  #$0010, D3
00016B16 3828 0008                                  move.w  $0008(A0), D4
00016B1A                            ;                lea     ($FFFFB000).w, A1
00016B1A                             ;               moveq   #$03, D6
00016B1A                              ;              movem.l D1-D4, -(A7)
00016B1A 6100 0000                                  bsr     SolidObject                       ; Offset_0x0196FC
00016B1E                               ;             cmpi.w  #$FFFE, D4
00016B1E                                ;            bne.s   Offset_0x018C14
00016B1E                                 ;           bsr.s   Offset_0x018C34
00016B1E                            ;Offset_0x018C14:
00016B1E                             ;               movem.l (A7)+, D1-D4
00016B1E                              ;              lea     ($FFFFB040).w, A1
00016B1E                               ;             moveq   #$03, D6	; changed to $03 was $04
00016B1E                               ;             bsr     SolidObject                       ; Offset_0x0196FC
00016B1E 4A28 0025                  				tst.b	$25(a0)
00016B22 66E4                       				bne.s	Offset_0x018BEC
00016B24 4A44                       				tst.w	d4
00016B26 6C00                       				bge.s	Offset_0x018C2A
00016B28 6100                                       bsr.s   Offset_0x018C34
00016B2A                            Offset_0x018C2A:
00016B2A 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016B30 6000 BAE6                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016B34                            Offset_0x018C34:
00016B34 317C 0100 001C                             move.w  #$0100, $001C(A0)
00016B3A 5169 000C                                  subq.w  #$08, $000C(A1)
00016B3E 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016B44 4469 0012                                  neg.w   $0012(A1)
00016B48 1028 0028                                  move.b  $0028(A0), D0
00016B4C 6A00                                       bpl.s   Offset_0x018C54
00016B4E 337C 0000 0010                             move.w  #$0000, $0010(A1)
00016B54                            Offset_0x018C54:
00016B54 0800 0000                                  btst    #$00, D0
00016B58 6700                                       beq.s   Offset_0x018C94
00016B5A 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016B60 137C 0001 0027                             move.b  #$01, $0027(A1)
00016B66 137C 0000 001C                             move.b  #$00, $001C(A1)
00016B6C 137C 0000 002C                             move.b  #$00, $002C(A1)
00016B72 137C 0004 002D                             move.b  #$04, $002D(A1)
00016B78 0800 0001                                  btst    #$01, D0
00016B7C 6600                                       bne.s   Offset_0x018C84
00016B7E 137C 0001 002C                             move.b  #$01, $002C(A1)
00016B84                            Offset_0x018C84:
00016B84 0829 0000 0022                             btst    #$00, status(A1)
00016B8A 6700                                       beq.s   Offset_0x018C94
00016B8C 4429 0027                                  neg.b   $0027(A1)
00016B90 4469 0020                                  neg.w   inertia(a1)
00016B94                            Offset_0x018C94:
00016B94 0200 000C                                  andi.b  #$0C, D0
00016B98 0C00 0004                                  cmpi.b  #$04, D0
00016B9C 6600                                       bne.s   Offset_0x018CAA
00016B9E 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016BA4 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016BAA                            Offset_0x018CAA:
00016BAA 0C00 0008                                  cmpi.b  #$08, D0
00016BAE 6600                                       bne.s   Offset_0x018CBC
00016BB0 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016BB6 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016BBC                            Offset_0x018CBC:
00016BBC 08E9 0001 0022                             bset    #$01, status(A1)
00016BC2 08A9 0003 0022                             bclr    #$03, status(A1)
00016BC8 137C 0002 0024                             move.b  #$02, routine(A1)
00016BCE 303C 00B1                  				move.w	#$B1,d0
00016BD2 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016BD8 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016BDE                            Obj41_DiagonallyUp:
00016BDE 323C 001B                                  move.w  #$001B, D1
00016BE2 343C 0010                                  move.w  #$0010, D2
00016BE6 3828 0008                                  move.w  $0008(A0), D4
00016BEA 45FA 0000                                  lea     Offset_0x018F18(PC), A2
00016BEE                            ;                lea     ($FFFFB000).w, A1
00016BEE                             ;               moveq   #$03, D6
00016BEE                              ;              movem.l D1-D4, -(A7)
00016BEE                               ;             bsr     SolidObject                       ; Offset_0x019754
00016BEE                                ;            btst    #$03, status(A0)
00016BEE                                 ;           beq.s   Offset_0x018D00
00016BEE                                  ;          bsr.s   Offset_0x018D22
00016BEE                            ;Offset_0x018D00:
00016BEE                             ;               movem.l (A7)+, D1-D4
00016BEE                              ;              lea     ($FFFFB040).w, A1
00016BEE                               ;             moveq   #$04, D6
00016BEE 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016BF2 0828 0003 0022                             btst    #$03, status(A0) ; changed to $03 was $04
00016BF8 6700                                       beq.s   Offset_0x018D18
00016BFA 6100                                       bsr.s   Offset_0x018D22
00016BFC                            Offset_0x018D18:
00016BFC 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016C02 6000 BA14                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016C06                            Offset_0x018D22:
00016C06 0828 0000 0022                             btst    #$00, status(A0)
00016C0C 6600                                       bne.s   Offset_0x018D38
00016C0E 3028 0008                                  move.w  $0008(A0), D0
00016C12 5940                                       subq.w  #$04, D0
00016C14 B069 0008                                  cmp.w   $0008(A1), D0
00016C18 6500                                       bcs.s   Offset_0x018D46
00016C1A 4E75                                       rts
00016C1C                            Offset_0x018D38:
00016C1C 3028 0008                                  move.w  $0008(A0), D0
00016C20 5840                                       addq.w  #$04, D0
00016C22 B069 0008                                  cmp.w   $0008(A1), D0
00016C26 6400                                       bcc.s   Offset_0x018D46
00016C28 4E75                                       rts
00016C2A                            Offset_0x018D46:
00016C2A 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016C30 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016C36 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016C3C 5C69 000C                                  addq.w  #$06, $000C(A1)
00016C40 5C69 0008                                  addq.w  #$06, $0008(A1)
00016C44 08E9 0000 0022                             bset    #$00, status(A1)
00016C4A 0828 0000 0022                             btst    #$00, status(A0)
00016C50 6600                                       bne.s   Offset_0x018D7E
00016C52 08A9 0000 0022                             bclr    #$00, status(A1)
00016C58 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016C5E 4469 0010                                  neg.w   $0010(A1)
00016C62                            Offset_0x018D7E:
00016C62 08E9 0001 0022                             bset    #$01, status(A1)
00016C68 08A9 0003 0022                             bclr    #$03, status(A1)
00016C6E 137C 0010 001C                             move.b  #$10, $001C(A1)
00016C74 137C 0002 0024                             move.b  #$02, routine(A1)
00016C7A 1028 0028                                  move.b  $0028(A0), D0
00016C7E 0800 0000                                  btst    #$00, D0
00016C82 6700                                       beq.s   Offset_0x018DDA
00016C84 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016C8A 137C 0001 0027                             move.b  #$01, $0027(A1)
00016C90 137C 0000 001C                             move.b  #$00, $001C(A1)
00016C96 137C 0001 002C                             move.b  #$01, $002C(A1)
00016C9C 137C 0008 002D                             move.b  #$08, $002D(A1)
00016CA2 0800 0001                                  btst    #$01, D0
00016CA6 6600                                       bne.s   Offset_0x018DCA
00016CA8 137C 0003 002C                             move.b  #$03, $002C(A1)
00016CAE                            Offset_0x018DCA:
00016CAE 0829 0000 0022                             btst    #$00, status(A1)
00016CB4 6700                                       beq.s   Offset_0x018DDA
00016CB6 4429 0027                                  neg.b   $0027(A1)
00016CBA 4469 0020                                  neg.w   inertia(a1)
00016CBE                            Offset_0x018DDA:
00016CBE 0200 000C                                  andi.b  #$0C, D0
00016CC2 0C00 0004                                  cmpi.b  #$04, D0
00016CC6 6600                                       bne.s   Offset_0x018DF0
00016CC8 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016CCE 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016CD4                            Offset_0x018DF0:
00016CD4 0C00 0008                                  cmpi.b  #$08, D0
00016CD8 6600                                       bne.s   Offset_0x018E02
00016CDA 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016CE0 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016CE6                            Offset_0x018E02:
00016CE6 303C 00B1                  				move.w	#$B1,d0
00016CEA 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016CF0 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016CF6                            Obj41_DiagonallyDown:
00016CF6 323C 001B                                  move.w  #$001B, D1
00016CFA 343C 0010                                  move.w  #$0010, D2
00016CFE 3828 0008                                  move.w  $0008(A0), D4
00016D02 45FA 0000                                  lea     Offset_0x018F34(PC), A2
00016D06                             ;               lea     ($FFFFB000).w, A1
00016D06                              ;              moveq   #$03, D6
00016D06                               ;             movem.l D1-D4, -(A7)
00016D06                            ;                bsr     SolidObject                       ; Offset_0x019754
00016D06                             ;               cmpi.w  #$FFFE, D4
00016D06                              ;              bne.s   Offset_0x018E32
00016D06                               ;             bsr.s   Offset_0x018E54
00016D06                            ;Offset_0x018E32:
00016D06                             ;               movem.l (A7)+, D1-D4
00016D06                              ;              lea     ($FFFFB040).w, A1
00016D06                               ;             moveq   #$04, D6
00016D06 6100 0000                                  bsr     SolidObject                       ; Offset_0x019754
00016D0A 4A28 0025                  				tst.b	$25(a0)
00016D0E 6600                       				bne.s	Jmpto_Offset_0x018BEC
00016D10 4A44                                       tst.w	 D4
00016D12 6C00                                       bge.s   Offset_0x018E48
00016D14 6100                                       bsr.s   Offset_0x018E54
00016D16                            Offset_0x018E48:
00016D16 43F9 0000 0000                             lea     (Springs_Animate_Data), A1             ; Offset_0x018F50
00016D1C 6000 B8FA                                  bra     AnimateSprite                          ; Offset_0x0164CA
00016D20 4E75                                       rts
00016D22                            Jmpto_Offset_0x018BEC:
00016D22 4EFA FDE4                  				jmp	Offset_0x018BEC	
00016D26                            Offset_0x018E54:
00016D26 317C 0500 001C                             move.w  #$0500, $001C(A0)
00016D2C 3368 0030 0012                             move.w  $0030(A0), $0012(A1)
00016D32 4469 0012                                  neg.w   $0012(A1)
00016D36 3368 0030 0010                             move.w  $0030(A0), $0010(A1)
00016D3C 5D69 000C                                  subq.w  #$06, $000C(A1)
00016D40 5C69 0008                                  addq.w  #$06, $0008(A1)
00016D44 08E9 0000 0022                             bset    #$00, status(A1)
00016D4A 0828 0000 0022                             btst    #$00, status(A0)
00016D50 6600                                       bne.s   Offset_0x018E90
00016D52 08A9 0000 0022                             bclr    #$00, status(A1)
00016D58 0469 000C 0008                             subi.w  #$000C, $0008(A1)
00016D5E 4469 0010                                  neg.w   $0010(A1)
00016D62                            Offset_0x018E90:
00016D62 08E9 0001 0022                             bset    #$01, status(A1)
00016D68 08A9 0003 0022                             bclr    #$03, status(A1)
00016D6E 137C 0002 0024                             move.b  #$02, routine(A1)
00016D74 1028 0028                                  move.b  $0028(A0), D0
00016D78 0800 0000                                  btst    #$00, D0
00016D7C 6700                                       beq.s   Offset_0x018EE6
00016D7E 337C 0001 0020                             move.w  #$0001, inertia(a1)
00016D84 137C 0001 0027                             move.b  #$01, $0027(A1)
00016D8A 137C 0000 001C                             move.b  #$00, $001C(A1)
00016D90 137C 0001 002C                             move.b  #$01, $002C(A1)
00016D96 137C 0008 002D                             move.b  #$08, $002D(A1)
00016D9C 0800 0001                                  btst    #$01, D0
00016DA0 6600                                       bne.s   Offset_0x018ED6
00016DA2 137C 0003 002C                             move.b  #$03, $002C(A1)
00016DA8                            Offset_0x018ED6:
00016DA8 0829 0000 0022                             btst    #$00, status(A1)
00016DAE 6700                                       beq.s   Offset_0x018EE6
00016DB0 4429 0027                                  neg.b   $0027(A1)
00016DB4 4469 0020                                  neg.w   inertia(a1)
00016DB8                            Offset_0x018EE6:
00016DB8 0200 000C                                  andi.b  #$0C, D0
00016DBC 0C00 0004                                  cmpi.b  #$04, D0
00016DC0 6600                                       bne.s   Offset_0x018EFC
00016DC2 137C 000C 003E                             move.b  #$0C, $003E(A1)
00016DC8 137C 000D 003F                             move.b  #$0D, $003F(A1)
00016DCE                            Offset_0x018EFC:
00016DCE 0C00 0008                                  cmpi.b  #$08, D0
00016DD2 6600                                       bne.s   Offset_0x018F0E
00016DD4 137C 000E 003E                             move.b  #$0E, $003E(A1)
00016DDA 137C 000F 003F                             move.b  #$0F, $003F(A1)
00016DE0                            Offset_0x018F0E:
00016DE0 303C 00B1                  				move.w	#$B1,d0
00016DE4 4EB9 0000 325C             				jsr	(PlaySound_Special).l ;	play spring sound
00016DEA 31FC 0000 FC00             				move.w	#0,($FFFFFC00).w	; clear screen delay counter
00016DF0                            ;-------------------------------------------------------------------------------                   
00016DF0                            Offset_0x018F18:
00016DF0 1010 1010 1010 1010 1010+                  dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $0E, $0C, $0A, $08
00016E00 0604 0200 FEFC FCFC FCFC+                  dc.b    $06, $04, $02, $00, $FE, $FC, $FC, $FC, $FC, $FC, $FC, $FC
00016E0C                            ;-------------------------------------------------------------------------------                
00016E0C                            Offset_0x018F34:
00016E0C F4F0 F0F0 F0F0 F0F0 F0F0+                  dc.b    $F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
00016E1C FAFC FE00 0204 0404 0404+                  dc.b    $FA, $FC, $FE, $00, $02, $04, $04, $04, $04, $04, $04, $04
00016E28                            ;-------------------------------------------------------------------------------
00016E28                            Springs_Animate_Data: ; Offset_0x018F50:
00016E28 0000                                       dc.w    Offset_0x018F5C-Springs_Animate_Data
00016E2A 0000                                       dc.w    Offset_0x018F60-Springs_Animate_Data
00016E2C 0000                                       dc.w    Offset_0x018F6C-Springs_Animate_Data
00016E2E 0000                                       dc.w    Offset_0x018F70-Springs_Animate_Data
00016E30 0000                                       dc.w    Offset_0x018F7C-Springs_Animate_Data
00016E32 0000                                       dc.w    Offset_0x018F80-Springs_Animate_Data
00016E34                            Offset_0x018F5C:
00016E34 0F00 FF00                                  dc.b    $0F, $00, $FF, $00
00016E38                            Offset_0x018F60:
00016E38 0001 0000 0202 0202 0202+                  dc.b    $00, $01, $00, $00, $02, $02, $02, $02, $02, $02, $FD, $00
00016E44                            Offset_0x018F6C:
00016E44 0F03 FF00                                  dc.b    $0F, $03, $FF, $00
00016E48                            Offset_0x018F70:
00016E48 0004 0303 0505 0505 0505+                  dc.b    $00, $04, $03, $03, $05, $05, $05, $05, $05, $05, $FD, $02
00016E54                            Offset_0x018F7C:
00016E54 0F07 FF00                                  dc.b    $0F, $07, $FF, $00
00016E58                            Offset_0x018F80:
00016E58 0008 0707 0909 0909 0909+                  dc.b    $00, $08, $07, $07, $09, $09, $09, $09, $09, $09, $FD, $04
00016E64                            ;-------------------------------------------------------------------------------
00016E64                            Springs_Mappings_01:
00016E64                            	include "_maps/obj41_s2_2nd.asm"
00016E64                            ; --------------------------------------------------------------------------------
00016E64                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016E64                            ; --------------------------------------------------------------------------------
00016E64                            
00016E64                            SME_Eabw0:	
00016E64 0000 0000                  		dc.w SME_Eabw0_16-SME_Eabw0, SME_Eabw0_21-SME_Eabw0	
00016E68 0000 0000                  		dc.w SME_Eabw0_27-SME_Eabw0, SME_Eabw0_32-SME_Eabw0	
00016E6C 0000 0000                  		dc.w SME_Eabw0_3D-SME_Eabw0, SME_Eabw0_43-SME_Eabw0	
00016E70 0000 0000                  		dc.w SME_Eabw0_4E-SME_Eabw0, SME_Eabw0_59-SME_Eabw0	
00016E74 0000 0000                  		dc.w SME_Eabw0_6E-SME_Eabw0, SME_Eabw0_7E-SME_Eabw0	
00016E78 0000                       		dc.w SME_Eabw0_93-SME_Eabw0	
00016E7A 02                         SME_Eabw0_16:	dc.b 2	
00016E7B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00016E80 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0		
00016E85 01                         SME_Eabw0_21:	dc.b 1
00016E86 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
00016E8B 03                         SME_Eabw0_27:	dc.b 3
00016E8C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00016E91 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00016E96 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
00016E9B 01                         SME_Eabw0_32:	dc.b 1
00016E9C F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
00016EA1 01                         SME_Eabw0_3D:	dc.b 1	
00016EA2 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8	
00016EA7 04                         SME_Eabw0_43:	dc.b 4
00016EA8 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00016EAD F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00016EB2 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00016EB7 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
00016EBC 02                         SME_Eabw0_4E:	dc.b 2	
00016EBD 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00016EC2 F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0	
00016EC7 04                         SME_Eabw0_59:	dc.b 4	
00016EC8 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	
00016ECD 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00016ED2 FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
00016ED7 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016EDC 03                         SME_Eabw0_6E:	dc.b 3	
00016EDD F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00016EE2 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
00016EE7 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016EEC 04                         SME_Eabw0_7E:	dc.b 4	
00016EED E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00016EF2 F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
00016EF7 F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
00016EFC 0005 001C F0               		dc.b 0, 5, 0, $1C, $F0	
00016F01 04                         SME_Eabw0_93:	dc.b 4	
00016F02 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
00016F07 F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
00016F0C F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00016F11 F005 101C F0               		dc.b $F0, 5, $10, $1C, $F0	
00016F16                            		even
00016F16                            		even
00016F16                            	even
00016F16                            ;===============================================================================
00016F16                            ; Obj41 - Springs / vermelhas - diagonal / horizontal / vertical 
00016F16                            ; [ End ]
00016F16                            ;===============================================================================  
00016F16                            Ani_obj41:
00016F16                            	include "_anim\obj41.asm"
00016F16                            ; ---------------------------------------------------------------------------
00016F16                            ; Animation script - springs
00016F16                            ; ---------------------------------------------------------------------------
00016F16 0000                       		dc.w byte_DD02-Ani_obj41
00016F18 0000                       		dc.w byte_DD0E-Ani_obj41
00016F1A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
00016F26 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
00016F32                            		even
00016F32                            		even
00016F32                            
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            ; Sprite mappings - springs
00016F32                            ; ---------------------------------------------------------------------------
00016F32                            Map_obj41:
00016F32                            	include "_maps\obj41_s2_1st.asm"
00016F32                            ; --------------------------------------------------------------------------------
00016F32                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00016F32                            ; --------------------------------------------------------------------------------
00016F32                            
00016F32                            SME_oYuJs:	
00016F32 0000 0000                  		dc.w SME_oYuJs_16-SME_oYuJs, SME_oYuJs_21-SME_oYuJs	
00016F36 0000 0000                  		dc.w SME_oYuJs_27-SME_oYuJs, SME_oYuJs_32-SME_oYuJs	
00016F3A 0000 0000                  		dc.w SME_oYuJs_3D-SME_oYuJs, SME_oYuJs_43-SME_oYuJs	
00016F3E 0000 0000                  		dc.w SME_oYuJs_4E-SME_oYuJs, SME_oYuJs_59-SME_oYuJs	
00016F42 0000 0000                  		dc.w SME_oYuJs_6E-SME_oYuJs, SME_oYuJs_7E-SME_oYuJs	
00016F46 0000                       		dc.w SME_oYuJs_93-SME_oYuJs	
00016F48 02                         SME_oYuJs_16:	dc.b 2
00016F49 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
00016F4E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0	
00016F53 01                         SME_oYuJs_21:	dc.b 1
00016F54 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0	
00016F59 03                         SME_oYuJs_27:	dc.b 3
00016F5A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
00016F5F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00016F64 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0	
00016F69 01                         SME_oYuJs_32:	dc.b 1
00016F6A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8	
00016F6F 01                         SME_oYuJs_3D:	dc.b 1	
00016F70 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
00016F75 04                         SME_oYuJs_43:	dc.b 4
00016F76 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
00016F7B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
00016F80 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
00016F85 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8	
00016F8A 02                         SME_oYuJs_4E:	dc.b 2	
00016F8B 000C 1000 F0               		dc.b 0, $C, $10, 0, $F0	
00016F90 F80C 1004 F0               		dc.b $F8,	$C, $10, 4, $F0
00016F95 04                         SME_oYuJs_59:	dc.b 4	
00016F96 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00016F9B 0005 0008 00               		dc.b 0, 5, 0, 8, 0	
00016FA0 FB05 000C F6               		dc.b $FB, 5, 0, $C, $F6	
00016FA5 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FAA 03                         SME_oYuJs_6E:	dc.b 3	
00016FAB F60D 0000 EA               		dc.b $F6, $D, 0, 0, $EA	
00016FB0 0605 0008 FA               		dc.b 6, 5, 0, 8, $FA	
00016FB5 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FBA 04                         SME_oYuJs_7E:	dc.b 4	
00016FBB E60D 0000 FB               		dc.b $E6, $D, 0, 0, $FB	
00016FC0 F605 0008 0B               		dc.b $F6, 5, 0, 8, $B	
00016FC5 F30B 0010 F6               		dc.b $F3, $B, 0, $10, $F6	
00016FCA 0005 201C F0               		dc.b 0, 5, $20, $1C, $F0	
00016FCF 04                         SME_oYuJs_93:	dc.b 4	
00016FD0 000D 1000 F0               		dc.b 0, $D, $10, 0, $F0	
00016FD5 F005 1008 00               		dc.b $F0, 5, $10, 8, 0	
00016FDA F505 100C F6               		dc.b $F5, 5, $10, $C, $F6	
00016FDF F005 301C F0               		dc.b $F0, 5, $30, $1C, $F0	
00016FE4                            		even
00016FE4                            		even
00016FE4                            
00016FE4                            ; ===========================================================================
00016FE4                            ; ---------------------------------------------------------------------------
00016FE4                            ; Object 42 - Newtron enemy (GHZ)
00016FE4                            ; ---------------------------------------------------------------------------
00016FE4                            
00016FE4                            Obj42:					; XREF: Obj_Index
00016FE4 7000                       		moveq	#0,d0
00016FE6 1028 0024                  		move.b	routine(a0),d0
00016FEA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
00016FEE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
00016FF2                            ; ===========================================================================
00016FF2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
00016FF4 0000                       		dc.w Obj42_Action-Obj42_Index
00016FF6 0000                       		dc.w Obj42_Delete-Obj42_Index
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            Obj42_Main:				; XREF: Obj42_Index
00016FF8 5428 0024                  		addq.b	#2,routine(a0)
00016FFC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
00017004 317C 049B 0002             		move.w	#$49B,2(a0)
0001700A 117C 0004 0001             		move.b	#4,1(a0)
00017010 317C 0200 0018             		move.w	#$200,priority(a0)
00017016 117C 0014 0023             		move.b	#$14,width_pixels(a0)
0001701C 117C 0010 0016             		move.b	#$10,$16(a0)
00017022 117C 0008 0017             		move.b	#8,$17(a0)
00017028                            
00017028                            Obj42_Action:				; XREF: Obj42_Index
00017028 7000                       		moveq	#0,d0
0001702A 1028 0025                  		move.b	routine_secondary(a0),d0
0001702E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
00017032 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
00017036 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0001703C 4EBA B5DA                  		jsr	AnimateSprite
00017040 6000 0000                  		bra.w	MarkObjGone
00017044                            ; ===========================================================================
00017044 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
00017046 0000                       		dc.w Obj42_Type00-Obj42_Index2
00017048 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0001704A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0001704C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0001704E                            ; ===========================================================================
0001704E                            
0001704E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0001704E 08E8 0000 0022             		bset	#0,status(a0)
00017054 3038 D008                  		move.w	($FFFFD008).w,d0
00017058 9068 0008                  		sub.w	8(a0),d0
0001705C 6400                       		bcc.s	loc_DDEA
0001705E 4440                       		neg.w	d0
00017060 08A8 0000 0022             		bclr	#0,status(a0)
00017066                            
00017066                            loc_DDEA:
00017066 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001706A 6400                       		bcc.s	locret_DE12	; if not, branch
0001706C 5428 0025                  		addq.b	#2,routine_secondary(a0)
00017070 117C 0001 001C             		move.b	#1,anim(a0)
00017076 4A28 0028                  		tst.b	subtype(a0)		; check	object type
0001707A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0001707C 317C 249B 0002             		move.w	#$249B,2(a0)
00017082 117C 0008 0025             		move.b	#8,routine_secondary(a0)	; run type 01 newtron subroutine
00017088 117C 0004 001C             		move.b	#4,anim(a0)	; use different	animation
0001708E                            
0001708E                            locret_DE12:
0001708E 4E75                       		rts	
00017090                            ; ===========================================================================
00017090                            
00017090                            Obj42_Type00:				; XREF: Obj42_Index2
00017090 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; has "appearing" animation finished?
00017096 6400                       		bcc.s	Obj42_Fall	; is yes, branch
00017098 08E8 0000 0022             		bset	#0,status(a0)
0001709E 3038 D008                  		move.w	($FFFFD008).w,d0
000170A2 9068 0008                  		sub.w	8(a0),d0
000170A6 6400                       		bcc.s	locret_DE32
000170A8 08A8 0000 0022             		bclr	#0,status(a0)
000170AE                            
000170AE                            locret_DE32:
000170AE 4E75                       		rts	
000170B0                            ; ===========================================================================
000170B0                            
000170B0                            Obj42_Fall:				; XREF: Obj42_Type00
000170B0 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
000170B6 6600                       		bne.s	loc_DE42
000170B8 117C 000C 0020             		move.b	#$C,collision_flags(a0)
000170BE                            
000170BE                            loc_DE42:
000170BE 4EBA EAF6                  		jsr	ObjectFall
000170C2 4EB9 0000 0000             		jsr	ObjHitFloor
000170C8 4A41                       		tst.w	d1		; has newtron hit the floor?
000170CA 6A00                       		bpl.s	locret_DE86	; if not, branch
000170CC D368 000C                  		add.w	d1,$C(a0)
000170D0 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop newtron falling
000170D6 5428 0025                  		addq.b	#2,routine_secondary(a0)
000170DA 117C 0002 001C             		move.b	#2,anim(a0)
000170E0 0828 0005 0002             		btst	#5,2(a0)
000170E6 6700                       		beq.s	Obj42_Move
000170E8 5228 001C                  		addq.b	#1,anim(a0)
000170EC                            
000170EC                            Obj42_Move:
000170EC 117C 000D 0020             		move.b	#$D,collision_flags(a0)
000170F2 317C 0200 0010             		move.w	#$200,x_vel(a0)	; move newtron horizontally
000170F8 0828 0000 0022             		btst	#0,status(a0)
000170FE 6600                       		bne.s	locret_DE86
00017100 4468 0010                  		neg.w	x_vel(a0)
00017104                            
00017104                            locret_DE86:
00017104 4E75                       		rts	
00017106                            ; ===========================================================================
00017106                            
00017106                            Obj42_MatchFloor:			; XREF: Obj42_Index2
00017106 4EBA EACE                  		jsr	SpeedToPos
0001710A 4EB9 0000 0000             		jsr	ObjHitFloor
00017110 0C41 FFF8                  		cmpi.w	#-8,d1
00017114 6D00                       		blt.s	loc_DEA2
00017116 0C41 000C                  		cmpi.w	#$C,d1
0001711A 6C00                       		bge.s	loc_DEA2
0001711C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
00017120 4E75                       		rts	
00017122                            ; ===========================================================================
00017122                            
00017122                            loc_DEA2:
00017122 5428 0025                  		addq.b	#2,routine_secondary(a0)
00017126 4E75                       		rts	
00017128                            ; ===========================================================================
00017128                            
00017128                            Obj42_Speed:				; XREF: Obj42_Index2
00017128 4EBA EAAC                  		jsr	SpeedToPos
0001712C 4E75                       		rts	
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            Obj42_Type01:				; XREF: Obj42_Index2
0001712E 0C28 0001 001A             		cmpi.b	#1,mapping_frame(a0)
00017134 6600                       		bne.s	Obj42_FireMissile
00017136 117C 000C 0020             		move.b	#$C,collision_flags(a0)
0001713C                            
0001713C                            Obj42_FireMissile:
0001713C 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
00017142 6600                       		bne.s	locret_DF14
00017144 4A28 0032                  		tst.b	$32(a0)
00017148 6600                       		bne.s	locret_DF14
0001714A 117C 0001 0032             		move.b	#1,$32(a0)
00017150 6100 F5B6                  		bsr.w	SingleObjLoad
00017154 6600                       		bne.s	locret_DF14
00017156 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0001715A 3368 0008 0008             		move.w	8(a0),8(a1)
00017160 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017166 5169 000C                  		subq.w	#8,$C(a1)
0001716A 337C 0200 0010             		move.w	#$200,x_vel(a1)
00017170 303C 0014                  		move.w	#$14,d0
00017174 0828 0000 0022             		btst	#0,status(a0)
0001717A 6600                       		bne.s	loc_DF04
0001717C 4440                       		neg.w	d0
0001717E 4469 0010                  		neg.w	x_vel(a1)
00017182                            
00017182                            loc_DF04:
00017182 D169 0008                  		add.w	d0,8(a1)
00017186 1368 0022 0022             		move.b	status(a0),status(a1)
0001718C 137C 0001 0028             		move.b	#1,subtype(a1)
00017192                            
00017192                            locret_DF14:
00017192 4E75                       		rts	
00017194                            ; ===========================================================================
00017194                            
00017194                            Obj42_Delete:				; XREF: Obj42_Index
00017194 7000                       		moveq	#0,d0
00017196 3028 0014                          move.w	respawn_index(a0),d0	; get address in respawn table
0001719A 3440                       	    movea.w	d0,a2				; load address into a2
0001719C 0892 0007                  	    bclr	#7,(a2)				; clear respawn table entry, so object can be loaded again
000171A0 6000 EA4E                  		bra.w	DeleteObject
000171A4                            ; ===========================================================================
000171A4                            Ani_obj42:
000171A4                            	include "_anim\obj42.asm"
000171A4                            ; ---------------------------------------------------------------------------
000171A4                            ; Animation script - Newtron enemy
000171A4                            ; ---------------------------------------------------------------------------
000171A4 0000                       		dc.w byte_DF24-Ani_obj42
000171A6 0000                       		dc.w byte_DF28-Ani_obj42
000171A8 0000                       		dc.w byte_DF30-Ani_obj42
000171AA 0000                       		dc.w byte_DF34-Ani_obj42
000171AC 0000                       		dc.w byte_DF38-Ani_obj42
000171AE 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
000171B2 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
000171BA 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
000171BE 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
000171C2 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
000171CC                            		even
000171CC                            		even
000171CC                            
000171CC                            ; ---------------------------------------------------------------------------
000171CC                            ; Sprite mappings - Newtron enemy (GHZ)
000171CC                            ; ---------------------------------------------------------------------------
000171CC                            Map_obj42:
000171CC                            	include "_maps\obj42.asm"
000171CC                            ; ---------------------------------------------------------------------------
000171CC                            ; Sprite mappings - Newtron enemy (GHZ)
000171CC                            ; ---------------------------------------------------------------------------
000171CC 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
000171D0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
000171D4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
000171D8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
000171DC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
000171E0 0000                       		dc.w byte_DFF8-Map_obj42
000171E2 03                         byte_DF58:	dc.b 3
000171E3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
000171E8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000171ED FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000171F2 03                         byte_DF68:	dc.b 3
000171F3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
000171F8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000171FD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00017202 03                         byte_DF78:	dc.b 3
00017203 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
00017208 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001720D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00017212 04                         byte_DF88:	dc.b 4
00017213 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
00017218 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0001721D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00017222 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
00017227 03                         byte_DF9D:	dc.b 3
00017228 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0001722D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00017232 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
00017237 02                         byte_DFAD:	dc.b 2
00017238 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001723D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00017242 03                         byte_DFB8:	dc.b 3
00017243 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017248 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001724D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00017252 03                         byte_DFC8:	dc.b 3
00017253 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017258 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001725D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00017262 03                         byte_DFD8:	dc.b 3
00017263 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017268 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001726D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00017272 03                         byte_DFE8:	dc.b 3
00017273 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00017278 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0001727D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00017282 00                         byte_DFF8:	dc.b 0
00017284 00                         		even
00017284 00                         		even
00017284                            
00017284                            ; ===========================================================================
00017284                            ; ---------------------------------------------------------------------------
00017284                            ; Object 43 - Roller enemy (SYZ)
00017284                            ; ---------------------------------------------------------------------------
00017284                            
00017284                            Obj43:					; XREF: Obj_Index
00017284 7000                       		moveq	#0,d0
00017286 1028 0024                  		move.b	routine(a0),d0
0001728A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0001728E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
00017292                            ; ===========================================================================
00017292 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
00017294 0000                       		dc.w Obj43_Action-Obj43_Index
00017296                            ; ===========================================================================
00017296                            
00017296                            Obj43_Main:				; XREF: Obj43_Index
00017296 117C 000E 0016             		move.b	#$E,$16(a0)
0001729C 117C 0008 0017             		move.b	#8,$17(a0)
000172A2 4EBA E912                  		jsr	ObjectFall
000172A6 4EB9 0000 0000             		jsr	ObjHitFloor
000172AC 4A41                       		tst.w	d1
000172AE 6A00                       		bpl.s	locret_E052
000172B0 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
000172B4 317C 0000 0012             		move.w	#0,y_vel(a0)
000172BA 5428 0024                  		addq.b	#2,routine(a0)
000172BE 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
000172C6 317C 04B8 0002             		move.w	#$4B8,2(a0)
000172CC 117C 0004 0001             		move.b	#4,1(a0)
000172D2 317C 0200 0018             		move.w	#$200,priority(a0)
000172D8 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000172DE                            
000172DE                            locret_E052:
000172DE 4E75                       		rts	
000172E0                            ; ===========================================================================
000172E0                            
000172E0                            Obj43_Action:				; XREF: Obj43_Index
000172E0 7000                       		moveq	#0,d0
000172E2 1028 0025                  		move.b	routine_secondary(a0),d0
000172E6 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
000172EA 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
000172EE 43F9 0000 0000             		lea	(Ani_obj43).l,a1
000172F4 4EBA B322                  		jsr	AnimateSprite
000172F8 4EF9 0000 0000             		jmp MarkObjGone
000172FE                            ; ===========================================================================
000172FE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
00017300 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
00017302 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
00017304 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
00017306                            ; ===========================================================================
00017306                            
00017306                            Obj43_RollChk:				; XREF: Obj43_Index2
00017306 3038 D008                  		move.w	($FFFFD008).w,d0
0001730A 0440 0100                  		subi.w	#$100,d0
0001730E 6500                       		bcs.s	loc_E0D2
00017310 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
00017314 6500                       		bcs.s	loc_E0D2
00017316 5828 0025                  		addq.b	#4,routine_secondary(a0)
0001731A 117C 0002 001C             		move.b	#2,anim(a0)
00017320 317C 0700 0010             		move.w	#$700,x_vel(a0)	; move Roller horizontally
00017326 117C 008E 0020             		move.b	#$8E,collision_flags(a0)	; make Roller invincible
0001732C                            
0001732C                            loc_E0D2:
0001732C 588F                       		addq.l	#4,sp
0001732E 4E75                       		rts	
00017330                            ; ===========================================================================
00017330                            
00017330                            Obj43_RollNoChk:			; XREF: Obj43_Index2
00017330 0C28 0002 001C             		cmpi.b	#2,anim(a0)
00017336 6700                       		beq.s	loc_E0F8
00017338 5368 0030                  		subq.w	#1,$30(a0)
0001733C 6A00                       		bpl.s	locret_E0F6
0001733E 117C 0001 001C             		move.b	#1,anim(a0)
00017344 317C 0700 0010             		move.w	#$700,x_vel(a0)
0001734A 117C 008E 0020             		move.b	#$8E,collision_flags(a0)
00017350                            
00017350                            locret_E0F6:
00017350 4E75                       		rts	
00017352                            ; ===========================================================================
00017352                            
00017352                            loc_E0F8:
00017352 5428 0025                  		addq.b	#2,routine_secondary(a0)
00017356 4E75                       		rts	
00017358                            ; ===========================================================================
00017358                            
00017358                            Obj43_ChkJump:				; XREF: Obj43_Index2
00017358 4EB9 0000 0000             		jsr	Obj43_Stop
0001735E 4EBA E876                  		jsr	SpeedToPos
00017362 4EB9 0000 0000             		jsr	ObjHitFloor
00017368 0C41 FFF8                  		cmpi.w	#-8,d1
0001736C 6D00                       		blt.s	Obj43_Jump
0001736E 0C41 000C                  		cmpi.w	#$C,d1
00017372 6C00                       		bge.s	Obj43_Jump
00017374 D368 000C                  		add.w	d1,$C(a0)
00017378 4E75                       		rts	
0001737A                            ; ===========================================================================
0001737A                            
0001737A                            Obj43_Jump:
0001737A 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001737E 08E8 0000 0032             		bset	#0,$32(a0)
00017384 6700                       		beq.s	locret_E12E
00017386 317C FA00 0012             		move.w	#-$600,y_vel(a0)	; move Roller vertically
0001738C                            
0001738C                            locret_E12E:
0001738C 4E75                       		rts	
0001738E                            ; ===========================================================================
0001738E                            
0001738E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0001738E 4EBA E826                  		jsr	ObjectFall
00017392 4A68 0012                  		tst.w	y_vel(a0)
00017396 6B00                       		bmi.s	locret_E150
00017398 4EB9 0000 0000             		jsr	ObjHitFloor
0001739E 4A41                       		tst.w	d1
000173A0 6A00                       		bpl.s	locret_E150
000173A2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
000173A6 5528 0025                  		subq.b	#2,routine_secondary(a0)
000173AA 317C 0000 0012             		move.w	#0,y_vel(a0)
000173B0                            
000173B0                            locret_E150:
000173B0 4E75                       		rts	
000173B2                            
000173B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000173B2                            
000173B2                            
000173B2                            Obj43_Stop:				; XREF: Obj43_ChkJump
000173B2 4A28 0032                  		tst.b	$32(a0)
000173B6 6B00                       		bmi.s	locret_E188
000173B8 3038 D008                  		move.w	($FFFFD008).w,d0
000173BC 0440 0030                  		subi.w	#$30,d0
000173C0 9068 0008                  		sub.w	8(a0),d0
000173C4 6400                       		bcc.s	locret_E188
000173C6 117C 0000 001C             		move.b	#0,anim(a0)
000173CC 117C 000E 0020             		move.b	#$E,collision_flags(a0)
000173D2 4268 0010                  		clr.w	x_vel(a0)
000173D6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000173DC 117C 0002 0025             		move.b	#2,routine_secondary(a0)
000173E2 08E8 0007 0032             		bset	#7,$32(a0)
000173E8                            
000173E8                            locret_E188:
000173E8 4E75                       		rts	
000173EA                            ; End of function Obj43_Stop
000173EA                            
000173EA                            ; ===========================================================================
000173EA                            Ani_obj43:
000173EA                            	include "_anim\obj43.asm"
000173EA                            ; ---------------------------------------------------------------------------
000173EA                            ; Animation script - Roller enemy
000173EA                            ; ---------------------------------------------------------------------------
000173EA 0000                       		dc.w byte_E190-Ani_obj43
000173EC 0000                       		dc.w byte_E196-Ani_obj43
000173EE 0000                       		dc.w byte_E19C-Ani_obj43
000173F0 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
000173F6 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
000173FC 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
00017402 00                         		even
00017402 00                         		even
00017402                            
00017402                            ; ---------------------------------------------------------------------------
00017402                            ; Sprite mappings - Roller enemy (SYZ)
00017402                            ; ---------------------------------------------------------------------------
00017402                            Map_obj43:
00017402                            	include "_maps\obj43.asm"
00017402                            ; ---------------------------------------------------------------------------
00017402                            ; Sprite mappings - Roller enemy (SYZ)
00017402                            ; ---------------------------------------------------------------------------
00017402 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
00017406 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0001740A 0000                       		dc.w byte_E1CE-Map_obj43
0001740C 02                         byte_E1AC:	dc.b 2
0001740D DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
00017412 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
00017417 02                         byte_E1B7:	dc.b 2
00017418 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001741D FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
00017422 01                         byte_E1C2:	dc.b 1
00017423 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00017428 01                         byte_E1C8:	dc.b 1
00017429 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001742E 01                         byte_E1CE:	dc.b 1
0001742F F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00017434                            		even
00017434                            		even
00017434                            
00017434                            ; ===========================================================================
00017434                            ; ---------------------------------------------------------------------------
00017434                            ; Object 44 - walls (GHZ)
00017434                            ; ---------------------------------------------------------------------------
00017434                            
00017434                            Obj44:					; XREF: Obj_Index
00017434 7000                       		moveq	#0,d0
00017436 1028 0024                  		move.b	routine(a0),d0
0001743A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0001743E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
00017442                            ; ===========================================================================
00017442 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
00017444 0000                       		dc.w Obj44_Solid-Obj44_Index
00017446 0000                       		dc.w Obj44_Display-Obj44_Index
00017448                            ; ===========================================================================
00017448                            
00017448                            Obj44_Main:				; XREF: Obj44_Index
00017448 5428 0024                  		addq.b	#2,routine(a0)
0001744C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
00017454 317C 434C 0002             		move.w	#$434C,2(a0)
0001745A 0028 0004 0001             		ori.b	#4,1(a0)
00017460 117C 0008 0023             		move.b	#8,width_pixels(a0)
00017466 317C 0300 0018             		move.w	#$300,priority(a0)
0001746C 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)	; copy object type number to frame number
00017472 08A8 0004 001A             		bclr	#4,mapping_frame(a0)	; clear	4th bit	(deduct	$10)
00017478 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0001747A 5428 0024                  		addq.b	#2,routine(a0)
0001747E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
00017480                            ; ===========================================================================
00017480                            
00017480                            Obj44_Solid:				; XREF: Obj44_Index
00017480 323C 0013                  		move.w	#$13,d1
00017484 343C 0028                  		move.w	#$28,d2
00017488 4EBA 91D6                  		jsr	Obj44_SolidWall
0001748C                            
0001748C                            Obj44_Display:				; XREF: Obj44_Index
0001748C 4EBA E7AE                  		jsr	DisplaySprite
00017490 4EF9 0000 0000             		jmp MarkObjGone3
00017496                            ; ===========================================================================
00017496                            ; ---------------------------------------------------------------------------
00017496                            ; Sprite mappings - walls (GHZ)
00017496                            ; ---------------------------------------------------------------------------
00017496                            Map_obj44:
00017496                            	include "_maps\obj44.asm"
00017496                            ; ---------------------------------------------------------------------------
00017496                            ; Sprite mappings - walls (GHZ)
00017496                            ; ---------------------------------------------------------------------------
00017496 0000                       		dc.w byte_E256-Map_obj44
00017498 0000                       		dc.w byte_E26B-Map_obj44
0001749A 0000                       		dc.w byte_E280-Map_obj44
0001749C 04                         byte_E256:	dc.b 4
0001749D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
000174A2 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000174A7 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000174AC 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000174B1 04                         byte_E26B:	dc.b 4
000174B2 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
000174B7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000174BC 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000174C1 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000174C6 04                         byte_E280:	dc.b 4
000174C7 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
000174CC F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000174D1 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000174D6 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000174DC 00                         		even
000174DC 00                         		even
000174DC                            
000174DC                            ; ===========================================================================
000174DC                            ; ---------------------------------------------------------------------------
000174DC                            ; Object 13 - lava ball	producer (MZ, SLZ)
000174DC                            ; ---------------------------------------------------------------------------
000174DC                            
000174DC                            Obj13:					; XREF: Obj_Index
000174DC 7000                       		moveq	#0,d0
000174DE 1028 0024                  		move.b	routine(a0),d0
000174E2 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
000174E6 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
000174EA 6000 0000                  		bra.w	Obj14_ChkDel
000174EE                            ; ===========================================================================
000174EE 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
000174F0 0000                       		dc.w Obj13_MakeLava-Obj13_Index
000174F2                            ; ---------------------------------------------------------------------------
000174F2                            ;
000174F2                            ; Lava ball production rates
000174F2                            ;
000174F2 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
000174F8                            ; ===========================================================================
000174F8                            
000174F8                            Obj13_Main:				; XREF: Obj13_Index
000174F8 5428 0024                  		addq.b	#2,routine(a0)
000174FC 1028 0028                  		move.b	subtype(a0),d0
00017500 E848                       		lsr.w	#4,d0
00017502 0240 000F                  		andi.w	#$F,d0
00017506 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0001750C 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; set time delay for lava balls
00017512 0228 000F 0028             		andi.b	#$F,subtype(a0)
00017518                            
00017518                            Obj13_MakeLava:				; XREF: Obj13_Index
00017518 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from time delay
0001751C 6600                       		bne.s	locret_E302	; if time still	remains, branch
0001751E 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)	; reset	time delay
00017524 4EBA EA8E                  		jsr	ChkObjOnScreen
00017528 6600                       		bne.s	locret_E302
0001752A 6100 F1DC                  		bsr.w	SingleObjLoad
0001752E 6600                       		bne.s	locret_E302
00017530 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00017534 3368 0008 0008             		move.w	8(a0),8(a1)
0001753A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017540 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00017546                            
00017546                            locret_E302:
00017546 4E75                       		rts	
00017548                            ; ===========================================================================
00017548                            ; ---------------------------------------------------------------------------
00017548                            ; Object 14 - lava balls (MZ, SLZ)
00017548                            ; ---------------------------------------------------------------------------
00017548                            
00017548                            Obj14:					; XREF: Obj_Index
00017548 7000                       		moveq	#0,d0
0001754A 1028 0024                  		move.b	$24(a0),d0
0001754E 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
00017552 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
00017556 6000 E6E4                  		bra.w	DisplaySprite
0001755A                            ; ===========================================================================
0001755A 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0001755C 0000                       		dc.w Obj14_Action-Obj14_Index
0001755E 0000                       		dc.w Obj14_Delete-Obj14_Index
00017560                            
00017560 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0001756A 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
00017572                            ; ===========================================================================
00017572                            
00017572                            Obj14_Main:				; XREF: Obj14_Index
00017572 5428 0024                  		addq.b	#2,$24(a0)
00017576 117C 0008 0016             		move.b	#8,$16(a0)
0001757C 117C 0008 0017             		move.b	#8,$17(a0)
00017582 217C 0001 344E 0004        		move.l	#Map_obj14,4(a0)
0001758A 317C 0345 0002             		move.w	#$345,2(a0)
00017590 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00017596 6600                       		bne.s	loc_E35A
00017598 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0001759E                            
0001759E                            loc_E35A:
0001759E 117C 0004 0001             		move.b	#4,1(a0)
000175A4 317C 0180 0018             		move.w	#$180,priority(a0)
000175AA 117C 008B 0020             		move.b	#$8B,$20(a0)
000175B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000175B6 4A28 0029                  		tst.b	$29(a0)
000175BA 6700                       		beq.s	Obj14_SetSpeed
000175BC 0668 0100 0018             		addi.w	#$100,priority(a0)
000175C2                            
000175C2                            Obj14_SetSpeed:
000175C2 7000                       		moveq	#0,d0
000175C4 1028 0028                  		move.b	$28(a0),d0
000175C8 D040                       		add.w	d0,d0
000175CA 317B 0094 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
000175D0 117C 0008 0023             		move.b	#8,width_pixels(a0)
000175D6 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
000175DC 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
000175DE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000175E4 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
000175EA 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
000175F0 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
000175F6                            
000175F6                            Obj14_PlaySnd:
000175F6 303C 00AE                  		move.w	#$AE,d0
000175FA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00017600                            
00017600                            Obj14_Action:				; XREF: Obj14_Index
00017600 7000                       		moveq	#0,d0
00017602 1028 0028                  		move.b	$28(a0),d0
00017606 D040                       		add.w	d0,d0
00017608 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0001760C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
00017610 6100 E5C4                  		bsr.w	SpeedToPos
00017614 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0001761A 6100 AFFC                  		bsr.w	AnimateSprite
0001761E                            
0001761E                            Obj14_ChkDel:				; XREF: Obj13
0001761E 4EF9 0000 0000             		jmp		MarkObjGone3
00017624                            ; ===========================================================================
00017624 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
00017628 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0001762C 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
00017630 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
00017634 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
00017636                            ; ===========================================================================
00017636                            ; lavaball types 00-03 fly up and fall back down
00017636                            
00017636                            Obj14_Type00:				; XREF: Obj14_TypeIndex
00017636 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0001763C 3028 0030                  		move.w	$30(a0),d0
00017640 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
00017644 6400                       		bcc.s	loc_E41E	; if not, branch
00017646 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0001764A                            
0001764A                            loc_E41E:
0001764A 08A8 0001 0022             		bclr	#1,$22(a0)
00017650 4A68 0012                  		tst.w	$12(a0)
00017654 6A00                       		bpl.s	locret_E430
00017656 08E8 0001 0022             		bset	#1,$22(a0)
0001765C                            
0001765C                            locret_E430:
0001765C 4E75                       		rts	
0001765E                            ; ===========================================================================
0001765E                            ; lavaball type	04 flies up until it hits the ceiling
0001765E                            
0001765E                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0001765E 08E8 0001 0022             		bset	#1,$22(a0)
00017664 4EB9 0000 0000             		jsr	ObjHitCeiling
0001766A 4A41                       		tst.w	d1
0001766C 6A00                       		bpl.s	locret_E452
0001766E 117C 0008 0028             		move.b	#8,$28(a0)
00017674 117C 0001 001C             		move.b	#1,$1C(a0)
0001767A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
00017680                            
00017680                            locret_E452:
00017680 4E75                       		rts	
00017682                            ; ===========================================================================
00017682                            ; lavaball type	05 falls down until it hits the	floor
00017682                            
00017682                            Obj14_Type05:				; XREF: Obj14_TypeIndex
00017682 08A8 0001 0022             		bclr	#1,$22(a0)
00017688 4EB9 0000 0000             		jsr	ObjHitFloor
0001768E 4A41                       		tst.w	d1
00017690 6A00                       		bpl.s	locret_E474
00017692 117C 0008 0028             		move.b	#8,$28(a0)
00017698 117C 0001 001C             		move.b	#1,$1C(a0)
0001769E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
000176A4                            
000176A4                            locret_E474:
000176A4 4E75                       		rts	
000176A6                            ; ===========================================================================
000176A6                            ; lavaball types 06-07 move sideways
000176A6                            
000176A6                            Obj14_Type06:				; XREF: Obj14_TypeIndex
000176A6 08E8 0000 0022             		bset	#0,$22(a0)
000176AC 76F8                       		moveq	#-8,d3
000176AE 4EB9 0000 0000             		jsr	ObjHitWallLeft
000176B4 4A41                       		tst.w	d1
000176B6 6A00                       		bpl.s	locret_E498
000176B8 117C 0008 0028             		move.b	#8,$28(a0)
000176BE 117C 0003 001C             		move.b	#3,$1C(a0)
000176C4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000176CA                            
000176CA                            locret_E498:
000176CA 4E75                       		rts	
000176CC                            ; ===========================================================================
000176CC                            
000176CC                            Obj14_Type07:				; XREF: Obj14_TypeIndex
000176CC 08A8 0000 0022             		bclr	#0,$22(a0)
000176D2 7608                       		moveq	#8,d3
000176D4 4EB9 0000 0000             		jsr	ObjHitWallRight
000176DA 4A41                       		tst.w	d1
000176DC 6A00                       		bpl.s	locret_E4BC
000176DE 117C 0008 0028             		move.b	#8,$28(a0)
000176E4 117C 0003 001C             		move.b	#3,$1C(a0)
000176EA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
000176F0                            
000176F0                            locret_E4BC:
000176F0 4E75                       		rts	
000176F2                            ; ===========================================================================
000176F2                            
000176F2                            Obj14_Type08:				; XREF: Obj14_TypeIndex
000176F2 4E75                       		rts	
000176F4                            ; ===========================================================================
000176F4                            
000176F4                            Obj14_Delete:				; XREF: Obj14_Index
000176F4 6000 E4FA                  		bra.w	DeleteObject
000176F8                            ; ===========================================================================
000176F8                            Ani_obj14:
000176F8                            	include '_anim\obj14.asm'
000176F8                            ; ---------------------------------------------------------------------------
000176F8                            ; Animation script - lava balls
000176F8                            ; ---------------------------------------------------------------------------
000176F8 0000                       		dc.w byte_E4CC-Ani_obj14
000176FA 0000                       		dc.w byte_E4D2-Ani_obj14
000176FC 0000                       		dc.w byte_E4D6-Ani_obj14
000176FE 0000                       		dc.w byte_E4DC-Ani_obj14
00017700 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
00017706 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0001770A 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
00017710 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
00017714                            		even
00017714                            		even
00017714                            
00017714                            ; ===========================================================================
00017714                            ; ---------------------------------------------------------------------------
00017714                            ; Object 6D - flame thrower (SBZ)
00017714                            ; ---------------------------------------------------------------------------
00017714                            
00017714                            Obj6D:					; XREF: Obj_Index
00017714 7000                       		moveq	#0,d0
00017716 1028 0024                  		move.b	routine(a0),d0
0001771A 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0001771E 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
00017722                            ; ===========================================================================
00017722 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
00017724 0000                       		dc.w Obj6D_Action-Obj6D_Index
00017726                            ; ===========================================================================
00017726                            
00017726                            Obj6D_Main:				; XREF: Obj6D_Index
00017726 5428 0024                  		addq.b	#2,routine(a0)
0001772A 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
00017732 317C 83D9 0002             		move.w	#$83D9,2(a0)
00017738 0028 0004 0001             		ori.b	#4,1(a0)
0001773E 317C 0080 0018             		move.w	#$80,priority(a0)
00017744 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001774A 117C 000C 0023             		move.b	#$C,width_pixels(a0)
00017750 1028 0028                  		move.b	subtype(a0),d0
00017754 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00017758 D040                       		add.w	d0,d0		; multiply by 2
0001775A 3140 0030                  		move.w	d0,$30(a0)
0001775E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00017762 1028 0028                  		move.b	subtype(a0),d0
00017766 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001776A EB48                       		lsl.w	#5,d0		; multiply by $20
0001776C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00017770 117C 000A 0036             		move.b	#$A,$36(a0)
00017776 0828 0001 0022             		btst	#1,status(a0)
0001777C 6700                       		beq.s	Obj6D_Action
0001777E 117C 0002 001C             		move.b	#2,anim(a0)
00017784 117C 0015 0036             		move.b	#$15,$36(a0)
0001778A                            
0001778A                            Obj6D_Action:				; XREF: Obj6D_Index
0001778A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001778E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00017790 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00017796 0868 0000 001C             		bchg	#0,anim(a0)
0001779C 6700                       		beq.s	loc_E57A
0001779E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000177A4 303C 0049                  		move.w	#$49,d0
000177A8 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
000177AE                            
000177AE                            loc_E57A:
000177AE 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
000177B4 4EBA AE62                  		jsr	AnimateSprite
000177B8 117C 0000 0020             		move.b	#0,collision_flags(a0)
000177BE 1028 0036                  		move.b	$36(a0),d0
000177C2 B028 001A                  		cmp.b	mapping_frame(a0),d0
000177C6 6600                       		bne.s	Obj6D_ChkDel
000177C8 117C 00A3 0020             		move.b	#$A3,collision_flags(a0)
000177CE                            
000177CE                            Obj6D_ChkDel:
000177CE 4EF9 0000 0000             		jmp MarkObjGone
000177D4                            ; ===========================================================================
000177D4                            Ani_obj6D:
000177D4                            	include "_anim\obj6D.asm"
000177D4                            ; ---------------------------------------------------------------------------
000177D4                            ; Animation script - flamethrower (SBZ)
000177D4                            ; ---------------------------------------------------------------------------
000177D4 0000                       		dc.w byte_E5C4-Ani_obj6D
000177D6 0000                       		dc.w byte_E5D2-Ani_obj6D
000177D8 0000                       		dc.w byte_E5DC-Ani_obj6D
000177DA 0000                       		dc.w byte_E5EA-Ani_obj6D
000177DC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
000177EA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
000177F4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
00017802 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0001780C                            		even
0001780C                            		even
0001780C                            
0001780C                            ; ---------------------------------------------------------------------------
0001780C                            ; Sprite mappings - flame thrower (SBZ)
0001780C                            ; ---------------------------------------------------------------------------
0001780C                            Map_obj6D:
0001780C                            	include "_maps\obj6D.asm"
0001780C                            ; ---------------------------------------------------------------------------
0001780C                            ; Sprite mappings - flame thrower (SBZ)
0001780C                            ; ---------------------------------------------------------------------------
0001780C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
00017810 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
00017814 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
00017818 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0001781C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
00017820 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
00017824 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
00017828 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0001782C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
00017830 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
00017834 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
00017838 01                         byte_E620:	dc.b 1
00017839 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001783E 02                         byte_E626:	dc.b 2
0001783F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017844 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017849 02                         byte_E631:	dc.b 2
0001784A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001784F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017854 03                         byte_E63C:	dc.b 3
00017855 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001785A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001785F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017864 03                         byte_E64C:	dc.b 3
00017865 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001786A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001786F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017874 04                         byte_E65C:	dc.b 4
00017875 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001787A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001787F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017884 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017889 04                         byte_E671:	dc.b 4
0001788A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001788F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017894 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017899 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001789E 05                         byte_E686:	dc.b 5
0001789F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000178A4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000178A9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000178AE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000178B3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178B8 05                         byte_E6A0:	dc.b 5
000178B9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000178BE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000178C3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000178C8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000178CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178D2 06                         byte_E6BA:	dc.b 6
000178D3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000178D8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000178DD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000178E2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000178E7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000178EC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000178F1 06                         byte_E6D9:	dc.b 6
000178F2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000178F7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000178FC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00017901 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017906 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001790B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00017910 01                         byte_E6F8:	dc.b 1
00017911 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017916 02                         byte_E6FE:	dc.b 2
00017917 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001791C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017921 02                         byte_E709:	dc.b 2
00017922 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017927 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001792C 03                         byte_E714:	dc.b 3
0001792D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017932 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017937 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001793C 03                         byte_E724:	dc.b 3
0001793D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00017942 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017947 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001794C 04                         byte_E734:	dc.b 4
0001794D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017952 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017957 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001795C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017961 04                         byte_E749:	dc.b 4
00017962 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00017967 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001796C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00017971 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00017976 05                         byte_E75E:	dc.b 5
00017977 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0001797C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00017981 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00017986 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001798B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00017990 05                         byte_E778:	dc.b 5
00017991 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00017996 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001799B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000179A0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179A5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179AA 06                         byte_E792:	dc.b 6
000179AB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000179B0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000179B5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000179BA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000179BF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179C4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000179C9 06                         byte_E7B1:	dc.b 6
000179CA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000179CF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000179D4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000179D9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000179DE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000179E3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000179E8                            		even
000179E8                            		even
000179E8                            
000179E8                            ; ===========================================================================
000179E8                            ; ---------------------------------------------------------------------------
000179E8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
000179E8                            ; ---------------------------------------------------------------------------
000179E8                            
000179E8                            Obj46:					; XREF: Obj_Index
000179E8 7000                       		moveq	#0,d0
000179EA 1028 0024                  		move.b	$24(a0),d0
000179EE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
000179F2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
000179F6                            ; ===========================================================================
000179F6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
000179F8 0000                       		dc.w Obj46_Action-Obj46_Index
000179FA                            ; ===========================================================================
000179FA                            
000179FA                            Obj46_Main:				; XREF: Obj46_Index
000179FA 5428 0024                  		addq.b	#2,$24(a0)
000179FE 117C 000F 0016             		move.b	#$F,$16(a0)
00017A04 117C 000F 0017             		move.b	#$F,$17(a0)
00017A0A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
00017A12 317C 4000 0002             		move.w	#$4000,2(a0)
00017A18 117C 0004 0001             		move.b	#4,1(a0)
00017A1E 317C 0180 0018             		move.w	#$180,priority(a0)
00017A24 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017A2A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017A30 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00017A36                            
00017A36                            Obj46_Action:				; XREF: Obj46_Index
00017A36 4A28 0001                  		tst.b	1(a0)
00017A3A 6A00                       		bpl.s	Obj46_ChkDel
00017A3C 7000                       		moveq	#0,d0
00017A3E 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A42 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00017A46 D040                       		add.w	d0,d0
00017A48 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
00017A4C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
00017A50 323C 001B                  		move.w	#$1B,d1
00017A54 343C 0010                  		move.w	#$10,d2
00017A58 363C 0011                  		move.w	#$11,d3
00017A5C 3828 0008                  		move.w	8(a0),d4
00017A60 6100 0000                  		bsr.w	SolidObject
00017A64                            
00017A64                            Obj46_ChkDel:
00017A64 6100 E1D6                  		bsr.w	DisplaySprite
00017A68 4EF9 0000 0000             		jmp MarkObjGone3
00017A6E                            ; ===========================================================================
00017A6E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
00017A70 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
00017A72 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
00017A74 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
00017A76 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
00017A78                            ; ===========================================================================
00017A78                            
00017A78                            Obj46_Type00:				; XREF: Obj46_TypeIndex
00017A78 4E75                       		rts	
00017A7A                            ; ===========================================================================
00017A7A                            
00017A7A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
00017A7A 3038 D008                  		move.w	($FFFFD008).w,d0
00017A7E 9068 0008                  		sub.w	8(a0),d0
00017A82 6400                       		bcc.s	loc_E888
00017A84 4440                       		neg.w	d0
00017A86                            
00017A86                            loc_E888:
00017A86 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00017A8A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
00017A8C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
00017A92                            
00017A92                            Obj46_Type01:				; XREF: Obj46_TypeIndex
00017A92 7000                       		moveq	#0,d0
00017A94 1038 FE74                  		move.b	($FFFFFE74).w,d0
00017A98 0828 0003 0028             		btst	#3,$28(a0)
00017A9E 6700                       		beq.s	loc_E8A8
00017AA0 4440                       		neg.w	d0
00017AA2 0640 0010                  		addi.w	#$10,d0
00017AA6                            
00017AA6                            loc_E8A8:
00017AA6 3228 0030                  		move.w	$30(a0),d1
00017AAA 9240                       		sub.w	d0,d1
00017AAC 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
00017AB0 4E75                       		rts	
00017AB2                            ; ===========================================================================
00017AB2                            
00017AB2                            Obj46_Type03:				; XREF: Obj46_TypeIndex
00017AB2 6100 E122                  		bsr.w	SpeedToPos
00017AB6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
00017ABC 4EB9 0000 0000             		jsr	ObjHitFloor
00017AC2 4A41                       		tst.w	d1		; has the block	hit the	floor?
00017AC4 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00017AC8 D368 000C                  		add.w	d1,$C(a0)
00017ACC 4268 0012                  		clr.w	$12(a0)		; stop the block falling
00017AD0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017AD6 117C 0004 0028             		move.b	#4,$28(a0)
00017ADC 3011                       		move.w	(a1),d0
00017ADE 0240 03FF                  		andi.w	#$3FF,d0
00017AE2 0C40 02E8                  		cmpi.w	#$2E8,d0
00017AE6 6400                       		bcc.s	locret_E8EE
00017AE8 117C 0000 0028             		move.b	#0,$28(a0)
00017AEE                            
00017AEE                            locret_E8EE:
00017AEE 4E75                       		rts	
00017AF0                            ; ===========================================================================
00017AF0                            
00017AF0                            Obj46_Type04:				; XREF: Obj46_TypeIndex
00017AF0 7000                       		moveq	#0,d0
00017AF2 1038 FE70                  		move.b	($FFFFFE70).w,d0
00017AF6 E648                       		lsr.w	#3,d0
00017AF8 3228 0030                  		move.w	$30(a0),d1
00017AFC 9240                       		sub.w	d0,d1
00017AFE 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
00017B02 4E75                       		rts	
00017B04                            ; ===========================================================================
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            Map_obj46:
00017B04                            	include '_maps\obj46.asm'
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00017B04                            ; ---------------------------------------------------------------------------
00017B04 0000                       		dc.w byte_E906-Map_obj46
00017B06 01                         byte_E906:	dc.b 1
00017B07 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00017B0C                            		even
00017B0C                            		even
00017B0C                            
00017B0C                            ; ===========================================================================
00017B0C                            ; ---------------------------------------------------------------------------
00017B0C                            ; Object 12 - lamp (SYZ)
00017B0C                            ; ---------------------------------------------------------------------------
00017B0C                            
00017B0C                            Obj12:					; XREF: Obj_Index
00017B0C 7000                       		moveq	#0,d0
00017B0E 1028 0024                  		move.b	$24(a0),d0
00017B12 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
00017B16 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
00017B1A                            ; ===========================================================================
00017B1A 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
00017B1C 0000                       		dc.w Obj12_Animate-Obj12_Index
00017B1E                            ; ===========================================================================
00017B1E                            
00017B1E                            Obj12_Main:				; XREF: Obj12_Index
00017B1E 5428 0024                  		addq.b	#2,$24(a0)
00017B22 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
00017B2A 317C 0000 0002             		move.w	#0,2(a0)
00017B30 117C 0004 0001             		move.b	#4,1(a0)
00017B36 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017B3C 317C 0300 0018             		move.w	#$300,priority(a0)
00017B42                            
00017B42                            Obj12_Animate:				; XREF: Obj12_Index
00017B42 5328 001E                  		subq.b	#1,$1E(a0)
00017B46 6A00                       		bpl.s	Obj12_ChkDel
00017B48 117C 0007 001E             		move.b	#7,$1E(a0)
00017B4E 5228 001A                  		addq.b	#1,$1A(a0)
00017B52 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00017B58 6500                       		bcs.s	Obj12_ChkDel
00017B5A 117C 0000 001A             		move.b	#0,$1A(a0)
00017B60                            
00017B60                            Obj12_ChkDel:
00017B60 4EF9 0000 0000             		jmp MarkObjGone
00017B66                            ; ===========================================================================
00017B66                            ; ---------------------------------------------------------------------------
00017B66                            ; Sprite mappings - lamp (SYZ)
00017B66                            ; ---------------------------------------------------------------------------
00017B66                            Map_obj12:
00017B66                            	include '_maps\obj12.asm'
00017B66                            ; ---------------------------------------------------------------------------
00017B66                            ; Sprite mappings - lamp (SYZ)
00017B66                            ; ---------------------------------------------------------------------------
00017B66 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
00017B6A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
00017B6E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
00017B72 02                         byte_E98E:	dc.b 2
00017B73 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
00017B78 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
00017B7D 02                         byte_E999:	dc.b 2
00017B7E F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
00017B83 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
00017B88 02                         byte_E9A4:	dc.b 2
00017B89 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
00017B8E 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
00017B93 02                         byte_E9AF:	dc.b 2
00017B94 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
00017B99 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
00017B9E 02                         byte_E9BA:	dc.b 2
00017B9F F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
00017BA4 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
00017BA9 02                         byte_E9C5:	dc.b 2
00017BAA F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
00017BAF 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
00017BB4                            		even
00017BB4                            		even
00017BB4                            
00017BB4                            ; ===========================================================================
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            ; Object 47 - pinball bumper (SYZ)
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            
00017BB4                            ;===============================================================================
00017BB4                            ; Red Ball Bumper With Star
00017BB4                            ; [ Begin ]
00017BB4                            ;===============================================================================
00017BB4                            Obj47:
00017BB4 7000                       		moveq	#0,d0
00017BB6 1028 0024                  		move.b	$24(a0),d0
00017BBA 323B 0000                  		move.w	loc_1B5BA(pc,d0),d1
00017BBE 4EFB 1000                  		jmp	loc_1B5BA(pc,d1)
00017BC2                            loc_1B5BA:
00017BC2 0000                       		dc.w	loc_1B5BE-loc_1B5BA
00017BC4 0000                       		dc.w	loc_1B5EC-loc_1B5BA
00017BC6                            loc_1B5BE:
00017BC6 5428 0024                  		addq.b	#2,$24(a0)
00017BCA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0) 
00017BD2 317C 0380 0002             		move.w	#$380,2(a0)
00017BD8                            ;		bsr	ModifySpriteAttr_2P	
00017BD8 117C 0004 0001             		move.b	#4,1(a0)
00017BDE 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00017BE4 317C 0080 0018             		move.w	#$80,priority(a0)
00017BEA 117C 00D7 0020             		move.b	#$D7,$20(a0)
00017BF0                            loc_1B5EC:
00017BF0 1028 0021                  		move.b	$21(a0),d0
00017BF4 6700 0000                  		beq	loc_1B6BA
00017BF8 43F8 D000                  		lea	($FFFFD000).w,a1
00017BFC 08A8 0000 0021             		bclr	#0,$21(a0)
00017C02 6700                       		beq.s	loc_1B602
00017C04 6100                       		bsr.s	loc_1B618
00017C06                            loc_1B602:
00017C06                            ;		lea	($FFFFD040).w,a1
00017C06                            ;		bclr	#1,$21(a0)
00017C06                            ;		beq.s	loc_1B610
00017C06                            ;		bsr.s	loc_1B618
00017C06                            loc_1B610:
00017C06 4228 0021                  		clr.b	$21(a0)
00017C0A 6000 0000                  		bra	loc_1B6BA
00017C0E                            loc_1B618:
00017C0E 3228 0008                  		move.w	8(a0),d1
00017C12 3428 000C                  		move.w	$C(a0),d2
00017C16 9269 0008                  		sub.w	8(a1),d1
00017C1A 9469 000C                  		sub.w	$C(a1),d2
00017C1E 4EB9 0000 9072             		jsr	CalcAngle	
00017C24 1238 FE04                  		move.b	($FFFFFE04).w,d1
00017C28 0241 0003                  		and.w	#3,d1
00017C2C D041                       		add.w	d1,d0
00017C2E 4EB9 0000 8DA4             		jsr	CalcSine	
00017C34 C3FC F900                  		muls.w	#$F900,d1
00017C38 E081                       		asr.l	#8,d1
00017C3A 3341 0010                  		move.w	d1,$10(a1)
00017C3E C1FC F900                  		muls.w	#$F900,d0
00017C42 E080                       		asr.l	#8,d0
00017C44 3340 0012                  		move.w	d0,$12(a1)
00017C48 08E9 0001 0022             		bset	#1,$22(a1)
00017C4E 08A9 0004 0022             		bclr	#4,$22(a1)
00017C54 08A9 0005 0022             		bclr	#5,$22(a1)
00017C5A 4229 003C                  		clr.b	$3C(a1)
00017C5E 117C 0001 001C             		move.b	#1,$1C(a0)
00017C64 303C 00AA                  		move.w	#$AA,d0
00017C68 4EB8 3212                  		jsr	PlaySound	
00017C6C                            ;		lea	(v_objstate).w,a2
00017C6C 7000                       		moveq	#0,d0
00017C6E 3028 0014                  		move.w	respawn_index(a0),d0
00017C72                            ;        move.w	respawn_index(a0),d0
00017C72 6700                       		beq.s	loc_1B690
00017C74 3440                       	    movea.w	d0,a2
00017C76 0C12 008A                  		cmp.b	#$8A,(a2)
00017C7A 6400                       		bcc.s	loc_1B6B8
00017C7C 5212                       		addq.b	#1,(a2)
00017C7E                            loc_1B690:
00017C7E 7001                       		moveq	#1,d0
00017C80 3649                       		move.w	a1,a3
00017C82 4EB9 0000 0000             		jsr	AddPoints	
00017C88 6100 0000                  		bsr	SingleObjectLoad	
00017C8C 6600                       		bne.s	loc_1B6B8
00017C8E 12BC 0029                  		move.b	#$29,0(a1)
00017C92 3368 0008 0008             		move.w	8(a0),8(a1)
00017C98 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C9E 137C 0004 001A             		move.b	#4,$1A(a1)
00017CA4                            loc_1B6B8:
00017CA4 4E75                       		rts
00017CA6                            loc_1B6BA:
00017CA6 43F9 0000 0000             		lea	(Ani_obj47),a1 
00017CAC 6100 0000                  		bsr	loc_1B716
00017CB0 6000 0000                  		bra	loc_1B710
00017CB4                            ;-------------------------------------------------------------------------------
00017CB4                            Ani_obj47:
00017CB4 0000 0000                  	dc.w byte_319B82-Ani_Obj47,byte_319B85-Ani_Obj47; 0 ; ...
00017CB8 0F00 FF                    byte_319B82:	dc.b  $F,  0,$FF		  ; 0 ;	...
00017CBB 0301 0001 FD00 00          byte_319B85:	dc.b   3,  1,  0,  1,$FD,  0,  0; 0 ; ...
00017CC2                            
00017CC2                            ; ---------------------------------------------------------------------------
00017CC2                            ; Sprite mappings - pinball bumper (SYZ)
00017CC2                            ; ---------------------------------------------------------------------------
00017CC2                            Map_obj47:
00017CC2                            		include	"_maps\RoundBumper.asm"
00017CC2                            ; --------------------------------------------------------------------------------
00017CC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017CC2                            ; --------------------------------------------------------------------------------
00017CC2                            
00017CC2                            SME_jt4_6:	
00017CC2 0000 0000                  		dc.w SME_jt4_6_4-SME_jt4_6, SME_jt4_6_F-SME_jt4_6	
00017CC6 02                         SME_jt4_6_4:	dc.b 2	
00017CC7 F007 0000 F0               		dc.b $F0, 7, 0, 0, $F0	
00017CCC F007 0800 00               		dc.b $F0, 7, 8, 0, 0	
00017CD1 06                         SME_jt4_6_F:	dc.b 6	
00017CD2 F202 0008 E8               		dc.b $F2, 2, 0, 8, $E8	
00017CD7 EA07 000B F0               		dc.b $EA, 7, 0, $B, $F0	
00017CDC 0A04 0013 F0               		dc.b $A, 4, 0, $13, $F0	
00017CE1 F202 0808 10               		dc.b $F2, 2, 8, 8, $10	
00017CE6 EA07 080B 00               		dc.b $EA, 7, 8, $B, 0	
00017CEB 0A04 0813 00               		dc.b $A, 4, 8, $13, 0	
00017CF0                            		even
00017CF0                            		even
00017CF0                            ;===============================================================================
00017CF0                            ; Object 0x44 -> Red Ball Bumper With Star
00017CF0                            ; [ End ]
00017CF0                            ;===============================================================================
00017CF0 4E71                       		nop ; Filler
00017CF2                            loc_1B710:
00017CF2 4EF9 0000 0000             		jmp	MarkObjGone 
00017CF8                            loc_1B716:
00017CF8 4EFA A91E                  		jmp	AnimateSprite 
00017CFC                            
00017CFC                            ; ===========================================================================
00017CFC                            ; ---------------------------------------------------------------------------
00017CFC                            ; Object 0D - signpost at the end of a level
00017CFC                            ; ---------------------------------------------------------------------------
00017CFC                            
00017CFC                            Obj0D:					; XREF: Obj_Index
00017CFC 7000                       		moveq	#0,d0
00017CFE 1028 0024                  		move.b	routine(a0),d0
00017D02 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
00017D06 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
00017D0A 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
00017D10 4EBA A906                  		jsr	AnimateSprite
00017D14 4EBA DF26                  		jsr	DisplaySprite
00017D18 4EF9 0000 0000             		jmp	MarkObjGone3
00017D1E                            ; ===========================================================================
00017D1E 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
00017D20 0000                       		dc.w Obj0D_Touch-Obj0D_Index
00017D22 0000                       		dc.w Obj0D_Spin-Obj0D_Index
00017D24 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
00017D26 0000                       		dc.w locret_ED1A-Obj0D_Index
00017D28                            ; ===========================================================================
00017D28                            
00017D28                            Obj0D_Main:				; XREF: Obj0D_Index
00017D28 5428 0024                  		addq.b	#2,routine(a0)
00017D2C 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
00017D34 317C 0680 0002             		move.w	#$680,2(a0)
00017D3A 117C 0004 0001             		move.b	#4,1(a0)
00017D40 117C 0018 0023             		move.b	#$18,width_pixels(a0)
00017D46 317C 0200 0018             		move.w	#$200,priority(a0)
00017D4C                            
00017D4C                            Obj0D_Touch:				; XREF: Obj0D_Index
00017D4C 3038 D008                  		move.w	($FFFFD008).w,d0
00017D50 9068 0008                  		sub.w	8(a0),d0
00017D54 6500                       		bcs.s	locret_EBBA
00017D56 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00017D5A 6400                       		bcc.s	locret_EBBA	; if not, branch
00017D5C 303C 004D                  		move.w	#$4D,d0
00017D60 4EB9 0000 3212             		jsr	(PlaySound).l	; play signpost	sound
00017D66 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00017D6A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
00017D70 5428 0024                  		addq.b	#2,routine(a0)
00017D74                            
00017D74                            locret_EBBA:
00017D74 4E75                       		rts	
00017D76                            ; ===========================================================================
00017D76                            
00017D76                            Obj0D_Spin:				; XREF: Obj0D_Index
00017D76 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
00017D7A 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
00017D7C 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
00017D82 5228 001C                  		addq.b	#1,anim(a0)	; next spin cycle
00017D86 0C28 0003 001C             		cmpi.b	#3,anim(a0)	; have 3 spin cycles completed?
00017D8C 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
00017D8E 5428 0024                  		addq.b	#2,routine(a0)
00017D92                            
00017D92                            Obj0D_Sparkle:
00017D92 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00017D96 6A00                       		bpl.s	locret_EC42	; if time remains, branch
00017D98 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
00017D9E 7000                       		moveq	#0,d0
00017DA0 1028 0034                  		move.b	$34(a0),d0
00017DA4 5428 0034                  		addq.b	#2,$34(a0)
00017DA8 0228 000E 0034             		andi.b	#$E,$34(a0)
00017DAE 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
00017DB2 4EBA E954                  		jsr	SingleObjLoad
00017DB6 6600                       		bne.s	locret_EC42
00017DB8 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
00017DBC 137C 0006 0024             		move.b	#6,routine(a1)	; jump to ring sparkle subroutine
00017DC2 101A                       		move.b	(a2)+,d0
00017DC4 4880                       		ext.w	d0
00017DC6 D068 0008                  		add.w	8(a0),d0
00017DCA 3340 0008                  		move.w	d0,8(a1)
00017DCE 101A                       		move.b	(a2)+,d0
00017DD0 4880                       		ext.w	d0
00017DD2 D068 000C                  		add.w	$C(a0),d0
00017DD6 3340 000C                  		move.w	d0,$C(a1)
00017DDA 237C 0001 1D0C 0004        		move.l	#Map_obj25,4(a1)
00017DE2 337C 27B2 0002             		move.w	#$27B2,2(a1)
00017DE8 137C 0004 0001             		move.b	#4,1(a1)
00017DEE 337C 0100 0018             		move.w	#$100,priority(a1)
00017DF4 137C 0008 0023             		move.b	#8,width_pixels(a1)
00017DFA                            
00017DFA                            locret_EC42:
00017DFA 4E75                       		rts	
00017DFC                            ; ===========================================================================
00017DFC E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00017DFE 0808                       		dc.b	8,   8
00017E00 F000                       		dc.b -$10,   0
00017E02 18F8                       		dc.b  $18,  -8
00017E04 00F8                       		dc.b	0,  -8
00017E06 1000                       		dc.b  $10,   0
00017E08 E808                       		dc.b -$18,   8
00017E0A 1810                       		dc.b  $18, $10
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            Obj0D_SonicRun:				; XREF: Obj0D_Index
00017E0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00017E10 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00017E14 0838 0001 D022             		btst	#1,($FFFFD022).w
00017E1A 6600                       		bne.s	loc_EC70
00017E1C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00017E22 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00017E28                            
00017E28                            loc_EC70:
00017E28 4A38 D000                  		tst.b	($FFFFD000).w
00017E2C 6700                       		beq.s	loc_EC86
00017E2E 3038 D008                  		move.w	($FFFFD008).w,d0
00017E32 3238 F72A                  		move.w	($FFFFF72A).w,d1
00017E36 0641 0128                  		addi.w	#$128,d1
00017E3A B041                       		cmp.w	d1,d0
00017E3C 6500                       		bcs.s	locret_ECEE
00017E3E                            
00017E3E                            loc_EC86:
00017E3E 5428 0024                  		addq.b	#2,routine(a0)
00017E42                            
00017E42                            ; ---------------------------------------------------------------------------
00017E42                            ; Subroutine to	set up bonuses at the end of an	act
00017E42                            ; ---------------------------------------------------------------------------
00017E42                            
00017E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E42                            
00017E42                            
00017E42                            GotThroughAct:				; XREF: Obj3E_EndAct
00017E42 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00017E46 6600                       		bne.s	locret_ECEE
00017E48 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00017E4E 42B8 FE2C                  		clr.l	($FFFFFE2C).w	; disable shield and invincibility ($FFFFFE2C-$FFFFFE2F)
00017E52 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00017E56                            ;		clr.b	($FFFFFE2E).w
00017E56 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
00017E5C 7010                       		moveq	#$10,d0
00017E5E 4EB9 0000 3728             		jsr	(NewPLC).l	; load title card patterns
00017E64 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00017E6A 7000                       		moveq	#0,d0
00017E6C 1038 FE23                  		move.b	(v_timemin).w,d0
00017E70 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00017E74 7200                       		moveq	#0,d1
00017E76 1238 FE24                  		move.b	(v_timesec).w,d1
00017E7A D041                       		add.w	d1,d0		; add up your time
00017E7C 80FC 000F                  		divu.w	#15,d0		; divide by 15
00017E80 7214                       		moveq	#$14,d1
00017E82 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00017E84 6500                       		bcs.s	loc_ECD0	; if not, branch
00017E86 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00017E88                            
00017E88                            loc_ECD0:
00017E88 D040                       		add.w	d0,d0
00017E8A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00017E90 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00017E94 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00017E98 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00017E9C 303C 0029                  		move.w	#$29,d0
00017EA0 4EB9 0000 3212             		jsr	(PlaySound).l ;	play "Sonic got	through" music
00017EA6 303C 0000                  		move.w	#$0,d0
00017EAA 4EB9 0000 329E             		jsr	(SetTempo).l	; run music at normal speed
00017EB0                            locret_ECEE:
00017EB0 4E75                       		rts	
00017EB2                            ; End of function GotThroughAct
00017EB2                            
00017EB2                            ; ===========================================================================
00017EB2 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00017EC6 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00017EDC                            ; ===========================================================================
00017EDC                            
00017EDC                            locret_ED1A:				; XREF: Obj0D_Index
00017EDC 4E75                       		rts	
00017EDE                            ; ===========================================================================
00017EDE                            Ani_obj0D:
00017EDE                            	include "_anim\obj0D.asm"
00017EDE                            ; ---------------------------------------------------------------------------
00017EDE                            ; Animation script - signpost
00017EDE                            ; ---------------------------------------------------------------------------
00017EDE 0000                       		dc.w byte_ED24-Ani_obj0D
00017EE0 0000                       		dc.w byte_ED28-Ani_obj0D
00017EE2 0000                       		dc.w byte_ED2E-Ani_obj0D
00017EE4 0000                       		dc.w byte_ED34-Ani_obj0D
00017EE6 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
00017EEA 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
00017EF0 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
00017EF6 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
00017EFA 00                         		even
00017EFA 00                         		even
00017EFA                            
00017EFA                            ; ---------------------------------------------------------------------------
00017EFA                            ; Sprite mappings - signpost
00017EFA                            ; ---------------------------------------------------------------------------
00017EFA                            Map_obj0D:
00017EFA                            	include "_maps\obj0D.asm"
00017EFA                            ; ---------------------------------------------------------------------------
00017EFA                            ; Sprite mappings - signpost
00017EFA                            ; ---------------------------------------------------------------------------
00017EFA 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
00017EFE 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
00017F02 0000                       		dc.w byte_ED73-Map_obj0D
00017F04 03                         byte_ED42:	dc.b 3
00017F05 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
00017F0A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
00017F0F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F14 02                         byte_ED52:	dc.b 2
00017F15 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
00017F1A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F1F 02                         byte_ED5D:	dc.b 2
00017F20 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
00017F25 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00017F2A 02                         byte_ED68:	dc.b 2
00017F2B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
00017F30 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
00017F35 03                         byte_ED73:	dc.b 3
00017F36 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
00017F3B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
00017F40 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
00017F46 00                         		even
00017F46 00                         		even
00017F46                            
00017F46                            ; ===========================================================================
00017F46                            ; ---------------------------------------------------------------------------
00017F46                            ; Object 4C - lava geyser / lavafall producer (MZ)
00017F46                            ; ---------------------------------------------------------------------------
00017F46                            
00017F46                            Obj4C:					; XREF: Obj_Index
00017F46 7000                       		moveq	#0,d0
00017F48 1028 0024                  		move.b	routine(a0),d0
00017F4C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
00017F50 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
00017F54 6000 0000                  		bra.w	Obj4D_ChkDel
00017F58                            ; ===========================================================================
00017F58 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
00017F5A 0000                       		dc.w loc_EDCC-Obj4C_Index
00017F5C 0000                       		dc.w loc_EE3E-Obj4C_Index
00017F5E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
00017F60 0000                       		dc.w Obj4C_Display-Obj4C_Index
00017F62 0000                       		dc.w Obj4C_Delete-Obj4C_Index
00017F64                            ; ===========================================================================
00017F64                            
00017F64                            Obj4C_Main:				; XREF: Obj4C_Index
00017F64 5428 0024                  		addq.b	#2,routine(a0)
00017F68 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
00017F70 317C E3A8 0002             		move.w	#$E3A8,2(a0)
00017F76 117C 0004 0001             		move.b	#4,1(a0)
00017F7C 317C 0080 0018             		move.w	#$80,priority(a0)
00017F82 117C 0038 0023             		move.b	#$38,width_pixels(a0)
00017F88 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
00017F8E                            
00017F8E                            loc_EDCC:				; XREF: Obj4C_Index
00017F8E 5368 0032                  		subq.w	#1,$32(a0)
00017F92 6A00                       		bpl.s	locret_EDF0
00017F94 3168 0034 0032             		move.w	$34(a0),$32(a0)
00017F9A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017F9E 3228 000C                  		move.w	$C(a0),d1
00017FA2 B041                       		cmp.w	d1,d0
00017FA4 6400                       		bcc.s	locret_EDF0
00017FA6 0441 0170                  		subi.w	#$170,d1
00017FAA B041                       		cmp.w	d1,d0
00017FAC 6500                       		bcs.s	locret_EDF0
00017FAE 5428 0024                  		addq.b	#2,routine(a0)
00017FB2                            
00017FB2                            locret_EDF0:
00017FB2 4E75                       		rts	
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj4C_MakeLava:				; XREF: Obj4C_Index
00017FB4 5428 0024                  		addq.b	#2,routine(a0)
00017FB8 4EBA E764                  		jsr	SingleObjLoad2
00017FBC 6600                       		bne.s	loc_EE18
00017FBE 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
00017FC2 3368 0008 0008             		move.w	8(a0),8(a1)
00017FC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FCE 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
00017FD4 2348 003C                  		move.l	a0,$3C(a1)
00017FD8                            
00017FD8                            loc_EE18:
00017FD8 117C 0001 001C             		move.b	#1,anim(a0)
00017FDE 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
00017FE2 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00017FE4 117C 0004 001C             		move.b	#4,anim(a0)
00017FEA 6000                       		bra.s	Obj4C_Display
00017FEC                            ; ===========================================================================
00017FEC                            
00017FEC                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00017FEC 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
00017FF0 08E9 0001 0022             		bset	#1,status(a1)
00017FF6 337C FA80 0012             		move.w	#-$580,y_vel(a1)
00017FFC 6000                       		bra.s	Obj4C_Display
00017FFE                            ; ===========================================================================
00017FFE                            
00017FFE                            loc_EE3E:				; XREF: Obj4C_Index
00017FFE 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 (geyser) ?
00018002 6700                       		beq.s	Obj4C_Display	; if yes, branch
00018004 5428 0024                  		addq.b	#2,routine(a0)
00018008 4E75                       		rts	
0001800A                            ; ===========================================================================
0001800A                            
0001800A                            Obj4C_Display:				; XREF: Obj4C_Index
0001800A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00018010 4EBA A606                  		jsr	AnimateSprite
00018014 4EBA DC26                  		jsr	DisplaySprite
00018018 4E75                       		rts	
0001801A                            ; ===========================================================================
0001801A                            
0001801A                            Obj4C_Delete:				; XREF: Obj4C_Index
0001801A 117C 0000 001C             		move.b	#0,anim(a0)
00018020 117C 0002 0024             		move.b	#2,routine(a0)
00018026 4A28 0028                  		tst.b	subtype(a0)
0001802A 6700 DBC4                  		beq.w	DeleteObject
0001802E 4E75                       		rts	
00018030                            ; ===========================================================================
00018030                            ; ---------------------------------------------------------------------------
00018030                            ; Object 4D - lava geyser / lavafall (MZ)
00018030                            ; ---------------------------------------------------------------------------
00018030                            
00018030                            Obj4D:					; XREF: Obj_Index
00018030 7000                       		moveq	#0,d0
00018032 1028 0024                  		move.b	routine(a0),d0
00018036 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0001803A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0001803E 6000 DBFC                  		bra.w	DisplaySprite
00018042                            ; ===========================================================================
00018042 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
00018044 0000                       		dc.w Obj4D_Action-Obj4D_Index
00018046 0000                       		dc.w loc_EFFC-Obj4D_Index
00018048 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0001804A                            
0001804A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0001804E                            ; ===========================================================================
0001804E                            
0001804E                            Obj4D_Main:				; XREF: Obj4D_Index
0001804E 5428 0024                  		addq.b	#2,routine(a0)
00018052 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018058 4A28 0028                  		tst.b	subtype(a0)
0001805C 6700                       		beq.s	loc_EEA4
0001805E 0468 0250 000C             		subi.w	#$250,$C(a0)
00018064                            
00018064                            loc_EEA4:
00018064 7000                       		moveq	#0,d0
00018066 1028 0028                  		move.b	subtype(a0),d0
0001806A D040                       		add.w	d0,d0
0001806C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),y_vel(a0)
00018072 2248                       		movea.l	a0,a1
00018074 7201                       		moveq	#1,d1
00018076 6100                       		bsr.s	Obj4D_MakeLava
00018078 6000                       		bra.s	loc_EF10
0001807A                            ; ===========================================================================
0001807A                            
0001807A                            Obj4D_Loop:
0001807A 4EBA E6A2                  		jsr	SingleObjLoad2
0001807E 6600                       		bne.s	loc_EF0A
00018080                            
00018080                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00018080 12BC 004D                  		move.b	#$4D,0(a1)
00018084 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0001808C 337C 63A8 0002             		move.w	#$63A8,2(a1)
00018092 137C 0004 0001             		move.b	#4,1(a1)
00018098 137C 0020 0023             		move.b	#$20,width_pixels(a1)
0001809E 3368 0008 0008             		move.w	8(a0),8(a1)
000180A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180AA 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
000180B0 337C 0080 0018             		move.w	#$80,priority(a1)
000180B6 137C 0005 001C             		move.b	#5,anim(a1)
000180BC 4A28 0028                  		tst.b	subtype(a0)
000180C0 6700                       		beq.s	loc_EF0A
000180C2 137C 0002 001C             		move.b	#2,anim(a1)
000180C8                            
000180C8                            loc_EF0A:
000180C8 51C9 FFB0                  		dbf	d1,Obj4D_Loop
000180CC 4E75                       		rts	
000180CE                            ; ===========================================================================
000180CE                            
000180CE                            loc_EF10:				; XREF: Obj4D_Main
000180CE 0669 0060 000C             		addi.w	#$60,$C(a1)
000180D4 3368 0030 0030             		move.w	$30(a0),$30(a1)
000180DA 0669 0060 0030             		addi.w	#$60,$30(a1)
000180E0 137C 0093 0020             		move.b	#$93,collision_flags(a1)
000180E6 137C 0080 0016             		move.b	#$80,$16(a1)
000180EC 08E9 0004 0001             		bset	#4,1(a1)
000180F2 5829 0024                  		addq.b	#4,routine(a1)
000180F6 2348 003C                  		move.l	a0,$3C(a1)
000180FA 4A28 0028                  		tst.b	subtype(a0)
000180FE 6700                       		beq.s	Obj4D_PlaySnd
00018100 7200                       		moveq	#0,d1
00018102 4EBA FF76                  		jsr	Obj4D_Loop
00018106 5429 0024                  		addq.b	#2,routine(a1)
0001810A 08E9 0004 0002             		bset	#4,2(a1)
00018110 0669 0100 000C             		addi.w	#$100,$C(a1)
00018116 137C 0000 0018             		move.b	#0,priority(a1)
0001811C 3368 0030 0030             		move.w	$30(a0),$30(a1)
00018122 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00018128 117C 0000 0028             		move.b	#0,subtype(a0)
0001812E                            
0001812E                            Obj4D_PlaySnd:
0001812E 303C 00C2                  		move.w	#$C2,d0
00018132 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flame sound
00018138                            
00018138                            Obj4D_Action:				; XREF: Obj4D_Index
00018138 7000                       		moveq	#0,d0
0001813A 1028 0028                  		move.b	subtype(a0),d0
0001813E D040                       		add.w	d0,d0
00018140 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
00018144 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
00018148 4EBA DA8C                  		jsr	SpeedToPos
0001814C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
00018152 4EBA A4C4                  		jsr	AnimateSprite
00018156                            
00018156                            Obj4D_ChkDel:				; XREF: Obj4C
00018156 4EF9 0000 0000             		jmp	MarkObjGone3
0001815C                            ; ===========================================================================
0001815C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001815E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00018160                            ; ===========================================================================
00018160                            
00018160                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00018160 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
00018166 3028 0030                  		move.w	$30(a0),d0
0001816A B068 000C                  		cmp.w	$C(a0),d0
0001816E 6400                       		bcc.s	locret_EFDA
00018170 5828 0024                  		addq.b	#4,routine(a0)
00018174 2268 003C                  		movea.l	$3C(a0),a1
00018178 137C 0003 001C             		move.b	#3,anim(a1)
0001817E                            
0001817E                            locret_EFDA:
0001817E 4E75                       		rts	
00018180                            ; ===========================================================================
00018180                            
00018180                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00018180 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; increase object's falling speed
00018186 3028 0030                  		move.w	$30(a0),d0
0001818A B068 000C                  		cmp.w	$C(a0),d0
0001818E 6400                       		bcc.s	locret_EFFA
00018190 5828 0024                  		addq.b	#4,routine(a0)
00018194 2268 003C                  		movea.l	$3C(a0),a1
00018198 137C 0001 001C             		move.b	#1,anim(a1)
0001819E                            
0001819E                            locret_EFFA:
0001819E 4E75                       		rts	
000181A0                            ; ===========================================================================
000181A0                            
000181A0                            loc_EFFC:				; XREF: Obj4D_Index
000181A0 2268 003C                  		movea.l	$3C(a0),a1
000181A4 0C29 0006 0024             		cmpi.b	#6,routine(a1)
000181AA 6700 0000                  		beq.w	Obj4D_Delete
000181AE 3029 000C                  		move.w	$C(a1),d0
000181B2 0640 0060                  		addi.w	#$60,d0
000181B6 3140 000C                  		move.w	d0,$C(a0)
000181BA 9068 0030                  		sub.w	$30(a0),d0
000181BE 4440                       		neg.w	d0
000181C0 7208                       		moveq	#8,d1
000181C2 0C40 0040                  		cmpi.w	#$40,d0
000181C6 6C00                       		bge.s	loc_F026
000181C8 720B                       		moveq	#$B,d1
000181CA                            
000181CA                            loc_F026:
000181CA 0C40 0080                  		cmpi.w	#$80,d0
000181CE 6F00                       		ble.s	loc_F02E
000181D0 720E                       		moveq	#$E,d1
000181D2                            
000181D2                            loc_F02E:
000181D2 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000181D6 6A00                       		bpl.s	loc_F04C
000181D8 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
000181DE 5228 001B                  		addq.b	#1,anim_frame(a0)
000181E2 0C28 0002 001B             		cmpi.b	#2,anim_frame(a0)
000181E8 6500                       		bcs.s	loc_F04C
000181EA 117C 0000 001B             		move.b	#0,anim_frame(a0)
000181F0                            
000181F0                            loc_F04C:
000181F0 1028 001B                  		move.b	anim_frame(a0),d0
000181F4 D001                       		add.b	d1,d0
000181F6 1140 001A                  		move.b	d0,mapping_frame(a0)
000181FA 6000 FF5A                  		bra.w	Obj4D_ChkDel
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            Obj4D_Delete:				; XREF: Obj4D_Index
000181FE 6000 D9F0                  		bra.w	DeleteObject
00018202                            ; ===========================================================================
00018202                            ; ---------------------------------------------------------------------------
00018202                            ; Object 4E - advancing	wall of	lava (MZ)
00018202                            ; ---------------------------------------------------------------------------
00018202                            
00018202                            Obj4E:					; XREF: Obj_Index
00018202 7000                       		moveq	#0,d0
00018204 1028 0024                  		move.b	routine(a0),d0
00018208 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0001820C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00018210                            ; ===========================================================================
00018210 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
00018212 0000                       		dc.w Obj4E_Solid-Obj4E_Index
00018214 0000                       		dc.w Obj4E_Action-Obj4E_Index
00018216 0000                       		dc.w Obj4E_Move2-Obj4E_Index
00018218 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            Obj4E_Main:				; XREF: Obj4E_Index
0001821A 5828 0024                  		addq.b	#4,routine(a0)
0001821E 2248                       		movea.l	a0,a1
00018220 7201                       		moveq	#1,d1
00018222 6000                       		bra.s	Obj4E_Main2
00018224                            ; ===========================================================================
00018224                            
00018224                            Obj4E_Loop:
00018224 4EBA E4F8                  		jsr	SingleObjLoad2
00018228 6600                       		bne.s	loc_F0C8
0001822A                            
0001822A                            Obj4E_Main2:				; XREF: Obj4E_Main
0001822A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0001822E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
00018236 337C 63A8 0002             		move.w	#$63A8,2(a1)
0001823C 137C 0004 0001             		move.b	#4,1(a1)
00018242 137C 0050 0023             		move.b	#$50,width_pixels(a1)
00018248 3368 0008 0008             		move.w	8(a0),8(a1)
0001824E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018254 337C 0080 0018             		move.w	#$80,priority(a1)
0001825A 137C 0000 001C             		move.b	#0,anim(a1)
00018260 137C 0094 0020             		move.b	#$94,collision_flags(a1)
00018266 2348 003C                  		move.l	a0,$3C(a1)
0001826A                            
0001826A                            loc_F0C8:
0001826A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001826E                            
0001826E 5C29 0024                  		addq.b	#6,routine(a1)
00018272 137C 0004 001A             		move.b	#4,mapping_frame(a1)
00018278                            
00018278                            Obj4E_Action:				; XREF: Obj4E_Index
00018278 3038 D008                  		move.w	($FFFFD008).w,d0
0001827C 9068 0008                  		sub.w	8(a0),d0
00018280 6400                       		bcc.s	Obj4E_ChkSonic
00018282 4440                       		neg.w	d0
00018284                            
00018284                            Obj4E_ChkSonic:
00018284 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00018288 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001828A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001828E 9068 000C                  		sub.w	$C(a0),d0
00018292 6400                       		bcc.s	loc_F0F4
00018294 4440                       		neg.w	d0
00018296                            
00018296                            loc_F0F4:
00018296 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0001829A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001829C 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
000182A2 6000                       		bra.s	Obj4E_Solid
000182A4                            ; ===========================================================================
000182A4                            
000182A4                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
000182A4 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
000182A8 6700                       		beq.s	Obj4E_Solid	; if not, branch
000182AA 317C 0180 0010             		move.w	#$180,x_vel(a0)	; set object speed
000182B0 5528 0024                  		subq.b	#2,routine(a0)
000182B4                            
000182B4                            Obj4E_Solid:				; XREF: Obj4E_Index
000182B4 323C 002B                  		move.w	#$2B,d1
000182B8 343C 0018                  		move.w	#$18,d2
000182BC 3602                       		move.w	d2,d3
000182BE 5243                       		addq.w	#1,d3
000182C0 3828 0008                  		move.w	8(a0),d4
000182C4 1028 0024                  		move.b	routine(a0),d0
000182C8 3F00                       		move.w	d0,-(sp)
000182CA 4EB9 0000 0000             		jsr	SolidObject
000182D0 301F                       		move.w	(sp)+,d0
000182D2 1140 0024                  		move.b	d0,routine(a0)
000182D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
000182DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
000182DE 4268 0010                  		clr.w	x_vel(a0)		; stop object moving
000182E2 4228 0036                  		clr.b	$36(a0)
000182E6                            
000182E6                            Obj4E_Animate:
000182E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
000182EC 4EBA A32A                  		jsr	AnimateSprite
000182F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000182F6 6400                       		bcc.s	Obj4E_ChkDel
000182F8 4EBA D8DC                  		jsr	SpeedToPos
000182FC                            
000182FC                            Obj4E_ChkDel:
000182FC 4EBA D93E                  		jsr	DisplaySprite
00018300 4A28 0036                  		tst.b	$36(a0)
00018304 6600                       		bne.s	locret_F17E
00018306 3028 0008                  		move.w	8(a0),d0
0001830A 0240 FF80                  		andi.w	#$FF80,d0
0001830E 3238 F700                  		move.w	($FFFFF700).w,d1
00018312 0441 0080                  		subi.w	#$80,d1
00018316 0241 FF80                  		andi.w	#$FF80,d1
0001831A 9041                       		sub.w	d1,d0
0001831C 0C40 0280                  		cmpi.w	#$280,d0
00018320 6200                       		bhi.s	Obj4E_ChkGone
00018322                            
00018322                            locret_F17E:
00018322 4E75                       		rts	
00018324                            ; ===========================================================================
00018324                            
00018324                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
00018324                            ;		lea	(v_objstate).w,a2
00018324 7000                       		moveq	#0,d0
00018326 3028 0014                  		move.w	respawn_index(a0),d0
0001832A                            ;;        move.w	respawn_index(a0),d0
0001832A 3440                       	    movea.w	d0,a2
0001832C 0892 0007                  		bclr	#7,(a2)
00018330 117C 0008 0024             		move.b	#8,routine(a0)
00018336 4E75                       		rts	
00018338                            ; ===========================================================================
00018338                            
00018338                            Obj4E_Move2:				; XREF: Obj4E_Index
00018338 2268 003C                  		movea.l	$3C(a0),a1
0001833C 0C29 0008 0024             		cmpi.b	#8,routine(a1)
00018342 6700                       		beq.s	Obj4E_Delete
00018344 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0001834A 0468 0080 0008             		subi.w	#$80,8(a0)
00018350 6000 D8EA                  		bra.w	DisplaySprite
00018354                            ; ===========================================================================
00018354                            
00018354                            Obj4E_Delete:				; XREF: Obj4E_Index
00018354 6000 D89A                  		bra.w	DeleteObject
00018358                            ; ===========================================================================
00018358                            ; ---------------------------------------------------------------------------
00018358                            ; Object 54 - invisible	lava tag (MZ)
00018358                            ; ---------------------------------------------------------------------------
00018358                            
00018358                            Obj54:					; XREF: Obj_Index
00018358 7000                       		moveq	#0,d0
0001835A 1028 0024                  		move.b	$24(a0),d0
0001835E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00018362 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00018366                            ; ===========================================================================
00018366 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00018368 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0001836A                            
0001836A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0001836E                            ; ===========================================================================
0001836E                            
0001836E                            Obj54_Main:				; XREF: Obj54_Index
0001836E 5428 0024                  		addq.b	#2,$24(a0)
00018372 7000                       		moveq	#0,d0
00018374 1028 0028                  		move.b	$28(a0),d0
00018378 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0001837E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00018386 117C 0084 0001             		move.b	#$84,1(a0)
0001838C                            
0001838C                            Obj54_ChkDel:				; XREF: Obj54_Index
0001838C 4EF9 0000 0000             		jmp		MarkObjGone3
00018392                            ; ===========================================================================
00018392                            ; ---------------------------------------------------------------------------
00018392                            ; Sprite mappings - invisible lava tag (MZ)
00018392                            ; ---------------------------------------------------------------------------
00018392                            Map_obj54:
00018392                            	include '_maps\obj54.asm'
00018392                            ; ---------------------------------------------------------------------------
00018392                            ; Sprite mappings - invisible lava tag (MZ)
00018392                            ; ---------------------------------------------------------------------------
00018392 0000                       		dc.w byte_F212-Map_obj54
00018394 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00018396 00                         		even
00018396 00                         		even
00018396                            
00018396                            Ani_obj4C:
00018396                            	include '_anim\obj4C.asm'
00018396                            ; ---------------------------------------------------------------------------
00018396                            ; Animation script - geyser of lava (MZ)
00018396                            ; ---------------------------------------------------------------------------
00018396 0000                       		dc.w byte_F220-Ani_obj4C
00018398 0000                       		dc.w byte_F22A-Ani_obj4C
0001839A 0000                       		dc.w byte_F22E-Ani_obj4C
0001839C 0000                       		dc.w byte_F232-Ani_obj4C
0001839E 0000                       		dc.w byte_F23A-Ani_obj4C
000183A0 0000                       		dc.w byte_F23E-Ani_obj4C
000183A2 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
000183AC 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
000183B0 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
000183B4 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
000183BC 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
000183C0 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
000183C4                            		even
000183C4                            		even
000183C4                            
000183C4                            Ani_obj4E:
000183C4                            	include '_anim\obj4E.asm'
000183C4                            ; ---------------------------------------------------------------------------
000183C4                            ; Animation script - advancing wall of lava (MZ)
000183C4                            ; ---------------------------------------------------------------------------
000183C4 0000                       		dc.w byte_F244-Ani_obj4E
000183C6 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
000183CC                            		even
000183CC                            		even
000183CC                            
000183CC                            ; ---------------------------------------------------------------------------
000183CC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000183CC                            ; ---------------------------------------------------------------------------
000183CC                            Map_obj4C:
000183CC                            	include '_maps\obj4C.asm'
000183CC                            ; ---------------------------------------------------------------------------
000183CC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000183CC                            ; ---------------------------------------------------------------------------
000183CC 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
000183D0 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
000183D4 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000183D8 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000183DC 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
000183E0 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000183E4 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000183E8 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000183EC 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000183F0 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
000183F4 02                         byte_F272:	dc.b 2
000183F5 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000183FA EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000183FF 02                         byte_F27D:	dc.b 2
00018400 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00018405 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001840A 04                         byte_F288:	dc.b 4
0001840B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00018410 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00018415 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001841A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001841F 04                         byte_F29D:	dc.b 4
00018420 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018425 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001842A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001842F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018434 06                         byte_F2B2:	dc.b 6
00018435 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001843A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001843F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00018444 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00018449 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001844E E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00018453 06                         byte_F2D1:	dc.b 6
00018454 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00018459 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001845E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00018463 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00018468 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001846D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00018472 02                         byte_F2F0:	dc.b 2
00018473 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00018478 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001847D 02                         byte_F2FB:	dc.b 2
0001847E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00018483 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00018488 0A                         byte_F306:	dc.b $A
00018489 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001848E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018493 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00018498 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001849D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000184A2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000184A7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000184AC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000184B1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000184B6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000184BB 0A                         byte_F339:	dc.b $A
000184BC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000184C1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000184C6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000184CB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000184D0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000184D5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000184DA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000184DF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000184E4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000184E9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000184EE 0A                         byte_F36C:	dc.b $A
000184EF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000184F4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000184F9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000184FE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018503 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018508 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001850D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00018512 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018517 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001851C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00018521 06                         byte_F39F:	dc.b 6
00018522 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018527 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001852C B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00018531 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018536 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001853B D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00018540 06                         byte_F3BE:	dc.b 6
00018541 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00018546 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001854B B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00018550 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00018555 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001855A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001855F 06                         byte_F3DD:	dc.b 6
00018560 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018565 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001856A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001856F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018574 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00018579 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001857E 10                         byte_F3FC:	dc.b $10
0001857F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00018584 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00018589 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001858E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00018593 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00018598 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001859D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
000185A2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
000185A7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
000185AC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
000185B1 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
000185B6 300F 0840 00               		dc.b $30, $F, 8, $40, 0
000185BB 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
000185C0 500F 0840 00               		dc.b $50, $F, 8, $40, 0
000185C5 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
000185CA 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000185CF 10                         byte_F44D:	dc.b $10
000185D0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000185D5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000185DA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000185DF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000185E4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000185E9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000185EE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000185F3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000185F8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000185FD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00018602 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
00018607 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0001860C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00018611 500F 0850 00               		dc.b $50, $F, 8, $50, 0
00018616 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001861B 700F 0850 00               		dc.b $70, $F, 8, $50, 0
00018620 10                         byte_F49E:	dc.b $10
00018621 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00018626 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001862B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00018630 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00018635 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001863A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001863F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00018644 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00018649 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001864E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00018653 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00018658 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001865D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00018662 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00018667 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001866C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00018671 06                         byte_F4EF:	dc.b 6
00018672 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00018677 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001867C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00018681 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00018686 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001868B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00018690 06                         byte_F50E:	dc.b 6
00018691 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00018696 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001869B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
000186A0 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
000186A5 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
000186AA D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
000186AF 00                         byte_F52D:	dc.b 0
000186B0                            		even
000186B0                            		even
000186B0                            
000186B0                            ; ---------------------------------------------------------------------------
000186B0                            ; Sprite mappings - advancing wall of lava (MZ)
000186B0                            ; ---------------------------------------------------------------------------
000186B0                            Map_obj4E:
000186B0                            	include '_maps\obj4E.asm'
000186B0                            ; ---------------------------------------------------------------------------
000186B0                            ; Sprite mappings - advancing wall of lava (MZ)
000186B0                            ; ---------------------------------------------------------------------------
000186B0 0000                       		dc.w byte_F538-Map_obj4E
000186B2 0000                       		dc.w byte_F566-Map_obj4E
000186B4 0000                       		dc.w byte_F594-Map_obj4E
000186B6 0000                       		dc.w byte_F5C2-Map_obj4E
000186B8 0000                       		dc.w byte_F5F0-Map_obj4E
000186BA 09                         byte_F538:	dc.b 9
000186BB E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
000186C0 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000186C5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000186CA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000186CF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000186D4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000186D9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000186DE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000186E3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000186E8 09                         byte_F566:	dc.b 9
000186E9 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000186EE 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000186F3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000186F8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000186FD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018702 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018707 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001870C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018711 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018716 09                         byte_F594:	dc.b 9
00018717 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001871C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00018721 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018726 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001872B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018730 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018735 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001873A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001873F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018744 09                         byte_F5C2:	dc.b 9
00018745 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001874A 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001874F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00018754 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018759 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001875E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00018763 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018768 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001876D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00018772 08                         byte_F5F0:	dc.b 8
00018773 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00018778 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001877D E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00018782 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00018787 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001878C 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00018791 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00018796 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001879C 00                         		even
0001879C 00                         		even
0001879C                            
0001879C                            ; ===========================================================================
0001879C                            ; ---------------------------------------------------------------------------
0001879C                            ; Object 40 - Moto Bug enemy (GHZ)
0001879C                            ; ---------------------------------------------------------------------------
0001879C                            
0001879C                            Obj40:					; XREF: Obj_Index
0001879C 7000                       		moveq	#0,d0
0001879E 1028 0024                  		move.b	routine(a0),d0
000187A2 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
000187A6 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
000187AA                            ; ===========================================================================
000187AA 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
000187AC 0000                       		dc.w Obj40_Action-Obj40_Index
000187AE 0000                       		dc.w Obj40_Animate-Obj40_Index
000187B0 0000                       		dc.w Obj40_Delete-Obj40_Index
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            Obj40_Main:				; XREF: Obj40_Index
000187B2 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
000187BA 317C 04F0 0002             		move.w	#$4F0,2(a0)
000187C0 117C 0004 0001             		move.b	#4,1(a0)
000187C6 317C 0200 0018             		move.w	#$200,priority(a0)
000187CC 117C 0014 0023             		move.b	#$14,width_pixels(a0)
000187D2 4A28 001C                  		tst.b	anim(a0)		; is object a smoke trail?
000187D6 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000187D8 117C 000E 0016             		move.b	#$E,$16(a0)
000187DE 117C 0008 0017             		move.b	#8,$17(a0)
000187E4 117C 000C 0020             		move.b	#$C,collision_flags(a0)
000187EA 4EBA D3CA                  		jsr	ObjectFall
000187EE 4EB9 0000 0000             		jsr	ObjHitFloor
000187F4 4A41                       		tst.w	d1
000187F6 6A00                       		bpl.s	locret_F68A
000187F8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000187FC 317C 0000 0012             		move.w	#0,y_vel(a0)
00018802 5428 0024                  		addq.b	#2,routine(a0)
00018806 0868 0000 0022             		bchg	#0,status(a0)
0001880C                            
0001880C                            locret_F68A:
0001880C 4E75                       		rts	
0001880E                            ; ===========================================================================
0001880E                            
0001880E                            Obj40_SetSmoke:				; XREF: Obj40_Main
0001880E 5828 0024                  		addq.b	#4,routine(a0)
00018812 6000 0000                  		bra.w	Obj40_Animate
00018816                            ; ===========================================================================
00018816                            
00018816                            Obj40_Action:				; XREF: Obj40_Index
00018816 7000                       		moveq	#0,d0
00018818 1028 0025                  		move.b	routine_secondary(a0),d0
0001881C 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00018820 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00018824 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001882A 4EBA 9DEC                  		jsr	AnimateSprite
0001882E                            
0001882E                            ; ---------------------------------------------------------------------------
0001882E                            ; Routines to mark an enemy/monitor/ring	as destroyed
0001882E                            ; ---------------------------------------------------------------------------
0001882E                            
0001882E                            RememberState:
0001882E                            MarkObjGone:
0001882E 3028 0008                  		move.w	8(a0),d0
00018832 0240 FF80                  		andi.w	#$FF80,d0
00018836 3238 F700                  		move.w	($FFFFF700).w,d1
0001883A 0441 0080                  		subi.w	#$80,d1
0001883E 0241 FF80                  		andi.w	#$FF80,d1
00018842 9041                       		sub.w	d1,d0
00018844 0C40 0280                  		cmpi.w	#$280,d0
00018848 6200 0000                  		bhi.w	Mark_ChkGone
0001884C 6000 D3EE                  		bra.w	DisplaySprite
00018850                            ; ===========================================================================
00018850                            ; ---------------------------------------------------------------------------
00018850                            ; Subroutine to remember whether an object is destroyed/collected
00018850                            ; ---------------------------------------------------------------------------
00018850                            
00018850                            Mark_ChkGone:
00018850                            ;		lea	(v_objstate).w,a2
00018850                            ;		moveq	#0,d0
00018850 3028 0014                  		move.w	respawn_index(a0),d0
00018854 6700                       		beq.s	Mark_Delete
00018856 3440                       		movea.w	d0,a2
00018858 0892 0007                  		bclr	#7,(a2)
0001885C                            
0001885C                            Mark_Delete:
0001885C 6000 D392                  		bra.w	DeleteObject
00018860                            
00018860                            
00018860                            ; ===========================================================================
00018860 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00018862 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00018864                            
00018864                            ; ---------------------------------------------------------------------------
00018864                            ; input: d0 = the object's x position
00018864                            ; ---------------------------------------------------------------------------
00018864                            
00018864                            MarkObjGone2:
00018864                            
00018864 0240 FF80                  		andi.w	#$FF80,d0
00018868 3238 F700                  		move.w	($FFFFF700).w,d1
0001886C 0441 0080                  		subi.w	#$80,d1
00018870 0241 FF80                  		andi.w	#$FF80,d1
00018874 9041                       		sub.w	d1,d0
00018876 0C40 0280                  		cmpi.w	#$280,d0
0001887A 6200 0000                  		bhi.w	loc_1B5C4
0001887E 6000 D3BC                  		bra.w	DisplaySprite
00018882                            ; ---------------------------------------------------------------------------
00018882                            
00018882                            loc_1B5C4:
00018882                            ;		lea	(v_objstate).w,a2
00018882                            ;		moveq	#0,d0
00018882 3028 0014                  		move.w	respawn_index(a0),d0
00018886 6700                       		beq.s	loc_1B5D0
00018888 3440                       		movea.w	d0,a2
0001888A 0892 0007                  		bclr	#7,(a2)
0001888E                            
0001888E                            loc_1B5D0:
0001888E 6000 D360                  		bra.w	DeleteObject
00018892                            
00018892                            ; ===========================================================================
00018892                            
00018892                            Obj40_Move:				; XREF: Obj40_Index2
00018892 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00018896 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00018898 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001889C 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object to the left
000188A2 117C 0001 001C             		move.b	#1,anim(a0)
000188A8 0868 0000 0022             		bchg	#0,status(a0)
000188AE 6600                       		bne.s	locret_F70A
000188B0 4468 0010                  		neg.w	x_vel(a0)		; change direction
000188B4                            
000188B4                            locret_F70A:
000188B4 4E75                       		rts	
000188B6                            ; ===========================================================================
000188B6                            
000188B6                            Obj40_FixToFloor:			; XREF: Obj40_Index2
000188B6 4EBA D31E                  		jsr	SpeedToPos
000188BA 4EB9 0000 0000             		jsr	ObjHitFloor
000188C0 0C41 FFF8                  		cmpi.w	#-8,d1
000188C4 6D00                       		blt.s	Obj40_Pause
000188C6 0C41 000C                  		cmpi.w	#$C,d1
000188CA 6C00                       		bge.s	Obj40_Pause
000188CC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000188D0 5328 0033                  		subq.b	#1,$33(a0)
000188D4 6A00                       		bpl.s	locret_F756
000188D6 117C 000F 0033             		move.b	#$F,$33(a0)
000188DC 4EBA DE2A                  		jsr	SingleObjLoad
000188E0 6600                       		bne.s	locret_F756
000188E2 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
000188E6 3368 0008 0008             		move.w	8(a0),8(a1)
000188EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188F2 1368 0022 0022             		move.b	status(a0),status(a1)
000188F8 137C 0002 001C             		move.b	#2,anim(a1)
000188FE                            
000188FE                            locret_F756:
000188FE 4E75                       		rts	
00018900                            ; ===========================================================================
00018900                            
00018900                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00018900 5528 0025                  		subq.b	#2,routine_secondary(a0)
00018904 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001890A 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop the object moving
00018910 117C 0000 001C             		move.b	#0,anim(a0)
00018916 4E75                       		rts	
00018918                            ; ===========================================================================
00018918                            
00018918                            Obj40_Animate:				; XREF: Obj40_Index
00018918 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001891E 4EBA 9CF8                  		jsr	AnimateSprite
00018922 6000 D318                  		bra.w	DisplaySprite
00018926                            ; ===========================================================================
00018926                            
00018926                            Obj40_Delete:				; XREF: Obj40_Index
00018926 6000 D2C8                  		bra.w	DeleteObject
0001892A                            ; ===========================================================================
0001892A                            Ani_obj40:
0001892A                            	include "_anim\obj40.asm"
0001892A                            ; ---------------------------------------------------------------------------
0001892A                            ; Animation script - Motobug enemy
0001892A                            ; ---------------------------------------------------------------------------
0001892A 0000                       		dc.w byte_F788-Ani_obj40
0001892C 0000                       		dc.w byte_F78C-Ani_obj40
0001892E 0000                       		dc.w byte_F792-Ani_obj40
00018930 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
00018934 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0001893A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00018948                            		even
00018948                            		even
00018948                            
00018948                            ; ---------------------------------------------------------------------------
00018948                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018948                            ; ---------------------------------------------------------------------------
00018948                            Map_obj40:
00018948                            	include "_maps\obj40.asm"
00018948                            ; ---------------------------------------------------------------------------
00018948                            ; Sprite mappings - Moto Bug enemy (GHZ)
00018948                            ; ---------------------------------------------------------------------------
00018948 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0001894C 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
00018950 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
00018954 0000                       		dc.w byte_F804-Map_obj40
00018956 04                         byte_F7AE:	dc.b 4
00018957 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0001895C 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
00018961 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00018966 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0001896B 04                         byte_F7C3:	dc.b 4
0001896C F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
00018971 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
00018976 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0001897B 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00018980 05                         byte_F7D8:	dc.b 5
00018981 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00018986 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0001898B F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00018990 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00018995 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0001899A 01                         byte_F7F2:	dc.b 1
0001899B FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000189A0 01                         byte_F7F8:	dc.b 1
000189A1 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000189A6 01                         byte_F7FE:	dc.b 1
000189A7 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000189AC 00                         byte_F804:	dc.b 0
000189AE 00                         		even
000189AE 00                         		even
000189AE                            
000189AE                            ; ===========================================================================
000189AE                            
000189AE                            ; ----------------------------------------------------------------------------
000189AE                            ; Object 1B - Speed booster from from CPZ
000189AE                            ; ----------------------------------------------------------------------------
000189AE                            ; Sprite_222AC:
000189AE                            Obj4F:
000189AE 7000                       	moveq	#0,d0
000189B0 1028 0024                  	move.b	routine(a0),d0
000189B4 323B 0000                  	move.w	Obj4F_Index(pc,d0.w),d1
000189B8 4EFB 1000                  	jmp	Obj4F_Index(pc,d1.w)
000189BC                            ; ===========================================================================
000189BC                            ; off_222BA:
000189BC                            Obj4F_Index:
000189BC 0000                       	dc.w Obj4F_Init-Obj4F_Index; 0
000189BE 0000                       	dc.w Obj4F_Main-Obj4F_Index; 2
000189C0                            ; ---------------------------------------------------------------------------
000189C0                            ; word_222BE:
000189C0                            Obj4F_BoosterSpeeds:
000189C0 1000                       	dc.w $1000
000189C2 0A00                       	dc.w  $A00
000189C4                            ; ===========================================================================
000189C4                            ; loc_222C2:
000189C4                            Obj4F_Init:
000189C4 5428 0024                  	addq.b	#2,routine(a0) ; Skip to other routine
000189C8 217C 0000 0000 0004        	move.l	#Map_SpdBooster,4(a0) ; the mappings
000189D0 0C38 0000 FE10                     cmpi.b	#0,($FFFFFE10).w	; is level GHZ ?
000189D6 6700 0000                  	beq.w	SFZ_SpecificArtLoc	; if not, branch
000189DA 317C 05F4 0002             	move.w	#($BE80/$20),2(a0) ; the art location
000189E0 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
000189E4                            SFZ_SpecificArtLoc:
000189E4 317C 05F4 0002                     move.w	#($BE80/$20),2(a0) ; the art location
000189EA 6000 0000                          bra     Obj4F_Init_Cont    ; BRanch Always
000189EE                            Obj4F_Init_Cont:	 
000189EE 0028 0004 0001             	ori.b	#4,1(a0)
000189F4 117C 0020 0023             	move.b	#$20,width_pixels(a0)
000189FA 317C 0080 0018             	move.w	#$80,priority(a0)
00018A00 1028 0028                  	move.b	subtype(a0),d0
00018A04 0240 0002                  	andi.w	#2,d0
00018A08 317B 00B6 0030             	move.w	Obj4F_BoosterSpeeds(pc,d0.w),$30(a0)
00018A0E                            
00018A0E                            ; loc_222F8:
00018A0E                            Obj4F_Main:
00018A0E 1038 FE05                  	move.b	($FFFFFE05).w,d0
00018A12 0200 0002                  	andi.b	#2,d0
00018A16 1140 001A                  	move.b	d0,mapping_frame(a0)
00018A1A 3028 0008                  	move.w	8(a0),d0
00018A1E 3200                       	move.w	d0,d1
00018A20 0440 0010                  	subi.w	#$10,d0
00018A24 0641 0010                  	addi.w	#$10,d1
00018A28 3428 000C                  	move.w	$C(a0),d2
00018A2C 3602                       	move.w	d2,d3
00018A2E 0442 0010                  	subi.w	#$10,d2
00018A32 0643 0010                  	addi.w	#$10,d3
00018A36                            
00018A36 43F8 D000                  	lea	($FFFFD000).w,a1 ; a1=character
00018A3A 0829 0001 0022             	btst	#1,status(a1)
00018A40 6600                       	bne.s	MOG_Jmptolol
00018A42 3829 0008                  	move.w	8(a1),d4
00018A46 B840                       	cmp.w	d0,d4
00018A48 6500 0000                  	bcs.w	MOG_Jmptolol
00018A4C B841                       	cmp.w	d1,d4
00018A4E 6400 0000                  	bcc.w	MOG_Jmptolol
00018A52 3829 000C                  	move.w	$C(a1),d4
00018A56 B842                       	cmp.w	d2,d4
00018A58 6500 0000                  	bcs.w	MOG_Jmptolol
00018A5C B843                       	cmp.w	d3,d4
00018A5E 6400 0000                  	bcc.w	MOG_Jmptolol
00018A62 3F00                       	move.w	d0,-(sp)
00018A64 6100 0000                  	bsr.w	Obj4F_GiveBoost
00018A68 301F                       	move.w	(sp)+,d0
00018A6A                            MOG_Jmptolol:
00018A6A 4EFA FDC2                  	jmp	MarkObjGone
00018A6E                            
00018A6E                            ; ===========================================================================
00018A6E                            ; sub_22388:
00018A6E                            Obj4F_GiveBoost:
00018A6E 3029 0010                  	move.w	x_vel(a1),d0
00018A72 0828 0000 0022             	btst	#0,status(a0)
00018A78 6700                       	beq.s	loc_blah
00018A7A 4440                       	neg.w	d0 ; d0 = absolute value of character's x velocity
00018A7C                            loc_blah:
00018A7C 0C40 1000                  	cmpi.w	#$1000,d0		; is the character already going super fast?
00018A80 6C00                       	bge.s	Obj4F_GiveBoost_Done	; if yes, branch to not change the speed
00018A82 3368 0030 0010             	move.w	$30(a0),x_vel(a1)	; make the character go super fast
00018A88 08A9 0000 0022             	bclr	#0,status(a1)	; turn him right
00018A8E 0828 0000 0022             	btst	#0,status(a0)	; was that the correct direction?
00018A94 6700                       	beq.s	loc_unknown		; if yes, branch
00018A96 08E9 0000 0022             	bset	#0,status(a1)	; turn him left
00018A9C 4469 0010                  	neg.w	x_vel(a1)	; make the boosting direction left
00018AA0                            loc_unknown:
00018AA0 337C 000F 002E             	move.w	#$F,move_lock(a1)	; don't let him turn around for a few frames
00018AA6 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)	; update his inertia value
00018AAC 08A8 0005 0022             	bclr	#5,status(a0)
00018AB2 08A8 0006 0022             	bclr	#6,status(a0)
00018AB8 08A9 0005 0022             	bclr	#5,status(a1)
00018ABE 31FC 0000 FC00             	move.w	#0,($FFFFFC00).w	; clear screen delay counter 
00018AC4                            	; fix for Sonic when he goes off-screen preventing him from going through
00018AC4                            	; objects before they get rendered on the screen
00018AC4                            ; loc_223D8:
00018AC4                            Obj4F_GiveBoost_Done:
00018AC4 303C 00B1                  	move.w	#$B1,d0 ; spring boing sound
00018AC8 4EF9 0000 3212             	jmp	(PlaySound).l
00018ACE                            ;===================================================================================
00018ACE                            ; The Speed Booster Files
00018ACE                            ;===================================================================================
00018ACE                            Map_SpdBooster:       include   "_maps\Booster.asm"
00018ACE                            ; --------------------------------------------------------------------------------
00018ACE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00018ACE                            ; --------------------------------------------------------------------------------
00018ACE                            
00018ACE                            SME_KG46E:	
00018ACE 0000 0000                  		dc.w SME_KG46E_6-SME_KG46E, SME_KG46E_1B-SME_KG46E	
00018AD2 0000                       		dc.w SME_KG46E_30-SME_KG46E	
00018AD4 04                         SME_KG46E_6:	dc.b 4	
00018AD5 F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00018ADA F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
00018ADF F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
00018AE4 F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00018AE9 04                         SME_KG46E_1B:	dc.b 4	
00018AEA F801 0000 E8               		dc.b $F8, 1, 0, 0, $E8	
00018AEF F801 0800 F0               		dc.b $F8, 1, 8, 0, $F0	
00018AF4 F801 0000 08               		dc.b $F8, 1, 0, 0, 8	
00018AF9 F801 0800 10               		dc.b $F8, 1, 8, 0, $10	
00018AFE 00                         SME_KG46E_30:	dc.b 0	
00018B00 00                         		even
00018B00 00                         		even
00018B00                            
00018B00                            Artnem_SpdBooster:    incbin	artnem\speedbooster_obj4f.bin	; shield
00018B6E                            		even		
00018B6E                            
00018B6E                            ;===================================================================================
00018B6E                            ; The Speed Booster Files
00018B6E                            ;===================================================================================
00018B6E                            
00018B6E                            ; =============== S U B R O U T I N E =======================================
00018B6E                            
00018B6E                            MarkObjGone3:
00018B6E                            Delete_Sprite_If_Not_In_Range:
00018B6E                            
00018B6E 3028 0008                  		move.w	8(a0),d0
00018B72 0240 FF80                  		andi.w	#$FF80,d0
00018B76 3238 F700                  		move.w	($FFFFF700).w,d1
00018B7A 0441 0080                  		subi.w	#$80,d1
00018B7E 0241 FF80                  		andi.w	#$FF80,d1
00018B82 9041                       		sub.w	d1,d0
00018B84 0C40 0280                  		cmpi.w	#$280,d0
00018B88 6200 0000                  		bhi.w	loc_1B5EA
00018B8C 4E75                       		rts	
00018B8E                            		
00018B8E                            ; ---------------------------------------------------------------------------
00018B8E                            
00018B8E                            loc_1B5EA:
00018B8E                            ;		lea	(v_objstate).w,a2
00018B8E 7000                       		moveq	#0,d0
00018B90 3028 0014                  		move.w	respawn_index(a0),d0
00018B94                            ;        move.w	respawn_index(a0),d0
00018B94 6700                       		beq.s	loc_1B5F6
00018B96 3440                       	    movea.w	d0,a2
00018B98                            ;		movea.w	d0,a2
00018B98 0892 0007                  		bclr	#7,(a2)
00018B9C                            
00018B9C                            loc_1B5F6:
00018B9C 6000 D052                  		bra.w	DeleteObject
00018BA0                            ; End of function Delete_Sprite_If_Not_In_Range
00018BA0                            
00018BA0                            ; =============== S U B R O U T I N E =======================================
00018BA0                            
00018BA0                            MarkObjGone4:
00018BA0                            Delete_Sprite_If_Not_In_Range2:
00018BA0                            
00018BA0 0240 FF80                  		andi.w	#$FF80,d0
00018BA4 3238 F700                  		move.w	($FFFFF700).w,d1
00018BA8 0441 0080                  		subi.w	#$80,d1
00018BAC 0241 FF80                  		andi.w	#$FF80,d1
00018BB0 9041                       		sub.w	d1,d0
00018BB2 0C40 0280                  		cmpi.w	#$280,d0
00018BB6 6200 0000                  		bhi.w	@loc_1B5EA
00018BBA 4E75                       		rts	
00018BBC                            
00018BBC                            ; ---------------------------------------------------------------------------
00018BBC                            
00018BBC                            @loc_1B5EA:
00018BBC                            ;		lea	(v_objstate).w,a2
00018BBC 7000                       		moveq	#0,d0
00018BBE 3028 0014                  		move.w	respawn_index(a0),d0
00018BC2                            ;        move.w	respawn_index(a0),d0
00018BC2 6700                       		beq.s	@loc_1B5F6
00018BC4 3440                       	    movea.w	d0,a2
00018BC6                            ;		movea.w	d0,a2
00018BC6 0892 0007                  		bclr	#7,(a2)
00018BCA                            
00018BCA                            @loc_1B5F6:
00018BCA 6000 D024                  		bra.w	DeleteObject	
00018BCE                            
00018BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BCE                            
00018BCE                            
00018BCE                            
00018BCE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00018BCE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00018BD2 D047                       		add.w	d7,d0
00018BD4 0240 0003                  		andi.w	#3,d0
00018BD8 6600                       		bne.s	loc_F836
00018BDA 7600                       		moveq	#0,d3
00018BDC 1628 0023                  		move.b	width_pixels(a0),d3
00018BE0 4A68 0010                  		tst.w	x_vel(a0)
00018BE4 6B00                       		bmi.s	loc_F82C
00018BE6 4EB9 0000 0000             		jsr	ObjHitWallRight
00018BEC 4A41                       		tst.w	d1
00018BEE 6A00                       		bpl.s	loc_F836
00018BF0                            
00018BF0                            loc_F828:
00018BF0 7001                       		moveq	#1,d0
00018BF2 4E75                       		rts	
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            loc_F82C:
00018BF4 4643                       		not.w	d3
00018BF6 4EB9 0000 0000             		jsr	ObjHitWallLeft
00018BFC 4A41                       		tst.w	d1
00018BFE 6BF0                       		bmi.s	loc_F828
00018C00                            
00018C00                            loc_F836:
00018C00 7000                       		moveq	#0,d0
00018C02 4E75                       		rts	
00018C04                            ; End of function Obj50_ChkWall
00018C04                            
00018C04                            ; ===========================================================================
00018C04                            ; ---------------------------------------------------------------------------
00018C04                            ; Object 50 - Yadrin enemy (SYZ)
00018C04                            ; ---------------------------------------------------------------------------
00018C04                            
00018C04                            Obj50:					; XREF: Obj_Index
00018C04 7000                       		moveq	#0,d0
00018C06 1028 0024                  		move.b	routine(a0),d0
00018C0A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00018C0E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00018C12                            ; ===========================================================================
00018C12 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00018C14 0000                       		dc.w Obj50_Action-Obj50_Index
00018C16                            ; ===========================================================================
00018C16                            
00018C16                            Obj50_Main:				; XREF: Obj50_Index
00018C16 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00018C1E 317C 247B 0002             		move.w	#$247B,2(a0)
00018C24 117C 0004 0001             		move.b	#4,1(a0)
00018C2A 317C 0200 0018             		move.w	#$200,priority(a0)
00018C30 117C 0014 0023             		move.b	#$14,width_pixels(a0)
00018C36 117C 0011 0016             		move.b	#$11,$16(a0)
00018C3C 117C 0008 0017             		move.b	#8,$17(a0)
00018C42 117C 00CC 0020             		move.b	#$CC,collision_flags(a0)
00018C48 4EBA CF6C                  		jsr	ObjectFall
00018C4C 4EB9 0000 0000             		jsr	ObjHitFloor
00018C52 4A41                       		tst.w	d1
00018C54 6A00                       		bpl.s	locret_F89E
00018C56 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00018C5A 317C 0000 0012             		move.w	#0,y_vel(a0)
00018C60 5428 0024                  		addq.b	#2,routine(a0)
00018C64 0868 0000 0022             		bchg	#0,status(a0)
00018C6A                            
00018C6A                            locret_F89E:
00018C6A 4E75                       		rts	
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            Obj50_Action:				; XREF: Obj50_Index
00018C6C 7000                       		moveq	#0,d0
00018C6E 1028 0025                  		move.b	routine_secondary(a0),d0
00018C72 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00018C76 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00018C7A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00018C80 4EBA 9996                  		jsr	AnimateSprite
00018C84 6000 FBA8                  		bra.w	MarkObjGone
00018C88                            ; ===========================================================================
00018C88 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00018C8A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            Obj50_Move:				; XREF: Obj50_Index2
00018C8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00018C90 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00018C92 5428 0025                  		addq.b	#2,routine_secondary(a0)
00018C96 317C FF00 0010             		move.w	#-$100,x_vel(a0)	; move object
00018C9C 117C 0001 001C             		move.b	#1,anim(a0)
00018CA2 0868 0000 0022             		bchg	#0,status(a0)
00018CA8 6600                       		bne.s	locret_F8E2
00018CAA 4468 0010                  		neg.w	x_vel(a0)		; change direction
00018CAE                            
00018CAE                            locret_F8E2:
00018CAE 4E75                       		rts	
00018CB0                            ; ===========================================================================
00018CB0                            
00018CB0                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00018CB0 4EBA CF24                  		jsr	SpeedToPos
00018CB4 4EB9 0000 0000             		jsr	ObjHitFloor
00018CBA 0C41 FFF8                  		cmpi.w	#-8,d1
00018CBE 6D00                       		blt.s	Obj50_Pause
00018CC0 0C41 000C                  		cmpi.w	#$C,d1
00018CC4 6C00                       		bge.s	Obj50_Pause
00018CC6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00018CCA 4EBA FF02                  		jsr	Obj50_ChkWall
00018CCE 6600                       		bne.s	Obj50_Pause
00018CD0 4E75                       		rts	
00018CD2                            ; ===========================================================================
00018CD2                            
00018CD2                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00018CD2 5528 0025                  		subq.b	#2,routine_secondary(a0)
00018CD6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00018CDC 317C 0000 0010             		move.w	#0,x_vel(a0)
00018CE2 117C 0000 001C             		move.b	#0,anim(a0)
00018CE8 4E75                       		rts	
00018CEA                            ; ===========================================================================
00018CEA                            Ani_obj50:
00018CEA                            	include "_anim\obj50.asm"
00018CEA                            ; ---------------------------------------------------------------------------
00018CEA                            ; Animation script - Yadrin enemy
00018CEA                            ; ---------------------------------------------------------------------------
00018CEA 0000                       		dc.w byte_F920-Ani_obj50
00018CEC 0000                       		dc.w byte_F924-Ani_obj50
00018CEE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00018CF2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00018CFC                            		even
00018CFC                            		even
00018CFC                            
00018CFC                            ; ---------------------------------------------------------------------------
00018CFC                            ; Sprite mappings - Yadrin enemy (SYZ)
00018CFC                            ; ---------------------------------------------------------------------------
00018CFC                            Map_obj50:
00018CFC                            	include "_maps\obj50.asm"
00018CFC                            ; ---------------------------------------------------------------------------
00018CFC                            ; Sprite mappings - Yadrin enemy (SYZ)
00018CFC                            ; ---------------------------------------------------------------------------
00018CFC 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00018D00 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00018D04 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00018D08 05                         byte_F93A:	dc.b 5
00018D09 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00018D0E FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00018D13 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D18 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D1D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D22 05                         byte_F954:	dc.b 5
00018D23 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00018D28 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00018D2D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D32 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D37 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D3C 05                         byte_F96E:	dc.b 5
00018D3D F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00018D42 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00018D47 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D4C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D51 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00018D56 05                         byte_F988:	dc.b 5
00018D57 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00018D5C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00018D61 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D66 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D6B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018D70 05                         byte_F9A2:	dc.b 5
00018D71 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00018D76 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00018D7B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D80 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D85 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018D8A 05                         byte_F9BC:	dc.b 5
00018D8B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00018D90 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00018D95 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00018D9A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00018D9F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00018DA4                            		even
00018DA4                            		even
00018DA4                            
00018DA4                            ; ---------------------------------------------------------------------------
00018DA4                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00018DA4                            ;
00018DA4                            ; variables:
00018DA4                            ; d1 = width
00018DA4                            ; d2 = height /	2 (when	jumping)
00018DA4                            ; d3 = height /	2 (when	walking)
00018DA4                            ; d4 = x-axis position
00018DA4                            ; ---------------------------------------------------------------------------
00018DA4                            
00018DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DA4                            
00018DA4                            SolidObjectNew:
00018DA4 4A28 0025                  		tst.b routine_secondary(a0)
00018DA8 6700 0000                  		beq.w	loci_FAC8
00018DAC 3401                       		move.w	d1,d2
00018DAE D442                       		add.w	d2,d2
00018DB0 43F8 D000                  		lea ($FFFFD000).w,a1
00018DB4 0829 0001 0022             		btst #1,status(a1)
00018DBA 6600                       		bne.s loci_F9FE
00018DBC 3029 0008                  		move.w 8(a1),d0
00018DC0 9068 0008                  		sub.w 8(a0),d0
00018DC4 D041                       		add.w d1,d0
00018DC6 6B00                       		bmi.s loci_F9FE
00018DC8 B042                       		cmp.w d2,d0
00018DCA 6500                       		bcs.s loci_FA12
00018DCC                            
00018DCC                            loci_F9FE:
00018DCC 08A9 0003 0022             		bclr #3,status(a1)
00018DD2 08A8 0003 0022             		bclr #3,status(a0)
00018DD8 4228 0025                  		clr.b routine_secondary(a0)
00018DDC 7800                       		moveq #0,d4
00018DDE 4E75                       		rts
00018DE0                            ; ===========================================================================
00018DE0                            
00018DE0                            loci_FA12:
00018DE0 3404                       		move.w d4,d2
00018DE2 4EB9 0000 F434             		jsr MvSonicOnPtfm
00018DE8 7800                       		moveq #0,d4
00018DEA 4E75                       		rts
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            		loci_FA58:
00018DEC 3404                       		move.w d4,d2
00018DEE 4EB9 0000 F434             		jsr MvSonicOnPtfm
00018DF4 7800                       		moveq #0,d4
00018DF6 4E75                       		rts
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            loci_FAC8:
00018DF8 4A28 0001                  		tst.b 1(a0)
00018DFC 6A00 0000                  		bpl.w loc_FB92
00018E00                            
00018E00                            loci_FAD0:
00018E00 43F8 D000                  		lea ($FFFFD000).w,a1
00018E04 3029 0008                  		move.w 8(a1),d0
00018E08 9068 0008                  		sub.w 8(a0),d0
00018E0C D041                       		add.w d1,d0
00018E0E 6B00 0000                  		bmi.w loci_FB92
00018E12 3601                       		move.w d1,d3
00018E14 D643                       		add.w d3,d3
00018E16 B043                       		cmp.w d3,d0
00018E18 6200 0000                  		bhi.w loci_FB92
00018E1C 1629 0016                  		move.b $16(a1),d3
00018E20 4883                       		ext.w d3
00018E22 D443                       		add.w d3,d2
00018E24 3629 000C                  		move.w $C(a1),d3
00018E28 9668 000C                  		sub.w $C(a0),d3
00018E2C 5843                       		addq.w #4,d3
00018E2E D642                       		add.w d2,d3
00018E30 6B00 0000                  		bmi.w loci_FB92
00018E34 3802                       		move.w d2,d4
00018E36 D844                       		add.w d4,d4
00018E38 B644                       		cmp.w d4,d3
00018E3A 6400 0000                  		bcc.w loc_FB92
00018E3E                            
00018E3E                            loci_FB0E:
00018E3E 4A38 F7C8                  		tst.b ($FFFFF7C8).w
00018E42 6B00 0000                  		bmi.w loci_FB92
00018E46 0C38 0006 D024             		cmpi.b #6,($FFFFD024).w
00018E4C 6400 0000                  		bcc.w loci_FB92
00018E50 4A78 FE08                  		tst.w ($FFFFFE08).w
00018E54 6600 0000                  		bne.w loci_FBAC
00018E58 3A00                       		move.w d0,d5
00018E5A B240                       		cmp.w d0,d1
00018E5C 6400                       		bcc.s loci_FB36
00018E5E D241                       		add.w d1,d1
00018E60 9041                       		sub.w d1,d0
00018E62 3A00                       		move.w d0,d5
00018E64 4445                       		neg.w d5
00018E66                            
00018E66                            loci_FB36:
00018E66 3203                       		move.w d3,d1
00018E68 B443                       		cmp.w d3,d2
00018E6A 6400                       		bcc.s loci_FB44
00018E6C 5943                       		subq.w #4,d3
00018E6E 9644                       		sub.w d4,d3
00018E70 3203                       		move.w d3,d1
00018E72 4441                       		neg.w d1
00018E74                            
00018E74                            loci_FB44:
00018E74 BA41                               cmp.w d1,d5
00018E76 6200 0000                  		bhi.w loci_FBB0
00018E7A 0C41 0004                  		cmpi.w #4,d1
00018E7E 6300                       		bls.s loci_FB8C
00018E80 6000                       		bra.s loci_FBAC
00018E82                            ; ===========================================================================
00018E82                            
00018E82                            loci_FB5E:
00018E82 6000                       		bra.s   loci_FBAC
00018E84                            ; ===========================================================================
00018E84                            
00018E84                            loci_FB8C:
00018E84 6100                       		bsr.s loci_FBA0
00018E86 7801                       		moveq #1,d4
00018E88 4E75                       		rts
00018E8A                            ; ===========================================================================
00018E8A                            
00018E8A                            loci_FB92:
00018E8A 0828 0005 0022             		btst #5,status(a0)
00018E90 6700                       		beq.s loci_FBAC
00018E92 337C 0001 001C             		move.w #1,anim(a1) ; use walking animation
00018E98                            
00018E98                            loci_FBA0:
00018E98 08A8 0005 0022             		bclr #5,status(a0)
00018E9E 08A9 0005 0022             		bclr #5,status(a1)
00018EA4                            
00018EA4                            loci_FBAC:
00018EA4 7800                       		moveq #0,d4
00018EA6 4E75                       		rts
00018EA8                            ; ===========================================================================
00018EA8                            
00018EA8                            loci_FBB0:
00018EA8 4A43                       		tst.w d3
00018EAA 6B00                       		bmi.s loci_FBBC
00018EAC 0C43 0010                  		cmpi.w #$10,d3
00018EB0 6500                       		bcs.s loci_FBEE
00018EB2 60D6                       		bra.s loci_FB92
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            loci_FBBC:
00018EB4                            loci_FBD2:
00018EB4 78FF                       		moveq #-1,d4
00018EB6 4E75                       		rts
00018EB8                            ; ===========================================================================
00018EB8                            
00018EB8                            loci_FBD6:
00018EB8 0829 0001 0022             		btst #1,status(a1)
00018EBE 66F4                       		bne.s loci_FBD2
00018EC0 2F08                       		move.l a0,-(sp)
00018EC2 2049                       		movea.l a1,a0
00018EC4 4EB9 0000 0000             		jsr KillCharacter
00018ECA 205F                       		movea.l (sp)+,a0
00018ECC 78FF                       		moveq #-1,d4
00018ECE 4E75                       		rts
00018ED0                            ; ===========================================================================
00018ED0                            
00018ED0                            loci_FBEE:
00018ED0 5943                       		subq.w #4,d3
00018ED2 7200                       		moveq #0,d1
00018ED4 1228 0023                  		move.b width_pixels(a0),d1
00018ED8 3401                       		move.w d1,d2
00018EDA D442                       		add.w d2,d2
00018EDC D269 0008                  		add.w 8(a1),d1
00018EE0 9268 0008                  		sub.w 8(a0),d1
00018EE4 6B00                       		bmi.s loci_FC28
00018EE6 B242                       		cmp.w d2,d1
00018EE8 6400                       		bcc.s loci_FC28
00018EEA 4A69 0012                  		tst.w y_vel(a1)
00018EEE 6B00                       		bmi.s loci_FC28
00018EF0 9769 000C                  		sub.w d3,$C(a1)
00018EF4 5369 000C                  		subq.w #1,$C(a1)
00018EF8 4EB9 0000 0000             		jsr sub_FC2C
00018EFE 117C 0002 0025             		move.b #2,routine_secondary(a0)
00018F04 08E8 0003 0022             		bset #3,status(a0)
00018F0A 78FF                       		moveq #-1,d4
00018F0C 4E75                       		rts
00018F0E                            ; ===========================================================================
00018F0E                            
00018F0E                            loci_FC28:
00018F0E 7800                       		moveq #0,d4
00018F10 4E75                       		rts
00018F12                            
00018F12                            ; =============== S U B	R O U T	I N E =======================================
00018F12                            
00018F12                            
00018F12                            SolidObject:					  ; ...
00018F12                            
00018F12                            ; FUNCTION CHUNK AT 00314F36 SIZE 000000BA BYTES
00018F12                            
00018F12 43F8 D000                  		lea	($FFFFD000).w,a1
00018F16 7C03                       		moveq	#3,d6
00018F18 0D28 0022                  		btst	d6,status(a0)
00018F1C 6700 0000                  		beq.w	loc_314E2E
00018F20 3401                       		move.w	d1,d2
00018F22 D442                       		add.w	d2,d2
00018F24 0829 0001 0022             		btst	#1,status(a1)
00018F2A 6600                       		bne.s	loc_314BE0
00018F2C 3029 0008                  		move.w	x_pos(a1),d0
00018F30 9068 0008                  		sub.w	x_pos(a0),d0
00018F34 D041                       		add.w	d1,d0
00018F36 6B00                       		bmi.s	loc_314BE0
00018F38 B042                       		cmp.w	d2,d0
00018F3A 6500                       		bcs.s	loc_314BF4
00018F3C                            
00018F3C                            loc_314BE0:					  ; ...
00018F3C 08A9 0003 0022             		bclr	#3,status(a1)
00018F42 08E9 0001 0022             		bset	#1,status(a1)
00018F48 0DA8 0022                  		bclr	d6,status(a0)
00018F4C 7800                       		moveq	#0,d4
00018F4E 4E75                       		rts
00018F50                            ; ---------------------------------------------------------------------------
00018F50                            
00018F50                            loc_314BF4:					  ; ...
00018F50 3404                       		move.w	d4,d2
00018F52 4EB9 0000 F434             		jsr	MvSonicOnPtfm
00018F58 7800                       		moveq	#0,d4
00018F5A 4E75                       		rts
00018F5C                            ; ---------------------------------------------------------------------------
00018F5C                            
00018F5C                            loc_314BFE:					  ; ...
00018F5C 43F8 D000                  		lea	($FFFFD000).w,a1
00018F60 7C03                       		moveq	#3,d6
00018F62                            
00018F62                            loc_314C04:					  ; ...
00018F62 0D28 0022                  		btst	d6,status(a0)
00018F66 6700 0000                  		beq.w	loc_314E36
00018F6A 3401                       		move.w	d1,d2
00018F6C D442                       		add.w	d2,d2
00018F6E 0829 0001 0022             		btst	#1,status(a1)
00018F74 6600                       		bne.s	loc_314C28
00018F76 3029 0008                  		move.w	x_pos(a1),d0
00018F7A 9068 0008                  		sub.w	x_pos(a0),d0
00018F7E D041                       		add.w	d1,d0
00018F80 6B00                       		bmi.s	loc_314C28
00018F82 B042                       		cmp.w	d2,d0
00018F84 6500                       		bcs.s	loc_314C3C
00018F86                            
00018F86                            loc_314C28:					  ; ...
00018F86 08A9 0003 0022             		bclr	#3,status(a1)
00018F8C 08E9 0001 0022             		bset	#1,status(a1)
00018F92 0DA8 0022                  		bclr	d6,status(a0)
00018F96 7800                       		moveq	#0,d4
00018F98 4E75                       		rts
00018F9A                            ; ---------------------------------------------------------------------------
00018F9A                            
00018F9A                            loc_314C3C:					  ; ...
00018F9A 3404                       		move.w	d4,d2
00018F9C 4EB9 0000 F434             		jsr	MvSonicOnPtfm
00018FA2 7800                       		moveq	#0,d4
00018FA4 4E75                       		rts
00018FA6                            ; ---------------------------------------------------------------------------
00018FA6                            
00018FA6                            SolidObject71:					  ; ...
00018FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00018FAA 7C03                       		moveq	#3,d6
00018FAC                            
00018FAC                            loc_314C4C:					  ; ...
00018FAC 0D28 0022                  		btst	d6,status(a0)
00018FB0 6700 0000                  		beq.w	loc_314D74
00018FB4 3401                       		move.w	d1,d2
00018FB6 D442                       		add.w	d2,d2
00018FB8 0829 0001 0022             		btst	#1,status(a1)
00018FBE 6600                       		bne.s	loc_314C70
00018FC0 3029 0008                  		move.w	x_pos(a1),d0
00018FC4 9068 0008                  		sub.w	x_pos(a0),d0
00018FC8 D041                       		add.w	d1,d0
00018FCA 6B00                       		bmi.s	loc_314C70
00018FCC B042                       		cmp.w	d2,d0
00018FCE 6500                       		bcs.s	loc_314C84
00018FD0                            
00018FD0                            loc_314C70:					  ; ...
00018FD0 08A9 0003 0022             		bclr	#3,status(a1)
00018FD6 08E9 0001 0022             		bset	#1,status(a1)
00018FDC 0DA8 0022                  		bclr	d6,status(a0)
00018FE0 7800                       		moveq	#0,d4
00018FE2 4E75                       		rts
00018FE4                            ; ---------------------------------------------------------------------------
00018FE4                            
00018FE4                            loc_314C84:					  ; ...
00018FE4 3404                       		move.w	d4,d2
00018FE6 4EB9 0000 F434             		jsr	MvSonicOnPtfm
00018FEC 7800                       		moveq	#0,d4
00018FEE 4E75                       		rts
00018FF0                            ; ---------------------------------------------------------------------------
00018FF0 43F8 D000                  		lea	($FFFFD000).w,a1
00018FF4 7C03                       		moveq	#3,d6
00018FF6 0D28 0022                  		btst	d6,status(a0)
00018FFA 6700 0000                  		beq.w	loc_314DCE
00018FFE 3401                       		move.w	d1,d2
00019000 D442                       		add.w	d2,d2
00019002 0829 0001 0022             		btst	#1,status(a1)
00019008 6600                       		bne.s	loc_314CB8
0001900A 3029 0008                  		move.w	x_pos(a1),d0
0001900E 9068 0008                  		sub.w	x_pos(a0),d0
00019012 D041                       		add.w	d1,d0
00019014 6B00                       		bmi.s	loc_314CB8
00019016 B042                       		cmp.w	d2,d0
00019018 6500                       		bcs.s	loc_314CCC
0001901A                            
0001901A                            loc_314CB8:					  ; ...
0001901A 08A9 0003 0022             		bclr	#3,status(a1)
00019020 08E9 0001 0022             		bset	#1,status(a1)
00019026 0DA8 0022                  		bclr	d6,status(a0)
0001902A 7800                       		moveq	#0,d4
0001902C 4E75                       		rts
0001902E                            ; ---------------------------------------------------------------------------
0001902E                            
0001902E                            loc_314CCC:					  ; ...
0001902E 3404                       		move.w	d4,d2
00019030 4EB9 0000 F434             		jsr	MvSonicOnPtfm
00019036 7800                       		moveq	#0,d4
00019038 4E75                       		rts
0001903A                            ; ---------------------------------------------------------------------------
0001903A                            loc_314CD6:					  ; ...
0001903A 43F8 D000                  		lea	($FFFFD000).w,a1
0001903E 7C03                       		moveq	#3,d6
00019040 0D28 0022                  		btst	d6,status(a0)
00019044 6700 0000                  		beq.w	loc_314D32
00019048 0829 0001 0022             		btst	#1,status(a1)
0001904E 6600                       		bne.s	loc_314CFE
00019050 3029 0008                  		move.w	x_pos(a1),d0
00019054 9068 0008                  		sub.w	x_pos(a0),d0
00019058 D041                       		add.w	d1,d0
0001905A 6B00                       		bmi.s	loc_314CFE
0001905C D241                       		add.w	d1,d1
0001905E B041                       		cmp.w	d1,d0
00019060 6500                       		bcs.s	loc_314D12
00019062                            
00019062                            loc_314CFE:					  ; ...
00019062 08A9 0003 0022             		bclr	#3,status(a1)
00019068 08E9 0001 0022             		bset	#1,status(a1)
0001906E 0DA8 0022                  		bclr	d6,status(a0)
00019072 7800                       		moveq	#0,d4
00019074 4E75                       		rts
00019076                            ; ---------------------------------------------------------------------------
00019076                            
00019076                            loc_314D12:					  ; ...
00019076 3028 000C                  		move.w	y_pos(a0),d0
0001907A 9042                       		sub.w	d2,d0
0001907C D043                       		add.w	d3,d0
0001907E 7200                       		moveq	#0,d1
00019080 1229 0016                  		move.b	y_radius(a1),d1
00019084 9041                       		sub.w	d1,d0
00019086 3340 000C                  		move.w	d0,y_pos(a1)
0001908A 9868 0008                  		sub.w	x_pos(a0),d4
0001908E 9969 0008                  		sub.w	d4,x_pos(a1)
00019092 7800                       		moveq	#0,d4
00019094 4E75                       		rts
00019096                            ; ---------------------------------------------------------------------------
00019096                            
00019096                            loc_314D32:					  ; ...
00019096 3029 0008                  		move.w	x_pos(a1),d0
0001909A 9068 0008                  		sub.w	x_pos(a0),d0
0001909E D041                       		add.w	d1,d0
000190A0 6B00 0000                  		bmi.w	loc_314F0C
000190A4 3801                       		move.w	d1,d4
000190A6 D844                       		add.w	d4,d4
000190A8 B044                       		cmp.w	d4,d0
000190AA 6200 0000                  		bhi.w	loc_314F0C
000190AE 3A28 000C                  		move.w	y_pos(a0),d5
000190B2 DA43                       		add.w	d3,d5
000190B4 1629 0016                  		move.b	y_radius(a1),d3
000190B8 4883                       		ext.w	d3
000190BA D443                       		add.w	d3,d2
000190BC 3629 000C                  		move.w	y_pos(a1),d3
000190C0 9645                       		sub.w	d5,d3
000190C2 5843                       		addq.w	#4,d3
000190C4 D642                       		add.w	d2,d3
000190C6 6B00 0000                  		bmi.w	loc_314F0C
000190CA 3802                       		move.w	d2,d4
000190CC D844                       		add.w	d4,d4
000190CE B644                       		cmp.w	d4,d3
000190D0 6400 0000                  		bcc.w	loc_314F0C
000190D4 6000 0000                  		bra.w	loc_314E74
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            
000190D8                            loc_314D74:					  ; ...
000190D8 3029 0008                  		move.w	x_pos(a1),d0
000190DC 9068 0008                  		sub.w	x_pos(a0),d0
000190E0 D041                       		add.w	d1,d0
000190E2 6B00 0000                  		bmi.w	loc_314F0C
000190E6 3601                       		move.w	d1,d3
000190E8 D643                       		add.w	d3,d3
000190EA B043                       		cmp.w	d3,d0
000190EC 6200 0000                  		bhi.w	loc_314F0C
000190F0 3A00                       		move.w	d0,d5
000190F2 0828 0000 0001             		btst	#0,1(a0)
000190F8 6700                       		beq.s	loc_314D9A
000190FA 4645                       		not.w	d5
000190FC DA43                       		add.w	d3,d5
000190FE                            
000190FE                            loc_314D9A:					  ; ...
000190FE E24D                       		lsr.w	#1,d5
00019100 1632 5000                  		move.b	(a2,d5.w),d3
00019104 9612                       		sub.b	(a2),d3
00019106 4883                       		ext.w	d3
00019108 3A28 000C                  		move.w	y_pos(a0),d5
0001910C 9A43                       		sub.w	d3,d5
0001910E 1629 0016                  		move.b	y_radius(a1),d3
00019112 4883                       		ext.w	d3
00019114 D443                       		add.w	d3,d2
00019116 3629 000C                  		move.w	y_pos(a1),d3
0001911A 9645                       		sub.w	d5,d3
0001911C 5843                       		addq.w	#4,d3
0001911E D642                       		add.w	d2,d3
00019120 6B00 0000                  		bmi.w	loc_314F0C
00019124 3802                       		move.w	d2,d4
00019126 D844                       		add.w	d4,d4
00019128 B644                       		cmp.w	d4,d3
0001912A 6400 0000                  		bcc.w	loc_314F0C
0001912E 6000 0000                  		bra.w	loc_314E74
00019132                            ; ---------------------------------------------------------------------------
00019132                            
00019132                            loc_314DCE:					  ; ...
00019132 3029 0008                  		move.w	x_pos(a1),d0
00019136 9068 0008                  		sub.w	x_pos(a0),d0
0001913A D041                       		add.w	d1,d0
0001913C 6B00 0000                  		bmi.w	loc_314F0C
00019140 3601                       		move.w	d1,d3
00019142 D643                       		add.w	d3,d3
00019144 B043                       		cmp.w	d3,d0
00019146 6200 0000                  		bhi.w	loc_314F0C
0001914A 3A00                       		move.w	d0,d5
0001914C 0828 0000 0001             		btst	#0,1(a0)
00019152 6700                       		beq.s	loc_314DF4
00019154 4645                       		not.w	d5
00019156 DA43                       		add.w	d3,d5
00019158                            
00019158                            loc_314DF4:					  ; ...
00019158 0245 FFFE                  		and.w	#-2,d5
0001915C 1632 5000                  		move.b	(a2,d5.w),d3
00019160 1432 5001                  		move.b	1(a2,d5.w),d2
00019164 4882                       		ext.w	d2
00019166 4883                       		ext.w	d3
00019168 3A28 000C                  		move.w	y_pos(a0),d5
0001916C 9A43                       		sub.w	d3,d5
0001916E 3629 000C                  		move.w	y_pos(a1),d3
00019172 9645                       		sub.w	d5,d3
00019174 1A29 0016                  		move.b	y_radius(a1),d5
00019178 4885                       		ext.w	d5
0001917A D645                       		add.w	d5,d3
0001917C 5843                       		addq.w	#4,d3
0001917E 6B00 0000                  		bmi.w	loc_314F0C
00019182 D445                       		add.w	d5,d2
00019184 3802                       		move.w	d2,d4
00019186 D845                       		add.w	d5,d4
00019188 B644                       		cmp.w	d4,d3
0001918A 6400 0000                  		bcc.w	loc_314F0C
0001918E 6000 0000                  		bra.w	loc_314E74
00019192                            ; ---------------------------------------------------------------------------
00019192                            SolidObject2F:	; XREF: Obj2F_Solid
00019192 43F8 D000                  		lea	($FFFFD000).w,a1
00019196                            loc_FAC8:
00019196                            loc_314E2E:					  ; ...
00019196 4A28 0001                  		tst.b	1(a0)
0001919A 6A00 0000                  		bpl.w	loc_314F0C
0001919E                            
0001919E                            loc_314E36:					  ; ...
0001919E 3029 0008                  		move.w	x_pos(a1),d0
000191A2 9068 0008                  		sub.w	x_pos(a0),d0
000191A6 D041                       		add.w	d1,d0
000191A8 6B00 0000                  		bmi.w	loc_314F0C
000191AC 3601                       		move.w	d1,d3
000191AE D643                       		add.w	d3,d3
000191B0 B043                       		cmp.w	d3,d0
000191B2 6200 0000                  		bhi.w	loc_314F0C
000191B6 1629 0016                  		move.b	y_radius(a1),d3
000191BA 4883                       		ext.w	d3
000191BC D443                       		add.w	d3,d2
000191BE 3629 000C                  		move.w	y_pos(a1),d3
000191C2 9668 000C                  		sub.w	y_pos(a0),d3
000191C6 5843                       		addq.w	#4,d3
000191C8 D642                       		add.w	d2,d3
000191CA 6B00 0000                  		bmi.w	loc_314F0C
000191CE 0243 07FF                  		and.w	#$7FF,d3
000191D2 3802                       		move.w	d2,d4
000191D4 D844                       		add.w	d4,d4
000191D6 B644                       		cmp.w	d4,d3
000191D8 6400 0000                  		bcc.w	loc_314F0C
000191DC                            
000191DC                            loc_314E74:					  ; ...
000191DC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000191E0 6B00 0000                  		bmi.w	loc_314F0C
000191E4 0C29 0006 0024             		cmp.b	#6,routine(a1)
000191EA 6400 0000                  		bcc.w	loc_FBA0
000191EE 4A78 FE08                  		tst.w	($FFFFFE08).w
000191F2 6600 0000                  		bne.w	loc_FBA0
000191F6 3A00                       		move.w	d0,d5
000191F8 B240                       		cmp.w	d0,d1
000191FA 6400                       		bcc.s	loc_314E9C
000191FC D241                       		add.w	d1,d1
000191FE 9041                       		sub.w	d1,d0
00019200 3A00                       		move.w	d0,d5
00019202 4445                       		neg.w	d5
00019204                            
00019204                            loc_314E9C:					  ; ...
00019204 3203                       		move.w	d3,d1
00019206 B443                       		cmp.w	d3,d2
00019208 6400                       		bcc.s	loc_314EAA
0001920A 5943                       		subq.w	#4,d3
0001920C 9644                       		sub.w	d4,d3
0001920E 3203                       		move.w	d3,d1
00019210 4441                       		neg.w	d1
00019212                            
00019212                            loc_314EAA:					  ; ...
00019212 BA41                       		cmp.w	d1,d5
00019214 6200 0000                  		bhi.w	loc_FBB0
00019218 0C41 0004                  		cmp.w	#4,d1
0001921C 6300 0000                  		bls.w	loc_FBB0
00019220                            
00019220                            loc_314EB8:					  ; ...
00019220 4A40                       		tst.w	d0
00019222 6700                       		beq.s	loc_314ED8
00019224 6B00                       		bmi.s	loc_314EC6
00019226 4A69 0010                  		tst.w	x_vel(a1)
0001922A 6B00                       		bmi.s	loc_314ED8
0001922C 6000                       		bra.s	loc_314ECC
0001922E                            ; ---------------------------------------------------------------------------
0001922E                            
0001922E                            loc_314EC6:					  ; ...
0001922E 4A69 0010                  		tst.w	x_vel(a1)
00019232 6A00                       		bpl.s	loc_314ED8
00019234                            
00019234                            loc_314ECC:					  ; ...
00019234 337C 0000 0020             		move.w	#0,inertia(a1)
0001923A 337C 0000 0010             		move.w	#0,x_vel(a1)
00019240                            
00019240                            loc_314ED8:					  ; ...
00019240 9169 0008                  		sub.w	d0,x_pos(a1)
00019244 0829 0001 0022             		btst	#1,status(a1)
0001924A 6600                       		bne.s	loc_314EFE
0001924C 2806                       		move.l	d6,d4
0001924E 5404                       		addq.b	#2,d4
00019250 09E8 0022                  		bset	d4,status(a0)
00019254 08E9 0005 0022             		bset	#5,status(a1)
0001925A 3806                       		move.w	d6,d4
0001925C 0604 000D                  		add.b	#$D,d4
00019260 09C6                       		bset	d4,d6
00019262 7801                       		moveq	#1,d4
00019264 4E75                       		rts
00019266                            ; ---------------------------------------------------------------------------
00019266                            
00019266                            loc_314EFE:					  ; ...
00019266 6100                       		bsr.s	loc_FBA0
00019268 3806                       		move.w	d6,d4
0001926A 0604 000D                  		add.b	#$D,d4
0001926E 09C6                       		bset	d4,d6
00019270 7801                       		moveq	#1,d4
00019272 4E75                       		rts
00019274                            ; ---------------------------------------------------------------------------
00019274                            loc_FB92:
00019274                            loc_314F0C:					  ; ...
00019274 2806                       		move.l	d6,d4
00019276 5404                       		addq.b	#2,d4
00019278 0928 0022                  		btst	d4,status(a0)
0001927C 6700                       		beq.s	loc_FBA0
0001927E 0C29 0002 001C             		cmp.b	#2,anim(a1)	; check if in jumping/rolling animation
00019284 6700                       		beq.s	loc_FBA0
00019286 0C29 0017 001C             		cmpi.b	#$17,anim(a1)	; check if in drowning animation
0001928C 6700                       		beq.s	loc_FBA0
0001928E 0C29 0018 001C             		cmpi.b	#$18,anim(a1)	; check if in dying animation
00019294 6700                       		beq.s	loc_FBA0
00019296 0C29 001A 001C             		cmp.b	#$1A,anim(a1)	; check if in hurt animation
0001929C 6700                       		beq.s	loc_FBA0
0001929E 0C29 001F 001C             		cmpi.b	#$1F,anim(a1)	; check if in spindash animation
000192A4 6700                       		beq.s	loc_FBA0
000192A6 0C29 0022 001C             		cmpi.b	#$22,anim(a1)	; check if in transformation animation
000192AC 6700                       		beq.s	loc_FBA0
000192AE 337C 0001 001C             		move.w	#1,anim(a1)	; use walking animation
000192B4                            ; End of function SolidObject
000192B4                             
000192B4                            loc_FBA0:
000192B4 2806                       		move.l	d6,d4
000192B6 5404                       		addq.b	#2,d4
000192B8 09A8 0022                  		bclr	d4,status(a0)
000192BC 08A9 0005 0022             		bclr	#5,status(a1)
000192C2                            
000192C2                            loc_FBAC:
000192C2 7800                       		moveq	#0,d4
000192C4 4E75                       		rts	
000192C6                            ; ===========================================================================
000192C6                            
000192C6                            loc_FBB0:
000192C6 4A43                       		tst.w	d3
000192C8 6B00                       		bmi.s	loc_FBBC
000192CA 0C43 0010                  		cmpi.w	#$10,d3
000192CE 6500                       		bcs.s	loc_FBEE
000192D0 60A2                       		bra.s	loc_FB92
000192D2                            ; ===========================================================================
000192D2                            
000192D2                            loc_FBBC:
000192D2 4A69 0012                  		tst.w	y_vel(a1)
000192D6 6700                       		beq.s	loc_FBD6
000192D8 6A00                       		bpl.s	loc_FBD2
000192DA 4A43                       		tst.w	d3
000192DC 6A00                       		bpl.s	loc_FBD2
000192DE 9769 000C                  		sub.w	d3,$C(a1)
000192E2 337C 0000 0012             		move.w	#0,y_vel(a1)	; stop Sonic moving
000192E8                            
000192E8                            loc_FBD2:
000192E8 78FF                       		moveq	#-1,d4
000192EA 4E75                       		rts	
000192EC                            ; ===========================================================================
000192EC                            
000192EC                            loc_FBD6:
000192EC 0829 0001 0022             		btst	#1,status(a1)
000192F2 66F4                       		bne.s	loc_FBD2
000192F4 2F08                       		move.l	a0,-(sp)
000192F6 2049                       		movea.l	a1,a0
000192F8 4EB9 0000 0000             		jsr	KillCharacter
000192FE 205F                       		movea.l	(sp)+,a0
00019300 78FF                       		moveq	#-1,d4
00019302 4E75                       		rts	
00019304                            ; ===========================================================================
00019304                            
00019304                            loc_FBEE:
00019304 5943                       		subq.w	#4,d3
00019306 7200                       		moveq	#0,d1
00019308 1228 0023                  		move.b	width_pixels(a0),d1
0001930C 3401                       		move.w	d1,d2
0001930E D442                       		add.w	d2,d2
00019310 D269 0008                  		add.w	8(a1),d1
00019314 9268 0008                  		sub.w	8(a0),d1
00019318 6B00                       		bmi.s	loc_FC28
0001931A B242                       		cmp.w	d2,d1
0001931C 6400                       		bcc.s	loc_FC28
0001931E 4A69 0012                  		tst.w	y_vel(a1)
00019322 6B00                       		bmi.s	loc_FC28
00019324 9769 000C                  		sub.w	d3,$C(a1)
00019328 5369 000C                  		subq.w	#1,$C(a1)
0001932C 6100                       		bsr.s	sub_FC2C
0001932E 117C 0002 0025             		move.b	#2,routine_secondary(a0)
00019334 08E8 0003 0022             		bset	#3,status(a0)
0001933A 78FF                       		moveq	#-1,d4
0001933C 4E75                       		rts	
0001933E                            ; ===========================================================================
0001933E                            
0001933E                            loc_FC28:
0001933E 7800                       		moveq	#0,d4
00019340 4E75                       		rts	
00019342                            ; End of function SolidObject
00019342                            
00019342                            
00019342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019342                            
00019342                            
00019342                            sub_FC2C:				; XREF: SolidObject
00019342 0829 0003 0022             		btst	#3,status(a1)
00019348 6700                       		beq.s	loc_FC4E
0001934A 7000                       		moveq	#0,d0
0001934C 1029 003D                  		move.b	$3D(a1),d0
00019350 ED48                       		lsl.w	#6,d0
00019352 0680 00FF D000             		addi.l	#$FFD000,d0
00019358 2440                       		move.l	d0,a2
0001935A 0DAB 0022                  		bclr	d6,status(a3)
0001935E                            
0001935E                            loc_FC4E:
0001935E 3008                       		move.w	a0,d0
00019360 0440 D000                  		subi.w	#-$3000,d0
00019364 EC48                       		lsr.w	#6,d0
00019366 0240 007F                  		andi.w	#$7F,d0
0001936A 1340 003D                  		move.b	d0,$3D(a1)
0001936E 137C 0000 0026             		move.b	#0,$26(a1)
00019374 337C 0000 0012             		move.w	#0,y_vel(a1)
0001937A 3369 0010 0020             		move.w	x_vel(a1),inertia(a1)
00019380 0829 0001 0022             		btst	#1,status(a1)
00019386 6700                       		beq.s	loc_FC84
00019388 2F08                       		move.l	a0,-(sp)
0001938A 2049                       		movea.l	a1,a0
0001938C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00019392 205F                       		movea.l	(sp)+,a0
00019394                            
00019394                            loc_FC84:
00019394 08E9 0003 0022             		bset	#3,status(a1)
0001939A 08E8 0003 0022             		bset	#3,status(a0)
000193A0 4E75                       		rts	
000193A2                            ; End of function sub_FC2C
000193A2                            
000193A2                            ; ===========================================================================
000193A2                            ; ---------------------------------------------------------------------------
000193A2                            ; Object 51 - smashable	green block (MZ)
000193A2                            ; ---------------------------------------------------------------------------
000193A2                            
000193A2                            Obj51:					; XREF: Obj_Index
000193A2 7000                       		moveq	#0,d0
000193A4 1028 0024                  		move.b	routine(a0),d0
000193A8 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000193AC 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000193B0 6000 F47C                  		bra.w	MarkObjGone
000193B4                            ; ===========================================================================
000193B4 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000193B6 0000                       		dc.w Obj51_Solid-Obj51_Index
000193B8 0000                       		dc.w Obj51_Display-Obj51_Index
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Obj51_Main:				; XREF: Obj51_Index
000193BA 5428 0024                  		addq.b	#2,routine(a0)
000193BE 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000193C6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000193CC 117C 0004 0001             		move.b	#4,1(a0)
000193D2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000193D8 317C 0200 0018             		move.w	#$200,priority(a0)
000193DE 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
000193E4                            
000193E4                            Obj51_Solid:				; XREF: Obj51_Index
000193E4 3178 F7D0 0034             		move.w	(Chain_Bonus_counter).w,$34(a0)
000193EA 1178 D01C 0032             		move.b	(MainCharacter+anim).w,$32(a0) ;	load Sonic's animation number
000193F0 323C 001B                  		move.w	#$1B,d1
000193F4 343C 0010                  		move.w	#$10,d2
000193F8 363C 0011                  		move.w	#$11,d3
000193FC 3828 0008                  		move.w	8(a0),d4
00019400 4EBA FB10                  		jsr	SolidObject
00019404 0828 0003 0022             		btst	#3,status(a0)
0001940A 6600                       		bne.s	Obj51_Smash
0001940C                            
0001940C                            locret_FCFC:
0001940C 4E75                       		rts	
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            Obj51_Smash:				; XREF: Obj51_Solid
0001940E 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00019414 66F6                       		bne.s	locret_FCFC	; if not, branch
00019416 31E8 0034 F7D0             		move.w	$34(a0),(Chain_Bonus_counter).w
0001941C 08E9 0002 0022             		bset	#2,status(a1)
00019422 137C 000E 0016             		move.b	#$E,$16(a1)
00019428 137C 0007 0017             		move.b	#7,$17(a1)
0001942E 137C 0002 001C             		move.b	#2,anim(a1)
00019434 337C FD00 0012             		move.w	#-$300,y_vel(a1)	; bounce Sonic upwards
0001943A 08E9 0001 0022             		bset	#1,status(a1)
00019440 08A9 0003 0022             		bclr	#3,status(a1)
00019446 137C 0002 0024             		move.b	#2,routine(a1)
0001944C 08A8 0003 0022             		bclr	#3,status(a0)
00019452 4228 0025                  		clr.b	routine_secondary(a0)
00019456 117C 0001 001A             		move.b	#1,mapping_frame(a0)
0001945C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00019462 7203                       		moveq	#3,d1		; set number of	fragments to 4
00019464 343C 0038                  		move.w	#$38,d2
00019468 4EBA C31A                  		jsr	SmashObject
0001946C 4EBA D29A                  		jsr	SingleObjLoad
00019470 6600                       		bne.s	Obj51_Display
00019472 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00019476 3368 0008 0008             		move.w	8(a0),8(a1)
0001947C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019482 3438 F7D0                  		move.w	(Chain_Bonus_counter).w,d2
00019486 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w
0001948A 0C42 0006                  		cmpi.w	#6,d2
0001948E 6500                       		bcs.s	Obj51_Bonus
00019490 7406                       		moveq	#6,d2
00019492                            
00019492                            Obj51_Bonus:
00019492 7000                       		moveq	#0,d0
00019494 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00019498 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 blocks been smashed?
0001949E 6500                       		bcs.s	loc_FD98	; if not, branch
000194A0 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000194A4 740A                       		moveq	#10,d2
000194A6                            
000194A6                            loc_FD98:
000194A6 4EB9 0000 0000             		jsr	AddPoints
000194AC E24A                       		lsr.w	#1,d2
000194AE 1342 001A                  		move.b	d2,mapping_frame(a1)
000194B2                            
000194B2                            Obj51_Display:				; XREF: Obj51_Index
000194B2 4EBA C722                  		jsr	SpeedToPos
000194B6 0668 0038 0012             		addi.w	#$38,y_vel(a0)
000194BC 4EBA C77E                  		jsr	DisplaySprite
000194C0 4A28 0001                  		tst.b	1(a0)
000194C4 6A00 C72A                  		bpl.w	DeleteObject
000194C8 4E75                       		rts	
000194CA                            ; ===========================================================================
000194CA FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000194CE FF00 FF00                  		dc.w $FF00, $FF00
000194D2 0200 FE00                  		dc.w $200, $FE00
000194D6 0100 FF00                  		dc.w $100, $FF00
000194DA                            
000194DA 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000194E2                            ; ---------------------------------------------------------------------------
000194E2                            ; Sprite mappings - smashable green block (MZ)
000194E2                            ; ---------------------------------------------------------------------------
000194E2                            Map_obj51:
000194E2                            	include "_maps\obj51.asm"
000194E2                            ; ---------------------------------------------------------------------------
000194E2                            ; Sprite mappings - smashable green block (MZ)
000194E2                            ; ---------------------------------------------------------------------------
000194E2 0000                       		dc.w byte_FDD8-Map_obj51
000194E4 0000                       		dc.w byte_FDE3-Map_obj51
000194E6 02                         byte_FDD8:	dc.b 2
000194E7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000194EC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000194F1 04                         byte_FDE3:	dc.b 4
000194F2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000194F7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000194FC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00019501 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00019506                            		even
00019506                            		even
00019506                            
00019506                            ; ===========================================================================
00019506                            ; ---------------------------------------------------------------------------
00019506                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00019506                            ; ---------------------------------------------------------------------------
00019506                            
00019506                            Obj52:					; XREF: Obj_Index
00019506 7000                       		moveq	#0,d0
00019508 1028 0024                  		move.b	routine(a0),d0
0001950C 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00019510 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00019514                            ; ===========================================================================
00019514 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00019516 0000                       		dc.w Obj52_Platform-Obj52_Index
00019518 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001951A                            
0001951A 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001951C 2001                       		dc.b $20, 1
0001951E 2002                       		dc.b $20, 2
00019520 4003                       		dc.b $40, 3
00019522 3004                       		dc.b $30, 4
00019524                            ; ===========================================================================
00019524                            
00019524                            Obj52_Main:				; XREF: Obj52_Index
00019524 5428 0024                  		addq.b	#2,routine(a0)
00019528 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00019530 317C 42B8 0002             		move.w	#$42B8,2(a0)
00019536 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001953C 6600                       		bne.s	loc_FE44
0001953E 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00019546 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001954C 117C 0007 0016             		move.b	#7,$16(a0)
00019552                            
00019552                            loc_FE44:
00019552 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00019558 6600                       		bne.s	loc_FE60
0001955A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00019560 0C28 0028 0028             		cmpi.b	#$28,subtype(a0)	; is object 5228 ?
00019566 6700                       		beq.s	loc_FE60	; if yes, branch
00019568 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001956E                            
0001956E                            loc_FE60:
0001956E 117C 0004 0001             		move.b	#4,1(a0)
00019574 7000                       		moveq	#0,d0
00019576 1028 0028                  		move.b	subtype(a0),d0
0001957A E648                       		lsr.w	#3,d0
0001957C 0240 001E                  		andi.w	#$1E,d0
00019580 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00019584 115A 0023                  		move.b	(a2)+,width_pixels(a0)
00019588 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001958C 317C 0200 0018             		move.w	#$200,priority(a0)
00019592 3168 0008 0030             		move.w	8(a0),$30(a0)
00019598 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001959E 0228 000F 0028             		andi.b	#$F,subtype(a0)
000195A4                            
000195A4                            Obj52_Platform:				; XREF: Obj52_Index
000195A4 4EB9 0000 0000             		jsr	Obj52_Move
000195AA 7200                       		moveq	#0,d1
000195AC 1228 0023                  		move.b	width_pixels(a0),d1
000195B0 4EB9 0000 F09A             		jsr	(PlatformObject).l
000195B6 6000                       		bra.s	Obj52_ChkDel
000195B8                            ; ===========================================================================
000195B8                            
000195B8                            Obj52_StandOn:				; XREF: Obj52_Index
000195B8 7200                       		moveq	#0,d1
000195BA 1228 0023                  		move.b	width_pixels(a0),d1
000195BE 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
000195C4 3F28 0008                  		move.w	8(a0),-(sp)
000195C8 4EB9 0000 0000             		jsr	Obj52_Move
000195CE 341F                       		move.w	(sp)+,d2
000195D0 4EB9 0000 F440             		jsr	(MvSonicOnPtfm2).l
000195D6                            
000195D6                            Obj52_ChkDel:				; XREF: Obj52_Platform
000195D6 3028 0030                  		move.w	$30(a0),d0
000195DA 4EFA F288                  		jmp		MarkObjGone2
000195DE                            ; ===========================================================================
000195DE                            
000195DE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000195DE 7000                       		moveq	#0,d0
000195E0 1028 0028                  		move.b	subtype(a0),d0
000195E4 0240 000F                  		andi.w	#$F,d0
000195E8 D040                       		add.w	d0,d0
000195EA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000195EE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000195F2                            ; ===========================================================================
000195F2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000195F6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000195FA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000195FE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00019602 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00019606 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00019608                            ; ===========================================================================
00019608                            
00019608                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00019608 4E75                       		rts	
0001960A                            ; ===========================================================================
0001960A                            
0001960A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001960A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001960E 323C 0060                  		move.w	#$60,d1
00019612 0828 0000 0022             		btst	#0,status(a0)
00019618 6700                       		beq.s	loc_FF26
0001961A 4440                       		neg.w	d0
0001961C D041                       		add.w	d1,d0
0001961E                            
0001961E                            loc_FF26:
0001961E 3228 0030                  		move.w	$30(a0),d1
00019622 9240                       		sub.w	d0,d1
00019624 3141 0008                  		move.w	d1,8(a0)
00019628 4E75                       		rts	
0001962A                            ; ===========================================================================
0001962A                            
0001962A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001962A 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; is Sonic standing on the platform?
00019630 6600                       		bne.s	Obj52_02_Wait
00019632 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
00019636                            
00019636                            Obj52_02_Wait:
00019636 4E75                       		rts	
00019638                            ; ===========================================================================
00019638                            
00019638                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00019638 7600                       		moveq	#0,d3
0001963A 1628 0023                  		move.b	width_pixels(a0),d3
0001963E 4EB9 0000 0000             		jsr	ObjHitWallRight
00019644 4A41                       		tst.w	d1		; has the platform hit a wall?
00019646 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00019648 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001964C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019652 4E75                       		rts	
00019654                            ; ===========================================================================
00019654                            
00019654                            Obj52_03_End:
00019654 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving	type)
00019658 4E75                       		rts	
0001965A                            ; ===========================================================================
0001965A                            
0001965A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001965A 7600                       		moveq	#0,d3
0001965C 1628 0023                  		move.b	width_pixels(a0),d3
00019660 4EB9 0000 0000             		jsr	ObjHitWallRight
00019666 4A41                       		tst.w	d1		; has the platform hit a wall?
00019668 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001966A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001966E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019674 4E75                       		rts	
00019676                            ; ===========================================================================
00019676                            
00019676                            Obj52_05_End:
00019676 5228 0028                  		addq.b	#1,subtype(a0)	; change to type 06 (falling)
0001967A 4E75                       		rts	
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001967C 4EBA C558                  		jsr	SpeedToPos
00019680 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make the platform fall
00019686 4EB9 0000 0000             		jsr	ObjHitFloor
0001968C 4A41                       		tst.w	d1		; has platform hit the floor?
0001968E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00019692 D368 000C                  		add.w	d1,$C(a0)
00019696 4268 0012                  		clr.w	y_vel(a0)		; stop platform	falling
0001969A 4228 0028                  		clr.b	subtype(a0)		; change to type 00 (non-moving)
0001969E                            
0001969E                            locret_FFA0:
0001969E 4E75                       		rts	
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000196A0 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000196A4 6700                       		beq.s	Obj52_07_ChkDel
000196A6 5728 0028                  		subq.b	#3,subtype(a0)	; if yes, change object	type to	04
000196AA                            
000196AA                            Obj52_07_ChkDel:
000196AA 588F                       		addq.l	#4,sp
000196AC 3028 0030                  		move.w	$30(a0),d0
000196B0 4EFA F4BC                  		jmp		MarkObjGone3
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000196B4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000196B8 323C 0080                  		move.w	#$80,d1
000196BC 0828 0000 0022             		btst	#0,status(a0)
000196C2 6700                       		beq.s	loc_FFE2
000196C4 4440                       		neg.w	d0
000196C6 D041                       		add.w	d1,d0
000196C8                            
000196C8                            loc_FFE2:
000196C8 3228 0032                  		move.w	$32(a0),d1
000196CC 9240                       		sub.w	d0,d1
000196CE 3141 000C                  		move.w	d1,$C(a0)
000196D2 4E75                       		rts	
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000196D4 7600                       		moveq	#0,d3
000196D6 1628 0023                  		move.b	width_pixels(a0),d3
000196DA D643                       		add.w	d3,d3
000196DC 7208                       		moveq	#8,d1
000196DE 0828 0000 0022             		btst	#0,status(a0)
000196E4 6700                       		beq.s	loc_10004
000196E6 4441                       		neg.w	d1
000196E8 4443                       		neg.w	d3
000196EA                            
000196EA                            loc_10004:
000196EA 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000196EE 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000196F0 3028 0008                  		move.w	8(a0),d0
000196F4 9068 0030                  		sub.w	$30(a0),d0
000196F8 B043                       		cmp.w	d3,d0
000196FA 6700                       		beq.s	Obj52_0A_Wait
000196FC D368 0008                  		add.w	d1,8(a0)	; move platform
00019700 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00019706 4E75                       		rts	
00019708                            ; ===========================================================================
00019708                            
00019708                            Obj52_0A_Wait:
00019708 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001970C 6600                       		bne.s	locret_1002E	; if time remains, branch
0001970E 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00019714                            
00019714                            locret_1002E:
00019714 4E75                       		rts	
00019716                            ; ===========================================================================
00019716                            
00019716                            Obj52_0A_Back:
00019716 3028 0008                  		move.w	8(a0),d0
0001971A 9068 0030                  		sub.w	$30(a0),d0
0001971E 6700                       		beq.s	Obj52_0A_Reset
00019720 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00019724 4E75                       		rts	
00019726                            ; ===========================================================================
00019726                            
00019726                            Obj52_0A_Reset:
00019726 4268 0036                  		clr.w	$36(a0)
0001972A 5328 0028                  		subq.b	#1,subtype(a0)
0001972E 4E75                       		rts	
00019730                            ; ===========================================================================
00019730                            ; ---------------------------------------------------------------------------
00019730                            ; Sprite mappings - moving blocks (MZ, SBZ)
00019730                            ; ---------------------------------------------------------------------------
00019730                            Map_obj52:
00019730                            	include "_maps\obj52mz.asm"
00019730                            ; ---------------------------------------------------------------------------
00019730                            ; Sprite mappings - moving blocks (MZ, SBZ)
00019730                            ; ---------------------------------------------------------------------------
00019730 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00019734 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00019738 0000                       		dc.w byte_1008F-Map_obj52
0001973A 01                         byte_10054:	dc.b 1
0001973B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00019740 02                         byte_1005A:	dc.b 2
00019741 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00019746 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001974B 04                         byte_10065:	dc.b 4
0001974C F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00019751 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00019756 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001975B 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00019760 04                         byte_1007A:	dc.b 4
00019761 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00019766 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001976B F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00019770 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00019775 03                         byte_1008F:	dc.b 3
00019776 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001977B F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00019780 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00019786 00                         		even
00019786 00                         		even
00019786                            
00019786                            ; ---------------------------------------------------------------------------
00019786                            ; Sprite mappings - moving block (LZ)
00019786                            ; ---------------------------------------------------------------------------
00019786                            Map_obj52a:
00019786                            	include "_maps\obj52lz.asm"
00019786                            ; ---------------------------------------------------------------------------
00019786                            ; Sprite mappings - moving block (LZ)
00019786                            ; ---------------------------------------------------------------------------
00019786 0000                       		dc.w byte_100A2-Map_obj52a
00019788 01                         byte_100A2:	dc.b 1
00019789 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001978E                            		even
0001978E                            		even
0001978E                            
0001978E                            ; ===========================================================================
0001978E                            ; ---------------------------------------------------------------------------
0001978E                            ; Object 55 - Basaran enemy (MZ)
0001978E                            ; ---------------------------------------------------------------------------
0001978E                            
0001978E                            Obj55:					; XREF: Obj_Index
0001978E 7000                       		moveq	#0,d0
00019790 1028 0024                  		move.b	routine(a0),d0
00019794 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00019798 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001979C                            ; ===========================================================================
0001979C 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001979E 0000                       		dc.w Obj55_Action-Obj55_Index
000197A0                            ; ===========================================================================
000197A0                            
000197A0                            Obj55_Main:				; XREF: Obj55_Index
000197A0 5428 0024                  		addq.b	#2,routine(a0)
000197A4 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000197AC 317C 84B8 0002             		move.w	#$84B8,2(a0)
000197B2 117C 0004 0001             		move.b	#4,1(a0)
000197B8 117C 000C 0016             		move.b	#$C,$16(a0)
000197BE 317C 0100 0018             		move.w	#$100,priority(a0)
000197C4 117C 000B 0020             		move.b	#$B,collision_flags(a0)
000197CA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000197D0                            
000197D0                            Obj55_Action:				; XREF: Obj55_Index
000197D0 7000                       		moveq	#0,d0
000197D2 1028 0025                  		move.b	routine_secondary(a0),d0
000197D6 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000197DA 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000197DE 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000197E4 4EBA 8E32                  		jsr	AnimateSprite
000197E8 6000 F044                  		bra.w	MarkObjGone
000197EC                            ; ===========================================================================
000197EC 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000197EE 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000197F0 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000197F2 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000197F4                            ; ===========================================================================
000197F4                            
000197F4                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000197F4 343C 0080                  		move.w	#$80,d2
000197F8 4EB9 0000 0000             		jsr	Obj55_ChkSonic
000197FE 6400                       		bcc.s	Obj55_NoDrop
00019800 3038 D00C                  		move.w	($FFFFD00C).w,d0
00019804 3140 0036                  		move.w	d0,$36(a0)
00019808 9068 000C                  		sub.w	$C(a0),d0
0001980C 6500                       		bcs.s	Obj55_NoDrop
0001980E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00019812 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00019814 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00019818 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001981A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001981E D007                       		add.b	d7,d0
00019820 0200 0007                  		andi.b	#7,d0
00019824 6600                       		bne.s	Obj55_NoDrop
00019826 117C 0001 001C             		move.b	#1,anim(a0)
0001982C 5428 0025                  		addq.b	#2,routine_secondary(a0)
00019830                            
00019830                            Obj55_NoDrop:
00019830 4E75                       		rts	
00019832                            ; ===========================================================================
00019832                            
00019832                            Obj55_DropFly:				; XREF: Obj55_Index2
00019832 4EBA C3A2                  		jsr	SpeedToPos
00019836 0668 0018 0012             		addi.w	#$18,y_vel(a0)	; make basaran fall
0001983C 343C 0080                  		move.w	#$80,d2
00019840 4EB9 0000 0000             		jsr	Obj55_ChkSonic
00019846 3028 0036                  		move.w	$36(a0),d0
0001984A 9068 000C                  		sub.w	$C(a0),d0
0001984E 6500                       		bcs.s	Obj55_ChkDel
00019850 0C40 0010                  		cmpi.w	#$10,d0
00019854 6400                       		bcc.s	locret_10180
00019856 3141 0010                  		move.w	d1,x_vel(a0)	; make basaran fly horizontally
0001985A 317C 0000 0012             		move.w	#0,y_vel(a0)	; stop basaran falling
00019860 117C 0002 001C             		move.b	#2,anim(a0)
00019866 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001986A                            
0001986A                            locret_10180:
0001986A 4E75                       		rts	
0001986C                            ; ===========================================================================
0001986C                            
0001986C                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001986C 4A28 0001                  		tst.b	1(a0)
00019870 6A00 C37E                  		bpl.w	DeleteObject
00019874 4E75                       		rts	
00019876                            ; ===========================================================================
00019876                            
00019876                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00019876 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001987A 0200 000F                  		andi.b	#$F,d0
0001987E 6600                       		bne.s	loc_101A0
00019880 303C 00C0                  		move.w	#$C0,d0
00019884 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play flapping sound
0001988A                            
0001988A                            loc_101A0:
0001988A 4EBA C34A                  		jsr	SpeedToPos
0001988E 3038 D008                  		move.w	($FFFFD008).w,d0
00019892 9068 0008                  		sub.w	8(a0),d0
00019896 6400                       		bcc.s	loc_101B0
00019898 4440                       		neg.w	d0
0001989A                            
0001989A                            loc_101B0:
0001989A 0C40 0080                  		cmpi.w	#$80,d0
0001989E 6500                       		bcs.s	locret_101C6
000198A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000198A4 D007                       		add.b	d7,d0
000198A6 0200 0007                  		andi.b	#7,d0
000198AA 6600                       		bne.s	locret_101C6
000198AC 5428 0025                  		addq.b	#2,routine_secondary(a0)
000198B0                            
000198B0                            locret_101C6:
000198B0 4E75                       		rts	
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            Obj55_FlyUp:				; XREF: Obj55_Index2
000198B2 4EBA C322                  		jsr	SpeedToPos
000198B6 0468 0018 0012             		subi.w	#$18,y_vel(a0)	; make basaran fly upwards
000198BC 4EB9 0000 0000             		jsr	ObjHitCeiling
000198C2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000198C4 6A00                       		bpl.s	locret_101F4	; if not, branch
000198C6 9368 000C                  		sub.w	d1,$C(a0)
000198CA 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000198D0 4268 0010                  		clr.w	x_vel(a0)		; stop basaran moving
000198D4 4268 0012                  		clr.w	y_vel(a0)
000198D8 4228 001C                  		clr.b	anim(a0)
000198DC 4228 0025                  		clr.b	routine_secondary(a0)
000198E0                            
000198E0                            locret_101F4:
000198E0 4E75                       		rts	
000198E2                            ; ===========================================================================
000198E2                            
000198E2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000198E2 323C 0100                  		move.w	#$100,d1
000198E6 08E8 0000 0022             		bset	#0,status(a0)
000198EC 3038 D008                  		move.w	($FFFFD008).w,d0
000198F0 9068 0008                  		sub.w	8(a0),d0
000198F4 6400                       		bcc.s	loc_10214
000198F6 4440                       		neg.w	d0
000198F8 4441                       		neg.w	d1
000198FA 08A8 0000 0022             		bclr	#0,status(a0)
00019900                            
00019900                            loc_10214:
00019900 B042                       		cmp.w	d2,d0
00019902 4E75                       		rts	
00019904                            ; ===========================================================================
00019904 4EBA C2D0                  		jsr	SpeedToPos
00019908 4EBA C332                  		jsr	DisplaySprite
0001990C 4A28 0001                  		tst.b	1(a0)
00019910 6A00 C2DE                  		bpl.w	DeleteObject
00019914 4E75                       		rts	
00019916                            ; ===========================================================================
00019916                            Ani_obj55:
00019916                            	include "_anim\obj55.asm"
00019916                            ; ---------------------------------------------------------------------------
00019916                            ; Animation script - Basaran enemy
00019916                            ; ---------------------------------------------------------------------------
00019916 0000                       		dc.w byte_10230-Ani_obj55
00019918 0000                       		dc.w byte_10234-Ani_obj55
0001991A 0000                       		dc.w byte_10238-Ani_obj55
0001991C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00019920 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00019924 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001992A                            		even
0001992A                            		even
0001992A                            
0001992A                            ; ---------------------------------------------------------------------------
0001992A                            ; Sprite mappings - Basaran enemy (MZ)
0001992A                            ; ---------------------------------------------------------------------------
0001992A                            Map_obj55:
0001992A                            	include "_maps\obj55.asm"
0001992A                            ; ---------------------------------------------------------------------------
0001992A                            ; Sprite mappings - Basaran enemy (MZ)
0001992A                            ; ---------------------------------------------------------------------------
0001992A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001992E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00019932 01                         byte_10246:	dc.b 1
00019933 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00019938 03                         byte_1024C:	dc.b 3
00019939 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001993E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00019943 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00019948 04                         byte_1025C:	dc.b 4
00019949 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001994E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00019953 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00019958 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001995D 04                         byte_10271:	dc.b 4
0001995E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00019963 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00019968 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001996D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00019972                            		even
00019972                            		even
00019972                            
00019972                            ; ===========================================================================
00019972                            ; ---------------------------------------------------------------------------
00019972                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00019972                            ; ---------------------------------------------------------------------------
00019972                            
00019972                            Obj56:					; XREF: Obj_Index
00019972 7000                       		moveq	#0,d0
00019974 1028 0024                  		move.b	routine(a0),d0
00019978 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001997C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00019980                            ; ===========================================================================
00019980 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00019982 0000                       		dc.w Obj56_Action-Obj56_Index
00019984                            
00019984 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00019986 2020                       		dc.b  $20, $20
00019988 1020                       		dc.b  $10, $20
0001998A 201A                       		dc.b  $20, $1A
0001998C 1027                       		dc.b  $10, $27
0001998E 1010                       		dc.b  $10, $10
00019990 0820                       		dc.b	8, $20
00019992 4010                       		dc.b  $40, $10
00019994                            ; ===========================================================================
00019994                            
00019994                            Obj56_Main:				; XREF: Obj56_Index
00019994 5428 0024                  		addq.b	#2,routine(a0)
00019998 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000199A0 317C 4000 0002             		move.w	#$4000,2(a0)
000199A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000199AC 6600                       		bne.s	loc_102C8
000199AE 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000199B4                            
000199B4                            loc_102C8:
000199B4 117C 0004 0001             		move.b	#4,1(a0)
000199BA 317C 0180 0018             		move.w	#$180,priority(a0)
000199C0 7000                       		moveq	#0,d0
000199C2 1028 0028                  		move.b	subtype(a0),d0
000199C6 E648                       		lsr.w	#3,d0
000199C8 0240 000E                  		andi.w	#$E,d0
000199CC 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000199D0 115A 0023                  		move.b	(a2)+,width_pixels(a0)
000199D4 1152 0016                  		move.b	(a2),$16(a0)
000199D8 E248                       		lsr.w	#1,d0
000199DA 1140 001A                  		move.b	d0,mapping_frame(a0)
000199DE 3168 0008 0034             		move.w	8(a0),$34(a0)
000199E4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000199EA 7000                       		moveq	#0,d0
000199EC 1012                       		move.b	(a2),d0
000199EE D040                       		add.w	d0,d0
000199F0 3140 003A                  		move.w	d0,$3A(a0)
000199F4 7000                       		moveq	#0,d0
000199F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000199FC 6700                       		beq.s	loc_10332
000199FE 1028 0028                  		move.b	subtype(a0),d0	; SYZ/SLZ specific code
00019A02 0240 000F                  		andi.w	#$F,d0
00019A06 5140                       		subq.w	#8,d0
00019A08 6500                       		bcs.s	loc_10332
00019A0A E548                       		lsl.w	#2,d0
00019A0C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00019A10 45F2 0000                  		lea	(a2,d0.w),a2
00019A14 4A52                       		tst.w	(a2)
00019A16 6A00                       		bpl.s	loc_10332
00019A18 0868 0000 0022             		bchg	#0,status(a0)
00019A1E                            
00019A1E                            loc_10332:
00019A1E 1028 0028                  		move.b	subtype(a0),d0
00019A22 6A00                       		bpl.s	Obj56_Action
00019A24 0200 000F                  		andi.b	#$F,d0
00019A28 1140 003C                  		move.b	d0,$3C(a0)
00019A2C 117C 0005 0028             		move.b	#5,subtype(a0)
00019A32 0C28 0007 001A             		cmpi.b	#7,mapping_frame(a0)
00019A38 6600                       		bne.s	Obj56_ChkGone
00019A3A 117C 000C 0028             		move.b	#$C,subtype(a0)
00019A40 317C 0080 003A             		move.w	#$80,$3A(a0)
00019A46                            
00019A46                            Obj56_ChkGone:
00019A46                            ;		lea	(v_objstate).w,a2
00019A46 7000                       		moveq	#0,d0
00019A48 3028 0014                  		move.w	respawn_index(a0),d0
00019A4C                            ;        move.w	respawn_index(a0),d0
00019A4C 6700                       		beq.s	Obj56_Action
00019A4E 3440                       	    movea.w	d0,a2
00019A50 0892 0007                  		bclr	#7,(a2)
00019A54 0812 0000                  		btst	#0,(a2)
00019A58 6700                       		beq.s	Obj56_Action
00019A5A 5228 0028                  		addq.b	#1,subtype(a0)
00019A5E 4268 003A                  		clr.w	$3A(a0)
00019A62                            
00019A62                            Obj56_Action:				; XREF: Obj56_Index
00019A62 3F28 0008                  		move.w	8(a0),-(sp)
00019A66 7000                       		moveq	#0,d0
00019A68 1028 0028                  		move.b	subtype(a0),d0	; get object type
00019A6C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00019A70 D040                       		add.w	d0,d0
00019A72 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00019A76 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00019A7A 381F                       		move.w	(sp)+,d4
00019A7C 4A28 0001                  		tst.b	1(a0)
00019A80 6A00                       		bpl.s	Obj56_ChkDel
00019A82 7200                       		moveq	#0,d1
00019A84 1228 0023                  		move.b	width_pixels(a0),d1
00019A88 0641 000B                  		addi.w	#$B,d1
00019A8C 7400                       		moveq	#0,d2
00019A8E 1428 0016                  		move.b	$16(a0),d2
00019A92 3602                       		move.w	d2,d3
00019A94 5243                       		addq.w	#1,d3
00019A96 4EBA F47A                  		jsr	SolidObject
00019A9A                            
00019A9A                            Obj56_ChkDel:
00019A9A 3028 0034                  		move.w	$34(a0),d0
00019A9E 4EFA EDC4                  		jmp		MarkObjGone2
00019AA2                            ; ===========================================================================
00019AA2 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00019AA6 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00019AAA 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00019AAE 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00019AB2 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00019AB6 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00019ABA 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00019ABE 4E75                       		rts	
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00019AC0 323C 0040                  		move.w	#$40,d1
00019AC4 7000                       		moveq	#0,d0
00019AC6 1038 FE68                  		move.b	($FFFFFE68).w,d0
00019ACA 6000                       		bra.s	Obj56_Move_LR
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00019ACC 323C 0080                  		move.w	#$80,d1
00019AD0 7000                       		moveq	#0,d0
00019AD2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00019AD6                            
00019AD6                            Obj56_Move_LR:
00019AD6 0828 0000 0022             		btst	#0,status(a0)
00019ADC 6700                       		beq.s	loc_10416
00019ADE 4440                       		neg.w	d0
00019AE0 D041                       		add.w	d1,d0
00019AE2                            
00019AE2                            loc_10416:
00019AE2 3228 0034                  		move.w	$34(a0),d1
00019AE6 9240                       		sub.w	d0,d1
00019AE8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00019AEC 4E75                       		rts	
00019AEE                            ; ===========================================================================
00019AEE                            
00019AEE                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00019AEE 323C 0040                  		move.w	#$40,d1
00019AF2 7000                       		moveq	#0,d0
00019AF4 1038 FE68                  		move.b	($FFFFFE68).w,d0
00019AF8 6000                       		bra.s	Obj56_Move_UD
00019AFA                            ; ===========================================================================
00019AFA                            
00019AFA                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00019AFA 323C 0080                  		move.w	#$80,d1
00019AFE 7000                       		moveq	#0,d0
00019B00 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00019B04                            
00019B04                            Obj56_Move_UD:
00019B04 0828 0000 0022             		btst	#0,status(a0)
00019B0A 6700                       		beq.s	loc_10444
00019B0C 4440                       		neg.w	d0
00019B0E D041                       		add.w	d1,d0
00019B10                            
00019B10                            loc_10444:
00019B10 3228 0030                  		move.w	$30(a0),d1
00019B14 9240                       		sub.w	d0,d1
00019B16 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00019B1A 4E75                       		rts	
00019B1C                            ; ===========================================================================
00019B1C                            
00019B1C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00019B1C 4A28 0038                  		tst.b	$38(a0)
00019B20 6600                       		bne.s	loc_104A4
00019B22 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00019B28 6600                       		bne.s	loc_1047A	; if not, branch
00019B2A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00019B30 6600                       		bne.s	loc_1047A
00019B32 4238 F7C9                  		clr.b	($FFFFF7C9).w
00019B36 3038 D008                  		move.w	($FFFFD008).w,d0
00019B3A B068 0008                  		cmp.w	8(a0),d0
00019B3E 6400                       		bcc.s	loc_1047A
00019B40 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00019B46                            
00019B46                            loc_1047A:
00019B46 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019B4A 7000                       		moveq	#0,d0
00019B4C 1028 003C                  		move.b	$3C(a0),d0
00019B50 0832 0000 0000             		btst	#0,(a2,d0.w)
00019B56 6700                       		beq.s	loc_104AE
00019B58 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00019B5E 6600                       		bne.s	loc_1049E	; if not, branch
00019B60 0C00 0003                  		cmpi.b	#3,d0
00019B64 6600                       		bne.s	loc_1049E
00019B66 4238 F7C9                  		clr.b	($FFFFF7C9).w
00019B6A                            
00019B6A                            loc_1049E:
00019B6A 117C 0001 0038             		move.b	#1,$38(a0)
00019B70                            
00019B70                            loc_104A4:
00019B70 4A68 003A                  		tst.w	$3A(a0)
00019B74 6700                       		beq.s	loc_104C8
00019B76 5568 003A                  		subq.w	#2,$3A(a0)
00019B7A                            
00019B7A                            loc_104AE:
00019B7A 3028 003A                  		move.w	$3A(a0),d0
00019B7E 0828 0000 0022             		btst	#0,status(a0)
00019B84 6700                       		beq.s	loc_104BC
00019B86 4440                       		neg.w	d0
00019B88                            
00019B88                            loc_104BC:
00019B88 3228 0030                  		move.w	$30(a0),d1
00019B8C D240                       		add.w	d0,d1
00019B8E 3141 000C                  		move.w	d1,$C(a0)
00019B92 4E75                       		rts	
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            loc_104C8:
00019B94 5228 0028                  		addq.b	#1,subtype(a0)
00019B98 4228 0038                  		clr.b	$38(a0)
00019B9C                            ;		lea	(v_objstate).w,a2
00019B9C 7000                       		moveq	#0,d0
00019B9E 3028 0014                  		move.w	respawn_index(a0),d0
00019BA2                            ;        move.w	respawn_index(a0),d0
00019BA2 3440                       	    movea.w	d0,a2
00019BA4 67D4                       		beq.s	loc_104AE
00019BA6 08D2 0000                  		bset	#0,(a2)
00019BAA 60CE                       		bra.s	loc_104AE
00019BAC                            ; ===========================================================================
00019BAC                            
00019BAC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00019BAC 4A28 0038                  		tst.b	$38(a0)
00019BB0 6600                       		bne.s	loc_10500
00019BB2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019BB6 7000                       		moveq	#0,d0
00019BB8 1028 003C                  		move.b	$3C(a0),d0
00019BBC 4A32 0000                  		tst.b	(a2,d0.w)
00019BC0 6A00                       		bpl.s	loc_10512
00019BC2 117C 0001 0038             		move.b	#1,$38(a0)
00019BC8                            
00019BC8                            loc_10500:
00019BC8 7000                       		moveq	#0,d0
00019BCA 1028 0016                  		move.b	$16(a0),d0
00019BCE D040                       		add.w	d0,d0
00019BD0 B068 003A                  		cmp.w	$3A(a0),d0
00019BD4 6700                       		beq.s	loc_1052C
00019BD6 5468 003A                  		addq.w	#2,$3A(a0)
00019BDA                            
00019BDA                            loc_10512:
00019BDA 3028 003A                  		move.w	$3A(a0),d0
00019BDE 0828 0000 0022             		btst	#0,status(a0)
00019BE4 6700                       		beq.s	loc_10520
00019BE6 4440                       		neg.w	d0
00019BE8                            
00019BE8                            loc_10520:
00019BE8 3228 0030                  		move.w	$30(a0),d1
00019BEC D240                       		add.w	d0,d1
00019BEE 3141 000C                  		move.w	d1,$C(a0)
00019BF2 4E75                       		rts	
00019BF4                            ; ===========================================================================
00019BF4                            
00019BF4                            loc_1052C:
00019BF4 5328 0028                  		subq.b	#1,subtype(a0)
00019BF8 4228 0038                  		clr.b	$38(a0)
00019BFC                            ;		lea	(v_objstate).w,a2
00019BFC 7000                       		moveq	#0,d0
00019BFE 3028 0014                  		move.w	respawn_index(a0),d0
00019C02                            ;        move.w	respawn_index(a0),d0
00019C02 3440                       	    movea.w	d0,a2		
00019C04 67D4                       		beq.s	loc_10512
00019C06 0892 0000                  		bclr	#0,(a2)
00019C0A 60CE                       		bra.s	loc_10512
00019C0C                            ; ===========================================================================
00019C0C                            
00019C0C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00019C0C 4A28 0038                  		tst.b	$38(a0)
00019C10 6600                       		bne.s	loc_1055E
00019C12 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00019C16 6700                       		beq.s	locret_10578
00019C18 117C 0001 0038             		move.b	#1,$38(a0)
00019C1E 4268 003A                  		clr.w	$3A(a0)
00019C22                            
00019C22                            loc_1055E:
00019C22 5268 0008                  		addq.w	#1,8(a0)
00019C26 3168 0008 0034             		move.w	8(a0),$34(a0)
00019C2C 5268 003A                  		addq.w	#1,$3A(a0)
00019C30 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00019C36 6600                       		bne.s	locret_10578
00019C38 4228 0028                  		clr.b	subtype(a0)
00019C3C                            
00019C3C                            locret_10578:
00019C3C 4E75                       		rts	
00019C3E                            ; ===========================================================================
00019C3E                            
00019C3E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00019C3E 4A28 0038                  		tst.b	$38(a0)
00019C42 6600                       		bne.s	loc_10598
00019C44 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019C48 7000                       		moveq	#0,d0
00019C4A 1028 003C                  		move.b	$3C(a0),d0
00019C4E 0832 0000 0000             		btst	#0,(a2,d0.w)
00019C54 6700                       		beq.s	loc_105A2
00019C56 117C 0001 0038             		move.b	#1,$38(a0)
00019C5C                            
00019C5C                            loc_10598:
00019C5C 4A68 003A                  		tst.w	$3A(a0)
00019C60 6700                       		beq.s	loc_105C0
00019C62 5568 003A                  		subq.w	#2,$3A(a0)
00019C66                            
00019C66                            loc_105A2:
00019C66 3028 003A                  		move.w	$3A(a0),d0
00019C6A 0828 0000 0022             		btst	#0,status(a0)
00019C70 6700                       		beq.s	loc_105B4
00019C72 4440                       		neg.w	d0
00019C74 0640 0080                  		addi.w	#$80,d0
00019C78                            
00019C78                            loc_105B4:
00019C78 3228 0034                  		move.w	$34(a0),d1
00019C7C D240                       		add.w	d0,d1
00019C7E 3141 0008                  		move.w	d1,8(a0)
00019C82 4E75                       		rts	
00019C84                            ; ===========================================================================
00019C84                            
00019C84                            loc_105C0:
00019C84 5228 0028                  		addq.b	#1,subtype(a0)
00019C88 4228 0038                  		clr.b	$38(a0)
00019C8C                            ;		lea	(v_objstate).w,a2
00019C8C 7000                       		moveq	#0,d0
00019C8E 3028 0014                  		move.w	respawn_index(a0),d0
00019C92                            ;        move.w	respawn_index(a0),d0
00019C92 3440                       	    movea.w	d0,a2
00019C94 67D0                       		beq.s	loc_105A2
00019C96 08D2 0000                  		bset	#0,(a2)
00019C9A 60CA                       		bra.s	loc_105A2
00019C9C                            ; ===========================================================================
00019C9C                            
00019C9C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00019C9C 4A28 0038                  		tst.b	$38(a0)
00019CA0 6600                       		bne.s	loc_105F8
00019CA2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00019CA6 7000                       		moveq	#0,d0
00019CA8 1028 003C                  		move.b	$3C(a0),d0
00019CAC 4A32 0000                  		tst.b	(a2,d0.w)
00019CB0 6A00                       		bpl.s	loc_10606
00019CB2 117C 0001 0038             		move.b	#1,$38(a0)
00019CB8                            
00019CB8                            loc_105F8:
00019CB8 303C 0080                  		move.w	#$80,d0
00019CBC B068 003A                  		cmp.w	$3A(a0),d0
00019CC0 6700                       		beq.s	loc_10624
00019CC2 5468 003A                  		addq.w	#2,$3A(a0)
00019CC6                            
00019CC6                            loc_10606:
00019CC6 3028 003A                  		move.w	$3A(a0),d0
00019CCA 0828 0000 0022             		btst	#0,status(a0)
00019CD0 6700                       		beq.s	loc_10618
00019CD2 4440                       		neg.w	d0
00019CD4 0640 0080                  		addi.w	#$80,d0
00019CD8                            
00019CD8                            loc_10618:
00019CD8 3228 0034                  		move.w	$34(a0),d1
00019CDC D240                       		add.w	d0,d1
00019CDE 3141 0008                  		move.w	d1,8(a0)
00019CE2 4E75                       		rts	
00019CE4                            ; ===========================================================================
00019CE4                            
00019CE4                            loc_10624:
00019CE4 5328 0028                  		subq.b	#1,subtype(a0)
00019CE8 4228 0038                  		clr.b	$38(a0)
00019CEC                            ;		lea	(v_objstate).w,a2
00019CEC 7000                       		moveq	#0,d0
00019CEE 3028 0014                  		move.w	respawn_index(a0),d0
00019CF2                            ;        move.w	respawn_index(a0),d0
00019CF2 3440                       	    movea.w	d0,a2		
00019CF4 67D0                       		beq.s	loc_10606
00019CF6 0892 0000                  		bclr	#0,(a2)
00019CFA 60CA                       		bra.s	loc_10606
00019CFC                            ; ===========================================================================
00019CFC                            
00019CFC                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00019CFC 323C 0010                  		move.w	#$10,d1
00019D00 7000                       		moveq	#0,d0
00019D02 1038 FE88                  		move.b	($FFFFFE88).w,d0
00019D06 E248                       		lsr.w	#1,d0
00019D08 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00019D0C 6000                       		bra.s	Obj56_Move_Sqr
00019D0E                            ; ===========================================================================
00019D0E                            
00019D0E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00019D0E 323C 0030                  		move.w	#$30,d1
00019D12 7000                       		moveq	#0,d0
00019D14 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00019D18 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00019D1C 6000                       		bra.s	Obj56_Move_Sqr
00019D1E                            ; ===========================================================================
00019D1E                            
00019D1E                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00019D1E 323C 0050                  		move.w	#$50,d1
00019D22 7000                       		moveq	#0,d0
00019D24 1038 FE90                  		move.b	($FFFFFE90).w,d0
00019D28 3638 FE92                  		move.w	($FFFFFE92).w,d3
00019D2C 6000                       		bra.s	Obj56_Move_Sqr
00019D2E                            ; ===========================================================================
00019D2E                            
00019D2E                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00019D2E 323C 0070                  		move.w	#$70,d1
00019D32 7000                       		moveq	#0,d0
00019D34 1038 FE94                  		move.b	($FFFFFE94).w,d0
00019D38 3638 FE96                  		move.w	($FFFFFE96).w,d3
00019D3C                            
00019D3C                            Obj56_Move_Sqr:
00019D3C 4A43                       		tst.w	d3
00019D3E 6600                       		bne.s	loc_1068E
00019D40 5228 0022                  		addq.b	#1,status(a0)
00019D44 0228 0003 0022             		andi.b	#3,status(a0)
00019D4A                            
00019D4A                            loc_1068E:
00019D4A 1428 0022                  		move.b	status(a0),d2
00019D4E 0202 0003                  		andi.b	#3,d2
00019D52 6600                       		bne.s	loc_106AE
00019D54 9041                       		sub.w	d1,d0
00019D56 D068 0034                  		add.w	$34(a0),d0
00019D5A 3140 0008                  		move.w	d0,8(a0)
00019D5E 4441                       		neg.w	d1
00019D60 D268 0030                  		add.w	$30(a0),d1
00019D64 3141 000C                  		move.w	d1,$C(a0)
00019D68 4E75                       		rts	
00019D6A                            ; ===========================================================================
00019D6A                            
00019D6A                            loc_106AE:
00019D6A 5302                       		subq.b	#1,d2
00019D6C 6600                       		bne.s	loc_106CC
00019D6E 5341                       		subq.w	#1,d1
00019D70 9041                       		sub.w	d1,d0
00019D72 4440                       		neg.w	d0
00019D74 D068 0030                  		add.w	$30(a0),d0
00019D78 3140 000C                  		move.w	d0,$C(a0)
00019D7C 5241                       		addq.w	#1,d1
00019D7E D268 0034                  		add.w	$34(a0),d1
00019D82 3141 0008                  		move.w	d1,8(a0)
00019D86 4E75                       		rts	
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            loc_106CC:
00019D88 5302                       		subq.b	#1,d2
00019D8A 6600                       		bne.s	loc_106EA
00019D8C 5341                       		subq.w	#1,d1
00019D8E 9041                       		sub.w	d1,d0
00019D90 4440                       		neg.w	d0
00019D92 D068 0034                  		add.w	$34(a0),d0
00019D96 3140 0008                  		move.w	d0,8(a0)
00019D9A 5241                       		addq.w	#1,d1
00019D9C D268 0030                  		add.w	$30(a0),d1
00019DA0 3141 000C                  		move.w	d1,$C(a0)
00019DA4 4E75                       		rts	
00019DA6                            ; ===========================================================================
00019DA6                            
00019DA6                            loc_106EA:
00019DA6 9041                       		sub.w	d1,d0
00019DA8 D068 0030                  		add.w	$30(a0),d0
00019DAC 3140 000C                  		move.w	d0,$C(a0)
00019DB0 4441                       		neg.w	d1
00019DB2 D268 0034                  		add.w	$34(a0),d1
00019DB6 3141 0008                  		move.w	d1,8(a0)
00019DBA 4E75                       		rts	
00019DBC                            ; ===========================================================================
00019DBC                            ; ---------------------------------------------------------------------------
00019DBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00019DBC                            ; ---------------------------------------------------------------------------
00019DBC                            Map_obj56:
00019DBC                            	include "_maps\obj56.asm"
00019DBC                            ; ---------------------------------------------------------------------------
00019DBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00019DBC                            ; ---------------------------------------------------------------------------
00019DBC 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00019DC0 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00019DC4 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00019DC8 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00019DCC 01                         byte_10710:	dc.b 1
00019DCD F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00019DD2 04                         byte_10716:	dc.b 4
00019DD3 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00019DD8 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00019DDD 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00019DE2 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00019DE7 02                         byte_1072B:	dc.b 2
00019DE8 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00019DED 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00019DF2 04                         byte_10736:	dc.b 4
00019DF3 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00019DF8 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00019DFD 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00019E02 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00019E07 03                         byte_1074B:	dc.b 3
00019E08 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00019E0D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00019E12 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00019E17 01                         byte_1075B:	dc.b 1
00019E18 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00019E1D 02                         byte_10761:	dc.b 2
00019E1E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00019E23 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00019E28 04                         byte_1076C:	dc.b 4
00019E29 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00019E2E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00019E33 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00019E38 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00019E3E 00                         		even
00019E3E 00                         		even
00019E3E                            
00019E3E                            ; ===========================================================================
00019E3E                            ; ---------------------------------------------------------------------------
00019E3E                            ; Object 57 - spiked balls (SYZ, LZ)
00019E3E                            ; ---------------------------------------------------------------------------
00019E3E                            
00019E3E                            Obj57:					; XREF: Obj_Index
00019E3E 7000                       		moveq	#0,d0
00019E40 1028 0024                  		move.b	$24(a0),d0
00019E44 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00019E48 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00019E4C                            ; ===========================================================================
00019E4C 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00019E4E 0000                       		dc.w Obj57_Move-Obj57_Index
00019E50 0000                       		dc.w Obj57_Display-Obj57_Index
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            Obj57_Main:				; XREF: Obj57_Index
00019E52 5428 0024                  		addq.b	#2,$24(a0)
00019E56 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00019E5E 317C 03BA 0002             		move.w	#$3BA,2(a0)
00019E64 117C 0004 0001             		move.b	#4,1(a0)
00019E6A 317C 0200 0018             		move.w	#$200,priority(a0)
00019E70 117C 0008 0023             		move.b	#8,width_pixels(a0)
00019E76 3168 0008 003A             		move.w	8(a0),$3A(a0)
00019E7C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019E82 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00019E88 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019E8E 6600                       		bne.s	loc_107E8
00019E90 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00019E96 317C 0310 0002             		move.w	#$310,2(a0)
00019E9C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00019EA4                            
00019EA4                            loc_107E8:
00019EA4 1228 0028                  		move.b	$28(a0),d1	; get object type
00019EA8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00019EAC 4881                       		ext.w	d1
00019EAE E741                       		asl.w	#3,d1		; multiply by 8
00019EB0 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00019EB4 1028 0022                  		move.b	$22(a0),d0
00019EB8 E418                       		ror.b	#2,d0
00019EBA 0200 00C0                  		andi.b	#-$40,d0
00019EBE 1140 0026                  		move.b	d0,$26(a0)
00019EC2 45E8 0029                  		lea	$29(a0),a2
00019EC6 1228 0028                  		move.b	$28(a0),d1	; get object type
00019ECA 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00019ECE 14FC 0000                  		move.b	#0,(a2)+
00019ED2 3601                       		move.w	d1,d3
00019ED4 E94B                       		lsl.w	#4,d3
00019ED6 1143 003C                  		move.b	d3,$3C(a0)
00019EDA 5341                       		subq.w	#1,d1		; set chain length (type-1)
00019EDC 6500                       		bcs.s	loc_10894
00019EDE 0828 0003 0028             		btst	#3,$28(a0)
00019EE4 6700                       		beq.s	Obj57_MakeChain
00019EE6 5341                       		subq.w	#1,d1
00019EE8 6500                       		bcs.s	loc_10894
00019EEA                            
00019EEA                            Obj57_MakeChain:
00019EEA 6100 C81C                  		bsr.w	SingleObjLoad
00019EEE 6600                       		bne.s	loc_10894
00019EF0 5228 0029                  		addq.b	#1,$29(a0)
00019EF4 3A09                       		move.w	a1,d5
00019EF6 0445 D000                  		subi.w	#-$3000,d5
00019EFA EC4D                       		lsr.w	#6,d5
00019EFC 0245 007F                  		andi.w	#$7F,d5
00019F00 14C5                       		move.b	d5,(a2)+
00019F02 137C 0004 0024             		move.b	#4,$24(a1)
00019F08 1290                       		move.b	0(a0),0(a1)
00019F0A 2368 0004 0004             		move.l	4(a0),4(a1)
00019F10 3368 0002 0002             		move.w	2(a0),2(a1)
00019F16 1368 0001 0001             		move.b	1(a0),1(a1)
00019F1C 3368 0018 0018             		move.w	priority(a0),priority(a1)
00019F22 1368 0023 0023             		move.b	width_pixels(a0),width_pixels(a1)
00019F28 1368 0020 0020             		move.b	$20(a0),$20(a1)
00019F2E 0403 0010                  		subi.b	#$10,d3
00019F32 1343 003C                  		move.b	d3,$3C(a1)
00019F36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00019F3C 6600                       		bne.s	loc_10890
00019F3E 4A03                       		tst.b	d3
00019F40 6600                       		bne.s	loc_10890
00019F42 137C 0002 001A             		move.b	#2,$1A(a1)
00019F48                            
00019F48                            loc_10890:
00019F48 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00019F4C                            
00019F4C                            loc_10894:
00019F4C 3A08                       		move.w	a0,d5
00019F4E 0445 D000                  		subi.w	#-$3000,d5
00019F52 EC4D                       		lsr.w	#6,d5
00019F54 0245 007F                  		andi.w	#$7F,d5
00019F58 14C5                       		move.b	d5,(a2)+
00019F5A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00019F60 6600                       		bne.s	Obj57_Move
00019F62 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00019F68 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00019F6E                            
00019F6E                            Obj57_Move:				; XREF: Obj57_Index
00019F6E 6100 0000                  		bsr.w	Obj57_MoveSub
00019F72 6000 0000                  		bra.w	Obj57_ChkDel
00019F76                            ; ===========================================================================
00019F76                            
00019F76                            Obj57_MoveSub:				; XREF: Obj57_Move
00019F76 3028 003E                  		move.w	$3E(a0),d0
00019F7A D168 0026                  		add.w	d0,$26(a0)
00019F7E 1028 0026                  		move.b	$26(a0),d0
00019F82 4EB9 0000 8DA4             		jsr	(CalcSine).l
00019F88 3428 0038                  		move.w	$38(a0),d2
00019F8C 3628 003A                  		move.w	$3A(a0),d3
00019F90 45E8 0029                  		lea	$29(a0),a2
00019F94 7C00                       		moveq	#0,d6
00019F96 1C1A                       		move.b	(a2)+,d6
00019F98                            
00019F98                            Obj57_MoveLoop:
00019F98 7800                       		moveq	#0,d4
00019F9A 181A                       		move.b	(a2)+,d4
00019F9C ED4C                       		lsl.w	#6,d4
00019F9E 0684 00FF D000             		addi.l	#$FFD000,d4
00019FA4 2244                       		movea.l	d4,a1
00019FA6 7800                       		moveq	#0,d4
00019FA8 1829 003C                  		move.b	$3C(a1),d4
00019FAC 2A04                       		move.l	d4,d5
00019FAE C9C0                       		muls.w	d0,d4
00019FB0 E084                       		asr.l	#8,d4
00019FB2 CBC1                       		muls.w	d1,d5
00019FB4 E085                       		asr.l	#8,d5
00019FB6 D842                       		add.w	d2,d4
00019FB8 DA43                       		add.w	d3,d5
00019FBA 3344 000C                  		move.w	d4,$C(a1)
00019FBE 3345 0008                  		move.w	d5,8(a1)
00019FC2 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00019FC6 4E75                       		rts	
00019FC8                            ; ===========================================================================
00019FC8                            
00019FC8                            Obj57_ChkDel:				; XREF: Obj57_Move
00019FC8 3028 003A                  		move.w	$3A(a0),d0
00019FCC 0240 FF80                  		andi.w	#$FF80,d0
00019FD0 3238 F700                  		move.w	($FFFFF700).w,d1
00019FD4 0441 0080                  		subi.w	#$80,d1
00019FD8 0241 FF80                  		andi.w	#$FF80,d1
00019FDC 9041                       		sub.w	d1,d0
00019FDE 0C40 0280                  		cmpi.w	#$280,d0
00019FE2 6200 0000                  		bhi.w	Obj57_Delete
00019FE6 6000 BC54                  		bra.w	DisplaySprite
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            Obj57_Delete:				; XREF: Obj57_ChkDel
00019FEA 7400                       		moveq	#0,d2
00019FEC 45E8 0029                  		lea	$29(a0),a2
00019FF0 141A                       		move.b	(a2)+,d2
00019FF2                            
00019FF2                            Obj57_DelLoop:
00019FF2 7000                       		moveq	#0,d0
00019FF4 101A                       		move.b	(a2)+,d0
00019FF6 ED48                       		lsl.w	#6,d0
00019FF8 0680 00FF D000             		addi.l	#$FFD000,d0
00019FFE 2240                       		movea.l	d0,a1
0001A000 6100 BBF0                  		bsr.w	DeleteObject2
0001A004 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001A008                            
0001A008 4E75                       		rts	
0001A00A                            ; ===========================================================================
0001A00A                            
0001A00A                            Obj57_Display:				; XREF: Obj57_Index
0001A00A 6000 BC30                  		bra.w	DisplaySprite
0001A00E                            ; ===========================================================================
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E                            Map_obj57:
0001A00E                            	include "_maps\obj57syz.asm"
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E                            ; Sprite mappings - chain of spiked balls (SYZ)
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E 0000                       		dc.w byte_10958-Map_obj57
0001A010 01                         byte_10958:	dc.b 1
0001A011 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A016                            		even
0001A016                            		even
0001A016                            
0001A016                            ; ---------------------------------------------------------------------------
0001A016                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A016                            ; ---------------------------------------------------------------------------
0001A016                            Map_obj57a:
0001A016                            	include "_maps\obj57lz.asm"
0001A016                            ; ---------------------------------------------------------------------------
0001A016                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001A016                            ; ---------------------------------------------------------------------------
0001A016 0000                       		dc.w byte_10964-Map_obj57a
0001A018 0000                       		dc.w byte_1096A-Map_obj57a
0001A01A 0000                       		dc.w byte_10970-Map_obj57a
0001A01C 01                         byte_10964:	dc.b 1
0001A01D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001A022 01                         byte_1096A:	dc.b 1
0001A023 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001A028 01                         byte_10970:	dc.b 1
0001A029 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001A02E                            		even
0001A02E                            		even
0001A02E                            
0001A02E                            ; ===========================================================================
0001A02E                            ; ---------------------------------------------------------------------------
0001A02E                            ; Object 58 - giant spiked balls (SYZ)
0001A02E                            ; ---------------------------------------------------------------------------
0001A02E                            
0001A02E                            Obj58:					; XREF: Obj_Index
0001A02E 7000                       		moveq	#0,d0
0001A030 1028 0024                  		move.b	routine(a0),d0
0001A034 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001A038 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001A03C                            ; ===========================================================================
0001A03C 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001A03E 0000                       		dc.w Obj58_Move-Obj58_Index
0001A040                            ; ===========================================================================
0001A040                            
0001A040                            Obj58_Main:				; XREF: Obj58_Index
0001A040 5428 0024                  		addq.b	#2,routine(a0)
0001A044 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001A04C 317C 0396 0002             		move.w	#$396,2(a0)
0001A052 117C 0004 0001             		move.b	#4,1(a0)
0001A058 317C 0200 0018             		move.w	#$200,priority(a0)
0001A05E 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001A064 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001A06A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A070 117C 0086 0020             		move.b	#$86,collision_flags(a0)
0001A076 1228 0028                  		move.b	subtype(a0),d1	; get object type
0001A07A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001A07E 4881                       		ext.w	d1
0001A080 E741                       		asl.w	#3,d1		; multiply by 8
0001A082 3141 003E                  		move.w	d1,parent(a0)	; set object speed
0001A086 1028 0022                  		move.b	status(a0),d0
0001A08A E418                       		ror.b	#2,d0
0001A08C 0200 00C0                  		andi.b	#$C0,d0
0001A090 1140 0026                  		move.b	d0,$26(a0)
0001A094 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001A09A                            
0001A09A                            Obj58_Move:				; XREF: Obj58_Index
0001A09A 7000                       		moveq	#0,d0
0001A09C 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A0A0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001A0A4 D040                       		add.w	d0,d0
0001A0A6 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001A0AA 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001A0AE 3028 003A                  		move.w	$3A(a0),d0
0001A0B2 4EFA E7B0                  		jmp MarkObjGone2
0001A0B6                            ; ===========================================================================
0001A0B6 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001A0B8 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001A0BA 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001A0BC 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001A0BE                            ; ===========================================================================
0001A0BE                            
0001A0BE                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001A0BE 4E75                       		rts	
0001A0C0                            ; ===========================================================================
0001A0C0                            
0001A0C0                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001A0C0 323C 0060                  		move.w	#$60,d1
0001A0C4 7000                       		moveq	#0,d0
0001A0C6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A0CA 0828 0000 0022             		btst	#0,status(a0)
0001A0D0 6700                       		beq.s	loc_10A38
0001A0D2 4440                       		neg.w	d0
0001A0D4 D041                       		add.w	d1,d0
0001A0D6                            
0001A0D6                            loc_10A38:
0001A0D6 3228 003A                  		move.w	$3A(a0),d1
0001A0DA 9240                       		sub.w	d0,d1
0001A0DC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001A0E0 4E75                       		rts	
0001A0E2                            ; ===========================================================================
0001A0E2                            
0001A0E2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001A0E2 323C 0060                  		move.w	#$60,d1
0001A0E6 7000                       		moveq	#0,d0
0001A0E8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001A0EC 0828 0000 0022             		btst	#0,status(a0)
0001A0F2 6700                       		beq.s	loc_10A5C
0001A0F4 4440                       		neg.w	d0
0001A0F6 0640 0080                  		addi.w	#$80,d0
0001A0FA                            
0001A0FA                            loc_10A5C:
0001A0FA 3228 0038                  		move.w	$38(a0),d1
0001A0FE 9240                       		sub.w	d0,d1
0001A100 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001A104 4E75                       		rts	
0001A106                            ; ===========================================================================
0001A106                            
0001A106                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001A106 3028 003E                  		move.w	parent(a0),d0
0001A10A D168 0026                  		add.w	d0,$26(a0)
0001A10E 1028 0026                  		move.b	$26(a0),d0
0001A112 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001A118 3428 0038                  		move.w	$38(a0),d2
0001A11C 3628 003A                  		move.w	$3A(a0),d3
0001A120 7800                       		moveq	#0,d4
0001A122 1828 003C                  		move.b	$3C(a0),d4
0001A126 2A04                       		move.l	d4,d5
0001A128 C9C0                       		muls.w	d0,d4
0001A12A E084                       		asr.l	#8,d4
0001A12C CBC1                       		muls.w	d1,d5
0001A12E E085                       		asr.l	#8,d5
0001A130 D842                       		add.w	d2,d4
0001A132 DA43                       		add.w	d3,d5
0001A134 3144 000C                  		move.w	d4,$C(a0)
0001A138 3145 0008                  		move.w	d5,8(a0)
0001A13C 4E75                       		rts	
0001A13E                            ; ===========================================================================
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E                            ; Sprite mappings - SBZ	spiked ball on a chain
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E                            Map_obj15b:
0001A13E                            	include "_maps\obj15sbz.asm"
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001A13E                            ; ---------------------------------------------------------------------------
0001A13E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001A142 0000                       		dc.w byte_10AC6-Map_obj15b
0001A144 05                         byte_10AA6:	dc.b 5
0001A145 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001A14A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001A14F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001A154 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001A159 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001A15E 01                         byte_10AC0:	dc.b 1
0001A15F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001A164 02                         byte_10AC6:	dc.b 2
0001A165 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001A16A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001A170 00                         		even
0001A170 00                         		even
0001A170                            
0001A170                            ; ===========================================================================
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            
0001A170                            Obj59:					; XREF: Obj_Index
0001A170 7000                       		moveq	#0,d0
0001A172 1028 0024                  		move.b	routine(a0),d0
0001A176 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001A17A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001A17E 3028 0032                  		move.w	$32(a0),d0
0001A182 4EFA E6E0                  		jmp		MarkObjGone2
0001A186                            ; ===========================================================================
0001A186 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001A188 0000                       		dc.w Obj59_Platform-Obj59_Index
0001A18A 0000                       		dc.w Obj59_Action-Obj59_Index
0001A18C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001A18E                            
0001A18E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001A190                            
0001A190 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001A192 2001                       		dc.b $20, 1
0001A194 3401                       		dc.b $34, 1
0001A196 1003                       		dc.b $10, 3
0001A198 2003                       		dc.b $20, 3
0001A19A 3403                       		dc.b $34, 3
0001A19C 1401                       		dc.b $14, 1
0001A19E 2401                       		dc.b $24, 1
0001A1A0 2C01                       		dc.b $2C, 1
0001A1A2 1403                       		dc.b $14, 3
0001A1A4 2403                       		dc.b $24, 3
0001A1A6 2C03                       		dc.b $2C, 3
0001A1A8 2005                       		dc.b $20, 5
0001A1AA 2007                       		dc.b $20, 7
0001A1AC 3009                       		dc.b $30, 9
0001A1AE                            ; ===========================================================================
0001A1AE                            
0001A1AE                            Obj59_Main:				; XREF: Obj59_Index
0001A1AE 5428 0024                  		addq.b	#2,routine(a0)
0001A1B2 7000                       		moveq	#0,d0
0001A1B4 1028 0028                  		move.b	subtype(a0),d0
0001A1B8 6A00                       		bpl.s	Obj59_Main2
0001A1BA 5828 0024                  		addq.b	#4,routine(a0)
0001A1BE 0240 007F                  		andi.w	#$7F,d0
0001A1C2 C0FC 0006                  		mulu.w	#6,d0
0001A1C6 3140 003C                  		move.w	d0,$3C(a0)
0001A1CA 3140 003E                  		move.w	d0,parent(a0)
0001A1CE 588F                       		addq.l	#4,sp
0001A1D0 4E75                       		rts	
0001A1D2                            ; ===========================================================================
0001A1D2                            
0001A1D2                            Obj59_Main2:
0001A1D2 E648                       		lsr.w	#3,d0
0001A1D4 0240 001E                  		andi.w	#$1E,d0
0001A1D8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001A1DC 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001A1E0 115A 001A                  		move.b	(a2)+,mapping_frame(a0)
0001A1E4 7000                       		moveq	#0,d0
0001A1E6 1028 0028                  		move.b	subtype(a0),d0
0001A1EA D040                       		add.w	d0,d0
0001A1EC 0240 001E                  		andi.w	#$1E,d0
0001A1F0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001A1F4 101A                       		move.b	(a2)+,d0
0001A1F6 E548                       		lsl.w	#2,d0
0001A1F8 3140 003C                  		move.w	d0,$3C(a0)
0001A1FC 115A 0028                  		move.b	(a2)+,subtype(a0)
0001A200 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001A208 317C 4000 0002             		move.w	#$4000,2(a0)
0001A20E 117C 0004 0001             		move.b	#4,1(a0)
0001A214 317C 0200 0018             		move.w	#$200,priority(a0)
0001A21A 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A220 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A226                            
0001A226                            Obj59_Platform:				; XREF: Obj59_Index
0001A226 7200                       		moveq	#0,d1
0001A228 1228 0023                  		move.b	width_pixels(a0),d1
0001A22C 4EB9 0000 F09A             		jsr	(PlatformObject).l
0001A232 6000 0000                  		bra.w	Obj59_Types
0001A236                            ; ===========================================================================
0001A236                            
0001A236                            Obj59_Action:				; XREF: Obj59_Index
0001A236 7200                       		moveq	#0,d1
0001A238 1228 0023                  		move.b	width_pixels(a0),d1
0001A23C 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
0001A242 3F28 0008                  		move.w	8(a0),-(sp)
0001A246 4EB9 0000 0000             		jsr	Obj59_Types
0001A24C 341F                       		move.w	(sp)+,d2
0001A24E 4A10                       		tst.b	0(a0)
0001A250 6700                       		beq.s	locret_10BD4
0001A252 4EF9 0000 F440             		jmp	(MvSonicOnPtfm2).l
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            locret_10BD4:
0001A258 4E75                       		rts	
0001A25A                            ; ===========================================================================
0001A25A                            
0001A25A                            Obj59_Types:
0001A25A 7000                       		moveq	#0,d0
0001A25C 1028 0028                  		move.b	subtype(a0),d0
0001A260 0240 000F                  		andi.w	#$F,d0
0001A264 D040                       		add.w	d0,d0
0001A266 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001A26A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001A26E                            ; ===========================================================================
0001A26E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A272 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A276 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A27A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001A27E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001A282                            ; ===========================================================================
0001A282                            
0001A282                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001A282 4E75                       		rts	
0001A284                            ; ===========================================================================
0001A284                            
0001A284                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001A284 0C28 0004 0024             		cmpi.b	#4,routine(a0)	; check	if Sonic is standing on	the object
0001A28A 6600                       		bne.s	locret_10C0C
0001A28C 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001A290                            
0001A290                            locret_10C0C:
0001A290 4E75                       		rts	
0001A292                            ; ===========================================================================
0001A292                            
0001A292                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001A292 4EB9 0000 0000             		jsr	Obj59_Move
0001A298 3028 0034                  		move.w	$34(a0),d0
0001A29C 4440                       		neg.w	d0
0001A29E D068 0030                  		add.w	$30(a0),d0
0001A2A2 3140 000C                  		move.w	d0,$C(a0)
0001A2A6 4E75                       		rts	
0001A2A8                            ; ===========================================================================
0001A2A8                            
0001A2A8                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001A2A8 4EB9 0000 0000             		jsr	Obj59_Move
0001A2AE 3028 0034                  		move.w	$34(a0),d0
0001A2B2 D068 0030                  		add.w	$30(a0),d0
0001A2B6 3140 000C                  		move.w	d0,$C(a0)
0001A2BA 4E75                       		rts	
0001A2BC                            ; ===========================================================================
0001A2BC                            
0001A2BC                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001A2BC 4EB9 0000 0000             		jsr	Obj59_Move
0001A2C2 3028 0034                  		move.w	$34(a0),d0
0001A2C6 E240                       		asr.w	#1,d0
0001A2C8 4440                       		neg.w	d0
0001A2CA D068 0030                  		add.w	$30(a0),d0
0001A2CE 3140 000C                  		move.w	d0,$C(a0)
0001A2D2 3028 0034                  		move.w	$34(a0),d0
0001A2D6 D068 0032                  		add.w	$32(a0),d0
0001A2DA 3140 0008                  		move.w	d0,8(a0)
0001A2DE 4E75                       		rts	
0001A2E0                            ; ===========================================================================
0001A2E0                            
0001A2E0                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001A2E0 4EB9 0000 0000             		jsr	Obj59_Move
0001A2E6 3028 0034                  		move.w	$34(a0),d0
0001A2EA E240                       		asr.w	#1,d0
0001A2EC D068 0030                  		add.w	$30(a0),d0
0001A2F0 3140 000C                  		move.w	d0,$C(a0)
0001A2F4 3028 0034                  		move.w	$34(a0),d0
0001A2F8 4440                       		neg.w	d0
0001A2FA D068 0032                  		add.w	$32(a0),d0
0001A2FE 3140 0008                  		move.w	d0,8(a0)
0001A302 4E75                       		rts	
0001A304                            ; ===========================================================================
0001A304                            
0001A304                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001A304 4EB9 0000 0000             		jsr	Obj59_Move
0001A30A 3028 0034                  		move.w	$34(a0),d0
0001A30E 4440                       		neg.w	d0
0001A310 D068 0030                  		add.w	$30(a0),d0
0001A314 3140 000C                  		move.w	d0,$C(a0)
0001A318 4A28 0028                  		tst.b	subtype(a0)
0001A31C 6700 0000                  		beq.w	loc_10C94
0001A320 4E75                       		rts	
0001A322                            ; ===========================================================================
0001A322                            
0001A322                            loc_10C94:
0001A322 0828 0003 0022             		btst	#3,status(a0)
0001A328 6700                       		beq.s	Obj59_Delete
0001A32A 08E9 0001 0022             		bset	#1,status(a1)
0001A330 08A9 0003 0022             		bclr	#3,status(a1)
0001A336 137C 0002 0024             		move.b	#2,routine(a1)
0001A33C                            
0001A33C                            
0001A33C                            Obj59_Delete:
0001A33C 6000 B8B2                  		bra.w	DeleteObject
0001A340                            
0001A340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A340                            
0001A340                            
0001A340                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001A340 3028 0038                  		move.w	$38(a0),d0
0001A344 4A28 003A                  		tst.b	$3A(a0)
0001A348 6600                       		bne.s	loc_10CC8
0001A34A 0C40 0800                  		cmpi.w	#$800,d0
0001A34E 6400                       		bcc.s	loc_10CD0
0001A350 0640 0010                  		addi.w	#$10,d0
0001A354 6000                       		bra.s	loc_10CD0
0001A356                            ; ===========================================================================
0001A356                            
0001A356                            loc_10CC8:
0001A356 4A40                       		tst.w	d0
0001A358 6700                       		beq.s	loc_10CD0
0001A35A 0440 0010                  		subi.w	#$10,d0
0001A35E                            
0001A35E                            loc_10CD0:
0001A35E 3140 0038                  		move.w	d0,$38(a0)
0001A362 48C0                       		ext.l	d0
0001A364 E180                       		asl.l	#8,d0
0001A366 D0A8 0034                  		add.l	$34(a0),d0
0001A36A 2140 0034                  		move.l	d0,$34(a0)
0001A36E 4840                       		swap	d0
0001A370 3428 003C                  		move.w	$3C(a0),d2
0001A374 B042                       		cmp.w	d2,d0
0001A376 6300                       		bls.s	loc_10CF0
0001A378 117C 0001 003A             		move.b	#1,$3A(a0)
0001A37E                            
0001A37E                            loc_10CF0:
0001A37E D442                       		add.w	d2,d2
0001A380 B042                       		cmp.w	d2,d0
0001A382 6600                       		bne.s	locret_10CFA
0001A384 4228 0028                  		clr.b	subtype(a0)
0001A388                            
0001A388                            locret_10CFA:
0001A388 4E75                       		rts	
0001A38A                            ; End of function Obj59_Move
0001A38A                            
0001A38A                            ; ===========================================================================
0001A38A                            
0001A38A                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001A38A 5368 003C                  		subq.w	#1,$3C(a0)
0001A38E 6600                       		bne.s	Obj59_ChkDel
0001A390 3168 003E 003C             		move.w	parent(a0),$3C(a0)
0001A396 4EBA C370                  		jsr	SingleObjLoad
0001A39A 6600                       		bne.s	Obj59_ChkDel
0001A39C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001A3A0 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3AC 137C 000E 0028             		move.b	#$E,subtype(a1)
0001A3B2                            
0001A3B2                            Obj59_ChkDel:
0001A3B2 588F                       		addq.l	#4,sp
0001A3B4 4EFA E7B8                  		jmp		MarkObjGone3
0001A3B8                            ; ===========================================================================
0001A3B8                            ; ---------------------------------------------------------------------------
0001A3B8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001A3B8                            ; ---------------------------------------------------------------------------
0001A3B8                            Map_obj59:
0001A3B8                            	include "_maps\obj59.asm"
0001A3B8                            ; ---------------------------------------------------------------------------
0001A3B8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001A3B8                            ; ---------------------------------------------------------------------------
0001A3B8 0000                       		dc.w byte_10D4A-Map_obj59
0001A3BA 03                         byte_10D4A:	dc.b 3
0001A3BB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001A3C0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001A3C5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001A3CA                            		even
0001A3CA                            		even
0001A3CA                            
0001A3CA                            ; ===========================================================================
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA                            ; Object 5A - platforms	moving in circles (SLZ)
0001A3CA                            ; ---------------------------------------------------------------------------
0001A3CA                            
0001A3CA                            Obj5A:					; XREF: Obj_Index
0001A3CA 7000                       		moveq	#0,d0
0001A3CC 1028 0024                  		move.b	routine(a0),d0
0001A3D0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001A3D4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001A3D8 3028 0032                  		move.w	$32(a0),d0
0001A3DC 4EFA E486                  		jmp		MarkObjGone2
0001A3E0                            ; ===========================================================================
0001A3E0 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001A3E2 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001A3E4 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001A3E6                            ; ===========================================================================
0001A3E6                            
0001A3E6                            Obj5A_Main:				; XREF: Obj5A_Index
0001A3E6 5428 0024                  		addq.b	#2,routine(a0)
0001A3EA 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001A3F2 317C 4000 0002             		move.w	#$4000,2(a0)
0001A3F8 117C 0004 0001             		move.b	#4,1(a0)
0001A3FE 317C 0200 0018             		move.w	#$200,priority(a0)
0001A404 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001A40A 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A410 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001A416                            
0001A416                            Obj5A_Platform:				; XREF: Obj5A_Index
0001A416 7200                       		moveq	#0,d1
0001A418 1228 0023                  		move.b	width_pixels(a0),d1
0001A41C 4EB9 0000 F09A             		jsr	(PlatformObject).l
0001A422 6000 0000                  		bra.w	Obj5A_Types
0001A426                            ; ===========================================================================
0001A426                            
0001A426                            Obj5A_Action:				; XREF: Obj5A_Index
0001A426 7200                       		moveq	#0,d1
0001A428 1228 0023                  		move.b	width_pixels(a0),d1
0001A42C 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
0001A432 3F28 0008                  		move.w	8(a0),-(sp)
0001A436 4EB9 0000 0000             		jsr	Obj5A_Types
0001A43C 341F                       		move.w	(sp)+,d2
0001A43E 4EF9 0000 F440             		jmp	(MvSonicOnPtfm2).l
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            Obj5A_Types:
0001A444 7000                       		moveq	#0,d0
0001A446 1028 0028                  		move.b	subtype(a0),d0
0001A44A 0240 000C                  		andi.w	#$C,d0
0001A44E E248                       		lsr.w	#1,d0
0001A450 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001A454 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001A458                            ; ===========================================================================
0001A458 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001A45A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001A45C                            ; ===========================================================================
0001A45C                            
0001A45C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001A45C 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001A460 0401 0050                  		subi.b	#$50,d1
0001A464 4881                       		ext.w	d1
0001A466 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001A46A 0402 0050                  		subi.b	#$50,d2
0001A46E 4882                       		ext.w	d2
0001A470 0828 0000 0028             		btst	#0,subtype(a0)
0001A476 6700                       		beq.s	loc_10E24
0001A478 4441                       		neg.w	d1
0001A47A 4442                       		neg.w	d2
0001A47C                            
0001A47C                            loc_10E24:
0001A47C 0828 0001 0028             		btst	#1,subtype(a0)
0001A482 6700                       		beq.s	loc_10E30
0001A484 4441                       		neg.w	d1
0001A486 C342                       		exg	d1,d2
0001A488                            
0001A488                            loc_10E30:
0001A488 D268 0032                  		add.w	$32(a0),d1
0001A48C 3141 0008                  		move.w	d1,8(a0)
0001A490 D468 0030                  		add.w	$30(a0),d2
0001A494 3142 000C                  		move.w	d2,$C(a0)
0001A498 4E75                       		rts	
0001A49A                            ; ===========================================================================
0001A49A                            
0001A49A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001A49A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001A49E 0401 0050                  		subi.b	#$50,d1
0001A4A2 4881                       		ext.w	d1
0001A4A4 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001A4A8 0402 0050                  		subi.b	#$50,d2
0001A4AC 4882                       		ext.w	d2
0001A4AE 0828 0000 0028             		btst	#0,subtype(a0)
0001A4B4 6700                       		beq.s	loc_10E62
0001A4B6 4441                       		neg.w	d1
0001A4B8 4442                       		neg.w	d2
0001A4BA                            
0001A4BA                            loc_10E62:
0001A4BA 0828 0001 0028             		btst	#1,subtype(a0)
0001A4C0 6700                       		beq.s	loc_10E6E
0001A4C2 4441                       		neg.w	d1
0001A4C4 C342                       		exg	d1,d2
0001A4C6                            
0001A4C6                            loc_10E6E:
0001A4C6 4441                       		neg.w	d1
0001A4C8 D268 0032                  		add.w	$32(a0),d1
0001A4CC 3141 0008                  		move.w	d1,8(a0)
0001A4D0 D468 0030                  		add.w	$30(a0),d2
0001A4D4 3142 000C                  		move.w	d2,$C(a0)
0001A4D8 4E75                       		rts	
0001A4DA                            ; ===========================================================================
0001A4DA                            ; ---------------------------------------------------------------------------
0001A4DA                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001A4DA                            ; ---------------------------------------------------------------------------
0001A4DA                            Map_obj5A:
0001A4DA                            	include "_maps\obj5A.asm"
0001A4DA                            ; ---------------------------------------------------------------------------
0001A4DA                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001A4DA                            ; ---------------------------------------------------------------------------
0001A4DA 0000                       		dc.w byte_10E84-Map_obj5A
0001A4DC 02                         byte_10E84:	dc.b 2
0001A4DD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001A4E2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001A4E8 00                         		even
0001A4E8 00                         		even
0001A4E8                            
0001A4E8                            ; ===========================================================================
0001A4E8                            ; ---------------------------------------------------------------------------
0001A4E8                            ; Object 5B - blocks that form a staircase (SLZ)
0001A4E8                            ; ---------------------------------------------------------------------------
0001A4E8                            
0001A4E8                            Obj5B:					; XREF: Obj_Index
0001A4E8 7000                       		moveq	#0,d0
0001A4EA 1028 0024                  		move.b	routine(a0),d0
0001A4EE 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001A4F2 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001A4F6 3028 0030                  		move.w	$30(a0),d0
0001A4FA 4EFA E368                  		jmp		MarkObjGone2
0001A4FE                            ; ===========================================================================
0001A4FE 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001A500 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001A502 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001A504                            ; ===========================================================================
0001A504                            
0001A504                            Obj5B_Main:				; XREF: Obj5B_Index
0001A504 5428 0024                  		addq.b	#2,routine(a0)
0001A508 7638                       		moveq	#$38,d3
0001A50A 7801                       		moveq	#1,d4
0001A50C 0828 0000 0022             		btst	#0,status(a0)
0001A512 6700                       		beq.s	loc_10EDA
0001A514 763B                       		moveq	#$3B,d3
0001A516 78FF                       		moveq	#-1,d4
0001A518                            
0001A518                            loc_10EDA:
0001A518 3428 0008                  		move.w	8(a0),d2
0001A51C 2248                       		movea.l	a0,a1
0001A51E 7203                       		moveq	#3,d1
0001A520 6000                       		bra.s	Obj5B_MakeBlocks
0001A522                            ; ===========================================================================
0001A522                            
0001A522                            Obj5B_Loop:
0001A522 4EBA C1FA                  		jsr	SingleObjLoad2
0001A526 6600 0000                  		bne.w	Obj5B_Move
0001A52A 137C 0004 0024             		move.b	#4,routine(a1)
0001A530                            
0001A530                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001A530 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001A534 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001A53C 337C 4000 0002             		move.w	#$4000,2(a1)
0001A542 137C 0004 0001             		move.b	#4,1(a1)
0001A548 337C 0180 0018             		move.w	#$180,priority(a1)
0001A54E 137C 0010 0023             		move.b	#$10,width_pixels(a1)
0001A554 1368 0028 0028             		move.b	subtype(a0),subtype(a1)
0001A55A 3342 0008                  		move.w	d2,8(a1)
0001A55E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A564 3368 0008 0030             		move.w	8(a0),$30(a1)
0001A56A 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001A570 0642 0020                  		addi.w	#$20,d2
0001A574 1343 0037                  		move.b	d3,$37(a1)
0001A578 2348 003C                  		move.l	a0,$3C(a1)
0001A57C D604                       		add.b	d4,d3
0001A57E 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001A582                            
0001A582                            Obj5B_Move:				; XREF: Obj5B_Index
0001A582 7000                       		moveq	#0,d0
0001A584 1028 0028                  		move.b	subtype(a0),d0
0001A588 0240 0007                  		andi.w	#7,d0
0001A58C D040                       		add.w	d0,d0
0001A58E 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001A592 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001A596                            
0001A596                            Obj5B_Solid:				; XREF: Obj5B_Index
0001A596 2468 003C                  		movea.l	$3C(a0),a2
0001A59A 7000                       		moveq	#0,d0
0001A59C 1028 0037                  		move.b	$37(a0),d0
0001A5A0 1032 0000                  		move.b	(a2,d0.w),d0
0001A5A4 D068 0032                  		add.w	$32(a0),d0
0001A5A8 3140 000C                  		move.w	d0,$C(a0)
0001A5AC 7200                       		moveq	#0,d1
0001A5AE 1228 0023                  		move.b	width_pixels(a0),d1
0001A5B2 0641 000B                  		addi.w	#$B,d1
0001A5B6 343C 0010                  		move.w	#$10,d2
0001A5BA 363C 0011                  		move.w	#$11,d3
0001A5BE 3828 0008                  		move.w	8(a0),d4
0001A5C2 4EBA E94E                  		jsr	SolidObject
0001A5C6 4A04                       		tst.b	d4
0001A5C8 6A00                       		bpl.s	loc_10F92
0001A5CA 1544 0036                  		move.b	d4,$36(a2)
0001A5CE                            
0001A5CE                            loc_10F92:
0001A5CE 0828 0003 0022             		btst	#3,status(a0)
0001A5D4 6700                       		beq.s	locret_10FA0
0001A5D6 157C 0001 0036             		move.b	#1,$36(a2)
0001A5DC                            
0001A5DC                            locret_10FA0:
0001A5DC 4E75                       		rts	
0001A5DE                            ; ===========================================================================
0001A5DE 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001A5E0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001A5E2 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001A5E4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001A5E6                            ; ===========================================================================
0001A5E6                            
0001A5E6                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001A5E6 4A68 0034                  		tst.w	$34(a0)
0001A5EA 6600                       		bne.s	loc_10FC0
0001A5EC 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001A5F2 6600                       		bne.s	locret_10FBE
0001A5F4 317C 001E 0034             		move.w	#$1E,$34(a0)
0001A5FA                            
0001A5FA                            locret_10FBE:
0001A5FA 4E75                       		rts	
0001A5FC                            ; ===========================================================================
0001A5FC                            
0001A5FC                            loc_10FC0:
0001A5FC 5368 0034                  		subq.w	#1,$34(a0)
0001A600 66F8                       		bne.s	locret_10FBE
0001A602 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001A606 4E75                       		rts	
0001A608                            ; ===========================================================================
0001A608                            
0001A608                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001A608 4A68 0034                  		tst.w	$34(a0)
0001A60C 6600                       		bne.s	loc_10FE0
0001A60E 4A28 0036                  		tst.b	$36(a0)
0001A612 6A00                       		bpl.s	locret_10FDE
0001A614 317C 003C 0034             		move.w	#$3C,$34(a0)
0001A61A                            
0001A61A                            locret_10FDE:
0001A61A 4E75                       		rts	
0001A61C                            ; ===========================================================================
0001A61C                            
0001A61C                            loc_10FE0:
0001A61C 5368 0034                  		subq.w	#1,$34(a0)
0001A620 6600                       		bne.s	loc_10FEC
0001A622 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001A626 4E75                       		rts	
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            loc_10FEC:
0001A628 43E8 0038                  		lea	$38(a0),a1
0001A62C 3028 0034                  		move.w	$34(a0),d0
0001A630 E408                       		lsr.b	#2,d0
0001A632 0200 0001                  		andi.b	#1,d0
0001A636 12C0                       		move.b	d0,(a1)+
0001A638 0A00 0001                  		eori.b	#1,d0
0001A63C 12C0                       		move.b	d0,(a1)+
0001A63E 0A00 0001                  		eori.b	#1,d0
0001A642 12C0                       		move.b	d0,(a1)+
0001A644 0A00 0001                  		eori.b	#1,d0
0001A648 12C0                       		move.b	d0,(a1)+
0001A64A 4E75                       		rts	
0001A64C                            ; ===========================================================================
0001A64C                            
0001A64C                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001A64C 43E8 0038                  		lea	$38(a0),a1
0001A650 0C11 0080                  		cmpi.b	#$80,(a1)
0001A654 6700                       		beq.s	locret_11038
0001A656 5211                       		addq.b	#1,(a1)
0001A658 7200                       		moveq	#0,d1
0001A65A 1219                       		move.b	(a1)+,d1
0001A65C 4841                       		swap	d1
0001A65E E289                       		lsr.l	#1,d1
0001A660 2401                       		move.l	d1,d2
0001A662 E289                       		lsr.l	#1,d1
0001A664 2601                       		move.l	d1,d3
0001A666 D682                       		add.l	d2,d3
0001A668 4841                       		swap	d1
0001A66A 4842                       		swap	d2
0001A66C 4843                       		swap	d3
0001A66E 12C3                       		move.b	d3,(a1)+
0001A670 12C2                       		move.b	d2,(a1)+
0001A672 12C1                       		move.b	d1,(a1)+
0001A674                            
0001A674                            locret_11038:
0001A674 4E75                       		rts	
0001A676 4E75                       		rts	
0001A678                            ; ===========================================================================
0001A678                            ; ---------------------------------------------------------------------------
0001A678                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001A678                            ; ---------------------------------------------------------------------------
0001A678                            Map_obj5B:
0001A678                            	include "_maps\obj5B.asm"
0001A678                            ; ---------------------------------------------------------------------------
0001A678                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001A678                            ; ---------------------------------------------------------------------------
0001A678 0000                       		dc.w byte_1103E-Map_obj5B
0001A67A 01                         byte_1103E:	dc.b 1
0001A67B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001A680                            		even
0001A680                            		even
0001A680                            
0001A680                            ; ===========================================================================
0001A680                            ; ---------------------------------------------------------------------------
0001A680                            ; Object 5C - metal girders in foreground (SLZ)
0001A680                            ; ---------------------------------------------------------------------------
0001A680                            
0001A680                            Obj5C:					; XREF: Obj_Index
0001A680 7000                       		moveq	#0,d0
0001A682 1028 0024                  		move.b	routine(a0),d0
0001A686 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001A68A 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001A68E                            ; ===========================================================================
0001A68E 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001A690 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001A692                            ; ===========================================================================
0001A692                            
0001A692                            Obj5C_Main:				; XREF: Obj5C_Index
0001A692 5428 0024                  		addq.b	#2,routine(a0)
0001A696 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001A69E 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001A6A4 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001A6AA                            
0001A6AA                            Obj5C_Display:				; XREF: Obj5C_Index
0001A6AA 2238 F700                  		move.l	($FFFFF700).w,d1
0001A6AE D281                       		add.l	d1,d1
0001A6B0 4841                       		swap	d1
0001A6B2 4441                       		neg.w	d1
0001A6B4 3141 0008                  		move.w	d1,8(a0)
0001A6B8 2238 F704                  		move.l	($FFFFF704).w,d1
0001A6BC D281                       		add.l	d1,d1
0001A6BE 4841                       		swap	d1
0001A6C0 0241 003F                  		andi.w	#$3F,d1
0001A6C4 4441                       		neg.w	d1
0001A6C6 0641 0100                  		addi.w	#$100,d1
0001A6CA 3141 000A                  		move.w	d1,$A(a0)
0001A6CE 6000 B56C                  		bra.w	DisplaySprite
0001A6D2                            ; ===========================================================================
0001A6D2                            ; ---------------------------------------------------------------------------
0001A6D2                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001A6D2                            ; ---------------------------------------------------------------------------
0001A6D2                            Map_obj5C:
0001A6D2                            	include "_maps\obj5C.asm"
0001A6D2                            ; ---------------------------------------------------------------------------
0001A6D2                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001A6D2                            ; ---------------------------------------------------------------------------
0001A6D2 0000                       		dc.w byte_11098-Map_obj5C
0001A6D4 09                         byte_11098:	dc.b 9
0001A6D5 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001A6DA A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001A6DF C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001A6E4 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001A6E9 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001A6EE 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001A6F3 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001A6F8 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001A6FD 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001A702                            		even
0001A702                            		even
0001A702                            
0001A702                            ; ===========================================================================
0001A702                            ; ---------------------------------------------------------------------------
0001A702                            ; Object 1B - water surface (LZ)
0001A702                            ; ---------------------------------------------------------------------------
0001A702                            
0001A702                            Obj1B:					; XREF: Obj_Index
0001A702 7000                       		moveq	#0,d0
0001A704 1028 0024                  		move.b	routine(a0),d0
0001A708 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001A70C 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001A710                            ; ===========================================================================
0001A710 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001A712 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            Obj1B_Main:				; XREF: Obj1B_Index
0001A714 5428 0024                  		addq.b	#2,routine(a0)
0001A718 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001A720 317C C300 0002             		move.w	#$C300,2(a0)
0001A726 117C 0004 0001             		move.b	#4,1(a0)
0001A72C 117C 0080 0023             		move.b	#$80,width_pixels(a0)
0001A732 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A738                            
0001A738                            Obj1B_Action:				; XREF: Obj1B_Index
0001A738 3238 F700                  		move.w	($FFFFF700).w,d1
0001A73C 0241 FFE0                  		andi.w	#$FFE0,d1
0001A740 D268 0030                  		add.w	$30(a0),d1
0001A744 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001A74A 6700                       		beq.s	loc_11114
0001A74C 0641 0020                  		addi.w	#$20,d1
0001A750                            
0001A750                            loc_11114:
0001A750 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001A754 3238 F646                  		move.w	($FFFFF646).w,d1
0001A758 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001A75C 4A28 0032                  		tst.b	$32(a0)
0001A760 6600                       		bne.s	Obj1B_Animate
0001A762 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001A768 6700                       		beq.s	loc_1114A	; if not, branch
0001A76A 5628 001A                  		addq.b	#3,mapping_frame(a0)	; use different	frames
0001A76E 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001A774 6000                       		bra.s	Obj1B_Display
0001A776                            ; ===========================================================================
0001A776                            
0001A776                            Obj1B_Animate:				; XREF: loc_11114
0001A776 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001A77A 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001A77C 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001A782 5728 001A                  		subq.b	#3,mapping_frame(a0)	; use normal frames
0001A786                            
0001A786                            loc_1114A:				; XREF: loc_11114
0001A786 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001A78A 6A00                       		bpl.s	Obj1B_Display
0001A78C 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
0001A792 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001A796 0C28 0003 001A             		cmpi.b	#3,mapping_frame(a0)
0001A79C 6500                       		bcs.s	Obj1B_Display
0001A79E 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001A7A4                            
0001A7A4                            Obj1B_Display:
0001A7A4 6000 B496                  		bra.w	DisplaySprite
0001A7A8                            ; ===========================================================================
0001A7A8                            ; ---------------------------------------------------------------------------
0001A7A8                            ; Sprite mappings - water surface (LZ)
0001A7A8                            ; ---------------------------------------------------------------------------
0001A7A8                            Map_obj1B:
0001A7A8                            	include "_maps\obj1B.asm"
0001A7A8                            ; ---------------------------------------------------------------------------
0001A7A8                            ; Sprite mappings - water surface (LZ)
0001A7A8                            ; ---------------------------------------------------------------------------
0001A7A8 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001A7AC 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001A7B0 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001A7B4 03                         byte_11178:	dc.b 3
0001A7B5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001A7BA FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001A7BF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001A7C4 03                         byte_11188:	dc.b 3
0001A7C5 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001A7CA FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001A7CF FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001A7D4 03                         byte_11198:	dc.b 3
0001A7D5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001A7DA FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001A7DF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001A7E4 06                         byte_111A8:	dc.b 6
0001A7E5 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001A7EA FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001A7EF FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001A7F4 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001A7F9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001A7FE FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001A803 06                         byte_111C7:	dc.b 6
0001A804 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001A809 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001A80E FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001A813 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001A818 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001A81D FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001A822 06                         byte_111E6:	dc.b 6
0001A823 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001A828 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001A82D FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001A832 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001A837 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001A83C FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001A842 00                         		even
0001A842 00                         		even
0001A842                            
0001A842                            ; ===========================================================================
0001A842                            ; ---------------------------------------------------------------------------
0001A842                            ; Object 0B - pole that	breaks (LZ)
0001A842                            ; ---------------------------------------------------------------------------
0001A842                            
0001A842                            Obj0B:					; XREF: Obj_Index
0001A842 7000                       		moveq	#0,d0
0001A844 1028 0024                  		move.b	routine(a0),d0
0001A848 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001A84C 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001A850                            ; ===========================================================================
0001A850 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001A852 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001A854 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001A856                            ; ===========================================================================
0001A856                            
0001A856                            Obj0B_Main:				; XREF: Obj0B_Index
0001A856 5428 0024                  		addq.b	#2,routine(a0)
0001A85A 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001A862 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001A868 117C 0004 0001             		move.b	#4,1(a0)
0001A86E 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001A874 317C 0200 0018             		move.w	#$200,priority(a0)
0001A87A 117C 00E1 0020             		move.b	#$E1,collision_flags(a0)
0001A880 7000                       		moveq	#0,d0
0001A882 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A886 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001A88A 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001A88E                            
0001A88E                            Obj0B_Action:				; XREF: Obj0B_Index
0001A88E 4A28 0032                  		tst.b	$32(a0)
0001A892 6700                       		beq.s	Obj0B_Grab
0001A894 4A68 0030                  		tst.w	$30(a0)
0001A898 6700                       		beq.s	Obj0B_MoveUp
0001A89A 5368 0030                  		subq.w	#1,$30(a0)
0001A89E 6600                       		bne.s	Obj0B_MoveUp
0001A8A0 117C 0001 001A             		move.b	#1,mapping_frame(a0)	; break	the pole
0001A8A6 6000                       		bra.s	Obj0B_Release
0001A8A8                            ; ===========================================================================
0001A8A8                            
0001A8A8                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001A8A8 43F8 D000                  		lea	($FFFFD000).w,a1
0001A8AC 3028 000C                  		move.w	$C(a0),d0
0001A8B0 0440 0018                  		subi.w	#$18,d0
0001A8B4 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001A8BA 6700                       		beq.s	Obj0B_MoveDown
0001A8BC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001A8C0 B069 000C                  		cmp.w	$C(a1),d0
0001A8C4 6500                       		bcs.s	Obj0B_MoveDown
0001A8C6 3340 000C                  		move.w	d0,$C(a1)
0001A8CA                            
0001A8CA                            Obj0B_MoveDown:
0001A8CA 0640 0024                  		addi.w	#$24,d0
0001A8CE 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001A8D4 6700                       		beq.s	Obj0B_LetGo
0001A8D6 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001A8DA B069 000C                  		cmp.w	$C(a1),d0
0001A8DE 6400                       		bcc.s	Obj0B_LetGo
0001A8E0 3340 000C                  		move.w	d0,$C(a1)
0001A8E4                            
0001A8E4                            Obj0B_LetGo:
0001A8E4 1038 F603                  		move.b	($FFFFF603).w,d0
0001A8E8 0240 0070                  		andi.w	#$70,d0
0001A8EC 6700                       		beq.s	Obj0B_Display
0001A8EE                            
0001A8EE                            Obj0B_Release:				; XREF: Obj0B_Action
0001A8EE 4228 0020                  		clr.b	collision_flags(a0)
0001A8F2 5428 0024                  		addq.b	#2,routine(a0)
0001A8F6 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001A8FA 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001A8FE 4228 0032                  		clr.b	$32(a0)
0001A902 6000                       		bra.s	Obj0B_Display
0001A904                            ; ===========================================================================
0001A904                            
0001A904                            Obj0B_Grab:				; XREF: Obj0B_Action
0001A904 4A28 0021                  		tst.b	collision_property(a0)		; has Sonic touched the	pole?
0001A908 6700                       		beq.s	Obj0B_Display	; if not, branch
0001A90A 43F8 D000                  		lea	($FFFFD000).w,a1
0001A90E 3028 0008                  		move.w	8(a0),d0
0001A912 0640 0014                  		addi.w	#$14,d0
0001A916 B069 0008                  		cmp.w	8(a1),d0
0001A91A 6400                       		bcc.s	Obj0B_Display
0001A91C 4228 0021                  		clr.b	collision_property(a0)
0001A920 0C29 0004 0024             		cmpi.b	#4,routine(a1)
0001A926 6400                       		bcc.s	Obj0B_Display
0001A928 4269 0010                  		clr.w	x_vel(a1)		; stop Sonic moving
0001A92C 4269 0012                  		clr.w	y_vel(a1)		; stop Sonic moving
0001A930 3028 0008                  		move.w	8(a0),d0
0001A934 0640 0014                  		addi.w	#$14,d0
0001A938 3340 0008                  		move.w	d0,8(a1)
0001A93C 08A9 0000 0022             		bclr	#0,status(a1)
0001A942 137C 0011 001C             		move.b	#$11,anim(a1)	; set Sonic's animation to "hanging" ($11)
0001A948 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001A94E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001A954 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001A95A                            
0001A95A                            Obj0B_Display:				; XREF: Obj0B_Index
0001A95A 6000 DED2                  		bra.w	MarkObjGone
0001A95E                            ; ===========================================================================
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            ; Sprite mappings - pole that breaks (LZ)
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            Map_obj0B:
0001A95E                            	include "_maps\obj0B.asm"
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            ; Sprite mappings - pole that breaks (LZ)
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E 0000                       		dc.w byte_11326-Map_obj0B
0001A960 0000                       		dc.w byte_11331-Map_obj0B
0001A962 02                         byte_11326:	dc.b 2			; normal pole
0001A963 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001A968 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001A96D 04                         byte_11331:	dc.b 4			; broken pole
0001A96E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001A973 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001A978 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001A97D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001A982                            		even
0001A982                            		even
0001A982                            
0001A982                            ; ===========================================================================
0001A982                            ; ---------------------------------------------------------------------------
0001A982                            ; Object 0C - flapping door (LZ)
0001A982                            ; ---------------------------------------------------------------------------
0001A982                            
0001A982                            Obj0C:					; XREF: Obj_Index
0001A982 7000                       		moveq	#0,d0
0001A984 1028 0024                  		move.b	routine(a0),d0
0001A988 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001A98C 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001A990                            ; ===========================================================================
0001A990 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001A992 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001A994                            ; ===========================================================================
0001A994                            
0001A994                            Obj0C_Main:				; XREF: Obj0C_Index
0001A994 5428 0024                  		addq.b	#2,routine(a0)
0001A998 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001A9A0 317C 4328 0002             		move.w	#$4328,2(a0)
0001A9A6 0028 0004 0001             		ori.b	#4,1(a0)
0001A9AC 117C 0028 0023             		move.b	#$28,width_pixels(a0)
0001A9B2 7000                       		moveq	#0,d0
0001A9B4 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001A9B8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001A9BC 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001A9C0                            
0001A9C0                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001A9C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001A9C4 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001A9C6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001A9CC 0868 0000 001C             		bchg	#0,anim(a0)	; open/close door
0001A9D2 4A28 0001                  		tst.b	1(a0)
0001A9D6 6A00                       		bpl.s	Obj0C_Solid
0001A9D8 303C 00BB                  		move.w	#$BB,d0
0001A9DC 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
0001A9E2                            
0001A9E2                            Obj0C_Solid:
0001A9E2 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001A9E8 4EB9 0001 2618             		jsr	AnimateSprite
0001A9EE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001A9F2 4A28 001A                  		tst.b	mapping_frame(a0)		; is the door open?
0001A9F6 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001A9F8 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9FC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001AA00 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001AA02 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001AA08 323C 0013                  		move.w	#$13,d1
0001AA0C 343C 0020                  		move.w	#$20,d2
0001AA10 3602                       		move.w	d2,d3
0001AA12 5243                       		addq.w	#1,d3
0001AA14 3828 0008                  		move.w	8(a0),d4
0001AA18 4EBA E4F8                  		jsr	SolidObject	; make the door	solid
0001AA1C                            
0001AA1C                            Obj0C_Display:
0001AA1C 6000 DE10                  		bra.w	MarkObjGone
0001AA20                            ; ===========================================================================
0001AA20                            Ani_obj0C:
0001AA20                            	include "_anim\obj0C.asm"
0001AA20                            ; ---------------------------------------------------------------------------
0001AA20                            ; Animation script - flapping door (LZ)
0001AA20                            ; ---------------------------------------------------------------------------
0001AA20 0000                       		dc.w byte_113E6-Ani_obj0C
0001AA22 0000                       		dc.w byte_113EC-Ani_obj0C
0001AA24 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001AA2A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001AA30                            		even
0001AA30                            		even
0001AA30                            
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - flapping door (LZ)
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            Map_obj0C:
0001AA30                            	include "_maps\obj0C.asm"
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30                            ; Sprite mappings - flapping door (LZ)
0001AA30                            ; ---------------------------------------------------------------------------
0001AA30 0000                       		dc.w byte_113F8-Map_obj0C
0001AA32 0000                       		dc.w byte_11403-Map_obj0C
0001AA34 0000                       		dc.w byte_1140E-Map_obj0C
0001AA36 02                         byte_113F8:	dc.b 2
0001AA37 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001AA3C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001AA41 02                         byte_11403:	dc.b 2
0001AA42 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001AA47 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001AA4C 02                         byte_1140E:	dc.b 2
0001AA4D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001AA52 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001AA58 00                         		even
0001AA58 00                         		even
0001AA58                            
0001AA58                            ; ===========================================================================
0001AA58                            ; ---------------------------------------------------------------------------
0001AA58                            ; Object 71 - invisible	solid barriers
0001AA58                            ; ---------------------------------------------------------------------------
0001AA58                            
0001AA58                            Obj71:				; XREF: Obj_Index
0001AA58 7000                       		moveq	#0,d0
0001AA5A 1028 0024                  		move.b	routine(a0),d0
0001AA5E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001AA62 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001AA66                            ; ===========================================================================
0001AA66 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001AA68 0000                       		dc.w Obj71_Solid-Obj71_Index
0001AA6A                            
0001AA6A =00000016                  invis_height:	= $16		; height in pixels
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            Obj71_Main:	; Routine 0
0001AA6A 5428 0024                  		addq.b	#2,routine(a0)
0001AA6E 217C 0000 0000 0004        		move.l	#Map_obj71,mappings(a0)
0001AA76 317C 8680 0002             		move.w	#$8680,art_tile(a0)
0001AA7C 0028 0004 0001             		ori.b	#4,render_flags(a0)
0001AA82 1028 0028                  		move.b	subtype(a0),d0 ; get object type
0001AA86 1200                       		move.b	d0,d1
0001AA88 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001AA8C 0640 0010                  		addi.w	#$10,d0
0001AA90 E248                       		lsr.w	#1,d0
0001AA92 1140 0023                  		move.b	d0,width_pixels(a0)	; set object width
0001AA96 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001AA9A 5241                       		addq.w	#1,d1
0001AA9C E749                       		lsl.w	#3,d1
0001AA9E 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001AAA2                            
0001AAA2                            Obj71_Solid:	; Routine 2
0001AAA2 6100 B510                  		bsr.w	ChkObjOnScreen
0001AAA6 6600                       		bne.s	@chkdel
0001AAA8 7200                       		moveq	#0,d1
0001AAAA 1228 0023                  		move.b	width_pixels(a0),d1
0001AAAE 0641 000B                  		addi.w	#$B,d1
0001AAB2 7400                       		moveq	#0,d2
0001AAB4 1428 0016                  		move.b	invis_height(a0),d2
0001AAB8 3602                       		move.w	d2,d3
0001AABA 5243                       		addq.w	#1,d3
0001AABC 3828 0008                  		move.w	x_pos(a0),d4
0001AAC0 6100 E4E4                  		bsr.w	SolidObject71
0001AAC4                            
0001AAC4                            @chkdel:
0001AAE0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001AAE4 6700                       		beq.s	@nodisplay	; if not, branch
0001AAE6 4EFA B154                  		jmp	DisplaySprite	; if yes, display the object
0001AAEA                            
0001AAEA                            	@nodisplay:
0001AAEA 4E75                       		rts	
0001AAEC                            
0001AAEC                            	@delete:
0001AAEC                            ;        if S3KObjectManager=1
0001AAEC 7000 3028 0014 6700 3440+  		obMarkGone
0001AAFA                             ;       endif
0001AAFA 4EFA B0F4                  		jmp	DeleteObject
0001AAFE                            
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE                            ; Sprite mappings - invisible solid blocks
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE                            Map_obj71:
0001AAFE                            	include "_maps\obj71.asm"
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE                            ; Sprite mappings - invisible solid blocks
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE 0000                       		dc.w byte_114BC-Map_obj71
0001AB00 0000                       		dc.w byte_114D1-Map_obj71
0001AB02 0000                       		dc.w byte_114E6-Map_obj71
0001AB04 04                         byte_114BC:	dc.b 4
0001AB05 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001AB0A F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001AB0F 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001AB14 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001AB19 04                         byte_114D1:	dc.b 4
0001AB1A E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001AB1F E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001AB24 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001AB29 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001AB2E 04                         byte_114E6:	dc.b 4
0001AB2F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001AB34 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001AB39 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001AB3E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001AB44 00                         		even
0001AB44 00                         		even
0001AB44                            
0001AB44                            ; ===========================================================================
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44                            ; Object 5D - fans (SLZ)
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44                            
0001AB44                            Obj5D:					; XREF: Obj_Index
0001AB44 7000                       		moveq	#0,d0
0001AB46 1028 0024                  		move.b	routine(a0),d0
0001AB4A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001AB4E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001AB52                            ; ===========================================================================
0001AB52 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001AB54 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001AB56                            ; ===========================================================================
0001AB56                            
0001AB56                            Obj5D_Main:				; XREF: Obj5D_Index
0001AB56 5428 0024                  		addq.b	#2,routine(a0)
0001AB5A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001AB62 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001AB68 0028 0004 0001             		ori.b	#4,1(a0)
0001AB6E 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001AB74 317C 0200 0018             		move.w	#$200,priority(a0)
0001AB7A                            
0001AB7A                            Obj5D_Delay:				; XREF: Obj5D_Index
0001AB7A 0828 0001 0028             		btst	#1,subtype(a0)	; is object type 02/03?
0001AB80 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001AB82 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001AB86 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001AB88 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001AB8E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001AB94 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001AB96 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001AB9C                            
0001AB9C                            Obj5D_Blow:
0001AB9C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001ABA0 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001ABA4 43F8 D000                  		lea	($FFFFD000).w,a1
0001ABA8 3029 0008                  		move.w	8(a1),d0
0001ABAC 9068 0008                  		sub.w	8(a0),d0
0001ABB0 0828 0000 0022             		btst	#0,status(a0)
0001ABB6 6600                       		bne.s	Obj5D_ChkSonic
0001ABB8 4440                       		neg.w	d0
0001ABBA                            
0001ABBA                            Obj5D_ChkSonic:
0001ABBA 0640 0050                  		addi.w	#$50,d0
0001ABBE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001ABC2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001ABC4 3229 000C                  		move.w	$C(a1),d1
0001ABC8 0641 0060                  		addi.w	#$60,d1
0001ABCC 9268 000C                  		sub.w	$C(a0),d1
0001ABD0 6500                       		bcs.s	Obj5D_Animate
0001ABD2 0C41 0070                  		cmpi.w	#$70,d1
0001ABD6 6400                       		bcc.s	Obj5D_Animate
0001ABD8 0440 0050                  		subi.w	#$50,d0
0001ABDC 6400                       		bcc.s	loc_1159A
0001ABDE 4640                       		not.w	d0
0001ABE0 D040                       		add.w	d0,d0
0001ABE2                            
0001ABE2                            loc_1159A:
0001ABE2 0640 0060                  		addi.w	#$60,d0
0001ABE6 0828 0000 0022             		btst	#0,status(a0)
0001ABEC 6600                       		bne.s	loc_115A8
0001ABEE 4440                       		neg.w	d0
0001ABF0                            
0001ABF0                            loc_115A8:
0001ABF0 4400                       		neg.b	d0
0001ABF2 E840                       		asr.w	#4,d0
0001ABF4 0828 0000 0028             		btst	#0,subtype(a0)
0001ABFA 6700                       		beq.s	Obj5D_MoveSonic
0001ABFC 4440                       		neg.w	d0
0001ABFE                            
0001ABFE                            Obj5D_MoveSonic:
0001ABFE D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001AC02                            
0001AC02                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001AC02 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001AC06 6A00                       		bpl.s	Obj5D_ChkDel
0001AC08 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001AC0E 5228 001B                  		addq.b	#1,anim_frame(a0)
0001AC12 0C28 0003 001B             		cmpi.b	#3,anim_frame(a0)
0001AC18 6500                       		bcs.s	loc_115D8
0001AC1A 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001AC20                            
0001AC20                            loc_115D8:
0001AC20 7000                       		moveq	#0,d0
0001AC22 0828 0000 0028             		btst	#0,subtype(a0)
0001AC28 6700                       		beq.s	loc_115E4
0001AC2A 7002                       		moveq	#2,d0
0001AC2C                            
0001AC2C                            loc_115E4:
0001AC2C D028 001B                  		add.b	anim_frame(a0),d0
0001AC30 1140 001A                  		move.b	d0,mapping_frame(a0)
0001AC34                            
0001AC34                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001AC34 4EBA B006                  		jsr	DisplaySprite
0001AC38 4EFA DF34                  		jmp		MarkObjGone3
0001AC3C                            ; ===========================================================================
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C                            ; Sprite mappings - fans (SLZ)
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C                            Map_obj5D:
0001AC3C                            	include "_maps\obj5D.asm"
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C                            ; Sprite mappings - fans (SLZ)
0001AC3C                            ; ---------------------------------------------------------------------------
0001AC3C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001AC40 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001AC44 0000                       		dc.w byte_1161A-Map_obj5D
0001AC46 02                         byte_1161A:	dc.b 2
0001AC47 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001AC4C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001AC51 02                         byte_11625:	dc.b 2
0001AC52 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001AC57 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001AC5C 02                         byte_11630:	dc.b 2
0001AC5D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001AC62 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001AC68 00                         		even
0001AC68 00                         		even
0001AC68                            
0001AC68                            ; ===========================================================================
0001AC68                            ; ---------------------------------------------------------------------------
0001AC68                            ; Object 5E - seesaws (SLZ)
0001AC68                            ; ---------------------------------------------------------------------------
0001AC68                            
0001AC68                            Obj5E:					; XREF: Obj_Index
0001AC68 7000                       		moveq	#0,d0
0001AC6A 1028 0024                  		move.b	routine(a0),d0
0001AC6E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001AC72 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001AC76 3028 0030                  		move.w	$30(a0),d0
0001AC7A 4EFA DBE8                  		jmp		MarkObjGone2
0001AC7E                            ; ===========================================================================
0001AC7E 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001AC80 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001AC82 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0001AC84 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001AC86 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001AC88 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            Obj5E_Main:				; XREF: Obj5E_Index
0001AC8A 5428 0024                  		addq.b	#2,routine(a0)
0001AC8E 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001AC96 317C 0374 0002             		move.w	#$374,2(a0)
0001AC9C 0028 0004 0001             		ori.b	#4,1(a0)
0001ACA2 317C 0200 0018             		move.w	#$200,priority(a0)
0001ACA8 117C 0030 0023             		move.b	#$30,width_pixels(a0)
0001ACAE 3168 0008 0030             		move.w	8(a0),$30(a0)
0001ACB4 4A28 0028                  		tst.b	subtype(a0)		; is object type 00 ?
0001ACB8 6600                       		bne.s	loc_116D2	; if not, branch
0001ACBA 4EBA BA62                  		jsr	SingleObjLoad2
0001ACBE 6600                       		bne.s	loc_116D2
0001ACC0 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001ACC4 5C29 0024                  		addq.b	#6,routine(a1)
0001ACC8 3368 0008 0008             		move.w	8(a0),8(a1)
0001ACCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ACD4 1368 0022 0022             		move.b	status(a0),status(a1)
0001ACDA 2348 003C                  		move.l	a0,$3C(a1)
0001ACDE                            
0001ACDE                            loc_116D2:
0001ACDE 0828 0000 0022             		btst	#0,status(a0)
0001ACE4 6700                       		beq.s	loc_116E0
0001ACE6 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001ACEC                            
0001ACEC                            loc_116E0:
0001ACEC 1168 001A 003A             		move.b	mapping_frame(a0),$3A(a0)
0001ACF2                            
0001ACF2                            Obj5E_Slope:				; XREF: Obj5E_Index
0001ACF2 1228 003A                  		move.b	$3A(a0),d1
0001ACF6 4EB9 0000 0000             		jsr	loc_11766
0001ACFC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001AD02 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001AD08 6700                       		beq.s	loc_11702
0001AD0A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001AD10                            
0001AD10                            loc_11702:
0001AD10 43F8 D000                  		lea	($FFFFD000).w,a1
0001AD14 3169 0012 0038             		move.w	y_vel(a1),$38(a0)
0001AD1A 323C 0030                  		move.w	#$30,d1
0001AD1E 4EB9 0000 F172             		jsr	(SlopeObject).l
0001AD24 4E75                       		rts	
0001AD26                            ; ===========================================================================
0001AD26                            
0001AD26                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001AD26 4EB9 0000 0000             		jsr	loc_1174A
0001AD2C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001AD32 0828 0000 001A             		btst	#0,mapping_frame(a0)
0001AD38 6700                       		beq.s	loc_11730
0001AD3A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001AD40                            
0001AD40                            loc_11730:
0001AD40 323C 0030                  		move.w	#$30,d1
0001AD44 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
0001AD4A 323C 0030                  		move.w	#$30,d1
0001AD4E 3428 0008                  		move.w	8(a0),d2
0001AD52 4EB9 0001 013E             		jsr	SlopeObject2
0001AD58 4E75                       		rts	
0001AD5A                            ; ===========================================================================
0001AD5A                            
0001AD5A                            loc_1174A:				; XREF: Obj5E_Slope2
0001AD5A 7202                       		moveq	#2,d1
0001AD5C 43F8 D000                  		lea	($FFFFD000).w,a1
0001AD60 3028 0008                  		move.w	8(a0),d0
0001AD64 9069 0008                  		sub.w	8(a1),d0
0001AD68 6400                       		bcc.s	loc_1175E
0001AD6A 4440                       		neg.w	d0
0001AD6C 7200                       		moveq	#0,d1
0001AD6E                            
0001AD6E                            loc_1175E:
0001AD6E 0C40 0008                  		cmpi.w	#8,d0
0001AD72 6400                       		bcc.s	loc_11766
0001AD74 7201                       		moveq	#1,d1
0001AD76                            
0001AD76                            loc_11766:
0001AD76 1028 001A                  		move.b	mapping_frame(a0),d0
0001AD7A B001                       		cmp.b	d1,d0
0001AD7C 6700                       		beq.s	locret_11790
0001AD7E 6400                       		bcc.s	loc_11772
0001AD80 5400                       		addq.b	#2,d0
0001AD82                            
0001AD82                            loc_11772:
0001AD82 5300                       		subq.b	#1,d0
0001AD84 1140 001A                  		move.b	d0,mapping_frame(a0)
0001AD88 1141 003A                  		move.b	d1,$3A(a0)
0001AD8C 08A8 0000 0001             		bclr	#0,1(a0)
0001AD92 0828 0001 001A             		btst	#1,mapping_frame(a0)
0001AD98 6700                       		beq.s	locret_11790
0001AD9A 08E8 0000 0001             		bset	#0,1(a0)
0001ADA0                            
0001ADA0                            locret_11790:
0001ADA0 4E75                       		rts	
0001ADA2                            ; ===========================================================================
0001ADA2                            
0001ADA2                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001ADA2 5428 0024                  		addq.b	#2,routine(a0)
0001ADA6 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001ADAE 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001ADB4 0028 0004 0001             		ori.b	#4,1(a0)
0001ADBA 317C 0200 0018             		move.w	#$200,priority(a0)
0001ADC0 117C 008B 0020             		move.b	#$8B,collision_flags(a0)
0001ADC6 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001ADCC 3168 0008 0030             		move.w	8(a0),$30(a0)
0001ADD2 0668 0028 0008             		addi.w	#$28,8(a0)
0001ADD8 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001ADDE 117C 0001 001A             		move.b	#1,mapping_frame(a0)
0001ADE4 0828 0000 0022             		btst	#0,status(a0)
0001ADEA 6700                       		beq.s	Obj5E_MoveSpike
0001ADEC 0468 0050 0008             		subi.w	#$50,8(a0)
0001ADF2 117C 0002 003A             		move.b	#2,$3A(a0)
0001ADF8                            
0001ADF8                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001ADF8 2268 003C                  		movea.l	$3C(a0),a1
0001ADFC 7000                       		moveq	#0,d0
0001ADFE 1028 003A                  		move.b	$3A(a0),d0
0001AE02 9029 003A                  		sub.b	$3A(a1),d0
0001AE06 6700                       		beq.s	loc_1183E
0001AE08 6400                       		bcc.s	loc_117FC
0001AE0A 4400                       		neg.b	d0
0001AE0C                            
0001AE0C                            loc_117FC:
0001AE0C 323C F7E8                  		move.w	#-$818,d1
0001AE10 343C FEEC                  		move.w	#-$114,d2
0001AE14 0C00 0001                  		cmpi.b	#1,d0
0001AE18 6700                       		beq.s	loc_11822
0001AE1A 323C F510                  		move.w	#-$AF0,d1
0001AE1E 343C FF34                  		move.w	#-$CC,d2
0001AE22 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001AE28 6D00                       		blt.s	loc_11822
0001AE2A 323C F200                  		move.w	#-$E00,d1
0001AE2E 343C FF60                  		move.w	#-$A0,d2
0001AE32                            
0001AE32                            loc_11822:
0001AE32 3141 0012                  		move.w	d1,y_vel(a0)
0001AE36 3142 0010                  		move.w	d2,x_vel(a0)
0001AE3A 3028 0008                  		move.w	8(a0),d0
0001AE3E 9068 0030                  		sub.w	$30(a0),d0
0001AE42 6400                       		bcc.s	loc_11838
0001AE44 4468 0010                  		neg.w	x_vel(a0)
0001AE48                            
0001AE48                            loc_11838:
0001AE48 5428 0024                  		addq.b	#2,routine(a0)
0001AE4C 6000                       		bra.s	Obj5E_SpikeFall
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001AE4E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001AE54 7000                       		moveq	#0,d0
0001AE56 1029 001A                  		move.b	mapping_frame(a1),d0
0001AE5A 343C 0028                  		move.w	#$28,d2
0001AE5E 3228 0008                  		move.w	8(a0),d1
0001AE62 9268 0030                  		sub.w	$30(a0),d1
0001AE66 6400                       		bcc.s	loc_1185C
0001AE68 4442                       		neg.w	d2
0001AE6A 5440                       		addq.w	#2,d0
0001AE6C                            
0001AE6C                            loc_1185C:
0001AE6C D040                       		add.w	d0,d0
0001AE6E 3228 0034                  		move.w	$34(a0),d1
0001AE72 D272 0000                  		add.w	(a2,d0.w),d1
0001AE76 3141 000C                  		move.w	d1,$C(a0)
0001AE7A D468 0030                  		add.w	$30(a0),d2
0001AE7E 3142 0008                  		move.w	d2,8(a0)
0001AE82 4268 000E                  		clr.w	$E(a0)
0001AE86 4268 000A                  		clr.w	$A(a0)
0001AE8A 4E75                       		rts	
0001AE8C                            ; ===========================================================================
0001AE8C                            
0001AE8C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001AE8C 4A68 0012                  		tst.w	y_vel(a0)
0001AE90 6A00                       		bpl.s	loc_1189A
0001AE92 4EBA AD22                  		jsr	ObjectFall
0001AE96 3028 0034                  		move.w	$34(a0),d0
0001AE9A 0440 002F                  		subi.w	#$2F,d0
0001AE9E B068 000C                  		cmp.w	$C(a0),d0
0001AEA2 6E00                       		bgt.s	locret_11898
0001AEA4 4EBA AD10                  		jsr	ObjectFall
0001AEA8                            
0001AEA8                            locret_11898:
0001AEA8 4E75                       		rts	
0001AEAA                            ; ===========================================================================
0001AEAA                            
0001AEAA                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001AEAA 4EBA AD0A                  		jsr	ObjectFall
0001AEAE 2268 003C                  		movea.l	$3C(a0),a1
0001AEB2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001AEB8 7000                       		moveq	#0,d0
0001AEBA 1029 001A                  		move.b	mapping_frame(a1),d0
0001AEBE 3228 0008                  		move.w	8(a0),d1
0001AEC2 9268 0030                  		sub.w	$30(a0),d1
0001AEC6 6400                       		bcc.s	loc_118BA
0001AEC8 5440                       		addq.w	#2,d0
0001AECA                            
0001AECA                            loc_118BA:
0001AECA D040                       		add.w	d0,d0
0001AECC 3228 0034                  		move.w	$34(a0),d1
0001AED0 D272 0000                  		add.w	(a2,d0.w),d1
0001AED4 B268 000C                  		cmp.w	$C(a0),d1
0001AED8 6E00                       		bgt.s	locret_11938
0001AEDA 2268 003C                  		movea.l	$3C(a0),a1
0001AEDE 7202                       		moveq	#2,d1
0001AEE0 4A68 0010                  		tst.w	x_vel(a0)
0001AEE4 6B00                       		bmi.s	Obj5E_Spring
0001AEE6 7200                       		moveq	#0,d1
0001AEE8                            
0001AEE8                            Obj5E_Spring:
0001AEE8 1341 003A                  		move.b	d1,$3A(a1)
0001AEEC 1141 003A                  		move.b	d1,$3A(a0)
0001AEF0 B229 001A                  		cmp.b	mapping_frame(a1),d1
0001AEF4 6700                       		beq.s	loc_1192C
0001AEF6 08A9 0003 0022             		bclr	#3,status(a1)
0001AEFC 6700                       		beq.s	loc_1192C
0001AEFE 4229 0025                  		clr.b	routine_secondary(a1)
0001AF02 137C 0002 0024             		move.b	#2,routine(a1)
0001AF08 45F8 D000                  		lea	($FFFFD000).w,a2
0001AF0C 3568 0012 0012             		move.w	y_vel(a0),y_vel(a2)
0001AF12 446A 0012                  		neg.w	y_vel(a2)
0001AF16 08EA 0001 0022             		bset	#1,status(a2)
0001AF1C 08AA 0003 0022             		bclr	#3,status(a2)
0001AF22 422A 003C                  		clr.b	$3C(a2)
0001AF26 157C 0010 001C             		move.b	#$10,anim(a2)	; change Sonic's animation to "spring" ($10)
0001AF2C 157C 0002 0024             		move.b	#2,routine(a2)
0001AF32 303C 00CC                  		move.w	#$CC,d0
0001AF36 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play spring sound
0001AF3C                            
0001AF3C                            loc_1192C:
0001AF3C 4268 0010                  		clr.w	x_vel(a0)
0001AF40 4268 0012                  		clr.w	y_vel(a0)
0001AF44 5528 0024                  		subq.b	#2,routine(a0)
0001AF48                            
0001AF48                            locret_11938:
0001AF48 4E75                       		rts	
0001AF4A                            ; ===========================================================================
0001AF4A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001AF54                            
0001AF54                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001AF84                            		even
0001AF84                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001AFB4                            		even
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4                            ; Sprite mappings - seesaws (SLZ)
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4                            Map_obj5E:
0001AFB4                            	include "_maps\obj5E.asm"
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4                            ; Sprite mappings - seesaws (SLZ)
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001AFB8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001AFBC 07                         byte_119AC:	dc.b 7
0001AFBD D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001AFC2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001AFC7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001AFCC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001AFD1 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001AFD6 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001AFDB FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001AFE0 04                         byte_119D0:	dc.b 4
0001AFE1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001AFE6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001AFEB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001AFF0 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001AFF6 00                         		even
0001AFF6 00                         		even
0001AFF6                            
0001AFF6                            ; ---------------------------------------------------------------------------
0001AFF6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001AFF6                            ; ---------------------------------------------------------------------------
0001AFF6                            Map_obj5Ea:
0001AFF6                            	include "_maps\obj5Eballs.asm"
0001AFF6                            ; ---------------------------------------------------------------------------
0001AFF6                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001AFF6                            ; ---------------------------------------------------------------------------
0001AFF6 0000                       		dc.w byte_119EA-Map_obj5Ea
0001AFF8 0000                       		dc.w byte_119F0-Map_obj5Ea
0001AFFA 01                         byte_119EA:	dc.b 1
0001AFFB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B000 01                         byte_119F0:	dc.b 1
0001B001 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B006                            		even
0001B006                            		even
0001B006                            
0001B006                            ; ===========================================================================
0001B006                            ; ---------------------------------------------------------------------------
0001B006                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001B006                            ; ---------------------------------------------------------------------------
0001B006                            
0001B006                            Obj5F:					; XREF: Obj_Index
0001B006 7000                       		moveq	#0,d0
0001B008 1028 0024                  		move.b	routine(a0),d0
0001B00C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001B010 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001B014                            ; ===========================================================================
0001B014 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001B016 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001B018 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001B01A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001B01C                            ; ===========================================================================
0001B01C                            
0001B01C                            Obj5F_Main:				; XREF: Obj5F_Index
0001B01C 5428 0024                  		addq.b	#2,routine(a0)
0001B020 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001B028 317C 0400 0002             		move.w	#$400,2(a0)
0001B02E 0028 0004 0001             		ori.b	#4,1(a0)
0001B034 317C 0180 0018             		move.w	#$180,priority(a0)
0001B03A 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B040 1028 0028                  		move.b	subtype(a0),d0
0001B044 6700                       		beq.s	loc_11A3C
0001B046 1140 0024                  		move.b	d0,routine(a0)
0001B04A 4E75                       		rts	
0001B04C                            ; ===========================================================================
0001B04C                            
0001B04C                            loc_11A3C:
0001B04C 117C 009A 0020             		move.b	#$9A,collision_flags(a0)
0001B052 0868 0000 0022             		bchg	#0,status(a0)
0001B058                            
0001B058                            Obj5F_Action:				; XREF: Obj5F_Index
0001B058 7000                       		moveq	#0,d0
0001B05A 1028 0025                  		move.b	routine_secondary(a0),d0
0001B05E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001B062 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001B066 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B06C 4EB9 0001 2618             		jsr	AnimateSprite
0001B072 6000 D7BA                  		bra.w	MarkObjGone
0001B076                            ; ===========================================================================
0001B076 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001B078 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001B07A 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001B07C                            ; ===========================================================================
0001B07C                            
0001B07C                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001B07C 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B082 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B086 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001B088 5428 0025                  		addq.b	#2,routine_secondary(a0)
0001B08C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001B092 317C 0010 0010             		move.w	#$10,x_vel(a0)
0001B098 117C 0001 001C             		move.b	#1,anim(a0)
0001B09E 0868 0000 0022             		bchg	#0,status(a0)
0001B0A4 6700                       		beq.s	locret_11A96
0001B0A6 4468 0010                  		neg.w	x_vel(a0)		; change direction
0001B0AA                            
0001B0AA                            locret_11A96:
0001B0AA 4E75                       		rts	
0001B0AC                            ; ===========================================================================
0001B0AC                            
0001B0AC                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001B0AC 4EB9 0000 0000             		jsr	Obj5F_ChkSonic
0001B0B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001B0B6 6B00                       		bmi.s	loc_11AA8
0001B0B8 4EBA AB1C                  		jsr	SpeedToPos
0001B0BC 4E75                       		rts	
0001B0BE                            ; ===========================================================================
0001B0BE                            
0001B0BE                            loc_11AA8:
0001B0BE 5528 0025                  		subq.b	#2,routine_secondary(a0)
0001B0C2 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001B0C8 4268 0010                  		clr.w	x_vel(a0)		; stop walking
0001B0CC 117C 0000 001C             		move.b	#0,anim(a0)	; stop animation
0001B0D2 4E75                       		rts	
0001B0D4                            ; ===========================================================================
0001B0D4                            
0001B0D4                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001B0D4 5368 0030                  		subq.w	#1,$30(a0)
0001B0D8 6A00                       		bpl.s	locret_11AD0
0001B0DA 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001B0DE 117C 0000 0024             		move.b	#0,routine(a0)
0001B0E4                            
0001B0E4                            locret_11AD0:
0001B0E4 4E75                       		rts	
0001B0E6                            ; ===========================================================================
0001B0E6                            
0001B0E6                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001B0E6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B0EA 9068 0008                  		sub.w	8(a0),d0
0001B0EE 6400                       		bcc.s	loc_11ADE
0001B0F0 4440                       		neg.w	d0
0001B0F2                            
0001B0F2                            loc_11ADE:
0001B0F2 0C40 0060                  		cmpi.w	#$60,d0
0001B0F6 6400                       		bcc.s	locret_11B5E
0001B0F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001B0FC 9068 000C                  		sub.w	$C(a0),d0
0001B100 6400                       		bcc.s	Obj5F_MakeFuse
0001B102 4440                       		neg.w	d0
0001B104                            
0001B104                            Obj5F_MakeFuse:
0001B104 0C40 0060                  		cmpi.w	#$60,d0
0001B108 6400                       		bcc.s	locret_11B5E
0001B10A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001B10E 6600                       		bne.s	locret_11B5E
0001B110 117C 0004 0025             		move.b	#4,routine_secondary(a0)
0001B116 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001B11C 4268 0010                  		clr.w	x_vel(a0)
0001B120 117C 0002 001C             		move.b	#2,anim(a0)
0001B126 4EBA B5F6                  		jsr	SingleObjLoad2
0001B12A 6600                       		bne.s	locret_11B5E
0001B12C 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001B130 3368 0008 0008             		move.w	8(a0),8(a1)
0001B136 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B13C 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001B142 1368 0022 0022             		move.b	status(a0),status(a1)
0001B148 137C 0004 0028             		move.b	#4,subtype(a1)
0001B14E 137C 0003 001C             		move.b	#3,anim(a1)
0001B154 337C 0010 0012             		move.w	#$10,y_vel(a1)
0001B15A 0828 0001 0022             		btst	#1,status(a0)
0001B160 6700                       		beq.s	loc_11B54
0001B162 4469 0012                  		neg.w	y_vel(a1)
0001B166                            
0001B166                            loc_11B54:
0001B166 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001B16C 2348 003C                  		move.l	a0,$3C(a1)
0001B170                            
0001B170                            locret_11B5E:
0001B170 4E75                       		rts	
0001B172                            ; ===========================================================================
0001B172                            
0001B172                            Obj5F_Display:				; XREF: Obj5F_Index
0001B172 6100                       		bsr.s	loc_11B70
0001B174 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B17A 4EB9 0001 2618             		jsr	AnimateSprite
0001B180 6000 D6AC                  		bra.w	MarkObjGone
0001B184                            ; ===========================================================================
0001B184                            
0001B184                            loc_11B70:
0001B184 5368 0030                  		subq.w	#1,$30(a0)
0001B188 6B00                       		bmi.s	loc_11B7C
0001B18A 4EBA AA4A                  		jsr	SpeedToPos
0001B18E 4E75                       		rts	
0001B190                            ; ===========================================================================
0001B190                            
0001B190                            loc_11B7C:
0001B190 4268 0030                  		clr.w	$30(a0)
0001B194 4228 0024                  		clr.b	routine(a0)
0001B198 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001B19E 7203                       		moveq	#3,d1
0001B1A0 2248                       		movea.l	a0,a1
0001B1A2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001B1A8 6000                       		bra.s	Obj5F_MakeShrap
0001B1AA                            ; ===========================================================================
0001B1AA                            
0001B1AA                            Obj5F_Loop:
0001B1AA 4EBA B572                  		jsr	SingleObjLoad2
0001B1AE 6600                       		bne.s	loc_11BCE
0001B1B0                            
0001B1B0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001B1B0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001B1B4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B1BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B1C0 137C 0006 0028             		move.b	#6,subtype(a1)
0001B1C6 137C 0004 001C             		move.b	#4,anim(a1)
0001B1CC 335A 0010                  		move.w	(a2)+,x_vel(a1)
0001B1D0 335A 0012                  		move.w	(a2)+,y_vel(a1)
0001B1D4 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001B1DA 08E9 0007 0001             		bset	#7,1(a1)
0001B1E0                            
0001B1E0                            loc_11BCE:
0001B1E0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001B1E4                            
0001B1E4 117C 0006 0024             		move.b	#6,routine(a0)
0001B1EA                            
0001B1EA                            Obj5F_End:				; XREF: Obj5F_Index
0001B1EA 4EBA A9EA                  		jsr	SpeedToPos
0001B1EE 0668 0018 0012             		addi.w	#$18,y_vel(a0)
0001B1F4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001B1FA 4EB9 0001 2618             		jsr	AnimateSprite
0001B200 4A28 0001                  		tst.b	1(a0)
0001B204 6A00 A9EA                  		bpl.w	DeleteObject
0001B208 6000 AA32                  		bra.w	DisplaySprite
0001B20C                            ; ===========================================================================
0001B20C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001B21C                            
0001B21C                            Ani_obj5F:
0001B21C                            	include "_anim\obj5F.asm"
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C                            ; Animation script - Bomb enemy
0001B21C                            ; ---------------------------------------------------------------------------
0001B21C 0000                       		dc.w byte_11C12-Ani_obj5F
0001B21E 0000                       		dc.w byte_11C16-Ani_obj5F
0001B220 0000                       		dc.w byte_11C1C-Ani_obj5F
0001B222 0000                       		dc.w byte_11C20-Ani_obj5F
0001B224 0000                       		dc.w byte_11C24-Ani_obj5F
0001B226 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001B22A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001B230 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001B234 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001B238 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001B23C                            		even
0001B23C                            		even
0001B23C                            
0001B23C                            ; ---------------------------------------------------------------------------
0001B23C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B23C                            ; ---------------------------------------------------------------------------
0001B23C                            Map_obj5F:
0001B23C                            	include "_maps\obj5F.asm"
0001B23C                            ; ---------------------------------------------------------------------------
0001B23C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001B23C                            ; ---------------------------------------------------------------------------
0001B23C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001B240 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001B244 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001B248 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001B24C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001B250 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001B254 03                         byte_11C40:	dc.b 3
0001B255 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B25A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B25F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B264 03                         byte_11C50:	dc.b 3
0001B265 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B26A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B26F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B274 03                         byte_11C60:	dc.b 3
0001B275 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B27A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001B27F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B284 03                         byte_11C70:	dc.b 3
0001B285 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B28A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001B28F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B294 03                         byte_11C80:	dc.b 3
0001B295 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001B29A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001B29F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001B2A4 03                         byte_11C90:	dc.b 3
0001B2A5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B2AA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001B2AF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001B2B4 02                         byte_11CA0:	dc.b 2
0001B2B5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001B2BA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B2BF 02                         byte_11CAB:	dc.b 2
0001B2C0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001B2C5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001B2CA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001B2CB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001B2D0 01                         byte_11CBC:	dc.b 1			; fuse
0001B2D1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001B2D6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001B2D7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001B2DC 01                         byte_11CC8:	dc.b 1			; fireball
0001B2DD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001B2E2                            		even
0001B2E2                            		even
0001B2E2                            
0001B2E2                            ; ===========================================================================
0001B2E2                            ; ---------------------------------------------------------------------------
0001B2E2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001B2E2                            ; ---------------------------------------------------------------------------
0001B2E2                            
0001B2E2                            Obj60:					; XREF: Obj_Index
0001B2E2 7000                       		moveq	#0,d0
0001B2E4 1028 0024                  		move.b	routine(a0),d0
0001B2E8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001B2EC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001B2F0                            ; ===========================================================================
0001B2F0 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001B2F2 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001B2F4 0000                       		dc.w Obj60_Display-Obj60_Index
0001B2F6 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001B2F8 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001B2FA                            ; ===========================================================================
0001B2FA                            
0001B2FA                            Obj60_Main:				; XREF: Obj60_Index
0001B2FA 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001B302 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001B308 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001B30E 6700                       		beq.s	loc_11D02
0001B310 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001B316                            
0001B316                            loc_11D02:
0001B316 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001B31C 6600                       		bne.s	loc_11D10
0001B31E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001B324                            
0001B324                            loc_11D10:
0001B324 0028 0004 0001             		ori.b	#4,1(a0)
0001B32A 317C 0200 0018             		move.w	#$200,priority(a0)
0001B330 117C 000B 0020             		move.b	#$B,collision_flags(a0)
0001B336 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0001B33C 7400                       		moveq	#0,d2
0001B33E 45E8 0037                  		lea	$37(a0),a2
0001B342 264A                       		movea.l	a2,a3
0001B344 524A                       		addq.w	#1,a2
0001B346 7203                       		moveq	#3,d1
0001B348                            
0001B348                            Obj60_MakeOrbs:
0001B348 4EBA B3D4                  		jsr	SingleObjLoad2
0001B34C 6600                       		bne.s	loc_11D90
0001B34E 5213                       		addq.b	#1,(a3)
0001B350 3A09                       		move.w	a1,d5
0001B352 0445 D000                  		subi.w	#-$3000,d5
0001B356 EC4D                       		lsr.w	#6,d5
0001B358 0245 007F                  		andi.w	#$7F,d5
0001B35C 14C5                       		move.b	d5,(a2)+
0001B35E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001B360 137C 0006 0024             		move.b	#6,routine(a1)
0001B366 2368 0004 0004             		move.l	4(a0),4(a1)
0001B36C 3368 0002 0002             		move.w	2(a0),2(a1)
0001B372 0029 0004 0001             		ori.b	#4,1(a1)
0001B378 337C 0200 0018             		move.w	#$200,priority(a1)
0001B37E 137C 0008 0023             		move.b	#8,width_pixels(a1)
0001B384 137C 0003 001A             		move.b	#3,mapping_frame(a1)
0001B38A 137C 0098 0020             		move.b	#$98,collision_flags(a1)
0001B390 1342 0026                  		move.b	d2,$26(a1)
0001B394 0602 0040                  		addi.b	#$40,d2
0001B398 2348 003C                  		move.l	a0,$3C(a1)
0001B39C 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001B3A0                            
0001B3A0                            loc_11D90:
0001B3A0 7001                       		moveq	#1,d0
0001B3A2 0828 0000 0022             		btst	#0,status(a0)
0001B3A8 6700                       		beq.s	Obj60_Move
0001B3AA 4440                       		neg.w	d0
0001B3AC                            
0001B3AC                            Obj60_Move:
0001B3AC 1140 0036                  		move.b	d0,$36(a0)
0001B3B0 1168 0028 0024             		move.b	subtype(a0),routine(a0)	; if type is 02, skip the firing rountine
0001B3B6 5428 0024                  		addq.b	#2,routine(a0)
0001B3BA 317C FFC0 0010             		move.w	#-$40,x_vel(a0)	; move orbinaut	to the left
0001B3C0 0828 0000 0022             		btst	#0,status(a0)	; is orbinaut reversed?
0001B3C6 6700                       		beq.s	locret_11DBC	; if not, branch
0001B3C8 4468 0010                  		neg.w	x_vel(a0)		; move orbinaut	to the right
0001B3CC                            
0001B3CC                            locret_11DBC:
0001B3CC 4E75                       		rts	
0001B3CE                            ; ===========================================================================
0001B3CE                            
0001B3CE                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001B3CE 3038 D008                  		move.w	($FFFFD008).w,d0
0001B3D2 9068 0008                  		sub.w	8(a0),d0
0001B3D6 6400                       		bcc.s	loc_11DCA
0001B3D8 4440                       		neg.w	d0
0001B3DA                            
0001B3DA                            loc_11DCA:
0001B3DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001B3DE 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001B3E0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001B3E4 9068 000C                  		sub.w	$C(a0),d0
0001B3E8 6400                       		bcc.s	loc_11DDC
0001B3EA 4440                       		neg.w	d0
0001B3EC                            
0001B3EC                            loc_11DDC:
0001B3EC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001B3F0 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001B3F2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001B3F6 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001B3F8 117C 0001 001C             		move.b	#1,anim(a0)	; use "angry" animation
0001B3FE                            
0001B3FE                            Obj60_Animate:
0001B3FE 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001B404 4EB9 0001 2618             		jsr	AnimateSprite
0001B40A 6000 0000                  		bra.w	Obj60_ChkDel
0001B40E                            ; ===========================================================================
0001B40E                            
0001B40E                            Obj60_Display:				; XREF: Obj60_Index
0001B40E 4EBA A7C6                  		jsr	SpeedToPos
0001B412                            
0001B412                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001B412 3028 0008                  		move.w	8(a0),d0
0001B416 0240 FF80                  		andi.w	#$FF80,d0
0001B41A 3238 F700                  		move.w	($FFFFF700).w,d1
0001B41E 0441 0080                  		subi.w	#$80,d1
0001B422 0241 FF80                  		andi.w	#$FF80,d1
0001B426 9041                       		sub.w	d1,d0
0001B428 0C40 0280                  		cmpi.w	#$280,d0
0001B42C 6200 0000                  		bhi.w	Obj60_ChkGone
0001B430 6000 A80A                  		bra.w	DisplaySprite
0001B434                            ; ===========================================================================
0001B434                            
0001B434                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001B434                            ;		lea	(v_objstate).w,a2
0001B434 7000                       		moveq	#0,d0
0001B436 3028 0014                  		move.w	respawn_index(a0),d0
0001B43A                            ;        move.w	respawn_index(a0),d0
0001B43A 6700                       		beq.s	loc_11E34
0001B43C 3440                       	    movea.w	d0,a2		
0001B43E 0892 0007                  		bclr	#7,(a2)
0001B442                            
0001B442                            loc_11E34:
0001B442 45E8 0037                  		lea	$37(a0),a2
0001B446 7400                       		moveq	#0,d2
0001B448 141A                       		move.b	(a2)+,d2
0001B44A 5342                       		subq.w	#1,d2
0001B44C 6500                       		bcs.s	Obj60_Delete
0001B44E                            
0001B44E                            loc_11E40:
0001B44E 7000                       		moveq	#0,d0
0001B450 101A                       		move.b	(a2)+,d0
0001B452 ED48                       		lsl.w	#6,d0
0001B454 0680 00FF D000             		addi.l	#$FFD000,d0
0001B45A 2240                       		movea.l	d0,a1
0001B45C 4EBA A794                  		jsr	DeleteObject2
0001B460 51CA FFEC                  		dbf	d2,loc_11E40
0001B464                            
0001B464                            Obj60_Delete:
0001B464 6000 A78A                  		bra.w	DeleteObject
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001B468 2268 003C                  		movea.l	$3C(a0),a1
0001B46C 0C11 0060                  		cmpi.b	#$60,0(a1)
0001B470 6600 A77E                  		bne.w	DeleteObject
0001B474 0C29 0002 001A             		cmpi.b	#2,mapping_frame(a1)
0001B47A 6600                       		bne.s	Obj60_Circle
0001B47C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001B482 6600                       		bne.s	Obj60_Circle
0001B484 5428 0024                  		addq.b	#2,routine(a0)
0001B488 5329 0037                  		subq.b	#1,$37(a1)
0001B48C 6600                       		bne.s	Obj60_FireOrb
0001B48E 5429 0024                  		addq.b	#2,routine(a1)
0001B492                            
0001B492                            Obj60_FireOrb:
0001B492 317C FE00 0010             		move.w	#-$200,x_vel(a0)	; move orb to the left (quickly)
0001B498 0829 0000 0022             		btst	#0,status(a1)
0001B49E 6700                       		beq.s	Obj60_Display2
0001B4A0 4468 0010                  		neg.w	x_vel(a0)
0001B4A4                            
0001B4A4                            Obj60_Display2:
0001B4A4 6000 A796                  		bra.w	DisplaySprite
0001B4A8                            ; ===========================================================================
0001B4A8                            
0001B4A8                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001B4A8 1028 0026                  		move.b	$26(a0),d0
0001B4AC 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001B4B2 E841                       		asr.w	#4,d1
0001B4B4 D269 0008                  		add.w	8(a1),d1
0001B4B8 3141 0008                  		move.w	d1,8(a0)
0001B4BC E840                       		asr.w	#4,d0
0001B4BE D069 000C                  		add.w	$C(a1),d0
0001B4C2 3140 000C                  		move.w	d0,$C(a0)
0001B4C6 1029 0036                  		move.b	$36(a1),d0
0001B4CA D128 0026                  		add.b	d0,$26(a0)
0001B4CE 6000 A76C                  		bra.w	DisplaySprite
0001B4D2                            ; ===========================================================================
0001B4D2                            
0001B4D2                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001B4D2 4EBA A702                  		jsr	SpeedToPos
0001B4D6 4A28 0001                  		tst.b	1(a0)
0001B4DA 6A00 A714                  		bpl.w	DeleteObject
0001B4DE 6000 A75C                  		bra.w	DisplaySprite
0001B4E2                            ; ===========================================================================
0001B4E2                            Ani_obj60:
0001B4E2                            	include "_anim\obj60.asm"
0001B4E2                            ; ---------------------------------------------------------------------------
0001B4E2                            ; Animation script - Orbinaut enemy
0001B4E2                            ; ---------------------------------------------------------------------------
0001B4E2 0000                       		dc.w byte_11EDA-Ani_obj60
0001B4E4 0000                       		dc.w byte_11EDE-Ani_obj60
0001B4E6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001B4EA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001B4F0                            		even
0001B4F0                            		even
0001B4F0                            
0001B4F0                            ; ---------------------------------------------------------------------------
0001B4F0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001B4F0                            ; ---------------------------------------------------------------------------
0001B4F0                            Map_obj60:
0001B4F0                            	include "_maps\obj60.asm"
0001B4F0                            ; ---------------------------------------------------------------------------
0001B4F0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001B4F0                            ; ---------------------------------------------------------------------------
0001B4F0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001B4F4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001B4F8 01                         byte_11EEC:	dc.b 1
0001B4F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B4FE 01                         byte_11EF2:	dc.b 1
0001B4FF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001B504 01                         byte_11EF8:	dc.b 1
0001B505 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B50A 01                         byte_11EFE:	dc.b 1
0001B50B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001B510                            		even
0001B510                            		even
0001B510                            
0001B510                            ; ===========================================================================
0001B510                            ; ---------------------------------------------------------------------------
0001B510                            ; Object 16 - harpoon (LZ)
0001B510                            ; ---------------------------------------------------------------------------
0001B510                            
0001B510                            Obj16:					; XREF: Obj_Index
0001B510 7000                       		moveq	#0,d0
0001B512 1028 0024                  		move.b	routine(a0),d0
0001B516 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001B51A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001B51E                            ; ===========================================================================
0001B51E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001B520 0000                       		dc.w Obj16_Move-Obj16_Index
0001B522 0000                       		dc.w Obj16_Wait-Obj16_Index
0001B524                            ; ===========================================================================
0001B524                            
0001B524                            Obj16_Main:				; XREF: Obj16_Index
0001B524 5428 0024                  		addq.b	#2,routine(a0)
0001B528 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001B530 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001B536 0028 0004 0001             		ori.b	#4,1(a0)
0001B53C 317C 0200 0018             		move.w	#$200,priority(a0)
0001B542 1168 0028 001C             		move.b	subtype(a0),anim(a0)
0001B548 117C 0014 0023             		move.b	#$14,width_pixels(a0)
0001B54E 317C 003C 0030             		move.w	#60,$30(a0)
0001B554                            
0001B554                            Obj16_Move:				; XREF: Obj16_Index
0001B554 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001B55A 4EB9 0001 2618             		jsr	AnimateSprite
0001B560 7000                       		moveq	#0,d0
0001B562 1028 001A                  		move.b	mapping_frame(a0),d0	; move frame number to d0
0001B566 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),collision_flags(a0) ; load collision response (based on	d0)
0001B56C 6000 D2C0                  		bra.w	MarkObjGone
0001B570                            ; ===========================================================================
0001B570 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            Obj16_Wait:				; XREF: Obj16_Index
0001B576 5368 0030                  		subq.w	#1,$30(a0)
0001B57A 6A00                       		bpl.s	Obj16_ChkDel
0001B57C 317C 003C 0030             		move.w	#60,$30(a0)
0001B582 5528 0024                  		subq.b	#2,routine(a0)	; run "Obj16_Move" subroutine
0001B586 0868 0000 001C             		bchg	#0,anim(a0)	; reverse animation
0001B58C                            
0001B58C                            Obj16_ChkDel:
0001B58C 6000 D2A0                  		bra.w	MarkObjGone
0001B590                            ; ===========================================================================
0001B590                            Ani_obj16:
0001B590                            	include "_anim\obj16.asm"
0001B590                            ; ---------------------------------------------------------------------------
0001B590                            ; Animation script - harpoon (LZ)
0001B590                            ; ---------------------------------------------------------------------------
0001B590 0000                       		dc.w byte_11F8A-Ani_obj16
0001B592 0000                       		dc.w byte_11F8E-Ani_obj16
0001B594 0000                       		dc.w byte_11F92-Ani_obj16
0001B596 0000                       		dc.w byte_11F96-Ani_obj16
0001B598 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001B59C 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001B5A0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001B5A4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001B5A8                            		even
0001B5A8                            		even
0001B5A8                            
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8                            ; Sprite mappings - harpoon (LZ)
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8                            Map_obj16:
0001B5A8                            	include "_maps\obj16.asm"
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8                            ; Sprite mappings - harpoon (LZ)
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001B5AC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001B5B0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001B5B4 01                         byte_11FA6:	dc.b 1
0001B5B5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001B5BA 01                         byte_11FAC:	dc.b 1
0001B5BB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001B5C0 02                         byte_11FB2:	dc.b 2
0001B5C1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001B5C6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001B5CB 01                         byte_11FBD:	dc.b 1
0001B5CC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001B5D1 01                         byte_11FC3:	dc.b 1
0001B5D2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001B5D7 02                         byte_11FC9:	dc.b 2
0001B5D8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001B5DD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001B5E2                            		even
0001B5E2                            		even
0001B5E2                            
0001B5E2                            ; ===========================================================================
0001B5E2                            ; ---------------------------------------------------------------------------
0001B5E2                            ; Object 61 - blocks (LZ)
0001B5E2                            ; ---------------------------------------------------------------------------
0001B5E2                            
0001B5E2                            Obj61:					; XREF: Obj_Index
0001B5E2 7000                       		moveq	#0,d0
0001B5E4 1028 0024                  		move.b	routine(a0),d0
0001B5E8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001B5EC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001B5F0                            ; ===========================================================================
0001B5F0 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001B5F2 0000                       		dc.w Obj61_Action-Obj61_Index
0001B5F4                            
0001B5F4 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001B5F6 200C                       		dc.b $20, $C
0001B5F8 1010                       		dc.b $10, $10
0001B5FA 1010                       		dc.b $10, $10
0001B5FC                            ; ===========================================================================
0001B5FC                            
0001B5FC                            Obj61_Main:				; XREF: Obj61_Index
0001B5FC 5428 0024                  		addq.b	#2,routine(a0)
0001B600 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001B608 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001B60E 117C 0004 0001             		move.b	#4,1(a0)
0001B614 317C 0180 0018             		move.w	#$180,priority(a0)
0001B61A 7000                       		moveq	#0,d0
0001B61C 1028 0028                  		move.b	subtype(a0),d0
0001B620 E648                       		lsr.w	#3,d0
0001B622 0240 000E                  		andi.w	#$E,d0
0001B626 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001B62A 115A 0023                  		move.b	(a2)+,width_pixels(a0)
0001B62E 1152 0016                  		move.b	(a2),$16(a0)
0001B632 E248                       		lsr.w	#1,d0
0001B634 1140 001A                  		move.b	d0,mapping_frame(a0)
0001B638 3168 0008 0034             		move.w	8(a0),$34(a0)
0001B63E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B644 1028 0028                  		move.b	subtype(a0),d0
0001B648 0200 000F                  		andi.b	#$F,d0
0001B64C 6700                       		beq.s	Obj61_Action
0001B64E 0C00 0007                  		cmpi.b	#7,d0
0001B652 6700                       		beq.s	Obj61_Action
0001B654 117C 0001 0038             		move.b	#1,$38(a0)
0001B65A                            
0001B65A                            Obj61_Action:				; XREF: Obj61_Index
0001B65A 3F28 0008                  		move.w	8(a0),-(sp)
0001B65E 7000                       		moveq	#0,d0
0001B660 1028 0028                  		move.b	subtype(a0),d0
0001B664 0240 000F                  		andi.w	#$F,d0
0001B668 D040                       		add.w	d0,d0
0001B66A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001B66E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001B672 381F                       		move.w	(sp)+,d4
0001B674 4A28 0001                  		tst.b	1(a0)
0001B678 6A00                       		bpl.s	Obj61_ChkDel
0001B67A 7200                       		moveq	#0,d1
0001B67C 1228 0023                  		move.b	width_pixels(a0),d1
0001B680 0641 000B                  		addi.w	#$B,d1
0001B684 7400                       		moveq	#0,d2
0001B686 1428 0016                  		move.b	$16(a0),d2
0001B68A 3602                       		move.w	d2,d3
0001B68C 5243                       		addq.w	#1,d3
0001B68E 4EBA D882                  		jsr	SolidObject
0001B692 1144 003F                  		move.b	d4,$3F(a0)
0001B696 4EB9 0000 0000             		jsr	loc_12180
0001B69C                            
0001B69C                            Obj61_ChkDel:
0001B69C 3028 0034                  		move.w	$34(a0),d0
0001B6A0 4EFA D1C2                  		jmp		MarkObjGone2
0001B6A4                            ; ===========================================================================
0001B6A4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001B6A8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001B6AC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001B6B0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001B6B4                            ; ===========================================================================
0001B6B4                            
0001B6B4                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001B6B4 4E75                       		rts	
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001B6B6 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001B6BA 6600                       		bne.s	loc_120D6	; if yes, branch
0001B6BC 0828 0003 0022             		btst	#3,status(a0)
0001B6C2 6700                       		beq.s	locret_120D4
0001B6C4 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
0001B6CA                            
0001B6CA                            locret_120D4:
0001B6CA 4E75                       		rts	
0001B6CC                            ; ===========================================================================
0001B6CC                            
0001B6CC                            loc_120D6:
0001B6CC 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001B6D0 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001B6D2 5228 0028                  		addq.b	#1,subtype(a0)	; add 1	to type
0001B6D6 4228 0038                  		clr.b	$38(a0)
0001B6DA 4E75                       		rts	
0001B6DC                            ; ===========================================================================
0001B6DC                            
0001B6DC                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001B6DC 4EBA A4F8                  		jsr	SpeedToPos
0001B6E0 5068 0012                  		addq.w	#8,y_vel(a0)	; make object fall
0001B6E4 4EB9 0000 0000             		jsr	ObjHitFloor
0001B6EA 4A41                       		tst.w	d1
0001B6EC 6A00 0000                  		bpl.w	locret_12106
0001B6F0 5241                       		addq.w	#1,d1
0001B6F2 D368 000C                  		add.w	d1,$C(a0)
0001B6F6 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the floor
0001B6FA 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001B6FE                            
0001B6FE                            locret_12106:
0001B6FE 4E75                       		rts	
0001B700                            ; ===========================================================================
0001B700                            
0001B700                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001B700 4EBA A4D4                  		jsr	SpeedToPos
0001B704 5168 0012                  		subq.w	#8,y_vel(a0)	; make object rise
0001B708 4EB9 0000 0000             		jsr	ObjHitCeiling
0001B70E 4A41                       		tst.w	d1
0001B710 6A00 0000                  		bpl.w	locret_12126
0001B714 9368 000C                  		sub.w	d1,$C(a0)
0001B718 4268 0012                  		clr.w	y_vel(a0)		; stop when it touches the ceiling
0001B71C 4228 0028                  		clr.b	subtype(a0)		; set type to 00 (non-moving type)
0001B720                            
0001B720                            locret_12126:
0001B720 4E75                       		rts	
0001B722                            ; ===========================================================================
0001B722                            
0001B722                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001B722 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001B728 6600                       		bne.s	locret_12138	; if not, branch
0001B72A 5228 0028                  		addq.b	#1,subtype(a0)	; if yes, add 1	to type
0001B72E 4228 0038                  		clr.b	$38(a0)
0001B732                            
0001B732                            locret_12138:
0001B732 4E75                       		rts	
0001B734                            ; ===========================================================================
0001B734                            
0001B734                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001B734 3038 F646                  		move.w	($FFFFF646).w,d0
0001B738 9068 000C                  		sub.w	$C(a0),d0
0001B73C 6700                       		beq.s	locret_1217E
0001B73E 6400                       		bcc.s	loc_12162
0001B740 0C40 FFFE                  		cmpi.w	#-2,d0
0001B744 6C00                       		bge.s	loc_1214E
0001B746 70FE                       		moveq	#-2,d0
0001B748                            
0001B748                            loc_1214E:
0001B748 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001B74C 4EB9 0000 0000             		jsr	ObjHitCeiling
0001B752 4A41                       		tst.w	d1
0001B754 6A00 0000                  		bpl.w	locret_12160
0001B758 9368 000C                  		sub.w	d1,$C(a0)
0001B75C                            
0001B75C                            locret_12160:
0001B75C 4E75                       		rts	
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_12162:				; XREF: Obj61_Type07
0001B75E 0C40 0002                  		cmpi.w	#2,d0
0001B762 6F00                       		ble.s	loc_1216A
0001B764 7002                       		moveq	#2,d0
0001B766                            
0001B766                            loc_1216A:
0001B766 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001B76A 4EB9 0000 0000             		jsr	ObjHitFloor
0001B770 4A41                       		tst.w	d1
0001B772 6A00 0000                  		bpl.w	locret_1217E
0001B776 5241                       		addq.w	#1,d1
0001B778 D368 000C                  		add.w	d1,$C(a0)
0001B77C                            
0001B77C                            locret_1217E:
0001B77C 4E75                       		rts	
0001B77E                            ; ===========================================================================
0001B77E                            
0001B77E                            loc_12180:				; XREF: Obj61_Action
0001B77E 4A28 0038                  		tst.b	$38(a0)
0001B782 6700                       		beq.s	locret_121C0
0001B784 0828 0003 0022             		btst	#3,status(a0)
0001B78A 6600                       		bne.s	loc_1219A
0001B78C 4A28 003E                  		tst.b	parent(a0)
0001B790 6700                       		beq.s	locret_121C0
0001B792 5928 003E                  		subq.b	#4,parent(a0)
0001B796 6000                       		bra.s	loc_121A6
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            loc_1219A:
0001B798 0C28 0040 003E             		cmpi.b	#$40,parent(a0)
0001B79E 6700                       		beq.s	locret_121C0
0001B7A0 5828 003E                  		addq.b	#4,parent(a0)
0001B7A4                            
0001B7A4                            loc_121A6:
0001B7A4 1028 003E                  		move.b	parent(a0),d0
0001B7A8 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001B7AE 323C 0400                  		move.w	#$400,d1
0001B7B2 C1C1                       		muls.w	d1,d0
0001B7B4 4840                       		swap	d0
0001B7B6 D068 0030                  		add.w	$30(a0),d0
0001B7BA 3140 000C                  		move.w	d0,$C(a0)
0001B7BE                            
0001B7BE                            locret_121C0:
0001B7BE 4E75                       		rts	
0001B7C0                            ; ===========================================================================
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0                            ; Sprite mappings - blocks (LZ)
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0                            Map_obj61:
0001B7C0                            	include "_maps\obj61.asm"
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0                            ; Sprite mappings - blocks (LZ)
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001B7C4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001B7C8 01                         byte_121CA:	dc.b 1
0001B7C9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B7CE 02                         byte_121D0:	dc.b 2
0001B7CF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001B7D4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001B7D9 01                         byte_121DB:	dc.b 1
0001B7DA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001B7DF 01                         byte_121E1:	dc.b 1
0001B7E0 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001B7E6 00                         		even
0001B7E6 00                         		even
0001B7E6                            
0001B7E6                            ; ===========================================================================
0001B7E6                            ; ---------------------------------------------------------------------------
0001B7E6                            ; Object 62 - gargoyle head (LZ)
0001B7E6                            ; ---------------------------------------------------------------------------
0001B7E6                            
0001B7E6                            Obj62:					; XREF: Obj_Index
0001B7E6 7000                       		moveq	#0,d0
0001B7E8 1028 0024                  		move.b	routine(a0),d0
0001B7EC 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001B7F0 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001B7F4 6000 D038                  		bra.w	MarkObjGone
0001B7F8                            ; ===========================================================================
0001B7F8 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001B7FA 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001B7FC 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001B7FE 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001B800                            
0001B800 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001B808                            ; ===========================================================================
0001B808                            
0001B808                            Obj62_Main:				; XREF: Obj62_Index
0001B808 5428 0024                  		addq.b	#2,routine(a0)
0001B80C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001B814 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001B81A 0028 0004 0001             		ori.b	#4,1(a0)
0001B820 317C 0180 0018             		move.w	#$180,priority(a0)
0001B826 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001B82C 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001B830 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001B834 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001B83A 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001B840 0228 000F 0028             		andi.b	#$F,subtype(a0)
0001B846                            
0001B846                            Obj62_MakeFire:				; XREF: Obj62_Index
0001B846 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001B84A 6600                       		bne.s	Obj62_NoFire
0001B84C 1168 001F 001E             		move.b	$1F(a0),anim_frame_duration(a0)
0001B852 4EBA A760                  		jsr	ChkObjOnScreen
0001B856 6600                       		bne.s	Obj62_NoFire
0001B858 4EBA AEAE                  		jsr	SingleObjLoad
0001B85C 6600                       		bne.s	Obj62_NoFire
0001B85E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001B862 5829 0024                  		addq.b	#4,routine(a1)
0001B866 3368 0008 0008             		move.w	8(a0),8(a1)
0001B86C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B872 1368 0001 0001             		move.b	1(a0),1(a1)
0001B878 1368 0022 0022             		move.b	status(a0),status(a1)
0001B87E                            
0001B87E                            Obj62_NoFire:
0001B87E 4E75                       		rts	
0001B880                            ; ===========================================================================
0001B880                            
0001B880                            Obj62_FireBall:				; XREF: Obj62_Index
0001B880 5428 0024                  		addq.b	#2,routine(a0)
0001B884 117C 0008 0016             		move.b	#8,$16(a0)
0001B88A 117C 0008 0017             		move.b	#8,$17(a0)
0001B890 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001B898 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001B89E 0028 0004 0001             		ori.b	#4,1(a0)
0001B8A4 317C 0200 0018             		move.w	#$200,priority(a0)
0001B8AA 117C 0098 0020             		move.b	#$98,collision_flags(a0)
0001B8B0 117C 0008 0023             		move.b	#8,width_pixels(a0)
0001B8B6 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0001B8BC 5068 000C                  		addq.w	#8,$C(a0)
0001B8C0 317C 0200 0010             		move.w	#$200,x_vel(a0)
0001B8C6 0828 0000 0022             		btst	#0,status(a0)
0001B8CC 6600                       		bne.s	Obj62_Sound
0001B8CE 4468 0010                  		neg.w	x_vel(a0)
0001B8D2                            
0001B8D2                            Obj62_Sound:
0001B8D2 303C 00AE                  		move.w	#$AE,d0
0001B8D6 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001B8DC                            
0001B8DC                            Obj62_AniFire:				; XREF: Obj62_Index
0001B8DC 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001B8E0 0200 0007                  		andi.b	#7,d0
0001B8E4 6600                       		bne.s	Obj62_StopFire
0001B8E6 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; switch between frame 01 and 02
0001B8EC                            
0001B8EC                            Obj62_StopFire:
0001B8EC 4EBA A2E8                  		jsr	SpeedToPos
0001B8F0 0828 0000 0022             		btst	#0,status(a0)
0001B8F6 6600                       		bne.s	Obj62_StopFire2
0001B8F8 76F8                       		moveq	#-8,d3
0001B8FA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0001B900 4A41                       		tst.w	d1
0001B902 6B00 A2EC                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001B906 4E75                       		rts	
0001B908                            ; ===========================================================================
0001B908                            
0001B908                            Obj62_StopFire2:
0001B908 7608                       		moveq	#8,d3
0001B90A 4EB9 0000 0000             		jsr	ObjHitWallRight
0001B910 4A41                       		tst.w	d1
0001B912 6B00 A2DC                  		bmi.w	DeleteObject
0001B916 4E75                       		rts	
0001B918                            ; ===========================================================================
0001B918                            ; ---------------------------------------------------------------------------
0001B918                            ; Sprite mappings - gargoyle head (LZ)
0001B918                            ; ---------------------------------------------------------------------------
0001B918                            Map_obj62:
0001B918                            	include "_maps\obj62.asm"
0001B918                            ; ---------------------------------------------------------------------------
0001B918                            ; Sprite mappings - gargoyle head (LZ)
0001B918                            ; ---------------------------------------------------------------------------
0001B918 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001B91C 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001B920 03                         byte_12320:	dc.b 3
0001B921 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001B926 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001B92B 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001B930 01                         byte_12330:	dc.b 1
0001B931 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001B936 01                         byte_12336:	dc.b 1
0001B937 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001B93C                            		even
0001B93C                            		even
0001B93C                            
0001B93C                            ; ===========================================================================
0001B93C                            ; ---------------------------------------------------------------------------
0001B93C                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001B93C                            ; ---------------------------------------------------------------------------
0001B93C                            
0001B93C                            Obj63:					; XREF: Obj_Index
0001B93C 7000                       		moveq	#0,d0
0001B93E 1028 0024                  		move.b	routine(a0),d0
0001B942 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001B946 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001B94A 3028 0030                  		move.w	$30(a0),d0
0001B94E 0240 FF80                  		andi.w	#$FF80,d0
0001B952 3238 F700                  		move.w	($FFFFF700).w,d1
0001B956 0441 0080                  		subi.w	#$80,d1
0001B95A 0241 FF80                  		andi.w	#$FF80,d1
0001B95E 9041                       		sub.w	d1,d0
0001B960 0C40 0280                  		cmpi.w	#$280,d0
0001B964 6200                       		bhi.s	loc_1236A
0001B966                            
0001B966                            Obj63_Display:				; XREF: loc_1236A
0001B966 6000 A2D4                  		bra.w	DisplaySprite
0001B96A                            ; ===========================================================================
0001B96A                            
0001B96A                            loc_1236A:				; XREF: Obj63
0001B96A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001B970 6600                       		bne.s	loc_12378
0001B972 0C40 FF80                  		cmpi.w	#-$80,d0
0001B976 64EE                       		bcc.s	Obj63_Display
0001B978                            
0001B978                            loc_12378:
0001B978 1028 002F                  		move.b	$2F(a0),d0
0001B97C 6A00 A272                  		bpl.w	DeleteObject
0001B980 0240 007F                  		andi.w	#$7F,d0
0001B984 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001B988 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001B98E 6000 A260                  		bra.w	DeleteObject
0001B992                            ; ===========================================================================
0001B992 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001B994 0000                       		dc.w loc_124B2-Obj63_Index
0001B996 0000                       		dc.w loc_124C2-Obj63_Index
0001B998 0000                       		dc.w loc_124DE-Obj63_Index
0001B99A                            ; ===========================================================================
0001B99A                            
0001B99A                            Obj63_Main:				; XREF: Obj63_Index
0001B99A 1028 0028                  		move.b	subtype(a0),d0
0001B99E 6B00 0000                  		bmi.w	loc_12460
0001B9A2 5428 0024                  		addq.b	#2,routine(a0)
0001B9A6 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001B9AE 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001B9B4 0028 0004 0001             		ori.b	#4,1(a0)
0001B9BA 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001B9C0 317C 0200 0018             		move.w	#$200,priority(a0)
0001B9C6 0C28 007F 0028             		cmpi.b	#$7F,subtype(a0)
0001B9CC 6600                       		bne.s	loc_123E2
0001B9CE 5828 0024                  		addq.b	#4,routine(a0)
0001B9D2 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001B9D8 317C 0080 0018             		move.w	#$80,priority(a0)
0001B9DE 6000 0000                  		bra.w	loc_124DE
0001B9E2                            ; ===========================================================================
0001B9E2                            
0001B9E2                            loc_123E2:
0001B9E2 117C 0004 001A             		move.b	#4,mapping_frame(a0)
0001B9E8 7000                       		moveq	#0,d0
0001B9EA 1028 0028                  		move.b	subtype(a0),d0
0001B9EE 3200                       		move.w	d0,d1
0001B9F0 E648                       		lsr.w	#3,d0
0001B9F2 0240 001E                  		andi.w	#$1E,d0
0001B9F6 45FA 0000                  		lea	Obj63_Data(pc),a2
0001B9FA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001B9FE 315A 0038                  		move.w	(a2)+,$38(a0)
0001BA02 315A 0030                  		move.w	(a2)+,$30(a0)
0001BA06 214A 003C                  		move.l	a2,$3C(a0)
0001BA0A 0241 000F                  		andi.w	#$F,d1
0001BA0E E549                       		lsl.w	#2,d1
0001BA10 1141 0038                  		move.b	d1,$38(a0)
0001BA14 117C 0004 003A             		move.b	#4,$3A(a0)
0001BA1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001BA1E 6700                       		beq.s	loc_1244C
0001BA20 117C 0001 003B             		move.b	#1,$3B(a0)
0001BA26 4428 003A                  		neg.b	$3A(a0)
0001BA2A 7200                       		moveq	#0,d1
0001BA2C 1228 0038                  		move.b	$38(a0),d1
0001BA30 D228 003A                  		add.b	$3A(a0),d1
0001BA34 B228 0039                  		cmp.b	$39(a0),d1
0001BA38 6500                       		bcs.s	loc_12448
0001BA3A 1001                       		move.b	d1,d0
0001BA3C 7200                       		moveq	#0,d1
0001BA3E 4A00                       		tst.b	d0
0001BA40 6A00                       		bpl.s	loc_12448
0001BA42 1228 0039                  		move.b	$39(a0),d1
0001BA46 5901                       		subq.b	#4,d1
0001BA48                            
0001BA48                            loc_12448:
0001BA48 1141 0038                  		move.b	d1,$38(a0)
0001BA4C                            
0001BA4C                            loc_1244C:
0001BA4C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001BA52 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001BA58 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001BA5E 6000 0000                  		bra.w	loc_124B2
0001BA62                            ; ===========================================================================
0001BA62                            
0001BA62                            loc_12460:				; XREF: Obj63_Main
0001BA62 1140 002F                  		move.b	d0,$2F(a0)
0001BA66 0240 007F                  		andi.w	#$7F,d0
0001BA6A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001BA6E 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001BA74 6600 A17A                  		bne.w	DeleteObject
0001BA78 D040                       		add.w	d0,d0
0001BA7A 0240 001E                  		andi.w	#$1E,d0
0001BA7E 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001BA84 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001BA88 321A                       		move.w	(a2)+,d1
0001BA8A 2248                       		movea.l	a0,a1
0001BA8C 6000                       		bra.s	Obj63_MakePtfms
0001BA8E                            ; ===========================================================================
0001BA8E                            
0001BA8E                            Obj63_Loop:
0001BA8E 4EBA AC78                  		jsr	SingleObjLoad
0001BA92 6600                       		bne.s	loc_124AA
0001BA94                            
0001BA94                            Obj63_MakePtfms:			; XREF: loc_12460
0001BA94 12BC 0063                  		move.b	#$63,0(a1)
0001BA98 335A 0008                  		move.w	(a2)+,8(a1)
0001BA9C 335A 000C                  		move.w	(a2)+,$C(a1)
0001BAA0 301A                       		move.w	(a2)+,d0
0001BAA2 1340 0028                  		move.b	d0,subtype(a1)
0001BAA6                            
0001BAA6                            loc_124AA:
0001BAA6 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001BAAA                            
0001BAAA 588F                       		addq.l	#4,sp
0001BAAC 4E75                       		rts	
0001BAAE                            ; ===========================================================================
0001BAAE                            
0001BAAE                            loc_124B2:				; XREF: Obj63_Index
0001BAAE 7200                       		moveq	#0,d1
0001BAB0 1228 0023                  		move.b	width_pixels(a0),d1
0001BAB4 4EB9 0000 F09A             		jsr	(PlatformObject).l
0001BABA 6000 0000                  		bra.w	sub_12502
0001BABE                            ; ===========================================================================
0001BABE                            
0001BABE                            loc_124C2:				; XREF: Obj63_Index
0001BABE 7200                       		moveq	#0,d1
0001BAC0 1228 0023                  		move.b	width_pixels(a0),d1
0001BAC4 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
0001BACA 3F28 0008                  		move.w	8(a0),-(sp)
0001BACE 4EB9 0000 0000             		jsr	sub_12502
0001BAD4 341F                       		move.w	(sp)+,d2
0001BAD6 4EF9 0000 F440             		jmp	(MvSonicOnPtfm2).l
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            loc_124DE:				; XREF: Obj63_Index
0001BADC 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001BAE0 0240 0003                  		andi.w	#3,d0
0001BAE4 6600                       		bne.s	loc_124FC
0001BAE6 7201                       		moveq	#1,d1
0001BAE8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001BAEC 6700                       		beq.s	loc_124F2
0001BAEE 4401                       		neg.b	d1
0001BAF0                            
0001BAF0                            loc_124F2:
0001BAF0 D328 001A                  		add.b	d1,mapping_frame(a0)
0001BAF4 0228 0003 001A             		andi.b	#3,mapping_frame(a0)
0001BAFA                            
0001BAFA                            loc_124FC:
0001BAFA 588F                       		addq.l	#4,sp
0001BAFC 6000 CD30                  		bra.w	MarkObjGone
0001BB00                            
0001BB00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB00                            
0001BB00                            
0001BB00                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001BB00 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001BB04 6700                       		beq.s	loc_12520
0001BB06 4A28 003B                  		tst.b	$3B(a0)
0001BB0A 6600                       		bne.s	loc_12520
0001BB0C 117C 0001 003B             		move.b	#1,$3B(a0)
0001BB12 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001BB18 4428 003A                  		neg.b	$3A(a0)
0001BB1C 6000                       		bra.s	loc_12534
0001BB1E                            ; ===========================================================================
0001BB1E                            
0001BB1E                            loc_12520:
0001BB1E 3028 0008                  		move.w	8(a0),d0
0001BB22 B068 0034                  		cmp.w	$34(a0),d0
0001BB26 6600                       		bne.s	loc_1256A
0001BB28 3028 000C                  		move.w	$C(a0),d0
0001BB2C B068 0036                  		cmp.w	$36(a0),d0
0001BB30 6600                       		bne.s	loc_1256A
0001BB32                            
0001BB32                            loc_12534:
0001BB32 7200                       		moveq	#0,d1
0001BB34 1228 0038                  		move.b	$38(a0),d1
0001BB38 D228 003A                  		add.b	$3A(a0),d1
0001BB3C B228 0039                  		cmp.b	$39(a0),d1
0001BB40 6500                       		bcs.s	loc_12552
0001BB42 1001                       		move.b	d1,d0
0001BB44 7200                       		moveq	#0,d1
0001BB46 4A00                       		tst.b	d0
0001BB48 6A00                       		bpl.s	loc_12552
0001BB4A 1228 0039                  		move.b	$39(a0),d1
0001BB4E 5901                       		subq.b	#4,d1
0001BB50                            
0001BB50                            loc_12552:
0001BB50 1141 0038                  		move.b	d1,$38(a0)
0001BB54 2268 003C                  		movea.l	$3C(a0),a1
0001BB58 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001BB5E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001BB64 4EB9 0000 0000             		jsr	Obj63_ChangeDir
0001BB6A                            
0001BB6A                            loc_1256A:
0001BB6A 4EBA A06A                  		jsr	SpeedToPos
0001BB6E 4E75                       		rts	
0001BB70                            ; End of function sub_12502
0001BB70                            
0001BB70                            
0001BB70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB70                            
0001BB70                            
0001BB70                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001BB70 7000                       		moveq	#0,d0
0001BB72 343C FF00                  		move.w	#-$100,d2
0001BB76 3028 0008                  		move.w	8(a0),d0
0001BB7A 9068 0034                  		sub.w	$34(a0),d0
0001BB7E 6400                       		bcc.s	loc_12584
0001BB80 4440                       		neg.w	d0
0001BB82 4442                       		neg.w	d2
0001BB84                            
0001BB84                            loc_12584:
0001BB84 7200                       		moveq	#0,d1
0001BB86 363C FF00                  		move.w	#-$100,d3
0001BB8A 3228 000C                  		move.w	$C(a0),d1
0001BB8E 9268 0036                  		sub.w	$36(a0),d1
0001BB92 6400                       		bcc.s	loc_12598
0001BB94 4441                       		neg.w	d1
0001BB96 4443                       		neg.w	d3
0001BB98                            
0001BB98                            loc_12598:
0001BB98 B240                       		cmp.w	d0,d1
0001BB9A 6500                       		bcs.s	loc_125C2
0001BB9C 3028 0008                  		move.w	8(a0),d0
0001BBA0 9068 0034                  		sub.w	$34(a0),d0
0001BBA4 6700                       		beq.s	loc_125AE
0001BBA6 48C0                       		ext.l	d0
0001BBA8 E180                       		asl.l	#8,d0
0001BBAA 81C1                       		divs.w	d1,d0
0001BBAC 4440                       		neg.w	d0
0001BBAE                            
0001BBAE                            loc_125AE:
0001BBAE 3140 0010                  		move.w	d0,x_vel(a0)
0001BBB2 3143 0012                  		move.w	d3,y_vel(a0)
0001BBB6 4840                       		swap	d0
0001BBB8 3140 000A                  		move.w	d0,$A(a0)
0001BBBC 4268 000E                  		clr.w	$E(a0)
0001BBC0 4E75                       		rts	
0001BBC2                            ; ===========================================================================
0001BBC2                            
0001BBC2                            loc_125C2:				; XREF: Obj63_ChangeDir
0001BBC2 3228 000C                  		move.w	$C(a0),d1
0001BBC6 9268 0036                  		sub.w	$36(a0),d1
0001BBCA 6700                       		beq.s	loc_125D4
0001BBCC 48C1                       		ext.l	d1
0001BBCE E181                       		asl.l	#8,d1
0001BBD0 83C0                       		divs.w	d0,d1
0001BBD2 4441                       		neg.w	d1
0001BBD4                            
0001BBD4                            loc_125D4:
0001BBD4 3141 0012                  		move.w	d1,y_vel(a0)
0001BBD8 3142 0010                  		move.w	d2,x_vel(a0)
0001BBDC 4841                       		swap	d1
0001BBDE 3141 000E                  		move.w	d1,$E(a0)
0001BBE2 4268 000A                  		clr.w	$A(a0)
0001BBE6 4E75                       		rts	
0001BBE8                            ; End of function Obj63_ChangeDir
0001BBE8                            
0001BBE8                            ; ===========================================================================
0001BBE8 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001BBEA 0000                       		dc.w word_12610-Obj63_Data
0001BBEC 0000                       		dc.w word_12628-Obj63_Data
0001BBEE 0000                       		dc.w word_1263C-Obj63_Data
0001BBF0 0000                       		dc.w word_12650-Obj63_Data
0001BBF2 0000                       		dc.w word_12668-Obj63_Data
0001BBF4 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001BC04 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001BC10 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001BC20 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001BC28 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001BC3C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001BC50 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001BC68 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001BC7C                            
0001BC7C                            ; ---------------------------------------------------------------------------
0001BC7C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001BC7C                            ; ---------------------------------------------------------------------------
0001BC7C                            Map_obj63:
0001BC7C                            	include "_maps\obj63.asm"
0001BC7C                            ; ---------------------------------------------------------------------------
0001BC7C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001BC7C                            ; ---------------------------------------------------------------------------
0001BC7C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001BC80 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001BC84 0000                       		dc.w byte_1269E-Map_obj63
0001BC86 01                         byte_12686:	dc.b 1
0001BC87 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001BC8C 01                         byte_1268C:	dc.b 1
0001BC8D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001BC92 01                         byte_12692:	dc.b 1
0001BC93 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001BC98 01                         byte_12698:	dc.b 1
0001BC99 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001BC9E 01                         byte_1269E:	dc.b 1
0001BC9F F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001BCA4                            		even
0001BCA4                            		even
0001BCA4                            
0001BCA4                            ; ===========================================================================
0001BCA4                            ; ---------------------------------------------------------------------------
0001BCA4                            ; Object 64 - bubbles (LZ)
0001BCA4                            ; ---------------------------------------------------------------------------
0001BCA4                            
0001BCA4                            Obj64:					; XREF: Obj_Index
0001BCA4 7000                       		moveq	#0,d0
0001BCA6 1028 0024                  		move.b	routine(a0),d0
0001BCAA 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001BCAE 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001BCB2                            ; ===========================================================================
0001BCB2 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001BCB4 0000                       		dc.w Obj64_Animate-Obj64_Index
0001BCB6 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001BCB8 0000                       		dc.w Obj64_Display2-Obj64_Index
0001BCBA 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001BCBC 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001BCBE                            ; ===========================================================================
0001BCBE                            
0001BCBE                            Obj64_Main:				; XREF: Obj64_Index
0001BCBE 5428 0024                  		addq.b	#2,routine(a0)
0001BCC2 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001BCCA 317C 8348 0002             		move.w	#$8348,2(a0)
0001BCD0 117C 0084 0001             		move.b	#$84,1(a0)
0001BCD6 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001BCDC 317C 0080 0018             		move.w	#$80,priority(a0)
0001BCE2 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001BCE6 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001BCE8 5028 0024                  		addq.b	#8,routine(a0)
0001BCEC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001BCF0 1140 0032                  		move.b	d0,$32(a0)
0001BCF4 1140 0033                  		move.b	d0,$33(a0)
0001BCF8 117C 0006 001C             		move.b	#6,anim(a0)
0001BCFE 6000 0000                  		bra.w	Obj64_BblMaker
0001BD02                            ; ===========================================================================
0001BD02                            
0001BD02                            Obj64_Bubble:				; XREF: Obj64_Main
0001BD02 1140 001C                  		move.b	d0,anim(a0)
0001BD06 3168 0008 0030             		move.w	8(a0),$30(a0)
0001BD0C 317C FF78 0012             		move.w	#-$88,y_vel(a0)	; float	bubble upwards
0001BD12 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BD18 1140 0026                  		move.b	d0,$26(a0)
0001BD1C                            
0001BD1C                            Obj64_Animate:				; XREF: Obj64_Index
0001BD1C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BD22 4EB9 0001 2618             		jsr	AnimateSprite
0001BD28 0C28 0006 001A             		cmpi.b	#6,mapping_frame(a0)
0001BD2E 6600                       		bne.s	Obj64_ChkWater
0001BD30 117C 0001 002E             		move.b	#1,move_lock(a0)
0001BD36                            
0001BD36                            Obj64_ChkWater:				; XREF: Obj64_Index
0001BD36 3038 F646                  		move.w	($FFFFF646).w,d0
0001BD3A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001BD3E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001BD40                            
0001BD40                            Obj64_Burst:				; XREF: Obj64_Wobble
0001BD40 117C 0006 0024             		move.b	#6,routine(a0)
0001BD46 5628 001C                  		addq.b	#3,anim(a0)	; run "bursting" animation
0001BD4A 6000 0000                  		bra.w	Obj64_Display2
0001BD4E                            ; ===========================================================================
0001BD4E                            
0001BD4E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001BD4E 1028 0026                  		move.b	$26(a0),d0
0001BD52 5228 0026                  		addq.b	#1,$26(a0)
0001BD56 0240 007F                  		andi.w	#$7F,d0
0001BD5A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001BD60 1031 0000                  		move.b	(a1,d0.w),d0
0001BD64 4880                       		ext.w	d0
0001BD66 D068 0030                  		add.w	$30(a0),d0
0001BD6A 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001BD6E 4A28 002E                  		tst.b	move_lock(a0)
0001BD72 6700                       		beq.s	Obj64_Display
0001BD74 4EB9 0000 0000             		jsr	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001BD7A 6700                       		beq.s	Obj64_Display	; if not, branch
0001BD7C                            
0001BD7C 4EB9 0000 0000             		jsr	ResumeMusic	; cancel countdown music
0001BD82 303C 00AD                  		move.w	#$AD,d0
0001BD86 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001BD8C 43F8 D000                  		lea	($FFFFD000).w,a1
0001BD90 4269 0010                  		clr.w	x_vel(a1)
0001BD94 4269 0012                  		clr.w	y_vel(a1)
0001BD98 4269 0020                  		clr.w	inertia(a1)
0001BD9C 137C 0015 001C             		move.b	#$15,anim(a1)
0001BDA2 337C 0023 003E             		move.w	#$23,parent(a1)
0001BDA8 137C 0000 003C             		move.b	#0,$3C(a1)
0001BDAE 08A9 0005 0022             		bclr	#5,status(a1)
0001BDB4 08A9 0004 0022             		bclr	#4,status(a1)
0001BDBA 0829 0002 0022             		btst	#2,status(a1)
0001BDC0 6700 FF7E                  		beq.w	Obj64_Burst
0001BDC4 08A9 0002 0022             		bclr	#2,status(a1)
0001BDCA 137C 0013 0016             		move.b	#$13,$16(a1)
0001BDD0 137C 0009 0017             		move.b	#9,$17(a1)
0001BDD6 5B69 000C                  		subq.w	#5,$C(a1)
0001BDDA 6000 FF64                  		bra.w	Obj64_Burst
0001BDDE                            ; ===========================================================================
0001BDDE                            
0001BDDE                            Obj64_Display:				; XREF: Obj64_Wobble
0001BDDE 4EBA 9DF6                  		jsr	SpeedToPos
0001BDE2 4A28 0001                  		tst.b	1(a0)
0001BDE6 6A00                       		bpl.s	Obj64_Delete
0001BDE8 4EFA 9E52                  		jmp	DisplaySprite
0001BDEC                            ; ===========================================================================
0001BDEC                            
0001BDEC                            Obj64_Delete:
0001BDEC 4EFA 9E02                  		jmp	DeleteObject
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            Obj64_Display2:				; XREF: Obj64_Index
0001BDF0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BDF6 4EB9 0001 2618             		jsr	AnimateSprite
0001BDFC 4A28 0001                  		tst.b	1(a0)
0001BE00 6A00                       		bpl.s	Obj64_Delete2
0001BE02 4EFA 9E38                  		jmp	DisplaySprite
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            Obj64_Delete2:
0001BE06 4EFA 9DE8                  		jmp	DeleteObject
0001BE0A                            ; ===========================================================================
0001BE0A                            
0001BE0A                            Obj64_Delete3:				; XREF: Obj64_Index
0001BE0A 6000 9DE4                  		bra.w	DeleteObject
0001BE0E                            ; ===========================================================================
0001BE0E                            
0001BE0E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001BE0E 4A68 0036                  		tst.w	$36(a0)
0001BE12 6600                       		bne.s	loc_12874
0001BE14 3038 F646                  		move.w	($FFFFF646).w,d0
0001BE18 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001BE1C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001BE20 4A28 0001                  		tst.b	1(a0)
0001BE24 6A00 0000                  		bpl.w	Obj64_ChkDel
0001BE28 5368 0038                  		subq.w	#1,$38(a0)
0001BE2C 6A00 0000                  		bpl.w	loc_12914
0001BE30 317C 0001 0036             		move.w	#1,$36(a0)
0001BE36                            
0001BE36                            loc_1283A:
0001BE36 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BE3C 3200                       		move.w	d0,d1
0001BE3E 0240 0007                  		andi.w	#7,d0
0001BE42 0C40 0006                  		cmpi.w	#6,d0
0001BE46 64EE                       		bcc.s	loc_1283A
0001BE48                            
0001BE48 1140 0034                  		move.b	d0,$34(a0)
0001BE4C 0241 000C                  		andi.w	#$C,d1
0001BE50 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001BE56 D2C1                       		adda.w	d1,a1
0001BE58 2149 003C                  		move.l	a1,$3C(a0)
0001BE5C 5328 0032                  		subq.b	#1,$32(a0)
0001BE60 6A00                       		bpl.s	loc_12872
0001BE62 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001BE68 08E8 0007 0036             		bset	#7,$36(a0)
0001BE6E                            
0001BE6E                            loc_12872:
0001BE6E 6000                       		bra.s	loc_1287C
0001BE70                            ; ===========================================================================
0001BE70                            
0001BE70                            loc_12874:				; XREF: Obj64_BblMaker
0001BE70 5368 0038                  		subq.w	#1,$38(a0)
0001BE74 6A00 0000                  		bpl.w	loc_12914
0001BE78                            
0001BE78                            loc_1287C:
0001BE78 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BE7E 0240 001F                  		andi.w	#$1F,d0
0001BE82 3140 0038                  		move.w	d0,$38(a0)
0001BE86 4EBA A880                  		jsr	SingleObjLoad
0001BE8A 6600                       		bne.s	loc_128F8
0001BE8C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001BE90 3368 0008 0008             		move.w	8(a0),8(a1)
0001BE96 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BE9C 0240 000F                  		andi.w	#$F,d0
0001BEA0 5140                       		subq.w	#8,d0
0001BEA2 D169 0008                  		add.w	d0,8(a1)
0001BEA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BEAC 7000                       		moveq	#0,d0
0001BEAE 1028 0034                  		move.b	$34(a0),d0
0001BEB2 2468 003C                  		movea.l	$3C(a0),a2
0001BEB6 1372 0000 0028             		move.b	(a2,d0.w),subtype(a1)
0001BEBC 0828 0007 0036             		btst	#7,$36(a0)
0001BEC2 6700                       		beq.s	loc_128F8
0001BEC4 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BECA 0240 0003                  		andi.w	#3,d0
0001BECE 6600                       		bne.s	loc_128E4
0001BED0 08E8 0006 0036             		bset	#6,$36(a0)
0001BED6 6600                       		bne.s	loc_128F8
0001BED8 137C 0002 0028             		move.b	#2,subtype(a1)
0001BEDE                            
0001BEDE                            loc_128E4:
0001BEDE 4A28 0034                  		tst.b	$34(a0)
0001BEE2 6600                       		bne.s	loc_128F8
0001BEE4 08E8 0006 0036             		bset	#6,$36(a0)
0001BEEA 6600                       		bne.s	loc_128F8
0001BEEC 137C 0002 0028             		move.b	#2,subtype(a1)
0001BEF2                            
0001BEF2                            loc_128F8:
0001BEF2 5328 0034                  		subq.b	#1,$34(a0)
0001BEF6 6A00                       		bpl.s	loc_12914
0001BEF8 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001BEFE 0240 007F                  		andi.w	#$7F,d0
0001BF02 0640 0080                  		addi.w	#$80,d0
0001BF06 D168 0038                  		add.w	d0,$38(a0)
0001BF0A 4268 0036                  		clr.w	$36(a0)
0001BF0E                            
0001BF0E                            loc_12914:
0001BF0E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001BF14 4EB9 0001 2618             		jsr	AnimateSprite
0001BF1A                            
0001BF1A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001BF1A 3028 0008                  		move.w	8(a0),d0
0001BF1E 0240 FF80                  		andi.w	#$FF80,d0
0001BF22 3238 F700                  		move.w	($FFFFF700).w,d1
0001BF26 0441 0080                  		subi.w	#$80,d1
0001BF2A 0241 FF80                  		andi.w	#$FF80,d1
0001BF2E 9041                       		sub.w	d1,d0
0001BF30 0C40 0280                  		cmpi.w	#$280,d0
0001BF34 6200 9CBA                  		bhi.w	DeleteObject
0001BF38 3038 F646                  		move.w	($FFFFF646).w,d0
0001BF3C B068 000C                  		cmp.w	$C(a0),d0
0001BF40 6500 9CFA                  		bcs.w	DisplaySprite
0001BF44 4E75                       		rts	
0001BF46                            ; ===========================================================================
0001BF46                            ; bubble production sequence
0001BF46                            
0001BF46                            ; 0 = small bubble, 1 =	large bubble
0001BF46                            
0001BF46 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001BF58                            
0001BF58                            ; ===========================================================================
0001BF58                            
0001BF58                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001BF58 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001BF5C 6B00                       		bmi.s	loc_12998
0001BF5E 43F8 D000                  		lea	($FFFFD000).w,a1
0001BF62 3029 0008                  		move.w	8(a1),d0
0001BF66 3228 0008                  		move.w	8(a0),d1
0001BF6A 0441 0010                  		subi.w	#$10,d1
0001BF6E B240                       		cmp.w	d0,d1
0001BF70 6400                       		bcc.s	loc_12998
0001BF72 0641 0020                  		addi.w	#$20,d1
0001BF76 B240                       		cmp.w	d0,d1
0001BF78 6500                       		bcs.s	loc_12998
0001BF7A 3029 000C                  		move.w	$C(a1),d0
0001BF7E 3228 000C                  		move.w	$C(a0),d1
0001BF82 B240                       		cmp.w	d0,d1
0001BF84 6400                       		bcc.s	loc_12998
0001BF86 0641 0010                  		addi.w	#$10,d1
0001BF8A B240                       		cmp.w	d0,d1
0001BF8C 6500                       		bcs.s	loc_12998
0001BF8E 7001                       		moveq	#1,d0
0001BF90 4E75                       		rts	
0001BF92                            ; ===========================================================================
0001BF92                            
0001BF92                            loc_12998:
0001BF92 7000                       		moveq	#0,d0
0001BF94 4E75                       		rts	
0001BF96                            ; ===========================================================================
0001BF96                            Ani_obj64:
0001BF96                            	include "_anim\obj64.asm"
0001BF96                            ; ---------------------------------------------------------------------------
0001BF96                            ; Animation script - bubbles (LZ)
0001BF96                            ; ---------------------------------------------------------------------------
0001BF96 0000                       		dc.w byte_129AA-Ani_obj64
0001BF98 0000                       		dc.w byte_129B0-Ani_obj64
0001BF9A 0000                       		dc.w byte_129B6-Ani_obj64
0001BF9C 0000                       		dc.w byte_129BE-Ani_obj64
0001BF9E 0000                       		dc.w byte_129BE-Ani_obj64
0001BFA0 0000                       		dc.w byte_129C0-Ani_obj64
0001BFA2 0000                       		dc.w byte_129C6-Ani_obj64
0001BFA4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001BFAA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001BFB0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001BFB8 04FC                       byte_129BE:	dc.b 4,	$FC
0001BFBA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001BFC0 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001BFC6 00                         		even
0001BFC6 00                         		even
0001BFC6                            
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            ; Sprite mappings - bubbles (LZ)
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            Map_obj64:
0001BFC6                            	include "_maps\obj64.asm"
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            ; Sprite mappings - bubbles (LZ)
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001BFCA 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001BFCE 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001BFD2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001BFD6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001BFDA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001BFDE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001BFE2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001BFE6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001BFEA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001BFEE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001BFF2 0000                       		dc.w byte_12A9C-Map_obj64
0001BFF4 01                         byte_129FA:	dc.b 1
0001BFF5 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001BFFA 01                         byte_12A00:	dc.b 1
0001BFFB FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001C000 01                         byte_12A06:	dc.b 1
0001C001 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001C006 01                         byte_12A0C:	dc.b 1
0001C007 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001C00C 01                         byte_12A12:	dc.b 1
0001C00D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001C012 01                         byte_12A18:	dc.b 1
0001C013 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001C018 01                         byte_12A1E:	dc.b 1
0001C019 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001C01E 04                         byte_12A24:	dc.b 4
0001C01F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001C024 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001C029 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001C02E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001C033 04                         byte_12A39:	dc.b 4
0001C034 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001C039 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001C03E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001C043 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001C048 01                         byte_12A4E:	dc.b 1
0001C049 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001C04E 01                         byte_12A54:	dc.b 1
0001C04F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001C054 01                         byte_12A5A:	dc.b 1
0001C055 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001C05A 01                         byte_12A60:	dc.b 1
0001C05B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001C060 01                         byte_12A66:	dc.b 1
0001C061 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001C066 01                         byte_12A6C:	dc.b 1
0001C067 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001C06C 01                         byte_12A72:	dc.b 1
0001C06D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001C072 01                         byte_12A78:	dc.b 1
0001C073 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001C078 01                         byte_12A7E:	dc.b 1
0001C079 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001C07E 01                         byte_12A84:	dc.b 1
0001C07F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001C084 01                         byte_12A8A:	dc.b 1
0001C085 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001C08A 01                         byte_12A90:	dc.b 1
0001C08B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001C090 01                         byte_12A96:	dc.b 1
0001C091 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001C096 00                         byte_12A9C:	dc.b 0
0001C098 00                         		even
0001C098 00                         		even
0001C098                            
0001C098                            ; ===========================================================================
0001C098                            ; ---------------------------------------------------------------------------
0001C098                            ; Object 65 - waterfalls (LZ)
0001C098                            ; ---------------------------------------------------------------------------
0001C098                            
0001C098                            Obj65:					; XREF: Obj_Index
0001C098 7000                       		moveq	#0,d0
0001C09A 1028 0024                  		move.b	routine(a0),d0
0001C09E 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001C0A2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001C0A6                            ; ===========================================================================
0001C0A6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001C0A8 0000                       		dc.w Obj65_Animate-Obj65_Index
0001C0AA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001C0AC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001C0AE 0000                       		dc.w loc_12B36-Obj65_Index
0001C0B0                            ; ===========================================================================
0001C0B0                            
0001C0B0                            Obj65_Main:				; XREF: Obj65_Index
0001C0B0 5828 0024                  		addq.b	#4,routine(a0)
0001C0B4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001C0BC 317C 4259 0002             		move.w	#$4259,2(a0)
0001C0C2 0028 0004 0001             		ori.b	#4,1(a0)
0001C0C8 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001C0CE 317C 0080 0018             		move.w	#$80,priority(a0)
0001C0D4 1028 0028                  		move.b	subtype(a0),d0	; get object type
0001C0D8 6A00                       		bpl.s	loc_12AE6
0001C0DA 08E8 0007 0002             		bset	#7,2(a0)
0001C0E0                            
0001C0E0                            loc_12AE6:
0001C0E0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001C0E4 1140 001A                  		move.b	d0,mapping_frame(a0)	; set frame number
0001C0E8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001C0EC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001C0EE 4228 0018                  		clr.b	priority(a0)
0001C0F2 5528 0024                  		subq.b	#2,routine(a0)
0001C0F6 0828 0006 0028             		btst	#6,subtype(a0)	; is object type $4x ?
0001C0FC 6700                       		beq.s	loc_12B0A	; if not, branch
0001C0FE 117C 0006 0024             		move.b	#6,routine(a0)
0001C104                            
0001C104                            loc_12B0A:
0001C104 0828 0005 0028             		btst	#5,subtype(a0)	; is object type $Ax ?
0001C10A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001C10C 117C 0008 0024             		move.b	#8,routine(a0)
0001C112                            
0001C112                            Obj65_Animate:				; XREF: Obj65_Index
0001C112 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001C118 4EB9 0001 2618             		jsr	AnimateSprite
0001C11E                            
0001C11E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001C11E 6000 C70E                  		bra.w	MarkObjGone
0001C122                            ; ===========================================================================
0001C122                            
0001C122                            Obj65_FixHeight:			; XREF: Obj65_Index
0001C122 3038 F646                  		move.w	($FFFFF646).w,d0
0001C126 0440 0010                  		subi.w	#$10,d0
0001C12A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001C12E 60E2                       		bra.s	Obj65_Animate
0001C130                            ; ===========================================================================
0001C130                            
0001C130                            loc_12B36:				; XREF: Obj65_Index
0001C130 08A8 0007 0002             		bclr	#7,2(a0)
0001C136 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001C13C 6600                       		bne.s	Obj65_Animate2
0001C13E 08E8 0007 0002             		bset	#7,2(a0)
0001C144                            
0001C144                            Obj65_Animate2:
0001C144 60CC                       		bra.s	Obj65_Animate
0001C146                            ; ===========================================================================
0001C146                            Ani_obj65:
0001C146                            	include "_anim\obj65.asm"
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            ; Animation script - waterfall (LZ)
0001C146                            ; ---------------------------------------------------------------------------
0001C146 0000                       		dc.w byte_12B4E-Ani_obj65
0001C148 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001C14E 00                         		even
0001C14E 00                         		even
0001C14E                            
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            ; Sprite mappings - waterfalls (LZ)
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            Map_obj65:
0001C14E                            	include "_maps\obj65.asm"
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E                            ; Sprite mappings - waterfalls (LZ)
0001C14E                            ; ---------------------------------------------------------------------------
0001C14E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001C152 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001C156 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001C15A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001C15E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001C162 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001C166 01                         byte_12B6C:	dc.b 1
0001C167 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001C16C 02                         byte_12B72:	dc.b 2
0001C16D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001C172 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001C177 02                         byte_12B7D:	dc.b 2
0001C178 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C17D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C182 01                         byte_12B88:	dc.b 1
0001C183 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001C188 02                         byte_12B8E:	dc.b 2
0001C189 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001C18E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001C193 01                         byte_12B99:	dc.b 1
0001C194 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001C199 01                         byte_12B9F:	dc.b 1
0001C19A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001C19F 01                         byte_12BA5:	dc.b 1
0001C1A0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001C1A5 02                         byte_12BAB:	dc.b 2
0001C1A6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001C1AB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001C1B0 02                         byte_12BB6:	dc.b 2
0001C1B1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001C1B6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001C1BB 02                         byte_12BC1:	dc.b 2
0001C1BC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001C1C1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001C1C6 02                         byte_12BCC:	dc.b 2
0001C1C7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001C1CC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001C1D2 00                         		even
0001C1D2 00                         		even
0001C1D2                            
0001C1D2                            Spindash_dust:
0001C1D2                            Sprite_1DD20:				; DATA XREF: ROM:0001600Co
0001C1D2 7000                       		moveq	#0,d0
0001C1D4 1028 0024                  		move.b	routine(a0),d0
0001C1D8 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001C1DC 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001C1E0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C1E0 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBAo h+6DBCo ...
0001C1E2 0000                       		dc loc_1DD90-off_1DD2E; 1
0001C1E4 0000                       		dc loc_1DE46-off_1DD2E; 2
0001C1E6 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001C1E8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C1E8                            
0001C1E8                            loc_1DD36:				; DATA XREF: h+6DBAo
0001C1E8 5428 0024                  		addq.b	#2,routine(a0)
0001C1EC 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
0001C1F4 0028 0004 0001             		or.b	#4,1(a0)
0001C1FA 317C 0080 0018             		move.w	#$80,priority(a0)
0001C200 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001C206 317C 07A0 0002             		move	#$7A0,2(a0)
0001C20C 317C D000 003E             		move	#-$3000,parent(a0)
0001C212 317C F400 003C             		move	#$F400,$3C(a0)
0001C218                            ;		cmp	#-$2E40,a0
0001C218                            ;		beq.s	loc_1DD8C
0001C218                            ;		move.b	#1,$34(a0)
0001C218                            ;		cmp	#2,($FFFFFF70).w
0001C218                            ;		beq.s	loc_1DD8C
0001C218                            ;		move	#$48C,2(a0)
0001C218                            ;		move	#-$4FC0,parent(a0)
0001C218                            ;		move	#-$6E80,$3C(a0)
0001C218                            
0001C218                            ;loc_1DD8C:				; CODE XREF: h+6DF6j h+6E04j
0001C218                            ;		jsr	sub_16D6E
0001C218                            
0001C218                            loc_1DD90:				; DATA XREF: h+6DBAo
0001C218 3468 003E                  		movea.w	parent(a0),a2
0001C21C 7000                       		moveq	#0,d0
0001C21E 1028 001C                  		move.b	anim(a0),d0
0001C222 D040                       		add	d0,d0
0001C224 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
0001C228 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
0001C22C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C22C 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30o h+6E32o ...
0001C22E 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001C230 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001C232 0000                       		dc loc_1DE20-off_1DDA4; 3
0001C234                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C234                            
0001C234                            loc_1DDAC:				; DATA XREF: h+6E30o
0001C234 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
0001C23A 4A28 001D                  		tst.b	next_anim(a0)
0001C23E 6600                       		bne.s	loc_1DE28
0001C240 316A 0008 0008             		move	8(a2),8(a0)
0001C246 117C 0000 0022             		move.b	#0,status(a0)
0001C24C 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C252 6000                       		bra.s	loc_1DE28
0001C254                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C254                            
0001C254                            loc_1DDCC:				; DATA XREF: h+6E30o
0001C254                            ;		cmp.b	#$C,subtype(a2)
0001C254                            ;		bcs.s	loc_1DE3E
0001C254 0C2A 0004 0024             		cmp.b	#4,routine(a2)
0001C25A 6400                       		bcc.s	loc_1DE3E
0001C25C 4A2A 0039                  		tst.b	$39(a2)
0001C260 6700                       		beq.s	loc_1DE3E
0001C262 316A 0008 0008             		move	8(a2),8(a0)
0001C268 316A 000C 000C             		move	$C(a2),$C(a0)
0001C26E 116A 0022 0022             		move.b	status(a2),status(a0)
0001C274 0228 0001 0022             		and.b	#1,status(a0)
0001C27A                            ;		tst.b	$34(a0)
0001C27A                            ;		beq.s	loc_1DE06
0001C27A                            ;		sub	#4,$C(a0)
0001C27A                            
0001C27A                            ;loc_1DE06:				; CODE XREF: h+6E8Aj
0001C27A 4A28 001D                  		tst.b	next_anim(a0)
0001C27E 6600                       		bne.s	loc_1DE28
0001C280 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001C286 4A6A 0002                  		tst	2(a2)
0001C28A 6A00                       		bpl.s	loc_1DE28
0001C28C 0068 8000 0002             		or	#-$8000,2(a0)
0001C292                            
0001C292                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C292                            
0001C292                            loc_1DE20:				; DATA XREF: h+6E30o
0001C292                            loc_1DE28:				; CODE XREF: h+6E42j h+6E56j ...
0001C292 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001C298 4EB9 0001 2618             		jsr	AnimateSprite
0001C29E 4EB9 0000 0000             		jsr	loc_1DEE4
0001C2A4 4EFA 9996                  		jmp	DisplaySprite
0001C2A8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2A8                            
0001C2A8                            loc_1DE3E:				; CODE XREF: h+6E5Ej h+6E66j ...
0001C2A8 117C 0000 001C             		move.b	#0,anim(a0)
0001C2AE 4E75                       		rts	
0001C2B0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2B0                            
0001C2B0                            loc_1DE46:				; DATA XREF: h+6DBAo
0001C2B0 6000 993E                  		bra.w	DeleteObject
0001C2B4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2B4                            
0001C2B4                            
0001C2B4                            
0001C2B4                            loc_1DE4A:
0001C2B4 3468 003E                  	movea.w	parent(a0),a2
0001C2B8 7210                       	moveq	#$10,d1
0001C2BA 0C2A 000D 001C             	cmp.b	#$D,anim(a2)
0001C2C0 6700                       	beq.s	loc_1DE64
0001C2C2 7206                       	moveq	#$6,d1
0001C2C4 0C2A 0003 0021             	cmp.b	#$3,collision_property(a2)
0001C2CA 6700                       	beq.s	loc_1DE64
0001C2CC 117C 0002 0024             	move.b	#2,routine(a0)
0001C2D2 117C 0000 0032             	move.b	#0,$32(a0)
0001C2D8 4E75                       	rts
0001C2DA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C2DA                            
0001C2DA                            loc_1DE64:				; CODE XREF: h+6EE0j
0001C2DA 5328 0032                  		subq.b	#1,$32(a0)
0001C2DE 6A00                       		bpl.s	loc_1DEE0
0001C2E0 117C 0003 0032             		move.b	#3,$32(a0)
0001C2E6 4EBA A420                  		jsr	SingleObjLoad
0001C2EA 6600                       		bne.s	loc_1DEE0
0001C2EC 1290                       		move.b	0(a0),0(a1)
0001C2EE 336A 0008 0008             		move	8(a2),8(a1)
0001C2F4 336A 000C 000C             		move	$C(a2),$C(a1)
0001C2FA                            ;		tst.b	$34(a0)
0001C2FA                            ;		beq.s	loc_1DE9A
0001C2FA                            ;		sub	#4,d1
0001C2FA                            
0001C2FA                            ;loc_1DE9A:				; CODE XREF: h+6F1Ej
0001C2FA D369 000C                  		add	d1,$C(a1)
0001C2FE 137C 0000 0022             		move.b	#0,status(a1)
0001C304 137C 0003 001C             		move.b	#3,anim(a1)
0001C30A 5429 0024                  		addq.b	#2,routine(a1)
0001C30E 2368 0004 0004             		move.l	4(a0),4(a1)
0001C314 1368 0001 0001             		move.b	1(a0),1(a1)
0001C31A 337C 0080 0018             		move.w	#$80,priority(a1)
0001C320 137C 0004 0023             		move.b	#4,width_pixels(a1)
0001C326 3368 0002 0002             		move	2(a0),2(a1)
0001C32C 3368 003E 003E             		move	parent(a0),parent(a1)
0001C332 0269 7FFF 0002             		and	#$7FFF,2(a1)
0001C338 4A6A 0002                  		tst	2(a2)
0001C33C 6A00                       		bpl.s	loc_1DEE0
0001C33E 0069 8000 0002             		or	#-$8000,2(a1)
0001C344                            
0001C344                            loc_1DEE0:				; CODE XREF: h+6EF4j h+6F00j ...
0001C344 6100                       		bsr.s	loc_1DEE4
0001C346 4E75                       		rts	
0001C348                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C348                            
0001C348                            loc_1DEE4:				; CODE XREF: h+6EC0p h+6F6Cp
0001C348 7000                       		moveq	#0,d0
0001C34A 1028 001A                  		move.b	mapping_frame(a0),d0
0001C34E B028 0030                  		cmp.b	$30(a0),d0
0001C352 6700 0000                  		beq.w	locret_1DF36
0001C356                            ;		tst.w	($FFFFD130).w ; has title card sequence finished?
0001C356                            ;		bne.w	locret_1DF36	; if not, branch		
0001C356 1140 0030                  		move.b	d0,$30(a0)
0001C35A 45F9 0000 0000             		lea	(off_1E074).l,a2
0001C360 D040                       		add	d0,d0
0001C362 D4F2 0000                  		add	(a2,d0.w),a2
0001C366 3A1A                       		move	(a2)+,d5
0001C368 5345                       		subq	#1,d5
0001C36A 6B00 0000                  		bmi.w	locret_1DF36
0001C36E 3828 003C                  		move $3C(a0),d4
0001C372                            
0001C372                            loc_1DF0A:				; CODE XREF: h+6FBEj
0001C372 7200                       		moveq	#0,d1
0001C374 321A                       		move	(a2)+,d1
0001C376 3601                       		move	d1,d3
0001C378 E04B                       		lsr.w	#8,d3
0001C37A 0243 00F0                  		and	#$F0,d3	; 'ð'
0001C37E 0643 0010                  		add	#$10,d3
0001C382 0241 0FFF                  		and	#$FFF,d1
0001C386 EB89                       		lsl.l	#5,d1
0001C388 0681 0000 0000             		add.l	#Art_Dust,d1
0001C38E 3404                       		move	d4,d2
0001C390 D843                       		add	d3,d4
0001C392 D843                       		add	d3,d4
0001C394 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001C39A 51CD FFD6                  		dbf	d5,loc_1DF0A
0001C39E                            
0001C39E                            locret_1DF36:				; CODE XREF: h+6F7Aj h+6F90j
0001C39E 4E75                       		rts	
0001C3A0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001C3A0 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4o h+6FC4o ...
0001C3A2 0000                       		dc byte_1DF43-off_1DF38; 1
0001C3A4 0000                       		dc byte_1DF4F-off_1DF38; 2
0001C3A6 0000                       		dc byte_1DF58-off_1DF38; 3
0001C3A8 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4o
0001C3AB 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4o
0001C3B7 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4o
0001C3C0 0311 1213 13FC             byte_1DF58:	dc.b   3,$11,$12,$13,$13,$FC; 0	; DATA XREF: h+6FC4o
0001C3C6                            ; -------------------------------------------------------------------------------
0001C3C6                            ; Unknown Sprite Mappings
0001C3C6                            ; -------------------------------------------------------------------------------
0001C3C6                            MapUnc_1DF5E:
0001C3C6 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001C3C8 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001C3CA 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001C3CC 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001C3CE 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001C3D0 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001C3D2 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001C3D4 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001C3D6 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001C3D8 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
0001C3DA 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001C3DC 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001C3DE 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001C3E0 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001C3E2 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001C3E4 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001C3E6 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
0001C3E8 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
0001C3EA 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001C3EC 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001C3EE 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001C3F0 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001C3F2 00                         word_1DF8A:	dc.b 0
0001C3F3 01                         word_1DF8C:	dc.b 1
0001C3F4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C3F9 01                         word_1DF96:	dc.b 1
0001C3FA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C3FF 01                         word_1DFA0:	dc.b 1
0001C400 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C405 01                         word_1DFAA:	dc.b 1
0001C406 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C40B 01                         word_1DFB4:	dc.b 1
0001C40C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C411 01                         word_1DFBE:	dc.b 1
0001C412 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001C417 01                         word_1DFC8:	dc.b 1
0001C418 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C41D 01                         word_1DFD2:	dc.b 1
0001C41E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C423 01                         word_1DFDC:	dc.b 1
0001C424 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001C429 01                         word_1DFE6:	dc.b 1
0001C42A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C42F 01                         word_1DFF0:	dc.b 1
0001C430 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C435 01                         word_1DFFA:	dc.b 1
0001C436 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001C43B 02                         word_1E004:	dc.b 2
0001C43C F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001C441 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001C446 02                         word_1E016:	dc.b 2
0001C447 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001C44C 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001C451 02                         word_1E028:	dc.b 2
0001C452 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001C457 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001C45C 02                         word_1E03A:	dc.b 2
0001C45D F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001C462 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001C467 01                         word_1E04C:	dc.b 1
0001C468 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001C46D 01                         word_1E056:	dc.b 1
0001C46E F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001C473 01                         word_1E060:	dc.b 1
0001C474 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001C479 01                         word_1E06A:	dc.b 1
0001C47A F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001C47F 00                         	dc.b 0
0001C480 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001C482 0000                       	dc word_1E0A2-off_1E074; 1
0001C484 0000                       	dc word_1E0A6-off_1E074; 2
0001C486 0000                       	dc word_1E0AA-off_1E074; 3
0001C488 0000                       	dc word_1E0AE-off_1E074; 4
0001C48A 0000                       	dc word_1E0B2-off_1E074; 5
0001C48C 0000                       	dc word_1E0B6-off_1E074; 6
0001C48E 0000                       	dc word_1E0BA-off_1E074; 7
0001C490 0000                       	dc word_1E0BE-off_1E074; 8
0001C492 0000                       	dc word_1E0C2-off_1E074; 9
0001C494 0000                       	dc word_1E0C6-off_1E074; 10
0001C496 0000                       	dc word_1E0CA-off_1E074; 11
0001C498 0000                       	dc word_1E0CE-off_1E074; 12
0001C49A 0000                       	dc word_1E0D2-off_1E074; 13
0001C49C 0000                       	dc word_1E0D8-off_1E074; 14
0001C49E 0000                       	dc word_1E0DE-off_1E074; 15
0001C4A0 0000                       	dc word_1E0E4-off_1E074; 16
0001C4A2 0000                       	dc word_1E0EA-off_1E074; 17
0001C4A4 0000                       	dc word_1E0EA-off_1E074; 18
0001C4A6 0000                       	dc word_1E0EA-off_1E074; 19
0001C4A8 0000                       	dc word_1E0EA-off_1E074; 20
0001C4AA 0000                       	dc word_1E0EC-off_1E074; 21
0001C4AC 0000                       word_1E0A0:	dc 0
0001C4AE 0001                       word_1E0A2:	dc 1
0001C4B0 7000                       	dc $7000
0001C4B2 0001                       word_1E0A6:	dc 1
0001C4B4 F008                       	dc $F008
0001C4B6 0001                       word_1E0AA:	dc 1
0001C4B8 F018                       	dc $F018
0001C4BA 0001                       word_1E0AE:	dc 1
0001C4BC F028                       	dc $F028
0001C4BE 0001                       word_1E0B2:	dc 1
0001C4C0 F038                       	dc $F038
0001C4C2 0001                       word_1E0B6:	dc 1
0001C4C4 F048                       	dc $F048
0001C4C6 0001                       word_1E0BA:	dc 1
0001C4C8 7058                       	dc $7058
0001C4CA 0001                       word_1E0BE:	dc 1
0001C4CC 7060                       	dc $7060
0001C4CE 0001                       word_1E0C2:	dc 1
0001C4D0 7068                       	dc $7068
0001C4D2 0001                       word_1E0C6:	dc 1
0001C4D4 7070                       	dc $7070
0001C4D6 0001                       word_1E0CA:	dc 1
0001C4D8 7078                       	dc $7078
0001C4DA 0001                       word_1E0CE:	dc 1
0001C4DC 7080                       	dc $7080
0001C4DE 0002                       word_1E0D2:	dc 2
0001C4E0 1088                       	dc $1088
0001C4E2 708A                       	dc $708A
0001C4E4 0002                       word_1E0D8:	dc 2
0001C4E6 3092                       	dc $3092
0001C4E8 7096                       	dc $7096
0001C4EA 0002                       word_1E0DE:	dc 2
0001C4EC 509E                       	dc $509E
0001C4EE 70A4                       	dc $70A4
0001C4F0 0002                       word_1E0E4:	dc 2
0001C4F2 50AC                       	dc $50AC
0001C4F4 70B2                       	dc $70B2
0001C4F6 0000                       word_1E0EA:	dc 0
0001C4F8 0001                       word_1E0EC:	dc 1
0001C4FA F0BA                       	dc $F0BA
0001C4FC                            	even
0001C4FC                            
0001C4FC                            ; ===========================================================================
0001C4FC                            ; ---------------------------------------------------------------------------
0001C4FC                            ; Object 01 - Sonic
0001C4FC                            ; ---------------------------------------------------------------------------
0001C4FC                            
0001C4FC                            Obj01:					; XREF: Obj_Index
0001C4FC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C500 6700                       		beq.s	Obj01_Normal	; if not, branch
0001C502                            ;		cmpi.b	#6,($FFFFFE10).w ; are we in the ending sequence?
0001C502                            ;		beq.s	Obj01_Normal	; if not, branch
0001C502 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
0001C508 6700                       		beq.s	loc_10AD8
0001C50A 0838 0004 F605             		btst	#4,($FFFFF605).w
0001C510 6700                       		beq.s	loc_10ABC
0001C512 31FC 0000 FE08             		move.w	#0,(Debug_placement_mode).w
0001C518                            loc_10ABC:
0001C518 5228 001A                  		addq.b	#1,mapping_frame(a0)
0001C51C 4A38 FE19                  		tst.b	($FFFFFE19).w
0001C520 6700 0000                  		beq.w	AniNormalTest
0001C524 0C28 00D6 001A             		cmpi.b	#$D6,mapping_frame(a0)
0001C52A 6500                       		blo.s	loc_10ACE
0001C52C 4EF9 0000 0000             		jmp		AniSuperTest
0001C532                            AniNormalTest:
0001C532 0C28 00DA 001A             		cmpi.b	#$DA,mapping_frame(a0)
0001C538 6500                       		blo.s	loc_10ACE
0001C53A                            AniSuperTest:
0001C53A 117C 0000 001A             		move.b	#0,mapping_frame(a0)
0001C540                            loc_10ACE:
0001C540 6100 0000                  		bsr.w	LoadSonicDynPLC
0001C544 4EF9 0001 5C3C             		jmp	(DisplaySprite).l
0001C54A                            ; ---------------------------------------------------------------------------
0001C54A                            
0001C54A                            loc_10AD8:
0001C54A 4EF9 0000 0000             		jmp	(DebugMode).l
0001C550                            ; ===========================================================================
0001C550                            
0001C550                            Obj01_Normal:
0001C550 7000                       		moveq	#0,d0
0001C552 1028 0024                  		move.b	routine(a0),d0
0001C556 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001C55A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001C55E                            ; ===========================================================================
0001C55E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001C560 0000                       		dc.w Obj01_Control-Obj01_Index
0001C562 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001C564 0000                       		dc.w Obj01_Death-Obj01_Index
0001C566 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001C568 0000                       		dc.w Sonic_Drowned-Obj01_Index
0001C56A                            ; ===========================================================================
0001C56A                            
0001C56A                            Obj01_Main:				; XREF: Obj01_Index
0001C56A 11FC 0000 FFF7             		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
0001C570 5428 0024                  		addq.b	#2,routine(a0)
0001C574 117C 0013 0016             		move.b	#$13,y_radius(a0) ; this sets Sonic's collision height (2*pixels)
0001C57A 117C 0009 0017             		move.b	#9,x_radius(a0)
0001C580 217C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a0)
0001C588 317C 0780 0002             		move.w	#$780,art_tile(a0)
0001C58E 317C 0100 0018             		move.w	#$100,priority(a0)
0001C594 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001C59A 117C 0004 0001             		move.b	#4,render_flags(a0)
0001C5A0 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C5A4 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C5A8                            
0001C5A8                            Obj01_Control:				; XREF: Obj01_Index
0001C5A8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001C5AC 6700                       		beq.s	loc_contctrl	; if not, branch
0001C5AE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C5B4 6700                       		beq.s	loc_contctrl	; if not, branch
0001C5B6 31FC 0001 FE08                     move.w  #1,(Debug_placement_mode).w     ; change Sonic into a ring/item
0001C5BC 4238 F7CC                          clr.b   (Control_Locked).w              ; unlock control
0001C5C0 0838 0005 F604             		btst	#5,($FFFFF604).w	; was button C held before pressing B?
0001C5C6 6700                       		beq.s	locret_10BEE			; if not, branch
0001C5C8 31FC 0002 FE08             		move.w	#2,(Debug_placement_mode).w	; enter animation cycle mode
0001C5CE                            
0001C5CE                            locret_10BEE:
0001C5CE 4E75                       		rts
0001C5D0                            ; ===========================================================================
0001C5D0                            
0001C5D0 0828 0003 0022             loc_contctrl:	btst    #3,status(a0)			; is Sonic standing on an object?
0001C5D6 6700                       	beq.s	loc_12C58				; if no, branch
0001C5D8 08A8 0007 0022             	bclr	#7,status(a0)			 ; Clear Jump Dash Flag
0001C5DE                            
0001C5DE                            loc_12C58:
0001C5DE 4A38 F7CC                      tst.b   (Control_Locked).w      ; are controls locked?
0001C5E2 6600                           bne.s   loc_12C64     ; if yes, branch
0001C5E4 31F8 F604 F602                 move.w  (Ctrl_1).w,(Ctrl_1_Logical).w
0001C5EA 6000 0000                      bra.w   loc_12C64
0001C5EE                            
0001C5EE                            loc_12C64:
0001C5EE 0838 0000 F7C8             	btst	#0,($FFFFF7C8).w ; are controls	locked?
0001C5F4 6600                       	bne.s	loc_12C7E	; if yes, branch
0001C5F6 7000                       	moveq	#0,d0
0001C5F8 1028 0022                  	move.b	status(a0),d0
0001C5FC 0240 0006                  	andi.w	#6,d0
0001C600 323B 0000                  	move.w	Obj01_Modes(pc,d0.w),d1
0001C604 4EBB 1000                  	jsr	Obj01_Modes(pc,d1.w)
0001C608                            
0001C608                            loc_12C7E:
0001C608 0C78 FF00 F72C             	cmpi.w	#-$100,($FFFFF72C).w	; is vertical wrapping enabled?
0001C60E 6600                       	bne.s	@contctrl5				; if not, branch
0001C610 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0) 		; perform wrapping of Sonic's y position
0001C616                            @contctrl5:
0001C616 6100                       	bsr.s	Sonic_Display
0001C618 6100 0000                  	bsr.w	Sonic_Super
0001C61C 6100 0000                  	bsr.w	Sonic_RecordPos
0001C620 6100 0000                  	bsr.w	Sonic_Water
0001C624 1178 F768 0036             	move.b	($FFFFF768).w,$36(a0)
0001C62A 1178 F76A 0037             	move.b	($FFFFF76A).w,$37(a0)
0001C630 4A38 F7C7                  	tst.b	($FFFFF7C7).w
0001C634 6700                       	beq.s	@contctrl6
0001C636 4A28 001C                  	tst.b	anim(a0)
0001C63A 6600                       	bne.s	@contctrl6
0001C63C 1168 001D 001C             	move.b	next_anim(a0),anim(a0)
0001C642                            @contctrl6:
0001C642 6100 0000                  	bsr.w	Sonic_Animate
0001C646 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001C64A 6B00                       	bmi.s	loc_12CB6
0001C64C 4EB9 0000 0000             	jsr	TouchResponse
0001C652                            
0001C652                            loc_12CB6:
0001C652 6100 0000                  	bsr.w	Sonic_Loops
0001C656 6100 0000                  	bsr.w	LoadSonicDynPLC
0001C65A 4E75                       	rts	
0001C65C                            ; ===========================================================================
0001C65C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal_Checks-Obj01_Modes
0001C65E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001C660 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001C662 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001C664                            ; ---------------------------------------------------------------------------
0001C664                            ; Music	to play	after invincibility wears off
0001C664                            ; ---------------------------------------------------------------------------
0001C664                            MusicList2:	incbin	misc\muslist2.bin
0001C66C                            		even
0001C66C                            ; ===========================================================================
0001C66C                            
0001C66C                            Sonic_Display:				; XREF: loc_12C7E
0001C66C 1028 0030                  		move.b	invulnerable_time(a0),d0
0001C670 6700                       		beq.s	Obj01_Display_AfterImage
0001C672 5328 0030                  		subq.b	#1,invulnerable_time(a0)
0001C676 E648                       		lsr.w	#3,d0
0001C678 6400                       		bcc.s	Obj01_ChkInvin
0001C67A                            
0001C67A                            Obj01_Display_AfterImage:
0001C67A 3028 0020                  		move.w	inertia(a0),d0			; get inertia
0001C67E 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001C684 6700 0000                  		beq.w	Obj01_AfterImage_ChkStart			; if not, branch
0001C688 3028 0010                  		move.w	x_vel(a0),d0
0001C68C                            
0001C68C                            Obj01_AfterImage_ChkStart:
0001C68C 4A40                       		tst.w	d0					; is inertia greater than 0?
0001C68E 6C00                       		bge.s	Obj01_AfterImage_Start	; if yes, don't negate it
0001C690 4440                       		neg		d0					; if not, negate it
0001C692                            
0001C692                            Obj01_AfterImage_Start:
0001C692 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
0001C696 6600                       		bne.s	Obj01_AfterImage_Start_2	; if yes, display after image
0001C698 0C40 0600                  		cmpi.w	#$600,d0		; is the sonic inertia greater than 600?
0001C69C 6D00                       		blt.s	Obj01_Display	; if not, don't show the After Image
0001C69E                            Obj01_AfterImage_Start_2:
0001C69E 4EBA A068                  		jsr	SingleObjLoad	; search a free space in object RAM
0001C6A2 6600                       		bne.s	Obj01_Display	; if not have, don't load the After Image
0001C6A4 12BC 008D                  		move.b  #$8D,0(a1)		; load after-image object
0001C6A8 2368 0004 0004             		move.l	4(a0),4(a1)		; copy Sonic mappings to after-image mappings
0001C6AE                            ;		move.w	8(a0),8(a1)		; copy Sonic x-pos to after-image x-pos
0001C6AE                            ;		move.w	$C(a0),$C(a1)	; copy Sonic y-pos to after-image y-pos
0001C6AE                            
0001C6AE                            Obj01_Display:
0001C6AE 4EBA 958C                  		jsr	DisplaySprite
0001C6B2                            
0001C6B2                            Obj01_ChkInvin:
0001C6B2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001C6B6 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch
0001C6BA 4A28 0032                  		tst.b	invincibility_time(a0)		; check	time remaining for invinciblity
0001C6BE 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001C6C0 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001C6C4 0200 0007                  		andi.b	#7,d0
0001C6C8 6600                       		bne.s	Obj01_ChkShoes
0001C6CA 5328 0032                  		subq.b	#1,invincibility_time(a0)
0001C6CE 6600                       		bne.s	Obj01_ChkShoes
0001C6D0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001C6D4 6600                       		bne.s	Obj01_RmvInvin
0001C6D6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001C6DC 6500                       		bcs.s	Obj01_RmvInvin
0001C6DE 4238 FF88                  		clr.b	($FFFFFF88).w
0001C6E2                            ;		tst.b	($FFFFFE2C).w		; is sonic super?
0001C6E2                            ;		beq.w	Obj01_ChkInvin_2		; if yes, branch
0001C6E2                            ;		moveq	#$28,d0
0001C6E2                            ;		jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001C6E2                            ;Obj01_ChkInvin_2:
0001C6E2 3038 FF90                  		move.w	(Level_Music).w,d0
0001C6E6 4EB9 0000 0000             		jsr	(PlayMusic).l
0001C6EC                            
0001C6EC                            Obj01_RmvInvin:
0001C6EC 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001C6F2                            
0001C6F2                            Obj01_ChkShoes:
0001C6F2 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; does Sonic have speed	shoes?
0001C6F6 6700                       		beq.s	Obj01_ExitChk		; if not, branch
0001C6F8 4A28 0034                  		tst.b	speedshoes_time(a0)				; check	time remaining
0001C6FC 6700                       		beq.s	Obj01_ExitChk
0001C6FE 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001C702 0200 0007                  		andi.b	#7,d0
0001C706 6600                       		bne.s	Obj01_ExitChk
0001C708 5328 0034                  		subq.b	#1,speedshoes_time(a0)
0001C70C 6600                       		bne.s	Obj01_ExitChk
0001C70E 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C712 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C716                            		
0001C716                            Obj01_ChkShoesCont:		
0001C716 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w	; cancel speed	shoes
0001C71C 303C 0000                  		move.w	#$0,d0
0001C720 4EF9 0000 329E             		jmp	(SetTempo).l	; run music at normal speed
0001C726                            ; ===========================================================================
0001C726                            
0001C726                            Obj01_ExitChk:
0001C726 4E75                       		rts	
0001C728                            
0001C728                            ; ---------------------------------------------------------------------------
0001C728                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001C728                            ; ---------------------------------------------------------------------------
0001C728                            
0001C728                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C728                            
0001C728                            
0001C728                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001C728 3038 F7A8                  	move.w	(Sonic_Pos_Record_Index).w,d0
0001C72C 43F8 CB00                  	lea	(Sonic_Pos_Record_Buf).w,a1
0001C730 43F1 0000                  	lea	(a1,d0.w),a1
0001C734 32E8 0008                  	move.w	x_pos(a0),(a1)+
0001C738 32E8 000C                  	move.w	y_pos(a0),(a1)+
0001C73C 5838 F7A9                  	addq.b	#4,(Sonic_Pos_Record_Index+1).w
0001C740                            
0001C740 43F8 CA00                  	lea	(Sonic_Stat_Record_Buf).w,a1
0001C744 43F1 0000                  	lea	(a1,d0.w),a1
0001C748 32F8 F602                  	move.w	(Ctrl_1_Logical).w,(a1)+
0001C74C 32E8 0022                  	move.w	status(a0),(a1)+
0001C750                            
0001C750 4E75                       	rts	
0001C752                            ; End of function Sonic_RecordPos
0001C752                            
0001C752                            ; ---------------------------------------------------------------------------
0001C752                            ; Subroutine for Sonic when he's underwater
0001C752                            ; ---------------------------------------------------------------------------
0001C752                            
0001C752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C752                            
0001C752                            
0001C752                            Sonic_Water:				; XREF: loc_12C7E
0001C752 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001C758 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001C75A                            
0001C75A                            locret_12D80:
0001C75A 4E75                       		rts	
0001C75C                            ; ===========================================================================
0001C75C                            
0001C75C                            Obj01_InWater:
0001C75C 3038 F646                  		move.w	($FFFFF646).w,d0
0001C760 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001C764 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001C766 08E8 0006 0022             		bset	#6,$22(a0)
0001C76C 66EC                       		bne.s	locret_12D80
0001C76E 6100 0000                  		bsr.w	ResumeMusic
0001C772 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001C778 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001C77E 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C782 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C786 E0E8 0010                  		asr	$10(a0)
0001C78A E0E8 0012                  		asr	$12(a0)
0001C78E E0E8 0012                  		asr	$12(a0)
0001C792 67C6                       		beq.s	locret_12D80
0001C794 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001C79A 303C 0039                  		move.w	#$39,d0
0001C79E 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001C7A4                            ; ===========================================================================
0001C7A4                            
0001C7A4                            Obj01_OutWater:
0001C7A4 08A8 0006 0022             		bclr	#6,$22(a0)
0001C7AA 67AE                       		beq.s	locret_12D80
0001C7AC 6100 0000                  		bsr.w	ResumeMusic
0001C7B0 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001C7B4 6100 0000                  		bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001C7B8 E1E8 0012                  		asl	$12(a0)
0001C7BC 6700 FF9C                  		beq.w	locret_12D80
0001C7C0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001C7C6 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001C7CC 6E00                       		bgt.s	loc_12E0E
0001C7CE 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001C7D4                            
0001C7D4                            loc_12E0E:
0001C7D4 303C 0039                  		move.w	#$39,d0
0001C7D8 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play splash sound
0001C7DE                            ; End of function Sonic_Water
0001C7DE                            
0001C7DE                            ; ===========================================================================
0001C7DE                            ; ---------------------------------------------------------------------------
0001C7DE                            ; Start of subroutine Obj01_MdNormal (Ported from Sonic 2)
0001C7DE                            ; Called if Sonic is neither airborne nor rolling this frame
0001C7DE                            ; ---------------------------------------------------------------------------
0001C7DE                            ; loc_1A26E:
0001C7DE                            Obj01_MdNormal_Checks:
0001C7DE 1038 F603                      move.b  (Ctrl_1_Press_Logical).w,d0
0001C7E2 0200 0070                  	andi.b  #button_B_mask|button_C_mask|button_A_mask,d0
0001C7E6 6600                       	bne.s   Obj01_MdNormal
0001C7E8 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001C7EE 6700                       	beq.s   return_1A2DE
0001C7F0 0C28 000A 001C             	cmpi.b  #$A,anim(a0)
0001C7F6 6700                       	beq.s   return_1A2DE
0001C7F8 0C28 0005 001C             	cmpi.b  #5,anim(a0)
0001C7FE 6600                       	bne.s   Obj01_MdNormal
0001C800 0C28 001E 001B             	cmpi.b  #$1E,anim_frame(a0)
0001C806 6500                       	blo.s   Obj01_MdNormal
0001C808 1038 F602                  	move.b  (Ctrl_1_Held_Logical).w,d0
0001C80C 0200 007F                  	andi.b  #button_up_mask|button_down_mask|button_left_mask|button_right_mask|button_B_mask|button_C_mask|button_A_mask,d0
0001C810 6700                       	beq.s	return_1A2DE
0001C812 117C 000B 001C             	move.b	#$B,anim(a0)
0001C818 0C28 00AC 001B             	cmpi.b	#$AC,anim_frame(a0)
0001C81E 6500                       	blo.s   return_1A2DE
0001C820 117C 000B 001C             	move.b	#$B,anim(a0)
0001C826 6000                       	bra.s	return_1A2DE
0001C828                            ; ---------------------------------------------------------------------------
0001C828                            ; Modes	for controlling	Sonic
0001C828                            ; ---------------------------------------------------------------------------
0001C828                            
0001C828                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001C828 4EB9 0000 0000             		jsr	Sonic_SpinDash
0001C82E 4EB9 0000 0000             		jsr	Sonic_Jump
0001C834 4EB9 0000 0000             		jsr	Sonic_SlopeResist
0001C83A 4EB9 0000 0000             		jsr	Sonic_Move
0001C840 4EB9 0000 0000             		jsr	Sonic_Roll
0001C846 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C84C 4EBA 9388                  		jsr	SpeedToPos
0001C850 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001C856 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001C85C                            
0001C85C                            return_1A2DE:
0001C85C 4E75                               rts
0001C85E                            ; End of subroutine Obj01_MdNormal
0001C85E                            ; ===========================================================================
0001C85E                            ;Obj01_MdAir:
0001C85E                            Obj01_MdJump:				; XREF: Obj01_Modes
0001C85E 4228 0039                  		clr.b	$39(a0)
0001C862 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001C868 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001C86E 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C874 4EBA 9340                  		jsr	ObjectFall
0001C878 0828 0006 0022             		btst	#6,status(a0)
0001C87E 6700                       		beq.s	loc_12E5C
0001C880 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001C886                            
0001C886                            loc_12E5C:
0001C886 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001C88C 4EB9 0000 0000             		jsr	Sonic_Floor
0001C892 4E75                       		rts	
0001C894                            ; ===========================================================================
0001C894                            
0001C894                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001C894 4EB9 0000 0000             		jsr	Sonic_Jump
0001C89A 4EB9 0000 0000             		jsr	Sonic_RollRepel
0001C8A0 4EB9 0000 0000             		jsr	Sonic_RollSpeed
0001C8A6 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C8AC 4EBA 9328                  		jsr	SpeedToPos
0001C8B0 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001C8B6 4EB9 0000 0000             		jsr	Sonic_SlopeRepel
0001C8BC 4E75                       		rts	
0001C8BE                            ; ===========================================================================
0001C8BE                            
0001C8BE                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001C8BE 4228 0039                  		clr.b	$39(a0)
0001C8C2 0C28 0002 001C             		cmpi.b	#2,anim(a0)    		; is Sonic rolling?
0001C8C8 6600 0000                  		bne.w	Obj01_MdJump3		; if not skip the 2 lines below
0001C8CC 4EB9 0000 0000             		jsr	Sonic_JumpDash	; JumpDash Code: Thanks to Selbi
0001C8D2 4EB9 0000 0000             		jsr	Sonic_Homingattack
0001C8D8                            Obj01_MdJump3:		
0001C8D8 4EB9 0000 0000             		jsr	Sonic_JumpHeight
0001C8DE 4EB9 0000 0000             		jsr	Sonic_ChgJumpDir
0001C8E4 4EB9 0000 0000             		jsr	Sonic_LevelBound
0001C8EA 4EBA 92CA                  		jsr	ObjectFall
0001C8EE 0828 0006 0022             		btst	#6,status(a0)
0001C8F4 6700                       		beq.s	loc_12EA6
0001C8F6 0468 0028 0012             		subi.w	#$28,y_vel(a0)
0001C8FC 3028 0010                  		move.w	x_vel(a0),d0		; move Sonic's X-velocity to d0
0001C900 4A40                       		tst.w	d0			; is his speed positive? (is he running to the right?)
0001C902 6A00                       		bpl.s	Obj01_MdJump2_Abs	; if yes, branch
0001C904 4440                       		neg.w	d0			; otherwise negate it
0001C906                            		
0001C906                            Obj01_MdJump2_Abs:
0001C906 0C40 0250                  		cmpi.w	#$250,d0		; if Sonic speed less than $250?
0001C90A 6D00                       		blt.s	loc_12EA6		; if yes, branch
0001C90C 3028 000C                  		move.w	$C(a0),d0		; move sonic's Y-position to d0
0001C910 9078 F646                  		sub.w	($FFFFF646).w,d0	; sub the water height from it
0001C914 0C40 000F                  		cmpi.w	#$F,d0			; is Sonic slightly in the water?
0001C918 6E00                       		bgt.s	loc_12EA6		; if not, branch
0001C91A 0468 0090 0012             		subi.w	#$90,y_vel(a0)		; jump out of water
0001C920                            
0001C920                            loc_12EA6:
0001C920 4EB9 0000 0000             		jsr	Sonic_JumpAngle
0001C926 4EB9 0000 0000             		jsr	Sonic_Floor
0001C92C 4E75                       		rts	
0001C92E                            ; ---------------------------------------------------------------------------
0001C92E                            ; Subroutine to	make Sonic walk/run
0001C92E                            ; ---------------------------------------------------------------------------
0001C92E                            
0001C92E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C92E                            
0001C92E                            
0001C92E                            Sonic_Move:				; XREF: Obj01_MdNormal
0001C92E 3C38 F760                  		move.w	($FFFFF760).w,d6
0001C932 3A38 F762                  		move.w	($FFFFF762).w,d5
0001C936 3838 F764                  		move.w	($FFFFF764).w,d4
0001C93A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001C93E 6600 0000                  		bne.w	loc_12FEE
0001C942 4A68 003E                  		tst.w	parent(a0)
0001C946 6600 0000                  		bne.w	Obj01_ResetScr
0001C94A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C950 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001C952 4EB9 0000 0000             		jsr	Sonic_MoveLeft
0001C958                            
0001C958                            Obj01_NotLeft:
0001C958 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C95E 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001C960 4EB9 0000 0000             		jsr	Sonic_MoveRight
0001C966                            
0001C966                            Obj01_NotRight:
0001C966 1028 0026                  	move.b	angle(a0),d0
0001C96A 0600 0020                  	addi.b	#$20,d0
0001C96E 0200 00C0                  	andi.b	#$C0,d0		; is Sonic on a slope?
0001C972 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001C976 4A68 0020                  	tst.w	inertia(a0)	; is Sonic moving?
0001C97A 6600 0000                  	bne.w	Obj01_ResetScr	; if yes, branch
0001C97E 08A8 0005 0022             	bclr	#5,status(a0)
0001C984 117C 0005 001C             	move.b	#5,anim(a0)	; use "standing" animation
0001C98A 0828 0003 0022             	btst	#3,status(a0)
0001C990 6700 0000                  	beq.w	Sonic_Balance
0001C994 7000                       	moveq	#0,d0
0001C996 1028 003D                  	move.b	interact(a0),d0
0001C99A ED48                       	lsl.w	#6,d0
0001C99C 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001C9A0 43F1 0000                  	lea	(a1,d0.w),a1 ; a1=object
0001C9A4 4A29 0022                  	tst.b	status(a1)
0001C9A8 6B00 0000                  	bmi.w	Sonic_Lookup
0001C9AC 7200                       	moveq	#0,d1
0001C9AE 1229 0023                  	move.b	width_pixels(a1),d1
0001C9B2 3401                       	move.w	d1,d2
0001C9B4 D442                       	add.w	d2,d2
0001C9B6 5542                       	subq.w	#2,d2
0001C9B8 D268 0008                  	add.w	x_pos(a0),d1
0001C9BC 9269 0008                  	sub.w	x_pos(a1),d1
0001C9C0 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001C9C4 6600 0000                  	bne.w	SuperSonic_Balance
0001C9C8 0C41 0002                  	cmpi.w	#2,d1
0001C9CC 6D00                       	blt.s	Sonic_BalanceOnObjLeft
0001C9CE B242                       	cmp.w	d2,d1
0001C9D0 6C00                       	bge.s	Sonic_BalanceOnObjRight
0001C9D2 6000 0000                  	bra.w	Sonic_Lookup
0001C9D6                            ; ---------------------------------------------------------------------------
0001C9D6                            ; loc_1A3FE:
0001C9D6                            SuperSonic_Balance:
0001C9D6 0C41 0002                  		cmpi.w	#2,d1
0001C9DA 6D00 0000                  		blt.w	SuperSonic_BalanceOnObjLeft
0001C9DE B242                       		cmp.w	d2,d1
0001C9E0 6C00 0000                  		bge.w	SuperSonic_BalanceOnObjRight
0001C9E4 6000 0000                  		bra.w	Sonic_Lookup
0001C9E8                            ; ---------------------------------------------------------------------------
0001C9E8                            ; balancing checks for when you're on the right edge of an object
0001C9E8                            ; loc_1A410:
0001C9E8                            Sonic_BalanceOnObjRight:
0001C9E8 0828 0000 0022             		btst	#0,status(a0)
0001C9EE 6600                       		bne.s	@loc1
0001C9F0 117C 0006 001C             		move.b	#6,anim(a0)
0001C9F6 5C42                       		addq.w	#6,d2
0001C9F8 B242                       		cmp.w	d2,d1
0001C9FA 6D00 0000                  		blt.w	Obj01_ResetScr
0001C9FE 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA04 6000 0000                  		bra.w	Obj01_ResetScr
0001CA08                                ; on right edge of object but facing left:
0001CA08 08A8 0000 0022             @loc1:	bclr	#0,status(a0)
0001CA0E 117C 0006 001C             		move.b	#6,anim(a0)
0001CA14 5C42                       		addq.w	#6,d2
0001CA16 B242                       		cmp.w	d2,d1
0001CA18 6D00 0000                  		blt.w	Obj01_ResetScr
0001CA1C 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA22 6000 0000                  		bra.w	Obj01_ResetScr
0001CA26                            ; ---------------------------------------------------------------------------
0001CA26                            ; balancing checks for when you're on the left edge of an object
0001CA26                            ; loc_1A44E:
0001CA26                            Sonic_BalanceOnObjLeft:
0001CA26 0828 0000 0022             		btst	#0,status(a0)
0001CA2C 6700                       		beq.s	@loc2
0001CA2E 117C 0006 001C             		move.b	#6,anim(a0)
0001CA34 0C41 FFFC                  		cmpi.w	#-4,d1
0001CA38 6C00 0000                  		bge.w	Obj01_ResetScr
0001CA3C 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA42 6000 0000                  		bra.w	Obj01_ResetScr
0001CA46                                ; on left edge of object but facing right:
0001CA46 08E8 0000 0022             @loc2:	bset	#0,status(a0)
0001CA4C 117C 0006 001C             		move.b	#6,anim(a0)
0001CA52 0C41 FFFC                  		cmpi.w	#-4,d1
0001CA56 6C00 0000                  		bge.w	Obj01_ResetScr
0001CA5A 117C 000C 001C             		move.b	#$C,anim(a0)
0001CA60 6000 0000                  		bra.w	Obj01_ResetScr
0001CA64                            ; ---------------------------------------------------------------------------
0001CA64                            ; balancing checks for when you're on the edge of part of the level
0001CA64                            ; loc_1A48C:
0001CA64                            Sonic_Balance:
0001CA64 3628 0008                  		move.w	x_pos(a0),d3
0001CA68 4EB9 0000 0000             		jsr	ObjHitFloor
0001CA6E 0C41 000C                  		cmpi.w	#$C,d1
0001CA72 6D00 0000                  		blt.w	Sonic_Lookup
0001CA76 4A38 FE19                  		tst.b	(Super_Sonic_Flag).w
0001CA7A 6600 0000                  		bne.w	SuperSonic_Balance2
0001CA7E 0C28 0003 0036             		cmpi.b	#3,next_tilt(a0)
0001CA84 6600                       		bne.s	Sonic_BalanceLeft
0001CA86 0828 0000 0022             		btst	#0,status(a0)
0001CA8C 6600                       		bne.s	@loc3
0001CA8E 117C 0006 001C             		move.b	#6,anim(a0)
0001CA94 3628 0008                  		move.w	x_pos(a0),d3
0001CA98 5D43                       		subq.w	#6,d3
0001CA9A 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CAA0 0C41 000C                  		cmpi.w	#$C,d1
0001CAA4 6D00 0000                  		blt.w	Obj01_ResetScr
0001CAA8 117C 000C 001C             		move.b	#$C,anim(a0)
0001CAAE 6000 0000                  		bra.w	Obj01_ResetScr
0001CAB2                                ; on right edge but facing left:
0001CAB2 08A8 0000 0022             @loc3:	bclr	#0,status(a0)
0001CAB8 117C 0006 001C             		move.b	#6,anim(a0)
0001CABE 3628 0008                  		move.w	x_pos(a0),d3
0001CAC2 5D43                       		subq.w	#6,d3
0001CAC4 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CACA 0C41 000C                  		cmpi.w	#$C,d1
0001CACE 6D00 0000                  		blt.w	Obj01_ResetScr
0001CAD2 117C 000C 001C             		move.b	#$C,anim(a0)
0001CAD8 6000 0000                  		bra.w	Obj01_ResetScr
0001CADC                            ; ---------------------------------------------------------------------------
0001CADC                            
0001CADC                            Sonic_BalanceLeft:
0001CADC 0C28 0003 0037             		cmpi.b	#3,tilt(a0)
0001CAE2 6600                       		bne.s	Sonic_Lookup
0001CAE4 0828 0000 0022             		btst	#0,status(a0)
0001CAEA 6700                       		beq.s	@loc4
0001CAEC 117C 0006 001C             		move.b	#6,anim(a0)
0001CAF2 3628 0008                  		move.w	x_pos(a0),d3
0001CAF6 5C43                       		addq.w	#6,d3
0001CAF8 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CAFE 0C41 000C                  		cmpi.w	#$C,d1
0001CB02 6D00 0000                  		blt.w	Obj01_ResetScr
0001CB06 117C 000C 001C             		move.b	#$C,anim(a0)
0001CB0C 6000 0000                  		bra.w	Obj01_ResetScr
0001CB10                                ; on left edge but facing right:
0001CB10 08E8 0000 0022             @loc4:	bset	#0,status(a0)
0001CB16 117C 0006 001C             		move.b	#6,anim(a0)
0001CB1C 3628 0008                  		move.w	x_pos(a0),d3
0001CB20 5C43                       		addq.w	#6,d3
0001CB22 4EB9 0000 0000             		jsr	ObjHitFloor2
0001CB28 0C41 000C                  		cmpi.w	#$C,d1
0001CB2C 6D00 0000                  		blt.w	Obj01_ResetScr
0001CB30 117C 000C 001C             		move.b	#$C,anim(a0)
0001CB36 6000 0000                  		bra.w	Obj01_ResetScr
0001CB3A                            ; ---------------------------------------------------------------------------
0001CB3A                            ; loc_1A55E:
0001CB3A                            SuperSonic_Balance2:
0001CB3A 0C28 0003 0036             		cmpi.b  #3,next_tilt(a0)
0001CB40 6600                       		bne.s   loc_1A56E
0001CB42                            
0001CB42                            ; loc_1A566:
0001CB42                            SuperSonic_BalanceOnObjRight:
0001CB42 08A8 0000 0022             		bclr    #0,status(a0)
0001CB48 6000                       		bra.s   loc_1A57C
0001CB4A                            ; ---------------------------------------------------------------------------
0001CB4A                            loc_1A56E:
0001CB4A 0C28 0003 0037             		cmpi.b  #3,tilt(a0)
0001CB50 6600                       		bne.s   Sonic_Lookup
0001CB52                            
0001CB52                            ; loc_1A576:
0001CB52                            SuperSonic_BalanceOnObjLeft:
0001CB52 08E8 0000 0022             		bset    #0,status(a0)
0001CB58                            
0001CB58                            loc_1A57C:
0001CB58 117C 0006 001C             		move.b  #6,anim(a0)
0001CB5E 6000                       		bra.s   Obj01_ResetScr
0001CB60                            ; ---------------------------------------------------------------------------
0001CB60                            
0001CB60                            Sonic_LookUp:
0001CB60 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001CB66 6700                       		beq.s	Sonic_Duck	; if not, branch
0001CB68 117C 0007 001C             		move.b	#7,anim(a0)	; use "looking up" animation
0001CB6E 5238 C903                  		addq.b	#1,($FFFFC903).w
0001CB72 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
0001CB78 6500 0000                  		bcs.w	Obj01_ResetScr_Part2
0001CB7C 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001CB82 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001CB88 6700 0000                  		beq.w	loc_12FC2
0001CB8C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001CB90 6000 0000                  		bra.w	loc_12FC2
0001CB94                            ; ===========================================================================
0001CB94                             
0001CB94                            Sonic_Duck:
0001CB94 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001CB9A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001CB9C 117C 0008 001C             		move.b	#8,anim(a0)	; use "ducking"	animation
0001CBA2 5238 C903                  		addq.b	#1,($FFFFC903).w
0001CBA6 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
0001CBAC 6500                       		bcs.s	Obj01_ResetScr_Part2
0001CBAE 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001CBB4 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001CBBA 6700                       		beq.s	loc_12FC2
0001CBBC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CBC0 6000                       		bra.s	loc_12FC2		
0001CBC2                            ; ===========================================================================
0001CBC2                            ; moves the screen back to its normal position after looking up or down
0001CBC2                             
0001CBC2                            Obj01_ResetScr:
0001CBC2 11FC 0000 C903             		move.b	#0,($FFFFC903).w
0001CBC8                             
0001CBC8                            Obj01_ResetScr_Part2:
0001CBC8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001CBCE 6700                       		beq.s	loc_12FC2	; if yes, branch
0001CBD0 6400                       		bcc.s	loc_12FBE
0001CBD2 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001CBD6                             
0001CBD6                            loc_12FBE:
0001CBD6 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001CBDA                            
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            ; updates Sonic's speed on the ground
0001CBDA                            ; ---------------------------------------------------------------------------
0001CBDA                            		
0001CBDA                            loc_12FC2:
0001CBDA 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001CBDE 6700 0000                  		beq.w	@cont
0001CBE2 3A3C 000C                  		move.w	#$C,d5
0001CBE6                            @cont:
0001CBE6 1038 F602                  		move.b	($FFFFF602).w,d0
0001CBEA 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001CBEE 6600                       		bne.s	loc_12FEE	; if yes, branch
0001CBF0 3028 0020                  		move.w	inertia(a0),d0
0001CBF4 6700                       		beq.s	loc_12FEE
0001CBF6 6B00                       		bmi.s	loc_12FE2
0001CBF8 9045                       		sub.w	d5,d0
0001CBFA 6400                       		bcc.s	loc_12FDC
0001CBFC 303C 0000                  		move.w	#0,d0
0001CC00                            
0001CC00                            loc_12FDC:
0001CC00 3140 0020                  		move.w	d0,inertia(a0)
0001CC04 6000                       		bra.s	loc_12FEE
0001CC06                            ; ===========================================================================
0001CC06                            
0001CC06                            loc_12FE2:
0001CC06 D045                       		add.w	d5,d0
0001CC08 6400                       		bcc.s	loc_12FEA
0001CC0A 303C 0000                  		move.w	#0,d0
0001CC0E                            
0001CC0E                            loc_12FEA:
0001CC0E 3140 0020                  		move.w	d0,inertia(a0)
0001CC12                            
0001CC12                            loc_12FEE:
0001CC12 1028 0026                  		move.b	$26(a0),d0
0001CC16 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001CC1C C3E8 0020                  		muls.w	inertia(a0),d1
0001CC20 E081                       		asr.l	#8,d1
0001CC22 3141 0010                  		move.w	d1,x_vel(a0)
0001CC26 C1E8 0020                  		muls.w	inertia(a0),d0
0001CC2A E080                       		asr.l	#8,d0
0001CC2C 3140 0012                  		move.w	d0,y_vel(a0)
0001CC30                            
0001CC30                            loc_1300C:
0001CC30 1028 0026                  		move.b	$26(a0),d0
0001CC34 0600 0040                  		addi.b	#$40,d0
0001CC38 6B00                       		bmi.s	locret_1307C
0001CC3A 123C 0040                  		move.b	#$40,d1
0001CC3E 4A68 0020                  		tst.w	inertia(a0)
0001CC42 6700                       		beq.s	locret_1307C
0001CC44 6B00                       		bmi.s	loc_13024
0001CC46 4441                       		neg.w	d1
0001CC48                            
0001CC48                            loc_13024:
0001CC48 1028 0026                          move.b    $26(a0),d0
0001CC4C D001                               add.b    d1,d0
0001CC4E 3F00                               move.w    d0,-(sp)
0001CC50 4EB9 0000 0000                     jsr    Sonic_WalkSpeed
0001CC56 301F                               move.w    (sp)+,d0
0001CC58 4A41                               tst.w    d1
0001CC5A 6A00                               bpl.s    locret_1307C
0001CC5C E141                               asl.w    #8,d1
0001CC5E 0600 0020                          addi.b    #$20,d0
0001CC62 0200 00C0                          andi.b    #$C0,d0
0001CC66 6700                               beq.s    loc_13078
0001CC68 0C00 0040                          cmpi.b    #$40,d0
0001CC6C 6700                               beq.s    loc_13066
0001CC6E 0C00 0080                          cmpi.b    #$80,d0
0001CC72 6700                               beq.s    loc_13060
0001CC74 0C68 0600 0010                     cmpi.w    #$600,x_vel(a0)
0001CC7A                                  ;  bge.s    Sonic_WallRecoil
0001CC7A D368 0010                          add.w    d1,x_vel(a0)
0001CC7E 08E8 0005 0022                     bset    #5,status(a0)
0001CC84 317C 0000 0020                     move.w    #0,inertia(a0)
0001CC8A 4E75                               rts
0001CC8C                            ; ===========================================================================
0001CC8C                            
0001CC8C                            loc_13060:
0001CC8C 9368 0012                          sub.w    d1,y_vel(a0)
0001CC90 4E75                               rts    
0001CC92                            ; ===========================================================================
0001CC92                            
0001CC92                            loc_13066:
0001CC92 9368 0010                          sub.w    d1,x_vel(a0)
0001CC96 08E8 0005 0022                     bset    #5,status(a0)
0001CC9C 317C 0000 0020                     move.w    #0,inertia(a0)
0001CCA2 4E75                               rts    
0001CCA4                            ; ===========================================================================
0001CCA4                            
0001CCA4                            loc_13078:
0001CCA4 D368 0012                          add.w    d1,y_vel(a0)
0001CCA8                            
0001CCA8                            locret_1307C:
0001CCA8 4E75                               rts    
0001CCAA                            ; -------------------
0001CCAA                            
0001CCAA                            Sonic_WallRecoil:        ; CODE XREF: Sonic_Move+180j
0001CCAA 4E75                               rts
0001CCAC                            
0001CCAC                            Sonic_WallRecoil_Right:        ; CODE XREF: Sonic_Move+1D2j
0001CCAC 4E75                               rts
0001CCAE                            ; End of function Sonic_Move
0001CCAE                            
0001CCAE                            
0001CCAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCAE                            
0001CCAE                            
0001CCAE                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
0001CCAE 3028 0020                  		move.w	inertia(a0),d0
0001CCB2 6700                       		beq.s	loc_13086
0001CCB4 6A00                       		bpl.s	loc_130B2
0001CCB6                             
0001CCB6                            loc_13086:
0001CCB6 08E8 0000 0022             		bset	#0,status(a0)
0001CCBC 6600                       		bne.s	loc_1309A
0001CCBE 08A8 0005 0022             		bclr	#5,status(a0)
0001CCC4 117C 0001 001D             		move.b	#1,next_anim(a0)
0001CCCA                             
0001CCCA                            loc_1309A:
0001CCCA 9045                       		sub.w	d5,d0
0001CCCC 3206                       		move.w	d6,d1
0001CCCE 4441                       		neg.w	d1
0001CCD0 B041                       		cmp.w	d1,d0
0001CCD2 6E00                       		bgt.s	loc_130A6
0001CCD4 D045                       		add.w	d5,d0
0001CCD6 B041                       		cmp.w	d1,d0
0001CCD8 6F00                       		ble.s	loc_130A6
0001CCDA 3001                       		move.w	d1,d0
0001CCDC                             
0001CCDC                            loc_130A6:
0001CCDC 3140 0020                  		move.w	d0,inertia(a0)
0001CCE0 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001CCE6 4E75                       		rts
0001CCE8                            ; ===========================================================================
0001CCE8                            
0001CCE8                            loc_130B2:				; XREF: Sonic_MoveLeft
0001CCE8 9044                       		sub.w	d4,d0
0001CCEA 6400                       		bcc.s	loc_130BA
0001CCEC 303C FF80                  		move.w	#-$80,d0
0001CCF0                            
0001CCF0                            loc_130BA:
0001CCF0 3140 0020                  		move.w	d0,inertia(a0)
0001CCF4 1028 0026                  		move.b	$26(a0),d0
0001CCF8 0600 0020                  		addi.b	#$20,d0
0001CCFC 0200 00C0                  		andi.b	#$C0,d0
0001CD00 6600                       		bne.s	locret_130E8
0001CD02 0C40 0400                  		cmpi.w	#$400,d0
0001CD06 6D00                       		blt.s	locret_130E8
0001CD08 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001CD0E 08A8 0000 0022             		bclr	#0,status(a0)
0001CD14 303C 0036                  		move.w	#$36,d0
0001CD18 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001CD1E                            ;		tst.b	($FFFFFE1E).w
0001CD1E                            ;		beq.w	locret_130E8
0001CD1E                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001CD1E                            ;		bne.s	locret_130E8	; if yes, branch
0001CD1E                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001CD1E                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001CD1E                            locret_130E8:
0001CD1E 4E75                       		rts	
0001CD20                            ; End of function Sonic_MoveLeft
0001CD20                            
0001CD20                            
0001CD20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD20                            
0001CD20                            
0001CD20                            Sonic_MoveRight:	   ; XREF: Sonic_Move
0001CD20 3028 0020                  		move.w	inertia(a0),d0
0001CD24 6B00                       		bmi.s	loc_13118
0001CD26 08A8 0000 0022             		bclr	#0,status(a0)
0001CD2C 6700                       		beq.s	loc_13104
0001CD2E 08A8 0005 0022             		bclr	#5,status(a0)
0001CD34 117C 0001 001D             		move.b	#1,next_anim(a0)
0001CD3A                             
0001CD3A                            loc_13104:
0001CD3A D045                       		add.w	d5,d0
0001CD3C B046                       		cmp.w	d6,d0
0001CD3E 6D00                       		blt.s	loc_1310C
0001CD40 9045                       		sub.w	d5,d0
0001CD42 B046                       		cmp.w	d6,d0
0001CD44 6C00                       		bge.s	loc_1310C
0001CD46 3006                       		move.w	d6,d0
0001CD48                             
0001CD48                            loc_1310C:
0001CD48 3140 0020                  		move.w	d0,inertia(a0)
0001CD4C 117C 0000 001C             		move.b	#0,anim(a0); use walking animation
0001CD52 4E75                       		rts
0001CD54                            ; ===========================================================================
0001CD54                            
0001CD54                            loc_13118:				; XREF: Sonic_MoveRight
0001CD54 D044                       		add.w	d4,d0
0001CD56 6400                       		bcc.s	loc_13120
0001CD58 303C 0080                  		move.w	#$80,d0
0001CD5C                            
0001CD5C                            loc_13120:
0001CD5C 3140 0020                  		move.w	d0,inertia(a0)
0001CD60 1028 0026                  		move.b	$26(a0),d0
0001CD64 0600 0020                  		addi.b	#$20,d0
0001CD68 0200 00C0                  		andi.b	#$C0,d0
0001CD6C 6600                       		bne.s	locret_1314E
0001CD6E 0C40 FC00                  		cmpi.w	#-$400,d0
0001CD72 6E00                       		bgt.s	locret_1314E
0001CD74 117C 000D 001C             		move.b	#$D,anim(a0)	; use "stopping" animation
0001CD7A 08E8 0000 0022             		bset	#0,status(a0)
0001CD80 303C 0036                  		move.w	#$36,d0
0001CD84 4EB9 0000 3212             		jsr	(PlaySound).l ;	play stopping sound
0001CD8A                            ;		tst.b	($FFFFFE1E).w
0001CD8A                            ;		beq.w	locret_1314E
0001CD8A                            ;		tst.w	($FFFFF63A).w	; is the game paused?
0001CD8A                            ;		bne.s	locret_1314E	; if yes, branch
0001CD8A                            ;		move.b	#6,($FFFFD1C0+routine).w	; ??? $D11C only seems
0001CD8A                            ;		move.b	#$15,($FFFFD1C0+mapping_frame).w
0001CD8A                            locret_1314E:
0001CD8A 4E75                       		rts	
0001CD8C                            ; End of function Sonic_MoveRight
0001CD8C                            
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            ; Subroutine to	change Sonic's speed as he rolls
0001CD8C                            ; ---------------------------------------------------------------------------
0001CD8C                            
0001CD8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD8C                            
0001CD8C                            
0001CD8C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001CD8C 3C38 F760                  		move.w	($FFFFF760).w,d6
0001CD90 E346                       		asl.w	#1,d6
0001CD92 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001CD94 3838 F764                  		move.w	($FFFFF764).w,d4
0001CD98 E444                       		asr.w	#2,d4
0001CD9A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001CD9E 6600 0000                  		bne.w	loc_131CC
0001CDA2 4A68 003E                  		tst.w	parent(a0)
0001CDA6 6600                       		bne.s	loc_13188
0001CDA8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CDAE 6700                       		beq.s	loc_1317C	; if not, branch
0001CDB0 4EB9 0000 0000             		jsr	Sonic_RollLeft
0001CDB6                            
0001CDB6                            loc_1317C:
0001CDB6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CDBC 6700                       		beq.s	loc_13188	; if not, branch
0001CDBE 4EB9 0000 0000             		jsr	Sonic_RollRight
0001CDC4                            
0001CDC4                            loc_13188:
0001CDC4 3028 0020                  		move.w	inertia(a0),d0
0001CDC8 6700                       		beq.s	loc_131AA
0001CDCA 6B00                       		bmi.s	loc_1319E
0001CDCC 9045                       		sub.w	d5,d0
0001CDCE 6400                       		bcc.s	loc_13198
0001CDD0 303C 0000                  		move.w	#0,d0
0001CDD4                            
0001CDD4                            loc_13198:
0001CDD4 3140 0020                  		move.w	d0,inertia(a0)
0001CDD8 6000                       		bra.s	loc_131AA
0001CDDA                            ; ===========================================================================
0001CDDA                            
0001CDDA                            loc_1319E:				; XREF: Sonic_RollSpeed
0001CDDA D045                       		add.w	d5,d0
0001CDDC 6400                       		bcc.s	loc_131A6
0001CDDE 303C 0000                  		move.w	#0,d0
0001CDE2                            
0001CDE2                            loc_131A6:
0001CDE2 3140 0020                  		move.w	d0,inertia(a0)
0001CDE6                            
0001CDE6                            loc_131AA:
0001CDE6 4A68 0020                  		tst.w	inertia(a0)		; is Sonic moving?
0001CDEA 6600                       		bne.s	loc_131CC	; if yes, branch
0001CDEC 08A8 0002 0022             		bclr	#2,$22(a0)
0001CDF2 117C 0013 0016             		move.b	#$13,$16(a0)
0001CDF8 117C 0009 0017             		move.b	#9,$17(a0)
0001CDFE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001CE04 5B68 000C                  		subq.w	#5,$C(a0)
0001CE08                            
0001CE08                            loc_131CC:
0001CE08 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
0001CE0E 6700                       		beq.s	@cont2
0001CE10 6400                       		bcc.s	@cont1
0001CE12 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001CE16                             
0001CE16                            @cont1:
0001CE16 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CE1A                             
0001CE1A                            @cont2:
0001CE1A 1028 0026                  		move.b	$26(a0),d0
0001CE1E 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001CE24 C1E8 0020                  		muls.w	inertia(a0),d0
0001CE28 E080                       		asr.l	#8,d0
0001CE2A 3140 0012                  		move.w	d0,y_vel(a0)
0001CE2E C3E8 0020                  		muls.w	inertia(a0),d1
0001CE32 E081                       		asr.l	#8,d1
0001CE34 0C41 1000                  		cmpi.w	#$1000,d1
0001CE38 6F00                       		ble.s	loc_131F0
0001CE3A 323C 1000                  		move.w	#$1000,d1
0001CE3E                            
0001CE3E                            loc_131F0:
0001CE3E 0C41 F000                  		cmpi.w	#-$1000,d1
0001CE42 6C00                       		bge.s	loc_131FA
0001CE44 323C F000                  		move.w	#-$1000,d1
0001CE48                            
0001CE48                            loc_131FA:
0001CE48 3141 0010                  		move.w	d1,x_vel(a0)
0001CE4C 6000 FDE2                  		bra.w	loc_1300C
0001CE50                            ; End of function Sonic_RollSpeed
0001CE50                            
0001CE50                            
0001CE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE50                            
0001CE50                            
0001CE50                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001CE50 3028 0020                  		move.w	inertia(a0),d0
0001CE54 6700                       		beq.s	loc_1320A
0001CE56 6A00                       		bpl.s	loc_13218
0001CE58                            
0001CE58                            loc_1320A:
0001CE58 08E8 0000 0022             		bset	#0,status(a0)
0001CE5E 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001CE64 4E75                       		rts	
0001CE66                            ; ===========================================================================
0001CE66                            
0001CE66                            loc_13218:
0001CE66 9044                       		sub.w	d4,d0
0001CE68 6400                       		bcc.s	loc_13220
0001CE6A 303C FF80                  		move.w	#-$80,d0
0001CE6E                            
0001CE6E                            loc_13220:
0001CE6E 3140 0020                  		move.w	d0,inertia(a0)
0001CE72 4E75                       		rts	
0001CE74                            ; End of function Sonic_RollLeft
0001CE74                            
0001CE74                            
0001CE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE74                            
0001CE74                            
0001CE74                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001CE74 3028 0020                  		move.w	inertia(a0),d0
0001CE78 6B00                       		bmi.s	loc_1323A
0001CE7A 08A8 0000 0022             		bclr	#0,status(a0)
0001CE80 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001CE86 4E75                       		rts	
0001CE88                            ; ===========================================================================
0001CE88                            
0001CE88                            loc_1323A:
0001CE88 D044                       		add.w	d4,d0
0001CE8A 6400                       		bcc.s	loc_13242
0001CE8C 303C 0080                  		move.w	#$80,d0
0001CE90                            
0001CE90                            loc_13242:
0001CE90 3140 0020                  		move.w	d0,inertia(a0)
0001CE94 4E75                       		rts	
0001CE96                            ; End of function Sonic_RollRight
0001CE96                            
0001CE96                            ; ---------------------------------------------------------------------------
0001CE96                            ; Subroutine to	change Sonic's direction while jumping
0001CE96                            ; ---------------------------------------------------------------------------
0001CE96                            
0001CE96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE96                            
0001CE96                            
0001CE96                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
0001CE96 3C38 F760                  		move.w	($FFFFF760).w,d6
0001CE9A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001CE9E E345                       		asl.w	#1,d5
0001CEA0 0828 0004 0022             		btst	#4,status(a0)	
0001CEA6 6600                       		bne.s	Obj01_ResetScr2
0001CEA8 3028 0010                  		move.w	x_vel(a0),d0	
0001CEAC 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
0001CEB2 6700                       		beq.s	loc_13278; if not, branch	
0001CEB4 08E8 0000 0022             		bset	#0,status(a0)	
0001CEBA 9045                       		sub.w	d5,d0	
0001CEBC 3206                       		move.w	d6,d1	
0001CEBE 4441                       		neg.w	d1	
0001CEC0 B041                       		cmp.w	d1,d0	
0001CEC2 6E00                       		bgt.s	loc_13278	
0001CEC4 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001CEC6 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001CEC8 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001CECA 3001                       		move.w	d1,d0
0001CECC                             
0001CECC                            loc_13278:
0001CECC 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
0001CED2 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001CED4 08A8 0000 0022             		bclr	#0,status(a0)	
0001CEDA D045                       		add.w	d5,d0	
0001CEDC B046                       		cmp.w	d6,d0	
0001CEDE 6D00                       		blt.s	Obj01_JumpMove
0001CEE0 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
0001CEE2 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001CEE4 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001CEE6 3006                       		move.w	d6,d0
0001CEE8                            
0001CEE8                            Obj01_JumpMove:
0001CEE8 3140 0010                  		move.w	d0,x_vel(a0)	; change Sonic's horizontal speed
0001CEEC                            
0001CEEC                            Obj01_ResetScr2:
0001CEEC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001CEF2 6700                       		beq.s	loc_132A4	; if yes, branch
0001CEF4 6400                       		bcc.s	loc_132A0
0001CEF6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001CEFA                            
0001CEFA                            loc_132A0:
0001CEFA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001CEFE                            
0001CEFE                            loc_132A4:
0001CEFE 0C68 FC00 0012             		cmpi.w	#-$400,y_vel(a0)	; is Sonic moving faster than -$400 upwards?
0001CF04 6500                       		bcs.s	locret_132D2	; if yes, branch
0001CF06 3028 0010                  		move.w	x_vel(a0),d0
0001CF0A 3200                       		move.w	d0,d1
0001CF0C EA41                       		asr.w	#5,d1
0001CF0E 6700                       		beq.s	locret_132D2
0001CF10 6B00                       		bmi.s	loc_132C6
0001CF12 9041                       		sub.w	d1,d0
0001CF14 6400                       		bcc.s	loc_132C0
0001CF16 303C 0000                  		move.w	#0,d0
0001CF1A                            
0001CF1A                            loc_132C0:
0001CF1A 3140 0010                  		move.w	d0,x_vel(a0)
0001CF1E 4E75                       		rts	
0001CF20                            ; ===========================================================================
0001CF20                            
0001CF20                            loc_132C6:
0001CF20 9041                       		sub.w	d1,d0
0001CF22 6500                       		bcs.s	loc_132CE
0001CF24 303C 0000                  		move.w	#0,d0
0001CF28                            
0001CF28                            loc_132CE:
0001CF28 3140 0010                  		move.w	d0,x_vel(a0)
0001CF2C                            
0001CF2C                            locret_132D2:
0001CF2C 4E75                       		rts	
0001CF2E                            ; End of function Sonic_ChgJumpDir
0001CF2E                            
0001CF2E                            ; ===========================================================================
0001CF2E                            ; ---------------------------------------------------------------------------
0001CF2E                            ; Unused subroutine to squash Sonic
0001CF2E                            ; ---------------------------------------------------------------------------
0001CF2E 1028 0026                  		move.b	$26(a0),d0
0001CF32 0600 0020                  		addi.b	#$20,d0
0001CF36 0200 00C0                  		andi.b	#$C0,d0
0001CF3A 6600                       		bne.s	locret_13302
0001CF3C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001CF40 4A41                       		tst.w	d1
0001CF42 6A00                       		bpl.s	locret_13302
0001CF44 317C 0000 0020             		move.w	#0,inertia(a0)	; stop Sonic moving
0001CF4A 317C 0000 0010             		move.w	#0,x_vel(a0)
0001CF50 317C 0000 0012             		move.w	#0,y_vel(a0)
0001CF56 117C 000B 001C             		move.b	#$B,anim(a0)	; use "warping"	animation
0001CF5C                            
0001CF5C                            locret_13302:
0001CF5C 4E75                       		rts
0001CF5E                            ; ---------------------------------------------------------------------------
0001CF5E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001CF5E                            ; ---------------------------------------------------------------------------
0001CF5E                            
0001CF5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF5E                            
0001CF5E                            
0001CF5E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001CF5E 2228 0008                  		move.l	8(a0),d1
0001CF62 3028 0010                  		move.w	x_vel(a0),d0
0001CF66 48C0                       		ext.l	d0
0001CF68 E180                       		asl.l	#8,d0
0001CF6A D280                       		add.l	d0,d1
0001CF6C 4841                       		swap	d1
0001CF6E 3038 F728                  		move.w	($FFFFF728).w,d0
0001CF72 0640 0010                  		addi.w	#$10,d0
0001CF76 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001CF78 6200 0000                  		bhi.w	Boundary_Sides	; if yes, branch
0001CF7C 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001CF80 0640 0128                  		addi.w	#$128,d0
0001CF84 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001CF88 6600                       		bne.s	loc_13332
0001CF8A 0640 0040                  		addi.w	#$40,d0
0001CF8E                            
0001CF8E                            loc_13332:
0001CF8E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001CF90 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001CF92                            
0001CF92                            loc_13336:
0001CF92 3038 F726                  		move.w	($FFFFF726).w,d0
0001CF96 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0001CF9A 6E00                       		bgt.s	@loc_64BE2
0001CF9C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001CFA0                            
0001CFA0                            @loc_64BE2:	
0001CFA0 0640 00E0                  		addi.w	#$E0,d0
0001CFA4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001CFA8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001CFAA 4E75                       		rts	
0001CFAC                            		
0001CFAC                            ; ===========================================================================
0001CFAC                            
0001CFAC                            Boundary_Bottom:
0001CFAC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
0001CFB2 6600 0000                  		bne.w	KillCharacter_JMP		; if not, kill Sonic
0001CFB6 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w	; is player at the sequence where Eggman presses the switch
0001CFBC 6500 0000                  		bcs.w	KillCharacter_JMP	; if not, kill Sonic
0001CFC0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
0001CFC6 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level	to SBZ3	(LZ4)
0001CFCC                            ;		rts
0001CFCC                            Boundary_Bottom_locret:
0001CFCC 4E75                       		rts
0001CFCE                            
0001CFCE                            KillCharacter_JMP:
0001CFCE 4EF9 0000 0000             		jmp	KillCharacter		
0001CFD4                            ; ===========================================================================
0001CFD4                            
0001CFD4                            Boundary_Sides:
0001CFD4 3140 0008                  		move.w	d0,8(a0)
0001CFD8 317C 0000 000A             		move.w	#0,$A(a0)
0001CFDE 317C 0000 0010             		move.w	#0,x_vel(a0)	; stop Sonic moving
0001CFE4 317C 0000 0020             		move.w	#0,inertia(a0)
0001CFEA 6000 FFA6                  		bra.w	loc_13336
0001CFEE                            ; End of function Sonic_LevelBound
0001CFEE                            
0001CFEE                            ; ---------------------------------------------------------------------------
0001CFEE                            ; Subroutine allowing Sonic to roll when he's moving
0001CFEE                            ; ---------------------------------------------------------------------------
0001CFEE                            
0001CFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFEE                            
0001CFEE                            
0001CFEE                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001CFEE 4A38 F7CA                  	tst.b	($FFFFF7CA).w
0001CFF2 6600                       	bne.s	Obj01_NoRoll
0001CFF4 1038 F602                  	move.b	(Ctrl_1_Held_Logical).w,d0
0001CFF8 0200 000C                  	andi.b	#$C,d0		; is left/right being pressed?
0001CFFC 6600                       	bne.s	Obj01_NoRoll	; if yes, branch
0001CFFE 0838 0001 F602             	btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
0001D004 6700                       	beq.s	loc_11780
0001D006 3028 0020                  	move.w	inertia(a0),d0
0001D00A 6A00                       	bpl.s	loc_13392
0001D00C 4440                       	neg.w	d0
0001D00E                            loc_13392:
0001D00E 0C40 0100                  	cmpi.w	#$100,d0
0001D012 6400                       	bcc.s	Obj01_ChkRoll
0001D014 0828 0003 0022             	btst	#3,status(a0)
0001D01A 6600                       	bne.s	Obj01_NoRoll
0001D01C 117C 0008 001C             	move.b	#8,anim(a0)
0001D022                            
0001D022                            Obj01_NoRoll:
0001D022 4E75                       		rts	
0001D024                            		
0001D024                            loc_11780:
0001D024 0C28 0008 001C             	cmpi.b	#8,anim(a0)
0001D02A 66F6                       	bne.s	Obj01_NoRoll
0001D02C 117C 0000 001C             	move.b	#0,anim(a0)
0001D032 4E75                       	rts
0001D034                            ; ===========================================================================
0001D034                            
0001D034                            Obj01_ChkRoll:
0001D034 0828 0002 0022             		btst	#2,status(a0)	; is Sonic already rolling?
0001D03A 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001D03C 4E75                       		rts	
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            Obj01_DoRoll:
0001D03E 08E8 0002 0022             		bset	#2,status(a0)
0001D044 117C 000E 0016             		move.b	#$E,$16(a0)
0001D04A 117C 0007 0017             		move.b	#7,$17(a0)
0001D050 117C 0002 001C             		move.b	#2,anim(a0)	; use "rolling"	animation
0001D056 5A68 000C                  		addq.w	#5,$C(a0)
0001D05A 303C 003C                  		move.w	#$3C,d0
0001D05E 4EB9 0000 3212             		jsr	(PlaySound).l ;	play rolling sound
0001D064 4A68 0020                  		tst.w	inertia(a0)
0001D068 6600                       		bne.s	locret_133E8
0001D06A 317C 0200 0020             		move.w	#$200,inertia(a0)
0001D070                            
0001D070                            locret_133E8:
0001D070 4E75                       		rts	
0001D072                            ; End of function Sonic_Roll
0001D072                            
0001D072                            ; ---------------------------------------------------------------------------
0001D072                            ; Subroutine to perform a JumpDash
0001D072                            ; ---------------------------------------------------------------------------
0001D072                            
0001D072                            Sonic_JumpDash:
0001D072 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
0001D076 6600 0000                  		bne.w	JD_End
0001D07A 1038 F603                  		move.b	($FFFFF603).w,d0		; is ABC pressed? (part 1)
0001D07E 0200 0070                  		andi.b	#$70,d0			; is ABC pressed? (part 2)
0001D082 6700 0000                  		beq.w	JD_End			; if not, branch
0001D086 0828 0007 0022             		btst	#7,$22(a0)		; was jumpdash flag set?
0001D08C 6600 0000                  		bne.w	JD_End			; if yes, branch
0001D090 08E8 0007 0022             		bset	#7,$22(a0)		; if not, set jumpdash flag
0001D096 303C 00B6                  		move.w	#$B6,d0			; set jumpdash sound
0001D09A 4EB9 0000 3212             		jsr	(PlaySound).l		; play jumpdash sound
0001D0A0 08A8 0004 0022             		bclr	#4,status(a0)		; clear double jump flag
0001D0A6                            
0001D0A6                            ;JD_SetSpeed1:
0001D0A6                            JD_SetSpeed1:
0001D0A6 7200                       		moveq	#0,d1				; Quickly clear d1
0001D0A8 4A38 FE2E                  		tst.b	($FFFFFE2E).w		; Does Sonic have speedshoes?
0001D0AC 6700                       		beq.s	setJDspeed1				; If not, branch
0001D0AE 5201                       		addq.b	#1,d1				; Quickly add 1 to d1
0001D0B0                            setJDspeed1:
0001D0B0 0828 0006 0022             		btst	#6,status(a0)			; Is Sonic underwater?
0001D0B6 6700                       		beq.s	setJDspeed2				; If not, branch
0001D0B8 5401                       		addq.b	#2,d1				; Quickly add 2 to d1
0001D0BA                            setJDspeed2:
0001D0BA 4A38 FE19                  		tst.b	(Super_Sonic_flag).w		; Is Sonic Super?
0001D0BE 6700                       		beq.s	setJDspeed3				; If not, branch
0001D0C0 5801                       		addq.b	#4,d1				; Quickly add 4 to d1
0001D0C2                            setJDspeed3:
0001D0C2 D201                       		add.b	d1,d1
0001D0C4 303B 1000                  		move.w	JDSpeedsettings(pc,d1.w),d0	; Load correct speed into d0
0001D0C8 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing left?
0001D0CE 6700                       		beq.s	JD_Main			; if yes, branch
0001D0D0 4440                       		neg.w	d0			; if not, negate d0 (for jumping to the right)
0001D0D2                            
0001D0D2                            JD_Main:
0001D0D2 3140 0010                  		move.w	d0,x_vel(a0)		; move sonic forward (X-velocity)
0001D0D6 4268 0012                  		clr.w	y_vel(a0)			; clear Y-velocity to move sonic directly down
0001D0DA                            JD_End:
0001D0DA 4E75                       		rts				; return or finish jumpdash
0001D0DC                            ; End of function Sonic_JumpDash
0001D0DC                            
0001D0DC                            JDSpeedsettings:	
0001D0DC 0A00                       	dc.w	$A00		; $00	; Normal
0001D0DE 0B00                       	dc.w	$B00		; $08	; Normal with Speedshoes
0001D0E0 0600                       	dc.w	$600		; $16	; Normal Underwater
0001D0E2 0800                       	dc.w	$800		; $24	; Normal Underwater with Speedshoes
0001D0E4 0E00                       	dc.w	$E00		; $32	; Super
0001D0E6 0F00                       	dc.w	$F00		; $40	; Super with Speedshoes
0001D0E8 0A00                       	dc.w	$A00		; $48	; Super Underwater
0001D0EA 0B00                       	dc.w	$B00		; $56	; Super Underwater with Speedshoes
0001D0EC                            
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            ; Subroutine Sonic_Homingattack
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            
0001D0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0EC                            
0001D0EC                            Sonic_Homingattack:
0001D0EC 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; is Sonic chasing some object?
0001D0F0 6600 0000                  		bne.w   HA_Move            ; if yes, chase him
0001D0F4                            ;		jsr	Obj01_AfterImage_Start	; if yes, don't negate it
0001D0F4 1238 F603                  		move.b	($FFFFF603).w,d1	; read controller
0001D0F8 0201 0070                  		andi.b	#$70,d1				; is A, B or C pressed?
0001D0FC 6700 0000                  		beq.w	Sonic_HA_rts		; if not, branch
0001D100                            
0001D100 43F8 D800                  		lea		($FFFFD800).w,a1	; start at the first level object RAM
0001D104                            
0001D104                            ; ---------------------------------------------------------------------------
0001D104                            
0001D104                            HA_enemylist:
0001D104 4A11                       		tst.b	(a1)			; is a Null object
0001D106 6700                       		beq.s	HA_nextobject	; if yes, branch
0001D108 0C29 0005 0020             		cmpi.b	#5,collision_flags(a1)		; is not an enemy object? (spring, explosion, platform, collected ring, flame thrower (SBZ), among others)
0001D10E 6500 0000                  		bcs.w	HA_nextobject	; if yes, branch
0001D112                            		; cmpi.b	#5,collision_flags(a1)		; is Burrobot enemy (LZ)
0001D112                            		; beq.w	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#6,collision_flags(a1)		; is Crabmeat enemy (GHZ, SYZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#8,collision_flags(a1)		; is Buzz Bomber enemy (GHZ, MZ, SYZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#9,collision_flags(a1)		; is Chopper enemy (GHZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#$A,collision_flags(a1)	; is Jaws enemy (LZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#$B,collision_flags(a1)	; is Caterkiller enemy (MZ, SBZ) / Orbinaut enemy (LZ, SLZ, SBZ) / Basaran enemy (MZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#$C,collision_flags(a1)	; is Roller enemy (SYZ) / Newtron enemy (GHZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch	
0001D112                            		; cmpi.b	#$D,collision_flags(a1)	; is Newtron enemy (GHZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#$E,collision_flags(a1)	; is Roller enemy (SYZ)
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112                            		; cmpi.b	#$F,collision_flags(a1)	; is Eggman
0001D112                            		; beq.s	HA_calcdistance	; if yes, branch
0001D112 0C29 000F 0020             		cmpi.b	#$F,collision_flags(a1)		; is some enemy of the list above?
0001D118 6300                       		bls.s	HA_calcdistance ; if yes, branch
0001D11A 0C29 0046 0020             		cmpi.b	#$46,collision_flags(a1)	; is the monitor?
0001D120 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D122                            		; cmpi.b	#$47,collision_flags(a1)		; is the ring?
0001D122                            		; beq.s	HA_calcdistance 		; if yes, branch
0001D122 0C29 0052 0020             		cmpi.b	#$52,collision_flags(a1)	; is giant ring for entry to special stage?
0001D128 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D12A 0C29 00CC 0020             		cmpi.b	#$CC,collision_flags(a1)	; is Yadrin enemy (SYZ)
0001D130 6700                       		beq.s	HA_calcdistance ; if yes, branch
0001D132                            
0001D132                            HA_nextobject:
0001D132 D2FC 0040                  		adda.w  #$40,a1			; jump to next object RAM entry
0001D136 B2FC F000                  		cmpa.w  #$F000,a1		; already tested all object RAM entry?
0001D13A 6DC8                       		blt.s   HA_enemylist	; if not, return to enemy list
0001D13C                            ;		bsr.w	Sonic_JumpDash		; if not, perform a simple jump dash :P
0001D13C                            HA_nextobject_rts:
0001D13C 4E75                       		rts
0001D13E                            
0001D13E                            ; ---------------------------------------------------------------------------
0001D13E                            
0001D13E                            HA_calcdistance:	; distance calculator
0001D13E 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D142 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D146 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D14A 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D14E                            ; ---------------------------------------------------------------------------
0001D14E                            
0001D14E                            ; test if the Sonic is facing the object
0001D14E 0828 0000 0022             		btst    #0,status(a0)	; is sonic facing left?
0001D154 6700                       		beq.s   HA_faceleft	; if yes, branch
0001D156 0C41 0008                  		cmpi.w  #8,d1		; is distance of Sonic, less than 8 pixels of the object?
0001D15A 6D00                       		blt.s   HA_calcdistance2	; if yes, branch
0001D15C 60D4                       		bra.s   HA_nextobject
0001D15E                            
0001D15E                            HA_faceleft:
0001D15E 0C41 FFF8                  		cmpi.w  #-8,d1		; is distance of Sonic, greater than -8 pixels of the object?
0001D162 6E00                       		bgt.s   HA_calcdistance2	; if yes, branch
0001D164 60CC                       		bra.s   HA_nextobject
0001D166                            ; end of test
0001D166                            
0001D166                            ; ---------------------------------------------------------------------------
0001D166                            
0001D166                            HA_calcdistance2:		; continuation of distance calculator
0001D166                            ;		tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D166                            ;		beq.w	HA_calcdistance3		; if yes, branch (Keeps you from transforming multiple times while in the air)		
0001D166                            ;		move.b	#0,($FFFFFF7F).w
0001D166                            ;		bra.w	HA_Move
0001D166                            ;HA_calcdistance3:
0001D166 C3C1                       		muls.w  d1,d1	; horizontal distance squared
0001D168 C5C2                       		muls.w  d2,d2	; vertical distance squared
0001D16A D282                       		add.l   d2,d1	; add vertical distance to horizontal distance
0001D16C 0C81 0000 4000             		cmp.l   #16384,d1		; is distance of Sonic, greater than or equal 128 pixels of the object? (128^2=16384 // $80^2=$4000)
0001D172 6CBE                       		bge.s   HA_nextobject	; if yes, don't execute the homing attack
0001D174 08A8 0004 0022             		bclr   #4,status(a0)         ; clear "uncontrolled jump" flag
0001D17A 117C 0002 001C             		move.b	#2,anim(a0)
0001D180 303C 00B6                  		move.w   #$B6,d0            ; set homing attack sound
0001D184 4EB9 0000 3212             		jsr   (PlaySound).l         ; play homing attack sound
0001D18A 11FC 001E FF7F             		move.b   #30,($FFFFFF7F).w   ; number of frames Sonic can chasing the object
0001D190 21C9 FF02                  		move.l   a1,($FFFFFF02).w   ; save the object address that Sonic is chasing
0001D194 303C 00B6                  		move.w	#$B6,d0				; set homing attack sound
0001D198 4EB9 0000 3212             		jsr	(PlaySound).l			; play homing attack sound
0001D19E 08A8 0004 0022             		bclr	#4,status(a0)			; clear "uncontrolled jump" flag
0001D1A4 11FC 001E FF7F             		move.b	#30,($FFFFFF7F).w	; number of frames Sonic can chasing the object
0001D1AA 21C9 FF02                  		move.l	a1,($FFFFFF02).w	; save the object address that Sonic is chasing
0001D1AE                            ; ---------------------------------------------------------------------------
0001D1AE                            
0001D1AE                            HA_Move:
0001D1AE 2278 FF02                  		movea.l	($FFFFFF02).w,a1	; load the object address that Sonic is chasing
0001D1B2 5338 FF7F                  		subi.b	#1,($FFFFFF7F).w	; sub 1 of frames counter
0001D1B6 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; the time to the Sonic chasing some object is over?
0001D1BA 6700 0000                  		beq.w	Sonic_HA_rts		; if yes, don't make the Homing Attack
0001D1BE                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D1BE 3229 0008                  		move.w  8(a1),d1   ; move the object x-position to d1
0001D1C2 3429 000C                  		move.w  $C(a1),d2   ; move the object y-position to d2
0001D1C6 9268 0008                  		sub.w   8(a0),d1   ; sub sonic x-position of object x-position
0001D1CA 9468 000C                  		sub.w   $C(a0),d2   ; sub sonic y-position of object y-position
0001D1CE 4A38 FF7F                  		tst.b   ($FFFFFF7F).w      ; the time to the Sonic chasing some object is over?
0001D1D2 6700 0000                  		beq.w   Sonic_HA_rts      ; if yes, don't make the Homing Attack
0001D1D6                            ; ---------------------------------------------------------------------------
0001D1D6                            
0001D1D6                            ; Recalculating the distance between the Sonic and the object (d1 = x distance / d2 = y distance)
0001D1D6 3229 0008                  		move.w  8(a1),d1	; move the object x-position to d1
0001D1DA 3429 000C                  		move.w  $C(a1),d2	; move the object y-position to d2
0001D1DE 9268 0008                  		sub.w   8(a0),d1	; sub sonic x-position of object x-position
0001D1E2 9468 000C                  		sub.w   $C(a0),d2	; sub sonic y-position of object y-position
0001D1E6                            
0001D1E6 4EB9 0000 9072             		jsr		(CalcAngle).l	; calculates the angle
0001D1EC 4EB9 0000 8DA4             		jsr		(CalcSine).l	; calculates the sine and the cosine
0001D1F2 C3FC 000C                  		muls.w  #$C,d1			; multiply cosine by $C
0001D1F6 3141 0010                  		move.w  d1,x_vel(a0)		; move d1 to X-velocity
0001D1FA C1FC 000C                  		muls.w  #$C,d0			; multiply sine by $C
0001D1FE 3140 0012                  		move.w  d0,y_vel(a0)		; move d0 to Y-velocity
0001D202                            
0001D202                            Sonic_HA_rts:
0001D202 4E75                       		rts						; return
0001D204                            ; Command of Homingattack end here
0001D204                            
0001D204                            ; ---------------------------------------------------------------------------
0001D204                            ; Subroutine allowing Sonic to jump
0001D204                            ; ---------------------------------------------------------------------------
0001D204                            
0001D204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D204                            
0001D204                            
0001D204                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001D204 1038 F603                  		move.b	($FFFFF603).w,d0
0001D208 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D20C 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001D210 7000                       		moveq	#0,d0
0001D212 1028 0026                  		move.b	$26(a0),d0
0001D216 0600 0080                  		addi.b	#$80,d0
0001D21A 6100 0000                  		bsr.w	sub_14D48
0001D21E 0C41 0006                  		cmpi.w	#6,d1			; does Sonic have enough room to jump?
0001D222 6D00 0000                  		blt.w	locret_1348E		; if not, branch
0001D226 343C 0680                  		move.w	#$680,d2
0001D22A 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001D22E 6700                       		beq.s	@nochgjmpheight
0001D230 343C 0800                  		move.w	#$800,d2	; set higher jump speed if super
0001D234                            @nochgjmpheight:
0001D234 0828 0006 0022             		btst	#6,status(a0)	; Test if underwater
0001D23A 6700                       		beq.s	@chgjmpheightnotuw
0001D23C 343C 0380                  		move.w	#$380,d2	; set lower jump speed if under
0001D240                            @chgjmpheightnotuw:
0001D240 7000                       		moveq	#0,d0
0001D242 1028 0026                  		move.b	$26(a0),d0
0001D246 0400 0040                  		subi.b	#$40,d0
0001D24A 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001D250 C3C2                       		muls.w	d2,d1
0001D252 E081                       		asr.l	#8,d1
0001D254 D368 0010                  		add.w	d1,x_vel(a0)	; make Sonic jump
0001D258 C1C2                       		muls.w	d2,d0
0001D25A E080                       		asr.l	#8,d0
0001D25C D168 0012                  		add.w	d0,y_vel(a0)	; make Sonic jump
0001D260 08E8 0001 0022             		bset	#1,status(a0)
0001D266 08A8 0005 0022             		bclr	#5,status(a0)
0001D26C 588F                       		addq.l	#4,sp
0001D26E 117C 0001 003C             		move.b	#1,$3C(a0)
0001D274 4228 0038                  		clr.b	$38(a0)
0001D278 303C 0062                  		move.w	#$62,d0
0001D27C 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D282                            		;move.b	#$13,y_radius(a0)	; set to standing height	;<-- the offending lines
0001D282                            		;move.b	#9,x_radius(a0)		; and width			;<--
0001D282 0828 0002 0022             		btst	#2,status(a0)
0001D288 6600                       		bne.s	loc_13490
0001D28A 117C 000E 0016             		move.b	#$E,$16(a0)
0001D290 117C 0007 0017             		move.b	#7,$17(a0)
0001D296 117C 0002 001C             		move.b	#2,anim(a0)	; use "jumping"	animation
0001D29C 08E8 0002 0022             		bset	#2,status(a0)
0001D2A2 5A68 000C                  		addq.w	#5,$C(a0)
0001D2A6                            
0001D2A6                            locret_1348E:
0001D2A6 4E75                       		rts	
0001D2A8                            ; ===========================================================================
0001D2A8                            
0001D2A8                            loc_13490:
0001D2A8 08E8 0004 0022             		bset	#4,status(a0)
0001D2AE 4E75                       		rts	
0001D2B0                            ; End of function Sonic_Jump
0001D2B0                            
0001D2B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2B0                            
0001D2B0                            
0001D2B0                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001D2B0 4A28 003C                  		tst.b	$3C(a0)
0001D2B4 6700                       		beq.s	loc_134C4
0001D2B6 323C FC00                  		move.w	#-$400,d1
0001D2BA 0828 0006 0022             		btst	#6,status(a0)
0001D2C0 6700                       		beq.s	loc_134AE
0001D2C2 323C FE00                  		move.w	#-$200,d1
0001D2C6                            
0001D2C6                            loc_134AE:
0001D2C6 B268 0012                  		cmp.w	y_vel(a0),d1
0001D2CA 6F00                       		ble.s	locret_134C2
0001D2CC 1038 F602                  		move.b	($FFFFF602).w,d0
0001D2D0 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D2D4 6600                       		bne.s	locret_134C2	; if yes, branch
0001D2D6 3141 0012                  		move.w	d1,y_vel(a0)
0001D2DA                            
0001D2DA                            locret_134C2:
0001D2DA 4A38 F7CC                  		tst.b   (Control_Locked).w      ; Are Controls locked?
0001D2DE 6600                       		bne.s   locret_134D2            ; If so, branch, and do not bother with Super code
0001D2E0                            		;tst.b	y_vel(a0)				; is Sonic exactly at the height of his jump?		
0001D2E0 1038 F603                  		move.b  (Ctrl_1_Press_Logical).w,d0
0001D2E4 0200 0020                  		andi.b  #$20,d0 ; is A button pressed?
0001D2E8 6600                       		bne.s   Sonic_CheckGoSuper      ; if yes, test for turning into Super Sonic
0001D2EA 4E75                       		rts	
0001D2EC                            ; ===========================================================================
0001D2EC                            
0001D2EC                            loc_134C4:
0001D2EC 0C68 F040 0012             		cmpi.w	#-$FC0,y_vel(a0)
0001D2F2 6C00                       		bge.s	locret_134D2
0001D2F4 317C F040 0012             		move.w	#-$FC0,y_vel(a0)
0001D2FA                            
0001D2FA                            locret_134D2:
0001D2FA 4E75                       		rts	
0001D2FC                            ; End of function Sonic_JumpHeight
0001D2FC                            
0001D2FC                            ; ===========================================================================
0001D2FC                            
0001D2FC                            
0001D2FC                            PalLoad_Loop: ;Quick load
0001D2FC 34D9                       		move.w	(a1)+,(a2)+              ;Copy pallete data to RAM
0001D2FE 51C8 FFFC                  		dbf	d0,PalLoad_Loop               ;Loop d0 (length)
0001D302 4E75                       		rts
0001D304                            
0001D304                            nsup:
0001D304 4E75                            rts
0001D306                            
0001D306                            ; ===========================================================================
0001D306                            
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001D306                            ; if he has enough rings and all of the emeralds
0001D306                            ; ---------------------------------------------------------------------------
0001D306                            
0001D306                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D306                            
0001D306                            ; loc_1AB38: test_set_SS:
0001D306                            Sonic_CheckGoSuper:
0001D306                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D306                            ;	bne.w	return_1ABA4		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001D306 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001D30A 6700 0000                  	beq.w	return_1ABA4		; if yes, branch
0001D30E 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001D312 6600 0000                  	bne.w	return_1ABA4	; if yes, branch
0001D316 0C38 0006 FE57             	cmpi.b	#6,($FFFFFE57).w	; does Sonic have exactly 7 emeralds?
0001D31C 6600 0000                  	bne.w	return_1ABA4		; if not, branch
0001D320 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
0001D326 6500 0000                  	bcs.w	return_1ABA4		; if not, branch
0001D32A 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
0001D330 6700                       	beq.s	@loc
0001D332 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
0001D338 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
0001D33E 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001D344                            @loc:
0001D344                            ;	move.b	#1,(Transforming_Flag-1).w
0001D344                            ;	lea	(MainCharacter).w,a1
0001D344 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001D34A 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
0001D350 4238 FF88                  	clr.b	($FFFFFF88).w
0001D354 217C 0000 0000 0004        	move.l	#Map_SuperSonic,mappings(a0)
0001D35C 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001D362                            ;	moveq	#$44,d0
0001D362                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D362 11FC 0001 F7C8             	move.b	#$1,($FFFFF7C8).w
0001D368 4EB9 0000 0000             	jsr	Super_and_Invincibility_Stars_Jmp
0001D36E 117C 0022 001C             	move.b	#$22,anim(a0)			; use transformation animation
0001D374 11FC 0000 FE2E             	move.b	#0,($FFFFFE2E).w	; clear Super Shoes	;Mercury Constants
0001D37A 31FC 00E3 F00A             	move.w	#$E3,($FFFFF00A).w
0001D380 4228 0034                  	clr.b	speedshoes_time(a0)	; clear time limit of the invincibility
0001D384 117C 0000 0032             	move.b	#0,invincibility_time(a0)
0001D38A 11FC 0001 FE2D             	move.b	#1,($FFFFFE2D).w	; make Sonic invincible
0001D390 45F8 F760                  	lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0001D394 6100 0000                  	bsr.w	ApplySpeedSettings	; Fetch Speed settings
0001D398 11FC 008E D200             	move.b	#$8E,($FFFFD200).w	; load Obj7E (super sonic stars object) at $FFFFD200
0001D39E                            ;	moveq	#$26,d0
0001D39E                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D39E                            ;	moveq	#$23,d0
0001D39E                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D39E 4238 FF7F                  	clr.b	($FFFFFF7F).w 
0001D3A2 303C 0046                  	move.w	#$46,d0
0001D3A6 4EB9 0000 325C             	jsr	(PlaySound_Special).l	; Play transformation sound effect.
0001D3AC                            ;	tst.b	(Current_Boss_ID).w
0001D3AC                            ;	bne.s	return_1ABA4		; branch if in a boss fight
0001D3AC 303C 002D                  	move.w	#$2D,d0
0001D3B0 4EF9 0000 3212                 jmp    (PlaySound).l; load the Super Sonic song and return
0001D3B6 4E75                       	rts
0001D3B8                            	
0001D3B8                            ; ---------------------------------------------------------------------------
0001D3B8                            return_1ABA4:
0001D3B8 4E75                       	rts
0001D3BA                            ; End of subroutine Sonic_CheckGoSuper
0001D3BA                            
0001D3BA                            Super_and_Invincibility_Stars_Jmp:
0001D3BA 4EFA 8842                  	jmp	Super_and_Invincibility_Stars
0001D3BE 4E75                       	rts
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0                            ; Subroutine doing the extra logic for Super Sonic
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0                            
0001D3C0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D3C0                            
0001D3C0                            ; loc_1ABA6:
0001D3C0                            Sonic_Super:
0001D3C0                            ;	tst.b	(Transforming_Flag-1).w	; has Sonic transformed Once?
0001D3C0                            ;	bne.w	return_1AC3C		; if yes, branch (Keeps you from transforming multiple times while in the air)
0001D3C0 4A38 FE19                      tst.b    ($FFFFFE19).w; Ignore all this code if not Super Sonic
0001D3C4 6700 0000                      beq.w    return_1AC3C 
0001D3C8 4A38 FE1E                      tst.b    ($FFFFFE1E).w
0001D3CC 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3CE 217C 0000 0000 0004        	move.l	#Map_SuperSonic,4(a0)	; Load the Super Sonic map.
0001D3D6 45F9 0000 0000             	lea		(SuperSonicDynPLC).l,a2	; Load the Super Sonic DPLC.
0001D3DC 4A38 FE1E                  	tst.b	($FFFFFE1E).w		; check if the time counter is stopped
0001D3E0 6700                       	beq.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3E2                            ;	tst.b	($FFFFFF70).w		; check if the time counter is stopped
0001D3E2                            ;	bne.s	Sonic_RevertToNormal; if yes, revert to normal
0001D3E2 5378 F670                      subq.w    #1,($FFFFF670).w
0001D3E6 6A00 0000                      bpl.w    return_1AC3C
0001D3EA 31FC 003C F670                 move.w    #60,($FFFFF670).w; Reset frame counter to 60
0001D3F0 4A78 FE20                      tst.w    ($FFFFFE20).w
0001D3F4 6700                           beq.s    Sonic_RevertToNormal
0001D3F6 0038 0001 FE1D                 ori.b    #1,($FFFFFE1D).w
0001D3FC 0C78 0001 FE20                 cmpi.w    #1,($FFFFFE20).w
0001D402 6700                           beq.s    loc4
0001D404 0C78 000A FE20                 cmpi.w    #10,($FFFFFE20).w
0001D40A 6700                           beq.s    loc4
0001D40C 0C78 0064 FE20                 cmpi.w    #100,($FFFFFE20).w
0001D412 6600                           bne.s    loc5
0001D414                            loc4:
0001D414 0038 0080 FE1D                 ori.b    #$80,($FFFFFE1D).w
0001D41A                            loc5:
0001D41A 5378 FE20                      subq.w    #1,($FFFFFE20).w
0001D41E 6600 0000                      bne.w    return_1AC3C
0001D422                            ; loc_1ABF2:
0001D422                            Sonic_RevertToNormal:
0001D422                            ;	move.b	#1,(Transforming_Flag-1).w
0001D422 4238 FF88                  	clr.b	($FFFFFF88).w
0001D426 21FC 0000 0000 D004        	move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load the sonic map.
0001D42E                            ;	moveq	#$27,d0
0001D42E                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D42E                            ;	tst.b	($FFFFFE2C).w		; is sonic super?
0001D42E                            ;	bne.w	Sonic_RevertToNormal_2		; if yes, branch
0001D42E                            ;	moveq	#$24,d0
0001D42E                            ;	jsr	(LoadPLC).l	; load Super Sonic's stars patterns
0001D42E                            ;	jmp	Sonic_RevertToNormal_3
0001D42E                            ;Sonic_RevertToNormal_2:
0001D42E                            ;	moveq	#$28,d0
0001D42E                            ;	jsr	(LoadPLC).l	; load Super Sonic's life counter patterns
0001D42E                            ;Sonic_RevertToNormal_3:
0001D42E                            ;	tst.b	(Current_Boss_ID).w
0001D42E                            ;	bne.w	Sonic_RevertToNormal_4		; branch if in a boss fight
0001D42E 4A38 F7AA                  	tst.b	(Current_Boss_ID).w
0001D432 6700                       	beq.s	Sonic_RevertToNormalNonBoss		; branch if not in a boss fight
0001D434 4EB9 0000 0000             	jsr		super_GetBgm
0001D43A 4EF9 0000 0000             	jmp		Sonic_RevertToNormal_4
0001D440                            Sonic_RevertToNormalNonBoss:	
0001D440 4EB9 0000 0000             	jsr		super_GetBgmRevert
0001D446                            Sonic_RevertToNormal_4:
0001D446 11FC 0002 F65F                 move.b    #2,($FFFFF65F).w; Remove rotating palette
0001D44C 31FC 0028 F65C                 move.w    #$28,($FFFFF65C).w; Unknown
0001D452 11FC 0000 FE19                 move.b    #0,($FFFFFE19).w
0001D458 117C 0001 001D                 move.b    #1,next_anim(a0); Change animation back to normal ?
0001D45E 11FC 0000 FE2D                 move.b    #0,($FFFFFE2D).w; Remove invincibility
0001D464 45F8 F760                  	lea	(Sonic_top_speed).w,a2		; Load Sonic_top_speed into a2
0001D468 6000 0000                  	bra.w	ApplySpeedSettings		; Fetch Speed settings and return
0001D46C                            super_GetBgmRevert:
0001D46C                            
0001D46C                            super_GetBgm:
0001D46C                            ;		Boss Only
0001D46C                            ;		move.b	(a1,d0.w),d1
0001D46C                            ;		btst	d0,d1
0001D46C                            ;		beq.w	return_1AC3C
0001D46C                            ;		move.w  (Level_Music).w,d0
0001D46C 7000                       		moveq	#0,d0
0001D46E 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001D472 6600                       		bne.s	setmusiclevel
0001D474 3038 FF90                  		move.w  (Level_Music).w,d0
0001D478 4EF9 0000 0000             		jmp	loc_140A6_2
0001D47E                            setmusiclevel:
0001D47E 7000                       		moveq	#0,d0
0001D480 4A38 F7AA                  		tst.b	(Current_Boss_ID).w		; Does character have speedshoes?
0001D484 6700                       		beq.s	setmusic1				; If not, branch
0001D486 5200                       		addq.b	#1,d0				; Quickly add 1 to d0
0001D488                            setmusic1:
0001D488 0C29 0004 0021             		cmpi.b	#$4,collision_property(a1)
0001D48E 6F00 0000                  		ble.w	setmusic2				; If not, branch
0001D492 5400                       		addq.b	#2,d0				; Quickly add 2 to d0
0001D494                            setmusic2:
0001D494 D000                       		add.b	d0,d0				; Multiply itself
0001D496 323B 0000                  		move	BossMusicSettings(pc,d0.w),d1	; Load correct speed settings into a1
0001D49A 3001                       		move.w	d1,d0
0001D49C 4E75                       		rts					; Finish subroutine
0001D49E                            	
0001D49E                            BossMusicSettings:
0001D49E 000E                       	dc.w	$0E
0001D4A0 000D                       	dc.w	$0D
0001D4A2                            ;	dc.w	Level_Music
0001D4A2                            	even
0001D4A2                            
0001D4A2                            
0001D4A2                            
0001D4A2                            loc_140A6_2:
0001D4A2 4EF9 0000 0000             	jmp	(PlayMusic).l
0001D4A8                            	
0001D4A8                            return_1AC3C:
0001D4A8 4E75                           rts
0001D4AA                            ; End of subroutine Sonic_Super
0001D4AA                            
0001D4AA                            ; ---------------------------------------------------------------------------
0001D4AA                            ; Subroutine to make Sonic perform a spindash
0001D4AA                            ; ---------------------------------------------------------------------------
0001D4AA                             
0001D4AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4AA                             
0001D4AA                             
0001D4AA                            Sonic_Spindash:
0001D4AA 4A28 0039                  		tst.b	$39(a0)			; already spindashing?
0001D4AE 6600 0000                  		bne.w	loc2_1AC8E		; if set, branch
0001D4B2 0C28 0008 001C             		cmpi.b	#8,anim(a0)		; is anim duck
0001D4B8 6600 0000                  		bne.w	locret2_1AC8C		; if not, return
0001D4BC 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001D4C0 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001D4C4 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
0001D4C8 117C 001F 001C             		move.b	#$1F,anim(a0)		; set spindash anim (9 in s2)
0001D4CE 303C 00AB                  		move.w	#$AB,d0			; spin sound ($E0 in s2)
0001D4D2 4EB9 0000 325C             		jsr	(PlaySound_Special).l	; play spin sound
0001D4D8 588F                       		addq.l	#4,sp			; increment stack ptr
0001D4DA 117C 0001 0039             		move.b	#1,$39(a0)		; set spindash flag
0001D4E0 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
0001D4E6 0C28 000C 0028             		cmpi.b	#$C,subtype(a0)		; ??? oxygen remaining?
0001D4EC 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; ??? $D11C only seems
0001D4F2                            						; to be used in spindash 
0001D4F2                            loc2_1AC84:
0001D4F2 4EBA FA6A                  		jsr	Sonic_LevelBound
0001D4F6 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001D4FC                             
0001D4FC                            locret2_1AC8C:
0001D4FC 4E75                       		rts	
0001D4FE                            ; ---------------------------------------------------------------------------
0001D4FE                             
0001D4FE                            loc2_1AC8E:
0001D4FE 117C 001F 001C             		move.b	#$1F,anim(a0)
0001D504 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
0001D508 0800 0001                  		btst	#1,d0			; check down button
0001D50C 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001D510 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001D516 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
0001D51C 117C 0002 001C             		move.b	#2,anim(a0)		; set animation to roll
0001D522 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001D526 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
0001D52C 7000                       		moveq	#0,d0
0001D52E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001D532 D040                       		add.w	d0,d0			; double it
0001D534 317B 0000 0020             		move.w	spdsh_norm(pc,d0.w),inertia(a0) ; get normal speed
0001D53A 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001D53E 6700                       		beq.s	loc2_1ACD0		; if no, branch
0001D540 317B 0000 0020             		move.w	spdsh_super(pc,d0.w),inertia(a0) ; get super speed
0001D546                             
0001D546                            loc2_1ACD0:					; TODO: figure this out
0001D546 3028 0020                  		move.w	inertia(a0),d0		; get inertia
0001D54A 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001D54E D040                       		add.w	d0,d0			; double it
0001D550 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
0001D554 4440                       		neg.w	d0			; negate it
0001D556 0640 2000                  		addi.w	#$2000,d0		; add $2000
0001D55A 31C0 FC00                  		move.w	d0,($FFFFFC00).w	; move to $EED0
0001D55E 0828 0000 0022             		btst	#0,status(a0)		; is sonic facing right?
0001D564 6700                       		beq.s	loc2_1ACF4		; if not, branch
0001D566 4468 0020                  		neg.w	inertia(a0)			; negate inertia
0001D56A                             
0001D56A                            loc2_1ACF4:
0001D56A 08E8 0002 0022             		bset	#2,status(a0)		; set unused (in s1) flag
0001D570 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation
0001D576 303C 00B6                  		move.w	#$B6,d0			; spin release sound
0001D57A 4EB9 0000 3212             		jsr	(PlaySound).l	; play it!
0001D580 11FC 0008 FF5B             		move.b	#8,($FFFFFF5B).w 	; set afterimage counter to 8
0001D586 6000 0000                  		bra.w	loc2_1AD78
0001D58A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001D58A                            
0001D58A                            spdsh_norm:
0001D58A 0800                       		dc.w  $800		; 0
0001D58C 0880                       		dc.w  $880		; 1
0001D58E 0900                       		dc.w  $900		; 2
0001D590 0980                       		dc.w  $980		; 3
0001D592 0A00                       		dc.w  $A00		; 4
0001D594 0A80                       		dc.w  $A80		; 5
0001D596 0B00                       		dc.w  $B00		; 6
0001D598 0B80                       		dc.w  $B80		; 7
0001D59A 0C00                       		dc.w  $C00		; 8
0001D59C                             
0001D59C                            spdsh_super:
0001D59C 0B00                       		dc.w  $B00		; 0
0001D59E 0B80                       		dc.w  $B80		; 1
0001D5A0 0C00                       		dc.w  $C00		; 2
0001D5A2 0C80                       		dc.w  $C80		; 3
0001D5A4 0D00                       		dc.w  $D00		; 4
0001D5A6 0D80                       		dc.w  $D80		; 5
0001D5A8 0E00                       		dc.w  $E00		; 6
0001D5AA 0E80                       		dc.w  $E80		; 7
0001D5AC 0F00                       		dc.w  $F00		; 8
0001D5AE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001D5AE                             
0001D5AE                            loc2_1AD30:				; If still charging the dash...
0001D5AE 4A68 003A                  		tst.w	$3A(a0)		; check charge count
0001D5B2 6700                       		beq.s	loc2_1AD48	; if zero, branch
0001D5B4 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
0001D5B8 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
0001D5BA 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
0001D5BE 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
0001D5C0 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
0001D5C6                             
0001D5C6                            loc2_1AD48:
0001D5C6 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001D5CA 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
0001D5CE 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
0001D5D2 317C 1F00 001C             		move.w	#$1F00,anim(a0)		; reset spdsh animation
0001D5D8 303C 00AB                  		move.w	#$AB,d0			; was $E0 in sonic 2
0001D5DC 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001D5E2 4EB9 0000 3212             		jsr	(PlaySound).l	; play charge sound
0001D5E8 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001D5EE 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001D5F4 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001D5F6 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
0001D5FC                             
0001D5FC                            loc2_1AD78:
0001D5FC 588F                       		addq.l	#4,sp			; increase stack ptr
0001D5FE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001D604 6700                       		beq.s	loc2_1AD8C
0001D606 6400                       		bcc.s	loc2_1AD88
0001D608 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001D60C                             
0001D60C                            loc2_1AD88:
0001D60C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001D610                             
0001D610                            loc2_1AD8C:
0001D610 4EBA F94C                  		jsr	Sonic_LevelBound
0001D614 4EB9 0000 0000             		jsr	Sonic_AnglePos
0001D61A                            ;		move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001D61A 4E75                       		rts
0001D61C                            ; End of function Sonic_SpinDash
0001D61C                            
0001D61C                            
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ; Subroutine to	slow Sonic walking up a	slope
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            
0001D61C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D61C                            
0001D61C                            
0001D61C                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001D61C 1028 0026                  	move.b	angle(a0),d0
0001D620 0600 0060                  	addi.b	#$60,d0
0001D624 0C00 00C0                  	cmpi.b	#$C0,d0
0001D628 6400                       	bcc.s	locret_13508
0001D62A 1028 0026                  	move.b	angle(a0),d0
0001D62E 4EB9 0000 8DA4             	jsr	(CalcSine).l
0001D634 C1FC 0020                  	muls.w	#$20,d0
0001D638 E080                       	asr.l	#8,d0
0001D63A 4A68 0020                  	tst.w	inertia(a0)
0001D63E 6700                       	beq.s	locret_13508
0001D640 6B00                       	bmi.s	loc_13504
0001D642 4A40                       	tst.w	d0
0001D644 6700                       	beq.s	locret_13502
0001D646 D168 0020                  	add.w	d0,inertia(a0)	; change Sonic's $14
0001D64A                            
0001D64A                            locret_13502:
0001D64A 4E75                       		rts	
0001D64C                            ; ===========================================================================
0001D64C                            
0001D64C                            loc_13504:
0001D64C D168 0020                  		add.w	d0,inertia(a0)
0001D650                            
0001D650                            locret_13508:
0001D650 4E75                       		rts	
0001D652                            ; End of function Sonic_SlopeResist
0001D652                            
0001D652                            ; ---------------------------------------------------------------------------
0001D652                            ; Subroutine to	push Sonic down	a slope	while he's rolling
0001D652                            ; ---------------------------------------------------------------------------
0001D652                            
0001D652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D652                            
0001D652                            
0001D652                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
0001D652 1028 0026                  		move.b	$26(a0),d0
0001D656 0600 0060                  		addi.b	#$60,d0
0001D65A 0C00 00C0                  		cmpi.b	#-$40,d0
0001D65E 6400                       		bcc.s	locret_13544
0001D660 1028 0026                  		move.b	$26(a0),d0
0001D664 4EB9 0000 8DA4             		jsr	(CalcSine).l
0001D66A C1FC 0050                  		muls.w	#$50,d0
0001D66E E080                       		asr.l	#8,d0
0001D670 4A68 0020                  		tst.w	inertia(a0)
0001D674 6B00                       		bmi.s	loc_1353A
0001D676 4A40                       		tst.w	d0
0001D678 6A00                       		bpl.s	loc_13534
0001D67A E480                       		asr.l	#2,d0
0001D67C                            
0001D67C                            loc_13534:
0001D67C D168 0020                  		add.w	d0,inertia(a0)
0001D680 4E75                       		rts	
0001D682                            ; ===========================================================================
0001D682                            
0001D682                            loc_1353A:
0001D682 4A40                       		tst.w	d0
0001D684 6B00                       		bmi.s	loc_13540
0001D686 E480                       		asr.l	#2,d0
0001D688                            
0001D688                            loc_13540:
0001D688 D168 0020                  		add.w	d0,inertia(a0)
0001D68C                            
0001D68C                            locret_13544:
0001D68C 4E75                       		rts	
0001D68E                            ; End of function Sonic_RollRepel
0001D68E                            
0001D68E                            ; ---------------------------------------------------------------------------
0001D68E                            ; Subroutine to	push Sonic down	a slope
0001D68E                            ; ---------------------------------------------------------------------------
0001D68E                            
0001D68E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D68E                            
0001D68E                            
0001D68E                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001D68E 4E71                       		nop	
0001D690 4A28 0038                  		tst.b	$38(a0)
0001D694 6600                       		bne.s	locret_13580
0001D696 4A68 003E                  		tst.w	parent(a0)
0001D69A 6600                       		bne.s	loc_13582
0001D69C 1028 0026                  		move.b	$26(a0),d0
0001D6A0 0600 0020                  		addi.b	#$20,d0
0001D6A4 0200 00C0                  		andi.b	#$C0,d0
0001D6A8 6700                       		beq.s	locret_13580
0001D6AA 3028 0020                  		move.w	inertia(a0),d0
0001D6AE 6A00                       		bpl.s	loc_1356A
0001D6B0 4440                       		neg.w	d0
0001D6B2                            
0001D6B2                            loc_1356A:
0001D6B2 0C40 0280                  		cmpi.w	#$280,d0
0001D6B6 6400                       		bcc.s	locret_13580
0001D6B8 4268 0020                  		clr.w	inertia(a0)
0001D6BC 08E8 0001 0022             		bset	#1,status(a0)
0001D6C2 317C 001E 003E             		move.w	#$1E,parent(a0)
0001D6C8                            
0001D6C8                            locret_13580:
0001D6C8 4E75                       		rts	
0001D6CA                            ; ===========================================================================
0001D6CA                            
0001D6CA                            loc_13582:
0001D6CA 5368 003E                  		subq.w	#1,parent(a0)
0001D6CE 4E75                       		rts	
0001D6D0                            ; End of function Sonic_SlopeRepel
0001D6D0                            
0001D6D0                            ; ---------------------------------------------------------------------------
0001D6D0                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001D6D0                            ; ---------------------------------------------------------------------------
0001D6D0                            
0001D6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6D0                            
0001D6D0                            
0001D6D0                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001D6D0 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001D6D4 6700                       		beq.s	Sonic_JumpFlip	; if already 0,	branch
0001D6D6 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001D6D8                            
0001D6D8 5400                       		addq.b	#2,d0		; increase angle
0001D6DA 6400                       		bcc.s	loc_13596
0001D6DC 7000                       		moveq	#0,d0
0001D6DE                            
0001D6DE                            loc_13596:
0001D6DE 6000                       		bra.s	loc_1359E
0001D6E0                            ; ===========================================================================
0001D6E0                            
0001D6E0                            loc_13598:
0001D6E0 5500                       		subq.b	#2,d0		; decrease angle
0001D6E2 6400                       		bcc.s	loc_1359E
0001D6E4 7000                       		moveq	#0,d0
0001D6E6                            
0001D6E6                            loc_1359E:
0001D6E6 1140 0026                  		move.b	d0,$26(a0)
0001D6EA                            
0001D6EA                            ;locret_135A2:
0001D6EA                            ;		rts	
0001D6EA                            ; End of function Sonic_JumpAngle
0001D6EA                            
0001D6EA                            ; ---------------------------------------------------------------------------
0001D6EA                            ; Updates Sonic's secondary angle if he's tumbling
0001D6EA                            ; ---------------------------------------------------------------------------
0001D6EA                            
0001D6EA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001D6EA                            
0001D6EA                            ; loc_1AE64:
0001D6EA                            Sonic_JumpFlip:
0001D6EA 1028 0031                  	move.b	flip_angle(a0),d0
0001D6EE 6700                       	beq.s	return_1AEA8
0001D6F0 4A68 0020                  	tst.w	inertia(a0)
0001D6F4 6B00                       	bmi.s	Sonic_JumpLeftFlip
0001D6F6                            ; loc_1AE70:
0001D6F6                            Sonic_JumpRightFlip:
0001D6F6 1228 0034                  	move.b	flip_speed(a0),d1
0001D6FA D001                       	add.b	d1,d0
0001D6FC 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001D6FE 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001D702 6400                       	bcc.s	BranchTo_Sonic_JumpFlipSet
0001D704 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001D70A 7000                       	moveq	#0,d0
0001D70C                            
0001D70C                            BranchTo_Sonic_JumpFlipSet 
0001D70C 6000                       	bra.s	Sonic_JumpFlipSet
0001D70E                            ; ===========================================================================
0001D70E                            ; loc_1AE88:
0001D70E                            Sonic_JumpLeftFlip:
0001D70E 4A28 0035                  	tst.b	flip_turned(a0)
0001D712 66E2                       	bne.s	Sonic_JumpRightFlip
0001D714 1228 0034                  	move.b	flip_speed(a0),d1
0001D718 9001                       	sub.b	d1,d0
0001D71A 6400                       	bcc.s	Sonic_JumpFlipSet
0001D71C 5328 0033                  	subq.b	#1,flips_remaining(a0)
0001D720 6400                       	bcc.s	Sonic_JumpFlipSet
0001D722 117C 0000 0033             	move.b	#0,flips_remaining(a0)
0001D728 7000                       	moveq	#0,d0
0001D72A                            ; loc_1AEA4:
0001D72A                            Sonic_JumpFlipSet:
0001D72A 1140 0031                  	move.b	d0,flip_angle(a0)
0001D72E                            
0001D72E                            return_1AEA8:
0001D72E 4E75                       	rts
0001D730                            ; End of function Sonic_JumpFlip
0001D730                            
0001D730                            ; ---------------------------------------------------------------------------
0001D730                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001D730                            ; ---------------------------------------------------------------------------
0001D730                            
0001D730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D730                            
0001D730                            
0001D730                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001D730 3228 0010                  		move.w	x_vel(a0),d1
0001D734 3428 0012                  		move.w	y_vel(a0),d2
0001D738 4EB9 0000 9072             		jsr	(CalcAngle).l
0001D73E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001D742 0400 0020                  		subi.b	#$20,d0
0001D746 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001D74A 0200 00C0                  		andi.b	#$C0,d0
0001D74E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001D752 0C00 0040                  		cmpi.b	#$40,d0
0001D756 6700 0000                  		beq.w	loc_13680
0001D75A 0C00 0080                  		cmpi.b	#$80,d0
0001D75E 6700 0000                  		beq.w	loc_136E2
0001D762 0C00 00C0                  		cmpi.b	#-$40,d0
0001D766 6700 0000                  		beq.w	loc_1373E
0001D76A 6100 0000                  		bsr.w	Sonic_HitWall
0001D76E 4A41                       		tst.w	d1
0001D770 6A00                       		bpl.s	loc_135F0
0001D772 9368 0008                  		sub.w	d1,8(a0)
0001D776 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D77C                            
0001D77C                            loc_135F0:
0001D77C 6100 0000                  		bsr.w	sub_14EB4
0001D780 4A41                       		tst.w	d1
0001D782 6A00                       		bpl.s	loc_13602
0001D784 D368 0008                  		add.w	d1,8(a0)
0001D788 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D78E                            
0001D78E                            loc_13602:
0001D78E 6100 0000                  		bsr.w	Sonic_HitFloor
0001D792 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
0001D796 4A41                       		tst.w	d1
0001D798 6A00                       		bpl.s	locret_1367E
0001D79A 1428 0012                  		move.b	y_vel(a0),d2
0001D79E 5002                       		addq.b	#8,d2
0001D7A0 4402                       		neg.b	d2
0001D7A2 B202                       		cmp.b	d2,d1
0001D7A4 6C00                       		bge.s	loc_1361E
0001D7A6 B002                       		cmp.b	d2,d0
0001D7A8 6D00                       		blt.s	locret_1367E
0001D7AA                            
0001D7AA                            loc_1361E:
0001D7AA D368 000C                  		add.w	d1,$C(a0)
0001D7AE 1143 0026                  		move.b	d3,$26(a0)
0001D7B2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D7B6 117C 0000 001C             		move.b	#0,anim(a0)
0001D7BC 1003                       		move.b	d3,d0
0001D7BE 0600 0020                  		addi.b	#$20,d0
0001D7C2 0200 0040                  		andi.b	#$40,d0
0001D7C6 6600                       		bne.s	loc_1365C
0001D7C8 1003                       		move.b	d3,d0
0001D7CA 0600 0010                  		addi.b	#$10,d0
0001D7CE 0200 0020                  		andi.b	#$20,d0
0001D7D2 6700                       		beq.s	loc_1364E
0001D7D4 E0E8 0012                  		asr	y_vel(a0)
0001D7D8 6000                       		bra.s	loc_13670
0001D7DA                            ; ===========================================================================
0001D7DA                            
0001D7DA                            loc_1364E:
0001D7DA 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D7E0 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D7E6 4E75                       		rts	
0001D7E8                            ; ===========================================================================
0001D7E8                            
0001D7E8                            loc_1365C:
0001D7E8 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D7EE 0C68 0FC0 0012             		cmpi.w	#$FC0,y_vel(a0)
0001D7F4 6F00                       		ble.s	loc_13670
0001D7F6 317C 0FC0 0012             		move.w	#$FC0,y_vel(a0)
0001D7FC                            
0001D7FC                            loc_13670:
0001D7FC 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D802 4A03                       		tst.b	d3
0001D804 6A00                       		bpl.s	locret_1367E
0001D806 4468 0020                  		neg.w	inertia(a0)
0001D80A                            
0001D80A                            locret_1367E:
0001D80A 4E75                       		rts	
0001D80C                            ; ===========================================================================
0001D80C                            
0001D80C                            loc_13680:
0001D80C 6100 0000                  		bsr.w	Sonic_HitWall
0001D810 4A41                       		tst.w	d1
0001D812 6A00                       		bpl.s	loc_1369A
0001D814 9368 0008                  		sub.w	d1,8(a0)
0001D818 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D81E 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D824 4E75                       		rts	
0001D826                            ; ===========================================================================
0001D826                            
0001D826                            loc_1369A:
0001D826 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D82A 4A41                       		tst.w	d1
0001D82C 6A00                       		bpl.s	loc_136B4
0001D82E 9368 000C                  		sub.w	d1,$C(a0)
0001D832 4A68 0012                  		tst.w	y_vel(a0)
0001D836 6A00                       		bpl.s	locret_136B2
0001D838 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D83E                            
0001D83E                            locret_136B2:
0001D83E 4E75                       		rts	
0001D840                            ; ===========================================================================
0001D840                            
0001D840                            loc_136B4:
0001D840 4A68 0012                  		tst.w	y_vel(a0)
0001D844 6B00                       		bmi.s	locret_136E0
0001D846 6100 0000                  		bsr.w	Sonic_HitFloor
0001D84A 4A41                       		tst.w	d1
0001D84C 6A00                       		bpl.s	locret_136E0
0001D84E D368 000C                  		add.w	d1,$C(a0)
0001D852 1143 0026                  		move.b	d3,$26(a0)
0001D856 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D85A 117C 0000 001C             		move.b	#0,anim(a0)
0001D860 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D866 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D86C                            
0001D86C                            locret_136E0:
0001D86C 4E75                       		rts	
0001D86E                            ; ===========================================================================
0001D86E                            
0001D86E                            loc_136E2:
0001D86E 6100 0000                  		bsr.w	Sonic_HitWall
0001D872 4A41                       		tst.w	d1
0001D874 6A00                       		bpl.s	loc_136F4
0001D876 9368 0008                  		sub.w	d1,8(a0)
0001D87A 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D880                            
0001D880                            loc_136F4:
0001D880 6100 0000                  		bsr.w	sub_14EB4
0001D884 4A41                       		tst.w	d1
0001D886 6A00                       		bpl.s	loc_13706
0001D888 D368 0008                  		add.w	d1,8(a0)
0001D88C 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D892                            
0001D892                            loc_13706:
0001D892 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D896 4A41                       		tst.w	d1
0001D898 6A00                       		bpl.s	locret_1373C
0001D89A 9368 000C                  		sub.w	d1,$C(a0)
0001D89E 1003                       		move.b	d3,d0
0001D8A0 0600 0020                  		addi.b	#$20,d0
0001D8A4 0200 0040                  		andi.b	#$40,d0
0001D8A8 6600                       		bne.s	loc_13726
0001D8AA 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D8B0 4E75                       		rts	
0001D8B2                            ; ===========================================================================
0001D8B2                            
0001D8B2                            loc_13726:
0001D8B2 1143 0026                  		move.b	d3,$26(a0)
0001D8B6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D8BA 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D8C0 4A03                       		tst.b	d3
0001D8C2 6A00                       		bpl.s	locret_1373C
0001D8C4 4468 0020                  		neg.w	inertia(a0)
0001D8C8                            
0001D8C8                            locret_1373C:
0001D8C8 4E75                       		rts	
0001D8CA                            ; ===========================================================================
0001D8CA                            
0001D8CA                            loc_1373E:
0001D8CA 6100 0000                  		bsr.w	sub_14EB4
0001D8CE 4A41                       		tst.w	d1
0001D8D0 6A00                       		bpl.s	loc_13758
0001D8D2 D368 0008                  		add.w	d1,8(a0)
0001D8D6 317C 0000 0010             		move.w	#0,x_vel(a0)
0001D8DC 3168 0012 0020             		move.w	y_vel(a0),inertia(a0)
0001D8E2 4E75                       		rts	
0001D8E4                            ; ===========================================================================
0001D8E4                            
0001D8E4                            loc_13758:
0001D8E4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001D8E8 4A41                       		tst.w	d1
0001D8EA 6A00                       		bpl.s	loc_13772
0001D8EC 9368 000C                  		sub.w	d1,$C(a0)
0001D8F0 4A68 0012                  		tst.w	y_vel(a0)
0001D8F4 6A00                       		bpl.s	locret_13770
0001D8F6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D8FC                            
0001D8FC                            locret_13770:
0001D8FC 4E75                       		rts	
0001D8FE                            ; ===========================================================================
0001D8FE                            
0001D8FE                            loc_13772:
0001D8FE 4A68 0012                  		tst.w	y_vel(a0)
0001D902 6B00                       		bmi.s	locret_1379E
0001D904 6100 0000                  		bsr.w	Sonic_HitFloor
0001D908 4A41                       		tst.w	d1
0001D90A 6A00                       		bpl.s	locret_1379E
0001D90C D368 000C                  		add.w	d1,$C(a0)
0001D910 1143 0026                  		move.b	d3,$26(a0)
0001D914 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001D918 117C 0000 001C             		move.b	#0,anim(a0)
0001D91E 317C 0000 0012             		move.w	#0,y_vel(a0)
0001D924 3168 0010 0020             		move.w	x_vel(a0),inertia(a0)
0001D92A                            
0001D92A                            locret_1379E:
0001D92A 4E75                       		rts	
0001D92C                            ; End of function Sonic_Floor
0001D92C                            
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001D92C                            ; ---------------------------------------------------------------------------
0001D92C                            
0001D92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D92C                            
0001D92C                            
0001D92C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001D92C                            ;		bclr    #7,status(a0)
0001D92C                            ;		clr.b	(Transforming_Flag-1).w
0001D92C 08A8 0007 0022             		bclr	#7,$22(a0)	; clear jumpdash flag
0001D932 0828 0004 0022             		btst	#4,status(a0)
0001D938 6700                       		beq.s	loc_137AE
0001D93A 4A28 0039                  		tst.b	spindash_flag(a0)
0001D93E 6600                       		bne.s	loc_137AE
0001D940 117C 0000 001C             		move.b	#0,anim(a0)
0001D946                            
0001D946                            loc_137AE:
0001D946                            ;		clr.b	(Transforming_Flag).w
0001D946 4238 FF7F                  		clr.b	($FFFFFF7F).w 	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
0001D94A 08A8 0005 0022             		bclr	#5,status(a0)
0001D950 08A8 0001 0022             		bclr	#1,status(a0)
0001D956 08A8 0004 0022             		bclr	#4,status(a0)
0001D95C 0828 0002 0022             		btst	#2,status(a0)
0001D962 6700                       		beq.s	loc_137E4
0001D964 08A8 0002 0022             		bclr	#2,status(a0)
0001D96A 117C 0013 0016             		move.b	#$13,$16(a0)
0001D970 117C 0009 0017             		move.b	#9,$17(a0)
0001D976 117C 0000 001C             		move.b	#0,anim(a0)	; use running/walking animation
0001D97C 5B68 000C                  		subq.w	#5,$C(a0)
0001D980                            
0001D980                            loc_137E4:
0001D980 117C 0000 003C             		move.b	#0,$3C(a0)
0001D986 31FC 0000 F7D0             		move.w	#0,(Chain_Bonus_counter).w
0001D98C 4E75                       		rts	
0001D98E                            ; End of function Sonic_ResetOnFloor
0001D98E                            
0001D98E                            ; ===========================================================================
0001D98E                            ; ---------------------------------------------------------------------------
0001D98E                            ; Sonic when he gets hurt
0001D98E                            ; ---------------------------------------------------------------------------
0001D98E                            ; loc_1B120: Obj_01_Sub_4:
0001D98E                            Obj01_Hurt:
0001D98E 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001D992 6700                       	beq.s	Obj01_Hurt_Normal
0001D994 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001D99A 6700                       	beq.s	Obj01_Hurt_Normal
0001D99C 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001D9A2 4238 F7CC                  	clr.b	(Control_Locked).w
0001D9A6 4E75                       	rts
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; loc_1B13A:
0001D9A8                            Obj01_Hurt_Normal:
0001D9A8 4A28 0025                  	tst.b	routine_secondary(a0)
0001D9AC 6B00 0000                  	bmi.w	Sonic_HurtInstantRecover
0001D9B0 4EBA 8224                  	jsr	SpeedToPos
0001D9B4 0668 0030 0012             	addi.w	#$30,y_vel(a0)
0001D9BA 0828 0006 0022             	btst	#6,status(a0)
0001D9C0 6700                       	beq.s	hurt1
0001D9C2 0468 0020 0012             	subi.w	#$20,y_vel(a0)
0001D9C8                            hurt1:
0001D9C8 0C78 FF00 F72C             	cmpi.w	#-$100,(Camera_Min_Y_pos).w
0001D9CE 6600                       	bne.s	hurt2
0001D9D0 0268 07FF 000C             	andi.w	#$7FF,y_pos(a0)
0001D9D6                            hurt2:
0001D9D6 6100 0000                  	bsr.w	Sonic_HurtStop
0001D9DA 6100 F582                  	bsr.w	Sonic_LevelBound
0001D9DE 6100 ED48                  	bsr.w	Sonic_RecordPos
0001D9E2 6100 0000                  	bsr.w	Sonic_Animate
0001D9E6 6100 0000                  	bsr.w	LoadSonicDynPLC
0001D9EA 4EFA 8250                  	jmp	DisplaySprite
0001D9EE                            ; ===========================================================================
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            ; Subroutine to	stop Sonic falling after he's been hurt
0001D9EE                            ; ---------------------------------------------------------------------------
0001D9EE                            
0001D9EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9EE                            
0001D9EE                            
0001D9EE                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001D9EE 3038 F72E                  	move.w	(Camera_Max_Y_pos_now).w,d0
0001D9F2 0640 00E0                  	addi.w	#$E0,d0
0001D9F6 B068 000C                  	cmp.w	y_pos(a0),d0
0001D9FA 6D00 F5D2                  	blt.w	KillCharacter_Jmp
0001D9FE 6100 FD30                  	bsr.w	Sonic_Floor
0001DA02 0828 0001 0022             	btst	#1,status(a0)
0001DA08 6600                       	bne.s	return_1B1C8
0001DA0A 7000                       	moveq	#0,d0
0001DA0C 3140 0012                  	move.w	d0,y_vel(a0)
0001DA10 3140 0010                  	move.w	d0,x_vel(a0)
0001DA14 3140 0010                  	move.w	d0,x_vel(a0)
0001DA18 3140 0020                  	move.w	d0,inertia(a0)
0001DA1C 117C 0000 001C             	move.b	#0,anim(a0)
0001DA22 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001DA26 117C 0078 0030             	move.b	#$78,invulnerable_time(a0)
0001DA2C 117C 0000 0039             	move.b	#0,spindash_flag(a0)
0001DA32                            
0001DA32                            return_1B1C8:
0001DA32 4E75                       	rts
0001DA34                            ; ===========================================================================
0001DA34                            ; makes Sonic recover control after being hurt before landing
0001DA34                            ; loc_1B1CA:
0001DA34                            Sonic_HurtInstantRecover:
0001DA34 5528 0024                  	subq.b	#2,routine(a0)	; => Obj01_Control
0001DA38 117C 0000 0025             	move.b	#0,routine_secondary(a0)
0001DA3E 4EBA ECE8                  	jsr	Sonic_RecordPos
0001DA42 4EB9 0000 0000             	jsr	Sonic_Animate
0001DA48 4EB9 0000 0000             	jsr	LoadSonicDynPLC
0001DA4E 4EFA 81EC                  	jmp	DisplaySprite
0001DA52                            ; ---------------------------------------------------------------------------
0001DA52                            ; Sonic	when he	dies
0001DA52                            ; ---------------------------------------------------------------------------
0001DA52                            
0001DA52                            Obj01_Death:				; XREF: Obj01_Index
0001DA52 4A78 FFFA                  	tst.w	($FFFFFFFA).w
0001DA56 6700                       	beq.s	@cont
0001DA58 0838 0004 F605             	btst	#4,(Ctrl_1_Press).w
0001DA5E 6700                       	beq.s	@cont
0001DA60 31FC 0001 FE08             	move.w	#1,(Debug_placement_mode).w
0001DA66 4238 F7CC                  	clr.b	(Control_Locked).w
0001DA6A 4E75                       	rts
0001DA6C                            @cont:
0001DA6C 4228 0034                  	clr.b	speedshoes_time(a0)
0001DA70 6100 0000                  	bsr.w	CheckGameOver
0001DA74 4EB9 0000 0000             	jsr	ObjectMoveAndFall
0001DA7A 6100 ECAC                  	bsr.w	Sonic_RecordPos
0001DA7E 6100 0000                  	bsr.w	Sonic_Animate
0001DA82 6100 0000                  	bsr.w	LoadSonicDynPLC
0001DA86 4EFA 81B4                  	jmp	DisplaySprite
0001DA8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA8A                            
0001DA8A                            
0001DA8A                            GameOver:				; XREF: Obj01_Death
0001DA8A 3038 F704                  		move.w	($FFFFF704).w,d0
0001DA8E 0640 0100                  		addi.w	#$100,d0
0001DA92 B068 000C                  		cmp.w	$C(a0),d0
0001DA96 6C00 0000                  		bge.w	locret_13900
0001DA9A 317C FFC8 0012             		move.w	#-$38,y_vel(a0)
0001DAA0 5428 0024                  		addq.b	#2,routine(a0)
0001DAA4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001DAA8 0C38 0001 FE12             		cmpi.b	#1,($FFFFFE12).w	; are lives at min?
0001DAAE 6D00                       		blt.s	@skipsub
0001DAB0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001DAB4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001DAB8 6600                       		bne.s	loc_138D4
0001DABA 13FC 0001 00A1 30F1        		move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
0001DAC2 4239 0020 0001             		clr.b	($200001).l ; set lives in sram to 0
0001DAC8 4239 0020 011F             		clr.b	($20011F).l ; set lives in sram to 0
0001DACE 13FC 0000 00A1 30F1        		move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
0001DAD6                            
0001DAD6                            @skipsub:
0001DAD6 317C 0000 003A             		move.w	#0,$3A(a0)
0001DADC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001DAE2                            ;		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001DAE2                            ;		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001DAE2 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001DAE6                            
0001DAE6                            loc_138C2:
0001DAE6 303C 0027                  		move.w	#$27,d0
0001DAEA 4EB9 0000 3212             		jsr	(PlaySound).l	; play game over music
0001DAF0 7003                       		moveq	#3,d0
0001DAF2 4EF9 0000 36F6             		jmp	(LoadPLC).l	; load game over patterns
0001DAF8                            ; ===========================================================================
0001DAF8                            
0001DAF8                            loc_138D4:
0001DAF8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001DAFE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001DB02 6700                       		beq.s	locret_13900	; if not, branch
0001DB04 317C 0000 003A             		move.w	#0,$3A(a0)
0001DB0A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001DB10 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001DB16 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001DB1C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001DB22 60C2                       		bra.s	loc_138C2
0001DB24                            ; ===========================================================================
0001DB24                            
0001DB24                            locret_13900:
0001DB24 4E75                       		rts	
0001DB26                            ; End of function GameOver
0001DB26                            
0001DB26                            ; ===========================================================================
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26                            ; Sonic	when the level is restarted
0001DB26                            ; ---------------------------------------------------------------------------
0001DB26                            
0001DB26                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001DB26 4A68 003A                  		tst.w	spindash_counter(a0)
0001DB2A 6700                       		beq.s	locret_13914
0001DB2C 5368 003A                  		subq.w	#1,spindash_counter(a0)	; subtract 1 from time delay
0001DB30 6600                       		bne.s	locret_13914
0001DB32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001DB38 4EB9 0001 482E             		jsr Save_Progress
0001DB3E                            
0001DB3E                            locret_13914:
0001DB3E 4E75                       		rts	
0001DB40                            
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            ; Sonic when he's drowning
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                             
0001DB40                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001DB40                             
0001DB40                             
0001DB40                            Sonic_Drowned:
0001DB40 4EBA 8094                          jsr   SpeedToPos              ; Make Sonic able to move
0001DB44 0668 0010 0012                     addi.w  #$10,y_vel(a0)          ; Apply gravity
0001DB4A 4EBA EBDC                          jsr   Sonic_RecordPos    ; Record position
0001DB4E 4EB9 0000 0000                     jsr   Sonic_Animate           ; Animate Sonic
0001DB54 4EB9 0000 0000                     jsr   LoadSonicDynPLC           ; Load Sonic's DPLCs
0001DB5A 4EFA 80E0                          jmp   DisplaySprite           ; And finally, display Sonic
0001DB5E                            ; ---------------------------------------------------------------------------
0001DB5E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001DB5E                            ; ---------------------------------------------------------------------------
0001DB5E                            
0001DB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB5E                            
0001DB5E                            
0001DB5E                            Sonic_Loops:				; XREF: Obj01_Control
0001DB5E                            	;	cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?	; MJ: Commented out, we don't want SLZ having any rolling chunks =P
0001DB5E                            	;	beq.s	loc_13926	; if yes, branch
0001DB5E 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001DB62 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001DB66                            
0001DB66                            loc_13926:
0001DB66 3028 000C                  		move.w	$0C(a0),d0				; MJ: Load Y position
0001DB6A 3228 0008                  		move.w	$08(a0),d1				; MJ: Load X position
0001DB6E 0240 0780                  		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
0001DB72 E348                       		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
0001DB74 EE49                       		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
0001DB76 0201 007F                  		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
0001DB7A D041                       		add.w	d1,d0					; MJ: add together
0001DB7C 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: Load address of layout
0001DB80 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct 128x128 chunk ID based on the position of Sonic
0001DB84                            
0001DB84 0C01 0075                  		cmp.b	#$75,d1					; MJ: is the chunk 75 (Top top left S Bend)
0001DB88 6700 F4AA                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DB8C 0C01 0076                  		cmp.b	#$76,d1					; MJ: is the chunk 76 (Top top right S Bend)
0001DB90 6700 F4A2                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DB94 0C01 0077                  		cmp.b	#$77,d1					; MJ: is the chunk 77 (Top bottom left S Bend)
0001DB98 6700 F49A                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DB9C 0C01 0078                  		cmp.b	#$78,d1					; MJ: is the chunk 78 (Top bottom right S Bend)
0001DBA0 6700 F492                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBA4 0C01 0079                  		cmp.b	#$79,d1					; MJ: is the chunk 79 (Bottom top left S Bend)
0001DBA8 6700 F48A                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBAC 0C01 007A                  		cmp.b	#$7A,d1					; MJ: is the chunk 7A (Bottom top right S Bend)
0001DBB0 6700 F482                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBB4 0C01 007B                  		cmp.b	#$7B,d1					; MJ: is the chunk 7B (Bottom bottom left S Bend)
0001DBB8 6700 F47A                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBBC 0C01 007C                  		cmp.b	#$7C,d1					; MJ: is the chunk 7C (Bottom bottom right S Bend)
0001DBC0 6700 F472                  		beq.w	Obj01_ChkRoll				; MJ: if so, branch
0001DBC4                            
0001DBC4                            	;	cmp.b	($FFFFF7AE).w,d1			; MJ: this shite is commented out as it's used for loops (Which will be delt with by pathswappers)
0001DBC4                            	;	beq.w	Obj01_ChkRoll
0001DBC4                            	;	cmp.b	($FFFFF7AF).w,d1
0001DBC4                            	;	beq.w	Obj01_ChkRoll
0001DBC4                            	;	cmp.b	($FFFFF7AC).w,d1
0001DBC4                            	;	beq.s	loc_13976
0001DBC4                            	;	cmp.b	($FFFFF7AD).w,d1
0001DBC4                            	;	beq.s	loc_13966
0001DBC4 08A8 0006 0001             		bclr	#6,1(a0)
0001DBCA 4E75                       		rts	
0001DBCC                            ; ===========================================================================
0001DBCC                            
0001DBCC                            loc_13966:
0001DBCC 0828 0001 0022             		btst	#1,$22(a0)
0001DBD2 6700                       		beq.s	loc_13976
0001DBD4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DBDA 4E75                       		rts	
0001DBDC                            ; ===========================================================================
0001DBDC                            
0001DBDC                            loc_13976:
0001DBDC 3428 0008                  		move.w	8(a0),d2
0001DBE0 0C02 002C                  		cmpi.b	#$2C,d2
0001DBE4 6400                       		bcc.s	loc_13988
0001DBE6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DBEC 4E75                       		rts	
0001DBEE                            ; ===========================================================================
0001DBEE                            
0001DBEE                            loc_13988:
0001DBEE 0C02 00E0                  		cmpi.b	#-$20,d2
0001DBF2 6500                       		bcs.s	loc_13996
0001DBF4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001DBFA 4E75                       		rts	
0001DBFC                            ; ===========================================================================
0001DBFC                            
0001DBFC                            loc_13996:
0001DBFC 0828 0006 0001             		btst	#6,1(a0)
0001DC02 6600                       		bne.s	loc_139B2
0001DC04 1228 0026                  		move.b	$26(a0),d1
0001DC08 6700                       		beq.s	locret_139C2
0001DC0A 0C01 0080                  		cmpi.b	#-$80,d1
0001DC0E 6200                       		bhi.s	locret_139C2
0001DC10 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001DC16 4E75                       		rts	
0001DC18                            ; ===========================================================================
0001DC18                            
0001DC18                            loc_139B2:
0001DC18 1228 0026                  		move.b	$26(a0),d1
0001DC1C 0C01 0080                  		cmpi.b	#-$80,d1
0001DC20 6300                       		bls.s	locret_139C2
0001DC22 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001DC28                            
0001DC28                            locret_139C2:
0001DC28 4E75                       		rts	
0001DC2A                            ; End of function Sonic_Loops
0001DC2A                            
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A                            ; Subroutine to	animate	Sonic's sprites
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A                            
0001DC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC2A                            
0001DC2A                            
0001DC2A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001DC2A                            
0001DC2A 43F9 0000 0000             		lea	(SonicAniData).l,a1
0001DC30 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DC34 6700                       		beq.s	loc_12612
0001DC36 43F9 0000 0000             		lea	(SuperSonicAniData).l,a1
0001DC3C                            
0001DC3C                            loc_12612:
0001DC3C 7000                       		moveq	#0,d0
0001DC3E 1028 001C                  		move.b	anim(a0),d0
0001DC42 B028 001D                  		cmp.b	next_anim(a0),d0
0001DC46 6700                       		beq.s	SAnim_Do
0001DC48 1140 001D                  		move.b	d0,next_anim(a0)
0001DC4C 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DC52 117C 0000 001E             		move.b	#0,anim_frame_duration(a0)
0001DC58 08A8 0005 0022             		bclr	#5,status(a0)
0001DC5E                            
0001DC5E                            SAnim_Do:
0001DC5E D040                       		add.w	d0,d0
0001DC60 D2F1 0000                  		adda.w	(a1,d0.w),a1
0001DC64 1011                       		move.b	(a1),d0
0001DC66 6B00                       		bmi.s	SAnim_WalkRun
0001DC68 1228 0022                  		move.b	status(a0),d1
0001DC6C 0201 0001                  		andi.b	#1,d1
0001DC70 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001DC76 8328 0001                  		or.b	d1,render_flags(a0)
0001DC7A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DC7E 6A00                       		bpl.s	SAnim_Delay
0001DC80 1140 001E                  		move.b	d0,anim_frame_duration(a0)
0001DC84                            
0001DC84                            SAnim_Do2:
0001DC84                            					; Sonic_Animate+4A2j
0001DC84 7200                       		moveq	#0,d1
0001DC86 1228 001B                  		move.b	anim_frame(a0),d1	; load current frame number
0001DC8A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001DC8E 0C00 00FC                  		cmpi.b	#-4,d0				; MJ: is it a flag from FD to FF?
0001DC92 6400                       		bcc.s	SAnim_End_FF				; MJ: if so, branch to flag routines
0001DC94                            
0001DC94                            SAnim_Next:
0001DC94                            					; Sonic_Animate+96j
0001DC94 1140 001A                  		move.b	d0,mapping_frame(a0)	; load sprite number
0001DC98 5228 001B                  		addq.b	#1,anim_frame(a0)	; next frame number
0001DC9C                            
0001DC9C                            SAnim_Delay:
0001DC9C                            					; Sonic_Animate+440j ...
0001DC9C 4E75                       		rts
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            
0001DC9E                            SAnim_End_FF:
0001DC9E 5200                       		addq.b	#1,d0
0001DCA0 6600                       		bne.s	SAnim_End_FE
0001DCA2 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DCA8 1029 0001                  		move.b	1(a1),d0
0001DCAC 60E6                       		bra.s	SAnim_Next
0001DCAE                            ; ---------------------------------------------------------------------------
0001DCAE                            
0001DCAE                            SAnim_End_FE:
0001DCAE 5200                       		addq.b	#1,d0
0001DCB0 6600                       		bne.s	SAnim_End_FD
0001DCB2 1031 1002                  		move.b	2(a1,d1.w),d0
0001DCB6 9128 001B                  		sub.b	d0,anim_frame(a0)
0001DCBA 9200                       		sub.b	d0,d1
0001DCBC 1031 1001                  		move.b	1(a1,d1.w),d0
0001DCC0 60D2                       		bra.s	SAnim_Next
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            
0001DCC2                            SAnim_End_FD:
0001DCC2 5200                       		addq.b	#1,d0
0001DCC4 6600                       		bne.s	SAnim_End
0001DCC6 1171 1002 001C             		move.b	2(a1,d1.w),anim(a0)
0001DCCC                            
0001DCCC                            SAnim_End:
0001DCCC 4E75                       		rts
0001DCCE                            ; ---------------------------------------------------------------------------
0001DCCE                            
0001DCCE                            SAnim_WalkRun:
0001DCCE 5200                       		addq.b	#1,d0		; is animation walking/running?
0001DCD0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001DCD4                            ;		moveq	#0,d0
0001DCD4                            ;		tst.b	$2D(a0)
0001DCD4                            ;		bmi.w	SAnim_Tumble
0001DCD4                            ;		move.b	flip_angle(a0),d0
0001DCD4                            ;		bne.w	SAnim_Tumble
0001DCD4 7200                       		moveq	#0,d1
0001DCD6 1028 0026                  		move.b	angle(a0),d0	; get Sonic's angle
0001DCDA 6B00                       		bmi.s	loc_126C8
0001DCDC 6700                       		beq.s	loc_126C8
0001DCDE 5300                       		subq.b	#1,d0
0001DCE0                            
0001DCE0                            loc_126C8:
0001DCE0                            					; Sonic_Animate+C4j
0001DCE0 1428 0022                  		move.b	status(a0),d2
0001DCE4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001DCE8 6600                       		bne.s	loc_126D4	; if yes, branch
0001DCEA 4600                       		not.b	d0		; reverse angle
0001DCEC                            
0001DCEC                            loc_126D4:
0001DCEC 0600 0010                  		addi.b	#$10,d0	; add $10 to angle
0001DCF0 6A00                       		bpl.s	loc_126DC	; if angle is $0-$7F, branch
0001DCF2 7203                       		moveq	#3,d1
0001DCF4                            
0001DCF4                            loc_126DC:
0001DCF4 0228 00FC 0001             		andi.b	#-4,render_flags(a0)
0001DCFA B302                       		eor.b	d1,d2
0001DCFC 8528 0001                  		or.b	d2,render_flags(a0)
0001DD00 0828 0005 0022             		btst	#5,status(a0)
0001DD06 6600 0000                  		bne.w	SAnim_Push
0001DD0A E808                       		lsr.b	#4,d0
0001DD0C 0200 0006                  		andi.b	#6,d0
0001DD10 3428 0020                  		move.w	inertia(a0),d2
0001DD14 6A00                       		bpl.s	loc_12700
0001DD16 4442                       		neg.w	d2
0001DD18                            
0001DD18                            loc_12700:
0001DD18 4A28 002B                  		tst.b	status_secondary(a0)
0001DD1C 6A00 0000                  		bpl.w	loc_1270A
0001DD20 D442                       		add.w	d2,d2
0001DD22                            
0001DD22                            loc_1270A:
0001DD22 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DD26 6600                       		bne.s	SAnim_Super
0001DD28 43F9 0000 0000             		lea	(SonAni_Run).l,a1	; use running animation
0001DD2E 0C42 0600                  		cmpi.w	#$600,d2		; is Sonic at running speed?
0001DD32 6400                       		bcc.s	loc_12724			; if so, use running animation
0001DD34 43F9 0000 0000             		lea	(SonAni_Walk).l,a1	; if not, use walking animation
0001DD3A D000                       		add.b	d0,d0
0001DD3C                            
0001DD3C                            loc_12724:
0001DD3C D000                       		add.b	d0,d0
0001DD3E 1600                       		move.b	d0,d3
0001DD40 7200                       		moveq	#0,d1
0001DD42 1228 001B                  		move.b	anim_frame(a0),d1
0001DD46 1031 1001                  		move.b	1(a1,d1.w),d0
0001DD4A 0C00 00FF                  		cmpi.b	#-1,d0
0001DD4E 6600                       		bne.s	loc_12742
0001DD50 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DD56 1029 0001                  		move.b	1(a1),d0
0001DD5A                            
0001DD5A                            loc_12742:
0001DD5A 1140 001A                  		move.b	d0,mapping_frame(a0)
0001DD5E D728 001A                  		add.b	d3,mapping_frame(a0)
0001DD62 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DD66 6A00                       		bpl.s	locret_12764
0001DD68 4442                       		neg.w	d2
0001DD6A 0642 0800                  		addi.w	#$800,d2
0001DD6E 6A00                       		bpl.s	loc_1275A
0001DD70 7400                       		moveq	#0,d2
0001DD72                            
0001DD72                            loc_1275A:
0001DD72 E04A                       		lsr.w	#8,d2
0001DD74 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DD78 5228 001B                  		addq.b	#1,anim_frame(a0)		; modify frame number
0001DD7C                            
0001DD7C                            locret_12764:
0001DD7C 4E75                       		rts
0001DD7E                            ; ---------------------------------------------------------------------------
0001DD7E                            
0001DD7E                            SAnim_Super:
0001DD7E 43F9 0000 0000             		lea	(SupSonAni_Run).l,a1	; use fast animation
0001DD84 0C42 0800                  		cmpi.w	#$800,d2		; is Sonic moving fast?
0001DD88 6400                       		bcc.s	SAnim_SuperRun		; if yes, branch
0001DD8A 43F9 0000 0000             		lea	(SupSonAni_Walk).l,a1	; use slower animation
0001DD90 D000                       		add.b	d0,d0
0001DD92 D000                       		add.b	d0,d0
0001DD94 6000                       		bra.s	SAnim_SuperWalk
0001DD96                            ; ---------------------------------------------------------------------------
0001DD96                            
0001DD96                            SAnim_SuperRun:
0001DD96 D000                       		add.b	d0,d0
0001DD98                            
0001DD98                            SAnim_SuperWalk:
0001DD98 1600                       		move.b	d0,d3
0001DD9A 7200                       		moveq	#0,d1
0001DD9C 1228 001B                  		move.b	anim_frame(a0),d1
0001DDA0 1031 1001                  		move.b	1(a1,d1.w),d0
0001DDA4 0C00 00FF                  		cmpi.b	#-1,d0
0001DDA8 6600                       		bne.s	loc_1279C
0001DDAA 117C 0000 001B             		move.b	#0,anim_frame(a0)
0001DDB0 1029 0001                  		move.b	1(a1),d0
0001DDB4                            
0001DDB4                            loc_1279C:
0001DDB4 1140 001A                  		move.b	d0,mapping_frame(a0)
0001DDB8 D728 001A                  		add.b	d3,mapping_frame(a0)
0001DDBC 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0001DDC0 6A00                       		bpl.s	locret_127BE
0001DDC2 4442                       		neg.w	d2
0001DDC4 0642 0800                  		addi.w	#$800,d2
0001DDC8 6A00                       		bpl.s	loc_127B4
0001DDCA 7400                       		moveq	#0,d2
0001DDCC                            
0001DDCC                            loc_127B4:
0001DDCC E04A                       		lsr.w	#8,d2
0001DDCE 1142 001E                  		move.b	d2,anim_frame_duration(a0)
0001DDD2 5228 001B                  		addq.b	#1,anim_frame(a0)
0001DDD6                            
0001DDD6                            locret_127BE:
0001DDD6 4E75                       		rts
0001DDD8                            ; ---------------------------------------------------------------------------
0001DDD8                            ; loc_1B520:
0001DDD8                            
0001DDD8                            SAnim_Tumble:
0001DDD8 1028 0031                  	move.b	flip_angle(a0),d0
0001DDDC 7200                       	moveq	#0,d1
0001DDDE 1428 0022                  	move.b	status(a0),d2
0001DDE2 0202 0001                  	andi.b	#1,d2
0001DDE6 6600                       	bne.s	SAnim_Tumble_Left
0001DDE8                            
0001DDE8 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001DDEE 0600 000B                  	addi.b	#$B,d0
0001DDF2 80FC 0016                  	divu.w	#$16,d0
0001DDF6 0600 0031                  	addi.b	#$31,d0
0001DDFA 1140 001A                  	move.b	d0,mapping_frame(a0)
0001DDFE 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001DE04 4E75                       	rts
0001DE06                            ; ===========================================================================
0001DE06                            ; loc_1B54E:
0001DE06                            SAnim_Tumble_Left:
0001DE06 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
0001DE0C 4A28 0035                  	tst.b	flip_turned(a0)
0001DE10 6700                       	beq.s	loc_1B566
0001DE12 0028 0001 0001             	ori.b	#1,render_flags(a0)
0001DE18 0600 000B                  	addi.b	#$B,d0
0001DE1C 6000                       	bra.s	loc_1B572
0001DE1E                            ; ===========================================================================
0001DE1E                            
0001DE1E                            loc_1B566:
0001DE1E 0028 0003 0001             	ori.b	#3,render_flags(a0)
0001DE24 4400                       	neg.b	d0
0001DE26 0600 008F                  	addi.b	#$8F,d0
0001DE2A                            
0001DE2A                            loc_1B572:
0001DE2A 80FC 0016                  	divu.w	#$16,d0
0001DE2E 0600 0031                  	addi.b	#$31,d0
0001DE32 1140 001A                  	move.b	d0,mapping_frame(a0)
0001DE36 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
0001DE3C 4E75                       	rts
0001DE3E                            ; ===========================================================================
0001DE3E                            ; loc_1B586:
0001DE3E                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001DE3E 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001DE42 6A00 FE58                  		bpl.w	SAnim_Delay			; if time remains, branch
0001DE46 5200                       		addq.b	#1,d0		; is the start flag = $FE ?
0001DE48 6600                       		bne.s	SAnim_Push	; if not, branch
0001DE4A 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001DE4E 6A00                       		bpl.s	loc_13ADE
0001DE50 4442                       		neg.w	d2
0001DE52                            
0001DE52                            loc_13ADE:
0001DE52 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001DE58 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001DE5C 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001DE5E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001DE64                            
0001DE64                            loc_13AF0:
0001DE64 4442                       		neg.w	d2
0001DE66 0642 0400                  		addi.w	#$400,d2
0001DE6A 6A00                       		bpl.s	loc_13AFA
0001DE6C 7400                       		moveq	#0,d2
0001DE6E                            
0001DE6E                            loc_13AFA:
0001DE6E E04A                       		lsr.w	#8,d2
0001DE70 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DE74 1228 0022                  		move.b	status(a0),d1
0001DE78 0201 0001                  		andi.b	#1,d1
0001DE7C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DE82 8328 0001                  		or.b	d1,1(a0)
0001DE86 6000 FDFC                  		bra.w	SAnim_Do2
0001DE8A                            ; ===========================================================================
0001DE8A                            
0001DE8A                            SAnim_Push:				; XREF: SAnim_RollJump
0001DE8A 5328 001E                  		subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
0001DE8E 6A00 FE0C                  		bpl.w	SAnim_Delay			; if time remains, branch
0001DE92 3428 0020                  		move.w	inertia(a0),d2	; get Sonic's speed
0001DE96 6B00                       		bmi.s	loc_13B1E
0001DE98 4442                       		neg.w	d2
0001DE9A                            
0001DE9A                            loc_13B1E:
0001DE9A 0642 0800                  		addi.w	#$800,d2
0001DE9E 6A00                       		bpl.s	loc_13B26
0001DEA0 7400                       		moveq	#0,d2
0001DEA2                            
0001DEA2                            loc_13B26:
0001DEA2 EC4A                       		lsr.w	#6,d2
0001DEA4 1142 001E                  		move.b	d2,anim_frame_duration(a0)	; modify frame duration
0001DEA8 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001DEAE 4A38 FE19                  		tst.b	(Super_Sonic_flag).w
0001DEB2 6700                       		beq.s	@setcorrectani
0001DEB4 43F9 0000 0000             		lea	(SupSonAni_Push).l,a1
0001DEBA 6400 0000                  		bcc.w	@setcorrectani
0001DEBE                            @setcorrectani:
0001DEBE 1228 0022                  		move.b	status(a0),d1
0001DEC2 0201 0001                  		andi.b	#1,d1
0001DEC6 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001DECC 8328 0001                  		or.b	d1,1(a0)
0001DED0 6000 FDB2                  		bra.w	SAnim_Do2
0001DED4                            ; ===========================================================================
0001DED4                            ; End of function Sonic_Animate
0001DED4                            
0001DED4                            SonicAniData:
0001DED4                            	include "_anim\Sonic.asm"
0001DED4                            ; ---------------------------------------------------------------------------
0001DED4                            ; Animation script - Sonic
0001DED4                            ; ---------------------------------------------------------------------------
0001DED4 0000                       		dc.w SonAni_Walk-SonicAniData	;0
0001DED6 0000                       		dc.w SonAni_Run-SonicAniData	;1
0001DED8 0000                       		dc.w SonAni_Roll-SonicAniData	;2
0001DEDA 0000                       		dc.w SonAni_Roll2-SonicAniData	;3
0001DEDC 0000                       		dc.w SonAni_Push-SonicAniData	;4
0001DEDE 0000                       		dc.w SonAni_Wait-SonicAniData	;5
0001DEE0 0000                       		dc.w SonAni_Balance-SonicAniData	;6
0001DEE2 0000                       		dc.w SonAni_LookUp-SonicAniData	;7
0001DEE4 0000                       		dc.w SonAni_Duck-SonicAniData	;8
0001DEE6 0000                       		dc.w SonAni_Warp1-SonicAniData	;9
0001DEE8 0000                       		dc.w SonAni_Warp2-SonicAniData	;A
0001DEEA 0000                       		dc.w SonAni_Warp3-SonicAniData	;B
0001DEEC 0000                       		dc.w SonAni_Warp4-SonicAniData	;C
0001DEEE 0000                       		dc.w SonAni_Stop-SonicAniData	;D
0001DEF0 0000                       		dc.w SonAni_Float1-SonicAniData	;E
0001DEF2 0000                       		dc.w SonAni_Float2-SonicAniData	;F
0001DEF4 0000                       		dc.w SonAni_Spring-SonicAniData	;10
0001DEF6 0000                       		dc.w SonAni_LZHang-SonicAniData	;11
0001DEF8 0000                       		dc.w SonAni_Leap1-SonicAniData	;12
0001DEFA 0000                       		dc.w SonAni_Leap2-SonicAniData	;13
0001DEFC 0000                       		dc.w SonAni_Surf-SonicAniData	;14
0001DEFE 0000                       		dc.w SonAni_Bubble-SonicAniData	;15
0001DF00 0000                       		dc.w SonAni_Death1-SonicAniData	;16
0001DF02 0000                       		dc.w SonAni_Drown-SonicAniData	;17
0001DF04 0000                       		dc.w SonAni_Death2-SonicAniData	;18
0001DF06 0000                       		dc.w SonAni_Shrink-SonicAniData	;19
0001DF08 0000                       		dc.w SonAni_Hurt-SonicAniData	;1A
0001DF0A 0000                       		dc.w SonAni_LZSlide-SonicAniData	;1B
0001DF0C 0000                       		dc.w SonAni_Blank-SonicAniData	;1C
0001DF0E 0000                       		dc.w SonAni_Float3-SonicAniData	;1D
0001DF10 0000                       		dc.w SonAni_Float4-SonicAniData	;1E
0001DF12 0000                       		dc.w SonAni_Warp1-SonicAniData	;1F
0001DF14 0000                       		dc.w SonAni_Spring2-SonicAniData	;20
0001DF16 0000                       		dc.w SonAni_Spring3-SonicAniData	;21
0001DF18 0000                       		dc.w SupSonAni_Transform-SonicAniData	;22
0001DF1A 0000                       		dc.w SonAni_EndPose-SonicAniData	;23
0001DF1C FF07 0801 0203 0405 06FF   SonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001DF26 FF21 2223 24FF FFFF FFFF   SonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001DF30 FE96 9796 9896 9996 9AFF   SonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001DF3A FE96 9796 9896 9996 9AFF   SonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001DF44 FDB6 B7B8 B9FF FFFF FFFF   SonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001DF4E 05BA BABA BABA BABA BABA+  SonAni_Wait:	dc.b	5, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA
0001DF6E                            					; DATA XREF: ROM:00012AA6o
0001DF6E BABA BABA BABA BABA BABA+  		dc.b  $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BA, $BA, $BA, $BA, $BA, $BA, $BA,	$BA, $BB, $BC, $BC, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD
0001DF8E BEBE BDBD BEBE BDBD BEBE+  		dc.b  $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $BD, $BD, $BE, $BE,	$BD, $BD, $BE, $BE, $AD, $AD, $AD, $AD,	$AD, $AD, $AE, $AE, $AE, $AE
0001DFAE AEAE AFD9 D9D9 D9D9 D9AF+  		dc.b  $AE, $AE,	$AF, $D9, $D9, $D9, $D9, $D9, $D9, $AF,	$AF, $FE, $35
0001DFBB 07A4 A5A6 FF               SonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001DFC0 05C3 C4FE 01               SonAni_LookUp:	dc.b	5, $C3,	$C4, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001DFC5 059B 9CFE 01               SonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001DFCA 0086 8786 8886 8986 8A86+  SonAni_Warp1:	dc.b	0, $86,	$87, $86, $88, $86, $89, $86, $8A, $86,	$8B, $FF
0001DFD6 09BA C5C6 C6C6 C6C6 C6C7+  SonAni_Warp2:	dc.b	9, $BA,	$C5, $C6, $C6, $C6, $C6, $C6, $C6, $C7,	$C7, $C7, $C7, $C7, $C7, $C7, $C7, $C7,	$C7, $C7, $C7, $FD,   0
0001DFED 01BB FD00                  SonAni_Warp3:	dc.b   1,  $BB,$FD,  0
0001DFF1 05A1 A2A3 FF               SonAni_Warp4:	dc.b   5, $A1,	$A2, $A3, $FF
0001DFF6 039D 9E9F A0FD 00          SonAni_Stop:	dc.b	3, $9D,	$9E, $9F, $A0, $FD,   0	; DATA XREF: ROM:00012AA6o
0001DFFD 07C8 FF                    SonAni_Float1:	dc.b	7, $C8,	$FF	; DATA XREF: ROM:00012AA6o
0001E000 07C8 C9CA CBCC CDCE CFFF   SonAni_Float2:	dc.b	7, $C8,	$C9, $CA, $CB, $CC, $CD, $CE, $CF, $FF
0001E00A 2F8E FD00                  SonAni_Spring:	dc.b  $2F, $8E,	$FD,   0 ; DATA	XREF: ROM:00012AA6o
0001E00E                            ;SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001E00E 01AA ABFF                  SonAni_LZHang:	dc.b	1, $AA,	$AB, $FF ; DATA	XREF: ROM:00012AA6o
0001E012 0F43 4343 FE01             SonAni_Leap1:	dc.b   $F, $43,	$43, $43, $FE,	 1 ; DATA XREF:	ROM:00012AA6o
0001E018 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001E01E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001E022 0BAC AC03 04FD 00          SonAni_Bubble:		dc.b   $B, $AC,	$AC,   3,   4, $FD,   0	; DATA XREF: ROM:00012AA6o
0001E029 20A8 FF                    SonAni_Death1:	dc.b  $20, $A8,	$FF	; DATA XREF: ROM:00012AA6o
0001E02C 20A9 FF                    SonAni_Drown:	dc.b  $20, $A9,	$FF	; DATA XREF: ROM:00012AA6o
0001E02F 20A7 FF                    SonAni_Death2:	dc.b  $20, $A7,	$FF	; DATA XREF: ROM:00012AA6o
0001E032                            
0001E032 09D7 D8FF                  SonAni_Shrink:	 dc.b	9, $D7,	$D8, $FF ; DATA	XREF: ROM:00012AA6o
0001E036 408D FF                    SonAni_Hurt:	dc.b  $40, $8D,	$FF	; DATA XREF: ROM:00012AA6o
0001E039 098C 8DFF                  SonAni_LZSlide:	dc.b	9, $8C,	$8D, $FF ; DATA	XREF: ROM:00012AA6o
0001E03D                            					; ROM:00012C70t
0001E03D 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001E041 13D0 D1FF                  SonAni_Float3:	dc.b  $13, $D0,	$D1, $FF ; DATA	XREF: ROM:00012AA6o
0001E045                            					; ROM:00012C74t
0001E045 03CF C8C9 CACB FE04        SonAni_Float4:	dc.b	3, $CF,	$C8, $C9, $CA, $CB, $FE,   4 ; DATA XREF: ROM:00012AA6o
0001E04D 0058 5958 5A58 5B58 5C58+  SonAni_Spin_Dash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
0001E059 015E 60FD 2100             SonAni_Spring2:	dc.b 1, $5E, $60, $FD, $21,  0
0001E05F 015E 60FD 2000             SonAni_Spring3:	dc.b 1, $5E, $60, $FD, $20,  0
0001E065 07B0 B2B2 B2B2 B2B2 B1B2+  SonAni_EndPose:	dc.b 7, $B0,	$B2, $B2, $B2, $B2, $B2, $B2, $B1, $B2,	$B3, $B2, $FE,	 4
0001E073 00                         		align 2
0001E073 00                         		align 2
0001E074                            SuperSonicAniData:     
0001E074                                include "_anim\Super Sonic.asm"
0001E074                            ; ---------------------------------------------------------------------------
0001E074                            ; Animation script - Super Sonic
0001E074                            ; ---------------------------------------------------------------------------
0001E074 0000                       		dc.w SupSonAni_Walk-SuperSonicAniData
0001E076 0000                       		dc.w SupSonAni_Run-SuperSonicAniData
0001E078 FEBC                       		dc.w SonAni_Roll-SuperSonicAniData
0001E07A FEC6                       		dc.w SonAni_Roll2-SuperSonicAniData
0001E07C 0000                       		dc.w SupSonAni_Push-SuperSonicAniData
0001E07E 0000                       		dc.w SupSonAni_Wait-SuperSonicAniData
0001E080 0000                       		dc.w SupSonAni_Balance-SuperSonicAniData
0001E082 FF4C                       		dc.w SonAni_LookUp-SuperSonicAniData
0001E084 0000                       		dc.w SupSonAni_Duck-SuperSonicAniData
0001E086 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData
0001E088 FF62                       		dc.w SonAni_Warp2-SuperSonicAniData
0001E08A FF79                       		dc.w SonAni_Warp3-SuperSonicAniData
0001E08C FF7D                       		dc.w SonAni_Warp4-SuperSonicAniData
0001E08E FF82                       		dc.w SonAni_Stop-SuperSonicAniData
0001E090 FF89                       		dc.w SonAni_Float1-SuperSonicAniData
0001E092 FF8C                       		dc.w SonAni_Float2-SuperSonicAniData
0001E094 FF96                       		dc.w SonAni_Spring-SuperSonicAniData
0001E096 FF9A                       		dc.w SonAni_LZHang-SuperSonicAniData
0001E098 FF9E                       		dc.w SonAni_Leap1-SuperSonicAniData
0001E09A FFA4                       		dc.w SonAni_Leap2-SuperSonicAniData
0001E09C FFAA                       		dc.w SonAni_Surf-SuperSonicAniData
0001E09E FFAE                       		dc.w SonAni_Bubble-SuperSonicAniData
0001E0A0 FFB5                       		dc.w SonAni_Death1-SuperSonicAniData
0001E0A2 FFB8                       		dc.w SonAni_Drown-SuperSonicAniData
0001E0A4 FFBB                       		dc.w SonAni_Death2-SuperSonicAniData
0001E0A6 FFBE                       		dc.w SonAni_Shrink-SuperSonicAniData
0001E0A8 FFC2                       		dc.w SonAni_Hurt-SuperSonicAniData
0001E0AA FFC5                       		dc.w SonAni_LZSlide-SuperSonicAniData
0001E0AC FFC9                       		dc.w SonAni_Blank-SuperSonicAniData
0001E0AE FFCD                       		dc.w SonAni_Float3-SuperSonicAniData
0001E0B0 FFD1                       		dc.w SonAni_Float4-SuperSonicAniData
0001E0B2 FF56                       		dc.w SonAni_Warp1-SuperSonicAniData	;1F
0001E0B4 FFE5                       		dc.w SonAni_Spring2-SuperSonicAniData	;20
0001E0B6 FFEB                       		dc.w SonAni_Spring3-SuperSonicAniData	;21
0001E0B8 0000                       		dc.w SupSonAni_Transform-SuperSonicAniData
0001E0BA FFF1                       		dc.w SonAni_EndPose-SuperSonicAniData	;23
0001E0BC FF07 0801 0203 0405 06FF   SupSonAni_Walk:	dc.b  $FF,   7,	  8,   1,   2,	 3,   4,   5,	6, $FF
0001E0C6 FF21 2223 24FF FFFF FFFF   SupSonAni_Run:	dc.b  $FF, $21,	$22, $23, $24, $FF, $FF, $FF, $FF, $FF
0001E0D0 FE96 9796 9896 9996 9AFF   SupSonAni_Roll:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E0DA FE96 9796 9896 9996 9AFF   SupSonAni_Roll2:	dc.b  $FE, $96,	$97, $96, $98, $96, $99, $96, $9A, $FF
0001E0E4 FDB6 B7B8 B9FF FFFF FFFF   SupSonAni_Push:	dc.b  $FD, $B6,	$B7, $B8, $B9, $FF, $FF, $FF, $FF, $FF
0001E0EE 07C5 C6FF                  SupSonAni_Wait:	dc.b	7, $C5, $C6, $FF
0001E0F2 07A4 A5A6 FF               SupSonAni_Balance:	dc.b	7, $A4,	$A5, $A6, $FF ;	DATA XREF: ROM:00012AA6o
0001E0F7 059B 9CFE 01               SupSonAni_Duck:	dc.b	5, $9B,	$9C, $FE,   1 ;	DATA XREF: ROM:00012AA6o
0001E0FC 02D2 D2D3 D3D4 D5D5 D5D5+  SupSonAni_Transform:	dc.b	2, $D2,	$D2, $D3, $D3, $D4, $D5, $D5, $D5, $D5,	$D5, $D5, $D5, $D5, $FD,   0
0001E10C                            					; DATA XREF: ROM:00012AA6o
0001E10C                            							align 2
0001E10C                            							align 2
0001E10C                                            even
0001E10C                            ; ---------------------------------------------------------------------------
0001E10C                            ; This table converts art using	palette	indexes	set for	S&K to palette indexes set for S2.
0001E10C                            ; Format: The rightmost	nybble of entry	X in any row = the new index that replaces color X.
0001E10C                            ; Similarly, the leftmost nybble of entry X in any column = the	new index that replaces	color X.
0001E10C                            ;
0001E10C                            ; Specific replacements:
0001E10C                            ;
0001E10C                            ; $0 ->	$0
0001E10C                            ; $1 ->	$6
0001E10C                            ; $2 ->	$5
0001E10C                            ; $3 ->	$3
0001E10C                            ; $4 ->	$2
0001E10C                            ; $5 ->	$4
0001E10C                            ; $6 ->	$C
0001E10C                            ; $7 ->	$D
0001E10C                            ; $8 ->	$E
0001E10C                            ; $9 ->	$F
0001E10C                            ; $A ->	$A
0001E10C                            ; $B ->	$B
0001E10C                            ; $C ->	$7
0001E10C                            ; $D ->	$8
0001E10C                            ; $E ->	$9
0001E10C                            ; $F ->	$1
0001E10C                            ; ---------------------------------------------------------------------------
0001E10C 0006 0503 0204 0C0D 0E0F+  ArtConvTable:	dc.b $00,$06,$05,$03,$02,$04,$0C,$0D,$0E,$0F,$0A,$0B,$07,$08,$09,$01; 0	; ...
0001E11C 6066 6563 6264 6C6D 6E6F+  		dc.b $60,$66,$65,$63,$62,$64,$6C,$6D,$6E,$6F,$6A,$6B,$67,$68,$69,$61; 16
0001E12C 5056 5553 5254 5C5D 5E5F+  		dc.b $50,$56,$55,$53,$52,$54,$5C,$5D,$5E,$5F,$5A,$5B,$57,$58,$59,$51; 32
0001E13C 3036 3533 3234 3C3D 3E3F+  		dc.b $30,$36,$35,$33,$32,$34,$3C,$3D,$3E,$3F,$3A,$3B,$37,$38,$39,$31; 48
0001E14C 2026 2523 2224 2C2D 2E2F+  		dc.b $20,$26,$25,$23,$22,$24,$2C,$2D,$2E,$2F,$2A,$2B,$27,$28,$29,$21; 64
0001E15C 4046 4543 4244 4C4D 4E4F+  		dc.b $40,$46,$45,$43,$42,$44,$4C,$4D,$4E,$4F,$4A,$4B,$47,$48,$49,$41; 80
0001E16C C0C6 C5C3 C2C4 CCCD CECF+  		dc.b $C0,$C6,$C5,$C3,$C2,$C4,$CC,$CD,$CE,$CF,$CA,$CB,$C7,$C8,$C9,$C1; 96
0001E17C D0D6 D5D3 D2D4 DCDD DEDF+  		dc.b $D0,$D6,$D5,$D3,$D2,$D4,$DC,$DD,$DE,$DF,$DA,$DB,$D7,$D8,$D9,$D1; 112
0001E18C E0E6 E5E3 E2E4 ECED EEEF+  		dc.b $E0,$E6,$E5,$E3,$E2,$E4,$EC,$ED,$EE,$EF,$EA,$EB,$E7,$E8,$E9,$E1; 128
0001E19C F0F6 F5F3 F2F4 FCFD FEFF+  		dc.b $F0,$F6,$F5,$F3,$F2,$F4,$FC,$FD,$FE,$FF,$FA,$FB,$F7,$F8,$F9,$F1; 144
0001E1AC A0A6 A5A3 A2A4 ACAD AEAF+  		dc.b $A0,$A6,$A5,$A3,$A2,$A4,$AC,$AD,$AE,$AF,$AA,$AB,$A7,$A8,$A9,$A1; 160
0001E1BC B0B6 B5B3 B2B4 BCBD BEBF+  		dc.b $B0,$B6,$B5,$B3,$B2,$B4,$BC,$BD,$BE,$BF,$BA,$BB,$B7,$B8,$B9,$B1; 176
0001E1CC 7076 7573 7274 7C7D 7E7F+  		dc.b $70,$76,$75,$73,$72,$74,$7C,$7D,$7E,$7F,$7A,$7B,$77,$78,$79,$71; 192
0001E1DC 8086 8583 8284 8C8D 8E8F+  		dc.b $80,$86,$85,$83,$82,$84,$8C,$8D,$8E,$8F,$8A,$8B,$87,$88,$89,$81; 208
0001E1EC 9096 9593 9294 9C9D 9E9F+  		dc.b $90,$96,$95,$93,$92,$94,$9C,$9D,$9E,$9F,$9A,$9B,$97,$98,$99,$91; 224
0001E1FC 1016 1513 1214 1C1D 1E1F+  		dc.b $10,$16,$15,$13,$12,$14,$1C,$1D,$1E,$1F,$1A,$1B,$17,$18,$19,$11; 240
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C                            ; Sonic	pattern	loading	subroutine
0001E20C                            ; ---------------------------------------------------------------------------
0001E20C                            
0001E20C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E20C                            
0001E20C                            
0001E20C                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001E20C 7000                       		moveq	#0,d0
0001E20E 1028 001A                  		move.b	mapping_frame(a0),d0	; load frame number
0001E212 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001E216 6700 0000                  		beq.w	locret_13C96
0001E21A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001E21E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001E224 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0001E228 6700                       		beq.s	LoadSonicDynPLCCont	; if not, branch
0001E22A 45F9 0000 0000             		lea	(SuperSonicDynPLC).l,a2
0001E230                            
0001E230                            LoadSonicDynPLCCont:
0001E230 D040                       		add.w	d0,d0
0001E232 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E236 7A00                       		moveq	#0,d5
0001E238 1A1A                       		move.b	(a2)+,d5
0001E23A 5345                       		subq.w	#1,d5
0001E23C 6B00                       		bmi.s	locret_13C96
0001E23E 383C F000                  		move.w	#$F000,d4
0001E242 2C3C 0000 0000             		move.l	#Art_Sonic,d6		; load Sonic's art
0001E248                            
0001E248                            SPLC_ReadEntry:
0001E248 7200                       		moveq	#0,d1
0001E24A 121A                       		move.b	(a2)+,d1
0001E24C E149                       		lsl.w	#8,d1
0001E24E 121A                       		move.b	(a2)+,d1
0001E250 3601                       		move.w	d1,d3
0001E252 E04B                       		lsr.w	#8,d3
0001E254 0243 00F0                  		andi.w	#$F0,d3
0001E258 0643 0010                  		addi.w	#$10,d3
0001E25C 0241 0FFF                  		andi.w	#$FFF,d1
0001E260 EB89                       		lsl.l	#5,d1
0001E262 D286                       		add.l	d6,d1
0001E264 3404                       		move.w	d4,d2
0001E266 D843                       		add.w	d3,d4
0001E268 D843                       		add.w	d3,d4
0001E26A 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E270 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
0001E274                            
0001E274                            locret_13C96:
0001E274 4E75                       		rts	
0001E276                            ; End of function LoadSonicDynPLC`
0001E276                            
0001E276                            ; ---------------------------------------------------------------------------
0001E276                            ; Subroutine to collect the right speed setting for a character
0001E276                            ; a0 must be character
0001E276                            ; a1 will be the result and have the correct speed settings
0001E276                            ; a2 is characters' speed
0001E276                            ; ---------------------------------------------------------------------------
0001E276                            
0001E276                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001E276                            
0001E276                            ApplySpeedSettings:
0001E276 7000                       	moveq	#0,d0				; Quickly clear d0
0001E278 4A28 0034                  	tst.b	speedshoes_time(a0)		; Does character have speedshoes?
0001E27C 6700                       	beq.s	setspeed1				; If not, branch
0001E27E 5200                       	addq.b	#1,d0				; Quickly add 1 to d0
0001E280                            setspeed1:
0001E280 0828 0006 0022             	btst	#6,status(a0)			; Is the character underwater?
0001E286 6700                       	beq.s	setspeed2				; If not, branch
0001E288 5400                       	addq.b	#2,d0				; Quickly add 2 to d0
0001E28A                            setspeed2:
0001E28A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w		; Is the character Super?
0001E28E 6700                       	beq.s	setspeed3				; If not, branch
0001E290 5800                       	addq.b	#4,d0				; Quickly add 4 to d0
0001E292                            setspeed3:
0001E292 D000                       	add.b	d0,d0				; Multiply itself
0001E294 D000                       	add.b	d0,d0				; And again
0001E296 D000                       	add.b	d0,d0				; And again
0001E298 43FB 0000                  	lea	Speedsettings(pc,d0.w),a1	; Load correct speed settings into a1
0001E29C 5489                       	addq.l	#2,a1				; Increment a1 by 2 quickly
0001E29E 24D9                       	move.l	(a1)+,(a2)+			; Set character's new top speed and acceleration
0001E2A0 3491                       	move.w	(a1),(a2)			; Set character's deceleration
0001E2A2 4E75                       	rts					; Finish subroutine
0001E2A4                            ; ===========================================================================
0001E2A4                            ; ===========================================================================
0001E2A4                            ; ----------------------------------------------------------------------------
0001E2A4                            ; Speed Settings Array
0001E2A4                            
0001E2A4                            ; This array defines what speeds the character should be set to
0001E2A4                            ; ----------------------------------------------------------------------------
0001E2A4                            ;		blank	top_speed	acceleration	deceleration	; #	; Comment
0001E2A4                            Speedsettings:
0001E2A4 0000 0600 000C 0080        	dc.w	$0,	$600,		$C,		$80		; $00	; Normal
0001E2AC 0000 0C00 0018 0080        	dc.w	$0,	$C00,		$18,		$80		; $08	; Normal Speedshoes
0001E2B4 0000 0300 0006 0040        	dc.w	$0,	$300,		$6,		$40		; $16	; Normal Underwater
0001E2BC 0000 0600 000C 0040        	dc.w	$0,	$600,		$C,		$40		; $24	; Normal Underwater Speedshoes
0001E2C4 0000 0A00 0030 0100        	dc.w	$0,	$A00,		$30,		$100		; $32	; Super
0001E2CC 0000 0C00 0030 0100        	dc.w	$0,	$C00,		$30,		$100		; $40	; Super Speedshoes
0001E2D4 0000 0500 0018 0080        	dc.w	$0,	$500,		$18,		$80		; $48	; Super Underwater
0001E2DC 0000 0A00 0030 0080        	dc.w	$0,	$A00,		$30,		$80		; $56	; Super Underwater Speedshoes
0001E2E4                            ; ===========================================================================
0001E2E4                            ; ===========================================================================
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            ; Object 8D - After Image
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            
0001E2E4                            Obj8D:               ; XREF: Obj_Index
0001E2E4 0C38 0006 D024                   cmpi.b   #6,(MainCharacter+routine).w   ; is "death" animation?
0001E2EA 6600                             bne.s   Obj8DNormal      ; if not, skip the next line
0001E2EC 4EF9 0001 5BF0             	  jmp	DeleteObject
0001E2F2                            Obj8DNormal:
0001E2F2 0C38 0018 D01C                   cmpi.b   #$18,(MainCharacter+anim).w   ; is "death" animation?
0001E2F8 6700 0000                        beq.w   Obj8D_Delete      ; if yes, delete the After Image
0001E2FC 4A38 FE08                        tst.b   ($FFFFFE08).w   ; is debug mode active?
0001E300 6600 0000                        bne.w   Obj8D_Delete      ; if yes, delete the After Image
0001E304 7000                             moveq   #0,d0
0001E306 1028 0024                        move.b   routine(a0),d0
0001E30A 323B 0000                        move.w   Obj8D_Index(pc,d0.w),d1
0001E30E 4EFB 1000                        jmp   Obj8D_Index(pc,d1.w)
0001E312                            
0001E312                            ; ===========================================================================
0001E312                            Obj8D_Index:
0001E312 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E314 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E316 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E318 0000                             dc.w Obj8D_Sprite_priority_start-Obj8D_Index
0001E31A 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E31C 0000                             dc.w Obj8D_NoShow-Obj8D_Index
0001E31E 0000                             dc.w Obj8D_Sprite_priority_next-Obj8D_Index
0001E320 0000                             dc.w Obj8D_Delete-Obj8D_Index
0001E322                            ; ===========================================================================
0001E322                            Obj8D_NoShow:
0001E322 5428 0024                        addq.b   #2,routine(a0)         ; go to next item of index, at the next frame
0001E326 4E75                             rts
0001E328                            ; ===========================================================================
0001E328                            Obj8D_Sprite_priority_start:
0001E328 317C 0100 0018                   move.w   #$100,priority(a0)         ; set sprite priority to 2
0001E32E 6000                             bra.s   Obj8D_Show
0001E330                            ; ===========================================================================
0001E330                            Obj8D_Sprite_priority_next:
0001E330 0668 0080 0018                   addi.w   #$80,priority(a0)         ; set a lower sprite priority
0001E336                            ; ===========================================================================
0001E336                            Obj8D_Show:
0001E336 5428 0024                        addq.b   #2,routine(a0)            ; go to next item of index
0001E33A 7210                       		moveq	#$10,d1
0001E33C 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001E342 6700                       		beq.s	loc_1A4E4
0001E344 721C                       		moveq	#$1C,d1
0001E346                            
0001E346                            loc_1A4E4:
0001E346 3038 F7A8                  			move.w	(Sonic_Pos_Record_Index).w,d0
0001E34A 43F8 CB00                  			lea	(Sonic_Pos_Record_Buf).w,a1
0001E34E 9001                       			sub.b	d1,d0
0001E350 43F1 0000                  			lea	(a1,d0.w),a1
0001E354 3159 0008                  			move.w	(a1)+,x_pos(a0)
0001E358 3159 000C                  			move.w	(a1)+,y_pos(a0)
0001E35C                            Obj8D_Show_exception:
0001E35C 3178 D002 0002                   move.w   ($FFFFD002).w,2(a0)      ; copy Sonic map to after-image map
0001E362 1178 D001 0001                    move.b   ($FFFFD001).w,1(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001E368 2178 D01A 001A                    move.l   ($FFFFD01A).w,mapping_frame(a0)   ; copy the Sonic animation frame
0001E36E 4EF9 0001 5C3C                   jmp   DisplaySprite
0001E374                            ; ===========================================================================
0001E374                            Obj8D_Delete:
0001E374 4EF9 0001 5BF0                   jmp   DeleteObject
0001E37A                            
0001E37A                            ; ===========================================================================
0001E37A                            
0001E37A                            ; ===========================================================================
0001E37A                            ; ---------------------------------------------------------------------------
0001E37A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001E37A                            ; ---------------------------------------------------------------------------
0001E37A                            
0001E37A                            Obj0A:					; XREF: Obj_Index
0001E37A 7000                       		moveq	#0,d0
0001E37C 1028 0024                  		move.b	routine(a0),d0
0001E380 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001E384 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001E388                            ; ===========================================================================
0001E388 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001E38C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001E390 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001E394 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001E398 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001E39A                            ; ===========================================================================
0001E39A                            
0001E39A                            Obj0A_Main:				; XREF: Obj0A_Index
0001E39A 5428 0024                  		addq.b	#2,routine(a0)
0001E39E 217C 0001 BFC6 0004        		move.l	#Map_obj64,4(a0)
0001E3A6 317C 8348 0002             		move.w	#$8348,2(a0)
0001E3AC 117C 0084 0001             		move.b	#$84,1(a0)
0001E3B2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001E3B8 317C 0080 0018             		move.w	#$80,priority(a0)
0001E3BE 1028 0028                  		move.b	subtype(a0),d0
0001E3C2 6A00                       		bpl.s	loc_13D00
0001E3C4 5028 0024                  		addq.b	#8,routine(a0)
0001E3C8 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001E3D0 317C 0440 0002             		move.w	#$440,2(a0)
0001E3D6 0240 007F                  		andi.w	#$7F,d0
0001E3DA 1140 0033                  		move.b	d0,$33(a0)
0001E3DE 6000 0000                  		bra.w	Obj0A_Countdown
0001E3E2                            ; ===========================================================================
0001E3E2                            
0001E3E2                            loc_13D00:
0001E3E2 1140 001C                  		move.b	d0,anim(a0)
0001E3E6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001E3EC 317C FF78 0012             		move.w	#-$88,y_vel(a0)
0001E3F2                            
0001E3F2                            Obj0A_Animate:				; XREF: Obj0A_Index
0001E3F2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E3F8 4EB9 0001 2618             		jsr	AnimateSprite
0001E3FE                            
0001E3FE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001E3FE 3038 F646                  		move.w	($FFFFF646).w,d0
0001E402 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001E406 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001E408 117C 0006 0024             		move.b	#6,routine(a0)
0001E40E 5E28 001C                  		addq.b	#7,anim(a0)
0001E412 0C28 000D 001C             		cmpi.b	#$D,anim(a0)
0001E418 6700                       		beq.s	Obj0A_Display
0001E41A 6500                       		bcs.s	Obj0A_Display	;\Fix the bubble bug
0001E41C 117C 000D 001C             		move.b	#$D,anim(a0)     ;/
0001E422 6000                       		bra.s	Obj0A_Display
0001E424                            ; ===========================================================================
0001E424                            
0001E424                            Obj0A_Wobble:
0001E424 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001E428 6700                       		beq.s	loc_13D44
0001E42A 5868 0030                  		addq.w	#4,$30(a0)
0001E42E                            
0001E42E                            loc_13D44:
0001E42E 1028 0026                  		move.b	$26(a0),d0
0001E432 5228 0026                  		addq.b	#1,$26(a0)
0001E436 0240 007F                  		andi.w	#$7F,d0
0001E43A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001E440 1031 0000                  		move.b	(a1,d0.w),d0
0001E444 4880                       		ext.w	d0
0001E446 D068 0030                  		add.w	$30(a0),d0
0001E44A 3140 0008                  		move.w	d0,8(a0)
0001E44E 6100                       		bsr.s	Obj0A_ShowNumber
0001E450 4EB9 0001 5BD6             		jsr	SpeedToPos
0001E456 4A28 0001                  		tst.b	1(a0)
0001E45A 6A00                       		bpl.s	Obj0A_Delete
0001E45C 4EF9 0001 5C3C             		jmp	DisplaySprite
0001E462                            ; ===========================================================================
0001E462                            
0001E462                            Obj0A_Delete:
0001E462 4EF9 0001 5BF0             		jmp	DeleteObject
0001E468                            ; ===========================================================================
0001E468                            
0001E468                            Obj0A_Display:				; XREF: Obj0A_Index
0001E468 6100                       		bsr.s	Obj0A_ShowNumber
0001E46A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E470 4EB9 0001 2618             		jsr	AnimateSprite
0001E476 4EF9 0001 5C3C             		jmp	DisplaySprite
0001E47C                            ; ===========================================================================
0001E47C                            
0001E47C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001E47C 4EF9 0001 5BF0             		jmp	DeleteObject
0001E482                            ; ===========================================================================
0001E482                            
0001E482                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001E482 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001E488 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001E48A 5368 0038                  		subq.w	#1,$38(a0)
0001E48E 6600                       		bne.s	Obj0A_Display2
0001E490 117C 000E 0024             		move.b	#$E,routine(a0)
0001E496 5E28 001C                  		addq.b	#7,anim(a0)
0001E49A 60CC                       		bra.s	Obj0A_Display
0001E49C                            ; ===========================================================================
0001E49C                            
0001E49C                            Obj0A_Display2:
0001E49C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001E4A2 4EB9 0001 2618             		jsr	AnimateSprite
0001E4A8 4A28 0001                  		tst.b	1(a0)
0001E4AC 6A00                       		bpl.s	Obj0A_Delete3
0001E4AE 4EF9 0001 5C3C             		jmp	DisplaySprite
0001E4B4                            ; ===========================================================================
0001E4B4                            
0001E4B4                            Obj0A_Delete3:
0001E4B4 4EF9 0001 5BF0             		jmp	DeleteObject
0001E4BA                            ; ===========================================================================
0001E4BA                            
0001E4BA                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001E4BA 4A68 0038                  		tst.w	$38(a0)
0001E4BE 6700                       		beq.s	locret_13E1A
0001E4C0 5368 0038                  		subq.w	#1,$38(a0)
0001E4C4 6600                       		bne.s	locret_13E1A
0001E4C6 0C28 0007 001C             		cmpi.b	#7,anim(a0)
0001E4CC 6400                       		bcc.s	locret_13E1A
0001E4CE 317C 000F 0038             		move.w	#$F,$38(a0)
0001E4D4 4268 0012                  		clr.w	y_vel(a0)
0001E4D8 117C 0080 0001             		move.b	#$80,1(a0)
0001E4DE 3028 0008                  		move.w	8(a0),d0
0001E4E2 9078 F700                  		sub.w	($FFFFF700).w,d0
0001E4E6 0640 0080                  		addi.w	#$80,d0
0001E4EA 3140 0008                  		move.w	d0,8(a0)
0001E4EE 3028 000C                  		move.w	$C(a0),d0
0001E4F2 9078 F704                  		sub.w	($FFFFF704).w,d0
0001E4F6 0640 0080                  		addi.w	#$80,d0
0001E4FA 3140 000A                  		move.w	d0,$A(a0)
0001E4FE 117C 000C 0024             		move.b	#$C,routine(a0)
0001E504                            
0001E504                            locret_13E1A:
0001E504 4E75                       		rts	
0001E506                            ; ===========================================================================
0001E506                            Obj0A_WobbleData:
0001E506 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001E517 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001E528 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001E539 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001E549 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001E556 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E563 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E570 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001E57D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001E586 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001E597 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001E5A8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001E5B9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001E5C9 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001E5D6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E5E3 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001E5F0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001E5FD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001E606                            ; ===========================================================================
0001E606                            
0001E606                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001E606 4A68 002C                  		tst.w	$2C(a0)
0001E60A 6600 0000                  		bne.w	loc_13F86
0001E60E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001E614 6400 0000                  		bcc.w	locret_1408C
0001E618 0838 0006 D022             		btst	#6,($FFFFD022).w
0001E61E 6700 0000                  		beq.w	locret_1408C
0001E622 5368 0038                  		subq.w	#1,$38(a0)
0001E626 6A00 0000                  		bpl.w	loc_13FAC
0001E62A 317C 003B 0038             		move.w	#59,$38(a0)
0001E630 317C 0001 0036             		move.w	#1,$36(a0)
0001E636 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E63C 0240 0001                  		andi.w	#1,d0
0001E640 1140 0034                  		move.b	d0,$34(a0)
0001E644 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001E648 0C40 0019                  		cmpi.w	#$19,d0
0001E64C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001E64E 0C40 0014                  		cmpi.w	#$14,d0
0001E652 6700                       		beq.s	Obj0A_WarnSound
0001E654 0C40 000F                  		cmpi.w	#$F,d0
0001E658 6700                       		beq.s	Obj0A_WarnSound
0001E65A 0C40 000C                  		cmpi.w	#$C,d0
0001E65E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001E660 6600                       		bne.s	loc_13F02
0001E662 303C 0031                  		move.w	#$31,d0
0001E666 4EB9 0000 3212             		jsr	(PlaySound).l	; play countdown music
0001E66C                            		
0001E66C                            loc_13F02:
0001E66C 5328 0032                  		subq.b	#1,$32(a0)
0001E670 6A00                       		bpl.s	Obj0A_ReduceAir
0001E672 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001E678 08E8 0007 0036             		bset	#7,$36(a0)
0001E67E 6000                       		bra.s	Obj0A_ReduceAir
0001E680                            
0001E680                            ; ===========================================================================
0001E680                            
0001E680                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001E680 303C 00C2                  		move.w	#$C2,d0
0001E684 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001E68A                            
0001E68A                            Obj0A_ReduceAir:
0001E68A 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001E68E 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001E692 4EB9 0000 0000             		jsr	ResumeMusic
0001E698 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001E69E 303C 003B                  		move.w	#$3B,d0
0001E6A2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play drowning sound
0001E6A8 117C 000A 0034             		move.b	#$A,$34(a0)
0001E6AE 317C 0001 0036             		move.w	#1,$36(a0)
0001E6B4 317C 0078 002C             		move.w	#$78,$2C(a0)
0001E6BA 2F08                       		move.l	a0,-(sp)
0001E6BC 41F8 D000                  		lea	($FFFFD000).w,a0
0001E6C0 4EBA F26A                  		jsr	Sonic_ResetOnFloor
0001E6C4 117C 0017 001C             		move.b	#$17,anim(a0)	; use Sonic's drowning animation
0001E6CA 08E8 0001 0022             		bset	#1,status(a0)
0001E6D0 08E8 0007 0002             		bset	#7,2(a0)
0001E6D6 317C 0000 0012             		move.w	#0,y_vel(a0)
0001E6DC 317C 0000 0010             		move.w	#0,x_vel(a0)
0001E6E2 317C 0000 0020             		move.w	#0,inertia(a0)
0001E6E8 117C 000A 0024             		move.b  #$A,routine(a0)       ; Force the character to drown
0001E6EE 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001E6F4 11FC 0000 FE1E             		move.b  #0,(f_timecount).w      ; Stop the timer immediately
0001E6FA 205F                       		movea.l	(sp)+,a0
0001E6FC 4E75                       		rts	
0001E6FE                            ; ===========================================================================
0001E6FE                            
0001E6FE                            loc_13F86:
0001E6FE 5368 002C                                  subq.w  #1,$2C(a0)
0001E702 6600                                       bne.s   loc_13FAC                       ; Make it jump straight to this location
0001E704 11FC 0006 D024                             move.b  #6,(v_player+routine).w
0001E70A 4E75                                       rts
0001E70C                            ; ===========================================================================
0001E70C                            
0001E70C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001E70C 6000                       		bra.s	Obj0A_MakeItem
0001E70E                            ; ===========================================================================
0001E70E                            
0001E70E                            loc_13FAC:
0001E70E 4A68 0036                  		tst.w	$36(a0)
0001E712 6700 0000                  		beq.w	locret_1408C
0001E716 5368 003A                  		subq.w	#1,$3A(a0)
0001E71A 6A00 0000                  		bpl.w	locret_1408C
0001E71E                            
0001E71E                            Obj0A_MakeItem:
0001E71E 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E724 0240 000F                  		andi.w	#$F,d0
0001E728 3140 003A                  		move.w	d0,$3A(a0)
0001E72C 4EB9 0001 6708             		jsr	SingleObjLoad
0001E732 6600 0000                  		bne.w	locret_1408C
0001E736 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001E73A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001E740 7006                       		moveq	#6,d0
0001E742 0838 0000 D022             		btst	#0,($FFFFD022).w
0001E748 6700                       		beq.s	loc_13FF2
0001E74A 4440                       		neg.w	d0
0001E74C 137C 0040 0026             		move.b	#$40,$26(a1)
0001E752                            
0001E752                            loc_13FF2:
0001E752 D169 0008                  		add.w	d0,8(a1)
0001E756 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001E75C 137C 0006 0028             		move.b	#6,subtype(a1)
0001E762 4A68 002C                  		tst.w	$2C(a0)
0001E766 6700 0000                  		beq.w	loc_1403E
0001E76A 0268 0007 003A             		andi.w	#7,$3A(a0)
0001E770 0668 0000 003A             		addi.w	#0,$3A(a0)
0001E776 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001E77A 0440 000C                  		subi.w	#$C,d0
0001E77E 3340 000C                  		move.w	d0,$C(a1)
0001E782 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E788 1340 0026                  		move.b	d0,$26(a1)
0001E78C 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001E790 0200 0003                  		andi.b	#3,d0
0001E794 6600                       		bne.s	loc_14082
0001E796 137C 000E 0028             		move.b	#$E,subtype(a1)
0001E79C 6000                       		bra.s	loc_14082
0001E79E                            ; ===========================================================================
0001E79E                            
0001E79E                            loc_1403E:
0001E79E 0828 0007 0036             		btst	#7,$36(a0)
0001E7A4 6700                       		beq.s	loc_14082
0001E7A6 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001E7AA E24A                       		lsr.w	#1,d2
0001E7AC 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0001E7B2 0240 0003                  		andi.w	#3,d0
0001E7B6 6600                       		bne.s	loc_1406A
0001E7B8 08E8 0006 0036             		bset	#6,$36(a0)
0001E7BE 6600                       		bne.s	loc_14082
0001E7C0 1342 0028                  		move.b	d2,subtype(a1)
0001E7C4 337C 001C 0038             		move.w	#$1C,$38(a1)
0001E7CA                            
0001E7CA                            loc_1406A:
0001E7CA 4A28 0034                  		tst.b	$34(a0)
0001E7CE 6600                       		bne.s	loc_14082
0001E7D0 08E8 0006 0036             		bset	#6,$36(a0)
0001E7D6 6600                       		bne.s	loc_14082
0001E7D8 1342 0028                  		move.b	d2,subtype(a1)
0001E7DC 337C 001C 0038             		move.w	#$1C,$38(a1)
0001E7E2                            
0001E7E2                            loc_14082:
0001E7E2 5328 0034                  		subq.b	#1,$34(a0)
0001E7E6 6A00                       		bpl.s	locret_1408C
0001E7E8 4268 0036                  		clr.w	$36(a0)
0001E7EC                            
0001E7EC                            locret_1408C:
0001E7EC 4E75                       		rts	
0001E7EE                            
0001E7EE                            ;		include	"_incObj\Sonic LoadGfx.asm"
0001E7EE                            ;		include	"_incObj\Sonic RecordPosition.asm"
0001E7EE                            		
0001E7EE                            ; ---------------------------------------------------------------------------
0001E7EE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001E7EE                            ; ---------------------------------------------------------------------------
0001E7EE                            
0001E7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E7EE                            
0001E7EE                            
0001E7EE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir; Debug_Main;
0001E7EE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001E7F4                            
0001E7F4                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001E7F4                             
0001E7F4 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001E7F8                            ;		bcc.w	ResumeMusic_Part2
0001E7F8                            
0001E7F8 B2FC D000                  		cmpa.w	#MainCharacter,a1
0001E7FC 6600                       		bne.s	loc_140AC	; branch if it isn't player 1
0001E7FE                            		
0001E7FE                            Air_GetBgm:
0001E7FE 3038 FF90                  		move.w  (Level_Music).w,d0      ; prepare to play current level's music
0001E802 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001E806 6700                       		beq.s	loc_186A0		; if not branch
0001E808 303C 002C                  		move.w	#$2C,d0
0001E80C                            
0001E80C                            loc_186A0:
0001E80C 4A38 FE19                  		tst.b	($FFFFFE19).w	; is Sonic super?
0001E810 6700 0000                  		beq.w	Air_PlayMusic	; if not branch
0001E814 303C 002D                  		move.w	#$2D,d0
0001E818                             
0001E818                            Air_PlayMusic:
0001E818 4A38 F7AA                  		tst.b	(Current_Boss_ID).w ; Is this a boss fight?
0001E81C 6700                       		beq.s	loc_140A6		; if not branch
0001E81E 303C 000E                  		move.w	#$0E,d0	; prepare to play boss music
0001E822                            
0001E822                            loc_140A6:
0001E822 4EB9 0000 3212             		jsr	(PlaySound).l
0001E828                            
0001E828                            loc_140AC:
0001E828 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001E82E 4238 D372                  		clr.b	($FFFFD372).w
0001E832                            ;locret_Super:
0001E832 4E75                       		rts	
0001E834                            ; End of function ResumeMusic
0001E834                            BossModeMusic:
0001E834                            JsrNormalMode:
0001E834 0C28 0004 0021             	cmp.b	#$4,collision_property(a0)
0001E83A 6600 0000                  	bne.w JsrNormalMode2
0001E83E 4EF9 0000 0000             	jmp	PinchMode
0001E844                            
0001E844                            JsrNormalMode2:
0001E844 4EF9 0000 0000             	jmp	NormalMode
0001E84A 4E75                       	rts
0001E84C                            
0001E84C                            NormalMode:
0001E84C 303C 006E                  	move.w	#$6E,d0
0001E850 4EB9 0000 3212             	jsr	(PlaySound).l
0001E856 4E75                       	rts
0001E858                            
0001E858                            PinchMode:
0001E858 303C 006E                  	move.w	#$6E,d0
0001E85C 4EB9 0000 325C             	jsr	(PlaySound_Special).l
0001E862 303C 000D                  	move.w	#$0D,d0
0001E866 4EB9 0000 3212             	jsr	(PlaySound).l
0001E86C 4E75                       	rts
0001E86E                            	
0001E86E                            BossMusic:
0001E86E 0C78 0502 FE10             	cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0001E874 6700                       	beq.s	BossMusic2	; if not, branch	
0001E876                            ;	addi.b	#1,($FFFFFF0A).w
0001E876 4EFA FFBC                  	jmp	JsrNormalMode
0001E87A                            	
0001E87A                            BossMusic2:
0001E87A 303C 00AC                  	move.w	#$AC,d0
0001E87E 4EB9 0000 3212             	jsr	(PlaySound).l
0001E884 4E75                       	rts
0001E886                            
0001E886                            ; ===========================================================================
0001E886                            Ani_obj0A:
0001E886                            	include "_anim\obj0A.asm"
0001E886                            ; ---------------------------------------------------------------------------
0001E886                            ; Animation script - countdown numbers and bubbles (LZ)
0001E886                            ; ---------------------------------------------------------------------------
0001E886 0000                       		dc.w byte_140D6-Ani_obj0A
0001E888 0000                       		dc.w byte_140E0-Ani_obj0A
0001E88A 0000                       		dc.w byte_140EA-Ani_obj0A
0001E88C 0000                       		dc.w byte_140F4-Ani_obj0A
0001E88E 0000                       		dc.w byte_140FE-Ani_obj0A
0001E890 0000                       		dc.w byte_14108-Ani_obj0A
0001E892 0000                       		dc.w byte_14112-Ani_obj0A
0001E894 0000                       		dc.w byte_14118-Ani_obj0A
0001E896 0000                       		dc.w byte_14120-Ani_obj0A
0001E898 0000                       		dc.w byte_14128-Ani_obj0A
0001E89A 0000                       		dc.w byte_14130-Ani_obj0A
0001E89C 0000                       		dc.w byte_14138-Ani_obj0A
0001E89E 0000                       		dc.w byte_14140-Ani_obj0A
0001E8A0 0000                       		dc.w byte_14148-Ani_obj0A
0001E8A2 0000                       		dc.w byte_1414A-Ani_obj0A
0001E8A4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001E8AE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001E8B8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001E8C2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001E8CC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001E8D6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001E8E0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001E8E6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001E8EE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001E8F6 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001E8FE 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001E906 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001E90E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001E916 0EFC                       byte_14148:	dc.b $E, $FC
0001E918 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001E91E                            		even
0001E91E                            		even
0001E91E                            
0001E91E                            ; ---------------------------------------------------------------------------
0001E91E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001E91E                            ; ---------------------------------------------------------------------------
0001E91E                            Map_obj0A:
0001E91E                            	include "_maps\obj0A.asm"
0001E91E                            ; ---------------------------------------------------------------------------
0001E91E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001E91E                            ; ---------------------------------------------------------------------------
0001E91E 0000                       		dc.w byte_14152-Map_obj0A
0001E920 01                         byte_14152:	dc.b 1
0001E921 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001E926                            		even
0001E926                            		even
0001E926                            
0001E926                            ; ===========================================================================
0001E926                            
0001E926                            ; ---------------------------------------------------------------------------
0001E926                            ; Object 02 - Shield (A slightly modified port from Sonic 2F)
0001E926                            ; ---------------------------------------------------------------------------
0001E926                            Obj02:
0001E926 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; Is Sonic Invincible?
0001E92A 6600 0000                  		bne.w	loc_19500		; if yes, branch
0001E92E 223C 0000 0000             		move.l	#Unc_Shield,d1			        ; Call for Regular Shield Art
0001E934 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
0001E938                            								; In this case, VRAM = $541*20
0001E938 363C 0200                  		move.w	#$200,d3
0001E93C 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E942                            ;===============================================================================
0001E942                            ; Object 0x38 - Shield
0001E942                            ; [ Begin ]
0001E942                            ;===============================================================================	
0001E942                            loc_19500:
0001E942                            ; ----------------------------------------------------------------------------
0001E942                            ; Object 38 - Shield
0001E942                            ; ----------------------------------------------------------------------------
0001E942                            ; Sprite_1D8F2:
0001E942                            ;Obj38:
0001E942 7000                       	moveq	#0,d0
0001E944 1028 0024                  	move.b	routine(a0),d0
0001E948 323B 0000                  	move.w	Obj38_Index(pc,d0.w),d1
0001E94C 4EFB 1000                  	jmp	Obj38_Index(pc,d1.w)
0001E950                            ; ===========================================================================
0001E950                            ; off_1D900:
0001E950                            Obj38_Index:
0001E950 0000                       	dc.w Obj38_Main-Obj38_Index
0001E952 0000                       	dc.w Obj38_Shield-Obj38_Index; 1
0001E954                            ; ===========================================================================
0001E954                            ; loc_1D904:
0001E954                            Obj38_Main:
0001E954 5428 0024                  	addq.b	#2,routine(a0)
0001E958 217C 0000 0000 0004        	move.l	#Map_obj38_Sheild,mappings(a0)
0001E960 117C 0004 0001             	move.b	#4,render_flags(a0)
0001E966 317C 0080 0018             	move.w	#$80,priority(a0)
0001E96C 117C 0018 0023             	move.b	#$18,width_pixels(a0)
0001E972 317C 0541 0002             	move.w	#$541,art_tile(a0)
0001E978                            	;bsr.w	Adjust2PArtPointer
0001E978                            ; loc_1D92C:
0001E978                            Obj38_Shield:
0001E978                            ;	movea.w	parent(a0),a2 ; a2=character
0001E978 4A38 FE2D                  	tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001E97C 6600                       	bne.s	return_1D976	; if yes, branch
0001E97E 4A38 FE2C                  	tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001E982 6700                       	beq.s	JmpTo7_DeleteObject	; if the flag is not set, branch
0001E984 3178 D008 0008             	move.w	(MainCharacter+x_pos).w,x_pos(a0)	; Copy the X-position from Sonic
0001E98A 3178 D00C 000C             	move.w	(MainCharacter+y_pos).w,y_pos(a0)	; Copy the Y-position from Sonic
0001E990 1178 D022 0022             	move.b	(MainCharacter+status).w,status(a0)	; Copy Sonic's Status
0001E996 0268 7FFF 0002             	andi.w	#$7FFF,art_tile(a0)
0001E99C 4A78 D002                  	tst.w	(MainCharacter+art_tile).w
0001E9A0 6A00                       	bpl.s	Obj38_Display
0001E9A2 0068 8000 0002             	ori.w	#$8000,art_tile(a0)
0001E9A8                            ; loc_1D964:
0001E9A8                            Obj38_Display:
0001E9A8 43F9 0000 0000             	lea	(Ani_Obj38_Shield).l,a1
0001E9AE 4EB9 0001 2618             	jsr	AnimateSprite
0001E9B4 4EF9 0001 5C3C             	jmp	DisplaySprite
0001E9BA                            ; ===========================================================================
0001E9BA                            
0001E9BA                            return_1D976:
0001E9BA 4E75                       	rts
0001E9BC                            ; ===========================================================================
0001E9BC                            
0001E9BC                            JmpTo7_DeleteObject:
0001E9BC 4EF9 0001 5BF0             	jmp	DeleteObject
0001E9C2                            ; ===========================================================================
0001E9C2                            ;===============================================================================
0001E9C2                            ; Object 0x38 - Shield
0001E9C2                            ; [ End ]
0001E9C2                            ;===============================================================================
0001E9C2                            
0001E9C2                            
0001E9C2                            ; ---------------------------------------------------------------------------
0001E9C2                            ; Object 38 - invincibility stars
0001E9C2                            ; ---------------------------------------------------------------------------
0001E9C2                            
0001E9C2                            Obj38:					; XREF: Obj_Index
0001E9C2 4A38 FE1E                  		tst.b	(Update_HUD_timer).w	; has Sonic reached the end of the act?
0001E9C6 6700 0000                  		beq.w	Invincibility_Main		; if yes, branch
0001E9CA 223C 0000 0000             		move.l	#Unc_Stars,d1
0001E9D0 343C ABC0                  		move.w	#$ABC0,d2
0001E9D4 363C 0200                  		move.w	#$200,d3
0001E9D8 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001E9DE                            Invincibility_Main:
0001E9DE 7000                       		moveq	#0,d0
0001E9E0 1028 0024                  		move.b	$24(a0),d0
0001E9E4                            Invincibility_Init:
0001E9E4 323B 0000                  		move.w	off_18152(pc,d0.w),d1
0001E9E8 4EFB 1000                  		jmp	off_18152(pc,d1.w)
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC 0000                       off_18152:	dc.w loc_1816A-off_18152 ; DATA	XREF: ROM:0001814Ar
0001E9EE                            					; ROM:off_18152o ...
0001E9EE 0000                       		dc.w loc_181C4-off_18152
0001E9F0 0000                       		dc.w loc_1823E-off_18152
0001E9F2 0000 0000                  		dc.l unk_18335
0001E9F6 000B                       		dc.w $B
0001E9F8 0000 0000                  		dc.l unk_1834A
0001E9FC 160D                       		dc.w $160D
0001E9FE 0000 0000                  		dc.l unk_18363
0001EA02 2C0D                       		dc.w $2C0D
0001EA04                            ; ---------------------------------------------------------------------------
0001EA04                            
0001EA04                            loc_1816A:				; DATA XREF: ROM:off_18152o
0001EA04 7400                       		moveq	#0,d2
0001EA06 45FA FFE4                  		lea	off_18152,a2
0001EA0A 43D0                       		lea	(a0),a1
0001EA0C 7203                       		moveq	#3,d1
0001EA0E                            
0001EA0E                            loc_18174:				; CODE XREF: ROM:000181B4j
0001EA0E 1290                       		move.b	(a0),(a1)
0001EA10 137C 0004 0024             		move.b	#4,$24(a1)
0001EA16 237C 0000 0000 0004        		move.l	#Map_obj38,4(a1)
0001EA1E 337C 055E 0002             		move.w	#$55E,2(a1)
0001EA24 137C 0004 0001             		move.b	#4,1(a1)
0001EA2A 08E9 0006 0001             		bset	#6,1(a1)
0001EA30 137C 0010 000E             		move.b	#$10,$E(a1)
0001EA36 137C 0002 000F             		move.b	#2,$F(a1)
0001EA3C 1342 0036                  		move.b	d2,$36(a1)
0001EA40 5242                       		addq.w	#1,d2
0001EA42 235A 0030                  		move.l	(a2)+,$30(a1)
0001EA46 335A 0034                  		move.w	(a2)+,$34(a1)
0001EA4A 43E9 0040                  		lea	$40(a1),a1
0001EA4E 51C9 FFBE                  		dbf	d1,loc_18174
0001EA52 117C 0002 0024             		move.b	#2,$24(a0)
0001EA58 117C 0004 0034             		move.b	#4,$34(a0)
0001EA5E                            
0001EA5E                            loc_181C4:				; DATA XREF: ROM:00018154o
0001EA5E 43F8 D000                  		lea	($FFFFD000).w,a1
0001EA62                            ;		tst.b	($FFFFFE19).w
0001EA62                            ;		bne.w	loc_181FA
0001EA62 4A38 FE2D                  		tst.b	($FFFFFE2D).w
0001EA66 6700 0000                  		beq.w	loc_181FA
0001EA6A 3029 0008                  		move.w	8(a1),d0
0001EA6E 3140 0008                  		move.w	d0,8(a0)
0001EA72 3229 000C                  		move.w	$C(a1),d1
0001EA76 3141 000C                  		move.w	d1,$C(a0)
0001EA7A 45E8 0010                  		lea	$10(a0),a2
0001EA7E 47F9 0000 0000             		lea	unk_18328,a3
0001EA84 7A00                       		moveq	#0,d5
0001EA86                            
0001EA86                            loc_181EA:				; CODE XREF: ROM:000181F8j
0001EA86 3428 0038                  		move.w	$38(a0),d2
0001EA8A 1A33 2000                  		move.b	(a3,d2.w),d5
0001EA8E 6A00                       		bpl.s	loc_18200
0001EA90 4268 0038                  		clr.w	$38(a0)
0001EA94 60F0                       		bra.s	loc_181EA
0001EA96                            ; ---------------------------------------------------------------------------
0001EA96                            
0001EA96                            loc_181FA:				; CODE XREF: ROM:000181CCj
0001EA96                            					; ROM:00018246j
0001EA96 4EF9 0001 5BF0             		jmp	DeleteObject
0001EA9C                            ; ---------------------------------------------------------------------------
0001EA9C                            
0001EA9C                            loc_18200:				; CODE XREF: ROM:000181F2j
0001EA9C 5268 0038                  		addq.w	#1,$38(a0)
0001EAA0 4DF9 0000 0000             		lea	unk_182E8,a6
0001EAA6 1C28 0034                  		move.b	$34(a0),d6
0001EAAA 4EB9 0000 0000             		jsr	sub_182D2
0001EAB0 34C2                       		move.w	d2,(a2)+
0001EAB2 34C3                       		move.w	d3,(a2)+
0001EAB4 34C5                       		move.w	d5,(a2)+
0001EAB6 0646 0020                  		addi.w	#$20,d6	; ' '
0001EABA 4EB9 0000 0000             		jsr	sub_182D2
0001EAC0 34C2                       		move.w	d2,(a2)+
0001EAC2 34C3                       		move.w	d3,(a2)+
0001EAC4 34C5                       		move.w	d5,(a2)+
0001EAC6 7012                       		moveq	#$12,d0
0001EAC8 0829 0000 0022             		btst	#0,$22(a1)
0001EACE 6700                       		beq.s	loc_18230
0001EAD0 4440                       		neg.w	d0
0001EAD2                            
0001EAD2                            loc_18230:				; CODE XREF: ROM:0001822Cj
0001EAD2 D128 0034                  		add.b	d0,$34(a0)
0001EAD6 303C 0080                  		move.w	#$80,d0	; '?'
0001EADA 4EF9 0001 5C68             		jmp	DisplaySprite3
0001EAE0                            ; ---------------------------------------------------------------------------
0001EAE0                            
0001EAE0                            loc_1823E:				; DATA XREF: ROM:00018156o
0001EAE0 43F8 D000                  		lea	($FFFFD000).w,a1
0001EAE4 4A38 FE19                  		tst.b	($FFFFFE19).w
0001EAE8 66AC                       		bne.s	loc_181FA
0001EAEA 4A38 FE2D                  		tst.b	($FFFFFE2D).w
0001EAEE 67A6                       		beq.s	loc_181FA
0001EAF0 4BF8 F7A8                  		lea	($FFFFF7A8).w,a5
0001EAF4 4DF8 CB00                  		lea	($FFFFCB00).w,a6
0001EAF8 1228 0036                  		move.b	$36(a0),d1
0001EAFC E509                       		lsl.b	#2,d1
0001EAFE 3401                       		move.w	d1,d2
0001EB00 D241                       		add.w	d1,d1
0001EB02 D242                       		add.w	d2,d1
0001EB04 3015                       		move.w	(a5),d0
0001EB06 9001                       		sub.b	d1,d0
0001EB08 45F6 0000                  		lea	(a6,d0.w),a2
0001EB0C 301A                       		move.w	(a2)+,d0
0001EB0E 321A                       		move.w	(a2)+,d1
0001EB10 3140 0008                  		move.w	d0,8(a0)
0001EB14 3141 000C                  		move.w	d1,$C(a0)
0001EB18 45E8 0010                  		lea	$10(a0),a2
0001EB1C 2668 0030                  		movea.l	$30(a0),a3
0001EB20                            
0001EB20                            loc_18278:				; CODE XREF: ROM:00018286j
0001EB20 3428 0038                  		move.w	$38(a0),d2
0001EB24 1A33 2000                  		move.b	(a3,d2.w),d5
0001EB28 6A00                       		bpl.s	loc_18288
0001EB2A 4268 0038                  		clr.w	$38(a0)
0001EB2E 60F0                       		bra.s	loc_18278
0001EB30                            ; ---------------------------------------------------------------------------
0001EB30                            
0001EB30                            loc_18288:				; CODE XREF: ROM:00018280j
0001EB30 4845                       		swap	d5
0001EB32 D428 0035                  		add.b	$35(a0),d2
0001EB36 1A33 2000                  		move.b	(a3,d2.w),d5
0001EB3A 5268 0038                  		addq.w	#1,$38(a0)
0001EB3E 4DF9 0000 0000             		lea	unk_182E8,a6
0001EB44 1C28 0034                  		move.b	$34(a0),d6
0001EB48 4EB9 0000 0000             		jsr	sub_182D2
0001EB4E 34C2                       		move.w	d2,(a2)+
0001EB50 34C3                       		move.w	d3,(a2)+
0001EB52 34C5                       		move.w	d5,(a2)+
0001EB54 0646 0020                  		addi.w	#$20,d6	; ' '
0001EB58 4845                       		swap	d5
0001EB5A 4EB9 0000 0000             		jsr	sub_182D2
0001EB60 34C2                       		move.w	d2,(a2)+
0001EB62 34C3                       		move.w	d3,(a2)+
0001EB64 34C5                       		move.w	d5,(a2)+
0001EB66 7002                       		moveq	#2,d0
0001EB68 0829 0000 0022             		btst	#0,$22(a1)
0001EB6E 6700                       		beq.s	loc_182C4
0001EB70 4440                       		neg.w	d0
0001EB72                            
0001EB72                            loc_182C4:				; CODE XREF: ROM:000182C0j
0001EB72 D128 0034                  		add.b	d0,$34(a0)
0001EB76 303C 0080                  		move.w	#$80,d0	; '?'
0001EB7A 4EF9 0001 5C68             		jmp	DisplaySprite3
0001EB80                            
0001EB80                            ; =============== S U B	R O U T	I N E =======================================
0001EB80                            
0001EB80                            
0001EB80                            sub_182D2:				; CODE XREF: ROM:0001820Cp
0001EB80                            					; ROM:0001821Ap ...
0001EB80 0246 003E                  		andi.w	#$3E,d6	; '>'
0001EB84 1436 6000                  		move.b	(a6,d6.w),d2
0001EB88 1636 6001                  		move.b	1(a6,d6.w),d3
0001EB8C 4882                       		ext.w	d2
0001EB8E 4883                       		ext.w	d3
0001EB90 D440                       		add.w	d0,d2
0001EB92 D641                       		add.w	d1,d3
0001EB94 4E75                       		rts
0001EB96                            ; End of function sub_182D2
0001EB96                            
0001EB96                            ; ---------------------------------------------------------------------------
0001EB96 0F                         unk_182E8:	dc.b  $F		; DATA XREF: ROM:00018204o
0001EB97                            					; ROM:00018296o
0001EB97 00                         		dc.b   0
0001EB98 0F                         		dc.b  $F
0001EB99 03                         		dc.b   3
0001EB9A 0E                         		dc.b  $E
0001EB9B 06                         		dc.b   6
0001EB9C 0D                         		dc.b  $D
0001EB9D 08                         		dc.b   8
0001EB9E 0B                         		dc.b  $B
0001EB9F 0B                         		dc.b  $B
0001EBA0 08                         		dc.b   8
0001EBA1 0D                         		dc.b  $D
0001EBA2 06                         		dc.b   6
0001EBA3 0E                         		dc.b  $E
0001EBA4 03                         		dc.b   3
0001EBA5 0F                         		dc.b  $F
0001EBA6 00                         		dc.b   0
0001EBA7 10                         		dc.b $10
0001EBA8 FC                         		dc.b $FC ; u
0001EBA9 0F                         		dc.b  $F
0001EBAA F9                         		dc.b $F9 ; u
0001EBAB 0E                         		dc.b  $E
0001EBAC F7                         		dc.b $F7 ; ?
0001EBAD 0D                         		dc.b  $D
0001EBAE F4                         		dc.b $F4 ; o
0001EBAF 0B                         		dc.b  $B
0001EBB0 F2                         		dc.b $F2 ; o
0001EBB1 08                         		dc.b   8
0001EBB2 F1                         		dc.b $F1 ; n
0001EBB3 06                         		dc.b   6
0001EBB4 F0                         		dc.b $F0 ; ?
0001EBB5 03                         		dc.b   3
0001EBB6 F0                         		dc.b $F0 ; ?
0001EBB7 00                         		dc.b   0
0001EBB8 F0                         		dc.b $F0 ; ?
0001EBB9 FC                         		dc.b $FC ; u
0001EBBA F1                         		dc.b $F1 ; n
0001EBBB F9                         		dc.b $F9 ; u
0001EBBC F2                         		dc.b $F2 ; o
0001EBBD F7                         		dc.b $F7 ; ?
0001EBBE F4                         		dc.b $F4 ; o
0001EBBF F4                         		dc.b $F4 ; o
0001EBC0 F7                         		dc.b $F7 ; ?
0001EBC1 F2                         		dc.b $F2 ; o
0001EBC2 F9                         		dc.b $F9 ; u
0001EBC3 F1                         		dc.b $F1 ; n
0001EBC4 FC                         		dc.b $FC ; u
0001EBC5 F0                         		dc.b $F0 ; ?
0001EBC6 FF                         		dc.b $FF
0001EBC7 F0                         		dc.b $F0 ; ?
0001EBC8 03                         		dc.b   3
0001EBC9 F0                         		dc.b $F0 ; ?
0001EBCA 06                         		dc.b   6
0001EBCB F1                         		dc.b $F1 ; n
0001EBCC 08                         		dc.b   8
0001EBCD F2                         		dc.b $F2 ; o
0001EBCE 0B                         		dc.b  $B
0001EBCF F4                         		dc.b $F4 ; o
0001EBD0 0D                         		dc.b  $D
0001EBD1 F7                         		dc.b $F7 ; ?
0001EBD2 0E                         		dc.b  $E
0001EBD3 F9                         		dc.b $F9 ; u
0001EBD4 0F                         		dc.b  $F
0001EBD5 FC                         		dc.b $FC ; u
0001EBD6 08                         unk_18328:	dc.b   8		; DATA XREF: ROM:000181E4o
0001EBD7 05                         		dc.b   5
0001EBD8 07                         		dc.b   7
0001EBD9 06                         		dc.b   6
0001EBDA 06                         		dc.b   6
0001EBDB 07                         		dc.b   7
0001EBDC 05                         		dc.b   5
0001EBDD 08                         		dc.b   8
0001EBDE 06                         		dc.b   6
0001EBDF 07                         		dc.b   7
0001EBE0 07                         		dc.b   7
0001EBE1 06                         		dc.b   6
0001EBE2 FF                         		dc.b $FF
0001EBE3 08                         unk_18335:	dc.b   8		; DATA XREF: ROM:00018158o
0001EBE4 07                         		dc.b   7
0001EBE5 06                         		dc.b   6
0001EBE6 05                         		dc.b   5
0001EBE7 04                         		dc.b   4
0001EBE8 03                         		dc.b   3
0001EBE9 04                         		dc.b   4
0001EBEA 05                         		dc.b   5
0001EBEB 06                         		dc.b   6
0001EBEC 07                         		dc.b   7
0001EBED FF                         		dc.b $FF
0001EBEE 03                         		dc.b   3
0001EBEF 04                         		dc.b   4
0001EBF0 05                         		dc.b   5
0001EBF1 06                         		dc.b   6
0001EBF2 07                         		dc.b   7
0001EBF3 08                         		dc.b   8
0001EBF4 07                         		dc.b   7
0001EBF5 06                         		dc.b   6
0001EBF6 05                         		dc.b   5
0001EBF7 04                         		dc.b   4
0001EBF8 08                         unk_1834A:	dc.b   8		; DATA XREF: ROM:0001815Eo
0001EBF9 07                         		dc.b   7
0001EBFA 06                         		dc.b   6
0001EBFB 05                         		dc.b   5
0001EBFC 04                         		dc.b   4
0001EBFD 03                         		dc.b   3
0001EBFE 02                         		dc.b   2
0001EBFF 03                         		dc.b   3
0001EC00 04                         		dc.b   4
0001EC01 05                         		dc.b   5
0001EC02 06                         		dc.b   6
0001EC03 07                         		dc.b   7
0001EC04 FF                         		dc.b $FF
0001EC05 02                         		dc.b   2
0001EC06 03                         		dc.b   3
0001EC07 04                         		dc.b   4
0001EC08 05                         		dc.b   5
0001EC09 06                         		dc.b   6
0001EC0A 07                         		dc.b   7
0001EC0B 08                         		dc.b   8
0001EC0C 07                         		dc.b   7
0001EC0D 06                         		dc.b   6
0001EC0E 05                         		dc.b   5
0001EC0F 04                         		dc.b   4
0001EC10 03                         		dc.b   3
0001EC11 07                         unk_18363:	dc.b   7		; DATA XREF: ROM:00018164o
0001EC12 06                         		dc.b   6
0001EC13 05                         		dc.b   5
0001EC14 04                         		dc.b   4
0001EC15 03                         		dc.b   3
0001EC16 02                         		dc.b   2
0001EC17 01                         		dc.b   1
0001EC18 02                         		dc.b   2
0001EC19 03                         		dc.b   3
0001EC1A 04                         		dc.b   4
0001EC1B 05                         		dc.b   5
0001EC1C 06                         		dc.b   6
0001EC1D FF                         		dc.b $FF
0001EC1E 01                         		dc.b   1
0001EC1F 02                         		dc.b   2
0001EC20 03                         		dc.b   3
0001EC21 04                         		dc.b   4
0001EC22 05                         		dc.b   5
0001EC23 06                         		dc.b   6
0001EC24 07                         		dc.b   7
0001EC25 06                         		dc.b   6
0001EC26 05                         		dc.b   5
0001EC27 04                         		dc.b   4
0001EC28 03                         		dc.b   3
0001EC29 02                         		dc.b   2
0001EC2A 00                         		dc.b   0
0001EC2B 02                         		dc.b   2
0001EC2C 00                         		dc.b   0
0001EC2D 05                         		dc.b   5
0001EC2E 00                         		dc.b   0
0001EC2F 05                         		dc.b   5
0001EC30 01                         		dc.b   1
0001EC31 05                         		dc.b   5
0001EC32 02                         		dc.b   2
0001EC33 05                         		dc.b   5
0001EC34 03                         		dc.b   3
0001EC35 05                         		dc.b   5
0001EC36 04                         		dc.b   4
0001EC37 FF                         		dc.b $FF
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            ; Object 4A - special stage entry from beta
0001EC38                            ; ---------------------------------------------------------------------------
0001EC38                            
0001EC38                            Obj4A:					; XREF: Obj_Index
0001EC38 7000                       		moveq	#0,d0
0001EC3A 1028 0024                  		move.b	routine(a0),d0
0001EC3E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001EC42 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001EC46                            ; ===========================================================================
0001EC46 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001EC48 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001EC4A 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001EC4C                            ; ===========================================================================
0001EC4C                            
0001EC4C                            Obj4A_Main:				; XREF: Obj4A_Index
0001EC4C 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001EC50 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001EC52 4E75                       		rts	
0001EC54                            ; ===========================================================================
0001EC54                            
0001EC54                            Obj4A_Main2:
0001EC54 5428 0024                  		addq.b	#2,routine(a0)
0001EC58 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001EC60 117C 0004 0001             		move.b	#4,1(a0)
0001EC66 317C 0080 0018             		move.w	#$80,priority(a0)
0001EC6C 117C 0038 0023             		move.b	#$38,width_pixels(a0)
0001EC72 317C 0541 0002             		move.w	#$541,2(a0)
0001EC78 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001EC7E                            
0001EC7E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001EC7E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001EC84 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001EC8A 1178 D022 0022             		move.b	($FFFFD022).w,status(a0)
0001EC90 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001EC96 4EB9 0001 2618             		jsr	AnimateSprite
0001EC9C 0C28 0002 001A             		cmpi.b	#2,mapping_frame(a0)
0001ECA2 6600                       		bne.s	Obj4A_Display
0001ECA4 4A38 D000                  		tst.b	($FFFFD000).w
0001ECA8 6700                       		beq.s	Obj4A_Display
0001ECAA 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001ECB0 303C 006A                  		move.w	#$6A,d0
0001ECB4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001ECBA                            
0001ECBA                            Obj4A_Display:
0001ECBA 4EF9 0001 5C3C             		jmp	DisplaySprite
0001ECC0                            ; ===========================================================================
0001ECC0                            
0001ECC0                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001ECC0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001ECC4 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001ECC6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001ECCC 4EF9 0001 5BF0             		jmp	DeleteObject
0001ECD2                            ; ===========================================================================
0001ECD2                            
0001ECD2                            Obj4A_Wait:
0001ECD2 4E75                       		rts	
0001ECD4                            ; ===========================================================================
0001ECD4                            ; ---------------------------------------------------------------------------
0001ECD4                            ; Object 02 - Blank
0001ECD4                            ; ---------------------------------------------------------------------------
0001ECD4                            Obj04:
0001ECD4 0828 0006 0001             	btst	#6,render_flags(a0)	; is this a child sprite object?
0001ECDA 6600 0000                  	bne.w	dispchild			; if yes, branch
0001ECDE 4A78 D130                  	tst.w	($FFFFD130).w ; has title card sequence finished?
0001ECE2 6600 0000                  	bne.w	return_13684	; if not, branch
0001ECE6 4A78 D5C0                  	tst.w	($FFFFD5C0).w
0001ECEA 6600 0000                  	bne.w	return_13684
0001ECEE 223C 0000 0000             	move.l	#Unc_PauseMenu,d1			        ; Call for Regular Shield Art
0001ECF4 343C BC80                  	move.w	#$BC80,d2			        ; Load Art from this location (VRAM location*20)
0001ECF8                            								; In this case, VRAM = $541*20
0001ECF8 363C 0100                  	move.w	#$100,d3
0001ECFC 4EB9 0000 34E0             	jsr	(QueueDMATransfer).l
0001ED02                            Obj04_Obj:
0001ED02 7000                       	moveq	#0,d0
0001ED04 1028 0024                  	move.b	routine(a0),d0
0001ED08 323B 0000                  	move.w	Obj8F_States(pc,d0.w),d1
0001ED0C 4EBB 1000                  	jsr	Obj8F_States(pc,d1.w)
0001ED10 4EF9 0001 5C3C             	jmp	DisplaySprite
0001ED16                            dispchild:	
0001ED16 303C 0180                  	move.w	#$180,d0
0001ED1A 4EF9 0001 5C68             	jmp	DisplaySprite3
0001ED20                            ; ===========================================================================
0001ED20                            ; off_13612:
0001ED20                            Obj8F_States:
0001ED20 0000                       	dc.w Obj8F_Init-Obj8F_States	; 0
0001ED22 0000                       	dc.w Obj8F_Main-Obj8F_States	; 2
0001ED24                            ; ===========================================================================
0001ED24                            ; loc_13616:
0001ED24                            Obj8F_Init:
0001ED24 10BC 0004                  	move.b 	#4,(a0)	
0001ED28 5428 0024                  	addq.b	#2,routine(a0) ; => Obj0F_Main
0001ED2C 317C 0100 0008             	move.w	#$100,8(a0)
0001ED32 317C 0150 000A             	move.w	#$150,$A(a0)
0001ED38 217C 0000 0000 0004        	move.l	#Map_PauseMenu,mappings(a0)
0001ED40 317C 05E4 0002             	move.w	#$5E4,art_tile(a0)
0001ED46 4EB8 32E8                  	jsr	LoadSpriteList
0001ED4A                            ;	move.b	#0,priority(a0)
0001ED4A 117C 0080 0001             	move.b	#$80,1(a0)
0001ED50 117C 0000 0018             	move.b	#0,priority(a0)
0001ED56 0238 0001 FFBA             	andi.b	#1,($FFFFFFBA).w
0001ED5C 1178 FFBA 001A             	move.b	($FFFFFFBA).w,mapping_frame(a0)
0001ED62                            
0001ED62                            Obj8F_Animate:
0001ED62 43F9 0001 2604             	lea	(Ani_obj0F).l,a1
0001ED68 4EB9 0001 2618             	jsr	AnimateSprite
0001ED6E                            ;	jmp	DisplaySprite
0001ED6E                            ; loc_13644:
0001ED6E                            Obj8F_Main:
0001ED6E 7400                       	moveq	#0,d2
0001ED70 1438 FFBA                  	move.b	($FFFFFFBA).w,d2
0001ED74 1038 F605                  	move.b	(Ctrl_1_Press).w,d0
0001ED78                            ;	or.b	(Ctrl_2_Press).w,d0
0001ED78 0800 0000                  	btst	#0,d0
0001ED7C 6700                       	beq.s	Branch1
0001ED7E 5302                       	subq.b	#1,d2
0001ED80 6400                       	bcc.s	Branch1
0001ED82 143C 0002                  	move.b	#2,d2
0001ED86                            Branch1:
0001ED86 0800 0001                  	btst	#1,d0
0001ED8A 6700                       	beq.s	Branch2
0001ED8C 5202                       	addq.b	#1,d2
0001ED8E 0C02 0003                  	cmpi.b	#3,d2
0001ED92 6500                       	bcs.s	Branch2
0001ED94 7400                       	moveq	#0,d2
0001ED96                            Branch2:
0001ED96 1142 001A                  	move.b	d2,mapping_frame(a0)
0001ED9A 11C2 FFBA                  	move.b	d2,($FFFFFFBA).w
0001ED9E                            ;	andi.b	#3,d0
0001ED9E                            ;	beq.s	return_13684
0001ED9E                            ;	moveq	#$4D+$80,d0 ; selection blip sound
0001ED9E                            ;	jsr	Jmpto_PlaySound_Special
0001ED9E                            
0001ED9E                            return_13684:
0001ED9E 4E75                       	rts
0001EDA0                            
0001EDA0                            
0001EDA0                            	
0001EDA0                            Map_PauseMenu:
0001EDA0                            	include	"_maps\PauseMenuModMap.asm"
0001EDA0                            ; --------------------------------------------------------------------------------
0001EDA0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001EDA0                            ; --------------------------------------------------------------------------------
0001EDA0                            
0001EDA0                            SME_pVhg0:	
0001EDA0 0000 0000                  		dc.w SME_pVhg0_6-SME_pVhg0, SME_pVhg0_15B-SME_pVhg0	
0001EDA4 0000                       		dc.w SME_pVhg0_2B0-SME_pVhg0	
0001EDA6 44                         SME_pVhg0_6:	dc.b $44	
0001EDA7 9000 A001 08               		dc.b $90, 0, $A0, 1, 8	
0001EDAC 9000 A005 10               		dc.b $90, 0, $A0, 5, $10	
0001EDB1 9000 A004 18               		dc.b $90, 0, $A0, 4, $18	
0001EDB6 9000 A008 20               		dc.b $90, 0, $A0, 8, $20	
0001EDBB 9000 A009 38               		dc.b $90, 0, $A0, 9, $38	
0001EDC0 9000 A002 40               		dc.b $90, 0, $A0, 2, $40	
0001EDC5 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001EDCA 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001EDCF 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001EDD4 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001EDD9 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001EDDE A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001EDE3 A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001EDE8 A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001EDED A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001EDF2 9000 800B F8               		dc.b $90, 0, $80, $B, $F8	
0001EDF7 9004 A003 28               		dc.b $90, 4, $A0, 3, $28	
0001EDFC 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001EE01 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001EE06 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001EE0B 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001EE10 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001EE15 A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001EE1A A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001EE1F A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001EE24 A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001EE29 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001EE2E A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001EE33 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001EE38 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001EE3D A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001EE42 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001EE47 A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001EE4C 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001EE51 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001EE56 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001EE5B 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001EE60 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001EE65 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001EE6A 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001EE6F 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001EE74 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001EE79 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001EE7E 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001EE83 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001EE88 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001EE8D 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001EE92 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001EE97 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001EE9C A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001EEA1 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001EEA6 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001EEAB 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001EEB0 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001EEB5 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001EEBA 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001EEBF A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001EEC4 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001EEC9 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001EECE 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001EED3 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001EED8 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001EEDD 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001EEE2 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001EEE7 A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001EEEC 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001EEF1 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001EEF6 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001EEFB 44                         SME_pVhg0_15B:	dc.b $44	
0001EEFC 9800 800B F8               		dc.b $98, 0, $80, $B, $F8	
0001EF01 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001EF06 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001EF0B 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001EF10 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001EF15 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001EF1A 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001EF1F 9800 A006 08               		dc.b $98, 0, $A0, 6, 8	
0001EF24 9800 A002 10               		dc.b $98, 0, $A0, 2, $10	
0001EF29 9800 A000 28               		dc.b $98, 0, $A0, 0, $28	
0001EF2E 9800 A006 30               		dc.b $98, 0, $A0, 6, $30	
0001EF33 9800 A008 38               		dc.b $98, 0, $A0, 8, $38	
0001EF38 A000 800A 08               		dc.b $A0, 0, $80, $A, 8	
0001EF3D A000 8009 10               		dc.b $A0, 0, $80, 9, $10	
0001EF42 A000 8003 18               		dc.b $A0, 0, $80, 3, $18	
0001EF47 A000 8008 20               		dc.b $A0, 0, $80, 8, $20	
0001EF4C 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001EF51 9804 A007 18               		dc.b $98, 4, $A0, 7, $18	
0001EF56 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001EF5B 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001EF60 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001EF65 A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001EF6A A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001EF6F A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001EF74 A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001EF79 A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001EF7E A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001EF83 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001EF88 A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001EF8D A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001EF92 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001EF97 A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001EF9C A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001EFA1 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001EFA6 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001EFAB 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001EFB0 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001EFB5 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001EFBA 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001EFBF 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001EFC4 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001EFC9 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001EFCE 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001EFD3 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001EFD8 A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001EFDD 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001EFE2 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001EFE7 A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001EFEC 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001EFF1 A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001EFF6 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001EFFB 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F000 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F005 A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F00A 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F00F 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F014 A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F019 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F01E 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F023 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F028 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F02D A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F032 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F037 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F03C A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F041 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F046 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F04B A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F050 44                         SME_pVhg0_2B0:	dc.b $44	
0001F051 9000 8001 08               		dc.b $90, 0, $80, 1, 8	
0001F056 9000 8005 10               		dc.b $90, 0, $80, 5, $10	
0001F05B 9000 8004 18               		dc.b $90, 0, $80, 4, $18	
0001F060 9000 8008 20               		dc.b $90, 0, $80, 8, $20	
0001F065 9000 8009 38               		dc.b $90, 0, $80, 9, $38	
0001F06A 9000 8002 40               		dc.b $90, 0, $80, 2, $40	
0001F06F 9800 8006 08               		dc.b $98, 0, $80, 6, 8	
0001F074 9800 8002 10               		dc.b $98, 0, $80, 2, $10	
0001F079 9804 8007 18               		dc.b $98, 4, $80, 7, $18	
0001F07E 9800 8000 28               		dc.b $98, 0, $80, 0, $28	
0001F083 9800 8006 30               		dc.b $98, 0, $80, 6, $30	
0001F088 9800 8008 38               		dc.b $98, 0, $80, 8, $38	
0001F08D A000 800B F8               		dc.b $A0, 0, $80, $B, $F8	
0001F092 A000 A00A 08               		dc.b $A0, 0, $A0, $A, 8	
0001F097 A000 A009 10               		dc.b $A0, 0, $A0, 9, $10	
0001F09C A000 A003 18               		dc.b $A0, 0, $A0, 3, $18	
0001F0A1 A000 A008 20               		dc.b $A0, 0, $A0, 8, $20	
0001F0A6 9004 8003 28               		dc.b $90, 4, $80, 3, $28	
0001F0AB 8804 881A F0               		dc.b $88, 4, $88, $1A, $F0	
0001F0B0 9004 8818 F0               		dc.b $90, 4, $88, $18, $F0	
0001F0B5 9804 8818 F0               		dc.b $98, 4, $88, $18, $F0	
0001F0BA A004 8818 F0               		dc.b $A0, 4, $88, $18, $F0	
0001F0BF A804 981A F0               		dc.b $A8, 4, $98, $1A, $F0	
0001F0C4 A800 901A 00               		dc.b $A8, 0, $90, $1A, 0	
0001F0C9 A800 901A 08               		dc.b $A8, 0, $90, $1A, 8	
0001F0CE A800 901A 10               		dc.b $A8, 0, $90, $1A, $10	
0001F0D3 A800 901A 18               		dc.b $A8, 0, $90, $1A, $18	
0001F0D8 A800 901A 20               		dc.b $A8, 0, $90, $1A, $20	
0001F0DD A800 901A 28               		dc.b $A8, 0, $90, $1A, $28	
0001F0E2 A800 901A 30               		dc.b $A8, 0, $90, $1A, $30	
0001F0E7 A800 901A 38               		dc.b $A8, 0, $90, $1A, $38	
0001F0EC A804 901A 40               		dc.b $A8, 4, $90, $1A, $40	
0001F0F1 A004 8018 40               		dc.b $A0, 4, $80, $18, $40	
0001F0F6 9804 8018 40               		dc.b $98, 4, $80, $18, $40	
0001F0FB 9004 8018 40               		dc.b $90, 4, $80, $18, $40	
0001F100 8804 801A 40               		dc.b $88, 4, $80, $1A, $40	
0001F105 8800 801A 00               		dc.b $88, 0, $80, $1A, 0	
0001F10A 8800 801A 08               		dc.b $88, 0, $80, $1A, 8	
0001F10F 8800 801A 10               		dc.b $88, 0, $80, $1A, $10	
0001F114 8800 801A 18               		dc.b $88, 0, $80, $1A, $18	
0001F119 8800 801A 20               		dc.b $88, 0, $80, $1A, $20	
0001F11E 8800 801A 28               		dc.b $88, 0, $80, $1A, $28	
0001F123 8800 801A 30               		dc.b $88, 0, $80, $1A, $30	
0001F128 8800 801A 38               		dc.b $88, 0, $80, $1A, $38	
0001F12D A000 8018 00               		dc.b $A0, 0, $80, $18, 0	
0001F132 9800 8018 00               		dc.b $98, 0, $80, $18, 0	
0001F137 9000 8018 00               		dc.b $90, 0, $80, $18, 0	
0001F13C A000 8018 08               		dc.b $A0, 0, $80, $18, 8	
0001F141 9000 8018 08               		dc.b $90, 0, $80, $18, 8	
0001F146 A000 8018 10               		dc.b $A0, 0, $80, $18, $10	
0001F14B 9800 8018 08               		dc.b $98, 0, $80, $18, 8	
0001F150 9800 8018 10               		dc.b $98, 0, $80, $18, $10	
0001F155 9000 8018 10               		dc.b $90, 0, $80, $18, $10	
0001F15A A000 8018 18               		dc.b $A0, 0, $80, $18, $18	
0001F15F 9800 8018 18               		dc.b $98, 0, $80, $18, $18	
0001F164 9000 8018 18               		dc.b $90, 0, $80, $18, $18	
0001F169 A000 8018 20               		dc.b $A0, 0, $80, $18, $20	
0001F16E 9800 8018 20               		dc.b $98, 0, $80, $18, $20	
0001F173 9000 8018 20               		dc.b $90, 0, $80, $18, $20	
0001F178 9000 8018 28               		dc.b $90, 0, $80, $18, $28	
0001F17D 9800 8018 28               		dc.b $98, 0, $80, $18, $28	
0001F182 A000 8018 28               		dc.b $A0, 0, $80, $18, $28	
0001F187 9000 8018 30               		dc.b $90, 0, $80, $18, $30	
0001F18C 9800 8018 30               		dc.b $98, 0, $80, $18, $30	
0001F191 A000 8018 30               		dc.b $A0, 0, $80, $18, $30	
0001F196 9000 8018 38               		dc.b $90, 0, $80, $18, $38	
0001F19B 9800 8018 38               		dc.b $98, 0, $80, $18, $38	
0001F1A0 A000 8018 38               		dc.b $A0, 0, $80, $18, $38	
0001F1A6 00                         		even
0001F1A6 00                         		even
0001F1A6                            
0001F1A6                            ;	rts
0001F1A6                            ; END OF FUNCTION CHUNK	FOR sub_33343A
0001F1A6                            		
0001F1A6                            ; ---------------------------------------------------------------------------
0001F1A6                            ; Object 08 - water splash (LZ)
0001F1A6                            ; ---------------------------------------------------------------------------
0001F1A6                            
0001F1A6                            Obj08:					; XREF: Obj_Index
0001F1A6 7000                       		moveq	#0,d0
0001F1A8 1028 0024                  		move.b	routine(a0),d0
0001F1AC 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001F1B0 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001F1B4                            ; ===========================================================================
0001F1B4 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001F1B6 0000                       		dc.w Obj08_Display-Obj08_Index
0001F1B8 0000                       		dc.w Obj08_Delete-Obj08_Index
0001F1BA                            ; ===========================================================================
0001F1BA                            
0001F1BA                            Obj08_Main:				; XREF: Obj08_Index
0001F1BA 5428 0024                  		addq.b	#2,routine(a0)
0001F1BE 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001F1C6 0028 0004 0001             		ori.b	#4,1(a0)
0001F1CC 317C 0080 0018             		move.w	#$80,priority(a0)
0001F1D2 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001F1D8 317C 4259 0002             		move.w	#$4259,2(a0)
0001F1DE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001F1E4                            
0001F1E4                            Obj08_Display:				; XREF: Obj08_Index
0001F1E4 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001F1EA 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001F1F0 4EB9 0001 2618             		jsr	AnimateSprite
0001F1F6 4EF9 0001 5C3C             		jmp	DisplaySprite
0001F1FC                            ; ===========================================================================
0001F1FC                            
0001F1FC                            Obj08_Delete:				; XREF: Obj08_Index
0001F1FC 4EF9 0001 5BF0             		jmp	DeleteObject	; delete when animation	is complete
0001F202                            ; ===========================================================================
0001F202                            Ani_obj38:
0001F202                            	include "_anim\obj38.asm"
0001F202                            ; ---------------------------------------------------------------------------
0001F202                            ; Animation script - shield and invincibility stars
0001F202                            ; ---------------------------------------------------------------------------
0001F202 0000                       		dc.w byte_14356-Ani_obj38
0001F204 0000                       		dc.w byte_1435E-Ani_obj38
0001F206 0000                       		dc.w byte_14364-Ani_obj38
0001F208 0000                       		dc.w byte_1437E-Ani_obj38
0001F20A 0000                       		dc.w byte_14398-Ani_obj38
0001F20C 0001 0302 0103 02FF        byte_14356:	dc.b 0,	1, 3, 2, 1, 3, 2, $FF
0001F214 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001F21A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001F22B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001F234 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001F245 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001F24E 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001F25F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001F268                            		even
0001F268                            		even
0001F268 0000                       Ani_Obj38_Shield:dc.w byte_125C2-Ani_Obj38_Shield ; DATA XREF: ROM:00012448o
0001F26A                            					; ROM:Ani_Obj38_Shieldo ...
0001F26A 0000                       		dc.w byte_125CE-Ani_Obj38_Shield
0001F26C 0000                       		dc.w byte_125D4-Ani_Obj38_Shield
0001F26E 0000                       		dc.w byte_125EE-Ani_Obj38_Shield
0001F270 0000                       		dc.w byte_12608-Ani_Obj38_Shield
0001F272 0005 0005 0105 0205 0305+  byte_125C2:	dc.b   0,  5,  0,  5,  1,  5,  2,  5,  3,  5,  4,$FF; 0
0001F27E                            					; DATA XREF: ROM:Ani_Obj38_Shieldo
0001F27E 0504 0506 07FF             byte_125CE:	dc.b   5,  4,  5,  6,  7,$FF; 0	; DATA XREF: ROM:000125BAo
0001F284 0004 0400 0404 0005 0500+  byte_125D4:	dc.b   0,  4,  4,  0,  4,  4,  0,  5,  5,  0,  5,  5,  0,  6,  6,  0; 0
0001F294                            					; DATA XREF: ROM:000125BCo
0001F294 0606 0007 0700 0707 00FF   		dc.b   6,  6,  0,  7,  7,  0,  7,  7,  0,$FF; 16
0001F29E 0004 0400 0400 0005 0500+  byte_125EE:	dc.b   0,  4,  4,  0,  4,  0,  0,  5,  5,  0,  5,  0,  0,  6,  6,  0; 0
0001F2AE                            					; DATA XREF: ROM:000125BEo
0001F2AE 0600 0007 0700 0700 00FF   		dc.b   6,  0,  0,  7,  7,  0,  7,  0,  0,$FF; 16
0001F2B8 0004 0000 0400 0005 0000+  byte_12608:	dc.b   0,  4,  0,  0,  4,  0,  0,  5,  0,  0,  5,  0,  0,  6,  0,  0; 0
0001F2C8                            					; DATA XREF: ROM:000125C0o
0001F2C8 0600 0007 0000 0700 00FF   		dc.b   6,  0,  0,  7,  0,  0,  7,  0,  0,$FF; 16
0001F2D2                            
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2                            ; Sprite mappings - shield and invincibility stars
0001F2D2                            ; ---------------------------------------------------------------------------
0001F2D2                            Map_obj38:
0001F2D2                            	include "_maps\obj38_star.asm"
0001F2D2                            ; --------------------------------------------------------------------------------
0001F2D2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F2D2                            ; --------------------------------------------------------------------------------
0001F2D2                            
0001F2D2                            SME_HtuJ7:	
0001F2D2 0000 0000                  		dc.w SME_HtuJ7_12-SME_HtuJ7, SME_HtuJ7_13-SME_HtuJ7	
0001F2D6 0000 0000                  		dc.w SME_HtuJ7_19-SME_HtuJ7, SME_HtuJ7_1F-SME_HtuJ7	
0001F2DA 0000 0000                  		dc.w SME_HtuJ7_25-SME_HtuJ7, SME_HtuJ7_2B-SME_HtuJ7	
0001F2DE 0000 0000                  		dc.w SME_HtuJ7_31-SME_HtuJ7, SME_HtuJ7_37-SME_HtuJ7	
0001F2E2 0000                       		dc.w SME_HtuJ7_3D-SME_HtuJ7	
0001F2E4 00                         SME_HtuJ7_12:	dc.b 0	
0001F2E5 01                         SME_HtuJ7_13:	dc.b 1	
0001F2E6 F801 0000 FC               		dc.b $F8, 1, 0, 0, $FC	
0001F2EB 01                         SME_HtuJ7_19:	dc.b 1	
0001F2EC F801 0002 FC               		dc.b $F8, 1, 0, 2, $FC	
0001F2F1 01                         SME_HtuJ7_1F:	dc.b 1	
0001F2F2 F801 0004 FC               		dc.b $F8, 1, 0, 4, $FC	
0001F2F7 01                         SME_HtuJ7_25:	dc.b 1	
0001F2F8 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
0001F2FD 01                         SME_HtuJ7_2B:	dc.b 1	
0001F2FE F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0001F303 01                         SME_HtuJ7_31:	dc.b 1	
0001F304 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0001F309 01                         SME_HtuJ7_37:	dc.b 1	
0001F30A F805 000E F8               		dc.b $F8, 5, 0, $E, $F8	
0001F30F 01                         SME_HtuJ7_3D:	dc.b 1	
0001F310 F00F 0012 F0               		dc.b $F0, $F, 0, $12, $F0	
0001F316 00                         		even
0001F316 00                         		even
0001F316                            	
0001F316                            Map_obj38_Sheild:
0001F316                            	include	"_maps\obj38_Sheild.asm"
0001F316                            ; --------------------------------------------------------------------------------
0001F316                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F316                            ; --------------------------------------------------------------------------------
0001F316                            
0001F316                            SME_nhdJe:	
0001F316 0000 0000                  		dc.w SME_nhdJe_C-SME_nhdJe, SME_nhdJe_21-SME_nhdJe	
0001F31A 0000 0000                  		dc.w SME_nhdJe_36-SME_nhdJe, SME_nhdJe_4B-SME_nhdJe	
0001F31E 0000 0000                  		dc.w SME_nhdJe_60-SME_nhdJe, SME_nhdJe_75-SME_nhdJe	
0001F322 04                         SME_nhdJe_C:	dc.b 4	
0001F323 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
0001F328 F005 0800 00               		dc.b $F0, 5, 8, 0, 0	
0001F32D 0005 1000 F0               		dc.b 0, 5, $10, 0, $F0	
0001F332 0005 1800 00               		dc.b 0, 5, $18, 0, 0	
0001F337 04                         SME_nhdJe_21:	dc.b 4	
0001F338 F005 0004 F0               		dc.b $F0, 5, 0, 4, $F0	
0001F33D F005 0804 00               		dc.b $F0, 5, 8, 4, 0	
0001F342 0005 1004 F0               		dc.b 0, 5, $10, 4, $F0	
0001F347 0005 1804 00               		dc.b 0, 5, $18, 4, 0	
0001F34C 04                         SME_nhdJe_36:	dc.b 4	
0001F34D F005 0008 F0               		dc.b $F0, 5, 0, 8, $F0	
0001F352 F005 0808 00               		dc.b $F0, 5, 8, 8, 0	
0001F357 0005 1008 F0               		dc.b 0, 5, $10, 8, $F0	
0001F35C 0005 1808 00               		dc.b 0, 5, $18, 8, 0	
0001F361 04                         SME_nhdJe_4B:	dc.b 4	
0001F362 F005 000C F0               		dc.b $F0, 5, 0, $C, $F0	
0001F367 F005 080C 00               		dc.b $F0, 5, 8, $C, 0	
0001F36C 0005 100C F0               		dc.b 0, 5, $10, $C, $F0	
0001F371 0005 180C 00               		dc.b 0, 5, $18, $C, 0	
0001F376 04                         SME_nhdJe_60:	dc.b 4	
0001F377 F005 0010 F0               		dc.b $F0, 5, 0, $10, $F0	
0001F37C F005 0810 00               		dc.b $F0, 5, 8, $10, 0	
0001F381 0005 1010 F0               		dc.b 0, 5, $10, $10, $F0	
0001F386 0005 1810 00               		dc.b 0, 5, $18, $10, 0	
0001F38B 04                         SME_nhdJe_75:	dc.b 4	
0001F38C E80A 0014 E8               		dc.b $E8, $A, 0, $14, $E8	
0001F391 000A 1014 E8               		dc.b 0, $A, $10, $14, $E8	
0001F396 E80A 0814 00               		dc.b $E8, $A, 8, $14, 0	
0001F39B 000A 1814 00               		dc.b 0, $A, $18, $14, 0	
0001F3A0                            		even
0001F3A0                            		even
0001F3A0                            
0001F3A0                            
0001F3A0                            Ani_obj4A:
0001F3A0                            	include "_anim\obj4A.asm"
0001F3A0                            ; ---------------------------------------------------------------------------
0001F3A0                            ; Animation script - special stage entry effect from beta
0001F3A0                            ; ---------------------------------------------------------------------------
0001F3A0 0000                       		dc.w byte_14458-Ani_obj4A
0001F3A2 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001F3B6                            		even
0001F3B6                            		even
0001F3B6                            
0001F3B6                            ; ---------------------------------------------------------------------------
0001F3B6                            ; Sprite mappings - special stage entry	from beta
0001F3B6                            ; ---------------------------------------------------------------------------
0001F3B6                            Map_obj4A:
0001F3B6                            	include "_maps\obj4A.asm"
0001F3B6                            ; ---------------------------------------------------------------------------
0001F3B6                            ; Sprite mappings - special stage entry	from beta
0001F3B6                            ; ---------------------------------------------------------------------------
0001F3B6 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
0001F3BA 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001F3BE 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
0001F3C2 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
0001F3C6 03                         byte_1447C:	dc.b 3
0001F3C7 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001F3CC 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001F3D1 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001F3D6 03                         byte_1448C:	dc.b 3
0001F3D7 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001F3DC 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001F3E1 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001F3E6 05                         byte_1449C:	dc.b 5
0001F3E7 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001F3EC EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001F3F1 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001F3F6 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001F3FB 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001F400 09                         byte_144B6:	dc.b 9
0001F401 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001F406 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001F40B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001F410 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001F415 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001F41A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001F41F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001F424 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001F429 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001F42E 12                         byte_144E4:	dc.b $12
0001F42F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001F434 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001F439 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001F43E 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001F443 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001F448 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001F44D 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001F452 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001F457 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001F45C 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001F461 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001F466 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001F46B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001F470 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001F475 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001F47A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001F47F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001F484 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001F489 11                         byte_1453F:	dc.b $11
0001F48A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001F48F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001F494 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001F499 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001F49E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001F4A3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001F4A8 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001F4AD F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001F4B2 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001F4B7 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001F4BC 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001F4C1 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001F4C6 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001F4CB 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001F4D0 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001F4D5 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001F4DA 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001F4DF 09                         byte_14595:	dc.b 9
0001F4E0 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001F4E5 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001F4EA 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001F4EF 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001F4F4 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001F4F9 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001F4FE 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
0001F503 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001F508 04                         		dc.b 4
0001F509 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001F50E                            		even
0001F50E                            		even
0001F50E                            
0001F50E                            Ani_obj08:
0001F50E                            	include "_anim\obj08.asm"
0001F50E                            ; ---------------------------------------------------------------------------
0001F50E                            ; Animation script - water splash (LZ)
0001F50E                            ; ---------------------------------------------------------------------------
0001F50E 0000                       		dc.w byte_145C6-Ani_obj08
0001F510 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001F516                            		even
0001F516                            		even
0001F516                            
0001F516                            ; ---------------------------------------------------------------------------
0001F516                            ; Sprite mappings - water splash (LZ)
0001F516                            ; ---------------------------------------------------------------------------
0001F516                            Map_obj08:
0001F516                            	include "_maps\obj08.asm"
0001F516                            ; ---------------------------------------------------------------------------
0001F516                            ; Sprite mappings - water splash (LZ)
0001F516                            ; ---------------------------------------------------------------------------
0001F516 0000                       		dc.w byte_145D2-Map_obj08
0001F518 0000                       		dc.w byte_145DD-Map_obj08
0001F51A 0000                       		dc.w byte_145E8-Map_obj08
0001F51C 02                         byte_145D2:	dc.b 2
0001F51D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001F522 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001F527 02                         byte_145DD:	dc.b 2
0001F528 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001F52D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001F532 01                         byte_145E8:	dc.b 1
0001F533 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001F538                            		even
0001F538                            		even
0001F538                            ; ---------------------------------------------------------------------------
0001F538                            ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
0001F538                            ; ---------------------------------------------------------------------------
0001F538                            
0001F538                            Obj03:
0001F538 7000                       		moveq	#0,d0
0001F53A 1028 0024                  		move.b	$24(a0),d0
0001F53E 323B 0000                  		move.w	Obj03_Index(pc,d0.w),d1
0001F542 4EBB 1000                  		jsr	Obj03_Index(pc,d1.w)
0001F546 4EFA 9626                  		jmp	MarkObjGone3
0001F54A                            ; ===========================================================================
0001F54A                            ; ---------------------------------------------------------------------------
0001F54A 0000                       Obj03_Index:	dc.w Obj03_Init-Obj03_Index
0001F54C 0000                       		dc.w Obj03_MainX-Obj03_Index
0001F54E 0000                       		dc.w Obj03_MainY-Obj03_Index
0001F550                            ; ---------------------------------------------------------------------------
0001F550                            ; ===========================================================================
0001F550                            ; ---------------------------------------------------------------------------
0001F550                            ; Initiation
0001F550                            ; ---------------------------------------------------------------------------
0001F550                            
0001F550                            Obj03_Init:
0001F550 5428 0024                  		addq.b	#2,$24(a0)
0001F554 217C 0000 FCC4 0004        		move.l	#Map_Obj19,$04(a0)
0001F55C 317C 27B2 0002             		move.w	#$27B2,$02(a0)
0001F562 0028 0004 0001             		ori.b	#4,$01(a0)
0001F568 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0001F56E 317C 0280 0018             		move.w	#$280,priority(a0)
0001F574 1028 0028                  		move.b	$28(a0),d0
0001F578 0800 0002                  		btst	#2,d0
0001F57C 6700                       		beq.s	Obj03_Init_CheckX
0001F57E                            
0001F57E                            ;Obj03_Init_CheckY:
0001F57E 5428 0024                  		addq.b	#2,$24(a0) ; => Obj03_MainY
0001F582 0240 0007                  		andi.w	#7,d0
0001F586 1140 001A                  		move.b	d0,$1A(a0)
0001F58A 0240 0003                  		andi.w	#3,d0
0001F58E D040                       		add.w	d0,d0
0001F590 317B 0000 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001F596 3228 000C                  		move.w	$0C(a0),d1
0001F59A 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F59E B269 000C                  		cmp.w	$0C(a1),d1
0001F5A2 6400                       		bcc.s	Obj03_Init_Next
0001F5A4 117C 0001 0034             		move.b	#1,$34(a0)
0001F5AA                            Obj03_Init_Next:
0001F5AA                            	;	lea	(Sidekick).w,a1 ; a1=character
0001F5AA                            	;	cmp.w	$0C(a1),d1
0001F5AA                            	;	bcc.s	+
0001F5AA                            	;	move.b	#1,$35(a0)
0001F5AA                            ;+
0001F5AA 6000 0000                  		bra.w	Obj03_MainY
0001F5AE                            ; ===========================================================================
0001F5AE                            word_1FD68:
0001F5AE 0020                       	dc.w  $020
0001F5B0 0040                       	dc.w  $040	; 1
0001F5B2 0080                       	dc.w  $080	; 2
0001F5B4 0100                       	dc.w  $100	; 3
0001F5B6                            ; ===========================================================================
0001F5B6                            ; loc_1FD70:
0001F5B6                            Obj03_Init_CheckX:
0001F5B6 0240 0003                  		andi.w	#3,d0
0001F5BA 1140 001A                  		move.b	d0,$1A(a0)
0001F5BE D040                       		add.w	d0,d0
0001F5C0 317B 00EC 0032             		move.w	word_1FD68(pc,d0.w),$32(a0)
0001F5C6 3228 0008                  		move.w	$08(a0),d1
0001F5CA 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F5CE B269 0008                  		cmp.w	$08(a1),d1
0001F5D2 6400                       		bcc.s	Obj03_Init_CheckX_Next
0001F5D4 117C 0001 0034             		move.b	#1,$34(a0)
0001F5DA                            Obj03_Init_CheckX_Next:
0001F5DA                            	;	lea	(Sidekick).w,a1 ; a1=character
0001F5DA                            	;	cmp.w	$08(a1),d1
0001F5DA                            	;	bcc.s	+
0001F5DA                            	;	move.b	#1,$35(a0)
0001F5DA                            ;+
0001F5DA                            
0001F5DA                            Obj03_MainX:
0001F5DA 4A78 FE08                  		tst.w	($FFFFFE08).w
0001F5DE 6600 0000                  		bne.w	return_1FEAC
0001F5E2 3228 0008                  		move.w	$08(a0),d1
0001F5E6 45E8 0034                  		lea	$34(a0),a2
0001F5EA 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F5EE                            ;		bsr.s	+
0001F5EE                            ;		lea	(Sidekick).w,a1 ; a1=character
0001F5EE                            
0001F5EE                            ;+
0001F5EE 4A1A                       		tst.b	(a2)+
0001F5F0 6600                       		bne.s	Obj03_MainX_Alt
0001F5F2 B269 0008                  		cmp.w	$08(a1),d1
0001F5F6 6200 0000                  		bhi.w	return_1FEAC
0001F5FA 157C 0001 FFFF             		move.b	#1,-1(a2)
0001F600 3428 000C                  		move.w	$0C(a0),d2
0001F604 3602                       		move.w	d2,d3
0001F606 3828 0032                  		move.w	$32(a0),d4
0001F60A 9444                       		sub.w	d4,d2
0001F60C D644                       		add.w	d4,d3
0001F60E 3829 000C                  		move.w	$0C(a1),d4
0001F612 B842                       		cmp.w	d2,d4
0001F614 6D00 0000                  		blt.w	return_1FEAC
0001F618 B843                       		cmp.w	d3,d4
0001F61A 6C00 0000                  		bge.w	return_1FEAC
0001F61E 1028 0028                  		move.b	$28(a0),d0
0001F622 6A00                       		bpl.s	Obj03_ICX_B1
0001F624 0829 0001 002B             		btst	#1,$2B(a1)
0001F62A 6600 0000                  		bne.w	return_1FEAC
0001F62E                            
0001F62E                            Obj03_ICX_B1:
0001F62E 0828 0000 0001             		btst	#0,$01(a0)
0001F634 6600                       		bne.s	Obj03_ICX_B2
0001F636 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F63C                            	;	move.b	#$C,$3E(a1)
0001F63C                            	;	move.b	#$D,$3F(a1)
0001F63C 0800 0003                  		btst	#3,d0
0001F640 6700                       		beq.s	Obj03_ICX_B2
0001F642 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F648                            	;	move.b	#$E,$3E(a1)
0001F648                            	;	move.b	#$F,$3F(a1)
0001F648                            
0001F648                            Obj03_ICX_B2:
0001F648 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F64E 0800 0005                  		btst	#5,d0
0001F652 6700                       		beq.s	return_1FEAC
0001F654 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F65A 6000                       		bra.s	return_1FEAC
0001F65C                            ; ===========================================================================
0001F65C                            
0001F65C                            Obj03_MainX_Alt:
0001F65C B269 0008                  		cmp.w	$08(a1),d1
0001F660 6300 0000                  		bls.w	return_1FEAC
0001F664 157C 0000 FFFF             		move.b	#0,-1(a2)
0001F66A 3428 000C                  		move.w	$0C(a0),d2
0001F66E 3602                       		move.w	d2,d3
0001F670 3828 0032                  		move.w	$32(a0),d4
0001F674 9444                       		sub.w	d4,d2
0001F676 D644                       		add.w	d4,d3
0001F678 3829 000C                  		move.w	$0C(a1),d4
0001F67C B842                       		cmp.w	d2,d4
0001F67E 6D00 0000                  		blt.w	return_1FEAC
0001F682 B843                       		cmp.w	d3,d4
0001F684 6C00 0000                  		bge.w	return_1FEAC
0001F688 1028 0028                  		move.b	$28(a0),d0
0001F68C 6A00                       		bpl.s	Obj03_MXA_B1
0001F68E 0829 0001 002B             		btst	#1,$2B(a1)
0001F694 6600 0000                  		bne.w	return_1FEAC
0001F698                            
0001F698                            Obj03_MXA_B1:
0001F698 0828 0000 0001             		btst	#0,$01(a0)
0001F69E 6600                       		bne.s	Obj03_MXA_B2
0001F6A0 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F6A6                            	;	move.b	#$C,$3E(a1)
0001F6A6                            	;	move.b	#$D,$3F(a1)
0001F6A6 0800 0004                  		btst	#4,d0
0001F6AA 6700                       		beq.s	Obj03_MXA_B2
0001F6AC 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F6B2                            	;	move.b	#$E,$3E(a1)
0001F6B2                            	;	move.b	#$F,$3F(a1)
0001F6B2                            
0001F6B2                            Obj03_MXA_B2:
0001F6B2 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F6B8 0800 0006                  		btst	#6,d0
0001F6BC 6700                       		beq.s	return_1FEAC
0001F6BE 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F6C4                            
0001F6C4                            return_1FEAC:
0001F6C4 4E75                       		rts
0001F6C6                            
0001F6C6                            ; ===========================================================================
0001F6C6                            
0001F6C6                            Obj03_MainY:
0001F6C6 4A78 FE08                  		tst.w	($FFFFFE08).w
0001F6CA 6600 0000                  		bne.w	return_1FFB6
0001F6CE 3228 000C                  		move.w	$0C(a0),d1
0001F6D2 45E8 0034                  		lea	$34(a0),a2
0001F6D6 43F8 D000                  		lea	($FFFFD000).w,a1 ; a1=character
0001F6DA                            ;		bsr.s	+
0001F6DA                            ;		lea	(Sidekick).w,a1 ; a1=character
0001F6DA                            
0001F6DA                            ;+
0001F6DA 4A1A                       		tst.b	(a2)+
0001F6DC 6600                       		bne.s	Obj03_MainY_Alt
0001F6DE B269 000C                  		cmp.w	$0C(a1),d1
0001F6E2 6200 0000                  		bhi.w	return_1FFB6
0001F6E6 157C 0001 FFFF             		move.b	#1,-1(a2)
0001F6EC 3428 0008                  		move.w	$08(a0),d2
0001F6F0 3602                       		move.w	d2,d3
0001F6F2 3828 0032                  		move.w	$32(a0),d4
0001F6F6 9444                       		sub.w	d4,d2
0001F6F8 D644                       		add.w	d4,d3
0001F6FA 3829 0008                  		move.w	$08(a1),d4
0001F6FE B842                       		cmp.w	d2,d4
0001F700 6D00 0000                  		blt.w	return_1FFB6
0001F704 B843                       		cmp.w	d3,d4
0001F706 6C00 0000                  		bge.w	return_1FFB6
0001F70A 1028 0028                  		move.b	$28(a0),d0
0001F70E 6A00                       		bpl.s	Obj03_MY_B1
0001F710 0829 0001 002B             		btst	#1,$2B(a1)
0001F716 6600 0000                  		bne.w	return_1FFB6
0001F71A                            
0001F71A                            Obj03_MY_B1:
0001F71A 0828 0000 0001             		btst	#0,$01(a0)
0001F720 6600                       		bne.s	Obj03_MY_B2
0001F722 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F728                            	;	move.b	#$C,$3E(a1)
0001F728                            	;	move.b	#$D,$3F(a1)
0001F728 0800 0003                  		btst	#3,d0
0001F72C 6700                       		beq.s	Obj03_MY_B2
0001F72E 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F734                            	;	move.b	#$E,$3E(a1)
0001F734                            	;	move.b	#$F,$3F(a1)
0001F734                            
0001F734                            Obj03_MY_B2:
0001F734 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F73A 0800 0005                  		btst	#5,d0
0001F73E 6700                       		beq.s	return_1FFB6
0001F740 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F746 6000                       		bra.s	return_1FFB6
0001F748                            
0001F748                            ; ===========================================================================
0001F748                            
0001F748                            Obj03_MainY_Alt:
0001F748 B269 000C                  		cmp.w	$0C(a1),d1
0001F74C 6300 0000                  		bls.w	return_1FFB6
0001F750 157C 0000 FFFF             		move.b	#0,-1(a2)
0001F756 3428 0008                  		move.w	$08(a0),d2
0001F75A 3602                       		move.w	d2,d3
0001F75C 3828 0032                  		move.w	$32(a0),d4
0001F760 9444                       		sub.w	d4,d2
0001F762 D644                       		add.w	d4,d3
0001F764 3829 0008                  		move.w	$08(a1),d4
0001F768 B842                       		cmp.w	d2,d4
0001F76A 6D00 0000                  		blt.w	return_1FFB6
0001F76E B843                       		cmp.w	d3,d4
0001F770 6C00 0000                  		bge.w	return_1FFB6
0001F774 1028 0028                  		move.b	$28(a0),d0
0001F778 6A00                       		bpl.s	Obj03_MYA_B1
0001F77A 0829 0001 002B             		btst	#1,$2B(a1)
0001F780 6600 0000                  		bne.w	return_1FFB6
0001F784                            
0001F784                            Obj03_MYA_B1
0001F784 0828 0000 0001             		btst	#0,$01(a0)
0001F78A 6600                       		bne.s	Obj03_MYA_B2
0001F78C 11FC 0000 FFF7             			move.b	#$00,($FFFFFFF7).w
0001F792                            	;	move.b	#$C,$3E(a1)
0001F792                            	;	move.b	#$D,$3F(a1)
0001F792 0800 0004                  		btst	#4,d0
0001F796 6700                       		beq.s	Obj03_MYA_B2
0001F798 11FC 0001 FFF7             			move.b	#$01,($FFFFFFF7).w
0001F79E                            	;	move.b	#$E,$3E(a1)
0001F79E                            	;	move.b	#$F,$3F(a1)
0001F79E                            
0001F79E                            Obj03_MYA_B2:
0001F79E 0269 7FFF 0002             		andi.w	#$7FFF,$02(a1)
0001F7A4 0800 0006                  		btst	#6,d0
0001F7A8 6700                       		beq.s	return_1FFB6
0001F7AA 0069 8000 0002             		ori.w	#$8000,$02(a1)
0001F7B0                            
0001F7B0                            return_1FFB6:
0001F7B0 4E75                       		rts
0001F7B2                            
0001F7B2                            ; ===========================================================================
0001F7B2                            ; ----------------------------------------------
0001F7B2                            ; Object 8E - Super Sonic stars
0001F7B2                            ; ----------------------------------------------
0001F7B2                            
0001F7B2                            Obj8E:						  ; ...
0001F7B2 223C 0000 0000             		move.l	#Unc_SuperSonic_stars,d1			        ; Call for Regular Shield Art
0001F7B8 343C ABC0                  		move.w	#$ABC0,d2			        ; Load Art from this location (VRAM location*20)
0001F7BC                            								; In this case, VRAM = $541*20
0001F7BC 363C 0100                  		move.w	#$100,d3
0001F7C0 4EB9 0000 34E0             		jsr	(QueueDMATransfer).l
0001F7C6 7000                       		moveq	#0,d0
0001F7C8 1028 0024                  		move.b	routine(a0),d0
0001F7CC 323B 0000                  		move.w	Obj8E_States(pc,d0.w),d1
0001F7D0 4EFB 1000                  		jmp	Obj8E_States(pc,d1.w)
0001F7D4                            ; ---------------------------------------------------------------------------
0001F7D4 0000 0000                  Obj8E_States:	dc.w Obj8E_Init-Obj8E_States,Obj8E_Main-Obj8E_States; 0	; ...
0001F7D8                            ; ---------------------------------------------------------------------------
0001F7D8                            
0001F7D8                            Obj8E_Init:					  ; ...
0001F7D8 5428 0024                  		addq.b	#2,routine(a0)
0001F7DC 217C 0000 0000 0004        		move.l	#Obj8E_MapUnc_1E1BE,4(a0)
0001F7E4 117C 0004 0001             		move.b	#4,1(a0)
0001F7EA 317C 0080 0018             		move.w	#$80,priority(a0)
0001F7F0 117C 0018 0023             		move.b	#$18,width_pixels(a0)
0001F7F6 317C 055E 0002             		move.w	#$55E,art_tile(a0)
0001F7FC                            ;	bsr.w	Adjust2PArtPointer
0001F7FC 0838 0007 D002             	btst	#7,(MainCharacter+art_tile).w
0001F802 6700                       	beq.s	Obj8E_Main
0001F804 08E8 0007 0002             	bset	#7,art_tile(a0)
0001F80A                            ; loc_1E138:
0001F80A                            Obj8E_Main:
0001F80A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
0001F80E 6700                       	beq.s	JmpTo8_DeleteObject
0001F810 4A28 0030                  	tst.b	objoff_30(a0)
0001F814 6700                       	beq.s	loc_1E188
0001F816 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
0001F81A 6A00                       	bpl.s	loc_1E170
0001F81C 117C 0001 001E             	move.b	#1,anim_frame_duration(a0)
0001F822 5228 001A                  	addq.b	#1,mapping_frame(a0)
0001F826 0C28 0006 001A             	cmpi.b	#6,mapping_frame(a0)
0001F82C 6500                       	bcs.s	loc_1E170
0001F82E 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001F834 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001F83A 117C 0001 0031             	move.b	#1,objoff_31(a0)
0001F840 4E75                       	rts
0001F842                            ; ===========================================================================
0001F842                            
0001F842                            loc_1E170:
0001F842 4A28 0031                  	tst.b	objoff_31(a0)
0001F846 6600                       	bne.s	JmpTo6_DisplaySprite
0001F848                            
0001F848                            loc_1E176:
0001F848 3178 D008 0008             	move.w	(MainCharacter+x_pos).w,x_pos(a0)
0001F84E 3178 D00C 000C             	move.w	(MainCharacter+y_pos).w,y_pos(a0)
0001F854                            
0001F854                            JmpTo6_DisplaySprite: 
0001F854 4EF9 0001 5C3C             	jmp	DisplaySprite
0001F85A                            ; ===========================================================================
0001F85A                            
0001F85A                            loc_1E188:
0001F85A 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001F85E 6600                       	bne.s	loc_1E1AA
0001F860 3038 D020                  	move.w	(MainCharacter+inertia).w,d0
0001F864 6A00                       	bpl.s	loc_1E196
0001F866 4440                       	neg.w	d0
0001F868                            
0001F868                            loc_1E196:
0001F868 0C40 0800                  	cmpi.w	#$800,d0
0001F86C 6500                       	bcs.s	loc_1E1AA
0001F86E 117C 0000 001A             	move.b	#0,mapping_frame(a0)
0001F874 117C 0001 0030             	move.b	#1,objoff_30(a0)
0001F87A 60CC                       	bra.s	loc_1E176
0001F87C                            ; ===========================================================================
0001F87C                            
0001F87C                            loc_1E1AA:
0001F87C 117C 0000 0030             	move.b	#0,objoff_30(a0)
0001F882 117C 0000 0031             	move.b	#0,objoff_31(a0)
0001F888 4E75                       	rts
0001F88A                            ; ===========================================================================
0001F88A                            
0001F88A                            JmpTo8_DeleteObject:
0001F88A 4EF9 0001 5BF0             	jmp	DeleteObject
0001F890                            ; ===========================================================================
0001F890                            
0001F890                            ; -------------------------------------------------------------------------------
0001F890                            ; sprite mappings
0001F890                            ; -------------------------------------------------------------------------------
0001F890                            ;Obj8F_MapUnc_1E1BE:
0001F890                            Obj8E_MapUnc_1E1BE:	include "_maps/obj8F.asm"
0001F890                            ; --------------------------------------------------------------------------------
0001F890                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001F890                            ; --------------------------------------------------------------------------------
0001F890                            
0001F890                            SME_n_qOM:	
0001F890 0000 0000                  		dc.w SME_n_qOM_C-SME_n_qOM, SME_n_qOM_21-SME_n_qOM	
0001F894 0000 0000                  		dc.w SME_n_qOM_36-SME_n_qOM, SME_n_qOM_4B-SME_n_qOM	
0001F898 0000 0000                  		dc.w SME_n_qOM_60-SME_n_qOM, SME_n_qOM_75-SME_n_qOM	
0001F89C 04                         SME_n_qOM_C:	dc.b 4	
0001F89D F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0001F8A2 F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
0001F8A7 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
0001F8AC 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0001F8B1 04                         SME_n_qOM_21:	dc.b 4	
0001F8B2 F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
0001F8B7 F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0001F8BC 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
0001F8C1 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
0001F8C6 04                         SME_n_qOM_36:	dc.b 4	
0001F8C7 E80A 0007 E8               		dc.b $E8, $A, 0, 7, $E8	
0001F8CC E80A 0807 00               		dc.b $E8, $A, 8, 7, 0	
0001F8D1 000A 1007 E8               		dc.b 0, $A, $10, 7, $E8	
0001F8D6 000A 1807 00               		dc.b 0, $A, $18, 7, 0	
0001F8DB 04                         SME_n_qOM_4B:	dc.b 4	
0001F8DC F005 0003 F0               		dc.b $F0, 5, 0, 3, $F0	
0001F8E1 F005 0803 00               		dc.b $F0, 5, 8, 3, 0	
0001F8E6 0005 1003 F0               		dc.b 0, 5, $10, 3, $F0	
0001F8EB 0005 1803 00               		dc.b 0, 5, $18, 3, 0	
0001F8F0 04                         SME_n_qOM_60:	dc.b 4	
0001F8F1 F800 0002 F8               		dc.b $F8, 0, 0, 2, $F8	
0001F8F6 F800 0802 00               		dc.b $F8, 0, 8, 2, 0	
0001F8FB 0000 1002 F8               		dc.b 0, 0, $10, 2, $F8	
0001F900 0000 1802 00               		dc.b 0, 0, $18, 2, 0	
0001F905 00                         SME_n_qOM_75:	dc.b 0	
0001F906                            		even
0001F906                            		even
0001F906                            ; ===========================================================================
0001F906 4E71                       	nop
0001F908                            
0001F908                            ; ---------------------------------------------------------------------------
0001F908                            ; Object 8F - Pause Menu
0001F908                            ; ---------------------------------------------------------------------------
0001F908                             
0001F908                            Obj8F:
0001F908                            ; ----------------------------------------------------------------------------
0001F908                            ; Object 06 - Rotating cylinder in MTZ, twisting spiral pathway in EHZ
0001F908                            ; ----------------------------------------------------------------------------
0001F908                            ; Sprite_214C4:
0001F908                            ;Obj06:
0001F908 7000                       	moveq	#0,d0
0001F90A 1028 0024                  	move.b	routine(a0),d0
0001F90E 323B 0000                  	move.w	Obj06_Index(pc,d0.w),d1
0001F912 4EBB 1000                  	jsr	Obj06_Index(pc,d1.w)
0001F916 4EF9 0000 0000             	jmp	Obj06_ChkDel
0001F91C 4E75                       	rts
0001F91E                            ; ---------------------------------------------------------------------------
0001F91E                            ; seems to be an optimization to delete the object the instant it goes offscreen
0001F91E                            ; only in 1-player mode, because it would screw up the other player
0001F91E                            ; loc_214DA:
0001F91E                            Obj06_ChkDel:
0001F91E 3028 0008                  	move.w	x_pos(a0),d0
0001F922 0240 FF80                  	andi.w	#$FF80,d0
0001F926 9078 F7DA                  	sub.w	(Camera_X_pos_coarse).w,d0
0001F92A 0C40 0280                  	cmpi.w	#$280,d0
0001F92E 6200                       	bhi.s	JmpTo19_DeleteObject
0001F930 4E75                       	rts
0001F932                            ; ---------------------------------------------------------------------------
0001F932                            JmpTo19_DeleteObject
0001F932 4EF9 0001 5BF0             	jmp	DeleteObject
0001F938                            
0001F938                            ; ===========================================================================
0001F938                            ; off_214F4:
0001F938                            Obj06_Index:
0001F938 0000                       	dc.w Obj06_Init-Obj06_Index		; 0
0001F93A 0000                       	dc.w Obj06_Spiral-Obj06_Index		; 2
0001F93C 0000                       	dc.w Obj06_Cylinder-Obj06_Index	; 4
0001F93E                            
0001F93E                            ; ===========================================================================
0001F93E                            ; loc_214FA:
0001F93E                            Obj06_Init:
0001F93E 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Spiral
0001F942 117C 00D0 0023             	move.b	#$D0,width_pixels(a0)
0001F948 4A28 0028                  	tst.b	subtype(a0)
0001F94C 6A00                       	bpl.s	Obj06_Spiral
0001F94E 5428 0024                  	addq.b	#2,routine(a0) ; => Obj06_Cylinder
0001F952 6000 0000                  	bra.w	Obj06_Cylinder
0001F956                            
0001F956                            ; ===========================================================================
0001F956                            ; spiral pathway from EHZ
0001F956                            ; loc_21512:
0001F956                            Obj06_Spiral:
0001F956 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001F95A 7C03                       	moveq	#3,d6
0001F95C                            ;	bsr.s	+
0001F95C                            ;	lea	(Sidekick).w,a1 ; a1=character
0001F95C                            ;	addq.b	#1,d6
0001F95C                            ;+
0001F95C 0D28 0022                  	btst	d6,status(a0)
0001F960 6600 0000                  	bne.w	loc_215C0
0001F964 0829 0001 0022             	btst	#1,status(a1)
0001F96A 6600 0000                  	bne.w	return_215BE
0001F96E 0829 0003 0022             	btst	#3,status(a1)
0001F974 6600                       	bne.s	loc_21580
0001F976 3029 0008                  	move.w	x_pos(a1),d0
0001F97A 9068 0008                  	sub.w	x_pos(a0),d0
0001F97E 4A69 0010                  	tst.w	x_vel(a1)
0001F982 6B00                       	bmi.s	loc_21556
0001F984 0C40 FF40                  	cmpi.w	#-$C0,d0
0001F988 6E00                       	bgt.s	return_215BE
0001F98A 0C40 FF30                  	cmpi.w	#-$D0,d0
0001F98E 6D00                       	blt.s	return_215BE
0001F990 6000                       	bra.s	loc_21562
0001F992                            ; ---------------------------------------------------------------------------
0001F992                            
0001F992                            loc_21556:
0001F992 0C40 00C0                  	cmpi.w	#$C0,d0
0001F996 6D00                       	blt.s	return_215BE
0001F998 0C40 00D0                  	cmpi.w	#$D0,d0
0001F99C 6E00                       	bgt.s	return_215BE
0001F99E                            
0001F99E                            loc_21562:
0001F99E 3229 000C                  	move.w	y_pos(a1),d1
0001F9A2 9268 000C                  	sub.w	y_pos(a0),d1
0001F9A6 0441 0010                  	subi.w	#$10,d1
0001F9AA 0C41 0030                  	cmpi.w	#$30,d1
0001F9AE 6400                       	bcc.s	return_215BE
0001F9B0 4A38 F7C8                  	tst.b	($FFFFF7C8).w
0001F9B4 6600                       	bne.s	return_215BE
0001F9B6 4EB9 0000 F0FC             	jsr	loc_74AE
0001F9BC 4E75                       	rts
0001F9BE                            ; ---------------------------------------------------------------------------
0001F9BE                            
0001F9BE                            loc_21580:
0001F9BE 3029 0008                  	move.w	x_pos(a1),d0
0001F9C2 9068 0008                  	sub.w	x_pos(a0),d0
0001F9C6 4A69 0010                  	tst.w	x_vel(a1)
0001F9CA 6B00                       	bmi.s	loc_2159C
0001F9CC 0C40 FF50                  	cmpi.w	#-$B0,d0
0001F9D0 6E00                       	bgt.s	return_215BE
0001F9D2 0C40 FF40                  	cmpi.w	#-$C0,d0
0001F9D6 6D00                       	blt.s	return_215BE
0001F9D8 6000                       	bra.s	loc_215A8
0001F9DA                            ; ---------------------------------------------------------------------------
0001F9DA                            
0001F9DA                            loc_2159C:
0001F9DA 0C40 00B0                  	cmpi.w	#$B0,d0
0001F9DE 6D00                       	blt.s	return_215BE
0001F9E0 0C40 00C0                  	cmpi.w	#$C0,d0
0001F9E4 6E00                       	bgt.s	return_215BE
0001F9E6                            
0001F9E6                            loc_215A8:
0001F9E6 3229 000C                  	move.w	y_pos(a1),d1
0001F9EA 9268 000C                  	sub.w	y_pos(a0),d1
0001F9EE 0441 0010                  	subi.w	#$10,d1
0001F9F2 0C41 0030                  	cmpi.w	#$30,d1
0001F9F6 6400                       	bcc.s	return_215BE
0001F9F8 4EB9 0000 F0FC             	jsr	loc_74AE
0001F9FE                            
0001F9FE                            return_215BE:
0001F9FE 4E75                       	rts
0001FA00                            ; ---------------------------------------------------------------------------
0001FA00                            
0001FA00                            loc_215C0:
0001FA00 3029 0020                  	move.w	inertia(a1),d0
0001FA04 6A00                       	bpl.s	loc_215C0_2
0001FA06 4440                       	neg.w	d0
0001FA08                            loc_215C0_2:
0001FA08 0C40 0600                  	cmpi.w	#$600,d0
0001FA0C 6500                       	bcs.s	Obj06_Spiral_CharacterFallsOff
0001FA0E 0829 0001 0022             	btst	#1,status(a1)
0001FA14 6600                       	bne.s	Obj06_Spiral_CharacterFallsOff
0001FA16 3029 0008                  	move.w	x_pos(a1),d0
0001FA1A 9068 0008                  	sub.w	x_pos(a0),d0
0001FA1E 0640 00D0                  	addi.w	#$D0,d0
0001FA22 6B00                       	bmi.s	Obj06_Spiral_CharacterFallsOff
0001FA24 0C40 01A0                  	cmpi.w	#$1A0,d0
0001FA28 6500                       	bcs.s	Obj06_Spiral_MoveCharacter
0001FA2A                            
0001FA2A                            ; loc_215EA:
0001FA2A                            Obj06_Spiral_CharacterFallsOff:
0001FA2A 08A9 0003 0022             	bclr	#3,status(a1)
0001FA30 0DA8 0022                  	bclr	d6,status(a0)
0001FA34 137C 0000 0033             	move.b	#0,flips_remaining(a1)
0001FA3A 137C 0004 0034             	move.b	#4,flip_speed(a1)
0001FA40 4E75                       	rts
0001FA42                            
0001FA42                            ; ---------------------------------------------------------------------------
0001FA42                            ; loc_21602:
0001FA42                            Obj06_Spiral_MoveCharacter:
0001FA42 0829 0003 0022             	btst	#3,status(a1)
0001FA48 67B4                       	beq.s	return_215BE
0001FA4A 123B 0000                  	move.b	Obj06_CosineTable(pc,d0.w),d1
0001FA4E 4881                       	ext.w	d1
0001FA50 3428 000C                  	move.w	y_pos(a0),d2
0001FA54 D441                       	add.w	d1,d2
0001FA56 7200                       	moveq	#0,d1
0001FA58 1229 0016                  	move.b	y_radius(a1),d1
0001FA5C 0441 0013                  	subi.w	#$13,d1
0001FA60 9441                       	sub.w	d1,d2
0001FA62 3342 000C                  	move.w	d2,y_pos(a1)
0001FA66 E648                       	lsr.w	#3,d0
0001FA68 0240 003F                  	andi.w	#$3F,d0
0001FA6C 137B 0000 0031             	move.b	Obj06_FlipAngleTable(pc,d0.w),flip_angle(a1)
0001FA72 4E75                       	rts
0001FA74                            
0001FA74                            ; ===========================================================================
0001FA74                            ; byte_21634:
0001FA74                            Obj06_FlipAngleTable:
0001FA74 0000 0101                  	dc.b	 0,    0,    1,	   1; 4
0001FA78 1616 1616                  	dc.b   $16,  $16,  $16,	 $16; 8
0001FA7C 2C2C 2C2C                  	dc.b   $2C,  $2C,  $2C,	 $2C; 12
0001FA80 4242 4242                  	dc.b   $42,  $42,  $42,	 $42; 16
0001FA84 5858 5858                  	dc.b   $58,  $58,  $58,	 $58; 20
0001FA88 6E6E 6E6E                  	dc.b   $6E,  $6E,  $6E,	 $6E; 24
0001FA8C 8484 8484                  	dc.b   $84,  $84,  $84,	 $84; 28
0001FA90 9A9A 9A9A                  	dc.b   $9A,  $9A,  $9A,	 $9A; 32
0001FA94 B0B0 B0B0                  	dc.b   $B0,  $B0,  $B0,	 $B0; 36
0001FA98 C6C6 C6C6                  	dc.b   $C6,  $C6,  $C6,	 $C6; 40
0001FA9C DCDC DCDC                  	dc.b   $DC,  $DC,  $DC,	 $DC; 44
0001FAA0 F2F2 F2F2                  	dc.b   $F2,  $F2,  $F2,	 $F2; 48
0001FAA4 0101 0000                  	dc.b	 1,    1,    0,	   0; 52
0001FAA8                            ; byte_21668:
0001FAA8                            Obj06_CosineTable:
0001FAA8 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32;  16
0001FAB8 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31;  32
0001FAC8 1F1F 1F1F 1F1F 1F1F 1F1F+  	dc.b  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30;  48
0001FAD8 1E1E 1E1E 1E1E 1D1D 1D1D+  	dc.b  30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 28, 28, 28, 28, 27;  64
0001FAE8 1B1B 1B1A 1A1A 1919 1918+  	dc.b  27, 27, 27, 26, 26, 26, 25, 25, 25, 24, 24, 24, 23, 23, 22, 22;  80
0001FAF8 1515 1414 1312 1211 1010+  	dc.b  21, 21, 20, 20, 19, 18, 18, 17, 16, 16, 15, 14, 14, 13, 12, 12;  96
0001FB08 0B0A 0A09 0808 0706 0605+  	dc.b  11, 10, 10,  9,  8,  8,  7,  6,  6,  5,  4,  4,  3,  2,  2,  1; 112
0001FB18 00FF FEFE FDFC FCFB FAF9+  	dc.b   0, -1, -2, -2, -3, -4, -4, -5, -6, -7, -7, -8, -9, -9,-10,-10; 128
0001FB28 F5F5 F4F4 F3F2 F2F1 F1F0+  	dc.b -11,-11,-12,-12,-13,-14,-14,-15,-15,-16,-16,-17,-17,-18,-18,-19; 144
0001FB38 EDED ECEB EBEA EAE9 E9E8+  	dc.b -19,-19,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-26,-26,-27; 160
0001FB48 E5E4 E4E4 E3E3 E2E2 E2E1+  	dc.b -27,-28,-28,-28,-29,-29,-30,-30,-30,-31,-31,-31,-32,-32,-32,-33; 176
0001FB58 DFDF DFDE DEDE DDDD DDDD+  	dc.b -33,-33,-33,-34,-34,-34,-35,-35,-35,-35,-35,-35,-35,-35,-36,-36; 192
0001FB68 DCDC DCDC DCDC DCDB DBDB+  	dc.b -36,-36,-36,-36,-36,-36,-36,-37,-37,-37,-37,-37,-37,-37,-37,-37; 208
0001FB78 DBDB DBDB DBDB DBDB DBDB+  	dc.b -37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37,-37; 224
0001FB88 DBDB DBDB DCDC DCDC DCDC+  	dc.b -37,-37,-37,-37,-36,-36,-36,-36,-36,-36,-36,-35,-35,-35,-35,-35; 240
0001FB98 DDDD DDDE DEDE DFDF DFDF+  	dc.b -35,-35,-35,-34,-34,-34,-33,-33,-33,-33,-32,-32,-32,-31,-31,-31; 256
0001FBA8 E2E2 E2E3 E3E4 E4E4 E5E5+  	dc.b -30,-30,-30,-29,-29,-28,-28,-28,-27,-27,-26,-26,-25,-25,-24,-24; 272
0001FBB8 E9E9 EAEA EBEB ECED EDEE+  	dc.b -23,-23,-22,-22,-21,-21,-20,-19,-19,-18,-18,-17,-16,-16,-15,-14; 288
0001FBC8 F2F3 F4F5 F5F6 F7F8 F9F9+  	dc.b -14,-13,-12,-11,-11,-10, -9, -8, -7, -7, -6, -5, -4, -3, -2, -1; 304
0001FBD8 0001 0203 0405 0607 0808+  	dc.b   0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  9, 10, 10, 11, 12, 13; 320
0001FBE8 0D0E 0E0F 0F10 1011 1112+  	dc.b  13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21; 336
0001FBF8 1516 1617 1718 1818 1919+  	dc.b  21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26; 352
0001FC08 1B1B 1B1B 1C1C 1C1C 1C1C+  	dc.b  27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29; 368
0001FC18 1D1E 1E1E 1E1E 1E1E 1F1F+  	dc.b  29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31; 384
0001FC28 1F1F 2020 2020 2020 2020+  	dc.b  31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 400
0001FC38 2020 2020 2020 2020 2020+  	dc.b  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32; 416
0001FC48                            
0001FC48                            ; ===========================================================================
0001FC48                            ; rotating meshed cage from MTZ
0001FC48                            ; loc_21808:
0001FC48                            Obj06_Cylinder:
0001FC48 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
0001FC4C 45F8 F7B2                  	lea	($FFFFF7B2).w,a2
0001FC50 7C03                       	moveq	#3,d6
0001FC52                            ;	bsr.s	+
0001FC52                            ;	lea	(Sidekick).w,a1 ; a1=character
0001FC52                            ;	lea	($FFFFF7B3).w,a2
0001FC52                            ;	addq.b	#1,d6
0001FC52                            ;+
0001FC52 0D28 0022                  	btst	d6,status(a0)
0001FC56 6600 0000                  	bne.w	loc_2188C
0001FC5A 3029 0008                  	move.w	x_pos(a1),d0
0001FC5E 9068 0008                  	sub.w	x_pos(a0),d0
0001FC62 0C40 FF40                  	cmpi.w	#-$C0,d0
0001FC66 6D00                       	blt.s	return_2188A
0001FC68 0C40 00C0                  	cmpi.w	#$C0,d0
0001FC6C 6C00                       	bge.s	return_2188A
0001FC6E 3028 000C                  	move.w	y_pos(a0),d0
0001FC72 0640 003C                  	addi.w	#$3C,d0
0001FC76 3429 000C                  	move.w	y_pos(a1),d2
0001FC7A 1229 0016                  	move.b	y_radius(a1),d1
0001FC7E 4881                       	ext.w	d1
0001FC80 D242                       	add.w	d2,d1
0001FC82 5841                       	addq.w	#4,d1
0001FC84 9041                       	sub.w	d1,d0
0001FC86 6200                       	bhi.s	return_2188A
0001FC88 0C40 FFF0                  	cmpi.w	#-$10,d0
0001FC8C 6500                       	bcs.s	return_2188A
0001FC8E 0C29 0006 0024             	cmpi.b	#6,routine(a1)
0001FC94 6400                       	bcc.s	return_2188A
0001FC96 D440                       	add.w	d0,d2
0001FC98 5642                       	addq.w	#3,d2
0001FC9A 3342 000C                  	move.w	d2,y_pos(a1)
0001FC9E 137C 0001 0035             	move.b	#1,flip_turned(a1) ; face the other way
0001FCA4 4EB9 0000 F0FC             	jsr	loc_74AE
0001FCAA 337C 0001 001C             	move.w	#1,anim(a1)
0001FCB0 14BC 0000                  	move.b	#0,(a2)
0001FCB4 4A69 0020                  	tst.w	inertia(a1)
0001FCB8 6600                       	bne.s	return_2188A
0001FCBA 337C 0001 0020             	move.w	#1,inertia(a1)
0001FCC0                            
0001FCC0                            return_2188A:
0001FCC0 4E75                       	rts
0001FCC2                            ; ===========================================================================
0001FCC2                            
0001FCC2                            loc_2188C:
0001FCC2 0829 0001 0022             	btst	#1,status(a1)
0001FCC8 6600                       	bne.s	loc_218C6
0001FCCA 3029 0008                  	move.w	x_pos(a1),d0
0001FCCE 9068 0008                  	sub.w	x_pos(a0),d0
0001FCD2 0640 00C0                  	addi.w	#$C0,d0
0001FCD6 6B00                       	bmi.s	loc_218A8
0001FCD8 0C40 0180                  	cmpi.w	#$180,d0
0001FCDC 6500                       	bcs.s	loc_218E0
0001FCDE                            
0001FCDE                            loc_218A8:
0001FCDE 08A9 0003 0022             	bclr	#3,status(a1)
0001FCE4 0DA8 0022                  	bclr	d6,status(a0)
0001FCE8 137C 0000 0033             	move.b	#0,flips_remaining(a1)
0001FCEE 137C 0004 0034             	move.b	#4,flip_speed(a1)
0001FCF4 08E9 0001 0022             	bset	#1,status(a1)
0001FCFA 4E75                       	rts
0001FCFC                            ; ---------------------------------------------------------------------------
0001FCFC                            loc_218C6:
0001FCFC 1012                       	move.b	(a2),d0
0001FCFE 0600 0020                  	addi.b	#$20,d0
0001FD02 0C00 0040                  	cmpi.b	#$40,d0
0001FD06 6400                       	bcc.s	loc_218C6_2
0001FD08 E0E9 0012                  	asr	y_vel(a1)
0001FD0C 60D0                       	bra.s	loc_218A8
0001FD0E                            ; ---------------------------------------------------------------------------
0001FD0E                            loc_218C6_2:
0001FD0E 337C 0000 0012             	move.w	#0,y_vel(a1)
0001FD14 60C8                       	bra.s	loc_218A8
0001FD16                            ; ===========================================================================
0001FD16                            
0001FD16                            loc_218E0:
0001FD16 0829 0003 0022             	btst	#3,status(a1)
0001FD1C 67A2                       	beq.s	return_2188A
0001FD1E 1012                       	move.b	(a2),d0
0001FD20 6100 0000                  	bsr.w	JmpTo6_CalcSine
0001FD24 C3FC 2800                  	muls.w	#$2800,d1
0001FD28 4841                       	swap	d1
0001FD2A 3428 000C                  	move.w	y_pos(a0),d2
0001FD2E D441                       	add.w	d1,d2
0001FD30 7200                       	moveq	#0,d1
0001FD32 1229 0016                  	move.b	y_radius(a1),d1
0001FD36 0441 0013                  	subi.w	#$13,d1
0001FD3A 9441                       	sub.w	d1,d2
0001FD3C 3342 000C                  	move.w	d2,y_pos(a1)
0001FD40 1012                       	move.b	(a2),d0
0001FD42 1340 0031                  	move.b	d0,flip_angle(a1)
0001FD46 5812                       	addq.b	#4,(a2)
0001FD48 4A69 0020                  	tst.w	inertia(a1)
0001FD4C 6600                       	bne.s	return_2191E
0001FD4E 337C 0001 0020             	move.w	#1,inertia(a1)
0001FD54                            
0001FD54                            return_2191E:
0001FD54 4E75                       	rts
0001FD56                            ; ===========================================================================
0001FD56                            
0001FD56                            JmpTo6_CalcSine
0001FD56 4EF9 0000 8DA4             	jmp	(CalcSine).l
0001FD5C                            ; ===========================================================================
0001FD5C                            ;	rts
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            
0001FD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD5C                            
0001FD5C                            
0001FD5C                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001FD5C 21F8 FFE2 F796             		move.l	($FFFFFFE2).w,($FFFFF796).w		; MJ: load first collision data location
0001FD62 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
0001FD66 6700                       		beq.s	SAP_First				; MJ: if not, branch
0001FD68 21F8 FFE6 F796             		move.l	($FFFFFFE6).w,($FFFFF796).w		; MJ: load second collision data location
0001FD6E                            
0001FD6E                            SAP_First:
0001FD6E 0828 0003 0022             		btst	#3,$22(a0)
0001FD74 6700                       		beq.s	loc_14602
0001FD76 7000                       		moveq	#0,d0
0001FD78 11C0 F768                  		move.b	d0,($FFFFF768).w
0001FD7C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001FD80 4E75                       		rts	
0001FD82                            ; ===========================================================================
0001FD82                            
0001FD82                            loc_14602:
0001FD82 7003                       		moveq	#3,d0
0001FD84 11C0 F768                  		move.b	d0,($FFFFF768).w
0001FD88 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001FD8C 1028 0026                  		move.b	$26(a0),d0
0001FD90 0600 0020                  		addi.b	#$20,d0
0001FD94 6A00                       		bpl.s	loc_14624
0001FD96 1028 0026                  		move.b	$26(a0),d0
0001FD9A 6A00                       		bpl.s	loc_1461E
0001FD9C 5300                       		subq.b	#1,d0
0001FD9E                            
0001FD9E                            loc_1461E:
0001FD9E 0600 0020                  		addi.b	#$20,d0
0001FDA2 6000                       		bra.s	loc_14630
0001FDA4                            ; ===========================================================================
0001FDA4                            
0001FDA4                            loc_14624:
0001FDA4 1028 0026                  		move.b	$26(a0),d0
0001FDA8 6A00                       		bpl.s	loc_1462C
0001FDAA 5200                       		addq.b	#1,d0
0001FDAC                            
0001FDAC                            loc_1462C:
0001FDAC 0600 001F                  		addi.b	#$1F,d0
0001FDB0                            
0001FDB0                            loc_14630:
0001FDB0 0200 00C0                  		andi.b	#$C0,d0
0001FDB4 0C00 0040                  		cmpi.b	#$40,d0
0001FDB8 6700 0000                  		beq.w	Sonic_WalkVertL
0001FDBC 0C00 0080                  		cmpi.b	#$80,d0
0001FDC0 6700 0000                  		beq.w	Sonic_WalkCeiling
0001FDC4 0C00 00C0                  		cmpi.b	#$C0,d0
0001FDC8 6700 0000                  		beq.w	Sonic_WalkVertR
0001FDCC 3428 000C                  		move.w	$C(a0),d2
0001FDD0 3628 0008                  		move.w	8(a0),d3
0001FDD4 48A7 3000                  		movem.w d2-d3,-(sp)
0001FDD8 7000                       		moveq	#0,d0
0001FDDA 1028 0016                  		move.b	$16(a0),d0
0001FDDE 4880                       		ext.w	d0
0001FDE0 D440                       		add.w	d0,d2
0001FDE2 1028 0017                  		move.b	$17(a0),d0
0001FDE6 4880                       		ext.w	d0
0001FDE8 D640                       		add.w	d0,d3
0001FDEA 49F8 F768                  		lea	($FFFFF768).w,a4
0001FDEE 367C 0010                  		movea.w	#$10,a3
0001FDF2 3C3C 0000                  		move.w	#0,d6					; MJ: set angle?
0001FDF6 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001FDF8 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001FDFC 4C9F 000C                  		movem.w (sp)+,d2-d3
0001FE00 3F01                       		move.w	d1,-(sp)
0001FE02 7000                       		moveq	#0,d0
0001FE04 1028 0016                  		move.b	$16(a0),d0
0001FE08 4880                       		ext.w	d0
0001FE0A D440                       		add.w	d0,d2
0001FE0C 1028 0017                  		move.b	$17(a0),d0
0001FE10 4880                       		ext.w	d0
0001FE12 4440                       		neg.w	d0
0001FE14 D640                       		add.w	d0,d3
0001FE16 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001FE1A 367C 0010                  		movea.w	#$10,a3
0001FE1E 3C3C 0000                  		move.w	#0,d6
0001FE22 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001FE24 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001FE28 301F                       		move.w	(sp)+,d0
0001FE2A 6100 0000                  		bsr.w	Sonic_Angle
0001FE2E 4A41                       		tst.w	d1
0001FE30 6700                       		beq.s	locret_146BE
0001FE32 6A00                       		bpl.s	loc_146C0
0001FE34 0C41 FFF2                  		cmpi.w	#-$E,d1
0001FE38 6D00                       		blt.s	locret_146E6
0001FE3A D368 000C                  		add.w	d1,$C(a0)
0001FE3E                            
0001FE3E                            locret_146BE:
0001FE3E 4E75                       		rts	
0001FE40                            ; ===========================================================================
0001FE40                            
0001FE40                            loc_146C0:
0001FE40 1028 0010                  		move.b	x_vel(a0),d0
0001FE44 6A00                       		bpl.s	@next1
0001FE46 4400                       		neg.b	d0
0001FE48                            @next1:
0001FE48 5800                       		addq.b	#4,d0
0001FE4A 0C00 000E                  		cmpi.b	#$E,d0
0001FE4E 6500                       		bcs.s	@next2
0001FE50 103C 000E                  		move.b	#$E,d0
0001FE54                            @next2:
0001FE54 B200                       		cmp.b	d0,d1
0001FE56 6E00                       		bgt.s	loc_146CC
0001FE58                            
0001FE58                            loc_146C6:
0001FE58 D368 000C                  		add.w	d1,$C(a0)
0001FE5C 4E75                       		rts	
0001FE5E                            ; ===========================================================================
0001FE5E                            
0001FE5E                            loc_146CC:
0001FE5E 4A28 0038                  		tst.b	$38(a0)
0001FE62 66F4                       		bne.s	loc_146C6
0001FE64 08E8 0001 0022             		bset	#1,status(a0)
0001FE6A 08A8 0005 0022             		bclr	#5,status(a0)
0001FE70 117C 0001 001D             		move.b	#1,next_anim(a0)
0001FE76 4E75                       		rts	
0001FE78                            ; ===========================================================================
0001FE78                            
0001FE78                            locret_146E6:
0001FE78 4E75                       		rts	
0001FE7A                            ; End of function Sonic_AnglePos
0001FE7A                            
0001FE7A                            ; ===========================================================================
0001FE7A 2428 0008                  		move.l	8(a0),d2
0001FE7E 3028 0010                  		move.w	x_vel(a0),d0
0001FE82 48C0                       		ext.l	d0
0001FE84 E180                       		asl.l	#8,d0
0001FE86 9480                       		sub.l	d0,d2
0001FE88 2142 0008                  		move.l	d2,8(a0)
0001FE8C 303C 0038                  		move.w	#$38,d0
0001FE90 48C0                       		ext.l	d0
0001FE92 E180                       		asl.l	#8,d0
0001FE94 9680                       		sub.l	d0,d3
0001FE96 2143 000C                  		move.l	d3,$C(a0)
0001FE9A 4E75                       		rts	
0001FE9C                            ; ===========================================================================
0001FE9C                            
0001FE9C                            locret_1470A:
0001FE9C 4E75                       		rts	
0001FE9E                            ; ===========================================================================
0001FE9E 2628 000C                  		move.l	$C(a0),d3
0001FEA2 3028 0012                  		move.w	y_vel(a0),d0
0001FEA6 0440 0038                  		subi.w	#$38,d0
0001FEAA 3140 0012                  		move.w	d0,y_vel(a0)
0001FEAE 48C0                       		ext.l	d0
0001FEB0 E180                       		asl.l	#8,d0
0001FEB2 9680                       		sub.l	d0,d3
0001FEB4 2143 000C                  		move.l	d3,$C(a0)
0001FEB8 4E75                       		rts	
0001FEBA 4E75                       		rts	
0001FEBC                            ; ===========================================================================
0001FEBC 2428 0008                  		move.l	8(a0),d2
0001FEC0 2628 000C                  		move.l	$C(a0),d3
0001FEC4 3028 0010                  		move.w	x_vel(a0),d0
0001FEC8 48C0                       		ext.l	d0
0001FECA E180                       		asl.l	#8,d0
0001FECC 9480                       		sub.l	d0,d2
0001FECE 3028 0012                  		move.w	y_vel(a0),d0
0001FED2 48C0                       		ext.l	d0
0001FED4 E180                       		asl.l	#8,d0
0001FED6 9680                       		sub.l	d0,d3
0001FED8 2142 0008                  		move.l	d2,8(a0)
0001FEDC 2143 000C                  		move.l	d3,$C(a0)
0001FEE0 4E75                       		rts	
0001FEE2                            
0001FEE2                            ; ---------------------------------------------------------------------------
0001FEE2                            ; Subroutine to	change Sonic"s angle as he walks along the floor
0001FEE2                            ; ---------------------------------------------------------------------------
0001FEE2                            
0001FEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEE2                            
0001FEE2                            
0001FEE2                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001FEE2 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001FEE6 B240                       		cmp.w	d0,d1
0001FEE8 6F00                       		ble.s	loc_1475E
0001FEEA 1438 F768                  		move.b	($FFFFF768).w,d2
0001FEEE 3200                       		move.w	d0,d1
0001FEF0                            
0001FEF0                            loc_1475E:
0001FEF0 0802 0000                  		btst	#0,d2
0001FEF4 6600                       		bne.s	loc_1476A
0001FEF6 1142 0026                  		move.b	d2,$26(a0)
0001FEFA 4E75                       		rts	
0001FEFC                            ; ===========================================================================
0001FEFC                            
0001FEFC                            loc_1476A:
0001FEFC 1428 0026                  		move.b	$26(a0),d2
0001FF00 0602 0020                  		addi.b	#$20,d2
0001FF04 0202 00C0                  		andi.b	#$C0,d2
0001FF08 1142 0026                  		move.b	d2,$26(a0)
0001FF0C 4E75                       		rts	
0001FF0E                            ; End of function Sonic_Angle
0001FF0E                            
0001FF0E                            ; ---------------------------------------------------------------------------
0001FF0E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001FF0E                            ; ---------------------------------------------------------------------------
0001FF0E                            
0001FF0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF0E                            
0001FF0E                            
0001FF0E                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001FF0E 3428 000C                  		move.w	$C(a0),d2
0001FF12 3628 0008                  		move.w	8(a0),d3
0001FF16 48A7 3000                  		movem.w d2-d3,-(sp)
0001FF1A 7000                       		moveq	#0,d0
0001FF1C 1028 0017                  		move.b	$17(a0),d0
0001FF20 4880                       		ext.w	d0
0001FF22 4440                       		neg.w	d0
0001FF24 D440                       		add.w	d0,d2
0001FF26 1028 0016                  		move.b	$16(a0),d0
0001FF2A 4880                       		ext.w	d0
0001FF2C D640                       		add.w	d0,d3
0001FF2E 49F8 F768                  		lea	($FFFFF768).w,a4
0001FF32 367C 0010                  		movea.w	#$10,a3
0001FF36 3C3C 0000                  		move.w	#0,d6
0001FF3A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001FF3C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001FF40 4C9F 000C                  		movem.w (sp)+,d2-d3		
0001FF44 3F01                       		move.w	d1,-(sp)
0001FF46 7000                       		moveq	#0,d0
0001FF48 1028 0017                  		move.b	$17(a0),d0
0001FF4C 4880                       		ext.w	d0
0001FF4E D440                       		add.w	d0,d2
0001FF50 1028 0016                  		move.b	$16(a0),d0
0001FF54 4880                       		ext.w	d0
0001FF56 D640                       		add.w	d0,d3
0001FF58 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001FF5C 367C 0010                  		movea.w	#$10,a3
0001FF60 3C3C 0000                  		move.w	#0,d6
0001FF64 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001FF66 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
0001FF6A 301F                       		move.w	(sp)+,d0
0001FF6C 6100 FF74                  		bsr.w	Sonic_Angle
0001FF70 4A41                       		tst.w	d1
0001FF72 6700                       		beq.s	locret_147F0
0001FF74 6A00                       		bpl.s	loc_147F2
0001FF76 0C41 FFF2                  		cmpi.w	#-$E,d1
0001FF7A 6D00 FF20                  		blt.w	locret_1470A
0001FF7E D368 0008                  		add.w	d1,8(a0)
0001FF82                            
0001FF82                            locret_147F0:
0001FF82 4E75                       		rts	
0001FF84                            ; ===========================================================================
0001FF84                            
0001FF84                            loc_147F2:
0001FF84 0C41 000E                  		cmpi.w	#$E,d1
0001FF88 6E00                       		bgt.s	loc_147FE
0001FF8A                            
0001FF8A                            loc_147F8:
0001FF8A D368 0008                  		add.w	d1,8(a0)
0001FF8E 4E75                       		rts	
0001FF90                            ; ===========================================================================
0001FF90                            
0001FF90                            loc_147FE:
0001FF90 4A28 0038                  		tst.b	$38(a0)
0001FF94 66F4                       		bne.s	loc_147F8
0001FF96 08E8 0001 0022             		bset	#1,$22(a0)
0001FF9C 08A8 0005 0022             		bclr	#5,$22(a0)
0001FFA2 117C 0001 001D             		move.b	#1,$1D(a0)
0001FFA8 4E75                       		rts	
0001FFAA                            ; End of function Sonic_WalkVertR
0001FFAA                            
0001FFAA                            ; ---------------------------------------------------------------------------
0001FFAA                            ; Subroutine allowing Sonic to walk upside-down
0001FFAA                            ; ---------------------------------------------------------------------------
0001FFAA                            
0001FFAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFAA                            
0001FFAA                            
0001FFAA                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001FFAA 3428 000C                  		move.w	$C(a0),d2
0001FFAE 3628 0008                  		move.w	8(a0),d3
0001FFB2 48A7 3000                  		movem.w d2-d3,-(sp)
0001FFB6 7000                       		moveq	#0,d0
0001FFB8 1028 0016                  		move.b	$16(a0),d0
0001FFBC 4880                       		ext.w	d0
0001FFBE 9440                       		sub.w	d0,d2
0001FFC0 0A42 000F                  		eori.w	#$F,d2
0001FFC4 1028 0017                  		move.b	$17(a0),d0
0001FFC8 4880                       		ext.w	d0
0001FFCA D640                       		add.w	d0,d3
0001FFCC 49F8 F768                  		lea	($FFFFF768).w,a4
0001FFD0 367C FFF0                  		movea.w	#-$10,a3
0001FFD4 3C3C 0800                  		move.w	#$0800,d6
0001FFD8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0001FFDA 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0001FFDE 4C9F 000C                  		movem.w (sp)+,d2-d3
0001FFE2 3F01                       		move.w	d1,-(sp)
0001FFE4 7000                       		moveq	#0,d0
0001FFE6 1028 0016                  		move.b	$16(a0),d0
0001FFEA 4880                       		ext.w	d0
0001FFEC 9440                       		sub.w	d0,d2
0001FFEE 0A42 000F                  		eori.w	#$F,d2
0001FFF2 1028 0017                  		move.b	$17(a0),d0
0001FFF6 4880                       		ext.w	d0
0001FFF8 9640                       		sub.w	d0,d3
0001FFFA 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001FFFE 367C FFF0                  		movea.w	#-$10,a3
00020002 3C3C 0800                  		move.w	#$0800,d6
00020006 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020008 6100 0000                  		bsr.w	FindFloor				; MJ: check solidity
0002000C 301F                       		move.w	(sp)+,d0
0002000E 6100 FED2                  		bsr.w	Sonic_Angle
00020012 4A41                       		tst.w	d1
00020014 6700                       		beq.s	locret_14892
00020016 6A00                       		bpl.s	loc_14894
00020018 0C41 FFF2                  		cmpi.w	#-$E,d1
0002001C 6D00 FE5A                  		blt.w	locret_146E6
00020020 9368 000C                  		sub.w	d1,$C(a0)
00020024                            
00020024                            locret_14892:
00020024 4E75                       		rts	
00020026                            ; ===========================================================================
00020026                            
00020026                            loc_14894:
00020026 0C41 000E                  		cmpi.w	#$E,d1
0002002A 6E00                       		bgt.s	loc_148A0
0002002C                            
0002002C                            loc_1489A:
0002002C 9368 000C                  		sub.w	d1,$C(a0)
00020030 4E75                       		rts	
00020032                            ; ===========================================================================
00020032                            
00020032                            loc_148A0:
00020032 4A28 0038                  		tst.b	$38(a0)
00020036 66F4                       		bne.s	loc_1489A
00020038 08E8 0001 0022             		bset	#1,$22(a0)
0002003E 08A8 0005 0022             		bclr	#5,$22(a0)
00020044 117C 0001 001D             		move.b	#1,$1D(a0)
0002004A 4E75                       		rts	
0002004C                            ; End of function Sonic_WalkCeiling
0002004C                            
0002004C                            ; ---------------------------------------------------------------------------
0002004C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0002004C                            ; ---------------------------------------------------------------------------
0002004C                            
0002004C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002004C                            
0002004C                            
0002004C                            Sonic_WalkVertL:
0002004C 3428 000C                  		move.w	$C(a0),d2				; MJ: Load Y position
00020050 3628 0008                  		move.w	8(a0),d3				; MJ: Load X position
00020054 48A7 3000                  		movem.w d2-d3,-(sp)
00020058 7000                       		moveq	#0,d0					; MJ: clear d0
0002005A 1028 0017                  		move.b	$17(a0),d0				; MJ: load height
0002005E 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00020060 9440                       		sub.w	d0,d2					; MJ: subtract from Y position
00020062 1028 0016                  		move.b	$16(a0),d0				; MJ: load width
00020066 4880                       		ext.w	d0					; MJ: set left byte pos or neg
00020068 9640                       		sub.w	d0,d3					; MJ: subtract from X position
0002006A 0A43 000F                  		eori.w	#$F,d3
0002006E 49F8 F768                  		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
00020072 367C FFF0                  		movea.w	#-$10,a3
00020076 3C3C 0400                  		move.w	#$400,d6
0002007A 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002007C 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
00020080 4C9F 000C                  		movem.w (sp)+,d2-d3
00020084 3F01                       		move.w	d1,-(sp)
00020086 7000                       		moveq	#0,d0
00020088 1028 0017                  		move.b	$17(a0),d0
0002008C 4880                       		ext.w	d0
0002008E D440                       		add.w	d0,d2
00020090 1028 0016                  		move.b	$16(a0),d0
00020094 4880                       		ext.w	d0
00020096 9640                       		sub.w	d0,d3
00020098 0A43 000F                  		eori.w	#$F,d3
0002009C 49F8 F76A                  		lea	($FFFFF76A).w,a4
000200A0 367C FFF0                  		movea.w	#-$10,a3
000200A4 3C3C 0400                  		move.w	#$400,d6
000200A8 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
000200AA 6100 0000                  		bsr.w	FindWall				; MJ: check solidity
000200AE 301F                       		move.w	(sp)+,d0
000200B0 6100 FE30                  		bsr.w	Sonic_Angle
000200B4 4A41                       		tst.w	d1
000200B6 6700                       		beq.s	locret_14934
000200B8 6A00                       		bpl.s	loc_14936
000200BA 0C41 FFF2                  		cmpi.w	#-$E,d1
000200BE 6D00 FDDC                  		blt.w	locret_1470A
000200C2 9368 0008                  		sub.w	d1,8(a0)
000200C6                            
000200C6                            locret_14934:
000200C6 4E75                       		rts	
000200C8                            ; ===========================================================================
000200C8                            
000200C8                            loc_14936:
000200C8 0C41 000E                  		cmpi.w	#$E,d1
000200CC 6E00                       		bgt.s	loc_14942
000200CE                            
000200CE                            loc_1493C:
000200CE 9368 0008                  		sub.w	d1,8(a0)
000200D2 4E75                       		rts	
000200D4                            ; ===========================================================================
000200D4                            
000200D4                            loc_14942:
000200D4 4A28 0038                  		tst.b	$38(a0)
000200D8 66F4                       		bne.s	loc_1493C
000200DA 08E8 0001 0022             		bset	#1,$22(a0)
000200E0 08A8 0005 0022             		bclr	#5,$22(a0)
000200E6 117C 0001 001D             		move.b	#1,$1D(a0)
000200EC 4E75                       		rts	
000200EE                            ; End of function Sonic_WalkVertL
000200EE                            
000200EE                            ; ---------------------------------------------------------------------------
000200EE                            ; Subroutine to	find which tile	the object is standing on
000200EE                            ; ---------------------------------------------------------------------------
000200EE                            
000200EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200EE                            
000200EE                            
000200EE                            Floor_ChkTile:				; XREF: FindFloor; et al
000200EE 3002                       		move.w	d2,d0					; MJ: load Y position
000200F0 0240 0780                  		andi.w	#$780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
000200F4 D040                       		add.w	d0,d0					; MJ: multiply by 2
000200F6 3203                       		move.w	d3,d1					; MJ: load X position
000200F8 EE49                       		lsr.w	#7,d1					; MJ: shift to right side
000200FA 0241 007F                  		andi.w	#$7F,d1					; MJ: get within 7F
000200FE D041                       		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
00020100 72FF                       		moveq	#-1,d1					; MJ: prepare FFFF in d3
00020102 2278 A400                  		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
00020106 1231 0000                  		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
0002010A 0241 00FF                  		andi.w	#$FF,d1					; MJ: keep within FF
0002010E EE59                       		ror.w	#7,d1					; MJ: ror round to the far left
00020110 E459                       		ror.w	#2,d1					; MJ: ..plus an extra 2 (so it's 80, not 200)
00020112 3002                       		move.w	d2,d0					; MJ: load Y position
00020114 0240 0070                  		andi.w	#$070,d0				; MJ: keep Y within 80 pixels
00020118 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
0002011A 3003                       		move.w	d3,d0					; MJ: load X position
0002011C E648                       		lsr.w	#3,d0					; MJ: divide by 8
0002011E 0240 000E                  		andi.w	#$0E,d0					; MJ: keep X within 10 pixels
00020122 D240                       		add.w	d0,d1					; MJ: add to ror'd chunk ID
00020124                            
00020124                            loc_14996:
00020124 2241                       		movea.l	d1,a1					; MJ: set address (Chunk to read)
00020126 0C28 0006 0024             		cmpi.b  #$06,$24(A0)
0002012C 6600                       		bne.s   Player_Not_Death
0002012E 0C10 0001                  		cmpi.b  #$01,(A0)          ; Is Sonic
00020132 6600                       		bne.s   Player_Not_Death
00020134 227C FFFF 0000             		move.l  #$FFFF0000, A1
0002013A                            Player_Not_Death:
0002013A 4E75                       		rts						; MJ: return
0002013C                            ; ===========================================================================
0002013C                            
0002013C                            loc_1499A:
0002013C 0241 007F                  		andi.w	#$7F,d1
00020140 0828 0006 0001             		btst	#6,1(a0)
00020146 6700                       		beq.s	loc_149B2
00020148 5241                       		addq.w	#1,d1
0002014A 0C41 0029                  		cmpi.w	#$29,d1
0002014E 6600                       		bne.s	loc_149B2
00020150 323C 0051                  		move.w	#$51,d1
00020154                            
00020154                            loc_149B2:
00020154 EE59                       		ror.w	#7,d1
00020156 E459                       		ror.w	#2,d1
00020158 3002                       		move.w	d2,d0
0002015A D040                       		add.w	d0,d0
0002015C 0240 0070                  		andi.w	#$070,d0
00020160 D240                       		add.w	d0,d1
00020162 3003                       		move.w	d3,d0
00020164 E648                       		lsr.w	#3,d0
00020166 0240 000E                  		andi.w	#$0E,d0
0002016A D240                       		add.w	d0,d1
0002016C 2241                       		movea.l	d1,a1
0002016E 4E75                       		rts
00020170                            ; End of function Floor_ChkTile
00020170                            
00020170                            
00020170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020170                            
00020170                            
00020170                            ColisionChkLayer:
00020170 4A38 FFF7                  		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
00020174 6700                       		beq.s	CCL_NoChange				; MJ: if so, branch
00020176 3800                       		move.w	d0,d4					; MJ: load block ID to d4
00020178 0240 0FFF                  		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
0002017C 0244 C000                  		and.w	#$C000,d4				; MJ: get only second solid settings of d4
00020180 E44C                       		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
00020182 D044                       		add.w	d4,d0					; MJ: add to rest of block ID
00020184                            
00020184                            CCL_NoChange:
00020184 4E75                       		rts						; MJ: return
00020186                            
00020186                            
00020186                            FindFloor:
00020186 6100 FF66                  		bsr.w	Floor_ChkTile
0002018A 3011                       		move.w	(a1),d0
0002018C 61E2                       		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
0002018E 3800                       		move.w	d0,d4
00020190 0240 03FF                  		andi.w	#$3FF,d0
00020194 6700                       		beq.s	loc_149DE
00020196 0B04                       		btst	d5,d4
00020198 6600                       		bne.s	loc_149EC
0002019A                            
0002019A                            loc_149DE:
0002019A D44B                       		add.w	a3,d2
0002019C 6100 0000                  		bsr.w	FindFloor2
000201A0 944B                       		sub.w	a3,d2
000201A2 0641 0010                  		addi.w	#$10,d1
000201A6 4E75                       		rts	
000201A8                            ; ===========================================================================
000201A8                            
000201A8                            loc_149EC:
000201A8 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
000201AC 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
000201B0 0240 00FF                  		andi.w	#$FF,d0					; MJ: clear the left byte
000201B4 67E4                       		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
000201B6 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
000201BC 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
000201C0 E948                       		lsl.w	#4,d0					; MJ: multiply collision ID by 10
000201C2 3203                       		move.w	d3,d1					; MJ: load X position
000201C4 0804 000A                  		btst	#$A,d4					; MJ: is the block mirrored?
000201C8 6700                       		beq.s	loc_14A12				; MJ: if not, branch
000201CA 4641                       		not.w	d1					; MJ: reverse bits of the X position
000201CC 4414                       		neg.b	(a4)					; MJ: reverse the angle ID
000201CE                            
000201CE                            loc_14A12:
000201CE 0804 000B                  		btst	#$B,d4					; MJ: is the block flipped?
000201D2 6700                       		beq.s	loc_14A22				; MJ: if not, branch
000201D4 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
000201D8 4414                       		neg.b	(a4)					; MJ: ..reverse the angle ID..
000201DA 0414 0040                  		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
000201DE                            
000201DE                            loc_14A22:
000201DE 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
000201E2 D240                       		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
000201E4 45F9 0000 0000             		lea	(CollArray1).l,a2			; MJ: load collision array
000201EA 1032 1000                  		move.b	(a2,d1.w),d0				; MJ: load solid value
000201EE 4880                       		ext.w	d0					; MJ: clear left byte
000201F0 BD44                       		eor.w	d6,d4					; MJ: set ceiling/wall bits
000201F2 0804 000B                  		btst	#$B,d4					; MJ: is sonic walking on the left wall?
000201F6 6700                       		beq.s	loc_14A3E				; MJ: if not, branch
000201F8 4440                       		neg.w	d0					; MJ: reverse solid value
000201FA                            
000201FA                            loc_14A3E:
000201FA 4A40                       		tst.w	d0					; MJ: is the solid data null?
000201FC 679C                       		beq.s	loc_149DE				; MJ: if so, branch
000201FE 6B00                       		bmi.s	loc_14A5A				; MJ: if it's negative, branch
00020200 0C00 0010                  		cmpi.b	#$10,d0					; MJ: is it 10?
00020204 6700                       		beq.s	loc_14A66				; MJ: if so, branch
00020206 3202                       		move.w	d2,d1					; MJ: load Y position
00020208 0241 000F                  		andi.w	#$F,d1					; MJ: get only within 10 pixels
0002020C D041                       		add.w	d1,d0					; MJ: add to solid value
0002020E 323C 000F                  		move.w	#$F,d1					; MJ: set F
00020212 9240                       		sub.w	d0,d1					; MJ: minus solid value from F
00020214 4E75                       		rts			; d1 = position?	; MJ: return
00020216                            ; ===========================================================================
00020216                            
00020216                            loc_14A5A:
00020216 3202                       		move.w	d2,d1
00020218 0241 000F                  		andi.w	#$F,d1
0002021C D041                       		add.w	d1,d0
0002021E 6A00 FF7A                  		bpl.w	loc_149DE
00020222                            
00020222                            loc_14A66:
00020222 944B                       		sub.w	a3,d2
00020224 6100 0000                  		bsr.w	FindFloor2
00020228 D44B                       		add.w	a3,d2
0002022A 0441 0010                  		subi.w	#$10,d1
0002022E 4E75                       		rts	
00020230                            ; End of function FindFloor
00020230                            
00020230                            
00020230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020230                            
00020230                            
00020230                            FindFloor2:				; XREF: FindFloor
00020230 6100 FEBC                  		bsr.w	Floor_ChkTile
00020234 3011                       		move.w	(a1),d0
00020236 6100 FF38                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
0002023A 3800                       		move.w	d0,d4
0002023C 0240 03FF                  		andi.w	#$3FF,d0
00020240 6700                       		beq.s	loc_14A86
00020242 0B04                       		btst	d5,d4
00020244 6600                       		bne.s	loc_14A94
00020246                            
00020246                            loc_14A86:
00020246 323C 000F                  		move.w	#$F,d1
0002024A 3002                       		move.w	d2,d0
0002024C 0240 000F                  		andi.w	#$F,d0
00020250 9240                       		sub.w	d0,d1
00020252 4E75                       		rts	
00020254                            ; ===========================================================================
00020254                            
00020254                            loc_14A94:
00020254 2478 F796                  		movea.l	($FFFFF796).w,a2
00020258 1032 0000                  		move.b	(a2,d0.w),d0
0002025C 0240 00FF                  		andi.w	#$FF,d0
00020260 67E4                       		beq.s	loc_14A86
00020262 45F9 0000 0000             		lea	(AngleMap).l,a2
00020268 18B2 0000                  		move.b	(a2,d0.w),(a4)
0002026C E948                       		lsl.w	#4,d0
0002026E 3203                       		move.w	d3,d1
00020270 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
00020274 6700                       		beq.s	loc_14ABA
00020276 4641                       		not.w	d1
00020278 4414                       		neg.b	(a4)
0002027A                            
0002027A                            loc_14ABA:
0002027A 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
0002027E 6700                       		beq.s	loc_14ACA
00020280 0614 0040                  		addi.b	#$40,(a4)
00020284 4414                       		neg.b	(a4)
00020286 0414 0040                  		subi.b	#$40,(a4)
0002028A                            
0002028A                            loc_14ACA:
0002028A 0241 000F                  		andi.w	#$F,d1
0002028E D240                       		add.w	d0,d1
00020290 45F9 0000 0000             		lea	(CollArray1).l,a2
00020296 1032 1000                  		move.b	(a2,d1.w),d0
0002029A 4880                       		ext.w	d0
0002029C BD44                       		eor.w	d6,d4
0002029E 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000202A2 6700                       		beq.s	loc_14AE6
000202A4 4440                       		neg.w	d0
000202A6                            
000202A6                            loc_14AE6:
000202A6 4A40                       		tst.w	d0
000202A8 679C                       		beq.s	loc_14A86
000202AA 6B00                       		bmi.s	loc_14AFC
000202AC 3202                       		move.w	d2,d1
000202AE 0241 000F                  		andi.w	#$F,d1
000202B2 D041                       		add.w	d1,d0
000202B4 323C 000F                  		move.w	#$F,d1
000202B8 9240                       		sub.w	d0,d1
000202BA 4E75                       		rts	
000202BC                            ; ===========================================================================
000202BC                            
000202BC                            loc_14AFC:
000202BC 3202                       		move.w	d2,d1
000202BE 0241 000F                  		andi.w	#$F,d1
000202C2 D041                       		add.w	d1,d0
000202C4 6A00 FF80                  		bpl.w	loc_14A86
000202C8 4641                       		not.w	d1
000202CA 4E75                       		rts	
000202CC                            ; End of function FindFloor2
000202CC                            
000202CC                            
000202CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000202CC                            
000202CC                            
000202CC                            FindWall:
000202CC 6100 FE20                  		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
000202D0 3011                       		move.w	(a1),d0					; MJ: load block ID from chunk
000202D2 6100 FE9C                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
000202D6 3800                       		move.w	d0,d4					; MJ: copy to d4
000202D8 0240 03FF                  		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
000202DC 6700                       		beq.s	loc_14B1E				; MJ: if it was null, branch
000202DE 0B04                       		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
000202E0 6600                       		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
000202E2                            
000202E2                            loc_14B1E:
000202E2 D64B                       		add.w	a3,d3					; MJ: add 10 to X position
000202E4 6100 0000                  		bsr.w	FindWall2
000202E8 964B                       		sub.w	a3,d3					; MJ: minus 10 from X position
000202EA 0641 0010                  		addi.w	#$10,d1
000202EE 4E75                       		rts	
000202F0                            ; ===========================================================================
000202F0                            
000202F0                            loc_14B2C:
000202F0 2478 F796                  		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
000202F4 1032 0000                  		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
000202F8 0240 00FF                  		andi.w	#$FF,d0					; MJ: keep within FF
000202FC 67E4                       		beq.s	loc_14B1E				; MJ: if it's null, branch
000202FE 45F9 0000 0000             		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
00020304 18B2 0000                  		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
00020308 E948                       		lsl.w	#4,d0					; MJ: multiply by 10
0002030A 3202                       		move.w	d2,d1					; MJ: load Y position
0002030C 0804 000B                  		btst	#$B,d4					; MJ: is the block ID flipped?
00020310 6700                       		beq.s	loc_14B5A				; MJ: if not, branch
00020312 4641                       		not.w	d1
00020314 0614 0040                  		addi.b	#$40,(a4)				; MJ: increase angle set by 40
00020318 4414                       		neg.b	(a4)					; MJ: negate to opposite
0002031A 0414 0040                  		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
0002031E                            
0002031E                            loc_14B5A:
0002031E 0804 000A                  		btst	#$A,d4					; MJ: is the block ID mirrored?
00020322 6700                       		beq.s	loc_14B62				; MJ: if not, branch
00020324 4414                       		neg.b	(a4)					; MJ: negate to opposite
00020326                            
00020326                            loc_14B62:
00020326 0241 000F                  		andi.w	#$F,d1
0002032A D240                       		add.w	d0,d1
0002032C 45F9 0000 0000             		lea	(CollArray2).l,a2
00020332 1032 1000                  		move.b	(a2,d1.w),d0
00020336 4880                       		ext.w	d0
00020338 BD44                       		eor.w	d6,d4
0002033A 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
0002033E 6700                       		beq.s	loc_14B7E
00020340 4440                       		neg.w	d0
00020342                            
00020342                            loc_14B7E:
00020342 4A40                       		tst.w	d0
00020344 679C                       		beq.s	loc_14B1E
00020346 6B00                       		bmi.s	loc_14B9A
00020348 0C00 0010                  		cmpi.b	#$10,d0
0002034C 6700                       		beq.s	loc_14BA6
0002034E 3203                       		move.w	d3,d1
00020350 0241 000F                  		andi.w	#$F,d1
00020354 D041                       		add.w	d1,d0
00020356 323C 000F                  		move.w	#$F,d1
0002035A 9240                       		sub.w	d0,d1
0002035C 4E75                       		rts	
0002035E                            ; ===========================================================================
0002035E                            
0002035E                            loc_14B9A:
0002035E 3203                       		move.w	d3,d1
00020360 0241 000F                  		andi.w	#$F,d1
00020364 D041                       		add.w	d1,d0
00020366 6A00 FF7A                  		bpl.w	loc_14B1E
0002036A                            
0002036A                            loc_14BA6:
0002036A 964B                       		sub.w	a3,d3
0002036C 6100 0000                  		bsr.w	FindWall2
00020370 D64B                       		add.w	a3,d3
00020372 0441 0010                  		subi.w	#$10,d1
00020376 4E75                       		rts	
00020378                            ; End of function FindWall
00020378                            
00020378                            
00020378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020378                            
00020378                            
00020378                            FindWall2:				; XREF: FindWall
00020378 6100 FD74                  		bsr.w	Floor_ChkTile
0002037C 3011                       		move.w	(a1),d0
0002037E 6100 FDF0                  		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
00020382 3800                       		move.w	d0,d4
00020384 0240 03FF                  		andi.w	#$3FF,d0
00020388 6700                       		beq.s	loc_14BC6
0002038A 0B04                       		btst	d5,d4
0002038C 6600                       		bne.s	loc_14BD4
0002038E                            
0002038E                            loc_14BC6:
0002038E 323C 000F                  		move.w	#$F,d1
00020392 3003                       		move.w	d3,d0
00020394 0240 000F                  		andi.w	#$F,d0
00020398 9240                       		sub.w	d0,d1
0002039A 4E75                       		rts	
0002039C                            ; ===========================================================================
0002039C                            
0002039C                            loc_14BD4:
0002039C 2478 F796                  		movea.l	($FFFFF796).w,a2
000203A0 1032 0000                  		move.b	(a2,d0.w),d0
000203A4 0240 00FF                  		andi.w	#$FF,d0
000203A8 67E4                       		beq.s	loc_14BC6
000203AA 45F9 0000 0000             		lea	(AngleMap).l,a2
000203B0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000203B4 E948                       		lsl.w	#4,d0
000203B6 3202                       		move.w	d2,d1
000203B8 0804 000B                  		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
000203BC 6700                       		beq.s	loc_14C02
000203BE 4641                       		not.w	d1
000203C0 0614 0040                  		addi.b	#$40,(a4)
000203C4 4414                       		neg.b	(a4)
000203C6 0414 0040                  		subi.b	#$40,(a4)
000203CA                            
000203CA                            loc_14C02:
000203CA 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000203CE 6700                       		beq.s	loc_14C0A
000203D0 4414                       		neg.b	(a4)
000203D2                            
000203D2                            loc_14C0A:
000203D2 0241 000F                  		andi.w	#$F,d1
000203D6 D240                       		add.w	d0,d1
000203D8 45F9 0000 0000             		lea	(CollArray2).l,a2
000203DE 1032 1000                  		move.b	(a2,d1.w),d0
000203E2 4880                       		ext.w	d0
000203E4 BD44                       		eor.w	d6,d4
000203E6 0804 000A                  		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
000203EA 6700                       		beq.s	loc_14C26
000203EC 4440                       		neg.w	d0
000203EE                            
000203EE                            loc_14C26:
000203EE 4A40                       		tst.w	d0
000203F0 679C                       		beq.s	loc_14BC6
000203F2 6B00                       		bmi.s	loc_14C3C
000203F4 3203                       		move.w	d3,d1
000203F6 0241 000F                  		andi.w	#$F,d1
000203FA D041                       		add.w	d1,d0
000203FC 323C 000F                  		move.w	#$F,d1
00020400 9240                       		sub.w	d0,d1
00020402 4E75                       		rts	
00020404                            ; ===========================================================================
00020404                            
00020404                            loc_14C3C:
00020404 3203                       		move.w	d3,d1
00020406 0241 000F                  		andi.w	#$F,d1
0002040A D041                       		add.w	d1,d0
0002040C 6A00 FF80                  		bpl.w	loc_14BC6
00020410 4641                       		not.w	d1
00020412 4E75                       		rts	
00020414                            ; End of function FindWall2
00020414                            
00020414                            ; ---------------------------------------------------------------------------
00020414                            ; Unused floor/wall subroutine - logs something	to do with collision
00020414                            ; ---------------------------------------------------------------------------
00020414                            
00020414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020414                            
00020414                            
00020414                            FloorLog_Unk:				; XREF: Level
00020414 4E75                       		rts	
00020416                            
00020416 43F9 0000 0000             		lea	(CollArray1).l,a1
0002041C 45F9 0000 0000             		lea	(CollArray1).l,a2
00020422 363C 00FF                  		move.w	#$FF,d3
00020426                            
00020426                            loc_14C5E:
00020426 7A10                       		moveq	#$10,d5
00020428 343C 000F                  		move.w	#$F,d2
0002042C                            
0002042C                            loc_14C64:
0002042C 7800                       		moveq	#0,d4
0002042E 323C 000F                  		move.w	#$F,d1
00020432                            
00020432                            loc_14C6A:
00020432 3019                       		move.w	(a1)+,d0
00020434 EAA8                       		lsr.l	d5,d0
00020436 D944                       		addx.w	d4,d4
00020438 51C9 FFF8                  		dbf	d1,loc_14C6A
0002043C                            
0002043C 34C4                       		move.w	d4,(a2)+
0002043E 92FC 0020                  		suba.w	#$20,a1
00020442 5345                       		subq.w	#1,d5
00020444 51CA FFE6                  		dbf	d2,loc_14C64
00020448                            
00020448 D2FC 0020                  		adda.w	#$20,a1
0002044C 51CB FFD8                  		dbf	d3,loc_14C5E
00020450                            
00020450 43F9 0000 0000             		lea	(CollArray1).l,a1
00020456 45F9 0000 0000             		lea	(CollArray2).l,a2
0002045C 6100                       		bsr.s	FloorLog_Unk2
0002045E 43F9 0000 0000             		lea	(CollArray1).l,a1
00020464 45F9 0000 0000             		lea	(CollArray1).l,a2
0002046A                            
0002046A                            ; End of function FloorLog_Unk
0002046A                            
0002046A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002046A                            
0002046A                            
0002046A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0002046A 363C 0FFF                  		move.w	#$FFF,d3
0002046E                            
0002046E                            loc_14CA6:
0002046E 7400                       		moveq	#0,d2
00020470 323C 000F                  		move.w	#$F,d1
00020474 3019                       		move.w	(a1)+,d0
00020476 6700                       		beq.s	loc_14CD4
00020478 6B00                       		bmi.s	loc_14CBE
0002047A                            
0002047A                            loc_14CB2:
0002047A E248                       		lsr.w	#1,d0
0002047C 6400                       		bcc.s	loc_14CB8
0002047E 5202                       		addq.b	#1,d2
00020480                            
00020480                            loc_14CB8:
00020480 51C9 FFF8                  		dbf	d1,loc_14CB2
00020484                            
00020484 6000                       		bra.s	loc_14CD6
00020486                            ; ===========================================================================
00020486                            
00020486                            loc_14CBE:
00020486 0C40 FFFF                  		cmpi.w	#-1,d0
0002048A 6700                       		beq.s	loc_14CD0
0002048C                            
0002048C                            loc_14CC4:
0002048C E348                       		lsl.w	#1,d0
0002048E 6400                       		bcc.s	loc_14CCA
00020490 5302                       		subq.b	#1,d2
00020492                            
00020492                            loc_14CCA:
00020492 51C9 FFF8                  		dbf	d1,loc_14CC4
00020496                            
00020496 6000                       		bra.s	loc_14CD6
00020498                            ; ===========================================================================
00020498                            
00020498                            loc_14CD0:
00020498 303C 0010                  		move.w	#$10,d0
0002049C                            
0002049C                            loc_14CD4:
0002049C 3400                       		move.w	d0,d2
0002049E                            
0002049E                            loc_14CD6:
0002049E 14C2                       		move.b	d2,(a2)+
000204A0 51CB FFCC                  		dbf	d3,loc_14CA6
000204A4                            
000204A4 4E75                       		rts	
000204A6                            
000204A6                            ; End of function FloorLog_Unk2
000204A6                            
000204A6                            
000204A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000204A6                            
000204A6                            
000204A6                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000204A6 2628 0008                  		move.l	8(a0),d3
000204AA 2428 000C                  		move.l	$C(a0),d2
000204AE 3228 0010                  		move.w	x_vel(a0),d1
000204B2 48C1                       		ext.l	d1
000204B4 E181                       		asl.l	#8,d1
000204B6 D681                       		add.l	d1,d3
000204B8 3228 0012                  		move.w	y_vel(a0),d1
000204BC 48C1                       		ext.l	d1
000204BE E181                       		asl.l	#8,d1
000204C0 D481                       		add.l	d1,d2
000204C2 4842                       		swap	d2
000204C4 4843                       		swap	d3
000204C6 11C0 F768                  		move.b	d0,($FFFFF768).w
000204CA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000204CE 1200                       		move.b	d0,d1
000204D0 0600 0020                  		addi.b	#$20,d0
000204D4 6A00                       		bpl.s	loc_14D1A
000204D6 1001                       		move.b	d1,d0
000204D8 6A00                       		bpl.s	loc_14D14
000204DA 5300                       		subq.b	#1,d0
000204DC                            
000204DC                            loc_14D14:
000204DC 0600 0020                  		addi.b	#$20,d0
000204E0 6000                       		bra.s	loc_14D24
000204E2                            ; ===========================================================================
000204E2                            
000204E2                            loc_14D1A:
000204E2 1001                       		move.b	d1,d0
000204E4 6A00                       		bpl.s	loc_14D20
000204E6 5200                       		addq.b	#1,d0
000204E8                            
000204E8                            loc_14D20:
000204E8 0600 001F                  		addi.b	#$1F,d0
000204EC                            
000204EC                            loc_14D24:
000204EC 0200 00C0                  		andi.b	#$C0,d0
000204F0 6700 0000                  		beq.w	loc_14DF0
000204F4 0C00 0080                  		cmpi.b	#$80,d0
000204F8 6700 0000                  		beq.w	loc_14F7C
000204FC 0201 0038                  		andi.b	#$38,d1
00020500 6600                       		bne.s	loc_14D3C
00020502 5042                       		addq.w	#8,d2
00020504                            
00020504                            loc_14D3C:
00020504 0C00 0040                  		cmpi.b	#$40,d0
00020508 6700 0000                  		beq.w	loc_1504A
0002050C 6000 0000                  		bra.w	loc_14EBC
00020510                            
00020510                            ; End of function Sonic_WalkSpeed
00020510                            
00020510                            
00020510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020510                            
00020510                            
00020510                            sub_14D48:				; XREF: Sonic_Jump
00020510 11C0 F768                  		move.b	d0,($FFFFF768).w
00020514 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00020518 0600 0020                  		addi.b	#$20,d0
0002051C 0200 00C0                  		andi.b	#$C0,d0
00020520 0C00 0040                  		cmpi.b	#$40,d0
00020524 6700 0000                  		beq.w	loc_14FD6
00020528 0C00 0080                  		cmpi.b	#$80,d0
0002052C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00020530 0C00 00C0                  		cmpi.b	#$C0,d0
00020534 6700 0000                  		beq.w	sub_14E50
00020538                            
00020538                            ; End of function sub_14D48
00020538                            
00020538                            ; ---------------------------------------------------------------------------
00020538                            ; Subroutine to	make Sonic land	on the floor after jumping
00020538                            ; ---------------------------------------------------------------------------
00020538                            
00020538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020538                            
00020538                            
00020538                            Sonic_HitFloor:				; XREF: Sonic_Floor
00020538 3428 000C                  		move.w	$C(a0),d2
0002053C 3628 0008                  		move.w	8(a0),d3
00020540 48A7 3000                  		movem.w d2-d3,-(sp)		
00020544 7000                       		moveq	#0,d0
00020546 1028 0016                  		move.b	$16(a0),d0
0002054A 4880                       		ext.w	d0
0002054C D440                       		add.w	d0,d2
0002054E 1028 0017                  		move.b	$17(a0),d0
00020552 4880                       		ext.w	d0
00020554 D640                       		add.w	d0,d3
00020556 49F8 F768                  		lea	($FFFFF768).w,a4
0002055A 367C 0010                  		movea.w	#$10,a3
0002055E 3C3C 0000                  		move.w	#0,d6
00020562 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020564 6100 FC20                  		bsr.w	FindFloor				; MJ: check solidity
00020568 4C9F 000C                  		movem.w (sp)+,d2-d3		
0002056C 3F01                       		move.w	d1,-(sp)
0002056E 7000                       		moveq	#0,d0
00020570 1028 0016                  		move.b	$16(a0),d0
00020574 4880                       		ext.w	d0
00020576 D440                       		add.w	d0,d2
00020578 1028 0017                  		move.b	$17(a0),d0
0002057C 4880                       		ext.w	d0
0002057E 9640                       		sub.w	d0,d3
00020580 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020584 367C 0010                  		movea.w	#$10,a3
00020588 3C3C 0000                  		move.w	#0,d6
0002058C 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
0002058E 6100 FBF6                  		bsr.w	FindFloor				; MJ: check solidity
00020592 301F                       		move.w	(sp)+,d0
00020594 143C 0000                  		move.b	#0,d2
00020598                            
00020598                            loc_14DD0:
00020598 1638 F76A                  		move.b	($FFFFF76A).w,d3
0002059C B240                       		cmp.w	d0,d1
0002059E 6F00                       		ble.s	loc_14DDE
000205A0 1638 F768                  		move.b	($FFFFF768).w,d3
000205A4 C141                       		exg	d0,d1
000205A6                            
000205A6                            loc_14DDE:
000205A6 0803 0000                  		btst	#0,d3
000205AA 6700                       		beq.s	locret_14DE6
000205AC 1602                       		move.b	d2,d3
000205AE                            
000205AE                            locret_14DE6:
000205AE 4E75                       		rts	
000205B0                            
000205B0                            ; End of function Sonic_HitFloor
000205B0                            
000205B0                            ; ===========================================================================
000205B0 3428 000C                  		move.w	$C(a0),d2
000205B4 3628 0008                  		move.w	8(a0),d3
000205B8                            
000205B8                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000205B8 0642 000A                  		addi.w	#$A,d2
000205BC 49F8 F768                  		lea	($FFFFF768).w,a4
000205C0 367C 0010                  		movea.w	#$10,a3
000205C4 3C3C 0000                  		move.w	#0,d6
000205C8 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000205CA 6100 FBBA                  		bsr.w	FindFloor				; MJ: check solidity
000205CE 143C 0000                  		move.b	#0,d2
000205D2                            
000205D2                            loc_14E0A:				; XREF: sub_14EB4
000205D2 1638 F768                  		move.b	($FFFFF768).w,d3
000205D6 0803 0000                  		btst	#0,d3
000205DA 6700                       		beq.s	locret_14E16
000205DC 1602                       		move.b	d2,d3
000205DE                            
000205DE                            locret_14E16:
000205DE 4E75                       		rts	
000205E0                            
000205E0                            ; ---------------------------------------------------------------------------
000205E0                            ; Subroutine allowing objects to interact with the floor
000205E0                            ; ---------------------------------------------------------------------------
000205E0                            
000205E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205E0                            
000205E0                            
000205E0                            ObjHitFloor:
000205E0 3628 0008                  		move.w	8(a0),d3
000205E4                            
000205E4                            ; End of function ObjHitFloor
000205E4                            
000205E4                            
000205E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205E4                            
000205E4                            
000205E4                            ObjHitFloor2:
000205E4 3428 000C                  		move.w	$C(a0),d2
000205E8 7000                       		moveq	#0,d0
000205EA 1028 0016                  		move.b	$16(a0),d0
000205EE 4880                       		ext.w	d0
000205F0 D440                       		add.w	d0,d2
000205F2 49F8 F768                  		lea	($FFFFF768).w,a4
000205F6 18BC 0000                  		move.b	#0,(a4)
000205FA 367C 0010                  		movea.w	#$10,a3
000205FE 3C3C 0000                  		move.w	#0,d6
00020602 7A0C                       		moveq	#$C,d5					; MJ: set solid type to check
00020604 6100 FB80                  		bsr.w	FindFloor				; MJ: check solidity
00020608 1638 F768                  		move.b	($FFFFF768).w,d3
0002060C 0803 0000                  		btst	#0,d3
00020610 6700                       		beq.s	locret_14E4E
00020612 163C 0000                  		move.b	#0,d3
00020616                            
00020616                            locret_14E4E:
00020616 4E75                       		rts	
00020618                            ; End of function ObjHitFloor2
00020618                            
00020618                            
00020618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020618                            
00020618                            
00020618                            sub_14E50:				; XREF: sub_14D48
00020618 3428 000C                  		move.w	$C(a0),d2
0002061C 3628 0008                  		move.w	8(a0),d3
00020620 48A7 3000                  		movem.w d2-d3,-(sp)
00020624 7000                       		moveq	#0,d0
00020626 1028 0017                  		move.b	$17(a0),d0
0002062A 4880                       		ext.w	d0
0002062C 9440                       		sub.w	d0,d2
0002062E 1028 0016                  		move.b	$16(a0),d0
00020632 4880                       		ext.w	d0
00020634 D640                       		add.w	d0,d3
00020636 49F8 F768                  		lea	($FFFFF768).w,a4
0002063A 367C 0010                  		movea.w	#$10,a3
0002063E 3C3C 0000                  		move.w	#0,d6
00020642 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020644 6100 FC86                  		bsr.w	FindWall				; MJ: check solidity
00020648 4C9F 000C                  		movem.w (sp)+,d2-d3
0002064C 3F01                       		move.w	d1,-(sp)
0002064E 7000                       		moveq	#0,d0
00020650 1028 0017                  		move.b	$17(a0),d0
00020654 4880                       		ext.w	d0
00020656 D440                       		add.w	d0,d2
00020658 1028 0016                  		move.b	$16(a0),d0
0002065C 4880                       		ext.w	d0
0002065E D640                       		add.w	d0,d3
00020660 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020664 367C 0010                  		movea.w	#$10,a3
00020668 3C3C 0000                  		move.w	#0,d6
0002066C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002066E 6100 FC5C                  		bsr.w	FindWall				; MJ: check solidity
00020672 301F                       		move.w	(sp)+,d0
00020674 143C 00C0                  		move.b	#-$40,d2
00020678 6000 FF1E                  		bra.w	loc_14DD0
0002067C                            
0002067C                            ; End of function sub_14E50
0002067C                            
0002067C                            
0002067C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002067C                            
0002067C                            
0002067C                            sub_14EB4:				; XREF: Sonic_Floor
0002067C 3428 000C                  		move.w	$C(a0),d2
00020680 3628 0008                  		move.w	8(a0),d3
00020684                            
00020684                            loc_14EBC:
00020684 0643 000A                  		addi.w	#$A,d3
00020688 49F8 F768                  		lea	($FFFFF768).w,a4
0002068C 367C 0010                  		movea.w	#$10,a3
00020690 3C3C 0000                  		move.w	#0,d6
00020694 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020696 6100 FC34                  		bsr.w	FindWall				; MJ: check solidity
0002069A 143C 00C0                  		move.b	#-$40,d2
0002069E 6000 FF32                  		bra.w	loc_14E0A
000206A2                            
000206A2                            ; End of function sub_14EB4
000206A2                            
000206A2                            ; ---------------------------------------------------------------------------
000206A2                            ; Subroutine to	detect when an object hits a wall to its right
000206A2                            ; ---------------------------------------------------------------------------
000206A2                            
000206A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000206A2                            
000206A2                            
000206A2                            ObjHitWallRight:
000206A2 D668 0008                  		add.w	8(a0),d3
000206A6 3428 000C                  		move.w	$C(a0),d2
000206AA 49F8 F768                  		lea	($FFFFF768).w,a4
000206AE 18BC 0000                  		move.b	#0,(a4)
000206B2 367C 0010                  		movea.w	#$10,a3
000206B6 3C3C 0000                  		move.w	#0,d6
000206BA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000206BC 6100 FC0E                  		bsr.w	FindWall				; MJ: check solidity
000206C0 1638 F768                  		move.b	($FFFFF768).w,d3
000206C4 0803 0000                  		btst	#0,d3
000206C8 6700                       		beq.s	locret_14F06
000206CA 163C 00C0                  		move.b	#-$40,d3
000206CE                            
000206CE                            locret_14F06:
000206CE 4E75                       		rts	
000206D0                            
000206D0                            ; End of function ObjHitWallRight
000206D0                            
000206D0                            
000206D0                            ; ---------------------------------------------------------------------------
000206D0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000206D0                            ; touches them
000206D0                            ; ---------------------------------------------------------------------------
000206D0                            
000206D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000206D0                            
000206D0                            
000206D0                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000206D0 3428 000C                  		move.w	$C(a0),d2
000206D4 3628 0008                  		move.w	8(a0),d3
000206D8 48A7 3000                  		movem.w d2-d3,-(sp)
000206DC 7000                       		moveq	#0,d0
000206DE 1028 0016                  		move.b	$16(a0),d0
000206E2 4880                       		ext.w	d0
000206E4 9440                       		sub.w	d0,d2
000206E6 0A42 000F                  		eori.w	#$F,d2
000206EA 1028 0017                  		move.b	$17(a0),d0
000206EE 4880                       		ext.w	d0
000206F0 D640                       		add.w	d0,d3
000206F2 49F8 F768                  		lea	($FFFFF768).w,a4
000206F6 367C FFF0                  		movea.w	#-$10,a3
000206FA 3C3C 0800                  		move.w	#$0800,d6
000206FE 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020700 6100 FA84                  		bsr.w	FindFloor				; MJ: check solidity
00020704 4C9F 000C                  		movem.w (sp)+,d2-d3		
00020708 3F01                       		move.w	d1,-(sp)
0002070A 7000                       		moveq	#0,d0
0002070C 1028 0016                  		move.b	$16(a0),d0
00020710 4880                       		ext.w	d0
00020712 9440                       		sub.w	d0,d2
00020714 0A42 000F                  		eori.w	#$F,d2
00020718 1028 0017                  		move.b	$17(a0),d0
0002071C 4880                       		ext.w	d0
0002071E 9640                       		sub.w	d0,d3
00020720 49F8 F76A                  		lea	($FFFFF76A).w,a4
00020724 367C FFF0                  		movea.w	#-$10,a3
00020728 3C3C 0800                  		move.w	#$0800,d6
0002072C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002072E 6100 FA56                  		bsr.w	FindFloor				; MJ: check solidity
00020732 301F                       		move.w	(sp)+,d0
00020734 143C 0080                  		move.b	#-$80,d2
00020738 6000 FE5E                  		bra.w	loc_14DD0
0002073C                            ; End of function Sonic_DontRunOnWalls
0002073C                            
0002073C                            ; ===========================================================================
0002073C 3428 000C                  		move.w	$C(a0),d2
00020740 3628 0008                  		move.w	8(a0),d3
00020744                            
00020744                            loc_14F7C:
00020744 0442 000A                  		subi.w	#$A,d2
00020748 0A42 000F                  		eori.w	#$F,d2
0002074C 49F8 F768                  		lea	($FFFFF768).w,a4
00020750 367C FFF0                  		movea.w	#-$10,a3
00020754 3C3C 0800                  		move.w	#$0800,d6
00020758 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002075A 6100 FA2A                  		bsr.w	FindFloor				; MJ: check solidity
0002075E 143C 0080                  		move.b	#-$80,d2
00020762 6000 FE6E                  		bra.w	loc_14E0A
00020766                            
00020766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020766                            
00020766                            
00020766                            ObjHitCeiling:
00020766 3428 000C                  		move.w	$C(a0),d2
0002076A 3628 0008                  		move.w	8(a0),d3
0002076E 7000                       		moveq	#0,d0
00020770 1028 0016                  		move.b	$16(a0),d0
00020774 4880                       		ext.w	d0
00020776 9440                       		sub.w	d0,d2
00020778 0A42 000F                  		eori.w	#$F,d2
0002077C 49F8 F768                  		lea	($FFFFF768).w,a4
00020780 367C FFF0                  		movea.w	#-$10,a3
00020784 3C3C 0800                  		move.w	#$0800,d6
00020788 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002078A 6100 F9FA                  		bsr.w	FindFloor				; MJ: check solidity
0002078E 1638 F768                  		move.b	($FFFFF768).w,d3
00020792 0803 0000                  		btst	#0,d3
00020796 6700                       		beq.s	locret_14FD4
00020798 163C 0080                  		move.b	#-$80,d3
0002079C                            
0002079C                            locret_14FD4:
0002079C 4E75                       		rts	
0002079E                            ; End of function ObjHitCeiling
0002079E                            
0002079E                            ; ===========================================================================
0002079E                            
0002079E                            loc_14FD6:				; XREF: sub_14D48
0002079E 3428 000C                  		move.w	$C(a0),d2
000207A2 3628 0008                  		move.w	8(a0),d3
000207A6 48A7 3000                  		movem.w d2-d3,-(sp)
000207AA 7000                       		moveq	#0,d0
000207AC 1028 0017                  		move.b	$17(a0),d0
000207B0 4880                       		ext.w	d0
000207B2 9440                       		sub.w	d0,d2
000207B4 1028 0016                  		move.b	$16(a0),d0
000207B8 4880                       		ext.w	d0
000207BA 9640                       		sub.w	d0,d3
000207BC 0A43 000F                  		eori.w	#$F,d3
000207C0 49F8 F768                  		lea	($FFFFF768).w,a4
000207C4 367C FFF0                  		movea.w	#-$10,a3
000207C8 3C3C 0400                  		move.w	#$400,d6
000207CC 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000207CE 6100 FAFC                  		bsr.w	FindWall				; MJ: check solidity
000207D2 4C9F 000C                  		movem.w (sp)+,d2-d3	
000207D6 3F01                       		move.w	d1,-(sp)
000207D8 7000                       		moveq	#0,d0
000207DA 1028 0017                  		move.b	$17(a0),d0
000207DE 4880                       		ext.w	d0
000207E0 D440                       		add.w	d0,d2
000207E2 1028 0016                  		move.b	$16(a0),d0
000207E6 4880                       		ext.w	d0
000207E8 9640                       		sub.w	d0,d3
000207EA 0A43 000F                  		eori.w	#$F,d3
000207EE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000207F2 367C FFF0                  		movea.w	#-$10,a3
000207F6 3C3C 0400                  		move.w	#$400,d6
000207FA 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
000207FC 6100 FACE                  		bsr.w	FindWall				; MJ: check solidity
00020800 301F                       		move.w	(sp)+,d0
00020802 143C 0040                  		move.b	#$40,d2
00020806 6000 FD90                  		bra.w	loc_14DD0
0002080A                            
0002080A                            ; ---------------------------------------------------------------------------
0002080A                            ; Subroutine to	stop Sonic when	he jumps at a wall
0002080A                            ; ---------------------------------------------------------------------------
0002080A                            
0002080A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002080A                            
0002080A                            
0002080A                            Sonic_HitWall:				; XREF: Sonic_Floor
0002080A 3428 000C                  		move.w	$C(a0),d2
0002080E 3628 0008                  		move.w	8(a0),d3
00020812                            
00020812                            loc_1504A:
00020812 0443 000A                  		subi.w	#$A,d3
00020816 0A43 000F                  		eori.w	#$F,d3
0002081A 49F8 F768                  		lea	($FFFFF768).w,a4
0002081E 367C FFF0                  		movea.w	#-$10,a3
00020822 3C3C 0400                  		move.w	#$400,d6
00020826 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
00020828 6100 FAA2                  		bsr.w	FindWall				; MJ: check solidity
0002082C 143C 0040                  		move.b	#$40,d2
00020830 6000 FDA0                  		bra.w	loc_14E0A
00020834                            ; End of function Sonic_HitWall
00020834                            
00020834                            ; ---------------------------------------------------------------------------
00020834                            ; Subroutine to	detect when an object hits a wall to its left
00020834                            ; ---------------------------------------------------------------------------
00020834                            
00020834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020834                            
00020834                            
00020834                            ObjHitWallLeft:
00020834 D668 0008                  		add.w	8(a0),d3
00020838 3428 000C                  		move.w	$C(a0),d2
0002083C 49F8 F768                  		lea	($FFFFF768).w,a4
00020840 18BC 0000                  		move.b	#0,(a4)
00020844 367C FFF0                  		movea.w	#-$10,a3
00020848 3C3C 0400                  		move.w	#$400,d6
0002084C 7A0D                       		moveq	#$D,d5					; MJ: set solid type to check
0002084E 6100 FA7C                  		bsr.w	FindWall				; MJ: check solidity
00020852 1638 F768                  		move.b	($FFFFF768).w,d3
00020856 0803 0000                  		btst	#0,d3
0002085A 6700                       		beq.s	locret_15098
0002085C 163C 0040                  		move.b	#$40,d3
00020860                            
00020860                            locret_15098:
00020860 4E75                       		rts	
00020862                            ; End of function ObjHitWallLeft
00020862                            
00020862                            ; ===========================================================================
00020862                            ; ---------------------------------------------------------------------------
00020862                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00020862                            ; ---------------------------------------------------------------------------
00020862                            
00020862                            Obj66:					; XREF: Obj_Index
00020862 7000                       		moveq	#0,d0
00020864 1028 0024                  		move.b	routine(a0),d0
00020868 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0002086C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00020870                            ; ===========================================================================
00020870 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00020872 0000                       		dc.w Obj66_Action-Obj66_Index
00020874 0000                       		dc.w Obj66_Display-Obj66_Index
00020876 0000                       		dc.w Obj66_Release-Obj66_Index
00020878                            ; ===========================================================================
00020878                            
00020878                            Obj66_Main:				; XREF: Obj66_Index
00020878 5428 0024                  		addq.b	#2,routine(a0)
0002087C 323C 0001                  		move.w	#1,d1
00020880 2248                       		movea.l	a0,a1
00020882 6000                       		bra.s	Obj66_MakeItem
00020884                            ; ===========================================================================
00020884                            
00020884                            Obj66_Loop:
00020884 4EB9 0001 6708             		jsr	SingleObjLoad
0002088A 6600                       		bne.s	loc_150FE
0002088C 12BC 0066                  		move.b	#$66,0(a1)
00020890 5829 0024                  		addq.b	#4,routine(a1)
00020894 3368 0008 0008             		move.w	8(a0),8(a1)
0002089A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000208A0 337C 0180 0018             		move.w	#$180,priority(a1)
000208A6 137C 0010 001A             		move.b	#$10,mapping_frame(a1)
000208AC                            
000208AC                            Obj66_MakeItem:				; XREF: Obj66_Main
000208AC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000208B4 337C 4348 0002             		move.w	#$4348,2(a1)
000208BA 0029 0004 0001             		ori.b	#4,1(a1)
000208C0 137C 0038 0023             		move.b	#$38,width_pixels(a1)
000208C6                            
000208C6                            loc_150FE:
000208C6 51C9 FFBC                  		dbf	d1,Obj66_Loop
000208CA                            
000208CA 117C 0030 0023             		move.b	#$30,width_pixels(a0)
000208D0 317C 0200 0018             		move.w	#$200,priority(a0)
000208D6 317C 003C 0030             		move.w	#$3C,$30(a0)
000208DC 117C 0001 0034             		move.b	#1,$34(a0)
000208E2 1168 0028 0038             		move.b	subtype(a0),$38(a0)
000208E8                            
000208E8                            Obj66_Action:				; XREF: Obj66_Index
000208E8 4EB9 0000 0000             		jsr	Obj66_ChkSwitch
000208EE 4A28 0001                  		tst.b	1(a0)
000208F2 6A00 0000                  		bpl.w	Obj66_Display
000208F6 323C 0030                  		move.w	#$30,d1
000208FA 3401                       		move.w	d1,d2
000208FC 3602                       		move.w	d2,d3
000208FE 5243                       		addq.w	#1,d3
00020900 3828 0008                  		move.w	8(a0),d4
00020904 4EBA 860C                  		jsr	SolidObject
00020908 0828 0005 0022             		btst	#5,status(a0)
0002090E 6700 0000                  		beq.w	Obj66_Display
00020912 43F8 D000                  		lea	($FFFFD000).w,a1
00020916 720E                       		moveq	#$E,d1
00020918 3029 0008                  		move.w	8(a1),d0
0002091C B068 0008                  		cmp.w	8(a0),d0
00020920 6500                       		bcs.s	Obj66_GrabSonic
00020922 7207                       		moveq	#7,d1
00020924                            
00020924                            Obj66_GrabSonic:
00020924 B228 001A                  		cmp.b	mapping_frame(a0),d1
00020928 6600                       		bne.s	Obj66_Display
0002092A 1141 0032                  		move.b	d1,$32(a0)
0002092E 5828 0024                  		addq.b	#4,routine(a0)
00020932 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00020938 137C 0002 001C             		move.b	#2,anim(a1)	; make Sonic use "rolling" animation
0002093E 337C 0800 0020             		move.w	#$800,collision_flags(a1)
00020944 337C 0000 0010             		move.w	#0,x_vel(a1)
0002094A 337C 0000 0012             		move.w	#0,y_vel(a1)
00020950 08A8 0005 0022             		bclr	#5,status(a0)
00020956 08A9 0005 0022             		bclr	#5,status(a1)
0002095C 08E9 0001 0022             		bset	#1,status(a1)
00020962 3429 0008                  		move.w	8(a1),d2
00020966 3629 000C                  		move.w	$C(a1),d3
0002096A 4EB9 0000 0000             		jsr	Obj66_ChgPos
00020970 D569 0008                  		add.w	d2,8(a1)
00020974 D769 000C                  		add.w	d3,$C(a1)
00020978 E0E9 0008                  		asr	8(a1)
0002097C E0E9 000C                  		asr	$C(a1)
00020980                            
00020980                            Obj66_Display:				; XREF: Obj66_Index
00020980 4EF9 0001 882E             		jmp	MarkObjGone
00020986                            ; ===========================================================================
00020986                            
00020986                            Obj66_Release:				; XREF: Obj66_Index
00020986 1028 001A                  		move.b	mapping_frame(a0),d0
0002098A 0C00 0004                  		cmpi.b	#4,d0
0002098E 6700                       		beq.s	loc_151C8
00020990 0C00 0007                  		cmpi.b	#7,d0
00020994 6600                       		bne.s	loc_151F8
00020996                            
00020996                            loc_151C8:
00020996 B028 0032                  		cmp.b	$32(a0),d0
0002099A 6700                       		beq.s	loc_151F8
0002099C 43F8 D000                  		lea	($FFFFD000).w,a1
000209A0 337C 0000 0010             		move.w	#0,x_vel(a1)
000209A6 337C 0800 0012             		move.w	#$800,y_vel(a1)
000209AC 0C00 0004                  		cmpi.b	#4,d0
000209B0 6700                       		beq.s	loc_151F0
000209B2 337C 0800 0010             		move.w	#$800,x_vel(a1)
000209B8 337C 0800 0012             		move.w	#$800,y_vel(a1)
000209BE                            
000209BE                            loc_151F0:
000209BE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000209C2 5928 0024                  		subq.b	#4,routine(a0)
000209C6                            
000209C6                            loc_151F8:
000209C6 6100                       		bsr.s	Obj66_ChkSwitch
000209C8 6100                       		bsr.s	Obj66_ChgPos
000209CA 4EF9 0001 882E             		jmp	MarkObjGone
000209D0                            
000209D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000209D0                            
000209D0                            
000209D0                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000209D0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000209D4 7000                       		moveq	#0,d0
000209D6 1028 0038                  		move.b	$38(a0),d0
000209DA 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000209E0 6700                       		beq.s	loc_15224	; if not, branch
000209E2 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000209E6 6600                       		bne.s	Obj66_Animate	; if yes, branch
000209E8 4428 0034                  		neg.b	$34(a0)
000209EC 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000209F2 6000                       		bra.s	Obj66_Animate
000209F4                            ; ===========================================================================
000209F4                            
000209F4                            loc_15224:
000209F4 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000209F8                            
000209F8                            Obj66_Animate:
000209F8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000209FC 6A00                       		bpl.s	locret_15246
000209FE 117C 0007 001E             		move.b	#7,anim_frame_duration(a0)
00020A04 1228 0034                  		move.b	$34(a0),d1
00020A08 1028 001A                  		move.b	mapping_frame(a0),d0
00020A0C D001                       		add.b	d1,d0
00020A0E 0200 000F                  		andi.b	#$F,d0
00020A12 1140 001A                  		move.b	d0,mapping_frame(a0)
00020A16                            
00020A16                            locret_15246:
00020A16 4E75                       		rts	
00020A18                            ; End of function Obj66_ChkSwitch
00020A18                            
00020A18                            
00020A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020A18                            
00020A18                            
00020A18                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00020A18 43F8 D000                  		lea	($FFFFD000).w,a1
00020A1C 7000                       		moveq	#0,d0
00020A1E 1028 001A                  		move.b	mapping_frame(a0),d0
00020A22 D040                       		add.w	d0,d0
00020A24 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00020A28 101A                       		move.b	(a2)+,d0
00020A2A 4880                       		ext.w	d0
00020A2C D068 0008                  		add.w	8(a0),d0
00020A30 3340 0008                  		move.w	d0,8(a1)
00020A34 101A                       		move.b	(a2)+,d0
00020A36 4880                       		ext.w	d0
00020A38 D068 000C                  		add.w	$C(a0),d0
00020A3C 3340 000C                  		move.w	d0,$C(a1)
00020A40 4E75                       		rts	
00020A42                            ; End of function Obj66_ChgPos
00020A42                            
00020A42                            ; ===========================================================================
00020A42 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00020A46 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00020A4A 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00020A4E 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00020A52 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00020A56 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00020A5A 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00020A5E E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00020A62                            ; ---------------------------------------------------------------------------
00020A62                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00020A62                            ; ---------------------------------------------------------------------------
00020A62                            Map_obj66:
00020A62                            	include "_maps\obj66.asm"
00020A62                            ; ---------------------------------------------------------------------------
00020A62                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00020A62                            ; ---------------------------------------------------------------------------
00020A62 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00020A66 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00020A6A 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00020A6E 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00020A72 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00020A76 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00020A7A 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00020A7E 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00020A82 0000                       		dc.w byte_154A4-Map_obj66
00020A84 06                         byte_152B4:	dc.b 6
00020A85 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00020A8A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00020A8F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00020A94 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00020A99 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00020A9E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00020AA3 06                         byte_152D3:	dc.b 6
00020AA4 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00020AA9 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00020AAE F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00020AB3 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00020AB8 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00020ABD 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00020AC2 06                         byte_152F2:	dc.b 6
00020AC3 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00020AC8 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00020ACD 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00020AD2 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00020AD7 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00020ADC 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00020AE1 06                         byte_15311:	dc.b 6
00020AE2 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00020AE7 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00020AEC 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00020AF1 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00020AF6 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00020AFB 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00020B00 06                         byte_15330:	dc.b 6
00020B01 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00020B06 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00020B0B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00020B10 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00020B15 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00020B1A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00020B1F 06                         byte_1534F:	dc.b 6
00020B20 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00020B25 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00020B2A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00020B2F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00020B34 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00020B39 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00020B3E 06                         byte_1536E:	dc.b 6
00020B3F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00020B44 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00020B49 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00020B4E 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00020B53 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00020B58 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00020B5D 06                         byte_1538D:	dc.b 6
00020B5E 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00020B63 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00020B68 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00020B6D F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00020B72 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00020B77 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00020B7C 06                         byte_153AC:	dc.b 6
00020B7D E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00020B82 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00020B87 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00020B8C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00020B91 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00020B96 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00020B9B 06                         byte_153CB:	dc.b 6
00020B9C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00020BA1 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00020BA6 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00020BAB DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00020BB0 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00020BB5 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00020BBA 06                         byte_153EA:	dc.b 6
00020BBB D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00020BC0 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00020BC5 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00020BCA D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00020BCF E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00020BD4 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00020BD9 06                         byte_15409:	dc.b 6
00020BDA D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00020BDF D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00020BE4 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00020BE9 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00020BEE E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00020BF3 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00020BF8 06                         byte_15428:	dc.b 6
00020BF9 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00020BFE D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00020C03 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00020C08 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00020C0D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00020C12 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00020C17 06                         byte_15447:	dc.b 6
00020C18 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00020C1D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00020C22 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00020C27 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00020C2C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00020C31 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00020C36 06                         byte_15466:	dc.b 6
00020C37 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00020C3C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00020C41 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00020C46 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00020C4B E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00020C50 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00020C55 06                         byte_15485:	dc.b 6
00020C56 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00020C5B D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00020C60 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00020C65 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00020C6A F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00020C6F F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00020C74 0C                         byte_154A4:	dc.b $C
00020C75 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00020C7A D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00020C7F E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00020C84 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00020C89 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00020C8E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00020C93 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00020C98 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00020C9D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00020CA2 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00020CA7 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00020CAC 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00020CB2 00                         		even
00020CB2 00                         		even
00020CB2                            
00020CB2                            ; ===========================================================================
00020CB2                            ; ---------------------------------------------------------------------------
00020CB2                            ; Object 67 - disc that	you run	around (SBZ)
00020CB2                            ; ---------------------------------------------------------------------------
00020CB2                            
00020CB2                            Obj67:					; XREF: Obj_Index
00020CB2 7000                       		moveq	#0,d0
00020CB4 1028 0024                  		move.b	routine(a0),d0
00020CB8 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00020CBC 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00020CC0                            ; ===========================================================================
00020CC0 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00020CC2 0000                       		dc.w Obj67_Action-Obj67_Index
00020CC4                            ; ===========================================================================
00020CC4                            
00020CC4                            Obj67_Main:				; XREF: Obj67_Index
00020CC4 5428 0024                  		addq.b	#2,routine(a0)
00020CC8 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00020CD0 317C C344 0002             		move.w	#$C344,2(a0)
00020CD6 117C 0004 0001             		move.b	#4,1(a0)
00020CDC 317C 0200 0018             		move.w	#$200,priority(a0)
00020CE2 117C 0008 0023             		move.b	#8,width_pixels(a0)
00020CE8 3168 0008 0032             		move.w	8(a0),$32(a0)
00020CEE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00020CF4 117C 0018 0034             		move.b	#$18,$34(a0)
00020CFA 117C 0048 0038             		move.b	#$48,$38(a0)
00020D00 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020D04 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00020D08 6700                       		beq.s	loc_15546
00020D0A 117C 0010 0034             		move.b	#$10,$34(a0)
00020D10 117C 0038 0038             		move.b	#$38,$38(a0)
00020D16                            
00020D16                            loc_15546:
00020D16 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020D1A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00020D1E 4881                       		ext.w	d1
00020D20 E741                       		asl.w	#3,d1
00020D22 3141 0036                  		move.w	d1,$36(a0)
00020D26 1028 0022                  		move.b	status(a0),d0
00020D2A E418                       		ror.b	#2,d0
00020D2C 0200 00C0                  		andi.b	#-$40,d0
00020D30 1140 0026                  		move.b	d0,$26(a0)
00020D34                            
00020D34                            Obj67_Action:				; XREF: Obj67_Index
00020D34 4EB9 0000 0000             		jsr	Obj67_MoveSonic
00020D3A 4EB9 0000 0000             		jsr	Obj67_MoveSpot
00020D40 6000 0000                  		bra.w	Obj67_ChkDel
00020D44                            ; ===========================================================================
00020D44                            
00020D44                            Obj67_MoveSonic:			; XREF: Obj67_Action
00020D44 7400                       		moveq	#0,d2
00020D46 1428 0038                  		move.b	$38(a0),d2
00020D4A 3602                       		move.w	d2,d3
00020D4C D643                       		add.w	d3,d3
00020D4E 43F8 D000                  		lea	($FFFFD000).w,a1
00020D52 3029 0008                  		move.w	8(a1),d0
00020D56 9068 0032                  		sub.w	$32(a0),d0
00020D5A D042                       		add.w	d2,d0
00020D5C B043                       		cmp.w	d3,d0
00020D5E 6400                       		bcc.s	loc_155A8
00020D60 3229 000C                  		move.w	$C(a1),d1
00020D64 9268 0030                  		sub.w	$30(a0),d1
00020D68 D242                       		add.w	d2,d1
00020D6A B243                       		cmp.w	d3,d1
00020D6C 6400                       		bcc.s	loc_155A8
00020D6E 0829 0001 0022             		btst	#1,status(a1)
00020D74 6700                       		beq.s	loc_155B8
00020D76 4228 003A                  		clr.b	$3A(a0)
00020D7A 4E75                       		rts	
00020D7C                            ; ===========================================================================
00020D7C                            
00020D7C                            loc_155A8:
00020D7C 4A28 003A                  		tst.b	$3A(a0)
00020D80 6700                       		beq.s	locret_155B6
00020D82 4229 0038                  		clr.b	$38(a1)
00020D86 4228 003A                  		clr.b	$3A(a0)
00020D8A                            
00020D8A                            locret_155B6:
00020D8A 4E75                       		rts	
00020D8C                            ; ===========================================================================
00020D8C                            
00020D8C                            loc_155B8:
00020D8C 4A28 003A                  		tst.b	$3A(a0)
00020D90 6600                       		bne.s	loc_155E2
00020D92 117C 0001 003A             		move.b	#1,$3A(a0)
00020D98 0829 0002 0022             		btst	#2,status(a1)
00020D9E 6600                       		bne.s	loc_155D0
00020DA0 4229 001C                  		clr.b	anim(a1)
00020DA4                            
00020DA4                            loc_155D0:
00020DA4 08A9 0005 0022             		bclr	#5,status(a1)
00020DAA 137C 0001 001D             		move.b	#1,next_anim(a1)
00020DB0 137C 0001 0038             		move.b	#1,$38(a1)
00020DB6                            
00020DB6                            loc_155E2:
00020DB6 3029 0020                  		move.w	inertia(a1),d0
00020DBA 4A68 0036                  		tst.w	$36(a0)
00020DBE 6A00                       		bpl.s	loc_15608
00020DC0 0C40 FC00                  		cmpi.w	#-$400,d0
00020DC4 6F00                       		ble.s	loc_155FA
00020DC6 337C FC00 0020             		move.w	#-$400,inertia(a1)
00020DCC 4E75                       		rts	
00020DCE                            ; ===========================================================================
00020DCE                            
00020DCE                            loc_155FA:
00020DCE 0C40 F100                  		cmpi.w	#-$F00,d0
00020DD2 6C00                       		bge.s	locret_15606
00020DD4 337C F100 0020             		move.w	#-$F00,inertia(a1)
00020DDA                            
00020DDA                            locret_15606:
00020DDA 4E75                       		rts	
00020DDC                            ; ===========================================================================
00020DDC                            
00020DDC                            loc_15608:
00020DDC 0C40 0400                  		cmpi.w	#$400,d0
00020DE0 6C00                       		bge.s	loc_15616
00020DE2 337C 0400 0020             		move.w	#$400,inertia(a1)
00020DE8 4E75                       		rts	
00020DEA                            ; ===========================================================================
00020DEA                            
00020DEA                            loc_15616:
00020DEA 0C40 0F00                  		cmpi.w	#$F00,d0
00020DEE 6F00                       		ble.s	locret_15622
00020DF0 337C 0F00 0020             		move.w	#$F00,inertia(a1)
00020DF6                            
00020DF6                            locret_15622:
00020DF6 4E75                       		rts	
00020DF8                            ; ===========================================================================
00020DF8                            
00020DF8                            Obj67_MoveSpot:				; XREF: Obj67_Action
00020DF8 3028 0036                  		move.w	$36(a0),d0
00020DFC D168 0026                  		add.w	d0,$26(a0)
00020E00 1028 0026                  		move.b	$26(a0),d0
00020E04 4EB9 0000 8DA4             		jsr	(CalcSine).l
00020E0A 3428 0030                  		move.w	$30(a0),d2
00020E0E 3628 0032                  		move.w	$32(a0),d3
00020E12 7800                       		moveq	#0,d4
00020E14 1828 0034                  		move.b	$34(a0),d4
00020E18 E14C                       		lsl.w	#8,d4
00020E1A 2A04                       		move.l	d4,d5
00020E1C C9C0                       		muls.w	d0,d4
00020E1E 4844                       		swap	d4
00020E20 CBC1                       		muls.w	d1,d5
00020E22 4845                       		swap	d5
00020E24 D842                       		add.w	d2,d4
00020E26 DA43                       		add.w	d3,d5
00020E28 3144 000C                  		move.w	d4,$C(a0)
00020E2C 3145 0008                  		move.w	d5,8(a0)
00020E30 4E75                       		rts	
00020E32                            ; ===========================================================================
00020E32                            
00020E32                            Obj67_ChkDel:				; XREF: Obj67_Action
00020E32 3028 0032                  		move.w	$32(a0),d0
00020E36 0240 FF80                  		andi.w	#-$80,d0
00020E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00020E3E 0441 0080                  		subi.w	#$80,d1
00020E42 0241 FF80                  		andi.w	#-$80,d1
00020E46 9041                       		sub.w	d1,d0
00020E48 0C40 0280                  		cmpi.w	#$280,d0
00020E4C 6200                       		bhi.s	Obj67_Delete
00020E4E 4EF9 0001 5C3C             		jmp	DisplaySprite
00020E54                            ; ===========================================================================
00020E54                            
00020E54                            Obj67_Delete:
00020E54 4EF9 0001 5BF0             		jmp	DeleteObject
00020E5A                            ; ===========================================================================
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A                            ; Sprite mappings - disc that you run around (SBZ)
00020E5A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00020E5A                            ; part of the level tiles.)
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A                            Map_obj67:
00020E5A                            	include "_maps\obj67.asm"
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A                            ; Sprite mappings - disc that you run around (SBZ)
00020E5A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00020E5A                            ; part of the level tiles.)
00020E5A                            ; ---------------------------------------------------------------------------
00020E5A 0000                       		dc.w byte_15688-Map_obj67
00020E5C 01                         byte_15688:	dc.b 1
00020E5D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00020E62                            		even
00020E62                            		even
00020E62                            
00020E62                            ; ===========================================================================
00020E62                            ; ---------------------------------------------------------------------------
00020E62                            ; Object 68 - conveyor belts (SBZ)
00020E62                            ; ---------------------------------------------------------------------------
00020E62                            
00020E62                            Obj68:					; XREF: Obj_Index
00020E62 7000                       		moveq	#0,d0
00020E64 1028 0024                  		move.b	routine(a0),d0
00020E68 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00020E6C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00020E70                            ; ===========================================================================
00020E70 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00020E72 0000                       		dc.w Obj68_Action-Obj68_Index
00020E74                            ; ===========================================================================
00020E74                            
00020E74                            Obj68_Main:				; XREF: Obj68_Index
00020E74 5428 0024                  		addq.b	#2,routine(a0)
00020E78 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00020E7E 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020E82 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00020E86 6700                       		beq.s	loc_156BA	; if zero, branch
00020E88 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00020E8E                            
00020E8E                            loc_156BA:
00020E8E 1228 0028                  		move.b	subtype(a0),d1	; get object type
00020E92 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00020E96 4881                       		ext.w	d1
00020E98 E841                       		asr.w	#4,d1
00020E9A 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00020E9E                            
00020E9E                            Obj68_Action:				; XREF: Obj68_Index
00020E9E 6100                       		bsr.s	Obj68_MoveSonic
00020EA0 4EF9 0001 8B6E             		jmp		MarkObjGone3
00020EA6                            ; ===========================================================================
00020EA6                            
00020EA6                            Obj68_MoveSonic:			; XREF: Obj68_Action
00020EA6 7400                       		moveq	#0,d2
00020EA8 1428 0038                  		move.b	$38(a0),d2
00020EAC 3602                       		move.w	d2,d3
00020EAE D643                       		add.w	d3,d3
00020EB0 43F8 D000                  		lea	($FFFFD000).w,a1
00020EB4 3029 0008                  		move.w	8(a1),d0
00020EB8 9068 0008                  		sub.w	8(a0),d0
00020EBC D042                       		add.w	d2,d0
00020EBE B043                       		cmp.w	d3,d0
00020EC0 6400                       		bcc.s	locret_1572E
00020EC2 3229 000C                  		move.w	$C(a1),d1
00020EC6 9268 000C                  		sub.w	$C(a0),d1
00020ECA 0641 0030                  		addi.w	#$30,d1
00020ECE 0C41 0030                  		cmpi.w	#$30,d1
00020ED2 6400                       		bcc.s	locret_1572E
00020ED4 0829 0001 0022             		btst	#1,status(a1)
00020EDA 6600                       		bne.s	locret_1572E
00020EDC 3028 0036                  		move.w	$36(a0),d0
00020EE0 D169 0008                  		add.w	d0,8(a1)
00020EE4                            
00020EE4                            locret_1572E:
00020EE4 4E75                       		rts	
00020EE6                            
00020EE6                            ; ===========================================================================
00020EE6                            ; ---------------------------------------------------------------------------
00020EE6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00020EE6                            ; ---------------------------------------------------------------------------
00020EE6                            
00020EE6                            Obj69:					; XREF: Obj_Index
00020EE6 7000                       		moveq	#0,d0
00020EE8 1028 0024                  		move.b	routine(a0),d0
00020EEC 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00020EF0 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00020EF4                            ; ===========================================================================
00020EF4 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00020EF6 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00020EF8 0000                       		dc.w Obj69_Spinner-Obj69_Index
00020EFA                            ; ===========================================================================
00020EFA                            
00020EFA                            Obj69_Main:				; XREF: Obj69_Index
00020EFA 5428 0024                  		addq.b	#2,routine(a0)
00020EFE 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00020F06 317C 4492 0002             		move.w	#$4492,2(a0)
00020F0C 0028 0004 0001             		ori.b	#4,1(a0)
00020F12 117C 0080 0023             		move.b	#$80,width_pixels(a0)
00020F18 7000                       		moveq	#0,d0
00020F1A 1028 0028                  		move.b	subtype(a0),d0
00020F1E 0240 000F                  		andi.w	#$F,d0
00020F22 C0FC 003C                  		mulu.w	#$3C,d0
00020F26 3140 0032                  		move.w	d0,$32(a0)
00020F2A 4A28 0028                  		tst.b	subtype(a0)
00020F2E 6A00                       		bpl.s	Obj69_Trapdoor
00020F30 5428 0024                  		addq.b	#2,routine(a0)
00020F34 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00020F3C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00020F42 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00020F48 117C 0002 001C             		move.b	#2,anim(a0)
00020F4E 7000                       		moveq	#0,d0
00020F50 1028 0028                  		move.b	subtype(a0),d0	; get object type
00020F54 3200                       		move.w	d0,d1
00020F56 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00020F5A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00020F5E 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00020F62 3140 0032                  		move.w	d0,$32(a0)
00020F66 0241 0070                  		andi.w	#$70,d1
00020F6A 0641 0010                  		addi.w	#$10,d1
00020F6E E549                       		lsl.w	#2,d1
00020F70 5341                       		subq.w	#1,d1
00020F72 3141 0036                  		move.w	d1,$36(a0)
00020F76 6000                       		bra.s	Obj69_Spinner
00020F78                            ; ===========================================================================
00020F78                            
00020F78                            Obj69_Trapdoor:				; XREF: Obj69_Index
00020F78 5368 0030                  		subq.w	#1,$30(a0)
00020F7C 6A00                       		bpl.s	Obj69_Animate
00020F7E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00020F84 0868 0000 001C             		bchg	#0,anim(a0)
00020F8A 4A28 0001                  		tst.b	1(a0)
00020F8E 6A00                       		bpl.s	Obj69_Animate
00020F90 303C 00BB                  		move.w	#$BB,d0
00020F94 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play door sound
00020F9A                            
00020F9A                            Obj69_Animate:
00020F9A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00020FA0 4EB9 0001 2618             		jsr	AnimateSprite
00020FA6 4A28 001A                  		tst.b	mapping_frame(a0)		; is frame number 0 displayed?
00020FAA 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00020FAC 323C 004B                  		move.w	#$4B,d1
00020FB0 343C 000C                  		move.w	#$C,d2
00020FB4 3602                       		move.w	d2,d3
00020FB6 5243                       		addq.w	#1,d3
00020FB8 3828 0008                  		move.w	8(a0),d4
00020FBC 4EB9 0001 8F12             		jsr	SolidObject
00020FC2 4EF9 0001 882E             		jmp	MarkObjGone
00020FC8                            ; ===========================================================================
00020FC8                            
00020FC8                            Obj69_NotSolid:
00020FC8 0828 0003 0022             		btst	#3,status(a0)
00020FCE 6700                       		beq.s	Obj69_Display
00020FD0 43F8 D000                  		lea	($FFFFD000).w,a1
00020FD4 08A9 0003 0022             		bclr	#3,status(a1)
00020FDA 08A8 0003 0022             		bclr	#3,status(a0)
00020FE0 4228 0025                  		clr.b	routine_secondary(a0)
00020FE4                            
00020FE4                            Obj69_Display:
00020FE4 4EF9 0001 882E             		jmp	MarkObjGone
00020FEA                            ; ===========================================================================
00020FEA                            
00020FEA                            Obj69_Spinner:				; XREF: Obj69_Index
00020FEA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00020FEE C068 0036                  		and.w	$36(a0),d0
00020FF2 6600                       		bne.s	Obj69_Delay
00020FF4 117C 0001 0034             		move.b	#1,$34(a0)
00020FFA                            
00020FFA                            Obj69_Delay:
00020FFA 4A28 0034                  		tst.b	$34(a0)
00020FFE 6700                       		beq.s	Obj69_Animate2
00021000 5368 0030                  		subq.w	#1,$30(a0)
00021004 6A00                       		bpl.s	Obj69_Animate2
00021006 3168 0032 0030             		move.w	$32(a0),$30(a0)
0002100C 4228 0034                  		clr.b	$34(a0)
00021010 0868 0000 001C             		bchg	#0,anim(a0)
00021016                            
00021016                            Obj69_Animate2:
00021016 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0002101C 4EB9 0001 2618             		jsr	AnimateSprite
00021022 4A28 001A                  		tst.b	mapping_frame(a0)		; check	if frame number	0 is displayed
00021026 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00021028 323C 001B                  		move.w	#$1B,d1
0002102C 343C 0007                  		move.w	#7,d2
00021030 3602                       		move.w	d2,d3
00021032 5243                       		addq.w	#1,d3
00021034 3828 0008                  		move.w	8(a0),d4
00021038 4EB9 0001 8F12             		jsr	SolidObject
0002103E 4EF9 0001 882E             		jmp	MarkObjGone
00021044                            ; ===========================================================================
00021044                            
00021044                            Obj69_NotSolid2:
00021044 0828 0003 0022             		btst	#3,status(a0)
0002104A 6700                       		beq.s	Obj69_Display2
0002104C 43F8 D000                  		lea	($FFFFD000).w,a1
00021050 08A9 0003 0022             		bclr	#3,status(a1)
00021056 08A8 0003 0022             		bclr	#3,status(a0)
0002105C 4228 0025                  		clr.b	routine_secondary(a0)
00021060                            
00021060                            Obj69_Display2:
00021060 4EF9 0001 882E             		jmp	MarkObjGone
00021066                            ; ===========================================================================
00021066                            Ani_obj69:
00021066                            	include "_anim\obj69.asm"
00021066                            ; ---------------------------------------------------------------------------
00021066                            ; Animation script - trapdoor (SBZ)
00021066                            ; ---------------------------------------------------------------------------
00021066 0000                       		dc.w byte_158AC-Ani_obj69
00021068 0000                       		dc.w byte_158B2-Ani_obj69
0002106A 0000                       		dc.w byte_158B8-Ani_obj69
0002106C 0000                       		dc.w byte_158CC-Ani_obj69
0002106E 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00021074 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0002107A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00021087 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0002108E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0002109B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000210A2                            		even
000210A2                            		even
000210A2                            
000210A2                            ; ---------------------------------------------------------------------------
000210A2                            ; Sprite mappings - trapdoor (SBZ)
000210A2                            ; ---------------------------------------------------------------------------
000210A2                            Map_obj69:
000210A2                            	include "_maps\obj69.asm"
000210A2                            ; ---------------------------------------------------------------------------
000210A2                            ; Sprite mappings - trapdoor (SBZ)
000210A2                            ; ---------------------------------------------------------------------------
000210A2 0000                       		dc.w byte_158E6-Map_obj69
000210A4 0000                       		dc.w byte_158FB-Map_obj69
000210A6 0000                       		dc.w byte_15924-Map_obj69
000210A8 04                         byte_158E6:	dc.b 4
000210A9 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000210AE F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000210B3 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000210B8 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000210BD 08                         byte_158FB:	dc.b 8
000210BE F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000210C3 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000210C8 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000210CD 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000210D2 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000210D7 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000210DC 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000210E1 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000210E6 04                         byte_15924:	dc.b 4
000210E7 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000210EC 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000210F1 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000210F6 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000210FC 00                         		even
000210FC 00                         		even
000210FC                            
000210FC                            ; ---------------------------------------------------------------------------
000210FC                            ; Sprite mappings - spinning platforms (SBZ)
000210FC                            ; ---------------------------------------------------------------------------
000210FC                            Map_obj69a:
000210FC                            	include "_maps\obj69a.asm"
000210FC                            ; ---------------------------------------------------------------------------
000210FC                            ; Sprite mappings - spinning platforms (SBZ)
000210FC                            ; ---------------------------------------------------------------------------
000210FC 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00021100 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00021104 0000                       		dc.w byte_15970-Map_obj69a
00021106 02                         byte_15944:	dc.b 2
00021107 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0002110C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00021111 02                         byte_1594F:	dc.b 2
00021112 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00021117 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0002111C 02                         byte_1595A:	dc.b 2
0002111D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00021122 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00021127 02                         byte_15965:	dc.b 2
00021128 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0002112D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00021132 02                         byte_15970:	dc.b 2
00021133 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00021138 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0002113E 00                         		even
0002113E 00                         		even
0002113E                            
0002113E                            ; ===========================================================================
0002113E                            ; ---------------------------------------------------------------------------
0002113E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0002113E                            ; ---------------------------------------------------------------------------
0002113E                            
0002113E                            Obj6A:					; XREF: Obj_Index
0002113E 7000                       		moveq	#0,d0
00021140 1028 0024                  		move.b	routine(a0),d0
00021144 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00021148 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0002114C                            ; ===========================================================================
0002114C 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0002114E 0000                       		dc.w Obj6A_Action-Obj6A_Index
00021150                            ; ===========================================================================
00021150                            
00021150                            Obj6A_Main:				; XREF: Obj6A_Index
00021150 5428 0024                  		addq.b	#2,routine(a0)
00021154 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0002115C 317C 43B5 0002             		move.w	#$43B5,2(a0)
00021162 117C 0004 0001             		move.b	#4,1(a0)
00021168 317C 0200 0018             		move.w	#$200,priority(a0)
0002116E 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00021174 3168 0008 003A             		move.w	8(a0),$3A(a0)
0002117A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00021180 0C28 0003 0028             		cmpi.b	#3,subtype(a0)
00021186 6400                       		bcc.s	Obj6A_Action
00021188 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
0002118E                            
0002118E                            Obj6A_Action:				; XREF: Obj6A_Index
0002118E 7000                       		moveq	#0,d0
00021190 1028 0028                  		move.b	subtype(a0),d0
00021194 0240 0007                  		andi.w	#7,d0
00021198 D040                       		add.w	d0,d0
0002119A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0002119E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000211A2 3028 003A                  		move.w	$3A(a0),d0
000211A6 4EF9 0001 8864             		jmp		MarkObjGone2
000211AC                            ; ===========================================================================
000211AC 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000211B0 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000211B4 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000211B6                            ; ===========================================================================
000211B6                            
000211B6                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000211B6 4E75                       		rts	
000211B8                            ; ===========================================================================
000211B8                            
000211B8                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000211B8 323C 0060                  		move.w	#$60,d1
000211BC 7000                       		moveq	#0,d0
000211BE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000211C2 0828 0000 0022             		btst	#0,status(a0)
000211C8 6700                       		beq.s	Obj6A_Animate01
000211CA 4440                       		neg.w	d0
000211CC D041                       		add.w	d1,d0
000211CE                            
000211CE                            Obj6A_Animate01:
000211CE 3228 003A                  		move.w	$3A(a0),d1
000211D2 9240                       		sub.w	d0,d1
000211D4 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000211D8 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000211DC 6A00                       		bpl.s	loc_15A46
000211DE 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)	; time between frame changes
000211E4 0868 0000 001A             		bchg	#0,mapping_frame(a0)	; change frame
000211EA                            
000211EA                            loc_15A46:
000211EA 4A28 0001                  		tst.b	1(a0)
000211EE 6A00                       		bpl.s	locret_15A60
000211F0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000211F4 0240 000F                  		andi.w	#$F,d0
000211F8 6600                       		bne.s	locret_15A60
000211FA 303C 00B0                  		move.w	#$B0,d0
000211FE 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021204                            
00021204                            locret_15A60:
00021204 4E75                       		rts	
00021206                            ; ===========================================================================
00021206                            
00021206                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00021206 323C 0030                  		move.w	#$30,d1
0002120A 7000                       		moveq	#0,d0
0002120C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00021210 0828 0000 0022             		btst	#0,status(a0)
00021216 6700                       		beq.s	Obj6A_Animate02
00021218 4440                       		neg.w	d0
0002121A 0640 0080                  		addi.w	#$80,d0
0002121E                            
0002121E                            Obj6A_Animate02:
0002121E 3228 0038                  		move.w	$38(a0),d1
00021222 9240                       		sub.w	d0,d1
00021224 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00021228 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0002122C 6A00                       		bpl.s	loc_15A96
0002122E 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
00021234 0868 0000 001A             		bchg	#0,mapping_frame(a0)
0002123A                            
0002123A                            loc_15A96:
0002123A 4A28 0001                  		tst.b	1(a0)
0002123E 6A00                       		bpl.s	locret_15AB0
00021240 1038 FE64                  		move.b	($FFFFFE64).w,d0
00021244 0C00 0018                  		cmpi.b	#$18,d0
00021248 6600                       		bne.s	locret_15AB0
0002124A 303C 00B0                  		move.w	#$B0,d0
0002124E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021254                            
00021254                            locret_15AB0:
00021254 4E75                       		rts	
00021256                            ; ===========================================================================
00021256                            
00021256                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00021256 4A28 003D                  		tst.b	$3D(a0)
0002125A 6600                       		bne.s	Obj6A_Animate03
0002125C 3038 D008                  		move.w	($FFFFD008).w,d0
00021260 0440 00C0                  		subi.w	#$C0,d0
00021264 6500                       		bcs.s	loc_15B02
00021266 9068 0008                  		sub.w	8(a0),d0
0002126A 6500                       		bcs.s	loc_15B02
0002126C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00021270 0440 0080                  		subi.w	#$80,d0
00021274 B068 000C                  		cmp.w	$C(a0),d0
00021278 6400                       		bcc.s	locret_15B04
0002127A 0640 0100                  		addi.w	#$100,d0
0002127E B068 000C                  		cmp.w	$C(a0),d0
00021282 6500                       		bcs.s	locret_15B04
00021284 117C 0001 003D             		move.b	#1,$3D(a0)
0002128A 317C 0600 0010             		move.w	#$600,x_vel(a0)	; move object to the right
00021290 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
00021296 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0002129C 303C 00B0                  		move.w	#$B0,d0
000212A0 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
000212A6                            
000212A6                            loc_15B02:
000212A6 588F                       		addq.l	#4,sp
000212A8                            
000212A8                            locret_15B04:
000212A8 4E75                       		rts	
000212AA                            ; ===========================================================================
000212AA                            
000212AA                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000212AA 4EB9 0001 5BD6             		jsr	SpeedToPos
000212B0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000212B6 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
000212BA 6A00                       		bpl.s	locret_15B24
000212BC 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
000212C2 0868 0000 001A             		bchg	#0,mapping_frame(a0)
000212C8                            
000212C8                            locret_15B24:
000212C8 4E75                       		rts	
000212CA                            ; ===========================================================================
000212CA                            
000212CA                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000212CA 4A28 003D                  		tst.b	$3D(a0)
000212CE 6600                       		bne.s	Obj6A_Animate04
000212D0 3038 D008                  		move.w	($FFFFD008).w,d0
000212D4 0640 00E0                  		addi.w	#$E0,d0
000212D8 9068 0008                  		sub.w	8(a0),d0
000212DC 6400                       		bcc.s	loc_15B74
000212DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000212E2 0440 0080                  		subi.w	#$80,d0
000212E6 B068 000C                  		cmp.w	$C(a0),d0
000212EA 6400                       		bcc.s	locret_15B76
000212EC 0640 0100                  		addi.w	#$100,d0
000212F0 B068 000C                  		cmp.w	$C(a0),d0
000212F4 6500                       		bcs.s	locret_15B76
000212F6 117C 0001 003D             		move.b	#1,$3D(a0)
000212FC 317C FA00 0010             		move.w	#-$600,x_vel(a0)	; move object to the left
00021302 117C 00A2 0020             		move.b	#$A2,collision_flags(a0)
00021308 117C 0002 001A             		move.b	#2,mapping_frame(a0)
0002130E 303C 00B0                  		move.w	#$B0,d0
00021312 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play saw sound
00021318                            
00021318                            loc_15B74:
00021318 588F                       		addq.l	#4,sp
0002131A                            
0002131A                            locret_15B76:
0002131A 4E75                       		rts	
0002131C                            ; ===========================================================================
0002131C                            
0002131C                            Obj6A_Animate04:
0002131C 4EB9 0001 5BD6             		jsr	SpeedToPos
00021322 3168 0008 003A             		move.w	8(a0),$3A(a0)
00021328 5328 001E                  		subq.b	#1,anim_frame_duration(a0)
0002132C 6A00                       		bpl.s	locret_15B96
0002132E 117C 0002 001E             		move.b	#2,anim_frame_duration(a0)
00021334 0868 0000 001A             		bchg	#0,mapping_frame(a0)
0002133A                            
0002133A                            locret_15B96:
0002133A 4E75                       		rts	
0002133C                            ; ===========================================================================
0002133C                            ; ---------------------------------------------------------------------------
0002133C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0002133C                            ; ---------------------------------------------------------------------------
0002133C                            Map_obj6A:
0002133C                            	include "_maps\obj6A.asm"
0002133C                            ; ---------------------------------------------------------------------------
0002133C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0002133C                            ; ---------------------------------------------------------------------------
0002133C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00021340 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00021344 07                         byte_15BA0:	dc.b 7
00021345 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0002134A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0002134F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00021354 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00021359 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0002135E 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00021363 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00021368 07                         byte_15BC4:	dc.b 7
00021369 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0002136E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00021373 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00021378 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0002137D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00021382 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00021387 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0002138C 04                         byte_15BE8:	dc.b 4
0002138D E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00021392 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00021397 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0002139C 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000213A1 04                         byte_15BFD:	dc.b 4
000213A2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000213A7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000213AC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000213B1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000213B6                            		even
000213B6                            		even
000213B6                            
000213B6                            ; ===========================================================================
000213B6                            ; ---------------------------------------------------------------------------
000213B6                            ; Object 6B - stomper (SBZ)
000213B6                            ; ---------------------------------------------------------------------------
000213B6                            
000213B6                            Obj6B:					; XREF: Obj_Index
000213B6 7000                       		moveq	#0,d0
000213B8 1028 0024                  		move.b	routine(a0),d0
000213BC 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000213C0 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000213C4                            ; ===========================================================================
000213C4 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000213C6 0000                       		dc.w Obj6B_Action-Obj6B_Index
000213C8                            
000213C8 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000213CC 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000213D0 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000213D4 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000213D8 8040 0005                  		dc.b  $80, $40,	  0,   5
000213DC                            ; ===========================================================================
000213DC                            
000213DC                            Obj6B_Main:				; XREF: Obj6B_Index
000213DC 5428 0024                  		addq.b	#2,routine(a0)
000213E0 7000                       		moveq	#0,d0
000213E2 1028 0028                  		move.b	subtype(a0),d0
000213E6 E448                       		lsr.w	#2,d0
000213E8 0240 001C                  		andi.w	#$1C,d0
000213EC 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000213F0 115B 0023                  		move.b	(a3)+,width_pixels(a0)
000213F4 115B 0016                  		move.b	(a3)+,$16(a0)
000213F8 E448                       		lsr.w	#2,d0
000213FA 1140 001A                  		move.b	d0,mapping_frame(a0)
000213FE 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00021406 317C 22C0 0002             		move.w	#$22C0,2(a0)
0002140C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00021412 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00021414 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0002141A 6700                       		beq.s	Obj6B_SBZ3
0002141C                            
0002141C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0002141C                            ;		lea	(v_objstate).w,a2
0002141C 7000                       		moveq	#0,d0
0002141E 3028 0014                  		move.w	respawn_index(a0),d0
00021422                            ;        move.w	respawn_index(a0),d0
00021422 3440                       	    movea.w	d0,a2
00021424 6700                       		beq.s	Obj6B_Delete
00021426 0892 0007                  		bclr	#7,(a2)
0002142A                            
0002142A                            Obj6B_Delete:
0002142A 4EF9 0001 5BF0             		jmp	DeleteObject
00021430                            ; ===========================================================================
00021430                            
00021430                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00021430 317C 41F0 0002             		move.w	#$41F0,2(a0)
00021436 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0002143C 6600                       		bne.s	Obj6B_SBZ12
0002143E                            ;		lea	(v_objstate).w,a2
0002143E 7000                       		moveq	#0,d0
00021440 3028 0014                  		move.w	respawn_index(a0),d0
00021444                            ;        move.w	respawn_index(a0),d0
00021444 3440                       	    movea.w	d0,a2
00021446 6700                       		beq.s	Obj6B_SBZ12
00021448 0812 0000                  		btst	#0,(a2)
0002144C 6700                       		beq.s	Obj6B_SBZ12
0002144E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00021452 60C8                       		bra.s	Obj6B_ChkGone
00021454                            ; ===========================================================================
00021454                            
00021454                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00021454 0028 0004 0001             		ori.b	#4,1(a0)
0002145A 317C 0200 0018             		move.w	#$200,priority(a0)
00021460 3168 0008 0034             		move.w	8(a0),$34(a0)
00021466 3168 000C 0030             		move.w	$C(a0),$30(a0)
0002146C 7000                       		moveq	#0,d0
0002146E 101B                       		move.b	(a3)+,d0
00021470 3140 003C                  		move.w	d0,$3C(a0)
00021474 7000                       		moveq	#0,d0
00021476 1028 0028                  		move.b	subtype(a0),d0
0002147A 6A00                       		bpl.s	Obj6B_Action
0002147C 0200 000F                  		andi.b	#$F,d0
00021480 1140 003E                  		move.b	d0,parent(a0)
00021484 1153 0028                  		move.b	(a3),subtype(a0)
00021488 0C13 0005                  		cmpi.b	#5,(a3)
0002148C 6600                       		bne.s	Obj6B_ChkGone2
0002148E 08E8 0004 0001             		bset	#4,1(a0)
00021494                            
00021494                            Obj6B_ChkGone2:
00021494                            ;		lea	(v_objstate).w,a2
00021494 7000                       		moveq	#0,d0
00021496 3028 0014                  		move.w	respawn_index(a0),d0
0002149A                            ;        move.w	respawn_index(a0),d0
0002149A 3440                       	    movea.w	d0,a2
0002149C 6700                       		beq.s	Obj6B_Action
0002149E 0892 0007                  		bclr	#7,(a2)
000214A2                            
000214A2                            Obj6B_Action:				; XREF: Obj6B_Index
000214A2 3F28 0008                  		move.w	8(a0),-(sp)
000214A6 7000                       		moveq	#0,d0
000214A8 1028 0028                  		move.b	subtype(a0),d0
000214AC 0240 000F                  		andi.w	#$F,d0
000214B0 D040                       		add.w	d0,d0
000214B2 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000214B6 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000214BA 381F                       		move.w	(sp)+,d4
000214BC 4A28 0001                  		tst.b	1(a0)
000214C0 6A00                       		bpl.s	Obj6B_ChkDel
000214C2 7200                       		moveq	#0,d1
000214C4 1228 0023                  		move.b	width_pixels(a0),d1
000214C8 0641 000B                  		addi.w	#$B,d1
000214CC 7400                       		moveq	#0,d2
000214CE 1428 0016                  		move.b	$16(a0),d2
000214D2 3602                       		move.w	d2,d3
000214D4 5243                       		addq.w	#1,d3
000214D6 4EB9 0001 8F12             		jsr	SolidObject
000214DC                            
000214DC                            Obj6B_ChkDel:
000214DC 3028 0034                  		move.w	$34(a0),d0
000214E0 0240 FF80                  		andi.w	#$FF80,d0
000214E4 3238 F700                  		move.w	($FFFFF700).w,d1
000214E8 0441 0080                  		subi.w	#$80,d1
000214EC 0241 FF80                  		andi.w	#$FF80,d1
000214F0 9041                       		sub.w	d1,d0
000214F2 0C40 0280                  		cmpi.w	#$280,d0
000214F6 6200                       		bhi.s	loc_15D64
000214F8 4EF9 0001 5C3C             		jmp	DisplaySprite
000214FE                            ; ===========================================================================
000214FE                            
000214FE                            loc_15D64:
000214FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00021504 6600                       		bne.s	Obj6B_Delete2
00021506 4238 F7CB                  		clr.b	($FFFFF7CB).w
0002150A                            ;		lea	(v_objstate).w,a2
0002150A 7000                       		moveq	#0,d0
0002150C 3028 0014                  		move.w	respawn_index(a0),d0
00021510                            ;        move.w	respawn_index(a0),d0
00021510 3440                       	    movea.w	d0,a2
00021512 6700                       		beq.s	Obj6B_Delete2
00021514 0892 0007                  		bclr	#7,(a2)
00021518                            
00021518                            Obj6B_Delete2:
00021518 4EF9 0001 5BF0             		jmp	DeleteObject
0002151E                            ; ===========================================================================
0002151E 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00021522 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00021526 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0002152A                            ; ===========================================================================
0002152A                            
0002152A                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0002152A 4E75                       		rts	
0002152C                            ; ===========================================================================
0002152C                            
0002152C                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0002152C 4A28 0038                  		tst.b	$38(a0)
00021530 6600                       		bne.s	loc_15DB4
00021532 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00021536 7000                       		moveq	#0,d0
00021538 1028 003E                  		move.b	parent(a0),d0
0002153C 0832 0000 0000             		btst	#0,(a2,d0.w)
00021542 6700                       		beq.s	loc_15DC2
00021544 117C 0001 0038             		move.b	#1,$38(a0)
0002154A                            
0002154A                            loc_15DB4:
0002154A 3028 003C                  		move.w	$3C(a0),d0
0002154E B068 003A                  		cmp.w	$3A(a0),d0
00021552 6700                       		beq.s	loc_15DE0
00021554 5468 003A                  		addq.w	#2,$3A(a0)
00021558                            
00021558                            loc_15DC2:
00021558 3028 003A                  		move.w	$3A(a0),d0
0002155C 0828 0000 0022             		btst	#0,status(a0)
00021562 6700                       		beq.s	loc_15DD4
00021564 4440                       		neg.w	d0
00021566 0640 0080                  		addi.w	#$80,d0
0002156A                            
0002156A                            loc_15DD4:
0002156A 3228 0034                  		move.w	$34(a0),d1
0002156E 9240                       		sub.w	d0,d1
00021570 3141 0008                  		move.w	d1,8(a0)
00021574 4E75                       		rts	
00021576                            ; ===========================================================================
00021576                            
00021576                            loc_15DE0:
00021576 5228 0028                  		addq.b	#1,subtype(a0)
0002157A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00021580 4228 0038                  		clr.b	$38(a0)
00021584                            ;		lea	(v_objstate).w,a2
00021584 7000                       		moveq	#0,d0
00021586 3028 0014                  		move.w	respawn_index(a0),d0
0002158A                            ;        move.w	respawn_index(a0),d0
0002158A 3440                       	    movea.w	d0,a2
0002158C 67CA                       		beq.s	loc_15DC2
0002158E 08D2 0000                  		bset	#0,(a2)
00021592 60C4                       		bra.s	loc_15DC2
00021594                            ; ===========================================================================
00021594                            
00021594                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00021594 4A28 0038                  		tst.b	$38(a0)
00021598 6600                       		bne.s	loc_15E14
0002159A 5368 0036                  		subq.w	#1,$36(a0)
0002159E 6600                       		bne.s	loc_15E1E
000215A0 117C 0001 0038             		move.b	#1,$38(a0)
000215A6                            
000215A6                            loc_15E14:
000215A6 4A68 003A                  		tst.w	$3A(a0)
000215AA 6700                       		beq.s	loc_15E3C
000215AC 5568 003A                  		subq.w	#2,$3A(a0)
000215B0                            
000215B0                            loc_15E1E:
000215B0 3028 003A                  		move.w	$3A(a0),d0
000215B4 0828 0000 0022             		btst	#0,status(a0)
000215BA 6700                       		beq.s	loc_15E30
000215BC 4440                       		neg.w	d0
000215BE 0640 0080                  		addi.w	#$80,d0
000215C2                            
000215C2                            loc_15E30:
000215C2 3228 0034                  		move.w	$34(a0),d1
000215C6 9240                       		sub.w	d0,d1
000215C8 3141 0008                  		move.w	d1,8(a0)
000215CC 4E75                       		rts	
000215CE                            ; ===========================================================================
000215CE                            
000215CE                            loc_15E3C:
000215CE 5328 0028                  		subq.b	#1,subtype(a0)
000215D2 4228 0038                  		clr.b	$38(a0)
000215D6                            ;		lea	(v_objstate).w,a2
000215D6 7000                       		moveq	#0,d0
000215D8 3028 0014                  		move.w	respawn_index(a0),d0
000215DC                            ;        move.w	respawn_index(a0),d0
000215DC 3440                       	    movea.w	d0,a2		
000215DE 67D0                       		beq.s	loc_15E1E
000215E0 0892 0000                  		bclr	#0,(a2)
000215E4 60CA                       		bra.s	loc_15E1E
000215E6                            ; ===========================================================================
000215E6                            
000215E6                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000215E6 4A28 0038                  		tst.b	$38(a0)
000215EA 6600                       		bne.s	loc_15E7C
000215EC 4A68 003A                  		tst.w	$3A(a0)
000215F0 6700                       		beq.s	loc_15E6A
000215F2 5368 003A                  		subq.w	#1,$3A(a0)
000215F6 6000                       		bra.s	loc_15E8E
000215F8                            ; ===========================================================================
000215F8                            
000215F8                            loc_15E6A:
000215F8 5368 0036                  		subq.w	#1,$36(a0)
000215FC 6A00                       		bpl.s	loc_15E8E
000215FE 317C 003C 0036             		move.w	#$3C,$36(a0)
00021604 117C 0001 0038             		move.b	#1,$38(a0)
0002160A                            
0002160A                            loc_15E7C:
0002160A 5068 003A                  		addq.w	#8,$3A(a0)
0002160E 3028 003A                  		move.w	$3A(a0),d0
00021612 B068 003C                  		cmp.w	$3C(a0),d0
00021616 6600                       		bne.s	loc_15E8E
00021618 4228 0038                  		clr.b	$38(a0)
0002161C                            
0002161C                            loc_15E8E:
0002161C 3028 003A                  		move.w	$3A(a0),d0
00021620 0828 0000 0022             		btst	#0,status(a0)
00021626 6700                       		beq.s	loc_15EA0
00021628 4440                       		neg.w	d0
0002162A 0640 0038                  		addi.w	#$38,d0
0002162E                            
0002162E                            loc_15EA0:
0002162E 3228 0030                  		move.w	$30(a0),d1
00021632 D240                       		add.w	d0,d1
00021634 3141 000C                  		move.w	d1,$C(a0)
00021638 4E75                       		rts	
0002163A                            ; ===========================================================================
0002163A                            
0002163A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0002163A 4A28 0038                  		tst.b	$38(a0)
0002163E 6600                       		bne.s	loc_15ED0
00021640 4A68 003A                  		tst.w	$3A(a0)
00021644 6700                       		beq.s	loc_15EBE
00021646 5168 003A                  		subq.w	#8,$3A(a0)
0002164A 6000                       		bra.s	loc_15EF0
0002164C                            ; ===========================================================================
0002164C                            
0002164C                            loc_15EBE:
0002164C 5368 0036                  		subq.w	#1,$36(a0)
00021650 6A00                       		bpl.s	loc_15EF0
00021652 317C 003C 0036             		move.w	#$3C,$36(a0)
00021658 117C 0001 0038             		move.b	#1,$38(a0)
0002165E                            
0002165E                            loc_15ED0:
0002165E 3028 003A                  		move.w	$3A(a0),d0
00021662 B068 003C                  		cmp.w	$3C(a0),d0
00021666 6700                       		beq.s	loc_15EE0
00021668 5068 003A                  		addq.w	#8,$3A(a0)
0002166C 6000                       		bra.s	loc_15EF0
0002166E                            ; ===========================================================================
0002166E                            
0002166E                            loc_15EE0:
0002166E 5368 0036                  		subq.w	#1,$36(a0)
00021672 6A00                       		bpl.s	loc_15EF0
00021674 317C 003C 0036             		move.w	#$3C,$36(a0)
0002167A 4228 0038                  		clr.b	$38(a0)
0002167E                            
0002167E                            loc_15EF0:
0002167E 3028 003A                  		move.w	$3A(a0),d0
00021682 0828 0000 0022             		btst	#0,status(a0)
00021688 6700                       		beq.s	loc_15F02
0002168A 4440                       		neg.w	d0
0002168C 0640 0038                  		addi.w	#$38,d0
00021690                            
00021690                            loc_15F02:
00021690 3228 0030                  		move.w	$30(a0),d1
00021694 D240                       		add.w	d0,d1
00021696 3141 000C                  		move.w	d1,$C(a0)
0002169A 4E75                       		rts	
0002169C                            ; ===========================================================================
0002169C                            
0002169C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0002169C 4A28 0038                  		tst.b	$38(a0)
000216A0 6600                       		bne.s	loc_15F3E
000216A2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000216A6 7000                       		moveq	#0,d0
000216A8 1028 003E                  		move.b	parent(a0),d0
000216AC 0832 0000 0000             		btst	#0,(a2,d0.w)
000216B2 6700                       		beq.s	locret_15F5C
000216B4 117C 0001 0038             		move.b	#1,$38(a0)
000216BA                            ;		lea	(v_objstate).w,a2
000216BA 7000                       		moveq	#0,d0
000216BC 3028 0014                  		move.w	respawn_index(a0),d0
000216C0                            ;        move.w	respawn_index(a0),d0
000216C0 3440                       	    movea.w	d0,a2		
000216C2 6700                       		beq.s	loc_15F3E
000216C4 08D2 0000                  		bset	#0,(a2)
000216C8                            
000216C8                            loc_15F3E:
000216C8 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000216D0 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000216D8 3168 0008 0034             		move.w	8(a0),$34(a0)
000216DE 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000216E4 6700                       		beq.s	loc_15F5E
000216E6                            
000216E6                            locret_15F5C:
000216E6 4E75                       		rts	
000216E8                            ; ===========================================================================
000216E8                            
000216E8                            loc_15F5E:
000216E8 4228 0028                  		clr.b	subtype(a0)
000216EC 4228 0038                  		clr.b	$38(a0)
000216F0 4E75                       		rts	
000216F2                            ; ===========================================================================
000216F2                            ; ---------------------------------------------------------------------------
000216F2                            ; Sprite mappings - stomper and	platforms (SBZ)
000216F2                            ; ---------------------------------------------------------------------------
000216F2                            Map_obj6B:
000216F2                            	include "_maps\obj6B.asm"
000216F2                            ; ---------------------------------------------------------------------------
000216F2                            ; Sprite mappings - stomper and	platforms (SBZ)
000216F2                            ; ---------------------------------------------------------------------------
000216F2 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000216F6 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000216FA 0000                       		dc.w byte_15FB0-Map_obj6B
000216FC 04                         byte_15F72:	dc.b 4
000216FD F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00021702 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00021707 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0002170C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00021711 08                         byte_15F87:	dc.b 8
00021712 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00021717 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0002171C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00021721 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00021726 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0002172B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00021730 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00021735 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0002173A 0E                         byte_15FB0:	dc.b $E
0002173B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00021740 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00021745 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0002174A C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0002174F C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00021754 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00021759 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0002175E C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00021763 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00021768 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0002176D E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00021772 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00021777 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0002177C 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00021782 00                         		even
00021782 00                         		even
00021782                            
00021782                            ; ===========================================================================
00021782                            ; ---------------------------------------------------------------------------
00021782                            ; Object 6C - vanishing	platforms (SBZ)
00021782                            ; ---------------------------------------------------------------------------
00021782                            
00021782                            Obj6C:					; XREF: Obj_Index
00021782 7000                       		moveq	#0,d0
00021784 1028 0024                  		move.b	routine(a0),d0
00021788 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0002178C 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00021790                            ; ===========================================================================
00021790 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00021792 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021794 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00021796 0000                       		dc.w loc_16068-Obj6C_Index
00021798                            ; ===========================================================================
00021798                            
00021798                            Obj6C_Main:				; XREF: Obj6C_Index
00021798 5C28 0024                  		addq.b	#6,routine(a0)
0002179C 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000217A4 317C 44C3 0002             		move.w	#$44C3,2(a0)
000217AA 0028 0004 0001             		ori.b	#4,1(a0)
000217B0 117C 0010 0023             		move.b	#$10,width_pixels(a0)
000217B6 317C 0200 0018             		move.w	#$200,priority(a0)
000217BC 7000                       		moveq	#0,d0
000217BE 1028 0028                  		move.b	subtype(a0),d0	; get object type
000217C2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000217C6 5240                       		addq.w	#1,d0		; add 1
000217C8 EF48                       		lsl.w	#7,d0		; multiply by $80
000217CA 3200                       		move.w	d0,d1
000217CC 5340                       		subq.w	#1,d0
000217CE 3140 0030                  		move.w	d0,$30(a0)
000217D2 3140 0032                  		move.w	d0,$32(a0)
000217D6 7000                       		moveq	#0,d0
000217D8 1028 0028                  		move.b	subtype(a0),d0	; get object type
000217DC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000217E0 0641 0080                  		addi.w	#$80,d1
000217E4 C0C1                       		mulu.w	d1,d0
000217E6 E088                       		lsr.l	#8,d0
000217E8 3140 0036                  		move.w	d0,$36(a0)
000217EC 5341                       		subq.w	#1,d1
000217EE 3141 0038                  		move.w	d1,$38(a0)
000217F2                            
000217F2                            loc_16068:				; XREF: Obj6C_Index
000217F2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000217F6 9068 0036                  		sub.w	$36(a0),d0
000217FA C068 0038                  		and.w	$38(a0),d0
000217FE 6600                       		bne.s	Obj6C_Animate
00021800 5928 0024                  		subq.b	#4,routine(a0)
00021804 6000                       		bra.s	Obj6C_Vanish
00021806                            ; ===========================================================================
00021806                            
00021806                            Obj6C_Animate:
00021806 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0002180C 4EB9 0001 2618             		jsr	AnimateSprite
00021812 4EF9 0001 882E             		jmp	MarkObjGone
00021818                            ; ===========================================================================
00021818                            
00021818                            Obj6C_Vanish:				; XREF: Obj6C_Index
00021818 5368 0030                  		subq.w	#1,$30(a0)
0002181C 6A00                       		bpl.s	loc_160AA
0002181E 317C 007F 0030             		move.w	#127,$30(a0)
00021824 4A28 001C                  		tst.b	anim(a0)
00021828 6700                       		beq.s	loc_160A4
0002182A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00021830                            
00021830                            loc_160A4:
00021830 0868 0000 001C             		bchg	#0,anim(a0)
00021836                            
00021836                            loc_160AA:
00021836 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0002183C 4EB9 0001 2618             		jsr	AnimateSprite
00021842 0828 0001 001A             		btst	#1,mapping_frame(a0)	; has platform vanished?
00021848 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0002184A 0C28 0002 0024             		cmpi.b	#2,routine(a0)
00021850 6600                       		bne.s	loc_160D6
00021852 7200                       		moveq	#0,d1
00021854 1228 0023                  		move.b	width_pixels(a0),d1
00021858 4EB9 0000 F09A             		jsr	(PlatformObject).l
0002185E 4EF9 0001 882E             		jmp	MarkObjGone
00021864                            ; ===========================================================================
00021864                            
00021864                            loc_160D6:
00021864 7200                       		moveq	#0,d1
00021866 1228 0023                  		move.b	width_pixels(a0),d1
0002186A 4EB9 0000 F1DA             		jsr	(ExitPlatform).l
00021870 3428 0008                  		move.w	8(a0),d2
00021874 4EB9 0000 F440             		jsr	(MvSonicOnPtfm2).l
0002187A 4EF9 0001 882E             		jmp	MarkObjGone
00021880                            ; ===========================================================================
00021880                            
00021880                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00021880 0828 0003 0022             		btst	#3,status(a0)
00021886 6700                       		beq.s	Obj6C_Display
00021888 43F8 D000                  		lea	($FFFFD000).w,a1
0002188C 08A9 0003 0022             		bclr	#3,status(a1)
00021892 08A8 0003 0022             		bclr	#3,status(a0)
00021898 117C 0002 0024             		move.b	#2,routine(a0)
0002189E 4228 0025                  		clr.b	routine_secondary(a0)
000218A2                            
000218A2                            Obj6C_Display:
000218A2 4EF9 0001 882E             		jmp	MarkObjGone
000218A8                            ; ===========================================================================
000218A8                            Ani_obj6C:
000218A8                            	include "_anim\obj6C.asm"
000218A8                            ; ---------------------------------------------------------------------------
000218A8                            ; Animation script - vanishing platforms (SBZ)
000218A8                            ; ---------------------------------------------------------------------------
000218A8 0000                       		dc.w byte_1611A-Ani_obj6C
000218AA 0000                       		dc.w byte_16122-Ani_obj6C
000218AC 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000218B4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000218BC                            		even
000218BC                            		even
000218BC                            
000218BC                            ; ---------------------------------------------------------------------------
000218BC                            ; Sprite mappings - vanishing platforms	(SBZ)
000218BC                            ; ---------------------------------------------------------------------------
000218BC                            Map_obj6C:
000218BC                            	include "_maps\obj6C.asm"
000218BC                            ; ---------------------------------------------------------------------------
000218BC                            ; Sprite mappings - vanishing platforms	(SBZ)
000218BC                            ; ---------------------------------------------------------------------------
000218BC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000218C0 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000218C4 01                         byte_16132:	dc.b 1
000218C5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000218CA 01                         byte_16138:	dc.b 1
000218CB F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000218D0 01                         byte_1613E:	dc.b 1
000218D1 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000218D6 00                         byte_16144:	dc.b 0
000218D8 00                         		even
000218D8 00                         		even
000218D8                            
000218D8                            ; ===========================================================================
000218D8                            ; ---------------------------------------------------------------------------
000218D8                            ; Object 6E - electrocution orbs (SBZ)
000218D8                            ; ---------------------------------------------------------------------------
000218D8                            
000218D8                            Obj6E:					; XREF: Obj_Index
000218D8 7000                       		moveq	#0,d0
000218DA 1028 0024                  		move.b	routine(a0),d0
000218DE 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000218E2 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000218E6                            ; ===========================================================================
000218E6 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000218E8 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000218EA                            ; ===========================================================================
000218EA                            
000218EA                            Obj6E_Main:				; XREF: Obj6E_Index
000218EA 5428 0024                  		addq.b	#2,routine(a0)
000218EE 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000218F6 317C 047E 0002             		move.w	#$47E,2(a0)
000218FC 0028 0004 0001             		ori.b	#4,1(a0)
00021902 117C 0028 0023             		move.b	#$28,width_pixels(a0)
00021908 7000                       		moveq	#0,d0
0002190A 1028 0028                  		move.b	subtype(a0),d0	; read object type
0002190E E948                       		lsl.w	#4,d0		; multiply by $10
00021910 5340                       		subq.w	#1,d0
00021912 3140 0034                  		move.w	d0,$34(a0)
00021916                            
00021916                            Obj6E_Shock:				; XREF: Obj6E_Index
00021916 3038 FE04                  		move.w	($FFFFFE04).w,d0
0002191A C068 0034                  		and.w	$34(a0),d0
0002191E 6600                       		bne.s	Obj6E_Animate
00021920 117C 0001 001C             		move.b	#1,anim(a0)	; run "shocking" animation
00021926 4A28 0001                  		tst.b	1(a0)
0002192A 6A00                       		bpl.s	Obj6E_Animate
0002192C 303C 00B1                  		move.w	#$B1,d0
00021930 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play electricity sound
00021936                            
00021936                            Obj6E_Animate:
00021936 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0002193C 4EB9 0001 2618             		jsr	AnimateSprite
00021942 117C 0000 0020             		move.b	#0,collision_flags(a0)
00021948 0C28 0004 001A             		cmpi.b	#4,mapping_frame(a0)	; is frame number 4 displayed?
0002194E 6600                       		bne.s	Obj6E_Display	; if not, branch
00021950 117C 00A4 0020             		move.b	#$A4,collision_flags(a0)	; if yes, make object hurt Sonic
00021956                            
00021956                            Obj6E_Display:
00021956 4EF9 0001 882E             		jmp	MarkObjGone
0002195C                            ; ===========================================================================
0002195C                            Ani_obj6E:
0002195C                            	include "_anim\obj6E.asm"
0002195C                            ; ---------------------------------------------------------------------------
0002195C                            ; Animation script - electrocution orbs (SBZ)
0002195C                            ; ---------------------------------------------------------------------------
0002195C 0000                       		dc.w byte_161CC-Ani_obj6E
0002195E 0000                       		dc.w byte_161D0-Ani_obj6E
00021960 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00021964 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00021974                            		even
00021974                            		even
00021974                            
00021974                            ; ---------------------------------------------------------------------------
00021974                            ; Sprite mappings - electrocution orbs (SBZ)
00021974                            ; ---------------------------------------------------------------------------
00021974                            Map_obj6E:
00021974                            	include "_maps\obj6E.asm"
00021974                            ; ---------------------------------------------------------------------------
00021974                            ; Sprite mappings - electrocution orbs (SBZ)
00021974                            ; ---------------------------------------------------------------------------
00021974 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00021978 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0002197C 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00021980 02                         byte_161EC:	dc.b 2
00021981 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021986 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0002198B 03                         byte_161F7:	dc.b 3
0002198C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00021991 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00021996 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0002199B 05                         byte_16207:	dc.b 5
0002199C F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000219A1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000219A6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000219AB F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000219B0 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000219B5 04                         byte_16221:	dc.b 4
000219B6 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000219BB 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000219C0 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000219C5 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000219CA 06                         byte_16236:	dc.b 6
000219CB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000219D0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000219D5 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000219DA F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000219DF F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000219E4 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000219E9 04                         byte_16255:	dc.b 4
000219EA F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000219EF 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000219F4 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000219F9 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000219FE                            		even
000219FE                            		even
000219FE                            
000219FE                            ; ===========================================================================
000219FE                            ; ---------------------------------------------------------------------------
000219FE                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000219FE                            ; ---------------------------------------------------------------------------
000219FE                            
000219FE                            Obj6F:					; XREF: Obj_Index
000219FE 7000                       		moveq	#0,d0
00021A00 1028 0024                  		move.b	routine(a0),d0
00021A04 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00021A08 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00021A0C 3028 0030                  		move.w	$30(a0),d0
00021A10 0240 FF80                  		andi.w	#$FF80,d0
00021A14 3238 F700                  		move.w	($FFFFF700).w,d1
00021A18 0441 0080                  		subi.w	#$80,d1
00021A1C 0241 FF80                  		andi.w	#$FF80,d1
00021A20 9041                       		sub.w	d1,d0
00021A22 0C40 0280                  		cmpi.w	#$280,d0
00021A26 6200                       		bhi.s	loc_1629A
00021A28                            
00021A28                            Obj6F_Display:
00021A28 4EF9 0001 5C3C             		jmp	DisplaySprite
00021A2E                            ; ===========================================================================
00021A2E                            
00021A2E                            loc_1629A:
00021A2E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00021A34 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00021A36 0C40 FF80                  		cmpi.w	#-$80,d0
00021A3A 64EC                       		bcc.s	Obj6F_Display
00021A3C                            
00021A3C                            Obj6F_Act1or2:
00021A3C 1028 002F                  		move.b	$2F(a0),d0
00021A40 6A00                       		bpl.s	Obj6F_Delete
00021A42 0240 007F                  		andi.w	#$7F,d0
00021A46 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00021A4A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00021A50                            
00021A50                            Obj6F_Delete:
00021A50 7000                       		moveq	#0,d0
00021A52 3028 0014                  		move.w	respawn_index(a0),d0
00021A56 3440                       		movea.w	d0,a2
00021A58 0892 0007                  		bclr	#7,(a2)
00021A5C 4EF9 0001 5BF0             		jmp	DeleteObject
00021A62                            ; ===========================================================================
00021A62 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00021A64 0000                       		dc.w loc_163D8-Obj6F_Index
00021A66                            ; ===========================================================================
00021A66                            
00021A66                            Obj6F_Main:				; XREF: Obj6F_Index
00021A66 1028 0028                  		move.b	subtype(a0),d0
00021A6A 6B00 0000                  		bmi.w	loc_16380
00021A6E 5428 0024                  		addq.b	#2,routine(a0)
00021A72 217C 0002 10FC 0004        		move.l	#Map_obj69a,4(a0)
00021A7A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00021A80 117C 0010 0023             		move.b	#$10,width_pixels(a0)
00021A86 0028 0004 0001             		ori.b	#4,1(a0)
00021A8C 317C 0200 0018             		move.w	#$200,priority(a0)
00021A92 7000                       		moveq	#0,d0
00021A94 1028 0028                  		move.b	subtype(a0),d0
00021A98 3200                       		move.w	d0,d1
00021A9A E648                       		lsr.w	#3,d0
00021A9C 0240 001E                  		andi.w	#$1E,d0
00021AA0 45FA 0000                  		lea	off_164A6(pc),a2
00021AA4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021AA8 315A 0038                  		move.w	(a2)+,$38(a0)
00021AAC 315A 0030                  		move.w	(a2)+,$30(a0)
00021AB0 214A 003C                  		move.l	a2,$3C(a0)
00021AB4 0241 000F                  		andi.w	#$F,d1
00021AB8 E549                       		lsl.w	#2,d1
00021ABA 1141 0038                  		move.b	d1,$38(a0)
00021ABE 117C 0004 003A             		move.b	#4,$3A(a0)
00021AC4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00021AC8 6700                       		beq.s	loc_16356
00021ACA 117C 0001 003B             		move.b	#1,$3B(a0)
00021AD0 4428 003A                  		neg.b	$3A(a0)
00021AD4 7200                       		moveq	#0,d1
00021AD6 1228 0038                  		move.b	$38(a0),d1
00021ADA D228 003A                  		add.b	$3A(a0),d1
00021ADE B228 0039                  		cmp.b	$39(a0),d1
00021AE2 6500                       		bcs.s	loc_16352
00021AE4 1001                       		move.b	d1,d0
00021AE6 7200                       		moveq	#0,d1
00021AE8 4A00                       		tst.b	d0
00021AEA 6A00                       		bpl.s	loc_16352
00021AEC 1228 0039                  		move.b	$39(a0),d1
00021AF0 5901                       		subq.b	#4,d1
00021AF2                            
00021AF2                            loc_16352:
00021AF2 1141 0038                  		move.b	d1,$38(a0)
00021AF6                            
00021AF6                            loc_16356:
00021AF6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00021AFC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00021B02 4A41                       		tst.w	d1
00021B04 6600                       		bne.s	loc_1636C
00021B06 117C 0001 001C             		move.b	#1,anim(a0)
00021B0C                            
00021B0C                            loc_1636C:
00021B0C 0C41 0008                  		cmpi.w	#8,d1
00021B10 6600                       		bne.s	loc_16378
00021B12 117C 0000 001C             		move.b	#0,anim(a0)
00021B18                            
00021B18                            loc_16378:
00021B18 4EBA A056                  		jsr	Obj63_ChangeDir
00021B1C 6000 0000                  		bra.w	loc_163D8
00021B20                            ; ===========================================================================
00021B20                            
00021B20                            loc_16380:				; XREF: Obj6F_Main
00021B20 1140 002F                  		move.b	d0,$2F(a0)
00021B24 0240 007F                  		andi.w	#$7F,d0
00021B28 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00021B2C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00021B32 6700                       		beq.s	loc_1639A
00021B34 4EF9 0001 5BF0             		jmp	DeleteObject
00021B3A                            ; ===========================================================================
00021B3A                            
00021B3A                            loc_1639A:
00021B3A D040                       		add.w	d0,d0
00021B3C 0240 001E                  		andi.w	#$1E,d0
00021B40                            ;		addi.w	#$80,d0
00021B40 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00021B46 D4F2 0000                  		adda.w	(a2,d0.w),a2
00021B4A 321A                       		move.w	(a2)+,d1
00021B4C 2248                       		movea.l	a0,a1
00021B4E 6000                       		bra.s	Obj6F_LoadPform
00021B50                            ; ===========================================================================
00021B50                            
00021B50                            Obj6F_Loop:
00021B50 4EB9 0001 6708             		jsr	SingleObjLoad
00021B56 6600                       		bne.s	loc_163D0
00021B58                            
00021B58                            Obj6F_LoadPform:			; XREF: loc_1639A
00021B58 12BC 006F                  		move.b	#$6F,0(a1)
00021B5C 335A 0008                  		move.w	(a2)+,8(a1)
00021B60 335A 000C                  		move.w	(a2)+,$C(a1)
00021B64 301A                       		move.w	(a2)+,d0
00021B66 1340 0028                  		move.b	d0,subtype(a1)
00021B6A                            
00021B6A                            loc_163D0:
00021B6A 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00021B6E                            
00021B6E 588F                       		addq.l	#4,sp
00021B70 4E75                       		rts	
00021B72                            ; ===========================================================================
00021B72                            
00021B72                            loc_163D8:				; XREF: Obj6F_Index
00021B72 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00021B78 4EB9 0001 2618             		jsr	AnimateSprite
00021B7E 4A28 001A                  		tst.b	mapping_frame(a0)
00021B82 6600                       		bne.s	loc_16404
00021B84 3F28 0008                  		move.w	8(a0),-(sp)
00021B88 4EB9 0000 0000             		jsr	loc_16424
00021B8E 323C 001B                  		move.w	#$1B,d1
00021B92 343C 0007                  		move.w	#7,d2
00021B96 3602                       		move.w	d2,d3
00021B98 5243                       		addq.w	#1,d3
00021B9A 381F                       		move.w	(sp)+,d4
00021B9C 4EF9 0001 8F12             		jmp	SolidObject
00021BA2                            ; ===========================================================================
00021BA2                            
00021BA2                            loc_16404:
00021BA2 0828 0003 0022             		btst	#3,status(a0)
00021BA8 6700                       		beq.s	loc_16420
00021BAA 43F8 D000                  		lea	($FFFFD000).w,a1
00021BAE 08A9 0003 0022             		bclr	#3,status(a1)
00021BB4 08A8 0003 0022             		bclr	#3,status(a0)
00021BBA 4228 0025                  		clr.b	routine_secondary(a0)
00021BBE                            
00021BBE                            loc_16420:
00021BBE 6000 0002                  		bra.w	*+4
00021BC2                            
00021BC2                            loc_16424:
00021BC2 3028 0008                  		move.w	8(a0),d0
00021BC6 B068 0034                  		cmp.w	$34(a0),d0
00021BCA 6600                       		bne.s	loc_16484
00021BCC 3028 000C                  		move.w	$C(a0),d0
00021BD0 B068 0036                  		cmp.w	$36(a0),d0
00021BD4 6600                       		bne.s	loc_16484
00021BD6 7200                       		moveq	#0,d1
00021BD8 1228 0038                  		move.b	$38(a0),d1
00021BDC D228 003A                  		add.b	$3A(a0),d1
00021BE0 B228 0039                  		cmp.b	$39(a0),d1
00021BE4 6500                       		bcs.s	loc_16456
00021BE6 1001                       		move.b	d1,d0
00021BE8 7200                       		moveq	#0,d1
00021BEA 4A00                       		tst.b	d0
00021BEC 6A00                       		bpl.s	loc_16456
00021BEE 1228 0039                  		move.b	$39(a0),d1
00021BF2 5901                       		subq.b	#4,d1
00021BF4                            
00021BF4                            loc_16456:
00021BF4 1141 0038                  		move.b	d1,$38(a0)
00021BF8 2268 003C                  		movea.l	$3C(a0),a1
00021BFC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00021C02 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00021C08 4A41                       		tst.w	d1
00021C0A 6600                       		bne.s	loc_16474
00021C0C 117C 0001 001C             		move.b	#1,anim(a0)
00021C12                            
00021C12                            loc_16474:
00021C12 0C41 0008                  		cmpi.w	#8,d1
00021C16 6600                       		bne.s	loc_16480
00021C18 117C 0000 001C             		move.b	#0,anim(a0)
00021C1E                            
00021C1E                            loc_16480:
00021C1E 4EBA 9F50                  		jsr	Obj63_ChangeDir
00021C22                            
00021C22                            loc_16484:
00021C22 4EF9 0001 5BD6             		jmp	SpeedToPos
00021C28                            ; ===========================================================================
00021C28                            Ani_obj6F:
00021C28                            	include "_anim\obj6F.asm"
00021C28                            ; ---------------------------------------------------------------------------
00021C28                            ; Animation script - platform on conveyor belt (SBZ)
00021C28                            ; ---------------------------------------------------------------------------
00021C28 0000                       		dc.w byte_1648E-Ani_obj6F
00021C2A 0000                       		dc.w byte_164A2-Ani_obj6F
00021C2C 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00021C39 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00021C40 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00021C44 00                         		even
00021C44 00                         		even
00021C44                            
00021C44 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00021C4A 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00021C50 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00021C64 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00021C78 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00021C8C 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00021CA0 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00021CB4 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00021CC8                            ; ===========================================================================
00021CC8                            ; ---------------------------------------------------------------------------
00021CC8                            ; Object 70 - large girder block (SBZ)
00021CC8                            ; ---------------------------------------------------------------------------
00021CC8                            
00021CC8                            Obj70:					; XREF: Obj_Index
00021CC8 7000                       		moveq	#0,d0
00021CCA 1028 0024                  		move.b	routine(a0),d0
00021CCE 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00021CD2 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00021CD6                            ; ===========================================================================
00021CD6 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00021CD8 0000                       		dc.w Obj70_Action-Obj70_Index
00021CDA                            ; ===========================================================================
00021CDA                            
00021CDA                            Obj70_Main:				; XREF: Obj70_Index
00021CDA 5428 0024                  		addq.b	#2,routine(a0)
00021CDE 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00021CE6 317C 42F0 0002             		move.w	#$42F0,2(a0)
00021CEC 0028 0004 0001             		ori.b	#4,1(a0)
00021CF2 317C 0200 0018             		move.w	#$200,priority(a0)
00021CF8 117C 0060 0023             		move.b	#$60,width_pixels(a0)
00021CFE 117C 0018 0016             		move.b	#$18,$16(a0)
00021D04 3168 0008 0032             		move.w	8(a0),$32(a0)
00021D0A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00021D10 4EB9 0000 0000             		jsr	Obj70_Move2
00021D16                            
00021D16                            Obj70_Action:				; XREF: Obj70_Index
00021D16 3F28 0008                  		move.w	8(a0),-(sp)
00021D1A 4A68 003A                  		tst.w	$3A(a0)
00021D1E 6700                       		beq.s	Obj70_Move
00021D20 5368 003A                  		subq.w	#1,$3A(a0)
00021D24 6600                       		bne.s	Obj70_Solid
00021D26                            
00021D26                            Obj70_Move:
00021D26 4EB9 0001 5BD6             		jsr	SpeedToPos
00021D2C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00021D30 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00021D32 4EB9 0000 0000             		jsr	Obj70_Move2	; if time is zero, branch
00021D38                            
00021D38                            Obj70_Solid:
00021D38 381F                       		move.w	(sp)+,d4
00021D3A 4A28 0001                  		tst.b	1(a0)
00021D3E 6A00                       		bpl.s	Obj70_ChkDel
00021D40 7200                       		moveq	#0,d1
00021D42 1228 0023                  		move.b	width_pixels(a0),d1
00021D46 0641 000B                  		addi.w	#$B,d1
00021D4A 7400                       		moveq	#0,d2
00021D4C 1428 0016                  		move.b	$16(a0),d2
00021D50 3602                       		move.w	d2,d3
00021D52 5243                       		addq.w	#1,d3
00021D54 4EB9 0001 8F12             		jsr	SolidObject
00021D5A                            
00021D5A                            Obj70_ChkDel:
00021D5A 3028 0032                  		move.w	$32(a0),d0
00021D5E 4EF9 0001 8864             		jmp		MarkObjGone2
00021D64                            ; ===========================================================================
00021D64                            
00021D64                            Obj70_Move2:				; XREF: Obj70_Main
00021D64 1028 0038                  		move.b	$38(a0),d0
00021D68 0240 0018                  		andi.w	#$18,d0
00021D6C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00021D72 43F1 0000                  		lea	(a1,d0.w),a1
00021D76 3159 0010                  		move.w	(a1)+,x_vel(a0)
00021D7A 3159 0012                  		move.w	(a1)+,y_vel(a0)
00021D7E 3159 0034                  		move.w	(a1)+,$34(a0)
00021D82 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00021D86 317C 0007 003A             		move.w	#7,$3A(a0)
00021D8C 4E75                       		rts	
00021D8E                            ; ===========================================================================
00021D8E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00021D96 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00021D9E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00021DA6 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00021DAE                            ; ---------------------------------------------------------------------------
00021DAE                            ; Sprite mappings - large girder block (SBZ)
00021DAE                            ; ---------------------------------------------------------------------------
00021DAE                            Map_obj70:
00021DAE                            	include "_maps\obj70.asm"
00021DAE                            ; ---------------------------------------------------------------------------
00021DAE                            ; Sprite mappings - large girder block (SBZ)
00021DAE                            ; ---------------------------------------------------------------------------
00021DAE 0000                       		dc.w byte_1662A-Map_obj70
00021DB0 0C                         byte_1662A:	dc.b $C
00021DB1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00021DB6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00021DBB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00021DC0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00021DC5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00021DCA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00021DCF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00021DD4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00021DD9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00021DDE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00021DE3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00021DE8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00021DEE 00                         		even
00021DEE 00                         		even
00021DEE                            
00021DEE                            ; ===========================================================================
00021DEE                            ; ---------------------------------------------------------------------------
00021DEE                            ; Object 72 - teleporter (SBZ)
00021DEE                            ; ---------------------------------------------------------------------------
00021DEE                            
00021DEE                            Obj72:					; XREF: Obj_Index
00021DEE 7000                       		moveq	#0,d0
00021DF0 1028 0024                  		move.b	$24(a0),d0
00021DF4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00021DF8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00021DFC 4EF9 0001 8B6E             		jmp	MarkObjGone3
00021E02                            ; ===========================================================================
00021E02 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00021E04 0000                       		dc.w loc_166C8-Obj72_Index
00021E06 0000                       		dc.w loc_1675E-Obj72_Index
00021E08 0000                       		dc.w loc_16798-Obj72_Index
00021E0A                            ; ===========================================================================
00021E0A                            
00021E0A                            Obj72_Main:				; XREF: Obj72_Index
00021E0A 5428 0024                  		addq.b	#2,$24(a0)
00021E0E 1028 0028                  		move.b	$28(a0),d0
00021E12 D040                       		add.w	d0,d0
00021E14 0240 001E                  		andi.w	#$1E,d0
00021E18 45FA 0000                  		lea	Obj72_Data(pc),a2
00021E1C D4F2 0000                  		adda.w	(a2,d0.w),a2
00021E20 315A 003A                  		move.w	(a2)+,$3A(a0)
00021E24 214A 003C                  		move.l	a2,$3C(a0)
00021E28 315A 0036                  		move.w	(a2)+,$36(a0)
00021E2C 315A 0038                  		move.w	(a2)+,$38(a0)
00021E30                            
00021E30                            loc_166C8:				; XREF: Obj72_Index
00021E30 43F8 D000                  		lea	($FFFFD000).w,a1
00021E34 3029 0008                  		move.w	8(a1),d0
00021E38 9068 0008                  		sub.w	8(a0),d0
00021E3C 0828 0000 0022             		btst	#0,$22(a0)
00021E42 6700                       		beq.s	loc_166E0
00021E44 0640 000F                  		addi.w	#$F,d0
00021E48                            
00021E48                            loc_166E0:
00021E48 0C40 0010                  		cmpi.w	#$10,d0
00021E4C 6400                       		bcc.s	locret_1675C
00021E4E 3229 000C                  		move.w	$C(a1),d1
00021E52 9268 000C                  		sub.w	$C(a0),d1
00021E56 0641 0020                  		addi.w	#$20,d1
00021E5A 0C41 0040                  		cmpi.w	#$40,d1
00021E5E 6400                       		bcc.s	locret_1675C
00021E60 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00021E64 6600                       		bne.s	locret_1675C
00021E66 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00021E6C 6600                       		bne.s	loc_1670E
00021E6E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00021E74 6500                       		bcs.s	locret_1675C
00021E76                            
00021E76                            loc_1670E:
00021E76 5428 0024                  		addq.b	#2,$24(a0)
00021E7A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00021E80 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00021E86 337C 0800 0020             		move.w	#$800,inertia(a1)
00021E8C 337C 0000 0010             		move.w	#0,$10(a1)
00021E92 337C 0000 0012             		move.w	#0,$12(a1)
00021E98 08A8 0005 0022             		bclr	#5,$22(a0)
00021E9E 08A9 0005 0022             		bclr	#5,$22(a1)
00021EA4 08E9 0001 0022             		bset	#1,$22(a1)
00021EAA 3368 0008 0008             		move.w	8(a0),8(a1)
00021EB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00021EB6 4228 0032                  		clr.b	$32(a0)
00021EBA 303C 003C                  		move.w	#$3C,d0
00021EBE 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00021EC4                            
00021EC4                            locret_1675C:
00021EC4 4E75                       		rts	
00021EC6                            ; ===========================================================================
00021EC6                            
00021EC6                            loc_1675E:				; XREF: Obj72_Index
00021EC6 43F8 D000                  		lea	($FFFFD000).w,a1
00021ECA 1028 0032                  		move.b	$32(a0),d0
00021ECE 5428 0032                  		addq.b	#2,$32(a0)
00021ED2 4EB9 0000 8DA4             		jsr	(CalcSine).l
00021ED8 EA40                       		asr.w	#5,d0
00021EDA 3428 000C                  		move.w	$C(a0),d2
00021EDE 9440                       		sub.w	d0,d2
00021EE0 3342 000C                  		move.w	d2,$C(a1)
00021EE4 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00021EEA 6600                       		bne.s	locret_16796
00021EEC 6100 0000                  		bsr.w	sub_1681C
00021EF0 5428 0024                  		addq.b	#2,$24(a0)
00021EF4 303C 00B6                  		move.w	#$B6,d0
00021EF8 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play teleport sound
00021EFE                            
00021EFE                            locret_16796:
00021EFE 4E75                       		rts	
00021F00                            ; ===========================================================================
00021F00                            
00021F00                            loc_16798:				; XREF: Obj72_Index
00021F00 588F                       		addq.l	#4,sp
00021F02 43F8 D000                  		lea	($FFFFD000).w,a1
00021F06 5328 002E                  		subq.b	#1,$2E(a0)
00021F0A 6A00                       		bpl.s	loc_167DA
00021F0C 3368 0036 0008             		move.w	$36(a0),8(a1)
00021F12 3368 0038 000C             		move.w	$38(a0),$C(a1)
00021F18 7200                       		moveq	#0,d1
00021F1A 1228 003A                  		move.b	$3A(a0),d1
00021F1E 5801                       		addq.b	#4,d1
00021F20 B228 003B                  		cmp.b	$3B(a0),d1
00021F24 6500                       		bcs.s	loc_167C2
00021F26 7200                       		moveq	#0,d1
00021F28 6000                       		bra.s	loc_16800
00021F2A                            ; ===========================================================================
00021F2A                            
00021F2A                            loc_167C2:
00021F2A 1141 003A                  		move.b	d1,$3A(a0)
00021F2E 2468 003C                  		movea.l	$3C(a0),a2
00021F32 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00021F38 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00021F3E 6000 0000                  		bra.w	sub_1681C
00021F42                            ; ===========================================================================
00021F42                            
00021F42                            loc_167DA:
00021F42 2429 0008                  		move.l	8(a1),d2
00021F46 2629 000C                  		move.l	$C(a1),d3
00021F4A 3029 0010                  		move.w	$10(a1),d0
00021F4E 48C0                       		ext.l	d0
00021F50 E180                       		asl.l	#8,d0
00021F52 D480                       		add.l	d0,d2
00021F54 3029 0012                  		move.w	$12(a1),d0
00021F58 48C0                       		ext.l	d0
00021F5A E180                       		asl.l	#8,d0
00021F5C D680                       		add.l	d0,d3
00021F5E 2342 0008                  		move.l	d2,8(a1)
00021F62 2343 000C                  		move.l	d3,$C(a1)
00021F66 4E75                       		rts	
00021F68                            ; ===========================================================================
00021F68                            
00021F68                            loc_16800:
00021F68 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00021F6E 4228 0024                  		clr.b	$24(a0)
00021F72 4238 F7C8                  		clr.b	($FFFFF7C8).w
00021F76 337C 0000 0010             		move.w	#0,$10(a1)
00021F7C 337C 0200 0012             		move.w	#$200,$12(a1)
00021F82 4E75                       		rts	
00021F84                            
00021F84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00021F84                            
00021F84                            
00021F84                            sub_1681C:
00021F84 7000                       		moveq	#0,d0
00021F86 343C 1000                  		move.w	#$1000,d2
00021F8A 3028 0036                  		move.w	$36(a0),d0
00021F8E 9069 0008                  		sub.w	8(a1),d0
00021F92 6C00                       		bge.s	loc_16830
00021F94 4440                       		neg.w	d0
00021F96 4442                       		neg.w	d2
00021F98                            
00021F98                            loc_16830:
00021F98 7200                       		moveq	#0,d1
00021F9A 363C 1000                  		move.w	#$1000,d3
00021F9E 3228 0038                  		move.w	$38(a0),d1
00021FA2 9269 000C                  		sub.w	$C(a1),d1
00021FA6 6C00                       		bge.s	loc_16844
00021FA8 4441                       		neg.w	d1
00021FAA 4443                       		neg.w	d3
00021FAC                            
00021FAC                            loc_16844:
00021FAC B240                       		cmp.w	d0,d1
00021FAE 6500                       		bcs.s	loc_1687A
00021FB0 7200                       		moveq	#0,d1
00021FB2 3228 0038                  		move.w	$38(a0),d1
00021FB6 9269 000C                  		sub.w	$C(a1),d1
00021FBA 4841                       		swap	d1
00021FBC 83C3                       		divs.w	d3,d1
00021FBE 7000                       		moveq	#0,d0
00021FC0 3028 0036                  		move.w	$36(a0),d0
00021FC4 9069 0008                  		sub.w	8(a1),d0
00021FC8 6700                       		beq.s	loc_16866
00021FCA 4840                       		swap	d0
00021FCC 81C1                       		divs.w	d1,d0
00021FCE                            
00021FCE                            loc_16866:
00021FCE 3340 0010                  		move.w	d0,$10(a1)
00021FD2 3343 0012                  		move.w	d3,$12(a1)
00021FD6 4A41                       		tst.w	d1
00021FD8 6A00                       		bpl.s	loc_16874
00021FDA 4441                       		neg.w	d1
00021FDC                            
00021FDC                            loc_16874:
00021FDC 3141 002E                  		move.w	d1,$2E(a0)
00021FE0 4E75                       		rts	
00021FE2                            ; ===========================================================================
00021FE2                            
00021FE2                            loc_1687A:
00021FE2 7000                       		moveq	#0,d0
00021FE4 3028 0036                  		move.w	$36(a0),d0
00021FE8 9069 0008                  		sub.w	8(a1),d0
00021FEC 4840                       		swap	d0
00021FEE 81C2                       		divs.w	d2,d0
00021FF0 7200                       		moveq	#0,d1
00021FF2 3228 0038                  		move.w	$38(a0),d1
00021FF6 9269 000C                  		sub.w	$C(a1),d1
00021FFA 6700                       		beq.s	loc_16898
00021FFC 4841                       		swap	d1
00021FFE 83C0                       		divs.w	d0,d1
00022000                            
00022000                            loc_16898:
00022000 3341 0012                  		move.w	d1,$12(a1)
00022004 3342 0010                  		move.w	d2,$10(a1)
00022008 4A40                       		tst.w	d0
0002200A 6A00                       		bpl.s	loc_168A6
0002200C 4440                       		neg.w	d0
0002200E                            
0002200E                            loc_168A6:
0002200E 3140 002E                  		move.w	d0,$2E(a0)
00022012 4E75                       		rts	
00022014                            ; End of function sub_1681C
00022014                            
00022014                            ; ===========================================================================
00022014 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0002201A 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00022020 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00022024 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0002202A 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00022030 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00022036 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0002203C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00022042 0884 0298 0894             		dc.w $884, $298, $894
00022048 0270 0894 0190             		dc.w $270, $894, $190
0002204E 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00022054 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0002205A 1184 0498 1158             		dc.w $1184, $498, $1158
00022060 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00022066 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0002206C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00022072 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00022078 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0002207E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00022084 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0002208A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00022090 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00022096 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0002209C                            ; ===========================================================================
0002209C                            ; ---------------------------------------------------------------------------
0002209C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0002209C                            ; ---------------------------------------------------------------------------
0002209C                            
0002209C                            Obj78:					; XREF: Obj_Index
0002209C 7000                       		moveq	#0,d0
0002209E 1028 0024                  		move.b	routine(a0),d0
000220A2 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000220A6 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000220AA                            ; ===========================================================================
000220AA 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000220AC 0000                       		dc.w Obj78_Action-Obj78_Index
000220AE 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000220B0 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000220B2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000220B4 0000                       		dc.w Obj78_Delete-Obj78_Index
000220B6 0000                       		dc.w loc_16CC0-Obj78_Index
000220B8                            ; ===========================================================================
000220B8                            
000220B8                            locret_16950:
000220B8 4E75                       		rts	
000220BA                            ; ===========================================================================
000220BA                            
000220BA                            Obj78_Main:				; XREF: Obj78_Index
000220BA 117C 0007 0016             		move.b	#7,$16(a0)
000220C0 117C 0008 0017             		move.b	#8,$17(a0)
000220C6 4EB9 0001 5BB6             		jsr	ObjectFall
000220CC 4EBA E512                  		jsr	ObjHitFloor
000220D0 4A41                       		tst.w	d1
000220D2 6AE4                       		bpl.s	locret_16950
000220D4 D368 000C                  		add.w	d1,$C(a0)
000220D8 4268 0012                  		clr.w	y_vel(a0)
000220DC 5428 0024                  		addq.b	#2,routine(a0)
000220E0 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000220E8 317C 22B0 0002             		move.w	#$22B0,2(a0)
000220EE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000220F4 6700                       		beq.s	loc_16996
000220F6 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000220FC                            
000220FC                            loc_16996:
000220FC 0228 0003 0001             		andi.b	#3,1(a0)
00022102 0028 0004 0001             		ori.b	#4,1(a0)
00022108 1168 0001 0022             		move.b	1(a0),$22(a0)
0002210E 337C 0280 0018             		move.w	#$280,priority(a1)
00022114 137C 0008 0023             		move.b	#8,width_pixels(a1)
0002211A 117C 000B 0020             		move.b	#$B,collision_flags(a0)
00022120 3428 0008                  		move.w	8(a0),d2
00022124 7A0C                       		moveq	#$C,d5
00022126 0828 0000 0022             		btst	#0,$22(a0)
0002212C 6700                       		beq.s	loc_169CA
0002212E 4445                       		neg.w	d5
00022130                            
00022130                            loc_169CA:
00022130 1C3C 0004                  		move.b	#4,d6
00022134 7600                       		moveq	#0,d3
00022136 7804                       		moveq	#4,d4
00022138 2448                       		movea.l	a0,a2
0002213A 7202                       		moveq	#2,d1
0002213C                            
0002213C                            Obj78_LoadBody:
0002213C 4EB9 0001 671E             		jsr	SingleObjLoad2
00022142 6600                       		bne.s	Obj78_QuitLoad
00022144 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00022148 1346 0024                  		move.b	d6,routine(a1)
0002214C 5406                       		addq.b	#2,d6
0002214E 2368 0004 0004             		move.l	4(a0),4(a1)
00022154 3368 0002 0002             		move.w	2(a0),2(a1)
0002215A 337C 0280 0018             		move.w	#$280,priority(a1)
00022160 137C 0008 0023             		move.b	#8,width_pixels(a1)
00022166 137C 00CB 0020             		move.b	#$CB,collision_flags(a1)
0002216C D445                       		add.w	d5,d2
0002216E 3342 0008                  		move.w	d2,8(a1)
00022172 3368 000C 000C             		move.w	$C(a0),$C(a1)
00022178 1368 0022 0022             		move.b	$22(a0),$22(a1)
0002217E 1368 0022 0001             		move.b	$22(a0),1(a1)
00022184 137C 0008 001A             		move.b	#8,$1A(a1)
0002218A 234A 003C                  		move.l	a2,$3C(a1)
0002218E 1344 003C                  		move.b	d4,$3C(a1)
00022192 5804                       		addq.b	#4,d4
00022194 2449                       		movea.l	a1,a2
00022196                            
00022196                            Obj78_QuitLoad:
00022196 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0002219A                            
0002219A 117C 0007 002A             		move.b	#7,objoff_2A(a0)
000221A0 4228 003C                  		clr.b	$3C(a0)
000221A4                            
000221A4                            Obj78_Action:				; XREF: Obj78_Index
000221A4 4A28 0022                  		tst.b	$22(a0)
000221A8 6B00 0000                  		bmi.w	loc_16C96
000221AC 7000                       		moveq	#0,d0
000221AE 1028 0025                  		move.b	$25(a0),d0
000221B2 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000221B6 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000221BA 1228 002B                  		move.b	$2B(a0),d1
000221BE 6A00                       		bpl.s	Obj78_Display
000221C0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000221C6 1028 0026                  		move.b	$26(a0),d0
000221CA 0240 007F                  		andi.w	#$7F,d0
000221CE 5828 0026                  		addq.b	#4,$26(a0)
000221D2 1031 0000                  		move.b	(a1,d0.w),d0
000221D6 6A00                       		bpl.s	Obj78_AniHead
000221D8 08A8 0007 002B             		bclr	#7,$2B(a0)
000221DE 6000                       		bra.s	Obj78_Display
000221E0                            ; ===========================================================================
000221E0                            
000221E0                            Obj78_AniHead:
000221E0 0201 0010                  		andi.b	#$10,d1
000221E4 D001                       		add.b	d1,d0
000221E6 1140 001A                  		move.b	d0,$1A(a0)
000221EA                            
000221EA                            Obj78_Display:
000221EA 3028 0008                  		move.w	8(a0),d0
000221EE 0240 FF80                  		andi.w	#$FF80,d0
000221F2 3238 F700                  		move.w	($FFFFF700).w,d1
000221F6 0441 0080                  		subi.w	#$80,d1
000221FA 0241 FF80                  		andi.w	#$FF80,d1
000221FE 9041                       		sub.w	d1,d0
00022200 0C40 0280                  		cmpi.w	#$280,d0
00022204 6200 0000                  		bhi.w	Obj78_ChkGone
00022208 4EF9 0001 5C3C             		jmp	DisplaySprite
0002220E                            ; ===========================================================================
0002220E                            
0002220E                            Obj78_ChkGone:
0002220E                            ;		lea	(v_objstate).w,a2
0002220E 7000                       		moveq	#0,d0
00022210 3028 0014                  		move.w	respawn_index(a0),d0
00022214                            ;        move.w	respawn_index(a0),d0
00022214 3440                       	    movea.w	d0,a2		
00022216 6700                       		beq.s	loc_16ABC
00022218 0892 0007                  		bclr	#7,(a2)
0002221C                            
0002221C                            loc_16ABC:
0002221C 117C 000A 0024             		move.b	#$A,routine(a0)	; run "Obj78_Delete" routine
00022222 4E75                       		rts	
00022224                            ; ===========================================================================
00022224                            
00022224                            Obj78_Delete:				; XREF: Obj78_Index
00022224 4EF9 0001 5BF0             		jmp	DeleteObject
0002222A                            ; ===========================================================================
0002222A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0002222C 0000                       		dc.w loc_16B02-Obj78_Index2
0002222E                            ; ===========================================================================
0002222E                            
0002222E                            Obj78_Move:				; XREF: Obj78_Index2
0002222E 5328 002A                  		subq.b	#1,objoff_2A(a0)
00022232 6B00                       		bmi.s	Obj78_Move2
00022234 4E75                       		rts	
00022236                            ; ===========================================================================
00022236                            
00022236                            Obj78_Move2:
00022236 5428 0025                  		addq.b	#2,$25(a0)
0002223A 117C 0010 002A             		move.b	#$10,objoff_2A(a0)
00022240 317C FF40 0010             		move.w	#-$C0,x_vel(a0)
00022246 317C 0040 001C             		move.w	#$40,$1C(a0)
0002224C 0868 0004 002B             		bchg	#4,$2B(a0)
00022252 6600                       		bne.s	loc_16AFC
00022254 4268 0010                  		clr.w	x_vel(a0)
00022258 4468 001C                  		neg.w	$1C(a0)
0002225C                            
0002225C                            loc_16AFC:
0002225C 08E8 0007 002B             		bset	#7,$2B(a0)
00022262                            
00022262                            loc_16B02:				; XREF: Obj78_Index2
00022262 5328 002A                  		subq.b	#1,objoff_2A(a0)
00022266 6B00                       		bmi.s	loc_16B5E
00022268 2F28 0008                  		move.l	8(a0),-(sp)
0002226C 2428 0008                  		move.l	8(a0),d2
00022270 3028 0010                  		move.w	x_vel(a0),d0
00022274 0828 0000 0022             		btst	#0,$22(a0)
0002227A 6700                       		beq.s	loc_16B1E
0002227C 4440                       		neg.w	d0
0002227E                            
0002227E                            loc_16B1E:
0002227E 48C0                       		ext.l	d0
00022280 E180                       		asl.l	#8,d0
00022282 D480                       		add.l	d0,d2
00022284 2142 0008                  		move.l	d2,8(a0)
00022288 4EBA E356                  		jsr	ObjHitFloor
0002228C 241F                       		move.l	(sp)+,d2
0002228E 0C41 FFF8                  		cmpi.w	#-8,d1
00022292 6D00                       		blt.s	loc_16B70
00022294 0C41 000C                  		cmpi.w	#$C,d1
00022298 6C00                       		bge.s	loc_16B70
0002229A D368 000C                  		add.w	d1,$C(a0)
0002229E 4842                       		swap	d2
000222A0 B468 0008                  		cmp.w	8(a0),d2
000222A4 6700                       		beq.s	locret_16B5C
000222A6 7000                       		moveq	#0,d0
000222A8 1028 003C                  		move.b	$3C(a0),d0
000222AC 5228 003C                  		addq.b	#1,$3C(a0)
000222B0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000222B6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000222BA                            
000222BA                            locret_16B5C:
000222BA 4E75                       		rts	
000222BC                            ; ===========================================================================
000222BC                            
000222BC                            loc_16B5E:
000222BC 5528 0025                  		subq.b	#2,$25(a0)
000222C0 117C 0007 002A             		move.b	#7,objoff_2A(a0)
000222C6 317C 0000 0010             		move.w	#0,x_vel(a0)
000222CC 4E75                       		rts	
000222CE                            ; ===========================================================================
000222CE                            
000222CE                            loc_16B70:
000222CE 2142 0008                  		move.l	d2,8(a0)
000222D2 0868 0000 0022             		bchg	#0,$22(a0)
000222D8 1168 0022 0001             		move.b	$22(a0),1(a0)
000222DE 7000                       		moveq	#0,d0
000222E0 1028 003C                  		move.b	$3C(a0),d0
000222E4 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000222EA 5228 003C                  		addq.b	#1,$3C(a0)
000222EE 0228 000F 003C             		andi.b	#$F,$3C(a0)
000222F4 4E75                       		rts	
000222F6                            ; ===========================================================================
000222F6                            
000222F6                            Obj78_BodySeg2:				; XREF: Obj78_Index
000222F6 2268 003C                  		movea.l	$3C(a0),a1
000222FA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00022300 6A00                       		bpl.s	Obj78_BodySeg1
00022302 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00022308 1028 0026                  		move.b	$26(a0),d0
0002230C 0240 007F                  		andi.w	#$7F,d0
00022310 5828 0026                  		addq.b	#4,$26(a0)
00022314 4A31 0004                  		tst.b	4(a1,d0.w)
00022318 6A00                       		bpl.s	Obj78_AniBody
0002231A 5828 0026                  		addq.b	#4,$26(a0)
0002231E                            
0002231E                            Obj78_AniBody:
0002231E 1031 0000                  		move.b	(a1,d0.w),d0
00022322 5000                       		addq.b	#8,d0
00022324 1140 001A                  		move.b	d0,$1A(a0)
00022328                            
00022328                            Obj78_BodySeg1:				; XREF: Obj78_Index
00022328 2268 003C                  		movea.l	$3C(a0),a1
0002232C 4A28 0022                  		tst.b	$22(a0)
00022330 6B00 0000                  		bmi.w	loc_16C90
00022334 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0002233A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00022340 6700 0000                  		beq.w	loc_16C64
00022344 3169 001C 001C             		move.w	$1C(a1),$1C(a0)
0002234A 3029 0010                  		move.w	x_vel(a1),d0
0002234E D069 001C                  		add.w	$1C(a1),d0
00022352 3140 0010                  		move.w	d0,x_vel(a0)
00022356 2428 0008                  		move.l	8(a0),d2
0002235A 2602                       		move.l	d2,d3
0002235C 3028 0010                  		move.w	x_vel(a0),d0
00022360 0828 0000 0022             		btst	#0,$22(a0)
00022366 6700                       		beq.s	loc_16C0C
00022368 4440                       		neg.w	d0
0002236A                            
0002236A                            loc_16C0C:
0002236A 48C0                       		ext.l	d0
0002236C E180                       		asl.l	#8,d0
0002236E D480                       		add.l	d0,d2
00022370 2142 0008                  		move.l	d2,8(a0)
00022374 4843                       		swap	d3
00022376 B668 0008                  		cmp.w	8(a0),d3
0002237A 6700                       		beq.s	loc_16C64
0002237C 7000                       		moveq	#0,d0
0002237E 1028 003C                  		move.b	$3C(a0),d0
00022382 1231 002C                  		move.b	$2C(a1,d0.w),d1
00022386 0C01 0080                  		cmpi.b	#-$80,d1
0002238A 6600                       		bne.s	loc_16C50
0002238C 4843                       		swap	d3
0002238E 2143 0008                  		move.l	d3,8(a0)
00022392 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00022396 0868 0000 0022             		bchg	#0,$22(a0)
0002239C 1168 0022 0001             		move.b	$22(a0),1(a0)
000223A2 5228 003C                  		addq.b	#1,$3C(a0)
000223A6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000223AC 6000                       		bra.s	loc_16C64
000223AE                            ; ===========================================================================
000223AE                            
000223AE                            loc_16C50:
000223AE 4881                       		ext.w	d1
000223B0 D368 000C                  		add.w	d1,$C(a0)
000223B4 5228 003C                  		addq.b	#1,$3C(a0)
000223B8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000223BE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000223C2                            
000223C2                            loc_16C64:
000223C2 0C29 000C 0024             		cmpi.b	#$C,routine(a1)
000223C8 6700                       		beq.s	loc_16C90
000223CA 0C11 0027                  		cmpi.b	#$27,0(a1)
000223CE 6700                       		beq.s	loc_16C7C
000223D0 0C29 000A 0024             		cmpi.b	#$A,routine(a1)
000223D6 6600                       		bne.s	loc_16C82
000223D8                            
000223D8                            loc_16C7C:
000223D8 117C 000A 0024             		move.b	#$A,routine(a0)
000223DE                            
000223DE                            loc_16C82:
000223DE 4EF9 0001 5C3C             		jmp	DisplaySprite
000223E4                            
000223E4                            ; ===========================================================================
000223E4 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000223EC                            ; ===========================================================================
000223EC                            
000223EC                            loc_16C90:
000223EC 08E9 0007 0022             		bset	#7,$22(a1)
000223F2                            
000223F2                            loc_16C96:
000223F2 7000                       		moveq	#0,d0
000223F4 1028 0024                  		move.b	routine(a0),d0
000223F8 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000223FC 0828 0000 0022             		btst	#0,$22(a0)
00022402 6700                       		beq.s	loc_16CAA
00022404 4440                       		neg.w	d0
00022406                            
00022406                            loc_16CAA:
00022406 3140 0010                  		move.w	d0,x_vel(a0)
0002240A 317C FC00 0012             		move.w	#-$400,y_vel(a0)
00022410 117C 000C 0024             		move.b	#$C,routine(a0)
00022416 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0002241C                            
0002241C                            loc_16CC0:				; XREF: Obj78_Index
0002241C 4EB9 0001 5BB6             		jsr	ObjectFall
00022422 4A68 0012                  		tst.w	y_vel(a0)
00022426 6B00                       		bmi.s	loc_16CE0
00022428 4EBA E1B6                  		jsr	ObjHitFloor
0002242C 4A41                       		tst.w	d1
0002242E 6A00                       		bpl.s	loc_16CE0
00022430 D368 000C                  		add.w	d1,$C(a0)
00022434 317C FC00 0012             		move.w	#-$400,y_vel(a0)
0002243A                            
0002243A                            loc_16CE0:
0002243A 4A28 0001                  		tst.b	1(a0)
0002243E 6A00 FDCE                  		bpl.w	Obj78_ChkGone
00022442 4EF9 0001 5C3C             		jmp	DisplaySprite
00022448                            ; ===========================================================================
00022448                            Ani_obj78:
00022448                            	include "_anim\obj78.asm"
00022448                            ; ---------------------------------------------------------------------------
00022448                            ; Animation script - Caterkiller enemy (uses non-standard format)
00022448                            ; ---------------------------------------------------------------------------
00022448 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00022458 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00022468 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00022478 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00022488 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00022498 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000224A8 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000224B8 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000224C8                            	even
000224C8                            	even
000224C8                            
000224C8                            ; ---------------------------------------------------------------------------
000224C8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000224C8                            ; ---------------------------------------------------------------------------
000224C8                            Map_obj78:
000224C8                            	include "_maps\obj78.asm"
000224C8                            ; ---------------------------------------------------------------------------
000224C8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000224C8                            ; ---------------------------------------------------------------------------
000224C8 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000224CC 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000224D0 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000224D4 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000224D8 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000224DC 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000224E0 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000224E4 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000224E8 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000224EC 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000224F0 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000224F4 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000224F8 01                         byte_16D9E:	dc.b 1
000224F9 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000224FE 01                         byte_16DA4:	dc.b 1
000224FF F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00022504 01                         byte_16DAA:	dc.b 1
00022505 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0002250A 01                         byte_16DB0:	dc.b 1
0002250B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00022510 01                         byte_16DB6:	dc.b 1
00022511 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00022516 01                         byte_16DBC:	dc.b 1
00022517 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0002251C 01                         byte_16DC2:	dc.b 1
0002251D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00022522 01                         byte_16DC8:	dc.b 1
00022523 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00022528 01                         byte_16DCE:	dc.b 1
00022529 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0002252E 01                         byte_16DD4:	dc.b 1
0002252F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00022534 01                         byte_16DDA:	dc.b 1
00022535 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0002253A 01                         byte_16DE0:	dc.b 1
0002253B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00022540 01                         byte_16DE6:	dc.b 1
00022541 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00022546 01                         byte_16DEC:	dc.b 1
00022547 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0002254C 01                         byte_16DF2:	dc.b 1
0002254D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00022552 01                         byte_16DF8:	dc.b 1
00022553 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00022558 01                         byte_16DFE:	dc.b 1
00022559 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0002255E 01                         byte_16E04:	dc.b 1
0002255F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00022564 01                         byte_16E0A:	dc.b 1
00022565 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0002256A 01                         byte_16E10:	dc.b 1
0002256B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00022570 01                         byte_16E16:	dc.b 1
00022571 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00022576 01                         byte_16E1C:	dc.b 1
00022577 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0002257C 01                         byte_16E22:	dc.b 1
0002257D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00022582 01                         byte_16E28:	dc.b 1
00022583 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00022588                            		even
00022588                            		even
00022588                            
00022588                            ; ===========================================================================
00022588                            ; ---------------------------------------------------------------------------
00022588                            ; Object 79 - Star pole / starpost / checkpoint (Modified port from Sonic 2F)
00022588                            ; ---------------------------------------------------------------------------
00022588                            
00022588                            Obj79:					; XREF: Obj_Index
00022588 7000                       		moveq	#0,d0
0002258A 1028 0024                  		move.b	routine(a0),d0
0002258E 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00022592 4EFB 1000                  		jmp	Obj79_Index(pc,d1.w)
00022596                            ;		jmp	MarkObjGone
00022596                            ; ===========================================================================
00022596 0000                       Obj79_Index:	dc.w Obj79_Init-Obj79_Index; 0
00022598 0000                       	dc.w Obj79_Main-Obj79_Index; 2
0002259A 0000                       	dc.w Obj79_Animate-Obj79_Index; 4
0002259C 0000                       	dc.w Obj79_Dongle-Obj79_Index; 6
0002259E                            ;	dc.w Obj79_Star-Obj79_Index; 8
0002259E                            ; ===========================================================================
0002259E                            
0002259E                            Obj79_Init:
0002259E 5428 0024                  	addq.b	#2,routine(a0) ; => Obj79_Main
000225A2 217C 0000 0000 0004        	move.l	#Map_obj79,4(a0)
000225AA 317C 06C0 0002             	move.w	#($D800/$20),2(a0)
000225B0                            ;	bsr.w	JmpTo3_Adjust2PArtPointer
000225B0 117C 0004 0001             	move.b	#4,render_flags(a0)
000225B6 117C 0008 0023             	move.b	#8,width_pixels(a0)
000225BC 317C 0280 0018             	move.w	#$280,priority(a0)
000225C2                            ;	lea	(v_objstate).w,a2
000225C2 7000                       	moveq	#0,d0
000225C4 3028 0014                  	move.w	respawn_index(a0),d0
000225C8 3440                           movea.w	d0,a2
000225CA                            ;	bclr	#7,(a2)
000225CA 0812 0000                  	btst	#0,(a2)
000225CE 6600                       	bne.s	Obj79_FlashingLamp
000225D0 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
000225D4 0201 007F                  	andi.b	#$7F,d1
000225D8 1428 0028                  	move.b	subtype(a0),d2
000225DC 0202 007F                  	andi.b	#$7F,d2
000225E0 B202                       	cmp.b	d2,d1
000225E2 6500                       	bcs.s	Obj79_Main
000225E4                            
000225E4                            Obj79_FlashingLamp:
000225E4 08D2 0000                  	bset	#0,(a2)
000225E8 117C 0002 001C             	move.b	#2,anim(a0)
000225EE                            
000225EE                            ; loc_1F12C:
000225EE                            Obj79_Main:
000225EE 4A78 FE08                  	tst.w	(Debug_placement_mode).w
000225F2 6600 0000                  	bne.w	Obj79_Animate
000225F6 47F8 D000                  	lea	(MainCharacter).w,a3 ; a3=character
000225FA 1238 FE30                  	move.b	(Last_star_pole_hit).w,d1
000225FE 6100                       	bsr.s	Obj79_CheckActivation
00022600                            ;	tst.w	(Two_player_mode).w
00022600                            ;	beq.w	Obj79_Animate
00022600                            ;	lea	(Sidekick).w,a3 ; a3=character
00022600                            ;	move.b	(Last_star_pole_hit_2P).w,d1
00022600                            ;	bsr.s	Obj79_CheckActivation
00022600 6000 0000                  	bra.w	Obj79_Animate
00022604                            ; ---------------------------------------------------------------------------
00022604                            ; loc_1F154:
00022604                            Obj79_CheckActivation:
00022604 0201 007F                  	andi.b	#$7F,d1
00022608 1428 0028                  	move.b	subtype(a0),d2
0002260C 0202 007F                  	andi.b	#$7F,d2
00022610 B202                       	cmp.b	d2,d1
00022612 6400 0000                  	bcc.w	loc_1F222
00022616 302B 0008                  	move.w	x_pos(a3),d0
0002261A 9068 0008                  	sub.w	x_pos(a0),d0
0002261E 5040                       	addi.w	#8,d0
00022620 0C40 0010                  	cmpi.w	#$10,d0
00022624 6400 0000                  	bcc.w	return_1F220
00022628 302B 000C                  	move.w	y_pos(a3),d0
0002262C 9068 000C                  	sub.w	y_pos(a0),d0
00022630 0640 0040                  	addi.w	#$40,d0
00022634 0C40 0068                  	cmpi.w	#$68,d0
00022638 6400 0000                  	bcc.w	return_1F220
0002263C 303C 0063                  	move.w	#$63,d0 ; checkpoint ding-dong sound
00022640 4EB9 0000 3212             	jsr	(PlaySound).l
00022646 4EB9 0001 6708             	jsr	(SingleObjLoad).l
0002264C 6600                       	bne.s	loc_1F206
0002264E 12BC 0079                  	move.b	#$79,0(a1) ; load obj79
00022652 137C 0006 0024             	move.b	#6,routine(a1) ; => Obj79_Dongle
00022658 3368 0008 0030             	move.w	x_pos(a0),objoff_30(a1)
0002265E 3368 000C 0032             	move.w	y_pos(a0),objoff_32(a1)
00022664 0469 0014 0032             	subi.w	#$14,objoff_32(a1)
0002266A 2368 0004 0004             	move.l	mappings(a0),mappings(a1)
00022670 3368 0002 0002             	move.w	art_tile(a0),art_tile(a1)
00022676 137C 0004 0001             	move.b	#4,render_flags(a1)
0002267C 137C 0008 0023             	move.b	#8,width_pixels(a1)
00022682 337C 0200 0018             	move.w	#$200,priority(a1)
00022688 137C 0002 001A             	move.b	#2,mapping_frame(a1)
0002268E 337C 0020 0036             	move.w	#$20,objoff_36(a1)
00022694 3348 003E                  	move.w	a0,parent(a1)
00022698                            ;	tst.w	(Two_player_mode).w
00022698                            ;	bne.s	loc_1F206
00022698                            ;	cmpi.b	#7,(Emerald_count).w
00022698                            ;	beq.s	loc_1F206
00022698                            ;	cmpi.w	#$32,(Ring_count).w
00022698                            ;	bcs.s	loc_1F206
00022698                            ;	move.w	(Player_option).w,d0
00022698                            ;	cmpi.b	#3,d0	; is the player Metal?
00022698                            ;	beq.w	loc_1F206
00022698                            ;	bsr.w	Obj79_MakeSpecialStars
00022698                            
00022698                            loc_1F206:
00022698 117C 0001 001C             	move.b	#1,anim(a0)
0002269E 6100 0000                  	bsr.w	Obj79_StoreInfo
000226A2                            ;	lea	(v_objstate).w,a2
000226A2 7000                       	moveq	#0,d0
000226A4 3028 0014                  	move.w	respawn_index(a0),d0
000226A8 3440                           movea.w	d0,a2
000226AA 08D2 0000                  	bset	#0,(a2)
000226AE                            
000226AE                            return_1F220:
000226AE 4E75                       	rts
000226B0                            ; ===========================================================================
000226B0                            
000226B0                            loc_1F222:
000226B0 4A28 001C                  	tst.b	anim(a0)
000226B4 6600                       	bne.s	return_1F22E
000226B6 117C 0002 001C             	move.b	#2,anim(a0)
000226BC                            
000226BC                            return_1F22E:
000226BC 4E75                       	rts
000226BE                            ; ===========================================================================
000226BE                            ; loc_1F230:
000226BE                            Obj79_Animate:
000226BE 43F9 0000 0000             	lea	(Ani_Obj79).l,a1
000226C4 6100 0000                  	bsr.w	JmpTo2_AnimateSprite
000226C8 4EF9 0001 882E             	jmp	MarkObjGone
000226CE                            ; ===========================================================================
000226CE                            ; loc_1F240:
000226CE                            Obj79_Dongle:
000226CE 5368 0036                  	subq.w	#1,objoff_36(a0)
000226D2 6A00                       	bpl.s	Obj79_MoveDonglyThing
000226D4 3268 003E                  	movea.w	parent(a0),a1 ; a1=object
000226D8 0C11 0079                  	cmpi.b	#$79,(a1)
000226DC 6600                       	bne.s	@dongle
000226DE 137C 0002 001C             	move.b	#2,anim(a1)
000226E4 137C 0000 001A             	move.b	#0,mapping_frame(a1)
000226EA                            @dongle:
000226EA 4EF9 0001 5BF0             	jmp	DeleteObject
000226F0                            ; ===========================================================================
000226F0                            ; loc_1F262:
000226F0                            Obj79_MoveDonglyThing:
000226F0 1028 0026                  	move.b	angle(a0),d0
000226F4 0428 0010 0026             	subi.b	#$10,angle(a0)
000226FA 0400 0040                  	subi.b	#$40,d0
000226FE 4EB9 0000 8DA4             	jsr	(CalcSine).l
00022704 C3FC 0C00                  	muls.w	#$C00,d1
00022708 4841                       	swap	d1
0002270A D268 0030                  	add.w	objoff_30(a0),d1
0002270E 3141 0008                  	move.w	d1,x_pos(a0)
00022712 C1FC 0C00                  	muls.w	#$C00,d0
00022716 4840                       	swap	d0
00022718 D068 0032                  	add.w	objoff_32(a0),d0
0002271C 3140 000C                  	move.w	d0,y_pos(a0)
00022720 4EF9 0001 882E             	jmp	MarkObjGone
00022726                            ; ---------------------------------------------------------------------------
00022726                            ; Subroutine to	store information when you hit a starpost
00022726                            ; ---------------------------------------------------------------------------
00022726                            
00022726                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00022726 11E8 0028 FE30             		move.b	subtype(a0),($FFFFFE30).w 		; lamppost number
0002272C 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00022732 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00022738 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0002273E 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00022744                            ;		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00022744 21F8 FE22 FE38             		move.l	(Timer).w,($FFFFFE38).w 	; time
0002274A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00022750 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00022756 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0002275C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00022762 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00022768 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0002276E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00022774 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0002277A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00022780 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00022786 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0002278C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00022792 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00022798 4E75                       		rts	
0002279A                            
0002279A                            ; ---------------------------------------------------------------------------
0002279A                            ; Subroutine to	load stored info when you start	a level	from a starpost
0002279A                            ; ---------------------------------------------------------------------------
0002279A                            
0002279A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002279A                            
0002279A                            
0002279A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0002279A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000227A0 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000227A6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000227AC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000227B2                            ;		move.b	($FFFFFE54).w,($FFFFFE1B).w
000227B2 4278 FE20                  		clr.w	($FFFFFE20).w
000227B6 11FC 0019 FFE0             		move.b	#$19,($FFFFFFE0).w
000227BC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(Timer).w
000227C2 11FC 003B FE25             		move.b	#59,(Timer_Centisecond).w
000227C8 5338 FE24                  		subq.b	#1,(Timer_Second).w
000227CC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000227D2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000227D8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000227DE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000227E4 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000227EA 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000227F0 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000227F6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000227FC 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00022802 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00022808 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0002280E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00022814 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0002281A 6600                       		bne.s	loc_170E4
0002281C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00022822 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00022828 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0002282E                            
0002282E                            loc_170E4:
0002282E 4A38 FE30                  		tst.b	($FFFFFE30).w
00022832 6A00                       		bpl.s	locret_170F6
00022834 3038 FE32                  		move.w	($FFFFFE32).w,d0
00022838 0440 00A0                  		subi.w	#$A0,d0
0002283C 31C0 F728                  		move.w	d0,($FFFFF728).w
00022840                            
00022840                            locret_170F6:
00022840 4E75                       		rts	
00022842                            ; End of function Obj79_LoadInfo
00022842                            
00022842 0000                       Ani_Obj79:	dc.w byte_1F41A-Ani_Obj79
00022844 0000                       	dc.w byte_1F41D-Ani_Obj79
00022846 0000                       	dc.w byte_1F420-Ani_Obj79
00022848                            byte_1F41A:
00022848 0F00 FF                    	dc.b  $F,  0,$FF
0002284B                            byte_1F41D:
0002284B 0F01 FF                    	dc.b  $F,  1,$FF
0002284E                            byte_1F420:
0002284E 0300 04FF                  	dc.b   3,  0,  4,$FF
00022852                            	even
00022852                            
00022852                            ; ===========================================================================
00022852                            ; ---------------------------------------------------------------------------
00022852                            ; Sprite mappings - starpost
00022852                            ; ---------------------------------------------------------------------------
00022852                            Map_obj79:
00022852                            	include "_maps\obj79s2.asm"
00022852                            ; --------------------------------------------------------------------------------
00022852                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022852                            ; --------------------------------------------------------------------------------
00022852                            
00022852                            SME_Y2pSa:	
00022852 0000 0000                  		dc.w SME_Y2pSa_A-SME_Y2pSa, SME_Y2pSa_1F-SME_Y2pSa	
00022856 0000 0000                  		dc.w SME_Y2pSa_2F-SME_Y2pSa, SME_Y2pSa_35-SME_Y2pSa	
0002285A 0000                       		dc.w SME_Y2pSa_3B-SME_Y2pSa	
0002285C 04                         SME_Y2pSa_A:	dc.b 4	
0002285D E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022862 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022867 F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
0002286C D805 0000 F8               		dc.b $D8, 5, 0, 0, $F8	
00022871 03                         SME_Y2pSa_1F:	dc.b 3	
00022872 E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022877 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
0002287C F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
00022881 01                         SME_Y2pSa_2F:	dc.b 1	
00022882 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00022887 01                         SME_Y2pSa_35:	dc.b 1	
00022888 F805 2000 F8               		dc.b $F8, 5, $20, 0, $F8	
0002288D 04                         SME_Y2pSa_3B:	dc.b 4	
0002288E E801 2004 FC               		dc.b $E8, 1, $20, 4, $FC	
00022893 F803 2006 F8               		dc.b $F8, 3, $20, 6, $F8	
00022898 F803 2806 00               		dc.b $F8, 3, $28, 6, 0	
0002289D D805 2000 F8               		dc.b $D8, 5, $20, 0, $F8	
000228A2                            		even
000228A2                            		even
000228A2                            
000228A2                            ; ===========================================================================
000228A2                            JmpTo2_AnimateSprite:
000228A2 4EF9 0001 2618             	jmp	AnimateSprite
000228A8                            ;	rts
000228A8                            
000228A8                            JmpTo10_DeleteObject:
000228A8 4EF9 0001 5BF0             	jmp	DeleteObject
000228AE                            ; ===========================================================================
000228AE 4E71                       	nop
000228B0                            
000228B0                            JmpTo_MarkObjGone:
000228B0 4EF9 0001 882E             	jmp	MarkObjGone
000228B6                            ; ===========================================================================
000228B6                            
000228B6                            ;JmpTo2_AnimateSprite
000228B6                            ;	jmp	AnimateSprite
000228B6                            ; ===========================================================================
000228B6                            ; ---------------------------------------------------------------------------
000228B6                            ; Object 7D - hidden points at the end of a level
000228B6                            ; ---------------------------------------------------------------------------
000228B6                            
000228B6                            Obj7D:					; XREF: Obj_Index
000228B6 7000                       		moveq	#0,d0
000228B8 1028 0024                  		move.b	routine(a0),d0
000228BC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000228C0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000228C4                            ; ===========================================================================
000228C4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000228C6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000228C8                            ; ===========================================================================
000228C8                            
000228C8                            Obj7D_Main:				; XREF: Obj7D_Index
000228C8 7410                       		moveq	#$10,d2
000228CA 3602                       		move.w	d2,d3
000228CC D643                       		add.w	d3,d3
000228CE 43F8 D000                  		lea	($FFFFD000).w,a1
000228D2 3029 0008                  		move.w	8(a1),d0
000228D6 9068 0008                  		sub.w	8(a0),d0
000228DA D042                       		add.w	d2,d0
000228DC B043                       		cmp.w	d3,d0
000228DE 6400                       		bcc.s	Obj7D_ChkDel
000228E0 3229 000C                  		move.w	$C(a1),d1
000228E4 9268 000C                  		sub.w	$C(a0),d1
000228E8 D242                       		add.w	d2,d1
000228EA B243                       		cmp.w	d3,d1
000228EC 6400                       		bcc.s	Obj7D_ChkDel
000228EE 4A78 FE08                  		tst.w	($FFFFFE08).w
000228F2 6600                       		bne.s	Obj7D_ChkDel
000228F4 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000228F8 6600                       		bne.s	Obj7D_ChkDel
000228FA 5428 0024                  		addq.b	#2,routine(a0)
000228FE 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00022906 317C 84B6 0002             		move.w	#$84B6,2(a0)
0002290C 0028 0004 0001             		ori.b	#4,1(a0)
00022912 117C 0000 0018             		move.b	#0,priority(a0)
00022918 117C 0010 0023             		move.b	#$10,width_pixels(a0)
0002291E 1168 0028 001A             		move.b	subtype(a0),mapping_frame(a0)
00022924 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0002292A 303C 00C9                  		move.w	#$C9,d0
0002292E 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play bonus sound
00022934 7000                       		moveq	#0,d0
00022936 1028 0028                  		move.b	subtype(a0),d0
0002293A D040                       		add.w	d0,d0
0002293C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00022940 4EB9 0000 0000             		jsr	AddPoints
00022946                            
00022946                            Obj7D_ChkDel:
00022946 4EF9 0001 8B6E             		jmp	MarkObjGone3
0002294C                            ; ===========================================================================
0002294C 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0002294E 03E8                       		dc.w 1000
00022950 0064                       		dc.w 100
00022952 0001                       		dc.w 1
00022954                            ; ===========================================================================
00022954                            
00022954                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00022954 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00022958 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0002295A 3028 0008                  		move.w	8(a0),d0
0002295E 0240 FF80                  		andi.w	#-$80,d0
00022962 3238 F700                  		move.w	($FFFFF700).w,d1
00022966 0441 0080                  		subi.w	#$80,d1
0002296A 0241 FF80                  		andi.w	#-$80,d1
0002296E 9041                       		sub.w	d1,d0
00022970 0C40 0280                  		cmpi.w	#$280,d0
00022974 6200                       		bhi.s	Obj7D_Delete2
00022976 4EF9 0001 5C3C             		jmp	DisplaySprite
0002297C                            ; ===========================================================================
0002297C                            
0002297C                            Obj7D_Delete2:
0002297C 4EF9 0001 5BF0             		jmp	DeleteObject
00022982                            ; ===========================================================================
00022982                            ; ---------------------------------------------------------------------------
00022982                            ; Sprite mappings - hidden points at the end of	a level
00022982                            ; ---------------------------------------------------------------------------
00022982                            Map_obj7D:
00022982                            	include "_maps\obj7D.asm"
00022982                            ; ---------------------------------------------------------------------------
00022982                            ; Sprite mappings - hidden points at the end of	a level
00022982                            ; ---------------------------------------------------------------------------
00022982 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00022986 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0002298A 00                         byte_17250:	dc.b 0
0002298B 01                         byte_17251:	dc.b 1
0002298C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00022991 01                         byte_17257:	dc.b 1
00022992 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00022997 01                         byte_1725D:	dc.b 1
00022998 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0002299E 00                         		even
0002299E 00                         		even
0002299E                            
0002299E                            ; ===========================================================================
0002299E                            ; ---------------------------------------------------------------------------
0002299E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0002299E                            ; ---------------------------------------------------------------------------
0002299E                            
0002299E                            Obj8A:					; XREF: Obj_Index
0002299E 7000                       		moveq	#0,d0
000229A0 1028 0024                  		move.b	routine(a0),d0
000229A4 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000229A8 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000229AC                            ; ===========================================================================
000229AC 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000229AE 0000                       		dc.w Obj8A_Display-Obj8A_Index
000229B0                            ; ===========================================================================
000229B0                            
000229B0                            Obj8A_Main:				; XREF: Obj8A_Index
000229B0 5428 0024                  		addq.b	#2,routine(a0)
000229B4 317C 0120 0008             		move.w	#$120,8(a0)
000229BA 317C 00F0 000A             		move.w	#$F0,$A(a0)
000229C0 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000229C8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000229CE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000229D2 1140 001A                  		move.b	d0,mapping_frame(a0)	; display appropriate sprite
000229D6 117C 0000 0001             		move.b	#0,1(a0)
000229DC 117C 0000 0018             		move.b	#0,priority(a0)
000229E2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000229E8 6600                       		bne.s	Obj8A_Display	; if not, branch
000229EA 317C 00A6 0002             		move.w	#$A6,2(a0)
000229F0 117C 000A 001A             		move.b	#$A,mapping_frame(a0)	; display "SONIC TEAM PRESENTS"
000229F6 4A38 FFD3                  		tst.b	($FFFFFFD3).w	; is hidden credits cheat on?
000229FA 4E71                       		nop	Obj8A_Display	; if not, branch
000229FC 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00022A02 6600                       		bne.s	Obj8A_Display	; if not, branch
00022A04 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00022A0A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00022A10 4EF9 0001 5BF0             		jmp	DeleteObject
00022A16                            ; ===========================================================================
00022A16                            
00022A16                            Obj8A_Display:				; XREF: Obj8A_Index
00022A16 4EF9 0001 5C3C             		jmp	DisplaySprite
00022A1C                            ; ===========================================================================
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C                            Map_obj8A:
00022A1C                            	include "_maps\obj8A.asm"
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00022A1C                            ; ---------------------------------------------------------------------------
00022A1C 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00022A20 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00022A24 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00022A28 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00022A2C 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00022A30 0000                       		dc.w byte_176A9-Map_obj8A
00022A32 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00022A33 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00022A38 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00022A3D F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00022A42 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00022A47 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00022A4C F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00022A51 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00022A56 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00022A5B F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00022A60 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00022A65 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00022A6A F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00022A6F F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00022A74 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00022A79 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00022A7A D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00022A7F D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00022A84 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00022A89 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00022A8E D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00022A93 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00022A98 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00022A9D D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00022AA2 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00022AA7 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00022AAC 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00022AB1 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00022AB6 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00022ABB 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00022AC0 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00022AC5 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00022ACA 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00022ACB D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00022AD0 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00022AD5 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00022ADA D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00022ADF D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00022AE4 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00022AE9 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00022AEE 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00022AF3 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00022AF8 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00022AFD 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00022AFE D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00022B03 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00022B08 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00022B0D D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00022B12 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00022B17 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00022B1C D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00022B21 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00022B26 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00022B2B D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00022B30 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00022B35 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00022B3A D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00022B3F D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00022B44 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00022B49 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00022B4E 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00022B53 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00022B58 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00022B5D 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00022B62 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00022B67 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00022B6C 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00022B71 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00022B76 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00022B77 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00022B7C D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00022B81 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00022B86 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00022B8B D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00022B90 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00022B95 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00022B9A 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00022B9F 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00022BA4 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00022BA9 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00022BAE 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00022BB3 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00022BB8 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00022BBD 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00022BC2 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00022BC7 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00022BCC 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00022BD1 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00022BD6 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00022BDB 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00022BDC D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00022BE1 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00022BE6 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00022BEB D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00022BF0 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00022BF5 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00022BFA D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00022BFF D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00022C04 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00022C09 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00022C0E D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00022C13 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00022C18 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00022C1D 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00022C22 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00022C27 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00022C2C 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00022C31 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00022C36 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00022C3B 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00022C40 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00022C45 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00022C4A 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00022C4F 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00022C54 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00022C59 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00022C5E 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00022C5F D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00022C64 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00022C69 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00022C6E D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00022C73 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00022C78 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00022C7D D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00022C82 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00022C87 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00022C8C D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00022C91 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00022C96 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00022C9B 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00022CA0 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00022CA5 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00022CAA 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00022CAF 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00022CB4 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00022CB9 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00022CBE 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00022CC3 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00022CC8 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00022CCD 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00022CD2 48                         byte_17598:	dc.b $48	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL THANKS
00022CD3 D805 002E 84               		dc.b $D8, 5, 0, $2E, $84	; S
00022CD8 D805 0012 94               		dc.b $D8, 5, 0, $12, $94	; P
00022CDD D805 000E A4               		dc.b $D8, 5, 0, $0E, $A4	; E
00022CE2 D805 001E B4               		dc.b $D8, 5, 0, $1E, $B4	; C
00022CE7 D801 0046 C4               		dc.b $D8, 1, 0, $46, $C4	; I
00022CEC D805 0004 CC               		dc.b $D8, 5, 0, 4, $CC		; A
00022CF1 D805 0016 DC               		dc.b $D8, 5, 0, $16, $DC	; L
00022CF6 D805 003E FC               		dc.b $D8, 5, 0, $3E, $FC	; T
00022CFB D805 003A 0C               		dc.b $D8, 5, 0, $3A, $C	; H
00022D00 D805 0004 1C               		dc.b $D8, 5, 0, 4, $1C		; A
00022D05 D805 001A 2C               		dc.b $D8, 5, 0, $1A, $2C	; N
00022D0A D805 0058 3C               		dc.b $D8, 5, 0, $58, $3C	; K
00022D0F D805 002E 4C               		dc.b $D8, 5, 0, $2E, $4C	; S
00022D14                            
00022D14 0005 005C B0               		dc.b $0, 5, 0, $5C, $B0	; F
00022D19 0005 0032 C0               		dc.b $0, 5, 0, $32, $C0	; U
00022D1E 0005 004C D0               		dc.b $0, 5, 0, $4C, $D0	; J
00022D23 0001 0046 E0               		dc.b $0, 1, 0, $46, $E0	; I
00022D28 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
00022D2D 0009 0008 00               		dc.b $0, 9, 0, 8, 0		; M
00022D32 0001 0046 14               		dc.b $0, 1, 0, $46, $14	; I
00022D37 0005 001A 1C               		dc.b $0, 5, 0, $1A, $1C	; N
00022D3C 0005 000E 2C               		dc.b $0, 5, 0, $0E, $2C	; E
00022D41 0005 0000 3C               		dc.b $0, 5, 0, 0, $3C		; G
00022D46 0001 0046 4C               		dc.b $0, 1, 0, $46, $4C	; I
00022D4B 0005 002E 54               		dc.b $0, 5, 0, $2E, $54	; S
00022D50 0005 003A 64               		dc.b $0, 5, 0, $3A, $64	; H
00022D55 0001 0046 74               		dc.b $0, 1, 0, $46, $74	; I
00022D5A                            ; ERROR: UNKOWN SIGN
00022D5A                            ; ERROR: UNKOWN SIGN
00022D5A 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	; P
00022D5F 2005 0004 08               		dc.b $20, 5, 0, 4, $8		; A
00022D64 2005 0012 18               		dc.b $20, 5, 0, $12, $18	; P
00022D69 2005 0004 28               		dc.b $20, 5, 0, 4, $28		; A
00022D6E                            ; ERROR: UNKOWN SIGN
00022D6E                            ; ERROR: UNKOWN SIGN
00022D6E 3005 0022 E0               		dc.b $30, 5, 0, $22, $E0	; R
00022D73 3005 000E F0               		dc.b $30, 5, 0, $0E, $F0	; E
00022D78 3005 0042 00               		dc.b $30, 5, 0, $42, $0	; D
00022D7D 3005 003A 10               		dc.b $30, 5, 0, $3A, $10	; H
00022D82 3005 0026 20               		dc.b $30, 5, 0, $26, $20	; O
00022D87 3005 003E 30               		dc.b $30, 5, 0, $3E, $30	; T
00022D8C 3005 002E 40               		dc.b $30, 5, 0, $2E, $40	; S
00022D91 3005 0026 50               		dc.b $30, 5, 0, $26, $50	; O
00022D96 3005 001A 60               		dc.b $30, 5, 0, $1A, $60	; N
00022D9B 3001 0046 70               		dc.b $30, 1, 0, $46, $70	; I
00022DA0 3005 001E 78               		dc.b $30, 5, 0, $1E, $78	; C
00022DA5                            ; ERROR: UNKOWN SIGN
00022DA5                            ; ERROR: UNKOWN SIGN
00022DA5 4009 0008 A8               		dc.b $40, 9, 0, 8, $A8		; M
00022DAA 4005 0004 BC               		dc.b $40, 5, 0, 4, $BC		; A
00022DAF 4005 0022 CC               		dc.b $40, 5, 0, $22, $CC	; R
00022DB4 4005 0058 DC               		dc.b $40, 5, 0, $58, $DC	; K
00022DB9 4005 000E EC               		dc.b $40, 5, 0, $0E, $EC	; E
00022DBE 4005 002A FC               		dc.b $40, 5, 0, $2A, $FC	; Y
00022DC3 4005 004C 0C               		dc.b $40, 5, 0, $4C, $C	; J
00022DC8 4005 000E 1C               		dc.b $40, 5, 0, $0E, $1C	; E
00022DCD 4005 002E 2C               		dc.b $40, 5, 0, $2E, $2C	; S
00022DD2 4005 003E 3C               		dc.b $40, 5, 0, $3E, $3C	; T
00022DD7 4005 000E 4C               		dc.b $40, 5, 0, $0E, $4C	; E
00022DDC 4005 0022 5C               		dc.b $40, 5, 0, $22, $5C	; R
00022DE1                            ; ERROR: UNKOWN SIGN
00022DE1                            ; ERROR: UNKOWN SIGN
00022DE1 5005 002E 8C               		dc.b $50, 5, 0, $2E, $8C	; S
00022DE6 5005 000E 9C               		dc.b $50, 5, 0, $0E, $9C	; E
00022DEB 5005 0016 AC               		dc.b $50, 5, 0, $16, $AC	; L
00022DF0 5005 0048 BC               		dc.b $50, 5, 0, $48, $BC	; B
00022DF5 5001 0046 CC               		dc.b $50, 1, 0, $46, $CC	; I
00022DFA 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00022DFB F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00022E00 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00022E05 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00022E0A F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00022E0F F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00022E14 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00022E19 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00022E1E F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00022E23 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00022E28 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00022E2D F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00022E32 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00022E37 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00022E3C F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00022E41 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00022E46 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00022E47 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00022E4C 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00022E51 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00022E56 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00022E5B 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00022E60 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00022E65 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00022E6A 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00022E6F 17                         byte_176A9:	dc.b $17	;  SONIC TEAM PRESENTS | THERETROGUY PRODUCTIONS
00022E70 E805 003E 80               		dc.b $E8, 5, 0, $3E, $80	; T
00022E75 E805 003A 90               		dc.b $E8, 5, 0, $3A, $90	; H
00022E7A E805 000E A0               		dc.b $E8, 5, 0, $0E, $A0	; E
00022E7F E805 0022 B0               		dc.b $E8, 5, 0, $22, $B0	; R
00022E84 E805 000E C0               		dc.b $E8, 5, 0, $0E, $C0	; E
00022E89 E805 003E D0               		dc.b $E8, 5, 0, $3E, $D0	; T
00022E8E E805 0022 E0               		dc.b $E8, 5, 0, $22, $E0	; R
00022E93 E805 0026 F0               		dc.b $E8, 5, 0, $26, $F0	; O
00022E98 E805 0000 00               		dc.b $E8, 5, 0, 0, $0		; G
00022E9D E805 0032 10               		dc.b $E8, 5, 0, $32, $10	; U
00022EA2 E805 002A 20               		dc.b $E8, 5, 0, $2A, $20	; Y
00022EA7                            
00022EA7 0005 0012 C8               		dc.b $0, 5, 0, $12, $C8	; P
00022EAC 0005 0022 D8               		dc.b $0, 5, 0, $22, $D8	; R
00022EB1 0005 0026 E8               		dc.b $0, 5, 0, $26, $E8	; O
00022EB6 0005 0042 F8               		dc.b $0, 5, 0, $42, $F8	; D
00022EBB 0005 0032 08               		dc.b $0, 5, 0, $32, $8	; U
00022EC0 0005 001E 18               		dc.b $0, 5, 0, $1E, $18	; C
00022EC5 0005 003E 28               		dc.b $0, 5, 0, $3E, $28	; T
00022ECA 0001 0046 38               		dc.b $0, 1, 0, $46, $38	; I
00022ECF 0005 0026 40               		dc.b $0, 5, 0, $26, $40	; O
00022ED4 0005 001A 50               		dc.b $0, 5, 0, $1A, $50	; N
00022ED9 0005 002E 60               		dc.b $0, 5, 0, $2E, $60	; S
00022EDE                            		even
00022EDE                            		even
00022EDE                            
00022EDE                            ; ===========================================================================
00022EDE                            ; ---------------------------------------------------------------------------
00022EDE                            ; Object 3D - Eggman (GHZ)
00022EDE                            ; ---------------------------------------------------------------------------
00022EDE                            
00022EDE                            Obj3D:					; XREF: Obj_Index
00022EDE 7000                       		moveq	#0,d0
00022EE0 1028 0024                  		move.b	$24(a0),d0
00022EE4 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00022EE8 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00022EEC                            ; ===========================================================================
00022EEC 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00022EEE 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00022EF0 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00022EF2 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00022EF4                            
00022EF4 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00022EF6 0401                       		dc.b 4,	1
00022EF8 0607                       		dc.b 6,	7
00022EFA                            ; ===========================================================================
00022EFA                            
00022EFA                            Obj3D_Main:				; XREF: Obj3D_Index
00022EFA 45F9 0002 2EF4             		lea	(Obj3D_ObjData).l,a2
00022F00 2248                       		movea.l	a0,a1
00022F02 7202                       		moveq	#2,d1
00022F04 6000                       		bra.s	Obj3D_LoadBoss
00022F06                            ; ===========================================================================
00022F06                            
00022F06                            Obj3D_Loop:
00022F06 4EB9 0001 671E             		jsr	SingleObjLoad2
00022F0C 6600                       		bne.s	loc_17772
00022F0E                            
00022F0E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00022F0E 135A 0024                  		move.b	(a2)+,$24(a1)
00022F12 12BC 003D                  		move.b	#$3D,0(a1)
00022F16 3368 0008 0008             		move.w	8(a0),8(a1)
00022F1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00022F22 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00022F2A 337C 0400 0002             		move.w	#$400,2(a1)
00022F30 137C 0004 0001             		move.b	#4,1(a1)
00022F36 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00022F3C 337C 0180 0018             		move.w	#$180,priority(a1)
00022F42 135A 001C                  		move.b	(a2)+,$1C(a1)
00022F46 2348 0034                  		move.l	a0,$34(a1)
00022F4A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00022F4E                            
00022F4E                            loc_17772:
00022F4E 3168 0008 0030             		move.w	8(a0),$30(a0)
00022F54 3168 000C 0038             		move.w	$C(a0),$38(a0)
00022F5A 117C 000F 0020             		move.b	#$F,$20(a0)
00022F60 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00022F66                            
00022F66                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00022F66 7000                       		moveq	#0,d0
00022F68 1028 0025                  		move.b	$25(a0),d0
00022F6C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00022F70 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00022F74 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00022F7A 4EB9 0001 2618             		jsr	AnimateSprite
00022F80 1028 0022                  		move.b	$22(a0),d0
00022F84 0200 0003                  		andi.b	#3,d0
00022F88 0228 00FC 0001             		andi.b	#$FC,1(a0)
00022F8E 8128 0001                  		or.b	d0,1(a0)
00022F92 4EF9 0001 5C3C             		jmp	DisplaySprite
00022F98                            ; ===========================================================================
00022F98 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00022F9A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00022F9C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00022F9E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00022FA0 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00022FA2 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00022FA4 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00022FA6                            ; ===========================================================================
00022FA6                            
00022FA6                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00022FA6 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00022FAC 6100 0000                  		bsr.w	BossMove
00022FB0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00022FB6 6600                       		bne.s	loc_177E6
00022FB8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00022FBE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00022FC2                            
00022FC2                            loc_177E6:
00022FC2 1028 003F                  		move.b	$3F(a0),d0
00022FC6 4EB9 0000 8DA4             		jsr	(CalcSine).l
00022FCC EC40                       		asr.w	#6,d0
00022FCE D068 0038                  		add.w	$38(a0),d0
00022FD2 3140 000C                  		move.w	d0,$C(a0)
00022FD6 3168 0030 0008             		move.w	$30(a0),8(a0)
00022FDC 5428 003F                  		addq.b	#2,$3F(a0)
00022FE0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00022FE6 6400                       		bcc.s	locret_1784A
00022FE8 4A28 0022                  		tst.b	$22(a0)
00022FEC 6B00                       		bmi.s	loc_1784C
00022FEE 4A28 0020                  		tst.b	$20(a0)
00022FF2 6600                       		bne.s	locret_1784A
00022FF4 4A28 003E                  		tst.b	$3E(a0)
00022FF8 6600                       		bne.s	Obj3D_ShipFlash
00022FFA 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00022FFE 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00023004                            ;		move.w	#$AC,d0
00023004 4EB9 0001 E834             		jsr	(BossModeMusic).l ;	play boss damage sound
0002300A                            
0002300A                            Obj3D_ShipFlash:
0002300A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0002300E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00023010 4A51                       		tst.w	(a1)
00023012 6600                       		bne.s	loc_1783C
00023014 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00023018                            
00023018                            loc_1783C:
00023018 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0002301A 5328 003E                  		subq.b	#1,$3E(a0)
0002301E 6600                       		bne.s	locret_1784A
00023020 117C 000F 0020             		move.b	#$F,$20(a0)
00023026                            
00023026                            locret_1784A:
00023026 4E75                       		rts	
00023028                            ; ===========================================================================
00023028                            
00023028                            loc_1784C:				; XREF: loc_177E6
00023028 7064                       		moveq	#100,d0
0002302A 6100 0000                  		bsr.w	AddPoints
0002302E 117C 0008 0025             		move.b	#8,$25(a0)
00023034 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0002303A 4E75                       		rts	
0002303C                            
0002303C                            ; ---------------------------------------------------------------------------
0002303C                            ; Defeated boss	subroutine
0002303C                            ; ---------------------------------------------------------------------------
0002303C                            
0002303C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002303C                            
0002303C                            
0002303C                            BossDefeated:
0002303C 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00023040 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00023044 0200 0007                  		andi.b	#7,d0
00023048 6600                       		bne.s	locret_178A2
0002304A 4EB9 0001 6708             		jsr	SingleObjLoad
00023050 6600                       		bne.s	locret_178A2
00023052 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00023056 3368 0008 0008             		move.w	8(a0),8(a1)
0002305C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023062 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023068 3200                       		move.w	d0,d1
0002306A 7200                       		moveq	#0,d1
0002306C 1200                       		move.b	d0,d1
0002306E E409                       		lsr.b	#2,d1
00023070 0441 0020                  		subi.w	#$20,d1
00023074 D369 0008                  		add.w	d1,8(a1)
00023078 E048                       		lsr.w	#8,d0
0002307A E608                       		lsr.b	#3,d0
0002307C D169 000C                  		add.w	d0,$C(a1)
00023080                            
00023080                            locret_178A2:
00023080 4E75                       		rts	
00023082                            ; End of function BossDefeated
00023082                            
00023082                            ; ---------------------------------------------------------------------------
00023082                            ; Subroutine to	move a boss
00023082                            ; ---------------------------------------------------------------------------
00023082                            
00023082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023082                            
00023082                            
00023082                            BossMove:
00023082 2428 0030                  		move.l	$30(a0),d2
00023086 2628 0038                  		move.l	$38(a0),d3
0002308A 3028 0010                  		move.w	$10(a0),d0
0002308E 48C0                       		ext.l	d0
00023090 E180                       		asl.l	#8,d0
00023092 D480                       		add.l	d0,d2
00023094 3028 0012                  		move.w	$12(a0),d0
00023098 48C0                       		ext.l	d0
0002309A E180                       		asl.l	#8,d0
0002309C D680                       		add.l	d0,d3
0002309E 2142 0030                  		move.l	d2,$30(a0)
000230A2 2143 0038                  		move.l	d3,$38(a0)
000230A6 4E75                       		rts	
000230A8                            ; End of function BossMove
000230A8                            
000230A8                            ; ===========================================================================
000230A8                            
000230A8                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000230A8 317C FF00 0010             		move.w	#-$100,$10(a0)
000230AE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000230B4 6100 FFCC                  		bsr.w	BossMove
000230B8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000230BE 6600                       		bne.s	loc_17916
000230C0 317C 0000 0010             		move.w	#0,$10(a0)
000230C6 317C 0000 0012             		move.w	#0,$12(a0)
000230CC 5428 0025                  		addq.b	#2,$25(a0)
000230D0 4EB9 0001 671E             		jsr	SingleObjLoad2
000230D6 6600                       		bne.s	loc_17910
000230D8 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000230DC 3368 0030 0008             		move.w	$30(a0),8(a1)
000230E2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000230E8 2348 0034                  		move.l	a0,$34(a1)
000230EC                            
000230EC                            loc_17910:
000230EC 317C 0077 003C             		move.w	#$77,$3C(a0)
000230F2                            
000230F2                            loc_17916:
000230F2 6000 FECE                  		bra.w	loc_177E6
000230F6                            ; ===========================================================================
000230F6                            
000230F6                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000230F6 5368 003C                  		subq.w	#1,$3C(a0)
000230FA 6A00                       		bpl.s	Obj3D_Reverse
000230FC 5428 0025                  		addq.b	#2,$25(a0)
00023100 317C 003F 003C             		move.w	#$3F,$3C(a0)
00023106 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
0002310C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00023112 6600                       		bne.s	Obj3D_Reverse
00023114 317C 007F 003C             		move.w	#$7F,$3C(a0)
0002311A 317C 0040 0010             		move.w	#$40,$10(a0)
00023120                            
00023120                            Obj3D_Reverse:
00023120 0828 0000 0022             		btst	#0,$22(a0)
00023126 6600                       		bne.s	loc_17950
00023128 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0002312C                            
0002312C                            loc_17950:
0002312C 6000 FE94                  		bra.w	loc_177E6
00023130                            ; ===========================================================================
00023130                            
00023130                            loc_17954:				; XREF: Obj3D_ShipIndex
00023130 5368 003C                  		subq.w	#1,$3C(a0)
00023134 6B00                       		bmi.s	loc_17960
00023136 6100 FF4A                  		bsr.w	BossMove
0002313A 6000                       		bra.s	loc_17976
0002313C                            ; ===========================================================================
0002313C                            
0002313C                            loc_17960:
0002313C 0868 0000 0022             		bchg	#0,$22(a0)
00023142 317C 003F 003C             		move.w	#$3F,$3C(a0)
00023148 5528 0025                  		subq.b	#2,$25(a0)
0002314C 317C 0000 0010             		move.w	#0,$10(a0)
00023152                            
00023152                            loc_17976:
00023152 6000 FE6E                  		bra.w	loc_177E6
00023156                            ; ===========================================================================
00023156                            
00023156                            loc_1797A:				; XREF: Obj3D_ShipIndex
00023156 5368 003C                  		subq.w	#1,$3C(a0)
0002315A 6B00                       		bmi.s	loc_17984
0002315C 6000 FEDE                  		bra.w	BossDefeated
00023160                            ; ===========================================================================
00023160                            
00023160                            loc_17984:
00023160 08E8 0000 0022             		bset	#0,$22(a0)
00023166 08A8 0007 0022             		bclr	#7,$22(a0)
0002316C 4268 0010                  		clr.w	$10(a0)
00023170 5428 0025                  		addq.b	#2,$25(a0)
00023174 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0002317A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0002317E 6600                       		bne.s	locret_179AA
00023180 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00023186                            
00023186                            locret_179AA:
00023186 4E75                       		rts	
00023188                            ; ===========================================================================
00023188                            
00023188                            loc_179AC:				; XREF: Obj3D_ShipIndex
00023188 5268 003C                  		addq.w	#1,$3C(a0)
0002318C 6700                       		beq.s	loc_179BC
0002318E 6A00                       		bpl.s	loc_179C2
00023190 0668 0018 0012             		addi.w	#$18,$12(a0)
00023196 6000                       		bra.s	loc_179EE
00023198                            ; ===========================================================================
00023198                            
00023198                            loc_179BC:
00023198 4268 0012                  		clr.w	$12(a0)
0002319C 6000                       		bra.s	loc_179EE
0002319E                            ; ===========================================================================
0002319E                            
0002319E                            loc_179C2:
0002319E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000231A4 6500                       		bcs.s	loc_179DA
000231A6 6700                       		beq.s	loc_179E0
000231A8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000231AE 6500                       		bcs.s	loc_179EE
000231B0 5428 0025                  		addq.b	#2,$25(a0)
000231B4 6000                       		bra.s	loc_179EE
000231B6                            ; ===========================================================================
000231B6                            
000231B6                            loc_179DA:
000231B6 5168 0012                  		subq.w	#8,$12(a0)
000231BA 6000                       		bra.s	loc_179EE
000231BC                            ; ===========================================================================
000231BC                            
000231BC                            loc_179E0:
000231BC 4268 0012                  		clr.w	$12(a0)
000231C0                            	;	move.w	#$81,d0
000231C0 4EB9 0001 D46C             		jsr	(super_GetBgm).l	; play GHZ music
000231C6                            
000231C6                            loc_179EE:
000231C6 6100 FEBA                  		bsr.w	BossMove
000231CA 6000 FDF6                  		bra.w	loc_177E6
000231CE                            ; ===========================================================================
000231CE                            
000231CE                            loc_179F6:				; XREF: Obj3D_ShipIndex
000231CE 317C 0400 0010             		move.w	#$400,$10(a0)
000231D4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000231DA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000231E0 6700                       		beq.s	loc_17A10
000231E2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000231E6 6000                       		bra.s	loc_17A16
000231E8                            ; ===========================================================================
000231E8                            
000231E8                            loc_17A10:
000231E8 4A28 0001                  		tst.b	1(a0)
000231EC 6A00                       		bpl.s	Obj3D_ShipDel
000231EE                            
000231EE                            loc_17A16:
000231EE 6100 FE92                  		bsr.w	BossMove
000231F2 6000 FDCE                  		bra.w	loc_177E6
000231F6                            ; ===========================================================================
000231F6                            
000231F6                            Obj3D_ShipDel:
000231F6 4EF9 0001 5BF0             		jmp	DeleteObject
000231FC                            ; ===========================================================================
000231FC                            
000231FC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000231FC 7000                       		moveq	#0,d0
000231FE 7201                       		moveq	#1,d1
00023200 2268 0034                  		movea.l	$34(a0),a1
00023204 1029 0025                  		move.b	$25(a1),d0
00023208 5900                       		subq.b	#4,d0
0002320A 6600                       		bne.s	loc_17A3E
0002320C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00023212 6600                       		bne.s	loc_17A46
00023214 7204                       		moveq	#4,d1
00023216                            
00023216                            loc_17A3E:
00023216 5D00                       		subq.b	#6,d0
00023218 6B00                       		bmi.s	loc_17A46
0002321A 720A                       		moveq	#$A,d1
0002321C 6000                       		bra.s	loc_17A5A
0002321E                            ; ===========================================================================
0002321E                            
0002321E                            loc_17A46:
0002321E 4A29 0020                  		tst.b	$20(a1)
00023222 6600                       		bne.s	loc_17A50
00023224 7205                       		moveq	#5,d1
00023226 6000                       		bra.s	loc_17A5A
00023228                            ; ===========================================================================
00023228                            
00023228                            loc_17A50:
00023228 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0002322E 6500                       		bcs.s	loc_17A5A
00023230 7204                       		moveq	#4,d1
00023232                            
00023232                            loc_17A5A:
00023232 1141 001C                  		move.b	d1,$1C(a0)
00023236 5500                       		subq.b	#2,d0
00023238 6600                       		bne.s	Obj3D_FaceDisp
0002323A 117C 0006 001C             		move.b	#6,$1C(a0)
00023240 4A28 0001                  		tst.b	1(a0)
00023244 6A00                       		bpl.s	Obj3D_FaceDel
00023246                            
00023246                            Obj3D_FaceDisp:
00023246 6000                       		bra.s	Obj3D_Display
00023248                            ; ===========================================================================
00023248                            
00023248                            Obj3D_FaceDel:
00023248 4EF9 0001 5BF0             		jmp	DeleteObject
0002324E                            ; ===========================================================================
0002324E                            
0002324E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0002324E 117C 0007 001C             		move.b	#7,$1C(a0)
00023254 2268 0034                  		movea.l	$34(a0),a1
00023258 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0002325E 6600                       		bne.s	loc_17A96
00023260 117C 000B 001C             		move.b	#$B,$1C(a0)
00023266 4A28 0001                  		tst.b	1(a0)
0002326A 6A00                       		bpl.s	Obj3D_FlameDel
0002326C 6000                       		bra.s	Obj3D_FlameDisp
0002326E                            ; ===========================================================================
0002326E                            
0002326E                            loc_17A96:
0002326E 3029 0010                  		move.w	$10(a1),d0
00023272 6700                       		beq.s	Obj3D_FlameDisp
00023274 117C 0008 001C             		move.b	#8,$1C(a0)
0002327A                            
0002327A                            Obj3D_FlameDisp:
0002327A 6000                       		bra.s	Obj3D_Display
0002327C                            ; ===========================================================================
0002327C                            
0002327C                            Obj3D_FlameDel:
0002327C 4EF9 0001 5BF0             		jmp	DeleteObject
00023282                            ; ===========================================================================
00023282                            
00023282                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00023282 2268 0034                  		movea.l	$34(a0),a1
00023286 3169 0008 0008             		move.w	8(a1),8(a0)
0002328C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00023292 1169 0022 0022             		move.b	$22(a1),$22(a0)
00023298 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0002329E 4EB9 0001 2618             		jsr	AnimateSprite
000232A4 1028 0022                  		move.b	$22(a0),d0
000232A8 0200 0003                  		andi.b	#3,d0
000232AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000232B2 8128 0001                  		or.b	d0,1(a0)
000232B6 4EF9 0001 5C3C             		jmp	DisplaySprite
000232BC                            ; ===========================================================================
000232BC                            ; ---------------------------------------------------------------------------
000232BC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000232BC                            ; ---------------------------------------------------------------------------
000232BC                            
000232BC                            Obj48:					; XREF: Obj_Index
000232BC 7000                       		moveq	#0,d0
000232BE 1028 0024                  		move.b	$24(a0),d0
000232C2 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000232C6 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000232CA                            ; ===========================================================================
000232CA 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000232CC 0000                       		dc.w Obj48_Base-Obj48_Index
000232CE 0000                       		dc.w Obj48_Display2-Obj48_Index
000232D0 0000                       		dc.w loc_17C68-Obj48_Index
000232D2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000232D4                            ; ===========================================================================
000232D4                            
000232D4                            Obj48_Main:				; XREF: Obj48_Index
000232D4 5428 0024                  		addq.b	#2,$24(a0)
000232D8 317C 4080 0026             		move.w	#$4080,$26(a0)
000232DE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000232E4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000232EC 317C 046C 0002             		move.w	#$46C,2(a0)
000232F2 45E8 0028                  		lea	$28(a0),a2
000232F6 14FC 0000                  		move.b	#0,(a2)+
000232FA 7205                       		moveq	#5,d1
000232FC 2248                       		movea.l	a0,a1
000232FE 6000                       		bra.s	loc_17B60
00023300                            ; ===========================================================================
00023300                            
00023300                            Obj48_MakeLinks:
00023300 4EB9 0001 671E             		jsr	SingleObjLoad2
00023306 6600                       		bne.s	Obj48_MakeBall
00023308 3368 0008 0008             		move.w	8(a0),8(a1)
0002330E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023314 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00023318 137C 0006 0024             		move.b	#6,$24(a1)
0002331E 237C 0000 F574 0004        		move.l	#Map_obj15,4(a1)
00023326 337C 0380 0002             		move.w	#$380,2(a1)
0002332C 137C 0001 001A             		move.b	#1,$1A(a1)
00023332 5228 0028                  		addq.b	#1,$28(a0)
00023336                            
00023336                            loc_17B60:				; XREF: Obj48_Main
00023336 3A09                       		move.w	a1,d5
00023338 0445 D000                  		subi.w	#$D000,d5
0002333C EC4D                       		lsr.w	#6,d5
0002333E 0245 007F                  		andi.w	#$7F,d5
00023342 14C5                       		move.b	d5,(a2)+
00023344 137C 0004 0001             		move.b	#4,1(a1)
0002334A 137C 0008 0023             		move.b	#8,width_pixels(a1)
00023350 337C 0300 0018             		move.w	#$300,priority(a1)
00023356 2368 0034 0034             		move.l	$34(a0),$34(a1)
0002335C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00023360                            
00023360                            Obj48_MakeBall:
00023360 137C 0008 0024             		move.b	#8,$24(a1)
00023366 237C 0000 FD7C 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0002336E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00023374 137C 0001 001A             		move.b	#1,$1A(a1)
0002337A 337C 0280 0018             		move.w	#$280,priority(a1)
00023380 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00023386 4E75                       		rts	
00023388                            ; ===========================================================================
00023388                            
00023388 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0002338E                            
0002338E                            ; ===========================================================================
0002338E                            
0002338E                            Obj48_Base:				; XREF: Obj48_Index
0002338E 47F9 0002 3388             		lea	(Obj48_PosData).l,a3
00023394 45E8 0028                  		lea	$28(a0),a2
00023398 7C00                       		moveq	#0,d6
0002339A 1C1A                       		move.b	(a2)+,d6
0002339C                            
0002339C                            loc_17BC6:
0002339C 7800                       		moveq	#0,d4
0002339E 181A                       		move.b	(a2)+,d4
000233A0 ED4C                       		lsl.w	#6,d4
000233A2 0684 00FF D000             		addi.l	#$FFD000,d4
000233A8 2244                       		movea.l	d4,a1
000233AA 101B                       		move.b	(a3)+,d0
000233AC B029 003C                  		cmp.b	$3C(a1),d0
000233B0 6700                       		beq.s	loc_17BE0
000233B2 5229 003C                  		addq.b	#1,$3C(a1)
000233B6                            
000233B6                            loc_17BE0:
000233B6 51CE FFE4                  		dbf	d6,loc_17BC6
000233BA                            
000233BA B029 003C                  		cmp.b	$3C(a1),d0
000233BE 6600                       		bne.s	loc_17BFA
000233C0 2268 0034                  		movea.l	$34(a0),a1
000233C4 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000233CA 6600                       		bne.s	loc_17BFA
000233CC 5428 0024                  		addq.b	#2,$24(a0)
000233D0                            
000233D0                            loc_17BFA:
000233D0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000233D6 6700                       		beq.s	Obj48_Display
000233D8 5268 0032                  		addq.w	#1,$32(a0)
000233DC                            
000233DC                            Obj48_Display:
000233DC 6100 0000                  		bsr.w	sub_17C2A
000233E0 1028 0026                  		move.b	$26(a0),d0
000233E4 4EB9 0000 F4DA             		jsr	(Obj15_Move2).l
000233EA 4EF9 0001 5C3C             		jmp	DisplaySprite
000233F0                            ; ===========================================================================
000233F0                            
000233F0                            Obj48_Display2:				; XREF: Obj48_Index
000233F0 6100 0000                  		bsr.w	sub_17C2A
000233F4 4EB9 0000 F49A             		jsr	(Obj48_Move).l
000233FA 4EF9 0001 5C3C             		jmp	DisplaySprite
00023400                            
00023400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023400                            
00023400                            
00023400                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00023400 2268 0034                  		movea.l	$34(a0),a1
00023404 0628 0020 001B             		addi.b	#$20,$1B(a0)
0002340A 6400                       		bcc.s	loc_17C3C
0002340C 0868 0000 001A             		bchg	#0,$1A(a0)
00023412                            
00023412                            loc_17C3C:
00023412 3169 0008 003A             		move.w	8(a1),$3A(a0)
00023418 3029 000C                  		move.w	$C(a1),d0
0002341C D068 0032                  		add.w	$32(a0),d0
00023420 3140 0038                  		move.w	d0,$38(a0)
00023424 1169 0022 0022             		move.b	$22(a1),$22(a0)
0002342A 4A29 0022                  		tst.b	$22(a1)
0002342E 6A00                       		bpl.s	locret_17C66
00023430 10BC 003F                  		move.b	#$3F,0(a0)
00023434 117C 0000 0024             		move.b	#0,$24(a0)
0002343A                            
0002343A                            locret_17C66:
0002343A 4E75                       		rts	
0002343C                            ; End of function sub_17C2A
0002343C                            
0002343C                            ; ===========================================================================
0002343C                            
0002343C                            loc_17C68:				; XREF: Obj48_Index
0002343C 2268 0034                  		movea.l	$34(a0),a1
00023440 4A29 0022                  		tst.b	$22(a1)
00023444 6A00                       		bpl.s	Obj48_Display3
00023446 10BC 003F                  		move.b	#$3F,0(a0)
0002344A 117C 0000 0024             		move.b	#0,$24(a0)
00023450                            
00023450                            Obj48_Display3:
00023450 4EF9 0001 5C3C             		jmp	DisplaySprite
00023456                            ; ===========================================================================
00023456                            
00023456                            Obj48_ChkVanish:			; XREF: Obj48_Index
00023456 7000                       		moveq	#0,d0
00023458 4A28 001A                  		tst.b	$1A(a0)
0002345C 6600                       		bne.s	Obj48_Vanish
0002345E 5200                       		addq.b	#1,d0
00023460                            
00023460                            Obj48_Vanish:
00023460 1140 001A                  		move.b	d0,$1A(a0)
00023464 2268 0034                  		movea.l	$34(a0),a1
00023468 4A29 0022                  		tst.b	$22(a1)
0002346C 6A00                       		bpl.s	Obj48_Display4
0002346E 117C 0000 0020             		move.b	#0,$20(a0)
00023474 6100 FBC6                  		bsr.w	BossDefeated
00023478 5328 003C                  		subq.b	#1,$3C(a0)
0002347C 6A00                       		bpl.s	Obj48_Display4
0002347E 10BC 003F                  		move.b	#$3F,(a0)
00023482 117C 0000 0024             		move.b	#0,$24(a0)
00023488                            
00023488                            Obj48_Display4:
00023488 4EF9 0001 5C3C             		jmp	DisplaySprite
0002348E                            ; ===========================================================================
0002348E                            Ani_Eggman:
0002348E                            	include "_anim\Eggman.asm"
0002348E                            ; ---------------------------------------------------------------------------
0002348E                            ; Animation script - Eggman (bosses)
0002348E                            ; ---------------------------------------------------------------------------
0002348E 0000                       		dc.w byte_17CD4-Ani_Eggman
00023490 0000                       		dc.w byte_17CD8-Ani_Eggman
00023492 0000                       		dc.w byte_17CDC-Ani_Eggman
00023494 0000                       		dc.w byte_17CE0-Ani_Eggman
00023496 0000                       		dc.w byte_17CE4-Ani_Eggman
00023498 0000                       		dc.w byte_17CE8-Ani_Eggman
0002349A 0000                       		dc.w byte_17CEC-Ani_Eggman
0002349C 0000                       		dc.w byte_17CF0-Ani_Eggman
0002349E 0000                       		dc.w byte_17CF4-Ani_Eggman
000234A0 0000                       		dc.w byte_17CF8-Ani_Eggman
000234A2 0000                       		dc.w byte_17CFC-Ani_Eggman
000234A4 0000                       		dc.w byte_17D00-Ani_Eggman
000234A6 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000234AA 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000234AE 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000234B2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000234B6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000234BA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000234BE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000234C2 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000234C6 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000234CA 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000234CE 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000234D2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000234DE                            		even
000234DE                            		even
000234DE                            
000234DE                            ; ---------------------------------------------------------------------------
000234DE                            ; Sprite mappings - Eggman (boss levels)
000234DE                            ; ---------------------------------------------------------------------------
000234DE                            Map_Eggman:
000234DE                            	include "_maps\Eggman.asm"
000234DE                            ; ---------------------------------------------------------------------------
000234DE                            ; Sprite mappings - Eggman (boss levels)
000234DE                            ; ---------------------------------------------------------------------------
000234DE 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000234E2 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000234E6 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000234EA 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000234EE 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000234F2 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000234F6 0000                       		dc.w byte_17DC8-Map_Eggman
000234F8 06                         byte_17D26:	dc.b 6
000234F9 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000234FE EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00023503 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00023508 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0002350D 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00023512 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00023517 02                         byte_17D45:	dc.b 2
00023518 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0002351D EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00023522 02                         byte_17D50:	dc.b 2
00023523 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00023528 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0002352D 03                         byte_17D5B:	dc.b 3
0002352E E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00023533 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00023538 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0002353D 03                         byte_17D6B:	dc.b 3
0002353E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00023543 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00023548 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0002354D 03                         byte_17D7B:	dc.b 3
0002354E E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00023553 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00023558 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0002355D 03                         byte_17D8B:	dc.b 3
0002355E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00023563 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00023568 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0002356D 04                         byte_17D9B:	dc.b 4
0002356E E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00023573 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00023578 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0002357D EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00023582 01                         byte_17DB0:	dc.b 1
00023583 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00023588 01                         byte_17DB6:	dc.b 1
00023589 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0002358E 00                         byte_17DBC:	dc.b 0
0002358F 02                         byte_17DBD:	dc.b 2
00023590 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00023595 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0002359A 02                         byte_17DC8:	dc.b 2
0002359B F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
000235A0 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
000235A6 00                         		even
000235A6 00                         		even
000235A6                            ;	even
000235A6                            ; ---------------------------------------------------------------------------
000235A6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000235A6                            ; ---------------------------------------------------------------------------
000235A6                            Map_BossItems:
000235A6                            	include "_maps\Boss items.asm"
000235A6                            ; ---------------------------------------------------------------------------
000235A6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000235A6                            ; ---------------------------------------------------------------------------
000235A6 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000235AA 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000235AE 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000235B2 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000235B6 01                         byte_17DE4:	dc.b 1
000235B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000235BC 02                         byte_17DEA:	dc.b 2
000235BD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000235C2 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000235C7 00                         		dc.b 0
000235C8 01                         byte_17DF6:	dc.b 1
000235C9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000235CE 01                         byte_17DFC:	dc.b 1
000235CF 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000235D4 01                         byte_17E02:	dc.b 1
000235D5 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000235DA 04                         byte_17E08:	dc.b 4
000235DB F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000235E0 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000235E5 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000235EA 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000235EF 00                         		dc.b 0
000235F0 02                         byte_17E1E:	dc.b 2
000235F1 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000235F6 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000235FB 00                         		dc.b 0
000235FC 02                         byte_17E2A:	dc.b 2
000235FD 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00023602 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00023608 00                         		even
00023608 00                         		even
00023608                            ;	even
00023608                            
00023608                            ; ---------------------------------------------------------------------------
00023608                            ; Object 77 - Eggman (LZ)
00023608                            ; ---------------------------------------------------------------------------
00023608                            
00023608                            Obj77:					; XREF: Obj_Index
00023608 7000                       		moveq	#0,d0
0002360A 1028 0024                  		move.b	$24(a0),d0
0002360E 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00023612 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00023616                            ; ===========================================================================
00023616 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00023618 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0002361A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0002361C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0002361E                            
0002361E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00023620 0401                       		dc.b 4,	1
00023622 0607                       		dc.b 6,	7
00023624                            ; ===========================================================================
00023624                            
00023624                            Obj77_Main:				; XREF: Obj77_Index
00023624 317C 1E10 0008             		move.w	#$1E10,8(a0)
0002362A 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00023630 3168 0008 0030             		move.w	8(a0),$30(a0)
00023636 3168 000C 0038             		move.w	$C(a0),$38(a0)
0002363C 117C 000F 0020             		move.b	#$F,$20(a0)
00023642 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00023648 317C 0200 0018             		move.w	#$200,priority(a0)
0002364E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00023652 2248                       		movea.l	a0,a1
00023654 7202                       		moveq	#2,d1
00023656 6000                       		bra.s	Obj77_LoadBoss
00023658                            ; ===========================================================================
00023658                            
00023658                            Obj77_Loop:
00023658 4EB9 0001 671E             		jsr	SingleObjLoad2
0002365E 6600                       		bne.s	Obj77_ShipMain
00023660 12BC 0077                  		move.b	#$77,0(a1)
00023664 3368 0008 0008             		move.w	8(a0),8(a1)
0002366A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023670                            
00023670                            Obj77_LoadBoss:				; XREF: Obj77_Main
00023670 08A8 0000 0022             		bclr	#0,$22(a0)
00023676 4229 0025                  		clr.b	$25(a1)
0002367A 135A 0024                  		move.b	(a2)+,$24(a1)
0002367E 135A 001C                  		move.b	(a2)+,$1C(a1)
00023682 3368 0018 0018             		move.w	priority(a0),priority(a1)
00023688 237C 0002 34DE 0004        		move.l	#Map_Eggman,4(a1)
00023690 337C 0400 0002             		move.w	#$400,2(a1)
00023696 137C 0004 0001             		move.b	#4,1(a1)
0002369C 137C 0020 0023             		move.b	#$20,width_pixels(a1)
000236A2 2348 0034                  		move.l	a0,$34(a1)
000236A6 51C9 FFB0                  		dbf	d1,Obj77_Loop
000236AA                            
000236AA                            Obj77_ShipMain:
000236AA 43F8 D000                  		lea	($FFFFD000).w,a1
000236AE 7000                       		moveq	#0,d0
000236B0 1028 0025                  		move.b	$25(a0),d0
000236B4 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000236B8 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000236BC 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
000236C2 4EB9 0001 2618             		jsr	AnimateSprite
000236C8 7003                       		moveq	#3,d0
000236CA C028 0022                  		and.b	$22(a0),d0
000236CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000236D4 8128 0001                  		or.b	d0,1(a0)
000236D8 4EF9 0001 5C3C             		jmp	DisplaySprite
000236DE                            ; ===========================================================================
000236DE 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000236E2 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000236E6 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000236EA 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000236EE                            ; ===========================================================================
000236EE                            
000236EE                            loc_17F1E:				; XREF: Obj77_ShipIndex
000236EE 3029 0008                  		move.w	8(a1),d0
000236F2 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000236F6 6500                       		bcs.s	loc_17F38
000236F8 317C FE80 0012             		move.w	#-$180,$12(a0)
000236FE 317C 0060 0010             		move.w	#$60,$10(a0)
00023704 5428 0025                  		addq.b	#2,$25(a0)
00023708                            
00023708                            loc_17F38:
00023708 6100 F978                  		bsr.w	BossMove
0002370C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023712 3168 0030 0008             		move.w	$30(a0),8(a0)
00023718                            
00023718                            loc_17F48:
00023718 4A28 003D                  		tst.b	$3D(a0)
0002371C 6600                       		bne.s	loc_17F8E
0002371E 4A28 0022                  		tst.b	$22(a0)
00023722 6B00                       		bmi.s	loc_17F92
00023724 4A28 0020                  		tst.b	$20(a0)
00023728 6600                       		bne.s	locret_17F8C
0002372A 4A28 003E                  		tst.b	$3E(a0)
0002372E 6600                       		bne.s	loc_17F70
00023730 4238 FF7F                  		clr.b	($FFFFFF7F).w	; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00023734 117C 0020 003E             		move.b	#$20,$3E(a0)
0002373A                            ;		move.w	#$AC,d0
0002373A 4EB9 0001 E834             		jsr	(BossModeMusic).l
00023740                            
00023740                            loc_17F70:
00023740 43F8 FB22                  		lea	($FFFFFB22).w,a1
00023744 7000                       		moveq	#0,d0
00023746 4A51                       		tst.w	(a1)
00023748 6600                       		bne.s	loc_17F7E
0002374A 303C 0EEE                  		move.w	#$EEE,d0
0002374E                            
0002374E                            loc_17F7E:
0002374E 3280                       		move.w	d0,(a1)
00023750 5328 003E                  		subq.b	#1,$3E(a0)
00023754 6600                       		bne.s	locret_17F8C
00023756 117C 000F 0020             		move.b	#$F,$20(a0)
0002375C                            
0002375C                            locret_17F8C:
0002375C 4E75                       		rts	
0002375E                            ; ===========================================================================
0002375E                            
0002375E                            loc_17F8E:				; XREF: loc_17F48
0002375E 6000 F8DC                  		bra.w	BossDefeated
00023762                            ; ===========================================================================
00023762                            
00023762                            loc_17F92:				; XREF: loc_17F48
00023762 7064                       		moveq	#100,d0
00023764 6100 0000                  		bsr.w	AddPoints
00023768 117C 00FF 003D             		move.b	#-1,$3D(a0)
0002376E 4E75                       		rts	
00023770                            ; ===========================================================================
00023770                            
00023770                            loc_17FA0:				; XREF: Obj77_ShipIndex
00023770 70FE                       		moveq	#-2,d0
00023772 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00023778 6500                       		bcs.s	loc_17FB6
0002377A 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00023780 4268 0010                  		clr.w	$10(a0)
00023784 5240                       		addq.w	#1,d0
00023786                            
00023786                            loc_17FB6:
00023786 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0002378C 6E00                       		bgt.s	loc_17FCA
0002378E 317C 0500 0038             		move.w	#$500,$38(a0)
00023794 4268 0012                  		clr.w	$12(a0)
00023798 5240                       		addq.w	#1,d0
0002379A                            
0002379A                            loc_17FCA:
0002379A 6600                       		bne.s	loc_17FDC
0002379C 317C 0140 0010             		move.w	#$140,$10(a0)
000237A2 317C FE00 0012             		move.w	#-$200,$12(a0)
000237A8 5428 0025                  		addq.b	#2,$25(a0)
000237AC                            
000237AC                            loc_17FDC:
000237AC 6000 FF5A                  		bra.w	loc_17F38
000237B0                            ; ===========================================================================
000237B0                            
000237B0                            loc_17FE0:				; XREF: Obj77_ShipIndex
000237B0 70FE                       		moveq	#-2,d0
000237B2 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000237B8 6500                       		bcs.s	loc_17FF6
000237BA 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000237C0 4268 0010                  		clr.w	$10(a0)
000237C4 5240                       		addq.w	#1,d0
000237C6                            
000237C6                            loc_17FF6:
000237C6 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000237CC 6E00                       		bgt.s	loc_1800A
000237CE 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000237D4 4268 0012                  		clr.w	$12(a0)
000237D8 5240                       		addq.w	#1,d0
000237DA                            
000237DA                            loc_1800A:
000237DA 6600                       		bne.s	loc_1801A
000237DC 317C FE80 0012             		move.w	#-$180,$12(a0)
000237E2 5428 0025                  		addq.b	#2,$25(a0)
000237E6 4228 003F                  		clr.b	$3F(a0)
000237EA                            
000237EA                            loc_1801A:
000237EA 6000 FF1C                  		bra.w	loc_17F38
000237EE                            ; ===========================================================================
000237EE                            
000237EE                            loc_1801E:				; XREF: Obj77_ShipIndex
000237EE 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000237F4 6E00                       		bgt.s	loc_1804E
000237F6 317C 0100 0038             		move.w	#$100,$38(a0)
000237FC 317C 0140 0010             		move.w	#$140,$10(a0)
00023802 317C FF80 0012             		move.w	#-$80,$12(a0)
00023808 4A28 003D                  		tst.b	$3D(a0)
0002380C 6700                       		beq.s	loc_18046
0002380E E1E8 0010                  		asl	$10(a0)
00023812 E1E8 0012                  		asl	$12(a0)
00023816                            
00023816                            loc_18046:
00023816 5428 0025                  		addq.b	#2,$25(a0)
0002381A 6000 FEEC                  		bra.w	loc_17F38
0002381E                            ; ===========================================================================
0002381E                            
0002381E                            loc_1804E:
0002381E 08E8 0000 0022             		bset	#0,$22(a0)
00023824 5428 003F                  		addq.b	#2,$3F(a0)
00023828 1028 003F                  		move.b	$3F(a0),d0
0002382C 4EB9 0000 8DA4             		jsr	(CalcSine).l
00023832 4A41                       		tst.w	d1
00023834 6A00                       		bpl.s	loc_1806C
00023836 08A8 0000 0022             		bclr	#0,$22(a0)
0002383C                            
0002383C                            loc_1806C:
0002383C E840                       		asr.w	#4,d0
0002383E 4840                       		swap	d0
00023840 4240                       		clr.w	d0
00023842 D0A8 0030                  		add.l	$30(a0),d0
00023846 4840                       		swap	d0
00023848 3140 0008                  		move.w	d0,8(a0)
0002384C 3028 0012                  		move.w	$12(a0),d0
00023850 3238 D00C                  		move.w	($FFFFD00C).w,d1
00023854 9268 000C                  		sub.w	$C(a0),d1
00023858 6500                       		bcs.s	loc_180A2
0002385A 0441 0048                  		subi.w	#$48,d1
0002385E 6500                       		bcs.s	loc_180A2
00023860 E240                       		asr.w	#1,d0
00023862 0441 0028                  		subi.w	#$28,d1
00023866 6500                       		bcs.s	loc_180A2
00023868 E240                       		asr.w	#1,d0
0002386A 0441 0028                  		subi.w	#$28,d1
0002386E 6500                       		bcs.s	loc_180A2
00023870 7000                       		moveq	#0,d0
00023872                            
00023872                            loc_180A2:
00023872 48C0                       		ext.l	d0
00023874 E180                       		asl.l	#8,d0
00023876 4A28 003D                  		tst.b	$3D(a0)
0002387A 6700                       		beq.s	loc_180AE
0002387C D080                       		add.l	d0,d0
0002387E                            
0002387E                            loc_180AE:
0002387E D1A8 0038                  		add.l	d0,$38(a0)
00023882 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023888 6000 FE8E                  		bra.w	loc_17F48
0002388C                            ; ===========================================================================
0002388C                            
0002388C                            loc_180BC:				; XREF: Obj77_ShipIndex
0002388C 70FE                       		moveq	#-2,d0
0002388E 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00023894 6500                       		bcs.s	loc_180D2
00023896 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0002389C 4268 0010                  		clr.w	$10(a0)
000238A0 5240                       		addq.w	#1,d0
000238A2                            
000238A2                            loc_180D2:
000238A2 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000238A8 6E00                       		bgt.s	loc_180E6
000238AA 317C 00C0 0038             		move.w	#$C0,$38(a0)
000238B0 4268 0012                  		clr.w	$12(a0)
000238B4 5240                       		addq.w	#1,d0
000238B6                            
000238B6                            loc_180E6:
000238B6 6600                       		bne.s	loc_180F2
000238B8 5428 0025                  		addq.b	#2,$25(a0)
000238BC 08A8 0000 0022             		bclr	#0,$22(a0)
000238C2                            
000238C2                            loc_180F2:
000238C2 6000 FE44                  		bra.w	loc_17F38
000238C6                            ; ===========================================================================
000238C6                            
000238C6                            loc_180F6:				; XREF: Obj77_ShipIndex
000238C6 4A28 003D                  		tst.b	$3D(a0)
000238CA 6600                       		bne.s	loc_18112
000238CC 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000238D2 6D00                       		blt.s	loc_18126
000238D4 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000238DA 6E00                       		bgt.s	loc_18126
000238DC 117C 0032 003C             		move.b	#$32,$3C(a0)
000238E2                            
000238E2                            loc_18112:
000238E2                            	;	move.w	(Level_Music).w,d0
000238E2 4EB9 0001 D46C             		jsr	(super_GetBgm).l	; play LZ music
000238E8 08E8 0000 0022             		bset	#0,$22(a0)
000238EE 5428 0025                  		addq.b	#2,$25(a0)
000238F2                            
000238F2                            loc_18126:
000238F2 6000 FE14                  		bra.w	loc_17F38
000238F6                            ; ===========================================================================
000238F6                            
000238F6                            loc_1812A:				; XREF: Obj77_ShipIndex
000238F6 4A28 003D                  		tst.b	$3D(a0)
000238FA 6600                       		bne.s	loc_18136
000238FC 5328 003C                  		subq.b	#1,$3C(a0)
00023900 6600                       		bne.s	loc_1814E
00023902                            
00023902                            loc_18136:
00023902 4228 003C                  		clr.b	$3C(a0)
00023906 317C 0400 0010             		move.w	#$400,$10(a0)
0002390C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00023912 4228 003D                  		clr.b	$3D(a0)
00023916 5428 0025                  		addq.b	#2,$25(a0)
0002391A                            
0002391A                            loc_1814E:
0002391A 6000 FDEC                  		bra.w	loc_17F38
0002391E                            ; ===========================================================================
0002391E                            
0002391E                            loc_18152:				; XREF: Obj77_ShipIndex
0002391E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00023924 6400                       		bcc.s	loc_18160
00023926 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0002392A 6000                       		bra.s	loc_18166
0002392C                            ; ===========================================================================
0002392C                            
0002392C                            loc_18160:
0002392C 4A28 0001                  		tst.b	1(a0)
00023930 6A00                       		bpl.s	Obj77_ShipDel
00023932                            
00023932                            loc_18166:
00023932 6000 FDD4                  		bra.w	loc_17F38
00023936                            ; ===========================================================================
00023936                            
00023936                            Obj77_ShipDel:
00023936 4EF9 0001 5BF0             		jmp	DeleteObject
0002393C                            ; ===========================================================================
0002393C                            
0002393C                            Obj77_FaceMain:				; XREF: Obj77_Index
0002393C 2268 0034                  		movea.l	$34(a0),a1
00023940 1011                       		move.b	(a1),d0
00023942 B010                       		cmp.b	(a0),d0
00023944 6600                       		bne.s	Obj77_FaceDel
00023946 7000                       		moveq	#0,d0
00023948 1029 0025                  		move.b	$25(a1),d0
0002394C 7201                       		moveq	#1,d1
0002394E 4A28 003D                  		tst.b	$3D(a0)
00023952 6700                       		beq.s	loc_1818C
00023954 720A                       		moveq	#$A,d1
00023956 6000                       		bra.s	loc_181A0
00023958                            ; ===========================================================================
00023958                            
00023958                            loc_1818C:
00023958 4A29 0020                  		tst.b	$20(a1)
0002395C 6600                       		bne.s	loc_18196
0002395E 7205                       		moveq	#5,d1
00023960 6000                       		bra.s	loc_181A0
00023962                            ; ===========================================================================
00023962                            
00023962                            loc_18196:
00023962 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00023968 6500                       		bcs.s	loc_181A0
0002396A 7204                       		moveq	#4,d1
0002396C                            
0002396C                            loc_181A0:
0002396C 1141 001C                  		move.b	d1,$1C(a0)
00023970 0C00 000E                  		cmpi.b	#$E,d0
00023974 6600                       		bne.s	loc_181B6
00023976 117C 0006 001C             		move.b	#6,$1C(a0)
0002397C 4A28 0001                  		tst.b	1(a0)
00023980 6A00                       		bpl.s	Obj77_FaceDel
00023982                            
00023982                            loc_181B6:
00023982 6000                       		bra.s	Obj77_Display
00023984                            ; ===========================================================================
00023984                            
00023984                            Obj77_FaceDel:
00023984 4EF9 0001 5BF0             		jmp	DeleteObject
0002398A                            ; ===========================================================================
0002398A                            
0002398A                            Obj77_FlameMain:			; XREF: Obj77_Index
0002398A 117C 0007 001C             		move.b	#7,$1C(a0)
00023990 2268 0034                  		movea.l	$34(a0),a1
00023994 1011                       		move.b	(a1),d0
00023996 B010                       		cmp.b	(a0),d0
00023998 6600                       		bne.s	Obj77_FlameDel
0002399A 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000239A0 6600                       		bne.s	loc_181F0
000239A2 117C 000B 001C             		move.b	#$B,$1C(a0)
000239A8 4A28 0001                  		tst.b	1(a0)
000239AC 6A00                       		bpl.s	Obj77_FlameDel
000239AE 6000                       		bra.s	loc_181F0
000239B0                            ; ===========================================================================
000239B0 4A69 0010                  		tst.w	$10(a1)
000239B4 6700                       		beq.s	loc_181F0
000239B6 117C 0008 001C             		move.b	#8,$1C(a0)
000239BC                            
000239BC                            loc_181F0:
000239BC 6000                       		bra.s	Obj77_Display
000239BE                            ; ===========================================================================
000239BE                            
000239BE                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000239BE 4EF9 0001 5BF0             		jmp	DeleteObject
000239C4                            ; ===========================================================================
000239C4                            
000239C4                            Obj77_Display:
000239C4 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
000239CA 4EB9 0001 2618             		jsr	AnimateSprite
000239D0 2268 0034                  		movea.l	$34(a0),a1
000239D4 3169 0008 0008             		move.w	8(a1),8(a0)
000239DA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000239E0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000239E6 7003                       		moveq	#3,d0
000239E8 C028 0022                  		and.b	$22(a0),d0
000239EC 0228 00FC 0001             		andi.b	#-4,1(a0)
000239F2 8128 0001                  		or.b	d0,1(a0)
000239F6 4EF9 0001 5C3C             		jmp	DisplaySprite
000239FC                            ; ===========================================================================
000239FC                            ; ---------------------------------------------------------------------------
000239FC                            ; Object 73 - Eggman (MZ)
000239FC                            ; ---------------------------------------------------------------------------
000239FC                            
000239FC                            Obj73:					; XREF: Obj_Index
000239FC 7000                       		moveq	#0,d0
000239FE 1028 0024                  		move.b	$24(a0),d0
00023A02 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00023A06 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00023A0A                            ; ===========================================================================
00023A0A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00023A0C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00023A0E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00023A10 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00023A12 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00023A14                            
00023A14 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00023A17 0401 04                    		dc.b 4,	1, 4
00023A1A 0607 04                    		dc.b 6,	7, 4
00023A1D 0800 03                    		dc.b 8,	0, 3
00023A20                            ; ===========================================================================
00023A20                            
00023A20                            Obj73_Main:				; XREF: Obj73_Index
00023A20 3168 0008 0030             		move.w	8(a0),$30(a0)
00023A26 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023A2C 117C 000F 0020             		move.b	#$F,$20(a0)
00023A32 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00023A38 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00023A3C 2248                       		movea.l	a0,a1
00023A3E 7203                       		moveq	#3,d1
00023A40 6000                       		bra.s	Obj73_LoadBoss
00023A42                            ; ===========================================================================
00023A42                            
00023A42                            Obj73_Loop:
00023A42 4EB9 0001 671E             		jsr	SingleObjLoad2
00023A48 6600                       		bne.s	Obj73_ShipMain
00023A4A 12BC 0073                  		move.b	#$73,0(a1)
00023A4E 3368 0008 0008             		move.w	8(a0),8(a1)
00023A54 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023A5A                            
00023A5A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00023A5A 08A8 0000 0022             		bclr	#0,$22(a0)
00023A60 4229 0025                  		clr.b	$25(a1)
00023A64 135A 0024                  		move.b	(a2)+,$24(a1)
00023A68 135A 001C                  		move.b	(a2)+,$1C(a1)
00023A6C 135A 0018                  		move.b	(a2)+,priority(a1)
00023A70 3029 0018                  		move.w  priority(a1),d0
00023A74 E248                               lsr.w   #1,d0
00023A76 0240 0380                          andi.w  #$380,d0
00023A7A 3340 0018                          move.w  d0,priority(a1)
00023A7E 237C 0002 34DE 0004        		move.l	#Map_Eggman,4(a1)
00023A86 337C 0400 0002             		move.w	#$400,2(a1)
00023A8C 137C 0004 0001             		move.b	#4,1(a1)
00023A92 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00023A98 2348 0034                  		move.l	a0,$34(a1)
00023A9C 51C9 FFA4                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00023AA0                            
00023AA0                            Obj73_ShipMain:
00023AA0 7000                       		moveq	#0,d0
00023AA2 1028 0025                  		move.b	$25(a0),d0
00023AA6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00023AAA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00023AAE 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
00023AB4 4EB9 0001 2618             		jsr	AnimateSprite
00023ABA 7003                       		moveq	#3,d0
00023ABC C028 0022                  		and.b	$22(a0),d0
00023AC0 0228 00FC 0001             		andi.b	#$FC,1(a0)
00023AC6 8128 0001                  		or.b	d0,1(a0)
00023ACA 4EF9 0001 5C3C             		jmp	DisplaySprite
00023AD0                            ; ===========================================================================
00023AD0 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00023AD2 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00023AD4 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00023AD6 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00023AD8 0000                       		dc.w loc_18582-Obj73_ShipIndex
00023ADA                            ; ===========================================================================
00023ADA                            
00023ADA                            loc_18302:				; XREF: Obj73_ShipIndex
00023ADA 1028 003F                  		move.b	$3F(a0),d0
00023ADE 5428 003F                  		addq.b	#2,$3F(a0)
00023AE2 4EB9 0000 8DA4             		jsr	(CalcSine).l
00023AE8 E440                       		asr.w	#2,d0
00023AEA 3140 0012                  		move.w	d0,$12(a0)
00023AEE 317C FF00 0010             		move.w	#-$100,$10(a0)
00023AF4 6100 F58C                  		bsr.w	BossMove
00023AF8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00023AFE 6600                       		bne.s	loc_18334
00023B00 5428 0025                  		addq.b	#2,$25(a0)
00023B04 4228 0028                  		clr.b	$28(a0)
00023B08 42A8 0010                  		clr.l	$10(a0)
00023B0C                            
00023B0C                            loc_18334:
00023B0C 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023B12 1140 0034                  		move.b	d0,$34(a0)
00023B16                            
00023B16                            loc_1833E:
00023B16 3168 0038 000C             		move.w	$38(a0),$C(a0)
00023B1C 3168 0030 0008             		move.w	$30(a0),8(a0)
00023B22 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00023B28 6400                       		bcc.s	locret_18390
00023B2A 4A28 0022                  		tst.b	$22(a0)
00023B2E 6B00                       		bmi.s	loc_18392
00023B30 4A28 0020                  		tst.b	$20(a0)
00023B34 6600                       		bne.s	locret_18390
00023B36 4A28 003E                  		tst.b	$3E(a0)
00023B3A 6600                       		bne.s	loc_18374
00023B3C 117C 0028 003E             		move.b	#$28,$3E(a0)
00023B42                            ;		move.w	#$AC,d0
00023B42 4EB9 0001 E834             		jsr	(BossModeMusic).l ;	play boss damage sound
00023B48                            
00023B48                            loc_18374:
00023B48 43F8 FB22                  		lea	($FFFFFB22).w,a1
00023B4C 7000                       		moveq	#0,d0
00023B4E 4A51                       		tst.w	(a1)
00023B50 6600                       		bne.s	loc_18382
00023B52 303C 0EEE                  		move.w	#$EEE,d0
00023B56                            
00023B56                            loc_18382:
00023B56 3280                       		move.w	d0,(a1)
00023B58 5328 003E                  		subq.b	#1,$3E(a0)
00023B5C 6600                       		bne.s	locret_18390
00023B5E 117C 000F 0020             		move.b	#$F,$20(a0)
00023B64                            
00023B64                            locret_18390:
00023B64 4E75                       		rts	
00023B66                            ; ===========================================================================
00023B66                            
00023B66                            loc_18392:				; XREF: loc_1833E
00023B66 7064                       		moveq	#100,d0
00023B68 6100 0000                  		bsr.w	AddPoints
00023B6C 117C 0004 0025             		move.b	#4,$25(a0)
00023B72 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00023B78 4268 0010                  		clr.w	$10(a0)
00023B7C 4E75                       		rts	
00023B7E                            ; ===========================================================================
00023B7E                            
00023B7E                            loc_183AA:				; XREF: Obj73_ShipIndex
00023B7E 7000                       		moveq	#0,d0
00023B80 1028 0028                  		move.b	$28(a0),d0
00023B84 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00023B88 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00023B8C 0228 0006 0028             		andi.b	#6,$28(a0)
00023B92 6000 FF82                  		bra.w	loc_1833E
00023B96                            ; ===========================================================================
00023B96 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00023B98 0000                       		dc.w Obj73_MakeLava2-off_183C2
00023B9A 0000                       		dc.w loc_183CA-off_183C2
00023B9C 0000                       		dc.w Obj73_MakeLava2-off_183C2
00023B9E                            ; ===========================================================================
00023B9E                            
00023B9E                            loc_183CA:				; XREF: off_183C2
00023B9E 4A68 0010                  		tst.w	$10(a0)
00023BA2 6600                       		bne.s	loc_183FE
00023BA4 7040                       		moveq	#$40,d0
00023BA6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00023BAC 6700                       		beq.s	loc_183E6
00023BAE 6500                       		bcs.s	loc_183DE
00023BB0 4440                       		neg.w	d0
00023BB2                            
00023BB2                            loc_183DE:
00023BB2 3140 0012                  		move.w	d0,$12(a0)
00023BB6 6000 F4CA                  		bra.w	BossMove
00023BBA                            ; ===========================================================================
00023BBA                            
00023BBA                            loc_183E6:
00023BBA 317C 0200 0010             		move.w	#$200,$10(a0)
00023BC0 317C 0100 0012             		move.w	#$100,$12(a0)
00023BC6 0828 0000 0022             		btst	#0,$22(a0)
00023BCC 6600                       		bne.s	loc_183FE
00023BCE 4468 0010                  		neg.w	$10(a0)
00023BD2                            
00023BD2                            loc_183FE:
00023BD2 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00023BD8 6400                       		bcc.s	Obj73_MakeLava
00023BDA 6100 F4A6                  		bsr.w	BossMove
00023BDE 5968 0012                  		subq.w	#4,$12(a0)
00023BE2                            
00023BE2                            Obj73_MakeLava:
00023BE2 5328 0034                  		subq.b	#1,$34(a0)
00023BE6 6400                       		bcc.s	loc_1845C
00023BE8 4EB9 0001 6708             		jsr	SingleObjLoad
00023BEE 6600                       		bne.s	loc_1844A
00023BF0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00023BF4 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00023BFA 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023C00 0280 0000 FFFF             		andi.l	#$FFFF,d0
00023C06 80FC 0050                  		divu.w	#$50,d0
00023C0A 4840                       		swap	d0
00023C0C 0640 1878                  		addi.w	#$1878,d0
00023C10 3340 0008                  		move.w	d0,8(a1)
00023C14 EE09                       		lsr.b	#7,d1
00023C16 337C 00FF 0028             		move.w	#$FF,$28(a1)
00023C1C                            
00023C1C                            loc_1844A:
00023C1C 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00023C22 0200 001F                  		andi.b	#$1F,d0
00023C26 0600 0040                  		addi.b	#$40,d0
00023C2A 1140 0034                  		move.b	d0,$34(a0)
00023C2E                            
00023C2E                            loc_1845C:
00023C2E 0828 0000 0022             		btst	#0,$22(a0)
00023C34 6700                       		beq.s	loc_18474
00023C36 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00023C3C 6D00                       		blt.s	locret_1849C
00023C3E 317C 1910 0030             		move.w	#$1910,$30(a0)
00023C44 6000                       		bra.s	loc_18482
00023C46                            ; ===========================================================================
00023C46                            
00023C46                            loc_18474:
00023C46 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00023C4C 6E00                       		bgt.s	locret_1849C
00023C4E 317C 1830 0030             		move.w	#$1830,$30(a0)
00023C54                            
00023C54                            loc_18482:
00023C54 4268 0010                  		clr.w	$10(a0)
00023C58 317C FE80 0012             		move.w	#-$180,$12(a0)
00023C5E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00023C64 6400                       		bcc.s	loc_18498
00023C66 4468 0012                  		neg.w	$12(a0)
00023C6A                            
00023C6A                            loc_18498:
00023C6A 5428 0028                  		addq.b	#2,$28(a0)
00023C6E                            
00023C6E                            locret_1849C:
00023C6E 4E75                       		rts	
00023C70                            ; ===========================================================================
00023C70                            
00023C70                            Obj73_MakeLava2:			; XREF: off_183C2
00023C70 6100 F410                  		bsr.w	BossMove
00023C74 3028 0038                  		move.w	$38(a0),d0
00023C78 0440 022C                  		subi.w	#$22C,d0
00023C7C 6E00                       		bgt.s	locret_184F4
00023C7E 303C 022C                  		move.w	#$22C,d0
00023C82 4A68 0012                  		tst.w	$12(a0)
00023C86 6700                       		beq.s	loc_184EA
00023C88 4268 0012                  		clr.w	$12(a0)
00023C8C 317C 0050 003C             		move.w	#$50,$3C(a0)
00023C92 0868 0000 0022             		bchg	#0,$22(a0)
00023C98 4EB9 0001 6708             		jsr	SingleObjLoad
00023C9E 6600                       		bne.s	loc_184EA
00023CA0 3368 0030 0008             		move.w	$30(a0),8(a1)
00023CA6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00023CAC 0669 0018 000C             		addi.w	#$18,$C(a1)
00023CB2 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00023CB6 137C 0001 0028             		move.b	#1,$28(a1)
00023CBC                            
00023CBC                            loc_184EA:
00023CBC 5368 003C                  		subq.w	#1,$3C(a0)
00023CC0 6600                       		bne.s	locret_184F4
00023CC2 5428 0028                  		addq.b	#2,$28(a0)
00023CC6                            
00023CC6                            locret_184F4:
00023CC6 4E75                       		rts	
00023CC8                            ; ===========================================================================
00023CC8                            
00023CC8                            loc_184F6:				; XREF: Obj73_ShipIndex
00023CC8 5368 003C                  		subq.w	#1,$3C(a0)
00023CCC 6B00                       		bmi.s	loc_18500
00023CCE 6000 F36C                  		bra.w	BossDefeated
00023CD2                            ; ===========================================================================
00023CD2                            
00023CD2                            loc_18500:
00023CD2 08E8 0000 0022             		bset	#0,$22(a0)
00023CD8 08A8 0007 0022             		bclr	#7,$22(a0)
00023CDE 4268 0010                  		clr.w	$10(a0)
00023CE2 5428 0025                  		addq.b	#2,$25(a0)
00023CE6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00023CEC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00023CF0 6600                       		bne.s	locret_1852A
00023CF2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00023CF8 4268 0012                  		clr.w	$12(a0)
00023CFC                            
00023CFC                            locret_1852A:
00023CFC 4E75                       		rts	
00023CFE                            ; ===========================================================================
00023CFE                            
00023CFE                            loc_1852C:				; XREF: Obj73_ShipIndex
00023CFE 5268 003C                  		addq.w	#1,$3C(a0)
00023D02 6700                       		beq.s	loc_18544
00023D04 6A00                       		bpl.s	loc_1854E
00023D06 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00023D0C 6400                       		bcc.s	loc_18544
00023D0E 0668 0018 0012             		addi.w	#$18,$12(a0)
00023D14 6000                       		bra.s	loc_1857A
00023D16                            ; ===========================================================================
00023D16                            
00023D16                            loc_18544:
00023D16 4268 0012                  		clr.w	$12(a0)
00023D1A 4268 003C                  		clr.w	$3C(a0)
00023D1E 6000                       		bra.s	loc_1857A
00023D20                            ; ===========================================================================
00023D20                            
00023D20                            loc_1854E:
00023D20 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00023D26 6500                       		bcs.s	loc_18566
00023D28 6700                       		beq.s	loc_1856C
00023D2A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00023D30 6500                       		bcs.s	loc_1857A
00023D32 5428 0025                  		addq.b	#2,$25(a0)
00023D36 6000                       		bra.s	loc_1857A
00023D38                            ; ===========================================================================
00023D38                            
00023D38                            loc_18566:
00023D38 5168 0012                  		subq.w	#8,$12(a0)
00023D3C 6000                       		bra.s	loc_1857A
00023D3E                            ; ===========================================================================
00023D3E                            
00023D3E                            loc_1856C:
00023D3E 4268 0012                  		clr.w	$12(a0)
00023D42                            	;	move.w	(Level_Music).w,d0
00023D42 4EB9 0001 D46C             		jsr	(super_GetBgm).l	; play MZ music
00023D48                            
00023D48                            loc_1857A:
00023D48 6100 F338                  		bsr.w	BossMove
00023D4C 6000 FDC8                  		bra.w	loc_1833E
00023D50                            ; ===========================================================================
00023D50                            
00023D50                            loc_18582:				; XREF: Obj73_ShipIndex
00023D50 317C 0500 0010             		move.w	#$500,$10(a0)
00023D56 317C FFC0 0012             		move.w	#-$40,$12(a0)
00023D5C 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00023D62 6400                       		bcc.s	loc_1859C
00023D64 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00023D68 6000                       		bra.s	loc_185A2
00023D6A                            ; ===========================================================================
00023D6A                            
00023D6A                            loc_1859C:
00023D6A 4A28 0001                  		tst.b	1(a0)
00023D6E 6A00                       		bpl.s	Obj73_ShipDel
00023D70                            
00023D70                            loc_185A2:
00023D70 6100 F310                  		bsr.w	BossMove
00023D74 6000 FDA0                  		bra.w	loc_1833E
00023D78                            ; ===========================================================================
00023D78                            
00023D78                            Obj73_ShipDel:
00023D78 4EF9 0001 5BF0             		jmp	DeleteObject
00023D7E                            ; ===========================================================================
00023D7E                            
00023D7E                            Obj73_FaceMain:				; XREF: Obj73_Index
00023D7E 7000                       		moveq	#0,d0
00023D80 7201                       		moveq	#1,d1
00023D82 2268 0034                  		movea.l	$34(a0),a1
00023D86 1029 0025                  		move.b	$25(a1),d0
00023D8A 5540                       		subq.w	#2,d0
00023D8C 6600                       		bne.s	loc_185D2
00023D8E 0829 0001 0028             		btst	#1,$28(a1)
00023D94 6700                       		beq.s	loc_185DA
00023D96 4A69 0012                  		tst.w	$12(a1)
00023D9A 6600                       		bne.s	loc_185DA
00023D9C 7204                       		moveq	#4,d1
00023D9E 6000                       		bra.s	loc_185EE
00023DA0                            ; ===========================================================================
00023DA0                            
00023DA0                            loc_185D2:
00023DA0 5500                       		subq.b	#2,d0
00023DA2 6B00                       		bmi.s	loc_185DA
00023DA4 720A                       		moveq	#$A,d1
00023DA6 6000                       		bra.s	loc_185EE
00023DA8                            ; ===========================================================================
00023DA8                            
00023DA8                            loc_185DA:
00023DA8 4A29 0020                  		tst.b	$20(a1)
00023DAC 6600                       		bne.s	loc_185E4
00023DAE 7205                       		moveq	#5,d1
00023DB0 6000                       		bra.s	loc_185EE
00023DB2                            ; ===========================================================================
00023DB2                            
00023DB2                            loc_185E4:
00023DB2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00023DB8 6500                       		bcs.s	loc_185EE
00023DBA 7204                       		moveq	#4,d1
00023DBC                            
00023DBC                            loc_185EE:
00023DBC 1141 001C                  		move.b	d1,$1C(a0)
00023DC0 5900                       		subq.b	#4,d0
00023DC2 6600                       		bne.s	loc_18602
00023DC4 117C 0006 001C             		move.b	#6,$1C(a0)
00023DCA 4A28 0001                  		tst.b	1(a0)
00023DCE 6A00                       		bpl.s	Obj73_FaceDel
00023DD0                            
00023DD0                            loc_18602:
00023DD0 6000                       		bra.s	Obj73_Display
00023DD2                            ; ===========================================================================
00023DD2                            
00023DD2                            Obj73_FaceDel:
00023DD2 4EF9 0001 5BF0             		jmp	DeleteObject
00023DD8                            ; ===========================================================================
00023DD8                            
00023DD8                            Obj73_FlameMain:			; XREF: Obj73_Index
00023DD8 117C 0007 001C             		move.b	#7,$1C(a0)
00023DDE 2268 0034                  		movea.l	$34(a0),a1
00023DE2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00023DE8 6D00                       		blt.s	loc_1862A
00023DEA 117C 000B 001C             		move.b	#$B,$1C(a0)
00023DF0 4A28 0001                  		tst.b	1(a0)
00023DF4 6A00                       		bpl.s	Obj73_FlameDel
00023DF6 6000                       		bra.s	loc_18636
00023DF8                            ; ===========================================================================
00023DF8                            
00023DF8                            loc_1862A:
00023DF8 4A69 0010                  		tst.w	$10(a1)
00023DFC 6700                       		beq.s	loc_18636
00023DFE 117C 0008 001C             		move.b	#8,$1C(a0)
00023E04                            
00023E04                            loc_18636:
00023E04 6000                       		bra.s	Obj73_Display
00023E06                            ; ===========================================================================
00023E06                            
00023E06                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00023E06 4EF9 0001 5BF0             		jmp	DeleteObject
00023E0C                            ; ===========================================================================
00023E0C                            
00023E0C                            Obj73_Display:
00023E0C 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
00023E12 4EB9 0001 2618             		jsr	AnimateSprite
00023E18                            
00023E18                            loc_1864A:
00023E18 2268 0034                  		movea.l	$34(a0),a1
00023E1C 3169 0008 0008             		move.w	8(a1),8(a0)
00023E22 3169 000C 000C             		move.w	$C(a1),$C(a0)
00023E28 1169 0022 0022             		move.b	$22(a1),$22(a0)
00023E2E 7003                       		moveq	#3,d0
00023E30 C028 0022                  		and.b	$22(a0),d0
00023E34 0228 00FC 0001             		andi.b	#-4,1(a0)
00023E3A 8128 0001                  		or.b	d0,1(a0)
00023E3E 4EF9 0001 5C3C             		jmp	DisplaySprite
00023E44                            ; ===========================================================================
00023E44                            
00023E44                            Obj73_TubeMain:				; XREF: Obj73_Index
00023E44 2268 0034                  		movea.l	$34(a0),a1
00023E48 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00023E4E 6600                       		bne.s	loc_18688
00023E50 4A28 0001                  		tst.b	1(a0)
00023E54 6A00                       		bpl.s	Obj73_TubeDel
00023E56                            
00023E56                            loc_18688:
00023E56 217C 0002 35A6 0004        		move.l	#Map_BossItems,4(a0)
00023E5E 317C 246C 0002             		move.w	#$246C,2(a0)
00023E64 117C 0004 001A             		move.b	#4,$1A(a0)
00023E6A 60AC                       		bra.s	loc_1864A
00023E6C                            ; ===========================================================================
00023E6C                            
00023E6C                            Obj73_TubeDel:
00023E6C 4EF9 0001 5BF0             		jmp	DeleteObject
00023E72                            ; ===========================================================================
00023E72                            ; ---------------------------------------------------------------------------
00023E72                            ; Object 74 - lava that	Eggman drops (MZ)
00023E72                            ; ---------------------------------------------------------------------------
00023E72                            
00023E72                            Obj74:					; XREF: Obj_Index
00023E72 7000                       		moveq	#0,d0
00023E74 1028 0024                  		move.b	$24(a0),d0
00023E78 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00023E7C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00023E80 4EF9 0001 5C3C             		jmp	DisplaySprite
00023E86                            ; ===========================================================================
00023E86 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00023E88 0000                       		dc.w Obj74_Action-Obj74_Index
00023E8A 0000                       		dc.w loc_18886-Obj74_Index
00023E8C 0000                       		dc.w Obj74_Delete3-Obj74_Index
00023E8E                            ; ===========================================================================
00023E8E                            
00023E8E                            Obj74_Main:				; XREF: Obj74_Index
00023E8E 117C 0008 0016             		move.b	#8,$16(a0)
00023E94 117C 0008 0017             		move.b	#8,$17(a0)
00023E9A 217C 0001 344E 0004        		move.l	#Map_obj14,4(a0)
00023EA2 317C 0345 0002             		move.w	#$345,2(a0)
00023EA8 117C 0004 0001             		move.b	#4,1(a0)
00023EAE 317C 0280 0018             		move.w	#$280,priority(a0)
00023EB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023EBA 117C 0008 0023             		move.b	#8,width_pixels(a0)
00023EC0 5428 0024                  		addq.b	#2,$24(a0)
00023EC4 4A28 0028                  		tst.b	$28(a0)
00023EC8 6600                       		bne.s	loc_1870A
00023ECA 117C 008B 0020             		move.b	#$8B,$20(a0)
00023ED0 5428 0024                  		addq.b	#2,$24(a0)
00023ED4 6000 0000                  		bra.w	loc_18886
00023ED8                            ; ===========================================================================
00023ED8                            
00023ED8                            loc_1870A:
00023ED8 117C 001E 0029             		move.b	#$1E,$29(a0)
00023EDE 303C 00AE                  		move.w	#$AE,d0
00023EE2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play lava sound
00023EE8                            
00023EE8                            Obj74_Action:				; XREF: Obj74_Index
00023EE8 7000                       		moveq	#0,d0
00023EEA 1028 0025                  		move.b	$25(a0),d0
00023EEE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00023EF2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00023EF6 4EB9 0001 5BD6             		jsr	SpeedToPos
00023EFC 43F9 0001 76F8             		lea	(Ani_obj14).l,a1
00023F02 4EB9 0001 2618             		jsr	AnimateSprite
00023F08 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00023F0E 6200                       		bhi.s	Obj74_Delete
00023F10 4E75                       		rts	
00023F12                            ; ===========================================================================
00023F12                            
00023F12                            Obj74_Delete:
00023F12 4EF9 0001 5BF0             		jmp	DeleteObject
00023F18                            ; ===========================================================================
00023F18 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00023F1A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00023F1C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00023F1E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00023F20                            ; ===========================================================================
00023F20                            
00023F20                            Obj74_Drop:				; XREF: Obj74_Index2
00023F20 08E8 0001 0022             		bset	#1,$22(a0)
00023F26 5328 0029                  		subq.b	#1,$29(a0)
00023F2A 6A00                       		bpl.s	locret_18780
00023F2C 117C 008B 0020             		move.b	#$8B,$20(a0)
00023F32 4228 0028                  		clr.b	$28(a0)
00023F36 0668 0018 0012             		addi.w	#$18,$12(a0)
00023F3C 08A8 0001 0022             		bclr	#1,$22(a0)
00023F42 6100 C69C                  		bsr.w	ObjHitFloor
00023F46 4A41                       		tst.w	d1
00023F48 6A00                       		bpl.s	locret_18780
00023F4A 5428 0025                  		addq.b	#2,$25(a0)
00023F4E                            
00023F4E                            locret_18780:
00023F4E 4E75                       		rts	
00023F50                            ; ===========================================================================
00023F50                            
00023F50                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00023F50 5568 000C                  		subq.w	#2,$C(a0)
00023F54 08E8 0007 0002             		bset	#7,2(a0)
00023F5A 317C 00A0 0010             		move.w	#$A0,$10(a0)
00023F60 4268 0012                  		clr.w	$12(a0)
00023F64 3168 0008 0030             		move.w	8(a0),$30(a0)
00023F6A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00023F70 117C 0003 0029             		move.b	#3,$29(a0)
00023F76 4EB9 0001 671E             		jsr	SingleObjLoad2
00023F7C 6600                       		bne.s	loc_187CA
00023F7E 47D1                       		lea	(a1),a3
00023F80 45D0                       		lea	(a0),a2
00023F82 7003                       		moveq	#3,d0
00023F84                            
00023F84                            Obj74_Loop:
00023F84 26DA                       		move.l	(a2)+,(a3)+
00023F86 26DA                       		move.l	(a2)+,(a3)+
00023F88 26DA                       		move.l	(a2)+,(a3)+
00023F8A 26DA                       		move.l	(a2)+,(a3)+
00023F8C 51C8 FFF6                  		dbf	d0,Obj74_Loop
00023F90                            
00023F90 4469 0010                  		neg.w	$10(a1)
00023F94 5429 0025                  		addq.b	#2,$25(a1)
00023F98                            
00023F98                            loc_187CA:
00023F98 5428 0025                  		addq.b	#2,$25(a0)
00023F9C 4E75                       		rts	
00023F9E                            
00023F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00023F9E                            
00023F9E                            
00023F9E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00023F9E 4EB9 0001 671E             		jsr	SingleObjLoad2
00023FA4 6600                       		bne.s	locret_187EE
00023FA6 3368 0008 0008             		move.w	8(a0),8(a1)
00023FAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00023FB2 12BC 0074                  		move.b	#$74,(a1)
00023FB6 337C 0067 0028             		move.w	#$67,$28(a1)
00023FBC                            
00023FBC                            locret_187EE:
00023FBC 4E75                       		rts	
00023FBE                            ; End of function Obj74_Duplicate2
00023FBE                            
00023FBE                            ; ===========================================================================
00023FBE                            
00023FBE                            Obj74_Duplicate:			; XREF: Obj74_Index2
00023FBE 6100 C620                  		bsr.w	ObjHitFloor
00023FC2 4A41                       		tst.w	d1
00023FC4 6A00                       		bpl.s	loc_18826
00023FC6 3028 0008                  		move.w	8(a0),d0
00023FCA 0C40 1940                  		cmpi.w	#$1940,d0
00023FCE 6E00                       		bgt.s	loc_1882C
00023FD0 3228 0030                  		move.w	$30(a0),d1
00023FD4 B240                       		cmp.w	d0,d1
00023FD6 6700                       		beq.s	loc_1881E
00023FD8 0240 0010                  		andi.w	#$10,d0
00023FDC 0241 0010                  		andi.w	#$10,d1
00023FE0 B240                       		cmp.w	d0,d1
00023FE2 6700                       		beq.s	loc_1881E
00023FE4 61B8                       		bsr.s	Obj74_Duplicate2
00023FE6 3168 0008 0032             		move.w	8(a0),$32(a0)
00023FEC                            
00023FEC                            loc_1881E:
00023FEC 3168 0008 0030             		move.w	8(a0),$30(a0)
00023FF2 4E75                       		rts	
00023FF4                            ; ===========================================================================
00023FF4                            
00023FF4                            loc_18826:
00023FF4 5428 0025                  		addq.b	#2,$25(a0)
00023FF8 4E75                       		rts	
00023FFA                            ; ===========================================================================
00023FFA                            
00023FFA                            loc_1882C:
00023FFA 5428 0024                  		addq.b	#2,$24(a0)
00023FFE 4E75                       		rts	
00024000                            ; ===========================================================================
00024000                            
00024000                            Obj74_FallEdge:				; XREF: Obj74_Index2
00024000 08A8 0001 0022             		bclr	#1,$22(a0)
00024006 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0002400C 3028 0008                  		move.w	8(a0),d0
00024010 9068 0032                  		sub.w	$32(a0),d0
00024014 6A00                       		bpl.s	loc_1884A
00024016 4440                       		neg.w	d0
00024018                            
00024018                            loc_1884A:
00024018 0C40 0012                  		cmpi.w	#$12,d0
0002401C 6600                       		bne.s	loc_18856
0002401E 08A8 0007 0002             		bclr	#7,2(a0)
00024024                            
00024024                            loc_18856:
00024024 6100 C5BA                  		bsr.w	ObjHitFloor
00024028 4A41                       		tst.w	d1
0002402A 6A00                       		bpl.s	locret_1887E
0002402C 5328 0029                  		subq.b	#1,$29(a0)
00024030 6700                       		beq.s	Obj74_Delete2
00024032 4268 0012                  		clr.w	$12(a0)
00024036 3168 0032 0008             		move.w	$32(a0),8(a0)
0002403C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00024042 08E8 0007 0002             		bset	#7,2(a0)
00024048 5528 0025                  		subq.b	#2,$25(a0)
0002404C                            
0002404C                            locret_1887E:
0002404C 4E75                       		rts	
0002404E                            ; ===========================================================================
0002404E                            
0002404E                            Obj74_Delete2:
0002404E 4EF9 0001 5BF0             		jmp	DeleteObject
00024054                            ; ===========================================================================
00024054                            
00024054                            loc_18886:				; XREF: Obj74_Index
00024054 08E8 0007 0002             		bset	#7,2(a0)
0002405A 5328 0029                  		subq.b	#1,$29(a0)
0002405E 6600                       		bne.s	Obj74_Animate
00024060 117C 0001 001C             		move.b	#1,$1C(a0)
00024066 5968 000C                  		subq.w	#4,$C(a0)
0002406A 4228 0020                  		clr.b	$20(a0)
0002406E                            
0002406E                            Obj74_Animate:
0002406E 43F9 0001 76F8             		lea	(Ani_obj14).l,a1
00024074 4EF9 0001 2618             		jmp	AnimateSprite
0002407A                            ; ===========================================================================
0002407A                            
0002407A                            Obj74_Delete3:				; XREF: Obj74_Index
0002407A 4EF9 0001 5BF0             		jmp	DeleteObject
00024080                            ; ===========================================================================
00024080                            
00024080                            Obj7A_Delete:
00024080 4EF9 0001 5BF0             		jmp	DeleteObject
00024086                            ; ===========================================================================
00024086                            ; ---------------------------------------------------------------------------
00024086                            ; Object 7A - Eggman (SLZ)
00024086                            ; ---------------------------------------------------------------------------
00024086                            
00024086                            Obj7A:					; XREF: Obj_Index
00024086 7000                       		moveq	#0,d0
00024088 1028 0024                  		move.b	$24(a0),d0
0002408C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00024090 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00024094                            ; ===========================================================================
00024094 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00024096 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00024098 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0002409A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0002409C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0002409E                            
0002409E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000240A1 0401 04                    		dc.b 4,	1, 4
000240A4 0607 04                    		dc.b 6,	7, 4
000240A7 0800 03                    		dc.b 8,	0, 3
000240AA                            ; ===========================================================================
000240AA                            
000240AA                            Obj7A_Main:				; XREF: Obj7A_Index
000240AA 317C 2188 0008             		move.w	#$2188,8(a0)
000240B0 317C 0228 000C             		move.w	#$228,$C(a0)
000240B6 3168 0008 0030             		move.w	8(a0),$30(a0)
000240BC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000240C2 117C 000F 0020             		move.b	#$F,$20(a0)
000240C8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000240CE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000240D2 2248                       		movea.l	a0,a1
000240D4 7203                       		moveq	#3,d1
000240D6 6000                       		bra.s	Obj7A_LoadBoss
000240D8                            ; ===========================================================================
000240D8                            
000240D8                            Obj7A_Loop:
000240D8 4EB9 0001 671E             		jsr	SingleObjLoad2
000240DE 6600                       		bne.s	loc_1895C
000240E0 12BC 007A                  		move.b	#$7A,0(a1)
000240E4 3368 0008 0008             		move.w	8(a0),8(a1)
000240EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000240F0                            
000240F0                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000240F0 08A8 0000 0022             		bclr	#0,$22(a0)
000240F6 4229 0025                  		clr.b	$25(a1)
000240FA 135A 0024                  		move.b	(a2)+,$24(a1)
000240FE 135A 001C                  		move.b	(a2)+,$1C(a1)
00024102 135A 0018                  		move.b	(a2)+,priority(a1)
00024106 3029 0018                          move.w  priority(a1),d0
0002410A E248                               lsr.w   #1,d0
0002410C 0240 0380                          andi.w  #$380,d0
00024110 3340 0018                          move.w  d0,priority(a1)
00024114 237C 0002 34DE 0004        		move.l	#Map_Eggman,4(a1)
0002411C 337C 0400 0002             		move.w	#$400,2(a1)
00024122 137C 0004 0001             		move.b	#4,1(a1)
00024128 137C 0020 0023             		move.b	#$20,width_pixels(a1)
0002412E 2348 0034                  		move.l	a0,$34(a1)
00024132 51C9 FFA4                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00024136                            
00024136                            loc_1895C:
00024136 43F8 D040                  		lea	($FFFFD040).w,a1
0002413A 45E8 002A                  		lea	$2A(a0),a2
0002413E 705E                       		moveq	#$5E,d0
00024140 723E                       		moveq	#$3E,d1
00024142                            
00024142                            loc_18968:
00024142 B011                       		cmp.b	(a1),d0
00024144 6600                       		bne.s	loc_18974
00024146 4A29 0028                  		tst.b	$28(a1)
0002414A 6700                       		beq.s	loc_18974
0002414C 34C9                       		move.w	a1,(a2)+
0002414E                            
0002414E                            loc_18974:
0002414E D2FC 0040                  		adda.w	#$40,a1
00024152 51C9 FFEE                  		dbf	d1,loc_18968
00024156                            
00024156                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00024156 7000                       		moveq	#0,d0
00024158 1028 0025                  		move.b	$25(a0),d0
0002415C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00024160 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00024164 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
0002416A 4EB9 0001 2618             		jsr	AnimateSprite
00024170 7003                       		moveq	#3,d0
00024172 C028 0022                  		and.b	$22(a0),d0
00024176 0228 00FC 0001             		andi.b	#$FC,1(a0)
0002417C 8128 0001                  		or.b	d0,1(a0)
00024180 4EF9 0001 5C3C             		jmp	DisplaySprite
00024186                            ; ===========================================================================
00024186 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00024188 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0002418A 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0002418C 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0002418E 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00024190 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00024192                            ; ===========================================================================
00024192                            
00024192                            loc_189B8:				; XREF: Obj7A_ShipIndex
00024192 317C FF00 0010             		move.w	#-$100,$10(a0)
00024198 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0002419E 6400                       		bcc.s	loc_189CA
000241A0 5428 0025                  		addq.b	#2,$25(a0)
000241A4                            
000241A4                            loc_189CA:
000241A4 6100 EEDC                  		bsr.w	BossMove
000241A8 1028 003F                  		move.b	$3F(a0),d0
000241AC 5428 003F                  		addq.b	#2,$3F(a0)
000241B0 4EB9 0000 8DA4             		jsr	(CalcSine).l
000241B6 EC40                       		asr.w	#6,d0
000241B8 D068 0038                  		add.w	$38(a0),d0
000241BC 3140 000C                  		move.w	d0,$C(a0)
000241C0 3168 0030 0008             		move.w	$30(a0),8(a0)
000241C6 6000                       		bra.s	loc_189FE
000241C8                            ; ===========================================================================
000241C8                            
000241C8                            loc_189EE:
000241C8 6100 EEB8                  		bsr.w	BossMove
000241CC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000241D2 3168 0030 0008             		move.w	$30(a0),8(a0)
000241D8                            
000241D8                            loc_189FE:
000241D8 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000241DE 6400                       		bcc.s	locret_18A44
000241E0 4A28 0022                  		tst.b	$22(a0)
000241E4 6B00                       		bmi.s	loc_18A46
000241E6 4A28 0020                  		tst.b	$20(a0)
000241EA 6600                       		bne.s	locret_18A44
000241EC 4A28 003E                  		tst.b	$3E(a0)
000241F0 6600                       		bne.s	loc_18A28
000241F2 117C 0020 003E             		move.b	#$20,$3E(a0)
000241F8                            ;		move.w	#$AC,d0
000241F8 4EB9 0001 E834             		jsr	(BossModeMusic).l ;	play boss damage sound
000241FE                            
000241FE                            loc_18A28:
000241FE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00024202 7000                       		moveq	#0,d0
00024204 4A51                       		tst.w	(a1)
00024206 6600                       		bne.s	loc_18A36
00024208 303C 0EEE                  		move.w	#$EEE,d0
0002420C                            
0002420C                            loc_18A36:
0002420C 3280                       		move.w	d0,(a1)
0002420E 5328 003E                  		subq.b	#1,$3E(a0)
00024212 6600                       		bne.s	locret_18A44
00024214 117C 000F 0020             		move.b	#$F,$20(a0)
0002421A                            
0002421A                            locret_18A44:
0002421A 4E75                       		rts	
0002421C                            ; ===========================================================================
0002421C                            
0002421C                            loc_18A46:
0002421C 7064                       		moveq	#100,d0
0002421E 6100 0000                  		bsr.w	AddPoints
00024222 117C 0006 0025             		move.b	#6,$25(a0)
00024228 117C 0078 003C             		move.b	#$78,$3C(a0)
0002422E 4268 0010                  		clr.w	$10(a0)
00024232 4E75                       		rts	
00024234                            ; ===========================================================================
00024234                            
00024234                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00024234 3028 0030                  		move.w	$30(a0),d0
00024238 317C 0200 0010             		move.w	#$200,$10(a0)
0002423E 0828 0000 0022             		btst	#0,$22(a0)
00024244 6600                       		bne.s	loc_18A7C
00024246 4468 0010                  		neg.w	$10(a0)
0002424A 0C40 2008                  		cmpi.w	#$2008,d0
0002424E 6E00                       		bgt.s	loc_18A88
00024250 6000                       		bra.s	loc_18A82
00024252                            ; ===========================================================================
00024252                            
00024252                            loc_18A7C:
00024252 0C40 2138                  		cmpi.w	#$2138,d0
00024256 6D00                       		blt.s	loc_18A88
00024258                            
00024258                            loc_18A82:
00024258 0868 0000 0022             		bchg	#0,$22(a0)
0002425E                            
0002425E                            loc_18A88:
0002425E 3028 0008                  		move.w	8(a0),d0
00024262 72FF                       		moveq	#-1,d1
00024264 7402                       		moveq	#2,d2
00024266 45E8 002A                  		lea	$2A(a0),a2
0002426A 7828                       		moveq	#$28,d4
0002426C 4A68 0010                  		tst.w	$10(a0)
00024270 6A00                       		bpl.s	loc_18A9E
00024272 4444                       		neg.w	d4
00024274                            
00024274                            loc_18A9E:
00024274 321A                       		move.w	(a2)+,d1
00024276 2641                       		movea.l	d1,a3
00024278 082B 0003 0022             		btst	#3,$22(a3)
0002427E 6600                       		bne.s	loc_18AB4
00024280 362B 0008                  		move.w	8(a3),d3
00024284 D644                       		add.w	d4,d3
00024286 9640                       		sub.w	d0,d3
00024288 6700                       		beq.s	loc_18AC0
0002428A                            
0002428A                            loc_18AB4:
0002428A 51CA FFE8                  		dbf	d2,loc_18A9E
0002428E                            
0002428E 1142 0028                  		move.b	d2,$28(a0)
00024292 6000 FF10                  		bra.w	loc_189CA
00024296                            ; ===========================================================================
00024296                            
00024296                            loc_18AC0:
00024296 1142 0028                  		move.b	d2,$28(a0)
0002429A 5428 0025                  		addq.b	#2,$25(a0)
0002429E 117C 0028 003C             		move.b	#$28,$3C(a0)
000242A4 6000 FEFE                  		bra.w	loc_189CA
000242A8                            ; ===========================================================================
000242A8                            
000242A8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000242A8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000242AE 6600                       		bne.s	loc_18B36
000242B0 70FF                       		moveq	#-1,d0
000242B2 1028 0028                  		move.b	$28(a0),d0
000242B6 4880                       		ext.w	d0
000242B8 6B00                       		bmi.s	loc_18B40
000242BA 5540                       		subq.w	#2,d0
000242BC 4440                       		neg.w	d0
000242BE D040                       		add.w	d0,d0
000242C0 43E8 002A                  		lea	$2A(a0),a1
000242C4 3031 0000                  		move.w	(a1,d0.w),d0
000242C8 2440                       		movea.l	d0,a2
000242CA 43F8 D040                  		lea	($FFFFD040).w,a1
000242CE 723E                       		moveq	#$3E,d1
000242D0                            
000242D0                            loc_18AFA:
000242D0 B0A9 003C                  		cmp.l	$3C(a1),d0
000242D4 6700                       		beq.s	loc_18B40
000242D6 D2FC 0040                  		adda.w	#$40,a1
000242DA 51C9 FFF4                  		dbf	d1,loc_18AFA
000242DE                            
000242DE 2F08                       		move.l	a0,-(sp)
000242E0 41D2                       		lea	(a2),a0
000242E2 4EB9 0001 671E             		jsr	SingleObjLoad2
000242E8 205F                       		movea.l	(sp)+,a0
000242EA 6600                       		bne.s	loc_18B40
000242EC 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000242F0 3368 0008 0008             		move.w	8(a0),8(a1)
000242F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000242FC 0669 0020 000C             		addi.w	#$20,$C(a1)
00024302 136A 0022 0022             		move.b	$22(a2),$22(a1)
00024308 234A 003C                  		move.l	a2,$3C(a1)
0002430C                            
0002430C                            loc_18B36:
0002430C 5328 003C                  		subq.b	#1,$3C(a0)
00024310 6700                       		beq.s	loc_18B40
00024312 6000 FEC4                  		bra.w	loc_189FE
00024316                            ; ===========================================================================
00024316                            
00024316                            loc_18B40:
00024316 5528 0025                  		subq.b	#2,$25(a0)
0002431A 6000 FE88                  		bra.w	loc_189CA
0002431E                            ; ===========================================================================
0002431E                            
0002431E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0002431E 5328 003C                  		subq.b	#1,$3C(a0)
00024322 6B00                       		bmi.s	loc_18B52
00024324 6000 ED16                  		bra.w	BossDefeated
00024328                            ; ===========================================================================
00024328                            
00024328                            loc_18B52:
00024328 5428 0025                  		addq.b	#2,$25(a0)
0002432C 4268 0012                  		clr.w	$12(a0)
00024330 08E8 0000 0022             		bset	#0,$22(a0)
00024336 08A8 0007 0022             		bclr	#7,$22(a0)
0002433C 4268 0010                  		clr.w	$10(a0)
00024340 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00024346 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0002434A 6600                       		bne.s	loc_18B7C
0002434C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00024352                            
00024352                            loc_18B7C:
00024352 6000 FE84                  		bra.w	loc_189FE
00024356                            ; ===========================================================================
00024356                            
00024356                            loc_18B80:				; XREF: Obj7A_ShipIndex
00024356 5228 003C                  		addq.b	#1,$3C(a0)
0002435A 6700                       		beq.s	loc_18B90
0002435C 6A00                       		bpl.s	loc_18B96
0002435E 0668 0018 0012             		addi.w	#$18,$12(a0)
00024364 6000                       		bra.s	loc_18BC2
00024366                            ; ===========================================================================
00024366                            
00024366                            loc_18B90:
00024366 4268 0012                  		clr.w	$12(a0)
0002436A 6000                       		bra.s	loc_18BC2
0002436C                            ; ===========================================================================
0002436C                            
0002436C                            loc_18B96:
0002436C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00024372 6500                       		bcs.s	loc_18BAE
00024374 6700                       		beq.s	loc_18BB4
00024376 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0002437C 6500                       		bcs.s	loc_18BC2
0002437E 5428 0025                  		addq.b	#2,$25(a0)
00024382 6000                       		bra.s	loc_18BC2
00024384                            ; ===========================================================================
00024384                            
00024384                            loc_18BAE:
00024384 5168 0012                  		subq.w	#8,$12(a0)
00024388 6000                       		bra.s	loc_18BC2
0002438A                            ; ===========================================================================
0002438A                            
0002438A                            loc_18BB4:
0002438A 4268 0012                  		clr.w	$12(a0)
0002438E                            	;	move.w	(Level_Music).w,d0
0002438E 4EB9 0001 D46C             		jsr	(super_GetBgm).l	; play SLZ music
00024394                            
00024394                            loc_18BC2:
00024394 6000 FE32                  		bra.w	loc_189EE
00024398                            ; ===========================================================================
00024398                            
00024398                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00024398 317C 0400 0010             		move.w	#$400,$10(a0)
0002439E 317C FFC0 0012             		move.w	#-$40,$12(a0)
000243A4 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000243AA 6400                       		bcc.s	loc_18BE0
000243AC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000243B0 6000                       		bra.s	loc_18BE8
000243B2                            ; ===========================================================================
000243B2                            
000243B2                            loc_18BE0:
000243B2 4A28 0001                  		tst.b	1(a0)
000243B6 6A00 FCC8                  		bpl.w	Obj7A_Delete
000243BA                            
000243BA                            loc_18BE8:
000243BA 6100 ECC6                  		bsr.w	BossMove
000243BE 6000 FDE4                  		bra.w	loc_189CA
000243C2                            ; ===========================================================================
000243C2                            
000243C2                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000243C2 7000                       		moveq	#0,d0
000243C4 7201                       		moveq	#1,d1
000243C6 2268 0034                  		movea.l	$34(a0),a1
000243CA 1029 0025                  		move.b	$25(a1),d0
000243CE 0C00 0006                  		cmpi.b	#6,d0
000243D2 6B00                       		bmi.s	loc_18C06
000243D4 720A                       		moveq	#$A,d1
000243D6 6000                       		bra.s	loc_18C1A
000243D8                            ; ===========================================================================
000243D8                            
000243D8                            loc_18C06:
000243D8 4A29 0020                  		tst.b	$20(a1)
000243DC 6600                       		bne.s	loc_18C10
000243DE 7205                       		moveq	#5,d1
000243E0 6000                       		bra.s	loc_18C1A
000243E2                            ; ===========================================================================
000243E2                            
000243E2                            loc_18C10:
000243E2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000243E8 6500                       		bcs.s	loc_18C1A
000243EA 7204                       		moveq	#4,d1
000243EC                            
000243EC                            loc_18C1A:
000243EC 1141 001C                  		move.b	d1,$1C(a0)
000243F0 0C00 000A                  		cmpi.b	#$A,d0
000243F4 6600                       		bne.s	loc_18C32
000243F6 117C 0006 001C             		move.b	#6,$1C(a0)
000243FC 4A28 0001                  		tst.b	1(a0)
00024400 6A00 FC7E                  		bpl.w	Obj7A_Delete
00024404                            
00024404                            loc_18C32:
00024404 6000                       		bra.s	loc_18C6C
00024406                            ; ===========================================================================
00024406                            
00024406                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00024406 117C 0008 001C             		move.b	#8,$1C(a0)
0002440C 2268 0034                  		movea.l	$34(a0),a1
00024410 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024416 6600                       		bne.s	loc_18C56
00024418 4A28 0001                  		tst.b	1(a0)
0002441C 6A00 FC62                  		bpl.w	Obj7A_Delete
00024420 117C 000B 001C             		move.b	#$B,$1C(a0)
00024426 6000                       		bra.s	loc_18C6C
00024428                            ; ===========================================================================
00024428                            
00024428                            loc_18C56:
00024428 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0002442E 6E00                       		bgt.s	loc_18C6C
00024430 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00024436 6D00                       		blt.s	loc_18C6C
00024438 117C 0007 001C             		move.b	#7,$1C(a0)
0002443E                            
0002443E                            loc_18C6C:
0002443E 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
00024444 4EB9 0001 2618             		jsr	AnimateSprite
0002444A                            
0002444A                            loc_18C78:
0002444A 2268 0034                  		movea.l	$34(a0),a1
0002444E 3169 0008 0008             		move.w	8(a1),8(a0)
00024454 3169 000C 000C             		move.w	$C(a1),$C(a0)
0002445A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00024460 7003                       		moveq	#3,d0
00024462 C028 0022                  		and.b	$22(a0),d0
00024466 0228 00FC 0001             		andi.b	#-4,1(a0)
0002446C 8128 0001                  		or.b	d0,1(a0)
00024470 4EF9 0001 5C3C             		jmp	DisplaySprite
00024476                            ; ===========================================================================
00024476                            
00024476                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00024476 2268 0034                  		movea.l	$34(a0),a1
0002447A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024480 6600                       		bne.s	loc_18CB8
00024482 4A28 0001                  		tst.b	1(a0)
00024486 6A00 FBF8                  		bpl.w	Obj7A_Delete
0002448A                            
0002448A                            loc_18CB8:
0002448A 217C 0002 35A6 0004        		move.l	#Map_BossItems,4(a0)
00024492 317C 246C 0002             		move.w	#$246C,2(a0)
00024498 117C 0003 001A             		move.b	#3,$1A(a0)
0002449E 60AA                       		bra.s	loc_18C78
000244A0                            ; ===========================================================================
000244A0                            ; ---------------------------------------------------------------------------
000244A0                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000244A0                            ; ---------------------------------------------------------------------------
000244A0                            
000244A0                            Obj7B:					; XREF: Obj_Index
000244A0 7000                       		moveq	#0,d0
000244A2 1028 0024                  		move.b	$24(a0),d0
000244A6 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000244AA 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000244AE 3028 0030                  		move.w	$30(a0),d0
000244B2 0240 FF80                  		andi.w	#$FF80,d0
000244B6 3238 F700                  		move.w	($FFFFF700).w,d1
000244BA 0441 0080                  		subi.w	#$80,d1
000244BE 0241 FF80                  		andi.w	#$FF80,d1
000244C2 9041                       		sub.w	d1,d0
000244C4 6B00 FBBA                  		bmi.w	Obj7A_Delete
000244C8 0C40 0280                  		cmpi.w	#$280,d0
000244CC 6200 FBB2                  		bhi.w	Obj7A_Delete
000244D0 4EF9 0001 5C3C             		jmp	DisplaySprite
000244D6                            ; ===========================================================================
000244D6 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000244D8 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000244DA 0000                       		dc.w loc_18DC6-Obj7B_Index
000244DC 0000                       		dc.w loc_18EAA-Obj7B_Index
000244DE 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000244E0 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000244E2                            ; ===========================================================================
000244E2                            
000244E2                            Obj7B_Main:				; XREF: Obj7B_Index
000244E2 217C 0001 AFF6 0004        		move.l	#Map_obj5Ea,4(a0)
000244EA 317C 0518 0002             		move.w	#$518,2(a0)
000244F0 117C 0001 001A             		move.b	#1,$1A(a0)
000244F6 0028 0004 0001             		ori.b	#4,1(a0)
000244FC 317C 0200 0018             		move.w	#$200,priority(a0)
00024502 117C 008B 0020             		move.b	#$8B,$20(a0)
00024508 117C 000C 0023             		move.b	#$C,width_pixels(a0)
0002450E 2268 003C                  		movea.l	$3C(a0),a1
00024512 3169 0008 0030             		move.w	8(a1),$30(a0)
00024518 3169 000C 0034             		move.w	$C(a1),$34(a0)
0002451E 08E8 0000 0022             		bset	#0,$22(a0)
00024524 3028 0008                  		move.w	8(a0),d0
00024528 B069 0008                  		cmp.w	8(a1),d0
0002452C 6E00                       		bgt.s	loc_18D68
0002452E 08A8 0000 0022             		bclr	#0,$22(a0)
00024534 117C 0002 003A             		move.b	#2,$3A(a0)
0002453A                            
0002453A                            loc_18D68:
0002453A 5428 0024                  		addq.b	#2,$24(a0)
0002453E                            
0002453E                            Obj7B_Fall:				; XREF: Obj7B_Index
0002453E 4EB9 0001 5BB6             		jsr	ObjectFall
00024544 2268 003C                  		movea.l	$3C(a0),a1
00024548 45F9 0000 0000             		lea	(word_19018).l,a2
0002454E 7000                       		moveq	#0,d0
00024550 1029 001A                  		move.b	$1A(a1),d0
00024554 3228 0008                  		move.w	8(a0),d1
00024558 9268 0030                  		sub.w	$30(a0),d1
0002455C 6400                       		bcc.s	loc_18D8E
0002455E 5440                       		addq.w	#2,d0
00024560                            
00024560                            loc_18D8E:
00024560 D040                       		add.w	d0,d0
00024562 3228 0034                  		move.w	$34(a0),d1
00024566 D272 0000                  		add.w	(a2,d0.w),d1
0002456A B268 000C                  		cmp.w	$C(a0),d1
0002456E 6E00                       		bgt.s	locret_18DC4
00024570 2268 003C                  		movea.l	$3C(a0),a1
00024574 7202                       		moveq	#2,d1
00024576 0828 0000 0022             		btst	#0,$22(a0)
0002457C 6700                       		beq.s	loc_18DAE
0002457E 7200                       		moveq	#0,d1
00024580                            
00024580                            loc_18DAE:
00024580 317C 00F0 0028             		move.w	#$F0,$28(a0)
00024586 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0002458C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00024592 6000 0000                  		bra.w	loc_18FA2
00024596                            ; ===========================================================================
00024596                            
00024596                            locret_18DC4:
00024596 4E75                       		rts	
00024598                            ; ===========================================================================
00024598                            
00024598                            loc_18DC6:				; XREF: Obj7B_Index
00024598 2268 003C                  		movea.l	$3C(a0),a1
0002459C 7000                       		moveq	#0,d0
0002459E 1028 003A                  		move.b	$3A(a0),d0
000245A2 9029 003A                  		sub.b	$3A(a1),d0
000245A6 6700                       		beq.s	loc_18E2A
000245A8 6400                       		bcc.s	loc_18DDA
000245AA 4400                       		neg.b	d0
000245AC                            
000245AC                            loc_18DDA:
000245AC 323C F7E8                  		move.w	#-$818,d1
000245B0 343C FEEC                  		move.w	#-$114,d2
000245B4 0C00 0001                  		cmpi.b	#1,d0
000245B8 6700                       		beq.s	loc_18E00
000245BA 323C F6A0                  		move.w	#-$960,d1
000245BE 343C FF0C                  		move.w	#-$F4,d2
000245C2 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000245C8 6D00                       		blt.s	loc_18E00
000245CA 323C F5E0                  		move.w	#-$A20,d1
000245CE 343C FF80                  		move.w	#-$80,d2
000245D2                            
000245D2                            loc_18E00:
000245D2 3141 0012                  		move.w	d1,$12(a0)
000245D6 3142 0010                  		move.w	d2,$10(a0)
000245DA 3028 0008                  		move.w	8(a0),d0
000245DE 9068 0030                  		sub.w	$30(a0),d0
000245E2 6400                       		bcc.s	loc_18E16
000245E4 4468 0010                  		neg.w	$10(a0)
000245E8                            
000245E8                            loc_18E16:
000245E8 117C 0001 001A             		move.b	#1,$1A(a0)
000245EE 317C 0020 0028             		move.w	#$20,$28(a0)
000245F4 5428 0024                  		addq.b	#2,$24(a0)
000245F8 6000 0000                  		bra.w	loc_18EAA
000245FC                            ; ===========================================================================
000245FC                            
000245FC                            loc_18E2A:				; XREF: loc_18DC6
000245FC 45F9 0000 0000             		lea	(word_19018).l,a2
00024602 7000                       		moveq	#0,d0
00024604 1029 001A                  		move.b	$1A(a1),d0
00024608 343C 0028                  		move.w	#$28,d2
0002460C 3228 0008                  		move.w	8(a0),d1
00024610 9268 0030                  		sub.w	$30(a0),d1
00024614 6400                       		bcc.s	loc_18E48
00024616 4442                       		neg.w	d2
00024618 5440                       		addq.w	#2,d0
0002461A                            
0002461A                            loc_18E48:
0002461A D040                       		add.w	d0,d0
0002461C 3228 0034                  		move.w	$34(a0),d1
00024620 D272 0000                  		add.w	(a2,d0.w),d1
00024624 3141 000C                  		move.w	d1,$C(a0)
00024628 D468 0030                  		add.w	$30(a0),d2
0002462C 3142 0008                  		move.w	d2,8(a0)
00024630 4268 000E                  		clr.w	$E(a0)
00024634 4268 000A                  		clr.w	$A(a0)
00024638 5368 0028                  		subq.w	#1,$28(a0)
0002463C 6600                       		bne.s	loc_18E7A
0002463E 317C 0020 0028             		move.w	#$20,$28(a0)
00024644 117C 0008 0024             		move.b	#8,$24(a0)
0002464A 4E75                       		rts	
0002464C                            ; ===========================================================================
0002464C                            
0002464C                            loc_18E7A:
0002464C 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00024652 6600                       		bne.s	loc_18E88
00024654 117C 0005 001F             		move.b	#5,$1F(a0)
0002465A                            
0002465A                            loc_18E88:
0002465A 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00024660 6600                       		bne.s	loc_18E96
00024662 117C 0002 001F             		move.b	#2,$1F(a0)
00024668                            
00024668                            loc_18E96:
00024668 5328 001E                  		subq.b	#1,$1E(a0)
0002466C 6E00                       		bgt.s	locret_18EA8
0002466E 0868 0000 001A             		bchg	#0,$1A(a0)
00024674 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0002467A                            
0002467A                            locret_18EA8:
0002467A 4E75                       		rts	
0002467C                            ; ===========================================================================
0002467C                            
0002467C                            loc_18EAA:				; XREF: Obj7B_Index
0002467C 43F8 D040                  		lea	($FFFFD040).w,a1
00024680 707A                       		moveq	#$7A,d0
00024682 7240                       		moveq	#$40,d1
00024684 743E                       		moveq	#$3E,d2
00024686                            
00024686                            loc_18EB4:
00024686 B011                       		cmp.b	(a1),d0
00024688 6700                       		beq.s	loc_18EC0
0002468A D2C1                       		adda.w	d1,a1
0002468C 51CA FFF8                  		dbf	d2,loc_18EB4
00024690                            
00024690 6000                       		bra.s	loc_18F38
00024692                            ; ===========================================================================
00024692                            
00024692                            loc_18EC0:
00024692 3029 0008                  		move.w	8(a1),d0
00024696 3229 000C                  		move.w	$C(a1),d1
0002469A 3428 0008                  		move.w	8(a0),d2
0002469E 3628 000C                  		move.w	$C(a0),d3
000246A2 45FA 0000                  		lea	byte_19022(pc),a2
000246A6 47FA 0000                  		lea	byte_19026(pc),a3
000246AA 181A                       		move.b	(a2)+,d4
000246AC 4884                       		ext.w	d4
000246AE D044                       		add.w	d4,d0
000246B0 181B                       		move.b	(a3)+,d4
000246B2 4884                       		ext.w	d4
000246B4 D444                       		add.w	d4,d2
000246B6 B440                       		cmp.w	d0,d2
000246B8 6500                       		bcs.s	loc_18F38
000246BA 181A                       		move.b	(a2)+,d4
000246BC 4884                       		ext.w	d4
000246BE D044                       		add.w	d4,d0
000246C0 181B                       		move.b	(a3)+,d4
000246C2 4884                       		ext.w	d4
000246C4 D444                       		add.w	d4,d2
000246C6 B042                       		cmp.w	d2,d0
000246C8 6500                       		bcs.s	loc_18F38
000246CA 181A                       		move.b	(a2)+,d4
000246CC 4884                       		ext.w	d4
000246CE D244                       		add.w	d4,d1
000246D0 181B                       		move.b	(a3)+,d4
000246D2 4884                       		ext.w	d4
000246D4 D644                       		add.w	d4,d3
000246D6 B641                       		cmp.w	d1,d3
000246D8 6500                       		bcs.s	loc_18F38
000246DA 181A                       		move.b	(a2)+,d4
000246DC 4884                       		ext.w	d4
000246DE D244                       		add.w	d4,d1
000246E0 181B                       		move.b	(a3)+,d4
000246E2 4884                       		ext.w	d4
000246E4 D644                       		add.w	d4,d3
000246E6 B243                       		cmp.w	d3,d1
000246E8 6500                       		bcs.s	loc_18F38
000246EA 5428 0024                  		addq.b	#2,$24(a0)
000246EE 4268 0028                  		clr.w	$28(a0)
000246F2 4229 0020                  		clr.b	$20(a1)
000246F6 5329 0021                  		subq.b	#1,$21(a1)
000246FA 6600                       		bne.s	loc_18F38
000246FC 08E9 0007 0022             		bset	#7,$22(a1)
00024702 4268 0010                  		clr.w	$10(a0)
00024706 4268 0012                  		clr.w	$12(a0)
0002470A                            
0002470A                            loc_18F38:
0002470A 4A68 0012                  		tst.w	$12(a0)
0002470E 6A00                       		bpl.s	loc_18F5C
00024710 4EB9 0001 5BB6             		jsr	ObjectFall
00024716 3028 0034                  		move.w	$34(a0),d0
0002471A 0440 002F                  		subi.w	#$2F,d0
0002471E B068 000C                  		cmp.w	$C(a0),d0
00024722 6E00                       		bgt.s	loc_18F58
00024724 4EB9 0001 5BB6             		jsr	ObjectFall
0002472A                            
0002472A                            loc_18F58:
0002472A 6000 FF20                  		bra.w	loc_18E7A
0002472E                            ; ===========================================================================
0002472E                            
0002472E                            loc_18F5C:
0002472E 4EB9 0001 5BB6             		jsr	ObjectFall
00024734 2268 003C                  		movea.l	$3C(a0),a1
00024738 45F9 0000 0000             		lea	(word_19018).l,a2
0002473E 7000                       		moveq	#0,d0
00024740 1029 001A                  		move.b	$1A(a1),d0
00024744 3228 0008                  		move.w	8(a0),d1
00024748 9268 0030                  		sub.w	$30(a0),d1
0002474C 6400                       		bcc.s	loc_18F7E
0002474E 5440                       		addq.w	#2,d0
00024750                            
00024750                            loc_18F7E:
00024750 D040                       		add.w	d0,d0
00024752 3228 0034                  		move.w	$34(a0),d1
00024756 D272 0000                  		add.w	(a2,d0.w),d1
0002475A B268 000C                  		cmp.w	$C(a0),d1
0002475E 6ECA                       		bgt.s	loc_18F58
00024760 2268 003C                  		movea.l	$3C(a0),a1
00024764 7202                       		moveq	#2,d1
00024766 4A68 0010                  		tst.w	$10(a0)
0002476A 6B00                       		bmi.s	loc_18F9C
0002476C 7200                       		moveq	#0,d1
0002476E                            
0002476E                            loc_18F9C:
0002476E 317C 0000 0028             		move.w	#0,$28(a0)
00024774                            
00024774                            loc_18FA2:
00024774 1341 003A                  		move.b	d1,$3A(a1)
00024778 1141 003A                  		move.b	d1,$3A(a0)
0002477C B229 001A                  		cmp.b	$1A(a1),d1
00024780 6700                       		beq.s	loc_19008
00024782 08A9 0003 0022             		bclr	#3,$22(a1)
00024788 6700                       		beq.s	loc_19008
0002478A 4229 0025                  		clr.b	$25(a1)
0002478E 137C 0002 0024             		move.b	#2,$24(a1)
00024794 45F8 D000                  		lea	($FFFFD000).w,a2
00024798 3568 0012 0012             		move.w	$12(a0),$12(a2)
0002479E 446A 0012                  		neg.w	$12(a2)
000247A2 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000247A8 6600                       		bne.s	loc_18FDC
000247AA E0EA 0012                  		asr	$12(a2)
000247AE                            
000247AE                            loc_18FDC:
000247AE 08EA 0001 0022             		bset	#1,$22(a2)
000247B4 08AA 0003 0022             		bclr	#3,$22(a2)
000247BA 422A 003C                  		clr.b	$3C(a2)
000247BE 2F08                       		move.l	a0,-(sp)
000247C0 41D2                       		lea	(a2),a0
000247C2 4EBA 8870                  		jsr	Obj01_ChkRoll
000247C6 205F                       		movea.l	(sp)+,a0
000247C8 157C 0002 0024             		move.b	#2,$24(a2)
000247CE 303C 00B1                  		move.w	#$B1,d0
000247D2 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "spring" sound
000247D8                            
000247D8                            loc_19008:
000247D8 4268 0010                  		clr.w	$10(a0)
000247DC 4268 0012                  		clr.w	$12(a0)
000247E0 5428 0024                  		addq.b	#2,$24(a0)
000247E4 6000 FE66                  		bra.w	loc_18E7A
000247E8                            ; ===========================================================================
000247E8 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000247F2                            		even
000247F2 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000247F6                            		even
000247F6 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000247FA                            		even
000247FA                            ; ===========================================================================
000247FA                            
000247FA                            Obj7B_Explode:				; XREF: Obj7B_Index
000247FA 10BC 003F                  		move.b	#$3F,(a0)
000247FE 4228 0024                  		clr.b	$24(a0)
00024802 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00024808 6700                       		beq.s	Obj7B_MakeFrag
0002480A 4E75                       		rts	
0002480C                            ; ===========================================================================
0002480C                            
0002480C                            Obj7B_MakeFrag:
0002480C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00024812 7203                       		moveq	#3,d1
00024814 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00024818                            
00024818                            Obj7B_Loop:
00024818 4EB9 0001 6708             		jsr	SingleObjLoad
0002481E 6600                       		bne.s	loc_1909A
00024820 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00024824 137C 000A 0024             		move.b	#$A,$24(a1)
0002482A 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00024832 337C 0180 0018             		move.w	#$180,priority(a1)
00024838 337C 0518 0002             		move.w	#$518,2(a1)
0002483E 3368 0008 0008             		move.w	8(a0),8(a1)
00024844 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002484A 335A 0010                  		move.w	(a2)+,$10(a1)
0002484E 335A 0012                  		move.w	(a2)+,$12(a1)
00024852 137C 0098 0020             		move.b	#$98,$20(a1)
00024858 0029 0004 0001             		ori.b	#4,1(a1)
0002485E 08E9 0007 0001             		bset	#7,1(a1)
00024864 137C 000C 0023             		move.b	#$C,width_pixels(a1)
0002486A                            
0002486A                            loc_1909A:
0002486A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0002486E                            
0002486E 4E75                       		rts	
00024870                            ; ===========================================================================
00024870 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00024874 FF60 FDC0                  		dc.w $FF60, $FDC0
00024878 0100 FCC0                  		dc.w $100, $FCC0
0002487C 00A0 FDC0                  		dc.w $A0, $FDC0
00024880                            ; ===========================================================================
00024880                            
00024880                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00024880 4EB9 0001 5BD6             		jsr	SpeedToPos
00024886 3168 0008 0030             		move.w	8(a0),$30(a0)
0002488C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00024892 0668 0018 0012             		addi.w	#$18,$12(a0)
00024898 7004                       		moveq	#4,d0
0002489A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0002489E E448                       		lsr.w	#2,d0
000248A0 1140 001A                  		move.b	d0,$1A(a0)
000248A4 4A28 0001                  		tst.b	1(a0)
000248A8 6A00 F7D6                  		bpl.w	Obj7A_Delete
000248AC 4E75                       		rts	
000248AE                            ; ===========================================================================
000248AE                            ; ---------------------------------------------------------------------------
000248AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000248AE                            ; ---------------------------------------------------------------------------
000248AE                            Map_obj7B:
000248AE                            	include "_maps\obj7B.asm"
000248AE                            ; ---------------------------------------------------------------------------
000248AE                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000248AE                            ; ---------------------------------------------------------------------------
000248AE 0000                       		dc.w byte_190E2-Map_obj7B
000248B0 0000                       		dc.w byte_190E8-Map_obj7B
000248B2 01                         byte_190E2:	dc.b 1
000248B3 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000248B8 01                         byte_190E8:	dc.b 1
000248B9 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000248BE                            		even
000248BE                            		even
000248BE                            
000248BE                            ; ===========================================================================
000248BE                            ; ---------------------------------------------------------------------------
000248BE                            ; Object 75 - Eggman (SYZ)
000248BE                            ; ---------------------------------------------------------------------------
000248BE                            
000248BE                            Obj75:					; XREF: Obj_Index
000248BE 7000                       		moveq	#0,d0
000248C0 1028 0024                  		move.b	$24(a0),d0
000248C4 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000248C8 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000248CC                            ; ===========================================================================
000248CC 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000248CE 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000248D0 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000248D2 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000248D4 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000248D6                            
000248D6 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000248D9 0401 05                    		dc.b 4,	1, 5
000248DC 0607 05                    		dc.b 6,	7, 5
000248DF 0800 05                    		dc.b 8,	0, 5
000248E2                            ; ===========================================================================
000248E2                            
000248E2                            Obj75_Main:				; XREF: Obj75_Index
000248E2 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000248E8 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000248EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000248F4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000248FA 117C 000F 0020             		move.b	#$F,$20(a0)
00024900 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00024906 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0002490A 2248                       		movea.l	a0,a1
0002490C 7203                       		moveq	#3,d1
0002490E 6000                       		bra.s	Obj75_LoadBoss
00024910                            ; ===========================================================================
00024910                            
00024910                            Obj75_Loop:
00024910 4EB9 0001 671E             		jsr	SingleObjLoad2
00024916 6600                       		bne.s	Obj75_ShipMain
00024918 12BC 0075                  		move.b	#$75,(a1)
0002491C 3368 0008 0008             		move.w	8(a0),8(a1)
00024922 3368 000C 000C             		move.w	$C(a0),$C(a1)
00024928                            
00024928                            Obj75_LoadBoss:				; XREF: Obj75_Main
00024928 08A8 0000 0022             		bclr	#0,$22(a0)
0002492E 4229 0025                  		clr.b	$25(a1)
00024932 135A 0024                  		move.b	(a2)+,$24(a1)
00024936 135A 001C                  		move.b	(a2)+,$1C(a1)
0002493A 135A 0018                  		move.b	(a2)+,priority(a1)
0002493E 3029 0018                          move.w  priority(a1),d0
00024942 E248                               lsr.w   #1,d0
00024944 0240 0380                          andi.w  #$380,d0
00024948 3340 0018                          move.w  d0,priority(a1)
0002494C 237C 0002 34DE 0004        		move.l	#Map_Eggman,4(a1)
00024954 337C 0400 0002             		move.w	#$400,2(a1)
0002495A 137C 0004 0001             		move.b	#4,1(a1)
00024960 137C 0020 0023             		move.b	#$20,width_pixels(a1)
00024966 2348 0034                  		move.l	a0,$34(a1)
0002496A 51C9 FFA4                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0002496E                            
0002496E                            Obj75_ShipMain:				; XREF: Obj75_Index
0002496E 7000                       		moveq	#0,d0
00024970 1028 0025                  		move.b	$25(a0),d0
00024974 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00024978 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0002497C 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
00024982 4EB9 0001 2618             		jsr	AnimateSprite
00024988 7003                       		moveq	#3,d0
0002498A C028 0022                  		and.b	$22(a0),d0
0002498E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00024994 8128 0001                  		or.b	d0,1(a0)
00024998 4EF9 0001 5C3C             		jmp	DisplaySprite
0002499E                            ; ===========================================================================
0002499E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000249A2 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000249A6 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000249AA                            ; ===========================================================================
000249AA                            
000249AA                            loc_191CC:				; XREF: Obj75_ShipIndex
000249AA 317C FF00 0010             		move.w	#-$100,$10(a0)
000249B0 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000249B6 6400                       		bcc.s	loc_191DE
000249B8 5428 0025                  		addq.b	#2,$25(a0)
000249BC                            
000249BC                            loc_191DE:
000249BC 1028 003F                  		move.b	$3F(a0),d0
000249C0 5428 003F                  		addq.b	#2,$3F(a0)
000249C4 4EB9 0000 8DA4             		jsr	(CalcSine).l
000249CA E440                       		asr.w	#2,d0
000249CC 3140 0012                  		move.w	d0,$12(a0)
000249D0                            
000249D0                            loc_191F2:
000249D0 6100 E6B0                  		bsr.w	BossMove
000249D4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000249DA 3168 0030 0008             		move.w	$30(a0),8(a0)
000249E0                            
000249E0                            loc_19202:
000249E0 3028 0008                  		move.w	8(a0),d0
000249E4 0440 2C00                  		subi.w	#$2C00,d0
000249E8 EA48                       		lsr.w	#5,d0
000249EA 1140 0034                  		move.b	d0,$34(a0)
000249EE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000249F4 6400                       		bcc.s	locret_19256
000249F6 4A28 0022                  		tst.b	$22(a0)
000249FA 6B00                       		bmi.s	loc_19258
000249FC 4A28 0020                  		tst.b	$20(a0)
00024A00 6600                       		bne.s	locret_19256
00024A02 4A28 003E                  		tst.b	$3E(a0)
00024A06 6600                       		bne.s	loc_1923A
00024A08 117C 0020 003E             		move.b	#$20,$3E(a0)
00024A0E                            ;		move.w	#$AC,d0
00024A0E 4EB9 0001 E834             		jsr	(BossModeMusic).l ;	play boss damage sound
00024A14                            
00024A14                            loc_1923A:
00024A14 43F8 FB22                  		lea	($FFFFFB22).w,a1
00024A18 7000                       		moveq	#0,d0
00024A1A 4A51                       		tst.w	(a1)
00024A1C 6600                       		bne.s	loc_19248
00024A1E 303C 0EEE                  		move.w	#$EEE,d0
00024A22                            
00024A22                            loc_19248:
00024A22 3280                       		move.w	d0,(a1)
00024A24 5328 003E                  		subq.b	#1,$3E(a0)
00024A28 6600                       		bne.s	locret_19256
00024A2A 117C 000F 0020             		move.b	#$F,$20(a0)
00024A30                            
00024A30                            locret_19256:
00024A30 4E75                       		rts	
00024A32                            ; ===========================================================================
00024A32                            
00024A32                            loc_19258:				; XREF: loc_19202
00024A32 7064                       		moveq	#100,d0
00024A34 6100 0000                  		bsr.w	AddPoints
00024A38 117C 0006 0025             		move.b	#6,$25(a0)
00024A3E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00024A44 4268 0010                  		clr.w	$10(a0)
00024A48 4E75                       		rts	
00024A4A                            ; ===========================================================================
00024A4A                            
00024A4A                            loc_19270:				; XREF: Obj75_ShipIndex
00024A4A 3028 0030                  		move.w	$30(a0),d0
00024A4E 317C 0140 0010             		move.w	#$140,$10(a0)
00024A54 0828 0000 0022             		btst	#0,$22(a0)
00024A5A 6600                       		bne.s	loc_1928E
00024A5C 4468 0010                  		neg.w	$10(a0)
00024A60 0C40 2C08                  		cmpi.w	#$2C08,d0
00024A64 6E00                       		bgt.s	loc_1929E
00024A66 6000                       		bra.s	loc_19294
00024A68                            ; ===========================================================================
00024A68                            
00024A68                            loc_1928E:
00024A68 0C40 2D38                  		cmpi.w	#$2D38,d0
00024A6C 6D00                       		blt.s	loc_1929E
00024A6E                            
00024A6E                            loc_19294:
00024A6E 0868 0000 0022             		bchg	#0,$22(a0)
00024A74 4228 003D                  		clr.b	$3D(a0)
00024A78                            
00024A78                            loc_1929E:
00024A78 0440 2C10                  		subi.w	#$2C10,d0
00024A7C 0240 001F                  		andi.w	#$1F,d0
00024A80 0440 001F                  		subi.w	#$1F,d0
00024A84 6A00                       		bpl.s	loc_192AE
00024A86 4440                       		neg.w	d0
00024A88                            
00024A88                            loc_192AE:
00024A88 5340                       		subq.w	#1,d0
00024A8A 6E00                       		bgt.s	loc_192E8
00024A8C 4A28 003D                  		tst.b	$3D(a0)
00024A90 6600                       		bne.s	loc_192E8
00024A92 3238 D008                  		move.w	($FFFFD008).w,d1
00024A96 0441 2C00                  		subi.w	#$2C00,d1
00024A9A EA41                       		asr.w	#5,d1
00024A9C B228 0034                  		cmp.b	$34(a0),d1
00024AA0 6600                       		bne.s	loc_192E8
00024AA2 7000                       		moveq	#0,d0
00024AA4 1028 0034                  		move.b	$34(a0),d0
00024AA8 EB40                       		asl.w	#5,d0
00024AAA 0640 2C10                  		addi.w	#$2C10,d0
00024AAE 3140 0030                  		move.w	d0,$30(a0)
00024AB2 6100 0000                  		bsr.w	Obj75_FindBlocks
00024AB6 5428 0025                  		addq.b	#2,$25(a0)
00024ABA 4268 0028                  		clr.w	$28(a0)
00024ABE 4268 0010                  		clr.w	$10(a0)
00024AC2                            
00024AC2                            loc_192E8:
00024AC2 6000 FEF8                  		bra.w	loc_191DE
00024AC6                            ; ===========================================================================
00024AC6                            
00024AC6                            loc_192EC:				; XREF: Obj75_ShipIndex
00024AC6 7000                       		moveq	#0,d0
00024AC8 1028 0028                  		move.b	$28(a0),d0
00024ACC 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00024AD0 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00024AD4                            ; ===========================================================================
00024AD4 0000                       off_192FA:	dc.w loc_19302-off_192FA
00024AD6 0000                       		dc.w loc_19348-off_192FA
00024AD8 0000                       		dc.w loc_1938E-off_192FA
00024ADA 0000                       		dc.w loc_193D0-off_192FA
00024ADC                            ; ===========================================================================
00024ADC                            
00024ADC                            loc_19302:				; XREF: off_192FA
00024ADC 317C 0180 0012             		move.w	#$180,$12(a0)
00024AE2 3028 0038                  		move.w	$38(a0),d0
00024AE6 0C40 0556                  		cmpi.w	#$556,d0
00024AEA 6500                       		bcs.s	loc_19344
00024AEC 317C 0556 0038             		move.w	#$556,$38(a0)
00024AF2 4268 003C                  		clr.w	$3C(a0)
00024AF6 70FF                       		moveq	#-1,d0
00024AF8 3028 0036                  		move.w	$36(a0),d0
00024AFC 6700                       		beq.s	loc_1933C
00024AFE 2240                       		movea.l	d0,a1
00024B00 137C 00FF 0029             		move.b	#-1,$29(a1)
00024B06 117C 00FF 0029             		move.b	#-1,$29(a0)
00024B0C 2348 0034                  		move.l	a0,$34(a1)
00024B10 317C 0032 003C             		move.w	#$32,$3C(a0)
00024B16                            
00024B16                            loc_1933C:
00024B16 4268 0012                  		clr.w	$12(a0)
00024B1A 5428 0028                  		addq.b	#2,$28(a0)
00024B1E                            
00024B1E                            loc_19344:
00024B1E 6000 FEB0                  		bra.w	loc_191F2
00024B22                            ; ===========================================================================
00024B22                            
00024B22                            loc_19348:				; XREF: off_192FA
00024B22 5368 003C                  		subq.w	#1,$3C(a0)
00024B26 6A00                       		bpl.s	loc_19366
00024B28 5428 0028                  		addq.b	#2,$28(a0)
00024B2C 317C F800 0012             		move.w	#-$800,$12(a0)
00024B32 4A68 0036                  		tst.w	$36(a0)
00024B36 6600                       		bne.s	loc_19362
00024B38 E0E8 0012                  		asr	$12(a0)
00024B3C                            
00024B3C                            loc_19362:
00024B3C 7000                       		moveq	#0,d0
00024B3E 6000                       		bra.s	loc_1937C
00024B40                            ; ===========================================================================
00024B40                            
00024B40                            loc_19366:
00024B40 7000                       		moveq	#0,d0
00024B42 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00024B48 6E00                       		bgt.s	loc_1937C
00024B4A 7002                       		moveq	#2,d0
00024B4C 0828 0001 003D             		btst	#1,$3D(a0)
00024B52 6700                       		beq.s	loc_1937C
00024B54 4440                       		neg.w	d0
00024B56                            
00024B56                            loc_1937C:
00024B56 D068 0038                  		add.w	$38(a0),d0
00024B5A 3140 000C                  		move.w	d0,$C(a0)
00024B5E 3168 0030 0008             		move.w	$30(a0),8(a0)
00024B64 6000 FE7A                  		bra.w	loc_19202
00024B68                            ; ===========================================================================
00024B68                            
00024B68                            loc_1938E:				; XREF: off_192FA
00024B68 303C 04DA                  		move.w	#$4DA,d0
00024B6C 4A68 0036                  		tst.w	$36(a0)
00024B70 6700                       		beq.s	loc_1939C
00024B72 0440 0018                  		subi.w	#$18,d0
00024B76                            
00024B76                            loc_1939C:
00024B76 B068 0038                  		cmp.w	$38(a0),d0
00024B7A 6D00                       		blt.s	loc_193BE
00024B7C 317C 0008 003C             		move.w	#8,$3C(a0)
00024B82 4A68 0036                  		tst.w	$36(a0)
00024B86 6700                       		beq.s	loc_193B4
00024B88 317C 002D 003C             		move.w	#$2D,$3C(a0)
00024B8E                            
00024B8E                            loc_193B4:
00024B8E 5428 0028                  		addq.b	#2,$28(a0)
00024B92 4268 0012                  		clr.w	$12(a0)
00024B96 6000                       		bra.s	loc_193CC
00024B98                            ; ===========================================================================
00024B98                            
00024B98                            loc_193BE:
00024B98 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00024B9E 6C00                       		bge.s	loc_193CC
00024BA0 0668 000C 0012             		addi.w	#$C,$12(a0)
00024BA6                            
00024BA6                            loc_193CC:
00024BA6 6000 FE28                  		bra.w	loc_191F2
00024BAA                            ; ===========================================================================
00024BAA                            
00024BAA                            loc_193D0:				; XREF: off_192FA
00024BAA 5368 003C                  		subq.w	#1,$3C(a0)
00024BAE 6E00                       		bgt.s	loc_19406
00024BB0 6B00                       		bmi.s	loc_193EE
00024BB2 70FF                       		moveq	#-1,d0
00024BB4 3028 0036                  		move.w	$36(a0),d0
00024BB8 6700                       		beq.s	loc_193E8
00024BBA 2240                       		movea.l	d0,a1
00024BBC 137C 000A 0029             		move.b	#$A,$29(a1)
00024BC2                            
00024BC2                            loc_193E8:
00024BC2 4268 0036                  		clr.w	$36(a0)
00024BC6 6000                       		bra.s	loc_19406
00024BC8                            ; ===========================================================================
00024BC8                            
00024BC8                            loc_193EE:
00024BC8 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00024BCE 6600                       		bne.s	loc_19406
00024BD0 4228 0029                  		clr.b	$29(a0)
00024BD4 5528 0025                  		subq.b	#2,$25(a0)
00024BD8 117C 00FF 003D             		move.b	#-1,$3D(a0)
00024BDE 6000                       		bra.s	loc_19446
00024BE0                            ; ===========================================================================
00024BE0                            
00024BE0                            loc_19406:
00024BE0 7001                       		moveq	#1,d0
00024BE2 4A68 0036                  		tst.w	$36(a0)
00024BE6 6700                       		beq.s	loc_19410
00024BE8 7002                       		moveq	#2,d0
00024BEA                            
00024BEA                            loc_19410:
00024BEA 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00024BF0 6700                       		beq.s	loc_19424
00024BF2 6D00                       		blt.s	loc_1941C
00024BF4 4440                       		neg.w	d0
00024BF6                            
00024BF6                            loc_1941C:
00024BF6 4A68 0036                  		tst.w	$36(a0)
00024BFA D168 0038                  		add.w	d0,$38(a0)
00024BFE                            
00024BFE                            loc_19424:
00024BFE 7000                       		moveq	#0,d0
00024C00 4A68 0036                  		tst.w	$36(a0)
00024C04 6700                       		beq.s	loc_19438
00024C06 7002                       		moveq	#2,d0
00024C08 0828 0000 003D             		btst	#0,$3D(a0)
00024C0E 6700                       		beq.s	loc_19438
00024C10 4440                       		neg.w	d0
00024C12                            
00024C12                            loc_19438:
00024C12 D068 0038                  		add.w	$38(a0),d0
00024C16 3140 000C                  		move.w	d0,$C(a0)
00024C1A 3168 0030 0008             		move.w	$30(a0),8(a0)
00024C20                            
00024C20                            loc_19446:
00024C20 6000 FDBE                  		bra.w	loc_19202
00024C24                            
00024C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024C24                            
00024C24                            
00024C24                            Obj75_FindBlocks:			; XREF: loc_192AE
00024C24 4268 0036                  		clr.w	$36(a0)
00024C28 43F8 D040                  		lea	($FFFFD040).w,a1
00024C2C 703E                       		moveq	#$3E,d0
00024C2E 7276                       		moveq	#$76,d1
00024C30 1428 0034                  		move.b	$34(a0),d2
00024C34                            
00024C34                            Obj75_FindLoop:
00024C34 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00024C36 6600                       		bne.s	loc_1946A	; if not, branch
00024C38 B429 0028                  		cmp.b	$28(a1),d2
00024C3C 6600                       		bne.s	loc_1946A
00024C3E 3149 0036                  		move.w	a1,$36(a0)
00024C42 6000                       		bra.s	locret_19472
00024C44                            ; ===========================================================================
00024C44                            
00024C44                            loc_1946A:
00024C44 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00024C48 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00024C4C                            
00024C4C                            locret_19472:
00024C4C 4E75                       		rts	
00024C4E                            ; End of function Obj75_FindBlocks
00024C4E                            
00024C4E                            ; ===========================================================================
00024C4E                            
00024C4E                            loc_19474:				; XREF: Obj75_ShipIndex
00024C4E 5368 003C                  		subq.w	#1,$3C(a0)
00024C52 6B00                       		bmi.s	loc_1947E
00024C54 6000 E3E6                  		bra.w	BossDefeated
00024C58                            ; ===========================================================================
00024C58                            
00024C58                            loc_1947E:
00024C58 5428 0025                  		addq.b	#2,$25(a0)
00024C5C 4268 0012                  		clr.w	$12(a0)
00024C60 08E8 0000 0022             		bset	#0,$22(a0)
00024C66 08A8 0007 0022             		bclr	#7,$22(a0)
00024C6C 4268 0010                  		clr.w	$10(a0)
00024C70 317C FFFF 003C             		move.w	#-1,$3C(a0)
00024C76 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00024C7A 6600                       		bne.s	loc_194A8
00024C7C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00024C82                            
00024C82                            loc_194A8:
00024C82 6000 FD5C                  		bra.w	loc_19202
00024C86                            ; ===========================================================================
00024C86                            
00024C86                            loc_194AC:				; XREF: Obj75_ShipIndex
00024C86 5268 003C                  		addq.w	#1,$3C(a0)
00024C8A 6700                       		beq.s	loc_194BC
00024C8C 6A00                       		bpl.s	loc_194C2
00024C8E 0668 0018 0012             		addi.w	#$18,$12(a0)
00024C94 6000                       		bra.s	loc_194EE
00024C96                            ; ===========================================================================
00024C96                            
00024C96                            loc_194BC:
00024C96 4268 0012                  		clr.w	$12(a0)
00024C9A 6000                       		bra.s	loc_194EE
00024C9C                            ; ===========================================================================
00024C9C                            
00024C9C                            loc_194C2:
00024C9C 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00024CA2 6500                       		bcs.s	loc_194DA
00024CA4 6700                       		beq.s	loc_194E0
00024CA6 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00024CAC 6500                       		bcs.s	loc_194EE
00024CAE 5428 0025                  		addq.b	#2,$25(a0)
00024CB2 6000                       		bra.s	loc_194EE
00024CB4                            ; ===========================================================================
00024CB4                            
00024CB4                            loc_194DA:
00024CB4 5168 0012                  		subq.w	#8,$12(a0)
00024CB8 6000                       		bra.s	loc_194EE
00024CBA                            ; ===========================================================================
00024CBA                            
00024CBA                            loc_194E0:
00024CBA 4268 0012                  		clr.w	$12(a0)
00024CBE                            	;	move.w	#$85,d0
00024CBE 4EB9 0001 D46C             		jsr	(super_GetBgm).l	; play SYZ music
00024CC4                            
00024CC4                            loc_194EE:
00024CC4 6000 FD0A                  		bra.w	loc_191F2
00024CC8                            ; ===========================================================================
00024CC8                            
00024CC8                            loc_194F2:				; XREF: Obj75_ShipIndex
00024CC8 317C 0400 0010             		move.w	#$400,$10(a0)
00024CCE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00024CD4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00024CDA 6400                       		bcc.s	loc_1950C
00024CDC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00024CE0 6000                       		bra.s	loc_19512
00024CE2                            ; ===========================================================================
00024CE2                            
00024CE2                            loc_1950C:
00024CE2 4A28 0001                  		tst.b	1(a0)
00024CE6 6A00                       		bpl.s	Obj75_ShipDelete
00024CE8                            
00024CE8                            loc_19512:
00024CE8 6100 E398                  		bsr.w	BossMove
00024CEC 6000 FCCE                  		bra.w	loc_191DE
00024CF0                            ; ===========================================================================
00024CF0                            
00024CF0                            Obj75_ShipDelete:
00024CF0 4EF9 0001 5BF0             		jmp	DeleteObject
00024CF6                            ; ===========================================================================
00024CF6                            
00024CF6                            Obj75_FaceMain:				; XREF: Obj75_Index
00024CF6 7201                       		moveq	#1,d1
00024CF8 2268 0034                  		movea.l	$34(a0),a1
00024CFC 7000                       		moveq	#0,d0
00024CFE 1029 0025                  		move.b	$25(a1),d0
00024D02 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00024D06 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00024D0A 1141 001C                  		move.b	d1,$1C(a0)
00024D0E 1010                       		move.b	(a0),d0
00024D10 B011                       		cmp.b	(a1),d0
00024D12 6600                       		bne.s	Obj75_FaceDelete
00024D14 6000                       		bra.s	loc_195BE
00024D16                            ; ===========================================================================
00024D16                            
00024D16                            Obj75_FaceDelete:
00024D16 4EF9 0001 5BF0             		jmp	DeleteObject
00024D1C                            ; ===========================================================================
00024D1C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00024D20 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00024D24 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00024D28                            ; ===========================================================================
00024D28                            
00024D28                            loc_19552:				; XREF: off_19546
00024D28 720A                       		moveq	#$A,d1
00024D2A 4E75                       		rts	
00024D2C                            ; ===========================================================================
00024D2C                            
00024D2C                            loc_19556:				; XREF: off_19546
00024D2C 7206                       		moveq	#6,d1
00024D2E 4E75                       		rts	
00024D30                            ; ===========================================================================
00024D30                            
00024D30                            loc_1955A:				; XREF: off_19546
00024D30 7000                       		moveq	#0,d0
00024D32 1029 0028                  		move.b	$28(a1),d0
00024D36 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00024D3A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00024D3E                            ; ===========================================================================
00024D3E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00024D42 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00024D46                            ; ===========================================================================
00024D46                            
00024D46                            loc_19570:				; XREF: off_19568
00024D46 6000                       		bra.s	loc_19574
00024D48                            ; ===========================================================================
00024D48                            
00024D48                            loc_19572:				; XREF: off_19568
00024D48 7206                       		moveq	#6,d1
00024D4A                            
00024D4A                            loc_19574:				; XREF: off_19546
00024D4A 4A29 0020                  		tst.b	$20(a1)
00024D4E 6600                       		bne.s	loc_1957E
00024D50 7205                       		moveq	#5,d1
00024D52 4E75                       		rts	
00024D54                            ; ===========================================================================
00024D54                            
00024D54                            loc_1957E:
00024D54 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00024D5A 6500                       		bcs.s	locret_19588
00024D5C 7204                       		moveq	#4,d1
00024D5E                            
00024D5E                            locret_19588:
00024D5E 4E75                       		rts	
00024D60                            ; ===========================================================================
00024D60                            
00024D60                            Obj75_FlameMain:			; XREF: Obj75_Index
00024D60 117C 0007 001C             		move.b	#7,$1C(a0)
00024D66 2268 0034                  		movea.l	$34(a0),a1
00024D6A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024D70 6600                       		bne.s	loc_195AA
00024D72 117C 000B 001C             		move.b	#$B,$1C(a0)
00024D78 4A28 0001                  		tst.b	1(a0)
00024D7C 6A00                       		bpl.s	Obj75_FlameDelete
00024D7E 6000                       		bra.s	loc_195B6
00024D80                            ; ===========================================================================
00024D80                            
00024D80                            loc_195AA:
00024D80 4A69 0010                  		tst.w	$10(a1)
00024D84 6700                       		beq.s	loc_195B6
00024D86 117C 0008 001C             		move.b	#8,$1C(a0)
00024D8C                            
00024D8C                            loc_195B6:
00024D8C 6000                       		bra.s	loc_195BE
00024D8E                            ; ===========================================================================
00024D8E                            
00024D8E                            Obj75_FlameDelete:
00024D8E 4EF9 0001 5BF0             		jmp	DeleteObject
00024D94                            ; ===========================================================================
00024D94                            
00024D94                            loc_195BE:
00024D94 43F9 0002 348E             		lea	(Ani_Eggman).l,a1
00024D9A 4EB9 0001 2618             		jsr	AnimateSprite
00024DA0 2268 0034                  		movea.l	$34(a0),a1
00024DA4 3169 0008 0008             		move.w	8(a1),8(a0)
00024DAA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00024DB0                            
00024DB0                            loc_195DA:
00024DB0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00024DB6 7003                       		moveq	#3,d0
00024DB8 C028 0022                  		and.b	$22(a0),d0
00024DBC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00024DC2 8128 0001                  		or.b	d0,1(a0)
00024DC6 4EF9 0001 5C3C             		jmp	DisplaySprite
00024DCC                            ; ===========================================================================
00024DCC                            
00024DCC                            Obj75_SpikeMain:			; XREF: Obj75_Index
00024DCC 217C 0002 35A6 0004        		move.l	#Map_BossItems,4(a0)
00024DD4 317C 246C 0002             		move.w	#$246C,2(a0)
00024DDA 117C 0005 001A             		move.b	#5,$1A(a0)
00024DE0 2268 0034                  		movea.l	$34(a0),a1
00024DE4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00024DEA 6600                       		bne.s	loc_1961C
00024DEC 4A28 0001                  		tst.b	1(a0)
00024DF0 6A00                       		bpl.s	Obj75_SpikeDelete
00024DF2                            
00024DF2                            loc_1961C:
00024DF2 3169 0008 0008             		move.w	8(a1),8(a0)
00024DF8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00024DFE 3028 003C                  		move.w	$3C(a0),d0
00024E02 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00024E08 6600                       		bne.s	loc_19652
00024E0A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00024E10 6700                       		beq.s	loc_1964C
00024E12 4A29 0028                  		tst.b	$28(a1)
00024E16 6600                       		bne.s	loc_19658
00024E18 0C40 0094                  		cmpi.w	#$94,d0
00024E1C 6C00                       		bge.s	loc_19658
00024E1E 5E40                       		addq.w	#7,d0
00024E20 6000                       		bra.s	loc_19658
00024E22                            ; ===========================================================================
00024E22                            
00024E22                            loc_1964C:
00024E22 4A69 003C                  		tst.w	$3C(a1)
00024E26 6A00                       		bpl.s	loc_19658
00024E28                            
00024E28                            loc_19652:
00024E28 4A40                       		tst.w	d0
00024E2A 6F00                       		ble.s	loc_19658
00024E2C 5B40                       		subq.w	#5,d0
00024E2E                            
00024E2E                            loc_19658:
00024E2E 3140 003C                  		move.w	d0,$3C(a0)
00024E32 E440                       		asr.w	#2,d0
00024E34 D168 000C                  		add.w	d0,$C(a0)
00024E38 117C 0008 0023             		move.b	#8,width_pixels(a0)
00024E3E 117C 000C 0016             		move.b	#$C,$16(a0)
00024E44 4228 0020                  		clr.b	$20(a0)
00024E48 2268 0034                  		movea.l	$34(a0),a1
00024E4C 4A29 0020                  		tst.b	$20(a1)
00024E50 6700                       		beq.s	loc_19688
00024E52 4A29 0029                  		tst.b	$29(a1)
00024E56 6600                       		bne.s	loc_19688
00024E58 117C 0084 0020             		move.b	#$84,$20(a0)
00024E5E                            
00024E5E                            loc_19688:
00024E5E 6000 FF50                  		bra.w	loc_195DA
00024E62                            ; ===========================================================================
00024E62                            
00024E62                            Obj75_SpikeDelete:
00024E62 4EF9 0001 5BF0             		jmp	DeleteObject
00024E68                            ; ===========================================================================
00024E68                            ; ---------------------------------------------------------------------------
00024E68                            ; Object 76 - blocks that Eggman picks up (SYZ)
00024E68                            ; ---------------------------------------------------------------------------
00024E68                            
00024E68                            Obj76:					; XREF: Obj_Index
00024E68 7000                       		moveq	#0,d0
00024E6A 1028 0024                  		move.b	$24(a0),d0
00024E6E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00024E72 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00024E76                            ; ===========================================================================
00024E76 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00024E78 0000                       		dc.w Obj76_Action-Obj76_Index
00024E7A 0000                       		dc.w loc_19762-Obj76_Index
00024E7C                            ; ===========================================================================
00024E7C                            
00024E7C                            Obj76_Main:				; XREF: Obj76_Index
00024E7C 7800                       		moveq	#0,d4
00024E7E 3A3C 2C10                  		move.w	#$2C10,d5
00024E82 7C09                       		moveq	#9,d6
00024E84 43D0                       		lea	(a0),a1
00024E86 6000                       		bra.s	Obj76_MakeBlock
00024E88                            ; ===========================================================================
00024E88                            
00024E88                            Obj76_Loop:
00024E88 4EB9 0001 6708             		jsr	SingleObjLoad
00024E8E 6600                       		bne.s	Obj76_ExitLoop
00024E90                            
00024E90                            Obj76_MakeBlock:			; XREF: Obj76_Main
00024E90 12BC 0076                  		move.b	#$76,(a1)
00024E94 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00024E9C 337C 4000 0002             		move.w	#$4000,2(a1)
00024EA2 137C 0004 0001             		move.b	#4,1(a1)
00024EA8 137C 0010 0023             		move.b	#$10,width_pixels(a1)
00024EAE 137C 0010 0016             		move.b	#$10,$16(a1)
00024EB4 337C 0180 0018             		move.w	#$180,priority(a1)
00024EBA 3345 0008                  		move.w	d5,8(a1)	; set x-position
00024EBE 337C 0582 000C             		move.w	#$582,$C(a1)
00024EC4 3344 0028                  		move.w	d4,$28(a1)
00024EC8 0644 0101                  		addi.w	#$101,d4
00024ECC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00024ED0 5429 0024                  		addq.b	#2,$24(a1)
00024ED4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00024ED8                            
00024ED8                            Obj76_ExitLoop:
00024ED8 4E75                       		rts	
00024EDA                            ; ===========================================================================
00024EDA                            
00024EDA                            Obj76_Action:				; XREF: Obj76_Index
00024EDA 1028 0029                  		move.b	$29(a0),d0
00024EDE B028 0028                  		cmp.b	$28(a0),d0
00024EE2 6700                       		beq.s	Obj76_Solid
00024EE4 4A00                       		tst.b	d0
00024EE6 6B00                       		bmi.s	loc_19718
00024EE8                            
00024EE8                            loc_19712:
00024EE8 6100 0000                  		bsr.w	Obj76_Break
00024EEC 6000                       		bra.s	Obj76_Display
00024EEE                            ; ===========================================================================
00024EEE                            
00024EEE                            loc_19718:
00024EEE 2268 0034                  		movea.l	$34(a0),a1
00024EF2 4A29 0021                  		tst.b	$21(a1)
00024EF6 67F0                       		beq.s	loc_19712
00024EF8 3169 0008 0008             		move.w	8(a1),8(a0)
00024EFE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00024F04 0668 002C 000C             		addi.w	#$2C,$C(a0)
00024F0A B2C8                       		cmpa.w	a0,a1
00024F0C 6500                       		bcs.s	Obj76_Display
00024F0E 3029 0012                  		move.w	$12(a1),d0
00024F12 48C0                       		ext.l	d0
00024F14 E080                       		asr.l	#8,d0
00024F16 D168 000C                  		add.w	d0,$C(a0)
00024F1A 6000                       		bra.s	Obj76_Display
00024F1C                            ; ===========================================================================
00024F1C                            
00024F1C                            Obj76_Solid:				; XREF: Obj76_Action
00024F1C 323C 001B                  		move.w	#$1B,d1
00024F20 343C 0010                  		move.w	#$10,d2
00024F24 363C 0011                  		move.w	#$11,d3
00024F28 3828 0008                  		move.w	8(a0),d4
00024F2C 4EB9 0001 8F12             		jsr	SolidObject
00024F32                            
00024F32                            Obj76_Display:				; XREF: Obj76_Action
00024F32 4EF9 0001 5C3C             		jmp	DisplaySprite
00024F38                            ; ===========================================================================
00024F38                            
00024F38                            loc_19762:				; XREF: Obj76_Index
00024F38 4A28 0001                  		tst.b	1(a0)
00024F3C 6A00                       		bpl.s	Obj76_Delete
00024F3E 4EB9 0001 5BB6             		jsr	ObjectFall
00024F44 4EF9 0001 5C3C             		jmp	DisplaySprite
00024F4A                            ; ===========================================================================
00024F4A                            
00024F4A                            Obj76_Delete:
00024F4A 4EF9 0001 5BF0             		jmp	DeleteObject
00024F50                            
00024F50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00024F50                            
00024F50                            
00024F50                            Obj76_Break:				; XREF: Obj76_Action
00024F50 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00024F54 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00024F58 7801                       		moveq	#1,d4
00024F5A 7203                       		moveq	#3,d1
00024F5C 7438                       		moveq	#$38,d2
00024F5E 5428 0024                  		addq.b	#2,$24(a0)
00024F62 117C 0008 0023             		move.b	#8,width_pixels(a0)
00024F68 117C 0008 0016             		move.b	#8,$16(a0)
00024F6E 43D0                       		lea	(a0),a1
00024F70 6000                       		bra.s	Obj76_MakeFrag
00024F72                            ; ===========================================================================
00024F72                            
00024F72                            Obj76_LoopFrag:
00024F72 4EB9 0001 671E             		jsr	SingleObjLoad2
00024F78 6600                       		bne.s	loc_197D4
00024F7A                            
00024F7A                            Obj76_MakeFrag:
00024F7A 45D0                       		lea	(a0),a2
00024F7C 47D1                       		lea	(a1),a3
00024F7E 7603                       		moveq	#3,d3
00024F80                            
00024F80                            loc_197AA:
00024F80 26DA                       		move.l	(a2)+,(a3)+
00024F82 26DA                       		move.l	(a2)+,(a3)+
00024F84 26DA                       		move.l	(a2)+,(a3)+
00024F86 26DA                       		move.l	(a2)+,(a3)+
00024F88 51CB FFF6                  		dbf	d3,loc_197AA
00024F8C                            
00024F8C 335C 0010                  		move.w	(a4)+,$10(a1)
00024F90 335C 0012                  		move.w	(a4)+,$12(a1)
00024F94 361D                       		move.w	(a5)+,d3
00024F96 D769 0008                  		add.w	d3,8(a1)
00024F9A 361D                       		move.w	(a5)+,d3
00024F9C D769 000C                  		add.w	d3,$C(a1)
00024FA0 1344 001A                  		move.b	d4,$1A(a1)
00024FA4 5244                       		addq.w	#1,d4
00024FA6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00024FAA                            
00024FAA                            loc_197D4:
00024FAA 303C 00D6                  		move.w	#$D6,d0
00024FAE 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play smashing sound
00024FB4                            ; End of function Obj76_Break
00024FB4                            
00024FB4                            ; ===========================================================================
00024FB4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00024FB8 0180 FE00                  		dc.w $180, $FE00
00024FBC FF00 FF00                  		dc.w $FF00, $FF00
00024FC0 0100 FF00                  		dc.w $100, $FF00
00024FC4 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00024FC8 0010 0000                  		dc.w $10, 0
00024FCC 0000 0010                  		dc.w 0,	$10
00024FD0 0010 0010                  		dc.w $10, $10
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            Map_obj76:
00024FD4                            	include "_maps\obj76.asm"
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00024FD4                            ; ---------------------------------------------------------------------------
00024FD4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00024FD8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00024FDC 0000                       		dc.w byte_19826-Map_obj76
00024FDE 02                         byte_19808:	dc.b 2
00024FDF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00024FE4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00024FE9 00                         		dc.b 0
00024FEA 01                         byte_19814:	dc.b 1
00024FEB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00024FF0 01                         byte_1981A:	dc.b 1
00024FF1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00024FF6 01                         byte_19820:	dc.b 1
00024FF7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00024FFC 01                         byte_19826:	dc.b 1
00024FFD F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00025002                            		even
00025002                            		even
00025002                            
00025002                            ; ===========================================================================
00025002                            
00025002                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00025002 4EF9 0001 5BF0             		jmp	DeleteObject
00025008                            ; ===========================================================================
00025008                            ; ---------------------------------------------------------------------------
00025008                            ; Object 82 - Eggman (SBZ2)
00025008                            ; ---------------------------------------------------------------------------
00025008                            
00025008                            Obj82:					; XREF: Obj_Index
00025008 7000                       		moveq	#0,d0
0002500A 1028 0024                  		move.b	$24(a0),d0
0002500E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00025012 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00025016                            ; ===========================================================================
00025016 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00025018 0000                       		dc.w Obj82_Eggman-Obj82_Index
0002501A 0000                       		dc.w Obj82_Switch-Obj82_Index
0002501C                            
0002501C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0002501F 0400 03                    		dc.b 4,	0, 3
00025022                            ; ===========================================================================
00025022                            
00025022                            Obj82_Main:				; XREF: Obj82_Index
00025022 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00025026 317C 2160 0008             		move.w	#$2160,8(a0)
0002502C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00025032 117C 000F 0020             		move.b	#$F,$20(a0)
00025038 117C 0010 0021             		move.b	#$10,$21(a0)
0002503E 08A8 0000 0022             		bclr	#0,$22(a0)
00025044 4228 0025                  		clr.b	$25(a0)
00025048 115A 0024                  		move.b	(a2)+,$24(a0)
0002504C 115A 001C                  		move.b	(a2)+,$1C(a0)
00025050 115A 0018                  		move.b	(a2)+,priority(a0)
00025054 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0002505C 317C 0400 0002             		move.w	#$400,2(a0)
00025062 117C 0004 0001             		move.b	#4,1(a0)
00025068 08E8 0007 0001             		bset	#7,1(a0)
0002506E 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00025074 4EB9 0001 671E             		jsr	SingleObjLoad2
0002507A 6600                       		bne.s	Obj82_Eggman
0002507C 2348 0034                  		move.l	a0,$34(a1)
00025080 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00025084 337C 2130 0008             		move.w	#$2130,8(a1)
0002508A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00025090 4228 0025                  		clr.b	$25(a0)
00025094 135A 0024                  		move.b	(a2)+,$24(a1)
00025098 135A 001C                  		move.b	(a2)+,$1C(a1)
0002509C 135A 0018                  		move.b	(a2)+,priority(a1)
000250A0 237C 0001 3F2C 0004        		move.l	#Map_obj32,4(a1)
000250A8 337C 04A4 0002             		move.w	#$4A4,2(a1)
000250AE 137C 0004 0001             		move.b	#4,1(a1)
000250B4 08E9 0007 0001             		bset	#7,1(a1)
000250BA 137C 0010 0023             		move.b	#$10,width_pixels(a1)
000250C0 137C 0000 001A             		move.b	#0,$1A(a1)
000250C6                            
000250C6                            Obj82_Eggman:				; XREF: Obj82_Index
000250C6 7000                       		moveq	#0,d0
000250C8 1028 0025                  		move.b	$25(a0),d0
000250CC 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
000250D0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
000250D4 43FA 0000                  		lea	Ani_obj82(pc),a1
000250D8 4EB9 0001 2618             		jsr	AnimateSprite
000250DE 4EF9 0001 5C3C             		jmp	DisplaySprite
000250E4                            ; ===========================================================================
000250E4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
000250E6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
000250E8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
000250EA 0000                       		dc.w loc_19934-Obj82_EggIndex
000250EC                            ; ===========================================================================
000250EC                            
000250EC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
000250EC 3028 0008                  		move.w	8(a0),d0
000250F0 9078 D008                  		sub.w	($FFFFD008).w,d0
000250F4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
000250F8 6400                       		bcc.s	loc_19934	; if not, branch
000250FA 5428 0025                  		addq.b	#2,$25(a0)
000250FE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00025104 117C 0001 001C             		move.b	#1,$1C(a0)
0002510A                            
0002510A                            loc_19934:				; XREF: Obj82_EggIndex
0002510A 4EF9 0001 5BD6             		jmp	SpeedToPos
00025110                            ; ===========================================================================
00025110                            
00025110                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00025110 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00025114 6600                       		bne.s	loc_19954	; if time remains, branch
00025116 5428 0025                  		addq.b	#2,$25(a0)
0002511A 117C 0002 001C             		move.b	#2,$1C(a0)
00025120 5868 000C                  		addq.w	#4,$C(a0)
00025124 317C 000F 003C             		move.w	#15,$3C(a0)
0002512A                            
0002512A                            loc_19954:
0002512A 60DE                       		bra.s	loc_19934
0002512C                            ; ===========================================================================
0002512C                            
0002512C                            Obj82_Leap:				; XREF: Obj82_EggIndex
0002512C 5368 003C                  		subq.w	#1,$3C(a0)
00025130 6E00                       		bgt.s	loc_199D0
00025132 6600                       		bne.s	loc_1996A
00025134 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0002513A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00025140                            
00025140                            loc_1996A:
00025140 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00025146 6E00                       		bgt.s	loc_19976
00025148 4268 0010                  		clr.w	$10(a0)
0002514C                            
0002514C                            loc_19976:
0002514C 0668 0024 0012             		addi.w	#$24,$12(a0)
00025152 4A68 0012                  		tst.w	$12(a0)
00025156 6B00                       		bmi.s	Obj82_FindBlocks
00025158 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0002515E 6500                       		bcs.s	Obj82_FindBlocks
00025160 317C 5357 0028             		move.w	#$5357,$28(a0)
00025166 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0002516C 6500                       		bcs.s	Obj82_FindBlocks
0002516E 317C 059B 000C             		move.w	#$59B,$C(a0)
00025174 4268 0012                  		clr.w	$12(a0)
00025178                            
00025178                            Obj82_FindBlocks:
00025178 3028 0010                  		move.w	$10(a0),d0
0002517C 8068 0012                  		or.w	$12(a0),d0
00025180 6600                       		bne.s	loc_199D0
00025182 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00025186 703E                       		moveq	#$3E,d0
00025188 7240                       		moveq	#$40,d1
0002518A                            
0002518A                            Obj82_FindLoop:	
0002518A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0002518C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00025190 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00025194                            
00025194 6600                       		bne.s	loc_199D0
00025196 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0002519C 5428 0025                  		addq.b	#2,$25(a0)
000251A0 117C 0001 001C             		move.b	#1,$1C(a0)
000251A6                            
000251A6                            loc_199D0:
000251A6 6000 FF62                  		bra.w	loc_19934
000251AA                            ; ===========================================================================
000251AA                            
000251AA                            Obj82_Switch:				; XREF: Obj82_Index
000251AA 7000                       		moveq	#0,d0
000251AC 1028 0025                  		move.b	$25(a0),d0
000251B0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
000251B4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
000251B8                            ; ===========================================================================
000251B8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
000251BA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
000251BC                            ; ===========================================================================
000251BC                            
000251BC                            loc_199E6:				; XREF: Obj82_SwIndex
000251BC 2268 0034                  		movea.l	$34(a0),a1
000251C0 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
000251C6 6600                       		bne.s	Obj82_SwDisplay
000251C8 117C 0001 001A             		move.b	#1,$1A(a0)
000251CE 5428 0025                  		addq.b	#2,$25(a0)
000251D2                            
000251D2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
000251D2 4EF9 0001 5C3C             		jmp	DisplaySprite
000251D8                            ; ===========================================================================
000251D8                            Ani_obj82:
000251D8                            	include "_anim\obj82.asm"
000251D8                            ; ---------------------------------------------------------------------------
000251D8                            ; Animation script - Eggman (SBZ2)
000251D8                            ; ---------------------------------------------------------------------------
000251D8 0000                       		dc.w byte_19A10-Ani_obj82
000251DA 0000                       		dc.w byte_19A14-Ani_obj82
000251DC 0000                       		dc.w byte_19A18-Ani_obj82
000251DE 0000                       		dc.w byte_19A20-Ani_obj82
000251E0 0000                       		dc.w byte_19A24-Ani_obj82
000251E2 0000                       		dc.w byte_19A2A-Ani_obj82
000251E4 0000                       		dc.w byte_19A30-Ani_obj82
000251E6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
000251EA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
000251EE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
000251F6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
000251FA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00025200 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00025206 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0002520A                            		even
0002520A                            		even
0002520A                            
0002520A                            ; ---------------------------------------------------------------------------
0002520A                            ; Sprite mappings - Eggman (SBZ2)
0002520A                            ; ---------------------------------------------------------------------------
0002520A                            Map_obj82:
0002520A                            	include "_maps\obj82.asm"
0002520A                            ; ---------------------------------------------------------------------------
0002520A                            ; Sprite mappings - Eggman (SBZ2)
0002520A                            ; ---------------------------------------------------------------------------
0002520A 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0002520E 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00025212 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00025216 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0002521A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0002521E 0000                       		dc.w byte_19B4F-Map_obj82
00025220 03                         byte_19A4A:	dc.b 3
00025221 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00025226 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0002522B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025230 04                         byte_19A5A:	dc.b 4
00025231 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00025236 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0002523B 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025240 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00025245 00                         		dc.b 0
00025246 04                         byte_19A70:	dc.b 4
00025247 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0002524C E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00025251 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00025256 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0002525B 00                         		dc.b 0
0002525C 04                         byte_19A86:	dc.b 4
0002525D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00025262 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00025267 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0002526C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00025271 00                         		dc.b 0
00025272 04                         byte_19A9C:	dc.b 4
00025273 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00025278 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0002527D 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00025282 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025287 00                         		dc.b 0
00025288 04                         byte_19AB2:	dc.b 4
00025289 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0002528E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00025293 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00025298 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0002529D 00                         		dc.b 0
0002529E 07                         byte_19AC8:	dc.b 7
0002529F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000252A4 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000252A9 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000252AE 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000252B3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000252B8 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
000252BD F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
000252C2 05                         byte_19AEC:	dc.b 5
000252C3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000252C8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000252CD 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000252D2 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000252D7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000252DC 06                         byte_19B06:	dc.b 6
000252DD EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
000252E2 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
000252E7 0905 0844 00               		dc.b 9,	5, 8, $44, 0
000252EC 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
000252F1 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
000252F6 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
000252FB 00                         		dc.b 0
000252FC 08                         byte_19B26:	dc.b 8
000252FD E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00025302 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00025307 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0002530C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00025311 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00025316 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0002531B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00025320 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00025325 03                         byte_19B4F:	dc.b 3
00025326 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0002532B F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00025330 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00025336 00                         		even
00025336 00                         		even
00025336                            
00025336                            ; ===========================================================================
00025336                            ; ---------------------------------------------------------------------------
00025336                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00025336                            ; ---------------------------------------------------------------------------
00025336                            
00025336                            Obj83:					; XREF: Obj_Index
00025336 7000                       		moveq	#0,d0
00025338 1028 0024                  		move.b	$24(a0),d0
0002533C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00025340 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00025344                            ; ===========================================================================
00025344 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00025346 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00025348 0000                       		dc.w loc_19C36-Obj83_Index
0002534A 0000                       		dc.w loc_19C62-Obj83_Index
0002534C 0000                       		dc.w loc_19C72-Obj83_Index
0002534E 0000                       		dc.w loc_19C80-Obj83_Index
00025350                            ; ===========================================================================
00025350                            
00025350                            Obj83_Main:				; XREF: Obj83_Index
00025350 317C 2080 0008             		move.w	#$2080,8(a0)
00025356 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0002535C 117C 0080 0023             		move.b	#$80,width_pixels(a0)
00025362 117C 0010 0016             		move.b	#$10,$16(a0)
00025368 117C 0004 0001             		move.b	#4,1(a0)
0002536E 08E8 0007 0001             		bset	#7,1(a0)
00025374 7800                       		moveq	#0,d4
00025376 3A3C 2010                  		move.w	#$2010,d5
0002537A 7C07                       		moveq	#7,d6
0002537C 45E8 0030                  		lea	$30(a0),a2
00025380                            
00025380                            Obj83_MakeBlock:
00025380 4EB9 0001 6708             		jsr	SingleObjLoad
00025386 6600                       		bne.s	Obj83_ExitMake
00025388 34C9                       		move.w	a1,(a2)+
0002538A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0002538E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00025396 337C 4518 0002             		move.w	#$4518,2(a1)
0002539C 137C 0004 0001             		move.b	#4,1(a1)
000253A2 137C 0010 0023             		move.b	#$10,width_pixels(a1)
000253A8 137C 0010 0016             		move.b	#$10,$16(a1)
000253AE 337C 0180 0018             		move.w	#$180,priority(a1)
000253B4 3345 0008                  		move.w	d5,8(a1)	; set X	position
000253B8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
000253BE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
000253C2 137C 0008 0024             		move.b	#8,$24(a1)
000253C8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
000253CC                            
000253CC                            Obj83_ExitMake:
000253CC 5428 0024                  		addq.b	#2,$24(a0)
000253D0 4E75                       		rts	
000253D2                            ; ===========================================================================
000253D2                            
000253D2                            Obj83_ChkBreak:				; XREF: Obj83_Index
000253D2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
000253D8 6600                       		bne.s	Obj83_Solid	; if not, branch
000253DA 4228 001A                  		clr.b	$1A(a0)
000253DE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
000253E2                            
000253E2                            Obj83_Solid:
000253E2 7000                       		moveq	#0,d0
000253E4 1028 001A                  		move.b	$1A(a0),d0
000253E8 4400                       		neg.b	d0
000253EA 4880                       		ext.w	d0
000253EC 5040                       		addq.w	#8,d0
000253EE E940                       		asl.w	#4,d0
000253F0 383C 2100                  		move.w	#$2100,d4
000253F4 9840                       		sub.w	d0,d4
000253F6 1140 0023                  		move.b	d0,width_pixels(a0)
000253FA 3144 0008                  		move.w	d4,8(a0)
000253FE 720B                       		moveq	#$B,d1
00025400 D240                       		add.w	d0,d1
00025402 7410                       		moveq	#$10,d2
00025404 7611                       		moveq	#$11,d3
00025406 4EF9 0001 8F12             		jmp	SolidObject
0002540C                            ; ===========================================================================
0002540C                            
0002540C                            loc_19C36:				; XREF: Obj83_Index
0002540C 0428 000E 001E             		subi.b	#$E,$1E(a0)
00025412 6400                       		bcc.s	Obj83_Solid2
00025414 70FF                       		moveq	#-1,d0
00025416 1028 001A                  		move.b	$1A(a0),d0
0002541A 4880                       		ext.w	d0
0002541C D040                       		add.w	d0,d0
0002541E 3030 0030                  		move.w	$30(a0,d0.w),d0
00025422 2240                       		movea.l	d0,a1
00025424 337C 474F 0028             		move.w	#$474F,$28(a1)
0002542A 5228 001A                  		addq.b	#1,$1A(a0)
0002542E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00025434 6700                       		beq.s	loc_19C62
00025436                            
00025436                            Obj83_Solid2:
00025436 60AA                       		bra.s	Obj83_Solid
00025438                            ; ===========================================================================
00025438                            
00025438                            loc_19C62:				; XREF: Obj83_Index
00025438 08A8 0003 0022             		bclr	#3,$22(a0)
0002543E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00025444 6000 FBBC                  		bra.w	loc_1982C
00025448                            ; ===========================================================================
00025448                            
00025448                            loc_19C72:				; XREF: Obj83_Index
00025448 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0002544E 6700                       		beq.s	Obj83_Break	; if yes, branch
00025450 4EF9 0001 5C3C             		jmp	DisplaySprite
00025456                            ; ===========================================================================
00025456                            
00025456                            loc_19C80:				; XREF: Obj83_Index
00025456 4A28 0001                  		tst.b	1(a0)
0002545A 6A00 FBA6                  		bpl.w	loc_1982C
0002545E 4EB9 0001 5BB6             		jsr	ObjectFall
00025464 4EF9 0001 5C3C             		jmp	DisplaySprite
0002546A                            ; ===========================================================================
0002546A                            
0002546A                            Obj83_Break:				; XREF: loc_19C72
0002546A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0002546E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00025472 7801                       		moveq	#1,d4
00025474 7203                       		moveq	#3,d1
00025476 7438                       		moveq	#$38,d2
00025478 5428 0024                  		addq.b	#2,$24(a0)
0002547C 117C 0008 0023             		move.b	#8,width_pixels(a0)
00025482 117C 0008 0016             		move.b	#8,$16(a0)
00025488 43D0                       		lea	(a0),a1
0002548A 6000                       		bra.s	Obj83_MakeFrag
0002548C                            ; ===========================================================================
0002548C                            
0002548C                            Obj83_LoopFrag:
0002548C 4EB9 0001 671E             		jsr	SingleObjLoad2
00025492 6600                       		bne.s	Obj83_BreakSnd
00025494                            
00025494                            Obj83_MakeFrag:				; XREF: Obj83_Break
00025494 45D0                       		lea	(a0),a2
00025496 47D1                       		lea	(a1),a3
00025498 7603                       		moveq	#3,d3
0002549A                            
0002549A                            loc_19CC4:
0002549A 26DA                       		move.l	(a2)+,(a3)+
0002549C 26DA                       		move.l	(a2)+,(a3)+
0002549E 26DA                       		move.l	(a2)+,(a3)+
000254A0 26DA                       		move.l	(a2)+,(a3)+
000254A2 51CB FFF6                  		dbf	d3,loc_19CC4
000254A6                            
000254A6 335C 0012                  		move.w	(a4)+,$12(a1)
000254AA 361D                       		move.w	(a5)+,d3
000254AC D769 0008                  		add.w	d3,8(a1)
000254B0 361D                       		move.w	(a5)+,d3
000254B2 D769 000C                  		add.w	d3,$C(a1)
000254B6 1344 001A                  		move.b	d4,$1A(a1)
000254BA 5244                       		addq.w	#1,d4
000254BC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
000254C0                            
000254C0                            Obj83_BreakSnd:
000254C0 303C 00D6                  		move.w	#$D6,d0
000254C4 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play smashing sound
000254CA 4EF9 0001 5C3C             		jmp	DisplaySprite
000254D0                            ; ===========================================================================
000254D0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
000254D4 0120 00C0                  		dc.w $120, $C0
000254D8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
000254DC 0010 0000                  		dc.w $10, 0
000254E0 0000 0010                  		dc.w 0,	$10
000254E4 0010 0010                  		dc.w $10, $10
000254E8                            ; ---------------------------------------------------------------------------
000254E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
000254E8                            ; ---------------------------------------------------------------------------
000254E8                            Map_obj83:
000254E8                            	include "_maps\obj83.asm"
000254E8                            ; ---------------------------------------------------------------------------
000254E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
000254E8                            ; ---------------------------------------------------------------------------
000254E8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
000254EC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
000254F0 0000                       		dc.w byte_19D46-Map_obj83
000254F2 01                         byte_19D1C:	dc.b 1
000254F3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000254F8 02                         byte_19D22:	dc.b 2
000254F9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
000254FE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00025503 00                         		dc.b 0
00025504 02                         byte_19D2E:	dc.b 2
00025505 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0002550A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0002550F 00                         		dc.b 0
00025510 02                         byte_19D3A:	dc.b 2
00025511 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00025516 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0002551B 00                         		dc.b 0
0002551C 02                         byte_19D46:	dc.b 2
0002551D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00025522 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00025528 00                         		even
00025528 00                         		even
00025528                            
00025528                            ; ===========================================================================
00025528                            ; ---------------------------------------------------------------------------
00025528                            ; Object 85 - Eggman (FZ)
00025528                            ; ---------------------------------------------------------------------------
00025528                            
00025528                            Obj85_Delete:
00025528 4EF9 0001 5BF0             		jmp	DeleteObject
0002552E                            ; ===========================================================================
0002552E                            
0002552E                            Obj85:					; XREF: Obj_Index
0002552E 7000                       		moveq	#0,d0
00025530 1028 0024                  		move.b	$24(a0),d0
00025534 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00025538 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0002553C                            ; ===========================================================================
0002553C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0002553E 0000                       		dc.w Obj85_Eggman-Obj85_Index
00025540 0000                       		dc.w loc_1A38E-Obj85_Index
00025542 0000                       		dc.w loc_1A346-Obj85_Index
00025544 0000                       		dc.w loc_1A2C6-Obj85_Index
00025546 0000                       		dc.w loc_1A3AC-Obj85_Index
00025548 0000                       		dc.w loc_1A264-Obj85_Index
0002554A                            
0002554A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00025550 0002 520A                  		dc.l Map_obj82		; mappings pointer
00025554 25B0 0590 0300             		dc.w $25B0, $590, $300
0002555A 0000 0000                  		dc.l Map_obj84
0002555E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00025564 0000 0000                  		dc.l Map_FZBoss
00025568 26E0 0596 0470             		dc.w $26E0, $596, $470
0002556E 0002 520A                  		dc.l Map_obj82
00025572 26E0 0596 0400             		dc.w $26E0, $596, $400
00025578 0002 34DE                  		dc.l Map_Eggman
0002557C 26E0 0596 0400             		dc.w $26E0, $596, $400
00025582 0002 34DE                  		dc.l Map_Eggman
00025586                            
00025586 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0002558B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00025590 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00025595 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0002559A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0002559F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
000255A4                            ; ===========================================================================
000255A4                            
000255A4                            Obj85_Main:				; XREF: Obj85_Index
000255A4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
000255A8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
000255AC 2248                       		movea.l	a0,a1
000255AE 7205                       		moveq	#5,d1
000255B0 6000                       		bra.s	Obj85_LoadBoss
000255B2                            ; ===========================================================================
000255B2                            
000255B2                            Obj85_Loop:
000255B2 4EB9 0001 671E             		jsr	SingleObjLoad2
000255B8 6600                       		bne.s	loc_19E20
000255BA                            
000255BA                            Obj85_LoadBoss:				; XREF: Obj85_Main
000255BA 12BC 0085                  		move.b	#$85,(a1)
000255BE 335A 0008                  		move.w	(a2)+,8(a1)
000255C2 335A 000C                  		move.w	(a2)+,$C(a1)
000255C6 335A 0002                  		move.w	(a2)+,2(a1)
000255CA 235A 0004                  		move.l	(a2)+,4(a1)
000255CE 135B 0024                  		move.b	(a3)+,$24(a1)
000255D2 135B 001C                  		move.b	(a3)+,$1C(a1)
000255D6 135B 0018                  		move.b	(a3)+,priority(a1)
000255DA 3029 0018                          move.w  priority(a1),d0
000255DE E248                               lsr.w   #1,d0
000255E0 0240 0380                          andi.w  #$380,d0
000255E4 3340 0018                          move.w  d0,priority(a1)
000255E8 135B 0017                  		move.b	(a3)+,$17(a1)
000255EC 135B 0016                  		move.b	(a3)+,$16(a1)
000255F0 137C 0004 0001             		move.b	#4,1(a1)
000255F6 08E8 0007 0001             		bset	#7,1(a0)
000255FC 2348 0034                  		move.l	a0,$34(a1)
00025600 51C9 FFB0                  		dbf	d1,Obj85_Loop
00025604                            
00025604                            loc_19E20:
00025604 45E8 0036                  		lea	$36(a0),a2
00025608 4EB9 0001 6708             		jsr	SingleObjLoad
0002560E 6600                       		bne.s	loc_19E5A
00025610 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00025614 3489                       		move.w	a1,(a2)
00025616 2348 0034                  		move.l	a0,$34(a1)
0002561A 45E8 0038                  		lea	$38(a0),a2
0002561E 7400                       		moveq	#0,d2
00025620 7203                       		moveq	#3,d1
00025622                            
00025622                            loc_19E3E:
00025622 4EB9 0001 671E             		jsr	SingleObjLoad2
00025628 6600                       		bne.s	loc_19E5A
0002562A 34C9                       		move.w	a1,(a2)+
0002562C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00025630 2348 0034                  		move.l	a0,$34(a1)
00025634 1342 0028                  		move.b	d2,$28(a1)
00025638 5442                       		addq.w	#2,d2
0002563A 51C9 FFE6                  		dbf	d1,loc_19E3E
0002563E                            
0002563E                            loc_19E5A:
0002563E 317C 0000 0034             		move.w	#0,$34(a0)
00025644 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0002564A 317C FFFF 0030             		move.w	#-1,$30(a0)
00025650                            
00025650                            Obj85_Eggman:				; XREF: Obj85_Index
00025650 7000                       		moveq	#0,d0
00025652 1028 0034                  		move.b	$34(a0),d0
00025656 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0002565A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0002565E 4EF9 0001 5C3C             		jmp	DisplaySprite
00025664                            ; ===========================================================================
00025664 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00025668 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0002566C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00025670 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00025674                            ; ===========================================================================
00025674                            
00025674                            loc_19E90:				; XREF: off_19E80
00025674 4AB8 F680                  		tst.l	($FFFFF680).w
00025678 6600                       		bne.s	loc_19EA2
0002567A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00025680 6500                       		bcs.s	loc_19EA2
00025682 5428 0034                  		addq.b	#2,$34(a0)
00025686                            
00025686                            loc_19EA2:
00025686 52B8 F636                  		addq.l	#1,($FFFFF636).w
0002568A 4E75                       		rts	
0002568C                            ; ===========================================================================
0002568C                            
0002568C                            loc_19EA8:				; XREF: off_19E80
0002568C 4A68 0030                  		tst.w	$30(a0)
00025690 6A00                       		bpl.s	loc_19F10
00025692 4268 0030                  		clr.w	$30(a0)
00025696 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0002569C 0240 000C                  		andi.w	#$C,d0
000256A0 3200                       		move.w	d0,d1
000256A2 5441                       		addq.w	#2,d1
000256A4 4A80                       		tst.l	d0
000256A6 6A00                       		bpl.s	loc_19EC6
000256A8 C141                       		exg	d1,d0
000256AA                            
000256AA                            loc_19EC6:
000256AA 43FA 0000                  		lea	word_19FD6(pc),a1
000256AE 3031 0000                  		move.w	(a1,d0.w),d0
000256B2 3231 1000                  		move.w	(a1,d1.w),d1
000256B6 3140 0030                  		move.w	d0,$30(a0)
000256BA 74FF                       		moveq	#-1,d2
000256BC 3430 0038                  		move.w	$38(a0,d0.w),d2
000256C0 2242                       		movea.l	d2,a1
000256C2 137C 00FF 0029             		move.b	#-1,$29(a1)
000256C8 337C FFFF 0030             		move.w	#-1,$30(a1)
000256CE 3430 1038                  		move.w	$38(a0,d1.w),d2
000256D2 2242                       		movea.l	d2,a1
000256D4 137C 0001 0029             		move.b	#1,$29(a1)
000256DA 337C 0000 0030             		move.w	#0,$30(a1)
000256E0 317C 0001 0032             		move.w	#1,$32(a0)
000256E6 4228 0035                  		clr.b	$35(a0)
000256EA 303C 00B7                  		move.w	#$B7,d0
000256EE 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play rumbling sound
000256F4                            
000256F4                            loc_19F10:
000256F4 4A68 0032                  		tst.w	$32(a0)
000256F8 6B00 0000                  		bmi.w	loc_19FA6
000256FC 08A8 0000 0022             		bclr	#0,$22(a0)
00025702 3038 D008                  		move.w	($FFFFD008).w,d0
00025706 9068 0008                  		sub.w	8(a0),d0
0002570A 6500                       		bcs.s	loc_19F2E
0002570C 08E8 0000 0022             		bset	#0,$22(a0)
00025712                            
00025712                            loc_19F2E:
00025712 323C 002B                  		move.w	#$2B,d1
00025716 343C 0014                  		move.w	#$14,d2
0002571A 363C 0014                  		move.w	#$14,d3
0002571E 3828 0008                  		move.w	8(a0),d4
00025722 4EB9 0001 8F12             		jsr	SolidObject
00025728 4A44                       		tst.w	d4
0002572A 6E00                       		bgt.s	loc_19F50
0002572C                            
0002572C                            loc_19F48:
0002572C 4A28 0035                  		tst.b	$35(a0)
00025730 6600                       		bne.s	loc_19F88
00025732 6000                       		bra.s	loc_19F96
00025734                            ; ===========================================================================
00025734                            
00025734                            loc_19F50:
00025734 5E78 F636                  		addq.w	#7,($FFFFF636).w
00025738 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0002573E 66EC                       		bne.s	loc_19F48
00025740 303C 0300                  		move.w	#$300,d0
00025744 0828 0000 0022             		btst	#0,$22(a0)
0002574A 6600                       		bne.s	loc_19F6A
0002574C 4440                       		neg.w	d0
0002574E                            
0002574E                            loc_19F6A:
0002574E 31C0 D010                  		move.w	d0,($FFFFD010).w
00025752 4A28 0035                  		tst.b	$35(a0)
00025756 6600                       		bne.s	loc_19F88
00025758 5328 0021                  		subq.b	#1,$21(a0)
0002575C 117C 0064 0035             		move.b	#$64,$35(a0)
00025762 303C 00AC                  		move.w	#$AC,d0
00025766 4EB9 0000 325C             		jsr	(PlaySound_Special).l
0002576C                            
0002576C                            loc_19F88:
0002576C 5328 0035                  		subq.b	#1,$35(a0)
00025770 6700                       		beq.s	loc_19F96
00025772 117C 0003 001C             		move.b	#3,$1C(a0)
00025778 6000                       		bra.s	loc_19F9C
0002577A                            ; ===========================================================================
0002577A                            
0002577A                            loc_19F96:
0002577A 117C 0001 001C             		move.b	#1,$1C(a0)
00025780                            
00025780                            loc_19F9C:
00025780 43FA FA56                  		lea	Ani_obj82(pc),a1
00025784 4EF9 0001 2618             		jmp	AnimateSprite
0002578A                            ; ===========================================================================
0002578A                            
0002578A                            loc_19FA6:
0002578A 4A28 0021                  		tst.b	$21(a0)
0002578E 6700                       		beq.s	loc_19FBC
00025790 5428 0034                  		addq.b	#2,$34(a0)
00025794 317C FFFF 0030             		move.w	#-1,$30(a0)
0002579A 4268 0032                  		clr.w	$32(a0)
0002579E 4E75                       		rts	
000257A0                            ; ===========================================================================
000257A0                            
000257A0                            loc_19FBC:
000257A0 117C 0006 0034             		move.b	#6,$34(a0)
000257A6 317C 25C0 0008             		move.w	#$25C0,8(a0)
000257AC 317C 053C 000C             		move.w	#$53C,$C(a0)
000257B2 117C 0014 0016             		move.b	#$14,$16(a0)
000257B8 4E75                       		rts	
000257BA                            ; ===========================================================================
000257BA 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
000257CA                            ; ===========================================================================
000257CA                            
000257CA                            loc_19FE6:				; XREF: off_19E80
000257CA 70FF                       		moveq	#-1,d0
000257CC 3028 0036                  		move.w	$36(a0),d0
000257D0 2240                       		movea.l	d0,a1
000257D2 4A68 0030                  		tst.w	$30(a0)
000257D6 6A00                       		bpl.s	loc_1A000
000257D8 4268 0030                  		clr.w	$30(a0)
000257DC 137C 00FF 0029             		move.b	#-1,$29(a1)
000257E2 6100                       		bsr.s	loc_1A020
000257E4                            
000257E4                            loc_1A000:
000257E4 700F                       		moveq	#$F,d0
000257E6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000257EA 6600                       		bne.s	loc_1A00A
000257EC 6100                       		bsr.s	loc_1A020
000257EE                            
000257EE                            loc_1A00A:
000257EE 4A68 0032                  		tst.w	$32(a0)
000257F2 6700                       		beq.s	locret_1A01E
000257F4 5528 0034                  		subq.b	#2,$34(a0)
000257F8 317C FFFF 0030             		move.w	#-1,$30(a0)
000257FE 4268 0032                  		clr.w	$32(a0)
00025802                            
00025802                            locret_1A01E:
00025802 4E75                       		rts	
00025804                            ; ===========================================================================
00025804                            
00025804                            loc_1A020:
00025804 303C 00B1                  		move.w	#$B1,d0
00025808 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play electricity sound
0002580E                            ; ===========================================================================
0002580E                            
0002580E                            loc_1A02A:				; XREF: off_19E80
0002580E 117C 0030 0017             		move.b	#$30,$17(a0)
00025814 08E8 0000 0022             		bset	#0,$22(a0)
0002581A 4EB9 0001 5BD6             		jsr	SpeedToPos
00025820 117C 0006 001A             		move.b	#6,$1A(a0)
00025826 0668 0010 0012             		addi.w	#$10,$12(a0)
0002582C 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
00025832 6500                       		bcs.s	loc_1A070
00025834 317C 059C 000C             		move.w	#$59C,$C(a0)
0002583A 5428 0034                  		addq.b	#2,$34(a0)
0002583E 117C 0020 0017             		move.b	#$20,$17(a0)
00025844 317C 0100 0010             		move.w	#$100,$10(a0)
0002584A 317C FF00 0012             		move.w	#-$100,$12(a0)
00025850 5438 F742                  		addq.b	#2,($FFFFF742).w
00025854                            
00025854                            loc_1A070:
00025854 6000 0000                  		bra.w	loc_1A166
00025858                            ; ===========================================================================
00025858                            
00025858                            loc_1A074:				; XREF: off_19E80
00025858 08E8 0000 0022             		bset	#0,$22(a0)
0002585E 117C 0004 001C             		move.b	#4,$1C(a0)
00025864 4EB9 0001 5BD6             		jsr	SpeedToPos
0002586A 0668 0010 0012             		addi.w	#$10,$12(a0)
00025870 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00025876 6500                       		bcs.s	loc_1A09A
00025878 317C FFC0 0012             		move.w	#-$40,$12(a0)
0002587E                            
0002587E                            loc_1A09A:
0002587E 317C 0400 0010             		move.w	#$400,$10(a0)
00025884 3028 0008                  		move.w	8(a0),d0
00025888 9078 D008                  		sub.w	($FFFFD008).w,d0
0002588C 6A00                       		bpl.s	loc_1A0B4
0002588E 317C 0500 0010             		move.w	#$500,$10(a0)
00025894 6000 0000                  		bra.w	loc_1A0F2
00025898                            ; ===========================================================================
00025898                            
00025898                            loc_1A0B4:
00025898 0440 0070                  		subi.w	#$70,d0
0002589C 6500                       		bcs.s	loc_1A0F2
0002589E 0468 0100 0010             		subi.w	#$100,$10(a0)
000258A4 5140                       		subq.w	#8,d0
000258A6 6500                       		bcs.s	loc_1A0F2
000258A8 0468 0100 0010             		subi.w	#$100,$10(a0)
000258AE 5140                       		subq.w	#8,d0
000258B0 6500                       		bcs.s	loc_1A0F2
000258B2 0468 0080 0010             		subi.w	#$80,$10(a0)
000258B8 5140                       		subq.w	#8,d0
000258BA 6500                       		bcs.s	loc_1A0F2
000258BC 0468 0080 0010             		subi.w	#$80,$10(a0)
000258C2 5140                       		subq.w	#8,d0
000258C4 6500                       		bcs.s	loc_1A0F2
000258C6 0468 0080 0010             		subi.w	#$80,$10(a0)
000258CC 0440 0038                  		subi.w	#$38,d0
000258D0 6500                       		bcs.s	loc_1A0F2
000258D2 4268 0010                  		clr.w	$10(a0)
000258D6                            
000258D6                            loc_1A0F2:
000258D6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
000258DC 6500                       		bcs.s	loc_1A110
000258DE 317C 26A0 0008             		move.w	#$26A0,8(a0)
000258E4 317C 0240 0010             		move.w	#$240,$10(a0)
000258EA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
000258F0 5428 0034                  		addq.b	#2,$34(a0)
000258F4                            
000258F4                            loc_1A110:
000258F4 6000                       		bra.s	loc_1A15C
000258F6                            ; ===========================================================================
000258F6                            
000258F6                            loc_1A112:				; XREF: off_19E80
000258F6 4EB9 0001 5BD6             		jsr	SpeedToPos
000258FC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
00025902 6500                       		bcs.s	loc_1A124
00025904 4268 0010                  		clr.w	$10(a0)
00025908                            
00025908                            loc_1A124:
00025908 0668 0034 0012             		addi.w	#$34,$12(a0)
0002590E 4A68 0012                  		tst.w	$12(a0)
00025912 6B00                       		bmi.s	loc_1A142
00025914 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0002591A 6500                       		bcs.s	loc_1A142
0002591C 317C 0592 000C             		move.w	#$592,$C(a0)
00025922 4268 0012                  		clr.w	$12(a0)
00025926                            
00025926                            loc_1A142:
00025926 3028 0010                  		move.w	$10(a0),d0
0002592A 8068 0012                  		or.w	$12(a0),d0
0002592E 6600                       		bne.s	loc_1A15C
00025930 5428 0034                  		addq.b	#2,$34(a0)
00025934 317C FE80 0012             		move.w	#-$180,$12(a0)
0002593A 117C 0001 0021             		move.b	#1,$21(a0)
00025940                            
00025940                            loc_1A15C:
00025940 43FA F896                  		lea	Ani_obj82(pc),a1
00025944 4EB9 0001 2618             		jsr	AnimateSprite
0002594A                            
0002594A                            loc_1A166:
0002594A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
00025950 6C00                       		bge.s	loc_1A172
00025952 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00025956                            
00025956                            loc_1A172:
00025956 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0002595C 6C00                       		bge.s	locret_1A190
0002595E 323C 001B                  		move.w	#$1B,d1
00025962 343C 0070                  		move.w	#$70,d2
00025966 363C 0071                  		move.w	#$71,d3
0002596A 3828 0008                  		move.w	8(a0),d4
0002596E 4EF9 0001 8F12             		jmp	SolidObject
00025974                            ; ===========================================================================
00025974                            
00025974                            locret_1A190:
00025974 4E75                       		rts	
00025976                            ; ===========================================================================
00025976                            
00025976                            loc_1A192:				; XREF: off_19E80
00025976 217C 0002 34DE 0004        		move.l	#Map_Eggman,4(a0)
0002597E 317C 0400 0002             		move.w	#$400,2(a0)
00025984 117C 0000 001C             		move.b	#0,$1C(a0)
0002598A 08E8 0000 0022             		bset	#0,$22(a0)
00025990 4EB9 0001 5BD6             		jsr	SpeedToPos
00025996 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0002599C 6400                       		bcc.s	loc_1A1D0
0002599E 317C 0180 0010             		move.w	#$180,$10(a0)
000259A4 317C FFE8 0012             		move.w	#-$18,$12(a0)
000259AA 117C 000F 0020             		move.b	#$F,$20(a0)
000259B0 5428 0034                  		addq.b	#2,$34(a0)
000259B4                            
000259B4                            loc_1A1D0:
000259B4 6000 FF8A                  		bra.w	loc_1A15C
000259B8                            ; ===========================================================================
000259B8                            
000259B8                            loc_1A1D4:				; XREF: off_19E80
000259B8 08E8 0000 0022             		bset	#0,$22(a0)
000259BE 4EB9 0001 5BD6             		jsr	SpeedToPos
000259C4 4A68 0030                  		tst.w	$30(a0)
000259C8 6600                       		bne.s	loc_1A1FC
000259CA 4A28 0020                  		tst.b	$20(a0)
000259CE 6600                       		bne.s	loc_1A216
000259D0 317C 001E 0030             		move.w	#$1E,$30(a0)
000259D6                            ;		move.w	#$AC,d0
000259D6 4EB9 0001 E834             		jsr	(BossModeMusic).l
000259DC                            
000259DC                            loc_1A1FC:
000259DC 5368 0030                  		subq.w	#1,$30(a0)
000259E0 6600                       		bne.s	loc_1A216
000259E2 4A28 0022                  		tst.b	$22(a0)
000259E6 6A00                       		bpl.s	loc_1A210
000259E8 317C 0060 0012             		move.w	#$60,$12(a0)
000259EE 6000                       		bra.s	loc_1A216
000259F0                            ; ===========================================================================
000259F0                            
000259F0                            loc_1A210:
000259F0 117C 000F 0020             		move.b	#$F,$20(a0)
000259F6                            
000259F6                            loc_1A216:
000259F6 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
000259FC 6D00                       		blt.s	loc_1A23A
000259FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
00025A04 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00025A0A 4278 D020                  		clr.w	(MainCharacter+inertia).w
00025A0E 4A68 0012                  		tst.w	$12(a0)
00025A12 6A00                       		bpl.s	loc_1A248
00025A14 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
00025A1A                            
00025A1A                            loc_1A23A:
00025A1A 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
00025A20 6D00                       		blt.s	loc_1A248
00025A22 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
00025A28                            
00025A28                            loc_1A248:
00025A28 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
00025A2E 6500                       		bcs.s	loc_1A260
00025A30 4A28 0001                  		tst.b	1(a0)
00025A34 6B00                       		bmi.s	loc_1A260
00025A36 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
00025A3C 6000 FAEA                  		bra.w	Obj85_Delete
00025A40                            ; ===========================================================================
00025A40                            
00025A40                            loc_1A260:
00025A40 6000 FEFE                  		bra.w	loc_1A15C
00025A44                            ; ===========================================================================
00025A44                            
00025A44                            loc_1A264:				; XREF: Obj85_Index
00025A44 2268 0034                  		movea.l	$34(a0),a1
00025A48 1011                       		move.b	(a1),d0
00025A4A B010                       		cmp.b	(a0),d0
00025A4C 6600 FADA                  		bne.w	Obj85_Delete
00025A50 117C 0007 001C             		move.b	#7,$1C(a0)
00025A56 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00025A5C 6C00                       		bge.s	loc_1A280
00025A5E 6000                       		bra.s	loc_1A2A6
00025A60                            ; ===========================================================================
00025A60                            
00025A60                            loc_1A280:
00025A60 4A69 0010                  		tst.w	$10(a1)
00025A64 6700                       		beq.s	loc_1A28C
00025A66 117C 000B 001C             		move.b	#$B,$1C(a0)
00025A6C                            
00025A6C                            loc_1A28C:
00025A6C 43FA DA20                  		lea	Ani_Eggman(pc),a1
00025A70 4EB9 0001 2618             		jsr	AnimateSprite
00025A76                            
00025A76                            loc_1A296:
00025A76 2268 0034                  		movea.l	$34(a0),a1
00025A7A 3169 0008 0008             		move.w	8(a1),8(a0)
00025A80 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025A86                            
00025A86                            loc_1A2A6:
00025A86 2268 0034                  		movea.l	$34(a0),a1
00025A8A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00025A90 7003                       		moveq	#3,d0
00025A92 C028 0022                  		and.b	$22(a0),d0
00025A96 0228 00FC 0001             		andi.b	#-4,1(a0)
00025A9C 8128 0001                  		or.b	d0,1(a0)
00025AA0 4EF9 0001 5C3C             		jmp	DisplaySprite
00025AA6                            ; ===========================================================================
00025AA6                            
00025AA6                            loc_1A2C6:				; XREF: Obj85_Index
00025AA6 2268 0034                  		movea.l	$34(a0),a1
00025AAA 1011                       		move.b	(a1),d0
00025AAC B010                       		cmp.b	(a0),d0
00025AAE 6600 FA78                  		bne.w	Obj85_Delete
00025AB2 0CA9 0002 34DE 0004        		cmpi.l	#Map_Eggman,4(a1)
00025ABA 6700                       		beq.s	loc_1A2E4
00025ABC 117C 000A 001A             		move.b	#$A,$1A(a0)
00025AC2 60C2                       		bra.s	loc_1A2A6
00025AC4                            ; ===========================================================================
00025AC4                            
00025AC4                            loc_1A2E4:
00025AC4 117C 0001 001C             		move.b	#1,$1C(a0)
00025ACA 4A29 0021                  		tst.b	$21(a1)
00025ACE 6F00                       		ble.s	loc_1A312
00025AD0 117C 0006 001C             		move.b	#6,$1C(a0)
00025AD6 217C 0002 34DE 0004        		move.l	#Map_Eggman,4(a0)
00025ADE 317C 0400 0002             		move.w	#$400,2(a0)
00025AE4 43FA D9A8                  		lea	Ani_Eggman(pc),a1
00025AE8 4EB9 0001 2618             		jsr	AnimateSprite
00025AEE 6000 FF86                  		bra.w	loc_1A296
00025AF2                            ; ===========================================================================
00025AF2                            
00025AF2                            loc_1A312:
00025AF2 4A28 0001                  		tst.b	1(a0)
00025AF6 6A00 FA30                  		bpl.w	Obj85_Delete
00025AFA 6100 D540                  		bsr.w	BossDefeated
00025AFE 317C 0100 0018             		move.w	#$100,priority(a0)
00025B04 117C 0000 001C             		move.b	#0,$1C(a0)
00025B0A 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
00025B12 317C 03A0 0002             		move.w	#$3A0,2(a0)
00025B18 43FA 0000                  		lea	Ani_obj85(pc),a1
00025B1C 4EB9 0001 2618             		jsr	AnimateSprite
00025B22 6000 FF52                  		bra.w	loc_1A296
00025B26                            ; ===========================================================================
00025B26                            
00025B26                            loc_1A346:				; XREF: Obj85_Index
00025B26 08E8 0000 0022             		bset	#0,$22(a0)
00025B2C 2268 0034                  		movea.l	$34(a0),a1
00025B30 0CA9 0002 34DE 0004        		cmpi.l	#Map_Eggman,4(a1)
00025B38 6700                       		beq.s	loc_1A35E
00025B3A 6000 FF4A                  		bra.w	loc_1A2A6
00025B3E                            ; ===========================================================================
00025B3E                            
00025B3E                            loc_1A35E:
00025B3E 3169 0008 0008             		move.w	8(a1),8(a0)
00025B44 3169 000C 000C             		move.w	$C(a1),$C(a0)
00025B4A 4A28 001E                  		tst.b	$1E(a0)
00025B4E 6600                       		bne.s	loc_1A376
00025B50 117C 0014 001E             		move.b	#$14,$1E(a0)
00025B56                            
00025B56                            loc_1A376:
00025B56 5328 001E                  		subq.b	#1,$1E(a0)
00025B5A 6E00                       		bgt.s	loc_1A38A
00025B5C 5228 001A                  		addq.b	#1,$1A(a0)
00025B60 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00025B66 6E00 F9C0                  		bgt.w	Obj85_Delete
00025B6A                            
00025B6A                            loc_1A38A:
00025B6A 6000 FF0A                  		bra.w	loc_1A296
00025B6E                            ; ===========================================================================
00025B6E                            
00025B6E                            loc_1A38E:				; XREF: Obj85_Index
00025B6E 117C 000B 001A             		move.b	#$B,$1A(a0)
00025B74 3038 D008                  		move.w	($FFFFD008).w,d0
00025B78 9068 0008                  		sub.w	8(a0),d0
00025B7C 6500                       		bcs.s	loc_1A3A6
00025B7E 4A28 0001                  		tst.b	1(a0)
00025B82 6A00 F9A4                  		bpl.w	Obj85_Delete
00025B86                            
00025B86                            loc_1A3A6:
00025B86 4EF9 0001 5C3C             		jmp	DisplaySprite
00025B8C                            ; ===========================================================================
00025B8C                            
00025B8C                            loc_1A3AC:				; XREF: Obj85_Index
00025B8C 117C 0000 001A             		move.b	#0,$1A(a0)
00025B92 08E8 0000 0022             		bset	#0,$22(a0)
00025B98 2268 0034                  		movea.l	$34(a0),a1
00025B9C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00025BA2 6600                       		bne.s	loc_1A3D0
00025BA4 0CA9 0002 34DE 0004        		cmpi.l	#Map_Eggman,4(a1)
00025BAC 6700 F97A                  		beq.w	Obj85_Delete
00025BB0                            
00025BB0                            loc_1A3D0:
00025BB0 6000 FED4                  		bra.w	loc_1A2A6
00025BB4                            ; ===========================================================================
00025BB4                            Ani_obj85:
00025BB4                            	include "_anim\obj85.asm"
00025BB4                            ; ---------------------------------------------------------------------------
00025BB4                            ; Animation script - Eggman (FZ)
00025BB4                            ; ---------------------------------------------------------------------------
00025BB4 0000                       		dc.w byte_1A3D6-Ani_obj85
00025BB6 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
00025BBA                            		even
00025BBA                            		even
00025BBA                            
00025BBA                            Map_Eggman2:
00025BBA                            	include "_maps\Eggman2.asm"
00025BBA                            ; ---------------------------------------------------------------------------
00025BBA                            ; Sprite mappings - Eggman (FZ)
00025BBA                            ; ---------------------------------------------------------------------------
00025BBA 0000                       		dc.w byte_1A3DE-Map_Eggman2
00025BBC 0000                       		dc.w byte_1A3FD-Map_Eggman2
00025BBE 06                         byte_1A3DE:	dc.b 6
00025BBF E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
00025BC4 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
00025BC9 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
00025BCE FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
00025BD3 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
00025BD8 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00025BDD 06                         byte_1A3FD:	dc.b 6
00025BDE E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
00025BE3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
00025BE8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
00025BED FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
00025BF2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
00025BF7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
00025BFC                            		even
00025BFC                            		even
00025BFC                            
00025BFC                            Map_FZBoss:
00025BFC                            	include "_maps\FZ boss.asm"
00025BFC                            ; ---------------------------------------------------------------------------
00025BFC                            ; Sprite mappings - boss (FZ)
00025BFC                            ; ---------------------------------------------------------------------------
00025BFC 0000                       		dc.w byte_1A422-Map_FZBoss
00025BFE 0000                       		dc.w byte_1A42D-Map_FZBoss
00025C00 0000                       		dc.w byte_1A43D-Map_FZBoss
00025C02 02                         byte_1A422:	dc.b 2
00025C03 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
00025C08 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
00025C0D 03                         byte_1A42D:	dc.b 3
00025C0E 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
00025C13 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
00025C18 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
00025C1D 02                         byte_1A43D:	dc.b 2
00025C1E 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
00025C23 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
00025C28                            		even
00025C28                            		even
00025C28                            
00025C28                            ; ===========================================================================
00025C28                            
00025C28                            Obj84_Delete:
00025C28 4EF9 0001 5BF0             		jmp	DeleteObject
00025C2E                            ; ===========================================================================
00025C2E                            ; ---------------------------------------------------------------------------
00025C2E                            ; Object 84 - cylinder Eggman	hides in (FZ)
00025C2E                            ; ---------------------------------------------------------------------------
00025C2E                            
00025C2E                            Obj84:					; XREF: Obj_Index
00025C2E 7000                       		moveq	#0,d0
00025C30 1028 0024                  		move.b	$24(a0),d0
00025C34 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
00025C38 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
00025C3C                            ; ===========================================================================
00025C3C 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
00025C3E 0000                       		dc.w loc_1A4CE-Obj84_Index
00025C40 0000                       		dc.w loc_1A57E-Obj84_Index
00025C42                            
00025C42 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
00025C46 2550 0620                  		dc.w $2550, $620
00025C4A 2490 04C0                  		dc.w $2490, $4C0
00025C4E 2510 04C0                  		dc.w $2510, $4C0
00025C52                            ; ===========================================================================
00025C52                            
00025C52                            Obj84_Main:				; XREF: Obj84_Index
00025C52 43FA FFEE                  		lea	Obj84_PosData(pc),a1
00025C56 7000                       		moveq	#0,d0
00025C58 1028 0028                  		move.b	$28(a0),d0
00025C5C D040                       		add.w	d0,d0
00025C5E D2C0                       		adda.w	d0,a1
00025C60 117C 0004 0001             		move.b	#4,1(a0)
00025C66 08E8 0007 0001             		bset	#7,1(a0)
00025C6C 08E8 0004 0001             		bset	#4,1(a0)
00025C72 317C 0300 0002             		move.w	#$300,2(a0)
00025C78 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
00025C80 3159 0008                  		move.w	(a1)+,8(a0)
00025C84 3151 000C                  		move.w	(a1),$C(a0)
00025C88 3159 0038                  		move.w	(a1)+,$38(a0)
00025C8C 117C 0020 0016             		move.b	#$20,$16(a0)
00025C92 117C 0060 0017             		move.b	#$60,$17(a0)
00025C98 117C 0020 0023             		move.b	#$20,width_pixels(a0)
00025C9E 117C 0060 0016             		move.b	#$60,$16(a0)
00025CA4 317C 0180 0018             		move.w	#$180,priority(a0)
00025CAA 5428 0024                  		addq.b	#2,$24(a0)
00025CAE                            
00025CAE                            loc_1A4CE:				; XREF: Obj84_Index
00025CAE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00025CB4 6F00                       		ble.s	loc_1A4DC
00025CB6 08E8 0001 0001             		bset	#1,1(a0)
00025CBC                            
00025CBC                            loc_1A4DC:
00025CBC 42A8 003C                  		clr.l	$3C(a0)
00025CC0 4A28 0029                  		tst.b	$29(a0)
00025CC4 6700                       		beq.s	loc_1A4EA
00025CC6 5428 0024                  		addq.b	#2,$24(a0)
00025CCA                            
00025CCA                            loc_1A4EA:
00025CCA 2028 003C                  		move.l	$3C(a0),d0
00025CCE 2228 0038                  		move.l	$38(a0),d1
00025CD2 D280                       		add.l	d0,d1
00025CD4 4841                       		swap	d1
00025CD6 3141 000C                  		move.w	d1,$C(a0)
00025CDA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
00025CE0 6600                       		bne.s	loc_1A524
00025CE2 4A68 0030                  		tst.w	$30(a0)
00025CE6 6A00                       		bpl.s	loc_1A524
00025CE8 70F6                       		moveq	#-$A,d0
00025CEA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00025CF0 6F00                       		ble.s	loc_1A514
00025CF2 700E                       		moveq	#$E,d0
00025CF4                            
00025CF4                            loc_1A514:
00025CF4 D240                       		add.w	d0,d1
00025CF6 2268 0034                  		movea.l	$34(a0),a1
00025CFA 3341 000C                  		move.w	d1,$C(a1)
00025CFE 3368 0008 0008             		move.w	8(a0),8(a1)
00025D04                            
00025D04                            loc_1A524:
00025D04 323C 002B                  		move.w	#$2B,d1
00025D08 343C 0060                  		move.w	#$60,d2
00025D0C 363C 0061                  		move.w	#$61,d3
00025D10 3828 0008                  		move.w	8(a0),d4
00025D14 4EB9 0001 8F12             		jsr	SolidObject
00025D1A 7000                       		moveq	#0,d0
00025D1C 3228 003C                  		move.w	$3C(a0),d1
00025D20 6A00                       		bpl.s	loc_1A550
00025D22 4441                       		neg.w	d1
00025D24 5141                       		subq.w	#8,d1
00025D26 6500                       		bcs.s	loc_1A55C
00025D28 5200                       		addq.b	#1,d0
00025D2A E841                       		asr.w	#4,d1
00025D2C D041                       		add.w	d1,d0
00025D2E 6000                       		bra.s	loc_1A55C
00025D30                            ; ===========================================================================
00025D30                            
00025D30                            loc_1A550:
00025D30 0441 0027                  		subi.w	#$27,d1
00025D34 6500                       		bcs.s	loc_1A55C
00025D36 5200                       		addq.b	#1,d0
00025D38 E841                       		asr.w	#4,d1
00025D3A D041                       		add.w	d1,d0
00025D3C                            
00025D3C                            loc_1A55C:
00025D3C 1140 001A                  		move.b	d0,$1A(a0)
00025D40 3038 D008                  		move.w	($FFFFD008).w,d0
00025D44 9068 0008                  		sub.w	8(a0),d0
00025D48 6B00                       		bmi.s	loc_1A578
00025D4A 0440 0140                  		subi.w	#$140,d0
00025D4E 6B00                       		bmi.s	loc_1A578
00025D50 4A28 0001                  		tst.b	1(a0)
00025D54 6A00 FED2                  		bpl.w	Obj84_Delete
00025D58                            
00025D58                            loc_1A578:
00025D58 4EF9 0001 5C3C             		jmp	DisplaySprite
00025D5E                            ; ===========================================================================
00025D5E                            
00025D5E                            loc_1A57E:				; XREF: Obj84_Index
00025D5E 7000                       		moveq	#0,d0
00025D60 1028 0028                  		move.b	$28(a0),d0
00025D64 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
00025D68 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
00025D6C 6000 FF5C                  		bra.w	loc_1A4EA
00025D70                            ; ===========================================================================
00025D70 0000                       off_1A590:	dc.w loc_1A598-off_1A590
00025D72 0000                       		dc.w loc_1A598-off_1A590
00025D74 0000                       		dc.w loc_1A604-off_1A590
00025D76 0000                       		dc.w loc_1A604-off_1A590
00025D78                            ; ===========================================================================
00025D78                            
00025D78                            loc_1A598:				; XREF: off_1A590
00025D78 4A28 0029                  		tst.b	$29(a0)
00025D7C 6600                       		bne.s	loc_1A5D4
00025D7E 2268 0034                  		movea.l	$34(a0),a1
00025D82 4A29 0021                  		tst.b	$21(a1)
00025D86 6600                       		bne.s	loc_1A5B4
00025D88 6100 D2B2                  		bsr.w	BossDefeated
00025D8C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
00025D94                            
00025D94                            loc_1A5B4:
00025D94 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
00025D9C 6400                       		bcc.s	locret_1A602
00025D9E 42A8 003C                  		clr.l	$3C(a0)
00025DA2 2268 0034                  		movea.l	$34(a0),a1
00025DA6 5369 0032                  		subq.w	#1,$32(a1)
00025DAA 4269 0030                  		clr.w	$30(a1)
00025DAE 5528 0024                  		subq.b	#2,$24(a0)
00025DB2 4E75                       		rts	
00025DB4                            ; ===========================================================================
00025DB4                            
00025DB4                            loc_1A5D4:
00025DB4 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
00025DBA 6C00                       		bge.s	loc_1A5E4
00025DBC 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
00025DC4                            
00025DC4                            loc_1A5E4:
00025DC4 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
00025DCC 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
00025DD2 6E00                       		bgt.s	locret_1A602
00025DD4 4268 003E                  		clr.w	$3E(a0)
00025DD8 317C FF60 003C             		move.w	#-$A0,$3C(a0)
00025DDE 4228 0029                  		clr.b	$29(a0)
00025DE2                            
00025DE2                            locret_1A602:
00025DE2 4E75                       		rts	
00025DE4                            ; ===========================================================================
00025DE4                            
00025DE4                            loc_1A604:				; XREF: off_1A590
00025DE4 08E8 0001 0001             		bset	#1,1(a0)
00025DEA 4A28 0029                  		tst.b	$29(a0)
00025DEE 6600                       		bne.s	loc_1A646
00025DF0 2268 0034                  		movea.l	$34(a0),a1
00025DF4 4A29 0021                  		tst.b	$21(a1)
00025DF8 6600                       		bne.s	loc_1A626
00025DFA 6100 D240                  		bsr.w	BossDefeated
00025DFE 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
00025E06                            
00025E06                            loc_1A626:
00025E06 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
00025E0E 6400                       		bcc.s	locret_1A674
00025E10 42A8 003C                  		clr.l	$3C(a0)
00025E14 2268 0034                  		movea.l	$34(a0),a1
00025E18 5369 0032                  		subq.w	#1,$32(a1)
00025E1C 4269 0030                  		clr.w	$30(a1)
00025E20 5528 0024                  		subq.b	#2,$24(a0)
00025E24 4E75                       		rts	
00025E26                            ; ===========================================================================
00025E26                            
00025E26                            loc_1A646:
00025E26 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
00025E2C 6D00                       		blt.s	loc_1A656
00025E2E 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
00025E36                            
00025E36                            loc_1A656:
00025E36 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
00025E3E 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
00025E44 6D00                       		blt.s	locret_1A674
00025E46 4268 003E                  		clr.w	$3E(a0)
00025E4A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
00025E50 4228 0029                  		clr.b	$29(a0)
00025E54                            
00025E54                            locret_1A674:
00025E54 4E75                       		rts	
00025E56                            ; ===========================================================================
00025E56                            ; ---------------------------------------------------------------------------
00025E56                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00025E56                            ; ---------------------------------------------------------------------------
00025E56                            Map_obj84:
00025E56                            	include "_maps\obj84.asm"
00025E56                            ; ---------------------------------------------------------------------------
00025E56                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00025E56                            ; ---------------------------------------------------------------------------
00025E56 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
00025E5A 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
00025E5E 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
00025E62 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00025E66 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00025E6A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
00025E6E 06                         byte_1A68E:	dc.b 6
00025E6F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025E74 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025E79 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025E7E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025E83 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025E88 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025E8D 08                         byte_1A6AD:	dc.b 8
00025E8E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025E93 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025E98 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025E9D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025EA2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025EA7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025EAC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00025EB1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00025EB6 0A                         byte_1A6D6:	dc.b $A
00025EB7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025EBC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025EC1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025EC6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025ECB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025ED0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025ED5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00025EDA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00025EDF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00025EE4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00025EE9 0C                         byte_1A709:	dc.b $C
00025EEA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025EEF A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025EF4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025EF9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025EFE B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025F03 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025F08 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00025F0D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00025F12 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00025F17 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00025F1C 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00025F21 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00025F26 0D                         byte_1A746:	dc.b $D
00025F27 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025F2C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025F31 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025F36 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025F3B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025F40 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025F45 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00025F4A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00025F4F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00025F54 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00025F59 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00025F5E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00025F63 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
00025F68 0E                         byte_1A788:	dc.b $E
00025F69 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00025F6E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00025F73 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00025F78 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00025F7D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00025F82 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00025F87 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00025F8C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00025F91 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00025F96 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00025F9B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00025FA0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00025FA5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
00025FAA 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
00025FAF 02                         byte_1A7CF:	dc.b 2
00025FB0 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
00025FB5 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
00025FBA                            		even
00025FBA                            		even
00025FBA                            
00025FBA                            ; ===========================================================================
00025FBA                            ; ---------------------------------------------------------------------------
00025FBA                            ; Object 86 - energy balls (FZ)
00025FBA                            ; ---------------------------------------------------------------------------
00025FBA                            
00025FBA                            Obj86:					; XREF: Obj_Index
00025FBA 7000                       		moveq	#0,d0
00025FBC 1028 0024                  		move.b	$24(a0),d0
00025FC0 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
00025FC4 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
00025FC8                            ; ===========================================================================
00025FC8 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
00025FCA 0000                       		dc.w Obj86_Generator-Obj86_Index
00025FCC 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
00025FCE 0000                       		dc.w loc_1A962-Obj86_Index
00025FD0 0000                       		dc.w loc_1A982-Obj86_Index
00025FD2                            ; ===========================================================================
00025FD2                            
00025FD2                            Obj86_Main:				; XREF: Obj86_Index
00025FD2 317C 2588 0008             		move.w	#$2588,8(a0)
00025FD8 317C 053C 000C             		move.w	#$53C,$C(a0)
00025FDE 317C 0300 0002             		move.w	#$300,2(a0)
00025FE4 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
00025FEC 117C 0000 001C             		move.b	#0,$1C(a0)
00025FF2 317C 0180 0018             		move.w	#$180,priority(a0)
00025FF8 117C 0008 0017             		move.b	#8,$17(a0)
00025FFE 117C 0008 0016             		move.b	#8,$16(a0)
00026004 117C 0004 0001             		move.b	#4,1(a0)
0002600A 08E8 0007 0001             		bset	#7,1(a0)
00026010 5428 0024                  		addq.b	#2,$24(a0)
00026014                            
00026014                            Obj86_Generator:			; XREF: Obj86_Index
00026014 2268 0034                  		movea.l	$34(a0),a1
00026018 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0002601E 6600                       		bne.s	loc_1A850
00026020 10BC 003F                  		move.b	#$3F,(a0)
00026024 117C 0000 0024             		move.b	#0,$24(a0)
0002602A 4EF9 0001 5C3C             		jmp	DisplaySprite
00026030                            ; ===========================================================================
00026030                            
00026030                            loc_1A850:
00026030 117C 0000 001C             		move.b	#0,$1C(a0)
00026036 4A28 0029                  		tst.b	$29(a0)
0002603A 6700                       		beq.s	loc_1A86C
0002603C 5428 0024                  		addq.b	#2,$24(a0)
00026040 117C 0001 001C             		move.b	#1,$1C(a0)
00026046 117C 003E 0028             		move.b	#$3E,$28(a0)
0002604C                            
0002604C                            loc_1A86C:
0002604C 323C 0013                  		move.w	#$13,d1
00026050 343C 0008                  		move.w	#8,d2
00026054 363C 0011                  		move.w	#$11,d3
00026058 3828 0008                  		move.w	8(a0),d4
0002605C 4EB9 0001 8F12             		jsr	SolidObject
00026062 3038 D008                  		move.w	($FFFFD008).w,d0
00026066 9068 0008                  		sub.w	8(a0),d0
0002606A 6B00                       		bmi.s	loc_1A89A
0002606C 0440 0140                  		subi.w	#$140,d0
00026070 6B00                       		bmi.s	loc_1A89A
00026072 4A28 0001                  		tst.b	1(a0)
00026076 6A00 FBB0                  		bpl.w	Obj84_Delete
0002607A                            
0002607A                            loc_1A89A:
0002607A 43FA 0000                  		lea	Ani_obj86(pc),a1
0002607E 4EB9 0001 2618             		jsr	AnimateSprite
00026084 4EF9 0001 5C3C             		jmp	DisplaySprite
0002608A                            ; ===========================================================================
0002608A                            
0002608A                            Obj86_MakeBalls:			; XREF: Obj86_Index
0002608A 4A28 0029                  		tst.b	$29(a0)
0002608E 6700 0000                  		beq.w	loc_1A954
00026092 4228 0029                  		clr.b	$29(a0)
00026096 D068 0030                  		add.w	$30(a0),d0
0002609A 0240 001E                  		andi.w	#$1E,d0
0002609E D4C0                       		adda.w	d0,a2
000260A0 5868 0030                  		addq.w	#4,$30(a0)
000260A4 4268 0032                  		clr.w	$32(a0)
000260A8 7403                       		moveq	#3,d2
000260AA                            
000260AA                            Obj86_Loop:
000260AA 4EB9 0001 671E             		jsr	SingleObjLoad2
000260B0 6600 0000                  		bne.w	loc_1A954
000260B4 12BC 0086                  		move.b	#$86,(a1)
000260B8 3368 0008 0008             		move.w	8(a0),8(a1)
000260BE 337C 053C 000C             		move.w	#$53C,$C(a1)
000260C4 137C 0008 0024             		move.b	#8,$24(a1)
000260CA 337C 2300 0002             		move.w	#$2300,2(a1)
000260D0 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
000260D8 137C 000C 0016             		move.b	#$C,$16(a1)
000260DE 137C 000C 0017             		move.b	#$C,$17(a1)
000260E4 137C 0000 0020             		move.b	#0,$20(a1)
000260EA 337C 0180 0018             		move.w	#$180,priority(a1)
000260F0 337C 003E 0028             		move.w	#$3E,$28(a1)
000260F6 137C 0004 0001             		move.b	#4,1(a1)
000260FC 08E9 0007 0001             		bset	#7,1(a1)
00026102 2348 0034                  		move.l	a0,$34(a1)
00026106 4EB9 0000 8D7E             		jsr	(RandomNumber).l
0002610C 3228 0032                  		move.w	$32(a0),d1
00026110 C3FC FFB1                  		muls.w	#-$4F,d1
00026114 0641 2578                  		addi.w	#$2578,d1
00026118 0240 001F                  		andi.w	#$1F,d0
0002611C 0440 0010                  		subi.w	#$10,d0
00026120 D041                       		add.w	d1,d0
00026122 3340 0030                  		move.w	d0,$30(a1)
00026126 5268 0032                  		addq.w	#1,$32(a0)
0002612A 3168 0032 0038             		move.w	$32(a0),$38(a0)
00026130 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
00026134                            
00026134                            loc_1A954:
00026134 4A68 0032                  		tst.w	$32(a0)
00026138 6600                       		bne.s	loc_1A95E
0002613A 5428 0024                  		addq.b	#2,$24(a0)
0002613E                            
0002613E                            loc_1A95E:
0002613E 6000 FF0C                  		bra.w	loc_1A86C
00026142                            ; ===========================================================================
00026142                            
00026142                            loc_1A962:				; XREF: Obj86_Index
00026142 117C 0002 001C             		move.b	#2,$1C(a0)
00026148 4A68 0038                  		tst.w	$38(a0)
0002614C 6600                       		bne.s	loc_1A97E
0002614E 117C 0002 0024             		move.b	#2,$24(a0)
00026154 2268 0034                  		movea.l	$34(a0),a1
00026158 337C FFFF 0032             		move.w	#-1,$32(a1)
0002615E                            
0002615E                            loc_1A97E:
0002615E 6000 FEEC                  		bra.w	loc_1A86C
00026162                            ; ===========================================================================
00026162                            
00026162                            loc_1A982:				; XREF: Obj86_Index
00026162 7000                       		moveq	#0,d0
00026164 1028 0025                  		move.b	$25(a0),d0
00026168 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0002616C 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
00026170 43FA 0000                  		lea	Ani_obj86a(pc),a1
00026174 4EB9 0001 2618             		jsr	AnimateSprite
0002617A 4EF9 0001 5C3C             		jmp	DisplaySprite
00026180                            ; ===========================================================================
00026180 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
00026182 0000                       		dc.w loc_1A9C0-Obj86_Index2
00026184 0000                       		dc.w loc_1AA1E-Obj86_Index2
00026186                            ; ===========================================================================
00026186                            
00026186                            loc_1A9A6:				; XREF: Obj86_Index2
00026186 3028 0030                  		move.w	$30(a0),d0
0002618A 9068 0008                  		sub.w	8(a0),d0
0002618E E940                       		asl.w	#4,d0
00026190 3140 0010                  		move.w	d0,$10(a0)
00026194 317C 00B4 0028             		move.w	#$B4,$28(a0)
0002619A 5428 0025                  		addq.b	#2,$25(a0)
0002619E 4E75                       		rts	
000261A0                            ; ===========================================================================
000261A0                            
000261A0                            loc_1A9C0:				; XREF: Obj86_Index2
000261A0 4A68 0010                  		tst.w	$10(a0)
000261A4 6700                       		beq.s	loc_1A9E6
000261A6 4EB9 0001 5BD6             		jsr	SpeedToPos
000261AC 3028 0008                  		move.w	8(a0),d0
000261B0 9068 0030                  		sub.w	$30(a0),d0
000261B4 6400                       		bcc.s	loc_1A9E6
000261B6 4268 0010                  		clr.w	$10(a0)
000261BA D168 0008                  		add.w	d0,8(a0)
000261BE 2268 0034                  		movea.l	$34(a0),a1
000261C2 5369 0032                  		subq.w	#1,$32(a1)
000261C6                            
000261C6                            loc_1A9E6:
000261C6 117C 0000 001C             		move.b	#0,$1C(a0)
000261CC 5368 0028                  		subq.w	#1,$28(a0)
000261D0 6600                       		bne.s	locret_1AA1C
000261D2 5428 0025                  		addq.b	#2,$25(a0)
000261D6 117C 0001 001C             		move.b	#1,$1C(a0)
000261DC 117C 009A 0020             		move.b	#$9A,$20(a0)
000261E2 317C 00B4 0028             		move.w	#$B4,$28(a0)
000261E8 7000                       		moveq	#0,d0
000261EA 3038 D008                  		move.w	($FFFFD008).w,d0
000261EE 9068 0008                  		sub.w	8(a0),d0
000261F2 3140 0010                  		move.w	d0,$10(a0)
000261F6 317C 0140 0012             		move.w	#$140,$12(a0)
000261FC                            
000261FC                            locret_1AA1C:
000261FC 4E75                       		rts	
000261FE                            ; ===========================================================================
000261FE                            
000261FE                            loc_1AA1E:				; XREF: Obj86_Index2
000261FE 4EB9 0001 5BD6             		jsr	SpeedToPos
00026204 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0002620A 6400                       		bcc.s	loc_1AA34
0002620C 5368 0028                  		subq.w	#1,$28(a0)
00026210 6700                       		beq.s	loc_1AA34
00026212 4E75                       		rts	
00026214                            ; ===========================================================================
00026214                            
00026214                            loc_1AA34:
00026214 2268 0034                  		movea.l	$34(a0),a1
00026218 5369 0038                  		subq.w	#1,$38(a1)
0002621C 6000 FA0A                  		bra.w	Obj84_Delete
00026220                            ; ===========================================================================
00026220                            Ani_obj86:
00026220                            	include "_anim\obj86.asm"
00026220                            ; ---------------------------------------------------------------------------
00026220                            ; Animation script - energy ball launcher (FZ)
00026220                            ; ---------------------------------------------------------------------------
00026220 0000                       		dc.w byte_1AA46-Ani_obj86
00026222 0000                       		dc.w byte_1AA4A-Ani_obj86
00026224 0000                       		dc.w byte_1AA50-Ani_obj86
00026226 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0002622A 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
00026230 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
00026236                            		even
00026236                            		even
00026236                            
00026236                            ; ---------------------------------------------------------------------------
00026236                            ; Sprite mappings - energy ball	launcher (FZ)
00026236                            ; ---------------------------------------------------------------------------
00026236                            Map_obj86:
00026236                            	include "_maps\obj86.asm"
00026236                            ; ---------------------------------------------------------------------------
00026236                            ; Sprite mappings - energy ball	launcher (FZ)
00026236                            ; ---------------------------------------------------------------------------
00026236 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0002623A 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0002623E 01                         byte_1AA5E:	dc.b 1
0002623F F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
00026244 01                         byte_1AA64:	dc.b 1
00026245 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0002624A 01                         byte_1AA6A:	dc.b 1
0002624B F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
00026250 01                         byte_1AA70:	dc.b 1
00026251 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
00026256                            		even
00026256                            		even
00026256                            
00026256                            Ani_obj86a:
00026256                            	include "_anim\obj86a.asm"
00026256                            ; ---------------------------------------------------------------------------
00026256                            ; Animation script - energy balls (FZ)
00026256                            ; ---------------------------------------------------------------------------
00026256 0000                       		dc.w byte_1AA7A-Ani_obj86a
00026258 0000                       		dc.w byte_1AA9C-Ani_obj86a
0002625A 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
00026269 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
00026278 0A05 FF00                  		dc.b $A, 5, $FF, 0
0002627C 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
00026286                            		even
00026286                            		even
00026286                            
00026286                            ; ---------------------------------------------------------------------------
00026286                            ; Sprite mappings - energy balls (FZ)
00026286                            ; ---------------------------------------------------------------------------
00026286                            Map_obj86a:
00026286                            	include "_maps\obj86a.asm"
00026286                            ; ---------------------------------------------------------------------------
00026286                            ; Sprite mappings - energy balls (FZ)
00026286                            ; ---------------------------------------------------------------------------
00026286 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0002628A 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0002628E 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
00026292 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
00026296 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0002629A 0000                       		dc.w byte_1AB20-Map_obj86a
0002629C 02                         byte_1AABC:	dc.b 2
0002629D F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
000262A2 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
000262A7 02                         byte_1AAC7:	dc.b 2
000262A8 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
000262AD F402 1882 04               		dc.b $F4, 2, $18, $82, 4
000262B2 02                         byte_1AAD2:	dc.b 2
000262B3 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
000262B8 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
000262BD 02                         byte_1AADD:	dc.b 2
000262BE F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
000262C3 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
000262C8 02                         byte_1AAE8:	dc.b 2
000262C9 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
000262CE 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
000262D3 02                         byte_1AAF3:	dc.b 2
000262D4 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
000262D9 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
000262DE 01                         byte_1AAFE:	dc.b 1
000262DF F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
000262E4 01                         byte_1AB04:	dc.b 1
000262E5 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
000262EA 02                         byte_1AB0A:	dc.b 2
000262EB F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
000262F0 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
000262F5 02                         byte_1AB15:	dc.b 2
000262F6 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
000262FB F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
00026300 00                         byte_1AB20:	dc.b 0
00026302 00                         		even
00026302 00                         		even
00026302                            
00026302                            ; ===========================================================================
00026302                            ; ---------------------------------------------------------------------------
00026302                            ; Object 3E - prison capsule
00026302                            ; ---------------------------------------------------------------------------
00026302                            
00026302                            Obj3E:					; XREF: Obj_Index
00026302 7000                       		moveq	#0,d0
00026304 1028 0024                  		move.b	$24(a0),d0
00026308 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0002630C 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
00026310 4EF9 0001 882E             		jmp	MarkObjGone
00026316                            ; ===========================================================================
00026316 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
00026318 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0002631A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0002631C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0002631E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00026320 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00026322 0000                       		dc.w Obj3E_Animals-Obj3E_Index
00026324 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
00026326                            
00026326 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0002632A 040C 0501                  		dc.b 4,	$C, 5, 1
0002632E 0610 0403                  		dc.b 6,	$10, 4,	3
00026332 0810 0305                  		dc.b 8,	$10, 3,	5
00026336                            ; ===========================================================================
00026336                            
00026336                            Obj3E_Main:				; XREF: Obj3E_Index
00026336 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0002633E 317C 049D 0002             		move.w	#$49D,2(a0)
00026344 117C 0004 0001             		move.b	#4,1(a0)
0002634A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00026350 7000                       		moveq	#0,d0
00026352 1028 0028                  		move.b	$28(a0),d0
00026356 E548                       		lsl.w	#2,d0
00026358 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0002635C 1159 0024                  		move.b	(a1)+,$24(a0)
00026360 1159 0023                  		move.b	(a1)+,width_pixels(a0)
00026364 1159 0018                  		move.b	(a1)+,priority(a0)
00026368 3028 0018                          move.w  priority(a0),d0
0002636C E248                               lsr.w   #1,d0
0002636E 0240 0380                          andi.w  #$380,d0
00026372 3140 0018                          move.w  d0,priority(a0)
00026376 1159 001A                  		move.b	(a1)+,$1A(a0)
0002637A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0002637E 6600                       		bne.s	Obj3E_Not02	; if not, branch
00026380 117C 0006 0020             		move.b	#6,$20(a0)
00026386 117C 0008 0021             		move.b	#8,$21(a0)
0002638C                            
0002638C                            Obj3E_Not02:
0002638C 4E75                       		rts	
0002638E                            ; ===========================================================================
0002638E                            
0002638E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0002638E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
00026394 6700                       		beq.s	Obj3E_ChkOpened
00026396 323C 002B                  		move.w	#$2B,d1
0002639A 343C 0018                  		move.w	#$18,d2
0002639E 363C 0018                  		move.w	#$18,d3
000263A2 3828 0008                  		move.w	8(a0),d4
000263A6 4EF9 0001 8F12             		jmp	SolidObject
000263AC                            ; ===========================================================================
000263AC                            
000263AC                            Obj3E_ChkOpened:
000263AC 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
000263B0 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
000263B2 4228 0025                  		clr.b	$25(a0)
000263B6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
000263BC 08F8 0001 D022             		bset	#1,($FFFFD022).w
000263C2                            
000263C2                            Obj3E_DoOpen:
000263C2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
000263C8 4E75                       		rts	
000263CA                            ; ===========================================================================
000263CA                            
000263CA                            Obj3E_Switched:				; XREF: Obj3E_Index
000263CA 323C 0017                  		move.w	#$17,d1
000263CE 343C 0008                  		move.w	#8,d2
000263D2 363C 0008                  		move.w	#8,d3
000263D6 3828 0008                  		move.w	8(a0),d4
000263DA 4EB9 0001 8F12             		jsr	SolidObject
000263E0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
000263E6 4EB9 0001 2618             		jsr	AnimateSprite
000263EC 3168 0030 000C             		move.w	$30(a0),$C(a0)
000263F2 4A28 0025                  		tst.b	$25(a0)
000263F6 6700                       		beq.s	locret_1AC60
000263F8 5068 000C                  		addq.w	#8,$C(a0)
000263FC 117C 000A 0024             		move.b	#$A,$24(a0)
00026402 317C 003C 001E             		move.w	#$3C,$1E(a0)
00026408 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0002640C 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
00026410 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00026416 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0002641C 4228 0025                  		clr.b	$25(a0)
00026420 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00026426 08F8 0001 D022             		bset	#1,($FFFFD022).w
0002642C                            
0002642C                            locret_1AC60:
0002642C 4E75                       		rts	
0002642E                            ; ===========================================================================
0002642E                            
0002642E                            Obj3E_Explosion:			; XREF: Obj3E_Index
0002642E 7007                       		moveq	#7,d0
00026430 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
00026434 6600                       		bne.s	loc_1ACA0
00026436 4EB9 0001 6708             		jsr	SingleObjLoad
0002643C 6600                       		bne.s	loc_1ACA0
0002643E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00026442 3368 0008 0008             		move.w	8(a0),8(a1)
00026448 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002644E 4EB9 0000 8D7E             		jsr	(RandomNumber).l
00026454 7200                       		moveq	#0,d1
00026456 1200                       		move.b	d0,d1
00026458 E409                       		lsr.b	#2,d1
0002645A 0441 0020                  		subi.w	#$20,d1
0002645E D369 0008                  		add.w	d1,8(a1)
00026462 E048                       		lsr.w	#8,d0
00026464 E608                       		lsr.b	#3,d0
00026466 D169 000C                  		add.w	d0,$C(a1)
0002646A                            
0002646A                            loc_1ACA0:
0002646A 5368 001E                  		subq.w	#1,$1E(a0)
0002646E 6700                       		beq.s	Obj3E_MakeAnimal
00026470 4E75                       		rts	
00026472                            ; ===========================================================================
00026472                            
00026472                            Obj3E_MakeAnimal:
00026472 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
00026478 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0002647E 117C 0006 001A             		move.b	#6,$1A(a0)
00026484 317C 0096 001E             		move.w	#$96,$1E(a0)
0002648A 0668 0020 000C             		addi.w	#$20,$C(a0)
00026490 7C07                       		moveq	#7,d6
00026492 3A3C 009A                  		move.w	#$9A,d5
00026496 78E4                       		moveq	#-$1C,d4
00026498                            
00026498                            Obj3E_Loop:
00026498 4EB9 0001 6708             		jsr	SingleObjLoad
0002649E 6600                       		bne.s	locret_1ACF8
000264A0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000264A4 3368 0008 0008             		move.w	8(a0),8(a1)
000264AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000264B0 D969 0008                  		add.w	d4,8(a1)
000264B4 5E44                       		addq.w	#7,d4
000264B6 3345 0036                  		move.w	d5,$36(a1)
000264BA 5145                       		subq.w	#8,d5
000264BC 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
000264C0                            
000264C0                            locret_1ACF8:
000264C0 4E75                       		rts	
000264C2                            ; ===========================================================================
000264C2                            
000264C2                            Obj3E_Animals:				; XREF: Obj3E_Index
000264C2 7007                       		moveq	#7,d0
000264C4 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
000264C8 6600                       		bne.s	loc_1AD38
000264CA 4EB9 0001 6708             		jsr	SingleObjLoad
000264D0 6600                       		bne.s	loc_1AD38
000264D2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000264D6 3368 0008 0008             		move.w	8(a0),8(a1)
000264DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000264E2 4EB9 0000 8D7E             		jsr	(RandomNumber).l
000264E8 0240 001F                  		andi.w	#$1F,d0
000264EC 5D40                       		subq.w	#6,d0
000264EE 4A41                       		tst.w	d1
000264F0 6A00                       		bpl.s	loc_1AD2E
000264F2 4440                       		neg.w	d0
000264F4                            
000264F4                            loc_1AD2E:
000264F4 D169 0008                  		add.w	d0,8(a1)
000264F8 337C 000C 0036             		move.w	#$C,$36(a1)
000264FE                            
000264FE                            loc_1AD38:
000264FE 5368 001E                  		subq.w	#1,$1E(a0)
00026502 6600                       		bne.s	locret_1AD48
00026504 5428 0024                  		addq.b	#2,$24(a0)
00026508 317C 00B4 001E             		move.w	#180,$1E(a0)
0002650E                            
0002650E                            locret_1AD48:
0002650E 4E75                       		rts	
00026510                            ; ===========================================================================
00026510                            
00026510                            Obj3E_EndAct:				; XREF: Obj3E_Index
00026510 703E                       		moveq	#$3E,d0
00026512 7228                       		moveq	#$28,d1
00026514 7440                       		moveq	#$40,d2
00026516 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0002651A                            
0002651A                            Obj3E_FindObj28:
0002651A B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0002651C 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0002651E D2C2                       		adda.w	d2,a1		; next object RAM
00026520 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
00026524                            
00026524 4EB9 0001 7E42             		jsr	GotThroughAct
0002652A 4EF9 0001 5BF0             		jmp	DeleteObject
00026530                            ; ===========================================================================
00026530                            
00026530                            Obj3E_Obj28Found:
00026530 4E75                       		rts	
00026532                            ; ===========================================================================
00026532                            Ani_obj3E:
00026532                            	include "_anim\obj3E.asm"
00026532                            ; ---------------------------------------------------------------------------
00026532                            ; Animation script - prison capsule
00026532                            ; ---------------------------------------------------------------------------
00026532 0000                       		dc.w byte_1AD70-Ani_obj3E
00026534 0000                       		dc.w byte_1AD70-Ani_obj3E
00026536 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0002653A                            		even
0002653A                            		even
0002653A                            
0002653A                            ; ---------------------------------------------------------------------------
0002653A                            ; Sprite mappings - prison capsule
0002653A                            ; ---------------------------------------------------------------------------
0002653A                            Map_obj3E:
0002653A                            	include "_maps\obj3E.asm"
0002653A                            ; ---------------------------------------------------------------------------
0002653A                            ; Sprite mappings - prison capsule
0002653A                            ; ---------------------------------------------------------------------------
0002653A 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0002653E 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
00026542 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
00026546 0000                       		dc.w byte_1ADE2-Map_obj3E
00026548 07                         byte_1AD82:	dc.b 7
00026549 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0002654E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
00026553 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
00026558 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0002655D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
00026562 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00026567 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0002656C 01                         byte_1ADA6:	dc.b 1
0002656D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
00026572 06                         byte_1ADAC:	dc.b 6
00026573 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
00026578 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0002657D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
00026582 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
00026587 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0002658C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00026591 01                         byte_1ADCB:	dc.b 1
00026592 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
00026597 02                         byte_1ADD1:	dc.b 2
00026598 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0002659D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
000265A2 01                         byte_1ADDC:	dc.b 1
000265A3 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
000265A8 00                         byte_1ADE2:	dc.b 0
000265AA 00                         		even
000265AA 00                         		even
000265AA                            
000265AA                            ; ---------------------------------------------------------------------------
000265AA                            ; Object touch response	subroutine - collision_flags(a0) in	the object RAM
000265AA                            ; ---------------------------------------------------------------------------
000265AA                            
000265AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000265AA                            
000265AA                            
000265AA                            TouchResponse:				; XREF: Obj01
000265AA 4E71                       		nop	
000265AC 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
000265B0 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
000265B4 5142                       		subq.w	#8,d2
000265B6 7A00                       		moveq	#0,d5
000265B8 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
000265BC 5705                       		subq.b	#3,d5
000265BE 9645                       		sub.w	d5,d3
000265C0 0C28 0039 001A             		cmpi.b	#$39,mapping_frame(a0)	; is Sonic ducking?
000265C6 6600                       		bne.s	Touch_NoDuck	; if not, branch
000265C8 0643 000C                  		addi.w	#$C,d3
000265CC 7A0A                       		moveq	#$A,d5
000265CE                            
000265CE                            Touch_NoDuck:
000265CE 383C 0010                  		move.w	#$10,d4
000265D2 DA45                       		add.w	d5,d5
000265D4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
000265D8 3C3C 005F                  		move.w	#$5F,d6
000265DC                            
000265DC                            Touch_Loop:
000265DC 4A29 0001                  		tst.b	1(a1)
000265E0 6A00                       		bpl.s	Touch_NextObj
000265E2 1029 0020                  		move.b	collision_flags(a1),d0	; load touch response number
000265E6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
000265E8                            
000265E8                            Touch_NextObj:
000265E8 43E9 0040                  		lea	object_size(a1),a1	; next object RAM
000265EC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
000265F0                            
000265F0 7000                       		moveq	#0,d0
000265F2 4E75                       		rts	
000265F4                            ; ===========================================================================
000265F4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
000265F6 0C14                       		dc.b   $C, $14
000265F8 140C                       		dc.b  $14,  $C
000265FA 0410                       		dc.b	4, $10
000265FC 0C12                       		dc.b   $C, $12
000265FE 1010                       		dc.b  $10, $10
00026600 0606                       		dc.b	6,   6
00026602 180C                       		dc.b  $18,  $C
00026604 0C10                       		dc.b   $C, $10
00026606 100C                       		dc.b  $10,  $C
00026608 0808                       		dc.b	8,   8
0002660A 1410                       		dc.b  $14, $10
0002660C 1408                       		dc.b  $14,   8
0002660E 0E0E                       		dc.b   $E,  $E
00026610 1818                       		dc.b  $18, $18
00026612 2810                       		dc.b  $28, $10
00026614 1018                       		dc.b  $10, $18
00026616 0810                       		dc.b	8, $10
00026618 2070                       		dc.b  $20, $70
0002661A 4020                       		dc.b  $40, $20
0002661C 8020                       		dc.b  $80, $20
0002661E 2020                       		dc.b  $20, $20
00026620 0808                       		dc.b	8,   8
00026622 0404                       		dc.b	4,   4
00026624 2008                       		dc.b  $20,   8
00026626 0C0C                       		dc.b   $C,  $C
00026628 0804                       		dc.b	8,   4
0002662A 1804                       		dc.b  $18,   4
0002662C 2804                       		dc.b  $28,   4
0002662E 0408                       		dc.b	4,   8
00026630 0418                       		dc.b	4, $18
00026632 0428                       		dc.b	4, $28
00026634 0420                       		dc.b	4, $20
00026636 1818                       		dc.b  $18, $18
00026638 0C18                       		dc.b   $C, $18
0002663A 4808                       		dc.b  $48,   8
0002663C                            ; ===========================================================================
0002663C                            
0002663C                            Touch_Height:				; XREF: TouchResponse
0002663C 0240 003F                  		andi.w	#$3F,d0
00026640 D040                       		add.w	d0,d0
00026642 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
00026646 7200                       		moveq	#0,d1
00026648 121A                       		move.b	(a2)+,d1
0002664A 3029 0008                  		move.w	8(a1),d0
0002664E 9041                       		sub.w	d1,d0
00026650 9042                       		sub.w	d2,d0
00026652 6400                       		bcc.s	loc_1AE98
00026654 D241                       		add.w	d1,d1
00026656 D041                       		add.w	d1,d0
00026658 6500                       		bcs.s	Touch_Width
0002665A 6000 FF8C                  		bra.w	Touch_NextObj
0002665E                            ; ===========================================================================
0002665E                            
0002665E                            loc_1AE98:
0002665E B044                       		cmp.w	d4,d0
00026660 6200 FF86                  		bhi.w	Touch_NextObj
00026664                            
00026664                            Touch_Width:
00026664 7200                       		moveq	#0,d1
00026666 121A                       		move.b	(a2)+,d1
00026668 3029 000C                  		move.w	$C(a1),d0
0002666C 9041                       		sub.w	d1,d0
0002666E 9043                       		sub.w	d3,d0
00026670 6400                       		bcc.s	loc_1AEB6
00026672 D241                       		add.w	d1,d1
00026674 D240                       		add.w	d0,d1
00026676 6500                       		bcs.s	Touch_ChkValue
00026678 6000 FF6E                  		bra.w	Touch_NextObj
0002667C                            ; ===========================================================================
0002667C                            
0002667C                            loc_1AEB6:
0002667C B045                       		cmp.w	d5,d0
0002667E 6200 FF68                  		bhi.w	Touch_NextObj
00026682                            
00026682                            Touch_ChkValue:
00026682 1229 0020                  		move.b	collision_flags(a1),d1	; load touch response number
00026686 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0002668A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0002668E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
00026692 6700 0000                  		beq.w	Touch_Special	; if yes, branch
00026696 4A01                       		tst.b	d1		; is touch response $80-$BF ?
00026698 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0002669C                            
0002669C                            ; touch	response is $40-$7F
0002669C                            
0002669C 1029 0020                  		move.b	collision_flags(a1),d0
000266A0 0200 003F                  		andi.b	#$3F,d0
000266A4 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
000266A8 6700                       		beq.s	Touch_Monitor	; if yes, branch
000266AA 0C28 005A 0030             		cmpi.b	#$5A,invulnerable_time(a0)
000266B0 6400 0000                  		bcc.w	locret_1AEF2
000266B4 5429 0024                  		addq.b	#2,routine(a1)	; advance the object's routine counter
000266B8                            
000266B8                            locret_1AEF2:
000266B8 4E75                       		rts	
000266BA                            ; ===========================================================================
000266BA                            
000266BA                            Touch_Monitor:
000266BA                            ;		tst.b	($FFFFFF7F).w		; Sonic Homing Attack is chasing the monitor?
000266BA                            ;		bne.s	loc_1AF1E_bounce	; if yes, destroy the monitor
000266BA 4A68 0012                  		tst.w	y_vel(a0)		; is Sonic moving upwards?
000266BE 6A00                       		bpl.s	loc_1AF1E	; if not, branch
000266C0 3028 000C                  		move.w	$C(a0),d0
000266C4 0440 0010                  		subi.w	#$10,d0
000266C8 B069 000C                  		cmp.w	$C(a1),d0
000266CC 6500                       		bcs.s	loc_1AF1E       ; Changed to loc_1AF1E instead of locret_1AF2E
000266CE 4468 0012                  		neg.w	y_vel(a0)		; reverse Sonic's y-motion
000266D2 337C FE80 0012             		move.w	#-$180,y_vel(a1)
000266D8 4A29 0025                  		tst.b	routine_secondary(a1)
000266DC 6600                       		bne.s	locret_1AF2E
000266DE 5829 0025                  		addq.b	#4,routine_secondary(a1)	; advance the monitor's routine counter
000266E2 4E75                       		rts	
000266E4                            ; ===========================================================================
000266E4                            
000266E4                            loc_1AF1E:
000266E4 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling/jumping?
000266EA 6600                               bne.s   locret_1AF2E
000266EC                            ;        clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
000266EC 4A68 0012                          tst.w   y_vel(a0)       ; is Sonic moving upwards?
000266F0 6D00                               blt.s   loc_1AF1E_2               ; if so, branch, we want Sonic to carry on moving up
000266F2 4468 0012                          neg.w   y_vel(a0)       ; reverse Sonic's y-motion, to give him that bounce off the monitor
000266F6                            loc_1AF1E_2:
000266F6 5429 0024                          addq.b	#2,routine(a1)	; advance the monitor's routine counter
000266FA 3348 003E                          move.w  a0,parent(a1)
000266FE 4A38 FF7F                  		tst.b	($FFFFFF7F).w	; is Sonic chasing some object?
00026702 6700 0000                  		beq.w	BounceJD
00026706 0838 0007 D022             		btst	#7,(MainCharacter+status).w	; was the monitor destroyed with a jumpdash?
0002670C 6600 0000                  		bne.w	BounceJD	; if yes, branch	
00026710                            		
00026710                            		
00026710                            locret_1AF2E:
00026710 4E75                       		rts	
00026712                            ; ===========================================================================
00026712                            ; ---------------------------------------------------------------------------
00026712                            ; Subroutine to Bounce Sonic upwards in Homing Attack
00026712                            ; ---------------------------------------------------------------------------
00026712                            
00026712                            HA_Bounceup:
00026712 4EF9 0000 0000             	jmp	BounceJD
00026718                            
00026718                            ; ===========================================================================
00026718                            
00026718                            Touch_Enemy:				; XREF: Touch_ChkValue
00026718 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0002671C 6600                       		bne.s	loc_1AF40	; if yes, branch
0002671E 0C28 001F 001C             		cmpi.b	#$1F,anim(a0)	; is Sonic Spin Dashing?
00026724 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
00026728 0C28 0002 001C             		cmpi.b	#2,anim(a0)	; is Sonic rolling?
0002672E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
00026732                            
00026732                            loc_1AF40:
00026732 4A29 0021                  		tst.b	collision_property(a1)
00026736 6700                       		beq.s	Touch_KillEnemy
00026738 4468 0010                  		neg.w	x_vel(a0)
0002673C 4468 0012                  		neg.w	y_vel(a0)
00026740 E0E8 0010                  		asr	x_vel(a0)
00026744 E0E8 0012                  		asr	y_vel(a0)
00026748 137C 0000 0020             		move.b	#0,collision_flags(a1)
0002674E 5329 0021                  		subq.b	#1,collision_property(a1)
00026752 6600                       		bne.s	locret_1AF68
00026754 08E9 0007 0022             		bset	#7,status(a1)
0002675A                            
0002675A                            locret_1AF68:
0002675A 4E75                       		rts	
0002675C                            ; ===========================================================================
0002675C                            
0002675C                            Touch_KillEnemy:
0002675C 08E9 0007 0022             		bset	#7,status(a1)
00026762 7000                       		moveq	#0,d0
00026764 3038 F7D0                  		move.w	(Chain_Bonus_counter).w,d0
00026768 5478 F7D0                  		addq.w	#2,(Chain_Bonus_counter).w ; add 2 to item bonus counter
0002676C 0C40 0006                  		cmpi.w	#6,d0
00026770 6500                       		bcs.s	loc_1AF82
00026772 7006                       		moveq	#6,d0
00026774                            
00026774                            loc_1AF82:
00026774 3340 003E                  		move.w	d0,parent(a1)
00026778 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0002677C 0C78 0020 F7D0             		cmpi.w	#$20,(Chain_Bonus_counter).w ; have 16 enemies been destroyed?
00026782 6500                       		bcs.s	loc_1AF9C	; if not, branch
00026784 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
00026788 337C 000A 003E             		move.w	#$A,parent(a1)
0002678E                            
0002678E                            loc_1AF9C:
0002678E 4EB9 0000 0000             		jsr	AddPoints
00026794 4EBA FF7C                  		jsr	HA_Bounceup	; Bounce Sonic upwards if is Homing Attack
00026798                            ;		clr.b   ($FFFFFF7F).w    ; cancel the Homing Attack, clearing the number of frames Sonic can chasing the object
00026798 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0002679C 137C 0000 0024             		move.b	#0,routine(a1)
000267A2 0828 0007 0022             		btst	#7,$22(a0)	; was the enemy destroyed with a jumpdash?
000267A8 6600                       		bne.s	JSR_BounceJD	; if yes, branch
000267AA 6000                       		bra.s	loc_1AF9C_cont	; if not, skip
000267AC                            		
000267AC                            JSR_BounceJD:
000267AC 4EB9 0000 0000             		jsr	BounceJD	; jump to BounceJD
000267B2                            		
000267B2                            loc_1AF9C_cont:
000267B2 4A68 0012                  		tst.w	y_vel(a0)
000267B6 6B00                       		bmi.s	loc_1AFC2
000267B8 3028 000C                  		move.w	$C(a0),d0
000267BC B069 000C                  		cmp.w	$C(a1),d0
000267C0 6400                       		bcc.s	loc_1AFCA
000267C2 4468 0012                  		neg.w	y_vel(a0)
000267C6 4E75                       		rts	
000267C8                            ; ===========================================================================
000267C8                            
000267C8                            loc_1AFC2:
000267C8 0668 0100 0012             		addi.w	#$100,y_vel(a0)
000267CE 4E75                       		rts	
000267D0                            ; ===========================================================================
000267D0                            
000267D0                            loc_1AFCA:
000267D0 0468 0100 0012             		subi.w	#$100,y_vel(a0)
000267D6 4E75                       		rts	
000267D8                            ; ===========================================================================
000267D8 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
000267E0                            ; ===========================================================================
000267E0                            
000267E0                            
000267E0                            
000267E0                            ; -------------------------------------------------------------------------
000267E0                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
000267E0                            ; Jumpdash again when he has performed a Jumpdash
000267E0                            ; -------------------------------------------------------------------------
000267E0                            
000267E0                            BounceJD:
000267E0 08B8 0007 D022             		bclr	#7,(MainCharacter+status).w	; clear jumpdash flag
000267E6 4A38 FF7F                  		tst.b	($FFFFFF7F).w		; is Sonic using his Homing Attack?
000267EA 6700                       		beq.s	BounceJD_End	; if not, branch
000267EC 4238 FF7F                  		clr.b	($FFFFFF7F).w	; if yes, clear HA flag (allow Sonic to HA again)
000267F0 4268 0010                  		clr.w	$10(a0)		; clear X-velocity (stop sonic)
000267F4 317C FA10 0012             		move.w	#-$5F0,$12(a0)	; move sonic upwards
000267FA 0828 0006 0022             		btst	#6,$22(a0)	; is sonic underwater?
00026800 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00026802 317C FCE0 0012             		move.w	#-$320,$12(a0)
00026808                            		
00026808                            BounceJD_Shoes:
00026808 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does sonic has speed shoes?
0002680C 6700                       		beq.s	BounceJD_End	; if not, branch
0002680E 317C F9E0 0012             		move.w	#-$620,$12(a0)	; use -$620 for Y-velocity (move sonic upwards)
00026814                            		
00026814                            BounceJD_End:
00026814 4E75                       		rts			; return
00026816                            ; End of function BounceJD
00026816                            
00026816                            loc_1AFDA:				; XREF: Touch_CatKiller
00026816 08E9 0007 0022             		bset	#7,status(a1)
0002681C                            
0002681C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0002681C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00026822 6700                       		beq.s	loc_1AFE6
00026824 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
00026828 6700                       		beq.s	Touch_Hurt	; if not, branch
0002682A                            
0002682A                            loc_1AFE6:				; XREF: Touch_Hurt
0002682A 70FF                       		moveq	#-1,d0
0002682C 4E75                       		rts	
0002682E                            ; ===========================================================================
0002682E                            
0002682E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0002682E 4E71                       		nop	
00026830 4A28 0030                  		tst.b	$30(a0)
00026834 66F4                       		bne.s	loc_1AFE6
00026836 2449                       		movea.l	a1,a2
00026838                            
00026838                            ; End of function TouchResponse
00026838                            ; continue straight to HurtSonic
00026838                            
00026838                            ; ---------------------------------------------------------------------------
00026838                            ; Hurting Sonic	subroutine
00026838                            ; ---------------------------------------------------------------------------
00026838                            
00026838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026838                            
00026838                            
00026838                            HurtSonic:
00026838 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0002683C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0002683E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
00026842 6700 0000                  		beq.w	KillCharacter	; if not, branch
00026846 4EB9 0001 6708             		jsr	SingleObjLoad
0002684C 6600                       		bne.s	Hurt_Shield
0002684E 0C28 0006 003B             		cmpi.b	#6,$3B(a0) ; has Sonic been hurt 6 times already?
00026854 6700                       		beq.s	@LoadRings ; if yes, branch
00026856 5228 003B                  		addq.b	#1,$3B(a0) ; increase the hit counter
0002685A                            @LoadRings:
0002685A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0002685E 3368 0008 0008             		move.w	8(a0),8(a1)
00026864 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002686A                            
0002686A                            Hurt_Shield:
0002686A 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
00026870 117C 0004 0024             		move.b	#4,routine(a0)
00026876 4EB9 0001 D92C             		jsr	Sonic_ResetOnFloor
0002687C 08E8 0001 0022             		bset	#1,status(a0)
00026882 317C FC00 0012             		move.w	#-$400,y_vel(a0)	; make Sonic bounce away from the object
00026888 317C FE00 0010             		move.w	#-$200,x_vel(a0)
0002688E 0828 0006 0022             		btst	#6,status(a0)
00026894 6700                       		beq.s	Hurt_Reverse
00026896 317C FE00 0012             		move.w	#-$200,y_vel(a0)
0002689C 317C FF00 0010             		move.w	#-$100,x_vel(a0)
000268A2                            
000268A2                            Hurt_Reverse:
000268A2 3028 0008                  		move.w	8(a0),d0
000268A6 B06A 0008                  		cmp.w	8(a2),d0
000268AA 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
000268AC 4468 0010                  		neg.w	x_vel(a0)		; if Sonic is right of the object, reverse
000268B0                            
000268B0                            Hurt_ChkSpikes:
000268B0 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
000268B6 317C 0000 0020             		move.w	#0,inertia(a0)
000268BC 117C 001A 001C             		move.b	#$1A,anim(a0)
000268C2 317C 0078 0030             		move.w	#$78,$30(a0)
000268C8 317C 0000 0020             		move.w	#0,inertia(a0)
000268CE 117C 001A 001C             		move.b	#$1A,anim(a0)
000268D4 117C 0078 0030             		move.b	#$78,$30(a0)
000268DA 303C 0035                  		move.w	#$35,d0		; load normal damage sound
000268DE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
000268E2 6600                       		bne.s	Hurt_Sound	; if not, branch
000268E4 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
000268E8 6600                       		bne.s	Hurt_Sound	; if not, branch
000268EA 303C 0037                  		move.w	#$37,d0		; load spikes damage sound
000268EE                            
000268EE                            Hurt_Sound:
000268EE 4EB9 0000 3212             		jsr	(PlaySound).l
000268F4 70FF                       		moveq	#-1,d0
000268F6 4E75                       		rts	
000268F8                            ; ===========================================================================
000268F8                            
000268F8                            KillCharacter_Superrestorespeed:
000268F8 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
000268FC 4EB9 0001 E276             		jsr	ApplySpeedSettings	; Fetch Speed settings
00026902 4E75                       		rts
00026904                            ; End of function HurtSonic
00026904                            
00026904                            ; ---------------------------------------------------------------------------
00026904                            ; Subroutine to	kill Sonic
00026904                            ; ---------------------------------------------------------------------------
00026904                            
00026904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026904                            
00026904                            
00026904                            KillCharacter:				; CODE XREF: sub_5352+38p
00026904                            					; ROM:0000CF6Ap ...
00026904 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0002690A 6700 0000                  		beq.w	Kill_NoDeath
0002690E 4A78 FE08                  		tst.w	($FFFFFE08).w
00026912 6600 0000                  		bne.w	Kill_NoDeath
00026916 11FC 0001 FFC6             		move.b	#1,(sonickilled).w   ; Mark sonic as dead
0002691C 11FC 0000 FFBE             		move.b	#0,(palcheck).w   ; Mark sonic as dead
00026922 4A38 FE19                  		tst.b	($FFFFFE19).w
00026926 6700                       		beq.s	Kill_NotSuper
00026928 4238 FE19                  		clr.b	($FFFFFE19).w
0002692C 21FC 0000 0000 D004        		move.l	#Map_Sonic,(MainCharacter+mappings).w	; Load Sonic's normal mappings.
00026934 4EB9 0001 D46C             		jsr		super_GetBgm
0002693A 11FC 0002 F65F             		move.b    #2,($FFFFF65F).w; Remove rotating palette
00026940 31FC 0028 F65C             		move.w    #$28,($FFFFF65C).w; Unknown
00026946 11FC 0000 FE19             		move.b    #0,($FFFFFE19).w
0002694C 117C 0001 001D             		move.b    #1,next_anim(a0); Change animation back to normal ?
00026952 4EB9 0002 68F8             		jsr		(KillCharacter_Superrestorespeed).l
00026958                            
00026958                            Kill_NotSuper:				; CODE XREF: sub_1F3D8+Aj
00026958 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w	; clear lives counter
0002695E 11FC 0000 FE1A             		move.b	#0,($FFFFFE1A).w
00026964 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0002696A 42B8 FE2C                  		clr.l	($FFFFFE2C).w
0002696E                            ;KillSubSRAM:
0002696E                            ;		cmpi.b #0,($FFFFFE12).w
0002696E                            ;		beq.w	KillZero
0002696E                            ;		subi.b	#$1,($200001).l
0002696E                            ;		move.b	($200001).l,($20011F).l
0002696E                            ;		subi.b	#$1,($200080).l
0002696E                            ;KillZero:
0002696E 117C 0006 0024             		move.b	#6,routine(a0)
00026974 4EB9 0001 D92C             		jsr	Sonic_ResetOnFloor
0002697A 08E8 0001 0022             		bset	#1,status(a0)
00026980 317C F900 0012             		move.w	#-$700,y_vel(a0)
00026986 317C 0000 0010             		move.w	#0,x_vel(a0)
0002698C 317C 0000 0020             		move.w	#0,inertia(a0)
00026992 3168 000C 0038             		move.w	$C(a0),$38(a0)
00026998 117C 0018 001C             		move.b	#$18,anim(a0)
0002699E 08E8 0007 0002             		bset	#7,2(a0)
000269A4 303C 0035                  		move.w	#$35,d0	; '?'
000269A8 0C12 0036                  		cmpi.b	#$36,(a2) ; '6'
000269AC 6600                       		bne.s	loc_1F444
000269AE 303C 0037                  		move.w	#$37,d0	; '|'
000269B2                            
000269B2                            loc_1F444:				; CODE XREF: sub_1F3D8+66j
000269B2 4EB9 0000 325C             		jsr	(PlaySound_Special).l
000269B8                            
000269B8                            Kill_NoDeath:				; CODE XREF: sub_1F3D8+4j
000269B8 70FF                       		moveq	#-1,d0
000269BA 4E75                       		rts
000269BC                            		
000269BC                            ; End of function KillCharacter
000269BC                            
000269BC                            
000269BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000269BC                            
000269BC                            
000269BC                            Touch_Special:				; XREF: Touch_ChkValue
000269BC 1229 0020                  		move.b	collision_flags(a1),d1
000269C0 0201 003F                  		andi.b	#$3F,d1
000269C4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
000269C8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
000269CA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
000269CE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
000269D0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
000269D4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000269D6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
000269DA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000269DC 4E75                       		rts	
000269DE                            ; ===========================================================================
000269DE                            
000269DE                            Touch_CatKiller:			; XREF: Touch_Special
000269DE 6000 FE36                  		bra.w	loc_1AFDA
000269E2                            ; ===========================================================================
000269E2                            
000269E2                            Touch_Yadrin:				; XREF: Touch_Special
000269E2 9A40                       		sub.w	d0,d5
000269E4 0C45 0008                  		cmpi.w	#8,d5
000269E8 6400                       		bcc.s	loc_1B144
000269EA 3029 0008                  		move.w	8(a1),d0
000269EE 5940                       		subq.w	#4,d0
000269F0 0829 0000 0022             		btst	#0,status(a1)
000269F6 6700                       		beq.s	loc_1B130
000269F8 0440 0010                  		subi.w	#$10,d0
000269FC                            
000269FC                            loc_1B130:
000269FC 9042                       		sub.w	d2,d0
000269FE 6400                       		bcc.s	loc_1B13C
00026A00 0640 0018                  		addi.w	#$18,d0
00026A04 6500                       		bcs.s	loc_1B140
00026A06 6000                       		bra.s	loc_1B144
00026A08                            ; ===========================================================================
00026A08                            
00026A08                            loc_1B13C:
00026A08 B044                       		cmp.w	d4,d0
00026A0A 6200                       		bhi.s	loc_1B144
00026A0C                            
00026A0C                            loc_1B140:
00026A0C 6000 FE0E                  		bra.w	Touch_ChkHurt
00026A10                            ; ===========================================================================
00026A10                            
00026A10                            loc_1B144:
00026A10 6000 FD06                  		bra.w	Touch_Enemy
00026A14                            ; ===========================================================================
00026A14                            
00026A14                            Touch_D7orE1:				; XREF: Touch_Special
00026A14 5229 0021                  		addq.b	#1,collision_property(a1)
00026A18 4E75                       		rts	
00026A1A                            ; End of function Touch_Special
00026A1A                            
00026A1A                            ; ---------------------------------------------------------------------------
00026A1A                            ; Subroutine to	show the special stage layout
00026A1A                            ; ---------------------------------------------------------------------------
00026A1A                            
00026A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026A1A                            
00026A1A                            
00026A1A                            SS_ShowLayout:				; XREF: SpecialStage
00026A1A 4EB9 0000 0000             		jsr	SS_AniWallsRings
00026A20 4EB9 0000 0000             		jsr	SS_AniItems
00026A26 3F05                       		move.w	d5,-(sp)
00026A28 43F8 8000                  		lea	($FFFF8000).w,a1
00026A2C 1038 F780                  		move.b	($FFFFF780).w,d0
00026A30                            ;		andi.b	#$FC,d0
00026A30 4EB9 0000 8DA4             		jsr	(CalcSine).l
00026A36 3800                       		move.w	d0,d4
00026A38 3A01                       		move.w	d1,d5
00026A3A C9FC 0018                  		muls.w	#$18,d4
00026A3E CBFC 0018                  		muls.w	#$18,d5
00026A42 7400                       		moveq	#0,d2
00026A44 3438 F700                  		move.w	($FFFFF700).w,d2
00026A48 84FC 0018                  		divu.w	#$18,d2
00026A4C 4842                       		swap	d2
00026A4E 4442                       		neg.w	d2
00026A50 0642 FF4C                  		addi.w	#-$B4,d2
00026A54 7600                       		moveq	#0,d3
00026A56 3638 F704                  		move.w	($FFFFF704).w,d3
00026A5A 86FC 0018                  		divu.w	#$18,d3
00026A5E 4843                       		swap	d3
00026A60 4443                       		neg.w	d3
00026A62 0643 FF4C                  		addi.w	#-$B4,d3
00026A66 3E3C 000F                  		move.w	#$F,d7
00026A6A                            
00026A6A                            loc_1B19E:
00026A6A 48A7 E000                  		movem.w	d0-d2,-(sp)
00026A6E 48A7 C000                  		movem.w	d0-d1,-(sp)
00026A72 4440                       		neg.w	d0
00026A74 C3C2                       		muls.w	d2,d1
00026A76 C1C3                       		muls.w	d3,d0
00026A78 2C00                       		move.l	d0,d6
00026A7A DC81                       		add.l	d1,d6
00026A7C 4C9F 0003                  		movem.w	(sp)+,d0-d1
00026A80 C1C2                       		muls.w	d2,d0
00026A82 C3C3                       		muls.w	d3,d1
00026A84 D280                       		add.l	d0,d1
00026A86 2406                       		move.l	d6,d2
00026A88 3C3C 000F                  		move.w	#$F,d6
00026A8C                            
00026A8C                            loc_1B1C0:
00026A8C 2002                       		move.l	d2,d0
00026A8E E080                       		asr.l	#8,d0
00026A90 32C0                       		move.w	d0,(a1)+
00026A92 2001                       		move.l	d1,d0
00026A94 E080                       		asr.l	#8,d0
00026A96 32C0                       		move.w	d0,(a1)+
00026A98 D485                       		add.l	d5,d2
00026A9A D284                       		add.l	d4,d1
00026A9C 51CE FFEE                  		dbf	d6,loc_1B1C0
00026AA0                            
00026AA0 4C9F 0007                  		movem.w	(sp)+,d0-d2
00026AA4 0643 0018                  		addi.w	#$18,d3
00026AA8 51CF FFC0                  		dbf	d7,loc_1B19E
00026AAC                            
00026AAC 3A1F                       		move.w	(sp)+,d5
00026AAE 41F9 00FF 0000             		lea	($FF0000).l,a0
00026AB4 7000                       		moveq	#0,d0
00026AB6 3038 F704                  		move.w	($FFFFF704).w,d0
00026ABA 80FC 0018                  		divu.w	#$18,d0
00026ABE C0FC 0080                  		mulu.w	#$80,d0
00026AC2 D1C0                       		adda.l	d0,a0
00026AC4 7000                       		moveq	#0,d0
00026AC6 3038 F700                  		move.w	($FFFFF700).w,d0
00026ACA 80FC 0018                  		divu.w	#$18,d0
00026ACE D0C0                       		adda.w	d0,a0
00026AD0 49F8 8000                  		lea	($FFFF8000).w,a4
00026AD4 3E3C 000F                  		move.w	#$F,d7
00026AD8                            
00026AD8                            loc_1B20C:
00026AD8 3C3C 000F                  		move.w	#$F,d6
00026ADC                            
00026ADC                            loc_1B210:
00026ADC 7000                       		moveq	#0,d0
00026ADE 1018                       		move.b	(a0)+,d0
00026AE0 6700                       		beq.s	loc_1B268
00026AE2 0C00 004E                  		cmpi.b	#$4E,d0
00026AE6 6200                       		bhi.s	loc_1B268
00026AE8 3614                       		move.w	(a4),d3
00026AEA 0643 0120                  		addi.w	#$120,d3
00026AEE 0C43 0070                  		cmpi.w	#$70,d3
00026AF2 6500                       		bcs.s	loc_1B268
00026AF4 0C43 01D0                  		cmpi.w	#$1D0,d3
00026AF8 6400                       		bcc.s	loc_1B268
00026AFA 342C 0002                  		move.w	2(a4),d2
00026AFE 0642 00F0                  		addi.w	#$F0,d2
00026B02 0C42 0070                  		cmpi.w	#$70,d2
00026B06 6500                       		bcs.s	loc_1B268
00026B08 0C42 0170                  		cmpi.w	#$170,d2
00026B0C 6400                       		bcc.s	loc_1B268
00026B0E 4BF9 00FF 4000             		lea	($FF4000).l,a5
00026B14 E748                       		lsl.w	#3,d0
00026B16 4BF5 0000                  		lea	(a5,d0.w),a5
00026B1A 225D                       		movea.l	(a5)+,a1
00026B1C 321D                       		move.w	(a5)+,d1
00026B1E D241                       		add.w	d1,d1
00026B20 D2F1 1000                  		adda.w	(a1,d1.w),a1
00026B24 365D                       		movea.w	(a5)+,a3
00026B26 7200                       		moveq	#0,d1
00026B28 1219                       		move.b	(a1)+,d1
00026B2A 5301                       		subq.b	#1,d1
00026B2C 6B00                       		bmi.s	loc_1B268
00026B2E 4EB9 0001 5E98             		jsr	sub_D762
00026B34                            
00026B34                            loc_1B268:
00026B34 584C                       		addq.w	#4,a4
00026B36 51CE FFA4                  		dbf	d6,loc_1B210
00026B3A                            
00026B3A 41E8 0070                  		lea	$70(a0),a0
00026B3E 51CF FF98                  		dbf	d7,loc_1B20C
00026B42                            
00026B42 11C5 F62C                  		move.b	d5,($FFFFF62C).w
00026B46 0C05 0050                  		cmpi.b	#$50,d5
00026B4A 6700                       		beq.s	loc_1B288
00026B4C 24BC 0000 0000             		move.l	#0,(a2)
00026B52 4E75                       		rts	
00026B54                            ; ===========================================================================
00026B54                            
00026B54                            loc_1B288:
00026B54 157C 0000 FFFB             		move.b	#0,-5(a2)
00026B5A 4E75                       		rts	
00026B5C                            ; End of function SS_ShowLayout
00026B5C                            
00026B5C                            ; ---------------------------------------------------------------------------
00026B5C                            ; Subroutine to	animate	walls and rings	in the special stage
00026B5C                            ; ---------------------------------------------------------------------------
00026B5C                            
00026B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026B5C                            
00026B5C                            
00026B5C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
00026B5C                            ;		lea	($FF400C).l,a1
00026B5C                            ;		moveq	#0,d0
00026B5C                            ;		move.b	($FFFFF780).w,d0
00026B5C                            ;		lsr.b	#2,d0
00026B5C                            ;		andi.w	#$F,d0
00026B5C                            ;		moveq	#$23,d1
00026B5C                            
00026B5C                            ;loc_1B2A4:
00026B5C                            ;		move.w	d0,(a1)
00026B5C                            ;		addq.w	#8,a1
00026B5C                            ;		dbf	d1,loc_1B2A4
00026B5C                            
00026B5C 43F9 00FF 4005             		lea	($FF4005).l,a1
00026B62 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00026B66 6A00                       		bpl.s	loc_1B2C8
00026B68 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00026B6E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00026B72 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00026B78                            
00026B78                            loc_1B2C8:
00026B78 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
00026B7E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00026B82 6A00                       		bpl.s	loc_1B2E4
00026B84 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00026B8A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00026B8E 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
00026B94                            
00026B94                            loc_1B2E4:
00026B94 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
00026B98 1340 0138                  		move.b	d0,$138(a1)
00026B9C 1340 0160                  		move.b	d0,$160(a1)
00026BA0 1340 0148                  		move.b	d0,$148(a1)
00026BA4 1340 0150                  		move.b	d0,$150(a1)
00026BA8 1340 01D8                  		move.b	d0,$1D8(a1)
00026BAC 1340 01E0                  		move.b	d0,$1E0(a1)
00026BB0 1340 01E8                  		move.b	d0,$1E8(a1)
00026BB4 1340 01F0                  		move.b	d0,$1F0(a1)
00026BB8 1340 01F8                  		move.b	d0,$1F8(a1)
00026BBC 1340 0200                  		move.b	d0,$200(a1)
00026BC0 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00026BC4 6A00                       		bpl.s	loc_1B326
00026BC6 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
00026BCC 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
00026BD0 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
00026BD6                            
00026BD6                            loc_1B326:
00026BD6 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
00026BDA 1340 0168                  		move.b	d0,$168(a1)
00026BDE 1340 0170                  		move.b	d0,$170(a1)
00026BE2 1340 0178                  		move.b	d0,$178(a1)
00026BE6 1340 0180                  		move.b	d0,$180(a1)
00026BEA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00026BEE 6A00                       		bpl.s	loc_1B350
00026BF0 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
00026BF6 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00026BFA 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00026C00                            
00026C00                            loc_1B350:
00026C00 43F9 00FF 4016             		lea	($FF4016).l,a1
00026C06 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
00026C0C 7000                       		moveq	#0,d0
00026C0E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00026C12 D040                       		add.w	d0,d0
00026C14 41F0 0000                  		lea	(a0,d0.w),a0
00026C18 3290                       		move.w	(a0),(a1)
00026C1A 3368 0002 0008             		move.w	2(a0),8(a1)
00026C20 3368 0004 0010             		move.w	4(a0),$10(a1)
00026C26 3368 0006 0018             		move.w	6(a0),priority(a1)
00026C2C 3368 0008 0020             		move.w	8(a0),$20(a1)
00026C32 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026C38 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026C3E 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026C44 D0FC 0020                  		adda.w	#$20,a0
00026C48 D2FC 0048                  		adda.w	#$48,a1
00026C4C 3290                       		move.w	(a0),(a1)
00026C4E 3368 0002 0008             		move.w	2(a0),8(a1)
00026C54 3368 0004 0010             		move.w	4(a0),$10(a1)
00026C5A 3368 0006 0018             		move.w	6(a0),priority(a1)
00026C60 3368 0008 0020             		move.w	8(a0),$20(a1)
00026C66 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026C6C 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026C72 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026C78 D0FC 0020                  		adda.w	#$20,a0
00026C7C D2FC 0048                  		adda.w	#$48,a1
00026C80 3290                       		move.w	(a0),(a1)
00026C82 3368 0002 0008             		move.w	2(a0),8(a1)
00026C88 3368 0004 0010             		move.w	4(a0),$10(a1)
00026C8E 3368 0006 0018             		move.w	6(a0),priority(a1)
00026C94 3368 0008 0020             		move.w	8(a0),$20(a1)
00026C9A 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026CA0 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026CA6 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026CAC D0FC 0020                  		adda.w	#$20,a0
00026CB0 D2FC 0048                  		adda.w	#$48,a1
00026CB4 3290                       		move.w	(a0),(a1)
00026CB6 3368 0002 0008             		move.w	2(a0),8(a1)
00026CBC 3368 0004 0010             		move.w	4(a0),$10(a1)
00026CC2 3368 0006 0018             		move.w	6(a0),priority(a1)
00026CC8 3368 0008 0020             		move.w	8(a0),$20(a1)
00026CCE 3368 000A 0028             		move.w	$A(a0),$28(a1)
00026CD4 3368 000C 0030             		move.w	$C(a0),$30(a1)
00026CDA 3368 000E 0038             		move.w	$E(a0),$38(a1)
00026CE0 D0FC 0020                  		adda.w	#$20,a0
00026CE4 D2FC 0048                  		adda.w	#$48,a1
00026CE8 4E75                       		rts	
00026CEA                            ; End of function SS_AniWallsRings
00026CEA                            
00026CEA                            SS_LoadWalls:
00026CEA 7000                       		moveq	#0,d0
00026CEC 1038 F780                  		move.b	(v_ssangle).w,d0	; get the Special Stage angle
00026CF0 E408                       		lsr.b	#2,d0			; modify so it can be used as a frame ID
00026CF2 0240 000F                  		andi.w	#$F,d0
00026CF6 B038 F784                  		cmp.b	(v_ssangleprev).w,d0	; does the modified angle match the recorded value?
00026CFA 6700                       		beq.s	@return			; if so, branch
00026CFC                            	
00026CFC 4DF9 00C0 0000             		lea	($C00000).l,a6
00026D02 43F9 0000 0000             		lea	(Art_SSWalls).l,a1	; load wall art
00026D08 3200                       		move.w	d0,d1
00026D0A E149                       		lsl.w	#8,d1
00026D0C D241                       		add.w	d1,d1
00026D0E D2C1                       		add.w	d1,a1
00026D10                            		
00026D10 23FC 6840 0000 00C0 0004   		move.l  #$68400000,($C00004).l			; VRAM address
00026D1A                            		
00026D1A 323C 000F                  		move.w	#$F,d1			; number of 8x8 tiles
00026D1E 4EB9 0000 0000             		jsr	LoadTiles
00026D24 11C0 F784                  		move.b	d0,(v_ssangleprev).w	; record the modified angle for comparison
00026D28                            		
00026D28                            	@return:
00026D28 4E75                       		rts
00026D2A                            
00026D2A                            ; ===========================================================================
00026D2A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00026D3A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
00026D4A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
00026D5A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
00026D6A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
00026D7A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
00026D8A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
00026D9A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
00026DAA                            ; ---------------------------------------------------------------------------
00026DAA                            ; Subroutine to	remove items when you collect them in the special stage
00026DAA                            ; ---------------------------------------------------------------------------
00026DAA                            
00026DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026DAA                            
00026DAA                            
00026DAA                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
00026DAA 45F9 00FF 4400             		lea	($FF4400).l,a2
00026DB0 303C 001F                  		move.w	#$1F,d0
00026DB4                            
00026DB4                            loc_1B4C4:
00026DB4 4A12                       		tst.b	(a2)
00026DB6 6700                       		beq.s	locret_1B4CE
00026DB8 504A                       		addq.w	#8,a2
00026DBA 51C8 FFF8                  		dbf	d0,loc_1B4C4
00026DBE                            
00026DBE                            locret_1B4CE:
00026DBE 4E75                       		rts	
00026DC0                            ; End of function SS_RemoveCollectedItem
00026DC0                            
00026DC0                            
00026DC0                            
00026DC0                            ; ---------------------------------------------------------------------------
00026DC0                            ; Subroutine to	animate	special	stage items when you touch them
00026DC0                            ; ---------------------------------------------------------------------------
00026DC0                            
00026DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026DC0                            
00026DC0                            
00026DC0                            SS_AniItems:				; XREF: SS_ShowLayout
00026DC0 41F9 00FF 4400             		lea	($FF4400).l,a0
00026DC6 3E3C 001F                  		move.w	#$1F,d7
00026DCA                            
00026DCA                            loc_1B4DA:
00026DCA 7000                       		moveq	#0,d0
00026DCC 1010                       		move.b	(a0),d0
00026DCE 6700                       		beq.s	loc_1B4E8
00026DD0 E548                       		lsl.w	#2,d0
00026DD2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
00026DD6 4E91                       		jsr	(a1)
00026DD8                            
00026DD8                            loc_1B4E8:
00026DD8 5048                       		addq.w	#8,a0
00026DDA                            
00026DDA                            loc_1B4EA:
00026DDA 51CF FFEE                  		dbf	d7,loc_1B4DA
00026DDE                            
00026DDE 4E75                       		rts	
00026DE0                            ; End of function SS_AniItems
00026DE0                            
00026DE0                            ; ===========================================================================
00026DE0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
00026DE4 0000 0000                  		dc.l SS_AniBumper
00026DE8 0000 0000                  		dc.l SS_Ani1Up
00026DEC 0000 0000                  		dc.l SS_AniReverse
00026DF0 0000 0000                  		dc.l SS_AniEmeraldSparks
00026DF4 0000 0000                  		dc.l SS_AniGlassBlock
00026DF8                            ; ===========================================================================
00026DF8                            
00026DF8                            SS_AniRingSparks:			; XREF: SS_AniIndex
00026DF8 5328 0002                  		subq.b	#1,2(a0)
00026DFC 6A00                       		bpl.s	locret_1B530
00026DFE 117C 0005 0002             		move.b	#5,2(a0)
00026E04 7000                       		moveq	#0,d0
00026E06 1028 0003                  		move.b	3(a0),d0
00026E0A 5228 0003                  		addq.b	#1,3(a0)
00026E0E 2268 0004                  		movea.l	4(a0),a1
00026E12 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
00026E16 1280                       		move.b	d0,(a1)
00026E18 6600                       		bne.s	locret_1B530
00026E1A 4290                       		clr.l	(a0)
00026E1C 42A8 0004                  		clr.l	4(a0)
00026E20                            
00026E20                            locret_1B530:
00026E20 4E75                       		rts	
00026E22                            ; ===========================================================================
00026E22 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
00026E28                            ; ===========================================================================
00026E28                            
00026E28                            SS_AniBumper:				; XREF: SS_AniIndex
00026E28 5328 0002                  		subq.b	#1,2(a0)
00026E2C 6A00                       		bpl.s	locret_1B566
00026E2E 117C 0007 0002             		move.b	#7,2(a0)
00026E34 7000                       		moveq	#0,d0
00026E36 1028 0003                  		move.b	3(a0),d0
00026E3A 5228 0003                  		addq.b	#1,3(a0)
00026E3E 2268 0004                  		movea.l	4(a0),a1
00026E42 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
00026E46 6600                       		bne.s	loc_1B564
00026E48 4290                       		clr.l	(a0)
00026E4A 42A8 0004                  		clr.l	4(a0)
00026E4E 12BC 0025                  		move.b	#$25,(a1)
00026E52 4E75                       		rts	
00026E54                            ; ===========================================================================
00026E54                            
00026E54                            loc_1B564:
00026E54 1280                       		move.b	d0,(a1)
00026E56                            
00026E56                            locret_1B566:
00026E56 4E75                       		rts	
00026E58                            ; ===========================================================================
00026E58 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
00026E5E                            ; ===========================================================================
00026E5E                            
00026E5E                            SS_Ani1Up:				; XREF: SS_AniIndex
00026E5E 5328 0002                  		subq.b	#1,2(a0)
00026E62 6A00                       		bpl.s	locret_1B596
00026E64 117C 0005 0002             		move.b	#5,2(a0)
00026E6A 7000                       		moveq	#0,d0
00026E6C 1028 0003                  		move.b	3(a0),d0
00026E70 5228 0003                  		addq.b	#1,3(a0)
00026E74 2268 0004                  		movea.l	4(a0),a1
00026E78 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
00026E7C 1280                       		move.b	d0,(a1)
00026E7E 6600                       		bne.s	locret_1B596
00026E80 4290                       		clr.l	(a0)
00026E82 42A8 0004                  		clr.l	4(a0)
00026E86                            
00026E86                            locret_1B596:
00026E86 4E75                       		rts	
00026E88                            ; ===========================================================================
00026E88 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
00026E8E                            ; ===========================================================================
00026E8E                            
00026E8E                            SS_AniReverse:				; XREF: SS_AniIndex
00026E8E 5328 0002                  		subq.b	#1,2(a0)
00026E92 6A00                       		bpl.s	locret_1B5CC
00026E94 117C 0007 0002             		move.b	#7,2(a0)
00026E9A 7000                       		moveq	#0,d0
00026E9C 1028 0003                  		move.b	3(a0),d0
00026EA0 5228 0003                  		addq.b	#1,3(a0)
00026EA4 2268 0004                  		movea.l	4(a0),a1
00026EA8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
00026EAC 6600                       		bne.s	loc_1B5CA
00026EAE 4290                       		clr.l	(a0)
00026EB0 42A8 0004                  		clr.l	4(a0)
00026EB4 12BC 002B                  		move.b	#$2B,(a1)
00026EB8 4E75                       		rts	
00026EBA                            ; ===========================================================================
00026EBA                            
00026EBA                            loc_1B5CA:
00026EBA 1280                       		move.b	d0,(a1)
00026EBC                            
00026EBC                            locret_1B5CC:
00026EBC 4E75                       		rts	
00026EBE                            ; ===========================================================================
00026EBE 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
00026EC4                            ; ===========================================================================
00026EC4                            
00026EC4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
00026EC4 5328 0002                  		subq.b	#1,2(a0)
00026EC8 6A00                       		bpl.s	locret_1B60C
00026ECA 117C 0005 0002             		move.b	#5,2(a0)
00026ED0 7000                       		moveq	#0,d0
00026ED2 1028 0003                  		move.b	3(a0),d0
00026ED6 5228 0003                  		addq.b	#1,3(a0)
00026EDA 2268 0004                  		movea.l	4(a0),a1
00026EDE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
00026EE2 1280                       		move.b	d0,(a1)
00026EE4 6600                       		bne.s	locret_1B60C
00026EE6 4290                       		clr.l	(a0)
00026EE8 42A8 0004                  		clr.l	4(a0)
00026EEC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
00026EF2 303C 006A                  		move.w	#$6A,d0
00026EF6 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
00026EFC                            
00026EFC                            locret_1B60C:
00026EFC 4E75                       		rts	
00026EFE                            ; ===========================================================================
00026EFE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
00026F04                            ; ===========================================================================
00026F04                            
00026F04                            SS_AniGlassBlock:			; XREF: SS_AniIndex
00026F04 5328 0002                  		subq.b	#1,2(a0)
00026F08 6A00                       		bpl.s	locret_1B640
00026F0A 117C 0001 0002             		move.b	#1,2(a0)
00026F10 7000                       		moveq	#0,d0
00026F12 1028 0003                  		move.b	3(a0),d0
00026F16 5228 0003                  		addq.b	#1,3(a0)
00026F1A 2268 0004                  		movea.l	4(a0),a1
00026F1E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
00026F22 1280                       		move.b	d0,(a1)
00026F24 6600                       		bne.s	locret_1B640
00026F26 12A8 0004                  		move.b	4(a0),(a1)
00026F2A 4290                       		clr.l	(a0)
00026F2C 42A8 0004                  		clr.l	4(a0)
00026F30                            
00026F30                            locret_1B640:
00026F30 4E75                       		rts	
00026F32                            ; ===========================================================================
00026F32 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
00026F3C                            ; ---------------------------------------------------------------------------
00026F3C                            ; Special stage	layout pointers
00026F3C                            ; ---------------------------------------------------------------------------
00026F3C                            SS_LayoutIndex:
00026F3C                            	include "_inc\Special stage layout pointers.asm"
00026F3C                            ; ---------------------------------------------------------------------------
00026F3C                            ; Special stage	layout pointers
00026F3C                            ; ---------------------------------------------------------------------------
00026F3C 0000 0000                  	dc.l SS_1
00026F40 0000 0000                  	dc.l SS_2
00026F44 0000 0000                  	dc.l SS_3
00026F48 0000 0000                  	dc.l SS_4
00026F4C 0000 0000                  	dc.l SS_5
00026F50 0000 0000                  	dc.l SS_6
00026F54 0000 0000                  	dc.l SS_7	
00026F58                            	even
00026F58                            	even
00026F58                            
00026F58                            ; ---------------------------------------------------------------------------
00026F58                            ; Special stage	start locations
00026F58                            ; ---------------------------------------------------------------------------
00026F58                            SS_StartLoc:	incbin	misc\sloc_ss.bin
00026F70                            		even
00026F70                            
00026F70                            ; ---------------------------------------------------------------------------
00026F70                            ; Subroutine to	load special stage layout
00026F70                            ; ---------------------------------------------------------------------------
00026F70                            
00026F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00026F70                            
00026F70                            
00026F70                            SS_Load:				; XREF: SpecialStage
00026F70 7000                       		moveq	#0,d0
00026F72 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
00026F76 5238 FE16                  		addq.b	#1,($FFFFFE16).w
00026F7A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
00026F80 6500                       		bcs.s	SS_ChkEmldNum
00026F82 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
00026F88                            
00026F88                            SS_ChkEmldNum:
00026F88 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
00026F8E 6700                       		beq.s	SS_LoadData	; if yes, branch
00026F90 7200                       		moveq	#0,d1
00026F92 1238 FE57                  		move.b	($FFFFFE57).w,d1
00026F96 5301                       		subq.b	#1,d1
00026F98 6500                       		bcs.s	SS_LoadData
00026F9A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
00026F9E                            
00026F9E                            SS_ChkEmldLoop:	
00026F9E B033 1000                  		cmp.b	(a3,d1.w),d0
00026FA2 6600                       		bne.s	SS_ChkEmldRepeat
00026FA4 60CA                       		bra.s	SS_Load
00026FA6                            ; ===========================================================================
00026FA6                            
00026FA6                            SS_ChkEmldRepeat:
00026FA6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
00026FAA                            
00026FAA                            SS_LoadData:
00026FAA E548                       		lsl.w	#2,d0
00026FAC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
00026FB0 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
00026FB4 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
00026FB8 207B 0082                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
00026FBC 43F9 00FF 4000             		lea	($FF4000).l,a1
00026FC2 303C 0000                  		move.w	#0,d0
00026FC6 4EB9 0000 389E             		jsr	(EniDec).l
00026FCC 43F9 00FF 0000             		lea	($FF0000).l,a1
00026FD2 303C 0FFF                  		move.w	#$FFF,d0
00026FD6                            
00026FD6                            SS_ClrRAM3:
00026FD6 4299                       		clr.l	(a1)+
00026FD8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
00026FDC                            
00026FDC 43F9 00FF 1020             		lea	($FF1020).l,a1
00026FE2 41F9 00FF 4000             		lea	($FF4000).l,a0
00026FE8 723F                       		moveq	#$3F,d1
00026FEA                            
00026FEA                            loc_1B6F6:
00026FEA 743F                       		moveq	#$3F,d2
00026FEC                            
00026FEC                            loc_1B6F8:
00026FEC 12D8                       		move.b	(a0)+,(a1)+
00026FEE 51CA FFFC                  		dbf	d2,loc_1B6F8
00026FF2                            
00026FF2 43E9 0040                  		lea	object_size(a1),a1
00026FF6 51C9 FFF2                  		dbf	d1,loc_1B6F6
00026FFA                            
00026FFA 43F9 00FF 4008             		lea	($FF4008).l,a1
00027000 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
00027006 724D                       		moveq	#$4D,d1
00027008                            
00027008                            loc_1B714:
00027008 22D8                       		move.l	(a0)+,(a1)+
0002700A 32FC 0000                  		move.w	#0,(a1)+
0002700E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
00027014 32D8                       		move.w	(a0)+,(a1)+
00027016 51C9 FFF0                  		dbf	d1,loc_1B714
0002701A                            
0002701A 43F9 00FF 4400             		lea	($FF4400).l,a1
00027020 323C 003F                  		move.w	#$3F,d1
00027024                            
00027024                            loc_1B730:
00027024                            
00027024 4299                       		clr.l	(a1)+
00027026 51C9 FFFC                  		dbf	d1,loc_1B730
0002702A                            
0002702A 4E75                       		rts	
0002702C                            ; End of function SS_Load
0002702C                            
0002702C                            ; ===========================================================================
0002702C                            ; ---------------------------------------------------------------------------
0002702C                            ; Special stage	mappings and VRAM pointers
0002702C                            ; ---------------------------------------------------------------------------
0002702C                            SS_MapIndex:
0002702C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0002702C                            ; ---------------------------------------------------------------------------
0002702C                            ; Special stage	mappings and VRAM pointers
0002702C                            ; ---------------------------------------------------------------------------
0002702C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
00027030 0142                       	dc.w $142		; VRAM setting
00027032 0000 0000                  	dc.l Map_SSWalls
00027036 0142                       	dc.w $142
00027038 0000 0000                  	dc.l Map_SSWalls
0002703C 0142                       	dc.w $142
0002703E 0000 0000                  	dc.l Map_SSWalls
00027042 0142                       	dc.w $142
00027044 0000 0000                  	dc.l Map_SSWalls
00027048 0142                       	dc.w $142
0002704A 0000 0000                  	dc.l Map_SSWalls
0002704E 0142                       	dc.w $142
00027050 0000 0000                  	dc.l Map_SSWalls
00027054 0142                       	dc.w $142
00027056 0000 0000                  	dc.l Map_SSWalls
0002705A 0142                       	dc.w $142
0002705C 0000 0000                  	dc.l Map_SSWalls
00027060 0142                       	dc.w $142
00027062 0000 0000                  	dc.l Map_SSWalls
00027066 2142                       	dc.w $2142
00027068 0000 0000                  	dc.l Map_SSWalls
0002706C 2142                       	dc.w $2142
0002706E 0000 0000                  	dc.l Map_SSWalls
00027072 2142                       	dc.w $2142
00027074 0000 0000                  	dc.l Map_SSWalls
00027078 2142                       	dc.w $2142
0002707A 0000 0000                  	dc.l Map_SSWalls
0002707E 2142                       	dc.w $2142
00027080 0000 0000                  	dc.l Map_SSWalls
00027084 2142                       	dc.w $2142
00027086 0000 0000                  	dc.l Map_SSWalls
0002708A 2142                       	dc.w $2142
0002708C 0000 0000                  	dc.l Map_SSWalls
00027090 2142                       	dc.w $2142
00027092 0000 0000                  	dc.l Map_SSWalls
00027096 2142                       	dc.w $2142
00027098 0000 0000                  	dc.l Map_SSWalls
0002709C 4142                       	dc.w $4142
0002709E 0000 0000                  	dc.l Map_SSWalls
000270A2 4142                       	dc.w $4142
000270A4 0000 0000                  	dc.l Map_SSWalls
000270A8 4142                       	dc.w $4142
000270AA 0000 0000                  	dc.l Map_SSWalls
000270AE 4142                       	dc.w $4142
000270B0 0000 0000                  	dc.l Map_SSWalls
000270B4 4142                       	dc.w $4142
000270B6 0000 0000                  	dc.l Map_SSWalls
000270BA 4142                       	dc.w $4142
000270BC 0000 0000                  	dc.l Map_SSWalls
000270C0 4142                       	dc.w $4142
000270C2 0000 0000                  	dc.l Map_SSWalls
000270C6 4142                       	dc.w $4142
000270C8 0000 0000                  	dc.l Map_SSWalls
000270CC 4142                       	dc.w $4142
000270CE 0000 0000                  	dc.l Map_SSWalls
000270D2 6142                       	dc.w $6142
000270D4 0000 0000                  	dc.l Map_SSWalls
000270D8 6142                       	dc.w $6142
000270DA 0000 0000                  	dc.l Map_SSWalls
000270DE 6142                       	dc.w $6142
000270E0 0000 0000                  	dc.l Map_SSWalls
000270E4 6142                       	dc.w $6142
000270E6 0000 0000                  	dc.l Map_SSWalls
000270EA 6142                       	dc.w $6142
000270EC 0000 0000                  	dc.l Map_SSWalls
000270F0 6142                       	dc.w $6142
000270F2 0000 0000                  	dc.l Map_SSWalls
000270F6 6142                       	dc.w $6142
000270F8 0000 0000                  	dc.l Map_SSWalls
000270FC 6142                       	dc.w $6142
000270FE 0000 0000                  	dc.l Map_SSWalls
00027102 6142                       	dc.w $6142
00027104 0001 7CC2                  	dc.l Map_obj47
00027108 023B                       	dc.w $23B
0002710A 0000 0000                  	dc.l Map_SS_R
0002710E 0570                       	dc.w $570
00027110 0000 0000                  	dc.l Map_SS_R
00027114 0251                       	dc.w $251
00027116 0000 0000                  	dc.l Map_SS_R
0002711A 0370                       	dc.w $370
0002711C 0000 0000                  	dc.l Map_SS_Up
00027120 0263                       	dc.w $263
00027122 0000 0000                  	dc.l Map_SS_Down
00027126 0263                       	dc.w $263
00027128 0000 0000                  	dc.l Map_SS_R
0002712C 22F0                       	dc.w $22F0
0002712E 0000 0000                  	dc.l Map_SS_Glass
00027132 0470                       	dc.w $470
00027134 0000 0000                  	dc.l Map_SS_Glass
00027138 05F0                       	dc.w $5F0
0002713A 0000 0000                  	dc.l Map_SS_Glass
0002713E 65F0                       	dc.w $65F0
00027140 0000 0000                  	dc.l Map_SS_Glass
00027144 25F0                       	dc.w $25F0
00027146 0000 0000                  	dc.l Map_SS_Glass
0002714A 45F0                       	dc.w $45F0
0002714C 0000 0000                  	dc.l Map_SS_R
00027150 02F0                       	dc.w $2F0
00027152 0101 7CC2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
00027156 023B                       	dc.w $23B
00027158 0201 7CC2                  	dc.l Map_obj47+$2000000
0002715C 023B                       	dc.w $23B
0002715E 0000 0000                  	dc.l Map_SS_R
00027162 0797                       	dc.w $797
00027164 0000 0000                  	dc.l Map_SS_R
00027168 07A0                       	dc.w $7A0
0002716A 0000 0000                  	dc.l Map_SS_R
0002716E 07A9                       	dc.w $7A9
00027170 0000 0000                  	dc.l Map_SS_R
00027174 0797                       	dc.w $797
00027176 0000 0000                  	dc.l Map_SS_R
0002717A 07A0                       	dc.w $7A0
0002717C 0000 0000                  	dc.l Map_SS_R
00027180 07A9                       	dc.w $7A9
00027182 0001 1D0C                  	dc.l Map_obj25
00027186 27B2                       	dc.w $27B2
00027188 0000 0000                  	dc.l Map_SS_Chaos3
0002718C 0770                       	dc.w $770
0002718E 0000 0000                  	dc.l Map_SS_Chaos3
00027192 2770                       	dc.w $2770
00027194 0000 0000                  	dc.l Map_SS_Chaos3
00027198 4770                       	dc.w $4770
0002719A 0000 0000                  	dc.l Map_SS_Chaos3
0002719E 6770                       	dc.w $6770
000271A0 0000 0000                  	dc.l Map_SS_Chaos1
000271A4 0770                       	dc.w $770
000271A6 0000 0000                  	dc.l Map_SS_Chaos2
000271AA 0770                       	dc.w $770
000271AC 0000 0000                  	dc.l Map_SS_R
000271B0 04F0                       	dc.w $4F0
000271B2 0401 1D0C                  	dc.l Map_obj25+$4000000
000271B6 27B2                       	dc.w $27B2
000271B8 0501 1D0C                  	dc.l Map_obj25+$5000000
000271BC 27B2                       	dc.w $27B2
000271BE 0601 1D0C                  	dc.l Map_obj25+$6000000
000271C2 27B2                       	dc.w $27B2
000271C4 0701 1D0C                  	dc.l Map_obj25+$7000000
000271C8 27B2                       	dc.w $27B2
000271CA 0000 0000                  	dc.l Map_SS_Glass
000271CE 23F0                       	dc.w $23F0
000271D0 0000 0000                  	dc.l Map_SS_Glass+$1000000
000271D4 23F0                       	dc.w $23F0
000271D6 0000 0000                  	dc.l Map_SS_Glass+$2000000
000271DA 23F0                       	dc.w $23F0
000271DC 0000 0000                  	dc.l Map_SS_Glass+$3000000
000271E0 23F0                       	dc.w $23F0
000271E2 0000 0000                  	dc.l Map_SS_R+$2000000
000271E6 04F0                       	dc.w $4F0
000271E8 0000 0000                  	dc.l Map_SS_Glass
000271EC 05F0                       	dc.w $5F0
000271EE 0000 0000                  	dc.l Map_SS_Glass
000271F2 65F0                       	dc.w $65F0
000271F4 0000 0000                  	dc.l Map_SS_Glass
000271F8 25F0                       	dc.w $25F0
000271FA 0000 0000                  	dc.l Map_SS_Glass
000271FE 45F0                       	dc.w $45F0
000271FE 45F0                       	dc.w $45F0
00027200                            
00027200                            ; ---------------------------------------------------------------------------
00027200                            ; Sprite mappings - special stage "R" block
00027200                            ; ---------------------------------------------------------------------------
00027200                            Map_SS_R:
00027200                            	include "_maps\SSRblock.asm"
00027200                            ; ---------------------------------------------------------------------------
00027200                            ; Sprite mappings - special stage "R" block
00027200                            ; ---------------------------------------------------------------------------
00027200 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
00027204 0000                       		dc.w byte_1B91E-Map_SS_R
00027206 01                         byte_1B912:	dc.b 1
00027207 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002720C 01                         byte_1B918:	dc.b 1
0002720D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00027212 00                         byte_1B91E:	dc.b 0
00027214 00                         		even
00027214 00                         		even
00027214                            
00027214                            ; ---------------------------------------------------------------------------
00027214                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
00027214                            ; ---------------------------------------------------------------------------
00027214                            Map_SS_Glass:
00027214                            	include "_maps\SSglassblock.asm"
00027214                            ; ---------------------------------------------------------------------------
00027214                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
00027214                            ; ---------------------------------------------------------------------------
00027214 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
00027218 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0002721C 01                         byte_1B928:	dc.b 1
0002721D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00027222 01                         byte_1B92E:	dc.b 1
00027223 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
00027228 01                         byte_1B934:	dc.b 1
00027229 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0002722E 01                         byte_1B93A:	dc.b 1
0002722F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
00027234                            		even
00027234                            		even
00027234                            
00027234                            ; ---------------------------------------------------------------------------
00027234                            ; Sprite mappings - special stage "UP" block
00027234                            ; ---------------------------------------------------------------------------
00027234                            Map_SS_Up:
00027234                            	include "_maps\SSUPblock.asm"
00027234                            ; ---------------------------------------------------------------------------
00027234                            ; Sprite mappings - special stage "UP" block
00027234                            ; ---------------------------------------------------------------------------
00027234 0000                       		dc.w byte_1B944-Map_SS_Up
00027236 0000                       		dc.w byte_1B94A-Map_SS_Up
00027238 01                         byte_1B944:	dc.b 1
00027239 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002723E 01                         byte_1B94A:	dc.b 1
0002723F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00027244                            		even
00027244                            		even
00027244                            
00027244                            ; ---------------------------------------------------------------------------
00027244                            ; Sprite mappings - special stage "DOWN" block
00027244                            ; ---------------------------------------------------------------------------
00027244                            Map_SS_Down:
00027244                            	include "_maps\SSDOWNblock.asm"
00027244                            ; ---------------------------------------------------------------------------
00027244                            ; Sprite mappings - special stage "DOWN" block
00027244                            ; ---------------------------------------------------------------------------
00027244 0000                       		dc.w byte_1B954-Map_SS_Down
00027246 0000                       		dc.w byte_1B95A-Map_SS_Down
00027248 01                         byte_1B954:	dc.b 1
00027249 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0002724E 01                         byte_1B95A:	dc.b 1
0002724F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00027254                            		even
00027254                            		even
00027254                            
00027254                            ; ---------------------------------------------------------------------------
00027254                            ; Sprite mappings - special stage chaos	emeralds
00027254                            ; ---------------------------------------------------------------------------
00027254 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
00027256 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
00027258 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0002725A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0002725C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0002725E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
00027260 01                         byte_1B96C:	dc.b 1
00027261 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00027266 01                         byte_1B972:	dc.b 1
00027267 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0002726C 01                         byte_1B978:	dc.b 1
0002726D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00027272 01                         byte_1B97E:	dc.b 1
00027273 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00027278                            		even
00027278                            ; ===========================================================================
00027278                            ; ---------------------------------------------------------------------------
00027278                            ; Object 09 - Sonic (special stage)
00027278                            ; ---------------------------------------------------------------------------
00027278                            
00027278                            Obj09:					; XREF: Obj_Index
00027278 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0002727C 6700                       		beq.s	Obj09_Normal	; if not, branch
0002727E 4EB9 0000 0000             		jsr	SS_FixCamera
00027284 6000 0000                  		bra.w	DebugMode
00027288                            ; ===========================================================================
00027288                            
00027288                            Obj09_Normal:
00027288 7000                       		moveq	#0,d0
0002728A 1028 0024                  		move.b	routine(a0),d0
0002728E 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
00027292 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
00027296                            ; ===========================================================================
00027296 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
00027298 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0002729A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0002729C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0002729E                            ; ===========================================================================
0002729E                            
0002729E                            Obj09_Main:				; XREF: Obj09_Index
0002729E 5428 0024                  		addq.b	#2,routine(a0)
000272A2 117C 000E 0016             		move.b	#$E,$16(a0)
000272A8 117C 0007 0017             		move.b	#7,$17(a0)
000272AE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000272B6 317C 0780 0002             		move.w	#$780,2(a0)
000272BC 117C 0004 0001             		move.b	#4,1(a0)
000272C2 117C 0000 0018             		move.b	#0,priority(a0)
000272C8 117C 0002 001C             		move.b	#2,anim(a0)
000272CE 08E8 0002 0022             		bset	#2,status(a0)
000272D4 08E8 0001 0022             		bset	#1,status(a0)
000272DA                            
000272DA                            Obj09_ChkDebug:				; XREF: Obj09_Index
000272DA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
000272DE 6700                       		beq.s	Obj09_NoDebug	; if not, branch
000272E0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
000272E6 6700                       		beq.s	Obj09_NoDebug	; if not, branch
000272E8 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
000272EE                            
000272EE                            Obj09_NoDebug:
000272EE 117C 0000 0030             		move.b	#0,$30(a0)
000272F4 7000                       		moveq	#0,d0
000272F6 1028 0022                  		move.b	status(a0),d0
000272FA 0240 0002                  		andi.w	#2,d0
000272FE 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
00027302 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
00027306 4EB9 0001 E20C             		jsr	LoadSonicDynPLC
0002730C 4EF9 0001 5C3C             		jmp	DisplaySprite
00027312                            ; ===========================================================================
00027312 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
00027314 0000                       		dc.w Obj09_InAir-Obj09_Modes
00027316                            ; ===========================================================================
00027316                            
00027316                            Obj09_OnWall:				; XREF: Obj09_Modes
00027316 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
0002731C 4EB9 0000 0000             		jsr	Obj09_Jump
00027322 4EB9 0000 0000             		jsr	Obj09_Move
00027328 4EB9 0000 0000             		jsr	Obj09_Fall
0002732E 6000                       		bra.s	Obj09_Display
00027330                            ; ===========================================================================
00027330                            
00027330                            Obj09_InAir:				; XREF: Obj09_Modes
00027330 4EB9 0000 0000             		jsr	Obj09_JumpHeight
00027336 4EB9 0000 0000             		jsr	Obj09_Move
0002733C 4EB9 0000 0000             		jsr	Obj09_Fall
00027342                            
00027342                            Obj09_Display:				; XREF: Obj09_OnWall
00027342 4EB9 0000 0000             		jsr	Obj09_ChkItems
00027348 4EB9 0000 0000             		jsr	Obj09_ChkItems2
0002734E 4EB9 0001 5BD6             		jsr	SpeedToPos
00027354 4EB9 0000 0000             		jsr	SS_FixCamera
0002735A 3038 F780                  		move.w	($FFFFF780).w,d0
0002735E D078 F782                  		add.w	($FFFFF782).w,d0
00027362 31C0 F780                  		move.w	d0,($FFFFF780).w
00027366 4EB9 0001 DC2A             		jsr	Sonic_Animate
0002736C 4E75                       		rts	
0002736E                            
0002736E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002736E                            
0002736E                            
0002736E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0002736E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00027374 6700                       		beq.s	Obj09_ChkRight	; if not, branch
00027376 4EB9 0000 0000             		jsr	Obj09_MoveLeft
0002737C                            
0002737C                            Obj09_ChkRight:
0002737C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00027382 6700                       		beq.s	loc_1BA78	; if not, branch
00027384 4EB9 0000 0000             		jsr	Obj09_MoveRight
0002738A                            
0002738A                            loc_1BA78:
0002738A 1038 F602                  		move.b	($FFFFF602).w,d0
0002738E 0200 000C                  		andi.b	#$C,d0
00027392 6600                       		bne.s	loc_1BAA8
00027394 3028 0020                  		move.w	inertia(a0),d0
00027398 6700                       		beq.s	loc_1BAA8
0002739A 6B00                       		bmi.s	loc_1BA9A
0002739C 0440 000C                  		subi.w	#$C,d0
000273A0 6400                       		bcc.s	loc_1BA94
000273A2 303C 0000                  		move.w	#0,d0
000273A6                            
000273A6                            loc_1BA94:
000273A6 3140 0020                  		move.w	d0,inertia(a0)
000273AA 6000                       		bra.s	loc_1BAA8
000273AC                            ; ===========================================================================
000273AC                            
000273AC                            loc_1BA9A:
000273AC 0640 000C                  		addi.w	#$C,d0
000273B0 6400                       		bcc.s	loc_1BAA4
000273B2 303C 0000                  		move.w	#0,d0
000273B6                            
000273B6                            loc_1BAA4:
000273B6 3140 0020                  		move.w	d0,inertia(a0)
000273BA                            
000273BA                            loc_1BAA8:
000273BA 1038 F780                  		move.b	($FFFFF780).w,d0
000273BE 0600 0020                  		addi.b	#$20,d0
000273C2 0200 00C0                  		andi.b	#$C0,d0
000273C6 4400                       		neg.b	d0
000273C8 4EB9 0000 8DA4             		jsr	(CalcSine).l
000273CE C3E8 0020                  		muls.w	inertia(a0),d1
000273D2 D3A8 0008                  		add.l	d1,8(a0)
000273D6 C1E8 0020                  		muls.w	inertia(a0),d0
000273DA D1A8 000C                  		add.l	d0,$C(a0)
000273DE 48E7 C000                  		movem.l	d0-d1,-(sp)
000273E2 2428 000C                  		move.l	$C(a0),d2
000273E6 2628 0008                  		move.l	8(a0),d3
000273EA 4EB9 0000 0000             		jsr	sub_1BCE8
000273F0 6700                       		beq.s	loc_1BAF2
000273F2 4CDF 0003                  		movem.l	(sp)+,d0-d1
000273F6 93A8 0008                  		sub.l	d1,8(a0)
000273FA 91A8 000C                  		sub.l	d0,$C(a0)
000273FE 317C 0000 0020             		move.w	#0,inertia(a0)
00027404 4E75                       		rts	
00027406                            ; ===========================================================================
00027406                            
00027406                            loc_1BAF2:
00027406 4CDF 0003                  		movem.l	(sp)+,d0-d1
0002740A 4E75                       		rts	
0002740C                            ; End of function Obj09_Move
0002740C                            
0002740C                            
0002740C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002740C                            
0002740C                            
0002740C                            Obj09_MoveLeft:				; XREF: Obj09_Move
0002740C 08E8 0000 0022             		bset	#0,status(a0)
00027412 3028 0020                  		move.w	inertia(a0),d0
00027416 6700                       		beq.s	loc_1BB06
00027418 6A00                       		bpl.s	loc_1BB1A
0002741A                            
0002741A                            loc_1BB06:
0002741A 0440 000C                  		subi.w	#$C,d0
0002741E 0C40 F800                  		cmpi.w	#-$800,d0
00027422 6E00                       		bgt.s	loc_1BB14
00027424 303C F800                  		move.w	#-$800,d0
00027428                            
00027428                            loc_1BB14:
00027428 3140 0020                  		move.w	d0,inertia(a0)
0002742C 4E75                       		rts	
0002742E                            ; ===========================================================================
0002742E                            
0002742E                            loc_1BB1A:
0002742E 0440 0040                  		subi.w	#$40,d0
00027432 6400                       		bcc.s	loc_1BB22
00027434 4E71                       		nop	
00027436                            
00027436                            loc_1BB22:
00027436 3140 0020                  		move.w	d0,inertia(a0)
0002743A 4E75                       		rts	
0002743C                            ; End of function Obj09_MoveLeft
0002743C                            
0002743C                            
0002743C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002743C                            
0002743C                            
0002743C                            Obj09_MoveRight:			; XREF: Obj09_Move
0002743C 08A8 0000 0022             		bclr	#0,status(a0)
00027442 3028 0020                  		move.w	inertia(a0),d0
00027446 6B00                       		bmi.s	loc_1BB48
00027448 0640 000C                  		addi.w	#$C,d0
0002744C 0C40 0800                  		cmpi.w	#$800,d0
00027450 6D00                       		blt.s	loc_1BB42
00027452 303C 0800                  		move.w	#$800,d0
00027456                            
00027456                            loc_1BB42:
00027456 3140 0020                  		move.w	d0,inertia(a0)
0002745A 6000                       		bra.s	locret_1BB54
0002745C                            ; ===========================================================================
0002745C                            
0002745C                            loc_1BB48:
0002745C 0640 0040                  		addi.w	#$40,d0
00027460 6400                       		bcc.s	loc_1BB50
00027462 4E71                       		nop	
00027464                            
00027464                            loc_1BB50:
00027464 3140 0020                  		move.w	d0,inertia(a0)
00027468                            
00027468                            locret_1BB54:
00027468 4E75                       		rts	
0002746A                            ; End of function Obj09_MoveRight
0002746A                            
0002746A                            
0002746A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002746A                            
0002746A                            
0002746A                            Obj09_Jump:				; XREF: Obj09_OnWall
0002746A 1038 F603                  		move.b	($FFFFF603).w,d0
0002746E 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00027472 6700                       		beq.s	Obj09_NoJump	; if not, branch
00027474 1038 F780                  		move.b	($FFFFF780).w,d0
00027478 0200 00FC                  		andi.b	#$FC,d0
0002747C 4400                       		neg.b	d0
0002747E 0400 0040                  		subi.b	#$40,d0
00027482 4EB9 0000 8DA4             		jsr	(CalcSine).l
00027488 C3FC 0680                  		muls.w	#$680,d1
0002748C E081                       		asr.l	#8,d1
0002748E 3141 0010                  		move.w	d1,x_vel(a0)
00027492 C1FC 0680                  		muls.w	#$680,d0
00027496 E080                       		asr.l	#8,d0
00027498 3140 0012                  		move.w	d0,y_vel(a0)
0002749C 08E8 0001 0022             		bset	#1,status(a0)
000274A2 08E8 0007 0022             		bset	#7,status(a0)	; set "Sonic has jumped" flag
000274A8 303C 0062                  		move.w	#$62,d0
000274AC 4EB9 0000 3212             		jsr	(PlaySound).l ;	play jumping sound
000274B2                            
000274B2                            Obj09_NoJump:
000274B2 4E75                       		rts	
000274B4                            ; End of function Obj09_Jump
000274B4                            
000274B4                            ; ===========================================================================
000274B4                            ; ---------------------------------------------------------------------------
000274B4                            ; Subroutine to limit Sonic's upward vertical speed
000274B4                            ; ---------------------------------------------------------------------------
000274B4                             
000274B4                            Obj09_JumpHeight:			; XREF: Obj09_InAir
000274B4 1038 F602                  		move.b	($FFFFF602).w,d0	; is the jump button up?
000274B8 0200 0070                  		andi.b	#$70,d0
000274BC 6600                       		bne.s	locret_1BBB4		; if not, branch to return
000274BE 0828 0007 0022             		btst	#7,status(a0)		; did Sonic jump or is he just falling or hit by a bumper?
000274C4 6700                       		beq.s	locret_1BBB4		; if not, branch to return
000274C6 1038 F780                  		move.b	($FFFFF780).w,d0	; get SS angle
000274CA 0200 00FC                  		andi.b	#$FC,d0
000274CE 4400                       		neg.b	d0
000274D0 0400 0040                  		subi.b	#$40,d0
000274D4 4EB9 0000 8DA4             		jsr	(CalcSine).l			
000274DA 3428 0012                  		move.w	y_vel(a0),d2		; get Y speed
000274DE C1C2                       		muls.w	d2,d0			; multiply Y speed by sin
000274E0 E080                       		asr.l	#8,d0			; find the new Y speed
000274E2 3428 0010                  		move.w	x_vel(a0),d2		; get X speed
000274E6 C3C2                       		muls.w	d2,d1			; multiply X speed by cos
000274E8 E081                       		asr.l	#8,d1			; find the new X speed
000274EA D240                       		add.w	d0,d1			; combine the two speeds
000274EC 0C41 0400                  		cmpi.w	#$400,d1		; compare the combined speed with the jump release speed
000274F0 6F00                       		ble.s	locret_1BBB4		; if it's less, branch to return
000274F2 1038 F780                  		move.b	($FFFFF780).w,d0
000274F6 0200 00FC                  		andi.b	#$FC,d0
000274FA 4400                       		neg.b	d0
000274FC 0400 0040                  		subi.b	#$40,d0
00027500 4EB9 0000 8DA4             		jsr	(CalcSine).l
00027506 C3FC 0400                  		muls.w	#$400,d1
0002750A E081                       		asr.l	#8,d1
0002750C 3141 0010                  		move.w	d1,x_vel(a0)
00027510 C1FC 0400                  		muls.w	#$400,d0
00027514 E080                       		asr.l	#8,d0
00027516 3140 0012                  		move.w	d0,y_vel(a0)		; set the speed to the jump release speed
0002751A 08A8 0007 0022             		bclr	#7,status(a0)		; clear "Sonic has jumped" flag
00027520                             
00027520                            locret_1BBB4:
00027520 4E75                       		rts
00027522                            
00027522                            ; ---------------------------------------------------------------------------
00027522                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
00027522                            ; ---------------------------------------------------------------------------
00027522                            
00027522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027522                            
00027522                            
00027522                            SS_FixCamera:				; XREF: Obj09
00027522 3428 000C                  		move.w	$C(a0),d2
00027526 3628 0008                  		move.w	8(a0),d3
0002752A 3038 F700                  		move.w	($FFFFF700).w,d0
0002752E 0443 00A0                  		subi.w	#$A0,d3
00027532 6500                       		bcs.s	loc_1BBCE
00027534 9043                       		sub.w	d3,d0
00027536 9178 F700                  		sub.w	d0,($FFFFF700).w
0002753A                            
0002753A                            loc_1BBCE:
0002753A 3038 F704                  		move.w	($FFFFF704).w,d0
0002753E 0442 0070                  		subi.w	#$70,d2
00027542 6500                       		bcs.s	locret_1BBDE
00027544 9042                       		sub.w	d2,d0
00027546 9178 F704                  		sub.w	d0,($FFFFF704).w
0002754A                            
0002754A                            locret_1BBDE:
0002754A 4E75                       		rts	
0002754C                            ; End of function SS_FixCamera
0002754C                            
0002754C                            ; ===========================================================================
0002754C                            
0002754C                            Obj09_ExitStage:			; XREF: Obj09_Index
0002754C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
00027552 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
00027558 6600                       		bne.s	loc_1BBF4
0002755A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
00027560                            
00027560                            loc_1BBF4:
00027560 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
00027566 6D00                       		blt.s	loc_1BC12
00027568 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0002756E 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
00027574 5428 0024                  		addq.b	#2,routine(a0)
00027578 317C 003C 0038             		move.w	#$3C,$38(a0)
0002757E                            
0002757E                            loc_1BC12:
0002757E 3038 F780                  		move.w	($FFFFF780).w,d0
00027582 D078 F782                  		add.w	($FFFFF782).w,d0
00027586 31C0 F780                  		move.w	d0,($FFFFF780).w
0002758A 4EB9 0001 DC2A             		jsr	Sonic_Animate
00027590 4EB9 0001 E20C             		jsr	LoadSonicDynPLC
00027596 4EBA FF8A                  		jsr	SS_FixCamera
0002759A 4EF9 0001 5C3C             		jmp	DisplaySprite
000275A0                            ; ===========================================================================
000275A0                            
000275A0                            Obj09_Exit2:				; XREF: Obj09_Index
000275A0 5368 0038                  		subq.w	#1,$38(a0)
000275A4 6600                       		bne.s	loc_1BC40
000275A6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
000275AC                            
000275AC                            loc_1BC40:
000275AC 4EB9 0001 DC2A             		jsr	Sonic_Animate
000275B2 4EB9 0001 E20C             		jsr	LoadSonicDynPLC
000275B8 4EBA FF68                  		jsr	SS_FixCamera
000275BC 4EF9 0001 5C3C             		jmp	DisplaySprite
000275C2                            
000275C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000275C2                            
000275C2                            
000275C2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
000275C2 2428 000C                  		move.l	$C(a0),d2
000275C6 2628 0008                  		move.l	8(a0),d3
000275CA 1038 F780                  		move.b	($FFFFF780).w,d0
000275CE 0200 00FC                  		andi.b	#$FC,d0
000275D2 4EB9 0000 8DA4             		jsr	(CalcSine).l
000275D8 3828 0010                  		move.w	x_vel(a0),d4
000275DC 48C4                       		ext.l	d4
000275DE E184                       		asl.l	#8,d4
000275E0 C1FC 002A                  		muls.w	#$2A,d0
000275E4 D084                       		add.l	d4,d0
000275E6 3828 0012                  		move.w	y_vel(a0),d4
000275EA 48C4                       		ext.l	d4
000275EC E184                       		asl.l	#8,d4
000275EE C3FC 002A                  		muls.w	#$2A,d1
000275F2 D284                       		add.l	d4,d1
000275F4 D680                       		add.l	d0,d3
000275F6 4EB9 0000 0000             		jsr	sub_1BCE8
000275FC 6700                       		beq.s	loc_1BCB0
000275FE 9680                       		sub.l	d0,d3
00027600 7000                       		moveq	#0,d0
00027602 3140 0010                  		move.w	d0,x_vel(a0)
00027606 08A8 0001 0022             		bclr	#1,status(a0)
0002760C D481                       		add.l	d1,d2
0002760E 4EB9 0000 0000             		jsr	sub_1BCE8
00027614 6700                       		beq.s	loc_1BCC6
00027616 9481                       		sub.l	d1,d2
00027618 7200                       		moveq	#0,d1
0002761A 3141 0012                  		move.w	d1,y_vel(a0)
0002761E 4E75                       		rts	
00027620                            ; ===========================================================================
00027620                            
00027620                            loc_1BCB0:
00027620 D481                       		add.l	d1,d2
00027622 4EB9 0000 0000             		jsr	sub_1BCE8
00027628 6700                       		beq.s	loc_1BCD4
0002762A 9481                       		sub.l	d1,d2
0002762C 7200                       		moveq	#0,d1
0002762E 3141 0012                  		move.w	d1,y_vel(a0)
00027632 08A8 0001 0022             		bclr	#1,status(a0)
00027638                            
00027638                            loc_1BCC6:
00027638 E080                       		asr.l	#8,d0
0002763A E081                       		asr.l	#8,d1
0002763C 3140 0010                  		move.w	d0,x_vel(a0)
00027640 3141 0012                  		move.w	d1,y_vel(a0)
00027644 4E75                       		rts	
00027646                            ; ===========================================================================
00027646                            
00027646                            loc_1BCD4:
00027646 E080                       		asr.l	#8,d0
00027648 E081                       		asr.l	#8,d1
0002764A 3140 0010                  		move.w	d0,x_vel(a0)
0002764E 3141 0012                  		move.w	d1,y_vel(a0)
00027652 08E8 0001 0022             		bset	#1,status(a0)
00027658 4E75                       		rts	
0002765A                            ; End of function Obj09_Fall
0002765A                            
0002765A                            
0002765A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002765A                            
0002765A                            
0002765A                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0002765A 43F9 00FF 0000             		lea	($FF0000).l,a1
00027660 7800                       		moveq	#0,d4
00027662 4842                       		swap	d2
00027664 3802                       		move.w	d2,d4
00027666 4842                       		swap	d2
00027668 0644 0044                  		addi.w	#$44,d4
0002766C 88FC 0018                  		divu.w	#$18,d4
00027670 C8FC 0080                  		mulu.w	#$80,d4
00027674 D3C4                       		adda.l	d4,a1
00027676 7800                       		moveq	#0,d4
00027678 4843                       		swap	d3
0002767A 3803                       		move.w	d3,d4
0002767C 4843                       		swap	d3
0002767E 0644 0014                  		addi.w	#$14,d4
00027682 88FC 0018                  		divu.w	#$18,d4
00027686 D2C4                       		adda.w	d4,a1
00027688 7A00                       		moveq	#0,d5
0002768A 1819                       		move.b	(a1)+,d4
0002768C 6100                       		bsr.s	sub_1BD30
0002768E 1819                       		move.b	(a1)+,d4
00027690 6100                       		bsr.s	sub_1BD30
00027692 D2FC 007E                  		adda.w	#$7E,a1
00027696 1819                       		move.b	(a1)+,d4
00027698 6100                       		bsr.s	sub_1BD30
0002769A 1819                       		move.b	(a1)+,d4
0002769C 6100                       		bsr.s	sub_1BD30
0002769E 4A05                       		tst.b	d5
000276A0 4E75                       		rts	
000276A2                            ; End of function sub_1BCE8
000276A2                            
000276A2                            
000276A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000276A2                            
000276A2                            
000276A2                            sub_1BD30:				; XREF: sub_1BCE8
000276A2 6700                       		beq.s	locret_1BD44
000276A4 0C04 0028                  		cmpi.b	#$28,d4
000276A8 6700                       		beq.s	locret_1BD44
000276AA 0C04 003A                  		cmpi.b	#$3A,d4
000276AE 6500                       		bcs.s	loc_1BD46
000276B0 0C04 004B                  		cmpi.b	#$4B,d4
000276B4 6400                       		bcc.s	loc_1BD46
000276B6                            
000276B6                            locret_1BD44:
000276B6 4E75                       		rts	
000276B8                            ; ===========================================================================
000276B8                            
000276B8                            loc_1BD46:
000276B8 1144 0030                  		move.b	d4,$30(a0)
000276BC 2149 0032                  		move.l	a1,$32(a0)
000276C0 7AFF                       		moveq	#-1,d5
000276C2 4E75                       		rts	
000276C4                            ; End of function sub_1BD30
000276C4                            
000276C4                            
000276C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000276C4                            
000276C4                            
000276C4                            Obj09_ChkItems:				; XREF: Obj09_Display
000276C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000276CA 7800                       		moveq	#0,d4
000276CC 3828 000C                  		move.w	$C(a0),d4
000276D0 0644 0050                  		addi.w	#$50,d4
000276D4 88FC 0018                  		divu.w	#$18,d4
000276D8 C8FC 0080                  		mulu.w	#$80,d4
000276DC D3C4                       		adda.l	d4,a1
000276DE 7800                       		moveq	#0,d4
000276E0 3828 0008                  		move.w	8(a0),d4
000276E4 0644 0020                  		addi.w	#$20,d4
000276E8 88FC 0018                  		divu.w	#$18,d4
000276EC D2C4                       		adda.w	d4,a1
000276EE 1811                       		move.b	(a1),d4
000276F0 6600                       		bne.s	Obj09_ChkCont
000276F2 4A28 003A                  		tst.b	$3A(a0)
000276F6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
000276FA 7800                       		moveq	#0,d4
000276FC 4E75                       		rts	
000276FE                            ; ===========================================================================
000276FE                            
000276FE                            Obj09_ChkCont:
000276FE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
00027702 6600                       		bne.s	Obj09_Chk1Up
00027704 4EBA F6A4                  		jsr	SS_RemoveCollectedItem
00027708 6600                       		bne.s	Obj09_GetCont
0002770A 14BC 0001                  		move.b	#1,(a2)
0002770E 2549 0004                  		move.l	a1,4(a2)
00027712                            
00027712                            Obj09_GetCont:
00027712 4EB9 0001 1926             		jsr	CollectRing
00027718 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0002771E 6500                       		bcs.s	Obj09_NoCont
00027720 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
00027726 6600                       		bne.s	Obj09_NoCont
00027728 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0002772C 303C 00AC                  		move.w	#$AC,d0
00027730 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra continue sound
00027736                            
00027736                            Obj09_NoCont:
00027736 7800                       		moveq	#0,d4
00027738 4E75                       		rts	
0002773A                            ; ===========================================================================
0002773A                            
0002773A                            Obj09_Chk1Up:
0002773A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0002773E 6600                       		bne.s	Obj09_ChkEmer
00027740 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
00027746 6E00                       		bgt.b	Obj09_Get1Upcont
00027748 4EBA F660                  		jsr	SS_RemoveCollectedItem
0002774C 6600                       		bne.s	Obj09_Get1Up
0002774E 14BC 0003                  		move.b	#3,(a2)
00027752 2549 0004                  		move.l	a1,4(a2)
00027756                            
00027756                            Obj09_Get1Up:
00027756 0C38 0063 FE12             		cmpi.b	#$63,($FFFFFE12).w
0002775C 6C00                       		bge.s	Obj09_Get1Upcont
0002775E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
00027762 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
00027766                            Obj09_Get1Upcont:
00027766 303C 0088                  		move.w	#$88,d0
0002776A 4EB9 0000 3212             		jsr	(PlaySound).l	; play extra life music
00027770 7800                       		moveq	#0,d4
00027772 4E75                       		rts	
00027774                            
00027774                            ; ===========================================================================
00027774                            
00027774                            Obj09_ChkEmer:
00027774 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
00027778 6500                       		bcs.s	Obj09_ChkGhost
0002777A 0C04 0040                  		cmpi.b	#$40,d4
0002777E 6200                       		bhi.s	Obj09_ChkGhost
00027780 4EBA F628                  		jsr	SS_RemoveCollectedItem
00027784 6600                       		bne.s	Obj09_GetEmer
00027786 14BC 0005                  		move.b	#5,(a2)
0002778A 2549 0004                  		move.l	a1,4(a2)
0002778E                            
0002778E                            Obj09_GetEmer:
0002778E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
00027794 6C00                       		bge.s	Obj09_NoEmer	; if yes, branch
00027796 0404 003B                  		subi.b	#$3B,d4
0002779A 7000                       		moveq	#0,d0
0002779C 1038 FE57                  		move.b	($FFFFFE57).w,d0
000277A0 45F8 FE58                  		lea	($FFFFFE58).w,a2
000277A4 1584 0000                  		move.b	d4,(a2,d0.w)
000277A8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
000277AE 6C00                       		bge.s	Obj09_NoEmer_2	; if yes, branch
000277B0 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
000277B4 4EF9 0000 0000             		jmp	Obj09_EmerSND
000277BA                            
000277BA                            Obj09_NoEmer_2:
000277BA 11FC 0006 FE57             		move.b	#6,($FFFFFE57).w ; add 1 to number of emeralds
000277C0 4EF9 0000 0000             		jmp	Obj09_EmerSND
000277C6                            Obj09_NoEmer:
000277C6 303C 002B                  		move.w	#$2B,d0
000277CA                            Obj09_EmerSND:
000277CA 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play emerald music
000277D0 7800                       		moveq	#0,d4
000277D2 4E75                       		rts	
000277D4                            ; ===========================================================================
000277D4                            
000277D4                            Obj09_ChkGhost:
000277D4 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
000277D8 6600                       		bne.s	Obj09_ChkGhostTag
000277DA 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
000277E0                            
000277E0                            Obj09_ChkGhostTag:
000277E0 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
000277E4 6600                       		bne.s	Obj09_NoGhost
000277E6 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
000277EC 6600                       		bne.s	Obj09_NoGhost	; if not, branch
000277EE 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
000277F4                            
000277F4                            Obj09_NoGhost:
000277F4 78FF                       		moveq	#-1,d4
000277F6 4E75                       		rts	
000277F8                            ; ===========================================================================
000277F8                            
000277F8                            Obj09_MakeGhostSolid:
000277F8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
000277FE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
00027800 43F9 00FF 1020             		lea	($FF1020).l,a1
00027806 723F                       		moveq	#$3F,d1
00027808                            
00027808                            Obj09_GhostLoop2:
00027808 743F                       		moveq	#$3F,d2
0002780A                            
0002780A                            Obj09_GhostLoop:
0002780A 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0002780E 6600                       		bne.s	Obj09_NoReplace	; if not, branch
00027810 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
00027814                            
00027814                            Obj09_NoReplace:
00027814 5249                       		addq.w	#1,a1
00027816 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0002781A 43E9 0040                  		lea	object_size(a1),a1
0002781E 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
00027822                            
00027822                            Obj09_GhostNotSolid:
00027822 4228 003A                  		clr.b	$3A(a0)
00027826 7800                       		moveq	#0,d4
00027828 4E75                       		rts	
0002782A                            ; End of function Obj09_ChkItems
0002782A                            
0002782A                            
0002782A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002782A                            
0002782A                            
0002782A                            Obj09_ChkItems2:			; XREF: Obj09_Display
0002782A 1028 0030                  		move.b	$30(a0),d0
0002782E 6600                       		bne.s	Obj09_ChkBumper
00027830 5328 0036                  		subq.b	#1,$36(a0)
00027834 6A00                       		bpl.s	loc_1BEA0
00027836 117C 0000 0036             		move.b	#0,$36(a0)
0002783C                            
0002783C                            loc_1BEA0:
0002783C 5328 0037                  		subq.b	#1,$37(a0)
00027840 6A00                       		bpl.s	locret_1BEAC
00027842 117C 0000 0037             		move.b	#0,$37(a0)
00027848                            
00027848                            locret_1BEAC:
00027848 4E75                       		rts	
0002784A                            ; ===========================================================================
0002784A                            
0002784A                            Obj09_ChkBumper:
0002784A 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0002784E 6600                       		bne.s	Obj09_GOAL
00027850 2228 0032                  		move.l	$32(a0),d1
00027854 0481 00FF 0001             		subi.l	#$FF0001,d1
0002785A 3401                       		move.w	d1,d2
0002785C 0241 007F                  		andi.w	#$7F,d1
00027860 C2FC 0018                  		mulu.w	#$18,d1
00027864 0441 0014                  		subi.w	#$14,d1
00027868 EE4A                       		lsr.w	#7,d2
0002786A 0242 007F                  		andi.w	#$7F,d2
0002786E C4FC 0018                  		mulu.w	#$18,d2
00027872 0442 0044                  		subi.w	#$44,d2
00027876 9268 0008                  		sub.w	8(a0),d1
0002787A 9468 000C                  		sub.w	$C(a0),d2
0002787E 4EB9 0000 9072             		jsr	(CalcAngle).l
00027884 4EB9 0000 8DA4             		jsr	(CalcSine).l
0002788A C3FC F900                  		muls.w	#-$700,d1
0002788E E081                       		asr.l	#8,d1
00027890 3141 0010                  		move.w	d1,x_vel(a0)
00027894 C1FC F900                  		muls.w	#-$700,d0
00027898 E080                       		asr.l	#8,d0
0002789A 3140 0012                  		move.w	d0,y_vel(a0)
0002789E 08E8 0001 0022             		bset	#1,status(a0)
000278A4 08A8 0007 0022             		bclr	#7,status(a0)	; clear "Sonic has jumped" flag
000278AA 4EBA F4FE                  		jsr	SS_RemoveCollectedItem
000278AE 6600                       		bne.s	Obj09_BumpSnd
000278B0 14BC 0002                  		move.b	#2,(a2)
000278B4 2028 0032                  		move.l	$32(a0),d0
000278B8 5380                       		subq.l	#1,d0
000278BA 2540 0004                  		move.l	d0,4(a2)
000278BE                            
000278BE                            Obj09_BumpSnd:
000278BE 303C 00AA                  		move.w	#$AA,d0
000278C2 4EF9 0000 3212             		jmp	(PlaySound).l ;	play bumper sound
000278C8                            ; ===========================================================================
000278C8                            
000278C8                            Obj09_GOAL:
000278C8 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
000278CC 6600                       		bne.s	Obj09_UPblock
000278CE 5428 0024                  		addq.b	#2,routine(a0)	; run routine "Obj09_ExitStage"
000278D2 303C 006A                  		move.w	#$6A,d0		; change item
000278D6 4EB9 0000 325C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
000278DC 4E75                       		rts	
000278DE                            ; ===========================================================================
000278DE                            
000278DE                            Obj09_UPblock:
000278DE 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
000278E2 6600                       		bne.s	Obj09_DOWNblock
000278E4 4A28 0036                  		tst.b	$36(a0)
000278E8 6600 0000                  		bne.w	Obj09_NoGlass
000278EC 117C 001E 0036             		move.b	#$1E,$36(a0)
000278F2 0838 0006 F783             		btst	#6,($FFFFF783).w
000278F8 6700                       		beq.s	Obj09_UPsnd
000278FA E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
000278FE 2268 0032                  		movea.l	$32(a0),a1
00027902 5389                       		subq.l	#1,a1
00027904 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
00027908                            
00027908                            Obj09_UPsnd:
00027908 303C 006B                  		move.w	#$6B,d0
0002790C 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
00027912                            ; ===========================================================================
00027912                            
00027912                            Obj09_DOWNblock:
00027912 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
00027916 6600                       		bne.s	Obj09_Rblock
00027918 4A28 0036                  		tst.b	$36(a0)
0002791C 6600 0000                  		bne.w	Obj09_NoGlass
00027920 117C 001E 0036             		move.b	#$1E,$36(a0)
00027926 0838 0006 F783             		btst	#6,($FFFFF783).w
0002792C 6600                       		bne.s	Obj09_DOWNsnd
0002792E E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
00027932 2268 0032                  		movea.l	$32(a0),a1
00027936 5389                       		subq.l	#1,a1
00027938 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0002793C                            
0002793C                            Obj09_DOWNsnd:
0002793C 303C 006B                  		move.w	#$6B,d0
00027940 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play up/down sound
00027946                            ; ===========================================================================
00027946                            
00027946                            Obj09_Rblock:
00027946 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0002794A 6600                       		bne.s	Obj09_ChkGlass
0002794C 4A28 0037                  		tst.b	$37(a0)
00027950 6600 0000                  		bne.w	Obj09_NoGlass
00027954 117C 001E 0037             		move.b	#$1E,$37(a0)
0002795A 4EBA F44E                  		jsr	SS_RemoveCollectedItem
0002795E 6600                       		bne.s	Obj09_RevStage
00027960 14BC 0004                  		move.b	#4,(a2)
00027964 2028 0032                  		move.l	$32(a0),d0
00027968 5380                       		subq.l	#1,d0
0002796A 2540 0004                  		move.l	d0,4(a2)
0002796E                            
0002796E                            Obj09_RevStage:
0002796E 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
00027972 303C 006B                  		move.w	#$6B,d0
00027976 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play sound
0002797C                            ; ===========================================================================
0002797C                            
0002797C                            Obj09_ChkGlass:
0002797C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
00027980 6700                       		beq.s	Obj09_Glass	; if yes, branch
00027982 0C00 002E                  		cmpi.b	#$2E,d0
00027986 6700                       		beq.s	Obj09_Glass
00027988 0C00 002F                  		cmpi.b	#$2F,d0
0002798C 6700                       		beq.s	Obj09_Glass
0002798E 0C00 0030                  		cmpi.b	#$30,d0
00027992 6600                       		bne.s	Obj09_NoGlass	; if not, branch
00027994                            
00027994                            Obj09_Glass:
00027994 4EBA F414                  		jsr	SS_RemoveCollectedItem
00027998 6600                       		bne.s	Obj09_GlassSnd
0002799A 14BC 0006                  		move.b	#6,(a2)
0002799E 2268 0032                  		movea.l	$32(a0),a1
000279A2 5389                       		subq.l	#1,a1
000279A4 2549 0004                  		move.l	a1,4(a2)
000279A8 1011                       		move.b	(a1),d0
000279AA 5200                       		addq.b	#1,d0		; change glass type when touched
000279AC 0C00 0030                  		cmpi.b	#$30,d0
000279B0 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
000279B2 4200                       		clr.b	d0		; remove the glass block when it's destroyed
000279B4                            
000279B4                            Obj09_GlassUpdate:
000279B4 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
000279B8                            
000279B8                            Obj09_GlassSnd:
000279B8 303C 00B5                  		move.w	#$B5,d0
000279BC 4EF9 0000 325C             		jmp	(PlaySound_Special).l ;	play glass block sound
000279C2                            ; ===========================================================================
000279C2                            
000279C2                            Obj09_NoGlass:
000279C2 4E75                       		rts	
000279C4                            ; End of function Obj09_ChkItems2
000279C4                            
000279C4                            ; ===========================================================================
000279C4                            ; ---------------------------------------------------------------------------
000279C4                            ; Object 10 - blank
000279C4                            ; ---------------------------------------------------------------------------
000279C4                            
000279C4                            Obj10:					; XREF: Obj_Index
000279C4                            ; ----------------------------------------------------------------------------
000279C4                            ; Object 86 - Flipper from CNZ
000279C4                            ; ----------------------------------------------------------------------------
000279C4                            ; Sprite_2B140:
000279C4 7000                       	moveq	#0,d0
000279C6 1028 0024                  	move.b	routine(a0),d0
000279CA 323B 0000                  	move.w	off_2B152(pc,d0.w),d1
000279CE 4EBB 1000                  	jsr	off_2B152(pc,d1.w)
000279D2 6000 0000                  	bra.w	JmpTo27_MarkObjGone
000279D6                            ; ===========================================================================
000279D6                            off_2B152:
000279D6 0000                       	dc.w loc_2B158-off_2B152
000279D8 0000                       	dc.w loc_2B194-off_2B152; 1
000279DA 0000                       	dc.w loc_2B312-off_2B152; 2
000279DC                            ; ===========================================================================
000279DC                            
000279DC                            loc_2B158:
000279DC 5428 0024                  	addq.b	#2,routine(a0)
000279E0 217C 0000 0000 0004        	move.l	#Obj86_MapUnc_2B45A,mappings(a0)
000279E8 317C 43B2 0002             	move.w	#$43B2,art_tile(a0)
000279EE                            ;	bsr.w	JmpTo50_Adjust2PArtPointer
000279EE 0028 0004 0001             	ori.b	#4,render_flags(a0)
000279F4 117C 0018 0023             	move.b	#$18,width_pixels(a0)
000279FA 317C 0200 0018             	move.w	#$200,priority(a0)
00027A00 4A28 0028                  	tst.b	subtype(a0)
00027A04 6700                       	beq.s	loc_2B194
00027A06 5428 0024                  	addq.b	#2,routine(a0)
00027A0A 117C 0002 001C             	move.b	#2,anim(a0)
00027A10 6000 0000                  	bra.w	loc_2B312
00027A14                            ; ===========================================================================
00027A14                            
00027A14                            loc_2B194:
00027A14                            
00027A14 4A78 FE08                  	tst.w	(Debug_placement_mode).w
00027A18 6600                       	bne.s	return_2B208
00027A1A 45F9 0000 0000             	lea	(byte_2B3C6).l,a2
00027A20 1028 001A                  	move.b	mapping_frame(a0),d0
00027A24 6700                       	beq.s	loc_2B1B6
00027A26 45F9 0000 0000             	lea	(byte_2B3EA).l,a2
00027A2C 5300                       	subq.b	#1,d0
00027A2E 6700                       	beq.s	loc_2B1B6
00027A30 45F9 0000 0000             	lea	(byte_2B40E).l,a2
00027A36                            
00027A36                            loc_2B1B6:
00027A36 323C 0023                  	move.w	#$23,d1
00027A3A 343C 0006                  	move.w	#6,d2
00027A3E 3828 0008                  	move.w	x_pos(a0),d4
00027A42 6100 0000                  	bsr.w	JmpTo2_SolidObject86_30
00027A46 47E8 0036                  	lea	objoff_36(a0),a3
00027A4A 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027A4E 3A38 F602                  	move.w	(Ctrl_1_Logical).w,d5
00027A52 7C03                       	moveq	#3,d6
00027A54 6100                       	bsr.s	loc_2B20A
00027A56 524B                       	addq.w	#1,a3
00027A58 43F8 D040                  	lea	(Sidekick).w,a1 ; a1=character
00027A5C 3A38 F606                  	move.w	(Ctrl_2).w,d5
00027A60 7C04                       	moveq	#4,d6
00027A62 6100                       	bsr.s	loc_2B20A
00027A64 4A28 0038                  	tst.b	objoff_38(a0)
00027A68 6700                       	beq.s	loc_2B1FE
00027A6A 4228 0038                  	clr.b	objoff_38(a0)
00027A6E 6100 0000                  	bsr.w	loc_2B290
00027A72 534B                       	subq.w	#1,a3
00027A74 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027A78 7C03                       	moveq	#3,d6
00027A7A 6100 0000                  	bsr.w	loc_2B290
00027A7E                            
00027A7E                            loc_2B1FE:
00027A7E 43F9 0000 0000             	lea	(off_2B432).l,a1
00027A84 6000 0000                  	bra.w	JmpTo9_AnimateSprite
00027A88                            ; ===========================================================================
00027A88                            
00027A88                            return_2B208:
00027A88 4E75                       	rts
00027A8A                            ; ===========================================================================
00027A8A                            
00027A8A                            loc_2B20A:
00027A8A 1013                       	move.b	(a3),d0
00027A8C 6600                       	bne.s	loc_2B23C
00027A8E 0D28 0022                  	btst	d6,status(a0)
00027A92 67F4                       	beq.s	return_2B208
00027A94 11FC 0001 F7CC             	move.b	#1,(Control_locked).w
00027A9A 137C 000E 0016             	move.b	#$E,y_radius(a1)
00027AA0 137C 0007 0017             	move.b	#7,x_radius(a1)
00027AA6 137C 0002 001C             	move.b	#2,anim(a1)
00027AAC 08E9 0002 0022             	bset	#2,status(a1)
00027AB2 6600                       	bne.s	loc_2B238
00027AB4 5A69 000C                  	addq.w	#5,y_pos(a1)
00027AB8                            
00027AB8                            loc_2B238:
00027AB8 5213                       	addq.b	#1,(a3)
00027ABA 4E75                       	rts
00027ABC                            ; ===========================================================================
00027ABC                            
00027ABC                            loc_2B23C:
00027ABC 0245 0070                  	andi.w	#$70,d5
00027AC0 6600                       	bne.s	loc_2B288
00027AC2 0D28 0022                  	btst	d6,status(a0)
00027AC6 6600                       	bne.s	loc_2B254
00027AC8 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
00027ACE 16BC 0000                  	move.b	#0,(a3)
00027AD2 4E75                       	rts
00027AD4                            ; ===========================================================================
00027AD4                            
00027AD4                            loc_2B254:
00027AD4 7200                       	moveq	#0,d1
00027AD6 1228 001A                  	move.b	mapping_frame(a0),d1
00027ADA 5341                       	subq.w	#1,d1
00027ADC 08E9 0000 0022             	bset	#0,status(a1)
00027AE2 0828 0000 0022             	btst	#0,status(a0)
00027AE8 6600                       	bne.s	loc_2B272
00027AEA 4441                       	neg.w	d1
00027AEC 08A9 0000 0022             	bclr	#0,status(a1)
00027AF2                            
00027AF2                            loc_2B272:
00027AF2 D369 0008                  	add.w	d1,x_pos(a1)
00027AF6 E149                       	lsl.w	#8,d1
00027AF8 3341 0010                  	move.w	d1,x_vel(a1)
00027AFC 3341 0020                  	move.w	d1,inertia(a1)
00027B00 337C 0000 0012             	move.w	#0,y_vel(a1)
00027B06 4E75                       	rts
00027B08                            ; ===========================================================================
00027B08                            
00027B08                            loc_2B288:
00027B08 117C 0001 0038             	move.b	#1,objoff_38(a0)
00027B0E 4E75                       	rts
00027B10                            ; ===========================================================================
00027B10                            
00027B10                            loc_2B290:
00027B10 0DA8 0022                  	bclr	d6,status(a0)
00027B14 6700 FF72                  	beq.w	return_2B208
00027B18 3029 0008                  	move.w	x_pos(a1),d0
00027B1C 9068 0008                  	sub.w	x_pos(a0),d0
00027B20 0828 0000 0022             	btst	#0,status(a0)
00027B26 6700                       	beq.s	loc_2B2AA
00027B28 4440                       	neg.w	d0
00027B2A                            
00027B2A                            loc_2B2AA:
00027B2A 0640 0023                  	addi.w	#$23,d0
00027B2E 3400                       	move.w	d0,d2
00027B30 0C42 0040                  	cmpi.w	#$40,d2
00027B34 6500                       	bcs.s	loc_2B2BA
00027B36 343C 0040                  	move.w	#$40,d2
00027B3A                            
00027B3A                            loc_2B2BA:
00027B3A EB4A                       	lsl.w	#5,d2
00027B3C 0642 0800                  	addi.w	#$800,d2
00027B40 4442                       	neg.w	d2
00027B42 E440                       	asr.w	#2,d0
00027B44 0640 0040                  	addi.w	#$40,d0
00027B48 6100 0000                  	bsr.w	JmpTo11_CalcSine
00027B4C C1C2                       	muls.w	d2,d0
00027B4E C3C2                       	muls.w	d2,d1
00027B50 E080                       	asr.l	#8,d0
00027B52 E081                       	asr.l	#8,d1
00027B54 3340 0012                  	move.w	d0,y_vel(a1)
00027B58 0828 0000 0022             	btst	#0,status(a0)
00027B5E 6700                       	beq.s	loc_2B2E2
00027B60 4441                       	neg.w	d1
00027B62                            
00027B62                            loc_2B2E2:
00027B62 3341 0010                  	move.w	d1,x_vel(a1)
00027B66 08E9 0001 0022             	bset	#1,status(a1)
00027B6C 08A9 0003 0022             	bclr	#3,status(a1)
00027B72 137C 0002 0024             	move.b	#2,routine(a1)
00027B78 11FC 0000 F7CC             	move.b	#0,(Control_locked).w
00027B7E 117C 0001 001C             	move.b	#1,anim(a0)
00027B84 16BC 0000                  	move.b	#0,(a3)
00027B88 303C 00DB                  	move.w	#$DB,d0
00027B8C 4EF9 0000 3212             	jmp	(PlaySound).l
00027B92                            ; ===========================================================================
00027B92                            
00027B92                            loc_2B312:
00027B92                            
00027B92 323C 0013                  	move.w	#$13,d1
00027B96 343C 0018                  	move.w	#$18,d2
00027B9A 363C 0019                  	move.w	#$19,d3
00027B9E 3828 0008                  	move.w	x_pos(a0),d4
00027BA2 43F8 D000                  	lea	(MainCharacter).w,a1 ; a1=character
00027BA6 7C03                       	moveq	#3,d6
00027BA8 48E7 7800                  	movem.l	d1-d4,-(sp)
00027BAC 6100 0000                  	bsr.w	JmpTo6_loc_1978E
00027BB0 0828 0005 0022             	btst	#5,status(a0)
00027BB6 6700                       	beq.s	loc_2B352
00027BB8 6100                       	bsr.s	loc_2B35C
00027BBA                            
00027BBA                            ;loc_2B33A:
00027BBA                            ;	movem.l	(sp)+,d1-d4
00027BBA                            ;	lea	(Sidekick).w,a1 ; a1=character
00027BBA                            ;	moveq	#4,d6
00027BBA                            ;	bsr.w	JmpTo6_loc_1978E
00027BBA                            ;	btst	#6,status(a0)
00027BBA                            ;	beq.s	loc_2B352
00027BBA                            ;	bsr.s	loc_2B35C
00027BBA                            
00027BBA                            loc_2B352:
00027BBA 43F9 0000 0000             	lea	(off_2B432).l,a1
00027BC0 6000 0000                  	bra.w	JmpTo9_AnimateSprite
00027BC4                            ; ===========================================================================
00027BC4                            
00027BC4                            loc_2B35C:
00027BC4 317C 0300 001C             	move.w	#$300,anim(a0)
00027BCA 337C F000 0010             	move.w	#-$1000,x_vel(a1)
00027BD0 5069 0008                  	addq.w	#8,x_pos(a1)
00027BD4 08E9 0000 0022             	bset	#0,status(a1)
00027BDA 3028 0008                  	move.w	x_pos(a0),d0
00027BDE 9069 0008                  	sub.w	x_pos(a1),d0
00027BE2 6400                       	bcc.s	loc_2B392
00027BE4 08A9 0000 0022             	bclr	#0,status(a1)
00027BEA 0469 0010 0008             	subi.w	#$10,x_pos(a1)
00027BF0 4469 0010                  	neg.w	x_vel(a1)
00027BF4 317C 0400 001C             	move.w	#$400,anim(a0)
00027BFA                            
00027BFA                            loc_2B392:
00027BFA 337C 000F 002E             	move.w	#$F,move_lock(a1)
00027C00 3369 0010 0020             	move.w	x_vel(a1),inertia(a1)
00027C06 137C 000E 0016             	move.b	#$E,y_radius(a1)
00027C0C 137C 0007 0017             	move.b	#7,x_radius(a1)
00027C12 137C 0002 001C             	move.b	#2,anim(a1)
00027C18 08E9 0002 0022             	bset	#2,status(a1)
00027C1E 6600                       	bne.s	loc_2B3BC
00027C20 5A69 000C                  	addq.w	#5,y_pos(a1)
00027C24                            
00027C24                            loc_2B3BC:
00027C24 303C 00DB                  	move.w	#$DB,d0
00027C28 4EF9 0000 3212             	jmp	(PlaySound).l
00027C2E                            ; ===========================================================================
00027C2E                            byte_2B3C6:
00027C2E 0707 0707 0707 0708 090A+  	dc.b   7,  7,  7,  7,  7,  7,  7,  8,  9, $A, $B, $A,  9,  8,  7,  6
00027C3E 0504 0302 0100 FFFE FDFC+  	dc.b   5,  4,  3,  2,  1,  0,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6; 16
00027C4E F5F4 F3F2                  	dc.b $F5,$F4,$F3,$F2	; 32
00027C52                            byte_2B3EA:
00027C52 0606 0606 0606 0708 0909+  	dc.b   6,  6,  6,  6,  6,  6,  7,  8,  9,  9,  9,  9,  9,  9,  8,  8
00027C62 0808 0808 0707 0707 0606+  	dc.b   8,  8,  8,  8,  7,  7,  7,  7,  6,  6,  6,  6,  5,  5,  4,  4; 16
00027C72 0404 0404                  	dc.b   4,  4,  4,  4	; 32
00027C76                            byte_2B40E:
00027C76 0505 0505 0506 0708 090A+  	dc.b   5,  5,  5,  5,  5,  6,  7,  8,  9, $A, $B, $B, $C, $C, $D, $D
00027C86 0E0E 0F0F 1010 1111 1212+  	dc.b  $E, $E, $F, $F,$10,$10,$11,$11,$12,$12,$11,$11,$10,$10,$10,$10; 16
00027C96 1010 1010                  	dc.b $10,$10,$10,$10	; 32
00027C9A                            
00027C9A                            ; animation script
00027C9A                            off_2B432:
00027C9A 0000                       	dc.w byte_2B43C-off_2B432
00027C9C 0000                       	dc.w byte_2B43F-off_2B432; 1
00027C9E 0000                       	dc.w byte_2B445-off_2B432; 2
00027CA0 0000                       	dc.w byte_2B448-off_2B432; 3
00027CA2 0000                       	dc.w byte_2B451-off_2B432; 4
00027CA4 0F00 FF                    byte_2B43C:	dc.b  $F,  0,$FF
00027CA7 0301 0201 FD00             byte_2B43F:	dc.b   3,  1,  2,  1,$FD,  0
00027CAD 0F04 FF                    byte_2B445:	dc.b  $F,  4,$FF
00027CB0 0005 0403 0303 03FD 02     byte_2B448:	dc.b   0,  5,  4,  3,  3,  3,  3,$FD,  2
00027CB9 0003 0405 0505 05FD 02     byte_2B451:	dc.b   0,  3,  4,  5,  5,  5,  5,$FD,  2
00027CC2                            	even
00027CC2                            ; ----------------------------------------------------------------------------
00027CC2                            ; sprite mappings
00027CC2                            ; ----------------------------------------------------------------------------
00027CC2                            Map_obj10:
00027CC2                            Obj86_MapUnc_2B45A:	include "mappings/sprite/Flippers.asm"
00027CC2                            ; --------------------------------------------------------------------------------
00027CC2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00027CC2                            ; --------------------------------------------------------------------------------
00027CC2                            
00027CC2                            SME_ifQsP:	
00027CC2 0000 0000                  		dc.w SME_ifQsP_C-SME_ifQsP, SME_ifQsP_1C-SME_ifQsP	
00027CC6 0000 0000                  		dc.w SME_ifQsP_27-SME_ifQsP, SME_ifQsP_37-SME_ifQsP	
00027CCA 0000 0000                  		dc.w SME_ifQsP_47-SME_ifQsP, SME_ifQsP_5C-SME_ifQsP	
00027CCE 03                         SME_ifQsP_C:	dc.b 3	
00027CCF F70B 000C E7               		dc.b $F7, $B, 0, $C, $E7	
00027CD4 FE01 0018 FF               		dc.b $FE, 1, 0, $18, $FF	
00027CD9 0105 001A 07               		dc.b 1, 5, 0, $1A, 7	
00027CDE 02                         SME_ifQsP_1C:	dc.b 2	
00027CDF F80D 0000 E8               		dc.b $F8, $D, 0, 0, $E8	
00027CE4 F805 0008 08               		dc.b $F8, 5, 0, 8, 8	
00027CE9 03                         SME_ifQsP_27:	dc.b 3	
00027CEA E90B 100C E7               		dc.b $E9, $B, $10, $C, $E7	
00027CEF F201 1018 FF               		dc.b $F2, 1, $10, $18, $FF	
00027CF4 EF05 101A 07               		dc.b $EF, 5, $10, $1A, 7	
00027CF9 03                         SME_ifQsP_37:	dc.b 3	
00027CFA E709 0024 F1               		dc.b $E7, 9, 0, $24, $F1	
00027CFF F709 002A EF               		dc.b $F7, 9, 0, $2A, $EF	
00027D04 0705 0030 EF               		dc.b 7, 5, 0, $30, $EF	
00027D09 04                         SME_ifQsP_47:	dc.b 4	
00027D0A E803 001E F8               		dc.b $E8, 3, 0, $1E, $F8	
00027D0F E803 081E 00               		dc.b $E8, 3, 8, $1E, 0	
00027D14 0801 0022 F8               		dc.b 8, 1, 0, $22, $F8	
00027D19 0801 0822 00               		dc.b 8, 1, 8, $22, 0	
00027D1E 03                         SME_ifQsP_5C:	dc.b 3	
00027D1F E709 0824 F7               		dc.b $E7, 9, 8, $24, $F7	
00027D24 F709 082A F9               		dc.b $F7, 9, 8, $2A, $F9	
00027D29 0705 0830 01               		dc.b 7, 5, 8, $30, 1	
00027D2E                            		even
00027D2E                            		even
00027D2E                            	even
00027D2E                            ; ===========================================================================
00027D2E 4E71                       	nop
00027D30                            
00027D30                            JmpTo27_MarkObjGone:
00027D30 4EF9 0001 882E             	jmp	MarkObjGone
00027D36                            ; ===========================================================================
00027D36                            
00027D36                            JmpTo9_AnimateSprite:
00027D36 4EF9 0001 2618             	jmp	AnimateSprite
00027D3C                            ; ===========================================================================
00027D3C                            
00027D3C                            ;JmpTo50_Adjust2PArtPointer
00027D3C                            ;	jmp	Adjust2PArtPointer
00027D3C                            ; ===========================================================================
00027D3C                            
00027D3C                            JmpTo11_CalcSine:
00027D3C 4EF9 0000 8DA4             	jmp	(CalcSine).l
00027D42                            ; ===========================================================================
00027D42                            
00027D42                            JmpTo6_loc_1978E:
00027D42 4EF9 0001 8F12             	jmp	SolidObject
00027D48                            ; ===========================================================================
00027D48                            
00027D48                            JmpTo2_SolidObject86_30:
00027D48 4EF9 0001 8FA6             	jmp	SolidObject71
00027D4E                            ; ===========================================================================
00027D4E                            ; ---------------------------------------------------------------------------
00027D4E                            ; Subroutine to	animate	level graphics
00027D4E                            ; ---------------------------------------------------------------------------
00027D4E                            
00027D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00027D4E                            
00027D4E                            
00027D4E                            AniArt_Load:				; XREF: Demo_Time; loc_F54
00027D4E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00027D52 6600                       		bne.s	AniArt_Pause	; if yes, branch
00027D54 4DF9 00C0 0000             		lea	($C00000).l,a6
00027D5A 4EB9 0000 0000             		jsr	AniArt_GiantRing
00027D60 7000                       		moveq	#0,d0
00027D62 1038 FE10                  		move.b	($FFFFFE10).w,d0
00027D66 D040                       		add.w	d0,d0
00027D68 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
00027D6C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00027D70                            ; ===========================================================================
00027D70                            
00027D70                            AniArt_Pause:
00027D70 4E75                       		rts	
00027D72                            ; End of function AniArt_Load
00027D72                            
00027D72                            ; ===========================================================================
00027D72 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
00027D76 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
00027D7A 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00027D7E 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_none-AniArt_Index
00027D82                            ; ===========================================================================
00027D82                            ; ---------------------------------------------------------------------------
00027D82                            ; Animated pattern routine - Green Hill
00027D82                            ; ---------------------------------------------------------------------------
00027D82                            
00027D82                            AniArt_GHZ:				; XREF: AniArt_Index
00027D82 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00027D86 6A00                       		bpl.s	loc_1C08A
00027D88 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
00027D8E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
00027D94 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00027D98 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00027D9C 0240 0001                  		andi.w	#1,d0
00027DA0 6700                       		beq.s	loc_1C078
00027DA2 43E9 0100                  		lea	$100(a1),a1	; load next frame
00027DA6                            
00027DA6                            loc_1C078:
00027DA6 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
00027DB0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
00027DB4 6000 0000                  		bra.w	LoadTiles
00027DB8                            ; ===========================================================================
00027DB8                            
00027DB8                            loc_1C08A:
00027DB8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00027DBC 6A00                       		bpl.s	loc_1C0C0
00027DBE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
00027DC4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00027DCA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00027DCE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00027DD2 0240 0001                  		andi.w	#1,d0
00027DD6 6700                       		beq.s	loc_1C0AE
00027DD8 43E9 0200                  		lea	$200(a1),a1
00027DDC                            
00027DDC                            loc_1C0AE:
00027DDC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
00027DE6 323C 000F                  		move.w	#$F,d1
00027DEA 6000 0000                  		bra.w	LoadTiles
00027DEE                            ; ===========================================================================
00027DEE                            
00027DEE                            loc_1C0C0:
00027DEE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00027DF2 6A00                       		bpl.s	locret_1C10C
00027DF4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00027DFA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00027DFE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
00027E02 0240 0003                  		andi.w	#3,d0
00027E06 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
00027E0A 0800 0000                  		btst	#0,d0
00027E0E 6600                       		bne.s	loc_1C0E8
00027E10 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
00027E16                            
00027E16                            loc_1C0E8:
00027E16 EF48                       		lsl.w	#7,d0
00027E18 3200                       		move.w	d0,d1
00027E1A D040                       		add.w	d0,d0
00027E1C D041                       		add.w	d1,d0
00027E1E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00027E28 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00027E2E 43F1 0000                  		lea	(a1,d0.w),a1
00027E32 323C 000B                  		move.w	#$B,d1
00027E36 4EB9 0000 0000             		jsr	LoadTiles
00027E3C                            
00027E3C                            locret_1C10C:
00027E3C 4E75                       		rts	
00027E3E                            ; ===========================================================================
00027E3E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
00027E42                            ; ===========================================================================
00027E42                            ; ---------------------------------------------------------------------------
00027E42                            ; Animated pattern routine - Marble
00027E42                            ; ---------------------------------------------------------------------------
00027E42                            
00027E42                            AniArt_MZ:				; XREF: AniArt_Index
00027E42 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00027E46 6A00                       		bpl.s	loc_1C150
00027E48 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
00027E4E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
00027E54 7000                       		moveq	#0,d0
00027E56 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00027E5A 5200                       		addq.b	#1,d0
00027E5C 0C00 0003                  		cmpi.b	#3,d0
00027E60 6600                       		bne.s	loc_1C134
00027E62 7000                       		moveq	#0,d0
00027E64                            
00027E64                            loc_1C134:
00027E64 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
00027E68 C0FC 0100                  		mulu.w	#$100,d0
00027E6C D2C0                       		adda.w	d0,a1
00027E6E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
00027E78 323C 0007                  		move.w	#7,d1
00027E7C 4EB9 0000 0000             		jsr	LoadTiles
00027E82                            
00027E82                            loc_1C150:
00027E82 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00027E86 6A00                       		bpl.s	loc_1C1AE
00027E88 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
00027E8E 7000                       		moveq	#0,d0
00027E90 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00027E94 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
00027E9A EE58                       		ror.w	#7,d0
00027E9C D8C0                       		adda.w	d0,a4
00027E9E 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
00027EA8 7600                       		moveq	#0,d3
00027EAA 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
00027EAE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00027EB2 1638 FE68                  		move.b	($FFFFFE68).w,d3
00027EB6 343C 0003                  		move.w	#3,d2
00027EBA                            
00027EBA                            loc_1C188:
00027EBA 3003                       		move.w	d3,d0
00027EBC D040                       		add.w	d0,d0
00027EBE 0240 001E                  		andi.w	#$1E,d0
00027EC2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
00027EC8 3033 0000                  		move.w	(a3,d0.w),d0
00027ECC 47F3 0000                  		lea	(a3,d0.w),a3
00027ED0 224C                       		movea.l	a4,a1
00027ED2 323C 001F                  		move.w	#$1F,d1
00027ED6 4E93                       		jsr	(a3)
00027ED8 5843                       		addq.w	#4,d3
00027EDA 51CA FFDE                  		dbf	d2,loc_1C188
00027EDE 4E75                       		rts	
00027EE0                            ; ===========================================================================
00027EE0                            
00027EE0                            loc_1C1AE:
00027EE0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00027EE4 6A00 0000                  		bpl.w	locret_1C1EA
00027EE8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00027EEE 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
00027EF4 7000                       		moveq	#0,d0
00027EF6 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
00027EFA 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
00027EFE 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
00027F04 C0FC 00C0                  		mulu.w	#$C0,d0
00027F08 D2C0                       		adda.w	d0,a1
00027F0A 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
00027F14 323C 0005                  		move.w	#5,d1
00027F18 6000 0000                  		bra.w	LoadTiles
00027F1C                            ; ===========================================================================
00027F1C                            
00027F1C                            locret_1C1EA:
00027F1C 4E75                       		rts	
00027F1E                            ; ===========================================================================
00027F1E                            ; ---------------------------------------------------------------------------
00027F1E                            ; Animated pattern routine - Scrap Brain
00027F1E                            ; ---------------------------------------------------------------------------
00027F1E                            
00027F1E                            AniArt_SBZ:				; XREF: AniArt_Index
00027F1E 7000                       		moveq	#0,d0
00027F20 1038 FE11                  		move.b	($FFFFFE11).w,d0
00027F24 D040                       		add.w	d0,d0
00027F26 303B 0000                  		move.w	AniArt_SBZ_Index(pc,d0.w),d0
00027F2A 4EFB 0000                  		jmp	AniArt_SBZ_Index(pc,d0.w)
00027F2E                            
00027F2E                            AniArt_SBZ_Index:
00027F2E 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index
00027F30 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
00027F32 0000                       		dc.w AniArt_SBZIn-AniArt_SBZ_Index
00027F34 0000                       		dc.w AniArt_SBZOut-AniArt_SBZ_Index ; this if you have a 4th SB act using outside bg
00027F36                            AniArt_SBZIn:
00027F36 4E75                       		rts
00027F38                            
00027F38                            AniArt_SBZOut:
00027F38                            ; ===========================================================================
00027F38                            
00027F38                            loc_1C1F8:
00027F38 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00027F3C 6A00                       		bpl.s	loc_1C250
00027F3E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
00027F44 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
00027F4A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
00027F54 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00027F58 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
00027F5C 0240 0007                  		andi.w	#7,d0
00027F60 6700                       		beq.s	loc_1C234
00027F62 5340                       		subq.w	#1,d0
00027F64 C0FC 0180                  		mulu.w	#$180,d0
00027F68 43F1 0000                  		lea	(a1,d0.w),a1
00027F6C 323C 000B                  		move.w	#$B,d1
00027F70 6000 0000                  		bra.w	LoadTiles
00027F74                            ; ===========================================================================
00027F74                            
00027F74                            loc_1C234:
00027F74 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
00027F7A                            
00027F7A                            loc_1C23A:
00027F7A 323C 0005                  		move.w	#5,d1
00027F7E 4EB9 0000 0000             		jsr	LoadTiles
00027F84 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00027F8A 323C 0005                  		move.w	#5,d1
00027F8E 6000 0000                  		bra.w	LoadTiles
00027F92                            ; ===========================================================================
00027F92                            
00027F92                            loc_1C250:
00027F92 4A38 F7B5                  		tst.b	($FFFFF7B5).w
00027F96 6700                       		beq.s	loc_1C25C
00027F98 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00027F9C 6000                       		bra.s	locret_1C2A0
00027F9E                            ; ===========================================================================
00027F9E                            
00027F9E                            loc_1C25C:
00027F9E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00027FA2 6A00                       		bpl.s	locret_1C2A0
00027FA4 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00027FAA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00027FB0 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
00027FBA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00027FBE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00027FC2 0240 0007                  		andi.w	#7,d0
00027FC6 6700                       		beq.s	loc_1C298
00027FC8 5340                       		subq.w	#1,d0
00027FCA C0FC 0180                  		mulu.w	#$180,d0
00027FCE 43F1 0000                  		lea	(a1,d0.w),a1
00027FD2 323C 000B                  		move.w	#$B,d1
00027FD6 6000 0000                  		bra.w	LoadTiles
00027FDA                            ; ===========================================================================
00027FDA                            
00027FDA                            loc_1C298:
00027FDA 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
00027FE0 6098                       		bra.s	loc_1C23A
00027FE2                            ; ===========================================================================
00027FE2                            
00027FE2                            locret_1C2A0:
00027FE2 4E75                       		rts	
00027FE4                            ; ===========================================================================
00027FE4                            ; ---------------------------------------------------------------------------
00027FE4                            ; Animated pattern routine - ending sequence
00027FE4                            ; ---------------------------------------------------------------------------
00027FE4                            
00027FE4                            AniArt_Ending:				; XREF: AniArt_Index
00027FE4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00027FE8 6A00                       		bpl.s	loc_1C2F4
00027FEA 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00027FF0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
00027FF6 45F8 9400                  		lea	($FFFF9400).w,a2
00027FFA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
00027FFE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00028002 0240 0001                  		andi.w	#1,d0
00028006 6700                       		beq.s	loc_1C2CE
00028008 43E9 0200                  		lea	$200(a1),a1
0002800C 45EA 0200                  		lea	$200(a2),a2
00028010                            
00028010                            loc_1C2CE:
00028010 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0002801A 323C 000F                  		move.w	#$F,d1
0002801E 4EB9 0000 0000             		jsr	LoadTiles
00028024 224A                       		movea.l	a2,a1
00028026 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
00028030 323C 000F                  		move.w	#$F,d1
00028034 6000 0000                  		bra.w	LoadTiles
00028038                            ; ===========================================================================
00028038                            
00028038                            loc_1C2F4:
00028038 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0002803C 6A00                       		bpl.s	loc_1C33C
0002803E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00028044 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00028048 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0002804C 0240 0007                  		andi.w	#7,d0
00028050 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
00028054 EF48                       		lsl.w	#7,d0
00028056 3200                       		move.w	d0,d1
00028058 D040                       		add.w	d0,d0
0002805A D041                       		add.w	d1,d0
0002805C 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00028066 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0002806C 43F1 0000                  		lea	(a1,d0.w),a1
00028070 323C 000B                  		move.w	#$B,d1
00028074 6000 0000                  		bra.w	LoadTiles
00028078                            ; ===========================================================================
00028078 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
00028080                            ; ===========================================================================
00028080                            
00028080                            loc_1C33C:
00028080 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
00028084 6A00                       		bpl.s	loc_1C37A
00028086 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0002808C 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
00028090 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
00028094 0240 0003                  		andi.w	#3,d0
00028098 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0002809C E148                       		lsl.w	#8,d0
0002809E D040                       		add.w	d0,d0
000280A0 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
000280AA 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
000280AE 43F1 0000                  		lea	(a1,d0.w),a1
000280B2 323C 000F                  		move.w	#$F,d1
000280B6 6000 0000                  		bra.w	LoadTiles
000280BA                            ; ===========================================================================
000280BA 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
000280BE                            ; ===========================================================================
000280BE                            
000280BE                            loc_1C37A:
000280BE 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
000280C2 6A00                       		bpl.s	locret_1C3B4
000280C4 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
000280CA 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
000280CE 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
000280D2 0240 0003                  		andi.w	#3,d0
000280D6 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
000280DA E148                       		lsl.w	#8,d0
000280DC D040                       		add.w	d0,d0
000280DE 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
000280E8 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
000280EC 43F1 0000                  		lea	(a1,d0.w),a1
000280F0 323C 000F                  		move.w	#$F,d1
000280F4 6000 0000                  		bra.w	LoadTiles
000280F8                            ; ===========================================================================
000280F8                            
000280F8                            locret_1C3B4:
000280F8 4E75                       		rts	
000280FA                            ; ===========================================================================
000280FA                            
000280FA                            AniArt_none:				; XREF: AniArt_Index
000280FA 4E75                       		rts	
000280FC                            
000280FC                            ; ---------------------------------------------------------------------------
000280FC                            ; Subroutine to	load (d1 - 1) 8x8 tiles
000280FC                            ; ---------------------------------------------------------------------------
000280FC                            
000280FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000280FC                            
000280FC                            
000280FC                            LoadTiles:
000280FC 2C99                       		move.l	(a1)+,(a6)
000280FE 2C99                       		move.l	(a1)+,(a6)
00028100 2C99                       		move.l	(a1)+,(a6)
00028102 2C99                       		move.l	(a1)+,(a6)
00028104 2C99                       		move.l	(a1)+,(a6)
00028106 2C99                       		move.l	(a1)+,(a6)
00028108 2C99                       		move.l	(a1)+,(a6)
0002810A 2C99                       		move.l	(a1)+,(a6)
0002810C 51C9 FFEE                  		dbf	d1,LoadTiles
00028110 4E75                       		rts	
00028112                            ; End of function LoadTiles
00028112                            
00028112                            ; ===========================================================================
00028112                            ; ---------------------------------------------------------------------------
00028112                            ; Animated pattern routine - more Marble Zone
00028112                            ; ---------------------------------------------------------------------------
00028112 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
00028116 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0002811A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0002811E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
00028122 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
00028126 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0002812A 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0002812E 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
00028132                            ; ===========================================================================
00028132                            
00028132                            loc_1C3EE:				; XREF: AniArt_MZextra
00028132 2C91                       		move.l	(a1),(a6)
00028134 43E9 0010                  		lea	x_vel(a1),a1
00028138 51C9 FFF8                  		dbf	d1,loc_1C3EE
0002813C 4E75                       		rts	
0002813E                            ; ===========================================================================
0002813E                            
0002813E                            loc_1C3FA:				; XREF: AniArt_MZextra
0002813E 2029 0002                  		move.l	2(a1),d0
00028142 1029 0001                  		move.b	1(a1),d0
00028146 E098                       		ror.l	#8,d0
00028148 2C80                       		move.l	d0,(a6)
0002814A 43E9 0010                  		lea	x_vel(a1),a1
0002814E 51C9 FFEE                  		dbf	d1,loc_1C3FA
00028152 4E75                       		rts	
00028154                            ; ===========================================================================
00028154                            
00028154                            loc_1C410:				; XREF: AniArt_MZextra
00028154 2CA9 0002                  		move.l	2(a1),(a6)
00028158 43E9 0010                  		lea	x_vel(a1),a1
0002815C 51C9 FFF6                  		dbf	d1,loc_1C410
00028160 4E75                       		rts	
00028162                            ; ===========================================================================
00028162                            
00028162                            loc_1C41E:				; XREF: AniArt_MZextra
00028162 2029 0004                  		move.l	4(a1),d0
00028166 1029 0003                  		move.b	3(a1),d0
0002816A E098                       		ror.l	#8,d0
0002816C 2C80                       		move.l	d0,(a6)
0002816E 43E9 0010                  		lea	x_vel(a1),a1
00028172 51C9 FFEE                  		dbf	d1,loc_1C41E
00028176 4E75                       		rts	
00028178                            ; ===========================================================================
00028178                            
00028178                            loc_1C434:				; XREF: AniArt_MZextra
00028178 2CA9 0004                  		move.l	4(a1),(a6)
0002817C 43E9 0010                  		lea	x_vel(a1),a1
00028180 51C9 FFF6                  		dbf	d1,loc_1C434
00028184 4E75                       		rts	
00028186                            ; ===========================================================================
00028186                            
00028186                            loc_1C442:				; XREF: AniArt_MZextra
00028186 2029 0006                  		move.l	6(a1),d0
0002818A 1029 0005                  		move.b	5(a1),d0
0002818E E098                       		ror.l	#8,d0
00028190 2C80                       		move.l	d0,(a6)
00028192 43E9 0010                  		lea	x_vel(a1),a1
00028196 51C9 FFEE                  		dbf	d1,loc_1C442
0002819A 4E75                       		rts	
0002819C                            ; ===========================================================================
0002819C                            
0002819C                            loc_1C458:				; XREF: AniArt_MZextra
0002819C 2CA9 0006                  		move.l	6(a1),(a6)
000281A0 43E9 0010                  		lea	x_vel(a1),a1
000281A4 51C9 FFF6                  		dbf	d1,loc_1C458
000281A8 4E75                       		rts	
000281AA                            ; ===========================================================================
000281AA                            
000281AA                            loc_1C466:				; XREF: AniArt_MZextra
000281AA 2029 0008                  		move.l	8(a1),d0
000281AE 1029 0007                  		move.b	7(a1),d0
000281B2 E098                       		ror.l	#8,d0
000281B4 2C80                       		move.l	d0,(a6)
000281B6 43E9 0010                  		lea	x_vel(a1),a1
000281BA 51C9 FFEE                  		dbf	d1,loc_1C466
000281BE 4E75                       		rts	
000281C0                            ; ===========================================================================
000281C0                            
000281C0                            loc_1C47C:				; XREF: AniArt_MZextra
000281C0 2CA9 0008                  		move.l	8(a1),(a6)
000281C4 43E9 0010                  		lea	x_vel(a1),a1
000281C8 51C9 FFF6                  		dbf	d1,loc_1C47C
000281CC 4E75                       		rts	
000281CE                            ; ===========================================================================
000281CE                            
000281CE                            loc_1C48A:				; XREF: AniArt_MZextra
000281CE 2029 000A                  		move.l	$A(a1),d0
000281D2 1029 0009                  		move.b	9(a1),d0
000281D6 E098                       		ror.l	#8,d0
000281D8 2C80                       		move.l	d0,(a6)
000281DA 43E9 0010                  		lea	x_vel(a1),a1
000281DE 51C9 FFEE                  		dbf	d1,loc_1C48A
000281E2 4E75                       		rts	
000281E4                            ; ===========================================================================
000281E4                            
000281E4                            loc_1C4A0:				; XREF: AniArt_MZextra
000281E4 2CA9 000A                  		move.l	$A(a1),(a6)
000281E8 43E9 0010                  		lea	x_vel(a1),a1
000281EC 51C9 FFF6                  		dbf	d1,loc_1C4A0
000281F0 4E75                       		rts	
000281F2                            ; ===========================================================================
000281F2                            
000281F2                            loc_1C4AE:				; XREF: AniArt_MZextra
000281F2 2029 000C                  		move.l	$C(a1),d0
000281F6 1029 000B                  		move.b	$B(a1),d0
000281FA E098                       		ror.l	#8,d0
000281FC 2C80                       		move.l	d0,(a6)
000281FE 43E9 0010                  		lea	x_vel(a1),a1
00028202 51C9 FFEE                  		dbf	d1,loc_1C4AE
00028206 4E75                       		rts	
00028208                            ; ===========================================================================
00028208                            
00028208                            loc_1C4C4:				; XREF: AniArt_MZextra
00028208 2CA9 000C                  		move.l	$C(a1),(a6)
0002820C 43E9 0010                  		lea	x_vel(a1),a1
00028210 51C9 FFF6                  		dbf	d1,loc_1C4C4
00028214 4E75                       		rts	
00028216                            ; ===========================================================================
00028216                            
00028216                            loc_1C4D2:				; XREF: AniArt_MZextra
00028216 2029 000C                  		move.l	$C(a1),d0
0002821A E198                       		rol.l	#8,d0
0002821C 1011                       		move.b	0(a1),d0
0002821E 2C80                       		move.l	d0,(a6)
00028220 43E9 0010                  		lea	x_vel(a1),a1
00028224 51C9 FFF0                  		dbf	d1,loc_1C4D2
00028228 4E75                       		rts	
0002822A                            ; ===========================================================================
0002822A                            
0002822A                            loc_1C4E8:				; XREF: AniArt_MZextra
0002822A 3CA9 000E                  		move.w	$E(a1),(a6)
0002822E 3C91                       		move.w	0(a1),(a6)
00028230 43E9 0010                  		lea	x_vel(a1),a1
00028234 51C9 FFF4                  		dbf	d1,loc_1C4E8
00028238 4E75                       		rts	
0002823A                            ; ===========================================================================
0002823A                            
0002823A                            loc_1C4FA:				; XREF: AniArt_MZextra
0002823A 2011                       		move.l	0(a1),d0
0002823C 1029 000F                  		move.b	$F(a1),d0
00028240 E098                       		ror.l	#8,d0
00028242 2C80                       		move.l	d0,(a6)
00028244 43E9 0010                  		lea	x_vel(a1),a1
00028248 51C9 FFF0                  		dbf	d1,loc_1C4FA
0002824C 4E75                       		rts	
0002824E                            
0002824E                            ; ---------------------------------------------------------------------------
0002824E                            ; Animated pattern routine - giant ring
0002824E                            ; ---------------------------------------------------------------------------
0002824E                            
0002824E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002824E                            
0002824E                            
0002824E                            AniArt_GiantRing:			; XREF: AniArt_Load
0002824E 4A78 F7BE                  		tst.w	($FFFFF7BE).w
00028252 6600                       		bne.s	loc_1C518
00028254 4E75                       		rts	
00028256                            ; ===========================================================================
00028256                            
00028256                            loc_1C518:
00028256 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0002825C 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
00028262 7000                       		moveq	#0,d0
00028264 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
00028268 43F1 0000                  		lea	(a1,d0.w),a1
0002826C 0640 8000                  		addi.w	#$8000,d0
00028270 E588                       		lsl.l	#2,d0
00028272 E448                       		lsr.w	#2,d0
00028274 0040 4000                  		ori.w	#$4000,d0
00028278 4840                       		swap	d0
0002827A 2D40 0004                  		move.l	d0,4(a6)
0002827E 323C 000D                  		move.w	#$D,d1
00028282 6000 FE78                  		bra.w	LoadTiles
00028286                            ; End of function AniArt_GiantRing
00028286                            ;-----------------------------------------------------------------------------------------------
00028286                            ; Code to move the HUD when the level starts
00028286                            ;-----------------------------------------------------------------------------------------------
00028286                            HudMove_DisplayCol:
00028286 4EB9 0001 5BD6             							jsr     SpeedToPos			; Call the routine to move an object
0002828C 0C68 0090 0008             							cmpi.w  #$90,8(a0)			; Is the position equal to $90?
00028292 6C00                       							bge.s   HUD_NoMove			; if yes, branch
00028294 317C 0C00 0010             							move.w  #$C00,$10(a0)		; make the object move to the right
0002829A 6000 0000                  							bra     HudMove_Rts1			; branch to the rest of the code
0002829E                            HUD_NoMove:												; XREF: HudMove_DisplayCol
0002829E 4268 0010                  							clr.w   $10(a0)				; Clear X movement
000282A2 317C 0090 0008             							move.w  #$90,8(a0)			; Move HUD to $90 to make sure it's at the
000282A8                            														; right X coordinate
000282A8                            HudMove_Rts1:											; XREF: Hudmove_DisplayCol
000282A8 4E75                       							rts							; return
000282AA                            
000282AA                            ; ===========================================================================
000282AA                            ; ===========================================================================
000282AA                            ; ---------------------------------------------------------------------------
000282AA                            ; Object 21 - SCORE, TIME, RINGS
000282AA                            ; ---------------------------------------------------------------------------
000282AA                            
000282AA                            Obj21:					; XREF: Obj_Index
000282AA 0C38 003A D5C0             		cmpi.b	#$3A,($FFFFD5C0).w	; is the level finished?
000282B0 6600                       		bne.s	Obj21_HUD	; if not, branch
000282B2 4EF9 0001 5BF0             		jmp		DeleteObject
000282B8                            Obj21_HUD:
000282B8 4EB9 0001 5C18             		jsr		LoadLivesCounterArt
000282BE                            ;		tst.w	(Game_paused).w	; is the game paused?
000282BE                            ;		beq.s	Obj21_HUD	; if not, branch
000282BE                            ;		jmp		Obj04
000282BE                            ;Obj21_HUD:
000282BE 7000                       		moveq	#0,d0
000282C0 1028 0024                  		move.b	routine(a0),d0
000282C4 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
000282C8 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
000282CC                            ; ===========================================================================
000282CC 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
000282CE 0000                       		dc.w Obj21_Flash-Obj21_Index
000282D0                            ; ===========================================================================
000282D0                            
000282D0                            Obj21_Main:				; XREF: Obj21_Main
000282D0 5428 0024                  		addq.b	#2,routine(a0)
000282D4 317C 0000 0008             		move.w	#0,8(a0)
000282DA 317C 0108 000A             		move.w	#$108,$A(a0)
000282E0 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
000282E8                            ;	if HUDInSpecialStage=1	;Mercury HUD in Special Stage
000282E8 0C38 0010 F600             		cmpi.b	#$10,(Game_Mode).w ; test if in Special Stage Mode
000282EE 6600                       		bne.s	@skipload	; if yes, branch
000282F0 217C 0000 0000 0004        		move.l	#Map_obj21SS,mappings(a0)
000282F8                            	@skipload:
000282F8 317C 06CA 0002             		move.w	#$6CA,2(a0)	;Mercury HUD Centiseconds
000282FE                            
000282FE                            
000282FE                            ;	endc	;end HUD in Special Stage
000282FE 117C 0000 0001             		move.b	#0,1(a0)
00028304 117C 0000 0018             		move.b	#0,priority(a0)
0002830A                            
0002830A                            Obj21_Flash:
0002830A 0C38 0009 D000             		cmpi.b	#9,(v_player).w ; test if Special Stage Sonic is present
00028310 6700                       		beq.s	@Obj21_Flash	; if yes, branch
00028312 4EBA FF72                  		jsr      HudMove_DisplayCol
00028316 4EF9 0000 0000             		jmp		@Obj21_Flash2
0002831C                            @Obj21_Flash:
0002831C 317C 0090 0008             		move.w  #$90,8(a0)
00028322                            @Obj21_Flash2:
00028322 4A78 FE20                          tst.w    ($FFFFFE20).w; do you have any rings?
00028326 6700                               beq.s    Obj21_Flash2; if not, branch
00028328 7000                               moveq    #0,d0
0002832A 0838 0003 FE05                     btst    #3,($FFFFFE05).w
00028330 6600                               bne.s    Obj21_Display
00028332 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
00028338 6600                               bne.s    Obj21_Display; if not, branch
0002833A 5440                               addq.w    #2,d0    ; make time counter flash red
0002833C 6000                               bra.s    Obj21_Display
0002833E                            ; ===========================================================================
0002833E                            
0002833E                            Obj21_Flash2:
0002833E 7000                               moveq    #0,d0
00028340 0838 0003 FE05                     btst    #3,($FFFFFE05).w
00028346 6600                               bne.s    Obj21_Display
00028348 5240                               addq.w    #1,d0    ; make ring counter flash red
0002834A 0C38 0009 FE23                     cmpi.b    #9,(Timer_minute).w; have    9 minutes elapsed?
00028350 6600                               bne.s    Obj21_Display; if not, branch
00028352 5440                               addq.w    #2,d0    ; make time counter flash red 
00028354                            		
00028354                            Obj21_Display:
00028354 1140 001A                  		move.b	d0,mapping_frame(a0)
00028358 4EF9 0001 5C3C             		jmp	DisplaySprite
0002835E                            ; ===========================================================================
0002835E                            ; ---------------------------------------------------------------------------
0002835E                            ; Sprite mappings - SCORE, TIME, RINGS
0002835E                            ; ---------------------------------------------------------------------------
0002835E                            Map_obj21:
0002835E                            	include "_maps\obj21.asm"
0002835E                            ; ---------------------------------------------------------------------------
0002835E                            ; Sprite mappings - SCORE, TIME, RINGS
0002835E                            ; ---------------------------------------------------------------------------
0002835E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
00028362 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
00028366                            		
00028366                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
00028366 0C                         byte_1C5BC:	dc.b $C
00028367 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
0002836C 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028371 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028376 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
0002837B 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028380 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
00028385 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
0002838A A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
0002838F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
00028394 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028399 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
0002839E 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
000283A3 00                         		dc.b 0
000283A4 0A                         byte_1C5F0:	dc.b $A
000283A5 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
000283AA 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
000283AF 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
000283B4 900D A00E 00               		dc.b $90, $D, $A0, $E,	0	; TIME
000283B9 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
000283BE 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
000283C3 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
000283C8                            ;		dc.b $A0, $D, $A0, 8, 0		; RING
000283C8                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
000283C8 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
000283CD 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
000283D2 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
000283D7 00                         		dc.b 0
000283D8 0B                         byte_1C624:	dc.b $B
000283D9 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
000283DE 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
000283E3 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
000283E8                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
000283E8 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
000283ED 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
000283F2 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
000283F7 A00D A006 00               		dc.b $A0, $D, $A0, 8-2, 0		; RING
000283FC A001 A000 20               		dc.b $A0, 1, $A0, 0, $20	; S
00028401 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028406 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
0002840B 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028410 00                         		dc.b 0
00028411 09                         byte_1C658:	dc.b $9
00028412 800D A000 00               		dc.b $80, $D, $A0, 0, 0		; SCOR
00028417 800D A018 20               		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
0002841C 800D A020 40               		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028421                            ;		dc.b $90, $D, $A0, $10,	0	; TIME
00028421 900D A028 28               		dc.b $90, $D, $A0, $28,	$28	; minutes : seconds
00028426 9001 A016 49               		dc.b $90, 1, $A0, $16, $49	; "
0002842B 9005 A0E4 50               		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028430                            ;		dc.b $A0, $D, $A0, 8, -2		; RING
00028430                            ;		dc.b $A0, 1, $A0, 0, $1E	; S
00028430 A009 A030 30               		dc.b $A0, 9, $A0, $30, $30	; number of rings
00028435 4005 810A 00               		dc.b $40, 5, $81, $A, 0		; lives icon
0002843A 400D A10E 10               		dc.b $40, $D, $A1, $E, $10	; lives counter
00028440 00                         		even
00028440 00                         		even
00028440                            Map_obj21SS:
00028440                            	include "_maps\obj21ss.asm"
00028440                            ; ---------------------------------------------------------------------------
00028440                            ; Sprite mappings - SCORE, TIME, RINGS
00028440                            ; ---------------------------------------------------------------------------
00028440 0000 0000                  		dc.w byte_1C5BC_SS-Map_obj21SS, byte_1C5F0_SS-Map_obj21SS
00028444 0000 0000                  		dc.w byte_1C624_SS-Map_obj21SS, byte_1C658_SS-Map_obj21SS
00028448                            		
00028448                            		; Y-Pos, layout, VDP (2bytes - plane, pallet line (2bits), flip, mirror, first tile (11bits) - ), X-Pos
00028448 05                         byte_1C5BC_SS:	dc.b 5
00028449                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028449                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028449                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028449 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
0002844E 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028453                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028453                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028453 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
00028458 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
0002845D 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028462                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028462                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028462 00                         		dc.b 0
00028463 05                         byte_1C5F0_SS:	dc.b 5
00028464                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
00028464                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
00028464                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
00028464 800D A00E 00               		dc.b $80, $D, $A0, $E,	0	; TIME
00028469 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
0002846E                            ;		dc.b $90, 1, $A0, $16, $49	; "
0002846E                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
0002846E 900D A008 00               		dc.b $90, $D, $A0, 8, 0		; RING
00028473 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
00028478 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
0002847D                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
0002847D                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
0002847D 00                         		dc.b 0
0002847E 05                         byte_1C624_SS:	dc.b 5
0002847F                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
0002847F                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
0002847F                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
0002847F 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
00028484 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
00028489                            ;		dc.b $90, 1, $A0, $16, $49	; "
00028489                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
00028489 900D A006 00               		dc.b $90, $D, $A0, 8-2, 0		; RING
0002848E 9001 A000 20               		dc.b $90, 1, $A0, 0, $20	; S
00028493 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
00028498                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
00028498                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
00028498 00                         		dc.b 0
00028499 05                         byte_1C658_SS:	dc.b 5
0002849A                            ;		dc.b $80, $D, $A0, 0, 0		; SCOR
0002849A                            ;		dc.b $80, $D, $A0, $18,	$20	; E + score left numbers
0002849A                            ;		dc.b $80, $D, $A0, $20,	$40	; score right numbers
0002849A 800D A010 00               		dc.b $80, $D, $A0, $10,	0	; TIME
0002849F 800D A028 28               		dc.b $80, $D, $A0, $28,	$28	; minutes : seconds
000284A4                            ;		dc.b $90, 1, $A0, $16, $49	; "
000284A4                            ;		dc.b $90, 5, $A0, $E4, $50	; centiseconds
000284A4 900D A008 FE               		dc.b $90, $D, $A0, 8, -2		; RING
000284A9 9001 A000 1E               		dc.b $90, 1, $A0, 0, $1E	; S
000284AE 9009 A030 30               		dc.b $90, 9, $A0, $30, $30	; number of rings
000284B3                            ;		dc.b $40, 5, $81, $A, 0		; lives icon
000284B3                            ;		dc.b $40, $D, $A1, $E, $10	; lives counter
000284B4 00                         		even
000284B4 00                         		even
000284B4                            
000284B4                            ; ----------------------------------------------------------------------------
000284B4                            ; HUD code
000284B4                            ; ----------------------------------------------------------------------------
000284B4                            loc_40804:
000284B4 4A78 FE20                  	tst.w	(Ring_count).w
000284B8 6700                       	beq.s	loc_40820
000284BA 7200                       	moveq	#0,d1
000284BC 0838 0003 FE05             	btst	#3,($FFFFFE05).w
000284C2 6600                       	bne.s	BranchTo_loc_40836
000284C4 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
000284CA 6600                       	bne.s	BranchTo_loc_40836
000284CC 5441                       	addq.w	#2,d1
000284CE                            
000284CE                            BranchTo_loc_40836:
000284CE 6000                       	bra.s	loc_40836
000284D0                            ; ===========================================================================
000284D0                            
000284D0                            loc_40820:
000284D0 7200                       	moveq	#0,d1
000284D2 0838 0003 FE05             	btst	#3,($FFFFFE05).w
000284D8 6600                       	bne.s	loc_40836
000284DA 5241                       	addq.w	#1,d1
000284DC 0C38 0009 FE23             	cmpi.b	#9,(Timer_minute).w
000284E2 6600                       	bne.s	loc_40836
000284E4 5441                       	addq.w	#2,d1
000284E6                            
000284E6                            loc_40836:
000284E6 3638 D388                  	move.w	(Object_RAM+$380+x_pos).w,d3
000284EA 343C 0108                  	move.w	#$108,d2
000284EE 43F9 0002 835E             	lea	(Map_obj21).l,a1
000284F4 367C 06CA                  	movea.w	#$6CA,a3
000284F8 D241                       	add.w	d1,d1
000284FA D2F1 1000                  	adda.w	(a1,d1.w),a1
000284FE 7200                       	moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
00028500 3219                       	move.w	(a1)+,d1
00028502 5341                       	subq.w	#1,d1
00028504 6B00                       	bmi.s	return_40858
00028506 6100 0000                  	bsr.w	JmpTo_loc_1682A
0002850A                            
0002850A                            return_40858:
0002850A 4E75                       	rts
0002850C                            ; End of function h
0002850C                            
0002850C                            ; =============== S U B	R O U T	I N E =======================================
0002850C                            
0002850C                            
0002850C                            Hud_CentSec:				; CODE XREF: HUDUpdate:
0002850C 0C38 0001 FE09             		cmpi.b	#1,($FFFFFE09).w
00028512 6600 0000                  		bne.w	Hud_CentSec2
00028516 4EF9 0000 0000             		jmp		Hud_LoadZero2
0002851C                            Hud_CentSec2:
0002851C 7200                       		moveq	#0,d1
0002851E 1238 FE25                  		move.b	(Timer_frame).w,d1
00028522 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028528 6600                       		bne.s	Hud_CentSec3			; if not, branch
0002852A 123B 1000                  		move.b	CentSecTable(pc,d1.w),d1	
0002852E 4EF9 0000 0000             		jmp		Hud_CentSec4
00028534                            Hud_CentSec3:
00028534 123B 1000                  		move.b	CentSecTablePAL(pc,d1.w),d1
00028538                            Hud_CentSec4:
00028538 203C 75C0 0003             		move.l	#$75C00003,d0
0002853E 4EF9 0000 0000             		jmp	Hud_Secs
00028544                            ; End of function Hud_CentSec
00028544                            
00028544                            ; ---------------------------------------------------------------------------
00028544 0001 0305                  CentSecTable:	dc.b 0,	1, 3, 5		; DATA XREF: Hud_CentSec2:
00028548 0608 0A0B                  		dc.b 6,	8, 10, 11
0002854C 0D0F 1012                  		dc.b 13, 15, 16, 18
00028550 1415 1719                  		dc.b 20, 21, 23, 25
00028554 1B1C 1E20                  		dc.b 27, 28, 30, 32
00028558 2123 2526                  		dc.b 33, 35, 37, 38
0002855C 282A 2B2D                  		dc.b 40, 42, 43, 45
00028560 2F31 3234                  		dc.b 47, 49, 50, 52
00028564 3637 393B                  		dc.b 54, 55, 57, 59
00028568 3C3E 4041                  		dc.b 60, 62, 64, 65
0002856C 4345 4648                  		dc.b 67, 69, 70, 72
00028570 4A4C 4D4F                  		dc.b 74, 76, 77, 79
00028574 5152 5456                  		dc.b 81, 82, 84, 86
00028578 5759 5B5C                  		dc.b 87, 89, 91, 92
0002857C 5E60 6263                  		dc.b 94, 96, 98, 99
00028580                            		even			; added this to avoid alignment errors
00028580                            
00028580                            
00028580 0002 0406                  CentSecTablePAL:	dc.b 0,	2, 4, 6		; DATA XREF: Hud_CentSec2:
00028584 080A 0C0E                  		dc.b 8,	10, 12, 14
00028588 1012 1416                  		dc.b 16, 18, 20, 22
0002858C 181A 1C1E                  		dc.b 24, 26, 28, 30
00028590 2022 2426                  		dc.b 32, 34, 36, 38
00028594 282A 2C2E                  		dc.b 40, 42, 44, 46
00028598 3032 3436                  		dc.b 48, 50, 52, 54
0002859C 383A 3C3E                  		dc.b 56, 58, 60, 62
000285A0 4042 4446                  		dc.b 64, 66, 68, 70
000285A4 484A 4C4E                  		dc.b 72, 74, 76, 78
000285A8 5052 5456                  		dc.b 80, 82, 84, 86
000285AC 585A 5C5E                  		dc.b 88, 90, 92, 94
000285B0 6063                       		dc.b 96, 99
000285B2                            		even			; added this to avoid alignment errors
000285B2                            ; ---------------------------------------------------------------------------
000285B2                            ; Add points subroutine
000285B2                            ; ---------------------------------------------------------------------------
000285B2                            
000285B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000285B2                            
000285B2                            
000285B2                            AddPoints:					  ; ...
000285B2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000285B8 47F8 FE26                  		lea	($FFFFFE26).w,a3
000285BC D193                       		add.l	d0,(a3)
000285BE 223C 000F 423F             		move.l	#999999,d1
000285C4 B293                       		cmp.l	(a3),d1
000285C6 6200                       		bhi.s	loc_339488
000285C8 2681                       		move.l	d1,(a3)
000285CA                            
000285CA                            loc_339488:					  ; ...
000285CA 2013                       		move.l	(a3),d0
000285CC B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
000285D0 6500                       		bcs.s	return_3394AA
000285D2 B0B8 FFC0                  		cmp.l	($FFFFFFC0).w,d0
000285D6 6500                       		bcs.s	return_3394AA
000285D8 06B8 0000 1388 FFC0        		add.l	#$1388,($FFFFFFC0).w
000285E0                            ;		cmpi.b	#$63,($FFFFFE12).w	; are lives at max?
000285E0                            ;		bge.s	@playbgm
000285E0 4EF9 0001 2102             		jmp		ExtraLife
000285E6                            ; ===========================================================================
000285E6                            
000285E6                            return_3394AA:
000285E6 4E75                       	rts
000285E8                            ; End of function AddPoints
000285E8                            
000285E8                            ; ---------------------------------------------------------------------------
000285E8                            ; Subroutine to update the HUD
000285E8                            ; ---------------------------------------------------------------------------
000285E8                            
000285E8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000285E8                            
000285E8                            ; sub_40D8A:
000285E8                            HudUpdate:
000285E8 4E71                       	nop
000285EA 4DF9 00C0 0000             	lea	(VDP_data_port).l,a6
000285F0                            ;	tst.w	(Two_player_mode).w
000285F0                            ;	bne.w	loc_40F50
000285F0 0C38 0001 FE09             	cmpi.b	#1,($FFFFFE09).w
000285F6 6700 0000                  	beq.w	loc_40E9A
000285FA 6100 FF10                  	bsr.w	Hud_CentSec
000285FE 4A38 FE1F                  	tst.b	(Update_HUD_score).w	; does the score need updating?
00028602 6700                       	beq.s	Hud_ChkRings	; if not, branch
00028604 4238 FE1F                  	clr.b	(Update_HUD_score).w
00028608 203C 5C80 0003             	move.l	#$5C800003,d0	; set VRAM address
0002860E 2238 FE26                  	move.l	(Score).w,d1	; load score
00028612 6100 0000                  	bsr.w	Hud_Score
00028616                            ; loc_40DBA:
00028616                            Hud_ChkRings:
00028616 4A38 FE1D                  	tst.b	(Update_HUD_rings).w	; does the ring counter need updating?
0002861A 6700                       	beq.s	Hud_ChkTime	; if not, branch
0002861C 6A00                       	bpl.s	loc_40DC6
0002861E 6100 0000                  	bsr.w	Hud_LoadZero
00028622                            ;	bsr.w	Hud_LoadZero2
00028622                            
00028622                            loc_40DC6:
00028622 4238 FE1D                  	clr.b	(Update_HUD_rings).w
00028626 203C 5F40 0003             	move.l	#$5F400003,d0
0002862C 7200                       	moveq	#0,d1
0002862E 3238 FE20                  	move.w	(Ring_count).w,d1
00028632 0C41 03E8                  	cmpi.w	#1000,d1
00028636 6500                       	blo.s	@cappedrings
00028638 323C 03E7                  	move.w	#999,d1
0002863C 31C1 FE20                  	move.w	d1,(Ring_count).w
00028640                            
00028640                            @cappedrings:
00028640 6100 0000                  	bsr.w	Hud_Rings
00028644                            ; loc_40DDA:
00028644                            Hud_ChkTime:
00028644 4A38 FE1E                  	tst.b	(Update_HUD_timer).w	; does the time need updating?
00028648 6700 0000                  	beq.w	Hud_ChkLives	; if not, branch
0002864C 4A78 F63A                  	tst.w	(Game_paused).w	; is the game paused?
00028650 6600 0000                  	bne.w	Hud_ChkLives	; if yes, branch
00028654 43F8 FE22                  	lea	(Timer).w,a1
00028658                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
00028658                            ;		cmpi.l	#$93B3B,(a1)+	; is the time 9'59"99?
00028658                            ;		bge.w	loc_40E84	; if yes, branch	; if yes, branch	;Mercury HUD In Special Stage (bsr.s => bsr.w)
00028658                            ;		move.b	(v_centstep).w,d1
00028658                            ;		addi.b	#1,d1
00028658                            ;		cmpi.b	#3,d1
00028658                            ;		bne.s	@skip
00028658                            ;		move.b	#0,d1
00028658                            		
00028658                            ;	@skip:
00028658                            ;		move.b	d1,(v_centstep).w
00028658                            ;		cmpi.b	#2,d1
00028658                            ;		beq.s	@skip2
00028658                            ;		addi.b	#1,d1
00028658                            ;		
00028658                            ;	@skip2:
00028658                            ;		add.b	d1,-(a1)
00028658                            ;		cmpi.b	#100,(a1)
00028658                            ;		bcs.s	Hud_DoCent
00028658                            ;	else
00028658 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
0002865E 6700                       	beq.s	Hud_TimeOverNotPAL			; if not, branch
00028660 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+	; is the time 9.59?
00028666 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
0002866A 4EF9 0000 0000             	jmp		Hud_TimeOverNotPAL2
00028670                            Hud_TimeOverNotPAL:
00028670 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
00028676 6C00 0000                  	bge.w	loc_40E84	; if yes, branch
0002867A                            Hud_TimeOverNotPAL2:
0002867A 5221                       	addq.b	#1,-(a1)
0002867C 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
00028682 6600                       	bne.s	Hud_ChkTimePAL
00028684 0C11 003C                  	cmpi.b	#60,(a1)
00028688 6500 0000                  	bcs.w	Hud_ChkLives
0002868C 4EF9 0000 0000             	jmp		Hud_ChkTimeNotPAL
00028692                            ;	endc	;end HUD Centiseconds
00028692                            Hud_ChkTimePAL:
00028692 0C11 0032                  	cmpi.b	#50,(a1)
00028696 6500                       	bcs.s	Hud_ChkLives
00028698                            	
00028698                            Hud_ChkTimeNotPAL:	
00028698 0C38 0009 FE23             	cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0002869E 6D00                       	blt.s	ContinueHUDU	; if not, branch
000286A0 0C38 0028 FE24             	cmpi.b	#40,(Timer_second).w
000286A6 6D00                       	blt.s	ContinueHUDU
000286A8 11FC 00D3 F00A             	move.b	#$D3,($FFFFF00A)
000286AE                            
000286AE                            ContinueHUDU:
000286AE                            ;	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
000286AE                            ;	bne.s	ContinueHUDUPAL
000286AE 12BC 0000                  	move.b	#0,(a1)
000286B2 5221                       	addq.b	#1,-(a1)
000286B4 0C11 003C                  	cmpi.b	#60,(a1)
000286B8 6500                       	bcs.s	loc_40E18
000286BA 12BC 0000                  	move.b	#0,(a1)
000286BE 5221                       	addq.b	#1,-(a1)
000286C0 0C11 0009                  	cmpi.b	#9,(a1)
000286C4 6500                       	bcs.s	loc_40E18
000286C6 12BC 0009                  	move.b	#9,(a1)
000286CA                            ;	jmp		loc_40E18
000286CA                            ;ContinueHUDUPAL:
000286CA                            ;	move.b	#0,(a1)
000286CA                            ;	addq.b	#1,-(a1)
000286CA                            ;	cmpi.b	#60,(a1)
000286CA                            ;	bcs.s	loc_40E18
000286CA                            ;	move.b	#0,(a1)
000286CA                            ;	addq.b	#1,-(a1)
000286CA                            ;	cmpi.b	#9,(a1)
000286CA                            ;	bcs.s	loc_40E18
000286CA                            ;	move.b	#9,(a1)
000286CA                            	
000286CA                            loc_40E18:		
000286CA                            
000286CA 203C 5E40 0003             	move.l	#$5E400003,d0
000286D0 7200                       	moveq	#0,d1
000286D2 1238 FE23                  	move.b	(Timer_minute).w,d1
000286D6 6100 0000                  	bsr.w	Hud_Mins
000286DA 203C 5EC0 0003             	move.l	#$5EC00003,d0
000286E0 7200                       	moveq	#0,d1
000286E2 1238 FE24                  	move.b	(Timer_second).w,d1
000286E6 6100 0000                  	bsr.w	Hud_Secs
000286EA                            ;	move.l	#$75C00003,d0
000286EA                            ;	moveq	#0,d1
000286EA                            ;	move.b	(Timer_frame).w,d1
000286EA                            ;	bsr.w	Hud_Secs
000286EA                            	
000286EA                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
000286EA                            ;Hud_DoCent:
000286EA                            ;		move.l	#$75C00003,d0	;Mercury Macros
000286EA                            ;		moveq	#0,d1
000286EA                            ;		move.b	(Timer_Centisecond).w,d1 ; load	seconds
000286EA                            ;		bsr.w	Hud_Secs
000286EA                            ;	endc	;end HUD Centiseconds
000286EA                            ; loc_40E38:
000286EA                            Hud_ChkLives:
000286EA                            ;	bsr.s	CentiSecond
000286EA 4A38 FE1C                  	tst.b	(Update_HUD_lives).w	; does the lives counter need updating?
000286EE 6700                       	beq.s	Hud_ChkBonus	; if not, branch
000286F0 4238 FE1C                  	clr.b	(Update_HUD_lives).w
000286F4 6100 0000                  	bsr.w	Hud_Lives
000286F8                            ; loc_40E46:
000286F8                            Hud_ChkBonus:
000286F8 4A38 F7D6                  		tst.b	(Update_Bonus_score).w	; do time/ring bonus counters need updating?
000286FC 6700                       		beq.s	Hud_End		; if not, branch
000286FE 4238 F7D6                  		clr.b	(Update_Bonus_score).w
00028702 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0002870C 7200                       		moveq	#0,d1
0002870E 3238 F7D2                  		move.w	(Bonus_Countdown_1).w,d1 ; load	time bonus
00028712 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
00028718 7200                       		moveq	#0,d1
0002871A 3238 F7D4                  		move.w	(Bonus_Countdown_2).w,d1 ; load	ring bonus
0002871E 0C41 2706                  		cmpi.w	#9990,d1
00028722 6500                       		blo.s	@cappedringbonus
00028724 323C 2706                  		move.w	#9990,d1
00028728                            
00028728                            @cappedringbonus:
00028728 4EB9 0000 0000             		jsr	Hud_TimeRingBonus
0002872E                            ; return_40E82:
0002872E                            Hud_End:
0002872E 4E75                       	rts
00028730                            
00028730                            ; End of function sub_23BB4
00028730                            ;Debug_Timeover:
00028730                            ;		clr.w (Timer).w
00028730                            ;		clr.b (Timer_minute).w
00028730                            ;		clr.b (Timer_Second).w
00028730                            ;		clr.b (Timer_Centisecond).w
00028730                            ;		rts
00028730                            
00028730                            ; ===========================================================================
00028730                            
00028730                            loc_40E84:
00028730 11FC 0000 FE1E             	move.b	#0,(Update_HUD_timer).w
00028736 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
0002873A 2448                       	movea.l	a0,a2
0002873C 6100 E1C6                  	bsr.w	KillCharacter
00028740 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028746 4E75                       	rts
00028748                            ; ===========================================================================
00028748                            
00028748                            loc_40E9A:
00028748 6100 0000                  	bsr.w	HudDb_XY
0002874C 6100 FDBE                  	bsr.w	Hud_CentSec
00028750 4A38 FE1D                  	tst.b	(Update_HUD_rings).w
00028754 6700                       	beq.s	loc_40EBE
00028756 6A00                       	bpl.s	loc_40EAA
00028758 6100 0000                  	bsr.w	Hud_LoadZero
0002875C                            ;	bsr.w	Hud_LoadZero2
0002875C                            
0002875C                            loc_40EAA:
0002875C 4238 FE1D                  	clr.b	(Update_HUD_rings).w
00028760 203C 5F40 0003             	move.l	#$5F400003,d0
00028766 7200                       	moveq	#0,d1
00028768 3238 FE20                  	move.w	(Ring_count).w,d1
0002876C 6100 0000                  	bsr.w	Hud_Rings
00028770                            
00028770                            loc_40EBE:
00028770 203C 5EC0 0003             	move.l	#$5EC00003,d0
00028776 7200                       	moveq	#0,d1
00028778 1238 F62C                  	move.b	($FFFFF62C).w,d1
0002877C 6100 0000                  	bsr.w	Hud_Secs
00028780 4A38 FE1C                  	tst.b	(Update_HUD_lives).w
00028784 6700                       	beq.s	loc_40EDC
00028786 4238 FE1C                  	clr.b	(Update_HUD_lives).w
0002878A 6100 0000                  	bsr.w	Hud_Lives
0002878E                            
0002878E                            loc_40EDC:
0002878E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
00028792 6700                       		beq.s	loc_40F18	; if not, branch
00028794 4238 F7D6                  		clr.b	($FFFFF7D6).w
00028798 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
000287A2 7200                       		moveq	#0,d1
000287A4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
000287A8 6100 0000                  		bsr.w	Hud_TimeRingBonus
000287AC 7200                       		moveq	#0,d1
000287AE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
000287B2 0C41 2706                  		cmpi.w	#9990,d1
000287B6 6500                       		blo.s	@cappedringbonus
000287B8 323C 2706                  		move.w	#9990,d1
000287BC                            
000287BC                            @cappedringbonus:
000287BC 6100 0000                  		bsr.w	Hud_TimeRingBonus
000287C0                            
000287C0                            loc_40F18:
000287C0 4A78 F63A                  	tst.w	(Game_paused).w
000287C4 6600                       	bne.s	return_40F4E
000287C6 43F8 FE22                  	lea	(Timer).w,a1
000287CA                            ;		move.b	(v_centstep).w,d1
000287CA                            ;		addi.b	#1,d1
000287CA                            ;		cmpi.b	#3,d1
000287CA                            ;		bne.s	@skipno2
000287CA                            ;		move.b	#0,d1
000287CA                            ;		
000287CA                            ;	@skipno2:
000287CA                            ;		move.b	d1,(v_centstep).w
000287CA                            ;		cmpi.b	#2,d1
000287CA                            ;		beq.s	@skip2no2
000287CA                            ;		addi.b	#1,d1
000287CA                            ;		
000287CA                            ;	@skip2no2:
000287CA                            ;		add.b	d1,-(a1)
000287CA                            ;		cmpi.b	#100,(a1)
000287CA                            ;		bcs.w	Hud_DoCent
000287CA 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
000287D0 6700                       	beq.s	HUpdateNPALTimeOver
000287D2 0C99 0009 3B31             	cmpi.l	#$93B31,(a1)+
000287D8 4EF9 0000 0000             	jmp		HUpdateNotPALTimeOver
000287DE                            HUpdateNPALTimeOver:
000287DE 0C99 0009 3B3B             	cmpi.l	#$93B3B,(a1)+
000287E4                            HUpdateNotPALTimeOver:
000287E4 4E71                       	nop
000287E6 5221                       	addq.b	#1,-(a1)
000287E8 0838 0006 FFF8             	btst	#6,($FFFFFFF8).w	; is Sega PAL (European)?
000287EE 6700                       	beq.s	HUpdateNotPAL
000287F0 0C11 0032                  	cmpi.b	#50,(a1)
000287F4 6500                       	bcs.s	return_40F4E
000287F6                            ;	move.b	#0,(a1)
000287F6                            ;	addq.b	#1,-(a1)
000287F6                            ;	cmpi.b	#50,(a1)
000287F6                            ;	bcs.s	return_40F4E
000287F6                            ;	move.b	#0,(a1)
000287F6                            ;	addq.b	#1,-(a1)
000287F6                            ;	cmpi.b	#9,(a1)
000287F6                            ;	bcs.s	return_40F4E
000287F6                            ;	move.b	#9,(a1)
000287F6 4EF9 0000 0000             	jmp		HUpdateNotPAL2
000287FC                            HUpdateNotPAL:
000287FC 0C11 003C                  	cmpi.b	#$3C,(a1)
00028800 6500                       	bcs.s	return_40F4E
00028802                            HUpdateNotPAL2:
00028802 12BC 0000                  	move.b	#0,(a1)
00028806 5221                       	addq.b	#1,-(a1)
00028808 0C11 003C                  	cmpi.b	#$3C,(a1)
0002880C 6500                       	bcs.s	return_40F4E
0002880E 12BC 0000                  	move.b	#0,(a1)
00028812 5221                       	addq.b	#1,-(a1)
00028814 0C11 0009                  	cmpi.b	#9,(a1)
00028818 6500                       	bcs.s	return_40F4E
0002881A 12BC 0009                  	move.b	#9,(a1)
0002881E                            return_40F4E:
0002881E 4E75                       	rts
00028820                            ; ===========================================================================
00028820                            
00028820                            loc_40F50:
00028820 4A78 FFFA                  	tst.w	($FFFFFFFA).w
00028824 6600 0000                  	bne.w	HudDb_XY
00028828 4E75                       	rts
0002882A                            
0002882A                            ;loc_40F90:
0002882A                            ;	tst.b	(Update_HUD_timer_2P).w
0002882A                            ;	beq.s	loc_40FC8
0002882A                            ;	lea	(Timer_2P).w,a1
0002882A                            ;	cmpi.l	#$93B3B,(a1)+
0002882A                            ;	beq.w	TimeOver2
0002882A                            ;	addq.b	#1,-(a1)
0002882A                            ;	cmpi.b	#$3C,(a1)
0002882A                            ;	bcs.s	loc_40FC8
0002882A                            ;	move.b	#0,(a1)
0002882A                            ;	addq.b	#1,-(a1)
0002882A                            ;	cmpi.b	#$3C,(a1)
0002882A                            ;	bcs.s	loc_40FC8
0002882A                            ;	move.b	#0,(a1)
0002882A                            ;	addq.b	#1,-(a1)
0002882A                            ;	cmpi.b	#9,(a1)
0002882A                            ;	bcs.s	loc_40FC8
0002882A                            ;	move.b	#9,(a1)
0002882A                            
0002882A                            ;loc_40FC8:
0002882A                            ;	bsr.w	CentiSecond
0002882A                            ;	tst.b	(Update_HUD_lives).w
0002882A                            ;	beq.s	loc_40FD6
0002882A                            ;	clr.b	(Update_HUD_lives).w
0002882A                            ;	bsr.w	Hud_Lives
0002882A                            
0002882A                            ;loc_40FD6:
0002882A                            ;	tst.b	(Update_HUD_lives_2P).w
0002882A                            ;	beq.s	loc_40FE4
0002882A                            ;	clr.b	(Update_HUD_lives_2P).w
0002882A                            ;	bsr.w	Hud_Lives
0002882A                            
0002882A                            ;loc_40FE4:
0002882A                            ;	move.b	(Update_HUD_timer).w,d0
0002882A                            ;	or.b	(Update_HUD_timer_2P).w,d0
0002882A                            ;	beq.s	return_4101A
0002882A                            ;	lea	(Loser_Time_Left).w,a1
0002882A                            ;	tst.w	(a1)+
0002882A                            ;	beq.s	return_4101A
0002882A                            ;	subq.b	#1,-(a1)
0002882A                            ;	bhi.s	return_4101A
0002882A                            ;	move.b	#$3C,(a1)
0002882A                            ;	cmpi.b	#$C,-1(a1)
0002882A                            ;	bne.s	loc_41010
0002882A                            ;	move.w	#$92,d0
0002882A                            ;	jsr	(PlayMusic).l
0002882A                            
0002882A                            ;loc_41010:
0002882A                            ;	subq.b	#1,-(a1)
0002882A                            ;	bcc.s	return_4101A
0002882A                            ;	move.w	#0,(a1)
0002882A                            ;	bsr.s	TimeOver0
0002882A                            
0002882A                            ;return_4101A:
0002882A                            
0002882A                            ;	rts
0002882A                            ; End of function HudUpdate
0002882A                            
0002882A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0002882A                            
0002882A                            ; sub_4101C:
0002882A                            TimeOver0:
0002882A                            ;	tst.w ($FFFFFFFA).w ; is debug mode on?
0002882A                            ;	bne.w Debug_Timeover ; if yes, branch
0002882A 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
0002882E 6600                       	bne.s	TimeOver
00028830                            ;	tst.b	(Update_HUD_timer_2P).w
00028830                            ;	bne.s	TimeOver2
00028830 4E75                       	rts
00028832                            ; ===========================================================================
00028832                            ; loc_4102A:
00028832                            TimeOver:
00028832                            
00028832 4238 FE1E                  	clr.b	(Update_HUD_timer).w
00028836 41F8 D000                  	lea	(MainCharacter).w,a0 ; a0=character
0002883A 2448                       	movea.l	a0,a2
0002883C 6100 E0C6                  	bsr.w	KillCharacter
00028840 11FC 0001 FE1A             	move.b	#1,(Time_Over_flag).w
00028846                            ;	tst.b	(Update_HUD_timer_2P).w
00028846                            ;	beq.s	return_41058
00028846                            ; loc_41044:
00028846                            ;TimeOver2:
00028846                            
00028846                            ;	clr.b	(Update_HUD_timer_2P).w
00028846                            ;	lea	(Sidekick).w,a0 ; a0=character
00028846                            ;	movea.l	a0,a2
00028846                            ;	bsr.w	KillCharacter
00028846                            ;	move.b	#1,(Time_Over_flag_2P).w
00028846                            
00028846                            return_41058:
00028846 4E75                       	rts
00028848                            ; End of function TimeOver0
00028848                            Hud_LoadZero2:
00028848 7200                       		moveq	#0,d1
0002884A                            ;		move.b	($FFFFFE25).w,d1
0002884A                            ;		move.b	CentSecTable(pc,d1.w),d1
0002884A 203C 75C0 0003             		move.l	#$75C00003,d0
00028850 4EB9 0000 0000             		jsr	Hud_Secs		
00028856 4E75                       		rts
00028858                            ; ---------------------------------------------------------------------------
00028858                            ; Subroutine to	load "0" on the	HUD
00028858                            ; ---------------------------------------------------------------------------
00028858                            
00028858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028858                            
00028858                            
00028858                            Hud_LoadZero:				; XREF: HudUpdate
00028858                            ;		bsr.w	Hud_LoadZero2
00028858 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
00028862 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00028866 343C 0002                  		move.w	#2,d2
0002886A 6000                       		bra.s	loc_1C83E
0002886C                            ; End of function Hud_LoadZero
0002886C                            
0002886C                            ; ---------------------------------------------------------------------------
0002886C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0002886C                            ; ---------------------------------------------------------------------------
0002886C                            
0002886C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002886C                            
0002886C                            
0002886C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0002886C 4DF9 00C0 0000             		lea	($C00000).l,a6
00028872 4EB9 0000 0000             		jsr	Hud_Lives
00028878 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00028882 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00028886 343C 000E                  		move.w	#$E,d2
0002888A                            
0002888A                            loc_1C83E:				; XREF: Hud_LoadZero
0002888A 43FA 0000                  		lea	Art_Hud(pc),a1
0002888E                            
0002888E                            loc_1C842:
0002888E 323C 000F                  		move.w	#$F,d1
00028892 101A                       		move.b	(a2)+,d0
00028894 6B00                       		bmi.s	loc_1C85E
00028896 4880                       		ext.w	d0
00028898 EB48                       		lsl.w	#5,d0
0002889A 47F1 0000                  		lea	(a1,d0.w),a3
0002889E                            
0002889E                            loc_1C852:
0002889E 2C9B                       		move.l	(a3)+,(a6)
000288A0 51C9 FFFC                  		dbf	d1,loc_1C852
000288A4                            
000288A4                            loc_1C858:
000288A4 51CA FFE8                  		dbf	d2,loc_1C842
000288A8                            
000288A8 4E75                       		rts	
000288AA                            ; ===========================================================================
000288AA                            
000288AA                            loc_1C85E:
000288AA 2CBC 0000 0000             		move.l	#0,(a6)
000288B0 51C9 FFF8                  		dbf	d1,loc_1C85E
000288B4                            
000288B4 60EE                       		bra.s	loc_1C858
000288B6                            ; End of function Hud_Base
000288B6                            
000288B6                            ; ===========================================================================
000288B6                            ;	if HUDCentiseconds=1	;Mercury HUD Centiseconds
000288B6                            ;Hud_TilesMarks:	dc.b $1A, 0, 0, 0
000288B6                            ;Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $18, 0, 0
000288B6                            ;	else
000288B6 1618 1818 1818 1800 0014+  Hud_TilesBase:	dc.b $16, $18, $18, $18, $18, $18, $18,	0, 0, $14, 0, 0
000288C2                            ;	endc	;end HUD Centiseconds
000288C2 1818 0000                  Hud_TilesZero:	dc.b $18, $18, 0, 0
000288C6 0000 0000                  Hud_TilesZero2:	dc.b 0, 0, 0, 0
000288CA                            ; ---------------------------------------------------------------------------
000288CA                            ; Subroutine to	load debug mode	numbers	patterns
000288CA                            ; ---------------------------------------------------------------------------
000288CA                            
000288CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000288CA                            
000288CA                            
000288CA                            HudDb_XY:				; XREF: HudDebug
000288CA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
000288D4 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
000288D8 4841                       		swap	d1
000288DA 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
000288DE 6100                       		bsr.s	HudDb_XY2
000288E0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
000288E4 4841                       		swap	d1
000288E6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
000288EA                            ; End of function HudDb_XY
000288EA                            
000288EA                            
000288EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000288EA                            
000288EA                            
000288EA                            HudDb_XY2:
000288EA 7C07                       		moveq	#7,d6
000288EC 43F9 0000 0000             		lea	(Art_Text2).l,a1
000288F2                            
000288F2                            HudDb_XYLoop:
000288F2 E959                       		rol.w	#4,d1
000288F4 3401                       		move.w	d1,d2
000288F6 0242 000F                  		andi.w	#$F,d2
000288FA 0C42 000A                  		cmpi.w	#$A,d2
000288FE 6500                       		bcs.s	loc_1C8B2
00028900 5E42                       		addq.w	#7,d2
00028902                            
00028902                            loc_1C8B2:
00028902 EB4A                       		lsl.w	#5,d2
00028904 47F1 2000                  		lea	(a1,d2.w),a3
00028908                            		rept 8
00028908                            		move.l	(a3)+,(a6)
00028908 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028918 4841                       		swap	d1
0002891A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0002891E                            
0002891E 4E75                       		rts	
00028920                            ; End of function HudDb_XY2
00028920                            
00028920                            ; ---------------------------------------------------------------------------
00028920                            ; Subroutine to	load rings numbers patterns
00028920                            ; ---------------------------------------------------------------------------
00028920                            
00028920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028920                            
00028920                            
00028920                            Hud_Rings:				; XREF: HudUpdate
00028920 45F9 0000 0000             		lea	(Hud_100).l,a2
00028926 7C02                       		moveq	#2,d6
00028928 6000                       		bra.s	Hud_LoadArt
0002892A                            ; End of function Hud_Rings
0002892A                            
0002892A                            ; ---------------------------------------------------------------------------
0002892A                            ; Subroutine to	load score numbers patterns
0002892A                            ; ---------------------------------------------------------------------------
0002892A                            
0002892A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002892A                            
0002892A                            
0002892A                            Hud_Score:				; XREF: HudUpdate
0002892A 45F9 0000 0000             		lea	(Hud_100000).l,a2
00028930 7C05                       		moveq	#5,d6
00028932                            
00028932                            Hud_LoadArt:
00028932 43FA 0000                  		lea	Art_Hud(pc),a1
00028936 283C 0080 0000             		move.l	#$800000,d4
0002893C                            Hud_ScoreLoop:
0002893C 7400                       		moveq	#0,d2
0002893E 261A                       		move.l	(a2)+,d3
00028940                            
00028940                            loc_1C8EC:
00028940 9283                       		sub.l	d3,d1
00028942 6500                       		bcs.s	loc_1C8F4
00028944 5242                       		addq.w	#1,d2
00028946 60F8                       		bra.s	loc_1C8EC
00028948                            ; ===========================================================================
00028948                            
00028948                            loc_1C8F4:
00028948 D283                       		add.l	d3,d1
0002894A 4A42                       		tst.w	d2
0002894C 6700                       		beq.s	loc_1C8FE
0002894E 383C 0001                  		move.w	#1,d4
00028952                            
00028952                            loc_1C8FE:
00028952                            ;	if HUDHasLeadingZeroes=0	;Mercury HUD Has Leading Zeroes
00028952 4A44                       		tst.w	d4
00028954 6700                       		beq.s	loc_1C92C
00028956                            ;	endc	;end HUD Has Leading Zeroes
00028956 ED4A                       		lsl.w	#6,d2
00028958 2D40 0004                  		move.l	d0,4(a6)
0002895C 47F1 2000                  		lea	(a1,d2.w),a3
00028960                            		rept 16
00028960                            		move.l	(a3)+,(a6)
00028960 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028980                            
00028980                            loc_1C92C:
00028980 0680 0040 0000             		addi.l	#$400000,d0
00028986 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0002898A                            
0002898A 4E75                       		rts	
0002898C                            ; End of function Hud_Score
0002898C                            
0002898C                            ; ---------------------------------------------------------------------------
0002898C                            ; Subroutine to	load countdown numbers on the continue screen
0002898C                            ; ---------------------------------------------------------------------------
0002898C                            
0002898C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002898C                            
0002898C                            
0002898C                            ContScrCounter:				; XREF: ContinueScreen
0002898C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
00028996 4DF9 00C0 0000             		lea	($C00000).l,a6
0002899C 45F9 0000 0000             		lea	(Hud_10).l,a2
000289A2 7C01                       		moveq	#1,d6
000289A4 7800                       		moveq	#0,d4
000289A6 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
000289AA                            
000289AA                            ContScr_Loop:
000289AA 7400                       		moveq	#0,d2
000289AC 261A                       		move.l	(a2)+,d3
000289AE                            
000289AE                            loc_1C95A:
000289AE 9283                       		sub.l	d3,d1
000289B0 6500                       		bcs.s	loc_1C962
000289B2 5242                       		addq.w	#1,d2
000289B4 60F8                       		bra.s	loc_1C95A
000289B6                            ; ===========================================================================
000289B6                            
000289B6                            loc_1C962:
000289B6 D283                       		add.l	d3,d1
000289B8 ED4A                       		lsl.w	#6,d2
000289BA 47F1 2000                  		lea	(a1,d2.w),a3
000289BE                            		rept 16
000289BE                            		move.l	(a3)+,(a6)
000289BE 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
000289DE 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
000289E2                            
000289E2 4E75                       		rts	
000289E4                            ; End of function ContScrCounter
000289E4                            
000289E4                            ; ===========================================================================
000289E4                            ; ---------------------------------------------------------------------------
000289E4                            ; HUD counter sizes
000289E4                            ; ---------------------------------------------------------------------------
000289E4 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
000289E8 0000 2710                  Hud_10000:	dc.l 10000
000289EC 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
000289F0 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
000289F4 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
000289F8 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
000289FC                            
000289FC                            ; ---------------------------------------------------------------------------
000289FC                            ; Subroutine to	load time numbers patterns
000289FC                            ; ---------------------------------------------------------------------------
000289FC                            
000289FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000289FC                            
000289FC                            
000289FC                            Hud_Mins:				; XREF: Hud_ChkTime
000289FC 45F9 0002 89F8             		lea	(Hud_1).l,a2
00028A02 7C00                       		moveq	#0,d6
00028A04 6000                       		bra.s	loc_1C9BA
00028A06                            ; End of function Hud_Mins
00028A06                            
00028A06                            
00028A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028A06                            
00028A06                            
00028A06                            Hud_Secs:				; XREF: Hud_ChkTime
00028A06 45F9 0002 89F4             		lea	(Hud_10).l,a2
00028A0C 7C01                       		moveq	#1,d6
00028A0E                            
00028A0E                            loc_1C9BA:
00028A0E 7800                       		moveq	#0,d4
00028A10 43FA 0000                  		lea	Art_Hud(pc),a1
00028A14                            ;		move.l	#$800000,d4
00028A14                            Hud_TimeLoop:
00028A14 7400                       		moveq	#0,d2
00028A16 261A                       		move.l	(a2)+,d3
00028A18                            
00028A18                            loc_1C9C4:
00028A18 9283                       		sub.l	d3,d1
00028A1A 6500                       		bcs.s	loc_1C9CC
00028A1C 5242                       		addq.w	#1,d2
00028A1E 60F8                       		bra.s	loc_1C9C4
00028A20                            ; ===========================================================================
00028A20                            
00028A20                            loc_1C9CC:
00028A20 D283                       		add.l	d3,d1
00028A22 4A42                       		tst.w	d2
00028A24 6700                       		beq.s	loc_1C9D6
00028A26 383C 0001                  		move.w	#1,d4
00028A2A                            
00028A2A                            loc_1C9D6:
00028A2A ED4A                       		lsl.w	#6,d2
00028A2C 2D40 0004                  		move.l	d0,4(a6)
00028A30 47F1 2000                  		lea	(a1,d2.w),a3
00028A34                            		rept 16
00028A34                            		move.l	(a3)+,(a6)
00028A34 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028A54 0680 0040 0000             		addi.l	#$400000,d0
00028A5A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00028A5E                            
00028A5E 4E75                       		rts	
00028A60                            ; End of function Hud_Secs
00028A60                            
00028A60                            ; ---------------------------------------------------------------------------
00028A60                            ; Subroutine to	load time/ring bonus numbers patterns
00028A60                            ; ---------------------------------------------------------------------------
00028A60                            
00028A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028A60                            
00028A60                            
00028A60                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00028A60 45F9 0002 89EC             		lea	(Hud_1000).l,a2
00028A66 7C03                       		moveq	#3,d6
00028A68 7800                       		moveq	#0,d4
00028A6A 43FA 0000                  		lea	Art_Hud(pc),a1
00028A6E 283C 0080 0000             		move.l	#$800000,d4
00028A74                            Hud_BonusLoop:
00028A74 7400                       		moveq	#0,d2
00028A76 261A                       		move.l	(a2)+,d3
00028A78                            
00028A78                            
00028A78                            loc_1CA1E:
00028A78 9283                       		sub.l	d3,d1
00028A7A 6500                       		bcs.s	loc_1CA26
00028A7C 5242                       		addq.w	#1,d2
00028A7E 60F8                       		bra.s	loc_1CA1E
00028A80                            ; ===========================================================================
00028A80                            
00028A80                            loc_1CA26:
00028A80 D283                       		add.l	d3,d1
00028A82 4A42                       		tst.w	d2
00028A84 6700                       		beq.s	loc_1CA30
00028A86 383C 0001                  		move.w	#1,d4
00028A8A                            
00028A8A                            loc_1CA30:
00028A8A 4A44                       		tst.w	d4
00028A8C 6700                       		beq.s	Hud_ClrBonus
00028A8E ED4A                       		lsl.w	#6,d2
00028A90 47F1 2000                  		lea	(a1,d2.w),a3
00028A94                            		rept 16
00028A94                            		move.l	(a3)+,(a6)
00028A94 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028AB4                            
00028AB4                            loc_1CA5A:
00028AB4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00028AB8                            
00028AB8 4E75                       		rts	
00028ABA                            ; ===========================================================================
00028ABA                            
00028ABA                            Hud_ClrBonus:
00028ABA 7A0F                       		moveq	#$F,d5
00028ABC                            
00028ABC                            Hud_ClrBonusLoop:
00028ABC 2CBC 0000 0000             		move.l	#0,(a6)
00028AC2 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00028AC6                            
00028AC6 60EC                       		bra.s	loc_1CA5A
00028AC8                            ; End of function Hud_TimeRingBonus
00028AC8                            
00028AC8                            ; ---------------------------------------------------------------------------
00028AC8                            ; Subroutine to	load uncompressed lives	counter	patterns
00028AC8                            ; ---------------------------------------------------------------------------
00028AC8                            
00028AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00028AC8                            
00028AC8                            
00028AC8                            Hud_Lives:				; XREF: Hud_ChkLives
00028AC8 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
00028ACE 7200                       		moveq	#0,d1
00028AD0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
00028AD4 0C01 0064                  		cmpi.b	#100,d1
00028AD8 6500                       		blo.s	@cappedlives
00028ADA 123C 0063                  		move.b	#99,d1
00028ADE 11C1 FE12                  		move.b	d1,($FFFFFE12).w
00028AE2                            ;		tst.b	d1				; just a feature that was used in games like
00028AE2                            ;		beq.s 	@skipsub		; Sonic Adventure and it's sequel SA2
00028AE2                            ;		sub.b	#1,d1			; This simply tests if number of lives is 0 
00028AE2                            								; and if not it then subtracts one from the 
00028AE2                            								; life number in d1
00028AE2                            ;@skipsub:
00028AE2                            @cappedlives
00028AE2 45F9 0002 89F4             		lea	(Hud_10).l,a2
00028AE8 7C01                       		moveq	#1,d6
00028AEA 7800                       		moveq	#0,d4
00028AEC 43FA 0000                  		lea	Art_LivesNums(pc),a1
00028AF0                            
00028AF0                            Hud_LivesLoop:
00028AF0 2D40 0004                  		move.l	d0,4(a6)
00028AF4 7400                       		moveq	#0,d2
00028AF6 261A                       		move.l	(a2)+,d3
00028AF8                            
00028AF8                            loc_1CA90:
00028AF8 9283                       		sub.l	d3,d1
00028AFA 6500                       		bcs.s	loc_1CA98
00028AFC 5242                       		addq.w	#1,d2
00028AFE 60F8                       		bra.s	loc_1CA90
00028B00                            ; ===========================================================================
00028B00                            
00028B00                            loc_1CA98:
00028B00 D283                       		add.l	d3,d1
00028B02 4A42                       		tst.w	d2
00028B04 6700                       		beq.s	loc_1CAA2
00028B06 383C 0001                  		move.w	#1,d4
00028B0A                            
00028B0A                            loc_1CAA2:
00028B0A                            
00028B0A                            loc_1CAA6:
00028B0A EB4A                       		lsl.w	#5,d2
00028B0C 47F1 2000                  		lea	(a1,d2.w),a3
00028B10                            		rept 8
00028B10                            		move.l	(a3)+,(a6)
00028B10 2C9B 2C9B 2C9B 2C9B 2C9B+  		endr
00028B20                            
00028B20                            loc_1CABC:
00028B20 0680 0040 0000             		addi.l	#$400000,d0
00028B26 51CE FFC8                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00028B2A                            
00028B2A 4E75                       		rts	
00028B2C                            ; ===========================================================================
00028B2C                            
00028B2C                            Hud_ClrLives:
00028B2C 4A46                       		tst.w	d6
00028B2E 67DA                       		beq.s	loc_1CAA6
00028B30 7A07                       		moveq	#7,d5
00028B32                            
00028B32                            Hud_ClrLivesLoop:
00028B32 2CBC 0000 0000             		move.l	#0,(a6)
00028B38 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00028B3C 60E2                       		bra.s	loc_1CABC
00028B3E                            ; End of function Hud_Lives
00028B3E                            
00028B3E                            
00028B3E                            ; ===========================================================================
00028B3E                            Art_Hud:	incbin	#artunc\HUD.bin		; 8x16 pixel numbers on HUD
00028E7E                            		even
00028E7E                            Art_LivesNums:	incbin	#artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
000294DE                            		even
000294DE                            Art_Text2:	incbin	#artunc\menutext.bin	; text used in debug mode
000299FE                            		even
000299FE                            Art_Text:	incbin	#artunc\menutextascii.bin	; text used in level select
0002A4FE                            		even
0002A4FE                            ; ===========================================================================
0002A4FE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0002A4FE                            
0002A4FE                            
0002A4FE                            JmpTo_loc_1682A:
0002A4FE 4EF9 0001 5E9E             	jmp	sub_D762_2
0002A504                            ; End of function JmpTo_loc_1682A
0002A504                            
0002A504                            ; ---------------------------------------------------------------------------
0002A504                            ; When debug mode is currently in use
0002A504                            ; ---------------------------------------------------------------------------
0002A504                            
0002A504                            DebugMode:				; XREF: Obj01; Obj09
0002A504 7000                       		moveq	#0,d0
0002A506 1038 FE08                  		move.b	($FFFFFE08).w,d0
0002A50A 323B 0000                  		move.w	Debug_Index(pc,d0),d1
0002A50E 4EFB 1000                  		jmp	Debug_Index(pc,d1)
0002A512                            ; ===========================================================================
0002A512 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002A514 0000                       		dc.w Debug_Skip-Debug_Index
0002A516                            ; ===========================================================================
0002A516                            Debug_Main:
0002A516 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0002A51A                            ;		move.l	(MainCharacter+mappings).w,($FFFFFF7A).w
0002A51A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w
0002A520 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w
0002A526 0C38 0010 FE10             		cmpi.b	#$10,($FFFFFE10).w ; is	game mode = $10	(special stage)?
0002A52C 6600                       		bne.s	loc_3D852	; if not, branch
0002A52E 31FC 0000 F728             		move.w	#0,($FFFFF728).w
0002A534 31FC 3FFF F72A             		move.w	#$3FFF,($FFFFF72A).w
0002A53A                            ;		cmpi.b	#6,routine(a0)
0002A53A                            ;		bcc.s	loc_3D852
0002A53A                            ;		move.w	(MainCharacter+art_tile).w,($FFFFFF7E).w
0002A53A                            loc_3D852:
0002A53A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0002A540 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0002A546 0278 07FF F70C             		andi.w	#$7FF,($FFFFF70C).w
0002A54C 08A8 0006 0022             		bclr	#6,status(a0)
0002A552 6700                       		beq.s	Debug_NotUnderWater
0002A554 2248                       		movea.l	a0,a1
0002A556 4EB9 0001 E7EE             		jsr	(ResumeMusic).l
0002A55C 45F8 F760                  		lea	(Sonic_top_speed).w,a2	; Load Sonic_top_speed into a2
0002A560 4EB9 0001 E276             		jsr	ApplySpeedSettings	; Fetch Speed settings
0002A566                            
0002A566                            Debug_NotUnderWater:
0002A566 117C 0000 001A             		move.b	#0,$1A(a0)
0002A56C 117C 0000 001C             		move.b	#0,$1C(a0)
0002A572 08A8 0001 0022             		bclr	#1,status(a0)
0002A578 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0002A57E 6600                       		bne.s	Debug_Zone	; if not, branch
0002A580 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0002A586 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0002A58C 7006                       		moveq	#6,d0		; use 6th debug	item list
0002A58E 6000                       		bra.s	Debug_UseList
0002A590                            ; ===========================================================================
0002A590                            
0002A590                            Debug_Zone:
0002A590 7000                       		moveq	#0,d0
0002A592 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002A596                            
0002A596                            Debug_UseList:
0002A596 45F9 0000 0000             		lea	(DebugList).l,a2 
0002A59C D040                       		add.w	d0,d0
0002A59E D4F2 0000                  		adda.w	(a2,d0.w),a2
0002A5A2 3C1A                       		move.w	(a2)+,d6
0002A5A4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002A5A8 6200                       		bhi.s	loc_3D89C
0002A5AA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0002A5B0                            		
0002A5B0                            loc_3D89C:
0002A5B0 6100 0000                  		bsr.w	Debug_ShowItem
0002A5B4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002A5BA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0002A5C0                            		
0002A5C0                            Debug_Skip:
0002A5C0 7006                       		moveq	#6,d0
0002A5C2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002A5C8 6700                       		beq.s	loc_3D8BC
0002A5CA 7000                       		moveq	#0,d0
0002A5CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0002A5D0                            		
0002A5D0                            loc_3D8BC:
0002A5D0 45F9 0000 0000             		lea	(DebugList).l,a2 
0002A5D6 D040                       		add.w	d0,d0
0002A5D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002A5DC 3C1A                       		move.w	(a2)+,d6
0002A5DE 6100 0000                  		bsr.w	Debug_Control
0002A5E2 4EF9 0001 5C3C             		jmp	DisplaySprite 
0002A5E8                            		
0002A5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002A5E8                            
0002A5E8                            
0002A5E8                            Debug_Control:
0002A5E8 7800                       		moveq	#0,d4
0002A5EA 323C 0001                  		move.w	#1,d1
0002A5EE 1838 F605                  		move.b	($FFFFF605).w,d4
0002A5F2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0002A5F6 6600                       		bne.s	loc_3D916	; if yes, branch
0002A5F8 1038 F604                  		move.b	($FFFFF604).w,d0
0002A5FC 0240 000F                  		andi.w	#$F,d0
0002A600 6600                       		bne.s	loc_3D8FE
0002A602 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0002A608 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0002A60E 6000 0000                  		bra.w	Debug_BackItem
0002A612                            
0002A612                            loc_3D8FE:
0002A612 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0002A616 6600                       		bne.s	loc_3D91A
0002A618 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0002A61E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0002A622 6600                       		bne.s	loc_3D916
0002A624 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0002A62A                            
0002A62A                            loc_3D916:
0002A62A 1838 F604                  		move.b	($FFFFF604).w,d4
0002A62E                            		
0002A62E                            loc_3D91A:
0002A62E 7200                       		moveq	#0,d1
0002A630 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0002A634 5241                       		addq.w	#1,d1
0002A636 4841                       		swap.w	d1
0002A638 E881                       		asr.l	#4,d1
0002A63A 2428 000C                  		move.l	$C(a0),d2
0002A63E 2628 0008                  		move.l	8(a0),d3
0002A642 0804 0000                  		btst	#0,d4		; is up	being pressed?
0002A646 6700                       		beq.s	loc_3D944	; if not, branch
0002A648 9481                       		sub.l	d1,d2
0002A64A 7000                       		moveq	#0,d0
0002A64C 3038 F72C                  		move.w	($FFFFF72C).w,d0
0002A650 4840                       		swap.w	d0
0002A652 B480                       		cmp.l	d0,d2
0002A654 6C00                       		bge.s	loc_3D944
0002A656 2400                       		move.l	d0,d2
0002A658                            		
0002A658                            loc_3D944:
0002A658 0804 0001                  		btst	#1,d4		; is down being	pressed?
0002A65C 6700                       		beq.s	loc_3D95E	; if not, branch
0002A65E D481                       		add.l	d1,d2
0002A660 7000                       		moveq	#0,d0
0002A662 3038 F726                  		move.w	($FFFFF726).w,d0
0002A666 0640 00DF                  		addi.w	#$DF,d0
0002A66A 4840                       		swap.w	d0
0002A66C B480                       		cmp.l	d0,d2
0002A66E 6D00                       		blt.s	loc_3D95E
0002A670 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0002A676 6700                       		beq.s	loc_3D95E
0002A678 2400                       		move.l	d0,d2
0002A67A                            		
0002A67A                            loc_3D95E:
0002A67A 0804 0002                  		btst	#2,d4
0002A67E 6700                       		beq.s	loc_3D96A
0002A680 9681                       		sub.l	d1,d3
0002A682 6400                       		bcc.s	loc_3D96A
0002A684 7600                       		moveq	#0,d3
0002A686                            
0002A686                            loc_3D96A:
0002A686 0804 0003                  		btst	#3,d4
0002A68A 6700                       		beq.s	loc_3D972
0002A68C D681                       		add.l	d1,d3
0002A68E                            
0002A68E                            loc_3D972:
0002A68E 2142 000C                  		move.l	d2,$C(a0)
0002A692 2143 0008                  		move.l	d3,8(a0)
0002A696                            
0002A696                            Debug_BackItem:
0002A696 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0002A69C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002A69E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002A6A4 6700                       		beq.s	Debug_NextItem	; if not, branch
0002A6A6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0002A6AA 6400                       		bcc.s	Debug_NoLoop
0002A6AC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0002A6B0 6000                       		bra.s	Debug_NoLoop
0002A6B2                            ; ===========================================================================
0002A6B2                            
0002A6B2                            Debug_NextItem:
0002A6B2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0002A6B8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0002A6BA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0002A6BE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0002A6C2 6200                       		bhi.s	Debug_NoLoop
0002A6C4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0002A6CA                            
0002A6CA                            Debug_NoLoop:
0002A6CA 6000 0000                  		bra	Debug_ShowItem
0002A6CE                            ; ===========================================================================
0002A6CE                            
0002A6CE                            Debug_MakeItem:
0002A6CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0002A6D4 6700                       		beq.s	Debug_Exit	; if not, branch
0002A6D6                            ;----------------------------------------------------
0002A6D6                            ; Debug glitch fix ; Neto - Sonic 2D
0002A6D6 0C38 0006 D024             		cmpi.b  #$06, ($FFFFD024).w  
0002A6DC 6600                       		bne.s   Player_Ok                              
0002A6DE 4E75                       		rts                                          
0002A6E0                            Player_Ok:                
0002A6E0                            ;--------------------------------------------------- 
0002A6E0 4EB9 0000 0000             		jsr	SingleObjectLoad 
0002A6E6 6600                       		bne.s	Debug_Exit
0002A6E8 3368 0008 0008             		move.w	8(a0),8(a1)
0002A6EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0002A6F4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0002A6F8 1368 0001 0001             		move.b	1(a0),1(a1)
0002A6FE 1368 0001 0022             		move.b	1(a0),$22(a1)
0002A704 0229 007F 0022             		andi.b	#$7F,$22(a1)
0002A70A 7000                       		moveq	#0,d0
0002A70C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002A710 E748                       		lsl.w	#3,d0
0002A712 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0002A718 4E75                       		rts
0002A71A                            ; ===========================================================================
0002A71A                            
0002A71A                            Debug_Exit:
0002A71A 0838 0004 F605             		btst	#4,($FFFFF605).w
0002A720 6700 0000                  		beq.w	Debug_DoNothing
0002A724 7000                       		moveq	#0,d0
0002A726 31C0 FE08                  		move.w	d0,(Debug_placement_mode).w
0002A72A 46FC 2700                  		move	#$2700,sr
0002A72E 4EB9 0002 886C             		jsr	(Hud_Base).l
0002A734 11FC 0001 FE1F             		move.b	#1,(Update_HUD_score).w
0002A73A 11FC 0080 FE1D             		move.b	#-$80,(Update_HUD_rings).w
0002A740 46FC 2300                  		move	#$2300,sr
0002A744 43F8 D000                  		lea	(MainCharacter).w,a1
0002A748                            		;bcc.w	Debug_Exit_2
0002A748                            		
0002A748                            Debug_Exit_2:
0002A748 4A38 FE19                  		tst.b	($FFFFFE19).w		; is sonic super?
0002A74C 6700                       		beq.s	Debug_Exit_3	; if not, branch
0002A74E 237C 0000 0000 0004        		move.l	#Map_SuperSonic,mappings(a1)
0002A756 4EF9 0000 0000             		jmp	Debug_Exit_Final
0002A75C                            		
0002A75C                            Debug_Exit_3:
0002A75C 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1)
0002A764                            ;		bcc.w	Debug_Exit_Final
0002A764                            
0002A764                            Debug_Exit_Final:		
0002A764 337C 0780 0002             		move.w	#$780,art_tile(a1)
0002A76A 1340 001C                  		move.b	d0,anim(a1)
0002A76E 3340 000A                  		move.w	d0,$A(a1)
0002A772 3340 000E                  		move.w	d0,$E(a1)
0002A776 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0002A77C 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0002A782 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in the special stage?
0002A788 6600                       		bne.s	Debug_Exitnormal ; if not, branch
0002A78A 4278 F780                  		clr.w ($FFFFF780).w ; Clear special stage rotation
0002A78E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0002A794 237C 0000 0000 0004        		move.l	#Map_Sonic,mappings(a1); use mappings
0002A79C                            ;		move.w	#$780,art_tile(a1) ; Use right art
0002A79C 137C 0002 001C                     move.b  #2,anim(a1)
0002A7A2 08E9 0002 0022                     bset    #2,status(a1)
0002A7A8 08E9 0001 0022                     bset    #1,status(a1)
0002A7AE 4E75                       		rts ; retrun
0002A7B0                            Debug_Exitnormal:
0002A7B0                            ;		move.l	($FFFFFF7A).w,(MainCharacter+mappings).w
0002A7B0                            ;		move.w	($FFFFFF7E).w,(MainCharacter+art_tile).w
0002A7B0 6100                       		bsr.s	sub_92C54
0002A7B2 137C 0013 0016             		move.b	#$13,$16(a1) ; Set Sonic's vertical size
0002A7B8 137C 0009 0017             		move.b	#9,$17(a1) ; Set Sonic's horizontal size
0002A7BE                            ;		clr.w ($FFFFD010).w ; Clear Sonic's horizontal speed
0002A7BE                            ;		clr.l ($FFFFD012).w ; Clear Sonic's vertical speed & inertia
0002A7BE                            ;		clr.b 	jumping(a0) ; Clear standing on object flag
0002A7BE                            ;		clr.b	($FFFFD022).w ; Set Sonic to air (Will clear any other state)
0002A7BE                            ;		clr.b	(MainCharacter+anim).w ; Set to roll animation
0002A7BE                            ;		clr.b ($FFFFD025).w ; Clear secondary routine counter
0002A7BE                            ;		addq.l	#4,sp ; Make Sonic unable to jump for small period of time (If I'm correct, it is 1 frame)
0002A7BE                            
0002A7BE                            Debug_DoNothing:
0002A7BE 4E75                       		rts	
0002A7C0                            ; End of function Debug_Control
0002A7C0                            sub_92C54:
0002A7C0 1340 001C                  		move.b	d0,anim(a1)
0002A7C4 3340 000A                  		move.w	d0,2+x_pos(a1) ; subpixel x
0002A7C8 3340 000E                  		move.w	d0,2+y_pos(a1) ; subpixel y
0002A7CC 11C0 F7C8                  		move.b	d0,($FFFFF7C8).w
0002A7D0 1340 0039                  		move.b	d0,spindash_flag(a1)
0002A7D4 3340 0010                  		move.w	d0,x_vel(a1)
0002A7D8 3340 0012                  		move.w	d0,y_vel(a1)
0002A7DC 3340 0020                  		move.w	d0,inertia(a1)
0002A7E0 1340 0038                  		move.b	d0,$38(a1)
0002A7E4 0229 0001 0022             		andi.b	#1,status(a1)
0002A7EA 0029 0002 0022             		ori.b	#2,status(a1)
0002A7F0 137C 0002 0024             		move.b	#2,routine(a1)
0002A7F6 4E75                       		rts
0002A7F8                            ; End of function sub_92C54
0002A7F8                            
0002A7F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002A7F8                            
0002A7F8                            
0002A7F8                            Debug_ShowItem:				; XREF: Debug_Main
0002A7F8 7000                       		moveq	#0,d0
0002A7FA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0002A7FE E748                       		lsl.w	#3,d0
0002A800 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0002A806 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0002A80C 1172 0005 001A             		move.b	5(a2,d0.w),mapping_frame(a0) ; load frame	number for item
0002A812 4E75                       		rts	
0002A814                            ; End of function Debug_ShowItem
0002A814                            
0002A814                            ; ===========================================================================
0002A814                            
0002A814                            dbglistobj macro   obj, mapaddr,  decl, frame, flags, vram
0002A814                            	dc.l obj<<24|mapaddr
0002A814                            	dc.w decl<<8|frame
0002A814                            	dc.w flags<<12|vram
0002A814                                endm
0002A814                            
0002A814                            ; ---------------------------------------------------------------------------
0002A814                            ; Debug	list pointers
0002A814                            ; ---------------------------------------------------------------------------
0002A814                            DebugList:
0002A814                            	include "_inc\Debug list pointers.asm"
0002A814                            ; ---------------------------------------------------------------------------
0002A814                            ; Debug	list pointers
0002A814                            ; ---------------------------------------------------------------------------
0002A814 0000                       	dc.w Debug_GHZ-DebugList
0002A816 0000                       	dc.w Debug_LZ-DebugList
0002A818 0000                       	dc.w Debug_MZ-DebugList
0002A81A 0000                       	dc.w Debug_SLZ-DebugList
0002A81C 0000                       	dc.w Debug_SYZ-DebugList
0002A81E 0000                       	dc.w Debug_SBZ-DebugList
0002A820 0000                       	dc.w Debug_Ending-DebugList
0002A822 0000                       	dc.w Debug_ABZ-DebugList
0002A822 0000                       	dc.w Debug_ABZ-DebugList
0002A824                            
0002A824                            ; ---------------------------------------------------------------------------
0002A824                            ; Debug	list - Green Hill
0002A824                            ; ---------------------------------------------------------------------------
0002A824                            Debug_GHZ:
0002A824                            	include "_inc\Debug list - GHZ.asm"
0002A824                            ; ---------------------------------------------------------------------------
0002A824                            ; Debug	list - Green Hill
0002A824                            ; ---------------------------------------------------------------------------
0002A824 0000                       	dc.w (((Debug_GHz_End-Debug_GHz-$02)/$08))			; number of items in list
0002A826 2501 1D0C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0002A82A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0002A82E 2601 23C6                  	dc.l Map_obj26+$26000000
0002A832 080A 0680                  	dc.b 8,	$A, 6, $80
0002A836 2601 23C6                  	dc.l Map_obj26+$26000000
0002A83A 0608 0680                  	dc.b 6,	8, 6, $80
0002A83E 2601 23C6                  	dc.l Map_obj26+$26000000
0002A842 0507 0680                  	dc.b 5,	7, 6, $80
0002A846 2601 23C6                  	dc.l Map_obj26+$26000000
0002A84A 0406 0680                  	dc.b 4,	6, 6, $80
0002A84E 2601 23C6                  	dc.l Map_obj26+$26000000
0002A852 0305 0680                  	dc.b 3,	5, 6, $80
0002A856 2601 23C6                  	dc.l Map_obj26+$26000000
0002A85A 0204 0680                  	dc.b 2,	4, 6, $80
0002A85E 2601 23C6                  	dc.l Map_obj26+$26000000
0002A862 0103 0680                  	dc.b 1,	3, 6, $80
0002A866 1F01 13B6                  	dc.l Map_obj1F+$1F000000
0002A86A 0000 0400                  	dc.b 0,	0, 4, 0
0002A86E 2201 16AE                  	dc.l Map_obj22+$22000000
0002A872 0000 0444                  	dc.b 0,	0, 4, $44
0002A876 2B01 2CB2                  	dc.l Map_obj2B+$2B000000
0002A87A 0000 047B                  	dc.b 0,	0, 4, $7B
0002A87E 3601 54C4                  	dc.l Map_obj36+$36000000
0002A882 0000 051B                  	dc.b 0,	0, 5, $1B
0002A886 1800 FA5C                  	dc.l Map_obj18+$18000000
0002A88A 0000 4000                  	dc.b 0,	0, $40,	0
0002A88E 3B01 5632                  	dc.l Map_obj3B+$3B000000
0002A892 0000 63D0                  	dc.b 0,	0, $63,	$D0
0002A896 4001 8948                  	dc.l Map_obj40+$40000000
0002A89A 0000 04F0                  	dc.b 0,	0, 4, $F0
0002A89E 4101 6F32                  	dc.l Map_obj41+$41000000
0002A8A2 0000 0523                  	dc.b 0,	0, 5, $23
0002A8A6 4101 6F32                  	dc.l Map_obj41+$41000000
0002A8AA 1003 0533                  	dc.b $10,	3, 5, $33
0002A8AE 4101 6F32                  	dc.l Map_obj41+$41000000
0002A8B2 2006 0523                  	dc.b $20,	6, 5, $23
0002A8B6                            ;	dc.l Map_obj41+$41000000
0002A8B6                            ;	dc.b 1,	0, 5, $23
0002A8B6                            ;	dc.l Map_obj41+$41000000
0002A8B6                            ;	dc.b $40,	$A, 5, $23
0002A8B6 3E02 653A                  	dc.l Map_obj3E+$3E000000
0002A8BA 0000 0024                  	dc.b 0,	0, 0, $24
0002A8BE 3E03 653A                  	dc.l Map_obj3E+$3E010000
0002A8C2 0100 0024                  	dc.b 1,	0, 0, $24
0002A8C6 4201 71CC                  	dc.l Map_obj42+$42000000
0002A8CA 0000 249B                  	dc.b 0,	0, $24,	$9B
0002A8CE 4401 7496                  	dc.l Map_obj44+$44000000
0002A8D2 0000 434C                  	dc.b 0,	0, $43,	$4C
0002A8D6 1900 FD7C                  	dc.l Map_obj48+$19000000
0002A8DA 0000 43AA                  	dc.b 0,	0, $43,	$AA
0002A8DE 4F01 8ACE                  	dc.l Map_SpdBooster+$4F000000
0002A8E2 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002A8E6 1002 7CC2                  	dc.l Map_obj10+$10000000
0002A8EA 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002A8EE 1900 FCC4                  	dc.l Map_obj19+$19000000
0002A8F2 0100 43B2                  	dc.b 1,	0,  $43,$B2
0002A8F6 7902 2852                  	dc.l Map_obj79+$79000000
0002A8FA 0100 06C0                  	dc.b 1,	0, 6, $C0
0002A8FE 4B01 1D4C                  	dc.l Map_obj4B+$4B000000
0002A902 0000 2400                  	dc.b 0,	0, $24,	0
0002A906 7D02 2982                  	dc.l Map_obj7D+$7D000000
0002A90A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0002A90E 1100 F20C                  	dc.l Map_obj11+$11000000
0002A912 0C00 438E                  	dc.b $C,	0, $43,	$8E
0002A916                            	even
0002A916                            	even
0002A916                            Debug_GHZ_End:
0002A916                            
0002A916                            ; ---------------------------------------------------------------------------
0002A916                            ; Debug	list - Labyrinth
0002A916                            ; ---------------------------------------------------------------------------
0002A916                            Debug_LZ:
0002A916                            	include "_inc\Debug list - LZ.asm"
0002A916                            ; ---------------------------------------------------------------------------
0002A916                            ; Debug	list - Labyrinth
0002A916                            ; ---------------------------------------------------------------------------
0002A916 001F                       	dc.w $1F
0002A918 2501 1D0C                  	dc.l Map_obj25+$25000000
0002A91C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002A920 2601 23C6                  	dc.l Map_obj26+$26000000
0002A924 080A 0680                  	dc.b 8,	$A, 6, $80
0002A928 2601 23C6                  	dc.l Map_obj26+$26000000
0002A92C 0608 0680                  	dc.b 6,	8, 6, $80
0002A930 2601 23C6                  	dc.l Map_obj26+$26000000
0002A934 0507 0680                  	dc.b 5,	7, 6, $80
0002A938 2601 23C6                  	dc.l Map_obj26+$26000000
0002A93C 0406 0680                  	dc.b 4,	6, 6, $80
0002A940 2601 23C6                  	dc.l Map_obj26+$26000000
0002A944 0305 0680                  	dc.b 3,	5, 6, $80
0002A948 2601 23C6                  	dc.l Map_obj26+$26000000
0002A94C 0204 0680                  	dc.b 2,	4, 6, $80
0002A950 2601 23C6                  	dc.l Map_obj26+$26000000
0002A954 0103 0680                  	dc.b 1,	3, 6, $80
0002A958 4101 6F32                  	dc.l Map_obj41+$41000000
0002A95C 0000 0523                  	dc.b 0,	0, 5, $23
0002A960 2C01 2D5A                  	dc.l Map_obj2C+$2C000000
0002A964 0800 2486                  	dc.b 8,	0, $24,	$86
0002A968 2D01 2F4E                  	dc.l Map_obj2D+$2D000000
0002A96C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0002A970 1601 B5A8                  	dc.l Map_obj16+$16000000
0002A974 0000 03CC                  	dc.b 0,	0, 3, $CC
0002A978 1601 B5A8                  	dc.l Map_obj16+$16000000
0002A97C 0203 03CC                  	dc.b 2,	3, 3, $CC
0002A980 3301 4370                  	dc.l Map_obj33+$33000000
0002A984 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002A988 3201 3F2C                  	dc.l Map_obj32+$32000000
0002A98C 0000 0513                  	dc.b 0,	0, 5, $13
0002A990 3601 54C4                  	dc.l Map_obj36+$36000000
0002A994 0000 051B                  	dc.b 0,	0, 5, $1B
0002A998 5201 9786                  	dc.l Map_obj52a+$52000000
0002A99C 0400 43BC                  	dc.b 4,	0, $43,	$BC
0002A9A0 6101 B7C0                  	dc.l Map_obj61+$61000000
0002A9A4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0002A9A8 6101 B7C0                  	dc.l Map_obj61+$61000000
0002A9AC 1301 43E6                  	dc.b $13, 1, $43, $E6
0002A9B0 6101 B7C0                  	dc.l Map_obj61+$61000000
0002A9B4 0500 43E6                  	dc.b 5,	0, $43,	$E6
0002A9B8 6201 B918                  	dc.l Map_obj62+$62000000
0002A9BC 0000 443E                  	dc.b 0,	0, $44,	$3E
0002A9C0 6101 B7C0                  	dc.l Map_obj61+$61000000
0002A9C4 2702 43E6                  	dc.b $27, 2, $43, $E6
0002A9C8 6101 B7C0                  	dc.l Map_obj61+$61000000
0002A9CC 3003 43E6                  	dc.b $30, 3, $43, $E6
0002A9D0 6301 BC7C                  	dc.l Map_obj63+$63000000
0002A9D4 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0002A9D8 6001 B4F0                  	dc.l Map_obj60+$60000000
0002A9DC 0000 0467                  	dc.b 0,	0, 4, $67
0002A9E0 6401 BFC6                  	dc.l Map_obj64+$64000000
0002A9E4 8413 8348                  	dc.b $84, $13, $83, $48
0002A9E8 6501 C14E                  	dc.l Map_obj65+$65000000
0002A9EC 0202 C259                  	dc.b 2,	2, $C2,	$59
0002A9F0 6501 C14E                  	dc.l Map_obj65+$65000000
0002A9F4 0909 C259                  	dc.b 9,	9, $C2,	$59
0002A9F8 0B01 A95E                  	dc.l Map_obj0B+$B000000
0002A9FC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0002AA00 0C01 AA30                  	dc.l Map_obj0C+$C000000
0002AA04 0200 4328                  	dc.b 2,	0, $43,	$28
0002AA08 7902 2852                  	dc.l Map_obj79+$79000000
0002AA0C 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AA10 4B01 1D4C                  	dc.l Map_obj4B+$4B000000
0002AA14 0000 2400                  	dc.b 0,	0, $24,	0
0002AA18                            	even
0002AA18                            	even
0002AA18                            Debug_LZ_End:
0002AA18                            
0002AA18                            ; ---------------------------------------------------------------------------
0002AA18                            ; Debug	list - Marble
0002AA18                            ; ---------------------------------------------------------------------------
0002AA18                            Debug_MZ:
0002AA18                            	include "_inc\Debug list - MZ.asm"
0002AA18                            ; ---------------------------------------------------------------------------
0002AA18                            ; Debug	list - Marble
0002AA18                            ; ---------------------------------------------------------------------------
0002AA18 0019                       	dc.w $19
0002AA1A 2501 1D0C                  	dc.l Map_obj25+$25000000
0002AA1E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AA22 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA26 080A 0680                  	dc.b 8,	$A, 6, $80
0002AA2A 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA2E 0608 0680                  	dc.b 6,	8, 6, $80
0002AA32 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA36 0507 0680                  	dc.b 5,	7, 6, $80
0002AA3A 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA3E 0406 0680                  	dc.b 4,	6, 6, $80
0002AA42 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA46 0305 0680                  	dc.b 3,	5, 6, $80
0002AA4A 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA4E 0204 0680                  	dc.b 2,	4, 6, $80
0002AA52 2601 23C6                  	dc.l Map_obj26+$26000000
0002AA56 0103 0680                  	dc.b 1,	3, 6, $80
0002AA5A 2201 16AE                  	dc.l Map_obj22+$22000000
0002AA5E 0000 0444                  	dc.b 0,	0, 4, $44
0002AA62 3601 54C4                  	dc.l Map_obj36+$36000000
0002AA66 0000 051B                  	dc.b 0,	0, 5, $1B
0002AA6A 4101 6F32                  	dc.l Map_obj41+$41000000
0002AA6E 0000 0523                  	dc.b 0,	0, 5, $23
0002AA72 1301 344E                  	dc.l Map_obj14+$13000000
0002AA76 0000 0345                  	dc.b 0,	0, 3, $45
0002AA7A 4601 7B04                  	dc.l Map_obj46+$46000000
0002AA7E 0000 4000                  	dc.b 0,	0, $40,	0
0002AA82 4C01 83CC                  	dc.l Map_obj4C+$4C000000
0002AA86 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002AA8A 4E01 86B0                  	dc.l Map_obj4E+$4E000000
0002AA8E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0002AA92 3301 4370                  	dc.l Map_obj33+$33000000
0002AA96 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002AA9A 5001 8CFC                  	dc.l Map_obj50+$50000000
0002AA9E 0000 247B                  	dc.b 0,	0, $24,	$7B
0002AAA2 5101 94E2                  	dc.l Map_obj51+$51000000
0002AAA6 0000 42B8                  	dc.b 0,	0, $42,	$B8
0002AAAA 5201 9730                  	dc.l Map_obj52+$52000000
0002AAAE 0000 02B8                  	dc.b 0,	0, 2, $B8
0002AAB2 5301 0368                  	dc.l Map_obj53+$53000000
0002AAB6 0000 62B8                  	dc.b 0,	0, $62,	$B8
0002AABA 5401 8392                  	dc.l Map_obj54+$54000000
0002AABE 0000 8680                  	dc.b 0,	0, $86,	$80
0002AAC2 5501 992A                  	dc.l Map_obj55+$55000000
0002AAC6 0000 04B8                  	dc.b 0,	0, 4, $B8
0002AACA 7802 24C8                  	dc.l Map_obj78+$78000000
0002AACE 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002AAD2 4F01 8ACE                  	dc.l Map_SpdBooster+$4F000000
0002AAD6 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AADA 7902 2852                  	dc.l Map_obj79+$79000000
0002AADE 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AAE2 4B01 1D4C                  	dc.l Map_obj4B+$4B000000
0002AAE6 0000 2400                  	dc.b 0,	0, $24,	0
0002AAEA                            	even
0002AAEA                            	even
0002AAEA                            Debug_MZ_End:
0002AAEA                            
0002AAEA                            ; ---------------------------------------------------------------------------
0002AAEA                            ; Debug	list - Star Light
0002AAEA                            ; ---------------------------------------------------------------------------
0002AAEA                            Debug_SLZ:
0002AAEA                            	include "_inc\Debug list - SLZ.asm"
0002AAEA                            ; ---------------------------------------------------------------------------
0002AAEA                            ; Debug	list - Star Light
0002AAEA                            ; ---------------------------------------------------------------------------
0002AAEA 0016                       	dc.w $16
0002AAEC 2501 1D0C                  	dc.l Map_obj25+$25000000
0002AAF0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AAF4 2601 23C6                  	dc.l Map_obj26+$26000000
0002AAF8 080A 0680                  	dc.b 8,	$A, 6, $80
0002AAFC 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB00 0608 0680                  	dc.b 6,	8, 6, $80
0002AB04 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB08 0507 0680                  	dc.b 5,	7, 6, $80
0002AB0C 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB10 0406 0680                  	dc.b 4,	6, 6, $80
0002AB14 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB18 0305 0680                  	dc.b 3,	5, 6, $80
0002AB1C 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB20 0204 0680                  	dc.b 2,	4, 6, $80
0002AB24 2601 23C6                  	dc.l Map_obj26+$26000000
0002AB28 0103 0680                  	dc.b 1,	3, 6, $80
0002AB2C 5901 A3B8                  	dc.l Map_obj59+$59000000
0002AB30 0000 4000                  	dc.b 0,	0, $40,	0
0002AB34 5301 0368                  	dc.l Map_obj53+$53000000
0002AB38 0002 44E0                  	dc.b 0,	2, $44,	$E0
0002AB3C 1800 FABA                  	dc.l Map_obj18b+$18000000
0002AB40 0000 4000                  	dc.b 0,	0, $40,	0
0002AB44 5A01 A4DA                  	dc.l Map_obj5A+$5A000000
0002AB48 0000 4000                  	dc.b 0,	0, $40,	0
0002AB4C 5B01 A678                  	dc.l Map_obj5B+$5B000000
0002AB50 0000 4000                  	dc.b 0,	0, $40,	0
0002AB54 5D01 AC3C                  	dc.l Map_obj5D+$5D000000
0002AB58 0000 43A0                  	dc.b 0,	0, $43,	$A0
0002AB5C 5E01 AFB4                  	dc.l Map_obj5E+$5E000000
0002AB60 0000 0374                  	dc.b 0,	0, 3, $74
0002AB64 4101 6F32                  	dc.l Map_obj41+$41000000
0002AB68 0000 0523                  	dc.b 0,	0, 5, $23
0002AB6C 1301 344E                  	dc.l Map_obj14+$13000000
0002AB70 0000 0480                  	dc.b 0,	0, 4, $80
0002AB74 1C01 046A                  	dc.l Map_obj1C+$1C000000
0002AB78 0000 44D8                  	dc.b 0,	0, $44,	$D8
0002AB7C 5F01 B23C                  	dc.l Map_obj5F+$5F000000
0002AB80 0000 0400                  	dc.b 0,	0, 4, 0
0002AB84 6001 B4F0                  	dc.l Map_obj60+$60000000
0002AB88 0000 2429                  	dc.b 0,	0, $24,	$29
0002AB8C 4F01 8ACE                  	dc.l Map_SpdBooster+$4F000000
0002AB90 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AB94 7902 2852                  	dc.l Map_obj79+$79000000
0002AB98 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AB9C 4B01 1D4C                  	dc.l Map_obj4B+$4B000000
0002ABA0 0000 2400                  	dc.b 0,	0, $24,	0
0002ABA4                            	even
0002ABA4                            	even
0002ABA4                            Debug_SLZ_End:
0002ABA4                            
0002ABA4                            ; ---------------------------------------------------------------------------
0002ABA4                            ; Debug	list - Spring Yard
0002ABA4                            ; ---------------------------------------------------------------------------
0002ABA4                            Debug_SYZ:
0002ABA4                            	include "_inc\Debug list - SYZ.asm"
0002ABA4                            ; ---------------------------------------------------------------------------
0002ABA4                            ; Debug	list - Spring Yard
0002ABA4                            ; ---------------------------------------------------------------------------
0002ABA4 0016                       	dc.w $16
0002ABA6 2501 1D0C                  	dc.l Map_obj25+$25000000
0002ABAA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002ABAE 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABB2 080A 0680                  	dc.b 8,	$A, 6, $80
0002ABB6 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABBA 0608 0680                  	dc.b 6,	8, 6, $80
0002ABBE 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABC2 0507 0680                  	dc.b 5,	7, 6, $80
0002ABC6 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABCA 0406 0680                  	dc.b 4,	6, 6, $80
0002ABCE 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABD2 0305 0680                  	dc.b 3,	5, 6, $80
0002ABD6 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABDA 0204 0680                  	dc.b 2,	4, 6, $80
0002ABDE 2601 23C6                  	dc.l Map_obj26+$26000000
0002ABE2 0103 0680                  	dc.b 1,	3, 6, $80
0002ABE6 3601 54C4                  	dc.l Map_obj36+$36000000
0002ABEA 0000 051B                  	dc.b 0,	0, 5, $1B
0002ABEE 4101 6F32                  	dc.l Map_obj41+$41000000
0002ABF2 0000 0523                  	dc.b 0,	0, 5, $23
0002ABF6 4301 7402                  	dc.l Map_obj43+$43000000
0002ABFA 0000 04B8                  	dc.b 0,	0, 4, $B8
0002ABFE 1201 7B66                  	dc.l Map_obj12+$12000000
0002AC02 0000 0000                  	dc.b 0,	0, 0, 0
0002AC06 4701 7CC2                  	dc.l Map_obj47+$47000000
0002AC0A 0000 0380                  	dc.b 0,	0, 3, $80
0002AC0E 1F01 13B6                  	dc.l Map_obj1F+$1F000000
0002AC12 0000 0400                  	dc.b 0,	0, 4, 0
0002AC16 2201 16AE                  	dc.l Map_obj22+$22000000
0002AC1A 0000 0444                  	dc.b 0,	0, 4, $44
0002AC1E 5001 8CFC                  	dc.l Map_obj50+$50000000
0002AC22 0000 247B                  	dc.b 0,	0, $24,	$7B
0002AC26 1800 FAA8                  	dc.l Map_obj18a+$18000000
0002AC2A 0000 4000                  	dc.b 0,	0, $40,	0
0002AC2E 5601 9DBC                  	dc.l Map_obj56+$56000000
0002AC32 0000 4000                  	dc.b 0,	0, $40,	0
0002AC36 3201 3F2C                  	dc.l Map_obj32+$32000000
0002AC3A 0000 0513                  	dc.b 0,	0, 5, $13
0002AC3E 7802 24C8                  	dc.l Map_obj78+$78000000
0002AC42 0000 24FF                  	dc.b 0,	0, $24,	$FF
0002AC46 4F01 8ACE                  	dc.l Map_SpdBooster+$4F000000
0002AC4A 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AC4E 7902 2852                  	dc.l Map_obj79+$79000000
0002AC52 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AC56                            	even
0002AC56                            	even
0002AC56                            Debug_SYZ_End:
0002AC56                            
0002AC56                            ; ---------------------------------------------------------------------------
0002AC56                            ; Debug	list - Scrap Brain
0002AC56                            ; ---------------------------------------------------------------------------
0002AC56                            Debug_SBZ:
0002AC56                            	include "_inc\Debug list - SBZ.asm"
0002AC56                            ; ---------------------------------------------------------------------------
0002AC56                            ; Debug	list - Scrap Brain
0002AC56                            ; ---------------------------------------------------------------------------
0002AC56 0024                       	dc.w $24
0002AC58 2501 1D0C                  	dc.l Map_obj25+$25000000
0002AC5C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AC60 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC64 080A 0680                  	dc.b 8,	$A, 6, $80
0002AC68 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC6C 0608 0680                  	dc.b 6,	8, 6, $80
0002AC70 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC74 0507 0680                  	dc.b 5,	7, 6, $80
0002AC78 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC7C 0406 0680                  	dc.b 4,	6, 6, $80
0002AC80 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC84 0305 0680                  	dc.b 3,	5, 6, $80
0002AC88 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC8C 0204 0680                  	dc.b 2,	4, 6, $80
0002AC90 2601 23C6                  	dc.l Map_obj26+$26000000
0002AC94 0103 0680                  	dc.b 1,	3, 6, $80
0002AC98 5F01 B23C                  	dc.l Map_obj5F+$5F000000
0002AC9C 0000 0400                  	dc.b 0,	0, 4, 0
0002ACA0 6001 B4F0                  	dc.l Map_obj60+$60000000
0002ACA4 0000 0429                  	dc.b 0,	0, 4, $29
0002ACA8 7802 24C8                  	dc.l Map_obj78+$78000000
0002ACAC 0000 22B0                  	dc.b 0,	0, $22,	$B0
0002ACB0 1501 A13E                  	dc.l Map_obj15b+$15000000
0002ACB4 0702 4391                  	dc.b 7,	2, $43,	$91
0002ACB8 6702 0E5A                  	dc.l Map_obj67+$67000000
0002ACBC E000 C344                  	dc.b $E0, 0, $C3, $44
0002ACC0 5201 9730                  	dc.l Map_obj52+$52000000
0002ACC4 2802 22C0                  	dc.b $28, 2, $22, $C0
0002ACC8 3201 3F2C                  	dc.l Map_obj32+$32000000
0002ACCC 0000 0513                  	dc.b 0,	0, 5, $13
0002ACD0 6902 10A2                  	dc.l Map_obj69+$69000000
0002ACD4 0300 4492                  	dc.b 3,	0, $44,	$92
0002ACD8 6902 10FC                  	dc.l Map_obj69a+$69000000
0002ACDC 8300 04DF                  	dc.b $83, 0, 4,	$DF
0002ACE0 6A02 133C                  	dc.l Map_obj6A+$6A000000
0002ACE4 0200 43B5                  	dc.b 2,	0, $43,	$B5
0002ACE8 5301 0368                  	dc.l Map_obj53+$53000000
0002ACEC 0000 43F5                  	dc.b 0,	0, $43,	$F5
0002ACF0 5201 9730                  	dc.l Map_obj52+$52000000
0002ACF4 3903 4460                  	dc.b $39, 3, $44, $60
0002ACF8 6B02 16F2                  	dc.l Map_obj6B+$6B000000
0002ACFC 0000 22C0                  	dc.b 0,	0, $22,	$C0
0002AD00 2A01 05EA                  	dc.l Map_obj2A+$2A000000
0002AD04 0000 42E8                  	dc.b 0,	0, $42,	$E8
0002AD08 6B02 16F2                  	dc.l Map_obj6B+$6B000000
0002AD0C 1301 22C0                  	dc.b $13, 1, $22, $C0
0002AD10 6A02 133C                  	dc.l Map_obj6A+$6A000000
0002AD14 0100 43B5                  	dc.b 1,	0, $43,	$B5
0002AD18 6B02 16F2                  	dc.l Map_obj6B+$6B000000
0002AD1C 2401 22C0                  	dc.b $24, 1, $22, $C0
0002AD20 6A02 133C                  	dc.l Map_obj6A+$6A000000
0002AD24 0402 43B5                  	dc.b 4,	2, $43,	$B5
0002AD28 6B02 16F2                  	dc.l Map_obj6B+$6B000000
0002AD2C 3401 22C0                  	dc.b $34, 1, $22, $C0
0002AD30 6C02 18BC                  	dc.l Map_obj6C+$6C000000
0002AD34 0000 44C3                  	dc.b 0,	0, $44,	$C3
0002AD38 6D01 780C                  	dc.l Map_obj6D+$6D000000
0002AD3C 6400 83D9                  	dc.b $64, 0, $83, $D9
0002AD40 6D01 780C                  	dc.l Map_obj6D+$6D000000
0002AD44 640B 83D9                  	dc.b $64, $B, $83, $D9
0002AD48 6E02 1974                  	dc.l Map_obj6E+$6E000000
0002AD4C 0400 047E                  	dc.b 4,	0, 4, $7E
0002AD50 7002 1DAE                  	dc.l Map_obj70+$70000000
0002AD54 0000 42F0                  	dc.b 0,	0, $42,	$F0
0002AD58 7101 AAFE                  	dc.l Map_obj71+$71000000
0002AD5C 1100 8680                  	dc.b $11, 0, $86, $80
0002AD60 1E01 0A84                  	dc.l Map_obj1E+$1E000000
0002AD64 0400 2302                  	dc.b 4,	0, $23,	2
0002AD68 4F01 8ACE                  	dc.l Map_SpdBooster+$4F000000
0002AD6C 0000 05F4                  	dc.b 0,	0, 5,	$F4
0002AD70 7902 2852                  	dc.l Map_obj79+$79000000
0002AD74 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AD78                            	even
0002AD78                            	even
0002AD78                            Debug_SBZ_End:
0002AD78                            
0002AD78                            ; ---------------------------------------------------------------------------
0002AD78                            ; Debug	list - ending sequence / special stage
0002AD78                            ; ---------------------------------------------------------------------------
0002AD78                            Debug_Ending:
0002AD78                            	include "_inc\Debug list - Ending and SS.asm"
0002AD78                            ; ---------------------------------------------------------------------------
0002AD78                            ; Debug	list - ending sequence / special stage
0002AD78                            ; ---------------------------------------------------------------------------
0002AD78 000D                       	dc.w $D
0002AD7A 2501 1D0C                  	dc.l Map_obj25+$25000000
0002AD7E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002AD82 4701 7CC2                  	dc.l Map_obj47+$47000000
0002AD86 0000 0380                  	dc.b 0,	0, 3, $80
0002AD8A 2801 10D0                  	dc.l Map_obj28a+$28000000
0002AD8E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0002AD92 2801 10D0                  	dc.l Map_obj28a+$28000000
0002AD96 0B00 05A0                  	dc.b $B, 0, 5, $A0
0002AD9A 2801 10D0                  	dc.l Map_obj28a+$28000000
0002AD9E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0002ADA2 2801 10B8                  	dc.l Map_obj28+$28000000
0002ADA6 0D00 0553                  	dc.b $D, 0, 5, $53
0002ADAA 2801 10B8                  	dc.l Map_obj28+$28000000
0002ADAE 0E00 0553                  	dc.b $E, 0, 5, $53
0002ADB2 2801 10B8                  	dc.l Map_obj28+$28000000
0002ADB6 0F00 0573                  	dc.b $F, 0, 5, $73
0002ADBA 2801 10B8                  	dc.l Map_obj28+$28000000
0002ADBE 1000 0573                  	dc.b $10, 0, 5,	$73
0002ADC2 2801 10D0                  	dc.l Map_obj28a+$28000000
0002ADC6 1100 0585                  	dc.b $11, 0, 5,	$85
0002ADCA 2801 10E8                  	dc.l Map_obj28b+$28000000
0002ADCE 1200 0593                  	dc.b $12, 0, 5,	$93
0002ADD2 2801 10D0                  	dc.l Map_obj28a+$28000000
0002ADD6 1300 0565                  	dc.b $13, 0, 5,	$65
0002ADDA 2801 10E8                  	dc.l Map_obj28b+$28000000
0002ADDE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0002ADE2                            	even
0002ADE2                            	even
0002ADE2                            Debug_Ending_End:
0002ADE2                            	
0002ADE2                            ; ---------------------------------------------------------------------------
0002ADE2                            ; Debug	list - Alpha Beta
0002ADE2                            ; ---------------------------------------------------------------------------
0002ADE2                            Debug_ABZ:
0002ADE2                            	include "_inc\Debug list - ABZ.asm"
0002ADE2                            ; ---------------------------------------------------------------------------
0002ADE2                            ; Debug	list - Alpha Beta
0002ADE2                            ; ---------------------------------------------------------------------------
0002ADE2 0000                       	dc.w (((Debug_ABz_End-Debug_ABz-$02)/$08))
0002ADE4 2501 1D0C                  	dc.l Map_obj25+$25000000
0002ADE8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0002ADEC 2601 23C6                  	dc.l Map_obj26+$26000000
0002ADF0 080A 0680                  	dc.b 8,	$A, 6, $80
0002ADF4 2601 23C6                  	dc.l Map_obj26+$26000000
0002ADF8 0608 0680                  	dc.b 6,	8, 6, $80
0002ADFC 2601 23C6                  	dc.l Map_obj26+$26000000
0002AE00 0507 0680                  	dc.b 5,	7, 6, $80
0002AE04 2601 23C6                  	dc.l Map_obj26+$26000000
0002AE08 0406 0680                  	dc.b 4,	6, 6, $80
0002AE0C 2601 23C6                  	dc.l Map_obj26+$26000000
0002AE10 0305 0680                  	dc.b 3,	5, 6, $80
0002AE14 2601 23C6                  	dc.l Map_obj26+$26000000
0002AE18 0204 0680                  	dc.b 2,	4, 6, $80
0002AE1C 2601 23C6                  	dc.l Map_obj26+$26000000
0002AE20 0103 0680                  	dc.b 1,	3, 6, $80
0002AE24 7902 2852                  	dc.l Map_obj79+$79000000
0002AE28 0100 06C0                  	dc.b 1,	0, 6, $C0
0002AE2C                            	even
0002AE2C                            	even
0002AE2C                            Debug_ABZ_End:
0002AE2C                            ; ---------------------------------------------------------------------------
0002AE2C                            ; Main level load blocks
0002AE2C                            ; ---------------------------------------------------------------------------
0002AE2C                            MainLoadBlocks:
0002AE2C                            	include "_inc\Main level load blocks.asm"
0002AE2C                            ; ---------------------------------------------------------------------------
0002AE2C                            ; Main level load blocks
0002AE2C                            ;
0002AE2C                            ; ===FORMAT===
0002AE2C                            ; level	patterns + (1st	PLC num	* 10^6)
0002AE2C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002AE2C                            ; 256x256 mappings
0002AE2C                            ; blank, music (unused), pal index (unused), pal index
0002AE2C                            ; ---------------------------------------------------------------------------
0002AE2C 0000 0000                  	dc.l Nem_GHZ+$4000000  ;changed from Nem_GHZ_2nd
0002AE30 0000 0000                  	dc.l Blk16_GHZ+$5000000
0002AE34 0000 0000                  	dc.l Blk256_GHZ
0002AE38 0081 0404                  	dc.b 0,	$81, 4,	4
0002AE3C 0000 0000                  	dc.l Nem_LZ+$6000000
0002AE40 0000 0000                  	dc.l Blk16_LZ+$7000000
0002AE44 0000 0000                  	dc.l Blk256_LZ
0002AE48 0082 0505                  	dc.b 0,	$82, 5,	5
0002AE4C 0000 0000                  	dc.l Nem_MZ+$8000000
0002AE50 0000 0000                  	dc.l Blk16_MZ+$9000000
0002AE54 0000 0000                  	dc.l Blk256_MZ
0002AE58 0083 0606                  	dc.b 0,	$83, 6,	6
0002AE5C 0000 0000                  	dc.l Nem_SLZ+$A000000
0002AE60 0000 0000                  	dc.l Blk16_SLZ+$B000000
0002AE64 0000 0000                  	dc.l Blk256_SLZ
0002AE68 0084 0707                  	dc.b 0,	$84, 7,	7
0002AE6C 0000 0000                  	dc.l Nem_SYZ+$C000000
0002AE70 0000 0000                  	dc.l Blk16_SYZ+$D000000
0002AE74 0000 0000                  	dc.l Blk256_SYZ
0002AE78 0085 0808                  	dc.b 0,	$85, 8,	8
0002AE7C 0000 0000                  	dc.l Nem_SBZ+$E000000
0002AE80 0000 0000                  	dc.l Blk16_SBZ+$F000000
0002AE84 0000 0000                  	dc.l Blk256_SBZ
0002AE88 0086 0909                  	dc.b 0,	$86, 9,	9
0002AE8C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0002AE90 0000 0000                  	dc.l Blk16_GHZ
0002AE94 0000 0000                  	dc.l Blk256_GHZ
0002AE98 0086 1313                  	dc.b 0,	$86, $13, $13
0002AE9C 0000 0000                  	dc.l Nem_ABZ+$20000000
0002AEA0 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002AEA4 0000 0000                  	dc.l Blk256_ABZ
0002AEA8 008C 1414                  	dc.b 0,	$8C, $14, $14
0002AEAC                            	even
0002AEAC                            	even
0002AEAC                            MainLoadBlocks2:
0002AEAC                            	include "_inc\Main level load blocks2.asm"
0002AEAC                            ; ---------------------------------------------------------------------------
0002AEAC                            ; Main level load blocks
0002AEAC                            ;
0002AEAC                            ; ===FORMAT===
0002AEAC                            ; level	patterns + (1st	PLC num	* 10^6)
0002AEAC                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002AEAC                            ; 256x256 mappings
0002AEAC                            ; blank, music (unused), pal index (unused), pal index
0002AEAC                            ; ---------------------------------------------------------------------------
0002AEAC 0000 0000                  	dc.l Nem_GHZ2+$4000000
0002AEB0 0000 0000                  	dc.l Blk16_GHZ2+$5000000
0002AEB4 0000 0000                  	dc.l Blk256_GHZ2
0002AEB8 0081 0404                  	dc.b 0,	$81, 4,	4
0002AEBC 0000 0000                  	dc.l Nem_LZ2+$6000000
0002AEC0 0000 0000                  	dc.l Blk16_LZ2+$7000000
0002AEC4 0000 0000                  	dc.l Blk256_LZ2
0002AEC8 0082 0505                  	dc.b 0,	$82, 5,	5
0002AECC 0000 0000                  	dc.l Nem_MZ2+$8000000
0002AED0 0000 0000                  	dc.l Blk16_MZ2+$9000000
0002AED4 0000 0000                  	dc.l Blk256_MZ2
0002AED8 0083 0606                  	dc.b 0,	$83, 6,	6
0002AEDC 0000 0000                  	dc.l Nem_SLZ2+$A000000
0002AEE0 0000 0000                  	dc.l Blk16_SLZ2+$B000000
0002AEE4 0000 0000                  	dc.l Blk256_SLZ2
0002AEE8 0084 0707                  	dc.b 0,	$84, 7,	7
0002AEEC 0000 0000                  	dc.l Nem_SYZ2+$C000000
0002AEF0 0000 0000                  	dc.l Blk16_SYZ2+$D000000
0002AEF4 0000 0000                  	dc.l Blk256_SYZ2
0002AEF8 0085 0808                  	dc.b 0,	$85, 8,	8
0002AEFC 0000 0000                  	dc.l Nem_SBZ2+$E000000
0002AF00 0000 0000                  	dc.l Blk16_SBZ2+$F000000
0002AF04 0000 0000                  	dc.l Blk256_SBZ2
0002AF08 0086 0909                  	dc.b 0,	$86, 9,	9
0002AF0C 0000 0000                  	dc.l Nem_GHZ2_2nd; main load block for ending
0002AF10 0000 0000                  	dc.l Blk16_GHZ2
0002AF14 0000 0000                  	dc.l Blk256_GHZ2
0002AF18 0086 1313                  	dc.b 0,	$86, $13, $13
0002AF1C 0000 0000                  	dc.l Nem_ABZ+$20000000
0002AF20 0000 0000                  	dc.l Blk16_ABZ+$21000000
0002AF24 0000 0000                  	dc.l Blk256_ABZ
0002AF28 008C 1414                  	dc.b 0,	$8C, $14, $14
0002AF2C                            	even
0002AF2C                            	even
0002AF2C                            MainLoadBlocks3:
0002AF2C                            	include "_inc\Main level load blocks3.asm"
0002AF2C                            ; ---------------------------------------------------------------------------
0002AF2C                            ; Main level load blocks
0002AF2C                            ;
0002AF2C                            ; ===FORMAT===
0002AF2C                            ; level	patterns + (1st	PLC num	* 10^6)
0002AF2C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0002AF2C                            ; 256x256 mappings
0002AF2C                            ; blank, music (unused), pal index (unused), pal index
0002AF2C                            ; ---------------------------------------------------------------------------
0002AF2C 0000 0000                  	dc.l Nem_GHZ3+$4000000
0002AF30 0000 0000                  	dc.l Blk16_GHZ3+$5000000
0002AF34 0000 0000                  	dc.l Blk256_GHZ3
0002AF38 0081 0404                  	dc.b 0,	$81, 4,	4
0002AF3C 0000 0000                  	dc.l Nem_LZ3+$6000000
0002AF40 0000 0000                  	dc.l Blk16_LZ3+$7000000
0002AF44 0000 0000                  	dc.l Blk256_LZ3
0002AF48 0082 0505                  	dc.b 0,	$82, 5,	5
0002AF4C 0000 0000                  	dc.l Nem_MZ3+$8000000
0002AF50 0000 0000                  	dc.l Blk16_MZ3+$9000000
0002AF54 0000 0000                  	dc.l Blk256_MZ3
0002AF58 0083 0606                  	dc.b 0,	$83, 6,	6
0002AF5C 0000 0000                  	dc.l Nem_SLZ3+$A000000
0002AF60 0000 0000                  	dc.l Blk16_SLZ3+$B000000
0002AF64 0000 0000                  	dc.l Blk256_SLZ3
0002AF68 0084 0707                  	dc.b 0,	$84, 7,	7
0002AF6C 0000 0000                  	dc.l Nem_SYZ3+$C000000
0002AF70 0000 0000                  	dc.l Blk16_SYZ3+$D000000
0002AF74 0000 0000                  	dc.l Blk256_SYZ3
0002AF78 0085 0808                  	dc.b 0,	$85, 8,	8
0002AF7C 0000 0000                  	dc.l Nem_SBZ3+$E000000
0002AF80 0000 0000                  	dc.l Blk16_SBZ3+$F000000
0002AF84 0000 0000                  	dc.l Blk256_SBZ3
0002AF88 0086 0909                  	dc.b 0,	$86, 9,	9
0002AF8C 0000 0000                  	dc.l Nem_GHZ3_2nd; main load block for ending
0002AF90 0000 0000                  	dc.l Blk16_GHZ3
0002AF94 0000 0000                  	dc.l Blk256_GHZ3
0002AF98 0086 1313                  	dc.b 0,	$86, $13, $13
0002AF9C                            	even
0002AF9C                            	even
0002AF9C                            ;MainLoadBlocks4:
0002AF9C                            ;	include "_inc\Main level load blocks4.asm"
0002AF9C                            
0002AF9C                            ; ---------------------------------------------------------------------------
0002AF9C                            ; Pattern load cues
0002AF9C                            ; ---------------------------------------------------------------------------
0002AF9C                            ArtLoadCues:
0002AF9C                            	include "_inc\Pattern load cues.asm"
0002AF9C                            ; ---------------------------------------------------------------------------
0002AF9C                            ; Pattern load cues - index
0002AF9C                            ; ---------------------------------------------------------------------------
0002AF9C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	;2
0002AFA0 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	;4
0002AFA4 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues	;6
0002AFA8 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0002AFAC 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0002AFB0 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0002AFB4 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0002AFB8 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0002AFBC 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0002AFC0 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0002AFC4 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0002AFC8 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0002AFCC 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0002AFD0 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0002AFD4 0000                       	dc.w PLC_Ending-ArtLoadCues			; 28 - 1C
0002AFD6 0000                       	dc.w PLC_TryAgain-ArtLoadCues		; 29 - 1D
0002AFD8 0000                       	dc.w PLC_EggmanSBZ2-ArtLoadCues		; 30 - 1E
0002AFDA 0000                       	dc.w PLC_FZBoss-ArtLoadCues			; 31 - 1F
0002AFDC 0000 0000 0000             	dc.w PLC_ABZ-ArtLoadCues, PLC_ABZ2-ArtLoadCues, PLC_ABZAnimals-ArtLoadCues
0002AFE2 0000                       	dc.w PLC_Main-ArtLoadCues		; 37 - 23
0002AFE4 0000                       	dc.w PLC_Main-ArtLoadCues	; 40 - 24
0002AFE6 0000                       	dc.w RingPLC-ArtLoadCues	; 41 - 25
0002AFE8 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 26
0002AFEA 0000                       	dc.w PLC_Main-ArtLoadCues	; 42 - 27
0002AFEC                            ;	dc.w PLC_Shield-ArtLoadCues	
0002AFEC 0000                       	dc.w PLC_TitleCard2-ArtLoadCues ; 43 - 28
0002AFEE                            	
0002AFEE                            plcm:	macro gfx,vram
0002AFEE                            	dc.l gfx
0002AFEE                            	dc.w vram
0002AFEE                            	endm
0002AFEE                            ; ---------------------------------------------------------------------------
0002AFEE                            ; Pattern load cues - standard block 1
0002AFEE                            ; ---------------------------------------------------------------------------
0002AFEE 0000                       PLC_Main:	dc.w ((PLC_Main_End-PLC_Main-2)/6)-1
0002AFF0 0001 8B00                          dc.l Artnem_SpdBooster	; spikes
0002AFF4 BD80                       		dc.w $BD80
0002AFF6 0000 0000                  		dc.l Nem_Lamp		; lamppost
0002AFFA D800                       		dc.w $D800
0002AFFC 0000 0000                  		dc.l Nem_Hud		; HUD
0002B000 D940                       		dc.w $D940
0002B002                            ;		dc.l Nem_Lives		; lives	counter
0002B002                            ;		dc.w $FA80
0002B002 0000 0000                  		dc.l Nem_Ring_S		; rings
0002B006 F640                       		dc.w $F640
0002B008                            ;		dc.l Nem_Points		; points from enemy
0002B008                            ;		dc.w $F2E0
0002B008                            PLC_Main_End:
0002B008                            ; ---------------------------------------------------------------------------
0002B008                            ; Pattern load cues - standard block 2
0002B008                            ; ---------------------------------------------------------------------------
0002B008 0000                       PLC_Main2:	dc.w ((PLC_Main2_End-PLC_Main2-2)/6)-1
0002B00A 0000 0000                  		dc.l Nem_Monitors	; monitors
0002B00E D000                       		dc.w $D000
0002B010                            ;		dc.l Nem_Shield		; shield
0002B010                            ;		dc.w $A820
0002B010                            ;		dc.l Nem_Stars		; invincibility	stars
0002B010                            ;		dc.w $ABC0
0002B010                            PLC_Main2_End:
0002B010                            ; ---------------------------------------------------------------------------
0002B010                            ; Pattern load cues - explosion
0002B010                            ; ---------------------------------------------------------------------------
0002B010 0000                       PLC_Explode:	dc.w ((PLC_Explode_End-PLC_Explode-2)/6)-1
0002B012 0000 0000                  		dc.l Nem_Explode	; explosion
0002B016 B400                       		dc.w $B400
0002B018                            ;		dc.l Nem_PauseMenu	; explosion
0002B018                            ;		dc.w $BC80
0002B018 0001 8B00                  		dc.l Artnem_SpdBooster	; spikes
0002B01C BE80                       		dc.w $BE80
0002B01E                            PLC_Explode_End:
0002B01E                            ; ---------------------------------------------------------------------------
0002B01E                            ; Pattern load cues - Super Stars
0002B01E                            ; ---------------------------------------------------------------------------
0002B01E                            ;SuperPLC_Star:	dc.w ((SuperPLC_Starend-SuperPLC_Star-2)/6)-1
0002B01E                            ;		dc.l Nem_SuperSonic_stars
0002B01E                            ;		dc.w $ABC0
0002B01E                            ;	SuperPLC_Starend:
0002B01E                            ; ---------------------------------------------------------------------------
0002B01E                            ; Pattern load cues - Super Stars
0002B01E                            ; ---------------------------------------------------------------------------
0002B01E 0000                       RingPLC:	dc.w ((RingPLC_Ringend-RingPLC-2)/6)-1
0002B020 0000 0000                  		dc.l Nem_Ring		; rings
0002B024 F640                       		dc.w $F640
0002B026                            	RingPLC_Ringend:
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ; Pattern load cues - Super Sonic Lives 
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ;SuperLives:	dc.w ((SuperLivesend-SuperLives-2)/6)-1
0002B026                            ;		dc.l Nem_SuperLives		; lives	counter
0002B026                            ;		dc.w $FA80
0002B026                            ;	SuperLivesend:
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ; Pattern load cues - Super Sonic Lives 
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ;NormalLives:	dc.w ((NormalLivesend-NormalLives-2)/6)-1
0002B026                            ;		dc.l Nem_Lives		; lives	counter
0002B026                            ;		dc.w $FA80
0002B026                            ;	NormalLivesend:
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ; Pattern load cues - invincibility stars
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ;PLC_Invincibility:	dc.w ((PLC_Invincibilityend-PLC_Invincibility-2)/6)-1
0002B026                            ;		dc.l Nem_Stars
0002B026                            ;		dc.w $ABC0
0002B026                            ;	PLC_Invincibilityend:
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ; Pattern load cues - Shield
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ;PLC_Shield:	dc.w ((PLC_Shieldend-PLC_Shield-2)/6)-1
0002B026                            ;		dc.l Nem_Shield		; shield
0002B026                            ;		dc.w $A820
0002B026                            ;	PLC_Shieldend:
0002B026                            ; ---------------------------------------------------------------------------
0002B026                            ; Pattern load cues - game/time	over
0002B026                            ; ---------------------------------------------------------------------------
0002B026 0000                       PLC_GameOver:	dc.w ((PLC_GameOver_End-PLC_GameOver-2)/6)-1
0002B028 0000 0000                  		dc.l Nem_GameOver	; game/time over
0002B02C ABC0                       		dc.w $ABC0
0002B02E                            PLC_GameOver_End:
0002B02E                            		
0002B02E                            ; ---------------------------------------------------------------------------
0002B02E                            ; Pattern load cues - Green Hill
0002B02E                            ; ---------------------------------------------------------------------------
0002B02E 0000                       PLC_GHZ:	dc.w ((PLC_GHZ_End-PLC_GHZ-2)/6)-1
0002B030                            ;		dc.l Nem_GHZ; GHZ main patterns
0002B030                            ;		dc.w 0
0002B030 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002B034 6B00                       		dc.w $6B00
0002B036 0000 0000                  		dc.l Nem_PplRock	; purple rock
0002B03A 7A00                       		dc.w $7A00
0002B03C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B040 8000                       		dc.w $8000
0002B042 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B046 8880                       		dc.w $8880
0002B048 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0002B04C 8F60                       		dc.w $8F60
0002B04E 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0002B052 9360                       		dc.w $9360
0002B054 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0002B058 9E00                       		dc.w $9E00
0002B05A 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B05E A360                       		dc.w $A360
0002B060 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B064 A460                       		dc.w $A460
0002B066 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B06A A660                       		dc.w $A660
0002B06C                            PLC_GHZ_End
0002B06C 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2_End-PLC_GHZ2-2)/6)-1
0002B06E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B072 7000                       		dc.w $7000
0002B074 0000 0000                  		dc.l Nem_Bridge		; bridge
0002B078 71C0                       		dc.w $71C0
0002B07A 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0002B07E 7300                       		dc.w $7300
0002B080 0000 0000                  		dc.l Nem_Ball		; giant	ball
0002B084 7540                       		dc.w $7540
0002B086 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0002B08A A1E0                       		dc.w $A1E0
0002B08C 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0002B090 6980                       		dc.w $6980
0002B092                            PLC_GHZ2_End
0002B092                            ; ---------------------------------------------------------------------------
0002B092                            ; Pattern load cues - Labyrinth
0002B092                            ; ---------------------------------------------------------------------------
0002B092 0000                       PLC_LZ:		dc.w ((PLC_LZ_End-PLC_LZ-2)/6)-1
0002B094                            ;		dc.l Nem_LZ		; LZ main patterns
0002B094                            ;		dc.w 0
0002B094 0000 0000                  		dc.l Nem_LzBlock1	; block
0002B098 3C00                       		dc.w $3C00
0002B09A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0002B09E 3E00                       		dc.w $3E00
0002B0A0 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0002B0A4 4B20                       		dc.w $4B20
0002B0A6 0000 0000                  		dc.l Nem_Water		; water	surface
0002B0AA 6000                       		dc.w $6000
0002B0AC 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0002B0B0 6200                       		dc.w $6200
0002B0B2 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0002B0B6 6500                       		dc.w $6500
0002B0B8 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0002B0BC 6900                       		dc.w $6900
0002B0BE 0000 0000                  		dc.l Nem_LzBlock3	; block
0002B0C2 7780                       		dc.w $7780
0002B0C4 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0002B0C8 7880                       		dc.w $7880
0002B0CA 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0002B0CE 7980                       		dc.w $7980
0002B0D0 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0002B0D4 94C0                       		dc.w $94C0
0002B0D6                            PLC_LZ_End
0002B0D6 0000                       PLC_LZ2:	dc.w ((PLC_LZ2_End-PLC_LZ2-2)/6)-1
0002B0D8 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0002B0DC 7BC0                       		dc.w $7BC0
0002B0DE 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0002B0E2 7CC0                       		dc.w $7CC0
0002B0E4 0000 0000                  		dc.l Nem_LzWheel	; wheel
0002B0E8 7EC0                       		dc.w $7EC0
0002B0EA 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0002B0EE 5D20                       		dc.w $5D20
0002B0F0 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0002B0F4 8800                       		dc.w $8800
0002B0F6 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0002B0FA 89E0                       		dc.w $89E0
0002B0FC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B100 8CE0                       		dc.w $8CE0
0002B102 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0002B106 90C0                       		dc.w $90C0
0002B108 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B10C A1E0                       		dc.w $A1E0
0002B10E 0000 0000                  		dc.l Nem_Cork		; cork block
0002B112 A000                       		dc.w $A000
0002B114 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B118 A360                       		dc.w $A360
0002B11A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B11E A460                       		dc.w $A460
0002B120 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B124 A660                       		dc.w $A660
0002B126                            PLC_LZ2_End:
0002B126                            ; ---------------------------------------------------------------------------
0002B126                            ; Pattern load cues - Marble
0002B126                            ; ---------------------------------------------------------------------------
0002B126 0000                       PLC_MZ:		dc.w ((PLC_MZ_End-PLC_MZ-2)/6)-1
0002B128                            ;		dc.l Nem_MZ		; MZ main patterns
0002B128                            ;		dc.w 0
0002B128 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0002B12C 6000                       		dc.w $6000
0002B12E 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B132 68A0                       		dc.w $68A0
0002B134 0000 0000                  		dc.l Nem_Swing		; swinging platform
0002B138 7000                       		dc.w $7000
0002B13A 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0002B13E 71C0                       		dc.w $71C0
0002B140 0000 0000                  		dc.l Nem_Lava		; lava
0002B144 7500                       		dc.w $7500
0002B146 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B14A 8880                       		dc.w $8880
0002B14C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B150 8F60                       		dc.w $8F60
0002B152 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0002B156 9700                       		dc.w $9700
0002B158 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B15C 9FE0                       		dc.w $9FE0
0002B15E                            PLC_MZ_End:
0002B15E 0000                       PLC_MZ2:	dc.w ((PLC_MZ2_End-PLC_MZ2-2)/6)-1
0002B160 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002B164 A260                       		dc.w $A260
0002B166 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B16A A360                       		dc.w $A360
0002B16C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B170 A460                       		dc.w $A460
0002B172 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B176 A660                       		dc.w $A660
0002B178 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0002B17C 5700                       		dc.w $5700
0002B17E                            PLC_MZ2_End:
0002B17E                            ; ---------------------------------------------------------------------------
0002B17E                            ; Pattern load cues - Star Light
0002B17E                            ; ---------------------------------------------------------------------------
0002B17E 0000                       PLC_SLZ:	dc.w ((PLC_SLZ_End-PLC_SLZ-2)/6)-1
0002B180                            ;		dc.l Nem_SLZ		; SLZ main patterns
0002B180                            ;		dc.w 0
0002B180 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B184 8000                       		dc.w $8000
0002B186 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B18A 8520                       		dc.w $8520
0002B18C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0002B190 9000                       		dc.w $9000
0002B192 0000 0000                  		dc.l Nem_SlzBlock	; block
0002B196 9C00                       		dc.w $9C00
0002B198 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0002B19C A260                       		dc.w $A260
0002B19E 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B1A2 A360                       		dc.w $A360
0002B1A4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B1A8 A460                       		dc.w $A460
0002B1AA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B1AE A660                       		dc.w $A660
0002B1B0                            PLC_SLZ_End
0002B1B0 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2_End-PLC_SLZ2-2)/6)-1
0002B1B2 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0002B1B6 6E80                       		dc.w $6E80
0002B1B8 0000 0000                  		dc.l Nem_Fan		; fan
0002B1BC 7400                       		dc.w $7400
0002B1BE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0002B1C2 7980                       		dc.w $7980
0002B1C4 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0002B1C8 7B80                       		dc.w $7B80
0002B1CA 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0002B1CE 9B00                       		dc.w $9B00
0002B1D0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0002B1D4 9E00                       		dc.w $9E00
0002B1D6                            PLC_SLZ2_End
0002B1D6                            ; ---------------------------------------------------------------------------
0002B1D6                            ; Pattern load cues - Spring Yard
0002B1D6                            ; ---------------------------------------------------------------------------
0002B1D6 0000                       PLC_SYZ:	dc.w ((PLC_SYZ_End-PLC_SYZ-2)/6)-1
0002B1D8                            ;		dc.l Nem_SYZ		; SYZ main patterns
0002B1D8                            ;		dc.w 0
0002B1D8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0002B1DC 8000                       		dc.w $8000
0002B1DE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0002B1E2 8880                       		dc.w $8880
0002B1E4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0002B1E8 8F60                       		dc.w $8F60
0002B1EA 0000 0000                  		dc.l Nem_Roller		; roller enemy
0002B1EE 9700                       		dc.w $9700
0002B1F0                            PLC_SYZ_End:
0002B1F0 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2_End-PLC_SYZ2-2)/6)-1
0002B1F2 0000 0000                  		dc.l Nem_Bumper		; bumper
0002B1F6 7000                       		dc.w $7000
0002B1F8 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B1FC 72C0                       		dc.w $72C0
0002B1FE 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0002B202 7740                       		dc.w $7740
0002B204 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B208 9FE0                       		dc.w $9FE0
0002B20A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B20E A1E0                       		dc.w $A1E0
0002B210 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B214 A360                       		dc.w $A360
0002B216 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B21A A460                       		dc.w $A460
0002B21C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B220 A660                       		dc.w $A660
0002B222                            PLC_SYZ2_End:
0002B222                            ; ---------------------------------------------------------------------------
0002B222                            ; Pattern load cues - Scrap Brain
0002B222                            ; ---------------------------------------------------------------------------
0002B222 0000                       PLC_SBZ:	dc.w ((PLC_SBZ_End-PLC_SBZ-2)/6)-1
0002B224                            ;		dc.l Nem_SBZ		; SBZ main patterns
0002B224                            ;		dc.w 0
0002B224 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0002B228 5800                       		dc.w $5800
0002B22A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0002B22E 5D00                       		dc.w $5D00
0002B230 0000 0000                  		dc.l Nem_Girder		; girder
0002B234 5E00                       		dc.w $5E00
0002B236 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0002B23A 6040                       		dc.w $6040
0002B23C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0002B240 6880                       		dc.w $6880
0002B242 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0002B246 6900                       		dc.w $6900
0002B248 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0002B24C 7220                       		dc.w $7220
0002B24E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0002B252 76A0                       		dc.w $76A0
0002B254 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0002B258 7B20                       		dc.w $7B20
0002B25A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B25E 7EA0                       		dc.w $7EA0
0002B260 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0002B264 9860                       		dc.w $9860
0002B266                            PLC_SBZ_End
0002B266 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2_End-PLC_SBZ2-2)/6)-1
0002B268 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0002B26C 5600                       		dc.w $5600
0002B26E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0002B272 8000                       		dc.w $8000
0002B274 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0002B278 8520                       		dc.w $8520
0002B27A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0002B27E 8C00                       		dc.w $8C00
0002B280 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0002B284 8DE0                       		dc.w $8DE0
0002B286 0000 0000                  		dc.l Nem_Electric	; electric orb
0002B28A 8FC0                       		dc.w $8FC0
0002B28C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0002B290 9240                       		dc.w $9240
0002B292 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0002B296 7F20                       		dc.w $7F20
0002B298 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0002B29C 9BE0                       		dc.w $9BE0
0002B29E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B2A2 A1E0                       		dc.w $A1E0
0002B2A4 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B2A8 A360                       		dc.w $A360
0002B2AA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B2AE A460                       		dc.w $A460
0002B2B0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B2B4 A660                       		dc.w $A660
0002B2B6                            PLC_SBZ2_End
0002B2B6                            ; ---------------------------------------------------------------------------
0002B2B6                            ; Pattern load cues - title card
0002B2B6                            ; ---------------------------------------------------------------------------
0002B2B6 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCard_End-PLC_TitleCard-2)/6)-1
0002B2B8 0000 0000                  		dc.l Nem_TitleCard
0002B2BC B000                       		dc.w $B000
0002B2BE                            PLC_TitleCard_End
0002B2BE                            PLC_TitleCard2:
0002B2BE 0000                       		dc.w ((PLC_TitleCard2_End-PLC_TitleCard2-2)/6)-1
0002B2C0 0000 0000                  		dc.l Nem_TitleCard2
0002B2C4 B000                       		dc.w $B000
0002B2C6 0000 0000                  		dc.l Nem_TitleCard3
0002B2CA D000                       		dc.w $D000
0002B2CC                            PLC_TitleCard2_End
0002B2CC                            ; ---------------------------------------------------------------------------
0002B2CC                            ; Pattern load cues - act 3 boss
0002B2CC                            ; ---------------------------------------------------------------------------
0002B2CC 0000                       PLC_Boss:	dc.w ((PLC_Boss_End-PLC_Boss-2)/6)-1
0002B2CE 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002B2D2 8000                       		dc.w $8000
0002B2D4 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0002B2D8 8D80                       		dc.w $8D80
0002B2DA 0000 0000                  		dc.l Nem_Prison		; prison capsule
0002B2DE 93A0                       		dc.w $93A0
0002B2E0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0002B2E4 A300                       		dc.w $A300
0002B2E6 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0002B2EA A300                       		dc.w $A300
0002B2EC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002B2F0 A540                       		dc.w $A540
0002B2F2 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002B2F6 B400                       		dc.w $B400
0002B2F8                            PLC_Boss_End
0002B2F8                            ; ---------------------------------------------------------------------------
0002B2F8                            ; Pattern load cues - act 1/2 signpost
0002B2F8                            ; ---------------------------------------------------------------------------
0002B2F8 0000                       PLC_Signpost:	dc.w ((PLC_Signpost_End-PLC_Signpost-2)/6)-1
0002B2FA 0000 0000                  		dc.l Nem_SignPost	; signpost
0002B2FE D000                       		dc.w $D000
0002B300 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0002B304 96C0                       		dc.w $96C0
0002B306 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0002B30A 8C40                       		dc.w $8C40
0002B30C                            PLC_Signpost_End
0002B30C                            ; ---------------------------------------------------------------------------
0002B30C                            ; Pattern load cues - beta special stage warp effect
0002B30C                            ; ---------------------------------------------------------------------------
0002B30C                            PLC_Warp:
0002B30C 0000                       		dc.w ((PLC_Warpend-PLC_Warp-2)/6)-1
0002B30E 0000 0000                  		dc.l Nem_Warp
0002B312 A820                       		dc.w $A820
0002B314                            	PLC_Warpend:
0002B314                            ; ---------------------------------------------------------------------------
0002B314                            ; Pattern load cues - special stage
0002B314                            ; ---------------------------------------------------------------------------
0002B314 0000                       PLC_SpeStage:	dc.w ((PLC_SpeStage_End-PLC_SpeStage-2)/6)-1
0002B316 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0002B31A 0000                       		dc.w 0
0002B31C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0002B320 0A20                       		dc.w $A20
0002B322                            ;		dc.l Nem_SSWalls	; walls
0002B322                            ;		dc.w $2840
0002B322 0000 0000                  		dc.l Nem_Bumper		; bumper
0002B326 4760                       		dc.w $4760
0002B328 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0002B32C 4A20                       		dc.w $4A20
0002B32E 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0002B332 4C60                       		dc.w $4C60
0002B334 0000 0000                  		dc.l Nem_SSRBlock	; R block
0002B338 5E00                       		dc.w $5E00
0002B33A 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0002B33E 6E00                       		dc.w $6E00
0002B340 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0002B344 7E00                       		dc.w $7E00
0002B346 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0002B34A 8E00                       		dc.w $8E00
0002B34C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0002B350 9E00                       		dc.w $9E00
0002B352 0000 0000                  		dc.l Nem_SSWBlock	; W block
0002B356 AE00                       		dc.w $AE00
0002B358 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0002B35C BE00                       		dc.w $BE00
0002B35E 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0002B362 EE00                       		dc.w $EE00
0002B364 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0002B368 F2E0                       		dc.w $F2E0
0002B36A 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0002B36E F400                       		dc.w $F400
0002B370 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0002B374 F520                       		dc.w $F520
0002B376 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0002B37A F2E0                       		dc.w $F2E0
0002B37C 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0002B380 F400                       		dc.w $F400
0002B382 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0002B386 F520                       		dc.w $F520
0002B388                            PLC_SpeStage_End
0002B388                            ; ---------------------------------------------------------------------------
0002B388                            ; Pattern load cues - GHZ animals
0002B388                            ; ---------------------------------------------------------------------------
0002B388 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimals_End-PLC_GHZAnimals-2)/6)-1
0002B38A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B38E B000                       		dc.w $B000
0002B390 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B394 B240                       		dc.w $B240
0002B396                            PLC_GHZAnimals_End
0002B396                            ; ---------------------------------------------------------------------------
0002B396                            ; Pattern load cues - LZ animals
0002B396                            ; ---------------------------------------------------------------------------
0002B396 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimals_End-PLC_LZAnimals-2)/6)-1
0002B398 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002B39C B000                       		dc.w $B000
0002B39E 0000 0000                  		dc.l Nem_Seal		; seal
0002B3A2 B240                       		dc.w $B240
0002B3A4                            PLC_LZAnimals_End
0002B3A4                            ; ---------------------------------------------------------------------------
0002B3A4                            ; Pattern load cues - MZ animals
0002B3A4                            ; ---------------------------------------------------------------------------
0002B3A4 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimals_End-PLC_MZAnimals-2)/6)-1
0002B3A6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B3AA B000                       		dc.w $B000
0002B3AC 0000 0000                  		dc.l Nem_Seal		; seal
0002B3B0 B240                       		dc.w $B240
0002B3B2                            PLC_MZAnimals_End
0002B3B2                            ; ---------------------------------------------------------------------------
0002B3B2                            ; Pattern load cues - SLZ animals
0002B3B2                            ; ---------------------------------------------------------------------------
0002B3B2 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimals_End-PLC_SLZAnimals-2)/6)-1
0002B3B4 0000 0000                  		dc.l Nem_Pig		; pig
0002B3B8 B000                       		dc.w $B000
0002B3BA 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B3BE B240                       		dc.w $B240
0002B3C0                            PLC_SLZAnimals_End
0002B3C0                            ; ---------------------------------------------------------------------------
0002B3C0                            ; Pattern load cues - SYZ animals
0002B3C0                            ; ---------------------------------------------------------------------------
0002B3C0 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimals_End-PLC_SYZAnimals-2)/6)-1
0002B3C2 0000 0000                  		dc.l Nem_Pig		; pig
0002B3C6 B000                       		dc.w $B000
0002B3C8 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B3CC B240                       		dc.w $B240
0002B3CE                            PLC_SYZAnimals_End
0002B3CE                            ; ---------------------------------------------------------------------------
0002B3CE                            ; Pattern load cues - SBZ animals
0002B3CE                            ; ---------------------------------------------------------------------------
0002B3CE 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimals_End-PLC_SBZAnimals-2)/6)-1
0002B3D0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B3D4 B000                       		dc.w $B000
0002B3D6 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B3DA B240                       		dc.w $B240
0002B3DC                            PLC_SBZAnimals_End
0002B3DC                            ; ---------------------------------------------------------------------------
0002B3DC                            ; Pattern load cues - MZ animals
0002B3DC                            ; ---------------------------------------------------------------------------
0002B3DC 0000                       PLC_ABZAnimals:	dc.w ((PLC_ABZAnimals_End-PLC_ABZAnimals-2)/6)-1
0002B3DE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B3E2 B000                       		dc.w $B000
0002B3E4 0000 0000                  		dc.l Nem_Seal		; seal
0002B3E8 B240                       		dc.w $B240
0002B3EA                            PLC_ABZAnimals_End
0002B3EA                            ; ---------------------------------------------------------------------------
0002B3EA                            ; Pattern load cues - special stage results screen
0002B3EA                            ; ---------------------------------------------------------------------------
0002B3EA 0000                       PLC_SpeStResult:dc.w ((PLC_SpeStResult_End-PLC_SpeStResult-2)/6)-1
0002B3EC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0002B3F0 A820                       		dc.w $A820
0002B3F2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0002B3F6 AA20                       		dc.w $AA20
0002B3F8                            PLC_SpeStResult_End			
0002B3F8                            ; ---------------------------------------------------------------------------
0002B3F8                            ; Pattern load cues - ending sequence
0002B3F8                            ; ---------------------------------------------------------------------------
0002B3F8 0000                       PLC_Ending:	dc.w ((PLC_Ending_End-PLC_Ending-2)/6)-1
0002B3FA                            ;		dc.l Nem_GHZ_1st	; GHZ main patterns
0002B3FA                            ;		dc.w 0
0002B3FA                            ;		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0002B3FA                            ;		dc.w $39A0
0002B3FA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0002B3FE 6B00                       		dc.w $6B00
0002B400 0000 0000                  		dc.l Nem_EndFlower	; flowers
0002B404 7400                       		dc.w $7400
0002B406 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002B40A 78A0                       		dc.w $78A0
0002B40C 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0002B410 7C20                       		dc.w $7C20
0002B412 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0002B416 A480                       		dc.w $A480
0002B418 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0002B41C AA60                       		dc.w $AA60
0002B41E 0000 0000                  		dc.l Nem_Chicken	; chicken
0002B422 ACA0                       		dc.w $ACA0
0002B424 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0002B428 AE60                       		dc.w $AE60
0002B42A 0000 0000                  		dc.l Nem_Seal		; seal
0002B42E B0A0                       		dc.w $B0A0
0002B430 0000 0000                  		dc.l Nem_Pig		; pig
0002B434 B260                       		dc.w $B260
0002B436 0000 0000                  		dc.l Nem_Flicky		; flicky
0002B43A B4A0                       		dc.w $B4A0
0002B43C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0002B440 B660                       		dc.w $B660
0002B442 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0002B446 B8A0                       		dc.w $B8A0
0002B448                            PLC_Ending_End
0002B448                            ; ---------------------------------------------------------------------------
0002B448                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0002B448                            ; ---------------------------------------------------------------------------
0002B448 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgain_End-PLC_TryAgain-2)/6)-1
0002B44A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0002B44E 78A0                       		dc.w $78A0
0002B450 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0002B454 7C20                       		dc.w $7C20
0002B456 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0002B45A B400                       		dc.w $B400
0002B45C                            PLC_TryAgain_End
0002B45C                            ; ---------------------------------------------------------------------------
0002B45C                            ; Pattern load cues - Eggman on SBZ 2
0002B45C                            ; ---------------------------------------------------------------------------
0002B45C 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2_End-PLC_EggmanSBZ2-2)/6)-1
0002B45E 0000 0000                  		dc.l Nem_SbzBlock	; block
0002B462 A300                       		dc.w $A300
0002B464 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0002B468 8000                       		dc.w $8000
0002B46A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0002B46E 9400                       		dc.w $9400
0002B470                            PLC_EggmanSBZ2_End
0002B470                            ; ---------------------------------------------------------------------------
0002B470                            ; Pattern load cues - final boss
0002B470                            ; ---------------------------------------------------------------------------
0002B470 0000                       PLC_FZBoss:	dc.w ((PLC_FZBoss_End-PLC_FZBoss-2)/6)-1
0002B472 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0002B476 7400                       		dc.w $7400
0002B478 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0002B47C 6000                       		dc.w $6000
0002B47E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0002B482 8000                       		dc.w $8000
0002B484 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0002B488 8E00                       		dc.w $8E00
0002B48A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0002B48E A540                       		dc.w $A540
0002B490 0000 0000                  		dc.l Nem_BossExplode	; explosion
0002B494 B400                       		dc.w $B400
0002B496                            PLC_FZBoss_End:
0002B496                            ; ---------------------------------------------------------------------------
0002B496                            ; Pattern load cues - Alpha Beta
0002B496                            ; ---------------------------------------------------------------------------
0002B496 0000                       PLC_ABZ:	dc.w ((PLC_ABZ_End-PLC_ABZ-2)/6)-1
0002B498                            		;dc.l Nem_ABZ		; ABZ main patterns
0002B498                            		;dc.w 0
0002B498                            PLC_ABZ_End
0002B498 0000                       PLC_ABZ2:	dc.w ((PLC_ABZ2_End-PLC_ABZ2-2)/6)-1
0002B49A 0000 0000                  		dc.l Nem_MzSwitch	; switch
0002B49E A260                       		dc.w $A260
0002B4A0 0000 0000                  		dc.l Nem_Spikes		; spikes
0002B4A4 A360                       		dc.w $A360
0002B4A6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0002B4AA A460                       		dc.w $A460
0002B4AC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0002B4B0 A660                       		dc.w $A660
0002B4B2                            PLC_ABZ2_End
0002B4B2                            		even
0002B4B2                            		even
0002B4B2                            
0002B4B2                            		incbin	misc\padding.bin
0002B5A0                            		even
0002B5A0                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0002BA02                            		even
0002BA02                            ;Sega_Spr: 
0002BA02                            ;		incbin 'data/sprites/sega.nem'
0002BA02                            ;Sega_Blocks_Spr: 
0002BA02                            ;		incbin 'data/sprites/sega_blk.nem'
0002BA02                            ;Sega_Mappings: 
0002BA02                            ;		incbin 'data/all/sega.eni' 
0002BA02                            ;Metal_Sonic: 
0002BA02                            ;		incbin 'data/dez/metal_snc.nem' 
0002BA02                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0002BAFA                            		even
0002BAFA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0002BC04                            		even
0002BC04                            Nem_TitleFg:	incbin	artnem\titlefgv2.bin	; title screen foreground
0002CB84                            		even
0002CB84                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002E552                            		even
0002E552                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002E586                            		even
0002E586                            Eni_SSRGBG:	incbin	mapeni\ssrgbg.bin
0002E624 00                         		even
0002E624                            Nem_SSRGBG:	incbin	artnem\ssrgbg.bin
0002ECC2                            		even
0002ECC2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002ED00                            		even
0002ED00                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002F1A8                            		even
0002F1A8                            Unc_SuperSonic_stars:	incbin	artnem\superstarsfixunc.bin ; Super Sonic stars
0002F3A8                            		even
0002F3A8                            Nem_MenuFont:	incbin	artnem\menufont.bin ; level select s2 font
0002F984 00                         		even
0002F984                            Nem_MenuBox:	incbin	artnem\menubox.bin  ; menu options box
0002FA04                            		even
0002FA04                            Eni_MenuBox:	incbin	mapeni\menubox.bin	; menu options box (mappings)
0002FA30                            		even
0002FA30                            ;Eni_MenuBg:	incbin  'data\menu\menubg.eni'	; level select s2 background (mappings)
0002FA30                            ;		even
0002FA30                            ;Nem_LevelIcons:	incbin	artnem\levelico.bin	; level select s2 icons
0002FA30                            ;		even
0002FA30                            ; ---------------------------------------------------------------------------
0002FA30                            ; Sprite mappings - Sonic
0002FA30                            ; ---------------------------------------------------------------------------
0002FA30                            ;Map_Sonic:
0002FA30                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2.asm"
0002FA30                            ;	even
0002FA30                            Map_Sonic:
0002FA30                            	include "_maps\Sonic.asm"
0002FA30                            ; --------------------------------------------------------------------------------
0002FA30                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002FA30                            ; --------------------------------------------------------------------------------
0002FA30                            
0002FA30                            SME_KM9WW:	
0002FA30 0000 0000                  		dc.w SME_KM9WW_1B4-SME_KM9WW, SME_KM9WW_1B5-SME_KM9WW	
0002FA34 0000 0000                  		dc.w SME_KM9WW_1C5-SME_KM9WW, SME_KM9WW_1D5-SME_KM9WW	
0002FA38 0000 0000                  		dc.w SME_KM9WW_1E5-SME_KM9WW, SME_KM9WW_1F0-SME_KM9WW	
0002FA3C 0000 0000                  		dc.w SME_KM9WW_200-SME_KM9WW, SME_KM9WW_210-SME_KM9WW	
0002FA40 0000 0000                  		dc.w SME_KM9WW_220-SME_KM9WW, SME_KM9WW_22B-SME_KM9WW	
0002FA44 0000 0000                  		dc.w SME_KM9WW_240-SME_KM9WW, SME_KM9WW_255-SME_KM9WW	
0002FA48 0000 0000                  		dc.w SME_KM9WW_26A-SME_KM9WW, SME_KM9WW_27F-SME_KM9WW	
0002FA4C 0000 0000                  		dc.w SME_KM9WW_294-SME_KM9WW, SME_KM9WW_2A9-SME_KM9WW	
0002FA50 0000 0000                  		dc.w SME_KM9WW_2BE-SME_KM9WW, SME_KM9WW_2D3-SME_KM9WW	
0002FA54 0000 0000                  		dc.w SME_KM9WW_2E3-SME_KM9WW, SME_KM9WW_2F3-SME_KM9WW	
0002FA58 0000 0000                  		dc.w SME_KM9WW_303-SME_KM9WW, SME_KM9WW_30E-SME_KM9WW	
0002FA5C 0000 0000                  		dc.w SME_KM9WW_31E-SME_KM9WW, SME_KM9WW_333-SME_KM9WW	
0002FA60 0000 0000                  		dc.w SME_KM9WW_343-SME_KM9WW, SME_KM9WW_34E-SME_KM9WW	
0002FA64 0000 0000                  		dc.w SME_KM9WW_363-SME_KM9WW, SME_KM9WW_378-SME_KM9WW	
0002FA68 0000 0000                  		dc.w SME_KM9WW_38D-SME_KM9WW, SME_KM9WW_3A2-SME_KM9WW	
0002FA6C 0000 0000                  		dc.w SME_KM9WW_3B7-SME_KM9WW, SME_KM9WW_3CC-SME_KM9WW	
0002FA70 0000 0000                  		dc.w SME_KM9WW_3E1-SME_KM9WW, SME_KM9WW_3F6-SME_KM9WW	
0002FA74 0000 0000                  		dc.w SME_KM9WW_401-SME_KM9WW, SME_KM9WW_40C-SME_KM9WW	
0002FA78 0000 0000                  		dc.w SME_KM9WW_417-SME_KM9WW, SME_KM9WW_422-SME_KM9WW	
0002FA7C 0000 0000                  		dc.w SME_KM9WW_437-SME_KM9WW, SME_KM9WW_442-SME_KM9WW	
0002FA80 0000 0000                  		dc.w SME_KM9WW_457-SME_KM9WW, SME_KM9WW_462-SME_KM9WW	
0002FA84 0000 0000                  		dc.w SME_KM9WW_46D-SME_KM9WW, SME_KM9WW_478-SME_KM9WW	
0002FA88 0000 0000                  		dc.w SME_KM9WW_483-SME_KM9WW, SME_KM9WW_48E-SME_KM9WW	
0002FA8C 0000 0000                  		dc.w SME_KM9WW_49E-SME_KM9WW, SME_KM9WW_4A9-SME_KM9WW	
0002FA90 0000 0000                  		dc.w SME_KM9WW_4B9-SME_KM9WW, SME_KM9WW_4C4-SME_KM9WW	
0002FA94 0000 0000                  		dc.w SME_KM9WW_4D4-SME_KM9WW, SME_KM9WW_4E9-SME_KM9WW	
0002FA98 0000 0000                  		dc.w SME_KM9WW_4FE-SME_KM9WW, SME_KM9WW_513-SME_KM9WW	
0002FA9C 0000 0000                  		dc.w SME_KM9WW_528-SME_KM9WW, SME_KM9WW_538-SME_KM9WW	
0002FAA0 0000 0000                  		dc.w SME_KM9WW_543-SME_KM9WW, SME_KM9WW_54E-SME_KM9WW	
0002FAA4 0000 0000                  		dc.w SME_KM9WW_55E-SME_KM9WW, SME_KM9WW_573-SME_KM9WW	
0002FAA8 0000 0000                  		dc.w SME_KM9WW_57E-SME_KM9WW, SME_KM9WW_589-SME_KM9WW	
0002FAAC 0000 0000                  		dc.w SME_KM9WW_599-SME_KM9WW, SME_KM9WW_59F-SME_KM9WW	
0002FAB0 0000 0000                  		dc.w SME_KM9WW_5AF-SME_KM9WW, SME_KM9WW_5C4-SME_KM9WW	
0002FAB4 0000 0000                  		dc.w SME_KM9WW_5D9-SME_KM9WW, SME_KM9WW_5EE-SME_KM9WW	
0002FAB8 0000 0000                  		dc.w SME_KM9WW_5F9-SME_KM9WW, SME_KM9WW_5FF-SME_KM9WW	
0002FABC 0000 0000                  		dc.w SME_KM9WW_60A-SME_KM9WW, SME_KM9WW_610-SME_KM9WW	
0002FAC0 0000 0000                  		dc.w SME_KM9WW_61B-SME_KM9WW, SME_KM9WW_62B-SME_KM9WW	
0002FAC4 0000 0000                  		dc.w SME_KM9WW_640-SME_KM9WW, SME_KM9WW_655-SME_KM9WW	
0002FAC8 0000 0000                  		dc.w SME_KM9WW_665-SME_KM9WW, SME_KM9WW_675-SME_KM9WW	
0002FACC 0000 0000                  		dc.w SME_KM9WW_685-SME_KM9WW, SME_KM9WW_68B-SME_KM9WW	
0002FAD0 0000 0000                  		dc.w SME_KM9WW_6A0-SME_KM9WW, SME_KM9WW_6B5-SME_KM9WW	
0002FAD4 0000 0000                  		dc.w SME_KM9WW_6C0-SME_KM9WW, SME_KM9WW_6D0-SME_KM9WW	
0002FAD8 0000 0000                  		dc.w SME_KM9WW_6E0-SME_KM9WW, SME_KM9WW_6EB-SME_KM9WW	
0002FADC 0000 0000                  		dc.w SME_KM9WW_700-SME_KM9WW, SME_KM9WW_710-SME_KM9WW	
0002FAE0 0000 0000                  		dc.w SME_KM9WW_71B-SME_KM9WW, SME_KM9WW_726-SME_KM9WW	
0002FAE4 0000 0000                  		dc.w SME_KM9WW_73B-SME_KM9WW, SME_KM9WW_74B-SME_KM9WW	
0002FAE8 0000 0000                  		dc.w SME_KM9WW_756-SME_KM9WW, SME_KM9WW_766-SME_KM9WW	
0002FAEC 0000 0000                  		dc.w SME_KM9WW_76C-SME_KM9WW, SME_KM9WW_777-SME_KM9WW	
0002FAF0 0000 0000                  		dc.w SME_KM9WW_787-SME_KM9WW, SME_KM9WW_78D-SME_KM9WW	
0002FAF4 0000 0000                  		dc.w SME_KM9WW_798-SME_KM9WW, SME_KM9WW_7A3-SME_KM9WW	
0002FAF8 0000 0000                  		dc.w SME_KM9WW_7B3-SME_KM9WW, SME_KM9WW_7B9-SME_KM9WW	
0002FAFC 0000 0000                  		dc.w SME_KM9WW_7C4-SME_KM9WW, SME_KM9WW_7D4-SME_KM9WW	
0002FB00 0000 0000                  		dc.w SME_KM9WW_7DA-SME_KM9WW, SME_KM9WW_7E5-SME_KM9WW	
0002FB04 0000 0000                  		dc.w SME_KM9WW_7F0-SME_KM9WW, SME_KM9WW_805-SME_KM9WW	
0002FB08 0000 0000                  		dc.w SME_KM9WW_815-SME_KM9WW, SME_KM9WW_825-SME_KM9WW	
0002FB0C 0000 0000                  		dc.w SME_KM9WW_830-SME_KM9WW, SME_KM9WW_840-SME_KM9WW	
0002FB10 0000 0000                  		dc.w SME_KM9WW_850-SME_KM9WW, SME_KM9WW_860-SME_KM9WW	
0002FB14 0000 0000                  		dc.w SME_KM9WW_86B-SME_KM9WW, SME_KM9WW_880-SME_KM9WW	
0002FB18 0000 0000                  		dc.w SME_KM9WW_890-SME_KM9WW, SME_KM9WW_8A0-SME_KM9WW	
0002FB1C 0000 0000                  		dc.w SME_KM9WW_8AB-SME_KM9WW, SME_KM9WW_8BB-SME_KM9WW	
0002FB20 0000 0000                  		dc.w SME_KM9WW_8C1-SME_KM9WW, SME_KM9WW_8D6-SME_KM9WW	
0002FB24 0000 0000                  		dc.w SME_KM9WW_8EB-SME_KM9WW, SME_KM9WW_8FB-SME_KM9WW	
0002FB28 0000 0000                  		dc.w SME_KM9WW_910-SME_KM9WW, SME_KM9WW_925-SME_KM9WW	
0002FB2C 0000 0000                  		dc.w SME_KM9WW_93A-SME_KM9WW, SME_KM9WW_94A-SME_KM9WW	
0002FB30 0000 0000                  		dc.w SME_KM9WW_95F-SME_KM9WW, SME_KM9WW_974-SME_KM9WW	
0002FB34 0000 0000                  		dc.w SME_KM9WW_989-SME_KM9WW, SME_KM9WW_999-SME_KM9WW	
0002FB38 0000 0000                  		dc.w SME_KM9WW_9AE-SME_KM9WW, SME_KM9WW_9BE-SME_KM9WW	
0002FB3C 0000 0000                  		dc.w SME_KM9WW_9C9-SME_KM9WW, SME_KM9WW_9D9-SME_KM9WW	
0002FB40 0000 0000                  		dc.w SME_KM9WW_9E4-SME_KM9WW, SME_KM9WW_9EF-SME_KM9WW	
0002FB44 0000 0000                  		dc.w SME_KM9WW_9FA-SME_KM9WW, SME_KM9WW_A05-SME_KM9WW	
0002FB48 0000 0000                  		dc.w SME_KM9WW_A10-SME_KM9WW, SME_KM9WW_A20-SME_KM9WW	
0002FB4C 0000 0000                  		dc.w SME_KM9WW_A30-SME_KM9WW, SME_KM9WW_A3B-SME_KM9WW	
0002FB50 0000 0000                  		dc.w SME_KM9WW_A4B-SME_KM9WW, SME_KM9WW_A60-SME_KM9WW	
0002FB54 0000 0000                  		dc.w SME_KM9WW_A75-SME_KM9WW, SME_KM9WW_A8A-SME_KM9WW	
0002FB58 0000 0000                  		dc.w SME_KM9WW_A95-SME_KM9WW, SME_KM9WW_AAF-SME_KM9WW	
0002FB5C 0000 0000                  		dc.w SME_KM9WW_AC9-SME_KM9WW, SME_KM9WW_ACF-SME_KM9WW	
0002FB60 0000 0000                  		dc.w SME_KM9WW_AD5-SME_KM9WW, SME_KM9WW_ADB-SME_KM9WW	
0002FB64 0000 0000                  		dc.w SME_KM9WW_AE1-SME_KM9WW, SME_KM9WW_AE7-SME_KM9WW	
0002FB68 0000 0000                  		dc.w SME_KM9WW_AF2-SME_KM9WW, SME_KM9WW_AFD-SME_KM9WW	
0002FB6C 0000 0000                  		dc.w SME_KM9WW_B12-SME_KM9WW, SME_KM9WW_B27-SME_KM9WW	
0002FB70 0000 0000                  		dc.w SME_KM9WW_B3C-SME_KM9WW, SME_KM9WW_B4C-SME_KM9WW	
0002FB74 0000 0000                  		dc.w SME_KM9WW_B5C-SME_KM9WW, SME_KM9WW_B71-SME_KM9WW	
0002FB78 0000 0000                  		dc.w SME_KM9WW_B81-SME_KM9WW, SME_KM9WW_B96-SME_KM9WW	
0002FB7C 0000 0000                  		dc.w SME_KM9WW_BA6-SME_KM9WW, SME_KM9WW_BBB-SME_KM9WW	
0002FB80 0000 0000                  		dc.w SME_KM9WW_BCB-SME_KM9WW, SME_KM9WW_BDB-SME_KM9WW	
0002FB84 0000 0000                  		dc.w SME_KM9WW_BEB-SME_KM9WW, SME_KM9WW_BFB-SME_KM9WW	
0002FB88 0000 0000                  		dc.w SME_KM9WW_C0B-SME_KM9WW, SME_KM9WW_C20-SME_KM9WW	
0002FB8C 0000 0000                  		dc.w SME_KM9WW_C35-SME_KM9WW, SME_KM9WW_C4A-SME_KM9WW	
0002FB90 0000 0000                  		dc.w SME_KM9WW_C5F-SME_KM9WW, SME_KM9WW_C6A-SME_KM9WW	
0002FB94 0000 0000                  		dc.w SME_KM9WW_C7A-SME_KM9WW, SME_KM9WW_C8A-SME_KM9WW	
0002FB98 0000 0000                  		dc.w SME_KM9WW_C9A-SME_KM9WW, SME_KM9WW_CAA-SME_KM9WW	
0002FB9C 0000 0000                  		dc.w SME_KM9WW_CBA-SME_KM9WW, SME_KM9WW_CCA-SME_KM9WW	
0002FBA0 0000 0000                  		dc.w SME_KM9WW_CDA-SME_KM9WW, SME_KM9WW_CEA-SME_KM9WW	
0002FBA4 0000 0000                  		dc.w SME_KM9WW_CFA-SME_KM9WW, SME_KM9WW_D0F-SME_KM9WW	
0002FBA8 0000 0000                  		dc.w SME_KM9WW_D1F-SME_KM9WW, SME_KM9WW_D34-SME_KM9WW	
0002FBAC 0000 0000                  		dc.w SME_KM9WW_D49-SME_KM9WW, SME_KM9WW_D5E-SME_KM9WW	
0002FBB0 0000 0000                  		dc.w SME_KM9WW_D73-SME_KM9WW, SME_KM9WW_D88-SME_KM9WW	
0002FBB4 0000 0000                  		dc.w SME_KM9WW_D93-SME_KM9WW, SME_KM9WW_DA8-SME_KM9WW	
0002FBB8 0000 0000                  		dc.w SME_KM9WW_DBD-SME_KM9WW, SME_KM9WW_DD2-SME_KM9WW	
0002FBBC 0000 0000                  		dc.w SME_KM9WW_DE2-SME_KM9WW, SME_KM9WW_DF7-SME_KM9WW	
0002FBC0 0000 0000                  		dc.w SME_KM9WW_E0C-SME_KM9WW, SME_KM9WW_E1C-SME_KM9WW	
0002FBC4 0000 0000                  		dc.w SME_KM9WW_E2C-SME_KM9WW, SME_KM9WW_E37-SME_KM9WW	
0002FBC8 0000 0000                  		dc.w SME_KM9WW_E47-SME_KM9WW, SME_KM9WW_E57-SME_KM9WW	
0002FBCC 0000 0000                  		dc.w SME_KM9WW_E62-SME_KM9WW, SME_KM9WW_E6D-SME_KM9WW	
0002FBD0 0000 0000                  		dc.w SME_KM9WW_E78-SME_KM9WW, SME_KM9WW_E88-SME_KM9WW	
0002FBD4 0000 0000                  		dc.w SME_KM9WW_E98-SME_KM9WW, SME_KM9WW_E9E-SME_KM9WW	
0002FBD8 0000 0000                  		dc.w SME_KM9WW_EAE-SME_KM9WW, SME_KM9WW_EB9-SME_KM9WW	
0002FBDC 0000 0000                  		dc.w SME_KM9WW_EC9-SME_KM9WW, SME_KM9WW_ED9-SME_KM9WW	
0002FBE0 0000 0000                  		dc.w SME_KM9WW_EE9-SME_KM9WW, SME_KM9WW_EF9-SME_KM9WW	
0002FBE4 00                         SME_KM9WW_1B4:	dc.b 0	
0002FBE5 03                         SME_KM9WW_1B5:	dc.b 3	
0002FBE6 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	
0002FBEB FC06 0008 04               		dc.b $FC, 6, 0, 8, 4	
0002FBF0 FC0A 000E EC               		dc.b $FC, $A, 0, $E, $EC	
0002FBF5 03                         SME_KM9WW_1C5:	dc.b 3	
0002FBF6 FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
0002FBFB 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
0002FC00 ED0D 000E EC               		dc.b $ED, $D, 0, $E, $EC	
0002FC05 03                         SME_KM9WW_1D5:	dc.b 3	
0002FC06 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
0002FC0B F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
0002FC10 EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0002FC15 02                         SME_KM9WW_1E5:	dc.b 2	
0002FC16 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0002FC1B EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
0002FC20 03                         SME_KM9WW_1F0:	dc.b 3	
0002FC21 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
0002FC26 FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
0002FC2B EC09 000E F4               		dc.b $EC, 9, 0, $E, $F4	
0002FC30 03                         SME_KM9WW_200:	dc.b 3	
0002FC31 FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
0002FC36 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
0002FC3B ED09 000E F4               		dc.b $ED, 9, 0, $E, $F4	
0002FC40 03                         SME_KM9WW_210:	dc.b 3	
0002FC41 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
0002FC46 F60C 0009 EC               		dc.b $F6, $C, 0, 9, $EC	
0002FC4B EE08 000D F4               		dc.b $EE, 8, 0, $D, $F4	
0002FC50 02                         SME_KM9WW_220:	dc.b 2	
0002FC51 FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
0002FC56 EC0D 0009 EC               		dc.b $EC, $D, 0, 9, $EC	
0002FC5B 04                         SME_KM9WW_22B:	dc.b 4	
0002FC5C FD0B 0000 FB               		dc.b $FD, $B, 0, 0, $FB	
0002FC61 ED0D 000C EB               		dc.b $ED, $D, 0, $C, $EB	
0002FC66 F500 0014 0B               		dc.b $F5, 0, 0, $14, $B	
0002FC6B FD05 0015 EB               		dc.b $FD, 5, 0, $15, $EB	
0002FC70 04                         SME_KM9WW_240:	dc.b 4	
0002FC71 020E 0000 FC               		dc.b 2, $E, 0, 0, $FC	
0002FC76 F20D 000C EC               		dc.b $F2, $D, 0, $C, $EC	
0002FC7B FA04 0014 0C               		dc.b $FA, 4, 0, $14, $C	
0002FC80 0204 0016 EC               		dc.b 2, 4, 0, $16, $EC	
0002FC85 04                         SME_KM9WW_255:	dc.b 4	
0002FC86 FB0A 0000 FD               		dc.b $FB, $A, 0, 0, $FD	
0002FC8B EB04 0009 F5               		dc.b $EB, 4, 0, 9, $F5	
0002FC90 F30C 000B ED               		dc.b $F3, $C, 0, $B, $ED	
0002FC95 FB05 000F ED               		dc.b $FB, 5, 0, $F, $ED	
0002FC9A 04                         SME_KM9WW_26A:	dc.b 4	
0002FC9B FD0E 0000 FC               		dc.b $FD, $E, 0, 0, $FC	
0002FCA0 ED0D 000C EC               		dc.b $ED, $D, 0, $C, $EC	
0002FCA5 FD04 0014 EC               		dc.b $FD, 4, 0, $14, $EC	
0002FCAA 0500 0016 F4               		dc.b 5, 0, 0, $16, $F4	
0002FCAF 04                         SME_KM9WW_27F:	dc.b 4	
0002FCB0 FE0B 0000 FC               		dc.b $FE, $B, 0, 0, $FC	
0002FCB5 EE0D 000C EC               		dc.b $EE, $D, 0, $C, $EC	
0002FCBA EE01 0014 0C               		dc.b $EE, 1, 0, $14, $C	
0002FCBF FE06 0016 EC               		dc.b $FE, 6, 0, $16, $EC	
0002FCC4 04                         SME_KM9WW_294:	dc.b 4	
0002FCC5 FC0F 0000 FB               		dc.b $FC, $F, 0, 0, $FB	
0002FCCA EC09 0010 EB               		dc.b $EC, 9, 0, $10, $EB	
0002FCCF F408 0016 03               		dc.b $F4, 8, 0, $16, 3	
0002FCD4 FC05 0019 EB               		dc.b $FC, 5, 0, $19, $EB	
0002FCD9 04                         SME_KM9WW_2A9:	dc.b 4	
0002FCDA FF0A 0000 FA               		dc.b $FF, $A, 0, 0, $FA	
0002FCDF EF0D 0009 EA               		dc.b $EF, $D, 0, 9, $EA	
0002FCE4 FF04 0011 EA               		dc.b $FF, 4, 0, $11, $EA	
0002FCE9 0700 0013 F2               		dc.b 7, 0, 0, $13, $F2	
0002FCEE 04                         SME_KM9WW_2BE:	dc.b 4	
0002FCEF FE0A 0000 FC               		dc.b $FE, $A, 0, 0, $FC	
0002FCF4 EE08 0009 EC               		dc.b $EE, 8, 0, 9, $EC	
0002FCF9 F60C 000C EC               		dc.b $F6, $C, 0, $C, $EC	
0002FCFE FE05 0010 EC               		dc.b $FE, 5, 0, $10, $EC	
0002FD03 03                         SME_KM9WW_2D3:	dc.b 3	
0002FD04 ED09 0000 FC               		dc.b $ED, 9, 0, 0, $FC	
0002FD09 FD0A 0006 FC               		dc.b $FD, $A, 0, 6, $FC	
0002FD0E F507 000F EC               		dc.b $F5, 7, 0, $F, $EC	
0002FD13 03                         SME_KM9WW_2E3:	dc.b 3	
0002FD14 F50B 0000 FC               		dc.b $F5, $B, 0, 0, $FC	
0002FD19 ED04 000C 04               		dc.b $ED, 4, 0, $C, 4	
0002FD1E F507 000E EC               		dc.b $F5, 7, 0, $E, $EC	
0002FD23 03                         SME_KM9WW_2F3:	dc.b 3	
0002FD24 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
0002FD29 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
0002FD2E 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
0002FD33 02                         SME_KM9WW_303:	dc.b 2	
0002FD34 F30B 0000 FC               		dc.b $F3, $B, 0, 0, $FC	
0002FD39 F307 000C EC               		dc.b $F3, 7, 0, $C, $EC	
0002FD3E 03                         SME_KM9WW_30E:	dc.b 3	
0002FD3F EB04 0000 FC               		dc.b $EB, 4, 0, 0, $FC	
0002FD44 F30B 0002 FC               		dc.b $F3, $B, 0, 2, $FC	
0002FD49 F307 000E EC               		dc.b $F3, 7, 0, $E, $EC	
0002FD4E 04                         SME_KM9WW_31E:	dc.b 4	
0002FD4F EC04 0000 04               		dc.b $EC, 4, 0, 0, 4	
0002FD54 F40B 0002 FC               		dc.b $F4, $B, 0, 2, $FC	
0002FD59 F406 000E EC               		dc.b $F4, 6, 0, $E, $EC	
0002FD5E 0C00 0014 F4               		dc.b $C, 0, 0, $14, $F4	
0002FD63 03                         SME_KM9WW_333:	dc.b 3	
0002FD64 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
0002FD69 F506 0009 EC               		dc.b $F5, 6, 0, 9, $EC	
0002FD6E 0D00 000F F4               		dc.b $D, 0, 0, $F, $F4	
0002FD73 02                         SME_KM9WW_343:	dc.b 2	
0002FD74 F50A 0000 FC               		dc.b $F5, $A, 0, 0, $FC	
0002FD79 F507 0009 EC               		dc.b $F5, 7, 0, 9, $EC	
0002FD7E 04                         SME_KM9WW_34E:	dc.b 4	
0002FD7F EF0E 0000 FE               		dc.b $EF, $E, 0, 0, $FE	
0002FD84 EF06 000C EE               		dc.b $EF, 6, 0, $C, $EE	
0002FD89 070C 0012 EE               		dc.b 7, $C, 0, $12, $EE	
0002FD8E 0F08 0016 EE               		dc.b $F, 8, 0, $16, $EE	
0002FD93 04                         SME_KM9WW_363:	dc.b 4	
0002FD94 E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
0002FD99 E701 000C F8               		dc.b $E7, 1, 0, $C, $F8	
0002FD9E F705 000E F0               		dc.b $F7, 5, 0, $E, $F0	
0002FDA3 0709 0012 F0               		dc.b 7, 9, 0, $12, $F0	
0002FDA8 04                         SME_KM9WW_378:	dc.b 4	
0002FDA9 EF0A 0000 FD               		dc.b $EF, $A, 0, 0, $FD	
0002FDAE F705 0009 ED               		dc.b $F7, 5, 0, 9, $ED	
0002FDB3 070C 000D ED               		dc.b 7, $C, 0, $D, $ED	
0002FDB8 0F04 0011 F5               		dc.b $F, 4, 0, $11, $F5	
0002FDBD 04                         SME_KM9WW_38D:	dc.b 4	
0002FDBE E70B 0000 00               		dc.b $E7, $B, 0, 0, 0	
0002FDC3 F705 000C F0               		dc.b $F7, 5, 0, $C, $F0	
0002FDC8 070C 0010 F0               		dc.b 7, $C, 0, $10, $F0	
0002FDCD 0F08 0014 F0               		dc.b $F, 8, 0, $14, $F0	
0002FDD2 04                         SME_KM9WW_3A2:	dc.b 4	
0002FDD3 EE0E 0000 FF               		dc.b $EE, $E, 0, 0, $FF	
0002FDD8 EE06 000C EF               		dc.b $EE, 6, 0, $C, $EF	
0002FDDD 060D 0012 EF               		dc.b 6, $D, 0, $12, $EF	
0002FDE2 0600 001A 0F               		dc.b 6, 0, 0, $1A, $F	
0002FDE7 04                         SME_KM9WW_3B7:	dc.b 4	
0002FDE8 E80F 0000 FF               		dc.b $E8, $F, 0, 0, $FF	
0002FDED E802 0010 F7               		dc.b $E8, 2, 0, $10, $F7	
0002FDF2 0004 0013 EF               		dc.b 0, 4, 0, $13, $EF	
0002FDF7 080D 0015 EF               		dc.b 8, $D, 0, $15, $EF	
0002FDFC 04                         SME_KM9WW_3CC:	dc.b 4	
0002FDFD EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
0002FE02 F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
0002FE07 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
0002FE0C 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
0002FE11 04                         SME_KM9WW_3E1:	dc.b 4	
0002FE12 EE0A 0000 FE               		dc.b $EE, $A, 0, 0, $FE	
0002FE17 F605 0009 EE               		dc.b $F6, 5, 0, 9, $EE	
0002FE1C 060C 000D EE               		dc.b 6, $C, 0, $D, $EE	
0002FE21 0E08 0011 EE               		dc.b $E, 8, 0, $11, $EE	
0002FE26 02                         SME_KM9WW_3F6:	dc.b 2	
0002FE27 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0002FE2C F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0002FE31 02                         SME_KM9WW_401:	dc.b 2	
0002FE32 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0002FE37 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0002FE3C 02                         SME_KM9WW_40C:	dc.b 2	
0002FE3D EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0002FE42 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0002FE47 02                         SME_KM9WW_417:	dc.b 2	
0002FE48 EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
0002FE4D F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
0002FE52 04                         SME_KM9WW_422:	dc.b 4	
0002FE53 EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
0002FE58 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
0002FE5D 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
0002FE62 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
0002FE67 02                         SME_KM9WW_437:	dc.b 2	
0002FE68 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
0002FE6D F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
0002FE72 04                         SME_KM9WW_442:	dc.b 4	
0002FE73 EF0E 0000 ED               		dc.b $EF, $E, 0, 0, $ED	
0002FE78 FF00 000C 0D               		dc.b $FF, 0, 0, $C, $D	
0002FE7D 070C 000D F5               		dc.b 7, $C, 0, $D, $F5	
0002FE82 0F08 0011 F5               		dc.b $F, 8, 0, $11, $F5	
0002FE87 02                         SME_KM9WW_457:	dc.b 2	
0002FE88 EE08 0000 F0               		dc.b $EE, 8, 0, 0, $F0	
0002FE8D F60F 0003 F0               		dc.b $F6, $F, 0, 3, $F0	
0002FE92 02                         SME_KM9WW_462:	dc.b 2	
0002FE93 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
0002FE98 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0002FE9D 02                         SME_KM9WW_46D:	dc.b 2	
0002FE9E F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
0002FEA3 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0002FEA8 02                         SME_KM9WW_478:	dc.b 2	
0002FEA9 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
0002FEAE F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0002FEB3 02                         SME_KM9WW_483:	dc.b 2	
0002FEB4 F002 0000 EC               		dc.b $F0, 2, 0, 0, $EC	
0002FEB9 F00F 0003 F4               		dc.b $F0, $F, 0, 3, $F4	
0002FEBE 03                         SME_KM9WW_48E:	dc.b 3	
0002FEBF EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
0002FEC4 F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
0002FEC9 F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
0002FECE 02                         SME_KM9WW_49E:	dc.b 2	
0002FECF F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
0002FED4 EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
0002FED9 03                         SME_KM9WW_4A9:	dc.b 3	
0002FEDA EA04 0000 FE               		dc.b $EA, 4, 0, 0, $FE	
0002FEDF F20B 0002 EE               		dc.b $F2, $B, 0, 2, $EE	
0002FEE4 F206 000E 06               		dc.b $F2, 6, 0, $E, 6	
0002FEE9 02                         SME_KM9WW_4B9:	dc.b 2	
0002FEEA F702 0000 ED               		dc.b $F7, 2, 0, 0, $ED	
0002FEEF EF0F 0003 F5               		dc.b $EF, $F, 0, 3, $F5	
0002FEF4 03                         SME_KM9WW_4C4:	dc.b 3	
0002FEF5 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
0002FEFA F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
0002FEFF 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
0002FF04 04                         SME_KM9WW_4D4:	dc.b 4	
0002FF05 EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
0002FF0A FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
0002FF0F 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
0002FF14 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
0002FF19 04                         SME_KM9WW_4E9:	dc.b 4	
0002FF1A F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
0002FF1F F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
0002FF24 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
0002FF29 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
0002FF2E 04                         SME_KM9WW_4FE:	dc.b 4	
0002FF2F EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
0002FF34 F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
0002FF39 FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
0002FF3E 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
0002FF43 04                         SME_KM9WW_513:	dc.b 4	
0002FF44 EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
0002FF49 F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
0002FF4E FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
0002FF53 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
0002FF58 03                         SME_KM9WW_528:	dc.b 3	
0002FF59 EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
0002FF5E F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
0002FF63 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
0002FF68 02                         SME_KM9WW_538:	dc.b 2	
0002FF69 EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
0002FF6E 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
0002FF73 02                         SME_KM9WW_543:	dc.b 2	
0002FF74 EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
0002FF79 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
0002FF7E 03                         SME_KM9WW_54E:	dc.b 3	
0002FF7F EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
0002FF84 F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
0002FF89 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
0002FF8E 04                         SME_KM9WW_55E:	dc.b 4	
0002FF8F F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
0002FF94 F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
0002FF99 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
0002FF9E 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
0002FFA3 02                         SME_KM9WW_573:	dc.b 2	
0002FFA4 EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
0002FFA9 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
0002FFAE 02                         SME_KM9WW_57E:	dc.b 2	
0002FFAF EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
0002FFB4 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002FFB9 03                         SME_KM9WW_589:	dc.b 3	
0002FFBA E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
0002FFBF EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
0002FFC4 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
0002FFC9 01                         SME_KM9WW_599:	dc.b 1	
0002FFCA F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
0002FFCF 03                         SME_KM9WW_59F:	dc.b 3	
0002FFD0 F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
0002FFD5 F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
0002FFDA 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
0002FFDF 04                         SME_KM9WW_5AF:	dc.b 4	
0002FFE0 F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
0002FFE5 FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
0002FFEA 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
0002FFEF 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
0002FFF4 04                         SME_KM9WW_5C4:	dc.b 4	
0002FFF5 EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
0002FFFA FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
0002FFFF 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
00030004 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
00030009 04                         SME_KM9WW_5D9:	dc.b 4	
0003000A EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
0003000F FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
00030014 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
00030019 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
0003001E 02                         SME_KM9WW_5EE:	dc.b 2	
0003001F EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
00030024 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
00030029 01                         SME_KM9WW_5F9:	dc.b 1	
0003002A F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
0003002F 02                         SME_KM9WW_5FF:	dc.b 2	
00030030 F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
00030035 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
0003003A 01                         SME_KM9WW_60A:	dc.b 1	
0003003B F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
00030040 02                         SME_KM9WW_610:	dc.b 2	
00030041 EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
00030046 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
0003004B 03                         SME_KM9WW_61B:	dc.b 3	
0003004C EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00030051 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030056 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
0003005B 04                         SME_KM9WW_62B:	dc.b 4	
0003005C E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
00030061 F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
00030066 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
0003006B 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00030070 04                         SME_KM9WW_640:	dc.b 4	
00030071 EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
00030076 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
0003007B 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
00030080 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
00030085 03                         SME_KM9WW_655:	dc.b 3	
00030086 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
0003008B FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
00030090 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
00030095 03                         SME_KM9WW_665:	dc.b 3	
00030096 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
0003009B F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
000300A0 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
000300A5 03                         SME_KM9WW_675:	dc.b 3	
000300A6 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
000300AB F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
000300B0 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
000300B5 01                         SME_KM9WW_685:	dc.b 1	
000300B6 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
000300BB 04                         SME_KM9WW_68B:	dc.b 4	
000300BC EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
000300C1 F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
000300C6 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
000300CB 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
000300D0 04                         SME_KM9WW_6A0:	dc.b 4	
000300D1 EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
000300D6 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
000300DB FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
000300E0 FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
000300E5 02                         SME_KM9WW_6B5:	dc.b 2	
000300E6 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
000300EB F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
000300F0 03                         SME_KM9WW_6C0:	dc.b 3	
000300F1 EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
000300F6 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
000300FB 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
00030100 03                         SME_KM9WW_6D0:	dc.b 3	
00030101 ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
00030106 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
0003010B FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
00030110 02                         SME_KM9WW_6E0:	dc.b 2	
00030111 F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
00030116 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
0003011B 04                         SME_KM9WW_6EB:	dc.b 4	
0003011C EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00030121 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030126 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0003012B 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00030130 03                         SME_KM9WW_700:	dc.b 3	
00030131 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030136 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
0003013B 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
00030140 02                         SME_KM9WW_710:	dc.b 2	
00030141 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00030146 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0003014B 02                         SME_KM9WW_71B:	dc.b 2	
0003014C EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
00030151 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00030156 04                         SME_KM9WW_726:	dc.b 4	
00030157 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
0003015C F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
00030161 FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
00030166 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
0003016B 03                         SME_KM9WW_73B:	dc.b 3	
0003016C EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
00030171 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
00030176 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
0003017B 02                         SME_KM9WW_74B:	dc.b 2	
0003017C EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
00030181 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00030186 03                         SME_KM9WW_756:	dc.b 3	
00030187 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
0003018C F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
00030191 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
00030196 01                         SME_KM9WW_766:	dc.b 1	
00030197 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
0003019C 02                         SME_KM9WW_76C:	dc.b 2	
0003019D F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
000301A2 F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
000301A7 03                         SME_KM9WW_777:	dc.b 3	
000301A8 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
000301AD F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
000301B2 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
000301B7 01                         SME_KM9WW_787:	dc.b 1	
000301B8 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
000301BD 02                         SME_KM9WW_78D:	dc.b 2	
000301BE FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
000301C3 F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
000301C8 02                         SME_KM9WW_798:	dc.b 2	
000301C9 F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
000301CE F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
000301D3 03                         SME_KM9WW_7A3:	dc.b 3	
000301D4 E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
000301D9 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
000301DE 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
000301E3 01                         SME_KM9WW_7B3:	dc.b 1	
000301E4 F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
000301E9 02                         SME_KM9WW_7B9:	dc.b 2	
000301EA EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
000301EF 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
000301F4 03                         SME_KM9WW_7C4:	dc.b 3	
000301F5 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
000301FA F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
000301FF F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
00030204 01                         SME_KM9WW_7D4:	dc.b 1	
00030205 F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
0003020A 02                         SME_KM9WW_7DA:	dc.b 2	
0003020B E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
00030210 F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
00030215 02                         SME_KM9WW_7E5:	dc.b 2	
00030216 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
0003021B 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00030220 04                         SME_KM9WW_7F0:	dc.b 4	
00030221 EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
00030226 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
0003022B FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00030230 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
00030235 03                         SME_KM9WW_805:	dc.b 3	
00030236 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
0003023B F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
00030240 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00030245 03                         SME_KM9WW_815:	dc.b 3	
00030246 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
0003024B F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
00030250 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
00030255 02                         SME_KM9WW_825:	dc.b 2	
00030256 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
0003025B F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
00030260 03                         SME_KM9WW_830:	dc.b 3	
00030261 F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
00030266 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
0003026B F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
00030270 03                         SME_KM9WW_840:	dc.b 3	
00030271 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00030276 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
0003027B 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
00030280 03                         SME_KM9WW_850:	dc.b 3	
00030281 F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
00030286 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
0003028B 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
00030290 02                         SME_KM9WW_860:	dc.b 2	
00030291 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00030296 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
0003029B 04                         SME_KM9WW_86B:	dc.b 4	
0003029C F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
000302A1 F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
000302A6 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
000302AB F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
000302B0 03                         SME_KM9WW_880:	dc.b 3	
000302B1 F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
000302B6 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
000302BB F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
000302C0 03                         SME_KM9WW_890:	dc.b 3	
000302C1 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
000302C6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
000302CB 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
000302D0 02                         SME_KM9WW_8A0:	dc.b 2	
000302D1 F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
000302D6 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
000302DB 03                         SME_KM9WW_8AB:	dc.b 3	
000302DC F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
000302E1 F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
000302E6 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
000302EB 01                         SME_KM9WW_8BB:	dc.b 1	
000302EC F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
000302F1 04                         SME_KM9WW_8C1:	dc.b 4	
000302F2 E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
000302F7 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
000302FC F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
00030301 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
00030306 04                         SME_KM9WW_8D6:	dc.b 4	
00030307 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
0003030C EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
00030311 F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
00030316 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
0003031B 03                         SME_KM9WW_8EB:	dc.b 3	
0003031C F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
00030321 F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
00030326 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
0003032B 04                         SME_KM9WW_8FB:	dc.b 4	
0003032C EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
00030331 F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
00030336 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
0003033B FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
00030340 04                         SME_KM9WW_910:	dc.b 4	
00030341 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
00030346 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
0003034B FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
00030350 EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
00030355 04                         SME_KM9WW_925:	dc.b 4	
00030356 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
0003035B FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
00030360 F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
00030365 F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
0003036A 03                         SME_KM9WW_93A:	dc.b 3	
0003036B 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
00030370 EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
00030375 F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
0003037A 04                         SME_KM9WW_94A:	dc.b 4	
0003037B 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
00030380 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
00030385 EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
0003038A E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
0003038F 04                         SME_KM9WW_95F:	dc.b 4	
00030390 E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00030395 E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
0003039A 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
0003039F 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
000303A4 04                         SME_KM9WW_974:	dc.b 4	
000303A5 E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
000303AA F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
000303AF 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
000303B4 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
000303B9 03                         SME_KM9WW_989:	dc.b 3	
000303BA E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
000303BF F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
000303C4 F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
000303C9 04                         SME_KM9WW_999:	dc.b 4	
000303CA E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
000303CF E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
000303D4 F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
000303D9 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
000303DE 03                         SME_KM9WW_9AE:	dc.b 3	
000303DF E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
000303E4 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
000303E9 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
000303EE 02                         SME_KM9WW_9BE:	dc.b 2	
000303EF E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
000303F4 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
000303F9 03                         SME_KM9WW_9C9:	dc.b 3	
000303FA F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
000303FF 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
00030404 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
00030409 02                         SME_KM9WW_9D9:	dc.b 2	
0003040A F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0003040F 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030414 02                         SME_KM9WW_9E4:	dc.b 2	
00030415 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0003041A 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
0003041F 02                         SME_KM9WW_9EF:	dc.b 2	
00030420 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030425 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
0003042A 02                         SME_KM9WW_9FA:	dc.b 2	
0003042B F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00030430 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030435 02                         SME_KM9WW_A05:	dc.b 2	
00030436 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
0003043B 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
00030440 03                         SME_KM9WW_A10:	dc.b 3	
00030441 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
00030446 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
0003044B 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
00030450 03                         SME_KM9WW_A20:	dc.b 3	
00030451 EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
00030456 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
0003045B 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
00030460 02                         SME_KM9WW_A30:	dc.b 2	
00030461 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00030466 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
0003046B 03                         SME_KM9WW_A3B:	dc.b 3	
0003046C F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
00030471 F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
00030476 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
0003047B 04                         SME_KM9WW_A4B:	dc.b 4	
0003047C E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
00030481 F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
00030486 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
0003048B 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
00030490 04                         SME_KM9WW_A60:	dc.b 4	
00030491 E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00030496 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
0003049B FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
000304A0 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
000304A5 04                         SME_KM9WW_A75:	dc.b 4	
000304A6 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
000304AB F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
000304B0 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
000304B5 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
000304BA 02                         SME_KM9WW_A8A:	dc.b 2	
000304BB E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
000304C0 F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
000304C5 05                         SME_KM9WW_A95:	dc.b 5	
000304C6 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
000304CB E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
000304D0 F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
000304D5 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
000304DA 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
000304DF 05                         SME_KM9WW_AAF:	dc.b 5	
000304E0 E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
000304E5 E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
000304EA F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
000304EF 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
000304F4 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
000304F9 01                         SME_KM9WW_AC9:	dc.b 1	
000304FA F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000304FF 01                         SME_KM9WW_ACF:	dc.b 1	
00030500 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030505 01                         SME_KM9WW_AD5:	dc.b 1	
00030506 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0003050B 01                         SME_KM9WW_ADB:	dc.b 1	
0003050C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030511 01                         SME_KM9WW_AE1:	dc.b 1	
00030512 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00030517 02                         SME_KM9WW_AE7:	dc.b 2	
00030518 EC00 0000 00               		dc.b $EC, 0, 0, 0, 0	
0003051D F40B 0001 F8               		dc.b $F4, $B, 0, 1, $F8	
00030522 02                         SME_KM9WW_AF2:	dc.b 2	
00030523 F400 0000 03               		dc.b $F4, 0, 0, 0, 3	
00030528 FC0E 0001 F3               		dc.b $FC, $E, 0, 1, $F3	
0003052D 04                         SME_KM9WW_AFD:	dc.b 4	
0003052E EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
00030533 F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
00030538 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
0003053D 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
00030542 04                         SME_KM9WW_B12:	dc.b 4	
00030543 EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
00030548 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
0003054D 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
00030552 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
00030557 04                         SME_KM9WW_B27:	dc.b 4	
00030558 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
0003055D F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
00030562 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
00030567 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
0003056C 03                         SME_KM9WW_B3C:	dc.b 3	
0003056D EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00030572 F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
00030577 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
0003057C 03                         SME_KM9WW_B4C:	dc.b 3	
0003057D EC0D 0000 EB               		dc.b $EC, $D, 0, 0, $EB	
00030582 EC00 0008 0B               		dc.b $EC, 0, 0, 8, $B	
00030587 FC0A 0009 EB               		dc.b $FC, $A, 0, 9, $EB	
0003058C 04                         SME_KM9WW_B5C:	dc.b 4	
0003058D E500 0000 F4               		dc.b $E5, 0, 0, 0, $F4	
00030592 ED0E 0001 EC               		dc.b $ED, $E, 0, 1, $EC	
00030597 ED00 000D E4               		dc.b $ED, 0, 0, $D, $E4	
0003059C 0509 000E EC               		dc.b 5, 9, 0, $E, $EC	
000305A1 03                         SME_KM9WW_B71:	dc.b 3	
000305A2 E400 0000 FB               		dc.b $E4, 0, 0, 0, $FB	
000305A7 EC0F 0001 EB               		dc.b $EC, $F, 0, 1, $EB	
000305AC 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
000305B1 04                         SME_KM9WW_B81:	dc.b 4	
000305B2 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
000305B7 F40E 0003 E2               		dc.b $F4, $E, 0, 3, $E2	
000305BC F401 000F 02               		dc.b $F4, 1, 0, $F, 2	
000305C1 0C08 0011 EA               		dc.b $C, 8, 0, $11, $EA	
000305C6 03                         SME_KM9WW_B96:	dc.b 3	
000305C7 EC0F 0000 EB               		dc.b $EC, $F, 0, 0, $EB	
000305CC 0400 0010 E3               		dc.b 4, 0, 0, $10, $E3	
000305D1 0C08 0011 EB               		dc.b $C, 8, 0, $11, $EB	
000305D6 04                         SME_KM9WW_BA6:	dc.b 4	
000305D7 ED08 0000 F2               		dc.b $ED, 8, 0, 0, $F2	
000305DC F50E 0003 E2               		dc.b $F5, $E, 0, 3, $E2	
000305E1 F501 000F 02               		dc.b $F5, 1, 0, $F, 2	
000305E6 0D08 0011 EA               		dc.b $D, 8, 0, $11, $EA	
000305EB 03                         SME_KM9WW_BBB:	dc.b 3	
000305EC EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000305F1 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000305F6 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
000305FB 03                         SME_KM9WW_BCB:	dc.b 3	
000305FC EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
00030601 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
00030606 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
0003060B 03                         SME_KM9WW_BDB:	dc.b 3	
0003060C EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
00030611 F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
00030616 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
0003061B 03                         SME_KM9WW_BEB:	dc.b 3	
0003061C F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00030621 F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00030626 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
0003062B 03                         SME_KM9WW_BFB:	dc.b 3	
0003062C F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
00030631 F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
00030636 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
0003063B 04                         SME_KM9WW_C0B:	dc.b 4	
0003063C EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
00030641 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
00030646 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
0003064B 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
00030650 04                         SME_KM9WW_C20:	dc.b 4	
00030651 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030656 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003065B 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00030660 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00030665 04                         SME_KM9WW_C35:	dc.b 4	
00030666 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
0003066B F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030670 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00030675 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
0003067A 04                         SME_KM9WW_C4A:	dc.b 4	
0003067B EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030680 F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00030685 FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
0003068A 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
0003068F 02                         SME_KM9WW_C5F:	dc.b 2	
00030690 EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00030695 FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
0003069A 03                         SME_KM9WW_C6A:	dc.b 3	
0003069B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000306A0 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
000306A5 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
000306AA 03                         SME_KM9WW_C7A:	dc.b 3	
000306AB EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000306B0 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
000306B5 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
000306BA 03                         SME_KM9WW_C8A:	dc.b 3	
000306BB EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000306C0 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
000306C5 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
000306CA 03                         SME_KM9WW_C9A:	dc.b 3	
000306CB E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
000306D0 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
000306D5 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
000306DA 03                         SME_KM9WW_CAA:	dc.b 3	
000306DB E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
000306E0 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
000306E5 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
000306EA 03                         SME_KM9WW_CBA:	dc.b 3	
000306EB EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
000306F0 F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
000306F5 0C0C 000B ED               		dc.b $C, $C, 0, $B, $ED	
000306FA 03                         SME_KM9WW_CCA:	dc.b 3	
000306FB EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030700 F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
00030705 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
0003070A 03                         SME_KM9WW_CDA:	dc.b 3	
0003070B EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030710 F409 0002 F5               		dc.b $F4, 9, 0, 2, $F5	
00030715 040D 0008 ED               		dc.b 4, $D, 0, 8, $ED	
0003071A 03                         SME_KM9WW_CEA:	dc.b 3	
0003071B EC04 0000 FD               		dc.b $EC, 4, 0, 0, $FD	
00030720 F40A 0002 F5               		dc.b $F4, $A, 0, 2, $F5	
00030725 0C04 000B F5               		dc.b $C, 4, 0, $B, $F5	
0003072A 04                         SME_KM9WW_CFA:	dc.b 4	
0003072B FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00030730 EC08 0009 F0               		dc.b $EC, 8, 0, 9, $F0	
00030735 F40C 000C F0               		dc.b $F4, $C, 0, $C, $F0	
0003073A FC00 0010 F0               		dc.b $FC, 0, 0, $10, $F0	
0003073F 03                         SME_KM9WW_D0F:	dc.b 3	
00030740 ED08 0000 EE               		dc.b $ED, 8, 0, 0, $EE	
00030745 F50D 0003 EE               		dc.b $F5, $D, 0, 3, $EE	
0003074A 0509 000B F6               		dc.b 5, 9, 0, $B, $F6	
0003074F 04                         SME_KM9WW_D1F:	dc.b 4	
00030750 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030755 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003075A 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
0003075F 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030764 04                         SME_KM9WW_D34:	dc.b 4	
00030765 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
0003076A F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003076F 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030774 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030779 04                         SME_KM9WW_D49:	dc.b 4	
0003077A EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
0003077F F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030784 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
00030789 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
0003078E 04                         SME_KM9WW_D5E:	dc.b 4	
0003078F EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030794 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00030799 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
0003079E 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
000307A3 04                         SME_KM9WW_D73:	dc.b 4	
000307A4 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
000307A9 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
000307AE 0408 000B EE               		dc.b 4, 8, 0, $B, $EE	
000307B3 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
000307B8 02                         SME_KM9WW_D88:	dc.b 2	
000307B9 EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
000307BE 0C0C 000C F3               		dc.b $C, $C, 0, $C, $F3	
000307C3 04                         SME_KM9WW_D93:	dc.b 4	
000307C4 EC08 0000 F3               		dc.b $EC, 8, 0, 0, $F3	
000307C9 F40D 0003 F3               		dc.b $F4, $D, 0, 3, $F3	
000307CE 0408 000B F3               		dc.b 4, 8, 0, $B, $F3	
000307D3 0C0C 000E F3               		dc.b $C, $C, 0, $E, $F3	
000307D8 04                         SME_KM9WW_DA8:	dc.b 4	
000307D9 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
000307DE F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
000307E3 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
000307E8 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
000307ED 04                         SME_KM9WW_DBD:	dc.b 4	
000307EE EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
000307F3 F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
000307F8 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
000307FD 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
00030802 03                         SME_KM9WW_DD2:	dc.b 3	
00030803 EC0E 0000 ED               		dc.b $EC, $E, 0, 0, $ED	
00030808 0408 000C F5               		dc.b 4, 8, 0, $C, $F5	
0003080D 0C08 000F F5               		dc.b $C, 8, 0, $F, $F5	
00030812 04                         SME_KM9WW_DE2:	dc.b 4	
00030813 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00030818 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003081D 0408 000B F6               		dc.b 4, 8, 0, $B, $F6	
00030822 0C08 000E F6               		dc.b $C, 8, 0, $E, $F6	
00030827 04                         SME_KM9WW_DF7:	dc.b 4	
00030828 EC08 0000 F5               		dc.b $EC, 8, 0, 0, $F5	
0003082D F40C 0003 ED               		dc.b $F4, $C, 0, 3, $ED	
00030832 FC09 0007 F5               		dc.b $FC, 9, 0, 7, $F5	
00030837 0C08 000D F5               		dc.b $C, 8, 0, $D, $F5	
0003083C 03                         SME_KM9WW_E0C:	dc.b 3	
0003083D F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
00030842 FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
00030847 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
0003084C 03                         SME_KM9WW_E1C:	dc.b 3	
0003084D F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00030852 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00030857 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
0003085C 02                         SME_KM9WW_E2C:	dc.b 2	
0003085D F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030862 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00030867 03                         SME_KM9WW_E37:	dc.b 3	
00030868 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
0003086D 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00030872 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00030877 03                         SME_KM9WW_E47:	dc.b 3	
00030878 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
0003087D FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00030882 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00030887 02                         SME_KM9WW_E57:	dc.b 2	
00030888 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
0003088D 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00030892 02                         SME_KM9WW_E62:	dc.b 2	
00030893 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00030898 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
0003089D 02                         SME_KM9WW_E6D:	dc.b 2	
0003089E F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
000308A3 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
000308A8 03                         SME_KM9WW_E78:	dc.b 3	
000308A9 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
000308AE F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
000308B3 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
000308B8 03                         SME_KM9WW_E88:	dc.b 3	
000308B9 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
000308BE F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
000308C3 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
000308C8 01                         SME_KM9WW_E98:	dc.b 1	
000308C9 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
000308CE 03                         SME_KM9WW_E9E:	dc.b 3	
000308CF E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
000308D4 F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
000308D9 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
000308DE 02                         SME_KM9WW_EAE:	dc.b 2	
000308DF E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
000308E4 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
000308E9 03                         SME_KM9WW_EB9:	dc.b 3	
000308EA E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
000308EF 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
000308F4 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
000308F9 03                         SME_KM9WW_EC9:	dc.b 3	
000308FA E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
000308FF 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
00030904 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
00030909 03                         SME_KM9WW_ED9:	dc.b 3	
0003090A F40E 0000 E8               		dc.b $F4, $E, 0, 0, $E8	
0003090F F402 000C 08               		dc.b $F4, 2, 0, $C, 8	
00030914 0C08 000F F0               		dc.b $C, 8, 0, $F, $F0	
00030919 03                         SME_KM9WW_EE9:	dc.b 3	
0003091A F30E 0000 E8               		dc.b $F3, $E, 0, 0, $E8	
0003091F F302 000C 08               		dc.b $F3, 2, 0, $C, 8	
00030924 0B08 000F F0               		dc.b $B, 8, 0, $F, $F0	
00030929 04                         SME_KM9WW_EF9:	dc.b 4	
0003092A EC0E 0000 E8               		dc.b $EC, $E, 0, 0, $E8	
0003092F FC00 000C 08               		dc.b $FC, 0, 0, $C, 8	
00030934 040C 000D F0               		dc.b 4, $C, 0, $D, $F0	
00030939 0C08 0011 F8               		dc.b $C, 8, 0, $11, $F8	
0003093E                            		even
0003093E                            		even
0003093E                            ;Map_Metal:
0003093E                            ;	include "_maps\Metal.asm"
0003093E                            Map_SuperSonic:
0003093E                            		include	_maps\SuperSonic.asm
0003093E                            ; --------------------------------------------------------------------------------
0003093E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0003093E                            ; --------------------------------------------------------------------------------
0003093E                            
0003093E                            SME_tvPJu:	
0003093E 0000 0000                  		dc.w SME_tvPJu_1AC-SME_tvPJu, SME_tvPJu_1AD-SME_tvPJu	
00030942 0000 0000                  		dc.w SME_tvPJu_1BD-SME_tvPJu, SME_tvPJu_1CD-SME_tvPJu	
00030946 0000 0000                  		dc.w SME_tvPJu_1DD-SME_tvPJu, SME_tvPJu_1ED-SME_tvPJu	
0003094A 0000 0000                  		dc.w SME_tvPJu_202-SME_tvPJu, SME_tvPJu_217-SME_tvPJu	
0003094E 0000 0000                  		dc.w SME_tvPJu_227-SME_tvPJu, SME_tvPJu_232-SME_tvPJu	
00030952 0000 0000                  		dc.w SME_tvPJu_247-SME_tvPJu, SME_tvPJu_25C-SME_tvPJu	
00030956 0000 0000                  		dc.w SME_tvPJu_271-SME_tvPJu, SME_tvPJu_286-SME_tvPJu	
0003095A 0000 0000                  		dc.w SME_tvPJu_29B-SME_tvPJu, SME_tvPJu_2B0-SME_tvPJu	
0003095E 0000 0000                  		dc.w SME_tvPJu_2C5-SME_tvPJu, SME_tvPJu_2DA-SME_tvPJu	
00030962 0000 0000                  		dc.w SME_tvPJu_2EA-SME_tvPJu, SME_tvPJu_2FA-SME_tvPJu	
00030966 0000 0000                  		dc.w SME_tvPJu_30A-SME_tvPJu, SME_tvPJu_31A-SME_tvPJu	
0003096A 0000 0000                  		dc.w SME_tvPJu_32F-SME_tvPJu, SME_tvPJu_344-SME_tvPJu	
0003096E 0000 0000                  		dc.w SME_tvPJu_354-SME_tvPJu, SME_tvPJu_35F-SME_tvPJu	
00030972 0000 0000                  		dc.w SME_tvPJu_374-SME_tvPJu, SME_tvPJu_389-SME_tvPJu	
00030976 0000 0000                  		dc.w SME_tvPJu_39E-SME_tvPJu, SME_tvPJu_3B3-SME_tvPJu	
0003097A 0000 0000                  		dc.w SME_tvPJu_3C8-SME_tvPJu, SME_tvPJu_3DD-SME_tvPJu	
0003097E 0000 0000                  		dc.w SME_tvPJu_3F2-SME_tvPJu, SME_tvPJu_407-SME_tvPJu	
00030982 0000 0000                  		dc.w SME_tvPJu_41C-SME_tvPJu, SME_tvPJu_431-SME_tvPJu	
00030986 0000 0000                  		dc.w SME_tvPJu_446-SME_tvPJu, SME_tvPJu_45B-SME_tvPJu	
0003098A 0000 0000                  		dc.w SME_tvPJu_470-SME_tvPJu, SME_tvPJu_485-SME_tvPJu	
0003098E 0000 0000                  		dc.w SME_tvPJu_49A-SME_tvPJu, SME_tvPJu_4AF-SME_tvPJu	
00030992 0000 0000                  		dc.w SME_tvPJu_4C4-SME_tvPJu, SME_tvPJu_4D9-SME_tvPJu	
00030996 0000 0000                  		dc.w SME_tvPJu_4EE-SME_tvPJu, SME_tvPJu_503-SME_tvPJu	
0003099A 0000 0000                  		dc.w SME_tvPJu_518-SME_tvPJu, SME_tvPJu_52D-SME_tvPJu	
0003099E 0000 0000                  		dc.w SME_tvPJu_542-SME_tvPJu, SME_tvPJu_557-SME_tvPJu	
000309A2 0000 0000                  		dc.w SME_tvPJu_567-SME_tvPJu, SME_tvPJu_57C-SME_tvPJu	
000309A6 0000 0000                  		dc.w SME_tvPJu_591-SME_tvPJu, SME_tvPJu_5A6-SME_tvPJu	
000309AA 0000 0000                  		dc.w SME_tvPJu_5BB-SME_tvPJu, SME_tvPJu_5CB-SME_tvPJu	
000309AE 0000 0000                  		dc.w SME_tvPJu_5D6-SME_tvPJu, SME_tvPJu_5E1-SME_tvPJu	
000309B2 0000 0000                  		dc.w SME_tvPJu_5F1-SME_tvPJu, SME_tvPJu_606-SME_tvPJu	
000309B6 0000 0000                  		dc.w SME_tvPJu_611-SME_tvPJu, SME_tvPJu_61C-SME_tvPJu	
000309BA 0000 0000                  		dc.w SME_tvPJu_62C-SME_tvPJu, SME_tvPJu_632-SME_tvPJu	
000309BE 0000 0000                  		dc.w SME_tvPJu_642-SME_tvPJu, SME_tvPJu_657-SME_tvPJu	
000309C2 0000 0000                  		dc.w SME_tvPJu_66C-SME_tvPJu, SME_tvPJu_681-SME_tvPJu	
000309C6 0000 0000                  		dc.w SME_tvPJu_68C-SME_tvPJu, SME_tvPJu_692-SME_tvPJu	
000309CA 0000 0000                  		dc.w SME_tvPJu_69D-SME_tvPJu, SME_tvPJu_6A3-SME_tvPJu	
000309CE 0000 0000                  		dc.w SME_tvPJu_6AE-SME_tvPJu, SME_tvPJu_6BE-SME_tvPJu	
000309D2 0000 0000                  		dc.w SME_tvPJu_6D3-SME_tvPJu, SME_tvPJu_6E8-SME_tvPJu	
000309D6 0000 0000                  		dc.w SME_tvPJu_6F8-SME_tvPJu, SME_tvPJu_708-SME_tvPJu	
000309DA 0000 0000                  		dc.w SME_tvPJu_718-SME_tvPJu, SME_tvPJu_71E-SME_tvPJu	
000309DE 0000 0000                  		dc.w SME_tvPJu_733-SME_tvPJu, SME_tvPJu_748-SME_tvPJu	
000309E2 0000 0000                  		dc.w SME_tvPJu_753-SME_tvPJu, SME_tvPJu_763-SME_tvPJu	
000309E6 0000 0000                  		dc.w SME_tvPJu_773-SME_tvPJu, SME_tvPJu_77E-SME_tvPJu	
000309EA 0000 0000                  		dc.w SME_tvPJu_793-SME_tvPJu, SME_tvPJu_7A3-SME_tvPJu	
000309EE 0000 0000                  		dc.w SME_tvPJu_7AE-SME_tvPJu, SME_tvPJu_7B9-SME_tvPJu	
000309F2 0000 0000                  		dc.w SME_tvPJu_7CE-SME_tvPJu, SME_tvPJu_7DE-SME_tvPJu	
000309F6 0000 0000                  		dc.w SME_tvPJu_7E9-SME_tvPJu, SME_tvPJu_7F9-SME_tvPJu	
000309FA 0000 0000                  		dc.w SME_tvPJu_7FF-SME_tvPJu, SME_tvPJu_80A-SME_tvPJu	
000309FE 0000 0000                  		dc.w SME_tvPJu_81A-SME_tvPJu, SME_tvPJu_820-SME_tvPJu	
00030A02 0000 0000                  		dc.w SME_tvPJu_82B-SME_tvPJu, SME_tvPJu_836-SME_tvPJu	
00030A06 0000 0000                  		dc.w SME_tvPJu_846-SME_tvPJu, SME_tvPJu_84C-SME_tvPJu	
00030A0A 0000 0000                  		dc.w SME_tvPJu_857-SME_tvPJu, SME_tvPJu_867-SME_tvPJu	
00030A0E 0000 0000                  		dc.w SME_tvPJu_86D-SME_tvPJu, SME_tvPJu_878-SME_tvPJu	
00030A12 0000 0000                  		dc.w SME_tvPJu_883-SME_tvPJu, SME_tvPJu_898-SME_tvPJu	
00030A16 0000 0000                  		dc.w SME_tvPJu_8A8-SME_tvPJu, SME_tvPJu_8B8-SME_tvPJu	
00030A1A 0000 0000                  		dc.w SME_tvPJu_8C3-SME_tvPJu, SME_tvPJu_8D3-SME_tvPJu	
00030A1E 0000 0000                  		dc.w SME_tvPJu_8E3-SME_tvPJu, SME_tvPJu_8F3-SME_tvPJu	
00030A22 0000 0000                  		dc.w SME_tvPJu_8FE-SME_tvPJu, SME_tvPJu_913-SME_tvPJu	
00030A26 0000 0000                  		dc.w SME_tvPJu_923-SME_tvPJu, SME_tvPJu_933-SME_tvPJu	
00030A2A 0000 0000                  		dc.w SME_tvPJu_93E-SME_tvPJu, SME_tvPJu_94E-SME_tvPJu	
00030A2E 0000 0000                  		dc.w SME_tvPJu_954-SME_tvPJu, SME_tvPJu_969-SME_tvPJu	
00030A32 0000 0000                  		dc.w SME_tvPJu_97E-SME_tvPJu, SME_tvPJu_98E-SME_tvPJu	
00030A36 0000 0000                  		dc.w SME_tvPJu_9A3-SME_tvPJu, SME_tvPJu_9B8-SME_tvPJu	
00030A3A 0000 0000                  		dc.w SME_tvPJu_9CD-SME_tvPJu, SME_tvPJu_9DD-SME_tvPJu	
00030A3E 0000 0000                  		dc.w SME_tvPJu_9F2-SME_tvPJu, SME_tvPJu_A07-SME_tvPJu	
00030A42 0000 0000                  		dc.w SME_tvPJu_A1C-SME_tvPJu, SME_tvPJu_A2C-SME_tvPJu	
00030A46 0000 0000                  		dc.w SME_tvPJu_A41-SME_tvPJu, SME_tvPJu_A51-SME_tvPJu	
00030A4A 0000 0000                  		dc.w SME_tvPJu_A5C-SME_tvPJu, SME_tvPJu_A6C-SME_tvPJu	
00030A4E 0000 0000                  		dc.w SME_tvPJu_A77-SME_tvPJu, SME_tvPJu_A82-SME_tvPJu	
00030A52 0000 0000                  		dc.w SME_tvPJu_A8D-SME_tvPJu, SME_tvPJu_A98-SME_tvPJu	
00030A56 0000 0000                  		dc.w SME_tvPJu_AA3-SME_tvPJu, SME_tvPJu_AB3-SME_tvPJu	
00030A5A 0000 0000                  		dc.w SME_tvPJu_AC3-SME_tvPJu, SME_tvPJu_ACE-SME_tvPJu	
00030A5E 0000 0000                  		dc.w SME_tvPJu_ADE-SME_tvPJu, SME_tvPJu_AF3-SME_tvPJu	
00030A62 0000 0000                  		dc.w SME_tvPJu_B08-SME_tvPJu, SME_tvPJu_B1D-SME_tvPJu	
00030A66 0000 0000                  		dc.w SME_tvPJu_B28-SME_tvPJu, SME_tvPJu_B42-SME_tvPJu	
00030A6A 0000 0000                  		dc.w SME_tvPJu_B5C-SME_tvPJu, SME_tvPJu_B62-SME_tvPJu	
00030A6E 0000 0000                  		dc.w SME_tvPJu_B68-SME_tvPJu, SME_tvPJu_B6E-SME_tvPJu	
00030A72 0000 0000                  		dc.w SME_tvPJu_B74-SME_tvPJu, SME_tvPJu_B7A-SME_tvPJu	
00030A76 0000 0000                  		dc.w SME_tvPJu_B85-SME_tvPJu, SME_tvPJu_B90-SME_tvPJu	
00030A7A 0000 0000                  		dc.w SME_tvPJu_BA5-SME_tvPJu, SME_tvPJu_BBA-SME_tvPJu	
00030A7E 0000 0000                  		dc.w SME_tvPJu_BCF-SME_tvPJu, SME_tvPJu_BDF-SME_tvPJu	
00030A82 0000 0000                  		dc.w SME_tvPJu_BF4-SME_tvPJu, SME_tvPJu_C09-SME_tvPJu	
00030A86 0000 0000                  		dc.w SME_tvPJu_C1E-SME_tvPJu, SME_tvPJu_C33-SME_tvPJu	
00030A8A 0000 0000                  		dc.w SME_tvPJu_C48-SME_tvPJu, SME_tvPJu_C5D-SME_tvPJu	
00030A8E 0000 0000                  		dc.w SME_tvPJu_C6D-SME_tvPJu, SME_tvPJu_C7D-SME_tvPJu	
00030A92 0000 0000                  		dc.w SME_tvPJu_C8D-SME_tvPJu, SME_tvPJu_C9D-SME_tvPJu	
00030A96 0000 0000                  		dc.w SME_tvPJu_CAD-SME_tvPJu, SME_tvPJu_CC2-SME_tvPJu	
00030A9A 0000 0000                  		dc.w SME_tvPJu_CD7-SME_tvPJu, SME_tvPJu_CEC-SME_tvPJu	
00030A9E 0000 0000                  		dc.w SME_tvPJu_D01-SME_tvPJu, SME_tvPJu_D0C-SME_tvPJu	
00030AA2 0000 0000                  		dc.w SME_tvPJu_D1C-SME_tvPJu, SME_tvPJu_D2C-SME_tvPJu	
00030AA6 0000 0000                  		dc.w SME_tvPJu_D3C-SME_tvPJu, SME_tvPJu_D4C-SME_tvPJu	
00030AAA 0000 0000                  		dc.w SME_tvPJu_D5C-SME_tvPJu, SME_tvPJu_D6C-SME_tvPJu	
00030AAE 0000 0000                  		dc.w SME_tvPJu_D7C-SME_tvPJu, SME_tvPJu_D8C-SME_tvPJu	
00030AB2 0000 0000                  		dc.w SME_tvPJu_D9C-SME_tvPJu, SME_tvPJu_DB1-SME_tvPJu	
00030AB6 0000 0000                  		dc.w SME_tvPJu_DC6-SME_tvPJu, SME_tvPJu_DD6-SME_tvPJu	
00030ABA 0000 0000                  		dc.w SME_tvPJu_DEB-SME_tvPJu, SME_tvPJu_E00-SME_tvPJu	
00030ABE 0000 0000                  		dc.w SME_tvPJu_E10-SME_tvPJu, SME_tvPJu_E25-SME_tvPJu	
00030AC2 0000 0000                  		dc.w SME_tvPJu_E3A-SME_tvPJu, SME_tvPJu_E4A-SME_tvPJu	
00030AC6 0000 0000                  		dc.w SME_tvPJu_E5F-SME_tvPJu, SME_tvPJu_E74-SME_tvPJu	
00030ACA 0000 0000                  		dc.w SME_tvPJu_E89-SME_tvPJu, SME_tvPJu_E9E-SME_tvPJu	
00030ACE 0000 0000                  		dc.w SME_tvPJu_EAE-SME_tvPJu, SME_tvPJu_EBE-SME_tvPJu	
00030AD2 0000 0000                  		dc.w SME_tvPJu_ECE-SME_tvPJu, SME_tvPJu_ED9-SME_tvPJu	
00030AD6 0000 0000                  		dc.w SME_tvPJu_EE9-SME_tvPJu, SME_tvPJu_EF9-SME_tvPJu	
00030ADA 0000 0000                  		dc.w SME_tvPJu_F04-SME_tvPJu, SME_tvPJu_F0F-SME_tvPJu	
00030ADE 0000 0000                  		dc.w SME_tvPJu_F1A-SME_tvPJu, SME_tvPJu_F2A-SME_tvPJu	
00030AE2 0000 0000                  		dc.w SME_tvPJu_F3A-SME_tvPJu, SME_tvPJu_F40-SME_tvPJu	
00030AE6 0000 0000                  		dc.w SME_tvPJu_F50-SME_tvPJu, SME_tvPJu_F5B-SME_tvPJu	
00030AEA 00                         SME_tvPJu_1AC:	dc.b 0	
00030AEB 03                         SME_tvPJu_1AD:	dc.b 3	
00030AEC FC0A 0000 EC               		dc.b $FC, $A, 0, 0, $EC	
00030AF1 FC06 0009 04               		dc.b $FC, 6, 0, 9, 4	
00030AF6 E40E 000F EC               		dc.b $E4, $E, 0, $F, $EC	
00030AFB 03                         SME_tvPJu_1BD:	dc.b 3	
00030AFC FD0E 0000 EC               		dc.b $FD, $E, 0, 0, $EC	
00030B01 0501 000C 0C               		dc.b 5, 1, 0, $C, $C	
00030B06 E50E 000E EC               		dc.b $E5, $E, 0, $E, $EC	
00030B0B 03                         SME_tvPJu_1CD:	dc.b 3	
00030B0C E60D 0000 EC               		dc.b $E6, $D, 0, 0, $EC	
00030B11 FE0A 0008 F4               		dc.b $FE, $A, 0, 8, $F4	
00030B16 F608 0011 F4               		dc.b $F6, 8, 0, $11, $F4	
00030B1B 03                         SME_tvPJu_1DD:	dc.b 3	
00030B1C FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030B21 EC09 000C F4               		dc.b $EC, 9, 0, $C, $F4	
00030B26 E40C 0012 EC               		dc.b $E4, $C, 0, $12, $EC	
00030B2B 04                         SME_tvPJu_1ED:	dc.b 4	
00030B2C FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
00030B31 FC01 000C 0E               		dc.b $FC, 1, 0, $C, $E	
00030B36 E40C 000E EC               		dc.b $E4, $C, 0, $E, $EC	
00030B3B EC09 0012 F4               		dc.b $EC, 9, 0, $12, $F4	
00030B40 04                         SME_tvPJu_202:	dc.b 4	
00030B41 FD0E 0000 ED               		dc.b $FD, $E, 0, 0, $ED	
00030B46 0501 000C 0D               		dc.b 5, 1, 0, $C, $D	
00030B4B E50C 000E EC               		dc.b $E5, $C, 0, $E, $EC	
00030B50 ED09 0012 F4               		dc.b $ED, 9, 0, $12, $F4	
00030B55 03                         SME_tvPJu_217:	dc.b 3	
00030B56 FE0A 0000 F4               		dc.b $FE, $A, 0, 0, $F4	
00030B5B F608 0009 F4               		dc.b $F6, 8, 0, 9, $F4	
00030B60 E60D 000C EC               		dc.b $E6, $D, 0, $C, $EC	
00030B65 02                         SME_tvPJu_227:	dc.b 2	
00030B66 FC0A 0000 F4               		dc.b $FC, $A, 0, 0, $F4	
00030B6B E40E 0009 EC               		dc.b $E4, $E, 0, 9, $EC	
00030B70 04                         SME_tvPJu_232:	dc.b 4	
00030B71 FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
00030B76 E304 000C EB               		dc.b $E3, 4, 0, $C, $EB	
00030B7B EB0B 000E E3               		dc.b $EB, $B, 0, $E, $E3	
00030B80 EB09 001A FB               		dc.b $EB, 9, 0, $1A, $FB	
00030B85 04                         SME_tvPJu_247:	dc.b 4	
00030B86 FF0E 0000 FB               		dc.b $FF, $E, 0, 0, $FB	
00030B8B E704 000C EB               		dc.b $E7, 4, 0, $C, $EB	
00030B90 EF0A 000E E3               		dc.b $EF, $A, 0, $E, $E3	
00030B95 EF0D 0017 FB               		dc.b $EF, $D, 0, $17, $FB	
00030B9A 04                         SME_tvPJu_25C:	dc.b 4	
00030B9B FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030BA0 EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
00030BA5 F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
00030BAA FB04 0012 EB               		dc.b $FB, 4, 0, $12, $EB	
00030BAF 04                         SME_tvPJu_271:	dc.b 4	
00030BB0 FB0E 0000 FB               		dc.b $FB, $E, 0, 0, $FB	
00030BB5 EB0B 000C E3               		dc.b $EB, $B, 0, $C, $E3	
00030BBA E300 0018 EB               		dc.b $E3, 0, 0, $18, $EB	
00030BBF EB05 0019 FB               		dc.b $EB, 5, 0, $19, $FB	
00030BC4 04                         SME_tvPJu_286:	dc.b 4	
00030BC5 FB0B 0000 FB               		dc.b $FB, $B, 0, 0, $FB	
00030BCA E30A 000C E3               		dc.b $E3, $A, 0, $C, $E3	
00030BCF EB09 0015 FB               		dc.b $EB, 9, 0, $15, $FB	
00030BD4 FB06 001B EB               		dc.b $FB, 6, 0, $1B, $EB	
00030BD9 04                         SME_tvPJu_29B:	dc.b 4	
00030BDA FB0F 0000 FB               		dc.b $FB, $F, 0, 0, $FB	
00030BDF EB0D 0010 E3               		dc.b $EB, $D, 0, $10, $E3	
00030BE4 F308 0018 03               		dc.b $F3, 8, 0, $18, 3	
00030BE9 FB05 001B EB               		dc.b $FB, 5, 0, $1B, $EB	
00030BEE 04                         SME_tvPJu_2B0:	dc.b 4	
00030BEF FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030BF4 E309 0009 EB               		dc.b $E3, 9, 0, 9, $EB	
00030BF9 F30A 000F E3               		dc.b $F3, $A, 0, $F, $E3	
00030BFE F304 0018 FB               		dc.b $F3, 4, 0, $18, $FB	
00030C03 04                         SME_tvPJu_2C5:	dc.b 4	
00030C04 FB0A 0000 FB               		dc.b $FB, $A, 0, 0, $FB	
00030C09 EB0D 0009 E3               		dc.b $EB, $D, 0, 9, $E3	
00030C0E F300 0011 03               		dc.b $F3, 0, 0, $11, 3	
00030C13 FB08 0012 E3               		dc.b $FB, 8, 0, $12, $E3	
00030C18 03                         SME_tvPJu_2DA:	dc.b 3	
00030C19 EC09 0000 FC               		dc.b $EC, 9, 0, 0, $FC	
00030C1E FC0A 0006 FC               		dc.b $FC, $A, 0, 6, $FC	
00030C23 F40B 000F E4               		dc.b $F4, $B, 0, $F, $E4	
00030C28 03                         SME_tvPJu_2EA:	dc.b 3	
00030C29 EC04 0000 05               		dc.b $EC, 4, 0, 0, 5	
00030C2E F40B 0002 FD               		dc.b $F4, $B, 0, 2, $FD	
00030C33 F40B 000E E5               		dc.b $F4, $B, 0, $E, $E5	
00030C38 03                         SME_tvPJu_2FA:	dc.b 3	
00030C39 F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
00030C3E F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
00030C43 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
00030C48 03                         SME_tvPJu_30A:	dc.b 3	
00030C49 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00030C4E F40A 000C E4               		dc.b $F4, $A, 0, $C, $E4	
00030C53 0C00 0015 E4               		dc.b $C, 0, 0, $15, $E4	
00030C58 04                         SME_tvPJu_31A:	dc.b 4	
00030C59 F20B 0000 FC               		dc.b $F2, $B, 0, 0, $FC	
00030C5E EA04 000C FC               		dc.b $EA, 4, 0, $C, $FC	
00030C63 F40A 000E E4               		dc.b $F4, $A, 0, $E, $E4	
00030C68 0C00 0017 E4               		dc.b $C, 0, 0, $17, $E4	
00030C6D 04                         SME_tvPJu_32F:	dc.b 4	
00030C6E F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00030C73 EB04 000C 05               		dc.b $EB, 4, 0, $C, 5	
00030C78 F40A 000E E5               		dc.b $F4, $A, 0, $E, $E5	
00030C7D 0C00 0017 E5               		dc.b $C, 0, 0, $17, $E5	
00030C82 03                         SME_tvPJu_344:	dc.b 3	
00030C83 F40A 0000 FE               		dc.b $F4, $A, 0, 0, $FE	
00030C88 F40A 0009 E6               		dc.b $F4, $A, 0, 9, $E6	
00030C8D 0C04 0012 E6               		dc.b $C, 4, 0, $12, $E6	
00030C92 02                         SME_tvPJu_354:	dc.b 2	
00030C93 F40A 0000 FC               		dc.b $F4, $A, 0, 0, $FC	
00030C98 F40B 0009 E4               		dc.b $F4, $B, 0, 9, $E4	
00030C9D 04                         SME_tvPJu_35F:	dc.b 4	
00030C9E EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
00030CA3 EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
00030CA8 040E 0012 E4               		dc.b 4, $E, 0, $12, $E4	
00030CAD 0400 001E 04               		dc.b 4, 0, 0, $1E, 4	
00030CB2 04                         SME_tvPJu_374:	dc.b 4	
00030CB3 E40B 0000 00               		dc.b $E4, $B, 0, 0, 0	
00030CB8 E407 000C F0               		dc.b $E4, 7, 0, $C, $F0	
00030CBD 040D 0014 E8               		dc.b 4, $D, 0, $14, $E8	
00030CC2 1404 001C F0               		dc.b $14, 4, 0, $1C, $F0	
00030CC7 04                         SME_tvPJu_389:	dc.b 4	
00030CC8 EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00030CCD F400 0009 F4               		dc.b $F4, 0, 0, 9, $F4	
00030CD2 FC04 000A EC               		dc.b $FC, 4, 0, $A, $EC	
00030CD7 040A 000C EC               		dc.b 4, $A, 0, $C, $EC	
00030CDC 04                         SME_tvPJu_39E:	dc.b 4	
00030CDD E40B 0000 FC               		dc.b $E4, $B, 0, 0, $FC	
00030CE2 F405 000C EC               		dc.b $F4, 5, 0, $C, $EC	
00030CE7 040E 0010 E4               		dc.b 4, $E, 0, $10, $E4	
00030CEC 0400 001C 04               		dc.b 4, 0, 0, $1C, 4	
00030CF1 04                         SME_tvPJu_3B3:	dc.b 4	
00030CF2 EC0E 0000 FC               		dc.b $EC, $E, 0, 0, $FC	
00030CF7 EC06 000C EC               		dc.b $EC, 6, 0, $C, $EC	
00030CFC 040A 0012 E4               		dc.b 4, $A, 0, $12, $E4	
00030D01 0409 001B FC               		dc.b 4, 9, 0, $1B, $FC	
00030D06 04                         SME_tvPJu_3C8:	dc.b 4	
00030D07 E40F 0000 FC               		dc.b $E4, $F, 0, 0, $FC	
00030D0C E403 0010 F4               		dc.b $E4, 3, 0, $10, $F4	
00030D11 FC00 0014 EC               		dc.b $FC, 0, 0, $14, $EC	
00030D16 040E 0015 EC               		dc.b 4, $E, 0, $15, $EC	
00030D1B 04                         SME_tvPJu_3DD:	dc.b 4	
00030D1C EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00030D21 F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00030D26 040E 000D E4               		dc.b 4, $E, 0, $D, $E4	
00030D2B 0400 0019 04               		dc.b 4, 0, 0, $19, 4	
00030D30 04                         SME_tvPJu_3F2:	dc.b 4	
00030D31 EC0A 0000 FC               		dc.b $EC, $A, 0, 0, $FC	
00030D36 F405 0009 EC               		dc.b $F4, 5, 0, 9, $EC	
00030D3B 0409 000D EC               		dc.b 4, 9, 0, $D, $EC	
00030D40 1404 0013 F4               		dc.b $14, 4, 0, $13, $F4	
00030D45 04                         SME_tvPJu_407:	dc.b 4	
00030D46 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00030D4B FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00030D50 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00030D55 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00030D5A 04                         SME_tvPJu_41C:	dc.b 4	
00030D5B EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00030D60 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00030D65 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00030D6A 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00030D6F 04                         SME_tvPJu_431:	dc.b 4	
00030D70 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00030D75 FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00030D7A 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00030D7F 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00030D84 04                         SME_tvPJu_446:	dc.b 4	
00030D85 EB0D 0000 ED               		dc.b $EB, $D, 0, 0, $ED	
00030D8A FB08 0008 F5               		dc.b $FB, 8, 0, 8, $F5	
00030D8F 0309 000B E5               		dc.b 3, 9, 0, $B, $E5	
00030D94 0304 0011 FD               		dc.b 3, 4, 0, $11, $FD	
00030D99 04                         SME_tvPJu_45B:	dc.b 4	
00030D9A EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
00030D9F F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
00030DA4 FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
00030DA9 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
00030DAE 04                         SME_tvPJu_470:	dc.b 4	
00030DAF E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
00030DB4 F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
00030DB9 F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
00030DBE 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
00030DC3 04                         SME_tvPJu_485:	dc.b 4	
00030DC4 EA04 0000 F4               		dc.b $EA, 4, 0, 0, $F4	
00030DC9 F20D 0002 EC               		dc.b $F2, $D, 0, 2, $EC	
00030DCE FA00 000A E4               		dc.b $FA, 0, 0, $A, $E4	
00030DD3 020E 000B EC               		dc.b 2, $E, 0, $B, $EC	
00030DD8 04                         SME_tvPJu_49A:	dc.b 4	
00030DD9 E904 0000 F4               		dc.b $E9, 4, 0, 0, $F4	
00030DDE F10D 0002 EC               		dc.b $F1, $D, 0, 2, $EC	
00030DE3 F900 000A E4               		dc.b $F9, 0, 0, $A, $E4	
00030DE8 010E 000B EC               		dc.b 1, $E, 0, $B, $EC	
00030DED 04                         SME_tvPJu_4AF:	dc.b 4	
00030DEE F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00030DF3 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00030DF8 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00030DFD 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00030E02 04                         SME_tvPJu_4C4:	dc.b 4	
00030E03 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00030E08 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00030E0D 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00030E12 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00030E17 04                         SME_tvPJu_4D9:	dc.b 4	
00030E18 F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00030E1D 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00030E22 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00030E27 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00030E2C 04                         SME_tvPJu_4EE:	dc.b 4	
00030E2D F40E 0000 EB               		dc.b $F4, $E, 0, 0, $EB	
00030E32 0C04 000C EB               		dc.b $C, 4, 0, $C, $EB	
00030E37 0400 000E 0B               		dc.b 4, 0, 0, $E, $B	
00030E3C 0C05 000F 03               		dc.b $C, 5, 0, $F, 3	
00030E41 04                         SME_tvPJu_503:	dc.b 4	
00030E42 F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
00030E47 FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
00030E4C FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
00030E51 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
00030E56 04                         SME_tvPJu_518:	dc.b 4	
00030E57 F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
00030E5C FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
00030E61 FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
00030E66 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
00030E6B 04                         SME_tvPJu_52D:	dc.b 4	
00030E6C F40C 0000 F2               		dc.b $F4, $C, 0, 0, $F2	
00030E71 FC0D 0004 EA               		dc.b $FC, $D, 0, 4, $EA	
00030E76 FC06 000C 0A               		dc.b $FC, 6, 0, $C, $A	
00030E7B 0C05 0012 F2               		dc.b $C, 5, 0, $12, $F2	
00030E80 04                         SME_tvPJu_542:	dc.b 4	
00030E81 F408 0000 F1               		dc.b $F4, 8, 0, 0, $F1	
00030E86 FC0D 0003 E9               		dc.b $FC, $D, 0, 3, $E9	
00030E8B FC06 000B 09               		dc.b $FC, 6, 0, $B, 9	
00030E90 0C05 0011 F1               		dc.b $C, 5, 0, $11, $F1	
00030E95 03                         SME_tvPJu_557:	dc.b 3	
00030E96 EC08 0000 F2               		dc.b $EC, 8, 0, 0, $F2	
00030E9B F40E 0003 F2               		dc.b $F4, $E, 0, 3, $F2	
00030EA0 0C08 000F F2               		dc.b $C, 8, 0, $F, $F2	
00030EA5 04                         SME_tvPJu_567:	dc.b 4	
00030EA6 EA09 0000 F3               		dc.b $EA, 9, 0, 0, $F3	
00030EAB FA0C 0006 F3               		dc.b $FA, $C, 0, 6, $F3	
00030EB0 0208 000A F3               		dc.b 2, 8, 0, $A, $F3	
00030EB5 0A04 000D FB               		dc.b $A, 4, 0, $D, $FB	
00030EBA 04                         SME_tvPJu_57C:	dc.b 4	
00030EBB F004 0000 F9               		dc.b $F0, 4, 0, 0, $F9	
00030EC0 F808 0002 F1               		dc.b $F8, 8, 0, 2, $F1	
00030EC5 000C 0005 F1               		dc.b 0, $C, 0, 5, $F1	
00030ECA 0804 0009 F9               		dc.b 8, 4, 0, 9, $F9	
00030ECF 04                         SME_tvPJu_591:	dc.b 4	
00030ED0 EF08 0000 F9               		dc.b $EF, 8, 0, 0, $F9	
00030ED5 F70C 0003 F1               		dc.b $F7, $C, 0, 3, $F1	
00030EDA FF08 0007 F1               		dc.b $FF, 8, 0, 7, $F1	
00030EDF 070C 000A F1               		dc.b 7, $C, 0, $A, $F1	
00030EE4 04                         SME_tvPJu_5A6:	dc.b 4	
00030EE5 EF04 0000 F4               		dc.b $EF, 4, 0, 0, $F4	
00030EEA F708 0002 F4               		dc.b $F7, 8, 0, 2, $F4	
00030EEF FF0C 0005 F4               		dc.b $FF, $C, 0, 5, $F4	
00030EF4 0708 0009 F4               		dc.b 7, 8, 0, 9, $F4	
00030EF9 03                         SME_tvPJu_5BB:	dc.b 3	
00030EFA EA04 0000 F9               		dc.b $EA, 4, 0, 0, $F9	
00030EFF F20D 0002 F1               		dc.b $F2, $D, 0, 2, $F1	
00030F04 0209 000A F1               		dc.b 2, 9, 0, $A, $F1	
00030F09 02                         SME_tvPJu_5CB:	dc.b 2	
00030F0A EC0F 0000 F0               		dc.b $EC, $F, 0, 0, $F0	
00030F0F 0C08 0010 F0               		dc.b $C, 8, 0, $10, $F0	
00030F14 02                         SME_tvPJu_5D6:	dc.b 2	
00030F15 EE0B 0000 F4               		dc.b $EE, $B, 0, 0, $F4	
00030F1A 0E00 000C FC               		dc.b $E, 0, 0, $C, $FC	
00030F1F 03                         SME_tvPJu_5E1:	dc.b 3	
00030F20 EE04 0000 F0               		dc.b $EE, 4, 0, 0, $F0	
00030F25 F60D 0002 F0               		dc.b $F6, $D, 0, 2, $F0	
00030F2A 0608 000A F0               		dc.b 6, 8, 0, $A, $F0	
00030F2F 04                         SME_tvPJu_5F1:	dc.b 4	
00030F30 F008 0000 F5               		dc.b $F0, 8, 0, 0, $F5	
00030F35 F80C 0003 ED               		dc.b $F8, $C, 0, 3, $ED	
00030F3A 0008 0007 F5               		dc.b 0, 8, 0, 7, $F5	
00030F3F 0804 000A F5               		dc.b 8, 4, 0, $A, $F5	
00030F44 02                         SME_tvPJu_606:	dc.b 2	
00030F45 EC0A 0000 F4               		dc.b $EC, $A, 0, 0, $F4	
00030F4A 0405 0009 FC               		dc.b 4, 5, 0, 9, $FC	
00030F4F 02                         SME_tvPJu_611:	dc.b 2	
00030F50 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00030F55 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00030F5A 03                         SME_tvPJu_61C:	dc.b 3	
00030F5B E600 0000 FA               		dc.b $E6, 0, 0, 0, $FA	
00030F60 EE0B 0001 F2               		dc.b $EE, $B, 0, 1, $F2	
00030F65 0E08 000D F2               		dc.b $E, 8, 0, $D, $F2	
00030F6A 01                         SME_tvPJu_62C:	dc.b 1	
00030F6B F00B 0000 F3               		dc.b $F0, $B, 0, 0, $F3	
00030F70 03                         SME_tvPJu_632:	dc.b 3	
00030F71 F108 0000 EF               		dc.b $F1, 8, 0, 0, $EF	
00030F76 F90D 0003 EF               		dc.b $F9, $D, 0, 3, $EF	
00030F7B 0904 000B F7               		dc.b 9, 4, 0, $B, $F7	
00030F80 04                         SME_tvPJu_642:	dc.b 4	
00030F81 F208 0000 F8               		dc.b $F2, 8, 0, 0, $F8	
00030F86 FA0C 0003 F0               		dc.b $FA, $C, 0, 3, $F0	
00030F8B 0208 0007 F0               		dc.b 2, 8, 0, 7, $F0	
00030F90 0A04 000A F8               		dc.b $A, 4, 0, $A, $F8	
00030F95 04                         SME_tvPJu_657:	dc.b 4	
00030F96 EF09 0000 F8               		dc.b $EF, 9, 0, 0, $F8	
00030F9B FF0C 0006 F0               		dc.b $FF, $C, 0, 6, $F0	
00030FA0 0708 000A F0               		dc.b 7, 8, 0, $A, $F0	
00030FA5 0F04 000D F8               		dc.b $F, 4, 0, $D, $F8	
00030FAA 04                         SME_tvPJu_66C:	dc.b 4	
00030FAB EC09 0000 F8               		dc.b $EC, 9, 0, 0, $F8	
00030FB0 FC08 0006 F0               		dc.b $FC, 8, 0, 6, $F0	
00030FB5 040C 0009 F0               		dc.b 4, $C, 0, 9, $F0	
00030FBA 0C08 000D F0               		dc.b $C, 8, 0, $D, $F0	
00030FBF 02                         SME_tvPJu_681:	dc.b 2	
00030FC0 EC0B 0000 F5               		dc.b $EC, $B, 0, 0, $F5	
00030FC5 0C08 000C F5               		dc.b $C, 8, 0, $C, $F5	
00030FCA 01                         SME_tvPJu_68C:	dc.b 1	
00030FCB F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00030FD0 02                         SME_tvPJu_692:	dc.b 2	
00030FD1 F60D 0000 F2               		dc.b $F6, $D, 0, 0, $F2	
00030FD6 0608 0008 F2               		dc.b 6, 8, 0, 8, $F2	
00030FDB 01                         SME_tvPJu_69D:	dc.b 1	
00030FDC F30B 0000 F3               		dc.b $F3, $B, 0, 0, $F3	
00030FE1 02                         SME_tvPJu_6A3:	dc.b 2	
00030FE2 EB04 0000 FB               		dc.b $EB, 4, 0, 0, $FB	
00030FE7 F30B 0002 F3               		dc.b $F3, $B, 0, 2, $F3	
00030FEC 03                         SME_tvPJu_6AE:	dc.b 3	
00030FED EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00030FF2 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
00030FF7 0409 000B F8               		dc.b 4, 9, 0, $B, $F8	
00030FFC 04                         SME_tvPJu_6BE:	dc.b 4	
00030FFD E80A 0000 FC               		dc.b $E8, $A, 0, 0, $FC	
00031002 F005 0009 EC               		dc.b $F0, 5, 0, 9, $EC	
00031007 000C 000D EC               		dc.b 0, $C, 0, $D, $EC	
0003100C 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00031011 04                         SME_tvPJu_6D3:	dc.b 4	
00031012 EA08 0000 FA               		dc.b $EA, 8, 0, 0, $FA	
00031017 F20D 0003 F2               		dc.b $F2, $D, 0, 3, $F2	
0003101C 0208 000B F2               		dc.b 2, 8, 0, $B, $F2	
00031021 0A05 000E F2               		dc.b $A, 5, 0, $E, $F2	
00031026 03                         SME_tvPJu_6E8:	dc.b 3	
00031027 EB09 0000 F8               		dc.b $EB, 9, 0, 0, $F8	
0003102C FB0C 0006 F0               		dc.b $FB, $C, 0, 6, $F0	
00031031 0308 000A F8               		dc.b 3, 8, 0, $A, $F8	
00031036 03                         SME_tvPJu_6F8:	dc.b 3	
00031037 F108 0000 F3               		dc.b $F1, 8, 0, 0, $F3	
0003103C F90D 0003 F3               		dc.b $F9, $D, 0, 3, $F3	
00031041 0908 000B F3               		dc.b 9, 8, 0, $B, $F3	
00031046 03                         SME_tvPJu_708:	dc.b 3	
00031047 EE04 0000 FB               		dc.b $EE, 4, 0, 0, $FB	
0003104C F60D 0002 F3               		dc.b $F6, $D, 0, 2, $F3	
00031051 0604 000A FB               		dc.b 6, 4, 0, $A, $FB	
00031056 01                         SME_tvPJu_718:	dc.b 1	
00031057 F20F 0000 EE               		dc.b $F2, $F, 0, 0, $EE	
0003105C 04                         SME_tvPJu_71E:	dc.b 4	
0003105D EA00 0000 02               		dc.b $EA, 0, 0, 0, 2	
00031062 F20D 0001 F2               		dc.b $F2, $D, 0, 1, $F2	
00031067 FA00 0009 EA               		dc.b $FA, 0, 0, 9, $EA	
0003106C 020D 000A EA               		dc.b 2, $D, 0, $A, $EA	
00031071 04                         SME_tvPJu_733:	dc.b 4	
00031072 EC04 0000 FB               		dc.b $EC, 4, 0, 0, $FB	
00031077 F408 0002 F3               		dc.b $F4, 8, 0, 2, $F3	
0003107C FC0A 0005 EB               		dc.b $FC, $A, 0, 5, $EB	
00031081 FC05 000E 03               		dc.b $FC, 5, 0, $E, 3	
00031086 02                         SME_tvPJu_748:	dc.b 2	
00031087 ED04 0000 FF               		dc.b $ED, 4, 0, 0, $FF	
0003108C F50E 0002 EF               		dc.b $F5, $E, 0, 2, $EF	
00031091 03                         SME_tvPJu_753:	dc.b 3	
00031092 EF04 0000 FA               		dc.b $EF, 4, 0, 0, $FA	
00031097 F70D 0002 F2               		dc.b $F7, $D, 0, 2, $F2	
0003109C 0704 000A FA               		dc.b 7, 4, 0, $A, $FA	
000310A1 03                         SME_tvPJu_763:	dc.b 3	
000310A2 ED00 0000 00               		dc.b $ED, 0, 0, 0, 0	
000310A7 F50A 0001 F8               		dc.b $F5, $A, 0, 1, $F8	
000310AC FD04 000A E8               		dc.b $FD, 4, 0, $A, $E8	
000310B1 02                         SME_tvPJu_773:	dc.b 2	
000310B2 F00F 0000 EF               		dc.b $F0, $F, 0, 0, $EF	
000310B7 F800 0010 0F               		dc.b $F8, 0, 0, $10, $F	
000310BC 04                         SME_tvPJu_77E:	dc.b 4	
000310BD EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000310C2 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
000310C7 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
000310CC 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000310D1 03                         SME_tvPJu_793:	dc.b 3	
000310D2 EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
000310D7 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
000310DC 0409 000B F7               		dc.b 4, 9, 0, $B, $F7	
000310E1 02                         SME_tvPJu_7A3:	dc.b 2	
000310E2 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000310E7 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000310EC 02                         SME_tvPJu_7AE:	dc.b 2	
000310ED EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
000310F2 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
000310F7 04                         SME_tvPJu_7B9:	dc.b 4	
000310F8 EC08 0000 F7               		dc.b $EC, 8, 0, 0, $F7	
000310FD F40C 0003 EF               		dc.b $F4, $C, 0, 3, $EF	
00031102 FC08 0007 F7               		dc.b $FC, 8, 0, 7, $F7	
00031107 040D 000A EF               		dc.b 4, $D, 0, $A, $EF	
0003110C 03                         SME_tvPJu_7CE:	dc.b 3	
0003110D EC0A 0000 F6               		dc.b $EC, $A, 0, 0, $F6	
00031112 040C 0009 EE               		dc.b 4, $C, 0, 9, $EE	
00031117 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
0003111C 02                         SME_tvPJu_7DE:	dc.b 2	
0003111D EC0B 0000 F3               		dc.b $EC, $B, 0, 0, $F3	
00031122 0C08 000C F3               		dc.b $C, 8, 0, $C, $F3	
00031127 03                         SME_tvPJu_7E9:	dc.b 3	
00031128 F50A 0000 EC               		dc.b $F5, $A, 0, 0, $EC	
0003112D F509 0009 04               		dc.b $F5, 9, 0, 9, 4	
00031132 0500 000F 14               		dc.b 5, 0, 0, $F, $14	
00031137 01                         SME_tvPJu_7F9:	dc.b 1	
00031138 F40E 0000 FC               		dc.b $F4, $E, 0, 0, $FC	
0003113D 02                         SME_tvPJu_7FF:	dc.b 2	
0003113E F40E 0000 E2               		dc.b $F4, $E, 0, 0, $E2	
00031143 F402 000C 02               		dc.b $F4, 2, 0, $C, 2	
00031148 03                         SME_tvPJu_80A:	dc.b 3	
00031149 F505 0000 E5               		dc.b $F5, 5, 0, 0, $E5	
0003114E F50E 0004 F5               		dc.b $F5, $E, 0, 4, $F5	
00031153 0500 0010 E5               		dc.b 5, 0, 0, $10, $E5	
00031158 01                         SME_tvPJu_81A:	dc.b 1	
00031159 F40E 0000 F6               		dc.b $F4, $E, 0, 0, $F6	
0003115E 02                         SME_tvPJu_820:	dc.b 2	
0003115F FC00 0000 DA               		dc.b $FC, 0, 0, 0, $DA	
00031164 F40E 0001 E2               		dc.b $F4, $E, 0, 1, $E2	
00031169 02                         SME_tvPJu_82B:	dc.b 2	
0003116A F00A 0000 EC               		dc.b $F0, $A, 0, 0, $EC	
0003116F F806 0009 04               		dc.b $F8, 6, 0, 9, 4	
00031174 03                         SME_tvPJu_836:	dc.b 3	
00031175 E80A 0000 F5               		dc.b $E8, $A, 0, 0, $F5	
0003117A 0005 0009 F5               		dc.b 0, 5, 0, 9, $F5	
0003117F 1008 000D F5               		dc.b $10, 8, 0, $D, $F5	
00031184 01                         SME_tvPJu_846:	dc.b 1	
00031185 F10B 0000 F3               		dc.b $F1, $B, 0, 0, $F3	
0003118A 02                         SME_tvPJu_84C:	dc.b 2	
0003118B EB0B 0000 F4               		dc.b $EB, $B, 0, 0, $F4	
00031190 0B08 000C F4               		dc.b $B, 8, 0, $C, $F4	
00031195 03                         SME_tvPJu_857:	dc.b 3	
00031196 E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
0003119B F004 0003 F4               		dc.b $F0, 4, 0, 3, $F4	
000311A0 F80B 0005 F4               		dc.b $F8, $B, 0, 5, $F4	
000311A5 01                         SME_tvPJu_867:	dc.b 1	
000311A6 F00B 0000 F2               		dc.b $F0, $B, 0, 0, $F2	
000311AB 02                         SME_tvPJu_86D:	dc.b 2	
000311AC E800 0000 FA               		dc.b $E8, 0, 0, 0, $FA	
000311B1 F00B 0001 F2               		dc.b $F0, $B, 0, 1, $F2	
000311B6 02                         SME_tvPJu_878:	dc.b 2	
000311B7 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000311BC 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000311C1 04                         SME_tvPJu_883:	dc.b 4	
000311C2 EC04 0000 F0               		dc.b $EC, 4, 0, 0, $F0	
000311C7 F40C 0002 F0               		dc.b $F4, $C, 0, 2, $F0	
000311CC FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000311D1 0C04 000C F8               		dc.b $C, 4, 0, $C, $F8	
000311D6 03                         SME_tvPJu_898:	dc.b 3	
000311D7 EC00 0000 FB               		dc.b $EC, 0, 0, 0, $FB	
000311DC F40D 0001 EB               		dc.b $F4, $D, 0, 1, $EB	
000311E1 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
000311E6 03                         SME_tvPJu_8A8:	dc.b 3	
000311E7 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
000311EC F80D 0001 F0               		dc.b $F8, $D, 0, 1, $F0	
000311F1 0808 0009 F0               		dc.b 8, 8, 0, 9, $F0	
000311F6 02                         SME_tvPJu_8B8:	dc.b 2	
000311F7 F806 0000 EC               		dc.b $F8, 6, 0, 0, $EC	
000311FC F00B 0006 FC               		dc.b $F0, $B, 0, 6, $FC	
00031201 03                         SME_tvPJu_8C3:	dc.b 3	
00031202 F000 0000 FC               		dc.b $F0, 0, 0, 0, $FC	
00031207 F80A 0001 EC               		dc.b $F8, $A, 0, 1, $EC	
0003120C F805 000A 04               		dc.b $F8, 5, 0, $A, 4	
00031211 03                         SME_tvPJu_8D3:	dc.b 3	
00031212 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00031217 F809 0002 F0               		dc.b $F8, 9, 0, 2, $F0	
0003121C 080C 0008 F0               		dc.b 8, $C, 0, 8, $F0	
00031221 03                         SME_tvPJu_8E3:	dc.b 3	
00031222 F009 0000 F8               		dc.b $F0, 9, 0, 0, $F8	
00031227 000C 0006 F0               		dc.b 0, $C, 0, 6, $F0	
0003122C 0804 000A 00               		dc.b 8, 4, 0, $A, 0	
00031231 02                         SME_tvPJu_8F3:	dc.b 2	
00031232 F000 0000 00               		dc.b $F0, 0, 0, 0, 0	
00031237 F80E 0001 F0               		dc.b $F8, $E, 0, 1, $F0	
0003123C 04                         SME_tvPJu_8FE:	dc.b 4	
0003123D F004 0000 F4               		dc.b $F0, 4, 0, 0, $F4	
00031242 F800 0002 EC               		dc.b $F8, 0, 0, 2, $EC	
00031247 0800 0003 EC               		dc.b 8, 0, 0, 3, $EC	
0003124C F80E 0004 F4               		dc.b $F8, $E, 0, 4, $F4	
00031251 03                         SME_tvPJu_913:	dc.b 3	
00031252 F004 0000 FC               		dc.b $F0, 4, 0, 0, $FC	
00031257 F80E 0002 EC               		dc.b $F8, $E, 0, 2, $EC	
0003125C F802 000E 0C               		dc.b $F8, 2, 0, $E, $C	
00031261 03                         SME_tvPJu_923:	dc.b 3	
00031262 F004 0000 F8               		dc.b $F0, 4, 0, 0, $F8	
00031267 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0	
0003126C 0808 000A F8               		dc.b 8, 8, 0, $A, $F8	
00031271 02                         SME_tvPJu_933:	dc.b 2	
00031272 F000 0000 F4               		dc.b $F0, 0, 0, 0, $F4	
00031277 F80A 0001 F4               		dc.b $F8, $A, 0, 1, $F4	
0003127C 03                         SME_tvPJu_93E:	dc.b 3	
0003127D F008 0000 F0               		dc.b $F0, 8, 0, 0, $F0	
00031282 F80D 0003 F0               		dc.b $F8, $D, 0, 3, $F0	
00031287 0808 000B F0               		dc.b 8, 8, 0, $B, $F0	
0003128C 01                         SME_tvPJu_94E:	dc.b 1	
0003128D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
00031292 04                         SME_tvPJu_954:	dc.b 4	
00031293 E70C 0000 EE               		dc.b $E7, $C, 0, 0, $EE	
00031298 EF08 0004 EE               		dc.b $EF, 8, 0, 4, $EE	
0003129D F70D 0007 EE               		dc.b $F7, $D, 0, 7, $EE	
000312A2 070D 000F F6               		dc.b 7, $D, 0, $F, $F6	
000312A7 04                         SME_tvPJu_969:	dc.b 4	
000312A8 E604 0000 E9               		dc.b $E6, 4, 0, 0, $E9	
000312AD EE0E 0002 E1               		dc.b $EE, $E, 0, 2, $E1	
000312B2 F606 000E 01               		dc.b $F6, 6, 0, $E, 1	
000312B7 0608 0014 E9               		dc.b 6, 8, 0, $14, $E9	
000312BC 03                         SME_tvPJu_97E:	dc.b 3	
000312BD F108 0000 E6               		dc.b $F1, 8, 0, 0, $E6	
000312C2 F90E 0003 E6               		dc.b $F9, $E, 0, 3, $E6	
000312C7 E907 000F 06               		dc.b $E9, 7, 0, $F, 6	
000312CC 04                         SME_tvPJu_98E:	dc.b 4	
000312CD EE08 0000 F5               		dc.b $EE, 8, 0, 0, $F5	
000312D2 F604 0003 FD               		dc.b $F6, 4, 0, 3, $FD	
000312D7 0601 0005 E5               		dc.b 6, 1, 0, 5, $E5	
000312DC FE0F 0007 ED               		dc.b $FE, $F, 0, 7, $ED	
000312E1 04                         SME_tvPJu_9A3:	dc.b 4	
000312E2 120C 1800 F1               		dc.b $12, $C, $18, 0, $F1	
000312E7 0A08 1804 F9               		dc.b $A, 8, $18, 4, $F9	
000312EC FA0D 1807 F1               		dc.b $FA, $D, $18, 7, $F1	
000312F1 EA0D 180F E9               		dc.b $EA, $D, $18, $F, $E9	
000312F6 04                         SME_tvPJu_9B8:	dc.b 4	
000312F7 1304 1800 04               		dc.b $13, 4, $18, 0, 4	
000312FC FB0E 1802 FC               		dc.b $FB, $E, $18, 2, $FC	
00031301 F306 180E EC               		dc.b $F3, 6, $18, $E, $EC	
00031306 F308 1814 FC               		dc.b $F3, 8, $18, $14, $FC	
0003130B 03                         SME_tvPJu_9CD:	dc.b 3	
0003130C 0708 1800 01               		dc.b 7, 8, $18, 0, 1	
00031311 EF0E 1803 F9               		dc.b $EF, $E, $18, 3, $F9	
00031316 F707 180F E9               		dc.b $F7, 7, $18, $F, $E9	
0003131B 04                         SME_tvPJu_9DD:	dc.b 4	
0003131C 0C08 1800 F3               		dc.b $C, 8, $18, 0, $F3	
00031321 0404 1803 F3               		dc.b 4, 4, $18, 3, $F3	
00031326 EC01 1805 13               		dc.b $EC, 1, $18, 5, $13	
0003132B E40F 1807 F3               		dc.b $E4, $F, $18, 7, $F3	
00031330 04                         SME_tvPJu_9F2:	dc.b 4	
00031331 E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031336 E800 000C 0F               		dc.b $E8, 0, 0, $C, $F	
0003133B 0004 000D F7               		dc.b 0, 4, 0, $D, $F7	
00031340 0809 000F EF               		dc.b 8, 9, 0, $F, $EF	
00031345 04                         SME_tvPJu_A07:	dc.b 4	
00031346 E80C 0000 EE               		dc.b $E8, $C, 0, 0, $EE	
0003134B F00D 0004 EE               		dc.b $F0, $D, 0, 4, $EE	
00031350 0005 000C F6               		dc.b 0, 5, 0, $C, $F6	
00031355 1008 0010 EE               		dc.b $10, 8, 0, $10, $EE	
0003135A 03                         SME_tvPJu_A1C:	dc.b 3	
0003135B E808 0000 F4               		dc.b $E8, 8, 0, 0, $F4	
00031360 F00C 0003 EC               		dc.b $F0, $C, 0, 3, $EC	
00031365 F80B 0007 F4               		dc.b $F8, $B, 0, 7, $F4	
0003136A 04                         SME_tvPJu_A2C:	dc.b 4	
0003136B E800 0000 EA               		dc.b $E8, 0, 0, 0, $EA	
00031370 E80D 0001 F2               		dc.b $E8, $D, 0, 1, $F2	
00031375 F808 0009 F2               		dc.b $F8, 8, 0, 9, $F2	
0003137A 0006 000C FA               		dc.b 0, 6, 0, $C, $FA	
0003137F 03                         SME_tvPJu_A41:	dc.b 3	
00031380 E80E 0000 ED               		dc.b $E8, $E, 0, 0, $ED	
00031385 0009 000C F5               		dc.b 0, 9, 0, $C, $F5	
0003138A 1004 0012 F5               		dc.b $10, 4, 0, $12, $F5	
0003138F 02                         SME_tvPJu_A51:	dc.b 2	
00031390 E80E 0000 EF               		dc.b $E8, $E, 0, 0, $EF	
00031395 0006 000C F7               		dc.b 0, 6, 0, $C, $F7	
0003139A 03                         SME_tvPJu_A5C:	dc.b 3	
0003139B F808 0000 FC               		dc.b $F8, 8, 0, 0, $FC	
000313A0 000D 0003 F4               		dc.b 0, $D, 0, 3, $F4	
000313A5 1008 000B F4               		dc.b $10, 8, 0, $B, $F4	
000313AA 02                         SME_tvPJu_A6C:	dc.b 2	
000313AB F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000313B0 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000313B5 02                         SME_tvPJu_A77:	dc.b 2	
000313B6 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000313BB 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000313C0 02                         SME_tvPJu_A82:	dc.b 2	
000313C1 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000313C6 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000313CB 02                         SME_tvPJu_A8D:	dc.b 2	
000313CC F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000313D1 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000313D6 02                         SME_tvPJu_A98:	dc.b 2	
000313D7 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
000313DC 1008 000C F4               		dc.b $10, 8, 0, $C, $F4	
000313E1 03                         SME_tvPJu_AA3:	dc.b 3	
000313E2 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC	
000313E7 F002 000C 0C               		dc.b $F0, 2, 0, $C, $C	
000313EC 0808 000F F4               		dc.b 8, 8, 0, $F, $F4	
000313F1 03                         SME_tvPJu_AB3:	dc.b 3	
000313F2 EF0E 0000 EC               		dc.b $EF, $E, 0, 0, $EC	
000313F7 EF02 000C 0C               		dc.b $EF, 2, 0, $C, $C	
000313FC 0708 000F F4               		dc.b 7, 8, 0, $F, $F4	
00031401 02                         SME_tvPJu_AC3:	dc.b 2	
00031402 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00031407 0805 000C F9               		dc.b 8, 5, 0, $C, $F9	
0003140C 03                         SME_tvPJu_ACE:	dc.b 3	
0003140D F10C 0000 E9               		dc.b $F1, $C, 0, 0, $E9	
00031412 F905 0004 E9               		dc.b $F9, 5, 0, 4, $E9	
00031417 F90A 0008 F9               		dc.b $F9, $A, 0, 8, $F9	
0003141C 04                         SME_tvPJu_ADE:	dc.b 4	
0003141D E809 0000 F0               		dc.b $E8, 9, 0, 0, $F0	
00031422 F80C 0006 F0               		dc.b $F8, $C, 0, 6, $F0	
00031427 0008 000A F0               		dc.b 0, 8, 0, $A, $F0	
0003142C 0809 000D F8               		dc.b 8, 9, 0, $D, $F8	
00031431 04                         SME_tvPJu_AF3:	dc.b 4	
00031432 E609 0000 F0               		dc.b $E6, 9, 0, 0, $F0	
00031437 F60C 0006 F0               		dc.b $F6, $C, 0, 6, $F0	
0003143C FE08 000A F0               		dc.b $FE, 8, 0, $A, $F0	
00031441 060D 000D F8               		dc.b 6, $D, 0, $D, $F8	
00031446 04                         SME_tvPJu_B08:	dc.b 4	
00031447 E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
0003144C F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00031451 0000 000F 10               		dc.b 0, 0, 0, $F, $10	
00031456 0804 0010 00               		dc.b 8, 4, 0, $10, 0	
0003145B 02                         SME_tvPJu_B1D:	dc.b 2	
0003145C E808 0000 F0               		dc.b $E8, 8, 0, 0, $F0	
00031461 F00E 0003 F0               		dc.b $F0, $E, 0, 3, $F0	
00031466 05                         SME_tvPJu_B28:	dc.b 5	
00031467 E80D 0000 F2               		dc.b $E8, $D, 0, 0, $F2	
0003146C E804 0008 F7               		dc.b $E8, 4, 0, 8, $F7	
00031471 F009 000A F7               		dc.b $F0, 9, 0, $A, $F7	
00031476 0005 0010 F7               		dc.b 0, 5, 0, $10, $F7	
0003147B 1008 0014 F7               		dc.b $10, 8, 0, $14, $F7	
00031480 05                         SME_tvPJu_B42:	dc.b 5	
00031481 E808 0000 F6               		dc.b $E8, 8, 0, 0, $F6	
00031486 E804 0003 F7               		dc.b $E8, 4, 0, 3, $F7	
0003148B F009 0005 F7               		dc.b $F0, 9, 0, 5, $F7	
00031490 0005 000B F7               		dc.b 0, 5, 0, $B, $F7	
00031495 1008 000F F7               		dc.b $10, 8, 0, $F, $F7	
0003149A 01                         SME_tvPJu_B5C:	dc.b 1	
0003149B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000314A0 01                         SME_tvPJu_B62:	dc.b 1	
000314A1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000314A6 01                         SME_tvPJu_B68:	dc.b 1	
000314A7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000314AC 01                         SME_tvPJu_B6E:	dc.b 1	
000314AD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000314B2 01                         SME_tvPJu_B74:	dc.b 1	
000314B3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000314B8 02                         SME_tvPJu_B7A:	dc.b 2	
000314B9 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
000314BE 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
000314C3 02                         SME_tvPJu_B85:	dc.b 2	
000314C4 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
000314C9 0400 0010 10               		dc.b 4, 0, 0, $10, $10	
000314CE 04                         SME_tvPJu_B90:	dc.b 4	
000314CF EB0A 0000 F5               		dc.b $EB, $A, 0, 0, $F5	
000314D4 F301 0009 ED               		dc.b $F3, 1, 0, 9, $ED	
000314D9 030C 000B F5               		dc.b 3, $C, 0, $B, $F5	
000314DE 0B08 000F FD               		dc.b $B, 8, 0, $F, $FD	
000314E3 04                         SME_tvPJu_BA5:	dc.b 4	
000314E4 EB0A 0000 F6               		dc.b $EB, $A, 0, 0, $F6	
000314E9 F301 0009 EE               		dc.b $F3, 1, 0, 9, $EE	
000314EE 030C 000B F6               		dc.b 3, $C, 0, $B, $F6	
000314F3 0B08 000F FE               		dc.b $B, 8, 0, $F, $FE	
000314F8 04                         SME_tvPJu_BBA:	dc.b 4	
000314F9 EA08 0000 F9               		dc.b $EA, 8, 0, 0, $F9	
000314FE F20D 0003 F1               		dc.b $F2, $D, 0, 3, $F1	
00031503 0208 000B F9               		dc.b 2, 8, 0, $B, $F9	
00031508 0A04 000E 01               		dc.b $A, 4, 0, $E, 1	
0003150D 03                         SME_tvPJu_BCF:	dc.b 3	
0003150E EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031513 F40E 0003 EF               		dc.b $F4, $E, 0, 3, $EF	
00031518 0C08 000F F7               		dc.b $C, 8, 0, $F, $F7	
0003151D 04                         SME_tvPJu_BDF:	dc.b 4	
0003151E F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031523 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031528 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
0003152D F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031532 04                         SME_tvPJu_BF4:	dc.b 4	
00031533 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031538 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
0003153D E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031542 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031547 04                         SME_tvPJu_C09:	dc.b 4	
00031548 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
0003154D 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031552 E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031557 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
0003155C 04                         SME_tvPJu_C1E:	dc.b 4	
0003155D F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031562 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031567 E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
0003156C F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031571 04                         SME_tvPJu_C33:	dc.b 4	
00031572 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
00031577 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
0003157C E50D 0008 E8               		dc.b $E5, $D, 0, 8, $E8	
00031581 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
00031586 04                         SME_tvPJu_C48:	dc.b 4	
00031587 F505 0000 02               		dc.b $F5, 5, 0, 0, 2	
0003158C 0505 0004 F2               		dc.b 5, 5, 0, 4, $F2	
00031591 E50D 0008 EA               		dc.b $E5, $D, 0, 8, $EA	
00031596 F509 0010 EA               		dc.b $F5, 9, 0, $10, $EA	
0003159B 03                         SME_tvPJu_C5D:	dc.b 3	
0003159C EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000315A1 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000315A6 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
000315AB 03                         SME_tvPJu_C6D:	dc.b 3	
000315AC EC08 0000 F8               		dc.b $EC, 8, 0, 0, $F8	
000315B1 F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0	
000315B6 F400 0013 10               		dc.b $F4, 0, 0, $13, $10	
000315BB 03                         SME_tvPJu_C7D:	dc.b 3	
000315BC EC04 0000 F8               		dc.b $EC, 4, 0, 0, $F8	
000315C1 F40F 0002 F0               		dc.b $F4, $F, 0, 2, $F0	
000315C6 F400 0012 10               		dc.b $F4, 0, 0, $12, $10	
000315CB 03                         SME_tvPJu_C8D:	dc.b 3	
000315CC F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
000315D1 F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
000315D6 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
000315DB 03                         SME_tvPJu_C9D:	dc.b 3	
000315DC F40E 0000 E6               		dc.b $F4, $E, 0, 0, $E6	
000315E1 F400 000C 06               		dc.b $F4, 0, 0, $C, 6	
000315E6 FC09 000D 06               		dc.b $FC, 9, 0, $D, 6	
000315EB 04                         SME_tvPJu_CAD:	dc.b 4	
000315EC EC0F 0000 EC               		dc.b $EC, $F, 0, 0, $EC	
000315F1 0400 0010 0C               		dc.b 4, 0, 0, $10, $C	
000315F6 0C04 0011 EC               		dc.b $C, 4, 0, $11, $EC	
000315FB 0C04 0013 04               		dc.b $C, 4, 0, $13, 4	
00031600 04                         SME_tvPJu_CC2:	dc.b 4	
00031601 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00031606 F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
0003160B 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00031610 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
00031615 04                         SME_tvPJu_CD7:	dc.b 4	
00031616 EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
0003161B F40D 0003 EE               		dc.b $F4, $D, 0, 3, $EE	
00031620 0404 000B F6               		dc.b 4, 4, 0, $B, $F6	
00031625 0C08 000D F6               		dc.b $C, 8, 0, $D, $F6	
0003162A 04                         SME_tvPJu_CEC:	dc.b 4	
0003162B EC08 0000 EE               		dc.b $EC, 8, 0, 0, $EE	
00031630 F40C 0003 E6               		dc.b $F4, $C, 0, 3, $E6	
00031635 FC0D 0007 EE               		dc.b $FC, $D, 0, 7, $EE	
0003163A 0C08 000F F6               		dc.b $C, 8, 0, $F, $F6	
0003163F 02                         SME_tvPJu_D01:	dc.b 2	
00031640 EC0D 0000 EA               		dc.b $EC, $D, 0, 0, $EA	
00031645 FC0A 0008 F2               		dc.b $FC, $A, 0, 8, $F2	
0003164A 03                         SME_tvPJu_D0C:	dc.b 3	
0003164B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031650 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031655 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
0003165A 03                         SME_tvPJu_D1C:	dc.b 3	
0003165B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031660 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031665 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
0003166A 03                         SME_tvPJu_D2C:	dc.b 3	
0003166B EC08 0000 EF               		dc.b $EC, 8, 0, 0, $EF	
00031670 F40D 0003 EF               		dc.b $F4, $D, 0, 3, $EF	
00031675 0409 000B EF               		dc.b 4, 9, 0, $B, $EF	
0003167A 03                         SME_tvPJu_D3C:	dc.b 3	
0003167B E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00031680 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031685 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
0003168A 03                         SME_tvPJu_D4C:	dc.b 3	
0003168B E60B 0000 F5               		dc.b $E6, $B, 0, 0, $F5	
00031690 0608 000C F5               		dc.b 6, 8, 0, $C, $F5	
00031695 0E05 000F F5               		dc.b $E, 5, 0, $F, $F5	
0003169A 03                         SME_tvPJu_D5C:	dc.b 3	
0003169B E408 0000 ED               		dc.b $E4, 8, 0, 0, $ED	
000316A0 EC0F 0003 ED               		dc.b $EC, $F, 0, 3, $ED	
000316A5 0C0C 0013 ED               		dc.b $C, $C, 0, $13, $ED	
000316AA 03                         SME_tvPJu_D6C:	dc.b 3	
000316AB E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
000316B0 ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
000316B5 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
000316BA 03                         SME_tvPJu_D7C:	dc.b 3	
000316BB E400 0000 FD               		dc.b $E4, 0, 0, 0, $FD	
000316C0 EC0F 0001 ED               		dc.b $EC, $F, 0, 1, $ED	
000316C5 0C0C 0011 ED               		dc.b $C, $C, 0, $11, $ED	
000316CA 03                         SME_tvPJu_D8C:	dc.b 3	
000316CB E508 0000 ED               		dc.b $E5, 8, 0, 0, $ED	
000316D0 ED0F 0003 ED               		dc.b $ED, $F, 0, 3, $ED	
000316D5 0D08 0013 ED               		dc.b $D, 8, 0, $13, $ED	
000316DA 04                         SME_tvPJu_D9C:	dc.b 4	
000316DB FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000316E0 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000316E5 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000316EA FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000316EF 04                         SME_tvPJu_DB1:	dc.b 4	
000316F0 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000316F5 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000316FA F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000316FF FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031704 03                         SME_tvPJu_DC6:	dc.b 3	
00031705 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
0003170A E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
0003170F FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031714 04                         SME_tvPJu_DD6:	dc.b 4	
00031715 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
0003171A E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
0003171F F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031724 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031729 04                         SME_tvPJu_DEB:	dc.b 4	
0003172A FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
0003172F E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031734 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031739 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
0003173E 03                         SME_tvPJu_E00:	dc.b 3	
0003173F FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031744 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031749 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
0003174E 04                         SME_tvPJu_E10:	dc.b 4	
0003174F FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031754 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
00031759 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
0003175E FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031763 04                         SME_tvPJu_E25:	dc.b 4	
00031764 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
00031769 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
0003176E F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
00031773 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
00031778 03                         SME_tvPJu_E3A:	dc.b 3	
00031779 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
0003177E E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
00031783 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
00031788 04                         SME_tvPJu_E4A:	dc.b 4	
00031789 EC08 0000 ED               		dc.b $EC, 8, 0, 0, $ED	
0003178E F40D 0003 ED               		dc.b $F4, $D, 0, 3, $ED	
00031793 0408 000B F5               		dc.b 4, 8, 0, $B, $F5	
00031798 0C08 000E F5               		dc.b $C, 8, 0, $E, $F5	
0003179D 04                         SME_tvPJu_E5F:	dc.b 4	
0003179E EE08 0000 ED               		dc.b $EE, 8, 0, 0, $ED	
000317A3 F60C 0003 E5               		dc.b $F6, $C, 0, 3, $E5	
000317A8 FE0C 0007 ED               		dc.b $FE, $C, 0, 7, $ED	
000317AD 0609 000B F5               		dc.b 6, 9, 0, $B, $F5	
000317B2 04                         SME_tvPJu_E74:	dc.b 4	
000317B3 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000317B8 E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000317BD F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000317C2 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000317C7 04                         SME_tvPJu_E89:	dc.b 4	
000317C8 FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000317CD E40D 0009 E8               		dc.b $E4, $D, 0, 9, $E8	
000317D2 F408 0011 F0               		dc.b $F4, 8, 0, $11, $F0	
000317D7 FC00 0014 F0               		dc.b $FC, 0, 0, $14, $F0	
000317DC 03                         SME_tvPJu_E9E:	dc.b 3	
000317DD FC0A 0000 F8               		dc.b $FC, $A, 0, 0, $F8	
000317E2 E40E 0009 E8               		dc.b $E4, $E, 0, 9, $E8	
000317E7 FC00 0011 F0               		dc.b $FC, 0, 0, $11, $F0	
000317EC 03                         SME_tvPJu_EAE:	dc.b 3	
000317ED F40A 0000 FB               		dc.b $F4, $A, 0, 0, $FB	
000317F2 FC04 0009 EB               		dc.b $FC, 4, 0, 9, $EB	
000317F7 0408 000B E3               		dc.b 4, 8, 0, $B, $E3	
000317FC 03                         SME_tvPJu_EBE:	dc.b 3	
000317FD F409 0000 F4               		dc.b $F4, 9, 0, 0, $F4	
00031802 040C 0006 EC               		dc.b 4, $C, 0, 6, $EC	
00031807 0400 000A 0C               		dc.b 4, 0, 0, $A, $C	
0003180C 02                         SME_tvPJu_ECE:	dc.b 2	
0003180D F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031812 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
00031817 03                         SME_tvPJu_ED9:	dc.b 3	
00031818 F409 0800 F3               		dc.b $F4, 9, 8, 0, $F3	
0003181D 040C 0806 F3               		dc.b 4, $C, 8, 6, $F3	
00031822 0400 080A EB               		dc.b 4, 0, 8, $A, $EB	
00031827 03                         SME_tvPJu_EE9:	dc.b 3	
00031828 F40A 0800 EE               		dc.b $F4, $A, 8, 0, $EE	
0003182D FC04 0809 06               		dc.b $FC, 4, 8, 9, 6	
00031832 0408 080B 06               		dc.b 4, 8, 8, $B, 6	
00031837 02                         SME_tvPJu_EF9:	dc.b 2	
00031838 F40E 0000 F2               		dc.b $F4, $E, 0, 0, $F2	
0003183D 0400 000C EA               		dc.b 4, 0, 0, $C, $EA	
00031842 02                         SME_tvPJu_F04:	dc.b 2	
00031843 F409 0000 F7               		dc.b $F4, 9, 0, 0, $F7	
00031848 040C 0006 EF               		dc.b 4, $C, 0, 6, $EF	
0003184D 02                         SME_tvPJu_F0F:	dc.b 2	
0003184E F40E 0800 EF               		dc.b $F4, $E, 8, 0, $EF	
00031853 0400 080C 0F               		dc.b 4, 0, 8, $C, $F	
00031858 03                         SME_tvPJu_F1A:	dc.b 3	
00031859 F80E 0000 EC               		dc.b $F8, $E, 0, 0, $EC	
0003185E F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00031863 1008 000F F4               		dc.b $10, 8, 0, $F, $F4	
00031868 03                         SME_tvPJu_F2A:	dc.b 3	
00031869 F70E 0000 EC               		dc.b $F7, $E, 0, 0, $EC	
0003186E F702 000C 0C               		dc.b $F7, 2, 0, $C, $C	
00031873 0F08 000F F4               		dc.b $F, 8, 0, $F, $F4	
00031878 01                         SME_tvPJu_F3A:	dc.b 1	
00031879 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
0003187E 03                         SME_tvPJu_F40:	dc.b 3	
0003187F E809 0000 F3               		dc.b $E8, 9, 0, 0, $F3	
00031884 F80D 0006 F3               		dc.b $F8, $D, 0, 6, $F3	
00031889 0809 000E F3               		dc.b 8, 9, 0, $E, $F3	
0003188E 02                         SME_tvPJu_F50:	dc.b 2	
0003188F E80F 0000 F0               		dc.b $E8, $F, 0, 0, $F0	
00031894 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00031899 03                         SME_tvPJu_F5B:	dc.b 3	
0003189A E80A 0000 F2               		dc.b $E8, $A, 0, 0, $F2	
0003189F 000C 0009 F0               		dc.b 0, $C, 0, 9, $F0	
000318A4 0809 000D F0               		dc.b 8, 9, 0, $D, $F0	
000318AA 00                         		even
000318AA 00                         		even
000318AA                            		even
000318AA                            ; ---------------------------------------------------------------------------
000318AA                            ; Uncompressed graphics	loading	array for Sonic
000318AA                            ; ---------------------------------------------------------------------------
000318AA                            ;SonicDynPLC:
000318AA                            ;	INCLUDE	"mappings/spriteDPLC/SonicS2Cues.asm"
000318AA                            ;	even
000318AA                            SonicDynPLC:
000318AA                            	include "_inc\Sonic dynamic pattern load cues.asm"
000318AA                            ; --------------------------------------------------------------------------------
000318AA                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
000318AA                            
000318AA                            SME_kbS1m:	
000318AA 0000 0000                  		dc.w SME_kbS1m_1B4-SME_kbS1m, SME_kbS1m_1B5-SME_kbS1m	
000318AE 0000 0000                  		dc.w SME_kbS1m_1BC-SME_kbS1m, SME_kbS1m_1C3-SME_kbS1m	
000318B2 0000 0000                  		dc.w SME_kbS1m_1CA-SME_kbS1m, SME_kbS1m_1CF-SME_kbS1m	
000318B6 0000 0000                  		dc.w SME_kbS1m_1D6-SME_kbS1m, SME_kbS1m_1DD-SME_kbS1m	
000318BA 0000 0000                  		dc.w SME_kbS1m_1E4-SME_kbS1m, SME_kbS1m_1E9-SME_kbS1m	
000318BE 0000 0000                  		dc.w SME_kbS1m_1F2-SME_kbS1m, SME_kbS1m_1FB-SME_kbS1m	
000318C2 0000 0000                  		dc.w SME_kbS1m_204-SME_kbS1m, SME_kbS1m_20D-SME_kbS1m	
000318C6 0000 0000                  		dc.w SME_kbS1m_216-SME_kbS1m, SME_kbS1m_21F-SME_kbS1m	
000318CA 0000 0000                  		dc.w SME_kbS1m_228-SME_kbS1m, SME_kbS1m_231-SME_kbS1m	
000318CE 0000 0000                  		dc.w SME_kbS1m_238-SME_kbS1m, SME_kbS1m_23F-SME_kbS1m	
000318D2 0000 0000                  		dc.w SME_kbS1m_246-SME_kbS1m, SME_kbS1m_24B-SME_kbS1m	
000318D6 0000 0000                  		dc.w SME_kbS1m_252-SME_kbS1m, SME_kbS1m_25B-SME_kbS1m	
000318DA 0000 0000                  		dc.w SME_kbS1m_262-SME_kbS1m, SME_kbS1m_267-SME_kbS1m	
000318DE 0000 0000                  		dc.w SME_kbS1m_270-SME_kbS1m, SME_kbS1m_279-SME_kbS1m	
000318E2 0000 0000                  		dc.w SME_kbS1m_282-SME_kbS1m, SME_kbS1m_28B-SME_kbS1m	
000318E6 0000 0000                  		dc.w SME_kbS1m_294-SME_kbS1m, SME_kbS1m_29D-SME_kbS1m	
000318EA 0000 0000                  		dc.w SME_kbS1m_2A6-SME_kbS1m, SME_kbS1m_2AF-SME_kbS1m	
000318EE 0000 0000                  		dc.w SME_kbS1m_2B4-SME_kbS1m, SME_kbS1m_2B9-SME_kbS1m	
000318F2 0000 0000                  		dc.w SME_kbS1m_2BE-SME_kbS1m, SME_kbS1m_2C3-SME_kbS1m	
000318F6 0000 0000                  		dc.w SME_kbS1m_2CC-SME_kbS1m, SME_kbS1m_2D1-SME_kbS1m	
000318FA 0000 0000                  		dc.w SME_kbS1m_2DA-SME_kbS1m, SME_kbS1m_2DF-SME_kbS1m	
000318FE 0000 0000                  		dc.w SME_kbS1m_2E4-SME_kbS1m, SME_kbS1m_2E9-SME_kbS1m	
00031902 0000 0000                  		dc.w SME_kbS1m_2EE-SME_kbS1m, SME_kbS1m_2F3-SME_kbS1m	
00031906 0000 0000                  		dc.w SME_kbS1m_2FA-SME_kbS1m, SME_kbS1m_2FF-SME_kbS1m	
0003190A 0000 0000                  		dc.w SME_kbS1m_306-SME_kbS1m, SME_kbS1m_30B-SME_kbS1m	
0003190E 0000 0000                  		dc.w SME_kbS1m_312-SME_kbS1m, SME_kbS1m_31B-SME_kbS1m	
00031912 0000 0000                  		dc.w SME_kbS1m_324-SME_kbS1m, SME_kbS1m_32D-SME_kbS1m	
00031916 0000 0000                  		dc.w SME_kbS1m_336-SME_kbS1m, SME_kbS1m_33D-SME_kbS1m	
0003191A 0000 0000                  		dc.w SME_kbS1m_342-SME_kbS1m, SME_kbS1m_347-SME_kbS1m	
0003191E 0000 0000                  		dc.w SME_kbS1m_34E-SME_kbS1m, SME_kbS1m_357-SME_kbS1m	
00031922 0000 0000                  		dc.w SME_kbS1m_35C-SME_kbS1m, SME_kbS1m_361-SME_kbS1m	
00031926 0000 0000                  		dc.w SME_kbS1m_368-SME_kbS1m, SME_kbS1m_36B-SME_kbS1m	
0003192A 0000 0000                  		dc.w SME_kbS1m_372-SME_kbS1m, SME_kbS1m_37B-SME_kbS1m	
0003192E 0000 0000                  		dc.w SME_kbS1m_384-SME_kbS1m, SME_kbS1m_38D-SME_kbS1m	
00031932 0000 0000                  		dc.w SME_kbS1m_392-SME_kbS1m, SME_kbS1m_395-SME_kbS1m	
00031936 0000 0000                  		dc.w SME_kbS1m_39A-SME_kbS1m, SME_kbS1m_39D-SME_kbS1m	
0003193A 0000 0000                  		dc.w SME_kbS1m_3A2-SME_kbS1m, SME_kbS1m_3A9-SME_kbS1m	
0003193E 0000 0000                  		dc.w SME_kbS1m_3B2-SME_kbS1m, SME_kbS1m_3BB-SME_kbS1m	
00031942 0000 0000                  		dc.w SME_kbS1m_3C2-SME_kbS1m, SME_kbS1m_3C9-SME_kbS1m	
00031946 0000 0000                  		dc.w SME_kbS1m_3D0-SME_kbS1m, SME_kbS1m_3D3-SME_kbS1m	
0003194A 0000 0000                  		dc.w SME_kbS1m_3DC-SME_kbS1m, SME_kbS1m_3E5-SME_kbS1m	
0003194E 0000 0000                  		dc.w SME_kbS1m_3EA-SME_kbS1m, SME_kbS1m_3F1-SME_kbS1m	
00031952 0000 0000                  		dc.w SME_kbS1m_3F8-SME_kbS1m, SME_kbS1m_3FD-SME_kbS1m	
00031956 0000 0000                  		dc.w SME_kbS1m_406-SME_kbS1m, SME_kbS1m_40D-SME_kbS1m	
0003195A 0000 0000                  		dc.w SME_kbS1m_412-SME_kbS1m, SME_kbS1m_417-SME_kbS1m	
0003195E 0000 0000                  		dc.w SME_kbS1m_420-SME_kbS1m, SME_kbS1m_427-SME_kbS1m	
00031962 0000 0000                  		dc.w SME_kbS1m_42C-SME_kbS1m, SME_kbS1m_433-SME_kbS1m	
00031966 0000 0000                  		dc.w SME_kbS1m_436-SME_kbS1m, SME_kbS1m_43B-SME_kbS1m	
0003196A 0000 0000                  		dc.w SME_kbS1m_442-SME_kbS1m, SME_kbS1m_445-SME_kbS1m	
0003196E 0000 0000                  		dc.w SME_kbS1m_44A-SME_kbS1m, SME_kbS1m_44F-SME_kbS1m	
00031972 0000 0000                  		dc.w SME_kbS1m_456-SME_kbS1m, SME_kbS1m_459-SME_kbS1m	
00031976 0000 0000                  		dc.w SME_kbS1m_45E-SME_kbS1m, SME_kbS1m_465-SME_kbS1m	
0003197A 0000 0000                  		dc.w SME_kbS1m_468-SME_kbS1m, SME_kbS1m_46D-SME_kbS1m	
0003197E 0000 0000                  		dc.w SME_kbS1m_472-SME_kbS1m, SME_kbS1m_47B-SME_kbS1m	
00031982 0000 0000                  		dc.w SME_kbS1m_482-SME_kbS1m, SME_kbS1m_489-SME_kbS1m	
00031986 0000 0000                  		dc.w SME_kbS1m_48E-SME_kbS1m, SME_kbS1m_495-SME_kbS1m	
0003198A 0000 0000                  		dc.w SME_kbS1m_49C-SME_kbS1m, SME_kbS1m_4A3-SME_kbS1m	
0003198E 0000 0000                  		dc.w SME_kbS1m_4A8-SME_kbS1m, SME_kbS1m_4B1-SME_kbS1m	
00031992 0000 0000                  		dc.w SME_kbS1m_4B8-SME_kbS1m, SME_kbS1m_4BF-SME_kbS1m	
00031996 0000 0000                  		dc.w SME_kbS1m_4C4-SME_kbS1m, SME_kbS1m_4CB-SME_kbS1m	
0003199A 0000 0000                  		dc.w SME_kbS1m_4CE-SME_kbS1m, SME_kbS1m_4D7-SME_kbS1m	
0003199E 0000 0000                  		dc.w SME_kbS1m_4E0-SME_kbS1m, SME_kbS1m_4E7-SME_kbS1m	
000319A2 0000 0000                  		dc.w SME_kbS1m_4F0-SME_kbS1m, SME_kbS1m_4F9-SME_kbS1m	
000319A6 0000 0000                  		dc.w SME_kbS1m_502-SME_kbS1m, SME_kbS1m_509-SME_kbS1m	
000319AA 0000 0000                  		dc.w SME_kbS1m_512-SME_kbS1m, SME_kbS1m_51B-SME_kbS1m	
000319AE 0000 0000                  		dc.w SME_kbS1m_524-SME_kbS1m, SME_kbS1m_52B-SME_kbS1m	
000319B2 0000 0000                  		dc.w SME_kbS1m_534-SME_kbS1m, SME_kbS1m_53B-SME_kbS1m	
000319B6 0000 0000                  		dc.w SME_kbS1m_540-SME_kbS1m, SME_kbS1m_547-SME_kbS1m	
000319BA 0000 0000                  		dc.w SME_kbS1m_54C-SME_kbS1m, SME_kbS1m_551-SME_kbS1m	
000319BE 0000 0000                  		dc.w SME_kbS1m_556-SME_kbS1m, SME_kbS1m_55B-SME_kbS1m	
000319C2 0000 0000                  		dc.w SME_kbS1m_560-SME_kbS1m, SME_kbS1m_567-SME_kbS1m	
000319C6 0000 0000                  		dc.w SME_kbS1m_56E-SME_kbS1m, SME_kbS1m_573-SME_kbS1m	
000319CA 0000 0000                  		dc.w SME_kbS1m_57A-SME_kbS1m, SME_kbS1m_583-SME_kbS1m	
000319CE 0000 0000                  		dc.w SME_kbS1m_58C-SME_kbS1m, SME_kbS1m_595-SME_kbS1m	
000319D2 0000 0000                  		dc.w SME_kbS1m_59A-SME_kbS1m, SME_kbS1m_5A5-SME_kbS1m	
000319D6 0000 0000                  		dc.w SME_kbS1m_5B0-SME_kbS1m, SME_kbS1m_5B3-SME_kbS1m	
000319DA 0000 0000                  		dc.w SME_kbS1m_5B6-SME_kbS1m, SME_kbS1m_5B9-SME_kbS1m	
000319DE 0000 0000                  		dc.w SME_kbS1m_5BC-SME_kbS1m, SME_kbS1m_5BF-SME_kbS1m	
000319E2 0000 0000                  		dc.w SME_kbS1m_5C4-SME_kbS1m, SME_kbS1m_5C9-SME_kbS1m	
000319E6 0000 0000                  		dc.w SME_kbS1m_5D2-SME_kbS1m, SME_kbS1m_5DB-SME_kbS1m	
000319EA 0000 0000                  		dc.w SME_kbS1m_5E4-SME_kbS1m, SME_kbS1m_5EB-SME_kbS1m	
000319EE 0000 0000                  		dc.w SME_kbS1m_5F2-SME_kbS1m, SME_kbS1m_5FB-SME_kbS1m	
000319F2 0000 0000                  		dc.w SME_kbS1m_602-SME_kbS1m, SME_kbS1m_60B-SME_kbS1m	
000319F6 0000 0000                  		dc.w SME_kbS1m_612-SME_kbS1m, SME_kbS1m_61B-SME_kbS1m	
000319FA 0000 0000                  		dc.w SME_kbS1m_622-SME_kbS1m, SME_kbS1m_629-SME_kbS1m	
000319FE 0000 0000                  		dc.w SME_kbS1m_630-SME_kbS1m, SME_kbS1m_637-SME_kbS1m	
00031A02 0000 0000                  		dc.w SME_kbS1m_63E-SME_kbS1m, SME_kbS1m_647-SME_kbS1m	
00031A06 0000 0000                  		dc.w SME_kbS1m_650-SME_kbS1m, SME_kbS1m_659-SME_kbS1m	
00031A0A 0000 0000                  		dc.w SME_kbS1m_662-SME_kbS1m, SME_kbS1m_667-SME_kbS1m	
00031A0E 0000 0000                  		dc.w SME_kbS1m_66E-SME_kbS1m, SME_kbS1m_675-SME_kbS1m	
00031A12 0000 0000                  		dc.w SME_kbS1m_67C-SME_kbS1m, SME_kbS1m_683-SME_kbS1m	
00031A16 0000 0000                  		dc.w SME_kbS1m_68A-SME_kbS1m, SME_kbS1m_691-SME_kbS1m	
00031A1A 0000 0000                  		dc.w SME_kbS1m_698-SME_kbS1m, SME_kbS1m_69F-SME_kbS1m	
00031A1E 0000 0000                  		dc.w SME_kbS1m_6A6-SME_kbS1m, SME_kbS1m_6AF-SME_kbS1m	
00031A22 0000 0000                  		dc.w SME_kbS1m_6B6-SME_kbS1m, SME_kbS1m_6BF-SME_kbS1m	
00031A26 0000 0000                  		dc.w SME_kbS1m_6C8-SME_kbS1m, SME_kbS1m_6D1-SME_kbS1m	
00031A2A 0000 0000                  		dc.w SME_kbS1m_6DA-SME_kbS1m, SME_kbS1m_6E3-SME_kbS1m	
00031A2E 0000 0000                  		dc.w SME_kbS1m_6E8-SME_kbS1m, SME_kbS1m_6F1-SME_kbS1m	
00031A32 0000 0000                  		dc.w SME_kbS1m_6FA-SME_kbS1m, SME_kbS1m_703-SME_kbS1m	
00031A36 0000 0000                  		dc.w SME_kbS1m_70A-SME_kbS1m, SME_kbS1m_713-SME_kbS1m	
00031A3A 0000 0000                  		dc.w SME_kbS1m_71C-SME_kbS1m, SME_kbS1m_723-SME_kbS1m	
00031A3E 0000 0000                  		dc.w SME_kbS1m_72A-SME_kbS1m, SME_kbS1m_72F-SME_kbS1m	
00031A42 0000 0000                  		dc.w SME_kbS1m_736-SME_kbS1m, SME_kbS1m_73D-SME_kbS1m	
00031A46 0000 0000                  		dc.w SME_kbS1m_742-SME_kbS1m, SME_kbS1m_747-SME_kbS1m	
00031A4A 0000 0000                  		dc.w SME_kbS1m_74C-SME_kbS1m, SME_kbS1m_753-SME_kbS1m	
00031A4E 0000 0000                  		dc.w SME_kbS1m_75A-SME_kbS1m, SME_kbS1m_75D-SME_kbS1m	
00031A52 0000 0000                  		dc.w SME_kbS1m_764-SME_kbS1m, SME_kbS1m_769-SME_kbS1m	
00031A56 0000 0000                  		dc.w SME_kbS1m_770-SME_kbS1m, SME_kbS1m_777-SME_kbS1m	
00031A5A 0000 0000                  		dc.w SME_kbS1m_77E-SME_kbS1m, SME_kbS1m_785-SME_kbS1m	
00031A5E 00                         SME_kbS1m_1B4:	dc.b 0	
00031A5F 0370 0050 0880 0E          SME_kbS1m_1B5:	dc.b 3, $70, 0, $50, 8, $80, $E	
00031A66 03B0 1710 2370 00          SME_kbS1m_1BC:	dc.b 3, $B0, $17, $10, $23, $70, 0	
00031A6D 0380 2530 2E20 32          SME_kbS1m_1C3:	dc.b 3, $80, $25, $30, $2E, $20, $32	
00031A74 02B0 3550 41               SME_kbS1m_1CA:	dc.b 2, $B0, $35, $50, $41	
00031A79 03B0 4710 5350 41          SME_kbS1m_1CF:	dc.b 3, $B0, $47, $10, $53, $50, $41	
00031A80 03B0 5510 6150 41          SME_kbS1m_1D6:	dc.b 3, $B0, $55, $10, $61, $50, $41	
00031A87 0380 6330 2E20 32          SME_kbS1m_1DD:	dc.b 3, $80, $63, $30, $2E, $20, $32	
00031A8E 0280 6C70 00               SME_kbS1m_1E4:	dc.b 2, $80, $6C, $70, 0	
00031A93 04B0 AF70 BB00 C330 C4     SME_kbS1m_1E9:	dc.b 4, $B0, $AF, $70, $BB, 0, $C3, $30, $C4	
00031A9C 04B0 C870 D410 DC10 DE     SME_kbS1m_1F2:	dc.b 4, $B0, $C8, $70, $D4, $10, $DC, $10, $DE	
00031AA5 0480 E010 E930 EB30 EF     SME_kbS1m_1FB:	dc.b 4, $80, $E0, $10, $E9, $30, $EB, $30, $EF	
00031AAE 04B0 F370 FF11 0701 09     SME_kbS1m_204:	dc.b 4, $B0, $F3, $70, $FF, $11, 7, 1, 9	
00031AB7 04B1 0A71 1611 1E51 20     SME_kbS1m_20D:	dc.b 4, $B1, $A, $71, $16, $11, $1E, $51, $20	
00031AC0 04F1 2651 3621 3C31 3F     SME_kbS1m_216:	dc.b 4, $F1, $26, $51, $36, $21, $3C, $31, $3F	
00031AC9 0481 4371 4C11 5401 56     SME_kbS1m_21F:	dc.b 4, $81, $43, $71, $4C, $11, $54, 1, $56	
00031AD2 0481 5721 6031 6331 67     SME_kbS1m_228:	dc.b 4, $81, $57, $21, $60, $31, $63, $31, $67	
00031ADB 0351 EF81 F571 FE          SME_kbS1m_231:	dc.b 3, $51, $EF, $81, $F5, $71, $FE	
00031AE2 03B2 0612 1272 14          SME_kbS1m_238:	dc.b 3, $B2, 6, $12, $12, $72, $14	
00031AE9 0382 1C52 2502 2B          SME_kbS1m_23F:	dc.b 3, $82, $1C, $52, $25, 2, $2B	
00031AF0 02B2 2C72 38               SME_kbS1m_246:	dc.b 2, $B2, $2C, $72, $38	
00031AF5 0312 40B2 4272 38          SME_kbS1m_24B:	dc.b 3, $12, $40, $B2, $42, $72, $38	
00031AFC 0412 4EB2 5052 5C02 62     SME_kbS1m_252:	dc.b 4, $12, $4E, $B2, $50, $52, $5C, 2, $62	
00031B05 0382 6352 2502 2B          SME_kbS1m_25B:	dc.b 3, $82, $63, $52, $25, 2, $2B	
00031B0C 0282 6C71 FE               SME_kbS1m_262:	dc.b 2, $82, $6C, $71, $FE	
00031B11 04B2 E352 EF32 F522 F9     SME_kbS1m_267:	dc.b 4, $B2, $E3, $52, $EF, $32, $F5, $22, $F9	
00031B1A 04B2 FC13 0833 0A53 0E     SME_kbS1m_270:	dc.b 4, $B2, $FC, $13, 8, $33, $A, $53, $E	
00031B23 0483 1433 1D33 2113 25     SME_kbS1m_279:	dc.b 4, $83, $14, $33, $1D, $33, $21, $13, $25	
00031B2C 04B3 2733 3333 3723 3B     SME_kbS1m_282:	dc.b 4, $B3, $27, $33, $33, $33, $37, $23, $3B	
00031B35 04B3 3E53 4A73 5003 58     SME_kbS1m_28B:	dc.b 4, $B3, $3E, $53, $4A, $73, $50, 3, $58	
00031B3E 04F3 5923 6913 6C73 6E     SME_kbS1m_294:	dc.b 4, $F3, $59, $23, $69, $13, $6C, $73, $6E	
00031B47 0483 7633 7F33 8323 87     SME_kbS1m_29D:	dc.b 4, $83, $76, $33, $7F, $33, $83, $23, $87	
00031B50 0483 8A33 9333 9723 9B     SME_kbS1m_2A6:	dc.b 4, $83, $8A, $33, $93, $33, $97, $23, $9B	
00031B59 0224 21F4 24               SME_kbS1m_2AF:	dc.b 2, $24, $21, $F4, $24	
00031B5E 0224 34F4 37               SME_kbS1m_2B4:	dc.b 2, $24, $34, $F4, $37	
00031B63 0224 21F4 47               SME_kbS1m_2B9:	dc.b 2, $24, $21, $F4, $47	
00031B68 0224 34F4 57               SME_kbS1m_2BE:	dc.b 2, $24, $34, $F4, $57	
00031B6D 04B4 8B04 9734 9824 9C     SME_kbS1m_2C3:	dc.b 4, $B4, $8B, 4, $97, $34, $98, $24, $9C	
00031B76 0224 9FF4 A2               SME_kbS1m_2CC:	dc.b 2, $24, $9F, $F4, $A2	
00031B7B 04B4 B204 BE34 BF24 C3     SME_kbS1m_2D1:	dc.b 4, $B4, $B2, 4, $BE, $34, $BF, $24, $C3	
00031B84 0224 9FF4 C6               SME_kbS1m_2DA:	dc.b 2, $24, $9F, $F4, $C6	
00031B89 0225 04F5 07               SME_kbS1m_2DF:	dc.b 2, $25, 4, $F5, 7	
00031B8E 0225 17F5 1A               SME_kbS1m_2E4:	dc.b 2, $25, $17, $F5, $1A	
00031B93 0225 04F5 2A               SME_kbS1m_2E9:	dc.b 2, $25, 4, $F5, $2A	
00031B98 0225 17F5 3A               SME_kbS1m_2EE:	dc.b 2, $25, $17, $F5, $3A	
00031B9D 0315 70B5 7255 7E          SME_kbS1m_2F3:	dc.b 3, $15, $70, $B5, $72, $55, $7E	
00031BA4 0225 84F5 87               SME_kbS1m_2FA:	dc.b 2, $25, $84, $F5, $87	
00031BA9 0315 97B5 9955 A5          SME_kbS1m_2FF:	dc.b 3, $15, $97, $B5, $99, $55, $A5	
00031BB0 0225 84F5 AB               SME_kbS1m_306:	dc.b 2, $25, $84, $F5, $AB	
00031BB5 0325 E6B5 E925 F5          SME_kbS1m_30B:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
00031BBC 0455 F835 FE26 0216 05     SME_kbS1m_312:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
00031BC5 0416 0726 0936 0C16 10     SME_kbS1m_31B:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00031BCE 0426 1236 1526 1936 1C     SME_kbS1m_324:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
00031BD7 0416 2026 2236 2526 29     SME_kbS1m_32D:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
00031BE0 0316 2C76 2E56 36          SME_kbS1m_336:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
00031BE7 02F6 3C26 4C               SME_kbS1m_33D:	dc.b 2, $F6, $3C, $26, $4C	
00031BEC 02B6 4F06 5B               SME_kbS1m_342:	dc.b 2, $B6, $4F, 6, $5B	
00031BF1 0316 5C76 5E26 66          SME_kbS1m_347:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
00031BF8 0426 6936 6C26 7016 73     SME_kbS1m_34E:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
00031C01 0286 7536 7E               SME_kbS1m_357:	dc.b 2, $86, $75, $36, $7E	
00031C06 02B6 8226 8E               SME_kbS1m_35C:	dc.b 2, $B6, $82, $26, $8E	
00031C0B 0306 91B6 9226 9E          SME_kbS1m_361:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
00031C12 01B6 A1                    SME_kbS1m_368:	dc.b 1, $B6, $A1	
00031C15 0326 AD76 B016 B8          SME_kbS1m_36B:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
00031C1C 0426 BA36 BD26 C116 C4     SME_kbS1m_372:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
00031C25 0456 C636 CC26 D016 D3     SME_kbS1m_37B:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
00031C2E 0456 D526 DB36 DE26 E2     SME_kbS1m_384:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
00031C37 02B6 E526 F1               SME_kbS1m_38D:	dc.b 2, $B6, $E5, $26, $F1	
00031C3C 01B6 F4                    SME_kbS1m_392:	dc.b 1, $B6, $F4	
00031C3F 0277 0027 08               SME_kbS1m_395:	dc.b 2, $77, 0, $27, 8	
00031C44 01B7 0B                    SME_kbS1m_39A:	dc.b 1, $B7, $B	
00031C47 0217 17B7 19               SME_kbS1m_39D:	dc.b 2, $17, $17, $B7, $19	
00031C4C 0327 2577 2857 30          SME_kbS1m_3A2:	dc.b 3, $27, $25, $77, $28, $57, $30	
00031C53 0487 3637 3F37 4327 47     SME_kbS1m_3A9:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
00031C5C 0427 4A77 4D27 5537 58     SME_kbS1m_3B2:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
00031C65 0357 5C37 6227 66          SME_kbS1m_3BB:	dc.b 3, $57, $5C, $37, $62, $27, $66	
00031C6C 0327 6977 6C27 74          SME_kbS1m_3C2:	dc.b 3, $27, $69, $77, $6C, $27, $74	
00031C73 0317 7777 7917 81          SME_kbS1m_3C9:	dc.b 3, $17, $77, $77, $79, $17, $81	
00031C7A 01F7 83                    SME_kbS1m_3D0:	dc.b 1, $F7, $83	
00031C7D 0407 9377 9407 9C77 9D     SME_kbS1m_3D3:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
00031C86 0417 A527 A787 AA37 B3     SME_kbS1m_3DC:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
00031C8F 0217 B7B7 B9               SME_kbS1m_3E5:	dc.b 2, $17, $B7, $B7, $B9	
00031C94 0317 C577 C717 CF          SME_kbS1m_3EA:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
00031C9B 0307 D187 D217 DB          SME_kbS1m_3F1:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
00031CA2 02F7 DD07 ED               SME_kbS1m_3F8:	dc.b 2, $F7, $DD, 7, $ED	
00031CA7 0428 0078 0328 0B28 0E     SME_kbS1m_3FD:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
00031CB0 0328 1178 1458 1C          SME_kbS1m_406:	dc.b 3, $28, $11, $78, $14, $58, $1C	
00031CB7 02B8 2238 2E               SME_kbS1m_40D:	dc.b 2, $B8, $22, $38, $2E	
00031CBC 02B8 3228 3E               SME_kbS1m_412:	dc.b 2, $B8, $32, $28, $3E	
00031CC1 0428 4138 4428 4878 4B     SME_kbS1m_417:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
00031CCA 0388 5338 5C28 60          SME_kbS1m_420:	dc.b 3, $88, $53, $38, $5C, $28, $60	
00031CD1 02B8 6328 6F               SME_kbS1m_427:	dc.b 2, $B8, $63, $28, $6F	
00031CD6 0388 7258 7B08 81          SME_kbS1m_42C:	dc.b 3, $88, $72, $58, $7B, 8, $81	
00031CDD 01B8 82                    SME_kbS1m_433:	dc.b 1, $B8, $82	
00031CE0 02B8 8E28 9A               SME_kbS1m_436:	dc.b 2, $B8, $8E, $28, $9A	
00031CE5 0338 9DB8 A108 AD          SME_kbS1m_43B:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
00031CEC 01B8 AE                    SME_kbS1m_442:	dc.b 1, $B8, $AE	
00031CEF 0208 BAB8 BB               SME_kbS1m_445:	dc.b 2, 8, $BA, $B8, $BB	
00031CF4 0288 C758 D0               SME_kbS1m_44A:	dc.b 2, $88, $C7, $58, $D0	
00031CF9 0388 D638 DF28 E3          SME_kbS1m_44F:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
00031D00 01B8 E6                    SME_kbS1m_456:	dc.b 1, $B8, $E6	
00031D03 02B8 F228 FE               SME_kbS1m_459:	dc.b 2, $B8, $F2, $28, $FE	
00031D08 0329 0119 04B9 06          SME_kbS1m_45E:	dc.b 3, $29, 1, $19, 4, $B9, 6	
00031D0F 01B9 12                    SME_kbS1m_465:	dc.b 1, $B9, $12	
00031D12 0209 1EB9 1F               SME_kbS1m_468:	dc.b 2, 9, $1E, $B9, $1F	
00031D17 02B9 2B29 37               SME_kbS1m_46D:	dc.b 2, $B9, $2B, $29, $37	
00031D1C 0419 3A39 3C59 4019 46     SME_kbS1m_472:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
00031D25 0309 4879 4929 51          SME_kbS1m_47B:	dc.b 3, 9, $48, $79, $49, $29, $51	
00031D2C 0309 5479 5529 5D          SME_kbS1m_482:	dc.b 3, 9, $54, $79, $55, $29, $5D	
00031D33 0259 60B9 66               SME_kbS1m_489:	dc.b 2, $59, $60, $B9, $66	
00031D38 0309 7289 7339 7C          SME_kbS1m_48E:	dc.b 3, 9, $72, $89, $73, $39, $7C	
00031D3F 0319 8059 8239 88          SME_kbS1m_495:	dc.b 3, $19, $80, $59, $82, $39, $88	
00031D46 0359 8C39 9219 96          SME_kbS1m_49C:	dc.b 3, $59, $8C, $39, $92, $19, $96	
00031D4D 0209 98B9 99               SME_kbS1m_4A3:	dc.b 2, 9, $98, $B9, $99	
00031D52 0419 A509 A709 A8B9 A9     SME_kbS1m_4A8:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
00031D5B 0319 B5B9 B729 C3          SME_kbS1m_4B1:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
00031D62 0319 C679 C829 D0          SME_kbS1m_4B8:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
00031D69 0209 D389 D4               SME_kbS1m_4BF:	dc.b 2, 9, $D3, $89, $D4	
00031D6E 0329 DD79 E029 E8          SME_kbS1m_4C4:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
00031D75 01B9 EB                    SME_kbS1m_4CB:	dc.b 1, $B9, $EB	
00031D78 0439 F729 FB79 FE7A 06     SME_kbS1m_4CE:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00031D81 041A 0EBA 105A 1C2A 22     SME_kbS1m_4D7:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00031D8A 032A 25BA 287A 34          SME_kbS1m_4E0:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00031D91 042A 3C1A 3F1A 41FA 43     SME_kbS1m_4E7:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00031D9A 0439 F729 FB79 FE7A 06     SME_kbS1m_4F0:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00031DA3 041A 0EBA 105A 1C2A 22     SME_kbS1m_4F9:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00031DAC 032A 25BA 287A 34          SME_kbS1m_502:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00031DB3 042A 3C1A 3F1A 41FA 43     SME_kbS1m_509:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00031DBC 04BA 530A 5F1A 605A 62     SME_kbS1m_512:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
00031DC5 043A 687A 6C3A 742A 78     SME_kbS1m_51B:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
00031DCE 032A 7B3A 7EBA 82          SME_kbS1m_524:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
00031DD5 040A 8E7A 8F2A 975A 9A     SME_kbS1m_52B:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
00031DDE 03BA A05A AC1A B2          SME_kbS1m_534:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
00031DE5 02BA B45A C0               SME_kbS1m_53B:	dc.b 2, $BA, $B4, $5A, $C0	
00031DEA 032A C67A C92A D1          SME_kbS1m_540:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
00031DF1 02BA D42A E0               SME_kbS1m_547:	dc.b 2, $BA, $D4, $2A, $E0	
00031DF6 02BA E32A E0               SME_kbS1m_54C:	dc.b 2, $BA, $E3, $2A, $E0	
00031DFB 02BA EF2A E0               SME_kbS1m_551:	dc.b 2, $BA, $EF, $2A, $E0	
00031E00 02BA FB2A E0               SME_kbS1m_556:	dc.b 2, $BA, $FB, $2A, $E0	
00031E05 02BB 072A E0               SME_kbS1m_55B:	dc.b 2, $BB, 7, $2A, $E0	
00031E0A 03BB 132B 1F2B 22          SME_kbS1m_560:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00031E11 03BB 252B 1F2B 22          SME_kbS1m_567:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00031E18 02B7 EF37 FB               SME_kbS1m_56E:	dc.b 2, $B7, $EF, $37, $FB	
00031E1D 033B 313B 358B 39          SME_kbS1m_573:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
00031E24 045B 423B 482B 4C5B 4F     SME_kbS1m_57A:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
00031E2D 045B 553B 5B2B 5F7B 62     SME_kbS1m_583:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
00031E36 042B 6ABB 6D0B 791B 7A     SME_kbS1m_58C:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
00031E3F 022B 6ABB 7C               SME_kbS1m_595:	dc.b 2, $2B, $6A, $BB, $7C	
00031E44 057B 881B 935B 953B 9B2B+  SME_kbS1m_59A:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00031E4F 052B 901B 935B 953B 9B2B+  SME_kbS1m_5A5:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00031E5A 01FB A2                    SME_kbS1m_5B0:	dc.b 1, $FB, $A2	
00031E5D 01FB B2                    SME_kbS1m_5B3:	dc.b 1, $FB, $B2	
00031E60 01FB C2                    SME_kbS1m_5B6:	dc.b 1, $FB, $C2	
00031E63 01FB D2                    SME_kbS1m_5B9:	dc.b 1, $FB, $D2	
00031E66 01FB E2                    SME_kbS1m_5BC:	dc.b 1, $FB, $E2	
00031E69 020B F2BB F3               SME_kbS1m_5BF:	dc.b 2, $B, $F2, $BB, $F3	
00031E6E 020B FFBC 00               SME_kbS1m_5C4:	dc.b 2, $B, $FF, $BC, 0	
00031E73 048C 0C1C 153C 172C 1B     SME_kbS1m_5C9:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
00031E7C 048C 0C1C 1E3C 202C 24     SME_kbS1m_5D2:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
00031E85 042C 277C 2A2C 321C 35     SME_kbS1m_5DB:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
00031E8E 032C 37BC 3A2C 46          SME_kbS1m_5E4:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
00031E95 037C 490C 518C 52          SME_kbS1m_5EB:	dc.b 3, $7C, $49, $C, $51, $8C, $52	
00031E9C 040C 5BBC 5C0C 685C 69     SME_kbS1m_5F2:	dc.b 4, $C, $5B, $BC, $5C, $C, $68, $5C, $69	
00031EA5 030C 6FFC 702C 80          SME_kbS1m_5FB:	dc.b 3, $C, $6F, $FC, $70, $2C, $80	
00031EAC 042C 83BC 861C 922C 94     SME_kbS1m_602:	dc.b 4, $2C, $83, $BC, $86, $1C, $92, $2C, $94	
00031EB5 03FC 970C A72C A8          SME_kbS1m_60B:	dc.b 3, $FC, $97, $C, $A7, $2C, $A8	
00031EBC 042C 83BC AB1C B72C B9     SME_kbS1m_612:	dc.b 4, $2C, $83, $BC, $AB, $1C, $B7, $2C, $B9	
00031EC5 032C BCFC BF0C CF          SME_kbS1m_61B:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
00031ECC 032C D0FC D30C CF          SME_kbS1m_622:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
00031ED3 031C E3FC E50C CF          SME_kbS1m_629:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
00031EDA 03BC F50D 015D 02          SME_kbS1m_630:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
00031EE1 03BD 080D 145D 15          SME_kbS1m_637:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
00031EE8 04FD 1B0D 2B1D 2C1D 2E     SME_kbS1m_63E:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
00031EF1 042D 307D 331D 3B2D 3D     SME_kbS1m_647:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
00031EFA 042D 307D 401D 3B2D 3D     SME_kbS1m_650:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
00031F03 042D 483D 4B7D 4F2D 3D     SME_kbS1m_659:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
00031F0C 027D 768D 7E               SME_kbS1m_662:	dc.b 2, $7D, $76, $8D, $7E	
00031F11 032D 877D 8A5D 92          SME_kbS1m_667:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
00031F18 032D 877D 985D 92          SME_kbS1m_66E:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
00031F1F 032D 877D A05D 92          SME_kbS1m_675:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
00031F26 03BD A82D B43D B7          SME_kbS1m_67C:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
00031F2D 03BD BB2D C73D CA          SME_kbS1m_683:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
00031F34 031D CE8D D03D D9          SME_kbS1m_68A:	dc.b 3, $1D, $CE, $8D, $D0, $3D, $D9	
00031F3B 031D CE8D DD1D E6          SME_kbS1m_691:	dc.b 3, $1D, $CE, $8D, $DD, $1D, $E6	
00031F42 031D CE5D E87D EE          SME_kbS1m_698:	dc.b 3, $1D, $CE, $5D, $E8, $7D, $EE	
00031F49 031D CE8D F61D FF          SME_kbS1m_69F:	dc.b 3, $1D, $CE, $8D, $F6, $1D, $FF	
00031F50 048E 0128 113E 0A08 15     SME_kbS1m_6A6:	dc.b 4, $8E, 1, $28, $11, $3E, $A, 8, $15	
00031F59 032E 0E7E 115E 19          SME_kbS1m_6AF:	dc.b 3, $2E, $E, $7E, $11, $5E, $19	
00031F60 042E 1F7E 222E 2A2E 2D     SME_kbS1m_6B6:	dc.b 4, $2E, $1F, $7E, $22, $2E, $2A, $2E, $2D	
00031F69 042D 877E 302E 2A2E 2D     SME_kbS1m_6BF:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $2D	
00031F72 042D 877E 302E 2A2E 38     SME_kbS1m_6C8:	dc.b 4, $2D, $87, $7E, $30, $2E, $2A, $2E, $38	
00031F7B 042D 877E 3B2E 2A2E 2D     SME_kbS1m_6D1:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $2D	
00031F84 042D 877E 3B2E 2A2E 38     SME_kbS1m_6DA:	dc.b 4, $2D, $87, $7E, $3B, $2E, $2A, $2E, $38	
00031F8D 02BE 433E 4F               SME_kbS1m_6E3:	dc.b 2, $BE, $43, $3E, $4F	
00031F92 042E 537E 562E 5E3E 4F     SME_kbS1m_6E8:	dc.b 4, $2E, $53, $7E, $56, $2E, $5E, $3E, $4F	
00031F9B 042E 617E 642E 6C2E 6F     SME_kbS1m_6F1:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
00031FA4 042E 723E 753E 795E 7D     SME_kbS1m_6FA:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
00031FAD 03BE 832E 8F2E 6F          SME_kbS1m_703:	dc.b 3, $BE, $83, $2E, $8F, $2E, $6F	
00031FB4 042E 927E 952E 9D2E A0     SME_kbS1m_70A:	dc.b 4, $2E, $92, $7E, $95, $2E, $9D, $2E, $A0	
00031FBD 042E A33E A65E AA2E 6F     SME_kbS1m_713:	dc.b 4, $2E, $A3, $3E, $A6, $5E, $AA, $2E, $6F	
00031FC6 038E B01E B92E BB          SME_kbS1m_71C:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00031FCD 035E BE3E C40E C8          SME_kbS1m_723:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00031FD4 025E C93E CF               SME_kbS1m_72A:	dc.b 2, $5E, $C9, $3E, $CF	
00031FD9 035E BE3E C40E C8          SME_kbS1m_72F:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
00031FE0 038E B01E B92E BB          SME_kbS1m_736:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
00031FE7 02BE D30E DF               SME_kbS1m_73D:	dc.b 2, $BE, $D3, $E, $DF	
00031FEC 025E E03E E6               SME_kbS1m_742:	dc.b 2, $5E, $E0, $3E, $E6	
00031FF1 02BE D30E DF               SME_kbS1m_747:	dc.b 2, $BE, $D3, $E, $DF	
00031FF6 03BB 132B 1F2B 22          SME_kbS1m_74C:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00031FFD 03BB 252B 1F2B 22          SME_kbS1m_753:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
00032004 01BF 1C                    SME_kbS1m_75A:	dc.b 1, $BF, $1C	
00032007 035F 287F 2E5F 36          SME_kbS1m_75D:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
0003200E 02FF 3C5F 4C               SME_kbS1m_764:	dc.b 2, $FF, $3C, $5F, $4C	
00032013 038F 523F 5B5F 5F          SME_kbS1m_769:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
0003201A 038F 653F 5B5F 5F          SME_kbS1m_770:	dc.b 3, $8F, $65, $3F, $5B, $5F, $5F	
00032021 03BB 132B 1F2B 22          SME_kbS1m_777:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
00032028 03BB 252B 1F2B 22          SME_kbS1m_77E:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
0003202F 04BD 570D 633D 642D 68     SME_kbS1m_785:	dc.b 4, $BD, $57, $D, $63, $3D, $64, $2D, $68	
00032038                            		even
00032038                            		even
00032038                            SuperSonicDynPLC:
00032038                            		include	"_inc\Super Sonic dynamic pattern load cues.asm"
00032038                            ; --------------------------------------------------------------------------------
00032038                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00032038                            
00032038                            SME_eiGQM:	
00032038 0000 0000                  		dc.w SME_eiGQM_1AC-SME_eiGQM, SME_eiGQM_1AD-SME_eiGQM	
0003203C 0000 0000                  		dc.w SME_eiGQM_1B4-SME_eiGQM, SME_eiGQM_1BB-SME_eiGQM	
00032040 0000 0000                  		dc.w SME_eiGQM_1C2-SME_eiGQM, SME_eiGQM_1C9-SME_eiGQM	
00032044 0000 0000                  		dc.w SME_eiGQM_1D2-SME_eiGQM, SME_eiGQM_1DB-SME_eiGQM	
00032048 0000 0000                  		dc.w SME_eiGQM_1E2-SME_eiGQM, SME_eiGQM_1E7-SME_eiGQM	
0003204C 0000 0000                  		dc.w SME_eiGQM_1F0-SME_eiGQM, SME_eiGQM_1F9-SME_eiGQM	
00032050 0000 0000                  		dc.w SME_eiGQM_202-SME_eiGQM, SME_eiGQM_20B-SME_eiGQM	
00032054 0000 0000                  		dc.w SME_eiGQM_214-SME_eiGQM, SME_eiGQM_21D-SME_eiGQM	
00032058 0000 0000                  		dc.w SME_eiGQM_226-SME_eiGQM, SME_eiGQM_22F-SME_eiGQM	
0003205C 0000 0000                  		dc.w SME_eiGQM_236-SME_eiGQM, SME_eiGQM_23D-SME_eiGQM	
00032060 0000 0000                  		dc.w SME_eiGQM_244-SME_eiGQM, SME_eiGQM_24B-SME_eiGQM	
00032064 0000 0000                  		dc.w SME_eiGQM_254-SME_eiGQM, SME_eiGQM_25D-SME_eiGQM	
00032068 0000 0000                  		dc.w SME_eiGQM_264-SME_eiGQM, SME_eiGQM_269-SME_eiGQM	
0003206C 0000 0000                  		dc.w SME_eiGQM_272-SME_eiGQM, SME_eiGQM_27B-SME_eiGQM	
00032070 0000 0000                  		dc.w SME_eiGQM_284-SME_eiGQM, SME_eiGQM_28D-SME_eiGQM	
00032074 0000 0000                  		dc.w SME_eiGQM_296-SME_eiGQM, SME_eiGQM_29F-SME_eiGQM	
00032078 0000 0000                  		dc.w SME_eiGQM_2A8-SME_eiGQM, SME_eiGQM_2B1-SME_eiGQM	
0003207C 0000 0000                  		dc.w SME_eiGQM_2BA-SME_eiGQM, SME_eiGQM_2C3-SME_eiGQM	
00032080 0000 0000                  		dc.w SME_eiGQM_2CC-SME_eiGQM, SME_eiGQM_2D5-SME_eiGQM	
00032084 0000 0000                  		dc.w SME_eiGQM_2DE-SME_eiGQM, SME_eiGQM_2E7-SME_eiGQM	
00032088 0000 0000                  		dc.w SME_eiGQM_2F0-SME_eiGQM, SME_eiGQM_2F9-SME_eiGQM	
0003208C 0000 0000                  		dc.w SME_eiGQM_302-SME_eiGQM, SME_eiGQM_30B-SME_eiGQM	
00032090 0000 0000                  		dc.w SME_eiGQM_314-SME_eiGQM, SME_eiGQM_31D-SME_eiGQM	
00032094 0000 0000                  		dc.w SME_eiGQM_326-SME_eiGQM, SME_eiGQM_32F-SME_eiGQM	
00032098 0000 0000                  		dc.w SME_eiGQM_338-SME_eiGQM, SME_eiGQM_341-SME_eiGQM	
0003209C 0000 0000                  		dc.w SME_eiGQM_348-SME_eiGQM, SME_eiGQM_351-SME_eiGQM	
000320A0 0000 0000                  		dc.w SME_eiGQM_35A-SME_eiGQM, SME_eiGQM_363-SME_eiGQM	
000320A4 0000 0000                  		dc.w SME_eiGQM_36C-SME_eiGQM, SME_eiGQM_373-SME_eiGQM	
000320A8 0000 0000                  		dc.w SME_eiGQM_378-SME_eiGQM, SME_eiGQM_37D-SME_eiGQM	
000320AC 0000 0000                  		dc.w SME_eiGQM_384-SME_eiGQM, SME_eiGQM_38D-SME_eiGQM	
000320B0 0000 0000                  		dc.w SME_eiGQM_392-SME_eiGQM, SME_eiGQM_397-SME_eiGQM	
000320B4 0000 0000                  		dc.w SME_eiGQM_39E-SME_eiGQM, SME_eiGQM_3A1-SME_eiGQM	
000320B8 0000 0000                  		dc.w SME_eiGQM_3A8-SME_eiGQM, SME_eiGQM_3B1-SME_eiGQM	
000320BC 0000 0000                  		dc.w SME_eiGQM_3BA-SME_eiGQM, SME_eiGQM_3C3-SME_eiGQM	
000320C0 0000 0000                  		dc.w SME_eiGQM_3C8-SME_eiGQM, SME_eiGQM_3CB-SME_eiGQM	
000320C4 0000 0000                  		dc.w SME_eiGQM_3D0-SME_eiGQM, SME_eiGQM_3D3-SME_eiGQM	
000320C8 0000 0000                  		dc.w SME_eiGQM_3D8-SME_eiGQM, SME_eiGQM_3DF-SME_eiGQM	
000320CC 0000 0000                  		dc.w SME_eiGQM_3E8-SME_eiGQM, SME_eiGQM_3F1-SME_eiGQM	
000320D0 0000 0000                  		dc.w SME_eiGQM_3F8-SME_eiGQM, SME_eiGQM_3FF-SME_eiGQM	
000320D4 0000 0000                  		dc.w SME_eiGQM_406-SME_eiGQM, SME_eiGQM_409-SME_eiGQM	
000320D8 0000 0000                  		dc.w SME_eiGQM_412-SME_eiGQM, SME_eiGQM_41B-SME_eiGQM	
000320DC 0000 0000                  		dc.w SME_eiGQM_420-SME_eiGQM, SME_eiGQM_427-SME_eiGQM	
000320E0 0000 0000                  		dc.w SME_eiGQM_42E-SME_eiGQM, SME_eiGQM_433-SME_eiGQM	
000320E4 0000 0000                  		dc.w SME_eiGQM_43C-SME_eiGQM, SME_eiGQM_443-SME_eiGQM	
000320E8 0000 0000                  		dc.w SME_eiGQM_448-SME_eiGQM, SME_eiGQM_44D-SME_eiGQM	
000320EC 0000 0000                  		dc.w SME_eiGQM_456-SME_eiGQM, SME_eiGQM_45D-SME_eiGQM	
000320F0 0000 0000                  		dc.w SME_eiGQM_462-SME_eiGQM, SME_eiGQM_469-SME_eiGQM	
000320F4 0000 0000                  		dc.w SME_eiGQM_46C-SME_eiGQM, SME_eiGQM_471-SME_eiGQM	
000320F8 0000 0000                  		dc.w SME_eiGQM_478-SME_eiGQM, SME_eiGQM_47B-SME_eiGQM	
000320FC 0000 0000                  		dc.w SME_eiGQM_480-SME_eiGQM, SME_eiGQM_485-SME_eiGQM	
00032100 0000 0000                  		dc.w SME_eiGQM_48C-SME_eiGQM, SME_eiGQM_48F-SME_eiGQM	
00032104 0000 0000                  		dc.w SME_eiGQM_494-SME_eiGQM, SME_eiGQM_49B-SME_eiGQM	
00032108 0000 0000                  		dc.w SME_eiGQM_49E-SME_eiGQM, SME_eiGQM_4A3-SME_eiGQM	
0003210C 0000 0000                  		dc.w SME_eiGQM_4A8-SME_eiGQM, SME_eiGQM_4B1-SME_eiGQM	
00032110 0000 0000                  		dc.w SME_eiGQM_4B8-SME_eiGQM, SME_eiGQM_4BF-SME_eiGQM	
00032114 0000 0000                  		dc.w SME_eiGQM_4C4-SME_eiGQM, SME_eiGQM_4CB-SME_eiGQM	
00032118 0000 0000                  		dc.w SME_eiGQM_4D2-SME_eiGQM, SME_eiGQM_4D9-SME_eiGQM	
0003211C 0000 0000                  		dc.w SME_eiGQM_4DE-SME_eiGQM, SME_eiGQM_4E7-SME_eiGQM	
00032120 0000 0000                  		dc.w SME_eiGQM_4EE-SME_eiGQM, SME_eiGQM_4F5-SME_eiGQM	
00032124 0000 0000                  		dc.w SME_eiGQM_4FA-SME_eiGQM, SME_eiGQM_501-SME_eiGQM	
00032128 0000 0000                  		dc.w SME_eiGQM_504-SME_eiGQM, SME_eiGQM_50D-SME_eiGQM	
0003212C 0000 0000                  		dc.w SME_eiGQM_516-SME_eiGQM, SME_eiGQM_51D-SME_eiGQM	
00032130 0000 0000                  		dc.w SME_eiGQM_526-SME_eiGQM, SME_eiGQM_52F-SME_eiGQM	
00032134 0000 0000                  		dc.w SME_eiGQM_538-SME_eiGQM, SME_eiGQM_53F-SME_eiGQM	
00032138 0000 0000                  		dc.w SME_eiGQM_548-SME_eiGQM, SME_eiGQM_551-SME_eiGQM	
0003213C 0000 0000                  		dc.w SME_eiGQM_55A-SME_eiGQM, SME_eiGQM_561-SME_eiGQM	
00032140 0000 0000                  		dc.w SME_eiGQM_56A-SME_eiGQM, SME_eiGQM_571-SME_eiGQM	
00032144 0000 0000                  		dc.w SME_eiGQM_576-SME_eiGQM, SME_eiGQM_57D-SME_eiGQM	
00032148 0000 0000                  		dc.w SME_eiGQM_582-SME_eiGQM, SME_eiGQM_587-SME_eiGQM	
0003214C 0000 0000                  		dc.w SME_eiGQM_58C-SME_eiGQM, SME_eiGQM_591-SME_eiGQM	
00032150 0000 0000                  		dc.w SME_eiGQM_596-SME_eiGQM, SME_eiGQM_59D-SME_eiGQM	
00032154 0000 0000                  		dc.w SME_eiGQM_5A4-SME_eiGQM, SME_eiGQM_5A9-SME_eiGQM	
00032158 0000 0000                  		dc.w SME_eiGQM_5B0-SME_eiGQM, SME_eiGQM_5B9-SME_eiGQM	
0003215C 0000 0000                  		dc.w SME_eiGQM_5C2-SME_eiGQM, SME_eiGQM_5CB-SME_eiGQM	
00032160 0000 0000                  		dc.w SME_eiGQM_5D0-SME_eiGQM, SME_eiGQM_5DB-SME_eiGQM	
00032164 0000 0000                  		dc.w SME_eiGQM_5E6-SME_eiGQM, SME_eiGQM_5E9-SME_eiGQM	
00032168 0000 0000                  		dc.w SME_eiGQM_5EC-SME_eiGQM, SME_eiGQM_5EF-SME_eiGQM	
0003216C 0000 0000                  		dc.w SME_eiGQM_5F2-SME_eiGQM, SME_eiGQM_5F5-SME_eiGQM	
00032170 0000 0000                  		dc.w SME_eiGQM_5FA-SME_eiGQM, SME_eiGQM_5FF-SME_eiGQM	
00032174 0000 0000                  		dc.w SME_eiGQM_608-SME_eiGQM, SME_eiGQM_611-SME_eiGQM	
00032178 0000 0000                  		dc.w SME_eiGQM_61A-SME_eiGQM, SME_eiGQM_621-SME_eiGQM	
0003217C 0000 0000                  		dc.w SME_eiGQM_62A-SME_eiGQM, SME_eiGQM_633-SME_eiGQM	
00032180 0000 0000                  		dc.w SME_eiGQM_63C-SME_eiGQM, SME_eiGQM_645-SME_eiGQM	
00032184 0000 0000                  		dc.w SME_eiGQM_64E-SME_eiGQM, SME_eiGQM_657-SME_eiGQM	
00032188 0000 0000                  		dc.w SME_eiGQM_65E-SME_eiGQM, SME_eiGQM_665-SME_eiGQM	
0003218C 0000 0000                  		dc.w SME_eiGQM_66C-SME_eiGQM, SME_eiGQM_673-SME_eiGQM	
00032190 0000 0000                  		dc.w SME_eiGQM_67A-SME_eiGQM, SME_eiGQM_683-SME_eiGQM	
00032194 0000 0000                  		dc.w SME_eiGQM_68C-SME_eiGQM, SME_eiGQM_695-SME_eiGQM	
00032198 0000 0000                  		dc.w SME_eiGQM_69E-SME_eiGQM, SME_eiGQM_6A3-SME_eiGQM	
0003219C 0000 0000                  		dc.w SME_eiGQM_6AA-SME_eiGQM, SME_eiGQM_6B1-SME_eiGQM	
000321A0 0000 0000                  		dc.w SME_eiGQM_6B8-SME_eiGQM, SME_eiGQM_6BF-SME_eiGQM	
000321A4 0000 0000                  		dc.w SME_eiGQM_6C6-SME_eiGQM, SME_eiGQM_6CD-SME_eiGQM	
000321A8 0000 0000                  		dc.w SME_eiGQM_6D4-SME_eiGQM, SME_eiGQM_6DB-SME_eiGQM	
000321AC 0000 0000                  		dc.w SME_eiGQM_6E2-SME_eiGQM, SME_eiGQM_6EB-SME_eiGQM	
000321B0 0000 0000                  		dc.w SME_eiGQM_6F4-SME_eiGQM, SME_eiGQM_6FD-SME_eiGQM	
000321B4 0000 0000                  		dc.w SME_eiGQM_706-SME_eiGQM, SME_eiGQM_70F-SME_eiGQM	
000321B8 0000 0000                  		dc.w SME_eiGQM_718-SME_eiGQM, SME_eiGQM_721-SME_eiGQM	
000321BC 0000 0000                  		dc.w SME_eiGQM_72A-SME_eiGQM, SME_eiGQM_733-SME_eiGQM	
000321C0 0000 0000                  		dc.w SME_eiGQM_73C-SME_eiGQM, SME_eiGQM_745-SME_eiGQM	
000321C4 0000 0000                  		dc.w SME_eiGQM_74E-SME_eiGQM, SME_eiGQM_757-SME_eiGQM	
000321C8 0000 0000                  		dc.w SME_eiGQM_760-SME_eiGQM, SME_eiGQM_767-SME_eiGQM	
000321CC 0000 0000                  		dc.w SME_eiGQM_76E-SME_eiGQM, SME_eiGQM_773-SME_eiGQM	
000321D0 0000 0000                  		dc.w SME_eiGQM_77A-SME_eiGQM, SME_eiGQM_781-SME_eiGQM	
000321D4 0000 0000                  		dc.w SME_eiGQM_786-SME_eiGQM, SME_eiGQM_78B-SME_eiGQM	
000321D8 0000 0000                  		dc.w SME_eiGQM_790-SME_eiGQM, SME_eiGQM_797-SME_eiGQM	
000321DC 0000 0000                  		dc.w SME_eiGQM_79E-SME_eiGQM, SME_eiGQM_7A1-SME_eiGQM	
000321E0 0000 0000                  		dc.w SME_eiGQM_7A8-SME_eiGQM, SME_eiGQM_7AD-SME_eiGQM	
000321E4 00                         SME_eiGQM_1AC:	dc.b 0	
000321E5 0380 0E50 08B0 75          SME_eiGQM_1AD:	dc.b 3, $80, $E, $50, 8, $B0, $75	
000321EC 03B0 1710 23B0 81          SME_eiGQM_1B4:	dc.b 3, $B0, $17, $10, $23, $B0, $81	
000321F3 0370 8D80 2520 95          SME_eiGQM_1BB:	dc.b 3, $70, $8D, $80, $25, $20, $95	
000321FA 03B0 3550 9830 9E          SME_eiGQM_1C2:	dc.b 3, $B0, $35, $50, $98, $30, $9E	
00032201 04B0 4710 5330 A250 A6     SME_eiGQM_1C9:	dc.b 4, $B0, $47, $10, $53, $30, $A2, $50, $A6	
0003220A 04B0 5510 6130 9E50 98     SME_eiGQM_1D2:	dc.b 4, $B0, $55, $10, $61, $30, $9E, $50, $98	
00032213 0380 6320 AC70 8D          SME_eiGQM_1DB:	dc.b 3, $80, $63, $20, $AC, $70, $8D	
0003221A 0280 6CB0 81               SME_eiGQM_1E2:	dc.b 2, $80, $6C, $B0, $81	
0003221F 04B0 AF11 6BB1 6D51 79     SME_eiGQM_1E7:	dc.b 4, $B0, $AF, $11, $6B, $B1, $6D, $51, $79	
00032228 04B0 C811 7F81 8171 8A     SME_eiGQM_1F0:	dc.b 4, $B0, $C8, $11, $7F, $81, $81, $71, $8A	
00032231 0480 E071 9201 9A11 9B     SME_eiGQM_1F9:	dc.b 4, $80, $E0, $71, $92, 1, $9A, $11, $9B	
0003223A 04B0 F3B1 9D01 A931 AA     SME_eiGQM_202:	dc.b 4, $B0, $F3, $B1, $9D, 1, $A9, $31, $AA	
00032243 04B1 0A81 AE51 B751 BD     SME_eiGQM_20B:	dc.b 4, $B1, $A, $81, $AE, $51, $B7, $51, $BD	
0003224C 04F1 2671 C321 CB31 CE     SME_eiGQM_214:	dc.b 4, $F1, $26, $71, $C3, $21, $CB, $31, $CE	
00032255 0481 4351 D281 D811 E1     SME_eiGQM_21D:	dc.b 4, $81, $43, $51, $D2, $81, $D8, $11, $E1	
0003225E 0481 5771 E301 EB21 EC     SME_eiGQM_226:	dc.b 4, $81, $57, $71, $E3, 1, $EB, $21, $EC	
00032267 0351 EF81 F5B2 75          SME_eiGQM_22F:	dc.b 3, $51, $EF, $81, $F5, $B2, $75	
0003226E 0312 81B2 83B2 8F          SME_eiGQM_236:	dc.b 3, $12, $81, $B2, $83, $B2, $8F	
00032275 0382 9B82 A412 AD          SME_eiGQM_23D:	dc.b 3, $82, $9B, $82, $A4, $12, $AD	
0003227C 03B2 2C82 AF02 B8          SME_eiGQM_244:	dc.b 3, $B2, $2C, $82, $AF, 2, $B8	
00032283 04B2 4212 4082 B902 C2     SME_eiGQM_24B:	dc.b 4, $B2, $42, $12, $40, $82, $B9, 2, $C2	
0003228C 04B2 C312 CF82 AF02 B8     SME_eiGQM_254:	dc.b 4, $B2, $C3, $12, $CF, $82, $AF, 2, $B8	
00032295 0382 D182 DA12 AD          SME_eiGQM_25D:	dc.b 3, $82, $D1, $82, $DA, $12, $AD	
0003229C 0282 6CB2 8F               SME_eiGQM_264:	dc.b 2, $82, $6C, $B2, $8F	
000322A1 04B2 E353 9EB3 A403 B0     SME_eiGQM_269:	dc.b 4, $B2, $E3, $53, $9E, $B3, $A4, 3, $B0	
000322AA 04B2 FC73 B173 B913 C1     SME_eiGQM_272:	dc.b 4, $B2, $FC, $73, $B1, $73, $B9, $13, $C1	
000322B3 0483 1403 C313 C483 C6     SME_eiGQM_27B:	dc.b 4, $83, $14, 3, $C3, $13, $C4, $83, $C6	
000322BC 04B3 2733 CFB3 D303 3A     SME_eiGQM_284:	dc.b 4, $B3, $27, $33, $CF, $B3, $D3, 3, $3A	
000322C5 04B3 3E53 DF83 E553 EE     SME_eiGQM_28D:	dc.b 4, $B3, $3E, $53, $DF, $83, $E5, $53, $EE	
000322CE 04F3 5933 F403 F8B3 F9     SME_eiGQM_296:	dc.b 4, $F3, $59, $33, $F4, 3, $F8, $B3, $F9	
000322D7 0483 7634 05B4 0903 86     SME_eiGQM_29F:	dc.b 4, $83, $76, $34, 5, $B4, 9, 3, $86	
000322E0 0483 8A34 1554 1914 1F     SME_eiGQM_2A8:	dc.b 4, $83, $8A, $34, $15, $54, $19, $14, $1F	
000322E9 0474 6724 6F54 7214 78     SME_eiGQM_2B1:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
000322F2 0474 7A24 8254 8514 78     SME_eiGQM_2BA:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
000322FB 0474 6724 6F54 7214 78     SME_eiGQM_2C3:	dc.b 4, $74, $67, $24, $6F, $54, $72, $14, $78	
00032304 0474 7A24 8254 8514 78     SME_eiGQM_2CC:	dc.b 4, $74, $7A, $24, $82, $54, $85, $14, $78	
0003230D 0414 D674 D804 E0B4 E1     SME_eiGQM_2D5:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
00032316 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2DE:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
0003231F 0414 D674 D804 E0B4 E1     SME_eiGQM_2E7:	dc.b 4, $14, $D6, $74, $D8, 4, $E0, $B4, $E1	
00032328 0414 ED74 EF04 F7B4 F8     SME_eiGQM_2F0:	dc.b 4, $14, $ED, $74, $EF, 4, $F7, $B4, $F8	
00032331 04B5 4A15 5605 5835 59     SME_eiGQM_2F9:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
0003233A 04B5 5D15 6905 6B35 6C     SME_eiGQM_302:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032343 04B5 4A15 5605 5835 59     SME_eiGQM_30B:	dc.b 4, $B5, $4A, $15, $56, 5, $58, $35, $59	
0003234C 04B5 5D15 6905 6B35 6C     SME_eiGQM_314:	dc.b 4, $B5, $5D, $15, $69, 5, $6B, $35, $6C	
00032355 0435 BB75 BF55 C735 CD     SME_eiGQM_31D:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
0003235E 0425 D175 D455 DC35 E2     SME_eiGQM_326:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032367 0435 BB75 BF55 C735 CD     SME_eiGQM_32F:	dc.b 4, $35, $BB, $75, $BF, $55, $C7, $35, $CD	
00032370 0425 D175 D455 DC35 E2     SME_eiGQM_338:	dc.b 4, $25, $D1, $75, $D4, $55, $DC, $35, $E2	
00032379 0325 E6B5 E925 F5          SME_eiGQM_341:	dc.b 3, $25, $E6, $B5, $E9, $25, $F5	
00032380 0455 F835 FE26 0216 05     SME_eiGQM_348:	dc.b 4, $55, $F8, $35, $FE, $26, 2, $16, 5	
00032389 0416 0726 0936 0C16 10     SME_eiGQM_351:	dc.b 4, $16, 7, $26, 9, $36, $C, $16, $10	
00032392 0426 1236 1526 1936 1C     SME_eiGQM_35A:	dc.b 4, $26, $12, $36, $15, $26, $19, $36, $1C	
0003239B 0416 2026 2236 2526 29     SME_eiGQM_363:	dc.b 4, $16, $20, $26, $22, $36, $25, $26, $29	
000323A4 0316 2C76 2E56 36          SME_eiGQM_36C:	dc.b 3, $16, $2C, $76, $2E, $56, $36	
000323AB 02F6 3C26 4C               SME_eiGQM_373:	dc.b 2, $F6, $3C, $26, $4C	
000323B0 02B6 4F06 5B               SME_eiGQM_378:	dc.b 2, $B6, $4F, 6, $5B	
000323B5 0316 5C76 5E26 66          SME_eiGQM_37D:	dc.b 3, $16, $5C, $76, $5E, $26, $66	
000323BC 0426 6936 6C26 7016 73     SME_eiGQM_384:	dc.b 4, $26, $69, $36, $6C, $26, $70, $16, $73	
000323C5 0286 7536 7E               SME_eiGQM_38D:	dc.b 2, $86, $75, $36, $7E	
000323CA 02B6 8226 8E               SME_eiGQM_392:	dc.b 2, $B6, $82, $26, $8E	
000323CF 0306 91B6 9226 9E          SME_eiGQM_397:	dc.b 3, 6, $91, $B6, $92, $26, $9E	
000323D6 01B6 A1                    SME_eiGQM_39E:	dc.b 1, $B6, $A1	
000323D9 0326 AD76 B016 B8          SME_eiGQM_3A1:	dc.b 3, $26, $AD, $76, $B0, $16, $B8	
000323E0 0426 BA36 BD26 C116 C4     SME_eiGQM_3A8:	dc.b 4, $26, $BA, $36, $BD, $26, $C1, $16, $C4	
000323E9 0456 C636 CC26 D016 D3     SME_eiGQM_3B1:	dc.b 4, $56, $C6, $36, $CC, $26, $D0, $16, $D3	
000323F2 0456 D526 DB36 DE26 E2     SME_eiGQM_3BA:	dc.b 4, $56, $D5, $26, $DB, $36, $DE, $26, $E2	
000323FB 02B6 E526 F1               SME_eiGQM_3C3:	dc.b 2, $B6, $E5, $26, $F1	
00032400 01B6 F4                    SME_eiGQM_3C8:	dc.b 1, $B6, $F4	
00032403 0277 0027 08               SME_eiGQM_3CB:	dc.b 2, $77, 0, $27, 8	
00032408 01B7 0B                    SME_eiGQM_3D0:	dc.b 1, $B7, $B	
0003240B 0217 17B7 19               SME_eiGQM_3D3:	dc.b 2, $17, $17, $B7, $19	
00032410 0327 2577 2857 30          SME_eiGQM_3D8:	dc.b 3, $27, $25, $77, $28, $57, $30	
00032417 0487 3637 3F37 4327 47     SME_eiGQM_3DF:	dc.b 4, $87, $36, $37, $3F, $37, $43, $27, $47	
00032420 0427 4A77 4D27 5537 58     SME_eiGQM_3E8:	dc.b 4, $27, $4A, $77, $4D, $27, $55, $37, $58	
00032429 0357 5C37 6227 66          SME_eiGQM_3F1:	dc.b 3, $57, $5C, $37, $62, $27, $66	
00032430 0327 6977 6C27 74          SME_eiGQM_3F8:	dc.b 3, $27, $69, $77, $6C, $27, $74	
00032437 0317 7777 7917 81          SME_eiGQM_3FF:	dc.b 3, $17, $77, $77, $79, $17, $81	
0003243E 01F7 83                    SME_eiGQM_406:	dc.b 1, $F7, $83	
00032441 0407 9377 9407 9C77 9D     SME_eiGQM_409:	dc.b 4, 7, $93, $77, $94, 7, $9C, $77, $9D	
0003244A 0417 A527 A787 AA37 B3     SME_eiGQM_412:	dc.b 4, $17, $A5, $27, $A7, $87, $AA, $37, $B3	
00032453 0217 B7B7 B9               SME_eiGQM_41B:	dc.b 2, $17, $B7, $B7, $B9	
00032458 0317 C577 C717 CF          SME_eiGQM_420:	dc.b 3, $17, $C5, $77, $C7, $17, $CF	
0003245F 0307 D187 D217 DB          SME_eiGQM_427:	dc.b 3, 7, $D1, $87, $D2, $17, $DB	
00032466 02F7 DD07 ED               SME_eiGQM_42E:	dc.b 2, $F7, $DD, 7, $ED	
0003246B 0428 0078 0328 0B28 0E     SME_eiGQM_433:	dc.b 4, $28, 0, $78, 3, $28, $B, $28, $E	
00032474 0328 1178 1458 1C          SME_eiGQM_43C:	dc.b 3, $28, $11, $78, $14, $58, $1C	
0003247B 02B8 2238 2E               SME_eiGQM_443:	dc.b 2, $B8, $22, $38, $2E	
00032480 02B8 3228 3E               SME_eiGQM_448:	dc.b 2, $B8, $32, $28, $3E	
00032485 0428 4138 4428 4878 4B     SME_eiGQM_44D:	dc.b 4, $28, $41, $38, $44, $28, $48, $78, $4B	
0003248E 0388 5338 5C28 60          SME_eiGQM_456:	dc.b 3, $88, $53, $38, $5C, $28, $60	
00032495 02B8 6328 6F               SME_eiGQM_45D:	dc.b 2, $B8, $63, $28, $6F	
0003249A 0388 7258 7B08 81          SME_eiGQM_462:	dc.b 3, $88, $72, $58, $7B, 8, $81	
000324A1 01B8 82                    SME_eiGQM_469:	dc.b 1, $B8, $82	
000324A4 02B8 8E28 9A               SME_eiGQM_46C:	dc.b 2, $B8, $8E, $28, $9A	
000324A9 0338 9DB8 A108 AD          SME_eiGQM_471:	dc.b 3, $38, $9D, $B8, $A1, 8, $AD	
000324B0 01B8 AE                    SME_eiGQM_478:	dc.b 1, $B8, $AE	
000324B3 0208 BAB8 BB               SME_eiGQM_47B:	dc.b 2, 8, $BA, $B8, $BB	
000324B8 0288 C758 D0               SME_eiGQM_480:	dc.b 2, $88, $C7, $58, $D0	
000324BD 0388 D638 DF28 E3          SME_eiGQM_485:	dc.b 3, $88, $D6, $38, $DF, $28, $E3	
000324C4 01B8 E6                    SME_eiGQM_48C:	dc.b 1, $B8, $E6	
000324C7 02B8 F228 FE               SME_eiGQM_48F:	dc.b 2, $B8, $F2, $28, $FE	
000324CC 0329 0119 04B9 06          SME_eiGQM_494:	dc.b 3, $29, 1, $19, 4, $B9, 6	
000324D3 01B9 12                    SME_eiGQM_49B:	dc.b 1, $B9, $12	
000324D6 0209 1EB9 1F               SME_eiGQM_49E:	dc.b 2, 9, $1E, $B9, $1F	
000324DB 02B9 2B29 37               SME_eiGQM_4A3:	dc.b 2, $B9, $2B, $29, $37	
000324E0 0419 3A39 3C59 4019 46     SME_eiGQM_4A8:	dc.b 4, $19, $3A, $39, $3C, $59, $40, $19, $46	
000324E9 0309 4879 4929 51          SME_eiGQM_4B1:	dc.b 3, 9, $48, $79, $49, $29, $51	
000324F0 0309 5479 5529 5D          SME_eiGQM_4B8:	dc.b 3, 9, $54, $79, $55, $29, $5D	
000324F7 0259 60B9 66               SME_eiGQM_4BF:	dc.b 2, $59, $60, $B9, $66	
000324FC 0309 7289 7339 7C          SME_eiGQM_4C4:	dc.b 3, 9, $72, $89, $73, $39, $7C	
00032503 0319 8059 8239 88          SME_eiGQM_4CB:	dc.b 3, $19, $80, $59, $82, $39, $88	
0003250A 0359 8C39 9219 96          SME_eiGQM_4D2:	dc.b 3, $59, $8C, $39, $92, $19, $96	
00032511 0209 98B9 99               SME_eiGQM_4D9:	dc.b 2, 9, $98, $B9, $99	
00032516 0419 A509 A709 A8B9 A9     SME_eiGQM_4DE:	dc.b 4, $19, $A5, 9, $A7, 9, $A8, $B9, $A9	
0003251F 0319 B5B9 B729 C3          SME_eiGQM_4E7:	dc.b 3, $19, $B5, $B9, $B7, $29, $C3	
00032526 0319 C679 C829 D0          SME_eiGQM_4EE:	dc.b 3, $19, $C6, $79, $C8, $29, $D0	
0003252D 0209 D389 D4               SME_eiGQM_4F5:	dc.b 2, 9, $D3, $89, $D4	
00032532 0329 DD79 E029 E8          SME_eiGQM_4FA:	dc.b 3, $29, $DD, $79, $E0, $29, $E8	
00032539 01B9 EB                    SME_eiGQM_501:	dc.b 1, $B9, $EB	
0003253C 0439 F729 FB79 FE7A 06     SME_eiGQM_504:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032545 041A 0EBA 105A 1C2A 22     SME_eiGQM_50D:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
0003254E 032A 25BA 287A 34          SME_eiGQM_516:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032555 042A 3C1A 3F1A 41FA 43     SME_eiGQM_51D:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
0003255E 0439 F729 FB79 FE7A 06     SME_eiGQM_526:	dc.b 4, $39, $F7, $29, $FB, $79, $FE, $7A, 6	
00032567 041A 0EBA 105A 1C2A 22     SME_eiGQM_52F:	dc.b 4, $1A, $E, $BA, $10, $5A, $1C, $2A, $22	
00032570 032A 25BA 287A 34          SME_eiGQM_538:	dc.b 3, $2A, $25, $BA, $28, $7A, $34	
00032577 042A 3C1A 3F1A 41FA 43     SME_eiGQM_53F:	dc.b 4, $2A, $3C, $1A, $3F, $1A, $41, $FA, $43	
00032580 04BA 530A 5F1A 605A 62     SME_eiGQM_548:	dc.b 4, $BA, $53, $A, $5F, $1A, $60, $5A, $62	
00032589 043A 687A 6C3A 742A 78     SME_eiGQM_551:	dc.b 4, $3A, $68, $7A, $6C, $3A, $74, $2A, $78	
00032592 032A 7B3A 7EBA 82          SME_eiGQM_55A:	dc.b 3, $2A, $7B, $3A, $7E, $BA, $82	
00032599 040A 8E7A 8F2A 975A 9A     SME_eiGQM_561:	dc.b 4, $A, $8E, $7A, $8F, $2A, $97, $5A, $9A	
000325A2 03BA A05A AC1A B2          SME_eiGQM_56A:	dc.b 3, $BA, $A0, $5A, $AC, $1A, $B2	
000325A9 02BA B45A C0               SME_eiGQM_571:	dc.b 2, $BA, $B4, $5A, $C0	
000325AE 032A C67A C92A D1          SME_eiGQM_576:	dc.b 3, $2A, $C6, $7A, $C9, $2A, $D1	
000325B5 02BA D42A E0               SME_eiGQM_57D:	dc.b 2, $BA, $D4, $2A, $E0	
000325BA 02BA E32A E0               SME_eiGQM_582:	dc.b 2, $BA, $E3, $2A, $E0	
000325BF 02BA EF2A E0               SME_eiGQM_587:	dc.b 2, $BA, $EF, $2A, $E0	
000325C4 02BA FB2A E0               SME_eiGQM_58C:	dc.b 2, $BA, $FB, $2A, $E0	
000325C9 02BB 072A E0               SME_eiGQM_591:	dc.b 2, $BB, 7, $2A, $E0	
000325CE 03BB 132B 1F2B 22          SME_eiGQM_596:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000325D5 03BB 252B 1F2B 22          SME_eiGQM_59D:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000325DC 02B7 EF37 FB               SME_eiGQM_5A4:	dc.b 2, $B7, $EF, $37, $FB	
000325E1 033B 313B 358B 39          SME_eiGQM_5A9:	dc.b 3, $3B, $31, $3B, $35, $8B, $39	
000325E8 045B 423B 482B 4C5B 4F     SME_eiGQM_5B0:	dc.b 4, $5B, $42, $3B, $48, $2B, $4C, $5B, $4F	
000325F1 045B 553B 5B2B 5F7B 62     SME_eiGQM_5B9:	dc.b 4, $5B, $55, $3B, $5B, $2B, $5F, $7B, $62	
000325FA 042B 6ABB 6D0B 791B 7A     SME_eiGQM_5C2:	dc.b 4, $2B, $6A, $BB, $6D, $B, $79, $1B, $7A	
00032603 022B 6ABB 7C               SME_eiGQM_5CB:	dc.b 2, $2B, $6A, $BB, $7C	
00032608 057B 881B 935B 953B 9B2B+  SME_eiGQM_5D0:	dc.b 5, $7B, $88, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
00032613 052B 901B 935B 953B 9B2B+  SME_eiGQM_5DB:	dc.b 5, $2B, $90, $1B, $93, $5B, $95, $3B, $9B, $2B, $9F	
0003261E 01FB A2                    SME_eiGQM_5E6:	dc.b 1, $FB, $A2	
00032621 01FB B2                    SME_eiGQM_5E9:	dc.b 1, $FB, $B2	
00032624 01FB C2                    SME_eiGQM_5EC:	dc.b 1, $FB, $C2	
00032627 01FB D2                    SME_eiGQM_5EF:	dc.b 1, $FB, $D2	
0003262A 01FB E2                    SME_eiGQM_5F2:	dc.b 1, $FB, $E2	
0003262D 02FF C30F D3               SME_eiGQM_5F5:	dc.b 2, $FF, $C3, $F, $D3	
00032632 02FF C30F D3               SME_eiGQM_5FA:	dc.b 2, $FF, $C3, $F, $D3	
00032637 048C 0C1C 153C 172C 1B     SME_eiGQM_5FF:	dc.b 4, $8C, $C, $1C, $15, $3C, $17, $2C, $1B	
00032640 048C 0C1C 1E3C 202C 24     SME_eiGQM_608:	dc.b 4, $8C, $C, $1C, $1E, $3C, $20, $2C, $24	
00032649 042C 277C 2A2C 321C 35     SME_eiGQM_611:	dc.b 4, $2C, $27, $7C, $2A, $2C, $32, $1C, $35	
00032652 032C 37BC 3A2C 46          SME_eiGQM_61A:	dc.b 3, $2C, $37, $BC, $3A, $2C, $46	
00032659 043E EA3E EE7E F25E FA     SME_eiGQM_621:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
00032662 043E EA3E EE7F 005F 08     SME_eiGQM_62A:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
0003266B 043E EA3E EE7F 0E5F 16     SME_eiGQM_633:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
00032674 043E EA3E EE7E F25E FA     SME_eiGQM_63C:	dc.b 4, $3E, $EA, $3E, $EE, $7E, $F2, $5E, $FA	
0003267D 043E EA3E EE7F 005F 08     SME_eiGQM_645:	dc.b 4, $3E, $EA, $3E, $EE, $7F, 0, $5F, 8	
00032686 043E EA3E EE7F 0E5F 16     SME_eiGQM_64E:	dc.b 4, $3E, $EA, $3E, $EE, $7F, $E, $5F, $16	
0003268F 032C BCFC BF0C CF          SME_eiGQM_657:	dc.b 3, $2C, $BC, $FC, $BF, $C, $CF	
00032696 032C D0FC D30C CF          SME_eiGQM_65E:	dc.b 3, $2C, $D0, $FC, $D3, $C, $CF	
0003269D 031C E3FC E50C CF          SME_eiGQM_665:	dc.b 3, $1C, $E3, $FC, $E5, $C, $CF	
000326A4 03BC F50D 015D 02          SME_eiGQM_66C:	dc.b 3, $BC, $F5, $D, 1, $5D, 2	
000326AB 03BD 080D 145D 15          SME_eiGQM_673:	dc.b 3, $BD, 8, $D, $14, $5D, $15	
000326B2 04FD 1B0D 2B1D 2C1D 2E     SME_eiGQM_67A:	dc.b 4, $FD, $1B, $D, $2B, $1D, $2C, $1D, $2E	
000326BB 042D 307D 331D 3B2D 3D     SME_eiGQM_683:	dc.b 4, $2D, $30, $7D, $33, $1D, $3B, $2D, $3D	
000326C4 042D 307D 401D 3B2D 3D     SME_eiGQM_68C:	dc.b 4, $2D, $30, $7D, $40, $1D, $3B, $2D, $3D	
000326CD 042D 483D 4B7D 4F2D 3D     SME_eiGQM_695:	dc.b 4, $2D, $48, $3D, $4B, $7D, $4F, $2D, $3D	
000326D6 027D 768D 7E               SME_eiGQM_69E:	dc.b 2, $7D, $76, $8D, $7E	
000326DB 032D 877D 8A5D 92          SME_eiGQM_6A3:	dc.b 3, $2D, $87, $7D, $8A, $5D, $92	
000326E2 032D 877D 985D 92          SME_eiGQM_6AA:	dc.b 3, $2D, $87, $7D, $98, $5D, $92	
000326E9 032D 877D A05D 92          SME_eiGQM_6B1:	dc.b 3, $2D, $87, $7D, $A0, $5D, $92	
000326F0 03BD A82D B43D B7          SME_eiGQM_6B8:	dc.b 3, $BD, $A8, $2D, $B4, $3D, $B7	
000326F7 03BD BB2D C73D CA          SME_eiGQM_6BF:	dc.b 3, $BD, $BB, $2D, $C7, $3D, $CA	
000326FE 032F 6EFF 713F 81          SME_eiGQM_6C6:	dc.b 3, $2F, $6E, $FF, $71, $3F, $81	
00032705 032F 85FF 882F 98          SME_eiGQM_6CD:	dc.b 3, $2F, $85, $FF, $88, $2F, $98	
0003270C 030F 9BFF 9C3F AC          SME_eiGQM_6D4:	dc.b 3, $F, $9B, $FF, $9C, $3F, $AC	
00032713 032F 85FF B02F C0          SME_eiGQM_6DB:	dc.b 3, $2F, $85, $FF, $B0, $2F, $C0	
0003271A 048E 017F D42F DC0F DF     SME_eiGQM_6E2:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032723 048E 017F E02F E80F EB     SME_eiGQM_6EB:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
0003272C 048E 017F D42F DC0F DF     SME_eiGQM_6F4:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032735 048E 017F E02F E80F EB     SME_eiGQM_6FD:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
0003273E 048E 017F D42F DC0F DF     SME_eiGQM_706:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032747 048E 017F E02F E80F EB     SME_eiGQM_70F:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032750 048E 017F D42F DC0F DF     SME_eiGQM_718:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
00032759 048E 017F E02F E80F EB     SME_eiGQM_721:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032762 048E 017F D42F DC0F DF     SME_eiGQM_72A:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
0003276B 042E 617E 642E 6C2E 6F     SME_eiGQM_733:	dc.b 4, $2E, $61, $7E, $64, $2E, $6C, $2E, $6F	
00032774 042E 723E 753E 795E 7D     SME_eiGQM_73C:	dc.b 4, $2E, $72, $3E, $75, $3E, $79, $5E, $7D	
0003277D 048E 017F E02F E80F EB     SME_eiGQM_745:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032786 048E 017F D42F DC0F DF     SME_eiGQM_74E:	dc.b 4, $8E, 1, $7F, $D4, $2F, $DC, $F, $DF	
0003278F 048E 017F E02F E80F EB     SME_eiGQM_757:	dc.b 4, $8E, 1, $7F, $E0, $2F, $E8, $F, $EB	
00032798 038E B01E B92E BB          SME_eiGQM_760:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
0003279F 035E BE3E C40E C8          SME_eiGQM_767:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
000327A6 025E C93E CF               SME_eiGQM_76E:	dc.b 2, $5E, $C9, $3E, $CF	
000327AB 035E BE3E C40E C8          SME_eiGQM_773:	dc.b 3, $5E, $BE, $3E, $C4, $E, $C8	
000327B2 038E B01E B92E BB          SME_eiGQM_77A:	dc.b 3, $8E, $B0, $1E, $B9, $2E, $BB	
000327B9 02BE D30E DF               SME_eiGQM_781:	dc.b 2, $BE, $D3, $E, $DF	
000327BE 025E E03E E6               SME_eiGQM_786:	dc.b 2, $5E, $E0, $3E, $E6	
000327C3 02BE D30E DF               SME_eiGQM_78B:	dc.b 2, $BE, $D3, $E, $DF	
000327C8 03BB 132B 1F2B 22          SME_eiGQM_790:	dc.b 3, $BB, $13, $2B, $1F, $2B, $22	
000327CF 03BB 252B 1F2B 22          SME_eiGQM_797:	dc.b 3, $BB, $25, $2B, $1F, $2B, $22	
000327D6 01BF 1C                    SME_eiGQM_79E:	dc.b 1, $BF, $1C	
000327D9 035F 287F 2E5F 36          SME_eiGQM_7A1:	dc.b 3, $5F, $28, $7F, $2E, $5F, $36	
000327E0 02FF 3C5F 4C               SME_eiGQM_7A8:	dc.b 2, $FF, $3C, $5F, $4C	
000327E5 038F 523F 5B5F 5F          SME_eiGQM_7AD:	dc.b 3, $8F, $52, $3F, $5B, $5F, $5F	
000327EC                            		even
000327EC                            		even
000327EC                            ;MetalSonicDynPLC:
000327EC                            ;	include "_inc\Metal Sonic dynamic pattern load cues.asm"
000327EC                            
000327EC                            ; ---------------------------------------------------------------------------
000327EC                            ; Uncompressed graphics	- Sonic
000327EC                            ; ---------------------------------------------------------------------------
000327EC                            ;	align $20
000327EC                            ;Art_Sonic:	INCBIN	"art/uncompressed/Sonic's art.bin"
000327EC                            ;	dc.b 0,0,0,0,0,0
000327EC                            Art_Sonic:	incbin	#artunc\sonic.bin	; Sonic
000528AC                            		even
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            ; Uncompressed graphics - Metal Sonic
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            ;Art_MetalSonic:	incbin	#artunc\msonic.bin; Metal Sonic
000528AC                            ;		even
000528AC                            ;Art_ASCII:	incbin	#artunc\ascii.bin	; ascii font
000528AC                            ;		even
000528AC                            		
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            ; Uncompressed graphics	- Tails
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            ;Art_Tails:	incbin	#artunc\tails.bin	; Tails
000528AC                            ;		even
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            ; Uncompressed graphics	- Slot Machine Pictures
000528AC                            ; ---------------------------------------------------------------------------
000528AC                            Art_Slot:	incbin	#artunc\Slotpictures.bin	; Tails
000534AC                            		even
000534AC                            ; ---------------------------------------------------------------------------
000534AC                            ; Uncompressed graphics - Super Sonic
000534AC                            ; ---------------------------------------------------------------------------
000534AC                            ;Art_SSonic:	incbin	#artunc\ssonic.bin; Super Sonic
000534AC                            ;		even
000534AC                            ; ---------------------------------------------------------------------------
000534AC                            ; Compressed graphics - various
000534AC                            ; ---------------------------------------------------------------------------
000534AC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000535B0                            		even
000535B0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000535EA                            		even
000535EA                            ;Nem_Shield:	incbin	artnem\shields2.bin	; shield
000535EA                            ;		even
000535EA                            Unc_Shield:	incbin	artnem\shields2mod.bin
0005398A                            		even
0005398A                            Unc_Stars:	incbin	artnem\InvStarsUnc.bin	; invincibility stars
00053DCA                            		even
00053DCA                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00053ED4                            		even
00053ED4                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00053F26                            		even
00053F26                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0005416E                            		even
0005416E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000542F4                            		even
000542F4                            		include	"_maps\SS Walls Dynamic.asm"
000542F4                            ; ---------------------------------------------------------------------------
000542F4                            ; Sprite mappings - walls of the special stage
000542F4                            ; ---------------------------------------------------------------------------
000542F4 0000                       Map_SSWalls:	dc.w byte_2C584-Map_SSWalls
000542F6 01                         byte_2C584:	dc.b 1
000542F7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000542FC                            		even
000542FC                            		even
000542FC                            
000542FC                            ; ---------------------------------------------------------------------------
000542FC                            ; Compressed graphics - special stage
000542FC                            ; ---------------------------------------------------------------------------
000542FC                            
000542FC                            ;	if DynamicSpecialStageWalls=1	;Mercury Dynamic Special Stage Walls
000542FC                            Art_SSWalls:	incbin	"#artunc\Special Walls.bin" ; special stage walls
0005621C                            		even
0005621C                            ;	else
0005621C                            ;Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005621C                            ;		even
0005621C                            ;	endc	;Mercury Dynamic Special Stage Walls
0005621C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00056350                            		even
00056350                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00056FE0                            		even
00056FE0                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000572E0                            		even
000572E0                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000577D4                            		even
000577D4                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000578C2                            		even
000578C2                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000579AE                            		even
000579AE                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00057AA4                            		even
00057AA4                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00057B02                            		even
00057B02                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00057B94                            		even
00057B94                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00057C56                            		even
00057C56                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00057D24                            		even
00057D24                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00057DF0                            		even
00057DF0                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00057EB8                            		even
00057EB8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00057F82                            		even
00057F82                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00058052                            		even
00058052                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00058246                            		even
00058246                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0005838E 00                         		even
0005838E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0005843E                            		even
0005843E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00058518                            		even
00058518                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0005859C                            		even
0005859C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000586EE                            		even
000586EE                            ; ---------------------------------------------------------------------------
000586EE                            ; Compressed graphics - GHZ stuff
000586EE                            ; ---------------------------------------------------------------------------
000586EE                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00058738                            		even
00058738                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00058852                            		even
00058852                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00058948 00                         		even
00058948                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00058AE6                            		even
00058AE6                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00058B2E                            		even
00058B2E                            Nem_Spikes:	incbin	artnem\spikess3.bin	; spikes
00058B94 00                         		even
00058B94                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00058DA8                            		even
00058DA8                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00058ED4                            		even
00058ED4                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00059002                            		even
00059002                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000590A0                            		even
000590A0                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00059100                            		even
00059100                            ; ---------------------------------------------------------------------------
00059100                            ; Compressed graphics - LZ stuff
00059100                            ; ---------------------------------------------------------------------------
00059100                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00059224                            		even
00059224                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00059A18                            		even
00059A18                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00059B98                            		even
00059B98                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00059D02                            		even
00059D02                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0005A358                            		even
0005A358                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0005A40E                            		even
0005A40E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0005A4B0                            		even
0005A4B0                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0005A60C                            		even
0005A60C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0005A670                            		even
0005A670                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0005A7C2                            		even
0005A7C2                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0005ACA4                            		even
0005ACA4                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0005AE14                            		even
0005AE14                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0005B0CC                            		even
0005B0CC                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0005B204                            		even
0005B204                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0005B32E                            		even
0005B32E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0005B43E                            		even
0005B43E                            ; ---------------------------------------------------------------------------
0005B43E                            ; Compressed graphics - MZ stuff
0005B43E                            ; ---------------------------------------------------------------------------
0005B43E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0005B6CC                            		even
0005B6CC                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0005B750 00                         		even
0005B750                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0005B808                            		even
0005B808                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0005B85C                            		even
0005B85C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0005BB3A                            		even
0005BB3A                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0005C450                            		even
0005C450                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0005C5B4                            		even
0005C5B4                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0005C63C                            		even
0005C63C                            ; ---------------------------------------------------------------------------
0005C63C                            ; Compressed graphics - SLZ stuff
0005C63C                            ; ---------------------------------------------------------------------------
0005C63C                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0005C878                            		even
0005C878                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0005C9BE                            		even
0005C9BE                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0005CC02                            		even
0005CC02                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0005CC64                            		even
0005CC64                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0005CD46                            		even
0005CD46                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0005CF28                            		even
0005CF28                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0005D034                            		even
0005D034                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0005D0D8                            		even
0005D0D8                            ; ---------------------------------------------------------------------------
0005D0D8                            ; Compressed graphics - SYZ stuff
0005D0D8                            ; ---------------------------------------------------------------------------
0005D0D8                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0005D248                            		even
0005D248                            Nem_Flipper:	incbin	artnem\Flippers.bin	; Pinball Flippers
0005D56C                            		even
0005D56C                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0005D5CE                            		even
0005D5CE                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0005D67E                            		even
0005D67E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0005D90C                            		even
0005D90C                            ; ---------------------------------------------------------------------------
0005D90C                            ; Compressed graphics - SBZ stuff
0005D90C                            ; ---------------------------------------------------------------------------
0005D90C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0005D960                            		even
0005D960                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0005DBFC                            		even
0005DBFC                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0005DE00                            		even
0005DE00                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0005DF9E                            		even
0005DF9E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0005E2CE                            		even
0005E2CE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0005E4AC                            		even
0005E4AC                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0005E504                            		even
0005E504                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0005E684                            		even
0005E684                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0005E782                            		even
0005E782                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0005E90E                            		even
0005E90E                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0005E95E                            		even
0005E95E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0005E9B6                            		even
0005E9B6                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0005EAB2                            		even
0005EAB2                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0005EBC8                            		even
0005EBC8                            ; ---------------------------------------------------------------------------
0005EBC8                            ; Compressed graphics - enemies
0005EBC8                            ; ---------------------------------------------------------------------------
0005EBC8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0005EF88                            		even
0005EF88                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0005F476                            		even
0005F476                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0005F81C                            		even
0005F81C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0005FA04                            		even
0005FA04                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000600EE                            		even
000600EE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00060336                            		even
00060336                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000605C0                            		even
000605C0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00060AE4                            		even
00060AE4                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00060D6E                            		even
00060D6E                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0006138C                            		even
0006138C                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00061774                            		even
00061774                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00061A70                            		even
00061A70                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00061CB8                            		even
00061CB8                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00061F50                            		even
00061F50                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0006212E                            		even
0006212E                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000622BC                            		even
000622BC                            ; ---------------------------------------------------------------------------
000622BC                            ; Compressed graphics - various
000622BC                            ; ---------------------------------------------------------------------------
000622BC                            Nem_GTA:	incbin	artnem\GotThrough.bin
00062812                            		even
00062812                            Nem_TitleCard:
00062812                            			incbin	artnem\ttlcards.bin	; title cards
00062E02                            		even
00062E02                            ArtNem_TitleCard:
00062E02                            Nem_TitleCard2:
00062E02                            			incbin	'art/nemesis/Title card.bin'	; title cards
00063160                            		even
00063160                            ArtNem_TitleCard2:
00063160                            Nem_TitleCard3:
00063160                            			incbin	'art/nemesis/Font using large broken letters.bin'	; title cards
00063566                            		even
00063566                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00063686 00                         		even
00063686                            Unc_Lives:	incbin	artnem\lifeiconunc.bin	; life counter icon
00063806                            		even
00063806                            Unc_SuperLives:	incbin	"artnem\Super Sonic lives counter uncompressed.bin"	; life counter icon
00063986                            		even
00063986                            Nem_TailsLives:	incbin	artnem\mlifeicon.bin	; life counter icon
00063A66                            		even
00063A66                            Nem_MilesLives:	incbin	artnem\mileslifeicon.bin	; life counter icon
00063B4E 00                         		even
00063B4E                            Nem_Ring:	incbin	artnem\ringsnew.bin	; rings
00063C44                            		even
00063C44                            Nem_Ring_S:	incbin	artnem\ringsnew.bin	; rings
00063D3A                            		even
00063D3A                            Nem_Monitors:	incbin	"artnem\(Mercury) Monitors (optimised alt).bin"
000641CA 00                         		even
000641CA                            Nem_TailsMonitors:	incbin	artnem\tailsmonitors.bin	; monitors
0006461A                            		even
0006461A                            Nem_Explode:	incbin	artnem\explosios3.bin	; explosion
0006498E                            		even
0006498E                            Nem_BossExplode:	incbin	artnem\bexplosio.bin	; explosion
00064CDA                            		even
00064CDA                            Unc_PauseMenu:	incbin	artnem\PauseMenuStuffunc.bin
00064E5A                            		even
00064E5A                            Unc_Points:	incbin	artnem\pointsunc.bin	; points from destroyed enemy or object
00064F7A                            		even
00064F7A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
000651A8                            		even
000651A8                            Nem_HSpring:	incbin	artnem\springh2nd.bin	; horizontal spring
000652D2 00                         		even
000652D2                            Nem_VSpring:	incbin	artnem\springv2nd.bin	; vertical spring
000653BE 00                         		even
000653BE                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0006581E                            		even
0006581E                            Nem_TailsSignPost:	incbin	artnem\tailssignpost.bin	; end of level signpost
00065C88 00                         		even
00065C88                            Nem_SignPostMetal:	incbin	artnem\msignpost.bin	; end of level signpost
000660F2 00                         		even
000660F2                            Nem_Lamp:	incbin	artnem\lampposts2.bin	; lamppost
000661F0                            		even
000661F0                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00066364                            		even
00066364                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00066666                            		even
00066666                            Unc_PauseMenuBG:	incbin	"#artunc\Pause BG.bin"
000666E6                            		even
000666E6                            ; ---------------------------------------------------------------------------
000666E6                            ; Compressed graphics - continue screen
000666E6                            ; ---------------------------------------------------------------------------
000666E6                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00066996                            		even
00066996                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00066BD0                            		even
00066BD0                            ; ---------------------------------------------------------------------------
00066BD0                            ; Compressed graphics - animals
00066BD0                            ; ---------------------------------------------------------------------------
00066BD0                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00066D28                            		even
00066D28                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00066E84                            		even
00066E84                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00067000                            		even
00067000                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0006711C                            		even
0006711C                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00067252                            		even
00067252                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0006738C                            		even
0006738C                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000674E8                            		even
000674E8                            ; ---------------------------------------------------------------------------
000674E8                            ; Compressed graphics - primary patterns and block mappings
000674E8                            ; ---------------------------------------------------------------------------
000674E8                            Blk16_Title:	incbin	map16\titlebg.bin
00067726                            		even
00067726                            Blk256_Title:	incbin	map256\titlebg.bin
000678CA                            		even
000678CA                            Blk16_GHZ:	incbin	"map16\map16 128\ghz.bin"
00067EF0                            		even
00067EF0                            Nem_GHZ:		incbin	artnem\8x8ghzkos.bin	 ; New GHZ file.
00069F0C                            				even
00069F0C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1kos.bin; GHZ primary patterns
0006B374                            		even
0006B374                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2kos.bin; GHZ secondary patterns
0006C636                            		even
0006C636                            Blk16_TS:	incbin	map16\ts.bin
0006CFD6                            		even
0006CFD6                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
0006E5E8                            		even
0006E5E8                            Blk256_GHZ:	incbin	"map256\map256 128\ghz.bin"
0006E864                            		even
0006E864                            Blk16_LZ:	incbin	"map16\map16 128\lz.bin"
0006ED4A                            		even
0006ED4A                            Nem_LZ:		incbin	artnem\8x8lzkos.bin; LZ primary patterns
000707F0 00                         		even
000707F0                            Blk256_LZ:	incbin	"map256\map256 128\lz.bin"
00072C78                            		even
00072C78                            Blk16_MZ:	incbin	"map16\map16 128\mz.bin"
000734D0                            		even
000734D0                            Nem_MZ:		incbin	artnem\8x8mzkos.bin; MZ primary patterns
0007560C 00                         		even
0007560C                            Blk256_MZ:	incbin	"map256\map256 128\mz.bin"
00076D44                            		even
00076D44                            Blk16_SLZ:	incbin	"map16\map16 128\slz.bin"
0007776A                            		even
0007776A                            Nem_SLZ:	incbin	artnem\8x8slzkos.bin; SLZ primary patterns
0007A0D0 00                         		even
0007A0D0                            Blk256_SLZ:	incbin	"map256\map256 128\slz.bin"
0007C04C                            		even
0007C04C                            Blk16_SYZ:	incbin	"map16\map16 128\syz.bin"
0007CA62                            		even
0007CA62                            Nem_SYZ:	incbin	artnem\8x8syzkos.bin; SYZ primary patterns
0007F2B2                            		even
0007F2B2                            Blk256_SYZ:	incbin	"map256\map256 128\syz.bin"
0008159C                            		even
0008159C                            Blk16_SBZ:	incbin	"map16\map16 128\sbz.bin"
000822FA                            		even
000822FA                            Nem_SBZ:	incbin	artnem\8x8sbzkos.bin; SBZ primary patterns
000846EC 00                         		even
000846EC                            Blk256_SBZ:	incbin	"map256\map256 128\sbz.bin"
00087270 00                         		even
00087270                            Blk16_ABZ:	incbin	"LevelConverter\abz1\Blocks.bin"
0008750E                            		even
0008750E                            Nem_ABZ:	incbin	artnem\8x8abzkos.bin	; ABZ primary patterns
00087D00                            		even
00087D00                            Blk256_ABZ:	incbin	"LevelConverter\abz1\Chunks.bin"
00087E88                            		even
00087E88                            ; ---------------------------------------------------------------------------
00087E88                            ; Act2
00087E88                            ; ---------------------------------------------------------------------------
00087E88                            Blk16_GHZ2:	incbin	"map16\map16 128 2\ghz2.bin"
00088138                            		even
00088138                            Nem_GHZ2:		incbin	artnem\8x8ghzkos_2.bin	 ; New GHZ file.
0008A058                            				even
0008A058                            Nem_GHZ2_1st:	incbin	artnem\8x8ghz12.bin; GHZ primary patterns
0008B6B8                            		even
0008B6B8                            Nem_GHZ2_2nd:	incbin	artnem\8x8ghz22kos.bin; GHZ secondary patterns
0008C97A                            		even
0008C97A                            Blk256_GHZ2:	incbin	"map256\map256 128 2\ghz2.bin"
0008CAE0                            		even
0008CAE0                            Blk16_LZ2:	incbin	"map16\map16 128 2\lz2.bin"
0008CFC6                            		even
0008CFC6                            Nem_LZ2:	incbin	artnem\8x8lz2kos.bin; LZ primary patterns
0008EA6C 00                         		even
0008EA6C                            Blk256_LZ2:	incbin	"map256\map256 128 2\lz2.bin"
00090EF4                            		even
00090EF4                            Blk16_MZ2:	incbin	"map16\map16 128 2\mz2.bin"
0009174C                            		even
0009174C                            Nem_MZ2:	incbin	artnem\8x8mz2kos.bin; MZ primary patterns
00093888 00                         		even
00093888                            Blk256_MZ2:	incbin	"map256\map256 128 2\mz2.bin"
00094FC0                            		even
00094FC0                            Blk16_SLZ2:	incbin	"map16\map16 128 2\slz2.bin"
000959E6                            		even
000959E6                            Nem_SLZ2:	incbin	artnem\8x8slz2kos.bin; SLZ primary patterns
0009834C 00                         		even
0009834C                            Blk256_SLZ2:	incbin	"map256\map256 128 2\slz2.bin"
0009A2C8                            		even
0009A2C8                            Blk16_SYZ2:	incbin	"map16\map16 128 2\syz2.bin"
0009ACDE                            		even
0009ACDE                            Nem_SYZ2:	incbin	artnem\8x8syz2kos.bin; SYZ primary patterns
0009D52E                            		even
0009D52E                            Blk256_SYZ2:	incbin	"map256\map256 128 2\syz2.bin"
0009F818                            		even
0009F818                            Blk16_SBZ2:	incbin	"map16\map16 128 2\sbz2.bin"
000A0576                            		even
000A0576                            Nem_SBZ2:	incbin	artnem\8x8sbz2kos.bin; SBZ primary patterns
000A2968 00                         		even
000A2968                            Blk256_SBZ2:	incbin	"map256\map256 128 2\sbz2.bin"
000A54EC 00                         		even
000A54EC                            Blk16_ABZ2:	incbin	"LevelConverter\abz2\Blocks.bin"
000A578A                            		even
000A578A                            Nem_ABZ2:	incbin	artnem\8x8abz2kos.bin	; ABZ primary patterns
000A5F7C                            		even
000A5F7C                            Blk256_ABZ2:	incbin	"LevelConverter\abz2\Chunks.bin"
000A60FE                            		even
000A60FE                            ; ---------------------------------------------------------------------------
000A60FE                            ; Act3
000A60FE                            ; ---------------------------------------------------------------------------
000A60FE                            Blk16_GHZ3:	incbin	"map16\map16 128 3\ghz3.bin"
000A63AE                            		even
000A63AE                            Nem_GHZ3:		incbin	artnem\8x8ghzkos_3.bin	 ; New GHZ file.
000A82CE                            				even
000A82CE                            Nem_GHZ3_1st:	incbin	artnem\8x8ghz13.bin; GHZ primary patterns
000A992E                            		even
000A992E                            Nem_GHZ3_2nd:	incbin	artnem\8x8ghz23kos.bin; GHZ secondary patterns
000AABF0                            		even
000AABF0                            Blk256_GHZ3:	incbin	"map256\map256 128 3\ghz3.bin"
000AAD56                            		even
000AAD56                            Blk16_LZ3:	incbin	"map16\map16 128 3\lz3.bin"
000AB23C                            		even
000AB23C                            Nem_LZ3:	incbin	artnem\8x8lz3kos.bin; LZ primary patterns
000ACCE2 00                         		even
000ACCE2                            Blk256_LZ3:	incbin	"map256\map256 128 3\lz3.bin"
000AF16A                            		even
000AF16A                            Blk16_MZ3:	incbin	"map16\map16 128 3\mz3.bin"
000AF9C2                            		even
000AF9C2                            Nem_MZ3:	incbin	artnem\8x8mz3kos.bin; MZ primary patterns
000B1AFE 00                         		even
000B1AFE                            Blk256_MZ3:	incbin	"map256\map256 128 3\mz3.bin"
000B3236                            		even
000B3236                            Blk16_SLZ3:	incbin	"map16\map16 128 3\slz3.bin"
000B3C5C                            		even
000B3C5C                            Nem_SLZ3:	incbin	artnem\8x8slz3kos.bin; SLZ primary patterns
000B65C2 00                         		even
000B65C2                            Blk256_SLZ3:	incbin	"map256\map256 128 3\slz3.bin"
000B853E                            		even
000B853E                            Blk16_SYZ3:	incbin	"map16\map16 128 3\syz3.bin"
000B8F54                            		even
000B8F54                            Nem_SYZ3:	incbin	artnem\8x8syz3kos.bin; SYZ primary patterns
000BB7A4                            		even
000BB7A4                            Blk256_SYZ3:	incbin	"map256\map256 128 3\syz3.bin"
000BDA8E                            		even
000BDA8E                            Blk16_SBZ3:	incbin	"map16\map16 128 3\sbz3.bin"
000BE7EC                            		even
000BE7EC                            Nem_SBZ3:	incbin	artnem\8x8sbz3kos.bin; SBZ primary patterns
000C0BDE 00                         		even
000C0BDE                            Blk256_SBZ3:	incbin	"map256\map256 128 3\sbz3.bin"
000C3762 00                         		even
000C3762                            Blk16_ABZ3:	incbin	"LevelConverter\abz2\Blocks.bin"
000C3A00                            		even
000C3A00                            Nem_ABZ3:	incbin	artnem\8x8abz3kos.bin	; ABZ primary patterns
000C41F2                            		even
000C41F2                            Blk256_ABZ3:	incbin	"LevelConverter\abz2\Chunks.bin"
000C4374                            		even
000C4374                            ; ---------------------------------------------------------------------------
000C4374                            ; Kosiniski Compressed graphics - level art
000C4374                            ; ---------------------------------------------------------------------------
000C4374                            ;Kos_GHZ:	incbin	artkos\8x8ghz_kos.bin	; GHZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_LZ:	incbin	artkos\8x8lz_kos.bin	; LZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_MZ:	incbin	artkos\8x8mz_kos.bin	; MZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_SYZ:	incbin	artkos\8x8syz_kos.bin	; SYZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_SLZ:	incbin	artkos\8x8slz_kos.bin	; SLZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_SBZ:	incbin	artkos\8x8sbz_kos.bin	; SBZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_ABZ:	incbin	artkos\8x8abz_kos.bin	; ABZ primary patterns
000C4374                            ;		even
000C4374                            ;Kos_GHZ_2nd:	incbin	artnem\8x8ghz2_kos.bin; GHZ secondary patterns
000C4374                            ;		even
000C4374                            ; ---------------------------------------------------------------------------
000C4374                            ; Compressed graphics - bosses and ending sequence
000C4374                            ; ---------------------------------------------------------------------------
000C4374                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000C4BD8                            		even
000C4BD8                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000C4EC2                            		even
000C4EC2                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000C5746                            		even
000C5746                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000C5F72                            		even
000C5F72                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000C66DA                            		even
000C66DA                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000C6C5A                            		even
000C6C5A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000C6D7A                            		even
000C6D7A                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000C6F78                            		even
000C6F78                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000C8156                            		even
000C8156                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000C8A9A                            		even
000C8A9A                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000C8E70                            		even
000C8E70                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000C9400                            		even
000C9400                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000C9688                            		even
000C9688                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000C98CA                            		even
000C98CA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000C9B94 00                         		even
000C9B94                            		incbin	misc\padding2.bin
000C9C98                            		even
000C9C98                            ; ---------------------------------------------------------------------------
000C9C98                            ; Collision data
000C9C98                            ; ---------------------------------------------------------------------------
000C9C98                            AngleMap:	incbin	"collide\collide 128\anglemap.bin"	; floor angle map
000C9D98                            		even
000C9D98                            CollArray1:	incbin	"collide\collide 128\carray_n.bin"	; normal collision array
000CAD98                            		even
000CAD98                            CollArray2:	incbin	"collide\collide 128\carray_r.bin"	; rotated collision array
000CBD98                            		even
000CBD98                            Col_GHZ_1:	incbin	"collide\collide 128\ghz1.bin"	; GHZ index 1
000CBE56 00                         		even
000CBE56                            Col_GHZ_2:	incbin	"collide\collide 128\ghz2.bin"	; GHZ index 2
000CBF14 00                         		even
000CBF14                            Col_LZ_1:	incbin	"collide\collide 128\lz1.bin"	; LZ index 1
000CBFD8                            		even
000CBFD8                            Col_LZ_2:	incbin	"collide\collide 128\lz2.bin"		; LZ index 2
000CC09C                            		even
000CC09C                            Col_MZ_1:	incbin	"collide\collide 128\mz1.bin"		; MZ index 1
000CC22C                            		even
000CC22C                            Col_MZ_2:	incbin	"collide\collide 128\mz2.bin"		; MZ index 2
000CC3BC                            		even
000CC3BC                            Col_SLZ_1:	incbin	"collide\collide 128\slz1.bin"	; SLZ index 1
000CC55A                            		even
000CC55A                            Col_SLZ_2:	incbin	"collide\collide 128\slz2.bin"	; SLZ index 2
000CC6F8                            		even
000CC6F8                            Col_SYZ_1:	incbin	"collide\collide 128\syz1.bin"	; SYZ index 1
000CC8EC                            		even
000CC8EC                            Col_SYZ_2:	incbin	"collide\collide 128\syz2.bin"	; SYZ index 2
000CCAE0                            		even
000CCAE0                            Col_SBZ_1:	incbin	"collide\collide 128\sbz1.bin"	; SBZ index 1
000CCD38                            		even
000CCD38                            Col_SBZ_2:	incbin	"collide\collide 128\sbz2.bin"	; SBZ index 2
000CCF90                            		even
000CCF90                            Col_ABZ_1:	incbin	"LevelConverter\abz1\Indexes1.bin"		; ABZ index
000CCF9C                            		even
000CCF9C                            Col_ABZ_2:	incbin	"LevelConverter\abz1\Indexes2.bin"		; ABZ index
000CCFA8                            		even
000CCFA8                            ; ---------------------------------------------------------------------------
000CCFA8                            ; Special layouts
000CCFA8                            ; ---------------------------------------------------------------------------
000CCFA8                            SS_1:		incbin	sslayout\1.bin
000CD222                            		even
000CD222                            SS_2:		incbin	sslayout\2.bin
000CD634                            		even
000CD634                            SS_3:		incbin	sslayout\3.bin
000CD990                            		even
000CD990                            SS_4:		incbin	sslayout\4.bin
000CDE6A                            		even
000CDE6A                            SS_5:		incbin	sslayout\5.bin
000CE33C                            		even
000CE33C                            SS_6:		incbin	sslayout\6.bin
000CE64C                            		even
000CE64C                            SS_7:		incbin	sslayout\7.bin
000CE94A                            		even
000CE94A                            ; ---------------------------------------------------------------------------
000CE94A                            ; Animated uncompressed graphics
000CE94A                            ; ---------------------------------------------------------------------------
000CE94A                            Art_GhzWater:	incbin	#artunc\ghzwater.bin	; GHZ waterfall
000CEB4A                            		even
000CEB4A                            Art_GhzFlower1:	incbin	#artunc\ghzflowl.bin	; GHZ large flower
000CEF4A                            		even
000CEF4A                            Art_GhzFlower2:	incbin	#artunc\ghzflows.bin	; GHZ small flower
000CF3CA                            		even
000CF3CA                            Art_MzLava1:	incbin	#artunc\mzlava1.bin	; MZ lava surface
000CF6CA                            		even
000CF6CA                            Art_MzLava2:	incbin	#artunc\mzlava2.bin	; MZ lava
000CFCCA                            		even
000CFCCA                            Art_MzTorch:	incbin	#artunc\mztorch.bin	; MZ torch in background
000CFFCA                            		even
000CFFCA                            Art_SbzSmoke:	incbin	#artunc\sbzsmoke.bin	; SBZ smoke in background
000D0A4A                            		even
000D0A4A                            
000D0A4A                            ; ---------------------------------------------------------------------------
000D0A4A                            ; Level	layout index
000D0A4A                            ; ---------------------------------------------------------------------------
000D0A4A 0000 0000 0000 0000 0000+  Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70
000D0A56 0000 0000 0000 0000 0000+  		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
000D0A62 0000 0000 0000 0000 0000+  		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
000D0A6E 0000 0000 0000 0000 0000+  		dc.l byte_68F88, byte_68F88, byte_68F88
000D0A7A 0000 0000 0000 0000 0000+  		dc.l Level_LZ1, Level_LZbg, byte_69190
000D0A86 0000 0000 0000 0000 0000+  		dc.l Level_LZ2, Level_LZbg, byte_6922E
000D0A92 0000 0000 0000 0000 0000+  		dc.l Level_LZ3, Level_LZbg, byte_6934C
000D0A9E 0000 0000 0000 0000 0000+  		dc.l Level_SBZ3, Level_LZbg, byte_6940A
000D0AAA 0000 0000 0000 0000 0000+  		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
000D0AB6 0000 0000 0000 0000 0000+  		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
000D0AC2 0000 0000 0000 0000 0000+  		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
000D0ACE 0000 0000 0000 0000 0000+  		dc.l byte_697EA, byte_697EA, byte_697EA
000D0ADA 0000 0000 0000 0000 0000+  		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
000D0AE6 0000 0000 0000 0000 0000+  		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
000D0AF2 0000 0000 0000 0000 0000+  		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
000D0AFE 0000 0000 0000 0000 0000+  		dc.l byte_69B84, byte_69B84, byte_69B84
000D0B0A 0000 0000 0000 0000 0000+  		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
000D0B16 0000 0000 0000 0000 0000+  		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
000D0B22 0000 0000 0000 0000 0000+  		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
000D0B2E 0000 0000 0000 0000 0000+  		dc.l byte_69EE8, byte_69EE8, byte_69EE8
000D0B3A 0000 0000 0000 0000 0000+  		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
000D0B46 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
000D0B52 0000 0000 0000 0000 0000+  		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
000D0B5E 0000 0000 0000 0000 0000+  		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
000D0B6A 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D0B76 0000 0000 0000 0000 0000+  		dc.l Level_End, Level_GHZbg, byte_6A320
000D0B82 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D0B8E 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D0B9A 0000 0000 0000 0000 0000+  		dc.l Level_ABZ1, Level_ABZbg, byte_6A320
000D0BA6 0000 0000 0000 0000 0000+  		dc.l Level_ABZ2, Level_ABZbg, byte_6A320
000D0BB2 0000 0000 0000 0000 0000+  		dc.l Level_ABZ3, Level_ABZbg, byte_6A320
000D0BBE 0000 0000 0000 0000 0000+  		dc.l byte_6A320, byte_6A320, byte_6A320
000D0BCA                            
000D0BCA                            Level_GHZ1:	incbin	"levels\levels 128\ghz1.bin"
000D1BCA                            		even
000D1BCA 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000D1BCE                            Level_GHZ2:	incbin	"levels\levels 128\ghz2.bin"
000D2BCE                            		even
000D2BCE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000D2BD2                            Level_GHZ3:	incbin	"levels\levels 128\ghz3.bin"
000D3BD2                            		even
000D3BD2                            Level_GHZbg:	incbin	"levels\levels 128\ghzbg.bin"
000D3BF4                            		even
000D3BF4 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000D3BF8 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000D3BFC                            
000D3BFC                            Level_LZ1:	incbin	"levels\levels 128\lz1.bin"
000D4BFC                            		even
000D4BFC                            Level_LZbg:	incbin	"levels\levels 128\lzbg.bin"
000D4CFE                            		even
000D4CFE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000D4D02                            Level_LZ2:	incbin	"levels\levels 128\lz2.bin"
000D5D02                            		even
000D5D02 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000D5D06                            Level_LZ3:	incbin	"levels\levels 128\lz3.bin"
000D6D06                            		even
000D6D06                            Level_LZ3_WALL:	incbin	"levels\levels 128\lz3_wall.bin"	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
000D7D06                            		even
000D7D06 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000D7D0A                            Level_SBZ3:	incbin	"levels\levels 128\sbz3.bin"
000D8D0A                            		even
000D8D0A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000D8D0E                            
000D8D0E                            Level_MZ1:	incbin	"levels\levels 128\mz1.bin"
000D9D0E                            		even
000D9D0E                            Level_MZ1bg:	incbin	"levels\levels 128\mz1bg.bin"
000D9D88                            		even
000D9D88                            Level_MZ2:	incbin	"levels\levels 128\mz2.bin"
000DAD88                            		even
000DAD88                            Level_MZ2bg:	incbin	"levels\levels 128\mz2bg.bin"
000DAE1A                            		even
000DAE1A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000DAE1E                            Level_MZ3:	incbin	"levels\levels 128\mz3.bin"
000DBE1E                            		even
000DBE1E                            Level_MZ3bg:	incbin	"levels\levels 128\mz3bg.bin"
000DBEC2                            		even
000DBEC2 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000DBEC6 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000DBECA                            
000DBECA                            Level_SLZ1:	incbin	"levels\levels 128\slz1.bin"
000DCECA                            		even
000DCECA                            Level_SLZbg:	incbin	"levels\levels 128\slzbg.bin"
000DCF44                            		even
000DCF44                            Level_SLZ2:	incbin	"levels\levels 128\slz2.bin"
000DDF44                            		even
000DDF44                            Level_SLZ3:	incbin	"levels\levels 128\slz3.bin"
000DEF44                            		even
000DEF44 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000DEF48                            
000DEF48                            Level_SYZ1:	incbin	"levels\levels 128\syz1.bin"
000DFF48                            		even
000DFF48                            Level_SYZbg:	incbin	"levels\levels 128\syzbg.bin"
000DFF82                            		even
000DFF82 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000DFF86                            Level_SYZ2:	incbin	"levels\levels 128\syz2.bin"
000E0F86                            		even
000E0F86 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000E0F8A                            Level_SYZ3:	incbin	"levels\levels 128\syz3.bin"
000E1F8A                            		even
000E1F8A 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000E1F8E 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000E1F92                            
000E1F92                            Level_SBZ1:	incbin	"levels\levels 128\sbz1.bin"
000E2F92                            		even
000E2F92                            Level_SBZ1bg:	incbin	"levels\levels 128\sbz1bg.bin"
000E2FD0                            		even
000E2FD0                            Level_SBZ2:	incbin	"levels\levels 128\sbz2.bin"
000E3FD0                            		even
000E3FD0                            Level_SBZ2bg:	incbin	"levels\levels 128\sbz2bg.bin"
000E413A                            		even
000E413A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000E413E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000E4142                            Level_End:	incbin	"levels\levels 128\ending.bin"
000E5142                            		even
000E5142 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000E5146                            Level_ABZ1:	incbin	"LevelConverter\abz1\Layout.bin"
000E51B6                            		even
000E51B6                            Level_ABZ2:	incbin	"LevelConverter\abz2\Layout.bin"
000E5222                            		even
000E5222                            Level_ABZ3:	incbin	"LevelConverter\abz2\Layout.bin"
000E528E                            		even
000E528E                            Level_ABZbg:	incbin	levels\abzbg.bin
000E5358                            		even
000E5358                            
000E5358                            ; ---------------------------------------------------------------------------
000E5358                            ; Animated uncompressed giant ring graphics
000E5358                            ; ---------------------------------------------------------------------------
000E5358                            Art_BigRing:	incbin	#artunc\bigring.bin
000E5F98                            		even
000E5F98                            
000E5F98                            		incbin	misc\padding3.bin
000E6034                            		even
000E6034                            
000E6034                            ; ---------------------------------------------------------------------------
000E6034                            ; Sprite locations index
000E6034                            ; ---------------------------------------------------------------------------
000E6034 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6038 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E603C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6040 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6044 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6048 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E604C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6050 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6054 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6058 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E605C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6060 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6064 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6068 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E606C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6070 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6074 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6078 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E607C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6080 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6084 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6088 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E608C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6090 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6094 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E6098 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E609C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E60A0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E60A4 0000 0000                  		dc.w ObjPos_ABZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E60A8 0000 0000                  		dc.w ObjPos_ABZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E60AC 0000 0000                  		dc.w ObjPos_ABZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000E60B0                            ObjPos_LZxpf_Index:		
000E60B0 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E60B4 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
000E60B8 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
000E60BC 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
000E60C0                            ObjPos_SBZ1pf_Index:
000E60C0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E60C4 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
000E60C8 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
000E60CC 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
000E60D0 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000E60D6                            ObjPos_GHZ1:	incbin	"LevelConverter\Green Hill Zone Act 1\Objects.bin"
000E65F8                            		even
000E65F8                            ObjPos_GHZ2:	incbin	"LevelConverter\Green Hill Zone Act 2\Objects.bin"
000E6BC8                            		even
000E6BC8                            ObjPos_GHZ3:	incbin	"LevelConverter\Green Hill Zone Act 3\Objects.bin"
000E7294                            		even
000E7294                            ObjPos_LZ1:	incbin	"LevelConverter\Labyrinth Zone Act 1\Objects.bin"
000E7702                            		even
000E7702                            ObjPos_LZ2:	incbin	"LevelConverter\Labyrinth Zone Act 2\Objects.bin"
000E7A44                            		even
000E7A44                            ObjPos_LZ3:	incbin	"LevelConverter\Labyrinth Zone Act 3\Objects.bin"
000E8026                            		even
000E8026                            ObjPos_SBZ3:	incbin	"LevelConverter\Scrap Brain Zone Act 3\Objects.bin"
000E84BE                            		even
000E84BE                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000E84F0                            		even
000E84F0                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000E8522                            		even
000E8522                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000E8554                            		even
000E8554                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000E8586                            		even
000E8586                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000E85D0                            		even
000E85D0                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000E860E                            		even
000E860E                            ObjPos_MZ1:	incbin	"LevelConverter\Marble Zone Act 1\Objects.bin"
000E897A                            		even
000E897A                            ObjPos_MZ2:	incbin	"LevelConverter\Marble Zone Act 2\Objects.bin"
000E8E24                            		even
000E8E24                            ObjPos_MZ3:	incbin	"LevelConverter\Marble Zone Act 3\Objects.bin"
000E939A                            		even
000E939A                            ObjPos_SLZ1:	incbin	"LevelConverter\Star Light Zone Act 1\Objects.bin"
000E98F2                            		even
000E98F2                            ObjPos_SLZ2:	incbin	"LevelConverter\Star Light Zone Act 2\Objects.bin"
000E9DAE                            		even
000E9DAE                            ObjPos_SLZ3:	incbin	"LevelConverter\Star Light Zone Act 3\Objects.bin"
000EA3D8                            		even
000EA3D8                            ObjPos_SYZ1:	incbin	"LevelConverter\Spring Yard Zone Act 1\Objects.bin"
000EA864                            		even
000EA864                            ObjPos_SYZ2:	incbin	"LevelConverter\Spring Yard Zone Act 2\Objects.bin"
000EADCE                            		even
000EADCE                            ObjPos_SYZ3:	incbin	"LevelConverter\Spring Yard Zone Act 3\Objects.bin"
000EB3D4                            		even
000EB3D4                            ObjPos_SBZ1:	incbin	"LevelConverter\Scrap Brain Zone Act 1\Objects.bin"
000EBB12                            		even
000EBB12                            ObjPos_SBZ2:	incbin	"LevelConverter\Scrap Brain Zone Act 2\Objects.bin"
000EC1F0                            		even
000EC1F0                            ObjPos_FZ:	incbin	"LevelConverter\Final Zone\Objects.bin"
000EC202                            		even
000EC202                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000EC234                            		even
000EC234                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000EC266                            		even
000EC266                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000EC298                            		even
000EC298                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000EC2CA                            		even
000EC2CA                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000EC2FC                            		even
000EC2FC                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000EC334                            		even
000EC334                            ObjPos_End:	incbin	"LevelConverter\Ending\Objects.bin"
000EC490                            		even
000EC490                            ObjPos_ABZ1:	incbin	"LevelConverter\abz1\Objects.bin"
000EC4A2                            		even
000EC4A2                            ObjPos_ABZ2:	incbin	"LevelConverter\abz2\Objects.bin"
000EC4A8                            		even
000EC4A8                            ObjPos_ABZ3:	incbin	"LevelConverter\abz2\Objects.bin"
000EC4AE                            		even
000EC4AE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000EC4B4                            ; ---------------------------------------------------------------------------
000EC4B4                            		incbin	misc\padding4.bin
000ECADE                            		even
000ECADE                            
000ECADE                            	include	'#screens\DAC_Player.asm'
000ECADE                            DAC_Player:
000ECADE 70E4                       	moveq	#$FFFFFFE4,d0
000ECAE0 4EB8 325C                  	jsr	PlaySound_Special
000ECAE4                            
000ECAE4 4EB8 3754                  	jsr	ClearPLC
000ECAE8 4EB8 4528                  	jsr	Pal_FadeFrom
000ECAEC 4DF9 00C0 0004             	lea	($C00004).l,a6
000ECAF2                            
000ECAF2                            	; store VDP registers
000ECAF2 3CBC 8004                  	move.w	#$8004,(a6)	; $00
000ECAF6 3CBC 8230                  	move.w	#$8230,(a6)	; $02, set Plane A nametable offset in VRAM
000ECAFA 3CBC 8407                  	move.w	#$8407,(a6)	; $04, set Plane B nametable offset in VRAM
000ECAFE 3CBC 8700                  	move.w	#$8700,(a6)     ; $07, set Blackdrop Color
000ECB02 3CBC 8B00                  	move.w	#$8B00,(a6)	; $0B, set Scrolling Mode
000ECB06                            
000ECB06 4238 F64E                  	clr.b	($FFFFF64E).w	; clear water palette state
000ECB0A 46FC 2700                  	move	#$2700,sr	; disable interrupts
000ECB0E 33FC 8134 00C0 0004        	move.w	#$8134,($C00004).l
000ECB16 4EB8 3084                  	jsr	ClearScreen
000ECB1A                            
000ECB1A 4DF9 00C0 0000             	lea	($C00000).l,a6
000ECB2A 41F9 0002 99FE             	lea	(Art_Text).l,a0
000ECB30 7216                       	moveq	#$16,d1
000ECB32 2C98                       @0	move.l	(a0)+,(a6)
000ECB34 2C98                       	move.l	(a0)+,(a6)
000ECB36 2C98                       	move.l	(a0)+,(a6)
000ECB38 2C98                       	move.l	(a0)+,(a6)
000ECB3A 2C98                       	move.l	(a0)+,(a6)
000ECB3C 2C98                       	move.l	(a0)+,(a6)
000ECB3E 2C98                       	move.l	(a0)+,(a6)
000ECB40 2C98                       	move.l	(a0)+,(a6)
000ECB42 51C9 FFEE                          dbf	d1,@0
000ECB46                            
000ECB46 7003                       	moveq	#3,d0		; load Sonic's pallet
000ECB48 4EB8 47FA                  	jsr	PalLoad1
000ECB4C 0838 0007 F604             	btst	#7,($FFFFF604).w ; is Start button pressed?
000ECB52 6700                       	beq.s	DAC_DoNothing	; if not, branch
000ECB54 11FC 0000 F600             	move.b	#0,($FFFFF600).w
000ECB5A 4E75                       	rts
000ECB5C                            DAC_DoNothing:
000ECB5C 4EB8 446E                  	jsr	Pal_FadeTo
000ECB60                            
000ECB60 33FC 8174 00C0 0004        	move.w	#$8174,($C00004).l
000ECB68 7C80                       	moveq	#$FFFFFF80,d6	; start sample
000ECB6A 2E06                       	move.l	d6,d7
000ECB6C 7600                       	moveq	#0,d3
000ECB6E 7A00                       	moveq	#0,d5
000ECB70 4879 0000 0000             	pea	Player_MainProcess
000ECB76                            
000ECB76                            ; ==========================================================
000ECB76                            
000ECB76                            Player_Redraw:
000ECB76                            
000ECB76                            	; Draw Cursor
000ECB76 7001                       	moveq	#1,d0		; cursor pattern
000ECB78 4A45                       	tst.w	d5
000ECB7A 6700                       	beq.s	@2
000ECB7C 4840                       	swap	d0
000ECB88 3C80                       	move.w	d0,(a6)
000ECB8A 4840                       	swap	d0
000ECB96 3C80                       	move.w	d0,(a6)
000ECB98                            
000ECB98                            	; Draw Sample numbers
000ECBA2 3006                       	move.w	d6,d0		; load PCM A Number
000ECBA4 6100                       	bsr.s	@Draw
000ECBA6 3007                       	move.w	d7,d0		; load PCM B Number
000ECBB2 6100                       	bsr.s	@Draw
000ECBB4                            	
000ECBB4                            	; Debug draw
000ECBBE 3004                       	move.w	d4,d0
000ECBC0                            
000ECBC0                            @Draw:
000ECBC0 3200                       	move.w	d0,d1
000ECBC2 E809                       	lsr.b	#4,d1
000ECBC4 0241 000F                  	andi.w	#$F,d1
000ECBC8 0C41 000A                  	cmpi.w	#$A,d1
000ECBCC 6500                       	bcs.s	@0
000ECBCE 5841                       	addq.w	#4,d1
000ECBD0 5241                       @0	addq.w	#1,d1
000ECBD2 3C81                       	move.w	d1,(a6)
000ECBD4                            
000ECBD4 3200                       	move.w	d0,d1
000ECBD6 0241 000F                  	andi.w	#$F,d1
000ECBDA 0C41 000A                  	cmpi.w	#$A,d1
000ECBDE 6500                       	bcs.s	@1
000ECBE0 5841                       	addq.w	#4,d1
000ECBE2 5241                       @1	addq.w	#1,d1
000ECBE4 3C81                       	move.w	d1,(a6)
000ECBE6 4E75                       	rts
000ECBE8                            
000ECBE8                            ; ==========================================================
000ECBE8                            
000ECBE8                            Player_MainProcess:
000ECBE8 11FC 0002 F62A             	move.b	#2,($FFFFF62A).w
000ECBEE 4EB9 0000 8D72             	jsr	DelayProgram
000ECBF4 6100 0000                  	bsr	DebugShit
000ECBF8 1238 F605                  	move.b	Joypad|Press,d1
000ECBFC 67EA                       	beq.s	Player_MainProcess
000ECBFE 6A00                       	bpl.s	@ControlPlayer
000ECC00 4E75                       	rts
000ECC02                            
000ECC02                            @ControlPlayer:     
000ECC02 487A FFE4                  	pea	Player_MainProcess
000ECC06 74FF                       	moveq	#-1,d2
000ECC08 0801 0002                  	btst	#iLeft,d1
000ECC0C 6600                       	bne.s	@ChangeNumber
000ECC0E 0801 0003                  	btst	#iRight,d1
000ECC12 6700                       	beq.s	@ChangeCursor
000ECC14 7401                       	moveq	#1,d2
000ECC16                            
000ECC16                            @ChangeNumber:  
000ECC16 4A45                       	tst.w	d5
000ECC18 6700                       	beq.s	@0
000ECC1A DE42                       	add.w	d2,d7		; PCM B
000ECC1C 6000 FF58                  	bra	Player_Redraw
000ECC20 DC42                       @0	add.w	d2,d6		; PCM A
000ECC22 6000 FF52                  	bra	Player_Redraw
000ECC26                            
000ECC26                            @ChangeCursor:
000ECC26 1401                       	move.b	d1,d2
000ECC28 0202 0003                  	andi.b	#Up+Down,d2
000ECC2C 6700                       	beq.s	@ChangeMode
000ECC2E 4645                       	not.w	d5
000ECC30 6000 FF44                  	bra	Player_Redraw
000ECC34                            
000ECC34                            @ChangeMode:
000ECC34 0801 0006                  	btst	#iA,d1
000ECC38 6700                       	beq.s	@PlaySample
000ECC3A 4643                       	not.w	d3
000ECC3C 3003                       	move.w	d3,d0
000ECC3E 4EF8 31DC                  	jmp	Set_MegaPCM_Mode
000ECC42                            
000ECC42                            @PlaySample:
000ECC42 4A45                       	tst.w	d5
000ECC44 6700                       	beq.s	@1
000ECC46 3007                       	move.w	d7,d0
000ECC48 4EF8 31B0                  	jmp	PlaySample_2
000ECC4C 3006                       @1	move.w	d6,d0
000ECC4E 4EF8 3184                  	jmp	PlaySample
000ECC52                            
000ECC52                            ; ==========================================================
000ECC52                            DebugShit:
000ECC52 33FC 0100 00A1 1100        	move.w	#$100,($A11100).l	; stop the Z80
000ECC5A 0839 0000 00A1 1100        @0	btst	#0,($A11100).l
000ECC62 66F6                       	bne.s	@0
000ECC64 1839 00A0 1FF2             	move.b	$A01ff2,d4
000ECC6A 33FC 0000 00A1 1100        	move.w	#0,($A11100).l
000ECC72 6000 FF02                  	bra	Player_Redraw
000ECC72 6000 FF02                  	bra	Player_Redraw
000ECC76                            	
000ECC76                            ;	include	'_inc\ASCII texts.asm'
000ECC76                            ;	include '_inc\Selchar.asm'
000ECC76                            ;	include '_inc\pausemenu.asm'
000ECC76                            ; end of 'ROM'
000ECC76                            	include	"SSRG\SSRG.asm"
000ECC76                            ; ===========================================================================
000ECC76                            ; ---------------------------------------------------------------------------
000ECC76                            ; SSRG Splash Screen
000ECC76                            ; ---------------------------------------------------------------------------
000ECC76                            
000ECC76                            SSRGScreen:
000ECC76 70E4                       		moveq	#$FFFFFFE4,d0				; set music ID to "stop music"
000ECC78 4EB8 325C                  		jsr	PlaySound_Special			; play ID
000ECC7C 4EB8 3754                  		jsr	ClearPLC				; clear pattern load cues list
000ECC80 4EB8 4528                  		jsr	Pal_FadeFrom				; fade palettes out
000ECC84 4EB8 3084                  		jsr	ClearScreen				; clear the plane mappings
000ECC88 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram address to a1
000ECC8C 7000                       		moveq	#$00,d0					; clear d0
000ECC8E 323C 01FF                  		move.w	#$01FF,d1				; set repeat times
000ECC92                            
000ECC92                            SRG_ClearObjects:
000ECC92 22C0                       		move.l	d0,(a1)+				; clear object ram
000ECC94 22C0                       		move.l	d0,(a1)+				; ''
000ECC96 22C0                       		move.l	d0,(a1)+				; ''
000ECC98 22C0                       		move.l	d0,(a1)+				; ''
000ECC9A 51C9 FFF6                  		dbf	d1,SRG_ClearObjects			; repeat til all object slots are cleared
000ECC9E 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ECCA2 4DF9 00C0 0004             		lea	($C00004).l,a6				; load VDP address port address
000ECCA8 3CBC 8700                  		move.w	#$8700,(a6)				; set backdrop colour to the very first colour
000ECCAC 3CBC 8B03                  		move.w	#$8B03,(a6)				; set scroll mode to horizontal sliced (by line)
000ECCB0 21FC FFF8 FFD4 F616        		move.l	#$FFF8FFD4,($FFFFF616).w		; set Y scroll positions
000ECCB8 23FC 4020 0000 00C0 0004   		move.l	#$40200000,($C00004).l			; set VDP to V-Ram write mode with address
000ECCC2 41FA 0000                  		lea	ArtMain_SSRG(pc),a0			; load compressed art address
000ECCC6 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ECCCA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l			; set VDP to V-Ram write mode with address
000ECCD4 41FA 0000                  		lea	ArtSquare_SSRG(pc),a0			; load compressed art address
000ECCD8 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ECCDC 23FC 4000 0002 00C0 0004   		move.l	#$40000002,($C00004).l			; set VDP to V-Ram write mode with address
000ECCE6 41FA 0000                  		lea	ArtSonic_SSRG(pc),a0			; load compressed art address
000ECCEA 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ECCEE 23FC 5000 0002 00C0 0004   		move.l	#$50000002,($C00004).l			; set VDP to V-Ram write mode with address
000ECCF8 41FA 0000                  		lea	ArtLink_SSRG(pc),a0			; load compressed art address
000ECCFC 4EB8 3596                  		jsr	NemDec					; decompress and dump
000ECD00 41FA 0000                  		lea	MapLink_SSRG(pc),a0			; load compressed mappings address
000ECD04 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ECD0A 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ECD0E 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ECD14 701F                       		moveq	#$1F,d0					; set number of columns
000ECD16 7200                       		moveq	#$00,d1					; set number of rows
000ECD18 243C 4C08 0003             		move.l	#$4C080003,d2				; set to write to FG plane
000ECD1E 6100 0000                  		bsr	MapScreen				; write to the map plane
000ECD22 41FA 0000                  		lea	MapMain_SSRG(pc),a0			; load compressed mappings address
000ECD26 43F9 FFFF 0000             		lea	($FFFF0000).l,a1			; set temporary ram space to dump to
000ECD2C 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ECD30 41FA 0000                  		lea	MapSquare_SSRG(pc),a0			; load compressed mappings address
000ECD34 43F9 FFFF 4000             		lea	($FFFF4000).l,a1			; set temporary ram space to dump to
000ECD3A 4EB8 3A26                  		jsr	KosDec					; decompress and dump
000ECD3E 41FA 0000                  		lea	Pal_SSRG(pc),a0				; load palette address to a0
000ECD42 43F8 FB80                  		lea	($FFFFFB80).w,a1			; load palette buffer address to a1
000ECD46 7E07                       		moveq	#$07,d7					; set repeat times
000ECD48                            
000ECD48                            SRG_DumpPal:
000ECD48 22D8                       		move.l	(a0)+,(a1)+				; dump palette
000ECD4A 22D8                       		move.l	(a0)+,(a1)+				; ''
000ECD4C 22D8                       		move.l	(a0)+,(a1)+				; ''
000ECD4E 22D8                       		move.l	(a0)+,(a1)+				; ''
000ECD50 51CF FFF6                  		dbf	d7,SRG_DumpPal				; repeat until done
000ECD54 43F8 D000                  		lea	($FFFFD000).w,a1			; load object ram to a1
000ECD58 12BC 0001                  		move.b	#$01,(a1)				; set "S"
000ECD5C 137C 0002 0040             		move.b	#$02,$40(a1)				; set "S"
000ECD62 137C 0003 0080             		move.b	#$03,$80(a1)				; set "R"
000ECD68 137C 0004 00C0             		move.b	#$04,$C0(a1)				; set "G"
000ECD6E 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ECD72 4EB8 446E                  		jsr	Pal_FadeTo				; fade palettes in
000ECD76 7000                       		moveq	#$00,d0					; clear d0
000ECD78 23C0 FFFF 7800             		move.l	d0,($FFFF7800).l			; reset SSRG timer/flags
000ECD7E 23C0 FFFF 7804             		move.l	d0,($FFFF7804).l			; ''
000ECD84 23C0 FFFF 7808             		move.l	d0,($FFFF7808).l			; ''
000ECD8A                            
000ECD8A                            ; ---------------------------------------------------------------------------
000ECD8A                            ; SSRG Splash Screen main loop
000ECD8A                            ; ---------------------------------------------------------------------------
000ECD8A                            
000ECD8A                            SSRGScreen_Loop:
000ECD8A 11FC 0004 F62A             		move.b	#$04,($FFFFF62A).w			; set V-Blank routine to run
000ECD90 4EB9 0000 8D72             		jsr	DelayProgram				; hult til V-Blank begins
000ECD96 5279 FFFF 7800             		addq.w	#$01,($FFFF7800).l			; increase timer
000ECD9C 41F8 D000                  		lea	($FFFFD000).w,a0			; load "S" object ram
000ECDA0 6100 0000                  		bsr	ObjectLetters				; run "S"
000ECDA4 41E8 0040                  		lea	$40(a0),a0				; load "S" object ram
000ECDA8 6100 0000                  		bsr	ObjectLetters				; run "S"
000ECDAC 41E8 0040                  		lea	$40(a0),a0				; load "R" object ram
000ECDB0 6100 0000                  		bsr	ObjectLetters				; run "R"
000ECDB4 41E8 0040                  		lea	$40(a0),a0				; load "G" object ram
000ECDB8 6100 0000                  		bsr	ObjectLetters				; run "G"
000ECDBC 41E8 0040                  		lea	$40(a0),a0				; load Square object ram
000ECDC0 6100 0000                  		bsr	ObjectSquare				; run Square
000ECDC4 41F8 D140                  		lea	($FFFFD140).w,a0			; load Neon Sonic object ram
000ECDC8 6100 0000                  		bsr	ObjectSonicNeon				; run Neon Sonic
000ECDCC 6100 0000                  		bsr	SRG_ScrollFG				; scroll the FG plane correctly
000ECDD0 6100 0000                  		bsr	SRG_DrawFG				; draw the FG plane correctly
000ECDD4 4EB9 0001 5C8C             		jsr	BuildSprites				; present all object sprites on screen
000ECDDA 4A38 F605                  		tst.b	($FFFFF605).w				; has player 1 pressed start button?
000ECDDE 6B00 0000                  		bmi	SSRGScreen_Finish			; if so, branch
000ECDE2 0C79 0200 FFFF 7800        		cmpi.w	#$0200,($FFFF7800).l			; has timer finished?
000ECDEA 6D9E                       		blt	SSRGScreen_Loop				; if not, loop
000ECDEC                            
000ECDEC                            SSRGScreen_Finish:
000ECDEC 4EB9 0000 0000             		jsr	SRScreen ; go to next screen
000ECDF2 4E75                       		rts						; return
000ECDF4                            
000ECDF4                            ; ===========================================================================
000ECDF4                            ; ---------------------------------------------------------------------------
000ECDF4                            ; Subroutine to control the FG scrolling
000ECDF4                            ; ---------------------------------------------------------------------------
000ECDF4                            
000ECDF4                            SRG_ScrollFG:
000ECDF4 43F8 CDCC                  		lea	($FFFFCDCC).w,a1			; load the horizontal scroll buffer address
000ECDF8 7000                       		moveq	#$00,d0					; clear d0
000ECDFA 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ECE00 0640 0030                  		addi.w	#$0030,d0				; increase to scroll in sooner
000ECE04 0C40 00F7                  		cmpi.w	#$00F7,d0				; has timer reached finish?
000ECE08 6C00 0000                  		bge	SRG_FinFGScroll				; if not, branch
000ECE0C D040                       		add.w	d0,d0					; multiply by 2
000ECE0E 4440                       		neg.w	d0					; negate to move left insted
000ECE10 4840                       		swap	d0					; send left for FG
000ECE12 7E1F                       		moveq	#$1F,d7					; set repeat times
000ECE14                            
000ECE14                            SRG_SFG_Scroll01:
000ECE14 22C0                       		move.l	d0,(a1)+				; dump to buffer
000ECE16 51CF FFFC                  		dbf	d7,SRG_SFG_Scroll01			; repeat til this section is done
000ECE1A                            
000ECE1A                            SRG_FinFGScroll:
000ECE1A 43F8 CC00                  		lea	($FFFFCC00).w,a1			; load the horizontal scroll buffer address
000ECE1E 3039 FFFF 7808             		move.w	($FFFF7808).l,d0			; set BG position
000ECE24 3E3C 00DF                  		move.w	#$00DF,d7				; set repeat times
000ECE28                            
000ECE28                            SRG_SBG_Scroll02:
000ECE28 5449                       		addq.w	#$02,a1					; skip FG
000ECE2A 32C0                       		move.w	d0,(a1)+				; dump BG
000ECE2C 51CF FFFA                  		dbf	d7,SRG_SBG_Scroll02			; repeat for all scanlines
000ECE30 4E75                       		rts						; return
000ECE32                            
000ECE32                            ; ===========================================================================
000ECE32                            ; ---------------------------------------------------------------------------
000ECE32                            ; Subroutine to control the FG map/drawing
000ECE32                            ; ---------------------------------------------------------------------------
000ECE32                            
000ECE32                            SRG_DrawFG:
000ECE32 7000                       		moveq	#$00,d0					; clear d0
000ECE34 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer as position
000ECE3A D040                       		add.w	d0,d0					; multiply by 2
000ECE3C 0440 0040                  		subi.w	#$0040,d0				; subtract starting point
000ECE40 0C40 0110                  		cmpi.w	#$0110,d0				; has the scrolling surpassed the starting or ending par?
000ECE44 6200 0000                  		bhi	SRG_DFG_FlashOn				; if so, branch
000ECE48 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ECE4C 49F9 FFFF 0000             		lea	($FFFF0000).l,a4			; load map buffer space address to a4
000ECE52 4BF9 00C0 0000             		lea	($C00000).l,a5				; load VDP data port address to a5
000ECE58 4DED 0004                  		lea	$04(a5),a6				; load VDP address port address to a6
000ECE5C 2C3C 4704 0003             		move.l	#$47040003,d6				; set starting V-Ram
000ECE62 0240 01F8                  		andi.w	#$01F8,d0				; get within 8 pixels
000ECE66 E448                       		lsr.w	#$02,d0					; divide by 4
000ECE68 3200                       		move.w	d0,d1					; copy to d1
000ECE6A 4840                       		swap	d0					; align
000ECE6C DC80                       		add.l	d0,d6					; add to V-Ram address
000ECE6E D8C1                       		adda.w	d1,a4					; add to map buffer address
000ECE70 3CBC 8F80                  		move.w	#$8F80,(a6)				; set increment mode to 80 (new line)
000ECE74 323C 2000                  		move.w	#$2000,d1				; prepare palette line add value
000ECE78 2C86                       		move.l	d6,(a6)					; set VDP mode and address
000ECE7A 3014                       		move.w	(a4),d0					; load map tile
000ECE7C D041                       		add.w	d1,d0					; increase palette to next line
000ECE7E 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ECE80 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ECE84 3014                       		move.w	(a4),d0					; load map tile
000ECE86 D041                       		add.w	d1,d0					; increase palette to next line
000ECE88 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ECE8A 49EC 0046                  		lea	$46(a4),a4				; advance to next line
000ECE8E 3014                       		move.w	(a4),d0					; load map tile
000ECE90 D041                       		add.w	d1,d0					; increase palette to next line
000ECE92 3A80                       		move.w	d0,(a5)					; save map tile to V-Ram
000ECE94 3CBC 8F02                  		move.w	#$8F02,(a6)				; set increment mode to 02 (standard word)
000ECE98 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ECE9C 4E75                       		rts						; return
000ECE9E                            
000ECE9E                            SRG_DFG_FlashOn:
000ECE9E 0440 0170                  		subi.w	#$0170,d0				; minus starting point
000ECEA2 6B00 0000                  		bmi	SRG_DFG_NoDraw				; if not reached the starting point, branch
000ECEA6 7A00                       		moveq	#$00,d5					; set tile add value (Light)
000ECEA8 0C40 0060                  		cmpi.w	#$0060,d0				; has it reached PASSED the ending point?
000ECEAC 6200 0000                  		bhi	SRG_DFG_NoDraw				; if so, branch to skip the lot
000ECEB0 0C40 0050                  		cmpi.w	#$0050,d0				; has it reached the ending point?
000ECEB4 6200 0000                  		bhi	SRG_DFG_DrawFlash			; if so, branch for lights on
000ECEB8 0200 0008                  		andi.b	#$08,d0					; get within 8
000ECEBC 6700 0000                  		beq	SRG_DFG_DrawFlash			; if from 0 to 7 insted of 8 to F, branch
000ECEC0 3A3C 2000                  		move.w	#$2000,d5				; set tile add value (Faded)
000ECEC4                            
000ECEC4                            SRG_DFG_DrawFlash:
000ECEC4 4BF9 FFFF 0000             		lea	($FFFF0000).l,a5			; load mappings to read
000ECECA 7022                       		moveq	#$22,d0					; set number of columns
000ECECC 7202                       		moveq	#$02,d1					; set number of rows
000ECECE 243C 4704 0003             		move.l	#$47040003,d2				; set to write to FG plane
000ECED4 6100 0000                  		bsr	MapScreenAdd				; write to the map plane
000ECED8                            
000ECED8                            SRG_DFG_NoDraw:
000ECED8 4E75                       		rts						; return
000ECEDA                            
000ECEDA                            ; ===========================================================================
000ECEDA                            ; ---------------------------------------------------------------------------
000ECEDA                            ; Subroutine to control a Neon Sonic object
000ECEDA                            ; ---------------------------------------------------------------------------
000ECEDA                            
000ECEDA                            ObjectSonicNeon:
000ECEDA 4A28 0024                  		tst.b	$24(a0)					; has the object alread been setup?
000ECEDE 6600 0000                  		bne	OSN_SetupDone				; if so, branch
000ECEE2 10BC 0001                  		move.b	#$01,(a0)				; engine doesn't like the ID being null
000ECEE6 317C 6400 0002             		move.w	#$6400,$02(a0)				; set V-Ram address read
000ECEEC 217C 0000 0000 0004        		move.l	#ObjSonNeonMap,$04(a0)			; set mappings to use
000ECEF4 217C 0000 00DE 0008        		move.l	#$000000DE,$08(a0)			; set starting X and Y positions
000ECEFC 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ECF02 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000ECF08 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000ECF0E 317C 00C0 002A             		move.w	#$00C0,$2A(a0)				; set timer
000ECF14 317C 0400 0010             		move.w	#$0400,$10(a0)				; set X speed
000ECF1A 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ECF1E                            
000ECF1E                            OSN_SetupDone:
000ECF1E 4A68 002A                  		tst.w	$2A(a0)					; has timer finished?
000ECF22 6700 0000                  		beq	OSN_MoveIn				; if not, branch
000ECF26 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000ECF2A 4E75                       		rts						; return
000ECF2C                            
000ECF2C                            OSN_MoveIn:
000ECF2C 0C28 0002 0024             		cmpi.b	#$02,$24(a0)				; is the routine counter still at sonic moving?
000ECF32 6E00 0000                  		bgt	OSN_NoStop				; if not, branch
000ECF36 0C68 00DE 0008             		cmpi.w	#$00DE,$08(a0)				; has sonic moved to the square yet?
000ECF3C 6D00 0000                  		blt	OSN_NoStop				; if not, branch
000ECF40 317C 00DE 0008             		move.w	#$00DE,$08(a0)				; set him directly at the square
000ECF46 4268 0010                  		clr.w	$10(a0)					; stop sonic moving (no X speed)
000ECF4A 303C 003C                  		move.w	#$3C,d0				; set to play spinning SFX
000ECF4E 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ECF52 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ECF56                            
000ECF56                            OSN_NoStop:
000ECF56 0668 0040 002C             		addi.w	#$0040,$2C(a0)				; increase map speed
000ECF5C 1028 002C                  		move.b	$2C(a0),d0				; load current map speed
000ECF60 0C00 0006                  		cmpi.b	#$06,d0					; has the map ID supassed 5?
000ECF64 6D00 0000                  		blt	OSN_NoResetAni				; if not, branch
000ECF68 7000                       		moveq	#$00,d0					; reset to 0
000ECF6A 3140 002C                  		move.w	d0,$2C(a0)				; reset map speed
000ECF6E                            
000ECF6E                            OSN_NoResetAni:
000ECF6E 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ECF72 3039 FFFF 7800             		move.w	($FFFF7800).l,d0			; load timer
000ECF78 0200 0007                  		andi.b	#$07,d0					; keep within 8 frames
000ECF7C 6600 0000                  		bne	OSN_NoCyclePalette			; if it's not been 8 frames, branch
000ECF80 43F8 FB68                  		lea	($FFFFFB68).w,a1			; load palette green buffer address to a1
000ECF84 45D1                       		lea	(a1),a2					; '' to a2
000ECF86 3019                       		move.w	(a1)+,d0				; store first colour
000ECF88 34D9                       		move.w	(a1)+,(a2)+				; shift colours back
000ECF8A 34D9                       		move.w	(a1)+,(a2)+				; ''
000ECF8C 34D1                       		move.w	(a1),(a2)+				; ''
000ECF8E 3280                       		move.w	d0,(a1)					; save first colour as last
000ECF90                            
000ECF90                            OSN_NoCyclePalette:
000ECF90 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000ECF94 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ECF9A                            
000ECF9A                            ; ===========================================================================
000ECF9A                            ; ---------------------------------------------------------------------------
000ECF9A 0000                       ObjSonNeonMap:	dc.w	ObjSon00-ObjSonNeonMap			; 00
000ECF9C 0000                       		dc.w	ObjSon01-ObjSonNeonMap			; 01
000ECF9E 0000                       		dc.w	ObjSon02-ObjSonNeonMap			; 02
000ECFA0 0000                       		dc.w	ObjSon03-ObjSonNeonMap			; 03
000ECFA2 0000                       		dc.w	ObjSon04-ObjSonNeonMap			; 04
000ECFA4 0000                       		dc.w	ObjSon05-ObjSonNeonMap			; 05
000ECFA6                            ; ---------------------------------------------------------------------------
000ECFA6 04                         ObjSon00:	dc.b	$04
000ECFA7 EB0D 0000 EC               		dc.b	$EB,$0D,$00,$00,$EC
000ECFAC FB09 0008 EC               		dc.b	$FB,$09,$00,$08,$EC
000ECFB1 FB06 000E 04               		dc.b	$FB,$06,$00,$0E,$04
000ECFB6 0B04 0014 EC               		dc.b	$0B,$04,$00,$14,$EC
000ECFBB 02                         ObjSon01:	dc.b	$02
000ECFBC EC0D 0000 ED               		dc.b	$EC,$0D,$00,$00,$ED
000ECFC1 FC0E 0016 F5               		dc.b	$FC,$0E,$00,$16,$F5
000ECFC6 02                         ObjSon02:	dc.b	$02
000ECFC7 ED09 0022 F3               		dc.b	$ED,$09,$00,$22,$F3
000ECFCC FD0A 0028 F3               		dc.b	$FD,$0A,$00,$28,$F3
000ECFD1 04                         ObjSon03:	dc.b	$04
000ECFD2 EB09 0022 F4               		dc.b	$EB,$09,$00,$22,$F4
000ECFD7 FB09 0031 EC               		dc.b	$FB,$09,$00,$31,$EC
000ECFDC FB06 0037 04               		dc.b	$FB,$06,$00,$37,$04
000ECFE1 0B04 003D EC               		dc.b	$0B,$04,$00,$3D,$EC
000ECFE6 02                         ObjSon04:	dc.b	$02
000ECFE7 EC09 0022 F3               		dc.b	$EC,$09,$00,$22,$F3
000ECFEC FC0E 003F EB               		dc.b	$FC,$0E,$00,$3F,$EB
000ECFF1 03                         ObjSon05:	dc.b	$03
000ECFF2 ED0D 0000 EC               		dc.b	$ED,$0D,$00,$00,$EC
000ECFF7 FD0C 004B F4               		dc.b	$FD,$0C,$00,$4B,$F4
000ECFFC 0509 004F F4               		dc.b	$05,$09,$00,$4F,$F4
000ED002 00                         		even
000ED002                            ; ---------------------------------------------------------------------------
000ED002                            ; ===========================================================================
000ED002                            ; ---------------------------------------------------------------------------
000ED002                            ; Subroutine to control the Square much like objects
000ED002                            ; ---------------------------------------------------------------------------
000ED002                            
000ED002                            ObjectSquare:
000ED002 7000                       		moveq	#$00,d0					; clear d0
000ED004 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED008 303B 0000                  		move.w	OS_Index(pc,d0.w),d0			; load correct PC add address
000ED00C 4EFB 0000                  		jmp	OS_Index(pc,d0.w)			; add and jump
000ED010                            
000ED010                            ; ===========================================================================
000ED010                            ; ---------------------------------------------------------------------------
000ED010 0000                       OS_Index:	dc.w	OS_Startup-OS_Index			; 00
000ED012 0000                       		dc.w	OL_WaitTime-OS_Index			; 02
000ED014 0000                       		dc.w	OS_PlaySound-OS_Index			; 04
000ED016 0000                       		dc.w	OS_SpinIn-OS_Index			; 06
000ED018 0000                       		dc.w	OS_UpAndLand-OS_Index			; 08
000ED01A 0000                       		dc.w	OS_FinishSpin-OS_Index			; 0A
000ED01C                            ; ---------------------------------------------------------------------------
000ED01C                            ; ===========================================================================
000ED01C                            ; ---------------------------------------------------------------------------
000ED01C                            ; Startup
000ED01C                            ; ---------------------------------------------------------------------------
000ED01C                            
000ED01C                            OS_Startup:
000ED01C 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED020 217C FF40 0020 0008        		move.l	#$FF400020,$08(a0)			; set starting X and Y positions
000ED028 317C 00A0 002A             		move.w	#$00A0,$2A(a0)				; set time to wait for
000ED02E 217C 0800 0000 0010        		move.l	#$08000000,$10(a0)			; set X and Y starting speeds
000ED036 6000 0000                  		bra	UpdateScrollPositions			; update positions
000ED03A                            
000ED03A                            ; ===========================================================================
000ED03A                            ; ---------------------------------------------------------------------------
000ED03A                            ; Playing spin sound once
000ED03A                            ; ---------------------------------------------------------------------------
000ED03A                            
000ED03A                            OS_PlaySound:
000ED03A 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED03E 70B6                       		moveq	#$FFFFFFB6,d0				; set to play spin release SFX
000ED040 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED044                            
000ED044                            ; ===========================================================================
000ED044                            ; ---------------------------------------------------------------------------
000ED044                            ; Spinning in and hitting the SSRG letters
000ED044                            ; ---------------------------------------------------------------------------
000ED044                            
000ED044                            OS_SpinIn:
000ED044 5468 002A                  		addq.w	#$02,$2A(a0)				; increase spin counter
000ED048 3028 0008                  		move.w	$08(a0),d0				; load X position
000ED04C 0C40 0060                  		cmpi.w	#$0060,d0				; has the square hit the letters?
000ED050 6D00 0000                  		blt	OS_Display				; if not, branch
000ED054 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED058 7096                       		moveq	#$FFFFFF96,d0				; set to play spiked chandelier SFX
000ED05A 4EB8 325C                  		jsr	PlaySound_Special			; play SFX
000ED05E 217C FF00 FC00 0010        		move.l	#$FF00FC00,$10(a0)			; set X and Y bounce off speeds
000ED066 43F9 FFFF D010             		lea	($FFFFD010).l,a1			; load object ram's X and Y speeds
000ED06C 22BC 0300 FC00             		move.l	#$0300FC00,(a1)				; save "S" X and Y speeds
000ED072 237C 0300 FD00 0040        		move.l	#$0300FD00,$40(a1)			; save "S" X and Y speeds
000ED07A 237C 0300 FE00 0080        		move.l	#$0300FE00,$80(a1)			; save "R" X and Y speeds
000ED082 237C 0300 FF00 00C0        		move.l	#$0300FF00,$C0(a1)			; save "G" X and Y speeds
000ED08A 6000 0000                  		bra	OS_Display				; continue
000ED08E                            
000ED08E                            ; ===========================================================================
000ED08E                            ; ---------------------------------------------------------------------------
000ED08E                            ; Spinning in and hitting the SSRG letters
000ED08E                            ; ---------------------------------------------------------------------------
000ED08E                            
000ED08E                            OS_UpAndLand:
000ED08E 5168 002A                  		subq.w	#$08,$2A(a0)				; increase spin counter
000ED092 0668 0020 0012             		addi.w	#$0020,$12(a0)				; increase gravity
000ED098 6B00 0000                  		bmi	OS_Display				; if not going down, branch
000ED09C 0C68 0020 000A             		cmpi.w	#$0020,$0A(a0)				; has the square hit the ground?
000ED0A2 6D00 0000                  		blt	OS_Display				; if not, branch
000ED0A6 317C 0020 000A             		move.w	#$0020,$0A(a0)				; set to the ground
000ED0AC 7000                       		moveq	#$00,d0					; clear d0
000ED0AE 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000ED0B2 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED0B6 317C 0A40 002C             		move.w	#$0A40,$2C(a0)				; set speed of spin
000ED0BC 6000 0000                  		bra	OS_Display				; continue
000ED0C0                            
000ED0C0                            ; ===========================================================================
000ED0C0                            ; ---------------------------------------------------------------------------
000ED0C0                            ; Finishing the spin by slowing down
000ED0C0                            ; ---------------------------------------------------------------------------
000ED0C0                            
000ED0C0                            OS_FinishSpin:
000ED0C0 3028 002C                  		move.w	$2C(a0),d0				; has spin speed finished?
000ED0C4 6A00 0000                  		bpl	OS_NoFinish				; if not, branch
000ED0C8 43F8 FB62                  		lea	($FFFFFB62).w,a1			; load palette buffer address
000ED0CC 0C51 0E0E                  		cmpi.w	#$0E0E,(a1)				; has the colour finished changing?
000ED0D0 6700 0000                  		beq	OS_NoColour01				; if so, branch
000ED0D4 0651 0202                  		addi.w	#$0202,(a1)				; increase the colour
000ED0D8                            
000ED0D8                            OS_NoColour01:
000ED0D8 5849                       		addq.w	#$04,a1					; goto next 2nd colour
000ED0DA 0C51 0404                  		cmpi.w	#$0404,(a1)				; has the colour finished changing?
000ED0DE 6700 0000                  		beq	OS_Display				; if so, branch
000ED0E2 0451 0202                  		subi.w	#$0202,(a1)				; decrease the colour
000ED0E6 6000 0000                  		bra	OS_Display				; continue
000ED0EA                            
000ED0EA                            OS_NoFinish:
000ED0EA 0440 0018                  		subi.w	#$18,d0					; decrease spin speed
000ED0EE 3200                       		move.w	d0,d1					; copy to d1
000ED0F0 E049                       		lsr.w	#$08,d1					; get left byte only
000ED0F2 9368 002A                  		sub.w	d1,$2A(a0)				; subtract that from the spin position
000ED0F6 3140 002C                  		move.w	d0,$2C(a0)				; update spin speed
000ED0FA                            
000ED0FA                            ; ===========================================================================
000ED0FA                            ; ---------------------------------------------------------------------------
000ED0FA                            ; Displaying the square
000ED0FA                            ; ---------------------------------------------------------------------------
000ED0FA                            
000ED0FA                            OS_Display:
000ED0FA 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED100 6100 0000                  		bsr	UpdateScrollPositions			; update positions
000ED104                            
000ED104                            OS_DiplayEnd:
000ED104 3F28 002A                  		move.w	$2A(a0),-(sp)				; store spin counter
000ED108 46FC 2700                  		move	#$2700,sr				; set IRQ's (Disable interrupts)
000ED10C 7010                       		moveq	#$10,d0					; set number of columns
000ED10E 7210                       		moveq	#$10,d1					; set number of rows
000ED110 243C 6000 0003             		move.l	#$60000003,d2				; set to write to BG plane
000ED116 7A00                       		moveq	#$00,d5					; set blank tile
000ED118 6100 0000                  		bsr	MapScreenSingle				; write to the map plane
000ED11C 301F                       		move.w	(sp)+,d0				; load spin counter
000ED11E 0240 0018                  		andi.w	#$0018,d0				; keep in range
000ED122 D040                       		add.w	d0,d0					; multiply by 2
000ED124 49FB 0000                  		lea	MapRamData(pc,d0.w),a4			; load map ram address data
000ED128 2A5C                       		movea.l	(a4)+,a5				; load mappings to read
000ED12A 241C                       		move.l	(a4)+,d2				; load V-Ram address
000ED12C 301C                       		move.w	(a4)+,d0				; load X draw amount
000ED12E 321C                       		move.w	(a4)+,d1				; load Y draw amount
000ED130 6100 0000                  		bsr	MapScreen				; write to the map plane
000ED134 46FC 2300                  		move	#$2300,sr				; set IRQ's (Enable interrupts)
000ED138 4E75                       		rts						; return
000ED13A                            
000ED13A                            ; ---------------------------------------------------------------------------
000ED13A                            ; Updating the scroll positions for the BG plane
000ED13A                            ; ---------------------------------------------------------------------------
000ED13A                            
000ED13A                            UpdateScrollPositions:
000ED13A 33E8 0008 FFFF 7808        		move.w	$08(a0),($FFFF7808).l			; load X position as X scroll BG
000ED142 3028 000A                  		move.w	$0A(a0),d0				; load Y position
000ED146 4440                       		neg.w	d0					; negate opposite direction
000ED148 31C0 F618                  		move.w	d0,($FFFFF618).w			; save as Y scroll BG
000ED14C 4E75                       		rts						; return
000ED14E                            
000ED14E                            ; ===========================================================================
000ED14E                            ; ---------------------------------------------------------------------------
000ED14E FFFF 4000                  MapRamData:	dc.l	$FFFF4000				; Map address
000ED152 6104 0003                  		dc.l	$61040003				; V-Ram address
000ED156 000B 000B                  		dc.l	$000B000B				; X and Y draw amount
000ED15A 0000 0000                  		dc.l	$00000000				; null/spare
000ED15E FFFF 4120                  		dc.l	$FFFF4120				; ''
000ED162 6000 0003                  		dc.l	$60000003				; ''
000ED166 000F 000F                  		dc.l	$000F000F				; ''
000ED16A 0000 0000                  		dc.l	$00000000				; ''
000ED16E FFFF 4320                  		dc.l	$FFFF4320				; ''
000ED172 6000 0003                  		dc.l	$60000003				; ''
000ED176 0010 0010                  		dc.l	$00100010				; ''
000ED17A 0000 0000                  		dc.l	$00000000				; ''
000ED17E FFFF 4562                  		dc.l	$FFFF4562				; ''
000ED182 6000 0003                  		dc.l	$60000003				; ''
000ED186 000F 000F                  		dc.l	$000F000F				; ''
000ED18A 0000 0000                  		dc.l	$00000000				; ''
000ED18E                            ; ---------------------------------------------------------------------------
000ED18E                            ; ===========================================================================
000ED18E                            ; ---------------------------------------------------------------------------
000ED18E                            ; Subroutine to control the "SSRG" letter sprites
000ED18E                            ; ---------------------------------------------------------------------------
000ED18E                            
000ED18E                            ObjectLetters:
000ED18E 7000                       		moveq	#$00,d0					; clear d0
000ED190 1028 0024                  		move.b	$24(a0),d0				; load routine counter
000ED194 303B 0000                  		move.w	OL_Index(pc,d0.w),d0			; load correct PC add address
000ED198 4EFB 0000                  		jmp	OL_Index(pc,d0.w)			; add and jump
000ED19C                            
000ED19C                            ; ===========================================================================
000ED19C                            ; ---------------------------------------------------------------------------
000ED19C 0000                       OL_Index:	dc.w	OL_Startup-OL_Index			; 00
000ED19E 0000                       		dc.w	OL_WaitTime-OL_Index			; 02
000ED1A0 0000                       		dc.w	OL_FlyUp-OL_Index			; 04
000ED1A2 0000                       		dc.w	OL_Spring-OL_Index			; 06
000ED1A4 0000                       		dc.w	OL_SlowDown-OL_Index			; 08
000ED1A6 0000                       		dc.w	OL_Idle-OL_Index			; 0A
000ED1A8                            ; ---------------------------------------------------------------------------
000ED1A8                            ; ===========================================================================
000ED1A8                            ; ---------------------------------------------------------------------------
000ED1A8                            ; Object data	dc.w	$XXXX,$YYYY,$VRAM,$TIME,$XSPD,$YSPD,$MAPI,$????
000ED1A8                            ; ---------------------------------------------------------------------------
000ED1A8 0182 0180 0001 0001 FF00+  OL_Data:	dc.w	$0182,$0180,$0001,$0001,$FF00,$F400,$0000,$0000
000ED1B8 01A8 0180 0001 0011 FF00+  		dc.w	$01A8,$0180,$0001,$0011,$FF00,$F400,$0000,$0000
000ED1C8 01D0 0180 0011 0021 FF00+  		dc.w	$01D0,$0180,$0011,$0021,$FF00,$F400,$0000,$0000
000ED1D8 01F8 0180 0021 0031 FF00+  		dc.w	$01F8,$0180,$0021,$0031,$FF00,$F400,$0000,$0000
000ED1E8                            ; ---------------------------------------------------------------------------
000ED1E8                            ; ===========================================================================
000ED1E8                            ; ---------------------------------------------------------------------------
000ED1E8                            ; Startup
000ED1E8                            ; ---------------------------------------------------------------------------
000ED1E8                            
000ED1E8                            OL_Startup:
000ED1E8 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED1EC 1010                       		move.b	(a0),d0					; load object type
000ED1EE 5300                       		subq.b	#$01,d0					; decrease by 1
000ED1F0 E948                       		lsl.w	#$04,d0					; multiply by 10
000ED1F2 43FB 00B4                  		lea	OL_Data(pc,d0.w),a1			; load correct data address
000ED1F6 2159 0008                  		move.l	(a1)+,$08(a0)				; set X & Y position
000ED1FA 3159 0002                  		move.w	(a1)+,$02(a0)				; set V-Ram
000ED1FE 3159 002A                  		move.w	(a1)+,$2A(a0)				; set Timer
000ED202 2159 0010                  		move.l	(a1)+,$10(a0)				; set X and Y speeds
000ED206 3019                       		move.w	(a1)+,d0				; load map ID
000ED208 1140 001A                  		move.b	d0,$1A(a0)				; set map ID
000ED20C 217C 0000 0000 0004        		move.l	#ObjLet_Map,$04(a0)			; set mappings to use
000ED214 317C 0100 0018             		move.w	#$100,priority(a0)			; set priority
000ED21A 117C 0020 0023             		move.b	#$20,width_pixels(a0)			; set width
000ED220 117C 0020 0016             		move.b	#$20,$16(a0)				; set height
000ED226                            
000ED226                            ; ===========================================================================
000ED226                            ; ---------------------------------------------------------------------------
000ED226                            ; Delay/Time wait
000ED226                            ; ---------------------------------------------------------------------------
000ED226                            
000ED226                            OL_WaitTime:
000ED226 5368 002A                  		subq.w	#$01,$2A(a0)				; decrease timer
000ED22A 6600 0000                  		bne	OL_WT_Wait				; if not finished, branch
000ED22E 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED232                            
000ED232                            OL_WT_Wait:
000ED232 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED238                            
000ED238                            ; ===========================================================================
000ED238                            ; ---------------------------------------------------------------------------
000ED238                            ; Flying up and landing
000ED238                            ; ---------------------------------------------------------------------------
000ED238                            
000ED238                            OL_FlyUp:
000ED238 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED23E 0668 0040 0012             		addi.w	#$0040,$12(a0)				; increase speed
000ED244 6B00 0000                  		bmi	OL_NoStopDown				; if still moving up, branch
000ED248 303C 00F0                  		move.w	#$00F0,d0				; set Y speed to check
000ED24C B068 000A                  		cmp.w	$0A(a0),d0				; has the letter dropped to the landing line?
000ED250 6C00 0000                  		bge	OL_NoStopDown				; if not, branch
000ED254 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED258                            
000ED258                            OL_NoStopDown:
000ED258 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED25E                            
000ED25E                            ; ===========================================================================
000ED25E                            ; ---------------------------------------------------------------------------
000ED25E                            ; Springing under the land and back up again
000ED25E                            ; ---------------------------------------------------------------------------
000ED25E                            
000ED25E                            OL_Spring:
000ED25E 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED264 0468 0080 0012             		subi.w	#$0080,$12(a0)				; decrease speed
000ED26A 6A00 0000                  		bpl	OL_NoStopUp				; if still moving down, branch
000ED26E 303C 00E8                  		move.w	#$00E8,d0				; set Y speed to check
000ED272 B068 000A                  		cmp.w	$0A(a0),d0				; has the letter moved up to the landing line?
000ED276 6D00 0000                  		blt	OL_NoStopUp				; if not, branch
000ED27A 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000ED27E 4268 002A                  		clr.w	$2A(a0)					; clear timer
000ED282 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED286                            
000ED286                            OL_NoStopUp:
000ED286 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED28C                            
000ED28C                            ; ===========================================================================
000ED28C                            ; ---------------------------------------------------------------------------
000ED28C                            ; Slowing the letter down on X
000ED28C                            ; ---------------------------------------------------------------------------
000ED28C                            
000ED28C                            OL_SlowDown:
000ED28C 4A68 0010                  		tst.w	$10(a0)					; is there any left movement on X?
000ED290 6A00 0000                  		bpl	OL_NoMove				; if not, branch
000ED294 4EB9 0000 0000             		jsr	SpeedToPosHud				; convert speed to position
000ED29A 0668 0020 0010             		addi.w	#$0020,$10(a0)				; increase X speed to slow down to move right
000ED2A0 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED2A6                            
000ED2A6                            OL_NoMove:
000ED2A6 5228 002A                  		addi.b	#$01,$2A(a0)				; increase timer
000ED2AA 1028 002A                  		move.b	$2A(a0),d0				; load timer
000ED2AE 0200 0001                  		andi.b	#$01,d0					; get only the odd bit
000ED2B2 6700 0000                  		beq	OL_Idle					; if null, branch to skip (Slows the flash down)
000ED2B6 7040                       		moveq	#$40,d0					; set colour line to check value on
000ED2B8 B028 0002                  		cmp.b	$02(a0),d0				; has colour line reached last?
000ED2BC 6E00 0000                  		bgt	OL_NoFinish				; if not, branch
000ED2C0 0228 009F 0002             		andi.b	#$9F,$02(a0)				; reset colour line to first
000ED2C6 5428 0024                  		addq.b	#$02,$24(a0)				; increase routine counter
000ED2CA 7000                       		moveq	#$00,d0					; clear d0
000ED2CC 2140 0010                  		move.l	d0,$10(a0)				; clear X and Y speeds
000ED2D0 0268 01FF 000A             		andi.w	#$01FF,$0A(a0)				; reset Y position range correctly
000ED2D6 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000ED2DC 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED2E2                            
000ED2E2                            OL_NoFinish:
000ED2E2 0628 0020 0002             		addi.b	#$20,$02(a0)				; increase palette line being used
000ED2E8                            
000ED2E8                            ; ===========================================================================
000ED2E8                            ; ---------------------------------------------------------------------------
000ED2E8                            ; Idle (Finish)
000ED2E8                            ; ---------------------------------------------------------------------------
000ED2E8                            
000ED2E8                            OL_Idle:
000ED2E8 6100 0000                  		bsr	SpeedToPosHud				; convert speed to position
000ED2EC 0C68 00E4 000A             		cmpi.w	#$00E4,$0A(a0)				; has the letter moved up to the landing line?
000ED2F2 6700 0000                  		beq	OL_CheckXSpeed				; if so, branch
000ED2F6 6D00 0000                  		blt	OL_CheckYSpeed				; if not, branch
000ED2FA 4268 0012                  		clr.w	$12(a0)					; set no Y speed
000ED2FE 317C 00E4 000A             		move.w	#$00E4,$0A(a0)				; set Y position
000ED304 6000 0000                  		bra	OL_CheckXSpeed				; continue
000ED308                            
000ED308                            OL_CheckYSpeed:
000ED308 0668 0080 0012             		addi.w	#$0080,$12(a0)				; increase gravity
000ED30E                            
000ED30E                            OL_CheckXSpeed:
000ED30E 303C 0040                  		move.w	#$0040,d0				; set speed decrease
000ED312 4A68 0010                  		tst.w	$10(a0)					; is there any X speed?
000ED316 6700 0000                  		beq	OL_Display				; if not, branch
000ED31A 6A00 0000                  		bpl	OL_DecreaseRight			; if it's moving right, branch
000ED31E 4440                       		neg.w	d0					; negate decreasing speed
000ED320                            
000ED320                            OL_DecreaseRight:
000ED320 9168 0010                  		sub.w	d0,$10(a0)				; decrease speed
000ED324                            
000ED324                            OL_Display:
000ED324 4EF9 0001 5C3C             		jmp	DisplaySprite				; save object for displaying
000ED32A                            
000ED32A                            ; ===========================================================================
000ED32A                            ; ---------------------------------------------------------------------------
000ED32A 0000                       ObjLet_Map:	dc.w	ObjLet_SSRG-ObjLet_Map			; 00
000ED32C                            ; ---------------------------------------------------------------------------
000ED32C 01                         ObjLet_SSRG:	dc.b	$01
000ED32D F00F 0000 F0               		dc.b	$F0,$0F,$00,$00,$F0
000ED332                            		even
000ED332                            ; ---------------------------------------------------------------------------
000ED332                            ; ===========================================================================
000ED332                            ; ---------------------------------------------------------------------------
000ED332                            ; Subroutine to convert speed to position for HUD objects
000ED332                            ; ---------------------------------------------------------------------------
000ED332                            
000ED332                            SpeedToPosHud:
000ED332 3028 0010                  		move.w	$10(a0),d0				; load X speed
000ED336 48C0                       		ext.l	d0					; extend incase it's negative
000ED338 E180                       		asl.l	#$08,d0					; multiply by 100
000ED33A 4840                       		swap	d0					; get X add position
000ED33C D168 0008                  		add.w	d0,$08(a0)				; save new X position
000ED340 3028 0012                  		move.w	$12(a0),d0				; load Y speed
000ED344 48C0                       		ext.l	d0					; extend incase it's negative
000ED346 E180                       		asl.l	#$08,d0					; multiply by 100
000ED348 D1A8 000A                  		add.l	d0,$0A(a0)				; save new Y position
000ED34C 4E75                       		rts						; return
000ED34E                            
000ED34E                            ; ===========================================================================
000ED34E                            ; ---------------------------------------------------------------------------
000ED34E                            ; Subroutine to map tile to VDP screen
000ED34E                            ; ---------------------------------------------------------------------------
000ED34E                            
000ED34E                            MapScreen:
000ED34E 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED354 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED358 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED35E                            
000ED35E                            MapScreen_Row:
000ED35E 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED360 3600                       		move.w	d0,d3					; reload number of columns
000ED362                            
000ED362                            MapScreen_Column:
000ED362 3C9D                       		move.w	(a5)+,(a6)				; dump map to VDP map slot
000ED364 51CB FFFC                  		dbf	d3,MapScreen_Column			; repeat til columns have dumped
000ED368 D484                       		add.l	d4,d2					; increae to next row on VRam
000ED36A 51C9 FFF2                  		dbf	d1,MapScreen_Row			; repeat til all rows have dumped
000ED36E 4E75                       		rts						; return
000ED370                            
000ED370                            ; ===========================================================================
000ED370                            ; ---------------------------------------------------------------------------
000ED370                            ; Subroutine to map tile to VDP screen (Adding contents of d5)
000ED370                            ; ---------------------------------------------------------------------------
000ED370                            
000ED370                            MapScreenAdd:
000ED370 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED376 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED37A 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED380                            
000ED380                            MapScreenAdd_Row:
000ED380 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED382 3600                       		move.w	d0,d3					; reload number of columns
000ED384                            
000ED384                            MapScreenAdd_Column:
000ED384 3C1D                       		move.w	(a5)+,d6				; load map ID
000ED386 DC45                       		add.w	d5,d6					; add d5 contents
000ED388 3C86                       		move.w	d6,(a6)					; dump map to VDP map slot
000ED38A 51CB FFF8                  		dbf	d3,MapScreenAdd_Column			; repeat til columns have dumped
000ED38E D484                       		add.l	d4,d2					; increae to next row on VRam
000ED390 51C9 FFEE                  		dbf	d1,MapScreenAdd_Row			; repeat til all rows have dumped
000ED394 4E75                       		rts						; return
000ED396                            
000ED396                            ; ===========================================================================
000ED396                            ; ---------------------------------------------------------------------------
000ED396                            ; Subroutine to map a single tile to VDP screen
000ED396                            ; ---------------------------------------------------------------------------
000ED396                            
000ED396                            MapScreenSingle:
000ED396 4DF9 00C0 0000             		lea	($C00000).l,a6				; load VDP data port address to a6
000ED39C 49EE 0004                  		lea	$04(a6),a4				; load VDP address port address to a4
000ED3A0 283C 0080 0000             		move.l	#$00800000,d4				; prepare line add value
000ED3A6                            
000ED3A6                            MapScreenSingle_Row:
000ED3A6 2882                       		move.l	d2,(a4)					; set VDP to VRam write mode
000ED3A8 3600                       		move.w	d0,d3					; reload number of columns
000ED3AA                            
000ED3AA                            MapScreenSingle_Column:
000ED3AA 3C85                       		move.w	d5,(a6)					; dump map to VDP map slot
000ED3AC 51CB FFFC                  		dbf	d3,MapScreenSingle_Column		; repeat til columns have dumped
000ED3B0 D484                       		add.l	d4,d2					; increae to next row on VRam
000ED3B2 51C9 FFF2                  		dbf	d1,MapScreenSingle_Row			; repeat til all rows have dumped
000ED3B6 4E75                       		rts						; return
000ED3B8                            
000ED3B8                            ; ===========================================================================
000ED3B8                            ; ---------------------------------------------------------------------------
000ED3B8                            ; SSRG Data
000ED3B8                            ; ---------------------------------------------------------------------------
000ED3B8                            Pal_SSRG:	incbin	"SSRG/SSRG.pal"
000ED438                            		even
000ED438                            ; ---------------------------------------------------------------------------
000ED438                            ArtMain_SSRG:	incbin	"SSRG/ArtMain.nem"
000EDAAC 00                         		even
000EDAAC                            ArtSquare_SSRG:	incbin	"SSRG/ArtSquare.nem"
000EDF18 00                         		even
000EDF18                            ArtSonic_SSRG:	incbin	"SSRG/ArtSonic.nem"
000EE1F6                            		even
000EE1F6                            ArtLink_SSRG:	incbin	"SSRG/ArtLink.nem"
000EE2DE                            		even
000EE2DE                            ; ---------------------------------------------------------------------------
000EE2DE                            MapMain_SSRG:	incbin	"SSRG/MapMain.kos"
000EE390 00                         		even
000EE390                            MapSquare_SSRG:	incbin	"SSRG/MapSquare.kos"
000EE5DA                            		even
000EE5DA                            MapLink_SSRG:	incbin	"SSRG/MapLink.kos"
000EE610                            		even
000EE610                            ; ---------------------------------------------------------------------------
000EE610                            ; ===========================================================================
000EE610                            ; ===========================================================================
000EE610                            ; Sonic 2 Options and level select	
000EE610                            s2_menuasm:
000EE610                            		include 's2_menu.asm'
000EE610                            ;===============================================================================
000EE610                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
000EE610                            ; [ Início ]
000EE610                            ;
000EE610                            ; O código deste menu foi desenvolvido para funcionar com
000EE610                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
000EE610                            ; 
000EE610                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
000EE610                            ; código para que aponte para as rotinas equivalentes.
000EE610                            ; 
000EE610                            ; Para pode utilizar este menu basta fazer a seguinte modificação no código 
000EE610                            ; original:
000EE610                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
000EE610                            ; O código deve ficar como abaixo
000EE610                            ;               ......................
000EE610                            ; loc_3242:
000EE610                            ;		tst.b	($FFFFFFD0).w
000EE610                            ;		beq.w	PlayLevel	
000EE610                            ;		btst	#6,($FFFFF604).w 
000EE610                            ;		beq.w	PlayLevel	  		
000EE610                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
000EE610                            ;		moveq	#2,d0		
000EE610                            ;		bsr.w	PalLoad		 
000EE610                            ;               ...............
000EE610                            ;
000EE610                            ; Não esqueça de incluir este asm em seu código com a diretiva include:
000EE610                            ;               include 's2_menu.asm'
000EE610                            ;===============================================================================  
000EE610                            ;Slow_Motion_Flag      equ $FFFFFFD1
000EE610                            ;Debug_Mode_Flag       equ $FFFFFFD2
000EE610                            
000EE610 =00000010                  Main_Menu_Snd   = $0010
000EE610 =0000002B                  Emerald_Snd             = $002B
000EE610 =00000033                  Ring_Snd                = $0033
000EE610 =000000E1                  Volume_Down             = $00E1
000EE610 =000000E0                  Stop_Sound              = $00E0
000EE610                            ;-------------------------------------------------------------------------------
000EE610                            ; Options and Level Select Code from Sonic 2 Rev02 (Sonic Classics Version) 
000EE610                            ;-------------------------------------------------------------------------------
000EE610                            MenuScreen:
000EE610                            Main_Menu_Screen: ; Offset_0x008B50:   
000EE610 4EB8 4528                                  jsr     Pal_FadeFrom                           ; Offset_0x002426
000EE614 46FC 2700                                  move    #$2700, SR
000EE618 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EE61C 0200 00BF                                  andi.b  #$BF, D0                                     ; $00C00004
000EE620 33C0 00C0 0004                             move.w  D0, ($00C00004)
000EE626 4EB8 3084                                  jsr     ClearScreen                            ; Offset_0x0011C4
000EE62A 4DF9 00C0 0004                             lea     ($00C00004), A6                       ; $00C00004
000EE630 3CBC 8004                                  move.w  #$8004, (A6)
000EE634 3CBC 8230                                  move.w  #$8230, (A6)
000EE638 3CBC 8407                                  move.w  #$8407, (A6)
000EE63C 3CBC 8230                                  move.w  #$8230, (A6)
000EE640 3CBC 8700                                  move.w  #$8700, (A6)
000EE644 3CBC 8C81                                  move.w  #$8C81, (A6)
000EE648 3CBC 9001                                  move.w  #$9001, (A6)
000EE64C 43F8 AC00                                  lea     ($FFFFAC00).w, A1
000EE650 7000                                       moveq   #$00, D0
000EE652 323C 00FF                                  move.w  #$00FF, D1
000EE656                            Offset_0x008B96:
000EE656 22C0                                       move.l  D0, (A1)+
000EE658 51C9 FFFC                                  dbra    D1, Offset_0x008B96
000EE65C 43F8 D000                                  lea     ($FFFFD000).w, A1
000EE660 7000                                       moveq   #$00, D0
000EE662 323C 07FF                                  move.w  #$07FF, D1
000EE666                            Offset_0x008BA6:
000EE666 22C0                                       move.l  D0, (A1)+
000EE668 51C9 FFFC                                  dbra    D1, Offset_0x008BA6
000EE66C 4278 C800                                  clr.w   ($FFFFC800).w
000EE670 21FC FFFF C800 C8FC                        move.l  #$FFFFC800, ($FFFFC8FC).w
000EE678 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)               ; $00C00004
000EE682 41F9 0002 F3A8                             lea     (Nem_MenuFont), A0                        ; Offset_0x07C43A
000EE688 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EE68C 23FC 4E00 0000 00C0 0004                   move.l  #$4E000000, ($00C00004)               ; $00C00004
000EE696 41F9 0000 0000                             lea     (Menu_Frame), A0                       ; Offset_0x07D990
000EE69C 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EE6A0 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)               ; $00C00004
000EE6AA 41F9 0000 0000                             lea     (Level_Icons), A0                      ; Offset_0x07DA10
000EE6B0 4EB8 3596                                  jsr     NemDec                             ; Offset_0x00149A
000EE6B4 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EE6BA 41F9 0000 0000                             lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x07CB80
000EE6C0 303C 6000                                  move.w  #$6000, D0
000EE6C4 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EE6C8 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EE6CE 203C 6000 0003                             move.l  #$60000003, D0
000EE6D4 7227                                       moveq   #$27, D1
000EE6D6 741B                                       moveq   #$1B, D2
000EE6D8 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EE6DC 0C38 002C F600                             cmpi.b  #$2C, ($FFFFF600).w         ; $24, $FFFFF600
000EE6E2 6700 0000                  				beq     Options_Menu                           ; Offset_0x008F56
000EE6E6 4EF9 0000 0000             				jmp    	Level_Select_Menu                ; Offset_0x00928C
000EE6EC                            Offset_0x008F48:
000EE6EC 7200                                       moveq   #$00, D1
000EE6EE 1219                                       move.b  (A1)+, D1
000EE6F0                            Offset_0x008F4C:
000EE6F0 1019                                       move.b  (A1)+, D0
000EE6F2 34C0                                       move.w  D0, (A2)+
000EE6F4 51C9 FFFA                                  dbra    D1, Offset_0x008F4C
000EE6F8 4E75                                       rts                
000EE6FA                            ;===============================================================================                
000EE6FA                            Options_Menu: ; Offset_0x008F56:
000EE6FA 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EE700 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EE706 303C 0070                                  move.w  #$0070, D0
000EE70A 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EE70E 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EE714 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x009A60
000EE71A 303C 2070                                  move.w  #$2070, D0
000EE71E 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EE722 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EE726 6100 0000                                  bsr     Offset_0x009118
000EE72A 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EE72E 6100 0000                                  bsr     Offset_0x00918C
000EE732 5238 FF8C                                  addq.b  #$01, ($FFFFFF8C).w
000EE736 6100 0000                                  bsr     Offset_0x00918C
000EE73A 4238 FF8C                                  clr.b   ($FFFFFF8C).w
000EE73E 4238 F711                                  clr.b   ($FFFFF711).w
000EE742 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EE746 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EE74C 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EE752 7014                                       moveq   #$14, D0
000EE754 4EB8 47FA                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EE758 103C 0010                                  move.b  #Main_Menu_Snd, D0      ; $91
000EE75C 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EE760                            ;                clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EE760 42B8 F700                                  clr.l   ($FFFFF700).w
000EE764 42B8 F704                                  clr.l   ($FFFFF704).w
000EE768 4278 FFE4                                  clr.w   ($FFFFFFE4).w
000EE76C 4278 FFE6                                  clr.w   ($FFFFFFE6).w
000EE770 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EE776 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EE77C 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EE780 0000 0040                                  ori.b   #$40, D0
000EE784 33C0 00C0 0004                             move.w  D0, ($C00004)                       ; $00C00004
000EE78A 4EB8 446E                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EE78E                            Offset_0x008FEE:
000EE78E 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EE794 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EE79A 46FC 2700                                  move    #$2700, SR
000EE79E 6100 0000                                  bsr     Offset_0x00918C
000EE7A2 6100 0000                                  bsr     Offset_0x009070
000EE7A6 6100 0000                                  bsr     Offset_0x009118
000EE7AA 46FC 2300                                  move    #$2300, SR
000EE7AE 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EE7B4 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EE7BA 1038 F605                                  move.b  ($FFFFF605).w, D0
000EE7BE 8038 F607                                  or.b    ($FFFFF607).w, D0
000EE7C2 0200 0080                                  andi.b  #$80, D0
000EE7C6 6600                                       bne.s   Menu_Go_Play_Mode                      ; Offset_0x00902A
000EE7C8 60C4                                       bra     Offset_0x008FEE
000EE7CA                            Menu_Go_Play_Mode: ; Offset_0x00902A:
000EE7CA 1038 FF8C                                  move.b  ($FFFFFF8C).w, D0
000EE7CE 6600                                       bne.s   Menu_Go_Versus_Mode                    ; Offset_0x009046
000EE7D0 7000                                       moveq   #$00, D0
000EE7D2                            ;                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFB8
000EE7D2 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EE7D6 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EE7DA 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EE7E0 4E75                                       rts
000EE7E2                            Menu_Go_Versus_Mode: ; Offset_0x009046:
000EE7E2 5300                                       subq.b  #$01, D0
000EE7E4 6600                                       bne.s   Offset_0x009068
000EE7E6 7001                                       moveq   #$01, D0
000EE7E8                              ;              move.w  D0, (Two_Player_Flag).w      ; $FFFFFFB8
000EE7E8 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EE7EC 11FC 003C F600                             move.b  #$3C, ($FFFFF600).w     ; $1C, $FFFFF600
000EE7F2 11FC 0000 FF88                             move.b  #$00, ($FFFFFF88).w
000EE7F8 31FC 0000 FF7A                             move.w  #$0000, ($FFFFFF7A).w
000EE7FE 4E75                                       rts
000EE800                            Offset_0x009068:
000EE800 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w     ; $FFFFF600
000EE806 4E75                                       rts
000EE808                            Offset_0x009070:
000EE808 7400                                       moveq   #$00, D2
000EE80A 1438 FF8C                                  move.b  ($FFFFFF8C).w, D2
000EE80E 1038 F605                                  move.b  ($FFFFF605).w, D0
000EE812 8038 F607                                  or.b    ($FFFFF607).w, D0
000EE816 0800 0000                                  btst    #$00, D0
000EE81A 6700                                       beq.s   Offset_0x00908C
000EE81C 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EE822 5302                                       subq.b  #$01, D2
000EE824 6400                                       bcc.s   Offset_0x00908C
000EE826 143C 0002                                  move.b  #$02, D2
000EE82A                            Offset_0x00908C:
000EE82A 0800 0001                                  btst    #$01, D0
000EE82E 6700                                       beq.s   Offset_0x00909C
000EE830 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EE836 5202                                       addq.b  #$01, D2
000EE838 0C02 0003                                  cmpi.b  #$03, D2
000EE83C 6500                                       bcs.s   Offset_0x00909C
000EE83E 7400                                       moveq   #$00, D2
000EE840                            Offset_0x00909C:
000EE840 11C2 FF8C                                  move.b  D2, ($FFFFFF8C).w
000EE844 E54A                                       lsl.w   #$02, D2
000EE846 163B 2000                                  move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x00910C
000EE84A 227B 2000                                  move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x00910C
000EE84E 3411                                       move.w  (A1), D2                      
000EE850 0800 0002                                  btst    #$02, D0
000EE854 6700                                       beq.s   Offset_0x0090B8
000EE856 5302                                       subq.b  #$01, D2
000EE858 6400                                       bcc.s   Offset_0x0090B8
000EE85A 1403                                       move.b  D3, D2
000EE85C                            Offset_0x0090B8:
000EE85C 0800 0003                                  btst    #$03, D0
000EE860 6700                                       beq.s   Offset_0x0090C6
000EE862 5202                                       addq.b  #$01, D2
000EE864 B403                                       cmp.b   D3, D2
000EE866 6300                                       bls.s   Offset_0x0090C6
000EE868 7400                                       moveq   #$00, D2
000EE86A                            Offset_0x0090C6:
000EE86A 0800 0006                                  btst    #button_A, D0
000EE86E 6700                                       beq.s   Offset_0x0090C6_2
000EE870 0602 0010                  				addi.b  #$10, D2
000EE874 4EF9 0000 0000             				jmp		Offset_0x0090C6_3
000EE87A                            Offset_0x0090C6_2:
000EE87A 0800 0004                  				btst	#button_B,d0
000EE87E 6700                       				beq.s	Offset_0x0090D6
000EE880 0402 0010                  				subi.b	#$10,d2
000EE884                            Offset_0x0090C6_3: 
000EE884 B403                                       cmp.b   D3, D2
000EE886 6300                                       bls.s   Offset_0x0090D6
000EE888 7400                                       moveq   #$00, D2
000EE88A                            Offset_0x0090D6:
000EE88A 3282                                       move.w  D2, (A1)
000EE88C 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE892 6600                                       bne.s   Offset_0x00910A
000EE894 0240 0020                                  andi.w	#button_C_mask,d0
000EE898 6700                                       beq.s   Offset_0x00910A
000EE89A 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EE89E 4EB8 325C                  				jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EE8A2 41F9 0000 0000                             lea     (Code_Level_Select), A0                ; Offset_0x00975C
000EE8A8 45F9 0000 0000                             lea     (Code_14_Continues), A2                ; Offset_0x009762
000EE8AE 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EE8B2 7400                                       moveq   #$00, D2
000EE8B4 6100 0000                                  bsr     Offset_0x0096EA
000EE8B8                            Offset_0x00910A:
000EE8B8 4E75                                       rts
000EE8BA                            ;-------------------------------------------------------------------------------                 
000EE8BA                            Menu_Options_Boundaries: ; Offset_0x00910C:
000EE8BA 02FF FF74                  		dc.l (3-1)<<24|($FFFFFF74&$FFFFFF)
000EE8BE FFFF FF94                  		dc.l (2-1)<<24|(Level_Music+4&$FFFFFF)
000EE8C2 FFFF FF84                  		dc.l ($FF)<<24|(Sound_test_sound&$FFFFFF)  
000EE8C6                            ;------------------------------------------------------------------------------- 
000EE8C6                            Offset_0x009118:
000EE8C6 6100 0000                                  bsr     Offset_0x0091FE
000EE8CA 7200                                       moveq   #$00, D1
000EE8CC 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EE8D0 E749                                       lsl.w   #$03, D1
000EE8D2 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EE8D8 47F3 1000                                  lea     $00(A3, D1), A3
000EE8DC 303C 6000                                  move.w  #$6000, D0
000EE8E0 45F9 FFFF 0030                             lea     ($FFFF0030), A2
000EE8E6 225B                                       move.l  (A3)+, A1
000EE8E8 6100 FE02                                  bsr     Offset_0x008F48
000EE8EC 45F9 FFFF 00B6                             lea     ($FFFF00B6), A2
000EE8F2 7200                                       moveq   #$00, D1
000EE8F4 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE8FA 6700                                       beq.s   Offset_0x009160
000EE8FC 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EE900 E549                                       lsl.w   #$02, D1
000EE902 43FA FFB6                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EE906 2271 1000                                  move.l  $00(A1, D1), A1
000EE90A 3211                                       move.w  (A1), D1
000EE90C E549                                       lsl.w   #$02, D1
000EE90E                            Offset_0x009160:
000EE90E 2274 1000                                  move.l  $00(A4, D1), A1
000EE912 6100 FDD8                                  bsr     Offset_0x008F48
000EE916 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE91C 6600                                       bne.s   Offset_0x00917A
000EE91E 45F9 FFFF 00C2                             lea     ($FFFF00C2), A2
000EE924 6100 0000                                  bsr     Offset_0x00922C
000EE928                            Offset_0x00917A:
000EE928 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EE92E 201B                                       move.l  (A3)+, D0
000EE930 7215                                       moveq   #$15, D1
000EE932 7407                                       moveq   #$07, D2
000EE934 4EF8 34A0                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EE938                            Offset_0x00918C:
000EE938 6100 0000                                  bsr     Offset_0x0091FE
000EE93C 7200                                       moveq   #$00, D1
000EE93E 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EE942 E749                                       lsl.w   #$03, D1
000EE944 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x009250
000EE94A 47F3 1000                                  lea     $00(A3, D1), A3
000EE94E 7000                                       moveq   #$00, D0
000EE950 45F9 FFFF 0190                             lea     ($FFFF0190), A2
000EE956 225B                                       move.l  (A3)+, A1
000EE958 6100 FD92                                  bsr     Offset_0x008F48
000EE95C 45F9 FFFF 0216                             lea     ($FFFF0216), A2
000EE962 7200                                       moveq   #$00, D1
000EE964 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE96A 6700                                       beq.s   Offset_0x0091D2
000EE96C 1238 FF8C                                  move.b  ($FFFFFF8C).w, D1
000EE970 E549                                       lsl.w   #$02, D1
000EE972 43FA FF46                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x00910C
000EE976 2271 1000                                  move.l  $00(A1, D1), A1
000EE97A 3211                                       move.w  (A1), D1
000EE97C E549                                       lsl.w   #$02, D1
000EE97E                            Offset_0x0091D2:
000EE97E 2274 1000                                  move.l  $00(A4, D1), A1
000EE982 6100 FD68                                  bsr     Offset_0x008F48
000EE986 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE98C 6600                                       bne.s   Offset_0x0091EC
000EE98E 45F9 FFFF 0222                             lea     ($FFFF0222), A2
000EE994 6100 0000                                  bsr     Offset_0x00922C
000EE998                            Offset_0x0091EC:
000EE998 43F9 FFFF 0160                             lea     ($FFFF0160), A1
000EE99E 201B                                       move.l  (A3)+, D0
000EE9A0 7215                                       moveq   #$15, D1
000EE9A2 7407                                       moveq   #$07, D2
000EE9A4 4EF8 34A0                                  jmp     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EE9A8                            Offset_0x0091FE:
000EE9A8 49F9 0000 0000                            lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x009268
000EE9AE 4A38 FFF8                                 tst.b   ($FFFFFFF8).w                              ; $FFFFFFD8
000EE9B2 6A00                                      bpl.s   Offset_0x009210
000EE9B4 49F9 0000 0000                            lea     (Map_Player_Select_Idx), A4            ; Offset_0x009274
000EE9BA                            Offset_0x009210:
000EE9BA 4A38 FF8C                                  tst.b   ($FFFFFF8C).w
000EE9BE 6700                                       beq.s   Offset_0x00921C
000EE9C0 49F9 0000 0000                             lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x009280
000EE9C6                            Offset_0x00921C:
000EE9C6 0C38 0002 FF8C                             cmpi.b  #$02, ($FFFFFF8C).w
000EE9CC 6600                                       bne.s   Offset_0x00922A
000EE9CE 49F9 0000 0000                             lea     (Map_Sound_Test_Idx), A4               ; Offset_0x009288
000EE9D4                            Offset_0x00922A:
000EE9D4 4E75                                       rts
000EE9D6                            Offset_0x00922C:
000EE9D6 3238 FF84                                  move.w  ($FFFFFF84).w, D1                     ; $FFFFFF64
000EE9DA 1401                                       move.b  D1, D2
000EE9DC E809                                       lsr.b   #$04, D1
000EE9DE 6100                                       bsr.s   Offset_0x009238
000EE9E0 1202                                       move.b  D2, D1
000EE9E2                            Offset_0x009238:
000EE9E2 0241 000F                                  andi.w  #$000F, D1
000EE9E6 0C01 000A                                  cmpi.b  #$0A, D1
000EE9EA 6500                                       bcs.s   Offset_0x009246
000EE9EC 5801                                       addi.b  #$04, D1
000EE9EE                            Offset_0x009246:
000EE9EE 0601 0010                                  addi.b  #$10, D1
000EE9F2 1001                                       move.b  D1, D0
000EE9F4 34C0                                       move.w  D0, (A2)+
000EE9F6 4E75                                       rts
000EE9F8                            ;-------------------------------------------------------------------------------                
000EE9F8                            Menu_Options_Idx: ; Offset_0x009250:
000EE9F8 0000 0000                                  dc.l    Map_Player_Select_Caption              ; Offset_0x009778
000EE9FC 4192 0003                                  dc.w    $4192, $0003
000EEA00 0000 0000                                  dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0097DA       
000EEA04 4592 0003                                  dc.w    $4592, $0003
000EEA08 0000 0000                                  dc.l    Map_Sound_Test_Caption                 ; Offset_0x00980C   
000EEA0C 4992 0003                                  dc.w    $4992, $0003  
000EEA10                            ;-------------------------------------------------------------------------------                
000EEA10                            Map_Player_Select_Jap_Idx: ; Offset_0x009268: 
000EEA10 0000 0000                                  dc.l    Map_Sonic_And_Miles                    ; Offset_0x00978A                 
000EEA14 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA  
000EEA18 0000 0000                                  dc.l    Map_Miles_Alone                        ; Offset_0x0097BA 
000EEA1C                            ;-------------------------------------------------------------------------------                
000EEA1C                            Map_Player_Select_Idx: ; Offset_0x009274  
000EEA1C 0000 0000                                  dc.l    Map_Sonic_And_Tails                    ; Offset_0x00979A 
000EEA20 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x0097AA
000EEA24 0000 0000                                  dc.l    Map_Tails_Alone                        ; Offset_0x0097CA               
000EEA28                            ;-------------------------------------------------------------------------------                
000EEA28                            Map_Vs_Mode_Items_Idx: ; Offset_0x009280:  
000EEA28 0000 0000                                  dc.l    Map_All_Kinds_Items                    ; Offset_0x0097EC  
000EEA2C 0000 0000                                  dc.l    Map_Teleport_Only                      ; Offset_0x0097FC
000EEA30                            ;-------------------------------------------------------------------------------                
000EEA30                            Map_Sound_Test_Idx: ; Offset_0x009288:          
000EEA30 0000 0000                                  dc.l    Map_Sound_Test_Sound                   ; Offset_0x00981E
000EEA34                            ;===============================================================================
000EEA34                            
000EEA34                            Level_Select_Menu: ; Offset_0x00928C:
000EEA34 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEA3A 41F9 0000 0000                             lea     (Menu_Level_Select_Text), A0           ; Offset_0x009A8C
000EEA40 303C 0000                                  move.w  #$0000, D0
000EEA44 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EEA48 43F9 FFFF 0000                             lea     ($FFFF0000), A1
000EEA4E 203C 4000 0003                             move.l  #$40000003, D0
000EEA54 7227                                       moveq   #$27, D1
000EEA56 741B                                       moveq   #$1B, D2
000EEA58 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EEA5C 7600                                       moveq   #$00, D3
000EEA5E 6100 0000                                  bsr     Offset_0x0095FC
000EEA62 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EEA68 41F9 0000 0000                             lea     (Menu_Icons_Mappings), A0              ; Offset_0x009BE0
000EEA6E 303C 0090                                  move.w  #$0090, D0
000EEA72 4EB8 389E                                  jsr     EniDec                              ; Offset_0x00177A
000EEA76 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EEA7A 4278 FF7A                                  clr.w   ($FFFFFF7A).w
000EEA7E 4278 FF10                                  clr.w   ($FFFFFF10).w
000EEA82 4238 F711                                  clr.b   ($FFFFF711).w
000EEA86 4278 F7F0                                  clr.w   ($FFFFF7F0).w
000EEA8A 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EEA90 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EEA96 7014                                       moveq   #$14, D0
000EEA98 4EB8 47FA                                  jsr     PalLoad1                               ; Offset_0x0026CE
000EEA9C 43F8 FB40                                  lea     ($FFFFFB40).w, A1
000EEAA0 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
000EEAA4 7207                                       moveq   #$07, D1
000EEAA6                            Offset_0x009300:
000EEAA6 24D1                                       move.l  (A1), (A2)+
000EEAA8 4299                                       clr.l   (A1)+
000EEAAA 51C9 FFFA                                  dbra    D1, Offset_0x009300
000EEAAE 103C 000F                                  move.b  #$0F, D0      ; $91
000EEAB2 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EEAB6 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
000EEABC                            ;               clr.w   (Two_Player_Flag).w                          ; $FFFFFFB8
000EEABC 42B8 F700                                  clr.l   ($FFFFF700).w
000EEAC0 42B8 F704                                  clr.l   ($FFFFF704).w
000EEAC4 4278 FF0C                                  clr.w   ($FFFFFF0C).w
000EEAC8 4278 FF0E                                  clr.w   ($FFFFFF0E).w
000EEACC 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EEAD2 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EEAD8 3038 F60C                                  move.w  ($FFFFF60C).w, D0
000EEADC 0000 0040                                  ori.b   #$40, D0
000EEAE0 33C0 00C0 0004                             move.w  D0, ($00C00004)                       ; $00C00004
000EEAE6 4EB8 446E                                  jsr     Pal_FadeTo                             ; Offset_0x002382
000EEAEA                            Level_Select_Menu_Main_Loop: ; Offset_0x009348:
000EEAEA 11FC 0016 F62A                             move.b  #$16, ($FFFFF62A).w                       ; $FFFFF62A
000EEAF0 4EB9 0000 8D72                             jsr     DelayProgram                           ; Offset_0x00333E
000EEAF6 46FC 2700                                  move    #$2700, SR
000EEAFA 7600                                       moveq   #$00, D3
000EEAFC 6100 0000                                  bsr     Offset_0x00955A
000EEB00 6100 0000                                  bsr     Offset_0x00947C
000EEB04 363C 6000                                  move.w  #$6000, D3
000EEB08 6100 0000                                  bsr     Offset_0x00955A
000EEB0C 6100 0000                                  bsr     Menu_Display_Icon                      ; Offset_0x00962A
000EEB10 46FC 2300                                  move    #$2300, SR
000EEB14 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x00874E
000EEB1A 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x03FC78
000EEB20 1038 F605                                  move.b  ($FFFFF605).w, D0
000EEB24 8038 F607                                  or.b    ($FFFFF607).w, D0
000EEB28 0200 0080                                  andi.b  #$80, D0
000EEB2C 6600                                       bne.s   Offset_0x00938E
000EEB2E 60BA                                       bra     Level_Select_Menu_Main_Loop            ; Offset_0x009348
000EEB30                            Offset_0x00938E:
000EEB30 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EEB34 D040                                       add.w   D0, D0
000EEB36 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x0093F2
000EEB3A 6B00 0000                                  bmi     Menu_Game_Reset                        ; Offset_0x0093EA
000EEB3E 0C40 0600                                  cmpi.w  #$0600, D0
000EEB42 6700 0000                                  beq     Menu_Test_Stage
000EEB46 0C40 4000                                  cmpi.w  #$4000, D0
000EEB4A 6600 0000                                  bne.w   Menu_Load_Level                        ; Offset_0x00941E
000EEB4E 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w         ; $10, $FFFFF600
000EEB54 4278 FE10                                  clr.w   ($FFFFFE10).w                                 ; $FFFFFE10
000EEB58 4EB9 0000 99F8                             jsr (LoadLivesLS).l
000EEB5E                            ;				move.b  #$03, ($FFFFFEC6).w
000EEB5E 7000                                       moveq   #$00, D0
000EEB60 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EEB64 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EEB68 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EEB6C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EEB70 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EEB74 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EEB78 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EEB80                            ;               move.l  #$00001388, ($FFFFFFC4).w
000EEB80 31F8 FF7C FF7A                             move.w  ($FFFFFF7C).w, ($FFFFFF7A).w
000EEB86 4E75                                       rts
000EEB88                            Menu_Game_Reset: ; Offset_0x0093EA:
000EEB88 11FC 0000 F600                             move.b  #$00, ($FFFFF600).w           ; $00, $FFFFF600
000EEB8E 4E75                                       rts
000EEB90                            Menu_Test_Stage:
000EEB90                            ;                move.b	#$0018,($FFFFF600).w
000EEB90                            ;				move.w	#$0701,($FFFFFE10).w
000EEB90 4EB9 0000 0000             				jsr		Menu_Load_Level
000EEB96 4E75                       				rts
000EEB98                            ;-------------------------------------------------------------------------------                
000EEB98                            Menu_Level_Select_Array: ; Offset_0x0093F2:
000EEB98 0000 0001 0002                             dc.w    $0000, $0001, $0002
000EEB9E 0100 0101 0102                             dc.w    $0100, $0101, $0102
000EEBA4 0200 0201 0202                             dc.w    $0200, $0201, $0202
000EEBAA 0300 0301 0302                             dc.w    $0300, $0301, $0302
000EEBB0 0400 0401 0402                             dc.w    $0400, $0401, $0402
000EEBB6 0500 0501 0103                             dc.w    $0500, $0501, $0103
000EEBBC 0502 4000 0701                             dc.w    $0502, $4000, $0701
000EEBC2 FFFF                                       dc.w    $FFFF
000EEBC4                            ;------------------------------------------------------------------------------- 
000EEBC4                            Menu_Load_Level: ; Offset_0x00941E:
000EEBC4 0240 3FFF                                  andi.w  #$3FFF, D0
000EEBC8 31C0 FE10                                  move.w  D0, ($FFFFFE10).w                             ; $FFFFFE10
000EEBCC 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w             ; $0C, $FFFFF600
000EEBD2 4EB9 0000 99F8                             jsr (LoadLivesLS).l
000EEBD8                            ;                move.b  #$03, ($FFFFFEC6).w
000EEBD8 7000                                       moveq   #$00, D0
000EEBDA 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
000EEBDE 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
000EEBE2 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
000EEBE6 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
000EEBEA 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
000EEBEE 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
000EEBF2 11C0 FE18                                  move.b  D0, ($FFFFFE18).w
000EEBF6 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
000EEBFE                            ;				move.l  #$00001388, ($FFFFFFC4).w
000EEBFE 103C 00E1                                  move.b  #Volume_Down, D0        ; $F9
000EEC02 4EB8 3212                                  jsr     (PlaySound)                             ; Offset_0x00132C
000EEC06 7000                                       moveq   #$00, D0
000EEC08 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
000EEC0C 31C0 FFE8                                  move.w  D0, ($FFFFFFE8).w
000EEC10 4E75                                       rts 
000EEC12                            ;------------------------------------------------------------------------------- 
000EEC12                            Offset_0x00947C:
000EEC12 1238 F605                                  move.b  ($FFFFF605).w, D1
000EEC16 0201 0003                                  andi.b  #$03, D1
000EEC1A 6600                                       bne.s   Offset_0x00948C
000EEC1C 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
000EEC20 6A00                                       bpl.s   Offset_0x0094C2
000EEC22                            Offset_0x00948C:
000EEC22                            ;                move.w  #$000B, ($FFFFFF80).w
000EEC22 0838 0006 FFF8             				btst	#6,(Graphics_Flags).w
000EEC28 6600                       				bne.s	Offset_0x00948C_2
000EEC2A 31FC 000B FF80             				move.w  #$000B, ($FFFFFF80).w
000EEC30 6000 0000                  				bra.w	Offset_0x00948C_3
000EEC34                            Offset_0x00948C_2:
000EEC34 31FC 0009 FF80             				move.w  #$0009, ($FFFFFF80).w
000EEC3A                            Offset_0x00948C_3:
000EEC3A 1238 F604                                  move.b  ($FFFFF604).w, D1
000EEC3E 0201 0003                                  andi.b  #button_up_mask|button_down_mask, D1
000EEC42 6700                                       beq.s   Offset_0x0094C2
000EEC44 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EEC4A 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EEC4E 0801 0000                                  btst    #$00, D1
000EEC52 6700                                       beq.s   Offset_0x0094AC
000EEC54 5340                                       subq.w  #$01, D0
000EEC56 6400                                       bcc.s   Offset_0x0094AC
000EEC58 7015                                       moveq   #$15, D0
000EEC5A                            Offset_0x0094AC:
000EEC5A 0801 0001                                  btst    #$01, D1
000EEC5E 6700                                       beq.s   Offset_0x0094BC
000EEC60 5240                                       addq.w  #$01, D0
000EEC62 0C40 0016                                  cmpi.w  #$0016, D0
000EEC66 6500                                       bcs.s   Offset_0x0094BC
000EEC68 7000                                       moveq   #$00, D0
000EEC6A                            Offset_0x0094BC:
000EEC6A 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EEC6E 4E75                                       rts
000EEC70                            Offset_0x0094C2:
000EEC70 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EEC76 6600                                       bne.s   Offset_0x00952C
000EEC78 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EEC7C 1238 F605                                  move.b  ($FFFFF605).w, D1
000EEC80 0801 0002                                  btst    #$02, D1
000EEC84 6700                                       beq.s   Offset_0x0094DE
000EEC86 5300                                       subq.b  #$01, D0
000EEC88                            ;                bcc.w   Offset_0x0094DE
000EEC88                                    ;        moveq   #$7F, D0
000EEC88                            Offset_0x0094DE:
000EEC88 0801 0003                                  btst    #$03, D1
000EEC8C 6700                                       beq.s   Offset_0x0094EE
000EEC8E 5200                                       addq.b  #$01, D0
000EEC90                               ;             cmpi.w  #$0080, D0
000EEC90                              ;              bcs.s   Offset_0x0094EE
000EEC90                             ;               moveq   #$00, D0
000EEC90                            Offset_0x0094EE:
000EEC90 0801 0006                  	btst	#button_A,d1
000EEC94 6700                       	beq.s	Offset_0x0094EE_2
000EEC96 0600 0010                  	addi.b	#$10,d0
000EEC9A                            Offset_0x0094EE_2:
000EEC9A 0801 0004                  	btst	#button_B,d1
000EEC9E 6700                       	beq.s	Offset_0x0094FC
000EECA0 0400 0010                  	subi.b	#$10,d0
000EECA4                            ;	andi.b	#$FF,d0
000EECA4                            
000EECA4                            Offset_0x0094FC:
000EECA4 31C0 FF84                                  move.w  D0, ($FFFFFF84).w                     ; $FFFFFF64
000EECA8 0241 0020                                  andi.w  #button_C_mask, D1
000EECAC 6700                                       beq.s   Offset_0x00952A
000EECAE 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EECB2 4EB8 3212                                  jsr     (PlaySound)                           ; Offset_0x00131A
000EECB6 41F9 0000 0000                             lea     (Code_Debug_Mode), A0                  ; Offset_0x009768
000EECBC 45F9 0000 0000                             lea     (Code_All_Emeralds), A2                ; Offset_0x009772
000EECC2 43F8 FFD0                                  lea     ($FFFFFFD0).w, A1
000EECC6 7401                                       moveq   #$01, D2
000EECC8 6100 0000                                  bsr     Offset_0x0096EA
000EECCC                            Offset_0x00952A:
000EECCC 4E75                                       rts
000EECCE                            Offset_0x00952C:
000EECCE 1238 F605                                  move.b  ($FFFFF605).w, D1
000EECD2 0201 000C                                  andi.b  #$0C, D1
000EECD6 6700                                       beq.s   Offset_0x009542
000EECD8 4EB9 0000 A13A             				jsr		Sound_Select_Options
000EECDE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EECE2 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x009544
000EECE6 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
000EECEA                            Offset_0x009542:
000EECEA 4E75                                       rts
000EECEC                            ;-------------------------------------------------------------------------------
000EECEC                            Menu_Left_Right_Select: ; Offset_0x009544:
000EECEC 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
000EECFB 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C                                                               
000EED02                            ;-------------------------------------------------------------------------------  
000EED02                            Offset_0x00955A:
000EED02 49F9 FFFF 0000                             lea     ($FFFF0000), A4
000EED08 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5              ; Offset_0x009692
000EED0E 4DF9 00C0 0000                             lea     ($00C00000), A6                          ; $00C00000
000EED14 7000                                       moveq   #$00, D0
000EED16 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EED1A E548                                       lsl.w   #$02, D0
000EED1C 47F5 0000                                  lea     $00(A5, D0), A3
000EED20 7000                                       moveq   #$00, D0
000EED22 1013                                       move.b  (A3), D0
000EED24 C0FC 0050                                  mulu.w  #$0050, D0
000EED28 7200                                       moveq   #$00, D1
000EED2A 122B 0001                                  move.b  $0001(A3), D1
000EED2E D041                                       add.w   D1, D0
000EED30 43F4 0000                                  lea     $00(A4, D0), A1
000EED34 7200                                       moveq   #$00, D1
000EED36 1213                                       move.b  (A3), D1
000EED38 EF49                                       lsl.w   #$07, D1
000EED3A D22B 0001                                  add.b   $0001(A3), D1
000EED3E 0641 C000                                  addi.w  #$C000, D1
000EED42 E589                                       lsl.l   #$02, D1
000EED44 E449                                       lsr.w   #$02, D1
000EED46 0041 4000                                  ori.w   #$4000, D1
000EED4A 4841                                       swap.w  D1
000EED4C 2D41 0004                                  move.l  D1, $0004(A6)
000EED50 740D                                       moveq   #$0D, D2
000EED52                            Offset_0x0095AA:
000EED52 3019                                       move.w  (A1)+, D0
000EED54 D043                                       add.w   D3, D0
000EED56 3C80                                       move.w  D0, (A6)
000EED58 51CA FFF8                                  dbra    D2, Offset_0x0095AA
000EED5C 544B                                       addq.w  #$02, A3
000EED5E 7000                                       moveq   #$00, D0
000EED60 1013                                       move.b  (A3), D0
000EED62 6700                                       beq.s   Offset_0x0095EE
000EED64 C0FC 0050                                  mulu.w  #$0050, D0
000EED68 7200                                       moveq   #$00, D1
000EED6A 122B 0001                                  move.b  $0001(A3), D1
000EED6E D041                                       add.w   D1, D0
000EED70 43F4 0000                                  lea     $00(A4, D0), A1
000EED74 7200                                       moveq   #$00, D1
000EED76 1213                                       move.b  (A3), D1
000EED78 EF49                                       lsl.w   #$07, D1
000EED7A D22B 0001                                  add.b   $0001(A3), D1
000EED7E 0641 C000                                  addi.w  #$C000, D1
000EED82 E589                                       lsl.l   #$02, D1
000EED84 E449                                       lsr.w   #$02, D1
000EED86 0041 4000                                  ori.w   #$4000, D1
000EED8A 4841                                       swap.w  D1
000EED8C 2D41 0004                                  move.l  D1, $0004(A6)
000EED90 3019                                       move.w  (A1)+, D0
000EED92 D043                                       add.w   D3, D0
000EED94 3C80                                       move.w  D0, (A6)
000EED96                            Offset_0x0095EE:
000EED96 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w
000EED9C 6600                                       bne.s   Offset_0x0095FA
000EED9E 6100 0000                                  bsr     Offset_0x0095FC
000EEDA2                            Offset_0x0095FA:
000EEDA2 4E75                                       rts       
000EEDA4                            ;------------------------------------------------------------------------------- 
000EEDA4                            Offset_0x0095FC:
000EEDA4 23FC 49C4 0003 00C0 0004                   move.l  #$49C40003, ($00C00004) ; Posição dos números do Sound Test
000EEDAE 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EEDB2 1400                                       move.b  D0, D2
000EEDB4 E808                                       lsr.b   #$04, D0
000EEDB6 6100                                       bsr.s   Offset_0x009612
000EEDB8 1002                                       move.b  D2, D0
000EEDBA                            Offset_0x009612:
000EEDBA 0240 000F                                  andi.w  #$000F, D0
000EEDBE 0C00 000A                                  cmpi.b  #$0A, D0
000EEDC2 6500                                       bcs.s   Offset_0x009620
000EEDC4 5800                                       addi.b  #$04, D0
000EEDC6                            Offset_0x009620:
000EEDC6 0600 0010                                  addi.b  #$10, D0
000EEDCA D043                                       add.w   D3, D0
000EEDCC 3C80                                       move.w  D0, (A6)
000EEDCE 4E75                                       rts
000EEDD0                            Offset_0x0096EA:
000EEDD0 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
000EEDD4 D0C0                                       adda.w  D0, A0
000EEDD6 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EEDDA B010                                       cmp.b   (A0), D0
000EEDDC 6600                                       bne.s   Offset_0x009710
000EEDDE 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
000EEDE2 4A28 0001                                  tst.b   $0001(A0)
000EEDE6 6600                                       bne.s   Offset_0x009716
000EEDE8 22BC 0101 0101                             move.l  #$01010101, (A1)
000EEDEE 31D1 FFD0                  				move.w	(A1),($FFFFFFD0).w	; activate slow motion & frame advance cheat flag
000EEDF2 11FC 0001 FFD2             				move.b	#$01,($FFFFFFD2).w	; activate debug mode cheat flag
000EEDF8 11FC 0001 FFFA             				move.b	#$01,($FFFFFFFA).w	; activate debug mode cheat flag
000EEDFE 103C 0033                                  move.b  #$33, D0           ; $B5
000EEE02 4EB8 325C                                  jsr     (PlaySound_Special)                             ; Offset_0x00132C
000EEE06                            Offset_0x009710:
000EEE06 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
000EEE0C                            Offset_0x009716:
000EEE0C 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
000EEE10 D4C0                                       adda.w  D0, A2
000EEE12 3038 FF84                                  move.w  ($FFFFFF84).w, D0                     ; $FFFFFF64
000EEE16 B012                                       cmp.b   (A2), D0
000EEE18 6600                                       bne.s   Offset_0x009754
000EEE1A 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
000EEE1E 4A2A 0001                                  tst.b   $0001(A2)
000EEE22 6600                                       bne.s   Offset_0x00975A
000EEE24 4A42                                       tst.w   D2
000EEE26 6600                                       bne.s   Offset_0x009744
000EEE28 11FC 000F FE18                             move.b  #$0F, ($FFFFFE18).w
000EEE2E 103C 00BF                                  move.b  #$BF, D0 ; $3F - Referência incorreta
000EEE32 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EEE36 6000                                       bra.s   Offset_0x009754
000EEE38                            Offset_0x009744:
000EEE38 13FC 0001 00A1 30F1        				move.b	#1,(SRAM_access_flag).l		; enable SRAM (required)
000EEE40 11FC 0006 FE57             				move.b	#$6,(Emeralds_flag).w	; set number of chaos emeralds to 6
000EEE46 13FC 0006 0020 0121        				move.b	#$6,($200121).l
000EEE4E 31FC 0102 FE58             				move.w	#$0102,(Emeralds_flag+1).w	; set number of chaos emeralds to 6
000EEE54 13FC 0001 0020 0123        				move.b	#$1,($200123).l
000EEE5C 31FC 0304 FE5A             				move.w	#$0304,(Emeralds_flag+3).w	; set number of chaos emeralds to 6	
000EEE62 13FC 0002 0020 0125        				move.b	#$2,($200125).l
000EEE6A 11FC 0005 FE5C             				move.b	#$05,(Emeralds_flag+5).w	; set number of chaos emeralds to 6
000EEE70 13FC 0003 0020 0127        				move.b	#$3,($200127).l
000EEE78 13FC 0004 0020 0129        				move.b	#$4,($200129).l
000EEE80 13FC 0005 0020 012B        				move.b	#$5,($20012B).l
000EEE88 13FC 0000 00A1 30F1        				move.b	#0,(SRAM_access_flag).l		; enable SRAM (required)
000EEE90 103C 002B                                  move.b  #Emerald_Snd, D0        ; $9D
000EEE94 4EB8 325C                                  jsr     (PlaySound_Special)                           ; Offset_0x00131A
000EEE98                            Offset_0x009754:
000EEE98 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
000EEE9E                            Offset_0x00975A:
000EEE9E 4E75                                       rts
000EEEA0                            ;-------------------------------------------------------------------------------                    
000EEEA0                            Code_Level_Select: ;  Offset_0x00975C:
000EEEA0 1965 0917 0000                             dc.b    $19, $65, $09, $17, $00, $00
000EEEA6                            ;-------------------------------------------------------------------------------                 
000EEEA6                            Code_14_Continues: ; Offset_0x009762:
000EEEA6 0101 0204 0000                             dc.b    $01, $01, $02, $04, $00, $00
000EEEAC                            ;-------------------------------------------------------------------------------                  
000EEEAC                            Code_Debug_Mode: ; Offset_0x009768:
000EEEAC 0109 0902 0101 0204 0000                   dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $00, $00
000EEEB6                            ;-------------------------------------------------------------------------------                 
000EEEB6                            Code_All_Emeralds: ; Offset_0x009772:
000EEEB6 0401 0206 0000                             dc.b    $04, $01, $02, $06, $00, $00
000EEEBC                            ;-------------------------------------------------------------------------------  
000EEEBC =00000000                  __ = $00
000EEEBC =00000010                  _0 = $10
000EEEBC =00000011                  _1 = $11
000EEEBC =00000012                  _2 = $12
000EEEBC =00000013                  _3 = $13
000EEEBC =00000014                  _4 = $14
000EEEBC =00000015                  _5 = $15
000EEEBC =00000016                  _6 = $16
000EEEBC =00000017                  _7 = $17
000EEEBC =00000018                  _8 = $18
000EEEBC =00000019                  _9 = $19
000EEEBC =0000001E                  _A = $1E
000EEEBC =0000001F                  _B = $1F
000EEEBC =00000020                  _C = $20
000EEEBC =00000021                  _D = $21
000EEEBC =00000022                  _E = $22    
000EEEBC =00000023                  _F = $23
000EEEBC =00000024                  _G = $24
000EEEBC =00000025                  _H = $25
000EEEBC =00000026                  _I = $26
000EEEBC =00000027                  _J = $27
000EEEBC =00000028                  _K = $28
000EEEBC =00000029                  _L = $29
000EEEBC =0000002A                  _M = $2A
000EEEBC =0000002B                  _N = $2B
000EEEBC =0000002C                  _O = $2C
000EEEBC =0000002D                  _P = $2D
000EEEBC =0000002E                  _Q = $2E
000EEEBC =0000002F                  _R = $2F
000EEEBC =00000030                  _S = $30
000EEEBC =00000031                  _T = $31
000EEEBC =00000032                  _U = $32
000EEEBC =00000033                  _V = $33
000EEEBC =00000034                  _W = $34
000EEEBC =00000035                  _X = $35
000EEEBC =00000036                  _Y = $36
000EEEBC =00000037                  _Z = $37
000EEEBC =0000001A                  _st = $1A
000EEEBC                            
000EEEBC                            Map_Player_Select_Caption: ; Offset_0x009778:
000EEEBC 10                                         dc.b    $10
000EEEBD 1A00 2D29 1E36 222F 0030+                  dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
000EEECE                            Map_Sonic_And_Miles: ; Offset_0x00978A: 
000EEECE 0E                                         dc.b    $0E
000EEECF 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
000EEEDE                            Map_Sonic_And_Tails: ; Offset_0x00979A: 
000EEEDE 0E                                         dc.b    $0E
000EEEDF 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
000EEEEE                            Map_Sonic_Alone: ; Offset_0x0097AA:
000EEEEE 0E                                         dc.b    $0E
000EEEEF 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EEEFE                            Map_Miles_Alone: ; Offset_0x0097BA:
000EEEFE 0E                                         dc.b    $0E
000EEEFF 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EEF0E                            Map_Tails_Alone: ; Offset_0x0097CA:
000EEF0E 0E                                         dc.b    $0E
000EEF0F 0000 0000 2B32 2929 0000+                  dc.b    __,__,__,__,_N,_U,_L,_L,__,__,__,__,__,__,__
000EEF1E                            ;-------------------------------------------------------------------------------     
000EEF1E                            Map_Vs_Mode_Items_Caption: ; Offset_0x0097DA:
000EEF1E 10                                         dc.b    $10
000EEF1F 1A1E 2931 222F 2B1E 3122+                  dc.b    _st,_A,_L,_T,_E,_R,_N,_A,_T,_E,__,_M,_U,_S,_I,_C,_st  
000EEF30                            Map_All_Kinds_Items: ; Offset_0x0097EC:  
000EEF30 0E                                         dc.b    $0E
000EEF31 0000 0000 0000 2C23 2300+                  dc.b    __,__,__,__,__,__,_O,_F,_F,__,__,__,__,__,__
000EEF40                            Map_Teleport_Only: ; Offset_0x0097FC:
000EEF40 0E                                         dc.b    $0E
000EEF41 0000 0000 0000 2C2B 0000+                  dc.b    __,__,__,__,__,__,_O,_N,__,__,__,__,__,__,__
000EEF50                            ;-------------------------------------------------------------------------------   
000EEF50                            Map_Sound_Test_Caption: ; Offset_0x00980C:
000EEF50 10                                         dc.b    $10
000EEF51 1A00 0030 2C32 2B21 0031+                  dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
000EEF62                            Map_Sound_Test_Sound: ; Offset_0x00981E:   
000EEF62 0E                                         dc.b    $0E
000EEF63 0000 0000 0000 1010 0000+                  dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__   
000EEF72                            ;-------------------------------------------------------------------------------                               
000EEF72                            Menu_Display_Icon: ; Offset_0x00962A:
000EEF72 3038 FF82                                  move.w  ($FFFFFF82).w, D0
000EEF76 47F9 0000 0000                             lea     (Menu_Icon_List), A3                   ; Offset_0x00967C
000EEF7C 47F3 0000                                  lea     $00(A3, D0), A3
000EEF80 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
000EEF86 7000                                       moveq   #$00, D0
000EEF88 1013                                       move.b  (A3), D0
000EEF8A E748                                       lsl.w   #$03, D0
000EEF8C 3200                                       move.w  D0, D1
000EEF8E D040                                       add.w   D0, D0
000EEF90 D041                                       add.w   D1, D0
000EEF92 43F1 0000                                  lea     $00(A1, D0), A1
000EEF96 203C 4B36 0003                             move.l  #$4B360003, D0
000EEF9C 7203                                       moveq   #$03, D1
000EEF9E 7402                                       moveq   #$02, D2
000EEFA0 4EB8 34A0                                  jsr     (ShowVDPGraphics)                      ; Offset_0x0013CA
000EEFA4 43F9 0000 0000                             lea     (Pal_Levels_Icons), A1                 ; Offset_0x00982E
000EEFAA 7000                                       moveq   #$00, D0
000EEFAC 1013                                       move.b  (A3), D0
000EEFAE EB48                                       lsl.w   #$05, D0
000EEFB0 43F1 0000                                  lea     $00(A1, D0), A1
000EEFB4 45F8 FB40                                  lea     ($FFFFFB40).w, A2
000EEFB8 7207                                       moveq   #$07, D1
000EEFBA                            Offset_0x009674:
000EEFBA 24D9                                       move.l  (A1)+, (A2)+
000EEFBC 51C9 FFFC                                  dbra    D1, Offset_0x009674
000EEFC0 4E75                                       rts
000EEFC2                            
000EEFC2                            ;--------------------------------------------------------------------------------
000EEFC2                            Dynamic_Normal: 
000EEFC2 47F8 F7F0                  		lea	($FFFFF7F0).w,a3 
000EEFC6                            loc_3BD74: 
000EEFC6 3C1A                       		move.w	(a2)+,d6
000EEFC8                            Dynamic_Normal_Loop: 
000EEFC8 5313                       		subq.b	#1,(a3)
000EEFCA 6400                       		bcc.s	loc_3BDBC
000EEFCC 7000                       		moveq	#0,d0
000EEFCE 102B 0001                  		move.b	1(a3),d0
000EEFD2 B02A 0006                  		cmp.b	6(a2),d0
000EEFD6 6500                       		bcs.s	loc_3BD8C
000EEFD8 7000                       		moveq	#0,d0
000EEFDA 1740 0001                  		move.b	d0,1(a3)
000EEFDE                            loc_3BD8C:
000EEFDE 522B 0001                  		addq.b	#1,1(a3)
000EEFE2 1692                       		move.b	(a2),(a3)
000EEFE4 6A00                       		bpl.s	loc_3BD9A
000EEFE6 D040                       		add.w	d0,d0
000EEFE8 16B2 0009                  		move.b	9(a2,d0),(a3)
000EEFEC                            loc_3BD9A:
000EEFEC 1032 0008                  		move.b	8(a2,d0),d0
000EEFF0 EB48                       		lsl.w	#5,d0
000EEFF2 342A 0004                  		move.w	4(a2),d2
000EEFF6 2212                       		move.l	(a2),d1
000EEFF8 0281 00FF FFFF             		and.l	#$FFFFFF,d1
000EEFFE D280                       		add.l	d0,d1
000EF000 7600                       		moveq	#0,d3
000EF002 162A 0007                  		move.b	7(a2),d3
000EF006 E94B                       		lsl.w	#4,d3
000EF008 4EB8 34E0                  		jsr	QueueDMATransfer 
000EF00C                            loc_3BDBC:
000EF00C 102A 0006                  		move.b	6(a2),d0
000EF010 4A12                       		tst.b	(a2)
000EF012 6A00                       		bpl.s	loc_3BDC6
000EF014 D000                       		add.b	d0,d0
000EF016                            loc_3BDC6:
000EF016 5200                       		addq.b	#1,d0
000EF018 0240 00FE                  		and.w	#$FE,d0
000EF01C 45F2 0008                  		lea	8(a2,d0),a2
000EF020 544B                       		addq.w	#2,a3
000EF022 51CE FFA4                  		dbra	d6,dynamic_Normal_Loop 
000EF026 4E75                       		rts
000EF028                            
000EF028                            Menu_Animate: ; Offset_0x00874E:  
000EF028 0000                       	dc.w   0
000EF02A                            ; Sonic/Miles animated background
000EF02A 0000 0000                  	dc.l ($FF<<$18)|Sonic_Miles
000EF02E 0020                       	dc.w $20
000EF030 05                         	dc.b 5
000EF031 0A                         	dc.b $A
000EF032 0000                       	dc.b   0,0
000EF034 0A05                       	dc.b  $A,  5	; 2
000EF036 1405                       	dc.b $14,  5	; 4
000EF038 1E05                       	dc.b $1E,  5	; 10
000EF03A 0000                       	dc.b   0,0
000EF03C                            Pal_Levels_Icons: ; Offset_0x00982E:                
000EF03C                                            incbin  'data\menus\lvsicons.pal'
000EF21C                            Menu_Palette:
000EF21C                                            incbin  'data\menu\menu.pal'
000EF29C                            ;-------------------------------------------------------------------------------                  
000EF29C                            Menu_Icon_List: ; Offset_0x00967C:
000EF29C 0000 0008 0808 0202 0206+                  dc.b    $00, $00, $00, $08, $08, $08, $02, $02, $02, $06, $06, $06, $07, $07, $07, $04
000EF2AC 0404 010C 0B0E                             dc.b    $04, $04, $01, $0C, $0B, $0E  
000EF2B2                            ;-------------------------------------------------------------------------------  
000EF2B2                            Menu_Text_Highlight: ; Offset_0x009692: 
000EF2B2 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
000EF2C2 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
000EF2D2 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
000EF2E2 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
000EF2F2 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
000EF302 0F2C 0F48 132C 1348                        dc.w    $0F2C, $0F48, $132C, $1348                  
000EF30A                            
000EF30A                            ;-------------------------------------------------------------------------------
000EF30A                            ;Nem_MenuFont:                                                    ; Offset_0x07C43A:
000EF30A                             ;               incbin  'data\sprites\menufont.nem'  
000EF30A                            Menu_Frame:                                                   ; Offset_0x07D990:
000EF30A                                            incbin  'data\menus\menu_frm.nem'  
000EF38A                            Level_Icons:
000EF38A                                            incbin  'data\menus\levelico.nem' 
000F01E4                            Menu_Icons_Mappings: ; Offset_0x009BE0: 
000F01E4                                            incbin  'data\menus\iconsmap.eni'   
000F0216                            Versus_Menu_Bg_Mappings:                                      ; Offset_0x07CB80:
000F0216                                            INCBIN	'data\menu\menubg.eni'     
000F0406                            ;-------------------------------------------------------------------------------                 
000F0406                            Menu_Level_Select_Text: ; Offset_0x009A8C:
000F0406                                            incbin  'data\menus\menutext.eni'  
000F054C                            Sonic_Miles:                                                  ; Offset_0x07CD2C: 
000F054C                                            incbin  'data\menu\soncmils.bin'         
000F0A4C                            ;-------------------------------------------------------------------------------   
000F0A4C                            Options_Frame_Mappings: ; Offset_0x009A60:
000F0A4C                                            incbin  'data\menus\optframe.eni'
000F0A4C                                            incbin  'data\menus\optframe.eni'
000F0A78                            ;OptionsMenu:
000F0A78                            ;		include	"_inc\s2_option.asm"
000F0A78                            ;Splashscreen:
000F0A78                            ;		include _inc\splash.asm
000F0A78                            ;		even
000F0A78                            
000F0A78                            Art_Dust:		incbin	#artunc\spindust.bin	; Spindash dust
000F23B8                            		even	
000F23B8                            
000F23B8                            Splashscreen2:
000F23B8                            		include _inc\splash2.asm
000F23B8 103C 00E0                  Splash2:			move.b	#$E0,d0
000F23BC 4EB9 0000 0000             			jsr	PlayMusic				  ; Stop the music
000F23C2 4EB8 3754                  			jsr	ClearPLC			; Clear the PLC
000F23C6 4EB8 4678                  			jsr	Pal_MakeFlash			; Fade out
000F23CA 46FC 2700                  			move	#$2700,sr
000F23CE                            
000F23CE 4DF9 00C0 0004             Splash2_SetupVDP:	lea	($C00004).l,a6			; Setup teh VDP
000F23D4 3CBC 8004                  			move.w	#$8004,(a6)			; Mode register 1 setting
000F23D8 3CBC 8230                  			move.w	#$8230,(a6)			; Map Plane A setting
000F23DC 3CBC 8407                  			move.w	#$8407,(a6)			; Map Plane B setting
000F23E0 3CBC 9001                  			move.w	#$9001,(a6)			; Plane size setting
000F23E4 3CBC 9200                  			move.w	#$9200,(a6)			; Window vertical position
000F23E8 3CBC 8B03                  			move.w	#$8B03,(a6)			; Mode register 3 setting
000F23EC 3CBC 8720                  			move.w	#$8720,(a6)			; Backdrop color setting
000F23F0 4238 F64E                  			clr.b	($FFFFF64E).w
000F23F4 4EB8 3084                  			jsr	ClearScreen			; Clear the actual screen
000F23F8 43F8 D000                  			lea	($FFFFD000).w,a1		; Clear $FFD000-$FFD7FF
000F23FC 7000                       			moveq	#0,d0
000F23FE 323C 07FF                  			move.w	#$7FF,d1
000F2402                            
000F2402                            Splash2_ClrObjRam:
000F2402 22C0                       			move.l	d0,(a1)+
000F2404 51C9 FFFC                  			dbf	d1,Splash2_ClrObjRam
000F2408                            				
000F2408 23FC 4000 0000 00C0 0004   Splash2_Art:		move.l	#$40000000,($C00004).l		; VRAM $0000
000F2412 41F9 0000 0000             			lea	(Art_Splash2).l,a0		; Image's tiles
000F2418 4EB8 3596                  			jsr	NemDec				; Decompress
000F241C                            ;Here, you may add the art used for your objects
000F241C                            ;		   move.l	#$54C00000,($C00004).l
000F241C                            ;		   lea	(Nem_ObjSplash2).l,a0
000F241C                            ;		   jsr	NemDec
000F241C                            				
000F241C                            Splash2_Mappings:
000F241C 43F9 00FF 0000             			lea	($FF0000).l,a1			; Load screen mappings
000F2422 41F9 0000 0000             			lea	(Map_Splash2).l,a0
000F2428 303C 0000                  			move.w	#0,d0
000F242C 4EB8 389E                  			jsr	EniDec
000F2430                            				
000F2430 43F9 00FF 0000             Splash2_ShowOnVDP:	lea	($FF0000).l,a1			; Show screen
000F2436 203C 4000 0003             			move.l	#$40000003,d0			; Location
000F243C 7227                       			moveq	#$27,d1
000F243E 741B                       			moveq	#$1B,d2
000F2440 4EB8 34A0                  			jsr	ShowVDPGraphics				
000F2444                            
000F2444                            Splash2_Palette:
000F2444 43F9 0000 0000             		lea	(Pal_Splash2).l,a1
000F244A 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F244E 701F                       		moveq	#$1F,d0
000F2450 24D9                       	loop3:	move.l	(a1)+,(a2)+
000F2452 51C8 FFFC                  		dbf	d0,loop3
000F2456                            				
000F2456 303C 0046                  Splash2_Music:		move.w	#$46,d0		; Play music
000F245A 4EB8 3212                  			jsr	PlaySound
000F245E                            ; The own palette for your object.
000F245E                            ;			moveq	#$19,d0		; load Sonic's pallet
000F245E                            ;			jsr	PalLoad2				
000F245E                            Splash2_LoadObj:
000F245E 4EB8 4678                  			jsr	Pal_MakeFlash
000F2462 4EB8 446E                  			jsr	Pal_Fadeto
000F2466                            ;Set the object's ID on $FFFFB000
000F2466                            			;move.b	#$00,($FFFFB000).w ; load your object
000F2466 4EB9 0000 0000             			jsr	RunObjects
000F246C 4EB9 0001 5C8C             			jsr	BuildSprites
000F2472                            ; ---------------------------------------------------------------------------------------------------------------------
000F2472 11FC 0002 F62A             Splash2_Loop:		move.b	#2,(Delay_Time).w		; Function 2 in vInt
000F2478 31FC 02F8 F614             		move.w	#760,(Demo_Time_left).w	; run Sonic Team Screen for 300 frames		
000F247E 4EB9 0000 0000             		jsr	RunObjects
000F2484 4EB9 0001 5C8C             		jsr	BuildSprites
000F248A 6000 0000                  		bra.w Sega2_WaitEnd2
000F248E                            
000F248E                            Sega2_WaitEnd2:	
000F248E 11FC 0002 F62A             		move.b	#2,(Delay_Time).w
000F2494 4EB9 0000 8D72             		jsr	DelayProgram
000F249A 5378 F614                  		sub.w	#1,(Demo_Time_left).w	; add 1 to frame counter
000F249E 0C78 0168 F614             		cmp.w	#360,(Demo_Time_left).w	; is the frame 360?
000F24A4 6700 0000                  		beq.w	Sega2_GotoTitle
000F24A8 0238 0080 F605             		andi.b	#$80,(Ctrl_1_Press).w ; is	Start button pressed?
000F24AE 6700 FFDE                  		beq.w	Sega2_WaitEnd2	; if not, branch
000F24B2                            
000F24B2                            Sega2_GotoTitle:
000F24B2 4278 F614                  		clr.w	(Demo_Time_left).w	; clear frame counter
000F24B6 11FC 0004 F600             		move.b	#$4,(Game_Mode).w	; go to title screen
000F24BC 4E75                       		rts
000F24BE                            		
000F24BE                            Pal_Splash2:		incbin	"STPAL.BIN"
000F24DE                            			even
000F24DE                            Art_Splash2:		incbin	"STTILES.BIN"
000F2F64 00                         			even
000F2F64                            Map_Splash2:		incbin	"STMAP.BIN"
000F2FDC                            			even
000F2FDC                            SplashScreen3:
000F2FDC 4EBA 9C98                  	jsr		ssrgscreen
000F2FE0                            	even
000F2FE0                            	even
000F2FE0                            		even
000F2FE0                            
000F2FE0                            SonicRetroscreen:
000F2FE0                            		include _inc\SonicRetro.asm
000F2FE0                            
000F2FE0                            SRScreen:
000F2FE0 4EF9 0000 0000             	jmp		RetroScreen
000F2FE6                            
000F2FE6                            unk_3140:	incbin	SonicRetroPal.bin
000F3066                            		even
000F3066                            
000F3066                            
000F3066                            ; ---------------------------------------------------------------------------
000F3066                            
000F3066                            RetroScreen:				; DATA XREF: ROM:00000394o
000F3066 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F306C 103C 00E4                  		move.b	#$E4,d0
000F3070 4EB8 325C                  		jsr	PlaySound_Special
000F3074 4EB8 3754                  		jsr	ClearPLC
000F3078 4EB8 4528                  		jsr	Pal_FadeFrom
000F307C                            ;		jsr	VDP_ClrCRAM
000F307C 46FC 2700                  		move	#$2700,sr
000F3080 43F8 D000                  		lea	($FFFFD000).w,a1
000F3084 7000                       		moveq	#0,d0
000F3086 323C 07FF                  		move.w	#$7FF,d1
000F308A                            
000F308A                            loc_6EA56:				; CODE XREF: ROM:0006EA5Cj
000F308A 22FC 0000 0000             		move.l	#0,(a1)+
000F3090 51C9 FFF8                  		dbf	d1,loc_6EA56
000F3094 46FC 2300                  		move	#$2300,sr
000F3098 4278 C800                  		clr.w	($FFFFC800).w				;	clear the VDP buffer to prevent a minor bug that causes glitchy tiles
000F309C 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w	;	from the level select to appear on the Splash Screen star emblem
000F30A4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000F30AE 41F9 0000 0000             		lea	(unk_6F694).l,a0
000F30B4 4EB8 3596                  		jsr	NemDec
000F30B8 23FC 6040 0000 00C0 0004   		move.l	#$60400000,($C00004).l
000F30C2 41F9 0000 0000             		lea	(unk_701FA).l,a0
000F30C8 4EB8 3596                  		jsr	NemDec
000F30CC 23FC 6AE0 0000 00C0 0004   		move.l	#$6AE00000,($C00004).l
000F30D6 41F9 0000 0000             		lea	(unk_7074C).l,a0
000F30DC 4EB8 3596                  		jsr	NemDec
000F30E0 4EB8 3084                  		jsr	ClearScreen
000F30E4 46FC 2300                  		move	#$2300,sr
000F30E8 7000                       		moveq	#0,d0
000F30EA 43F9 0000 0000             		lea	(byte_6F46A).l,a1
000F30F0 E748                       		lsl.w	#3,d0
000F30F2 D2C0                       		adda.w	d0,a1
000F30F4 2459                       		movea.l	(a1)+,a2
000F30F6 3659                       		movea.w	(a1)+,a3
000F30F8 D6FC 0080                  		adda.w	#$80,a3	; ''
000F30FC 3E19                       		move.w	(a1)+,d7
000F30FE                            
000F30FE                            loc_6EABE:				; CODE XREF: ROM:0006EAC0j
000F30FE 26DA                       		move.l	(a2)+,(a3)+
000F3100 51CF FFFC                  		dbf	d7,loc_6EABE
000F3104 43F9 000F 2FE6             		lea	(unk_3140).l,a1		; Load palette
000F310A 45F8 FB80                  		lea	($FFFFFB80).w,a2
000F310E 103C 0040                  		move.b	#$40,d0
000F3112 24D9                       @loop:	move.l	(a1)+,(a2)+
000F3114 4A40                       		tst.w	d0
000F3116 6700                       		beq.s	@endloop
000F3118 5340                       		sub.w	#1,d0
000F311A 60F6                       		bra.s	@loop
000F311C                            @endloop:
000F311C 103C 0019                  		move.b	#$19,d0
000F3120 4EB8 3212                  		jsr	PlaySound
000F3124 6100 0000                  		bsr.w	sub_6EB68
000F3128                            ;		move.w	#3,d0
000F3128                            ;		jsr	PalLoad1
000F3128 11FC 0001 D000             		move.b	#1,($FFFFD000).w
000F312E 11FC 0000 D028             		move.b	#0,($FFFFD028).w
000F3134 11FC 0001 D040             		move.b	#1,($FFFFD040).w
000F313A 11FC 0001 D068             		move.b	#1,($FFFFD068).w
000F3140 11FC 0001 D080             		move.b	#1,($FFFFD080).w
000F3146 11FC 0002 D0A8             		move.b	#2,($FFFFD0A8).w
000F314C 4EB9 0000 0000             		jsr	loc_6F4F2
000F3152 4EB9 0001 5C8C             		jsr	BuildSprites
000F3158 4EB8 446E                  		jsr	Pal_FadeTo
000F315C                            
000F315C                            loc_6EB04:				; CODE XREF: ROM:0006EB56j
000F315C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000F3162 4EB9 0000 8D72             		jsr	DelayProgram
000F3168 5278 FF38                  		addq.w	#1,($FFFFFF38).w
000F316C 4EB9 0000 0000             		jsr	loc_6F4F2
000F3172 4EB9 0001 5C8C             		jsr	BuildSprites
000F3178 7200                       		moveq	#0,d1
000F317A 123C 0050                  		move.b	#$50,d1	; 'P'
000F317E 0C78 0340 FF38             		cmpi.w	#$340,($FFFFFF38).w
000F3184 6C00                       		bge.s	loc_6EB5A
000F3186 7200                       		moveq	#0,d1
000F3188 123C 0050                  		move.b	#$50,d1	; 'P'
000F318C 1038 F605                  		move.b	($FFFFF605).w,d0
000F3190 0800 0004                  		btst	#4,d0
000F3194 6600 0000                  		bne.w	loc_6EB5A
000F3198 0800 0005                  		btst	#5,d0
000F319C 6600 0000                  		bne.w	loc_6EB5A
000F31A0 0800 0006                  		btst	#6,d0
000F31A4 6600 0000                  		bne.w	loc_6EB5A
000F31A8 0800 0007                  		btst	#7,d0
000F31AC 6600 0000                  		bne.w	loc_6EB5A
000F31B0 6000 FFAA                  		bra.w	loc_6EB04
000F31B4                            ; ---------------------------------------------------------------------------
000F31B4                            
000F31B4                            loc_6EB5A:				; CODE XREF: ROM:0006EB2Aj
000F31B4                            					; ROM:0006EB3Aj ...
000F31B4 31FC 0000 FF38             		move.w	#0,($FFFFFF38).w
000F31BA 4EBA F1FC                  		jsr	SplashScreen2	; go to title screen
000F31BE 4E75                       		rts
000F31C0                            
000F31C0                            ; =============== S U B	R O U T	I N E =======================================
000F31C0                            
000F31C0                            
000F31C0                            sub_6EB68:				; CODE XREF: ROM:0006EACCp
000F31C0 43F9 0000 0000             		lea	(unk_6EBAA).l,a1
000F31C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000F31CC 283C 4000 0003             		move.l	#$40000003,d4
000F31D2 721B                       		moveq	#$1B,d1
000F31D4                            
000F31D4                            loc_6EB7C:				; CODE XREF: sub_6EB68+22j
000F31D4 2D44 0004                  		move.l	d4,4(a6)
000F31D8 6100 0000                  		bsr.w	sub_6EB90
000F31DC 0684 0080 0000             		addi.l	#$800000,d4
000F31E2 51C9 FFF0                  		dbf	d1,loc_6EB7C
000F31E6 4E75                       		rts
000F31E8                            ; End of function sub_6EB68
000F31E8                            
000F31E8                            
000F31E8                            ; =============== S U B	R O U T	I N E =======================================
000F31E8                            
000F31E8                            
000F31E8                            sub_6EB90:				; CODE XREF: sub_6EB68+18p
000F31E8 7427                       		moveq	#$27,d2	; '''
000F31EA                            
000F31EA                            loc_6EB92:				; CODE XREF: sub_6EB90+Cj
000F31EA                            					; sub_6EB90+14j
000F31EA 7000                       		moveq	#0,d0
000F31EC 3019                       		move.w	(a1)+,d0
000F31EE 6A00                       		bpl.s	loc_6EBA2
000F31F0 3CBC 0000                  		move.w	#0,(a6)
000F31F4 51CA FFF4                  		dbf	d2,loc_6EB92
000F31F8 4E75                       		rts
000F31FA                            ; ---------------------------------------------------------------------------
000F31FA                            
000F31FA                            loc_6EBA2:				; CODE XREF: sub_6EB90+6j
000F31FA 3C80                       		move.w	d0,(a6)
000F31FC 51CA FFEC                  		dbf	d2,loc_6EB92
000F3200 4E75                       		rts
000F3202                            ; End of function sub_6EB90
000F3202                            
000F3202                            ; ---------------------------------------------------------------------------
000F3202                            unk_6EBAA:	incbin	AsciiMaybe.bin
000F3AC2                            		even
000F3AC2                            byte_6F46A:	incbin	SRMappings.bin
000F3B4C                            		even
000F3B4C                            ; ---------------------------------------------------------------------------
000F3B4C                            
000F3B4C                            loc_6F4F2:				; CODE XREF: ROM:0006EAF4p
000F3B4C                            					; ROM:0006EB12p
000F3B4C 41F8 D000                  		lea	($FFFFD000).w,a0
000F3B50 7E7F                       		moveq	#$7F,d7	; ''
000F3B52 7000                       		moveq	#0,d0
000F3B54                            
000F3B54                            loc_6F4FA:				; CODE XREF: ROM:loc_6F50Ej
000F3B54 1010                       		move.b	(a0),d0
000F3B56 6700                       		beq.s	loc_6F50A
000F3B58 D040                       		add.w	d0,d0
000F3B5A D040                       		add.w	d0,d0
000F3B5C 227B 0000                  		movea.l	off_6F514-4(pc,d0.w),a1
000F3B60 4E91                       		jsr	(a1)
000F3B62 7000                       		moveq	#0,d0
000F3B64                            
000F3B64                            loc_6F50A:				; CODE XREF: ROM:0006F4FCj
000F3B64 41E8 0040                  		lea	$40(a0),a0
000F3B68                            
000F3B68                            loc_6F50E:
000F3B68 51CF FFEA                  		dbf	d7,loc_6F4FA
000F3B6C 4E75                       		rts
000F3B6E                            ; ---------------------------------------------------------------------------
000F3B6E 0000 0000                  off_6F514:	dc.l loc_6F518		; DATA XREF: ROM:0006F502t
000F3B72                            ; ---------------------------------------------------------------------------
000F3B72                            
000F3B72                            loc_6F518:				; DATA XREF: ROM:off_6F514o
000F3B72 7000                       		moveq	#0,d0
000F3B74 1028 0028                  		move.b	$28(a0),d0
000F3B78 D040                       		add.w	d0,d0
000F3B7A D040                       		add.w	d0,d0
000F3B7C 4EFB 0000                  		jmp	loc_6F528(pc,d0.w)
000F3B80                            ; ---------------------------------------------------------------------------
000F3B80 4E75                       		rts
000F3B82                            ; ---------------------------------------------------------------------------
000F3B82                            
000F3B82                            loc_6F528:				; CODE XREF: ROM:0006F522j
000F3B82 6000 0000                  		bra.w	loc_6F534
000F3B86                            ; ---------------------------------------------------------------------------
000F3B86 6000 0000                  		bra.w	loc_6F576
000F3B8A                            ; ---------------------------------------------------------------------------
000F3B8A 6000 0000                  		bra.w	loc_6F5E6
000F3B8E                            ; ---------------------------------------------------------------------------
000F3B8E                            
000F3B8E                            loc_6F534:				; CODE XREF: ROM:loc_6F528j
000F3B8E 7000                       		moveq	#0,d0
000F3B90 1028 0024                  		move.b	$24(a0),d0
000F3B94 323B 0000                  		move.w	off_6F542(pc,d0.w),d1
000F3B98 4EFB 1000                  		jmp	off_6F542(pc,d1.w)
000F3B9C                            ; ---------------------------------------------------------------------------
000F3B9C 0000                       off_6F542:	dc.w loc_6F546-off_6F542 ; DATA	XREF: ROM:0006F53Ar
000F3B9E                            					; ROM:off_6F542o ...
000F3B9E 0000                       		dc.w loc_6F570-off_6F542
000F3BA0                            ; ---------------------------------------------------------------------------
000F3BA0                            
000F3BA0                            loc_6F546:				; DATA XREF: ROM:off_6F542o
000F3BA0 5428 0024                  		addq.b	#2,$24(a0)
000F3BA4 317C 0193 0008             		move.w	#$193,8(a0)
000F3BAA 317C 0102 000A             		move.w	#$102,$A(a0)
000F3BB0 217C 0000 0000 0004        		move.l	#byte_6F63A,4(a0)
000F3BB8 317C 2102 0002             		move.w	#$2102,2(a0)
000F3BBE 117C 0000 0001             		move.b	#0,1(a0)
000F3BC4 317C 0200 0018             		move.w	#$200,priority(a0)
000F3BCA                            
000F3BCA                            loc_6F570:				; DATA XREF: ROM:0006F544o
000F3BCA 4EF9 0001 5C3C             		jmp	DisplaySprite
000F3BD0                            ; ---------------------------------------------------------------------------
000F3BD0                            
000F3BD0                            loc_6F576:				; CODE XREF: ROM:0006F52Cj
000F3BD0 7000                       		moveq	#0,d0
000F3BD2 1028 0024                  		move.b	$24(a0),d0
000F3BD6 323B 0000                  		move.w	off_6F584(pc,d0.w),d1
000F3BDA 4EFB 1000                  		jmp	off_6F584(pc,d1.w)
000F3BDE                            ; ---------------------------------------------------------------------------
000F3BDE 0000                       off_6F584:	dc.w loc_6F588-off_6F584 ; DATA	XREF: ROM:0006F57Cr
000F3BE0                            					; ROM:off_6F584o ...
000F3BE0 0000                       		dc.w loc_6F5B2-off_6F584
000F3BE2                            ; ---------------------------------------------------------------------------
000F3BE2                            
000F3BE2                            loc_6F588:				; DATA XREF: ROM:off_6F584o
000F3BE2 5428 0024                  		addq.b	#2,$24(a0)
000F3BE6 317C 0191 0008             		move.w	#$191,8(a0)
000F3BEC 317C 00E2 000A             		move.w	#$E2,$A(a0) ; 'â'
000F3BF2 217C 0000 0000 0004        		move.l	#byte_6F67A,4(a0)
000F3BFA 317C 4157 0002             		move.w	#$4157,2(a0)
000F3C00 117C 0000 0001             		move.b	#0,1(a0)
000F3C06 317C 0180 0018             		move.w	#$180,priority(a0)
000F3C0C                            
000F3C0C                            loc_6F5B2:				; DATA XREF: ROM:0006F586o
000F3C0C 5228 0031                  		addq.b	#1,$31(a0)
000F3C10 0C28 000B 0031             		cmpi.b	#$B,$31(a0)
000F3C16 6D00 0000                  		blt.w	loc_6F5DA
000F3C1A 117C 0000 0031             		move.b	#0,$31(a0)
000F3C20 5228 0030                  		addq.b	#1,$30(a0)
000F3C24 0C28 0002 0030             		cmpi.b	#2,$30(a0)
000F3C2A 6600 0000                  		bne.w	loc_6F5DA
000F3C2E 117C 0000 0030             		move.b	#0,$30(a0)
000F3C34                            
000F3C34                            loc_6F5DA:				; CODE XREF: ROM:0006F5BCj
000F3C34                            					; ROM:0006F5D0j
000F3C34 1168 0030 001A             		move.b	$30(a0),$1A(a0)
000F3C3A 4EF9 0001 5C3C             		jmp	DisplaySprite
000F3C40                            ; ---------------------------------------------------------------------------
000F3C40                            
000F3C40                            loc_6F5E6:				; CODE XREF: ROM:0006F530j
000F3C40 7000                       		moveq	#0,d0
000F3C42 1028 0024                  		move.b	$24(a0),d0
000F3C46 323B 0000                  		move.w	off_6F5F4(pc,d0.w),d1
000F3C4A 4EFB 1000                  		jmp	off_6F5F4(pc,d1.w)
000F3C4E                            ; ---------------------------------------------------------------------------
000F3C4E 0000                       off_6F5F4:	dc.w loc_6F5F8-off_6F5F4 ; DATA	XREF: ROM:0006F5ECr
000F3C50                            					; ROM:off_6F5F4o ...
000F3C50 0000                       		dc.w loc_6F622-off_6F5F4
000F3C52                            ; ---------------------------------------------------------------------------
000F3C52                            
000F3C52                            loc_6F5F8:				; DATA XREF: ROM:off_6F5F4o
000F3C52 5428 0024                  		addq.b	#2,$24(a0)
000F3C56 317C 0124 0008             		move.w	#$124,8(a0)
000F3C5C 317C 00FF 000A             		move.w	#$FF,$A(a0)
000F3C62 217C 0000 0000 0004        		move.l	#byte_6F628,4(a0)
000F3C6A 317C 0000 0002             		move.w	#0,2(a0)
000F3C70 117C 0000 0001             		move.b	#0,1(a0)
000F3C76 117C 0000 0018             		move.b	#0,priority(a0)
000F3C7C                            
000F3C7C                            loc_6F622:				; DATA XREF: ROM:0006F5F6o
000F3C7C 4EF9 0001 5C3C             		jmp	DisplaySprite
000F3C82                            ; ---------------------------------------------------------------------------
000F3C82                            byte_6F628:	include		map1.asm
000F3C82                            ; --------------------------------------------------------------------------------
000F3C82                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F3C82                            ; --------------------------------------------------------------------------------
000F3C82                            
000F3C82                            SME_UkA14:	
000F3C82 0000                       		dc.w SME_UkA14_2-SME_UkA14	
000F3C84 03                         SME_UkA14_2:	dc.b 3	
000F3C85 000E 00C0 00               		dc.b 0, $E, 0, $C0, 0	
000F3C8A 000E 00CC 20               		dc.b 0, $E, 0, $CC, $20	
000F3C8F 000E 00D8 40               		dc.b 0, $E, 0, $D8, $40	
000F3C94                            		even
000F3C94                            		even
000F3C94                            byte_6F63A:	include		map2.asm
000F3C94                            ; --------------------------------------------------------------------------------
000F3C94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F3C94                            ; --------------------------------------------------------------------------------
000F3C94                            
000F3C94                            SME_beAal:	
000F3C94 0000 0000                  		dc.w SME_beAal_6-SME_beAal, SME_beAal_1B-SME_beAal	
000F3C98 0000                       		dc.w SME_beAal_30-SME_beAal	
000F3C9A 04                         SME_beAal_6:	dc.b 4	
000F3C9B F00F 0000 E0               		dc.b $F0, $F, 0, 0, $E0	
000F3CA0 F00F 0010 00               		dc.b $F0, $F, 0, $10, 0	
000F3CA5 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F3CAA 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F3CAF 04                         SME_beAal_1B:	dc.b 4	
000F3CB0 000D 0045 E0               		dc.b 0, $D, 0, $45, $E0	
000F3CB5 000D 004D 00               		dc.b 0, $D, 0, $4D, 0	
000F3CBA 0808 0020 C8               		dc.b 8, 8, 0, $20, $C8	
000F3CBF 0808 0820 20               		dc.b 8, 8, 8, $20, $20	
000F3CC4 03                         SME_beAal_30:	dc.b 3	
000F3CC5 F00F 0023 E0               		dc.b $F0, $F, 0, $23, $E0	
000F3CCA F00F 0033 00               		dc.b $F0, $F, 0, $33, 0	
000F3CCF 1004 0043 F8               		dc.b $10, 4, 0, $43, $F8	
000F3CD4                            		even
000F3CD4                            		even
000F3CD4                            byte_6F67A:	include		map3.asm
000F3CD4                            ; --------------------------------------------------------------------------------
000F3CD4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000F3CD4                            ; --------------------------------------------------------------------------------
000F3CD4                            
000F3CD4                            SME_lHRJj:	
000F3CD4 0000 0000                  		dc.w SME_lHRJj_4-SME_lHRJj, SME_lHRJj_F-SME_lHRJj	
000F3CD8 02                         SME_lHRJj_4:	dc.b 2	
000F3CD9 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000F3CDE 0808 000C F4               		dc.b 8, 8, 0, $C, $F4	
000F3CE3 02                         SME_lHRJj_F:	dc.b 2	
000F3CE4 E80B 000F F4               		dc.b $E8, $B, 0, $F, $F4	
000F3CE9 0808 001B F4               		dc.b 8, 8, 0, $1B, $F4	
000F3CEE                            		even
000F3CEE                            		even
000F3CEE                            unk_6F694:	incbin	SRBack.bin
000F4854                            		even
000F4854                            unk_701FA:	incbin	masteremerald.bin
000F4DA6 00                         		even
000F4DA6                            unk_7074C:	incbin SonicOnRetro.bin
000F5068                            		even
000F5068                            		even
000F5068                            		even
000F5068                            
000F5068                            ;ClearVDPStuff:
000F5068                            ;		jsr	clearplc
000F5068                            ;		jsr	pal_fadefrom
000F5068                            ;		lea	($FFFFF700).w,a1
000F5068                            ;		moveq	#0,d0
000F5068                            ;		move.w	#$3F,d1
000F5068                            
000F5068                            ;loc_30332A_2:					  ; ...
000F5068                            ;		move.l	d0,(a1)+
000F5068                            ;		dbf	d1,loc_30332A_2
000F5068                            ;		lea	($FFFFD000).w,a1
000F5068                            ;		moveq	#0,d0
000F5068                            ;		move.w	#$7FF,d1
000F5068                            
000F5068                            ;loc_30333A_2:					  ; ...
000F5068                            ;		move.l	d0,(a1)+
000F5068                            ;		dbf	d1,loc_30333A_2
000F5068                            ;		lea	($C00004).l,a6
000F5068                            ;		move.w	#$8004,(a6)
000F5068                            ;		move.w	#$8230,(a6)
000F5068                            ;		move.w	#$8407,(a6)
000F5068                            ;		move.w	#$8700,(a6)
000F5068                            ;		move.w	#$8B00,(a6)
000F5068                            ;		clr.b	($FFFFF64E).w
000F5068                            ;		disable_ints
000F5068                            ;		move.w	($FFFFF60C).w,d0
000F5068                            ;		andi.b	#$BF,d0
000F5068                            ;		move.w	d0,($C00004).l
000F5068                            ;		jsr	ClearScreen
000F5068                            ;		rts
000F5068                            
000F5068                            ;	include aplib.asm
000F5068                            ;tree_tile:
000F5068                            ;	incbin	treet.apl
000F5068                            ;	even
000F5068                            ;tree_pal:
000F5068                            ;	incbin	treep.bin
000F5068                            ;	even
000F5068                            ;tree_map:
000F5068                            ;	incbin	treem.eni
000F5068                            ;	even
000F5068                            		include  EniCredProg.asm
000F5068                            ; How to install this:
000F5068                            
000F5068                            ; Go to "Cred_ClrPallet:"
000F5068                            ; Replace:
000F5068                            ; "		move.b	#$8A,($FFFFD080).w ; load credits object"
000F5068                            ; with:
000F5068                            ; "		jsr	Credits_MapLoad"
000F5068                            ; Now, go to the "end of ROM", and put this above it:
000F5068                            
000F5068                            ;		include  EniCredProg.asm
000F5068                            ;		even
000F5068                            ;EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F5068                            ;		even
000F5068                            ;EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F5068                            ;		even
000F5068                            ;EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F5068                            ;		even
000F5068                            ;EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F5068                            ;		even
000F5068                            ;EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F5068                            ;		even
000F5068                            ;EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F5068                            ;		even
000F5068                            ;EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F5068                            ;		even
000F5068                            ;EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F5068                            ;		even
000F5068                            ;EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F5068                            ;		even
000F5068                            ;EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F5068                            ;		even
000F5068                            
000F5068                            ; Then uncomment it
000F5068                            
000F5068                            Credits_Mappings:
000F5068 0000 0000                  		dc.l	EniCred_0	; credit id = 0
000F506C 0000 0000                  		dc.l	EniCred_1	; credit id = 1
000F5070 0000 0000                  		dc.l	EniCred_2	; credit id = 2
000F5074 0000 0000                  		dc.l	EniCred_3	; credit id = 3
000F5078 0000 0000                  		dc.l	EniCred_4	; credit id = 4
000F507C 0000 0000                  		dc.l	EniCred_5	; credit id = 5
000F5080 0000 0000                  		dc.l	EniCred_6	; credit id = 6
000F5084 0000 0000                  		dc.l	EniCred_7	; credit id = 7
000F5088 0000 0000                  		dc.l	EniCred_8	; credit id = 8
000F508C 0000 0000                  		dc.l	EniCred_9	; credit id = 9
000F5090                            
000F5090                            Credits_MapLoad:
000F5090 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000F5096 6600                       		bne.s	Credits_MapLoad_Title
000F5098                            		
000F5098 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000F509C D040                       		add.w	d0,d0
000F509E D040                       		add.w	d0,d0
000F50A0 207B 00C6                  		movea.l	Credits_Mappings(pc,d0.w),a0
000F50A4 4EF9 0000 0000             		jmp	Credits_MapLoad_cont
000F50AA                            		
000F50AA                            Credits_MapLoad_Title:
000F50AA 41F9 0000 0000             		lea EniCred_Title,a0
000F50B0                            
000F50B0                            Credits_MapLoad_cont:
000F50B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000F50B6 7000                       		moveq	#0,d0		; location of art in VRAM
000F50B8 4EB8 389E                  		jsr	EniDec
000F50BC                            		;lea	($FF0000).l,a1	; EniDec doesn't change a1
000F50BC 203C 4000 0003             		move.l	#$40000003,d0
000F50C2 7227                       		moveq	#40-1,d1	 ; X size = 40
000F50C4 741B                       		moveq	#28-1,d2	 ; Y size = 28
000F50C6 4EF8 34A0                  		jmp	ShowVDPGraphics
000F50CA                            ;EniCredEnd:
000F50CA                            ;		rts
000F50CA                            
000F50CA                            EniCred_0:	incbin	credeni\cred0.bin	; Credits #0 mappings
000F5120                            		even
000F5120                            EniCred_1:	incbin	credeni\cred1.bin	; Credits #1 mappings
000F517C                            		even
000F517C                            EniCred_2:	incbin	credeni\cred2.bin	; Credits #2 mappings
000F51CE                            		even
000F51CE                            EniCred_3:	incbin	credeni\cred3.bin	; Credits #3 mappings
000F5238                            		even
000F5238                            EniCred_4:	incbin	credeni\cred4.bin	; Credits #4 mappings
000F529A                            		even
000F529A                            EniCred_5:	incbin	credeni\cred5.bin	; Credits #5 mappings
000F530A                            		even
000F530A                            EniCred_6:	incbin	credeni\cred6.bin	; Credits #6 mappings
000F5376                            		even
000F5376                            EniCred_7:	incbin	credeni\cred7.bin	; Credits #7 mappings
000F5418                            		even
000F5418                            EniCred_8:	incbin	credeni\cred8.bin	; Credits #8 mappings
000F5472                            		even
000F5472                            EniCred_9:	incbin	credeni\cred9.bin	; Credits #9 mappings
000F54C0                            		even
000F54C0                            EniCred_Title:	incbin	credeni\credtitle.bin	; "Sonic Team Presents" mappings
000F551E                            		even
000F551E                            		even
000F551E                            		even
000F551E                            		
000F551E                            SoundDriverASM:
000F551E                            		even
000F551E                            
000F551E                            EndOfRom:
000F551E                            ;		include 's3driver.asm'
000F551E                            ;		include	"Echo\68k\s2_option.asm"
